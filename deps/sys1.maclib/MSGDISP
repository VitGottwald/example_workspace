         MACRO                                                          00050000
&NAME   MSGDISP  &SERVICE,&DEBUG,                                      C00100000
               &DCB=,&TXT=,&MF=,&UCB=,&SER=,&LABEL=,                   C00150000
               &DISP=,&MSER=,&MLABEL=,&UCBL=,&TXT2=,                   C00200000
               &VOL=,&FLASH=,&FORCE=,&WAIT=,&TEST=,                    c00237500
               &INDEX=,&MEDIATYPE=                                 @02c 00275000
.* ******************************************************************** 00312500
.*$MAC(MSGDISP) : MESSAGE DISPLAY MACRO                               * 00350000
.*                                                                    * 00368700
.*                                                                    * 00387500
.* FUNCTION - ESTABLISH PROTOCOLS TO REQUEST MSGDISP SERVICE          * 00425000
.*                                                                    * 00462500
.********************************************************************** 00500000
.*  PROPRIETARY V3 STATEMENT                                          * 00537500
.*  LICENSED MATERIALS - PROPERTY OF IBM                              * 00575000
.*  "RESTRICTED MATERIALS OF IBM"                                     * 00612500
.*  5695-DF1                                                          * 00650000
.*  (C) COPYRIGHT 1983,1984  IBM CORP.                                * 00687500
.*  END PROPRIETARY V3 STATEMENT                                      * 00725000
.********************************************************************** 00762500
.*                                                                    * 00800000
.* STATUS =  DFSMS 1.6.0                                          @L1C* 00800600
.*                                                                    * 00801200
.* The MEDIATYPE keyword is being added for MTL, supported        @02a* 00801800
.* invocations of the keyword will be by coding the explicit      @02a* 00802400
.* unquoted literal or by passing the address of a one byte       @02a* 00803000
.* area containing the value.  In addition this form of           @02a* 00803600
.* invocation will be extended to the INDEX keyword.              @02a* 00804200
.*                                                                @02a* 00804800
.* Additional changes made with this support will be to add       @02a* 00805400
.* explicit indicators for RX format and 'unquoted literal'       @02a* 00806000
.* specifications.                                                @02a* 00806600
.*                                                                @02a* 00807200
.* An unquoted literal is one that takes on the explicit value    @02a* 00807800
.* that is specified in the macro invocation.  An example of      @02a* 00808400
.* that is the YES/NO specification that can used with the        @02a* 00809000
.* TEST, WAIT, and INDEX keywords.  In other words the macro      @02a* 00809600
.* invocation looks like:                                         @02a* 00810200
.*                                                                @02a* 00810800
.*         MSGDISP MOUNT,SER='ABC',UCB=(2),TEST=YES,...           @02a* 00811400
.*                                                                @02a* 00812000
.* In this example, YES is an unquoted literal, where 'ABC' on    @02a* 00812600
.* the SER keyword is a quoted literal, referred to as LITERAL    @02a* 00813200
.* in this macro.                                                 @02a* 00813800
.*                                                                @02a* 00814400
.* The logic in the macro, heretofore, has been that explicit     @02a* 00815000
.* checks for NULL, LITERAL, ADCON, REG (2-12), REG01 (0 and 1)   @02a* 00815600
.* are made and bits set if that specific format is detected.     @02a* 00816200
.* If none of the flags are on, it is assumed that the format     @02a* 00816800
.* is RX, though no bit is set to indicate this.  This, of        @02a* 00817400
.* course, applies to the unquoted literal specification.  One    @02a* 00818000
.* ramification of the use of the unquoted literal is that it     @02a* 00818600
.* is mutually exclusive of the RX format.                        @02a* 00819200
.*                                                                      00819800
.* The format of the parameter list built and passed to           @02a* 00820400
.* IGX00030 is also changing in a way incompatible with           @02a* 00821000
.* previous versions of the SVC, which means that a compilation   @02a* 00821600
.* using this version of the macro will not work with old         @02a* 00822200
.* versions of IGX00030.  The formats of the parameter lists      @02a* 00822800
.* are compared below:                                            @02a* 00823400
.*                                                                @02a* 00824000
.*                                                                @02a* 00824600
.*     Old format:                                                @02a* 00825200
.*                                                                @02a* 00825800
.*     +--------------------------------------------------+       @02a* 00826400
.*  +0 !Service type!4-bit IOSLVL!CART from   !   LAB     ! +0    @02a* 00827000
.*     !MOUNT, RDY, !from FORCE  !     VOL,   !    &      !       @02a* 00827600
.*     !VERIFY,...  !Flags:      !FLASH from  !   MLAB    !       @02a* 00828200
.*     !            !'80' unused,!      FLASH !           !       @L2C* 00828800
.*     !            !NoWait,     !            !           !       @02a* 00829400
.*     !            !1 UCB vs    !            !           !       @02a* 00830000
.*     !            !  UCBL,     !            !           !       @02a* 00830600
.*     !            !Don't Index !            !           !       @02a* 00831200
.*     +--------------------------------------------------+       @02a* 00831800
.*  +4 !              Pointer to TXT1 field               ! +4    @02a* 00832400
.*     +--------------------------------------------------+       @02a* 00833000
.*  +8 !              Pointer to TXT2 field               ! +8    @02a* 00833600
.*     +--------------------------------------------------+       @02a* 00834200
.*  +C !              Pointer to DCB/UCB                  ! +12   @02a* 00834800
.*     +--------------------------------------------------+       @02a* 00835400
.*  +10! Beginning of literals for normal/list forms      ! +16   @02a* 00836000
.*     +--------------------------------------------------+       @02a* 00836600
.*                                                                @02a* 00837200
.*                                                                @02a* 00837800
.*     New format:                                                @02a* 00838400
.*                                                                @02a* 00839000
.*     +--------------------------------------------------+       @02a* 00839600
.*  +0 !            !4-bit IOSLVL!CART from   !    LAB    ! +0    @02a* 00840200
.*     !    x'FF'   !from FORCE  !     VOL,   !     &     !       @02a* 00840800
.*     !            !Flags:      !FLASH from  !    MLAB   !       @02a* 00841400
.*     ! Indicates  !'80' unused,!      FLASH !           !       @L2C* 00842000
.*     ! new format ! NoWait,    !            !           !       @02a* 00842600
.*     ! plist      ! 1 UCB vs   !            !           !       @02a* 00843200
.*     !            !   UCBL,    !            !           !       @02a* 00843800
.*     !            ! Don't Index!            !           !       @02a* 00844400
.*     +--------------------------------------------------+       @02a* 00845000
.*  +4 !              Pointer to TXT1 field               ! +4    @02a* 00845600
.*     +--------------------------------------------------+       @02a* 00846200
.*  +8 !              Pointer to TXT2 field               ! +8    @02a* 00846800
.*     +--------------------------------------------------+       @02a* 00847400
.*  +C !              Pointer to DCB/UCB                  ! +12   @02a* 00848000
.*     +--------------------------------------------------+       @02a* 00848600
.*  +10!Service type!New keywords!  Reserved  ! Reserved  ! +16   @02a* 00849200
.*     !MOUNT, RDY, !flags ind.  !            !           !       @02a* 00849800
.*     !VERIFY,...  !those that  !            !           !       @02a* 00850400
.*     !(previously !need pointer!            !           !       @02a* 00851000
.*     ! at +0)     !in this     !            !           !       @02a* 00851600
.*     !            !plist.      !            !           !       @02a* 00852200
.*     !            !Currently:  !            !           !       @02a* 00852800
.*     !            !INDEX &     !            !           !       @02a* 00853400
.*     !            !MEDIATYPE   !            !           !       @02a* 00854000
.*     +--------------------------------------------------+       @02a* 00854600
.*  +14!              Pointer to Index field              ! +20   @02a* 00855200
.*     +--------------------------------------------------+       @02a* 00855800
.*  +18!              Pointer to Mediatype field          ! +24   @02a* 00856400
.*     +--------------------------------------------------+       @02a* 00857000
.*  +1C! Beginning of literals for normal/list forms      ! +28   @02a* 00857600
.*     +--------------------------------------------------+       @02a* 00858200
.*                                                                @02a* 00858800
.*                                                                @02a* 00859400
.* Changes include:                                               @02a* 00860000
.*                                                                @02a* 00860600
.* - Explicit setting of an RX format indicator if supported,     @02a* 00861200
.*   If the RX format is detected, a check will be done to        @02a* 00861800
.*   ensure that the format is supported.  If not supported a     @02a* 00862400
.*   check to determine if the unquoted literal format is         @02a* 00863000
.*   supported.  If supported, an explicit flag indicator will    @02a* 00863600
.*   be set, if not supported, an error will be indicated.        @02a* 00864200
.*                                                                @02a* 00864800
.* - Determination of support of an indicated format and          @02a* 00865400
.*   flagging with an error if not supported.                     @02a* 00866000
.*                                                                    * 00866600
.* - Added a DEBUG feature to cause generation of MNOTE           @02a* 00867200
.*   debugging messages.                                          @02a* 00867800
.*                                                                    * 00868400
.*                                                                    * 00875000
.* CHANGE ACTIVITY =                                                  * 00912500
.*$H0=3480,HDQ1102,T81XXXX,STLJK:                                     * 00950000
.*$H1=3480,HDQ1102,KCD0149,STLHWB:                                    * 00987500
.*$H2=3480,JDP1111,,STLPKH:                                           * 01025000
.*$01=OZ98089,HDP2210,,088GEC: FIX SER=ADDRESS,MSER=LITERAL   @ZA98089* 01062500
.*$L1=UCBVSCR,HDZ11C0,SJPLLRU: UCB ABOVE THE LINE                 @L1A* 01100000
.*$H3=OW38736,HDZ11E0,SJPLLRU: BLYTHE2, ADD INDEX KEYWORD         @H3A* 01137500
.*$02=OW45271,HDZ11F0,SJPLLRU: MTL, New keyword MEDIATYPE             * 01150000
.*                             update INDEX keyword processing    @02A* 01162500
.*$03=OW47283,HDZ11F0,SJPLLRU: Change &LITIX -> &RXFMTIX for CHKRX    * 01165600
.*                             processing for DISP keyword, and       * 01168700
.*                             allow REG format for FORCE         @03A* 01171800
.*$04=OW47424,HDZ11E0,SJPLGSJ: CAUSES 0C4 WHEN CALLED FOR FORCE   @04A* 01173400
.*$05=OW48717,HDZ11E0,SJPLRDB: NOWAIT flag set for WAIT=YES.      @05A* 01173500
.*                             Instruction "IC 0,1(1)" causes IC  @05A* 01173600
.*                             into R0 from location 1 because R1 @05A* 01173700
.*                             does not contain parmlist address. @05A* 01173800
.*                             Location 1 contains the load PSW,  @05A* 01173900
.*                             including a bit that causes the    @05A* 01174000
.*                             NOWAIT flag to be set. Changed the @05A* 01174100
.*                             instruction to "IC 0,1+PARMPTR".   @05A* 01174200
.*$06=OW49566,HDZ11E0,SJPLRDB: Loop while processing TXT2 literal.@06A* 01174600
.*$L2=K1K0279,HDZ11K0,STLGSJ:  REMOVED HARDCODING OF IOSLEVEL FROM    * 01177100
.*                             THIS MACRO.  THE SPECIFICATION OF      * 01179600
.*                             IOSLEVEL VIA KEYWORDS SUCH AS DAVV,    * 01182100
.*                             FDEV, ETC. WERE HARDCODED AND          * 01184600
.*                             INCORRECT IN THIS MACRO.  ONLY ONE     * 01187100
.*                             MODULE IN DFSMS AND BCP USES THE       * 01189600
.*                             FORCE KEYWORD AS FAR AS WE KNOW.       * 01192100
.*                             THAT MODULE IS THE DDR EXIT, IECL0TA6, * 01194600
.*                             WHICH USES FORCE=(REGX) IN ORDER TO    * 01197100
.*                             DO I/O AT THE DDR LEVEL.  THIS IS      * 01199600
.*                             THE ONLY USAGE OF THE FORCE KEYWORD    * 01202100
.*                             THAT IS ACCEPTED NOW.              @L2A* 01204600
.*$H4=OA13106,HDZ11G0,SJPLTLB: 3592-E05 (Jaguar 2) Support -      @H4A* 01205100
.*                             New display format for MEDIA10 and @H4A* 01205600
.*                             future media on MTL drives. See    @H4A* 01206100
.*                             module IGC0103I for more details.  @H4A* 01206600
.*                                                                    * 01207100
.********************************************************************** 01209600
.*                                                                    * 01212500
.**************************-*PSEUDOCODE*-****************************** 01250000
.*                                                                    * 01300000
.*MSGDISP :                                                           * 01350000
.* PROC .                                                             * 01400000
.* SET ATTRIBUTE BIT ARRAYS .                                         * 01450000
.* IF FUNCTION REQUESTED NOT VALID THEN                               * 01500000
.*   DO .                                                             * 01550000
.*     ISSUE ERROR MESSAGE CODE 12 .                                  * 01600000
.*     EXIT .                                                         * 01650000
.*   END .                                                            * 01700000
.* PROC ERROR CHECKING.                                               * 01750000
.*    /*THESE FUNCTIONS USE POSITIONAL OPRAND NUMBER TWO    */        * 01800000
.*    /*TO INVOKE CHECKING SERVICES WHICH ARE RESTRICTED TO */        * 01850000
.*    /* RECURSIVE INNER MACRO CALLS.                       */        * 01900000
.*    VERIFY NO KEYWORDS ARE SPECIFIED WHICH ARE                      * 01950000
.*       INCOMPATIBLE WITH THE  SERVICE REQUESTED .                   * 02000000
.*    VERIFY REQUIRED KEYWORDS FOR THIS SERVICE ARE SPECIFIED .       * 02050000
.*    VERIFY NO MUTUALLY  EXCLISIVE KEYWORDS ARE SPECIFIED .          * 02100000
.* END END OF ERROR CHECKING PROC.                                    * 02150000
.* CASE SELECT ACTION ON MF = OPRAND .                                * 02200000
.*   SUBCASE MF = E , EXECUTE FORM .                                  * 02250000
.*     EXAMINE EACH KEYWORD AND BUILD CODE TO SET PARAMETER LIST .    * 02300000
.*     BUILD SVC CALL AT LABEL 'SVCTEST' .                            * 02350000
.*   ENDSUB .                                                         * 02400000
.*   SUBCASE MF = '' , NORMAL FORM .                                  * 02450000
.*     EXPAND CODE TO SET REG1 TO ADDRESS OF PARAMETER LIST .         * 02500000
.*     PASS THROUGH LIST FORM SECTION TO BUILD PARAMETER LIST .       * 02550000
.*     EXPAND CODE FOR SVC CALL .                                     * 02600000
.*   ENDSUB .                                                         * 02650000
.*   SUBCASE MF = L , LIST FORM .                                     * 02700000
.*     EXPAND LIST USING SAME SECTION AS NORMAL FORM .                * 02750000
.*   ENDSUB .                                                         * 02800000
.* ENDCASE .                                                          * 02850000
.* END MSGDISP .                                                      * 02900000
.*************************-END-PSEUDOCODE-****************************/ 02950000
.*                                                                   *  03050000
.*********************************************************************  03075000
.*            LOCAL WORK SYMBOLS                                    *   03087500
.*********************************************************************  03100000
.*                                                                      03112500
         LCLC       &LABEL1,&WORK1,&WORK2,&FLAGS,&FUNCTON         @02c  03125000
         LCLC       &F0,&F1,&F2,&F3,&F4,&FH,&FT,&FS               @H2C  03137500
         LCLC       &LITVALINDEX             Extracted literal val@02a  03150000
         LCLA       &LENGTH,&KNT,&J                               @02A  03162500
         LCLB       &DEBUGON                                      @02a  03175000
.*                                                                      03187500
.*********************************************************************  03200000
.* The following arrays, referred to as the 'F' arrays, reflect      *  03200100
.* what was specified on the call to this macro.  The bit positions  *  03200200
.* correspond to the format specified on the call.  Both these       *  03200300
.* arrays and the FMT arrays use the same positional indices.  The   *  03200400
.* indices are defined by the &LITIX, &NULLIX, &REGIX, etc. defined  *  03200500
.* later.  Those indices are:                                        *  03200600
.*                                                                   *  03200700
.*            BIT 1 = 1 KEYWORD IS NULL                              *  03200800
.*            BIT 2 = 1 KEYWORD IS A LITERAL (quoted)                *  03200900
.*            BIT 3 = 1 KEYWORD IS A REG                             *  03201000
.*            BIT 4 = 1 KEYWORD IS REG 1 OR 0                        *  03201100
.*            BIT 5 = 1 KEYWORD IS AN ADCON                          *  03201200
.*            BIT 6 = 1 RX FORMAT                                @02c*  03201300
.*            BIT 7 = 1 UNQUOTED LITERAL                         @02c*  03201400
.*********************************************************************  03201500
         GBLB  &DCBF(7),&TXTF(7),&UCBF(7),&INDEXF(7)               @02c 03201600
         GBLB  &SERF(7),&LABELF(7),&DISPF(7),&MSERF(7)             @02c 03201700
         GBLB  &MLABELF(7),&UCBLF(7),&TXT2F(7),&WAITF(7)           @02c 03201800
         GBLB  &VOLF(7),&MFE(7),&FLASHF(7),&FORCEF(7),&TESTF(7)    @02c 03201900
         GBLB  &MEDTF(7)                                           @02a 03202000
.*                                                                      03202100
.*       *---------------------------------------------------*          03202200
.*       * Declare and set the index values used with the    *          03202300
.*       * 'F' arrays                                        *          03202400
.*       *---------------------------------------------------*          03202500
         GBLA    &NULLIX,&LITIX,&REGIX,&REG01IX,&ADCONIX,&RXFMTIX  @02c 03202600
         GBLA    &UNQUOTEIX,&HIGHIX                                @02a 03202700
.*                                                                      03202800
&NULLIX    SETA  1                                                      03202900
&LITIX     SETA  2                                                      03203000
&REGIX     SETA  3                                                      03203100
&REG01IX   SETA  4                                                      03203200
&ADCONIX   SETA  5                                                      03203300
&RXFMTIX   SETA  6                                                      03203400
&UNQUOTEIX SETA  7                                                      03203500
&HIGHIX    SETA  &UNQUOTEIX                 Set to highest index   @02a 03203600
.*                                                                      03203700
.*********************************************************************  03203800
.* Set up arrays with name of function and a bit map of the          *  03203900
.* keywords that are valid with that function.  This array is used   *  03204000
.* to detect keywords that are invalid for the service requested.    *  03204100
.*                                                                   *  03204200
.*                     MAP = 0 do not check                          *  03204300
.*                     MAP = 1 check for null                        *  03204400
.*                                                                   *  03204500
.* If a check is made and the value is not null issue an error       *  03204600
.* MNOTE, because the keyword is not valid with the service          *  03204700
.* requested.  The positions in the map variable are:                *  03204800
.*                                                                   *  03204900
.*  POSITION  KEYWORD   POSITION  KEYWORD   POSITION  KEYWORD        *  03205000
.*     1      DCB           8     MSER         15     FORCE          *  03205100
.*     2       ?            9     MLABEL       16     WAIT           *  03205200
.*     3      MF           10     UCBL         17     TEST           *  03205300
.*     4      UCB          11     TXT          18     INDEX          *  03205400
.*     5      SER          12     TXT2         19     MEDIATYPE      *  03205500
.*     6      LABEL        13     VOL                                *  03205600
.*     7      DISP         14     FLASH                              *  03205700
.*********************************************************************  03205800
         LCLC     &SVCR(7),&MAP(7),&M                                   03205900
&SVCR(1) SETC    'RDY'                                                  03206000
&MAP(1)  SETC    '0101111111011111111'                             @02C 03206100
&SVCR(2) SETC    'MOUNT'                                                03206200
&MAP(2)  SETC    '1100001111111100000'                             @02C 03206300
&SVCR(3) SETC    'VERIFY'                                               03206400
&MAP(3)  SETC    '1000001111111100011'                             @02C 03206500
&SVCR(4) SETC    'DEMOUNT'                                              03206600
&MAP(4)  SETC    '1100010001111100000'                             @02C 03206700
&SVCR(5) SETC    'RESET'                                                03206800
&MAP(5)  SETC    '1100111110111100011'                             @02C 03206900
&SVCR(6) SETC    'GEN'                                                  03207000
&MAP(6)  SETC    '1100111111000000011'                             @02C 03207100
.*                                                                      03207200
.*********************************************************************  03207300
.* This array definition added with MTL changes.                 @02a*  03207400
.*                                                                   *  03207500
.* Set up arrays with name of the keywords and their valid formats.  *  03207600
.* A 1 in the format position for a given keyword indicates that     *  03207700
.* the format is valid for that keyword.  A 0 indicates the format   *  03207800
.* is not valid for that keyword.                                    *  03207900
.*                                                                   *  03208000
.* Exceptions have to be treated separately.  The only current       *  03208100
.* exception is that register 1, REG01, cannot be specified for the  *  03208200
.* address in MF=(E,addr) on the GEN function.                       *  03208300
.*                                                                   *  03208400
.* Errors will be noted via an MNOTE 12.                             *  03208500
.*                                                                   *  03208600
.* The positions in the format array, FMT must be kept the same as   *  03208700
.* their positions in the DCBF, WAITF, etc arrays, ie, the           *  03208800
.* positions use the same index variables, &LITIX, &NULLIX, etc.     *  03208900
.*                                                                   *  03209000
.*  POSITION  KEYWORD                                                *  03209100
.*     1      NULL (CHKFMT never called when NULL on)                *  03209200
.*     2      LITERAL                                                *  03209300
.*     3      REG (2-12)                                             *  03209400
.*     4      REG01 (0, 1)                                           *  03209500
.*     5      ADCON                                                  *  03209600
.*     6      RXFMT                                                  *  03209700
.*     7      UNQUOTE (unquoted literal)                             *  03209800
.*                                                                   *  03209900
.* In addition, each keyword has an index variable set to the        *  03210000
.* corresponding index value in the KYWD array as do each of the     *  03210100
.* format bits in the FMT array.  If any of these indices change so  *  03210200
.* must the related index variables.                                 *  03210300
.*************************************************************** @02a*  03210400
         GBLC    &KYWD(19),&FMT(19)                                     03210500
.*                                                                      03210600
.*       *---------------------------------------------------*          03210700
.*       * Set the KYWD and FMT array values                 *          03210800
.*       *---------------------------------------------------*          03210900
&KYWD(1)    SETC 'DCB'                                                  03211000
&FMT(1)     SETC '1010110'                                              03211100
&KYWD(2)    SETC 'DISP'                                                 03211200
&FMT(2)     SETC '1110110'                                              03211300
&KYWD(3)    SETC 'FLASH'                                                03211400
&FMT(3)     SETC '1000001'                                              03211500
&KYWD(4)    SETC 'FORCE'                                                03211600
&FMT(4)     SETC '1011001'                                        @03c  03211700
&KYWD(5)    SETC 'INDEX'                                                03211800
&FMT(5)     SETC '1110101'                                              03211900
&KYWD(6)    SETC 'LABEL'                                                03212000
&FMT(6)     SETC '1110110'                                              03212100
&KYWD(7)    SETC 'MEDIATYPE'                                            03212200
&FMT(7)     SETC '1110110'                                              03212300
&KYWD(8)    SETC 'MF'                                                   03212400
&FMT(8)     SETC '1011010'                                              03212500
&KYWD(9)    SETC 'MLABEL'                                               03212600
&FMT(9)     SETC '1110110'                                              03212700
&KYWD(10)   SETC 'MSER'                                                 03212800
&FMT(10)    SETC '1110110'                                              03212900
&KYWD(11)   SETC 'SER'                                                  03213000
&FMT(11)    SETC '1110110'                                              03213100
&KYWD(12)   SETC 'TEST'                                                 03213200
&FMT(12)    SETC '1000001'                                              03213300
&KYWD(13)   SETC 'TXT'                                                  03213400
&FMT(13)    SETC '1110110'                                              03213500
&KYWD(14)   SETC 'TXT2'                                                 03213600
&FMT(14)    SETC '1110110'                                              03213700
&KYWD(15)   SETC 'UCB'                                                  03213800
&FMT(15)    SETC '1010000'                                              03213900
&KYWD(16)   SETC 'UCBL'                                                 03214000
&FMT(16)    SETC '1011110'                                              03214100
&KYWD(17)   SETC 'VOL'                                                  03214200
&FMT(17)    SETC '1000001'                                              03214300
&KYWD(18)   SETC 'WAIT'                                                 03214400
&FMT(18)    SETC '1000001'                                              03214500
.*                                                                      03214600
.*       *---------------------------------------------------*          03214700
.*       * Declare and set the index values used with the    *          03214800
.*       * KYWD and FMT arrays.                              *          03214900
.*       *---------------------------------------------------*          03215000
         GBLA    &DCBIX, &DISPIX,&FLASHIX,&FORCEIX,&INDEXIX             03215100
         GBLA    &LABELIX,&MEDTIX,&MFIX,&MLABELIX,&MSERIX,&SERIX        03215200
         GBLA    &TESTIX,&TXTIX,&TXT2IX,&UCBIX,&UCBLIX,&VOLIX           03215300
         GBLA    &WAITIX                                                03215400
.*                                                                      03215500
&DCBIX     SETA  1                                                      03215600
&DISPIX    SETA  2                                                      03215700
&FLASHIX   SETA  3                                                      03215800
&FORCEIX   SETA  4                                                      03215900
&INDEXIX   SETA  5                                                      03216000
&LABELIX   SETA  6                                                      03216100
&MEDTIX    SETA  7                                                      03216200
&MFIX      SETA  8                                                      03216300
&MLABELIX  SETA  9                                                      03216400
&MSERIX    SETA  10                                                     03216500
&SERIX     SETA  11                                                     03216600
&TESTIX    SETA  12                                                     03216700
&TXTIX     SETA  13                                                     03216800
&TXT2IX    SETA  14                                                     03216900
&UCBIX     SETA  15                                                     03217000
&UCBLIX    SETA  16                                                     03217100
&VOLIX     SETA  17                                                     03217200
&WAITIX    SETA  18                                                     03217300
.*                                                                      03217400
.*********************************************************************  03217500
.* The following variables define the hex bit setting in the new     *  03217600
.* 'Keywords Used' flag byte now built at offset x'11' into the      *  03217700
.* parameter list passed to the SVC.  These flags will be on if the  *  03217800
.* keyword was specified, and a pointer in the plist to the value    *  03217900
.* specified for the keyword is required.  If a pointer is           *  03218000
.* indicated to exist, then all previous pointer fields will, of     *  03218100
.* necessity, also exist, whether they were specified or not.        *  03218200
.* However, their flag bits will only be on if there is a pointer    *  03218300
.* to the relevant value in the parameter list.                      *  03218400
.*                                                                   *  03218500
.* Everytime a new keyword that requires a new pointer field in the  *  03218600
.* parameter list is introduced, this list of offset variables must  *  03218700
.* be updated as must the generation of the fields themselves.       *  03218800
.*                                                                   *  03218900
.* The indicator that we have this new format of the parameter list  *  03219000
.* is an x'FF' in byte 0 of the plist.                               *  03219100
.*                                                                   *  03219200
.* Currently supported keywords are INDEX (which can now accept the  *  03219300
.* quoted literal, register, and adcon forms of invocation, in       *  03219400
.* addition to the unquoted literal form that was previously         *  03219500
.* supported), and MEDIATYPE.                                        *  03219600
.*                                                                   *  03219700
.*            BIT 1 = 1 pointer to INDEX value is non-zero           *  03219800
.*            BIT 2 = 1 pointer to MEDIATYPE value is non-zero       *  03219900
.*            BIT 3 - 8 Reserved                                     *  03220000
.*********************************************************************  03220100
         LCLC  &KWDINDEXBIT,&KWDMEDTBIT                            @02c 03220200
.*                                                                      03220300
&KWDINDEXBIT SETC 'X'.''''.'80'.''''                                    03220400
&KWDMEDTBIT  SETC 'X'.''''.'40'.''''                                    03220500
.*                                                                      03220600
.*                                                                      03220700
.*********************************************************************  03220800
.* The following variables define the offset into the parameter list *  03220900
.* for the various fields.  This is done to avoid having to code the *  03221000
.* explicit numeric offsets, and it makes it easier to move fields   *  03221100
.* around, if necessary (THOUGH STRONGLY DENOUNCED]]]).  The offsets *  03221200
.* comply with the picture below. SHOULD THIS CHANGE, UPDATE THIS    *  03221300
.* PICTURE AND THE ONE IN THE PROLOGUE]]]]                           *  03221400
.*                                                                   *  03221500
.*     +--------------------------------------------------+          *  03221600
.*  +0 !            !4-bit IOSLVL!CART from   !    LAB    !          *  03221700
.*     !    x'FF'   !from FORCE  !     VOL,   !     &     !          *  03221800
.*     !            !Flags:      !FLASH from  !    MLAB   !          *  03221900
.*     ! Indicates  !'80' unused,!      FLASH !           !      @L2C*  03222000
.*     ! new format ! NoWait,    !            !           !          *  03222100
.*     ! plist      ! 1 UCB vs   !            !           !          *  03222200
.*     !            !   UCBL,    !            !           !          *  03222300
.*     !            ! Don't Index!            !           !          *  03222400
.*     +--------------------------------------------------+          *  03222500
.*  +4 !                                                  !          *  03222600
.*     !              Pointer to TXT1 field               !          *  03222700
.*     !                                                  !          *  03222800
.*     +--------------------------------------------------+          *  03222900
.*  +8 !                                                  !          *  03223000
.*     !              Pointer to TXT2 field               !          *  03223100
.*     !                                                  !          *  03223200
.*     +--------------------------------------------------+          *  03223300
.*  +C !                                                  !          *  03223400
.*     !              Pointer to DCB/UCB                  !          *  03223500
.*     !                                                  !          *  03223600
.*     +--------------------------------------------------+          *  03223700
.*  +10!Service type!New keywords!  Reserved  ! Reserved  !          *  03223800
.*     !MOUNT, RDY, !flags ind.  !            !           !          *  03223900
.*     !VERIFY,...  !those that  !            !           !          *  03224000
.*     !(previously !need pointer!            !           !          *  03224100
.*     ! at +0)     !in this     !            !           !          *  03224200
.*     !            !plist.      !            !           !          *  03224300
.*     !            !Currently:  !            !           !          *  03224400
.*     !            !INDEX &     !            !           !          *  03224500
.*     !            !MEDIATYPE   !            !           !          *  03224600
.*     +--------------------------------------------------+          *  03224700
.*  +14!                                                  !          *  03224800
.*     !              Pointer to Index field              !          *  03224900
.*     !                                                  !          *  03225000
.*     +--------------------------------------------------+          *  03225100
.*  +14!                                                  !          *  03225200
.*     !              Pointer to Mediatype field          !          *  03225300
.*     !                                                  !          *  03225400
.*     +--------------------------------------------------+          *  03225500
.*                                                                   *  03225600
.*********************************************************************  03225700
         GBLA  &TYPOFF,&LVLOFF,&CRTOFF,&LABOFF,&TX1OFF,&TX2OFF,    @02a 03225800
         GBLA  &UCBOFF,&NTPOFF,&KWDOFF,&IXOFF,&MTPOFF              @02a 03225900
         GBLA  &FIRSTLITOFF,&CURLITOFF                             @02a 03226000
                                                                        03226100
.*                                                                      03226200
&TYPOFF      SETA   0                                              @02a 03226300
&LVLOFF      SETA   1                                              @02a 03226400
&CRTOFF      SETA   2                                              @02a 03226500
&LABOFF      SETA   3                                              @02a 03226600
&TX1OFF      SETA   4                                              @02a 03226700
&TX2OFF      SETA   8                                              @02a 03226800
&UCBOFF      SETA  12                                              @02a 03226900
&NTPOFF      SETA  16                                              @02a 03227000
&KWDOFF      SETA  17                                              @02a 03227100
&IXOFF       SETA  20                                              @02a 03227200
&MTPOFF      SETA  24                                              @02a 03227300
&FIRSTLITOFF SETA  28                                              @02a 03227400
&CURLITOFF   SETA  28                                              @02a 03227500
.*                                                                      03227600
.*###################################################################*  03227700
.*###################################################################*  03227800
.*#                                                                 #*  03227900
.*#                 CHECK FOR INNER MACRO CALLS                     #*  03228000
.*#                                                                 #*  03228100
.*# Moving the calls here allows variables to be initialized above. #*  03228200
.*#                                                                 #*  03228300
.*###################################################################*  03228400
.*###################################################################*  03228500
       AIF ('&SYSLIST(2,1)' EQ 'CHKREG').REGCHK                         03250000
       AIF ('&SYSLIST(2,1)' EQ 'CHKRX').RXCHK                           03300000
       AIF ('&SYSLIST(2,1)' EQ 'CHKSTR').CHRST                          03350000
       AIF ('&SYSLIST(2,1)' EQ 'CHKLEN').LENCHK                         03400000
       AIF ('&SYSLIST(2,1)' EQ 'CHKFMT').FMTCHK                         03431100
.*                                                                      03462200
.*       *---------------------------------------------------*          03493300
.*       * Set the DEBUG option here and put out an          *          03524400
.*       * informational if it was specified.                *          03555500
.*       *---------------------------------------------------*     @02a 03586600
&DEBUGON SETB 0                             Assume DEBUG not specified  03617700
         AIF (T'&DEBUG  EQ 'O').NODEBUGSET                              03648800
&DEBUGON SETB 1                                                         03679900
.*                                                                      03711000
.NODEBUGSET ANOP                                                   @02a 03742100
.*                                                                      03773200
         AIF (&DEBUGON EQ 0).NODEBUG                               @02a 03804300
         MNOTE *,'DEBUG was specified, debugging MNOTE messages'   @02a 03835400
         MNOTE *,'                     will be issued'                  03866500
.NODEBUG ANOP                                                      @02a 03897600
.*                                                                      03928700
.*###################################################################*  03959800
.*###################################################################*  03990900
.*#                                                                 #*  04022000
.*#           SET BIT ARRAYS TO ATTRIBUTES OF KEY WORDS             #*  04053100
.*#                                                                 #*  04084200
.*###################################################################*  04115300
.*###################################################################*  04146400
.*                                                                      04177500
.*       *---------------------------------------------------*          04208600
.*       * Zero all the F arrays                             *          04239700
.*       *---------------------------------------------------*          04270800
&J        SETA   1                          Init loop counter           04301900
.CLRLOOP  ANOP                              Loop point                  04333000
&DCBF(&J)    SETB   0                                                   04364100
&TXTF(&J)    SETB   0                                                   04395200
&UCBF(&J)    SETB   0                                                   04426300
&INDEXF(&J)  SETB   0                                                   04457400
&SERF(&J)    SETB   0                                                   04488500
&LABELF(&J)  SETB   0                                                   04519600
&DISPF(&J)   SETB   0                                                   04550700
&MSERF(&J)   SETB   0                                                   04581800
&MLABELF(&J) SETB   0                                                   04612900
&UCBLF(&J)   SETB   0                                                   04644000
&TXT2F(&J)   SETB   0                                                   04675100
&WAITF(&J)   SETB   0                                                   04706200
&VOLF(&J)    SETB   0                                                   04737300
&MFE(&J)     SETB   0                                                   04768400
&FLASHF(&J)  SETB   0                                                   04799500
&FORCEF(&J)  SETB   0                                                   04830600
&TESTF(&J)   SETB   0                                                   04861700
&MEDTF(&J)   SETB   0                                                   04892800
&J        SETA   &J+1                       Increment                   04923900
          AIF (&J LE &HIGHIX).CLRLOOP       Curr. only 7 entries        04955000
.*                                                                      04986100
.*       *---------------------------------------------------*          05017200
.*       *---------------------------------------------------*          05048300
.*       *                   DCB KEYWORD                     *          05079400
.*       *                                                   *          05110500
.*       * Initialize the array to zeroes                    *          05141600
.*       *---------------------------------------------------*          05172700
.*       *---------------------------------------------------*          05203800
.*                                                                      05234900
&DCBF(&NULLIX) SETB   1                                                 05266000
              AIF     (T'&DCB  EQ 'O').EDCB    .*IF NULL SKIP           05300000
&DCBF(&NULLIX) SETB   0                   .*RESET NULL IF NOT           05350000
&LENGTH       SETA    K'&DCB            .*SET LENGTH OF KEYWORD         05400000
.*                                                                      05441600
.*       *---------------------------------------------------*          05483200
.*       * TEST FOR LITERAL AND SET FLAG BIT IN KEYWORD ARRAY*          05524800
.*       *---------------------------------------------------*          05566400
&DCBF(&LITIX) SETB ('&DCB'(1,1) EQ '''' AND                            C05608000
               '&DCB'(&LENGTH,1) EQ '''')       IN QUOTES SET FLAG      05650000
.*                                                                      05690900
.*       *---------------------------------------------------*          05731800
.*       * TEST FOR REG AND SET FLAG BIT IN KEYWORD ARRAY    *          05772700
.*       *---------------------------------------------------*          05813600
&DCBF(&REGIX) SETB  ('&DCB(1)' NE '&DCB')                               05854500
.*                                                                      05895400
.*       *---------------------------------------------------*          05936300
.*       * TEST FOR REG01 AND SET FLAG BIT IN KEYWORD ARRAY  *          05977200
.*       *---------------------------------------------------*          06018100
&DCBF(&REG01IX) SETB (&DCBF(&REGIX) EQ 1 AND                           C06059000
               ('&DCB(1)' EQ '0' OR '&DCB(1)' EQ '1'))                  06100000
.*                                                                      06141600
.*       *---------------------------------------------------*          06183200
.*       * TEST FOR ADCON AND SET FLAG BIT IN KEYWORD ARRAY  *          06224800
.*       *---------------------------------------------------*          06266400
&DCBF(&ADCONIX) SETB ('&DCB'(1,2)  EQ 'A(' AND                         C06308000
               '&DCB'(&LENGTH,1) EQ ')')                                06350000
.*                                                                      06351100
.*       *---------------------------------------------------*          06352200
.*       * If it's none of the above, it must be RX format   *          06353300
.*       *---------------------------------------------------*     @02a 06354400
         AIF  (&DCBF(&LITIX) EQ 1 OR                                   C06355500
               &DCBF(&REGIX) EQ 1 OR                                   C06356600
               &DCBF(&ADCONIX) EQ 1).CKDCB                         @02c 06357700
&DCBF(&RXFMTIX) SETB 1                      Indicate RX format     @02a 06358800
.*                                                                      06359900
.*       *---------------------------------------------------*          06361000
.*       * If RXFMT is indicated determine if it's supported *          06362100
.*       * If it is supported, leave it on.  If it isn't     *          06363200
.*       * change it to unquoted literal.  A subsequent call *          06364300
.*       * to CHKFMT will determine if the this or any other *          06365400
.*       * format indicators are valid.                      *          06366500
.*       *---------------------------------------------------*     @02a 06367600
         AIF (&DCBF(&RXFMTIX) NE 1).CKDCB  Br if not RXFMT         @02a 06368700
.*                                                                      06369800
         AIF ('&FMT(&DCBIX)'(&RXFMTIX,1) EQ '1').CKDCB             @02a 06370900
&DCBF(&RXFMTIX)    SETB 0                   Reset RX format ind.   @02a 06372000
&DCBF(&UNQUOTEIX) SETB 1                    Indicate unquote fmt   @02a 06373100
.*                                                                      06374200
.CKDCB   ANOP                                                      @02a 06375300
.*       *---------------------------------------------------*          06376400
.*       * Get ready to call CHKFMT inner macro to validate  *          06377500
.*       * that the specified format of the keyword operand  *          06378600
.*       * is supported.  But first issue debug messages if  *          06379700
.*       * requested by DEBUG.                               *          06380800
.*       *---------------------------------------------------*          06381900
         AIF (&DEBUGON EQ 0).NODEBUGDCB1                           @02a 06383000
         MNOTE *,' '                                                    06384100
         MNOTE *,'Calling CHKFMT for DCB keyword. DCBF flags are:'      06385200
         MNOTE *,'        NULL             = &DCBF(&NULLIX)'            06386300
         MNOTE *,'        QUOTED LITERAL   = &DCBF(&LITIX)'             06387400
         MNOTE *,'        REG (2-12)       = &DCBF(&REGIX)'             06388500
         MNOTE *,'        REG (0!1)        = &DCBF(&REG01IX)'           06389600
         MNOTE *,'        ADCON            = &DCBF(&ADCONIX)'           06390700
         MNOTE *,'        RX FORMAT        = &DCBF(&RXFMTIX)'           06391800
         MNOTE *,'        UNQUOTED LITERAL = &DCBF(&UNQUOTEIX)'         06392900
.*                                                                      06394000
.NODEBUGDCB1  ANOP                                                 @02a 06395100
         MSGDISP ,(CHKFMT,DCB,&DEBUGON)                            @02a 06396200
.*                                                                      06397300
.EDCB         ANOP                                                      06400000
.*                                                                      06450000
.*       *---------------------------------------------------*          06500000
.*       *---------------------------------------------------*          06550000
.*       *                  DISP KEYWORD                     *          06600000
.*       *---------------------------------------------------*          06650000
.*       *---------------------------------------------------*          06700000
&DISPF(&NULLIX) SETB  1                                                 06750000
              AIF     (T'&DISP  EQ 'O').EDISP .*IF NULL SKIP            12050000
&DISPF(&NULLIX) SETB  0                   .*RESET NULL IF NOT           12100000
&LENGTH       SETA    K'&DISP           .*SET LENGTH OF KEYWORD         12150000
.*                                                                      12191600
.*       *---------------------------------------------------*          12233200
.*       * TEST FOR LITERAL AND SET FLAG BIT IN KEYWORD ARRAY*          12274800
.*       *---------------------------------------------------*          12316400
&DISPF(&LITIX) SETB ('&DISP'(1,1) EQ '''' AND                          C12358000
               '&DISP'(&LENGTH,1) EQ '''')      IN QUOTES SET FLAG      12400000
.*                                                                      12440900
.*       *---------------------------------------------------*          12481800
.*       * TEST FOR REG AND SET FLAG BIT IN KEYWORD ARRAY    *          12522700
.*       *---------------------------------------------------*          12563600
&DISPF(&REGIX) SETB ('&DISP(1)' NE '&DISP')                             12604500
.*                                                                      12645400
.*       *---------------------------------------------------*          12686300
.*       * TEST FOR REG01 AND SET FLAG BIT IN KEYWORD ARRAY  *          12727200
.*       *---------------------------------------------------*          12768100
&DISPF(&REG01IX) SETB (&DISPF(&REGIX) EQ 1 AND                         C12809000
               ('&DISP(1)' EQ '0' OR '&DISP(1)' EQ '1'))                12850000
.*                                                                      12891600
.*       *---------------------------------------------------*          12933200
.*       * TEST FOR ADCON AND SET FLAG BIT IN KEYWORD ARRAY  *          12974800
.*       *---------------------------------------------------*          13016400
&DISPF(&ADCONIX) SETB ('&DISP'(1,2) EQ 'A(' AND                        C13058000
               '&DISP'(&LENGTH,1) EQ ')')                               13100000
.*                                                                      13101100
.*       *---------------------------------------------------*          13102200
.*       * If it's none of the above, it must be RX format   *          13103300
.*       *---------------------------------------------------*     @02a 13104400
         AIF  (&DISPF(&LITIX) EQ 1 OR                                  C13105500
               &DISPF(&REGIX) EQ 1 OR                                  C13106600
               &DISPF(&ADCONIX) EQ 1).CKDISP                            13107700
&DISPF(&RXFMTIX) SETB 1                     Indicate RX format     @02a 13108800
.*                                                                      13109900
.*       *---------------------------------------------------*          13111000
.*       * If RXFMT is indicated determine if it's supported *          13112100
.*       * If it is supported, leave it on.  If it isn't     *          13113200
.*       * change it to unquoted literal.  A subsequent call *          13114300
.*       * to CHKFMT will determine if the this or any other *          13115400
.*       * format indicators are valid.                      *          13116500
.*       *---------------------------------------------------*     @02a 13117600
         AIF (&DISPF(&RXFMTIX) NE 1).CKDISP Br if not RXFMT        @02a 13118700
.*                                                                      13119800
         AIF ('&FMT(&DISPIX)'(&RXFMTIX,1) EQ '1').CKDISP           @02a 13120900
&DISPF(&RXFMTIX) SETB 0                     Reset RX format ind.   @02a 13122000
&DISPF(&UNQUOTEIX) SETB 1                   Indicate unquote fmt   @02a 13123100
.*                                                                      13124200
.CKDISP ANOP                                                       @02a 13125300
.*       *---------------------------------------------------*          13126400
.*       * Get ready to call CHKFMT inner macro to validate  *          13127500
.*       * that the specified format of the keyword operand  *          13128600
.*       * is supported.  But first issue debug messages if  *          13129700
.*       * requested by DEBUG.                               *          13130800
.*       *---------------------------------------------------*          13131900
         AIF (&DEBUGON EQ 0).NODEBUGDISP1                          @02a 13133000
         MNOTE *,' '                                                    13134100
         MNOTE *,'Calling CHKFMT for DISP keyword. DISPF flags are:'    13135200
         MNOTE *,'        NULL             = &DISPF(&NULLIX)'           13136300
         MNOTE *,'        QUOTED LITERAL   = &DISPF(&LITIX)'            13137400
         MNOTE *,'        REG (2-12)       = &DISPF(&REGIX)'            13138500
         MNOTE *,'        REG (0!1)        = &DISPF(&REG01IX)'          13139600
         MNOTE *,'        ADCON            = &DISPF(&ADCONIX)'          13140700
         MNOTE *,'        RX FORMAT        = &DISPF(&RXFMTIX)'          13141800
         MNOTE *,'        UNQUOTED LITERAL = &DISPF(&UNQUOTEIX)'        13142900
.*                                                                      13144000
.NODEBUGDISP1 ANOP                                                 @02a 13145100
         MSGDISP ,(CHKFMT,DISP,&DEBUGON)                           @02a 13146200
.*                                                                      13147300
.EDISP        ANOP                                                      13150000
.*                                                                      13200000
.*       *---------------------------------------------------*          13250000
.*       *---------------------------------------------------*          13300000
.*       *                 FLASH KEYWORD                     *          13350000
.*       *---------------------------------------------------*          13400000
.*       *---------------------------------------------------*          13450000
&FLASHF(&NULLIX) SETB 1                                                 13500000
              AIF     (T'&FLASH  EQ 'O').EFLASH .*IF NULL SKIP          20150000
&FLASHF(&NULLIX) SETB 0                   .*RESET NULL IF NOT           20200000
&LENGTH       SETA    K'&FLASH          .*SET LENGTH OF KEYWORD         20250000
.*                                                                      20291600
.*       *---------------------------------------------------*          20333200
.*       * TEST FOR LITERAL AND SET FLAG BIT IN KEYWORD ARRAY*          20374800
.*       *---------------------------------------------------*          20416400
&FLASHF(&LITIX) SETB ('&FLASH'(1,1) EQ '''' AND                        C20458000
               '&FLASH'(&LENGTH,1) EQ '''')     IN QUOTES SET FLAG      20500000
.*                                                                      20540900
.*       *---------------------------------------------------*          20581800
.*       * TEST FOR REG AND SET FLAG BIT IN KEYWORD ARRAY    *          20622700
.*       *---------------------------------------------------*          20663600
&FLASHF(&REGIX) SETB ('&FLASH(1)' NE '&FLASH')                          20704500
.*                                                                      20745400
.*       *---------------------------------------------------*          20786300
.*       * TEST FOR REG01 AND SET FLAG BIT IN KEYWORD ARRAY  *          20827200
.*       *---------------------------------------------------*          20868100
&FLASHF(&REG01IX) SETB (&FLASHF(&REGIX) EQ 1 AND                       C20909000
               ('&FLASH(1)' EQ '0' OR '&FLASH(1)' EQ '1'))              20950000
.*                                                                      20991600
.*       *---------------------------------------------------*          21033200
.*       * TEST FOR ADCON AND SET FLAG BIT IN KEYWORD ARRAY  *          21074800
.*       *---------------------------------------------------*          21116400
&FLASHF(&ADCONIX) SETB ('&FLASH'(1,2) EQ 'A(' AND                      C21158000
               '&FLASH'(&LENGTH,1) EQ ')')                              21200000
.*                                                                      21201100
.*       *---------------------------------------------------*          21202200
.*       * If it's none of the above, it must be RX format   *          21203300
.*       *---------------------------------------------------*     @02a 21204400
         AIF  (&FLASHF(&LITIX) EQ 1 OR                                 C21205500
               &FLASHF(&REGIX) EQ 1 OR                                 C21206600
               &FLASHF(&ADCONIX) EQ 1).CKFLASH                          21207700
&FLASHF(&RXFMTIX) SETB 1                    Indicate RX format     @02a 21208800
.*                                                                      21209900
.*       *---------------------------------------------------*          21211000
.*       * If RXFMT is indicated determine if it's supported *          21212100
.*       * If it is supported, leave it on.  If it isn't     *          21213200
.*       * change it to unquoted literal.  A subsequent call *          21214300
.*       * to CHKFMT will determine if the this or any other *          21215400
.*       * format indicators are valid.                      *          21216500
.*       *---------------------------------------------------*     @02a 21217600
         AIF (&FLASHF(&RXFMTIX) NE 1).CKFLASH Br if not RXFMT      @02a 21218700
.*                                                                      21219800
         AIF ('&FMT(&FLASHIX)'(&RXFMTIX,1) EQ '1').CKFLASH         @02a 21220900
&FLASHF(&RXFMTIX) SETB 0                    Reset RX format ind.   @02a 21222000
&FLASHF(&UNQUOTEIX) SETB 1                  Indicate unquote fmt   @02a 21223100
.*                                                                      21224200
.CKFLASH ANOP                                                      @02a 21225300
.*       *---------------------------------------------------*          21226400
.*       * Get ready to call CHKFMT inner macro to validate  *          21227500
.*       * that the specified format of the keyword operand  *          21228600
.*       * is supported.  But first issue debug messages if  *          21229700
.*       * requested by DEBUG.                               *          21230800
.*       *---------------------------------------------------*          21231900
         AIF (&DEBUGON EQ 0).NODEBUGFLASH1                         @02a 21233000
         MNOTE *,' '                                                    21234100
         MNOTE *,'Calling CHKFMT for FLASH keyword. FLASHF flags are:'  21235200
         MNOTE *,'        NULL             = &FLASHF(&NULLIX)'          21236300
         MNOTE *,'        QUOTED LITERAL   = &FLASHF(&LITIX)'           21237400
         MNOTE *,'        REG (2-12)       = &FLASHF(&REGIX)'           21238500
         MNOTE *,'        REG (0!1)        = &FLASHF(&REG01IX)'         21239600
         MNOTE *,'        ADCON            = &FLASHF(&ADCONIX)'         21240700
         MNOTE *,'        RX FORMAT        = &FLASHF(&RXFMTIX)'         21241800
         MNOTE *,'        UNQUOTED LITERAL = &FLASHF(&UNQUOTEIX)'       21242900
.*                                                                      21244000
.NODEBUGFLASH1 ANOP                                                @02a 21245100
         MSGDISP ,(CHKFMT,FLASH,&DEBUGON)                          @02a 21246200
.*                                                                      21247300
.EFLASH       ANOP                                                      21250000
.*                                                                      21281200
.*       *---------------------------------------------------*          21312400
.*       *---------------------------------------------------*          21343600
.*       *                 FORCE KEYWORD                     *          21374800
.*       *---------------------------------------------------*          21406000
.*       *---------------------------------------------------*          21437200
&FORCEF(&NULLIX) SETB 1                                                 21468400
              AIF     (T'&FORCE  EQ 'O').EFORCE .*IF NULL SKIP          21500000
&FORCEF(&NULLIX) SETB 0                   .*RESET NULL IF NOT           21550000
&LENGTH       SETA    K'&FORCE          .*SET LENGTH OF KEYWORD         21600000
.*                                                                      21641600
.*       *---------------------------------------------------*          21683200
.*       * TEST FOR LITERAL AND SET FLAG BIT IN KEYWORD ARRAY*          21724800
.*       *---------------------------------------------------*          21766400
&FORCEF(&LITIX) SETB ('&FORCE'(1,1) EQ '''' AND                        C21808000
               '&FORCE'(&LENGTH,1) EQ '''')     IN QUOTES SET FLAG      21850000
.*                                                                      21890900
.*       *---------------------------------------------------*          21931800
.*       * TEST FOR REG AND SET FLAG BIT IN KEYWORD ARRAY    *          21972700
.*       *---------------------------------------------------*          22013600
&FORCEF(&REGIX) SETB ('&FORCE(1)' NE '&FORCE')                          22054500
.*                                                                      22095400
.*       *---------------------------------------------------*          22136300
.*       * TEST FOR REG01 AND SET FLAG BIT IN KEYWORD ARRAY  *          22177200
.*       *---------------------------------------------------*          22218100
&FORCEF(&REG01IX) SETB (&FORCEF(&REGIX) EQ 1 AND                       C22259000
               ('&FORCE(1)' EQ '0' OR '&FORCE(1)' EQ '1'))              22300000
.*                                                                      22341600
.*       *---------------------------------------------------*          22383200
.*       * TEST FOR ADCON AND SET FLAG BIT IN KEYWORD ARRAY  *          22424800
.*       *---------------------------------------------------*          22466400
&FORCEF(&ADCONIX) SETB ('&FORCE'(1,2) EQ 'A(' AND                      C22508000
               '&FORCE'(&LENGTH,1) EQ ')')                              22550000
.*                                                                      22551100
.*       *---------------------------------------------------*          22552200
.*       * If it's none of the above, it must be RX format   *          22553300
.*       *---------------------------------------------------*     @02a 22554400
         AIF  (&FORCEF(&LITIX) EQ 1 OR                                 C22555500
               &FORCEF(&REGIX) EQ 1 OR                                 C22556600
               &FORCEF(&ADCONIX) EQ 1).CKFORCE                          22557700
&FORCEF(&RXFMTIX) SETB 1                    Indicate RX format     @02a 22558800
.*                                                                      22559900
.*       *---------------------------------------------------*          22561000
.*       * If RXFMT is indicated determine if it's supported *          22562100
.*       * If it is supported, leave it on.  If it isn't     *          22563200
.*       * change it to unquoted literal.  A subsequent call *          22564300
.*       * to CHKFMT will determine if the this or any other *          22565400
.*       * format indicators are valid.                      *          22566500
.*       *---------------------------------------------------*     @02a 22567600
         AIF (&FORCEF(&RXFMTIX) NE 1).CKFORCE Br if not RXFMT      @02a 22568700
.*                                                                      22569800
         AIF ('&FMT(&FORCEIX)'(&RXFMTIX,1) EQ '1').CKFORCE         @02a 22570900
&FORCEF(&RXFMTIX) SETB 0                    Reset RX format ind.   @02a 22572000
&FORCEF(&UNQUOTEIX) SETB 1                  Indicate unquote fmt   @02a 22573100
.*                                                                      22574200
.CKFORCE ANOP                                                      @02a 22575300
.*       *---------------------------------------------------*          22576400
.*       * Get ready to call CHKFMT inner macro to validate  *          22577500
.*       * that the specified format of the keyword operand  *          22578600
.*       * is supported.  But first issue debug messages if  *          22579700
.*       * requested by DEBUG.                               *          22580800
.*       *---------------------------------------------------*          22581900
         AIF (&DEBUGON EQ 0).NODEBUGFORCE1                         @02a 22583000
         MNOTE *,' '                                                    22584100
         MNOTE *,'Calling CHKFMT for FORCE keyword. FORCEF flags are:'  22585200
         MNOTE *,'        NULL             = &FORCEF(&NULLIX)'          22586300
         MNOTE *,'        QUOTED LITERAL   = &FORCEF(&LITIX)'           22587400
         MNOTE *,'        REG (2-12)       = &FORCEF(&REGIX)'           22588500
         MNOTE *,'        REG (0!1)        = &FORCEF(&REG01IX)'         22589600
         MNOTE *,'        ADCON            = &FORCEF(&ADCONIX)'         22590700
         MNOTE *,'        RX FORMAT        = &FORCEF(&RXFMTIX)'         22591800
         MNOTE *,'        UNQUOTED LITERAL = &FORCEF(&UNQUOTEIX)'       22592900
.*                                                                      22594000
.NODEBUGFORCE1 ANOP                                                @02a 22595100
         MSGDISP ,(CHKFMT,FORCE,&DEBUGON)                          @02a 22596200
.*                                                                      22597300
.EFORCE       ANOP                                                      22600000
.*                                                                      22602700
.*       *---------------------------------------------------*          22605400
.*       *---------------------------------------------------*          22608100
.*       *                 INDEX KEYWORD                     *          22610800
.*       *---------------------------------------------------*          22613500
.*       *---------------------------------------------------*          22616200
&INDEXF(&NULLIX) SETB 1                      Assume null          @02a  22618900
              AIF  (T'&INDEX  EQ 'O').EINDEX If NULL (omitted)    @02a  22621600
&INDEXF(&NULLIX) SETB 0                      Reset NULL, since not@02a  22624300
&LENGTH       SETA K'&INDEX                  Set keyword length   @02a  22627000
.*                                                                      22629700
.*       *---------------------------------------------------*          22632400
.*       * TEST FOR LITERAL AND SET FLAG BIT IN KEYWORD ARRAY*          22635100
.*       *---------------------------------------------------*          22637800
&INDEXF(&LITIX) SETB ('&INDEX'(1,1) EQ '''' AND                        C22640500
               '&INDEX'(&LENGTH,1) EQ '''') Quoted value           @02a 22643200
.*                                                                      22645900
.*       *---------------------------------------------------*          22648600
.*       *  Test for REG and set flag bit in keyword array   *          22651300
.*       *                                                   *          22654000
.*       *  In the test below '&INDEX(1)' is equal to the    *          22656700
.*       *  entire string following the equal sign specified *          22659400
.*       *  in the MSGDISP invocation. '&INDEX' is the       *          22662100
.*       *  string inside of any parentheses that may have   *          22664800
.*       *  been specified or the entire string if there are *          22667500
.*       *  no parentheses.                                  *          22670200
.*       *---------------------------------------------------*          22672900
&INDEXF(&REGIX) SETB ('&INDEX(1)' NE '&INDEX')                     @02a 22675600
.*                                                                      22678300
.*       *---------------------------------------------------*          22681000
.*       * TEST FOR REG01 AND SET FLAG BIT IN KEYWORD ARRAY  *          22683700
.*       *---------------------------------------------------*          22686400
&INDEXF(&REG01IX) SETB (&INDEXF(&REGIX) EQ 1 AND                       C22689100
               ('&INDEX(1)' EQ '0' OR '&INDEX(1)' EQ '1'))         @02a 22691800
.*                                                                      22694500
.*       *---------------------------------------------------*          22697200
.*       * TEST FOR ADCON AND SET FLAG BIT IN KEYWORD ARRAY  *          22699900
.*       *---------------------------------------------------*          22702600
&INDEXF(&ADCONIX) SETB ('&INDEX'(1,2) EQ 'A(' AND                      C22705300
               '&INDEX'(&LENGTH,1) EQ ')')                         @02a 22708000
.*                                                                      22710700
.*       *---------------------------------------------------*          22713400
.*       * If it's none of the above, it must be RX format   *          22716100
.*       *---------------------------------------------------*     @02a 22718800
         AIF  (&INDEXF(&LITIX) EQ 1 OR                                 C22721500
               &INDEXF(&REGIX) EQ 1 OR                                 C22724200
               &INDEXF(&ADCONIX) EQ 1).CKINDEX                          22726900
&INDEXF(&RXFMTIX) SETB 1                    Indicate RX format     @02a 22729600
.*                                                                      22732300
.*       *---------------------------------------------------*          22735000
.*       * If RXFMT is indicated determine if it's supported *          22737700
.*       * If it is supported, leave it on.  If it isn't     *          22740400
.*       * change it to unquoted literal.  A subsequent call *          22743100
.*       * to CHKFMT will determine if the this or any other *          22745800
.*       * format indicators are valid.                      *          22748500
.*       *---------------------------------------------------*     @02a 22751200
         AIF (&INDEXF(&RXFMTIX) NE 1).CKINDEX     Br if not RXFMT  @02a 22753900
.*                                                                      22756600
         AIF ('&FMT(&INDEXIX)'(&RXFMTIX,1) EQ '1').CKINDEX         @02a 22759300
&INDEXF(&RXFMTIX)  SETB 0                   Reset RX format ind.   @02a 22762000
&INDEXF(&UNQUOTEIX) SETB 1                  Indicate unquote fmt   @02a 22764700
.*                                                                      22767400
.CKINDEX ANOP                                                      @02a 22770100
.*       *---------------------------------------------------*          22772800
.*       * Get ready to call CHKFMT inner macro to validate  *          22775500
.*       * that the specified format of the keyword operand  *          22778200
.*       * is supported.  But first issue debug messages if  *          22780900
.*       * requested by DEBUG.                               *          22783600
.*       *---------------------------------------------------*          22786300
         AIF (&DEBUGON EQ 0).NODEBUGINDEX1                         @02a 22789000
         MNOTE *,' '                                                    22791700
         MNOTE *,'Calling CHKFMT for INDEX keyword. INDEXF flags are:'  22794400
         MNOTE *,'        NULL             = &INDEXF(&NULLIX)'          22797100
         MNOTE *,'        QUOTED LITERAL   = &INDEXF(&LITIX)'           22799800
         MNOTE *,'        REG (2-12)       = &INDEXF(&REGIX)'           22802500
         MNOTE *,'        REG (0!1)        = &INDEXF(&REG01IX)'         22805200
         MNOTE *,'        ADCON            = &INDEXF(&ADCONIX)'         22807900
         MNOTE *,'        RX FORMAT        = &INDEXF(&RXFMTIX)'         22810600
         MNOTE *,'        UNQUOTED LITERAL = &INDEXF(&UNQUOTEIX)'       22813300
.*                                                                      22816000
.NODEBUGINDEX1 ANOP                                                @02a 22818700
         MSGDISP ,(CHKFMT,INDEX,&DEBUGON)                          @02a 22821400
.*                                                                      22824100
.EINDEX       ANOP                                                      22826800
.*                                                                      22829500
.*       *---------------------------------------------------*          22832200
.*       *---------------------------------------------------*          22834900
.*       *                 LABEL KEYWORD                     *          22837600
.*       *---------------------------------------------------*          22840300
.*       *---------------------------------------------------*          22843000
&LABELF(&NULLIX) SETB 1                                                 22845700
              AIF     (T'&LABEL  EQ 'O').ELABEL .*IF NULL SKIP          22848400
&LABELF(&NULLIX) SETB 0                   .*RESET NULL IF NOT           22851100
&LENGTH       SETA    K'&LABEL          .*SET LENGTH OF KEYWORD         22853800
.*                                                                      22856500
.*       *---------------------------------------------------*          22859200
.*       * TEST FOR LITERAL AND SET FLAG BIT IN KEYWORD ARRAY*          22861900
.*       *---------------------------------------------------*          22864600
&LABELF(&LITIX) SETB ('&LABEL'(1,1) EQ '''' AND                        C22867300
               '&LABEL'(&LENGTH,1) EQ '''')     IN QUOTES SET FLAG      22870000
.*                                                                      22872700
.*       *---------------------------------------------------*          22875400
.*       * TEST FOR REG AND SET FLAG BIT IN KEYWORD ARRAY    *          22878100
.*       *---------------------------------------------------*          22880800
&LABELF(&REGIX) SETB ('&LABEL(1)' NE '&LABEL')                          22883500
.*                                                                      22886200
.*       *---------------------------------------------------*          22888900
.*       * TEST FOR REG01 AND SET FLAG BIT IN KEYWORD ARRAY  *          22891600
.*       *---------------------------------------------------*          22894300
&LABELF(&REG01IX) SETB (&LABELF(&REGIX) EQ 1 AND                       C22897000
               ('&LABEL(1)' EQ '0' OR '&LABEL(1)' EQ '1'))              22899700
.*                                                                      22902400
.*       *---------------------------------------------------*          22905100
.*       * TEST FOR ADCON AND SET FLAG BIT IN KEYWORD ARRAY  *          22907800
.*       *---------------------------------------------------*          22910500
&LABELF(&ADCONIX) SETB ('&LABEL'(1,2) EQ 'A(' AND                      C22913200
               '&LABEL'(&LENGTH,1) EQ ')')                              22915900
.*                                                                      22918600
.*       *---------------------------------------------------*          22921300
.*       * If it's none of the above, it must be RX format   *          22924000
.*       *---------------------------------------------------*     @02a 22926700
         AIF  (&LABELF(&LITIX) EQ 1 OR                                 C22929400
               &LABELF(&REGIX) EQ 1 OR                                 C22932100
               &LABELF(&ADCONIX) EQ 1).CKLABEL                          22934800
&LABELF(&RXFMTIX) SETB 1                    Indicate RX format     @02a 22937500
.*                                                                      22940200
.*       *---------------------------------------------------*          22942900
.*       * If RXFMT is indicated determine if it's supported *          22945600
.*       * If it is supported, leave it on.  If it isn't     *          22948300
.*       * change it to unquoted literal.  A subsequent call *          22951000
.*       * to CHKFMT will determine if the this or any other *          22953700
.*       * format indicators are valid.                      *          22956400
.*       *---------------------------------------------------*     @02a 22959100
         AIF (&LABELF(&RXFMTIX) NE 1).CKLABEL Br if not RXFMT      @02a 22961800
.*                                                                      22964500
         AIF ('&FMT(&LABELIX)'(&RXFMTIX,1) EQ '1').CKLABEL         @02a 22967200
&LABELF(&RXFMTIX) SETB 0                    Reset RX format ind.   @02a 22969900
&LABELF(&UNQUOTEIX) SETB 1                  Indicate unquote fmt   @02a 22972600
.*                                                                      22975300
.CKLABEL ANOP                                                      @02a 22978000
.*       *---------------------------------------------------*          22980700
.*       * Get ready to call CHKFMT inner macro to validate  *          22983400
.*       * that the specified format of the keyword operand  *          22986100
.*       * is supported.  But first issue debug messages if  *          22988800
.*       * requested by DEBUG.                               *          22991500
.*       *---------------------------------------------------*          22994200
         AIF (&DEBUGON EQ 0).NODEBUGLABEL1                         @02a 22996900
         MNOTE *,' '                                                    22999600
         MNOTE *,'Calling CHKFMT for LABEL keyword. LABELF flags are:'  23002300
         MNOTE *,'        NULL             = &LABELF(&NULLIX)'          23005000
         MNOTE *,'        QUOTED LITERAL   = &LABELF(&LITIX)'           23007700
         MNOTE *,'        REG (2-12)       = &LABELF(&REGIX)'           23010400
         MNOTE *,'        REG (0!1)        = &LABELF(&REG01IX)'         23013100
         MNOTE *,'        ADCON            = &LABELF(&ADCONIX)'         23015800
         MNOTE *,'        RX FORMAT        = &LABELF(&RXFMTIX)'         23018500
         MNOTE *,'        UNQUOTED LITERAL = &LABELF(&UNQUOTEIX)'       23021200
.*                                                                      23023900
.NODEBUGLABEL1 ANOP                                                @02a 23026600
         MSGDISP ,(CHKFMT,LABEL,&DEBUGON)                          @02a 23029300
.*                                                                      23032000
.*       *---------------------------------------------------*          23034700
.*       * There is an exception to the support of the ADCON *          23037400
.*       * form for the LABEL keyword when used with the     *          23040100
.*       * LIST form of the macro.  This is because the      *          23042800
.*       * field into which the value is put is one byte     *          23045500
.*       * long.  Rather than get some sort of execution     *          23048200
.*       * time error, catch it here.  Same goes for MLABEL. *          23050900
.*       *---------------------------------------------------*          23053600
.*                                                                      23056300
         AIF (&LABELF(&ADCONIX) EQ 1 AND '&MF(1)' EQ 'L').LBLADERR @02a 23059000
         AGO .ELABEL                                               @02a 23061700
.*                                                                      23064400
.LBLADERR ANOP                                                     @02a 23067100
         MNOTE 12,'ADCON WITH LABEL NOT VALID WITH LIST FORM OF MACRO'  23069800
.*                                                                      23072500
.ELABEL       ANOP                                                      23075200
.*                                                                      23077900
.*       *---------------------------------------------------*          23080600
.*       *---------------------------------------------------*          23083300
.*       *               MEDIATYPE KEYWORD                   *          23086000
.*       *---------------------------------------------------*          23088700
.*       *---------------------------------------------------*          23091400
&MEDTF(&NULLIX) SETB 1                      Assume null            @02a 23094100
              AIF  (T'&MEDIATYPE  EQ 'O').EMEDT If NULL (omitted)  @02a 23096800
&MEDTF(&NULLIX) SETB 0                      Reset NULL, since not  @02a 23099500
&LENGTH       SETA K'&MEDIATYPE             Set keyword length     @02a 23102200
.*                                                                      23104900
.*       *---------------------------------------------------*          23107600
.*       * TEST FOR LITERAL AND SET FLAG BIT IN KEYWORD ARRAY*          23110300
.*       *---------------------------------------------------*          23113000
&MEDTF(&LITIX) SETB ('&MEDIATYPE'(1,1) EQ '''' AND                     C23115700
               '&MEDIATYPE'(&LENGTH,1) EQ '''') Quoted value       @02a 23118400
.*                                                                      23121100
.*       *---------------------------------------------------*          23123800
.*       *  Test for REG and set flag bit in keyword array   *          23126500
.*       *                                                   *          23129200
.*       *  In the test below '&INDEX(1)' is equal to the    *          23131900
.*       *  entire string following the equal sign specified *          23134600
.*       *  in the MSGDISP invocation. '&INDEX' is the       *          23137300
.*       *  string inside of any parentheses that may have   *          23140000
.*       *  been specified or the entire string if there are *          23142700
.*       *  no parentheses.                                  *          23145400
.*       *---------------------------------------------------*          23148100
&MEDTF(&REGIX) SETB ('&MEDIATYPE(1)' NE '&MEDIATYPE')              @02a 23150800
.*                                                                      23153500
.*       *---------------------------------------------------*          23156200
.*       * TEST FOR REG01 AND SET FLAG BIT IN KEYWORD ARRAY  *          23158900
.*       *---------------------------------------------------*          23161600
&MEDTF(&REG01IX) SETB (&MEDTF(&REGIX) EQ 1 AND                         C23164300
               ('&MEDIATYPE(1)' EQ '0' OR '&MEDIATYPE(1)' EQ '1')) @02a 23167000
.*                                                                      23169700
.*       *---------------------------------------------------*          23172400
.*       * TEST FOR ADCON AND SET FLAG BIT IN KEYWORD ARRAY  *          23175100
.*       *---------------------------------------------------*          23177800
&MEDTF(&ADCONIX) SETB ('&MEDIATYPE'(1,2) EQ 'A(' AND                   C23180500
               '&MEDIATYPE'(&LENGTH,1) EQ ')')                     @02a 23183200
.*                                                                      23185900
.*       *---------------------------------------------------*          23188600
.*       * If it's none of the above, it must be RX format   *          23191300
.*       *---------------------------------------------------*     @02a 23194000
         AIF  (&MEDTF(&LITIX) EQ 1 OR                                  C23196700
               &MEDTF(&REGIX) EQ 1 OR                                  C23199400
               &MEDTF(&ADCONIX) EQ 1).CKMEDT                            23202100
&MEDTF(&RXFMTIX) SETB 1                     Indicate RX format     @02a 23204800
.*                                                                      23207500
.*       *---------------------------------------------------*          23210200
.*       * If RXFMT is indicated determine if it's supported *          23212900
.*       * If it is supported, leave it on.  If it isn't     *          23215600
.*       * change it to unquoted literal.  A subsequent call *          23218300
.*       * to CHKFMT will determine if the this or any other *          23221000
.*       * format indicators are valid.                      *          23223700
.*       *---------------------------------------------------*     @02a 23226400
         AIF (&MEDTF(&RXFMTIX) NE 1).CKMEDT Br if not RXFMT        @02a 23229100
.*                                                                      23231800
         AIF ('&FMT(&MEDTIX)'(&RXFMTIX,1) EQ '1').CKMEDT           @02a 23234500
&MEDTF(&RXFMTIX)   SETB 0                   Reset RX format ind.   @02a 23237200
&MEDTF(&UNQUOTEIX) SETB 1                   Indicate unquote fmt   @02a 23239900
.*                                                                      23242600
.CKMEDT ANOP                                                       @02a 23245300
.*       *---------------------------------------------------*          23248000
.*       * Get ready to call CHKFMT inner macro to validate  *          23250700
.*       * that the specified format of the keyword operand  *          23253400
.*       * is supported.  But first issue debug messages if  *          23256100
.*       * requested by DEBUG.                               *          23258800
.*       *---------------------------------------------------*          23261500
         AIF (&DEBUGON EQ 0).NODEBUGMEDT1                          @02a 23264200
         MNOTE *,' '                                                    23266900
         MNOTE *,'Calling CHKFMT for MEDT keyword. MEDTF flags are:'    23269600
         MNOTE *,'        NULL             = &MEDTF(&NULLIX)'           23272300
         MNOTE *,'        QUOTED LITERAL   = &MEDTF(&LITIX)'            23275000
         MNOTE *,'        REG (2-12)       = &MEDTF(&REGIX)'            23277700
         MNOTE *,'        REG (0!1)        = &MEDTF(&REG01IX)'          23280400
         MNOTE *,'        ADCON            = &MEDTF(&ADCONIX)'          23283100
         MNOTE *,'        RX FORMAT        = &MEDTF(&RXFMTIX)'          23285800
         MNOTE *,'        UNQUOTED LITERAL = &MEDTF(&UNQUOTEIX)'        23288500
.*                                                                      23291200
.NODEBUGMEDT1 ANOP                                                 @02a 23293900
         MSGDISP ,(CHKFMT,MEDT,&DEBUGON)                           @02a 23296600
.*                                                                      23299300
.EMEDT        ANOP                                                      23302000
.*                                                                      23304700
.*       *---------------------------------------------------*          23307400
.*       *---------------------------------------------------*          23310100
.*       *                    MF KEYWORD                     *          23312800
.*       *---------------------------------------------------*          23315500
.*       *---------------------------------------------------*          23318200
&MFE(&NULLIX) SETB 1                                                    23320900
              AIF     (T'&MF(2)  EQ 'O').MFEND   .*IF NULL SKIP         23323600
&MFE(&NULLIX) SETB 0                      .*RESET NULL IF NOT           23326300
&LENGTH       SETA    K'&MF(2)          .*SET LENGTH OF KEYWORD         23329000
.*                                                                      23331700
.*       *---------------------------------------------------*          23334400
.*       * TEST FOR LITERAL AND SET FLAG BIT IN KEYWORD ARRAY*          23337100
.*       *---------------------------------------------------*          23339800
&MFE(&LITIX) SETB ('&MF(2)'(1,1) EQ '''' AND                           C23342500
               '&MF(2)'(&LENGTH,1) EQ '''')     IN QUOTES SET FLAG      23345200
.*                                                                      23347900
.*       *---------------------------------------------------*          23350600
.*       * TEST FOR REG AND SET FLAG BIT IN KEYWORD ARRAY    *          23353300
.*       *---------------------------------------------------*          23356000
&MFE(&REGIX) SETB ('&MF(2)'(1,1) EQ '(' AND                            C23358700
               '&MF(2)'(K'&MF(2),1) EQ  ')')                            23361400
.*                                                                      23364100
.*       *---------------------------------------------------*          23366800
.*       * TEST FOR REG01 AND SET FLAG BIT IN KEYWORD ARRAY  *          23369500
.*       *---------------------------------------------------*          23372200
&MFE(&REG01IX) SETB (&MFE(&REGIX) EQ 1 AND                             C23374900
               ('&MF(2)' EQ '(0)' OR '&MF(2)' EQ '(1)'))                23377600
.*                                                                      23380300
.*       *---------------------------------------------------*          23383000
.*       * TEST FOR ADCON AND SET FLAG BIT IN KEYWORD ARRAY  *          23385700
.*       *---------------------------------------------------*          23388400
&MFE(&ADCONIX) SETB ('&MF(2)'(1,2) EQ 'A(' AND                         C23391100
               '&MF(2)'(&LENGTH,1) EQ ')')                              23393800
.*                                                                      23396500
.*       *---------------------------------------------------*          23399200
.*       * If it's none of the above, it must be RX format   *          23401900
.*       *---------------------------------------------------*     @02a 23404600
         AIF  (&MFE(&LITIX) EQ 1 OR                                    C23407300
               &MFE(&REGIX) EQ 1 OR                                    C23410000
               &MFE(&ADCONIX) EQ 1).CKMFE                               23412700
&MFE(&RXFMTIX) SETB 1                       Indicate RX format     @02a 23415400
.*                                                                      23418100
.*       *---------------------------------------------------*          23420800
.*       * If RXFMT is indicated determine if it's supported *          23423500
.*       * If it is supported, leave it on.  If it isn't     *          23426200
.*       * change it to unquoted literal.  A subsequent call *          23428900
.*       * to CHKFMT will determine if the this or any other *          23431600
.*       * format indicators are valid.                      *          23434300
.*       *---------------------------------------------------*     @02a 23437000
         AIF (&MFE(&RXFMTIX) NE 1).CKMFE Br if not RXFMT           @02a 23439700
.*                                                                      23442400
         AIF ('&FMT(&MFIX)'(&RXFMTIX,1) EQ '1').CKMFE              @02a 23445100
&MFE(&RXFMTIX)     SETB 0                   Reset RX format ind.   @02a 23447800
&MFE(&UNQUOTEIX) SETB 1                     Indicate unquote fmt   @02a 23450500
.*                                                                      23453200
.CKMFE ANOP                                                        @02a 23455900
.*       *---------------------------------------------------*          23458600
.*       * Get ready to call CHKFMT inner macro to validate  *          23461300
.*       * that the specified format of the keyword operand  *          23464000
.*       * is supported.  But first issue debug messages if  *          23466700
.*       * requested by DEBUG.                               *          23469400
.*       *---------------------------------------------------*          23472100
         AIF (&DEBUGON EQ 0).NODEBUGMF1                            @02a 23474800
         MNOTE *,' '                                                    23477500
         MNOTE *,'Calling CHKFMT for MF keyword. MFE flags are:'        23480200
         MNOTE *,'        NULL             = &MFE(&NULLIX)'             23482900
         MNOTE *,'        QUOTED LITERAL   = &MFE(&LITIX)'              23485600
         MNOTE *,'        REG (2-12)       = &MFE(&REGIX)'              23488300
         MNOTE *,'        REG (0!1)        = &MFE(&REG01IX)'            23491000
         MNOTE *,'        ADCON            = &MFE(&ADCONIX)'            23493700
         MNOTE *,'        RX FORMAT        = &MFE(&RXFMTIX)'            23496400
         MNOTE *,'        UNQUOTED LITERAL = &MFE(&UNQUOTEIX)'          23499100
.*                                                                      23501800
.NODEBUGMF1 ANOP                                                   @02a 23504500
         MSGDISP ,(CHKFMT,MF,&DEBUGON)                             @02a 23507200
.*                                                                      23509900
.MFEND     ANOP                                                         23512600
        AIF (&MFE(&REGIX) EQ 0).NCHKMF                                  23515300
        MSGDISP  ,(CHKREG,MF,&MFE(&REG01IX),&MF(2),0,1,1),&MF           23518000
.NCHKMF ANOP                                                            23520700
.*                                                                      23523400
.*       *---------------------------------------------------*          23526100
.*       *---------------------------------------------------*          23528800
.*       *                MLABEL KEYWORD                     *          23531500
.*       *---------------------------------------------------*          23534200
.*       *---------------------------------------------------*          23536900
&MLABELF(&NULLIX) SETB 1                                                23539600
              AIF     (T'&MLABEL  EQ 'O').EMLABEL .*IF NULL SKIP        23542300
&MLABELF(&NULLIX) SETB 0                  .*RESET NULL IF NOT           23545000
&LENGTH       SETA    K'&MLABEL         .*SET LENGTH OF KEYWORD         23547700
.*                                                                      23550400
.*       *---------------------------------------------------*          23553100
.*       * TEST FOR LITERAL AND SET FLAG BIT IN KEYWORD ARRAY*          23555800
.*       *---------------------------------------------------*          23558500
&MLABELF(&LITIX) SETB ('&MLABEL'(1,1) EQ '''' AND                      C23561200
               '&MLABEL'(&LENGTH,1) EQ '''')    IN QUOTES SET FLAG      23563900
.*                                                                      23566600
.*       *---------------------------------------------------*          23569300
.*       * TEST FOR REG AND SET FLAG BIT IN KEYWORD ARRAY    *          23572000
.*       *---------------------------------------------------*          23574700
&MLABELF(&REGIX) SETB ('&MLABEL(1)' NE '&MLABEL')                       23577400
.*                                                                      23580100
.*       *---------------------------------------------------*          23582800
.*       * TEST FOR REG01 AND SET FLAG BIT IN KEYWORD ARRAY  *          23585500
.*       *---------------------------------------------------*          23588200
&MLABELF(&REG01IX) SETB (&MLABELF(&REGIX) EQ 1 AND                     C23590900
               ('&MLABEL(1)' EQ '0' OR '&MLABEL(1)' EQ '1'))            23593600
.*                                                                      23596300
.*       *---------------------------------------------------*          23599000
.*       * TEST FOR ADCON AND SET FLAG BIT IN KEYWORD ARRAY  *          23601700
.*       *---------------------------------------------------*          23604400
&MLABELF(&ADCONIX) SETB ('&MLABEL'(1,2) EQ 'A(' AND                    C23607100
               '&MLABEL'(&LENGTH,1) EQ ')')                             23609800
.*                                                                      23612500
.*       *---------------------------------------------------*          23615200
.*       * If it's none of the above, it must be RX format   *          23617900
.*       *---------------------------------------------------*     @02a 23620600
         AIF  (&MLABELF(&LITIX) EQ 1 OR                                C23623300
               &MLABELF(&REGIX) EQ 1 OR                                C23626000
               &MLABELF(&ADCONIX) EQ 1).CKMLABEL                   @02a 23628700
&MLABELF(&RXFMTIX) SETB 1                   Indicate RX format     @02a 23631400
.*                                                                      23634100
.*       *---------------------------------------------------*          23636800
.*       * If RXFMT is indicated determine if it's supported *          23639500
.*       * If it is supported, leave it on.  If it isn't     *          23642200
.*       * change it to unquoted literal.  A subsequent call *          23644900
.*       * to CHKFMT will determine if the this or any other *          23647600
.*       * format indicators are valid.                      *          23650300
.*       *---------------------------------------------------*     @02a 23653000
         AIF (&MLABELF(&RXFMTIX) NE 1).CKMLABEL Br if not RXFMT    @02a 23655700
.*                                                                      23658400
         AIF ('&FMT(&MLABELIX)'(&RXFMTIX,1) EQ '1').CKMLABEL       @02a 23661100
&MLABELF(&RXFMTIX) SETB 0                   Reset RX format ind.   @02a 23663800
&MLABELF(&UNQUOTEIX) SETB 1                 Indicate unquote fmt   @02a 23666500
.*                                                                      23669200
.CKMLABEL ANOP                                                     @02a 23671900
.*       *---------------------------------------------------*          23674600
.*       * Get ready to call CHKFMT inner macro to validate  *          23677300
.*       * that the specified format of the keyword operand  *          23680000
.*       * is supported.  But first issue debug messages if  *          23682700
.*       * requested by DEBUG.                               *          23685400
.*       *---------------------------------------------------*          23688100
         AIF (&DEBUGON EQ 0).NODEBUGMLABEL1                        @02a 23690800
         MNOTE *,' '                                                    23693500
         MNOTE *,'Calling CHKFMT for MLABEL keyword. MLABELF flags are' 23696200
         MNOTE *,'        NULL             = &MLABELF(&NULLIX)'         23698900
         MNOTE *,'        QUOTED LITERAL   = &MLABELF(&LITIX)'          23701600
         MNOTE *,'        REG (2-12)       = &MLABELF(&REGIX)'          23704300
         MNOTE *,'        REG (0!1)        = &MLABELF(&REG01IX)'        23707000
         MNOTE *,'        ADCON            = &MLABELF(&ADCONIX)'        23709700
         MNOTE *,'        RX FORMAT        = &MLABELF(&RXFMTIX)'        23712400
         MNOTE *,'        UNQUOTED LITERAL = &MLABELF(&UNQUOTEIX)'      23715100
.*                                                                      23717800
.NODEBUGMLABEL1 ANOP                                               @02a 23720500
         MSGDISP ,(CHKFMT,MLABEL,&DEBUGON)                         @02a 23723200
.*                                                                      23725900
.*       *---------------------------------------------------*          23728600
.*       * There is an exception to the support of the ADCON *          23731300
.*       * form for the MLABEL keyword when used with the    *          23734000
.*       * LIST form of the macro.  This is because the      *          23736700
.*       * field into which the value is put is one byte     *          23739400
.*       * long.  Rather than get some sort of execution     *          23742100
.*       * time error, catch it here.  Same goes for LABEL.  *          23744800
.*       *---------------------------------------------------*          23747500
.*                                                                      23750200
         AIF (&MLABELF(&ADCONIX) EQ 1 AND '&MF(1)' EQ 'L').MLBLADERR    23752900
         AGO .EMLABEL                                              @02a 23755600
.*                                                                      23758300
.MLBLADERR ANOP                                                    @02a 23761000
         MNOTE 12,'ADCON WITH MLABEL NOT VALID WITH LIST FORM OF MACRO' 23763700
.*                                                                      23766400
.EMLABEL      ANOP                                                      23769100
.*                                                                      23771800
.*       *---------------------------------------------------*          23774500
.*       *---------------------------------------------------*          23777200
.*       *                  MSER KEYWORD                     *          23779900
.*       *---------------------------------------------------*          23782600
.*       *---------------------------------------------------*          23785300
&MSERF(&NULLIX) SETB  1                                                 23788000
              AIF     (T'&MSER  EQ 'O').EMSER .*IF NULL SKIP            23790700
&MSERF(&NULLIX) SETB  0                   .*RESET NULL IF NOT           23793400
&LENGTH       SETA    K'&MSER           .*SET LENGTH OF KEYWORD         23796100
.*                                                                      23798800
.*       *---------------------------------------------------*          23801500
.*       * TEST FOR LITERAL AND SET FLAG BIT IN KEYWORD ARRAY*          23804200
.*       *---------------------------------------------------*          23806900
&MSERF(&LITIX) SETB ('&MSER'(1,1) EQ '''' AND                          C23809600
               '&MSER'(&LENGTH,1) EQ '''')      IN QUOTES SET FLAG      23812300
.*                                                                      23815000
.*       *---------------------------------------------------*          23817700
.*       * TEST FOR REG AND SET FLAG BIT IN KEYWORD ARRAY    *          23820400
.*       *---------------------------------------------------*          23823100
&MSERF(&REGIX) SETB ('&MSER(1)' NE '&MSER')                             23825800
.*                                                                      23828500
.*       *---------------------------------------------------*          23831200
.*       * TEST FOR REG01 AND SET FLAG BIT IN KEYWORD ARRAY  *          23833900
.*       *---------------------------------------------------*          23836600
&MSERF(&REG01IX) SETB (&MSERF(&REGIX) EQ 1 AND                         C23839300
               ('&MSER(1)' EQ '0' OR '&MSER(1)' EQ '1'))                23842000
.*                                                                      23844700
.*       *---------------------------------------------------*          23847400
.*       * TEST FOR ADCON AND SET FLAG BIT IN KEYWORD ARRAY  *          23850100
.*       *---------------------------------------------------*          23852800
&MSERF(&ADCONIX) SETB ('&MSER'(1,2) EQ 'A(' AND                        C23855500
               '&MSER'(&LENGTH,1) EQ ')')                               23858200
.*                                                                      23860900
.*       *---------------------------------------------------*          23863600
.*       * If it's none of the above, it must be RX format   *          23866300
.*       *---------------------------------------------------*     @02a 23869000
         AIF  (&MSERF(&LITIX) EQ 1 OR                                  C23871700
               &MSERF(&REGIX) EQ 1 OR                                  C23874400
               &MSERF(&ADCONIX) EQ 1).CKMSER                            23877100
&MSERF(&RXFMTIX) SETB 1                     Indicate RX format     @02a 23879800
.*                                                                      23882500
.*       *---------------------------------------------------*          23885200
.*       * If RXFMT is indicated determine if it's supported *          23887900
.*       * If it is supported, leave it on.  If it isn't     *          23890600
.*       * change it to unquoted literal.  A subsequent call *          23893300
.*       * to CHKFMT will determine if the this or any other *          23896000
.*       * format indicators are valid.                      *          23898700
.*       *---------------------------------------------------*     @02a 23901400
         AIF (&MSERF(&RXFMTIX) NE 1).CKMSER Br if not RXFMT        @02a 23904100
.*                                                                      23906800
         AIF ('&FMT(&MSERIX)'(&RXFMTIX,1) EQ '1').CKMSER           @02a 23909500
&MSERF(&RXFMTIX) SETB 0                     Reset RX format ind.   @02a 23912200
&MSERF(&UNQUOTEIX) SETB 1                   Indicate unquote fmt   @02a 23914900
.*                                                                      23917600
.CKMSER ANOP                                                       @02a 23920300
.*       *---------------------------------------------------*          23923000
.*       * Get ready to call CHKFMT inner macro to validate  *          23925700
.*       * that the specified format of the keyword operand  *          23928400
.*       * is supported.  But first issue debug messages if  *          23931100
.*       * requested by DEBUG.                               *          23933800
.*       *---------------------------------------------------*          23936500
         AIF (&DEBUGON EQ 0).NODEBUGMSER1                          @02a 23939200
         MNOTE *,' '                                                    23941900
         MNOTE *,'Calling CHKFMT for MSER keyword. MSERF flags are:'    23944600
         MNOTE *,'        NULL             = &MSERF(&NULLIX)'           23947300
         MNOTE *,'        QUOTED LITERAL   = &MSERF(&LITIX)'            23950000
         MNOTE *,'        REG (2-12)       = &MSERF(&REGIX)'            23952700
         MNOTE *,'        REG (0!1)        = &MSERF(&REG01IX)'          23955400
         MNOTE *,'        ADCON            = &MSERF(&ADCONIX)'          23958100
         MNOTE *,'        RX FORMAT        = &MSERF(&RXFMTIX)'          23960800
         MNOTE *,'        UNQUOTED LITERAL = &MSERF(&UNQUOTEIX)'        23963500
.*                                                                      23966200
.NODEBUGMSER1 ANOP                                                 @02a 23968900
         MSGDISP ,(CHKFMT,MSER,&DEBUGON)                           @02a 23971600
.*                                                                      23974300
.EMSER        ANOP                                                      23977000
.*                                                                      23979700
.*       *---------------------------------------------------*          23982400
.*       *---------------------------------------------------*          23985100
.*       *                   SER KEYWORD                     *          23987800
.*       *---------------------------------------------------*          23990500
.*       *---------------------------------------------------*          23993200
&SERF(&NULLIX) SETB   1                                                 23995900
               AIF     (T'&SER  EQ 'O').ESER    .*IF NULL SKIP          23998600
&SERF(&NULLIX) SETB   0                   .*RESET NULL IF NOT           24001300
&LENGTH        SETA    K'&SER            .*SET LENGTH OF KEYWORD        24004000
.*                                                                      24006700
.*       *---------------------------------------------------*          24009400
.*       * TEST FOR LITERAL AND SET FLAG BIT IN KEYWORD ARRAY*          24012100
.*       *---------------------------------------------------*          24014800
&SERF(&LITIX) SETB ('&SER'(1,1) EQ '''' AND                            C24017500
               '&SER'(&LENGTH,1) EQ '''')       IN QUOTES SET FLAG      24020200
.*                                                                      24022900
.*       *---------------------------------------------------*          24025600
.*       * TEST FOR REG AND SET FLAG BIT IN KEYWORD ARRAY    *          24028300
.*       *---------------------------------------------------*          24031000
&SERF(&REGIX) SETB  ('&SER(1)' NE '&SER')                               24033700
.*                                                                      24036400
.*       *---------------------------------------------------*          24039100
.*       * TEST FOR REG01 AND SET FLAG BIT IN KEYWORD ARRAY  *          24041800
.*       *---------------------------------------------------*          24044500
&SERF(&REG01IX) SETB (&SERF(&REGIX) EQ 1 AND                           C24047200
               ('&SER(1)' EQ '0' OR '&SER(1)' EQ '1'))                  24049900
.*                                                                      24052600
.*       *---------------------------------------------------*          24055300
.*       * TEST FOR ADCON AND SET FLAG BIT IN KEYWORD ARRAY  *          24058000
.*       *---------------------------------------------------*          24060700
&SERF(&ADCONIX) SETB ('&SER'(1,2) EQ 'A(' AND                          C24063400
               '&SER'(&LENGTH,1) EQ ')')                                24066100
.*                                                                      24068800
.*       *---------------------------------------------------*          24071500
.*       * If it's none of the above, it must be RX format   *          24074200
.*       *---------------------------------------------------*     @02a 24076900
         AIF  (&SERF(&LITIX) EQ 1 OR                                   C24079600
               &SERF(&REGIX) EQ 1 OR                                   C24082300
               &SERF(&ADCONIX) EQ 1).CKSER                              24085000
&SERF(&RXFMTIX) SETB 1                      Indicate RX format     @02a 24087700
.*                                                                      24090400
.*       *---------------------------------------------------*          24093100
.*       * If RXFMT is indicated determine if it's supported *          24095800
.*       * If it is supported, leave it on.  If it isn't     *          24098500
.*       * change it to unquoted literal.  A subsequent call *          24101200
.*       * to CHKFMT will determine if the this or any other *          24103900
.*       * format indicators are valid.                      *          24106600
.*       *---------------------------------------------------*     @02a 24109300
         AIF (&SERF(&RXFMTIX) NE 1).CKSER  Br if not RXFMT         @02a 24112000
.*                                                                      24114700
         AIF ('&FMT(&SERIX)'(&RXFMTIX,1) EQ '1').CKSER             @02a 24117400
&SERF(&RXFMTIX)   SETB 0                    Reset RX format ind.   @02a 24120100
&SERF(&UNQUOTEIX) SETB 1                    Indicate unquote fmt   @02a 24122800
.*                                                                      24125500
.CKSER   ANOP                                                      @02a 24128200
.*       *---------------------------------------------------*          24130900
.*       * Get ready to call CHKFMT inner macro to validate  *          24133600
.*       * that the specified format of the keyword operand  *          24136300
.*       * is supported.  But first issue debug messages if  *          24139000
.*       * requested by DEBUG.                               *          24141700
.*       *---------------------------------------------------*          24144400
         AIF (&DEBUGON EQ 0).NODEBUGSER1                           @02a 24147100
         MNOTE *,' '                                                    24149800
         MNOTE *,'Calling CHKFMT for SER keyword. SERF flags are:'      24152500
         MNOTE *,'        NULL             = &SERF(&NULLIX)'            24155200
         MNOTE *,'        QUOTED LITERAL   = &SERF(&LITIX)'             24157900
         MNOTE *,'        REG (2-12)       = &SERF(&REGIX)'             24160600
         MNOTE *,'        REG (0!1)        = &SERF(&REG01IX)'           24163300
         MNOTE *,'        ADCON            = &SERF(&ADCONIX)'           24166000
         MNOTE *,'        RX FORMAT        = &SERF(&RXFMTIX)'           24168700
         MNOTE *,'        UNQUOTED LITERAL = &SERF(&UNQUOTEIX)'         24171400
.*                                                                      24174100
.NODEBUGSER1 ANOP                                                  @02a 24176800
         MSGDISP ,(CHKFMT,SER,&DEBUGON)                            @02a 24179500
.*                                                                      24182200
.ESER         ANOP                                                      24184900
.*                                                                      24187600
.*       *---------------------------------------------------*          24190300
.*       *---------------------------------------------------*          24193000
.*       *                  TEST KEYWORD                     *          24195700
.*       *---------------------------------------------------*          24198400
.*       *---------------------------------------------------*          24201100
&TESTF(&NULLIX) SETB  1                                                 24203800
              AIF     (T'&TEST  EQ 'O').ETEST .*IF NULL SKIP            24250000
&TESTF(&NULLIX) SETB  0                   .*RESET NULL IF NOT           24300000
&LENGTH       SETA    K'&TEST           .*SET LENGTH OF KEYWORD         24350000
.*                                                                      24391600
.*       *---------------------------------------------------*          24433200
.*       * TEST FOR LITERAL AND SET FLAG BIT IN KEYWORD ARRAY*          24474800
.*       *---------------------------------------------------*          24516400
&TESTF(&LITIX) SETB ('&TEST'(1,1) EQ '''' AND                          C24558000
               '&TEST'(&LENGTH,1) EQ '''')      IN QUOTES SET FLAG      24600000
.*                                                                      24640900
.*       *---------------------------------------------------*          24681800
.*       * TEST FOR REG AND SET FLAG BIT IN KEYWORD ARRAY    *          24722700
.*       *---------------------------------------------------*          24763600
&TESTF(&REGIX) SETB ('&TEST(1)' NE '&TEST')                             24804500
.*                                                                      24845400
.*       *---------------------------------------------------*          24886300
.*       * TEST FOR REG01 AND SET FLAG BIT IN KEYWORD ARRAY  *          24927200
.*       *---------------------------------------------------*          24968100
&TESTF(&REG01IX) SETB (&TESTF(&REGIX) EQ 1 AND                         C25009000
               ('&TEST(1)' EQ '0' OR '&TEST(1)' EQ '1'))                25050000
.*                                                                      25091600
.*       *---------------------------------------------------*          25133200
.*       * TEST FOR ADCON AND SET FLAG BIT IN KEYWORD ARRAY  *          25174800
.*       *---------------------------------------------------*          25216400
&TESTF(&ADCONIX) SETB ('&TEST'(1,2) EQ 'A(' AND                        C25258000
               '&TEST'(&LENGTH,1) EQ ')')                               25300000
.*                                                                      25301100
.*       *---------------------------------------------------*          25302200
.*       * If it's none of the above, it must be RX format   *          25303300
.*       *---------------------------------------------------*     @02a 25304400
         AIF  (&TESTF(&LITIX) EQ 1 OR                                  C25305500
               &TESTF(&REGIX) EQ 1 OR                                  C25306600
               &TESTF(&ADCONIX) EQ 1).CKTEST                            25307700
&TESTF(&RXFMTIX) SETB 1                     Indicate RX format     @02a 25308800
.*                                                                      25309900
.*       *---------------------------------------------------*          25311000
.*       * If RXFMT is indicated determine if it's supported *          25312100
.*       * If it is supported, leave it on.  If it isn't     *          25313200
.*       * change it to unquoted literal.  A subsequent call *          25314300
.*       * to CHKFMT will determine if the this or any other *          25315400
.*       * format indicators are valid.                      *          25316500
.*       *---------------------------------------------------*     @02a 25317600
         AIF (&TESTF(&RXFMTIX) NE 1).CKTEST Br if not RXFMT        @02a 25318700
.*                                                                      25319800
         AIF ('&FMT(&TESTIX)'(&RXFMTIX,1) EQ '1').CKTEST           @02a 25320900
&TESTF(&RXFMTIX)   SETB 0                   Reset RX format ind.   @02a 25322000
&TESTF(&UNQUOTEIX) SETB 1                   Indicate unquote fmt   @02a 25323100
.*                                                                      25324200
.CKTEST  ANOP                                                      @02a 25325300
.*       *---------------------------------------------------*          25326400
.*       * Get ready to call CHKFMT inner macro to validate  *          25327500
.*       * that the specified format of the keyword operand  *          25328600
.*       * is supported.  But first issue debug messages if  *          25329700
.*       * requested by DEBUG.                               *          25330800
.*       *---------------------------------------------------*          25331900
         AIF (&DEBUGON EQ 0).NODEBUGTEST1                          @02a 25333000
         MNOTE *,' '                                                    25334100
         MNOTE *,'Calling CHKFMT for TEST keyword. TESTF flags are:'    25335200
         MNOTE *,'        NULL             = &TESTF(&NULLIX)'           25336300
         MNOTE *,'        QUOTED LITERAL   = &TESTF(&LITIX)'            25337400
         MNOTE *,'        REG (2-12)       = &TESTF(&REGIX)'            25338500
         MNOTE *,'        REG (0!1)        = &TESTF(&REG01IX)'          25339600
         MNOTE *,'        ADCON            = &TESTF(&ADCONIX)'          25340700
         MNOTE *,'        RX FORMAT        = &TESTF(&RXFMTIX)'          25341800
         MNOTE *,'        UNQUOTED LITERAL = &TESTF(&UNQUOTEIX)'        25342900
.*                                                                      25344000
.NODEBUGTEST1 ANOP                                                 @02a 25345100
         MSGDISP ,(CHKFMT,TEST,&DEBUGON)                           @02a 25346200
.*                                                                      25347300
.ETEST        ANOP                                                      25350000
.*                                                                      25366600
.*       *---------------------------------------------------*          25368200
.*       *---------------------------------------------------*          25369800
.*       *                   TXT KEYWORD                     *          25371400
.*       *---------------------------------------------------*          25373000
.*       *---------------------------------------------------*          25374600
&TXTF(&NULLIX) SETB   1                                                 25376200
               AIF     (T'&TXT  EQ 'O').ETXT    .*IF NULL SKIP          25377800
&TXTF(&NULLIX) SETB   0                   .*RESET NULL IF NOT           25379400
&LENGTH        SETA    K'&TXT            .*SET LENGTH OF KEYWORD        25381000
.*                                                                      25383200
.*       *---------------------------------------------------*          25389400
.*       * TEST FOR LITERAL AND SET FLAG BIT IN KEYWORD ARRAY*          25395600
.*       *---------------------------------------------------*          25401800
&TXTF(&LITIX) SETB ('&TXT'(1,1) EQ '''' AND                            C25408000
               '&TXT'(&LENGTH,1) EQ '''')       IN QUOTES SET FLAG      25414200
.*                                                                      25420800
.*       *---------------------------------------------------*          25424400
.*       * TEST FOR REG AND SET FLAG BIT IN KEYWORD ARRAY    *          25428000
.*       *---------------------------------------------------*          25431600
&TXTF(&REGIX) SETB  ('&TXT(1)' NE '&TXT')                               25435200
.*                                                                      25439000
.*       *---------------------------------------------------*          25439800
.*       * TEST FOR REG01 AND SET FLAG BIT IN KEYWORD ARRAY  *          25440600
.*       *---------------------------------------------------*          25441400
&TXTF(&REG01IX) SETB (&TXTF(&REGIX) EQ 1 AND                           C25442200
               ('&TXT(1)' EQ '0' OR '&TXT(1)' EQ '1'))                  25443000
.*                                                                      25444200
.*       *---------------------------------------------------*          25444600
.*       * TEST FOR ADCON AND SET FLAG BIT IN KEYWORD ARRAY  *          25445000
.*       *---------------------------------------------------*          25445400
&TXTF(&ADCONIX) SETB ('&TXT'(1,2)  EQ 'A(' AND                         C25445800
               '&TXT'(&LENGTH,1) EQ ')')                                25446200
.*                                                                      25446800
.*       *---------------------------------------------------*          25452100
.*       * If it's none of the above, it must be RX format   *          25457400
.*       *---------------------------------------------------*     @02a 25462700
         AIF  (&TXTF(&LITIX) EQ 1 OR                                   C25468000
               &TXTF(&REGIX) EQ 1 OR                                   C25473300
               &TXTF(&ADCONIX) EQ 1).CKTXT                              25478600
&TXTF(&RXFMTIX) SETB 1                      Indicate RX format     @02a 25483900
.*                                                                      25489200
.*       *---------------------------------------------------*          25494500
.*       * If RXFMT is indicated determine if it's supported *          25499800
.*       * If it is supported, leave it on.  If it isn't     *          25505100
.*       * change it to unquoted literal.  A subsequent call *          25510400
.*       * to CHKFMT will determine if the this or any other *          25515700
.*       * format indicators are valid.                      *          25521000
.*       *---------------------------------------------------*     @02a 25526300
         AIF (&TXTF(&RXFMTIX) NE 1).CKTXT  Br if not RXFMT         @02a 25531600
.*                                                                      25536900
         AIF ('&FMT(&TXTIX)'(&RXFMTIX,1) EQ '1').CKTXT             @02a 25542200
&TXTF(&RXFMTIX)   SETB 0                    Reset RX format ind.   @02a 25547500
&TXTF(&UNQUOTEIX) SETB 1                    Indicate unquote fmt   @02a 25552800
.*                                                                      25558100
.CKTXT   ANOP                                                      @02a 25563400
.*       *---------------------------------------------------*          25568700
.*       * Get ready to call CHKFMT inner macro to validate  *          25574000
.*       * that the specified format of the keyword operand  *          25579300
.*       * is supported.  But first issue debug messages if  *          25584600
.*       * requested by DEBUG.                               *          25589900
.*       *---------------------------------------------------*          25595200
         AIF (&DEBUGON EQ 0).NODEBUGTXT1                           @02a 25600500
         MNOTE *,' '                                                    25605800
         MNOTE *,'Calling CHKFMT for TXT keyword. TXTF flags are:'      25611100
         MNOTE *,'        NULL             = &TXTF(&NULLIX)'            25616400
         MNOTE *,'        QUOTED LITERAL   = &TXTF(&LITIX)'             25621700
         MNOTE *,'        REG (2-12)       = &TXTF(&REGIX)'             25627000
         MNOTE *,'        REG (0!1)        = &TXTF(&REG01IX)'           25632300
         MNOTE *,'        ADCON            = &TXTF(&ADCONIX)'           25637600
         MNOTE *,'        RX FORMAT        = &TXTF(&RXFMTIX)'           25642900
         MNOTE *,'        UNQUOTED LITERAL = &TXTF(&UNQUOTEIX)'         25648200
.*                                                                      25653500
.NODEBUGTXT1 ANOP                                                  @02a 25658800
         MSGDISP ,(CHKFMT,TXT,&DEBUGON)                            @02a 25664100
.*                                                                      25669400
.ETXT         ANOP                                                      25674700
.*                                                                      25680000
.*       *---------------------------------------------------*          25685300
.*       *---------------------------------------------------*          25690600
.*       *                  TXT2 KEYWORD                     *          25695900
.*       *---------------------------------------------------*          25701200
.*       *---------------------------------------------------*          25706500
&TXT2F(&NULLIX) SETB  1                                                 25711800
              AIF     (T'&TXT2  EQ 'O').ETXT2 .*IF NULL SKIP            25717100
&TXT2F(&NULLIX) SETB  0                   .*RESET NULL IF NOT           25722400
&LENGTH       SETA    K'&TXT2           .*SET LENGTH OF KEYWORD         25727700
.*                                                                      25733000
.*       *---------------------------------------------------*          25738300
.*       * TEST FOR LITERAL AND SET FLAG BIT IN KEYWORD ARRAY*          25743600
.*       *---------------------------------------------------*          25748900
&TXT2F(&LITIX) SETB ('&TXT2'(1,1) EQ '''' AND                          C25754200
               '&TXT2'(&LENGTH,1) EQ '''')      IN QUOTES SET FLAG      25759500
.*                                                                      25764800
.*       *---------------------------------------------------*          25770100
.*       * TEST FOR REG AND SET FLAG BIT IN KEYWORD ARRAY    *          25775400
.*       *---------------------------------------------------*          25780700
&TXT2F(&REGIX) SETB ('&TXT2(1)' NE '&TXT2')                             25786000
.*                                                                      25791300
.*       *---------------------------------------------------*          25796600
.*       * TEST FOR REG01 AND SET FLAG BIT IN KEYWORD ARRAY  *          25801900
.*       *---------------------------------------------------*          25807200
&TXT2F(&REG01IX) SETB (&TXT2F(&REGIX) EQ 1 AND                         C25812500
               ('&TXT2(1)' EQ '0' OR '&TXT2(1)' EQ '1'))                25817800
.*                                                                      25823100
.*       *---------------------------------------------------*          25828400
.*       * TEST FOR ADCON AND SET FLAG BIT IN KEYWORD ARRAY  *          25833700
.*       *---------------------------------------------------*          25839000
&TXT2F(&ADCONIX) SETB ('&TXT2'(1,2) EQ 'A(' AND                        C25844300
               '&TXT2'(&LENGTH,1) EQ ')')                               25849600
.*                                                                      25854900
.*       *---------------------------------------------------*          25860200
.*       * If it's none of the above, it must be RX format   *          25865500
.*       *---------------------------------------------------*     @02a 25870800
         AIF  (&TXT2F(&LITIX) EQ 1 OR                                  C25876100
               &TXT2F(&REGIX) EQ 1 OR                                  C25881400
               &TXT2F(&ADCONIX) EQ 1).CKTXT2                            25886700
&TXT2F(&RXFMTIX) SETB 1                     Indicate RX format     @02a 25892000
.*                                                                      25897300
.*       *---------------------------------------------------*          25902600
.*       * If RXFMT is indicated determine if it's supported *          25907900
.*       * If it is supported, leave it on.  If it isn't     *          25913200
.*       * change it to unquoted literal.  A subsequent call *          25918500
.*       * to CHKFMT will determine if the this or any other *          25923800
.*       * format indicators are valid.                      *          25929100
.*       *---------------------------------------------------*     @02a 25934400
         AIF (&TXT2F(&RXFMTIX) NE 1).CKTXT2 Br if not RXFMT        @02a 25939700
.*                                                                      25945000
         AIF ('&FMT(&TXT2IX)'(&RXFMTIX,1) EQ '1').CKTXT2           @02a 25950300
&TXT2F(&RXFMTIX) SETB 0                     Reset RX format ind.   @02a 25955600
&TXT2F(&UNQUOTEIX) SETB 1                   Indicate unquote fmt   @02a 25960900
.*                                                                      25966200
.CKTXT2 ANOP                                                       @02a 25971500
.*       *---------------------------------------------------*          25976800
.*       * Get ready to call CHKFMT inner macro to validate  *          25982100
.*       * that the specified format of the keyword operand  *          25987400
.*       * is supported.  But first issue debug messages if  *          25992700
.*       * requested by DEBUG.                               *          25998000
.*       *---------------------------------------------------*          26003300
         AIF (&DEBUGON EQ 0).NODEBUGTXT21                          @02a 26008600
         MNOTE *,' '                                                    26013900
         MNOTE *,'Calling CHKFMT for TXT2 keyword. TXT2F flags are:'    26019200
         MNOTE *,'        NULL             = &TXT2F(&NULLIX)'           26024500
         MNOTE *,'        QUOTED LITERAL   = &TXT2F(&LITIX)'            26029800
         MNOTE *,'        REG (2-12)       = &TXT2F(&REGIX)'            26035100
         MNOTE *,'        REG (0!1)        = &TXT2F(&REG01IX)'          26040400
         MNOTE *,'        ADCON            = &TXT2F(&ADCONIX)'          26045700
         MNOTE *,'        RX FORMAT        = &TXT2F(&RXFMTIX)'          26051000
         MNOTE *,'        UNQUOTED LITERAL = &TXT2F(&UNQUOTEIX)'        26056300
.*                                                                      26061600
.NODEBUGTXT21 ANOP                                                 @02a 26066900
         MSGDISP ,(CHKFMT,TXT2,&DEBUGON)                           @02a 26072200
.*                                                                      26077500
.ETXT2        ANOP                                                      26082800
.*                                                                      26088100
.*       *---------------------------------------------------*          26093400
.*       *---------------------------------------------------*          26098700
.*       *                   UCB KEYWORD                     *          26104000
.*       *---------------------------------------------------*          26109300
.*       *---------------------------------------------------*          26114600
&UCBF(&NULLIX) SETB   1                                                 26119900
              AIF     (T'&UCB  EQ 'O').EUCB    .*IF NULL SKIP           26125200
&UCBF(&NULLIX) SETB   0                   .*RESET NULL IF NOT           26130500
&LENGTH       SETA    K'&UCB            .*SET LENGTH OF KEYWORD         26135800
.*                                                                      26141100
.*       *---------------------------------------------------*          26146400
.*       * TEST FOR LITERAL AND SET FLAG BIT IN KEYWORD ARRAY*          26151700
.*       *---------------------------------------------------*          26157000
&UCBF(&LITIX) SETB ('&UCB'(1,1) EQ '''' AND                            C26162300
               '&UCB'(&LENGTH,1) EQ '''')       IN QUOTES SET FLAG      26167600
.*                                                                      26172900
.*       *---------------------------------------------------*          26178200
.*       * TEST FOR REG AND SET FLAG BIT IN KEYWORD ARRAY    *          26183500
.*       *---------------------------------------------------*          26188800
&UCBF(&REGIX) SETB  ('&UCB(1)' NE '&UCB')                               26194100
.*                                                                      26199400
.*       *---------------------------------------------------*          26204700
.*       * TEST FOR REG01 AND SET FLAG BIT IN KEYWORD ARRAY  *          26210000
.*       *---------------------------------------------------*          26215300
&UCBF(&REG01IX) SETB (&UCBF(&REGIX) EQ 1 AND                           C26220600
               ('&UCB(1)' EQ '0' OR '&UCB(1)' EQ '1'))                  26225900
.*                                                                      26231200
.*       *---------------------------------------------------*          26236500
.*       * TEST FOR ADCON AND SET FLAG BIT IN KEYWORD ARRAY  *          26241800
.*       *---------------------------------------------------*          26247100
&UCBF(&ADCONIX) SETB ('&UCB'(1,2) EQ 'A(' AND                          C26252400
               '&UCB'(&LENGTH,1) EQ ')')                                26257700
.*                                                                      26263000
.*       *---------------------------------------------------*          26268300
.*       * If it's none of the above, it must be RX format   *          26273600
.*       *---------------------------------------------------*     @02a 26278900
         AIF  (&UCBF(&LITIX) EQ 1 OR                                   C26284200
               &UCBF(&REGIX) EQ 1 OR                                   C26289500
               &UCBF(&ADCONIX) EQ 1).CKUCB                              26294800
&UCBF(&RXFMTIX) SETB 1                      Indicate RX format     @02a 26300100
.*                                                                      26305400
.*       *---------------------------------------------------*          26310700
.*       * If RXFMT is indicated determine if it's supported *          26316000
.*       * If it is supported, leave it on.  If it isn't     *          26321300
.*       * change it to unquoted literal.  A subsequent call *          26326600
.*       * to CHKFMT will determine if the this or any other *          26331900
.*       * format indicators are valid.                      *          26337200
.*       *---------------------------------------------------*     @02a 26342500
         AIF (&UCBF(&RXFMTIX) NE 1).CKUCB  Br if not RXFMT         @02a 26347800
.*                                                                      26353100
         AIF ('&FMT(&UCBIX)'(&RXFMTIX,1) EQ '1').CKUCB             @02a 26358400
&UCBF(&RXFMTIX)   SETB 0                    Reset RX format ind.   @02a 26363700
&UCBF(&UNQUOTEIX) SETB 1                    Indicate unquote fmt   @02a 26369000
.*                                                                      26374300
.CKUCB   ANOP                                                      @02a 26379600
.*       *---------------------------------------------------*          26384900
.*       * Get ready to call CHKFMT inner macro to validate  *          26390200
.*       * that the specified format of the keyword operand  *          26395500
.*       * is supported.  But first issue debug messages if  *          26400800
.*       * requested by DEBUG.                               *          26406100
.*       *---------------------------------------------------*          26411400
         AIF (&DEBUGON EQ 0).NODEBUGUCB1                           @02a 26416700
         MNOTE *,' '                                                    26422000
         MNOTE *,'Calling CHKFMT for UCB keyword. UCBF flags are:'      26427300
         MNOTE *,'        NULL             = &UCBF(&NULLIX)'            26432600
         MNOTE *,'        QUOTED LITERAL   = &UCBF(&LITIX)'             26437900
         MNOTE *,'        REG (2-12)       = &UCBF(&REGIX)'             26443200
         MNOTE *,'        REG (0!1)        = &UCBF(&REG01IX)'           26448500
         MNOTE *,'        ADCON            = &UCBF(&ADCONIX)'           26453800
         MNOTE *,'        RX FORMAT        = &UCBF(&RXFMTIX)'           26459100
         MNOTE *,'        UNQUOTED LITERAL = &UCBF(&UNQUOTEIX)'         26464400
.*                                                                      26469700
.NODEBUGUCB1 ANOP                                                  @02a 26475000
         MSGDISP ,(CHKFMT,UCB,&DEBUGON)                            @02a 26480300
.*                                                                      26485600
.EUCB         ANOP                                                      26490900
.*                                                                      26496200
.*       *---------------------------------------------------*          26501500
.*       *---------------------------------------------------*          26506800
.*       *                  UCBL KEYWORD                     *          26512100
.*       *---------------------------------------------------*          26517400
.*       *---------------------------------------------------*          26522700
&UCBLF(&NULLIX) SETB  1                                                 26528000
              AIF     (T'&UCBL  EQ 'O').EUCBL .*IF NULL SKIP            26533300
&UCBLF(&NULLIX) SETB  0                   .*RESET NULL IF NOT           26538600
&LENGTH       SETA    K'&UCBL           .*SET LENGTH OF KEYWORD         26543900
.*                                                                      26549200
.*       *---------------------------------------------------*          26554500
.*       * TEST FOR LITERAL AND SET FLAG BIT IN KEYWORD ARRAY*          26559800
.*       *---------------------------------------------------*          26565100
&UCBLF(&LITIX) SETB ('&UCBL'(1,1) EQ '''' AND                          C26570400
               '&UCBL'(&LENGTH,1) EQ '''')      IN QUOTES SET FLAG      26575700
.*                                                                      26581000
.*       *---------------------------------------------------*          26586300
.*       * TEST FOR REG AND SET FLAG BIT IN KEYWORD ARRAY    *          26591600
.*       *---------------------------------------------------*          26596900
&UCBLF(&REGIX) SETB ('&UCBL(1)' NE '&UCBL')                             26602200
.*                                                                      26607500
.*       *---------------------------------------------------*          26612800
.*       * TEST FOR REG01 AND SET FLAG BIT IN KEYWORD ARRAY  *          26618100
.*       *---------------------------------------------------*          26623400
&UCBLF(&REG01IX) SETB (&UCBLF(&REGIX) EQ 1 AND                         C26628700
               ('&UCBL(1)' EQ '0' OR '&UCBL(1)' EQ '1'))                26634000
.*                                                                      26639300
.*       *---------------------------------------------------*          26644600
.*       * TEST FOR ADCON AND SET FLAG BIT IN KEYWORD ARRAY  *          26649900
.*       *---------------------------------------------------*          26655200
&UCBLF(&ADCONIX) SETB ('&UCBL'(1,2) EQ 'A(' AND                        C26660500
               '&UCBL'(&LENGTH,1) EQ ')')                               26665800
.*                                                                      26671100
.*       *---------------------------------------------------*          26676400
.*       * If it's none of the above, it must be RX format   *          26681700
.*       *---------------------------------------------------*     @02a 26687000
         AIF  (&UCBLF(&LITIX) EQ 1 OR                                  C26692300
               &UCBLF(&REGIX) EQ 1 OR                                  C26697600
               &UCBLF(&ADCONIX) EQ 1).CKUCBL                            26702900
&UCBLF(&RXFMTIX) SETB 1                     Indicate RX format     @02a 26708200
.*                                                                      26713500
.*       *---------------------------------------------------*          26718800
.*       * If RXFMT is indicated determine if it's supported *          26724100
.*       * If it is supported, leave it on.  If it isn't     *          26729400
.*       * change it to unquoted literal.  A subsequent call *          26734700
.*       * to CHKFMT will determine if the this or any other *          26740000
.*       * format indicators are valid.                      *          26745300
.*       *---------------------------------------------------*     @02a 26750600
         AIF (&UCBLF(&RXFMTIX) NE 1).CKUCBL Br if not RXFMT        @02a 26755900
.*                                                                      26761200
         AIF ('&FMT(&UCBLIX)'(&RXFMTIX,1) EQ '1').CKUCBL           @02a 26766500
&UCBLF(&RXFMTIX) SETB 0                     Reset RX format ind.   @02a 26771800
&UCBLF(&UNQUOTEIX) SETB 1                   Indicate unquote fmt   @02a 26777100
.*                                                                      26782400
.CKUCBL ANOP                                                       @02a 26787700
.*       *---------------------------------------------------*          26793000
.*       * Get ready to call CHKFMT inner macro to validate  *          26798300
.*       * that the specified format of the keyword operand  *          26803600
.*       * is supported.  But first issue debug messages if  *          26808900
.*       * requested by DEBUG.                               *          26814200
.*       *---------------------------------------------------*          26819500
         AIF (&DEBUGON EQ 0).NODEBUGUCBL1                          @02a 26824800
         MNOTE *,' '                                                    26830100
         MNOTE *,'Calling CHKFMT for UCBL keyword. UCBLF flags are:'    26835400
         MNOTE *,'        NULL             = &UCBLF(&NULLIX)'           26840700
         MNOTE *,'        QUOTED LITERAL   = &UCBLF(&LITIX)'            26846000
         MNOTE *,'        REG (2-12)       = &UCBLF(&REGIX)'            26851300
         MNOTE *,'        REG (0!1)        = &UCBLF(&REG01IX)'          26856600
         MNOTE *,'        ADCON            = &UCBLF(&ADCONIX)'          26861900
         MNOTE *,'        RX FORMAT        = &UCBLF(&RXFMTIX)'          26867200
         MNOTE *,'        UNQUOTED LITERAL = &UCBLF(&UNQUOTEIX)'        26872500
.*                                                                      26877800
.NODEBUGUCBL1 ANOP                                                 @02a 26883100
         MSGDISP ,(CHKFMT,UCBL,&DEBUGON)                           @02a 26888400
.*                                                                      26893700
.EUCBL        ANOP                                                      26899000
.*                                                                      26904300
.*       *---------------------------------------------------*          26909600
.*       *---------------------------------------------------*          26914900
.*       *                   VOL KEYWORD                     *          26920200
.*       *---------------------------------------------------*          26925500
.*       *---------------------------------------------------*          26930800
&VOLF(&NULLIX) SETB 1                                                   26936100
              AIF     (T'&VOL  EQ 'O').EVOL .*IF NULL SKIP              26941400
&VOLF(&NULLIX) SETB 0                     .*RESET NULL IF NOT           26946700
&LENGTH       SETA    K'&VOL            .*SET LENGTH OF KEYWORD         26952000
.*                                                                      26957300
.*       *---------------------------------------------------*          26962600
.*       * TEST FOR LITERAL AND SET FLAG BIT IN KEYWORD ARRAY*          26967900
.*       *---------------------------------------------------*          26973200
&VOLF(&LITIX) SETB ('&VOL'(1,1) EQ '''' AND                            C26978500
               '&VOL'(&LENGTH,1) EQ '''')       IN QUOTES SET FLAG      26983800
.*                                                                      26989100
.*       *---------------------------------------------------*          26994400
.*       * TEST FOR REG AND SET FLAG BIT IN KEYWORD ARRAY    *          26999700
.*       *---------------------------------------------------*          27005000
&VOLF(&REGIX) SETB ('&VOL(1)' NE '&VOL')                                27010300
.*                                                                      27015600
.*       *---------------------------------------------------*          27020900
.*       * TEST FOR REG01 AND SET FLAG BIT IN KEYWORD ARRAY  *          27026200
.*       *---------------------------------------------------*          27031500
&VOLF(&REG01IX) SETB (&VOLF(&REGIX) EQ 1 AND                           C27036800
               ('&VOL(1)' EQ '0' OR '&VOL(1)' EQ '1'))                  27042100
.*                                                                      27047400
.*       *---------------------------------------------------*          27052700
.*       * TEST FOR ADCON AND SET FLAG BIT IN KEYWORD ARRAY  *          27058000
.*       *---------------------------------------------------*          27063300
&VOLF(&ADCONIX) SETB ('&VOL'(1,2) EQ 'A(' AND                          C27068600
               '&VOL'(&LENGTH,1) EQ ')')                                27073900
.*                                                                      27079200
.*       *---------------------------------------------------*          27084500
.*       * If it's none of the above, it must be RX format   *          27089800
.*       *---------------------------------------------------*     @02a 27095100
         AIF  (&VOLF(&LITIX) EQ 1 OR                                   C27100400
               &VOLF(&REGIX) EQ 1 OR                                   C27105700
               &VOLF(&ADCONIX) EQ 1).CKVOL                              27111000
&VOLF(&RXFMTIX) SETB 1                      Indicate RX format     @02a 27116300
.*                                                                      27121600
.*       *---------------------------------------------------*          27126900
.*       * If RXFMT is indicated determine if it's supported *          27132200
.*       * If it is supported, leave it on.  If it isn't     *          27137500
.*       * change it to unquoted literal.  A subsequent call *          27142800
.*       * to CHKFMT will determine if the this or any other *          27148100
.*       * format indicators are valid.                      *          27153400
.*       *---------------------------------------------------*     @02a 27158700
         AIF (&VOLF(&RXFMTIX) NE 1).CKVOL Br if not RXFMT          @02a 27164000
.*                                                                      27169300
         AIF ('&FMT(&VOLIX)'(&RXFMTIX,1) EQ '1').CKVOL             @02a 27174600
&VOLF(&RXFMTIX) SETB 0                      Reset RX format ind.   @02a 27179900
&VOLF(&UNQUOTEIX) SETB 1                    Indicate unquote fmt   @02a 27185200
.*                                                                      27190500
.CKVOL ANOP                                                        @02a 27195800
.*       *---------------------------------------------------*          27201100
.*       * Get ready to call CHKFMT inner macro to validate  *          27206400
.*       * that the specified format of the keyword operand  *          27211700
.*       * is supported.  But first issue debug messages if  *          27217000
.*       * requested by DEBUG.                               *          27222300
.*       *---------------------------------------------------*          27227600
         AIF (&DEBUGON EQ 0).NODEBUGVOL1                           @02a 27232900
         MNOTE *,' '                                                    27238200
         MNOTE *,'Calling CHKFMT for VOL keyword. VOLF flags are:'      27243500
         MNOTE *,'        NULL             = &VOLF(&NULLIX)'            27248800
         MNOTE *,'        QUOTED LITERAL   = &VOLF(&LITIX)'             27254100
         MNOTE *,'        REG (2-12)       = &VOLF(&REGIX)'             27259400
         MNOTE *,'        REG (0!1)        = &VOLF(&REG01IX)'           27264700
         MNOTE *,'        ADCON            = &VOLF(&ADCONIX)'           27270000
         MNOTE *,'        RX FORMAT        = &VOLF(&RXFMTIX)'           27275300
         MNOTE *,'        UNQUOTED LITERAL = &VOLF(&UNQUOTEIX)'         27280600
.*                                                                      27285900
.NODEBUGVOL1 ANOP                                                  @02a 27291200
         MSGDISP ,(CHKFMT,VOL,&DEBUGON)                            @02a 27296500
.*                                                                      27301800
.EVOL        ANOP                                                       27307100
.*                                                                      27312400
.*       *---------------------------------------------------*          27317700
.*       *---------------------------------------------------*          27323000
.*       *                  WAIT KEYWORD                     *          27328300
.*       *---------------------------------------------------*          27333600
.*       *---------------------------------------------------*          27338900
&WAITF(&NULLIX) SETB 1                                                  27344200
         AIF     (T'&WAIT  EQ 'O').EWAIT    .*IF NULL SKIP              27349500
&WAITF(&NULLIX) SETB 0                      .*RESET NULL IF NOT         27354800
&LENGTH         SETA    K'&WAIT             .*SET LENGTH OF KEYWORD     27360100
.*                                                                      27365400
.*       *---------------------------------------------------*          27370700
.*       * TEST FOR LITERAL AND SET FLAG BIT IN KEYWORD ARRAY*          27376000
.*       *---------------------------------------------------*          27381300
&WAITF(&LITIX) SETB ('&WAIT'(1,1) EQ '''' AND                          C27386600
               '&WAIT'(&LENGTH,1) EQ '''')  In quotes set flag          27391900
.*                                                                      27397200
.*       *---------------------------------------------------*          27402500
.*       * TEST FOR REG AND SET FLAG BIT IN KEYWORD ARRAY    *          27407800
.*       *---------------------------------------------------*          27413100
&WAITF(&REGIX) SETB ('&WAIT(1)' NE '&WAIT')                             27418400
.*                                                                      27423700
.*       *---------------------------------------------------*          27429000
.*       * TEST FOR REG01 AND SET FLAG BIT IN KEYWORD ARRAY  *          27434300
.*       *---------------------------------------------------*          27439600
&WAITF(&REG01IX) SETB (&WAITF(&REGIX) EQ 1 AND                         C27444900
               ('&WAIT(1)' EQ '0' OR '&WAIT(1)' EQ '1'))                27450200
.*                                                                      27455500
.*       *---------------------------------------------------*          27460800
.*       * TEST FOR ADCON AND SET FLAG BIT IN KEYWORD ARRAY  *          27466100
.*       *---------------------------------------------------*          27471400
&WAITF(&ADCONIX) SETB ('&WAIT'(1,2) EQ 'A(' AND                        C27476700
               '&WAIT'(&LENGTH,1) EQ ')')                               27482000
.*                                                                      27487300
.*       *---------------------------------------------------*          27492600
.*       * If it's none of the above, it must be RX format   *          27497900
.*       *---------------------------------------------------*     @02a 27503200
         AIF  (&WAITF(&LITIX) EQ 1 OR                                  C27508500
               &WAITF(&REGIX) EQ 1 OR                                  C27513800
               &WAITF(&ADCONIX) EQ 1).CKWAIT                       @02c 27519100
&WAITF(&RXFMTIX) SETB 1                     Indicate RX format     @02a 27524400
.*                                                                      27529700
.*       *---------------------------------------------------*          27535000
.*       * If RXFMT is indicated determine if it's supported *          27540300
.*       * If it is supported, leave it on.  If it isn't     *          27545600
.*       * change it to unquoted literal.  A subsequent call *          27550900
.*       * to CHKFMT will determine if the this or any other *          27556200
.*       * format indicators are valid.                      *          27561500
.*       *---------------------------------------------------*     @02a 27566800
         AIF (&WAITF(&RXFMTIX) NE 1).CKWAIT Br if not RXFMT        @02a 27572100
.*                                                                      27577400
         AIF ('&FMT(&WAITIX)'(&RXFMTIX,1) EQ '1').CKWAIT           @02a 27582700
&WAITF(&RXFMTIX)   SETB 0                   Reset RX format ind.   @02a 27588000
&WAITF(&UNQUOTEIX) SETB 1                   Indicate unquote fmt   @02a 27593300
.*                                                                      27598600
.CKWAIT  ANOP                                                      @02a 27603900
.*       *---------------------------------------------------*          27609200
.*       * Get ready to call CHKFMT inner macro to validate  *          27614500
.*       * that the specified format of the keyword operand  *          27619800
.*       * is supported.  But first issue debug messages if  *          27625100
.*       * requested by DEBUG.                               *          27630400
.*       *---------------------------------------------------*          27635700
         AIF (&DEBUGON EQ 0).NODEBUGWAIT1                          @02a 27641000
         MNOTE *,' '                                                    27646300
         MNOTE *,'Calling CHKFMT for WAIT keyword. WAITF flags are:'    27651600
         MNOTE *,'        NULL             = &WAITF(&NULLIX)'           27656900
         MNOTE *,'        QUOTED LITERAL   = &WAITF(&LITIX)'            27662200
         MNOTE *,'        REG (2-12)       = &WAITF(&REGIX)'            27667500
         MNOTE *,'        REG (0!1)        = &WAITF(&REG01IX)'          27672800
         MNOTE *,'        ADCON            = &WAITF(&ADCONIX)'          27678100
         MNOTE *,'        RX FORMAT        = &WAITF(&RXFMTIX)'          27683400
         MNOTE *,'        UNQUOTED LITERAL = &WAITF(&UNQUOTEIX)'        27688700
.*                                                                      27694000
.NODEBUGWAIT1 ANOP                                                 @02a 27699300
         MSGDISP ,(CHKFMT,WAIT,&DEBUGON)                           @02a 27704600
.*                                                                      27709900
.EWAIT        ANOP                                                      27715200
.*                                                                      27720500
.*###################################################################*  27725800
.*###################################################################*  27731100
.*#                                                                 #*  27736400
.*#            VERIFY FUNCTION REQUEST IS VALID                     #*  27741700
.*#                                                                 #*  27747000
.*###################################################################*  27752300
.*###################################################################*  27757600
        AIF (N'&SYSLIST EQ 1).KONTOK                                    27762900
.*                                                                      27768200
.*       *---------------------------------------------------*          27773500
.*       * Debug has been added as a positional parameter,   *          27778800
.*       * so 2 is now valid, but it has to be DEBUG.  If    *          27784100
.*       * DEBUG was specified, &DEBUGON will be on.         *          27789400
.*       *---------------------------------------------------*     @02a 27794700
        AIF (N'&SYSLIST EQ 2 AND &DEBUGON EQ 1).KONTOK             @02a 27800000
.*                                                                      27805300
        AIF (N'&SYSLIST EQ 0 AND '&MF(1)' EQ 'L').FUNOKW                27810600
        AIF (N'&SYSLIST EQ 0 AND '&MF(1)' EQ 'E').FUNOKW                27815900
        AGO     .BADFUN                                                 27821200
.KONTOK ANOP                                                            27850000
&FUNCTON  SETC  '&SERVICE(1)'                                      @H1A 27900000
       AIF ('&SERVICE(1)' NE 'DISMOUNT').KONTOK2                   @H1A 27950000
&FUNCTON  SETC   'DEMOUNT'                                         @H1A 28000000
.KONTOK2  ANOP                                                     @H1A 28050000
       AIF ('&FUNCTON' EQ 'RDY').FUNOK                             @H1C 28100000
       AIF ('&FUNCTON' EQ 'MOUNT').FUNOK                           @H1C 28150000
       AIF ('&FUNCTON' EQ 'VERIFY').FUNOK                          @H1C 28200000
       AIF ('&FUNCTON' EQ 'DEMOUNT').FUNOK                         @H1C 28250000
       AIF ('&FUNCTON' EQ 'RESET').FUNOK                           @H1C 28300000
       AIF ('&FUNCTON' EQ 'GEN').FUNOK                             @H1C 28350000
.BADFUN   ANOP                                                          28400000
       MNOTE   12,'MSGDISP SERVICE REQUESTED IS INVALID OR MISSING'     28450000
       AGO  .FUNOK                                                      28500000
.*                                                                      28533300
.*###################################################################*  28566600
.*###################################################################*  28599900
.*#                                                                 #*  28633200
.*#        BUILD  LABEL STATEMENT AND CHECK OUT ALL KEY WORD        #*  28666500
.*#                                                                 #*  28699800
.*###################################################################*  28733100
.*###################################################################*  28766400
.FUNOKW  ANOP                                                           28800000
       MNOTE    *,'       MSGDISP SERVICE REQUESTED IS NULL'            28850000
         AGO  .FUNOKX                                                   28900000
.FUNOK   ANOP                                                           28950000
       MNOTE    *,'       MSGDISP SERVICE REQUESTED IS &SYSLIST(1)'     29000000
.FUNOKX  ANOP                                                           29050000
        AGO  .KEYCHK                        GO CHECK OUT KEYWORDS       29100000
.KEYCMP  ANOP                               KEYWORD CHECK OUT COMPLETE  29150000
       AIF ('&MF' EQ 'L' OR '&MF(1)' EQ 'E' OR '&MF' EQ '').MFOK        29200000
       MNOTE  12,'MF=&MF INVALID, NORMAL FORM ASSUMED'                  29250000
.MFOK  ANOP                                                             29300000
         AIF ('&MF(1)' EQ 'L').BLDLST                           @H2C    29350000
         AIF ('&MF(1)' NE 'E').NORMF .* IF NOT EXEC ASSUME NORMAL       29400000
.*                                      FORM                            29650000
         AIF ('&NAME' EQ '').EFORM2                             @H2C    29662500
&NAME    DC    0H'0'                                               @H2C 29675000
.EFORM2  ANOP                                                   @H2C    29687500
.*                                                                      29713700
.*###################################################################*  29739900
.*###################################################################*  29766100
.*#                                                                 #*  29792300
.*#        BUILD  CHARACTER STRING FOR USE AS PLIST ADDRESS         #*  29818500
.*#        FOR EXEC FORM  CODE                                      #*  29844700
.*#                                                                 #*  29870900
.*###################################################################*  29897100
.*###################################################################*  29923300
          LCLC    &PLADD                                                29950000
      AIF  (&MFE(&REGIX) NE 1 AND &MFE(&REG01IX) NE 1).NOTREG    @H2C   30000000
&PLADD   SETC  '0'.'&MF(2)'                                             30100000
         AGO   .ENSETUP                                                 30150000
.NOTREG  ANOP                                                           30200000
      AIF  ('&MF(2)' NE '').MFRX                                 @H2A   30212500
         MNOTE   12,'PARAMETER LIST ADDRESS NOT GIVEN FOR MF=E'  @H2A   30225000
.MFRX    ANOP                                                    @H2A   30237500
&PLADD   SETC  '&MF(2)'     .* SET UP RX ADDR                           30250000
.ENSETUP ANOP                                                           30450000
.*                                                                      30477000
.*###################################################################*  30504000
.*###################################################################*  30531000
.*#                                                                 #*  30558000
.*#    EXAMINE EACH KEYWORD AND BUILD CODE TO MODIFY THE            #*  30585000
.*#    PARAMETER LIST SET SERVICE TYPE FIELD IF SPECIFIED           #*  30612000
.*#    SET SERVICE TYPE FIELD IF SPECIFIED                          #*  30639000
.*#                                                                 #*  30666000
.*###################################################################*  30693000
.*###################################################################*  30720000
.*                                                                      30747000
.*       *---------------------------------------------------*          30774000
.*       * The new form of the parameter list is indicated   *          30801000
.*       * by an x'FF' in the first byte of the plist, the   *          30828000
.*       * same place that used to be the service type code. *          30855000
.*       * The old type code has been moved to +x'10' into   *          30882000
.*       * the plist.                                        *          30909000
.*       *---------------------------------------------------*     @02a 30936000
         MVI   &PLADD,X'FF'           INDICATE NEW FORM OF PLIST   @02A 30963000
.*                                                                      30990000
.*       *---------------------------------------------------*          31017000
.*       *         NO SERVICE TYPE                           *          31044000
.*       *---------------------------------------------------*          31071000
         AIF  (T'&FUNCTON  EQ 'O').SK1                                  31100000
.*                                                                      31140000
.*       *---------------------------------------------------*          31180000
.*       *       SERVICE TYPE MOUNT                          *          31220000
.*       *---------------------------------------------------*          31260000
         AIF ('&FUNCTON' NE 'MOUNT').NOTMUNT                            31300000
         MVI   &NTPOFF+&PLADD,X'03'   MOUNT SERVICE                @H2C 31350000
         AGO   .SK1                                                     31400000
.NOTMUNT ANOP                                                           31450000
.*                                                                      31490000
.*       *---------------------------------------------------*          31530000
.*       *       SERVICE TYPE RDY                            *          31570000
.*       *---------------------------------------------------*          31610000
         AIF ('&FUNCTON' NE 'RDY').NOTRDY                               31650000
         MVI   &NTPOFF+&PLADD,X'01'   READY SERVICE                @H2C 31700000
         AGO   .SK1                                                     31750000
.NOTRDY  ANOP                                                           31800000
.*                                                                      31840000
.*       *---------------------------------------------------*          31880000
.*       *       SERVICE TYPE VERIFY                         *          31920000
.*       *---------------------------------------------------*          31960000
         AIF ('&FUNCTON' NE 'VERIFY').NOTVEFY                           32000000
         MVI   &NTPOFF+&PLADD,X'04'   VERIFY SERVICE               @H2C 32050000
         AGO   .SK1                                                     32100000
.NOTVEFY ANOP                                                           32150000
.*                                                                      32190000
.*       *---------------------------------------------------*          32230000
.*       *       SERVICE TYPE RESET                          *          32270000
.*       *---------------------------------------------------*          32310000
         AIF ('&FUNCTON' NE 'RESET').NOTREST                            32350000
         MVI   &NTPOFF+&PLADD,X'06'   RESET SERVICE                @H2C 32400000
         AGO   .SK1                                                     32450000
.NOTREST ANOP                                                           32500000
.*                                                                      32540000
.*       *---------------------------------------------------*          32580000
.*       *       SERVICE TYPE GEN                            *          32620000
.*       *---------------------------------------------------*          32660000
         AIF ('&FUNCTON' NE 'GEN').NOTGEN                               32700000
         MVI   &NTPOFF+&PLADD,X'07'   GEN SERVICE                  @H2C 32750000
         AGO   .SK1                                                     32800000
.NOTGEN  ANOP                                                           32850000
.*                                                                      32890000
.*       *---------------------------------------------------*          32930000
.*       *       SERVICE TYPE DEMOUNT                        *          32970000
.*       *---------------------------------------------------*          33010000
         AIF ('&FUNCTON' NE 'DEMOUNT').SK1                        @H2C  33050000
         AIF (&DISPF(&NULLIX) EQ 1 OR &DISPF(&LITIX) EQ 1).NLLST        33100000
         AIF (&DISPF(&REGIX) EQ 1).EDREG                                33150000
         AIF (&DISPF(&ADCONIX) EQ 1).EDADC                              33200000
         AGO  .EDRX                                                     33250000
.NLLST   ANOP                                                           33300000
&WORK1   SETC   'X''C4'''                                               33350000
         AIF ('&DISP' NE '''K''').NKEEP                                 33400000
&WORK1   SETC  'X''D2'''                                                33450000
         AGO  .STFUN                                                    33500000
.NKEEP   ANOP                                                           33550000
         AIF ('&DISP' NE '''R''').STFUN                                 33600000
&WORK1   SETC   'X''D9'''                                               33650000
.STFUN   ANOP                                                           33700000
         MVI   &NTPOFF+&PLADD,&WORK1  DEMOUNT SERVICE              @H2C 33750000
         AGO   .SK1                                                     33800000
.EDREG   ANOP                                                           33850000
         IC    15,0&DISP              GET DISPOSITION              @H2C 33900000
         STC   15,&NTPOFF+&PLADD      STORE INTO PARM LIST         @H2C 33950000
         AGO    .SK1                                                    34000000
.EDRX    ANOP                                                           34050000
         IC    15,&DISP               GET DISPOSITION              @H2C 34100000
         STC   15,&NTPOFF+&PLADD      STORE INTO PARM LIST         @H2C 34150000
         AGO    .SK1                                                    34200000
.EDADC   ANOP                                                           34250000
         L     15,=&DISP              GET DISPOSITION              @H2C 34300000
         IC    15,0(15)                                                 34350000
         STC   15,&NTPOFF+&PLADD      STORE INTO PARM LIST         @H2C 34400000
.SK1 ANOP                                                               34450000
.*                                                                      34464700
.*       *---------------------------------------------------*          34479400
.*       *                   FORCE KEYWORD                   *          34508800
.*       *                                                   *          34523500
.*       * Make sure the IOSLVL/FLAGS byte is zeroes.        *          34538200
.*       *                                                   *          34540400
.*       * The following was changed with PTM K1K0279 in     *          34542600
.*       * release HDZ11K0:                              @L2A*          34544800
.*       *                                                   *          34547000
.*       * Removed all handling of keywords such as DAVV,    *          34549200
.*       * FDEV, and numbers such as 1,2, etc.  The code     *          34551400
.*       * should only recognize FORCE=(REGX) now.  It       *          34553600
.*       * may have been possible to remove more of the      *          34555800
.*       * code that handles the FORCE keyword but changes   *          34558000
.*       * were kept to a minimum to avoid introducing       *          34560200
.*       * other errors into this macro.                     *          34562400
.*       *                                                   *          34564600
.*       *---------------------------------------------------*          34567600
         MVI   &LVLOFF+&PLADD,X'00'   CLEAR IOSLVL/FLAGS BYTE      @02A 34582300
.*                                                                 @02a 34597000
         AIF ('&FORCE' EQ '').FEND                                 @H2A 34621700
         AIF (&FORCEF(&REGIX) EQ 1).FREG                           @L2C 34631000
.*                                                                      34640300
         MNOTE  12,' &FORCE. INVALID FOR FORCE KEYWORD'            @L2A 34642100
         MEXIT                                                     @L2A 34643900
.*                                                                      34645700
.FREG    ANOP                                                      @H2A 34647500
         LR    15,&FORCE(1)           GET FORCE VALUE              @H2A 34649600
         SLL   15,4                   SHIFT INPUT TO HIGH NIBBLE   @H2A 34662000
         IC    0,&LVLOFF+&PLADD       PICK UP FLAGS                @05A 34667900
         OR    15,0                   COMBINE THE TWO              @04A 34673800
         STC   15,&LVLOFF+&PLADD      PUT BACK TO PARM LIST        @04A 34679700
.*                                                                      34685600
.*       Removed approximately 30 lines of code here               @L2A 34735600
.*                                                                      34785600
.FEND    ANOP                                                      @H2A 35081400
.*                                                                      35197400
.*       *---------------------------------------------------*          35220600
.*       *---------------------------------------------------*          35243800
.*       *                    WAIT KEYWORD                   *          35267000
.*       *                                                   *          35290200
.*       * The 'DONT WAIT' bit is reset right now as a       *          35313400
.*       * result of the 'CLEAR IOSLVL/FLAGS BYTE' instr     *          35331900
.*       * for the FORCE keyword, above, so we need to       *          35350400
.*       * do something for WAIT if NO was specified for     *          35368900
.*       * the WAIT keyword.                                 *          35387400
.*       *---------------------------------------------------*          35406200
.*       *---------------------------------------------------*          35429400
         AIF ('&WAIT' NE 'NO').WAIT9I                              @02C 35452600
         OI    &LVLOFF+&PLADD,X'04'   SET DON'T WAIT               @02A 35475800
.WAIT9I  ANOP                                                      @H2C 35500000
.*                                                                      35550000
.*       *---------------------------------------------------*          35552000
.*       *---------------------------------------------------*          35554000
.*       *                  INDEX KEYWORD                    *          35556000
.*       *                                                   *          35558000
.*       * The default for index is yes, because that's how  *          35560000
.*       * it has always been treated previously.            *          35562000
.*       *                                                   *          35564000
.*       * Unfortunately, this is reverse logic in that      *          35566000
.*       * INDEX=NO is indicated by setting the don't index  *          35568000
.*       * bit on.                                           *          35570000
.*       *                                                   *          35572000
.*       * The logic here will be to zero the index value    *          35574000
.*       * pointer field at +x'14' into the plist if there   *          35576000
.*       * is no pointer to be put into the plist.  This     *          35578000
.*       * pointer is used when the REG or ADCON form are    *          35580000
.*       * used.                                             *          35582000
.*       *                                                   *          35584000
.*       * If the REG or ADCON forms are used the don't      *          35586000
.*       * index bit will remain reset, the new pointer      *          35588000
.*       * will be updated with the address of the INDEX     *          35590000
.*       * value,and the new 'Keywords Used' bits will be    *          35592000
.*       * set in the plist at offset x'11'.                 *          35594000
.*       *---------------------------------------------------*     @02c 35596000
         AIF   (&INDEXF(&NULLIX) EQ 1).INDEXX   Index not spec'd   @02a 35598000
.*                                                                      35600000
.*       *---------------------------------------------------*          35625500
.*       * If quoted or unquoted literal used, we can set    *          35651000
.*       * the bit in the plist.                             *          35676500
.*       *---------------------------------------------------*     @02a 35702000
         AIF (&INDEXF(&LITIX) EQ 0 AND                                 C35727500
               &INDEXF(&UNQUOTEIX) EQ 0).INDEXA                    @02a 35753000
.*                                                                      35778600
         AIF   ('&LITVALINDEX' EQ 'NO').SETDONTINDEXFLAG           @02a 35780800
         AGO   .INDEXX                                             @02A 35783000
.*                                                                      35785200
.SETDONTINDEXFLAG  ANOP                                            @02a 35785300
         OI    &LVLOFF+&PLADD,X'01'   SET DON'T INDEX BIT ON       @02A 35785400
         AGO   .INDEXX                                             @02a 35785500
.*                                                                      35785600
.INDEXA ANOP                                                            35785700
.*       *---------------------------------------------------*          35785800
.*       * Check for ADCON form                              *          35785900
.*       *---------------------------------------------------*     @02a 35786000
         AIF (&INDEXF(&ADCONIX) NE 1).INDEXB    Br if not ADCON    @02a 35786100
&WORK1   SETC  '15,='.'&INDEX'                                     @02a 35786200
         L     &WORK1                 ADDR OF INDEX (ADCON) VALUE  @02A 35786300
         ST    15,&IXOFF+&PLADD       STORE INTO PLIST             @02A 35786400
         AGO   .INDEXC                                             @02a 35786500
.*                                                                      35786600
.INDEXB ANOP                                                            35786700
.*       *---------------------------------------------------*          35786800
.*       * Check for REG form                                *          35786900
.*       *---------------------------------------------------*     @02a 35787000
         AIF  (&INDEXF(&REGIX) NE 1).INDEXZ     Br if not REG form @02a 35787100
         ST    &INDEX(1),&IXOFF+&PLADD REGISTER INDEX PTR TO PLIST @02A 35787200
.*                                                                      35787300
.INDEXC ANOP                                                            35787400
         OI    &KWDOFF+&PLADD,&KWDINDEXBIT  IND INDEX PTR AVAILABLE     35787500
         AGO   .INDEXZ                                             @02a 35787600
.*                                                                      35787700
.INDEXX  ANOP                                                      @02a 35787800
         LA    15,0                   PREPARE TO 0 INDEX PTR       @02A 35787900
         ST    15,&IXOFF+&PLADD       ZERO INDEX PTR IN PLIST      @02A 35788000
.*                                                                      35788100
.INDEXZ  ANOP                                                      @H3A 35789600
.*                                                                      35791800
.*       *---------------------------------------------------*          35802400
.*       *---------------------------------------------------*          35813000
.*       *                 MEDIATYPE KEYWORD                 *          35823600
.*       *---------------------------------------------------*     @02c 35834200
.*       *---------------------------------------------------*     @02c 35844800
         AIF (&MEDTF(&NULLIX) EQ 1).MEDTX       MEDTP not spec'd   @02a 35855400
         AIF (&MEDTF(&LITIX) EQ 0).MEDTA                                35866000
.*                                                                      35876600
         LA    15,=C&MEDIATYPE        ADDR OF LITERAL MEDT VALUE   @02A 35883200
         ST    15,&MTPOFF+&PLADD      INTO MEDT PTR FIELD          @02A 35889800
         AGO   .MEDTD                                              @02A 35896400
.*                                                                      35903300
.MEDTA ANOP                                                             35910400
.*       *---------------------------------------------------*          35917500
.*       * Check for ADCON form                              *          35924600
.*       *---------------------------------------------------*     @02a 35931700
         AIF (&MEDTF(&ADCONIX) EQ 0).MEDTB      Br if not ADCON    @02a 35938800
&WORK1   SETC  '15,='.'&MEDIATYPE'                                 @02a 35945900
         L     &WORK1                 ADDR OF MEDT ADCON VALUE     @02A 35953000
         ST    15,&MTPOFF+&PLADD      STORE INTO PLIST             @02A 35960100
         AGO   .MEDTD                                              @02a 35967200
.*                                                                      35975000
.MEDTB ANOP                                                             35977700
.*       *---------------------------------------------------*          35980400
.*       * Check for RX form                                 *          35983100
.*       *---------------------------------------------------*     @02a 35985800
         AIF (&MEDTF(&RXFMTIX) EQ 0).MEDTC      Br if not ADCON    @02a 35988500
         LA    15,&MEDIATYPE          ADDR OF MEDT RX VARIABLE     @02A 35991200
         ST    15,&MTPOFF+&PLADD      STORE INTO PLIST             @02A 35993900
         AGO   .MEDTD                                              @02a 35996600
.*                                                                      36000000
.MEDTC ANOP                                                             36002800
.*       *---------------------------------------------------*          36005600
.*       * Check for REG form                                *          36008400
.*       *---------------------------------------------------*     @02a 36011200
         AIF  (&MEDTF(&REGIX) NE 1).MEDTZ       Br if not REG form @02a 36014000
         ST    &MEDIATYPE(1),&MTPOFF+&PLADD  ST REG VL INTO PLIST  @02A 36016800
.*                                                                      36020000
.MEDTD   ANOP                                                      @H3A 36026800
         OI    &KWDOFF+&PLADD,&KWDMEDTBIT  IND MEDTYP PTR AVAILABLE     36033600
         AGO  .MEDTZ                                               @02a 36040400
.*                                                                      36047500
.MEDTX   ANOP                                                      @H3A 36049300
         LA    15,0                   PREPARE TO 0 PLIST MEDT PTR  @02A 36051100
         ST    15,&MTPOFF+&PLADD      ZERO PLIST MEDT POINTER      @02A 36052900
.*                                                                      36054700
.MEDTZ   ANOP                                                      @H3A 36056500
.*                                                                      36058300
.*       *---------------------------------------------------*          36060100
.*       *---------------------------------------------------*          36061900
.*       *                     UCB KEYWORD                   *          36063700
.*       *---------------------------------------------------*          36065500
.*       *---------------------------------------------------*          36067300
         AIF   (&UCBF(&NULLIX) EQ 1).SKK1                          @02C 36069100
.*                                                                      36070900
         AIF   ('&FUNCTON' NE 'RESET').STOREUCBADDR                @02a 36072700
         OI    &LVLOFF+&PLADD,X'02'   IND RESET USING SINGLE UCB   @H2C 36074500
.*                                                                      36076300
.STOREUCBADDR  ANOP                                                @02a 36078100
&WORK1   SETC  '&UCB'(2,K'&UCB-2)',&UCBOFF+&PLADD'                      36079900
.*                                                                      36082500
         ST    &WORK1                 STORE UCB PTR INTO PARM LIST @H2C 36100000
.*                                                                      36150000
.SKK1    ANOP                                                           36250000
.*                                                                      36283300
.*       *---------------------------------------------------*          36316600
.*       *---------------------------------------------------*          36349900
.*       *                     SER KEYWORD                   *          36383200
.*       *---------------------------------------------------*          36416500
.*       *---------------------------------------------------*          36449800
         AIF (&SERF(&NULLIX) EQ 1).SK3                                  36483100
         AIF (&SERF(&ADCONIX) NE 1).SK4                                 36516400
&WORK1   SETC  '15,='.'&SER'                                            36550000
         L     &WORK1                 GET VOL-SER ADDRESS          @H2C 36600000
         ST    15,&TX1OFF+&PLADD      STORE INTO PARM LIST         @H2C 36650000
        AGO   .SK3                                                      36700000
.SK4    ANOP                                                            36750000
        AIF  (&SERF(&LITIX) NE 1).SK4A                                  36800000
&WORK1  SETC  '15,=C'.'&SER'                                            36850000
         LA    &WORK1                 GET VOL-SER ADDRESS          @H2C 36900000
         ST    15,&TX1OFF+&PLADD      STORE INTO PARM LIST         @H2C 36950000
         AGO  .SK3                                                      37000000
.SK4A    ANOP                                                           37050000
         AIF  (&SERF(&REGIX) NE 1).SK4B                                 37100000
         ST    &SER(1),&TX1OFF+&PLADD STORE VOL-SER ADDRESS        @H2C 37150000
        AGO    .SK3                                                     37200000
.SK4B   ANOP                                                            37250000
         LA    15,&SER                GET VOL-SER ADDRESS          @H2C 37300000
         ST    15,&TX1OFF+&PLADD      STORE INTO PARM LIST         @H2C 37350000
.SK3     ANOP                                                           37400000
.*                                                                      37433300
.*       *---------------------------------------------------*          37466600
.*       *---------------------------------------------------*          37499900
.*       *                     TXT KEYWORD                   *          37533200
.*       *---------------------------------------------------*          37566500
.*       *---------------------------------------------------*          37599800
         AIF (&TXTF(&NULLIX) EQ 1).TXT3                                 37633100
         AIF (&TXTF(&ADCONIX) NE 1).TXT4                                37666400
&WORK1   SETC  '15,='.'&TXT'                                            37700000
         L     &WORK1                 GET TEXT ADDRESS             @H2C 37750000
         ST    15,&TX1OFF+&PLADD      STORE INTO PARM LIST         @H2C 37800000
        AGO   .TXT3                                                     37850000
.TXT4   ANOP                                                            37900000
        AIF  (&TXTF(&LITIX) NE 1).TXT4A                                 37950000
&WORK1  SETC  '15,=C'.'&TXT'                                            38000000
         LA    &WORK1                 GET TEXT ADDRESS             @H2C 38050000
         ST    15,&TX1OFF+&PLADD      STORE INTO PARM LIST         @H2C 38100000
         AGO  .TXT3                                                     38150000
.TXT4A   ANOP                                                           38200000
        AIF   (&TXTF(&REGIX) NE 1).TXT4B                                38250000
         ST    &TXT(1),&TX1OFF+&PLADD STORE TEXT ADDRESS INTO PARM @H2C 38300000
        AGO    .TXT3                                                    38350000
.TXT4B  ANOP                                                            38400000
         LA    15,&TXT                GET TEXT ADDRESS             @H2C 38450000
         ST    15,&TX1OFF+&PLADD      STORE INTO PARM LIST         @H2C 38500000
.TXT3    ANOP                                                           38550000
.*                                                                      38595000
.*       *---------------------------------------------------*          38640000
.*       *---------------------------------------------------*          38685000
.*       *                    UCBL KEYWORD                   *          38730000
.*       *---------------------------------------------------*          38775000
.*       *---------------------------------------------------*          38820000
         AIF (&UCBLF(&NULLIX) EQ 1).CBL3                                38865000
         NI   &LVLOFF+&PLADD,X'FF'-X'02' UCB LIST PASSED           @H2C 38910000
         AIF (&UCBLF(&ADCONIX) NE 1).CBL4                               38955000
&WORK1   SETC  '15,='.'&UCBL'                                           39000000
         L     &WORK1                 GET UCB LIST ADDRESS         @H2C 39050000
         ST    15,&UCBOFF+&PLADD      STORE INTO PARM LIST         @H2C 39100000
        AGO   .CBL3                                                     39150000
.CBL4    ANOP                                                           39200000
        AIF   (&UCBLF(&REGIX) NE 1).CBL4B                               39250000
         ST    &UCBL(1),&UCBOFF+&PLADD STORE UCB LIST INTO PARM    @H2C 39300000
        AGO    .CBL3                                                    39350000
.CBL4B  ANOP                                                            39400000
         LA    15,&UCBL               GET UCB LIST ADDRESS         @H2C 39450000
         ST    15,&UCBOFF&PLADD       STORE INTO PARM LIST         @H2C 39500000
.CBL3    ANOP                                                           39550000
.*                                                                      39583300
.*       *---------------------------------------------------*          39616600
.*       *---------------------------------------------------*          39649900
.*       *                    MSER KEYWORD                   *          39683200
.*       *---------------------------------------------------*          39716500
.*       *---------------------------------------------------*          39749800
         AIF (&MSERF(&NULLIX) EQ 1).MSER3                               39783100
         AIF (&MSERF(&ADCONIX) NE 1).MSER4                              39816400
&WORK1   SETC  '15,='.'&MSER'                                           39850000
         L     &WORK1                 GET MOUNT VOL-SER ADDRESS    @H2C 39900000
         ST    15,&TX2OFF+&PLADD      STORE INTO PARM LIST         @H2C 39950000
        AGO   .MSER3                                                    40000000
.MSER4  ANOP                                                            40050000
        AIF  (&MSERF(&LITIX) NE 1).MSER4A                               40100000
&WORK1  SETC  '15,=C'.'&MSER'                                           40150000
         LA    &WORK1                 GET MOUNT VOL-SER ADDRESS    @H2C 40200000
         ST    15,&TX2OFF+&PLADD      STORE INTO PARM LIST         @H2C 40250000
         AGO  .MSER3                                                    40300000
.MSER4A  ANOP                                                           40350000
        AIF   (&MSERF(&REGIX) NE 1).MSER4B                              40400000
         ST    &MSER(1),&TX2OFF+&PLADD STORE MOUNT VOL-SER ADDRESS @H2C 40450000
        AGO    .MSER3                                                   40500000
.MSER4B ANOP                                                            40550000
         LA    15,&MSER               GET MOUNT VOL-SER ADDRESS    @H2C 40600000
         ST    15,&TX2OFF+&PLADD      STORE INTO PARM LIST         @H2C 40650000
.MSER3   ANOP                                                           40700000
.*                                                                      40735000
.*       *---------------------------------------------------*          40770000
.*       *---------------------------------------------------*          40805000
.*       *                   LABEL KEYWORD                   *          40840000
.*       *---------------------------------------------------*          40875000
.*       *---------------------------------------------------*          40910000
        AIF   (&LABELF(&NULLIX) EQ 1).SK5                               40945000
        AIF   (&LABELF(&LITIX) EQ 0).SK6                                40980000
         MVI   &LABOFF+&PLADD,C&LABEL STORE LABEL INTO PARM LIST   @H2C 41015000
        AGO  .SK5                                                       41050000
.SK6    ANOP                                                            41100000
        AIF   (&LABELF(&ADCONIX) NE 1).SK7                              41150000
         L     15,=&LABEL             GET LABEL                    @H2C 41200000
         IC    15,0(15)                                                 41250000
         STC   15,&LABOFF+&PLADD      STORE INTO PARM LIST         @H2C 41300000
        AGO  .SK5                                                       41350000
.SK7    ANOP                                                            41400000
        AIF   (&LABELF(&REGIX) NE 1).SK7A                               41450000
         IC    15,0&LABEL             GET LABEL                    @H2C 41500000
         STC   15,&LABOFF+&PLADD      STORE INTO PARM LIST         @H2C 41550000
        AGO    .SK5                                                     41600000
.SK7A   ANOP                                                            41650000
         IC    15,&LABEL              GET LABEL                    @H2C 41700000
         STC   15,&LABOFF+&PLADD      STORE INTO PARM LIST         @H2C 41750000
.SK5     ANOP                                                           41800000
.*                                                                      41833300
.*       *---------------------------------------------------*          41866600
.*       *---------------------------------------------------*          41899900
.*       *                  MLABEL KEYWORD                   *          41933200
.*       *---------------------------------------------------*          41966500
.*       *---------------------------------------------------*          41999800
        AIF   (&MLABELF(&NULLIX) EQ 1).MBEL5                            42033100
        AIF   (&MLABELF(&LITIX) NE 1).MBEL6                             42066400
.MBEL6A ANOP                                                            42100000
         MVI   &LABOFF+&PLADD,C&MLABEL STORE MOUNT LABEL INTO PARM @H2C 42150000
        AGO  .MBEL5                                                     42200000
.MBEL6  ANOP                                                            42250000
        AIF   (&MLABELF(&ADCONIX) NE 1).MBEL7                           42300000
         L     15,=&MLABEL            GET MOUNT LABEL              @H2C 42350000
         IC    15,0(15)                                                 42400000
         STC   15,&LABOFF+&PLADD      STORE INTO PARM LIST         @H2C 42450000
        AGO  .MBEL5                                                     42500000
.MBEL7  ANOP                                                            42550000
        AIF   (&MLABELF(&REGIX) NE 1).MBEL7A                            42590000
        IC     15,0&MLABEL            GET MOUNT LABEL              @H2C 42630000
        STC    15,&LABOFF+&PLADD      STORE INTO PARM LIST         @H2C 42670000
        AGO  .MBEL5                                                @H2A 42710000
.MBEL7A ANOP                                                            42750000
         IC    15,&MLABEL             GET MOUNT LABEL              @H2A 42800000
         STC   15,&LABOFF+&PLADD      STORE INTO PARM LIST         @H2A 42850000
.MBEL5   ANOP                                                           42900000
.*                                                                      42936300
.*       *---------------------------------------------------*          42972600
.*       *---------------------------------------------------*          43008900
.*       *                     DCB KEYWORD                   *          43045200
.*       *---------------------------------------------------*          43081500
.*       *---------------------------------------------------*          43117800
          AIF (&DCBF(&NULLIX) EQ 1).TSK10                               43154100
          AIF (&DCBF(&ADCONIX) NE 1).TSK11                              43190400
         L     15,=&DCB               GET DCB ADDRESS              @H2C 43226700
         ST    15,&UCBOFF+&PLADD      STORE INTO PARM LIST         @H2C 43263000
         AGO   .TSK10                                                   43300000
.TSK11   ANOP                                                           43350000
         AIF (&DCBF(&REGIX) NE 1 ).TSK12                                43400000
         ST    &DCB(1),&UCBOFF+&PLADD STORE DCB ADDRESS INTO PARM @H2C  43450000
         AGO   .TSK10                                                   43500000
.TSK12   ANOP                                                           43550000
         LA    15,&DCB                GET DCB ADDRESS              @H2C 43600000
         ST    15,&UCBOFF+&PLADD      STORE INTO PARM LIST         @H2C 43650000
.TSK10    ANOP                                                          43700000
.*                                                                      43733300
.*       *---------------------------------------------------*          43766600
.*       *---------------------------------------------------*          43799900
.*       *                    TXT2 KEYWORD                   *          43833200
.*       *---------------------------------------------------*          43866500
.*       *---------------------------------------------------*          43899800
          AIF (&TXT2F(&NULLIX) EQ 1).FDY13                              43933100
          AIF (&TXT2F(&ADCONIX) NE 1).FDY14                             43966400
         L     15,=&TXT2              GET TEXT2 ADDRESS            @H2C 44000000
         ST    15,&TX2OFF+&PLADD      STORE INTO PARM LIST         @H2C 44050000
         AGO   .FDY13                                                   44100000
.FDY14   ANOP                                                           44150000
         AIF (&TXT2F(&REGIX) NE 1 ).FDY15                               44200000
         LR    15,&TXT2(1)            GET TEXT2 ADDRESS            @H2C 44250000
         ST    15,&TX2OFF+&PLADD      STORE INTO PARM LIST         @H2C 44300000
         AGO   .FDY13                                                   44350000
.FDY15   ANOP                                                           44400000
         AIF (&TXT2F(&LITIX) NE 1).TFDY15                               44450000
         LA    15,=C&TXT2             GET TEXT2 ADDRESS            @H2C 44500000
         ST    15,&TX2OFF+&PLADD      STORE INTO PARM LIST         @H2C 44550000
         AGO   .FDY13                                                   44600000
.TFDY15  ANOP                                                           44650000
         LA    15,&TXT2               GET TEXT2 ADDRESS            @H2C 44700000
         ST    15,&TX2OFF+&PLADD      STORE INTO PARM LIST         @H2C 44750000
.FDY13    ANOP                                                          44800000
.*                                                                      44842800
.*       *---------------------------------------------------*          44885600
.*       *---------------------------------------------------*          44928400
.*       *                SET UP VOL AND FLASH               *          44971200
.*       *---------------------------------------------------*          45014000
.*       *---------------------------------------------------*          45056800
&WORK1   SETC   'X''0'                                                  45100000
&WORK2   SETC   '0'''                                                   45150000
         AIF  ('&FUNCTON' NE 'GEN' AND '&FUNCTON' NE '').VCF16          45200000
         AIF  (&VOLF(&NULLIX) EQ 1 AND                                 C45250000
               &FLASHF(&NULLIX) EQ 1).VCF16                             45300000
          AIF ('&VOL' NE 'REMOVE').VCF12                                45350000
&WORK1    SETC  'X''1'                                                  45400000
          AGO   .FLASHX                                                 45450000
.VCF12    ANOP                                                          45500000
          AIF ('&VOL' NE 'INSERT').VCF13                                45550000
&WORK1    SETC  'X''2'                                                  45600000
          AGO   .FLASHX                                                 45650000
.VCF13    ANOP                                                          45700000
          AIF  ('&VOL' NE 'SWAP').FLASHX                                45750000
&WORK1    SETC   'X''3'                                                 45800000
&WORK2    SETC   '3'''                                                  45850000
          AGO   .VCF105                                                 45900000
.FLASHX   ANOP                                                          45950000
          AIF ('&FLASH' EQ 'BLINK' OR &FLASHF(&NULLIX) EQ 1).VCF10      46000000
          AIF ('&FLASH' NE 'STEADY').VCF14                              46050000
&WORK2    SETC   '1'''                                                  46100000
          AGO   .VCF10                                                  46150000
.VCF14    ANOP                                                          46200000
          AIF  ('&FLASH' NE 'STEADY2').VCF15                            46250000
&WORK2    SETC  '2'''                                                   46300000
          AGO    .VCF10                                                 46350000
.VCF15    ANOP                                                          46400000
          AIF   ('&FLASH' NE 'ALT').VCF17                               46450000
&WORK2    SETC   '3'''                                                  46500000
          AGO    .VCF10                                                 46550000
.VCF17    ANOP                                                          46600000
          AIF   ('&FLASH' NE 'BLINK2').VCF10                            46650000
&WORK2    SETC    '4'''                                                 46700000
.VCF10    ANOP                                                          46750000
          AIF (&VOLF(&NULLIX) EQ 1 OR   &FLASHF(&NULLIX) EQ 1).VCF26    46800000
.VCF105   ANOP                                                          46850000
         MVI   &CRTOFF+&PLADD,&WORK1&WORK2 VOL AND FLASH           @H2C 46900000
         AGO   .VCF16                                                   46950000
.VCF26    ANOP                                                          47000000
          AIF  (&FLASHF(&NULLIX) NE 0).VCF27                            47050000
         NI    &CRTOFF+&PLADD,X'F0'   VOL AND FLASH                @H2C 47100000
          AIF ('&WORK2' EQ '0''').VCF16                                 47150000
         OI    &CRTOFF+&PLADD,&WORK1&WORK2 VOL AND FLASH           @H2C 47200000
         AGO  .VCF16                                                    47250000
.VCF27    ANOP                                                          47300000
         NI    &CRTOFF+&PLADD,X'0F'   VOL AND FLASH                @H2C 47350000
          AIF ('&WORK1' EQ 'X''0').VCF16                                47400000
         OI    &CRTOFF+&PLADD,&WORK1&WORK2 VOL AND FLASH           @H2C 47450000
.VCF16    ANOP                                                          47500000
.*                                                                      47541600
.*       *---------------------------------------------------*          47583200
.*       *  AT THIS LABEL ALL KEYWORD PROCESSING IS DONE FOR *          47624800
.*       *  AN MF=E EXPANISON                                *          47666400
.*       *---------------------------------------------------*          47708000
.EEXPMFE  ANOP                                                          47750000
.*                                                                      47800000
.*       *---------------------------------------------------*          47850000
.*       *    DOES REG HAVE TO BE SET TO PLIST ADDRESS       *          47900000
.*       *---------------------------------------------------*          47950000
          AIF  (&MFE(&REG01IX) EQ 1).SK8                                48000000
         LA    1,&PLADD               LOAD PARM REG TO REG1        @H2C 48050000
.SK8      ANOP                                                          48150000
          AGO   .SVCTEST    .* GO EXPAND CODE FOR SVC CALL              48200000
.*                                                                      48221400
.*###################################################################*  48242800
.*###################################################################*  48264200
.*#                                                                 #*  48285600
.**                  EXPAND CODE FOR NORMAL FORM                    #*  48307000
.*#                                                                 #*  48328400
.*###################################################################*  48349800
.*###################################################################*  48371200
.*       *---------------------------------------------------*          48392600
.*       *           BUILD THE PARAMETER LIST                *          48414000
.*       *                                                   *          48435400
.*       * Analyze service request and set appropriate code  *          48456800
.*       *---------------------------------------------------*          48478200
.NORMF   ANOP                                                           48500000
.*                                                                 @02a 48520000
.*                                                                 @02a 48540000
&NAME    CNOP  0,4                                                 @H2C 48560000
&LABEL1  SETC 'IGX&SYSNDX'                                              48580000
         BAL   1,IGX&SYSNDX                                             48600000
.*                                                                      48650000
.BLDLST    ANOP                                                         49050000
          AIF ('&MF(1)' NE 'L').DLDLST2                            @H2C 49100000
&NAME    DC    0F'0'                                               @H2C 49150000
.*                                                                      49200000
.DLDLST2  ANOP                                                     @H2C 49250000
.*                                                                      49300000
.*       *---------------------------------------------------*          49350000
.*       * The new form of the parameter list is indicated   *          49400000
.*       * by an x'FF' in the first byte of the plist, the   *          49450000
.*       * same place that used to be the service type code. *          49500000
.*       * The old type code has been moved to +x'10' into   *          49550000
.*       * the plist.                                        *          49600000
.*       *---------------------------------------------------*     @02a 49650000
         DC    X'FF'             NEW FORM OF PARAMETER LIST        @02A 49700000
.*                                                                      49750000
.*       *---------------------------------------------------*          49800000
.*       *  SET UP IOSLEVEL AND BIT FLAGS                    *          49850000
.*       *---------------------------------------------------*     @02C 49900000
&FH      SETC      'B'''                                                50750000
&F0      SETC      '0000'                   IOSLEVEL               @02c 50800000
&F1      SETC      '0'                      QUIESCE                @02c 50850000
&F2      SETC      '0'                      NO WAIT                @02c 50900000
&F3      SETC      '0'                      NOT UCB LIST           @02c 50950000
&F4      SETC      '0'                      DON'T INDEX            @02a 51000000
&FT      SETC      ''''                                                 51200000
.*                                                                      51218800
.*       *---------------------------------------------------*          51237600
.*       *  CHECK IOSLEVEL OF CALLER  (FORCE PARAMETER)      *          51275200
.*       *                                                   *          51278600
.*       *  Removed all handling of keywords such as DAVV,   *          51282000
.*       *  FDEV, and numbers such as 1,2, etc.  The code    *          51285400
.*       *  should only recognize FORCE=(REGX) now.  It      *          51288800
.*       *  may have been possible to remove more of the     *          51292200
.*       *  code that handles the FORCE keyword but changes  *          51295600
.*       *  were kept to a minimum to avoid introducing      *          51299000
.*       *  other errors into this macro.  This section of   *          51302400
.*       *  code was for the NORMAL form of the macro.   @L2A*          51305800
.*       *                                                   *          51309200
.*       *---------------------------------------------------*          51312800
          AIF (&FORCEF(&REGIX) EQ 1).FENDN                      @H2C    51331600
          AIF (&FORCEF(&NULLIX) EQ 1).FENDN                     @H2C    51350400
.*                                                                      51382200
         MNOTE 12,' &FORCE. INVALID FOR FORCE KEYWORD'          @L2A    51414000
.*                                                                      51445800
.*       Removed approximately 30 lines of code here            @L2A    51477600
.*                                                                      51509400
.FENDN   ANOP                                                   @H2A    51541400
.*                                                                      51573100
.*       *---------------------------------------------------*          51604800
.*       *  SET WAIT  FLAG                                   *          51636500
.*       *---------------------------------------------------*          51668200
         AIF ('&WAIT' NE 'NO').NOWAITT                                  51700000
&F2      SETC  '1'                                              @H2C    51750000
.NOWAITT ANOP                                                           51800000
.*                                                                      51840000
.*       *---------------------------------------------------*          51880000
.*       *  Set RESET is using single UCB instead of a list  *          51920000
.*       *---------------------------------------------------*          51960000
         AIF ('&FUNCTON' NE 'RESET').LSK1R                              52000000
         AIF (&UCBF(&NULLIX) EQ 1).LSK1R                                52050000
&F3      SETC  '1'                                              @H2C    52100000
.LSK1R   ANOP                                                           52150000
.*                                                                      52155000
.*       *---------------------------------------------------*          52160000
.*       *  Process INDEX value                              *          52165000
.*       *                                                   *     @02a 52170000
.*       * If quoted nor unquoted literal used, we can set   *          52175000
.*       * the bit in the plist.                             *          52180000
.*       *---------------------------------------------------*     @02a 52185000
         AIF  (&INDEXF(&NULLIX) EQ 1 OR                                C52190000
               (&INDEXF(&LITIX) EQ 0 AND                               C52195000
                &INDEXF(&UNQUOTEIX) EQ 0)).DONTSETINDEX            @02a 52200000
.*                                                                      52205000
.*       *---------------------------------------------------*          52210000
.*       *  Need the total length of the value               *          52215000
.*       *---------------------------------------------------*     @02a 52220000
&LENGTH  SETA  K'&INDEX                     Total length of value  @02a 52225000
.*                                                                      52230000
.*       *---------------------------------------------------*          52235000
.*       * If a quoted literal, pick up the value less the   *          52240000
.*       * quotes.                                           *          52245000
.*       *---------------------------------------------------*     @02a 52250000
         AIF   (&INDEXF(&LITIX) EQ 0).NOTLITINDEX                  @02a 52255000
.*                                                                      52260000
&LENGTH  SETA  &LENGTH-2                    Less 2 quotes          @02a 52265000
&LITVALINDEX  SETC  '&INDEX'(2,&LENGTH)     Get the value          @02a 52270000
.*                                                                      52275000
         AGO  .SETLITINDEX                                         @02a 52280000
.*                                                                      52285000
.NOTLITINDEX ANOP                                                  @02a 52290000
&LITVALINDEX SETC '&INDEX'                  Get the value          @02a 52295000
.*                                                                      52300000
.SETLITINDEX ANOP                                                  @02a 52305000
.*                                                                      52310000
         AIF   ('&LITVALINDEX' NE 'NO').DONTSETINDEX               @02a 52315000
&F4      SETC      '1'                      Don't index            @02a 52320000
.*                                                                      52325000
.DONTSETINDEX  ANOP                                                @02a 52330000
.*       *---------------------------------------------------*          52335000
.*       *  EXPAND THE FLAGS                                 *          52340000
.*       *---------------------------------------------------*          52345000
&FLAGS   SETC '&FH&F0&F1&F2&F3&F4&FT'                           @H2C    52350000
         DC    &FLAGS            IOSLEVEL AND FLAGS                @H2C 52400000
.*                                                                      52450000
.*       *---------------------------------------------------*          52500000
.*       *---------------------------------------------------*          52550000
.*       * IF SERVICE IS GEN OR NOTHING SETUP VOL AND FLASH  *          52600000
.*       *---------------------------------------------------*          52650000
.*       *---------------------------------------------------*          52700000
&WORK1   SETC   'X''0'                                                  53200000
&WORK2   SETC   '0'''                                                   53250000
.NOTRDV   ANOP                                                          53300000
 AIF ('&FUNCTON' NE 'GEN' AND '&FUNCTON' NE '').LSK10                   53350000
          AIF ('&VOL' NE 'REMOVE').LSK12                                53400000
&WORK1    SETC  'X''1'                                                  53450000
          AGO   .FLASH1                                                 53500000
.LSK12    ANOP                                                          53550000
          AIF ('&VOL' NE 'INSERT').LSK13                                53600000
&WORK1    SETC  'X''2'                                                  53650000
          AGO   .FLASH1                                                 53700000
.LSK13    ANOP                                                          53750000
          AIF  ('&VOL' NE 'SWAP').FLASH1                                53800000
&WORK1    SETC   'X''3'                                                 53850000
&WORK2    SETC   '3'''                                                  53900000
          AGO   .LSK10                                                  53950000
.FLASH1   ANOP                                                          54000000
          AIF ('&FLASH' EQ 'BLINK' OR &FLASHF(&NULLIX) EQ 1).LSK10      54050000
          AIF ('&FLASH' NE 'STEADY').LSK14                              54100000
&WORK2    SETC   '1'''                                                  54150000
          AGO   .LSK10                                                  54200000
.LSK14    ANOP                                                          54250000
          AIF  ('&FLASH' NE 'STEADY2').LSK15                            54300000
&WORK2    SETC  '2'''                                                   54350000
          AGO    .LSK10                                                 54400000
.LSK15    ANOP                                                          54450000
          AIF   ('&FLASH' NE 'ALT').LSK69                               54500000
&WORK2    SETC   '3'''                                                  54550000
          AGO   .LSK10                                                  54600000
.LSK69    ANOP                                                          54650000
          AIF    ('&FLASH' NE 'BLINK2').LSK10                           54700000
&WORK2    SETC   '4'''                                                  54750000
.LSK10    ANOP                                                          54800000
         DC    &WORK1&WORK2      VOL/FLASH                              54850000
.*                                                                      54878500
.*       *---------------------------------------------------*          54907000
.*       *---------------------------------------------------*          54935500
.*       *              SET LABEL/MLABEL FIELD               *          54964000
.*       *---------------------------------------------------*          54992500
.*       *---------------------------------------------------*          55021000
&WORK1    SETC   'X''00'''                                              55050000
   AIF ('&FUNCTON' NE 'MOUNT' AND '&FUNCTON' NE 'VERIFY' AND           C55100000
               '&FUNCTON' NE 'DEMOUNT').LSK16                     @H2C  55150000
.*                                                                      55182600
.*       *---------------------------------------------------*          55215200
.*       * Check for LITERAL, ADCON, and REG specificiations *          55247800
.*       * Anything else is a question mark.                 *          55280400
.*       *---------------------------------------------------*          55313000
         AIF (&LABELF(&NULLIX) EQ 1    AND                             C55345600
               &MLABELF(&NULLIX) EQ 1).LSK16                       @02a 55378200
.*                                                                      55410800
         AIF  (&LABELF(&LITIX)    EQ 1 OR                              C55443400
               &MLABELF(&LITIX)   EQ 1).LBLLITSPECD                @02a 55476000
.*                                                                      55508600
         AIF  (&LABELF(&ADCONIX)  EQ 1 OR                              C55541200
               &MLABELF(&ADCONIX) EQ 1 OR                              C55573800
               &LABELF(&REGIX)    EQ 1 OR                              C55606400
               &MLABELF(&REGIX)   EQ 1).LSK16                      @02a 55639000
.*                                                                      55671600
         AGO .SETQUESTION                                          @02a 55704200
.*                                                                      55736800
.*       *---------------------------------------------------*          55769400
.*       * Process LITERAL specificiation.  Start w/LABEL    *          55802000
.*       *---------------------------------------------------*          55834600
.LBLLITSPECD ANOP                                                  @02a 55867200
         AIF ('&LABEL' EQ ''' ''').LSK16                           @02a 55899800
         AIF ('&LABEL' EQ '''S''').SETLBLS                         @02a 55932400
         AIF ('&LABEL' EQ '''N''').SETLBLN                         @02a 55965000
         AIF ('&LABEL' EQ '''A''').SETLBLA                         @02a 55997600
         AIF ('&LABEL' EQ '''X''').SETLBLX                         @02a 56030200
.*                                                                      56062800
.SETQUESTION  ANOP                                                 @02a 56095400
&WORK1   SETC     'C''?'''                                         @02a 56128000
         AGO    .LSK16                                             @02a 56160600
.*                                                                      56193200
.SETLBLS ANOP                                                      @02a 56225800
&WORK1   SETC    'C''S'''                                          @02a 56258400
         AGO    .LSK16                                             @02a 56291000
.*                                                                      56323600
.SETLBLN ANOP                                                      @02a 56356200
&WORK1   SETC    'C''N'''                                          @02a 56388800
         AGO    .LSK16                                             @02a 56421400
.*                                                                      56454000
.SETLBLA ANOP                                                           56486600
&WORK1   SETC    'C''A'''                                          @02a 56519200
         AGO    .LSK16                                             @02a 56551800
.*                                                                 @02a 56584400
.SETLBLX ANOP                                                           56617000
&WORK1   SETC    'C''X'''                                          @02a 56649600
         AGO    .LSK16                                             @02a 56682200
.*                                                                      56714800
.LSK16    ANOP                                                          56750000
.*                                                                      56775000
         DC    &WORK1            LABEL                                  56800000
.*                                                                      56842800
.*       *---------------------------------------------------*          56885600
.*       *---------------------------------------------------*          56928400
.*       *     SET ADDRESS OF SER OR TXT DATA IN PLIST       *          56971200
.*       *---------------------------------------------------*          57014000
.*       *---------------------------------------------------*          57056800
&WORK1    SETC   'A(0)'                                                 57100000
.*                                                                      57120200
.*       *---------------------------------------------------*          57140400
.*       * Check for ADCON form with SER                     *          57160600
.*       *---------------------------------------------------*          57180800
         AIF  (&SERF(&ADCONIX) EQ 0).TXTADCON                      @02c 57201000
&WORK1   SETC  '&SER'                                                   57221200
         AGO   .SETTXT                                                  57241400
.*                                                                      57261600
.*       *---------------------------------------------------*          57281800
.*       * Check for ADCON with the TXT keyword.             *          57302000
.*       *---------------------------------------------------*          57322200
.TXTADCON   ANOP                                                   @02c 57342400
         AIF  (&TXTF(&ADCONIX) EQ 0).SERLIT                        @02c 57362600
&WORK1   SETC  '&TXT'                                                   57382800
         AGO   .SETTXT                                                  57403000
.*                                                                      57423200
.*       *---------------------------------------------------*          57443400
.*       * See if LITERAL form was used.                     *          57463600
.*       *---------------------------------------------------*          57483800
.SERLIT ANOP                                                       @02a 57504000
         AIF  (&SERF(&LITIX) EQ 0 AND                                  C57524200
               &TXTF(&LITIX) EQ 0).SETTXT                          @02a 57544400
.*                                                                      57564600
.*       *---------------------------------------------------*          57584800
.*       * Calculate and set the offset to the literal       *          57605000
.*       * definition.                                       *          57625200
.*       *---------------------------------------------------*          57645400
&LENGTH     SETA  &CURLITOFF-&TX1OFF                               @02a 57665600
&WORK1      SETC  'A(*+&LENGTH)'                                        57685800
.*                                                                      57706000
.*       *---------------------------------------------------*          57726200
.*       * Calculate what to increment CURLITOFF to.         *          57746400
.*       *---------------------------------------------------*     @02a 57766600
         AIF ('&FUNCTON' NE 'GEN' AND '&FUNCTON' NE '').INCRBY6    @02a 57786800
&CURLITOFF  SETA  &CURLITOFF+8                                     @02a 57807000
         AGO  .SETTXT                                              @02a 57827200
.*                                                                      57847400
.INCRBY6 ANOP                                                      @02a 57867600
&CURLITOFF  SETA  &CURLITOFF+6                                     @02a 57887800
.*                                                                      57908000
.SETTXT     ANOP                                                        57928200
         DC    &WORK1            TXT/SER                                57950000
.*                                                                      57992800
.*       *---------------------------------------------------*          58035600
.*       *---------------------------------------------------*          58078400
.*       *     Set address of MSER or TXT2 data in plist     *          58121200
.*       *---------------------------------------------------*          58164000
.*       *---------------------------------------------------*          58206800
&WORK1    SETC   'A(0)'                                                 58250000
.*                                                                      58278500
.*       *---------------------------------------------------*          58307000
.*       * Check for ADCON form with MSER                    *          58335500
.*       *---------------------------------------------------*          58364000
         AIF  (&MSERF(&ADCONIX) EQ 0).TXT2ADCON                    @02c 58392500
&WORK1   SETC  '&MSER'                                                  58421000
         AGO   .SETTXT2                                                 58449500
.*                                                                      58478000
.*       *---------------------------------------------------*          58506500
.*       * Check for ADCON with the TXT2 keyword.            *          58535000
.*       *---------------------------------------------------*          58563500
.TXT2ADCON  ANOP                                                   @02c 58592000
         AIF  (&TXT2F(&ADCONIX) EQ 0).MSERLIT                      @02c 58620500
&WORK1   SETC  '&TXT2'                                                  58649000
         AGO   .SETTXT2                                                 58677500
.*                                                                      58706000
.*       *---------------------------------------------------*          58734500
.*       * See if LITERAL form was used.                     *          58763000
.*       *---------------------------------------------------*          58791500
.MSERLIT ANOP                                                      @02a 58820000
         AIF  (&MSERF(&LITIX) EQ 0 AND                                 C58848500
               &TXT2F(&LITIX) EQ 0).SETTXT2                        @02a 58877000
.*                                                                      58905500
.*       *---------------------------------------------------*          58934000
.*       * Calculate and set the offset to the literal       *          58962500
.*       * definition.                                       *          58991000
.*       *---------------------------------------------------*          59019500
&LENGTH  SETA  &CURLITOFF-&TX2OFF                                  @02a 59048000
&WORK1   SETC  'A(*+&LENGTH)'                                           59076500
.*                                                                      59105000
.*       *---------------------------------------------------*          59133500
.*       * Calculate what to increment CURLITOFF to.         *          59162000
.*       *---------------------------------------------------*     @02a 59190500
         AIF ('&FUNCTON' NE 'GEN' AND '&FUNCTON' NE '').INCRBY62   @02a 59219000
&CURLITOFF  SETA  &CURLITOFF+8                                     @02a 59247500
         AGO  .SETTXT2                                             @02a 59276000
.*                                                                      59304500
.INCRBY62  ANOP                                                    @02a 59333000
&CURLITOFF  SETA  &CURLITOFF+6                                     @02a 59361500
.*                                                                      59390000
.*                                                                      59418500
.SETTXT2 ANOP                                                           59450000
         DC    &WORK1            TXT2/MSER                              59500000
.*                                                                      59542800
.*       *---------------------------------------------------*          59585600
.*       *---------------------------------------------------*          59628400
.*       *          SET VALUE FOR DCB UCB OR UCBL            *          59671200
.*       *---------------------------------------------------*          59714000
.*       *---------------------------------------------------*          59756800
&WORK1    SETC  'A(0)'                                                  59800000
          AIF (&DCBF(&ADCONIX) EQ 0).PL04                               59850000
&WORK1    SETC '&DCB'                                                   59900000
          AGO  .SETDU                                                   59950000
.PL04     ANOP                                                          60000000
        AIF  (&UCBLF(&ADCONIX) EQ 0).SETDU                              60050000
&WORK1   SETC '&UCBL'                                                   60100000
.SETDU    ANOP                                                          60150000
         DC    &WORK1            DCB/UCB/UCBL                           60200000
.*                                                                      60205300
.*       *---------------------------------------------------*          60210600
.*       *---------------------------------------------------*          60215900
.*       * Now update the 'Service Type' byte now at +x'10'  *          60221200
.*       * into the plist.                                   *          60226500
.*       *---------------------------------------------------*          60231800
.*       *---------------------------------------------------*          60237100
          AIF ('&FUNCTON' EQ 'MOUNT').SETTYPMOUNT                  @02a 60242400
          AIF ('&FUNCTON' EQ 'VERIFY').SETTYPVERIFY                @02a 60247700
          AIF ('&FUNCTON' EQ 'RDY').SETTYPRDY                      @02a 60253000
          AIF ('&FUNCTON' EQ 'RESET').SETTYPRESET                  @02a 60258300
          AIF ('&FUNCTON' EQ 'GEN').SETTYPGEN                      @02a 60263600
          AIF ('&FUNCTON' EQ 'DEMOUNT').SETTYPDEMOUNT              @02a 60268900
.*                                                                      60274200
.*       *---------------------------------------------------*          60279500
.*       * None of the above so leave it zero.               *          60284800
.*       *---------------------------------------------------*          60290100
&WORK1   SETC  'X''00'''                                           @02a 60295400
         AGO   .SETTYP                                             @02a 60300700
.*                                                                      60306000
.*       *---------------------------------------------------*          60311300
.*       * Mount                                             *          60316600
.*       *---------------------------------------------------*     @02a 60321900
.SETTYPMOUNT  ANOP                                                 @02a 60327200
&WORK1   SETC   'X''03'''                                               60332500
         AGO   .SETTYP                                             @02a 60337800
.*                                                                      60343100
.*       *---------------------------------------------------*          60348400
.*       * Verify                                            *          60353700
.*       *---------------------------------------------------*     @02a 60359000
.SETTYPVERIFY ANOP                                                 @02a 60364300
&WORK1   SETC   'X''04'''                                               60369600
         AGO   .SETTYP                                             @02a 60374900
.*                                                                      60380200
.*       *---------------------------------------------------*          60385500
.*       * Rdy                                               *          60390800
.*       *---------------------------------------------------*     @02a 60396100
.SETTYPRDY  ANOP                                                   @02a 60401400
&WORK1   SETC   'X''01'''                                               60406700
         AGO   .SETTYP                                             @02a 60412000
.*                                                                      60417300
.*       *---------------------------------------------------*          60422600
.*       * Reset                                             *          60427900
.*       *---------------------------------------------------*     @02a 60433200
.SETTYPRESET  ANOP                                                 @02a 60438500
&WORK1   SETC    'X''06'''                                              60443800
         AGO   .SETTYP                                             @02a 60449100
.*                                                                      60454400
.*       *---------------------------------------------------*          60459700
.*       * Gen                                               *          60465000
.*       *---------------------------------------------------*     @02a 60470300
.SETTYPGEN    ANOP                                                 @02a 60475600
&WORK1   SETC    'X''07'''                                              60480900
         AGO   .SETTYP                                             @02a 60486200
.*                                                                      60491500
.*       *---------------------------------------------------*          60496800
.*       * Demount                                           *          60502100
.*       *---------------------------------------------------*     @02a 60507400
.SETTYPDEMOUNT ANOP                                                @02a 60512700
&WORK1   SETC     'X''C4'''                 Set default of 'D'     @02a 60518000
         AIF (&DISPF(&LITIX) EQ 0).SETTYP   If not literal branch  @02a 60523300
.*                                                                      60528600
         AIF ('&DISP' NE '''K''').CK4R      Br if not K            @02a 60533900
&WORK1   SETC     'X''D2'''                 Set to K               @02a 60539200
         AGO .SETTYP                                               @02a 60544500
.*                                                                      60549800
.CK4R    ANOP                                                      @02a 60555100
         AIF ('&DISP' NE '''R''').SETTYP    Branch if not 'R'      @02a 60560400
&WORK1   SETC 'X''D9'''                     Set to 'R'             @02a 60565700
.*                                                                      60571000
.SETTYP  ANOP                                                           60576300
         DC    &WORK1            SERVICE REQUESTED                      60581600
.*                                                                      60586900
.*       *---------------------------------------------------*          60592200
.*       *---------------------------------------------------*          60597500
.*       * Set 'Keyword Used and Has a Pointer' bits at      *          60602800
.*       * offset x'11' into the plist.                      *          60608100
.*       *---------------------------------------------------*          60613400
.*       *---------------------------------------------------*          60618700
&J       SETA  0                            Initialize flag var    @H2A 60624000
.*                                                                      60629300
.*       *---------------------------------------------------*          60634600
.*       * START with the INDEX keyword.                     *          60639900
.*       *---------------------------------------------------*     @02a 60645200
         AIF  (&INDEXF(&NULLIX)    EQ 1 OR                             C60650500
               &INDEXF(&LITIX)     EQ 1 OR                             C60655800
               &INDEXF(&UNQUOTEIX) EQ 1).NOINDEXPTR                @02a 60661100
&J       SETA  &J+128                                              @02a 60666400
.*                                                                      60671700
.NOINDEXPTR  ANOP                                                  @02a 60677000
.*                                                                      60682300
.*       *---------------------------------------------------*          60687600
.*       * Now the MEDIATYPE keyword.                        *          60692900
.*       *---------------------------------------------------*     @02a 60698200
         AIF   (&MEDTF(&NULLIX) EQ 1).NOMEDTPTR                    @02a 60703500
&J       SETA  &J+64                                               @02a 60708800
.*                                                                      60714100
.NOMEDTPTR   ANOP                                                  @02a 60719400
.*                                                                      60724700
         DC    AL1(&J)           KEYWORDS W/POINTERS BITS          @02A 60730000
.*                                                                      60735300
.*       *---------------------------------------------------*          60740600
.*       *---------------------------------------------------*          60745900
.*       * Reserved bytes                                    *          60751200
.*       *---------------------------------------------------*          60756500
.*       *---------------------------------------------------*          60761800
&FS      SETC  'X''0000'''                  Initialize flag var    @02a 60767100
         DC    &FS               2 RESERVED BYTES                  @02A 60772400
.*                                                                      60777700
.*       *---------------------------------------------------*          60783000
.*       *---------------------------------------------------*          60788300
.*       * Setup INDEX pointer.                              *          60793600
.*       *---------------------------------------------------*          60798900
.*       *---------------------------------------------------*          60804200
&WORK1    SETC   'A(0)'                                            @02c 60809500
.*                                                                      60814800
.*       *---------------------------------------------------*          60820100
.*       * Check for ADCON form with INDEX                   *          60825400
.*       *---------------------------------------------------*          60830700
         AIF  (&INDEXF(&ADCONIX) EQ 0).SETINDEXADCON               @02c 60836000
&WORK1   SETC  '&INDEX'                                           @02c  60841300
.*                                                                      60846600
.SETINDEXADCON ANOP                                                @02a 60851900
         DC    &WORK1            INDEX POINTER                     @02a 60857200
.*                                                                      60862500
.*       *---------------------------------------------------*          60867800
.*       *---------------------------------------------------*          60873100
.*       * Setup MEDIATYPE pointer                           *          60878400
.*       *---------------------------------------------------*          60883700
.*       *---------------------------------------------------*          60889000
&WORK1    SETC  'A(0)'                                             @02a 60894300
          AIF (&MEDTF(&ADCONIX) EQ 0).MEDTLIT                      @02a 60899600
&WORK1    SETC '&MEDIATYPE'                                       @02a  60904900
          AGO  .SETMEDTADCON                                       @02a 60910200
.*                                                                      60915500
.MEDTLIT  ANOP                                                     @02a 60920800
.*       *---------------------------------------------------*          60926100
.*       * See if LITERAL form was used.                     *          60931400
.*       *---------------------------------------------------*     @02c 60936700
         AIF  (&MEDTF(&LITIX) EQ 0).SETMEDTADCON                   @02a 60942000
.*                                                                      60947300
.*       *---------------------------------------------------*          60952600
.*       * Calculate and set the offset to the literal       *          60957900
.*       * definition.                                       *          60963200
.*       *---------------------------------------------------*          60968500
&LENGTH     SETA  &CURLITOFF-&MTPOFF                               @02a 60973800
&WORK1      SETC  'A(*+&LENGTH)'                                   @02c 60979100
.*                                                                      60984400
.*       *---------------------------------------------------*          60989700
.*       * The only valid MEDIATYPE values are single digit  *          60995000
.*       * so increment for the next keyword if there is one *          61000300
.*       *---------------------------------------------------*          61005600
&CURLITOFF  SETA  &CURLITOFF+1                                     @02a 61010900
.*                                                                      61016200
.SETMEDTADCON ANOP                                                 @02a 61021500
         DC    &WORK1            MEDIATYPE POINTER                 @02a 61026800
.*                                                                      61032100
.*       *---------------------------------------------------*          61037400
.*       *---------------------------------------------------*          61042700
.*       * Setup LITERALS if they were specified.            *          61048000
.*       *---------------------------------------------------*          61053300
.*       *---------------------------------------------------*          61058600
.*                                                                      61063900
.*       *---------------------------------------------------*          61069200
.*       * Start with SER/TXT keywords.                      *          61074500
.*       *---------------------------------------------------*          61079800
         AIF (&SERF(&LITIX) EQ 0 AND &TXTF(&LITIX) EQ 0).CK4MSERLIT     61085100
         AIF (&SERF(&LITIX) EQ 0).CK4TXTLIT                        @02a 61090400
.*                                                                      61095700
.*       *---------------------------------------------------*          61101000
.*       * We have a SER literal.  Check for 8 characters    *          61106300
.*       * allowed, else it's 6.                             *          61111600
.*       *---------------------------------------------------*          61116900
         AIF ('&FUNCTON' NE 'GEN' AND '&FUNCTON' NE '').SERLITNGEN @02a 61122200
         DC    CL8&SER                      SER LITERAL VALUE      @02a 61127500
         AGO  .CK4MSERLIT                                          @02a 61132800
.*                                                                      61138100
.SERLITNGEN ANOP                                                   @02a 61143400
         DC    CL6&SER                      SER LITERAL VALUE      @02a 61148700
         AGO  .CK4MSERLIT                                          @02a 61154000
.*                                                                      61159300
.CK4TXTLIT ANOP                                                    @02a 61164600
.*                                                                      61169900
         AIF (&TXTF(&LITIX) EQ 0).CK4MSERLIT                       @02a 61175200
.*                                                                      61180500
.*       *---------------------------------------------------*          61185800
.*       * We have a TXT literal.  Check for 8 characters    *          61191100
.*       * allowed, else it's 6.                             *          61196400
.*       *---------------------------------------------------*          61201700
         AIF ('&FUNCTON' NE 'GEN' AND '&FUNCTON' NE '').TXTLITNGEN @02a 61207000
         DC    CL8&TXT                      TXT LITERAL VALUE      @02a 61212300
         AGO  .CK4MSERLIT                                          @02a 61217600
.*                                                                      61222900
.TXTLITNGEN ANOP                                                   @02a 61228200
         DC    CL6&TXT                      TXT LITERAL VALUE      @02a 61233500
.*                                                                      61238800
.CK4MSERLIT  ANOP                                                  @02a 61244100
.*                                                                      61249400
.*       *---------------------------------------------------*          61254700
.*       * Start with MSER/TXT2 keywords.                    *          61260000
.*       *---------------------------------------------------*          61265300
         AIF (&MSERF(&LITIX) EQ 0 AND &TXT2F(&LITIX) EQ 0).CK4MEDTLIT   61270600
         AIF (&SERF(&LITIX) EQ 0).CK4TXT2LIT                       @02a 61275900
.*                                                                      61281200
.*       *---------------------------------------------------*          61286500
.*       * We have a MSER literal. Check for 8 characters    *          61291800
.*       * allowed, else it's 6.                             *          61297100
.*       *---------------------------------------------------*          61302400
         AIF ('&FUNCTON' NE 'GEN' AND '&FUNCTON' NE '').MSERLITNGEN     61307700
         DC    CL8&MSER                     MSER LITERAL VALUE     @02a 61313000
         AGO  .CK4MEDTLIT                                          @02a 61318300
.*                                                                      61323600
.MSERLITNGEN ANOP                                                  @02a 61328900
         DC    CL6&MSER                     MSER LITERAL VALUE     @02a 61334200
         AGO  .CK4MEDTLIT                                          @02a 61339500
.*                                                                      61344800
.CK4TXT2LIT ANOP                                                   @02a 61350100
.*                                                                      61355400
         AIF (&TXT2F(&LITIX) EQ 0).CK4MEDTLIT                      @02a 61360700
.*                                                                      61366000
.*       *---------------------------------------------------*          61371300
.*       * We have a TXT2 literal.  Check for 8 characters   *          61376600
.*       * allowed, else it's 6.                             *          61381900
.*       *---------------------------------------------------*          61387200
         AIF ('&FUNCTON' NE 'GEN' AND '&FUNCTON' NE '').TXT2LITNGEN     61392500
         DC    CL8&TXT2                     TXT2 LITERAL VALUE     @02a 61397800
         AGO  .CK4MEDTLIT                                          @06c 61403100
.*                                                                      61408400
.TXT2LITNGEN ANOP                                                  @02a 61413700
         DC    CL6&TXT2                     TXT2 LITERAL VALUE     @02a 61419000
.*                                                                      61424300
.CK4MEDTLIT  ANOP                                                  @02a 61429600
.*       *---------------------------------------------------*          61434900
.*       * Now process the any MEDIATYPE literal.            *          61440200
.*       *---------------------------------------------------*          61445500
         AIF (&MEDTF(&LITIX) EQ 0).CK4NXTKWD                       @02a 61450800
.*                                                                      61456100
.*       *---------------------------------------------------*          61461400
.*       * We have a MEDIATYPE literal.                      *          61466700
.*       *---------------------------------------------------*          61472000
         DC    CL1&MEDIATYPE                MEDIATYPE LITERAL VAL  @02a 61477300
.*                                                                      61482600
.CK4NXTKWD  ANOP                                                   @02a 61487900
.*                                                                      61493200
        AIF   ('&MF(1)' EQ 'L').SVCTEST                                 61500000
.*                                                                      61540000
.*###################################################################*  61580000
.*###################################################################*  61620000
.*#                                                                 #*  61660000
.*#      EXPAND CODE FOR NORMAL FORM KEYWORDS WHICH ARE             #*  61700000
.*#      VALID ONLY AT EXECUTION TIME                               #*  61740000
.*#                                                                 #*  61780000
.*###################################################################*  61820000
.*###################################################################*  61860000
&LABEL1  DS    0H                                                       61900000
.*                                                                      61950000
.*********************************************************************  62127000
.*        SET DEMOUNT IF DISP IS RX OR ADCON                     @H2C*  62132500
.*********************************************************************  62138000
.DISM    AIF ('&FUNCTON' NE 'DEMOUNT').SERVOK                      @H2C 62143500
         AIF (&DISPF(&NULLIX) EQ 1 OR &DISPF(&LITIX) EQ 1).SERVOK       62179000
         AIF (&DISPF(&ADCONIX) NE 1).ZZSK1                              62214500
         L     15,=&DISP              GET DISPOSITION              @H2C 62250000
         MVC   0(1,16),0(15)          STORE INTO PARM LIST         @H2C 62300000
         AGO    .SERVOK                                                 62350000
.ZZSK1    ANOP                                                          62400000
         AIF (&DISPF(&REGIX) NE 1).ZZSK2                                62450000
         MVC   0(1,16),0&DISP        STORE DISPOSITION INTO PARM  @H2C  62500000
         AGO    .SERVOK                                                 62550000
.ZZSK2    ANOP                                                          62600000
         MVC   0(1,16),&DISP          STORE DISPOSITION INTO PARM  @H2C 62650000
.SERVOK   ANOP                                                          62700000
.*********************************************************************  62750000
.*                                                                   *  62800000
.*                   TXT KEYWORD                                     *  62850000
.*                                                                   *  62900000
.*********************************************************************  62950000
         AIF (&TXTF(&NULLIX) EQ 1).NTXT02                               63000000
         AIF (&TXTF(&REGIX) NE 1 ).NTXT01                               63050000
         AIF (&TXTF(&REG01IX) EQ 1).NTXT01                              63100000
         ST    &TXT(1),4(1)           STORE TEXT ADDRESS INTO PARM @H2C 63150000
         AGO    .NTXT02                                                 63200000
.NTXT01  ANOP                                                           63250000
         AIF  (&TXTF(&LITIX) EQ 1 OR &TXTF(&ADCONIX) EQ 1).NTXT02       63300000
         LA    15,&TXT                GET TEXT ADDRESS             @H2C 63350000
         ST    15,4(1)                STORE INTO PARM LIST         @H2C 63400000
.NTXT02  ANOP                                                           63450000
.*********************************************************************  63500000
.*                                                                   *  63550000
.*                   SER KEYWORD                                     *  63600000
.*                                                                   *  63650000
.*********************************************************************  63700000
         AIF (&SERF(&NULLIX) EQ 1).NSER02                               63750000
         AIF (&SERF(&REGIX) NE 1 ).NSER01                               63800000
         AIF (&SERF(&REG01IX) EQ 1).NSER01                              63850000
         ST    &SER(1),4(1)           STORE VOL-SER INTO PARM LIST @H2C 63900000
         AGO    .NSER02                                                 63950000
.NSER01  ANOP                                                           64000000
         AIF  (&SERF(&LITIX) EQ 1 OR &SERF(&ADCONIX) EQ 1).NSER02       64050000
         LA    15,&SER                GET VOL-SER ADDRESS          @H2C 64100000
         ST    15,4(1)                STORE INTO PARM LIST         @H2C 64150000
.NSER02  ANOP                                                           64200000
.*********************************************************************  64250000
.*                                                                   *  64300000
.*                   MLABEL KEYWORD                                  *  64350000
.*                                                                   *  64400000
.*********************************************************************  64450000
         AIF   (&MLABELF(&NULLIX) EQ 1 ).LBNRX2                         64500000
         AIF   (&MLABELF(&LITIX) EQ 1 ).LBNRX2                          64550000
         AIF  (&MLABELF(&ADCONIX) NE 1 ).LBNRX3                         64600000
         L     15,=&MLABEL            GET MOUNT LABEL              @H2C 64650000
         IC    15,0(15)                                                 64700000
         STC   15,3(1)                STORE INTO PARM LIST         @H2C 64750000
         AGO   .LBNRX2                                                  64800000
.LBNRX3  ANOP                                                           64850000
         AIF   (&MLABELF(&REGIX) NE 1 ).LBNRX2Z                         64900000
         IC    15,0&MLABEL            GET MOUNT LABEL              @H2C 64950000
         STC   15,3(1)                STORE INTO PARM LIST         @H2C 65000000
         AGO   .LBNRX2                                                  65050000
.LBNRX2Z ANOP                                                           65100000
         IC    15,&MLABEL             GET MOUNT LABEL              @H2C 65150000
         STC   15,3(1)                STORE INTO PARM LIST         @H2C 65200000
.LBNRX2  ANOP                                                           65250000
.*********************************************************************  65300000
.*                                                                   *  65350000
.*                   LABEL KEYWORD                                   *  65400000
.*                                                                   *  65450000
.*********************************************************************  65500000
         AIF   (&LABELF(&LITIX) EQ 1 ).LBNRX1                           65550000
         AIF   (&LABELF(&NULLIX) EQ 1 ).LBNRX1                          65600000
         AIF  (&LABELF(&ADCONIX) NE 1 ).LBNRX4                          65650000
         L     15,=&LABEL             GET LABEL                    @H2C 65700000
         IC    15,0(15)                                                 65750000
         STC   15,3(1)                STORE INTO PARM LIST         @H2C 65800000
         AGO   .LBNRX1                                                  65850000
.LBNRX4  ANOP                                                           65900000
         AIF   (&LABELF(&REGIX) NE 1 ).LBNRX1Z                          65950000
         IC    15,0&LABEL             GET LABEL                    @H2C 66000000
         STC   15,3(1)                STORE INTO PARM LIST         @H2C 66050000
         AGO   .LBNRX1                                                  66100000
.LBNRX1Z ANOP                                                           66150000
         IC    15,&LABEL              GET LABEL                    @H2C 66200000
         STC   15,3(1)                STORE INTO PARM LIST         @H2C 66250000
.LBNRX1  ANOP                                                           66300000
.*********************************************************************  66350000
.*                                                                   *  66400000
.*                   MSER KEYWORD                                    *  66450000
.*                                                                   *  66500000
.*********************************************************************  66550000
         AIF (&MSERF(&NULLIX) EQ 1).NMSER02                             66600000
         AIF (&MSERF(&REGIX) NE 1 ).NMSER01                             66650000
         AIF (&MSERF(&REG01IX) EQ 1).NMSER01                            66700000
         ST    &MSER(1),8(1)          STORE MOUNT VOL-SER INTO PARM@H2C 66750000
         AGO    .NMSER02                                                66800000
.NMSER01 ANOP                                                           66850000
         AIF  (&MSERF(&LITIX) EQ 1 OR &MSERF(&ADCONIX) EQ 1).NMSER02    66900000
         LA    15,&MSER               GET MOUNT VOL-SER            @H2C 66950000
         ST    15,8(1)                STORE INTO PARM LIST         @H2C 67000000
.NMSER02 ANOP                                                           67050000
.*********************************************************************  67100000
.*                                                                   *  67150000
.*                   TXT2 KEYWORD                                    *  67200000
.*                                                                   *  67250000
.*********************************************************************  67300000
         AIF (&TXT2F(&NULLIX) EQ 1).NTXT202                             67350000
         AIF (&TXT2F(&REGIX) NE 1 ).NTXT201                             67400000
         AIF (&TXT2F(&REG01IX) EQ 1).NTXT201                            67450000
         ST    &TXT2(1),8(1)          STORE TEXT2 ADDRS INTO PARM  @H2C 67500000
         AGO    .NTXT202                                                67550000
.NTXT201 ANOP                                                           67600000
         AIF  (&TXT2F(&LITIX) EQ 1 OR &TXT2F(&ADCONIX) EQ 1).NTXT202    67650000
         LA    15,&TXT2               GET TEXT2 ADDRESS            @H2C 67700000
         ST    15,8(1)                STORE INTO PARM LIST         @H2C 67750000
.NTXT202 ANOP                                                           67800000
.*********************************************************************  67850000
.*                                                                   *  67900000
.*                   DCB KEYWORD                                     *  67950000
.*                                                                   *  68000000
.*********************************************************************  68050000
         AIF (&DCBF(&NULLIX) EQ 1).NDCB02                               68100000
         AIF (&DCBF(&REGIX) NE 1 ).NDCB01                               68150000
         AIF (&DCBF(&REG01IX) EQ 1).NDCB01                              68200000
         ST    &DCB(1),12(1)          STORE DCB ADDRESS INTO PARM  @H2C 68250000
         AGO    .NDCB02                                                 68300000
.NDCB01 ANOP                                                            68350000
         AIF  (&DCBF(&ADCONIX) EQ 1).NDCB02                             68400000
         LA    15,&DCB                GET DCB ADDRESS              @H2C 68450000
         ST    15,12(1)               STORE INTO PARM LIST         @H2C 68500000
.NDCB02 ANOP                                                            68550000
.*********************************************************************  68600000
.*                                                                   *  68650000
.*                   UCBL KEYWORD                                    *  68700000
.*                                                                   *  68750000
.*********************************************************************  68800000
         AIF (&UCBLF(&NULLIX) EQ 1).NUCBL02                             68850000
         AIF (&UCBLF(&REGIX) NE 1 ).NUCBL01                             68900000
         ST    &UCBL(1),12(1)         STORE UCB LIST ADDRESS       @H2C 68950000
         AGO    .NUCBL02                                                69000000
.NUCBL01 ANOP                                                           69050000
         AIF  (&UCBLF(&LITIX) EQ 1 OR &UCBLF(&ADCONIX) EQ 1).NUCBL02    69100000
         LA    15,&UCBL               GET UCB LIST ADDRESS         @H2C 69150000
         ST    15,12(1)               STORE INTO PARM LIST         @H2C 69200000
.NUCBL02 ANOP                                                           69250000
.*********************************************************************  69300000
.*                                                                   *  69350000
.*                   UCB KEYWORD                                     *  69400000
.*                                                                   *  69450000
.*********************************************************************  69500000
         AIF (&UCBF(&NULLIX) EQ 1).NUCB02                               69550000
         AIF (&UCBF(&REGIX) NE 1 ).NUCB01                               69600000
         ST    &UCB(1),12(1)          STORE UCB ADDRESS INTO PARM  @H2C 69650000
         AGO    .NUCB02                                                 69700000
.NUCB01 ANOP                                                            69750000
         AIF  (&UCBF(&LITIX) EQ 1 OR    &UCBF(&ADCONIX) EQ 1).NUCB02    69800000
         LA    15,&UCB                GET UCB ADDRESS              @H2C 69850000
         ST    15,12(1)               STORE INTO PARM              @H2C 69900000
.NUCB02 ANOP                                                            69950000
.*                                                                      69951100
.*       *---------------------------------------------------*          69952200
.*       *                  INDEX keyword                    *          69953300
.*       *---------------------------------------------------*     @02a 69954400
         AIF  (&INDEXF(&NULLIX) EQ 1 OR                                C69955500
               &INDEXF(&LITIX) EQ 1 ).NOINDEXTODO                  @02a 69956600
.*                                                                      69957700
         AIF  (&INDEXF(&REGIX) EQ 1 ).INDEXREGTODO                 @02a 69958800
         AIF  (&INDEXF(&RXFMTIX) EQ 1 ).INDEXRXFMTTODO             @02a 69959900
         AGO  .NOINDEXTODO                                         @02a 69961000
.*                                                                      69962100
.INDEXREGTODO  ANOP                                                @02A 69963200
         ST    &INDEX(1),20(1)        STORE INTO PARM LIST         @02A 69964300
         AGO  .NOINDEXTODO                                         @02a 69965400
.*                                                                      69966500
.INDEXRXFMTTODO  ANOP                                              @02A 69967600
         LA    15,&INDEX              GET INDEX                    @H2C 69968700
         ST    15,20(1)               STORE INTO PARM LIST         @H2C 69969800
.*                                                                      69970900
.NOINDEXTODO  ANOP                                                 @02a 69972000
.*                                                                      69973100
.*                                                                      69974200
.*       *---------------------------------------------------*          69975300
.*       *                  MEDIATYPE keyword                *          69976400
.*       *---------------------------------------------------*     @02a 69977500
         AIF  (&MEDTF(&NULLIX) EQ 1 OR                                 C69978600
               &MEDTF(&LITIX) EQ 1 ).NOMEDTTODO                    @02a 69979700
.*                                                                      69980800
         AIF  (&MEDTF(&REGIX) EQ 1 ).MEDTREGTODO                   @02a 69981900
         AIF  (&MEDTF(&RXFMTIX) EQ 1 ).MEDTRXFMTTODO               @02a 69983000
         AGO  .NOMEDTTODO                                          @02a 69984100
.*                                                                      69985200
.MEDTREGTODO   ANOP                                                @02A 69986300
         ST    &MEDIATYPE(1),24(1)    STORE MEDTYP PTR INTO PLIST  @02A 69987400
         AGO  .NOMEDTTODO                                          @02a 69988500
.*                                                                      69989600
.MEDTRXFMTTODO  ANOP                                               @02A 69990700
         LA    15,&MEDIATYPE          GET ADDR OF MEDTYP VARIABLE  @H2C 69991800
         ST    15,24(1)               STORE INTO PARM LIST         @H2C 69992900
.*                                                                      69994000
.NOMEDTTODO   ANOP                                                 @02a 69995100
.*                                                                      69996200
.*********************************************************************  70000000
.*                                                                   *  70050000
.*      ADD REG 15 SET AND SVC CALL CODE IF NOT LIST FORM            *  70100000
.*                                                                   *  70150000
.*********************************************************************  70200000
.SVCTEST ANOP                                                           70250000
         AIF  ('&MF(1)' EQ 'L').NOSVC      .* IF MF=L SKIP SVC          70300000
         AIF  ('&TEST' NE 'YES').NOTESTZ   .* IS TEST CODE REQUIRED     70350000
         L     15,12(0,1)                   GET POINTER TO UCB     @L1C 70362800
         TM    23(15),X'01'                 ABOVE THE LINE UCB?    @L1A 70375600
         BO    *+16                         BR IF YES              @L1A 70388400
         L     15,20(,15)                   PTR TO COMMON EXTEN    @L1A 70401200
         N     15,=X'00FFFFFF'              24BIT PTR RESET HI BYT @L1A 70414000
         B     *+20                         BR TO PERFORM TEST     @L1A 70426800
*        TARGET OF FIRST BRANCH                                    @L1A 70439600
         LR    0,15                         SAVE IN REG 0          @L1A 70452400
         L     15,20(,15)                   GET PTR TO COMMON XTN  @L1A 70465200
         N     15,=X'00000FFE'              ISOLATE PAGE OFFSET    @L1A 70478000
         N     0,=X'FFFFF000'               ISOL PG INFO OF UCB @  @L1A 70490800
         OR    15,0                         CREATE 31 BIT ADDRESS  @L1A 70503600
*        TARGET OF SECOND BRANCH                                   @L1A 70516400
         TM    UCBFL6-UCBCMEXT(15),X'40'    DEVICE HAVE A POD?     @L1C 70544200
         LA    15,4                         SET UP RETURN CODE     @L1M 70572000
         BNO   *+12              IF NOT SKIP SVC                        70600000
.NOTESTZ ANOP                                                           70650000
         SR    0,0                          ZERO REG 0                  70700000
         LA    15,30                        SET ROUTE  CODE             70750000
         SVC   109                                                      70800000
.NOSVC   ANOP                                                           70850000
         MEXIT                                                          70900000
.KEYCHK  ANOP                                                           70950000
.*                                                                      70954500
.*###################################################################*  70959000
.*###################################################################*  70963500
.*#                                                                 #*  70968000
.*#    CHECK OUT EACH KEYWORD THAT IS DEFINED TO HAVE ONE OF A SET  #*  70972500
.*#    OF SPECIFIC VALUES                                           #*  70977000
.*#                                                                 #*  70981500
.*###################################################################*  70986000
.*###################################################################*  70990500
.*                                                                      70995000
.*********************************************************************  71000000
.* The DCB keyword supports neither the quoted nor unquoted formats, *  71030000
.* so don't even call CHKSTR for the DCB keyword, remove call        *  71060000
.************************************************************** 3@02d*  71090000
.*                                                                      71120000
.*********************************************************************  71150000
.* The only relevant format for checking DISP here is the quoted     *  71200000
.* literal format.                                                   *  71250000
.*************************************************************** @02c*  71300000
       AIF (&DISPF(&LITIX) EQ 0).VLCKDISP                               71350000
       MSGDISP ,(CHKSTR,DISP,,&DISP),('D','K','R')                      72400000
.VLCKDISP ANOP                                                          72433300
.*                                                                      72466600
.*********************************************************************  72500000
.* The only relevant format for checking FLASH here is the unquoted  *  72533300
.* literal format.                                                   *  72566600
.*********************************************************************  72600000
       AIF (&FLASHF(&UNQUOTEIX) EQ 0).VLCKFLASH                    @02c 72605400
       MSGDISP ,(CHKSTR,FLASH,,&FLASH),                                C72610800
               (STEADY,STEADY2,BLINK,BLINK2,ALT)                        72616200
.VLCKFLASH ANOP                                                         72621600
.*                                                                      72627000
.*********************************************************************  72632400
.* Removed the check for FORCE keywords such as DAVV, FDEV, etc. @L2C*  72640500
.*********************************************************************  72648600
.*                                                                      72772500
.*********************************************************************  72800000
.* The INDEX keyword supports both the quoted and unquoted literal   *  72803100
.* formats, so have to extract the string so CHKSTR can check        *  72806200
.* against a single set of values.                                   *  72809300
.***************************************************************** @02a 72812400
       AIF (&INDEXF(&LITIX) EQ 0 AND                                   C72815500
               &INDEXF(&UNQUOTEIX) EQ 0).VLCKINDEXEXIT                  72818600
.*                                                                      72821700
.*       *---------------------------------------------------*          72824800
.*       *  Need the total length of the value               *          72827900
.*       *---------------------------------------------------*     @02a 72831000
&LENGTH  SETA  K'&INDEX                     Total length of value  @02a 72834100
.*                                                                      72837200
.*       *---------------------------------------------------*          72840300
.*       * If a quoted literal, pick up the value less the   *          72843400
.*       * quotes.                                           *          72846500
.*       *---------------------------------------------------*     @02a 72849600
         AIF   (&INDEXF(&LITIX) EQ 0).VLCKINDEXRX                  @02a 72852700
.*                                                                      72855800
&LENGTH  SETA  &LENGTH-2                    Less 2 quotes          @02a 72858900
&LITVALINDEX  SETC  '&INDEX'(2,&LENGTH)     Get the value          @02a 72862000
.*                                                                      72865100
         AGO  .VLCKINDEX                                           @02a 72868200
.*                                                                      72871300
.VLCKINDEXRX ANOP                                                  @02a 72874400
&LITVALINDEX SETC '&INDEX'                  Get the value          @02a 72877500
.*                                                                      72880600
.VLCKINDEX ANOP                                                    @02a 72883700
         MSGDISP ,(CHKSTR,INDEX,,&LITVALINDEX),(YES,NO)            @02c 72886800
.*                                                                      72889900
.VLCKINDEXEXIT ANOP                                                @02a 72893000
.*                                                                      72896100
.*********************************************************************  72900000
.* The only relevant format for checking LABEL here is the quoted    *  72925000
.* literal format.                                                   *  72950000
.*************************************************************** @02c*  72975000
       AIF (&LABELF(&LITIX) EQ 0).VLCKLABEL                             73000000
       MSGDISP ,(CHKSTR,LABEL,,&LABEL),('S','A','N','X')                73025000
.VLCKLABEL ANOP                                                         73050000
.*                                                                      73075000
.*********************************************************************  73100000
.* The only relevant format for checking MEDIATYPE LABEL here is     *  73105200
.* the quoted literal format.                                        *  73110400
.*************************************************************** @02a*  73115600
       AIF (&MEDTF(&LITIX) EQ 0).VLCKMEDIATYPEEXIT                 @02a 73120800
.*                                                                      73126000
.*       *---------------------------------------------------*          73131200
.*       *  Need the length of the string                    *          73136400
.*       *---------------------------------------------------*     @02a 73141600
&LENGTH  SETA  K'&MEDIATYPE                 Total length of value  @02a 73146800
&LENGTH  SETA  &LENGTH-2                    Less 2 quotes          @02a 73152000
.*                                                                      73157200
         MSGDISP ,(CHKLEN,MEDIATYPE,&LENGTH,&MEDTF(&LITIX),1)      @02a 73162400
         MSGDISP ,(CHKSTR,MEDIATYPE,,&MEDIATYPE),                      C73167600
               ('1','2','3','4','5','6','7','8','9')               @H4c 73175400
.*                                                                      73183200
.VLCKMEDIATYPEEXIT ANOP                                            @02a 73188400
.*                                                                      73193600
.*********************************************************************  73200000
.* MF isn't checked here.                                            *  73202700
.***************************************************************** @02a 73205400
.*                                                                      73208100
.*********************************************************************  73210800
.* The only relevant format for checking MLABEL here is the quoted   *  73213500
.* literal format.                                                   *  73216200
.*************************************************************** @02c*  73218900
       AIF (&MLABELF(&LITIX) EQ 0).VLCKMLABEL                           73221600
       MSGDISP ,(CHKSTR,MLABEL,,&MLABEL),('S','A','N','X')              73224300
.VLCKMLABEL ANOP                                                        73227000
.*                                                                      73229700
.*********************************************************************  73232400
.* Although we don't check the value of the MSER operand, we do want *  73235100
.* to ensure it's length is 6 or less.                               *  73237800
.*************************************************************** @02c*  73240500
       AIF (&MSERF(&LITIX) EQ 0).VLCKMSER                               73243200
&LENGTH   SETA   K'&MSER                                                73245900
&LENGTH   SETA   &LENGTH-2                                              73248600
        MSGDISP  ,(CHKLEN,MSER,&LENGTH,&MSERF(&LITIX),6)                73251300
.VLCKMSER  ANOP                                                    @02a 73254000
.*                                                                      73256700
.*********************************************************************  73259400
.* Although we don't check the value of the SER operand, we do want  *  73262100
.* to ensure it's length is 6 or less.                               *  73264800
.*************************************************************** @02c*  73267500
       AIF (&SERF(&LITIX) EQ 0).VLCKSER                                 73270200
&LENGTH   SETA   K'&SER                                                 73272900
&LENGTH   SETA   &LENGTH-2                                              73275600
        MSGDISP  ,(CHKLEN,SER,&LENGTH,&SERF(&LITIX),6)                  73278300
.VLCKSER  ANOP                                                     @02a 73281000
.*                                                                      73283700
.*********************************************************************  73286400
.* The only relevant format for checking TEST here is the unquoted   *  73289100
.* literal format.                                                   *  73291800
.*********************************************************************  73294500
       AIF (&TESTF(&UNQUOTEIX) EQ 0).VLCKTEST                           73297200
       MSGDISP ,(CHKSTR,TEST,,&TEST),(YES,NO)                           73300000
.VLCKTEST ANOP                                                          73333300
.*                                                                      73366600
.*********************************************************************  73400000
.* Although we don't check the value of the TXT operand, we do want  *  73406200
.* to ensure it's length is 6 for RDY or 8 or less for GEN           *  73412400
.*************************************************************** @02c*  73418600
         AIF (&TXTF(&LITIX) EQ 0).VLCKTXT                               73424800
         AIF   ('&FUNCTON' NE 'RDY').TXTGEN                             73431000
&LENGTH   SETA   K'&TXT                                                 73437200
&LENGTH   SETA   &LENGTH-2                                              73443400
        MSGDISP  ,(CHKLEN,TXT,&LENGTH,&TXTF(&LITIX),6)                  73449600
         AGO  .VLCKTXT                                                  73455800
.TXTGEN   ANOP                                                          73462000
&LENGTH   SETA   K'&TXT                                                 73468200
&LENGTH   SETA   &LENGTH-2                                              73474400
        MSGDISP  ,(CHKLEN,TXT,&LENGTH,&TXTF(&LITIX),8)                  73480600
.VLCKTXT  ANOP                                                          73486800
.*                                                                      73493000
.*********************************************************************  73500000
.* Although we don't check the value of the TXT2 operand, we do want *  73525000
.* to ensure it's length is 6 for RDY or 8 or less for GEN           *  73550000
.*************************************************************** @02c*  73575000
         AIF (&TXT2F(&LITIX) EQ 0).VLCKTXT2                             73600000
&LENGTH   SETA   K'&TXT2                                                73625000
&LENGTH   SETA   &LENGTH-2                                              73650000
        MSGDISP  ,(CHKLEN,TXT2,&LENGTH,&TXT2F(&LITIX),8)                73675000
.VLCKTXT2 ANOP                                                          73700000
.*                                                                      73725000
.*********************************************************************  73750000
.* The UCB nor UCBL keywords support neither the quoted nor unquoted *  73770000
.* formats, so don't even call CHKSTR                                *  73790000
.************************************************************* 12@02d*  73810000
.*                                                                      73830000
.*********************************************************************  73850000
.* The only relevant format for checking VOL here is the unquoted    *  73870000
.* literal format.                                                   *  73890000
.*********************************************************************  73910000
       AIF (&VOLF(&UNQUOTEIX) EQ 0).VLCKVOL                             73930000
       MSGDISP ,(CHKSTR,VOL,,&VOL),                                    C73950000
               (STATIC,INSERT,REMOVE,SWAP)                              74000000
.VLCKVOL ANOP                                                           74048100
.*                                                                      74096200
.*********************************************************************  74100000
.* The only relevant format for checking WAIT here is the unquoted   *  74111700
.* literal format.                                                   *  74123400
.***************************************************************** @02a 74135100
         AIF (&WAITF(&UNQUOTEIX) EQ 0).VLCKWAIT                         74146800
         MSGDISP ,(CHKSTR,WAIT,,&WAIT),(YES,NO)                         74158500
.VLCKWAIT ANOP                                                     @02a 74170200
.*                                                                      74181900
.*###################################################################*  74193600
.*###################################################################*  74205300
.*#                                                                 #*  74217000
.*#    CHECK OUT EACH KEYWORD THAT HAS AN RX VALUE SPECIFIED AS     #*  74228700
.*#    ITS VALUE.                                                   #*  74240400
.*#                                                                 #*  74252100
.*###################################################################*  74263800
.*###################################################################*  74275500
.*                                                                      74287200
.*********************************************************************  74300000
.*                      DCB KEYWORD                                  *  74350000
.*********************************************************************  74400000
        AIF (&DCBF(&RXFMTIX) EQ 0).NOTRXDCB                        @02C 74450000
        MSGDISP  ,(CHKRX,DCB,&MF,&DCB,1)                                74550000
.NOTRXDCB ANOP                                                          74600000
.*                                                                      74650000
.*********************************************************************  75800000
.*                      DISP KEYWORD                                 *  75850000
.*********************************************************************  75900000
        AIF (&DISPF(&RXFMTIX) EQ 0).NOTRXDISP                     @03C  75950000
        MSGDISP  ,(CHKRX,DISP,&MF,&DISP,1)                              76050000
.NOTRXDISP  ANOP                                                        76083300
.*                                                                      76116600
.*********************************************************************  76150000
.*                      Index Keyword                            @02a*  76200000
.*********************************************************************  76250000
        AIF (&INDEXF(&RXFMTIX) EQ 0).NOTRXINDEX                         76300000
        MSGDISP  ,(CHKRX,INDEX,&MF,&INDEX,1)                            76350000
.NOTRXINDEX  ANOP                                                       76400000
.*                                                                      76450000
.*********************************************************************  79800000
.*                      LABEL KEYWORD                                *  79850000
.*********************************************************************  79900000
        AIF (&LABELF(&RXFMTIX) EQ 0).NOTRXLABEL                         79950000
        MSGDISP  ,(CHKRX,LABEL,&MF,&LABEL,1)                            80000000
.NOTRXLABEL  ANOP                                                       80050000
.*********************************************************************  80100000
.*                      MEDIATYPE Keyword                        @02a*  80150000
.*********************************************************************  80200000
        AIF (&MEDTF(&RXFMTIX) EQ 0).NOTRXMEDIATYPE                      80250000
        MSGDISP  ,(CHKRX,MEDIATYPE,&MF,&MEDIATYPE,1)                    80300000
.NOTRXMEDIATYPE  ANOP                                                   80350000
.*                                                                      80400000
.*********************************************************************  80700000
.*                      MLABEL KEYWORD                               *  80750000
.*********************************************************************  80800000
        AIF (&MLABELF(&RXFMTIX) EQ 0).NOTRXMLABEL                       80850000
        MSGDISP  ,(CHKRX,MLABEL,&MF,&MLABEL,1)                          80900000
.NOTRXMLABEL  ANOP                                                      80950000
.*********************************************************************  81000000
.*                      MSER KEYWORD                                 *  81050000
.*********************************************************************  81100000
        AIF (&MSERF(&RXFMTIX) EQ 0).NOTRXMSER                           81116600
        MSGDISP  ,(CHKRX,MSER,&MF,&MSER,1)                              81133200
.NOTRXMSER  ANOP                                                        81149800
.*                                                                      81166400
.*********************************************************************  81183000
.*                      SER   KEYWORD                                *  81199600
.*********************************************************************  81216200
        AIF (&SERF(&RXFMTIX) EQ 0).NOTRXSER                             81232800
        MSGDISP  ,(CHKRX,SER,&MF,&SER,1)                                81249400
.NOTRXSER  ANOP                                                         81266000
.*                                                                      81282600
.*********************************************************************  81300000
.*                      TXT KEYWORD                                  *  81350000
.*********************************************************************  81400000
        AIF (&TXTF(&RXFMTIX) EQ 0).NOTRXTXT                             81440000
        MSGDISP  ,(CHKRX,TXT,&MF,&TXT,1)                                81480000
.NOTRXTXT  ANOP                                                         81520000
.*                                                                      81560000
.*********************************************************************  81600000
.*                      TXT2 KEYWORD                                 *  81650000
.*********************************************************************  81700000
        AIF (&TXT2F(&RXFMTIX) EQ 0).NOTRXTXT2                           81740000
        MSGDISP  ,(CHKRX,TXT2,&MF,&TXT2,1)                              81780000
.NOTRXTXT2  ANOP                                                        81820000
.*                                                                      81860000
.*********************************************************************  81900000
.*                      UCBL KEYWORD                                 *  81950000
.*********************************************************************  82200000
        AIF (&UCBLF(&RXFMTIX) EQ 0).NOTRXUCBL                           82250000
        MSGDISP  ,(CHKRX,UCBL,&MF,&UCBL,1)                              82300000
.NOTRXUCBL  ANOP                                                        82350000
.*                                                                      82400000
.*###################################################################*  82450000
.*###################################################################*  82500000
.*#                                                                 #*  82550000
.*#    CHECK OUT EACH KEYWORD THAT HAS A REG SPECIFIED AS IT'S      #*  82600000
.*#    VALUE.                                                       #*  82650000
.*#                                                                 #*  82700000
.*###################################################################*  82750000
.*###################################################################*  82800000
.*                                                                 @02a 82850000
.*********************************************************************  82950000
.*                      DCB KEYWORD                                  *  83000000
.*********************************************************************  83150000
        AIF (&DCBF(&REGIX) EQ 0).NCHK1R                                 83150500
        MSGDISP  ,(CHKREG,DCB,&DCBF(&REG01IX),&DCB,0,0,1),&MF           83151000
.NCHK1R ANOP                                                            83151500
.*                                                                      83152000
.*********************************************************************  83152500
.*                      DISP KEYWORD                                 *  83153000
.*********************************************************************  83153500
        AIF (&DISPF(&REGIX) EQ 0).NCHK6R                                83154000
        MSGDISP  ,(CHKREG,DISP,&DISPF(&REG01IX),&DISP,0,0,1),&MF        83154500
.NCHK6R ANOP                                                            83155000
.*                                                                      83155500
.*********************************************************************  83156000
.*                      INDEX KEYWORD                                *  83156500
.*********************************************************************  83157000
        AIF (&INDEXF(&REGIX) EQ 0).NCHKFS                               83157500
        MSGDISP  ,(CHKREG,INDEX,&INDEXF(&REG01IX),&INDEX,0,0,1),&MF     83158000
.NCHKFS ANOP                                                            83158500
.*                                                                      83159000
.*********************************************************************  83159500
.*                      LABEL KEYWORD                                *  83160000
.*********************************************************************  83160500
        AIF (&LABELF(&REGIX) EQ 0).NCHK5R                               83161000
        MSGDISP  ,(CHKREG,LABEL,&LABELF(&REG01IX),&LABEL,0,0,1),&MF     83161500
.NCHK5R ANOP                                                            83162000
.*                                                                      83162500
.*********************************************************************  83163000
.*                      MEDIATYPE KEYWORD                            *  83163500
.*********************************************************************  83164000
        AIF (&MEDTF(&REGIX) EQ 0).NCHKFT                                83164500
        MSGDISP  ,(CHKREG,MEDIATYPE,                                   C83165000
               &MEDTF(&REG01IX),&MEDIATYPE,0,0,1),&MF                   83165500
.NCHKFT ANOP                                                            83166000
.*                                                                      83166500
.*********************************************************************  83167000
.*                      MLABEL KEYWORD                               *  83167500
.*********************************************************************  83168000
        AIF (&MLABELF(&REGIX) EQ 0).NCHK8R                              83168500
        MSGDISP  ,(CHKREG,MLABEL,&MLABELF(&REG01IX),&MLABEL,0,0,1),&MF  83169000
.NCHK8R ANOP                                                            83169500
.*                                                                      83170000
.*********************************************************************  83170500
.*                      MSER KEYWORD                                 *  83171000
.*********************************************************************  83171500
        AIF (&MSERF(&REGIX) EQ 0).NCHK7R                                83172000
        MSGDISP  ,(CHKREG,MSER,&MSERF(&REG01IX),&MSER,0,0,1),&MF        83172500
.NCHK7R ANOP                                                            83173000
.*                                                                      83173500
.*********************************************************************  83174000
.*                      SER KEYWORD                                  *  83174500
.*********************************************************************  83175000
        AIF (&SERF(&REGIX) EQ 0).NCHK4R                                 83175500
        MSGDISP  ,(CHKREG,SER,&SERF(&REG01IX),&SER,0,0,1),&MF           83176000
.NCHK4R ANOP                                                            83176500
.*                                                                      83177000
.*********************************************************************  83177500
.*                      TXT KEYWORD                                  *  83178000
.*********************************************************************  83178500
        AIF (&TXTF(&REGIX) EQ 0).NCHKER                                 83179000
        MSGDISP  ,(CHKREG,TXT,&TXTF(&REG01IX),&TXT,0,0,1),&MF           83179500
.NCHKER ANOP                                                            83180000
.*                                                                      83180500
.*********************************************************************  83181000
.*                      TXT2 KEYWORD                                 *  83181500
.*********************************************************************  83182000
        AIF (&TXT2F(&REGIX) EQ 0).NCHKFR                                83182500
        MSGDISP  ,(CHKREG,TXT2,&TXT2F(&REG01IX),&TXT2,0,0,1),&MF        83183000
.NCHKFR ANOP                                                            83183500
.*                                                                      83184000
.*********************************************************************  83184500
.*                      UCBL KEYWORD                                 *  83185000
.*********************************************************************  83185500
        AIF (&UCBLF(&REGIX) EQ 0).NCHK9R                                83186000
        MSGDISP  ,(CHKREG,UCBL,&UCBLF(&REG01IX),&UCBL,1,0,1),&MF        83186500
.NCHK9R ANOP                                                            83187000
.*                                                                      83187500
.*###################################################################*  83188000
.*###################################################################*  83188500
.*#                                                                 #*  83189000
.*#  CHECK OUT KEY WORDS THAT REQUIRE SPECIFIC SERVICE REQUESTS     #*  83189500
.*#                                                                 #*  83190000
.*###################################################################*  83190500
.*###################################################################*  83191000
.*                                                                      83191500
.*********************************************************************  83200000
.*              DISP KEYWORD                                         *  83250000
.*         FLAG AN ERROR IF DISP IS SPECIFIED AND NO SERVICE REQUEST *  83300000
.*********************************************************************  83350000
      AIF (&DISPF(&NULLIX) EQ 1).NCHKX                                  83400000
      AIF  ('&FUNCTON' NE '').NCHKX                                     83450000
&M    SETC     '''DISP IS AN INVALID KEYWORD FOR A NULL'                83500000
&M    SETC    '&M'.' SERVICE REQ.'''                                    83550000
      MNOTE 12,&M                                                       83600000
.NCHKX  ANOP                                                            83650000
.*                                                                      83675000
.*********************************************************************  83700000
.*                                                                   *  83750000
.*     FIRST FIND OUT WHICH SERVICE REQUEST IS BEING PROCESSED       *  83800000
.*                                                                   *  83850000
.*********************************************************************  83900000
&KNT    SETA   1                                                        83950000
.LOOP1  ANOP                                                            84000000
        AIF ('&SVCR(&KNT)' EQ '&FUNCTON').HIT                           84050000
&KNT    SETA   &KNT+1                                                   84100000
        AIF (&KNT LE 6).LOOP1                                           84150000
        AGO  .NULLSVR                                                   84200000
.HIT    ANOP                                                            84233300
.*                                                                      84266600
.*********************************************************************  84300000
.*                                                                   *  84350000
.*      NOW CHECK EACH KEYWORD THAT SHOULD BE NULL FOR NULL          *  84400000
.*                                                                   *  84450000
.*                      DCB KEYWORD                                  *  84650000
.*********************************************************************  84700000
        AIF ('&MAP(&KNT)'(1,1)  EQ '0').NCHK1                           84750000
        AIF (&DCBF(&NULLIX) EQ 1).NCHK1                                 84783300
.*                                                                      84816600
&M    SETC     '''DCB IS AN INVALID KEYWORD FOR '.'&FUNCTON'            84850000
&M    SETC    '&M'.' SERVICE REQ.'''                                    84900000
      MNOTE 12,&M                                                       84950000
.*                                                                      84975000
.NCHK1 ANOP                                                             85000000
.*                                                                      85050000
.*********************************************************************  86850000
.*                      DISP KEYWORD                                 *  86900000
.*********************************************************************  86950000
        AIF ('&MAP(&KNT)'(7,1)  EQ '0').NCHK7                           87000000
        AIF (&DISPF(&NULLIX) EQ 1).NCHK7                                87033300
.*                                                                      87066600
&M    SETC     '''DISP IS AN INVALID KEYWORD FOR '.'&FUNCTON'           87100000
&M    SETC    '&M'.' SERVICE REQ.'''                                    87150000
      MNOTE 12,&M                                                       87200000
.*                                                                      87225000
.NCHK7 ANOP                                                             87250000
.*                                                                      87300000
.*********************************************************************  90000000
.*                      FLASH KEYWORD                                *  90050000
.*********************************************************************  90100000
        AIF ('&MAP(&KNT)'(14,1)  EQ '0').NCHK14                         90150000
        AIF (&FLASHF(&NULLIX) EQ 1).NCHK14                              90183300
.*                                                                      90216600
&M    SETC     '''FLASH IS AN INVALID KEYWORD FOR '.'&FUNCTON'          90250000
&M    SETC    '&M'.' SERVICE REQ.'''                                    90300000
      MNOTE 12,&M                                                       90350000
.*                                                                      90375000
.NCHK14 ANOP                                                            90400000
.*                                                                      90425000
.*********************************************************************  90450000
.*                      FORCE KEYWORD                                *  90500000
.*********************************************************************  90550000
        AIF ('&MAP(&KNT)'(15,1)  EQ '0').NCHK15                         90600000
        AIF ('&FORCE' EQ '').NCHK15                                     90650000
.*                                                                      90675000
&M    SETC     '''FORCE IS AN INVALID KEYWORD FOR '.'&FUNCTON'          90700000
&M    SETC    '&M'.' SERVICE REQ.'''                                    90750000
      MNOTE 12,&M                                                       90800000
.*                                                                      90825000
.NCHK15 ANOP                                                            90850000
.*                                                                      90875000
.*********************************************************************  90900000
.*                      INDEX KEYWORD                                *  90950000
.*********************************************************************  91000000
.*                                                                      91764000
         AIF   ('&MAP(&KNT)'(18,1)  EQ '0').NCHK18                      91767500
         AIF   ('&INDEX' EQ '').NCHK18                                  91771000
.*                                                                      91774500
&M       SETC  '''INDEX IS AN INVALID KEYWORD FOR '.'&FUNCTON'          91778000
&M       SETC  '&M'.' SERVICE REQ.'''                                   91781500
.*                                                                      91785000
         MNOTE 12,&M                                                    91788500
.*                                                                      91792000
.NCHK18  ANOP                                                           91795500
.*                                                                      91797700
.*********************************************************************  91800000
.*                      LABEL KEYWORD                                *  91800300
.*********************************************************************  91800600
        AIF ('&MAP(&KNT)'(6,1)  EQ '0').NCHK6                           91800900
        AIF (&LABELF(&NULLIX) EQ 1).NCHK6                               91801200
.*                                                                      91801500
&M    SETC     '''LABEL IS AN INVALID KEYWORD FOR '.'&FUNCTON'          91801800
&M    SETC    '&M'.' SERVICE REQ.'''                                    91802100
      MNOTE 12,&M                                                       91802400
.*                                                                      91802700
.NCHK6 ANOP                                                             91803000
.*                                                                      91803300
.*********************************************************************  91803600
.*                      MEDIATYPE KEYWORD                            *  91803900
.*********************************************************************  91804200
.*                                                                      91804500
         AIF   ('&MAP(&KNT)'(19,1)  EQ '0').NCHK19                      91804800
         AIF   ('&MEDIATYPE' EQ '').NCHK19                              91805100
.*                                                                      91805400
&M       SETC  '''MEDIATYPE IS AN INVALID KEYWORD FOR '.'&FUNCTON'      91805700
&M       SETC  '&M'.' SERVICE REQ.'''                                   91806000
.*                                                                      91806300
         MNOTE 12,&M                                                    91806600
.*                                                                      91806900
.NCHK19  ANOP                                                           91807200
.*                                                                      91807500
.*********************************************************************  91807800
.*                      MF KEYWORD                                   *  91808100
.*********************************************************************  91808400
        AIF ('&MAP(&KNT)'(3,1)  EQ '0').NCHK3                           91808700
        AIF (&MFE(&NULLIX) EQ 1).NCHK3                                  91809000
.*                                                                      91809300
&M    SETC     '''MF IS AN INVALID KEYWORD FOR '.'&FUNCTON'             91809600
&M    SETC    '&M'.' SERVICE REQ.'''                                    91809900
      MNOTE 12,&M                                                       91810200
.*                                                                      91810500
.NCHK3 ANOP                                                             91810800
.*                                                                      91811100
.*********************************************************************  91811400
.*                      MLABEL KEYWORD                               *  91811700
.*********************************************************************  91812000
        AIF ('&MAP(&KNT)'(9,1)  EQ '0').NCHK9                           91812300
        AIF (&MLABELF(&NULLIX) EQ 1).NCHK9                              91812600
.*                                                                      91812900
&M    SETC     '''MLABEL IS AN INVALID KEYWORD FOR '.'&FUNCTON'         91813200
&M    SETC    '&M'.' SERVICE REQ.'''                                    91813500
      MNOTE 12,&M                                                       91813800
.*                                                                      91814100
.NCHK9 ANOP                                                             91814400
.*                                                                      91814700
.*********************************************************************  91815000
.*                      MSER KEYWORD                                 *  91815300
.*********************************************************************  91815600
        AIF ('&MAP(&KNT)'(8,1)  EQ '0').NCHK8                           91815900
        AIF (&MSERF(&NULLIX) EQ 1).NCHK8                                91816200
.*                                                                      91816500
&M    SETC     '''MSER IS AN INVALID KEYWORD FOR '.'&FUNCTON'           91816800
&M    SETC    '&M'.' SERVICE REQ.'''                                    91817100
      MNOTE 12,&M                                                       91817400
.*                                                                      91817700
.NCHK8 ANOP                                                             91818000
.*                                                                      91818300
.*********************************************************************  91818600
.*                      SER KEYWORD                                  *  91818900
.*********************************************************************  91819200
        AIF ('&MAP(&KNT)'(5,1)  EQ '0').NCHK5                           91819500
        AIF (&SERF(&NULLIX) EQ 1).NCHK5                                 91819800
.*                                                                      91820100
&M    SETC     '''SER IS AN INVALID KEYWORD FOR '.'&FUNCTON'            91820400
&M    SETC    '&M'.' SERVICE REQ.'''                                    91820700
      MNOTE 12,&M                                                       91821000
.*                                                                      91821300
.NCHK5 ANOP                                                             91821600
.*                                                                      91821900
.*********************************************************************  91822200
.*                      TEST KEYWORD                                 *  91822500
.*********************************************************************  91822800
        AIF ('&MAP(&KNT)'(17,1)  EQ '0').NCHK17                         91823100
        AIF ('&TEST' EQ '').NCHK17                                      91823400
.*                                                                      91823700
&M    SETC     '''TEST IS AN INVALID KEYWORD FOR '.'&FUNCTON'           91824000
&M    SETC    '&M'.' SERVICE REQ.'''                                    91824300
      MNOTE 12,&M                                                       91824600
.*                                                                      91824900
.NCHK17 ANOP                                                            91825200
.*                                                                      91825500
.*********************************************************************  91825800
.*                      TXT KEYWORD                                  *  91826100
.*********************************************************************  91826400
        AIF ('&MAP(&KNT)'(11,1)  EQ '0').NCHK11                         91826700
        AIF (&TXTF(&NULLIX) EQ 1).NCHK11                                91827000
.*                                                                      91827300
&M    SETC     '''TXT IS AN INVALID KEYWORD FOR '.'&FUNCTON'            91827600
&M    SETC    '&M'.' SERVICE REQ.'''                                    91827900
      MNOTE 12,&M                                                       91828200
.*                                                                      91828500
.NCHK11 ANOP                                                            91828800
.*                                                                      91829100
.*********************************************************************  91829400
.*                      TXT2 KEYWORD                                 *  91829700
.*********************************************************************  91830000
        AIF ('&MAP(&KNT)'(12,1)  EQ '0').NCHK12                         91830300
        AIF (&TXT2F(&NULLIX) EQ 1).NCHK12                               91830600
.*                                                                      91830900
&M    SETC     '''TXT2 IS AN INVALID KEYWORD FOR '.'&FUNCTON'           91831200
&M    SETC    '&M'.' SERVICE REQ.'''                                    91831500
      MNOTE 12,&M                                                       91831800
.*                                                                      91832100
.NCHK12 ANOP                                                            91832400
.*                                                                      91832700
.*********************************************************************  91833000
.*                      UCB KEYWORD                                  *  91833300
.*********************************************************************  91833600
        AIF ('&MAP(&KNT)'(4,1)  EQ '0').NCHK4                           91833900
        AIF (&UCBF(&NULLIX) EQ 1).NCHK4                                 91834200
.*                                                                      91834500
&M    SETC     '''UCB IS AN INVALID KEYWORD FOR '.'&FUNCTON'            91834800
&M    SETC    '&M'.' SERVICE REQ.'''                                    91835100
      MNOTE 12,&M                                                       91835400
.*                                                                      91835700
.NCHK4 ANOP                                                             91836000
.*                                                                      91836300
.*********************************************************************  91836600
.*                      UCBL KEYWORD                                 *  91836900
.*********************************************************************  91837200
        AIF ('&MAP(&KNT)'(10,1)  EQ '0').NCHK10                         91837500
        AIF (&UCBLF(&NULLIX) EQ 1).NCHK10                               91837800
.*                                                                      91838100
&M    SETC     '''UCBL IS AN INVALID KEYWORD FOR '.'&FUNCTON'           91838400
&M    SETC    '&M'.' SERVICE REQ.'''                                    91838700
      MNOTE 12,&M                                                       91839000
.*                                                                      91839300
.NCHK10 ANOP                                                            91839600
.*                                                                      91839900
.*********************************************************************  91840200
.*                      VOL KEYWORD                                  *  91840500
.*********************************************************************  91840800
        AIF ('&MAP(&KNT)'(13,1)  EQ '0').NCHK13                         91841100
        AIF (&VOLF(&NULLIX) EQ 1).NCHK13                                91841400
.*                                                                      91841700
&M    SETC     '''VOL IS AN INVALID KEYWORD FOR '.'&FUNCTON'            91842000
&M    SETC    '&M'.' SERVICE REQ.'''                                    91842300
      MNOTE 12,&M                                                       91842600
.*                                                                      91842900
.NCHK13 ANOP                                                            91843200
.*                                                                      91843500
.*********************************************************************  91843800
.*                      WAIT KEYWORD                                 *  91844100
.*********************************************************************  91844400
        AIF ('&MAP(&KNT)'(16,1)  EQ '0').NCHK16                         91844700
        AIF ('&WAIT' EQ '').NCHK16                                      91845000
.*                                                                      91845300
&M    SETC     '''WAIT IS AN INVALID KEYWORD FOR '.'&FUNCTON'           91845600
&M    SETC    '&M'.' SERVICE REQ.'''                                    91845900
      MNOTE 12,&M                                                       91846200
.*                                                                      91846500
.NCHK16 ANOP                                                            91846800
.*                                                                      91847100
.*###################################################################*  91847400
.*###################################################################*  91847700
.*                                                                   *  91850000
.* VERIFY EACH SERVICE REQUEST HAS REQUIRED KEYWORDS FOR NORMAL FORM *  91900000
.*                                                                   *  91950000
.*###################################################################*  91983300
.*###################################################################*  92016600
      AIF ('&MF' EQ 'L').RQOK                                           92050000
      AIF ('&MF(1)' EQ 'E').RQOK                                        92100000
      AIF ('&FUNCTON' NE 'RDY').STP1                                    92150000
      AIF (&DCBF(&NULLIX) EQ 0).RQOK                                    92200000
      MNOTE  12,'REQUIRED KEYWORD DCB MISSING'                          92250000
.STP1  ANOP                                                             92300000
      AIF ('&FUNCTON' NE 'MOUNT').STP2                                  92350000
      AIF (&UCBF(&NULLIX) EQ 0).RQOK                                    92400000
      MNOTE  12,'REQUIRED KEYWORD UCB MISSING'                          92450000
.STP2 ANOP                                                              92500000
      AIF ('&FUNCTON' NE 'VERIFY').STP3                                 92550000
      AIF (&UCBF(&NULLIX) EQ 0).RQOK                                    92600000
      MNOTE  12,'REQUIRED KEYWORD UCB MISSING'                          92650000
.STP3 ANOP                                                              92700000
      AIF ('&FUNCTON' NE 'DEMOUNT').STP4                        @H2C    92750000
      AIF (&UCBF(&NULLIX) EQ 0).RQOK                                    92800000
      MNOTE  12,'REQUIRED KEYWORD UCB MISSING'                          92850000
.STP4 ANOP                                                              92900000
      AIF ('&FUNCTON' NE 'RESET').STP5                                  92950000
      AIF (&UCBLF(&NULLIX) EQ 0 OR &UCBF(&NULLIX) EQ 0).RQOK            93000000
      MNOTE  12,'REQUIRED KEYWORD UCBL OR UCB MISSING'                  93050000
.STP5 ANOP                                                              93100000
      AIF ('&FUNCTON' NE 'GEN').RQOK                                    93150000
      AIF (&UCBF(&NULLIX) EQ 0).RQOK                                    93200000
      MNOTE  12,'REQUIRED KEYWORD UCB MISSING'                          93250000
.RQOK ANOP                                                              93300000
.*********************************************************************  93350000
.*     CHECK FOR MUTUALLY  EXCLUSIVE KEYWORDS                        *  93400000
.*********************************************************************  93450000
   AIF ( NOT (&UCBF(&NULLIX) EQ 0 AND &UCBLF(&NULLIX) EQ 0)).NULLSVR    93500000
      MNOTE  12,'MUTUALLY  EXCLUSIVE KEYWORDS UCB AND UCBL SPECIFIED'   93550000
.NULLSVR ANOP                                                           93600000
       AIF ( NOT (&TESTF(&NULLIX) EQ 0 AND '&MF(1)' EQ 'L')).OKKTF3     93650000
      MNOTE  12,'TEST KEYWORD IS MUTUALLY EXCLUSIVE WITH MF=L'          93700000
.OKKTF3 ANOP                                                            93750000
         AIF (NOT (&UCBLF(&NULLIX) EQ 0 AND '&TEST' EQ 'YES')).OKKTF2   93800000
      MNOTE  12,'TEST=YES IS MUTUALLY EXCLUSIVE WITH UCBL KEYWORD'      93850000
.OKKTF2  ANOP                                                           93900000
         AGO  .KEYCMP                                                   93950000
.*                                                                      93954500
.*###################################################################*  93959000
.*###################################################################*  93963500
.*#                                                                 #*  93968000
.*#                  REGCHK INNER MACRO ROUTINE                     #*  93972500
.*#                                                                 #*  93977000
.*#  IF THIS FUNCTION OF THIS MACRO IS INVOKED IT IS ASSUMED THAT   #*  93981500
.*#  THE &REGIX FLAG BIT OF THE PARAMETER IS EQUAL TO ONE (ON).     #*  93986000
.*###################################################################*  93990500
.*###################################################################*  93995000
.REGCHK  ANOP                                                           94000000
.*                                                                      94050000
.*       *---------------------------------------------------*          94100000
.*       * CHECK FOR MF=L WHEN NO REG IS VALID               *          94150000
.*       *---------------------------------------------------*          94200000
        AIF ('&SYSLIST(3)' EQ 'L').REGBAD                               94400000
.*                                                                      94442800
.*       *---------------------------------------------------*          94485600
.*       * CHECK FOR REG 13, 14, OR 15                       *          94528400
.*       *---------------------------------------------------*          94571200
         AIF ('&SYSLIST(2,4)' NE '(13)' AND                            C94614000
               '&SYSLIST(2,4)' NE '(14)' AND                           C94656800
               '&SYSLIST(2,4)' NE '(15)').REGOK1                        94700000
         AGO   .REGBAD                                                  94750000
.REGOK1  ANOP                                                           94800000
.*                                                                      94840000
.*       *---------------------------------------------------*          94880000
.*       * IS IT ZERO AND IS ZERO VALID                      *          94920000
.*       *---------------------------------------------------*          94960000
     AIF ('&SYSLIST(2,4)' EQ '(0)' AND &SYSLIST(2,5) EQ 1).REGOK2       95000000
.*                                                                      95040000
.*       *---------------------------------------------------*          95080000
.*       * IS IT ONE AND IS ONE VALID                        *          95120000
.*       *---------------------------------------------------*          95160000
     AIF ('&SYSLIST(2,4)' EQ '(1)' AND &SYSLIST(2,6) EQ 1).REGOK2       95200000
.*                                                                      95240000
.*       *---------------------------------------------------*          95280000
.*       * IS IT NOT ONE OR ZERO AND IS A REG (2-12) VALID   *          95320000
.*       *---------------------------------------------------*          95360000
     AIF (&SYSLIST(2,3) EQ 0   AND &SYSLIST(2,7) EQ 1).REGOK2           95400000
.*                                                                      95440000
.*       *---------------------------------------------------*          95480000
.*       * NO FLAG IT AS ERROR                               *          95520000
.*       *---------------------------------------------------*          95560000
         AGO   .REGBAD                                                  95600000
.*                                                                      95625000
.*###################################################################*  95650000
.*###################################################################*  95675000
.*#                                                                 #*  95700000
.*#                  RXCHK INNER MACRO ROUTINE                      #*  95725000
.*#                                                                 #*  95750000
.*#  THIS ROUTINE IS INVOKED IF THE KEYWORD IS OF THE RX FORMAT     #*  95775000
.*###################################################################*  95800000
.*###################################################################*  95825000
.RXCHK   ANOP                                                           95850000
.*                                                                      95891600
.*       *---------------------------------------------------*          95933200
.*       * VERIFY THAT THIS IS NOT A LIST FORM OF MACRO      *          95974800
.*       * RX FORM IS NEVER VALID WITH MF=L.                 *          96016400
.*       *---------------------------------------------------*          96058000
         AIF ('&SYSLIST(2,3)' EQ 'L').REGBAD                            96100000
.*                                                                      96140000
.*       *---------------------------------------------------*          96180000
.*       * VERIFY THAT RX IS VALID FOR THIS MACRO            *          96220000
.*       *---------------------------------------------------*          96260000
         AIF (&SYSLIST(2,5) EQ 0).REGBAD                                96300000
         AGO .REGOK2                                                    96350000
.*                                                                      96372700
.*###################################################################*  96395400
.*###################################################################*  96418100
.*#                                                                 #*  96440800
.*#                  CHRST INNER MACRO ROUTINE                      #*  96463500
.*#                                                                 #*  96486200
.*#   THIS ROUTINE DETERMINES IF THE VALUE OF A PASSED IN STRING    #*  96508900
.*#   IS EQUAL TO ONE OF A LIST OF PASSED IN VALUES                 #*  96531600
.*###################################################################*  96554300
.*###################################################################*  96577000
.CHRST   ANOP                                                           96600000
.*                                                                      96650000
.*       *---------------------------------------------------*          96700000
.*       * DEFINE A LOOP VARIABLE AND SET IT                 *          96750000
.*       *---------------------------------------------------*          96800000
&J       SETA    1                                                      96850000
.CSLUUP  ANOP                                                           96900000
.*                                                                      96940000
.*       *---------------------------------------------------*          96980000
.*       * HAVE WE RUN OUT OF VALID STRINGS                  *          97020000
.*       *---------------------------------------------------*          97060000
         AIF ('&SYSLIST(3,&J)' EQ '').REGBAD                            97100000
.*                                                                      97133300
.*       *---------------------------------------------------*          97166600
.*       * DO WE HAVE A VALID STRING YET                     *          97199900
.*       *---------------------------------------------------*          97233200
.*                                                                      97266500
         AIF ('&SYSLIST(3,&J)' EQ  '&SYSLIST(2,4)').REGOK2              97300000
&J       SETA    &J+1                                                   97350000
.*                                                                      97390000
.*       *---------------------------------------------------*          97430000
.*       * GO LOOK AT NEXT  STRING                           *          97470000
.*       *---------------------------------------------------*          97510000
         AGO   .CSLUUP                                                  97550000
.REGBAD  ANOP                                                           97600000
         LCLC  &M2                                                      97650000
         AIF   ('&SYSLIST(2,4)'(1,1) NE '''' OR                        C97700000
               '&SYSLIST(2,4)'(K'&SYSLIST(2,4),1) NE '''').NOLITZ       97750000
&M2      SETC    ''''.'&SYSLIST(2,4)'.''''                              97800000
         AGO    .YESLIT                                                 97850000
.NOLITZ  ANOP                                                           97900000
&M2      SETC   '&SYSLIST(2,4)'                                         97950000
.YESLIT  ANOP                                                           98000000
&M2      SETC  ''''.'&M2'.' INVALID FOR '                               98050000
&M2      SETC   '&M2'.'&SYSLIST(2,2)'.' KEYWORD'''                      98100000
      MNOTE  12,&M2                                                     98150000
.REGOK2  ANOP                                                           98200000
         MEXIT                                                          98250000
.*                                                                      98254500
.*###################################################################*  98259000
.*###################################################################*  98263500
.*#                                                                 #*  98268000
.*#                 LENCHK INNER MACRO ROUTINE                      #*  98272500
.*#                                                                 #*  98277000
.*#   THIS ROUTINE ENSURES THE LENGTH OF A PASSED IN STRING DOES    #*  98281500
.*#   NOT EXCEED A PASSED IN VALUE                                  #*  98286000
.*###################################################################*  98290500
.*###################################################################*  98295000
.LENCHK  ANOP                                                           98300000
.*                                                                      98318700
.*       *---------------------------------------------------*          98337400
.*       * IF NOT A LITERAL OR LENGTH VALID EXIT             *          98356100
.*       *---------------------------------------------------*     @02a 98374800
          AIF (&SYSLIST(2,4) EQ 0 OR                                   C98393500
               &SYSLIST(2,3) LE &SYSLIST(2,5)).LENT1                    98412200
.*                                                                      98430900
&M2      SETC    ''''.'&SYSLIST(2,2)'                                   98450000
&M2      SETC   '&M2'.' LENGTH OF '.'&SYSLIST(2,3)'.' INVALID'''        98500000
      MNOTE  12,&M2                                                     98550000
.LENT1   ANOP                                                           98600000
         MEXIT                                                          98650000
.*                                                                      98650100
.*###################################################################*  98650200
.*###################################################################*  98650300
.*#                                                                 #*  98650400
.*#                 CHKFMT INNER MACRO ROUTINE                      #*  98650500
.*#                                                                 #*  98650600
.*#   This routine ensures the format specified for the passed in   #*  98650700
.*#   keyword is, in fact, supported.  Added with MTL support.  @02a#*  98650800
.*###################################################################*  98650900
.*###################################################################*  98651000
.FMTCHK  ANOP                                                           98651100
.*                                                                      98651200
         LCLA  &LPCTR,&FLGCTR               Local counters              98651300
         LCLC  &FMTTYP,&MSG                 Used in building errmsg     98651400
.*                                                                      98651500
.*       *---------------------------------------------------*          98651600
.*       * This subroutine validates the format of the       *          98651700
.*       * operand specified for the keyword.                *          98651800
.*       *---------------------------------------------------*          98651900
&FLGCTR  SETA 0                                                         98652000
&LPCTR   SETA 1                                                         98652100
.FLOOP   ANOP                                                           98652200
.*                                                                      98652300
.*       *---------------------------------------------------*          98652400
.*       * Determine which keyword we're working with and    *          98652500
.*       * check its related flag settings.  Count them up.  *          98652600
.*       *---------------------------------------------------*          98652700
         AIF ('&SYSLIST(2,2)' NE 'DCB').NOTDCB                          98652800
         AIF (&DCBF(&LPCTR) NE 1).INCREM                                98652900
&FLGCTR  SETA &FLGCTR+1                                                 98653000
         AGO  .INCREM                                                   98653100
.NOTDCB  ANOP                                                           98653200
         AIF ('&SYSLIST(2,2)' NE 'DISP').NOTDISP                        98653300
         AIF (&DISPF(&LPCTR) NE 1).INCREM                               98653400
&FLGCTR  SETA &FLGCTR+1                                                 98653500
         AGO  .INCREM                                                   98653600
.NOTDISP ANOP                                                           98653700
         AIF ('&SYSLIST(2,2)' NE 'FLASH').NOTFLASH                      98653800
         AIF (&FLASHF(&LPCTR) NE 1).INCREM                              98653900
&FLGCTR  SETA &FLGCTR+1                                                 98654000
         AGO  .INCREM                                                   98654100
.NOTFLASH ANOP                                                          98654200
         AIF ('&SYSLIST(2,2)' NE 'FORCE').NOTFORCE                      98654300
         AIF (&FORCEF(&LPCTR) NE 1).INCREM                              98654400
&FLGCTR  SETA &FLGCTR+1                                                 98654500
         AGO  .INCREM                                                   98654600
.NOTFORCE ANOP                                                          98654700
         AIF ('&SYSLIST(2,2)' NE 'INDEX').NOTINDEX                      98654800
         AIF (&INDEXF(&LPCTR) NE 1).INCREM                              98654900
&FLGCTR  SETA &FLGCTR+1                                                 98655000
         AGO  .INCREM                                                   98655100
.NOTINDEX ANOP                                                          98655200
         AIF ('&SYSLIST(2,2)' NE 'LABEL').NOTLABEL                      98655300
         AIF (&LABELF(&LPCTR) NE 1).INCREM                              98655400
&FLGCTR  SETA &FLGCTR+1                                                 98655500
         AGO  .INCREM                                                   98655600
.NOTLABEL ANOP                                                          98655700
         AIF ('&SYSLIST(2,2)' NE 'MEDT').NOTMEDT                        98655800
         AIF (&MEDTF(&LPCTR) NE 1).INCREM                               98655900
&FLGCTR  SETA &FLGCTR+1                                                 98656000
         AGO  .INCREM                                                   98656100
.NOTMEDT  ANOP                                                          98656200
         AIF ('&SYSLIST(2,2)' NE 'MF').NOTMF                            98656300
         AIF (&MFE(&LPCTR) NE 1).INCREM                                 98656400
&FLGCTR  SETA &FLGCTR+1                                                 98656500
         AGO  .INCREM                                                   98656600
.NOTMF    ANOP                                                          98656700
         AIF ('&SYSLIST(2,2)' NE 'MLABEL').NOTMLABEL                    98656800
         AIF (&MLABELF(&LPCTR) NE 1).INCREM                             98656900
&FLGCTR  SETA &FLGCTR+1                                                 98657000
         AGO  .INCREM                                                   98657100
.NOTMLABEL ANOP                                                         98657200
         AIF ('&SYSLIST(2,2)' NE 'MSER').NOTMSER                        98657300
         AIF (&MSERF(&LPCTR) NE 1).INCREM                               98657400
&FLGCTR  SETA &FLGCTR+1                                                 98657500
         AGO  .INCREM                                                   98657600
.NOTMSER   ANOP                                                         98657700
         AIF ('&SYSLIST(2,2)' NE 'SER').NOTSER                          98657800
         AIF (&SERF(&LPCTR) NE 1).INCREM                                98657900
&FLGCTR  SETA &FLGCTR+1                                                 98658000
         AGO  .INCREM                                                   98658100
.NOTSER    ANOP                                                         98658200
         AIF ('&SYSLIST(2,2)' NE 'TEST').NOTTEST                        98658300
         AIF (&TESTF(&LPCTR) NE 1).INCREM                               98658400
&FLGCTR  SETA &FLGCTR+1                                                 98658500
         AGO  .INCREM                                                   98658600
.NOTTEST   ANOP                                                         98658700
         AIF ('&SYSLIST(2,2)' NE 'TXT').NOTTXT                          98658800
         AIF (&TXTF(&LPCTR) NE 1).INCREM                                98658900
&FLGCTR  SETA &FLGCTR+1                                                 98659000
         AGO  .INCREM                                                   98659100
.NOTTXT    ANOP                                                         98659200
         AIF ('&SYSLIST(2,2)' NE 'TXT2').NOTTXT2                        98659300
         AIF (&TXT2F(&LPCTR) NE 1).INCREM                               98659400
&FLGCTR  SETA &FLGCTR+1                                                 98659500
         AGO  .INCREM                                                   98659600
.NOTTXT2   ANOP                                                         98659700
         AIF ('&SYSLIST(2,2)' NE 'UCB').NOTUCB                          98659800
         AIF (&UCBF(&LPCTR) NE 1).INCREM                                98659900
&FLGCTR  SETA &FLGCTR+1                                                 98660000
         AGO  .INCREM                                                   98660100
.NOTUCB    ANOP                                                         98660200
         AIF ('&SYSLIST(2,2)' NE 'UCBL').NOTUCBL                        98660300
         AIF (&UCBLF(&LPCTR) NE 1).INCREM                               98660400
&FLGCTR  SETA &FLGCTR+1                                                 98660500
         AGO  .INCREM                                                   98660600
.NOTUCBL   ANOP                                                         98660700
         AIF ('&SYSLIST(2,2)' NE 'VOL').NOTVOL                          98660800
         AIF (&VOLF(&LPCTR) NE 1).INCREM                                98660900
&FLGCTR  SETA &FLGCTR+1                                                 98661000
         AGO  .INCREM                                                   98661100
.NOTVOL    ANOP                                                         98661200
         AIF ('&SYSLIST(2,2)' NE 'WAIT').NOTWAIT                        98661300
         AIF (&WAITF(&LPCTR) NE 1).INCREM                               98661400
&FLGCTR  SETA &FLGCTR+1                                                 98661500
         AGO  .INCREM                                                   98661600
.NOTWAIT   ANOP                                                         98661700
.*                                                                      98661800
.INCREM    ANOP                                                         98661900
&LPCTR    SETA &LPCTR+1                     Increment loop counter      98662000
         AIF (&LPCTR LE &HIGHIX).FLOOP                                  98662100
.*                                                                      98662200
.*       *---------------------------------------------------*          98662300
.*       * The flags that are set in the 'F' array for the   *          98662400
.*       * current keyword have been counted up.  There can  *          98662500
.*       * be only 1 flag set, with the exception that if    *          98662600
.*       * REG01 is set, the REG is also set.  All other     *          98662700
.*       * combinations are an ERROR.                        *          98662800
.*       *                                                   *          98662900
.*       * We check here for the number of flags set and     *          98663000
.*       * respond accordingly.                              *          98663100
.*       *                                                   *          98663200
.*       * If 2 flags are set we branch to the code that     *          98663300
.*       * ensures that they are REG and REG01.  If they     *          98663400
.*       * REG and REG01 we go to the code that determines   *          98663500
.*       * whether they are supported for the keyword.       *          98663600
.*       *                                                   *          98663700
.*       * If only 1 flag is set we go directly to the code  *          98663800
.*       * that determines whether the format is supported   *          98663900
.*       * for the keyword.                                  *          98664000
.*       *                                                   *          98664100
.*       * All other settings are an error.                  *          98664200
.*       *---------------------------------------------------*          98664300
         AIF (&FLGCTR EQ 2).CHK2FLGS                                    98664400
         AIF (&FLGCTR EQ 1).CHK1FLGS                                    98664500
.*                                                                      98664600
.CHK2FLGS ANOP                                                          98664700
.*       *---------------------------------------------------*          98664800
.*       * 2 flags are set, better be REG and REG01 or ERROR.*          98664900
.*       *                                                   *          98665000
.*       * Check for debug request first                     *          98665100
.*       *---------------------------------------------------*          98665200
         AIF (&SYSLIST(2,3) EQ 1).NODEBUGCK2F                           98665300
.NODEBUGCK2F ANOP                                                       98665400
.*                                                                      98665500
         AIF ('&SYSLIST(2,2)' NE 'DCB').NOTDCB3                         98665600
         AIF (&DCBF(&REGIX) EQ 1 AND                                   C98665700
               &DCBF(&REG01IX) EQ 1).CHK1FLGS                           98665800
         AGO .INVLCOMB                                                  98665900
.NOTDCB3 ANOP                                                           98666000
         AIF ('&SYSLIST(2,2)' NE 'DISP').NOTDISP3                       98666100
         AIF (&DISPF(&REGIX) EQ 1 AND                                  C98666200
               &DISPF(&REG01IX) EQ 1).CHK1FLGS                          98666300
         AGO .INVLCOMB                                                  98666400
.NOTDISP3 ANOP                                                          98666500
         AIF ('&SYSLIST(2,2)' NE 'FLASH').NOTFLASH3                     98666600
         AIF (&FLASHF(&REGIX) EQ 1 AND                                 C98666700
               &FLASHF(&REG01IX) EQ 1).CHK1FLGS                         98666800
         AGO .INVLCOMB                                                  98666900
.NOTFLASH3 ANOP                                                         98667000
         AIF ('&SYSLIST(2,2)' NE 'FORCE').NOTFORCE3                     98667100
         AIF (&FORCEF(&REGIX) EQ 1 AND                                 C98667200
               &FORCEF(&REG01IX) EQ 1).CHK1FLGS                         98667300
         AGO .INVLCOMB                                                  98667400
.NOTFORCE3 ANOP                                                         98667500
         AIF ('&SYSLIST(2,2)' NE 'INDEX').NOTINDEX3                     98667600
         AIF (&INDEXF(&REGIX) EQ 1 AND                                 C98667700
               &INDEXF(&REG01IX) EQ 1).CHK1FLGS                         98667800
         AGO .INVLCOMB                                                  98667900
.NOTINDEX3 ANOP                                                         98668000
         AIF ('&SYSLIST(2,2)' NE 'LABEL').NOTLABEL3                     98668100
         AIF (&LABELF(&REGIX) EQ 1 AND                                 C98668200
               &LABELF(&REG01IX) EQ 1).CHK1FLGS                         98668300
         AGO .INVLCOMB                                                  98668400
.NOTLABEL3 ANOP                                                         98668500
         AIF ('&SYSLIST(2,2)' NE 'MEDT').NOTMEDT3                       98668600
         AIF (&MEDTF(&REGIX) EQ 1 AND                                  C98668700
               &MEDTF(&REG01IX) EQ 1).CHK1FLGS                          98668800
         AGO .INVLCOMB                                                  98668900
.NOTMEDT3  ANOP                                                         98669000
         AIF ('&SYSLIST(2,2)' NE 'MF').NOTMF3                           98669100
         AIF (&MFE(&REGIX) EQ 1 AND                                    C98669200
               &MFE(&REG01IX) EQ 1).CHK1FLGS                            98669300
         AGO .INVLCOMB                                                  98669400
.NOTMF3    ANOP                                                         98669500
         AIF ('&SYSLIST(2,2)' NE 'MLABEL').NOTMLABEL3                   98669600
         AIF (&MLABELF(&REGIX) EQ 1 AND                                C98669700
               &MLABELF(&REG01IX) EQ 1).CHK1FLGS                        98669800
         AGO .INVLCOMB                                                  98669900
.NOTMLABEL3 ANOP                                                        98670000
         AIF ('&SYSLIST(2,2)' NE 'MSER').NOTMSER3                       98670100
         AIF (&MSERF(&REGIX) EQ 1 AND                                  C98670200
               &MSERF(&REG01IX) EQ 1).CHK1FLGS                          98670300
         AGO .INVLCOMB                                                  98670400
.NOTMSER3   ANOP                                                        98670500
         AIF ('&SYSLIST(2,2)' NE 'SER').NOTSER3                         98670600
         AIF (&SERF(&REGIX) EQ 1 AND                                   C98670700
               &SERF(&REG01IX) EQ 1).CHK1FLGS                           98670800
         AGO .INVLCOMB                                                  98670900
.NOTSER3    ANOP                                                        98671000
         AIF ('&SYSLIST(2,2)' NE 'TEST').NOTTEST3                       98671100
         AIF (&TESTF(&REGIX) EQ 1 AND                                  C98671200
               &TESTF(&REG01IX) EQ 1).CHK1FLGS                          98671300
         AGO .INVLCOMB                                                  98671400
.NOTTEST3   ANOP                                                        98671500
         AIF ('&SYSLIST(2,2)' NE 'TXT').NOTTXT3                         98671600
         AIF (&TXTF(&REGIX) EQ 1 AND                                   C98671700
               &TXTF(&REG01IX) EQ 1).CHK1FLGS                           98671800
         AGO .INVLCOMB                                                  98671900
.NOTTXT3   ANOP                                                         98672000
         AIF ('&SYSLIST(2,2)' NE 'TXT2').NOTTXT23                       98672100
         AIF (&TXT2F(&REGIX) EQ 1 AND                                  C98672200
               &TXT2F(&REG01IX) EQ 1).CHK1FLGS                          98672300
         AGO .INVLCOMB                                                  98672400
.NOTTXT23  ANOP                                                         98672500
         AIF ('&SYSLIST(2,2)' NE 'UCB').NOTUCB3                         98672600
         AIF (&UCBF(&REGIX) EQ 1 AND                                   C98672700
               &UCBF(&REG01IX) EQ 1).CHK1FLGS                           98672800
         AGO .INVLCOMB                                                  98672900
.NOTUCB3   ANOP                                                         98673000
         AIF ('&SYSLIST(2,2)' NE 'UCBL').NOTUCBL3                       98673100
         AIF (&UCBLF(&REGIX) EQ 1 AND                                  C98673200
               &UCBLF(&REG01IX) EQ 1).CHK1FLGS                          98673300
         AGO .INVLCOMB                                                  98673400
.NOTUCBL3  ANOP                                                         98673500
         AIF ('&SYSLIST(2,2)' NE 'VOL').NOTVOL3                         98673600
         AIF (&VOLF(&REGIX) EQ 1 AND                                   C98673700
               &VOLF(&REG01IX) EQ 1).CHK1FLGS                           98673800
         AGO .INVLCOMB                                                  98673900
.NOTVOL3   ANOP                                                         98674000
         AIF ('&SYSLIST(2,2)' NE 'WAIT').NOTWAIT3                       98674100
         AIF (&WAITF(&REGIX) EQ 1 AND                                  C98674200
               &WAITF(&REG01IX) EQ 1).CHK1FLGS                          98674300
         AGO .INVLCOMB                                                  98674400
.NOTWAIT3  ANOP                                                         98674500
.*                                                                      98674600
.*                                                                      98674700
.CHK1FLGS  ANOP                                                         98674800
.*       *---------------------------------------------------*          98674900
.*       * Determine which keyword we're working with and    *          98675000
.*       * check what was set in the macro invocation with   *          98675100
.*       * what is allowed for the keyword.  Any unsupported *          98675200
.*       * flags will result in an MNOTE 12.                 *          98675300
.*       *---------------------------------------------------*          98675400
&LPCTR   SETA 1                                                         98675500
.FLOOP2  ANOP                                                           98675600
.*       *---------------------------------------------------*          98675700
.*       * Set the format type in case we need to build an   *          98675800
.*       * error message.                                    *          98675900
.*       *---------------------------------------------------*          98676000
         AIF  (&LPCTR NE &NULLIX).NOTNULLIX                             98676100
&FMTTYP  SETC ' NULL '                                                  98676200
         AGO  .CONTCHK1                                                 98676300
.*                                                                      98676400
.NOTNULLIX  ANOP                                                        98676500
         AIF  (&LPCTR NE &LITIX).NOTLITIX                               98676600
&FMTTYP  SETC ' QUOTED LITERAL '                                        98676700
         AGO  .CONTCHK1                                                 98676800
.*                                                                      98676900
.NOTLITIX   ANOP                                                        98677000
         AIF  (&LPCTR NE &REGIX).NOTREGIX                               98677100
&FMTTYP  SETC ' REGISTER (2-12) '                                       98677200
         AGO  .CONTCHK1                                                 98677300
.*                                                                      98677400
.NOTREGIX   ANOP                                                        98677500
         AIF  (&LPCTR NE &REG01IX).NOTREG01IX                           98677600
&FMTTYP  SETC ' REGISTER (0 OR 1) '                                     98677700
         AGO  .CONTCHK1                                                 98677800
.*                                                                      98677900
.NOTREG01IX   ANOP                                                      98678000
         AIF  (&LPCTR NE &ADCONIX).NOTADCONIX                           98678100
&FMTTYP  SETC ' ADCON '                                                 98678200
         AGO  .CONTCHK1                                                 98678300
.*                                                                      98678400
.NOTADCONIX   ANOP                                                      98678500
         AIF  (&LPCTR NE &RXFMTIX).NOTRXFMTIX                           98678600
&FMTTYP  SETC ' RX '                                                    98678700
         AGO  .CONTCHK1                                                 98678800
.*                                                                      98678900
.NOTRXFMTIX   ANOP                                                      98679000
         AIF  (&LPCTR NE &UNQUOTEIX).NOTUNQUOTEIX                       98679100
&FMTTYP  SETC ' UNQUOTED LITERAL '                                      98679200
         AGO  .CONTCHK1                                                 98679300
.*                                                                      98679400
.NOTUNQUOTEIX ANOP                                                      98679500
.*                                                                      98679600
.CONTCHK1  ANOP                                                         98679700
         AIF ('&SYSLIST(2,2)' NE 'DCB').NOTDCB2                         98679800
         AIF (&DCBF(&LPCTR) EQ 1 AND                                   C98679900
               '&FMT(&DCBIX)'(&LPCTR,1) NE '1').UNSUPFMT                98680000
         AGO  .INCREM2                                                  98680100
.NOTDCB2 ANOP                                                           98680200
         AIF ('&SYSLIST(2,2)' NE 'DISP').NOTDISP2                       98680300
         AIF (&DISPF(&LPCTR) EQ 1 AND                                  C98680400
               '&FMT(&DISPIX)'(&LPCTR,1) NE '1').UNSUPFMT               98680500
         AGO  .INCREM2                                                  98680600
.NOTDISP2 ANOP                                                          98680700
         AIF ('&SYSLIST(2,2)' NE 'FLASH').NOTFLASH2                     98680800
         AIF (&FLASHF(&LPCTR) EQ 1 AND                                 C98680900
               '&FMT(&FLASHIX)'(&LPCTR,1) NE '1').UNSUPFMT              98681000
         AGO  .INCREM2                                                  98681100
.NOTFLASH2 ANOP                                                         98681200
         AIF ('&SYSLIST(2,2)' NE 'FORCE').NOTFORCE2                     98681300
         AIF (&FORCEF(&LPCTR) EQ 1 AND                                 C98681400
               '&FMT(&FORCEIX)'(&LPCTR,1) NE '1').UNSUPFMT              98681500
         AGO  .INCREM2                                                  98681600
.NOTFORCE2 ANOP                                                         98681700
         AIF ('&SYSLIST(2,2)' NE 'INDEX').NOTINDEX2                     98681800
         AIF (&INDEXF(&LPCTR) EQ 1 AND                                 C98681900
               '&FMT(&INDEXIX)'(&LPCTR,1) NE '1').UNSUPFMT              98682000
         AGO  .INCREM2                                                  98682100
.NOTINDEX2 ANOP                                                         98682200
         AIF ('&SYSLIST(2,2)' NE 'LABEL').NOTLABEL2                     98682300
         AIF (&LABELF(&LPCTR) EQ 1 AND                                 C98682400
               '&FMT(&LABELIX)'(&LPCTR,1) NE '1').UNSUPFMT              98682500
         AGO  .INCREM2                                                  98682600
.NOTLABEL2 ANOP                                                         98682700
         AIF ('&SYSLIST(2,2)' NE 'MEDT').NOTMEDT2                       98682800
         AIF (&MEDTF(&LPCTR) EQ 1 AND                                  C98682900
               '&FMT(&MEDTIX)'(&LPCTR,1) NE '1').UNSUPFMT               98683000
         AGO  .INCREM2                                                  98683100
.NOTMEDT2  ANOP                                                         98683200
         AIF ('&SYSLIST(2,2)' NE 'MF').NOTMF2                           98683300
         AIF (&MFE(&LPCTR) EQ 1 AND                                    C98683400
               '&FMT(&MFIX)'(&LPCTR,1) NE '1').UNSUPFMT                 98683500
         AGO  .INCREM2                                                  98683600
.NOTMF2    ANOP                                                         98683700
         AIF ('&SYSLIST(2,2)' NE 'MLABEL').NOTMLABEL2                   98683800
         AIF (&MLABELF(&LPCTR) EQ 1 AND                                C98683900
               '&FMT(&MLABELIX)'(&LPCTR,1) NE '1').UNSUPFMT             98684000
         AGO  .INCREM2                                                  98684100
.NOTMLABEL2 ANOP                                                        98684200
         AIF ('&SYSLIST(2,2)' NE 'MSER').NOTMSER2                       98684300
         AIF (&MSERF(&LPCTR) EQ 1 AND                                  C98684400
               '&FMT(&MSERIX)'(&LPCTR,1) NE '1').UNSUPFMT               98684500
         AGO  .INCREM2                                                  98684600
.NOTMSER2   ANOP                                                        98684700
         AIF ('&SYSLIST(2,2)' NE 'SER').NOTSER2                         98684800
         AIF (&SERF(&LPCTR) EQ 1 AND                                   C98684900
               '&FMT(&SERIX)'(&LPCTR,1) NE '1').UNSUPFMT                98685000
         AGO  .INCREM2                                                  98685100
.NOTSER2    ANOP                                                        98685200
         AIF ('&SYSLIST(2,2)' NE 'TEST').NOTTEST2                       98685300
         AIF (&TESTF(&LPCTR) EQ 1 AND                                  C98685400
               '&FMT(&TESTIX)'(&LPCTR,1) NE '1').UNSUPFMT               98685500
         AGO  .INCREM2                                                  98685600
.NOTTEST2   ANOP                                                        98685700
         AIF ('&SYSLIST(2,2)' NE 'TXT').NOTTXT22                        98685800
         AIF (&TXTF(&LPCTR) EQ 1 AND                                   C98685900
               '&FMT(&TXTIX)'(&LPCTR,1) NE '1').UNSUPFMT                98686000
         AGO  .INCREM2                                                  98686100
.NOTTXT22  ANOP                                                         98686200
         AIF ('&SYSLIST(2,2)' NE 'TXT2').NOTTXT2X                       98686300
         AIF (&TXT2F(&LPCTR) EQ 1 AND                                  C98686400
               '&FMT(&TXT2IX)'(&LPCTR,1) NE '1').UNSUPFMT               98686500
         AGO  .INCREM2                                                  98686600
.NOTTXT2X  ANOP                                                         98686700
         AIF ('&SYSLIST(2,2)' NE 'UCB').NOTUCB2                         98686800
         AIF (&UCBF(&LPCTR) EQ 1 AND                                   C98686900
               '&FMT(&UCBIX)'(&LPCTR,1) NE '1').UNSUPFMT                98687000
         AGO  .INCREM2                                                  98687100
.NOTUCB2   ANOP                                                         98687200
         AIF ('&SYSLIST(2,2)' NE 'UCBL').NOTUCBL2                       98687300
         AIF (&UCBLF(&LPCTR) EQ 1 AND                                  C98687400
               '&FMT(&UCBLIX)'(&LPCTR,1) NE '1').UNSUPFMT               98687500
         AGO  .INCREM2                                                  98687600
.NOTUCBL2  ANOP                                                         98687700
         AIF ('&SYSLIST(2,2)' NE 'VOL').NOTVOL2                         98687800
         AIF (&VOLF(&LPCTR) EQ 1 AND                                   C98687900
               '&FMT(&VOLIX)'(&LPCTR,1) NE '1').UNSUPFMT                98688000
         AGO  .INCREM2                                                  98688100
.NOTVOL2   ANOP                                                         98688200
         AIF ('&SYSLIST(2,2)' NE 'WAIT').NOTWAIT2                       98688300
         AIF (&WAITF(&LPCTR) EQ 1 AND                                  C98688400
               '&FMT(&WAITIX)'(&LPCTR,1) NE '1').UNSUPFMT               98688500
         AGO  .INCREM2                                                  98688600
.NOTWAIT2  ANOP                                                         98688700
.*                                                                      98688800
.INCREM2   ANOP                                                         98688900
&LPCTR    SETA &LPCTR+1                     Increment loop counter      98689000
         AIF (&LPCTR LE &HIGHIX).FLOOP2                                 98689100
.*                                                                      98689200
         AGO  .FMTCHKEXIT                                               98689300
.*                                                                      98689400
.*       *---------------------------------------------------*          98689500
.*       * Issue invalid flag combinations message.          *          98689600
.*       *---------------------------------------------------*          98689700
.INVLCOMB ANOP                                                          98689800
&MSG     SETC  'INVALID FLAGS COMBINATION PASSED TO CHKFMT RTN'         98689900
&MSG     SETC  '&MSG'.' FOR &SYSLIST(2,2) KEYWORD'                      98690000
.*                                                                      98690100
         MNOTE 12,'&MSG'                                                98690200
         AGO  .FMTCHKEXIT                                               98690300
.*                                                                      98690400
.*       *---------------------------------------------------*          98690500
.*       * Issue unsupported format message.                 *          98690600
.*       *---------------------------------------------------*          98690700
.UNSUPFMT  ANOP                                                         98690800
&MSG     SETC  'FORMAT OF'.'&FMTTYP'.'NOT SUPPORTED FOR '               98690900
&MSG     SETC  '&MSG'.'&SYSLIST(2,2) KEYWORD'                           98691000
         MNOTE 12,'&MSG'                                                98691100
         AGO  .FMTCHKEXIT                                               98691200
.*                                                                      98691300
.FMTCHKEXIT  ANOP                                                       98691400
         MEXIT                                                          98691500
.*                                                                      98691600
         MEND                                                           98700000
