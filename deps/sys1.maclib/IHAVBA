*                                                                       00001000
* %DCL IHAVBA_INCLUDED CHAR EXT;                                        00002000
* %DEACTIVATE IHAVBA_INCLUDED;                                          00003000
* %IF IHAVBA_INCLUDED = '' %THEN                                        00004000
* %DO;                                                                  00005000
*/* Macro made bi-lingual on 23123. CBGEN compile date 23032         */ 00006000
*% /*                                                                   00007000
         MACRO                                                          00008000
         IHAVBA &DSECT=YES,&LIST=YES,&TITLE=YES,&VBA=YES,              *00009000
               &VB_CertExtract=COND,&VB_AuditArea=COND,                *00010000
               &VB_AA_DSNE=COND,&VB_AA_DSNE_ModE=COND                   00011000
                      GBLC  &IHAVBA_INCLUDED                            00012000
                      GBLC  &ZCBPRINT                                   00013000
&IHAVBA_INCLUDED      SETC  'YES'                                       00014000
                      AIF   ('&LIST' EQ 'NONE').P0                      00015000
                      AIF   ('&TITLE' EQ 'NO').P5                       00016000
 TITLE                'IHAVBA  - Validated Boot Area                   *00017000
                        '                                               00018000
.P5                   ANOP                                              00019000
**/ ;                                                                   00020000
*/* START OF SPECIFICATIONS ******************************************* 00021000
*                                                                       00022000
*  **PROPRIETARY_STATEMENT********************************************  00023000
***01* PROPRIETARY STATEMENT=                                        *  00024000
*                                                                    *  00025000
*                                                                    *  00026000
*   LICENSED MATERIALS - PROPERTY OF IBM                             *  00027000
*   5650-ZOS COPYRIGHT IBM CORP. 2022                                *  00028000
*                                                                    *  00029000
*   STATUS= HBB77D0                                                  *  00030000
*                                                                    *  00031000
*  **END_OF_PROPRIETARY_STATEMENT*************************************  00032000
*                                                                       00033000
*01* DESCRIPTIVE NAME:  Validated Boot Area                             00034000
*02*  ACRONYM:  VBA                                                     00035000
*                                                                       00036000
*01* MACRO NAME:  IHAVBA                                                00037000
*                                                                       00038000
*01* EXTERNAL CLASSIFICATION: PI                                        00039000
*01* END OF EXTERNAL CLASSIFICATION:                                    00040000
*                                                                       00041000
*01* DSECT NAME:                                                        00042000
*     VBA                                                               00043000
*     VB_CertExtract                                                    00044000
*     VB_AuditArea                                                      00045000
*     VB_AA_DSNE                                                        00046000
*     VB_AA_DSNE_ModE                                                   00047000
*                                                                       00048000
*01* COMPONENT:  Supervisor Control (SC1C5)                             00049000
*                                                                       00050000
*01* EYE-CATCHER:  NONE                                                 00051000
*                                                                       00052000
*01* STORAGE ATTRIBUTES:                                                00053000
*02*  SUBPOOL:  245                                                     00054000
*02*  KEY:  0                                                           00055000
*02*  RESIDENCY:  above 16M                                             00056000
*                                                                       00057000
*01* SIZE:                                                              00058000
*                VBA             -- X'0040' bytes                       00059000
*                VB_CertExtract  -- X'0140' bytes                       00060000
*                VB_AuditArea    -- X'0070' bytes                       00061000
*                VB_AA_DSNE      -- X'0070' bytes                       00062000
*                VB_AA_DSNE_ModE -- X'0100' bytes                       00063000
*                                                                       00064000
*01* CREATED BY:                                                        00065000
*     IEAIPL99 and various others                                       00066000
*                                                                       00067000
*01* POINTED TO BY:                                                     00068000
*     SVTVBAA (when not 0, and high bit is 0)                           00069000
*                                                                       00070000
*01* SERIALIZATION:                                                     00071000
*     None required                                                     00072000
*                                                                       00073000
*01* FUNCTION:                                                          00074000
*02* Maps the interface data relevant to validated boot                 00075000
*                                                                       00076000
*                                                                       00077000
*                                                                       00078000
*01* METHOD OF ACCESS:                                                  00079000
*02*  IHAVBA ,                                                          00080000
*                                                                       00081000
*02*  PL/X:                                                             00082000
*      %INCLUDE SYSLIB(IHAVBA)                                          00083000
*                                                                       00084000
*01* DELETED BY:  None                                                  00085000
*                                                                       00086000
*01* FREQUENCY:  Created during IPL/NIP                                 00087000
*                                                                       00088000
*01* DEPENDENCIES:  None                                                00089000
*                                                                       00090000
*01* DISTRIBUTION LIBRARY:  AMACLIB                                     00091000
*                                                                       00092000
*01* CHANGE ACTIVITY:                                                   00093000
*   $00=VBCBG     HBB77D0 230307 PD00XB: Validated Boot                 00094000
*   $01=OA62783   HBB77D0 230307 PD00XB: Validated Boot                 00095000
*                                                                       00096000
* END OF SPECIFICATIONS *********************************************/  00097000
*% /*                                                                   00098000
.P0                   ANOP                                              00099000
                      AIF   ('&ZCBPRINT' EQ 'NO').P1                    00100000
                      AIF   ('&LIST' EQ 'YES').P2                       00101000
.P1                   ANOP                                              00102000
                      PUSH  PRINT                                       00103000
                      PRINT OFF                                         00104000
.P2                   ANOP                                              00105000
                      AIF   ('&VBA' EQ 'NO').L0002                      00106000
                      AIF   ('&DSECT' EQ 'YES').L0003                   00107000
                      AIF   ('&VBA' NE 'YES').L0002                     00108000
.L0003                ANOP                                              00109000
*                                                                       00110000
*   Validated Boot Area                                                 00111000
*                                                                       00112000
*                                                                       00113000
                      AIF   ('&DSECT' EQ 'YES').L0004                   00114000
VBA                   DS    0D     SVTVBAA                              00115000
                      AGO   .L0005                                      00116000
.L0004                ANOP                                              00117000
VBA                   DSECT        SVTVBAA                              00118000
.L0005                ANOP                                              00119000
VBA_ID                DS    CL4                                         00120000
VBA_Flags             DS    B                                           00121000
*  Bit definitions:                                                     00122000
VBA_Enforce           EQU   X'80'                                       00123000
VBA_Audit             EQU   X'40'                                       00124000
VBA_Paging_Flags      DS    B                                           00125000
*  Bit definitions:                                                     00126000
VBA_PlpaPageDsSpec    EQU   X'80'  PLPA data set specified              00127000
VBA_SCMCannotHoldLPA  EQU   X'40'                                       00128000
                      DS    CL2    Use one of these bytes for          *00129000
                                   "version" if we ever expand VBA      00130000
VBA_AuditArea_Addr    DS    A                                           00131000
VBA_First_Good_CX_Addr DS   A                                           00132000
VBA_Num_Good_CX       DS    F                                           00133000
VBA_Num_Bad_CX        DS    F                                           00134000
VBA_First_Bad_CX_Addr DS    A                                           00135000
VBA_ID_Chars          EQU   C'VBA '                                     00136000
                      ORG   VBA+64                                      00137000
VBA_Len               EQU   *-VBA                                       00138000
.L0002                ANOP                                              00139000
                      AIF   ('&VB_CertExtract' EQ 'NO').L0006           00140000
                      AIF   ('&DSECT' EQ 'YES').L0007                   00141000
                      AIF   ('&VB_CertExtract' NE 'YES').L0006          00142000
VB_CertExtract        DS    0D                                          00143000
                      AGO   .L0008                                      00144000
.L0007                ANOP                                              00145000
VB_CertExtract        DSECT                                             00146000
.L0008                ANOP                                              00147000
VB_CX_ID              DS    CL4                                         00148000
VB_CX_NextAddr        DS    A                                           00149000
                      DS    CL4    For IBM use only                     00150000
VB_CX_NumSuccessfulUses DS  F                                           00151000
VB_CX_CertName        DS    CL64                                        00152000
VB_CX_CertFP          DS    CL32                                        00153000
VB_CX_KeyID           DS    CL20   Zeroes if bad key ID length          00154000
                      DS    CL2    For IBM use only                     00155000
VB_CX_Reason_Bad      DS    H                                           00156000
VB_CX_StartTime       DS    CL8    First 8 bytes of ETOD                00157000
VB_CX_ExpirationTime  DS    CL8    First 8 bytes of ETOD                00158000
                      DS    CL2    For IBM use only                     00159000
                      DS    CL6                                         00160000
VB_CX_X               DS    CL80   Zeroes if bad key                    00161000
VB_CX_Y               DS    CL80   Zeroes if bad key                    00162000
VB_CX_ID_Chars        EQU   C'VBCX'                                     00163000
VB_CX_Reason_NotStarted EQU 1                                           00164000
VB_CX_Reason_Expired  EQU   2                                           00165000
VB_CX_Reason_BadKey   EQU   3                                           00166000
VB_CX_Reason_BadKeyType EQU 4                                           00167000
VB_CX_Reason_BadKeyIDLen EQU 5                                          00168000
VB_CX_Reason_BadHashType EQU 6                                          00169000
VB_CX_Reason_BadHashLen EQU 7                                           00170000
*                                                                       00171000
*   Reasons for validation failure                                      00172000
*                                                                       00173000
*                                                                       00174000
*                                                                       00175000
VB_VF_NotSigned       EQU   1                                           00176000
VB_VF_DENotFound      EQU   2                                           00177000
VB_VF_DENotMatch      EQU   3                                           00178000
VB_VF_SigNotFound     EQU   4                                           00179000
VB_VF_BadHashAlg      EQU   5                                           00180000
VB_VF_BadSigAlg       EQU   6                                           00181000
VB_VF_BadHashVal      EQU   7                                           00182000
VB_VF_NoMatchingKeyID EQU   8                                           00183000
VB_VF_SigVerFailed    EQU   9                                           00184000
VB_VF_OverlayModule   EQU   10                                          00185000
VB_VF_BadSigRecVersion EQU  11                                          00186000
VB_VF_MachLoaderError EQU   12                                          00187000
VB_CertExtract_Len    EQU   *-VB_CertExtract                            00188000
.L0006                ANOP                                              00189000
                      AIF   ('&VB_AuditArea' EQ 'NO').L0009             00190000
                      AIF   ('&DSECT' EQ 'YES').L000A                   00191000
                      AIF   ('&VB_AuditArea' NE 'YES').L0009            00192000
.L000A                ANOP                                              00193000
*                                                                       00194000
*   SMF90T42_VB_VF equates within IHAVBSMF are expected to match the    00195000
*   preceding VB_VF_equates.                                            00196000
*   Mapping of Audit area                                               00197000
*   - Hash Table of n1 entries, each locating an Audit DSN entry        00198000
*                                                                       00199000
*                                                                       00200000
*                                                                       00201000
                      AIF   ('&DSECT' EQ 'YES').L000B                   00202000
VB_AuditArea          DS    0D                                          00203000
                      AGO   .L000C                                      00204000
.L000B                ANOP                                              00205000
VB_AuditArea          DSECT                                             00206000
.L000C                ANOP                                              00207000
VB_AA_ID              DS    CL4                                         00208000
VB_AA_NumFailures     DS    F                                           00209000
                      DS    CL4    For IBM use only                     00210000
VB_AA_NumFailures_NoDSNE DS F      Could not allocate a DSNE so just   *00211000
                                   counted the failure                  00212000
                      DS    CL4    For IBM use only                     00213000
VB_AA_Flags0          DS    B                                           00214000
*  Bit definitions:                                                     00215000
VB_AA_NoVB            EQU   X'80'  No validated boot possible           00216000
VB_AA_NoGoodCerts     EQU   X'40'                                       00217000
VB_AA_HashTable_DSNE_Dim DS X      Dimension of the array at           *00218000
                                   VB_AA_HashTable_DSNE_Area            00219000
                      DS    CL2    Use one of these bytes for          *00220000
                                   "version" if we ever expand         *00221000
                                   AuditArea                            00222000
VB_AA_Num_DSNEs       DS    F      Number of DSNE's                     00223000
VB_AA_Num_DSNE_ModEs  DS    F      Number of ModE's                     00224000
VB_AA_Num_Success_IPL DS    F      Number of successful validations    *00225000
                                   for fetch type IPL                   00226000
VB_AA_Num_Success_NUC DS    F      Number of successful validations    *00227000
                                   for fetch type NUC                   00228000
VB_AA_Num_Success_NIP DS    F      Number of successful validations    *00229000
                                   for fetch type NIP                   00230000
VB_AA_Num_Success_LPA DS    F      Number of successful validations    *00231000
                                   for fetch type LPA                   00232000
                      DS    CL16   Reserved                             00233000
                      DS    CL48   Reserved                             00234000
VB_AA_HashTable_DSNE_Area DS 0C    Start of array of 4-byte pointers   *00235000
                                   with the dimension in the "_Dim"    *00236000
                                   field. Each pointer, when not 0,    *00237000
                                   points to a chain of areas each     *00238000
                                   mapped by VB_AA_DSNE                 00239000
VB_AA_ID_Chars        EQU   C'VBAA'                                     00240000
VB_AuditArea_Len      EQU   *-VB_AuditArea                              00241000
.L0009                ANOP                                              00242000
                      AIF   ('&VB_AA_DSNE' EQ 'NO').L000D               00243000
                      AIF   ('&DSECT' EQ 'YES').L000E                   00244000
                      AIF   ('&VB_AA_DSNE' NE 'YES').L000D              00245000
.L000E                ANOP                                              00246000
*                                                                       00247000
*   Since we are only auditing errors, we don't choose to make it       00248000
*   fast. But if we ever have to audit everything, speed will matter    00249000
*   so we prepare for a hash structure. Initially, the hash function    00250000
*   is just a constant returning "0".                                   00251000
*                                                                       00252000
*   Mapping of Audit DSN entry                                          00253000
*                                                                       00254000
*                                                                       00255000
*                                                                       00256000
                      AIF   ('&DSECT' EQ 'YES').L000F                   00257000
VB_AA_DSNE            DS    0D                                          00258000
                      AGO   .L0010                                      00259000
.L000F                ANOP                                              00260000
VB_AA_DSNE            DSECT                                             00261000
.L0010                ANOP                                              00262000
VB_AA_DSNE_ID         DS    CL8                                         00263000
VB_AA_DSNE_Next_Addr  DS    A                                           00264000
                      DS    CL4    For IBM use only                     00265000
VB_AA_DSNE_DSName     DS    CL44   A value of "*" indicates that this  *00266000
                                   entry applies regardless of data    *00267000
                                   set name, such as "no certificate   *00268000
                                   entries". A value of zeroes applies *00269000
                                   only for IEAIPL00 and indicates not *00270000
                                   known                                00271000
VB_AA_DSNE_VolID      DS    CL6    The volume ID, unless DSName is     *00272000
                                   zeroes or *, indicating not known.   00273000
                      DS    CL2    Use one of these bytes for          *00274000
                                   "version" if we ever expand AA_DSNE  00275000
VB_AA_DSNE_NumFailures DS   F                                           00276000
                      DS    CL4    For IBM use only                     00277000
VB_AA_DSNE_NumFailures_NoModE DS F Could not allocate a ModE so just   *00278000
                                   counted the failure                  00279000
                      DS    CL4    For IBM use only                     00280000
                      DS    CL3                                         00281000
VB_AA_DSNE_HashTable_ModE_Dim DS X Dimension of the array at           *00282000
                                   VB_AA_DSNE_HashTable_Mode_Area       00283000
VB_AA_DSNE_FailTime   DS    CL16   First fail time                      00284000
VB_AA_DSNE_Num_DSNE_ModEs DS F     Number of ModE's for this DSNE       00285000
                      DS    CL4                                         00286000
VB_AA_DSNE_HashTable_ModE_Area DS 0C Start of array of 4-byte pointers *00287000
                                   with the dimension in the "_Dim"    *00288000
                                   field. Each pointer, when not 0,    *00289000
                                   points to a chain of areas each     *00290000
                                   mapped by VB_AA_DSNE_ModE            00291000
VB_AA_DSNE_ID_Chars_0TO3 EQU C'VBAA' This is the first 4-byte segment  *00292000
                                   of an 8-byte constant.               00293000
VB_AA_DSNE_ID_Chars_4TO7 EQU C'DSNE' This is the second 4-byte segment *00294000
                                   of an 8-byte constant.               00295000
VB_AA_DSNE_Len        EQU   *-VB_AA_DSNE                                00296000
.L000D                ANOP                                              00297000
                      AIF   ('&VB_AA_DSNE_ModE' EQ 'NO').L0011          00298000
                      AIF   ('&DSECT' EQ 'YES').L0012                   00299000
                      AIF   ('&VB_AA_DSNE_ModE' NE 'YES').L0011         00300000
.L0012                ANOP                                              00301000
*                                                                       00302000
*   Since we are only auditing errors, we don't choose to make it       00303000
*   fast. But if we ever have to audit everything, speed will matter    00304000
*   so we prepare for a hash structure. Initially, the hash function    00305000
*   is just a constant returning "0".                                   00306000
*                                                                       00307000
*   Mapping of Audit mod entry                                          00308000
*                                                                       00309000
*                                                                       00310000
*                                                                       00311000
                      AIF   ('&DSECT' EQ 'YES').L0013                   00312000
VB_AA_DSNE_ModE       DS    0D                                          00313000
                      AGO   .L0014                                      00314000
.L0013                ANOP                                              00315000
VB_AA_DSNE_ModE       DSECT                                             00316000
.L0014                ANOP                                              00317000
VB_AA_DSNE_ModE_ID    DS    CL8                                         00318000
VB_AA_DSNE_ModE_Next_Addr DS A                                          00319000
                      DS    CL4    For IBM use only                     00320000
                      DS    CL8    Use one of these bytes for          *00321000
                                   "version" if we ever expand         *00322000
                                   AA_DSNE_ModE                         00323000
VB_AA_DSNE_ModE_ModName DS  CL8                                         00324000
VB_AA_DSNE_ModE_Flags DS    B                                           00325000
*  Bit definitions:                                                     00326000
VB_AA_DSNE_ModE_FoundSig EQU X'80' Found the signature record for this *00327000
                                   module                               00328000
VB_AA_DSNE_ModE_FoundCert EQU X'40' Found a certificate with a key ID  *00329000
                                   matching the key ID in the          *00330000
                                   signature record. That certificate  *00331000
                                   will be used to attempt validation  *00332000
                                   (as will any other certificate with *00333000
                                   an identical key ID)                 00334000
VB_AA_DSNE_ModE_haveMachLoaderErrors EQU X'20' MachLoaderErrors has    *00335000
                                   information                          00336000
VB_AA_DSNE_ModE_FetchType DS X                                          00337000
VB_AA_DSNE_ModE_Failure_Reason DS H                                     00338000
VB_AA_DSNE_ModE_NumFailures DS F                                        00339000
VB_AA_DSNE_ModE_FailTime DS CL16   First fail time                      00340000
VB_AA_DSNE_ModE_CX_CertName DS CL64 Valid only when FoundCert           00341000
VB_AA_DSNE_ModE_CertFP DS   CL32   Valid only when FoundSig             00342000
VB_AA_Union           DS    CL20                                        00343000
                      ORG   VB_AA_Union                                 00344000
VB_AA_DSNE_ModE_KeyID DS    CL20   Valid only when FoundSig             00345000
                      ORG   VB_AA_Union                                 00346000
VB_AA_DSNE_ModE_MachLoaderErrors DS CL6 Errors found by machine        *00347000
                                   loader. Valid only when             *00348000
                                   haveMachLoaderErrors                 00349000
                      ORG   VB_AA_DSNE_ModE_MachLoaderErrors            00350000
VB_AA_DSNE_ModE_MLE_SCLAFED DS BL4 Secure code loading attribute       *00351000
                                   facilities error details             00352000
VB_AA_DSNE_ModE_MLE_IIEI DS BL2    IPL Information error indicators     00353000
                      ORG   VB_AA_Union+20                              00354000
                      DS    CL4    For IBM use only                     00355000
VB_AA_DSNE_ModE_SignTime DS CL16   Valid only when FoundSig             00356000
VB_AA_DSNE_ModE_Digest DS   CL64   The expected hash value. Valid only *00357000
                                   when FoundSig                        00358000
VB_AA_DSNE_ModE_ID_Chars_0TO3 EQU C'VBAA' This is the first 4-byte     *00359000
                                   segment of an 8-byte constant.       00360000
VB_AA_DSNE_ModE_ID_Chars_4TO7 EQU C'MODE' This is the second 4-byte    *00361000
                                   segment of an 8-byte constant.       00362000
VB_AA_DSNE_ModE_FetchType_Min EQU 0                                     00363000
VB_AA_DSNE_ModE_FetchType_IPL EQU 0                                     00364000
VB_AA_DSNE_ModE_FetchType_NUC EQU 1                                     00365000
VB_AA_DSNE_ModE_FetchType_NIP EQU 2                                     00366000
VB_AA_DSNE_ModE_FetchType_LPA EQU 3                                     00367000
VB_AA_DSNE_ModE_FetchType_Max EQU 3                                     00368000
VB_AA_DSNE_ModE_Len   EQU   *-VB_AA_DSNE_ModE                           00369000
.L0011                ANOP                                              00370000
                      AIF   ('&ZCBPRINT' EQ 'NO').P3                    00371000
                      AIF   ('&LIST' EQ 'YES').P4                       00372000
.P3                   ANOP                                              00373000
                      POP   PRINT                                       00374000
.P4                   ANOP                                              00375000
.P_EXIT               ANOP                                              00376000
                      MEND                                              00377000
**/ ;                                                                   00378000
* %IHAVBA_INCLUDED = 'YES';                                             00379000
* %DCL ZCBPRINT CHAR EXT;                                               00380000
* %DEACTIVATE ZCBPRINT;                                                 00381000
* %DCL IHAVBA_LIST CHAR EXT;                                            00382000
* %DEACTIVATE IHAVBA_LIST;                                              00383000
* %IF IHAVBA_LIST = 'NO' !                                              00384000
*    ZCBPRINT = 'NO' %THEN                                              00385000
* %DO;                                                                  00386000
*   @LIST PUSH NOECHO;                                                  00387000
*   @LIST NOASSEMBLE NOECHO;                                            00388000
*   @LIST OFF C NOECHO;                                                 00389000
* %END;                                                                 00390000
*/* Start of PL/X Source                                             */ 00391000
*/* Validated Boot Area                                              */ 00392000
*%If VBA_Base = '' %Then                                                00393000
*  %VBA_Base = 'Based';                                                 00394000
*Dcl 1 VBA VBA_Base Char(64) Bdy(Dword) /*                              00395000
*                      SVTVBAA                                          00396000
*                                                                    */ 00397000
*      ,3 VBA_ID Char(4)                                                00398000
*      ,3 VBA_Flags Bit(8)                                              00399000
*        ,5 VBA_Enforce Bit(1)  /*                                   */ 00400000
*        ,5 VBA_Audit Bit(1)    /*                                   */ 00401000
*      ,3 VBA_Paging_Flags Bit(8)                                       00402000
*        ,5 VBA_PlpaPageDsSpec Bit(1) /* PLPA data set specified     */ 00403000
*        ,5 VBA_SCMCannotHoldLPA Bit(1)                                 00404000
*      ,3 * Char(2)             /* Use one of these bytes for "version" 00405000
*                                  if we ever expand VBA             */ 00406000
*      ,3 VBA_AuditArea_Addr Ptr                                        00407000
*        ,5 VBA_AuditArea@_V Ptr                                        00408000
*      ,3 VBA_First_Good_CX_Addr Ptr                                    00409000
*        ,5 VBA_First_Good_CX@_V Ptr                                    00410000
*      ,3 VBA_Num_Good_CX Fixed                                         00411000
*      ,3 VBA_Num_Bad_CX Fixed                                          00412000
*      ,3 VBA_First_Bad_CX_Addr Ptr                                     00413000
*        ,5 VBA_First_Bad_CX@_V Ptr                                     00414000
*      ;                                                                00415000
*Dcl VBA_ID_Chars Char(4) Constant('VBA ');                             00416000
*Dcl 1 VB_CertExtract Based                                             00417000
*      ,3 VB_CX_ID Char(4)                                              00418000
*      ,3 VB_CX_NextAddr Ptr                                            00419000
*        ,5 VB_CX_Next@_V Ptr          /* For IBM use only           */ 00420000
*      ,3 * Char(4) bdy(word)          /* For IBM use only           */ 00421000
*        ,5 VB_CX_Next@_R Ptr          /* For IBM use only           */ 00422000
*      ,3 VB_CX_NumSuccessfulUses Fixed(32)                             00423000
*      ,3 VB_CX_CertName Char(64)                                       00424000
*      ,3 VB_CX_CertFP Char(32)                                         00425000
*      ,3 VB_CX_KeyID Char(20)        /* Zeroes if bad key ID length */ 00426000
*      ,3 * Char(2)                    /* For IBM use only           */ 00427000
*       ,4 VB_CX_Flags Bit(8)                                           00428000
*        ,5 VB_CX_Not_UniqueKeyID Bit(1)    /* We use this bit to       00429000
*                                 optimize a bit. When trying to        00430000
*                                 find a suitable CX to use, we         00431000
*                                 match "key ID's". And when the        00432000
*                                 CX indicates that the key ID is       00433000
*                                 not unique, then we must look         00434000
*                                 further if we didn't get a match      00435000
*                                 on the first one.                  */ 00436000
*       ,4 VB_CX_Reserved Char(1)      /* Use for "version" if we ever  00437000
*                                 expand VB_CertExtract              */ 00438000
*      ,3 VB_CX_Reason_Bad Fixed(15)                                    00439000
*      ,3 VB_CX_StartTime Char(8)      /* First 8 bytes of ETOD      */ 00440000
*      ,3 VB_CX_ExpirationTime Char(8) /* First 8 bytes of ETOD      */ 00441000
*      ,3 * Char(2) Bdy(hword)         /* For IBM use only           */ 00442000
*        ,4 VB_CX_Index Fixed(16)      /* We do not use this but        00443000
*                                 it came from the certificate store    00444000
*                                 so might be of diagnostic value    */ 00445000
*      ,3 * Char(6)                                                     00446000
*      ,3 VB_CX_X Char(80)        /* Zeroes if bad key               */ 00447000
*      ,3 VB_CX_Y Char(80)        /* Zeroes if bad key               */ 00448000
*      ,3 * Char(0) Bdy(Dword);                                         00449000
*Dcl VB_CX_ID_Chars Char(*) Constant('VBCX');                           00450000
*Dcl VB_CX_Reason_NotStarted Constant(1);                               00451000
*Dcl VB_CX_Reason_Expired Constant(2);                                  00452000
*Dcl VB_CX_Reason_BadKey Constant(3);                                   00453000
*Dcl VB_CX_Reason_BadKeyType Constant(4);                               00454000
*Dcl VB_CX_Reason_BadKeyIDLen Constant(5);                              00455000
*Dcl VB_CX_Reason_BadHashType Constant(6);                              00456000
*Dcl VB_CX_Reason_BadHashLen  Constant(7);                              00457000
*/* Reasons for validation failure                                      00458000
**/                                                                     00459000
*Dcl VB_VF_NotSigned Constant(1);                                       00460000
*Dcl VB_VF_DENotFound Constant(2);                                      00461000
*Dcl VB_VF_DENotMatch Constant(3);                                      00462000
*Dcl VB_VF_SigNotFound Constant(4);                                     00463000
*Dcl VB_VF_BadHashAlg Constant(5);                                      00464000
*Dcl VB_VF_BadSigAlg  Constant(6);                                      00465000
*Dcl VB_VF_BadHashVal Constant(7);                                      00466000
*Dcl VB_VF_NoMatchingKeyID Constant(8);                                 00467000
*Dcl VB_VF_SigVerFailed Constant(9);                                    00468000
*Dcl VB_VF_OverlayModule Constant(10);                                  00469000
*Dcl VB_VF_BadSigRecVersion Constant(11);                               00470000
*Dcl VB_VF_MachLoaderError Constant(12);                      /* @01A*/ 00471000
*/* SMF90T42_VB_VF equates within IHAVBSMF are expected to match the    00472000
*   preceding VB_VF_equates.                                         */ 00473000
*/* Mapping of Audit area                                               00474000
*   - Hash Table of n1 entries, each locating an Audit DSN entry        00475000
**/                                                                     00476000
*Dcl 1 VB_AuditArea Based                                               00477000
*      ,3 VB_AA_ID Char(4)                                              00478000
*      ,3 VB_AA_NumFailures Fixed                                       00479000
*      ,3 * Char(4) Bdy(Word)           /* For IBM use only          */ 00480000
*        ,4 VB_AA_NumFailures_SMF Fixed /* Same as previous, when       00481000
*                                 the last SMF90-42 record was written. 00482000
*                                 Used to tell if there have been any   00483000
*                                 more since then.                   */ 00484000
*      ,3 VB_AA_NumFailures_NoDSNE Fixed  /* Could not allocate a       00485000
*                                 DSNE so just counted the failure      00486000
*                                                                    */ 00487000
*      ,3 * Char(4) Bdy(Word)           /* For IBM use only          */ 00488000
*        ,4 VB_AA_NumFailures_NoDSNE_SMF Fixed /* Same as previous,     00489000
*                                 when the last SMF90-42 record was     00490000
*                                 written. Used to tell if there have   00491000
*                                 been any more since then.          */ 00492000
*      ,3 VB_AA_Flags0 Bit(8)                                           00493000
*        ,5 VB_AA_NoVB Bit(1)   /* No validated boot possible        */ 00494000
*        ,5 VB_AA_NoGoodCerts Bit(1)                                    00495000
*      ,3 VB_AA_HashTable_DSNE_Dim Fixed(8)  /* Dimension of the array  00496000
*                          at VB_AA_HashTable_DSNE_Area              */ 00497000
*      ,3 * Char(2)             /* Use one of these bytes for "version" 00498000
*                          if we ever expand AuditArea               */ 00499000
*      ,3 VB_AA_Num_DSNEs Fixed /* Number of DSNE's                  */ 00500000
*      ,3 VB_AA_Num_DSNE_ModEs Fixed /* Number of ModE's             */ 00501000
*%If IBM_CBGEN = 'YES' ! IBM_CBGENC = 'YES' %Then                       00502000
*%Do;                                                                   00503000
*      ,3 VB_AA_Num_Success_IPL Fixed  /* Number of successful          00504000
*                          validations for fetch type IPL            */ 00505000
*      ,3 VB_AA_Num_Success_NUC Fixed  /* Number of successful          00506000
*                          validations for fetch type NUC            */ 00507000
*      ,3 VB_AA_Num_Success_NIP Fixed  /* Number of successful          00508000
*                          validations for fetch type NIP            */ 00509000
*      ,3 VB_AA_Num_Success_LPA Fixed  /* Number of successful          00510000
*                          validations for fetch type LPA            */ 00511000
*      ,3 * Char(16)                  /* Reserved                    */ 00512000
*%End;                                                                  00513000
*%Else %Do;                                                             00514000
*/* If the number of fetch types increases, we intend to use up the     00515000
*   Char(16) Reserved area which will happen naturally within the       00516000
*   PL/X expansion                                                   */ 00517000
*      ,3 VB_AA_Num_Success                                             00518000
*           (0 : VB_AA_DSNE_ModE_FetchType_Max) fixed                   00519000
*      ,3 * Char(28 - 4 * VB_AA_DSNE_ModE_FetchType_Max)                00520000
*%End;                                                                  00521000
*      ,3 * Char(48)                  /* Reserved                    */ 00522000
*%If IBM_CBGEN = 'YES' ! IBM_CBGENC = 'YES' %Then                       00523000
*%Do;                                                                   00524000
*      ,3 VB_AA_HashTable_DSNE_Area                                     00525000
*           Char(0)               /* Start of                           00526000
*                                 array of 4-byte pointers              00527000
*                                 with the dimension in the "_Dim"      00528000
*                                 field. Each pointer, when not 0,      00529000
*                                 points to a chain of areas each       00530000
*                                 mapped by VB_AA_DSNE               */ 00531000
*%End;                                                                  00532000
*%Else %Do;                                                             00533000
*      ,3 VB_AA_Hash_DSNE_Area                                          00534000
*        ,5 VB_AA_Hash_DSNE@_V(0:kVB_AA_Hash_DSNE_Dim-1) Ptr            00535000
*        ,5 VB_AA_Hash_DSNE@_R(0:kVB_AA_Hash_DSNE_Dim-1) Ptr            00536000
*%End;                                                                  00537000
*      ,3 * Char(0) Bdy(Dword)                                          00538000
*      ;                                                                00539000
*Dcl VB_AA_ID_Chars Char(4) Constant('VBAA');                           00540000
*Dcl kVB_AA_Hash_DSNE_Dim Constant(1);                                  00541000
*/* Since we are only auditing errors, we don't choose to make it       00542000
*   fast. But if we ever have to audit everything, speed will matter    00543000
*   so we prepare for a hash structure. Initially, the hash function    00544000
*   is just a constant returning "0".                                   00545000
**/                                                                     00546000
*/* Mapping of Audit DSN entry                                          00547000
**/                                                                     00548000
*Dcl 1 VB_AA_DSNE Based                                                 00549000
*      ,3 VB_AA_DSNE_ID Char(8)                                         00550000
*      ,3 VB_AA_DSNE_Next_Addr Ptr                                      00551000
*        ,5 VB_AA_DSNE_Next@_V Ptr     /* For IBM use only           */ 00552000
*      ,3 * Char(4) bdy(word)          /* For IBM use only           */ 00553000
*        ,5 VB_AA_DSNE_Next@_R Ptr     /* For IBM use only           */ 00554000
*      ,3 VB_AA_DSNE_DSName Char(44) /* A value of "*" indicates        00555000
*                                 that this entry applies regardless    00556000
*                                 of data set name, such as "no         00557000
*                                 certificate entries". A value of      00558000
*                                 zeroes applies only for IEAIPL00      00559000
*                                 and indicates not known            */ 00560000
*      ,3 VB_AA_DSNE_VolID Char(6)   /* The volume ID, unless DSName    00561000
*                                 is zeroes or *, indicating not        00562000
*                                 known.                             */ 00563000
*      ,3 * Char(2)                  /* Use one of these bytes for      00564000
*                                 "version" if we ever expand           00565000
*                                 AA_DSNE                            */ 00566000
*      ,3 VB_AA_DSNE_NumFailures Fixed                                  00567000
*      ,3 * Char(4) Bdy(Word)           /* For IBM use only          */ 00568000
*        ,4 VB_AA_DSNE_NumFailures_SMF Fixed /* NumFailures when        00569000
*                                 the last SMF90-42 record was written. 00570000
*                                 Used to tell if there have been any   00571000
*                                 more since then.                   */ 00572000
*      ,3 VB_AA_DSNE_NumFailures_NoModE Fixed  /* Could not allocate a  00573000
*                                 ModE so just counted the failure      00574000
*                                                                    */ 00575000
*      ,3 * Char(4) Bdy(Word)           /* For IBM use only          */ 00576000
*        ,4 VB_AA_DSNE_NumFailures_NoModE_SMF Fixed /*                  00577000
*                                 Same as previous, when                00578000
*                                 the last SMF90-42 record was written. 00579000
*                                 Used to tell if there have been any   00580000
*                                 more since then.                   */ 00581000
*      ,3 * Char(3)                                                     00582000
*      ,3 VB_AA_DSNE_HashTable_ModE_Dim Fixed(8)  /* Dimension of the   00583000
*                          array at VB_AA_DSNE_HashTable_Mode_Area   */ 00584000
*      ,3 VB_AA_DSNE_FailTime Char(16) /* First fail time            */ 00585000
*      ,3 VB_AA_DSNE_Num_DSNE_ModEs Fixed /* Number of ModE's for this  00586000
*                                 DSNE                               */ 00587000
*      ,3 * Char(4)                                                     00588000
*%If IBM_CBGEN = 'YES' ! IBM_CBGENC = 'YES' %Then                       00589000
*%Do;                                                                   00590000
*      ,3 VB_AA_DSNE_HashTable_ModE_Area                                00591000
*           Char(0)               /* Start of                           00592000
*                                 array of 4-byte pointers              00593000
*                                 with the dimension in the "_Dim"      00594000
*                                 field. Each pointer, when not 0,      00595000
*                                 points to a chain of areas each       00596000
*                                 mapped by VB_AA_DSNE_ModE          */ 00597000
*%End;                                                                  00598000
*%Else %Do;                                                             00599000
*      ,3 VB_AA_DSNE_Hash_ModE_Area                                     00600000
*        ,5 VB_AA_DSNE_Hash_ModE@_V(0:kVB_AA_DSNE_Hash_ModE_Dim-1) Ptr  00601000
*        ,5 VB_AA_DSNE_Hash_ModE@_R(0:kVB_AA_DSNE_Hash_ModE_Dim-1) Ptr  00602000
*%End;                                                                  00603000
*      ,3 * Char(0) Bdy(Dword)                                          00604000
*      ;                                                                00605000
*Dcl VB_AA_DSNE_ID_Chars Char(8) Constant('VBAADSNE');                  00606000
*Dcl kVB_AA_DSNE_Hash_ModE_Dim Constant(1);                             00607000
*/* Since we are only auditing errors, we don't choose to make it       00608000
*   fast. But if we ever have to audit everything, speed will matter    00609000
*   so we prepare for a hash structure. Initially, the hash function    00610000
*   is just a constant returning "0".                                   00611000
**/                                                                     00612000
*/* Mapping of Audit mod entry                                          00613000
**/                                                                     00614000
*Dcl 1 VB_AA_DSNE_ModE Based                                            00615000
*      ,3 VB_AA_DSNE_ModE_ID Char(8)                                    00616000
*      ,3 VB_AA_DSNE_ModE_Next_Addr Ptr                                 00617000
*        ,5 VB_AA_DSNE_ModE_Next@_V Ptr /* For IBM use only          */ 00618000
*      ,3 * Char(4) Bdy(Word)           /* For IBM use only          */ 00619000
*        ,5 VB_AA_DSNE_ModE_Next@_R Ptr /* For IBM use only          */ 00620000
*      ,3 * Char(8)                  /* Use one of these bytes for      00621000
*                                 "version" if we ever expand           00622000
*                                 AA_DSNE_ModE                       */ 00623000
*      ,3 VB_AA_DSNE_ModE_ModName Char(8)                               00624000
*      ,3 VB_AA_DSNE_ModE_Flags Bit(8)                                  00625000
*        ,5 VB_AA_DSNE_ModE_FoundSig Bit(1)  /* Found the signature     00626000
*                                 record for this module             */ 00627000
*        ,5 VB_AA_DSNE_ModE_FoundCert Bit(1) /* Found a certificate     00628000
*                                 with a key ID matching the key ID     00629000
*                                 in the signature record. That         00630000
*                                 certificate will be used to attempt   00631000
*                                 validation (as will any other         00632000
*                                 certificate with an identical key     00633000
*                                 ID)                                */ 00634000
*        ,5 VB_AA_DSNE_ModE_haveMachLoaderErrors Bit(1) /*              00635000
*                                 MachLoaderErrors has information   */ 00636000
*      ,3 VB_AA_DSNE_ModE_FetchType Fixed(8)                            00637000
*      ,3 VB_AA_DSNE_ModE_Failure_Reason Fixed(15)                      00638000
*      ,3 VB_AA_DSNE_ModE_NumFailures Fixed                             00639000
*      ,3 VB_AA_DSNE_ModE_FailTime Char(16)  /* First fail time      */ 00640000
*      ,3 VB_AA_DSNE_ModE_CX_CertName Char(64)    /* Valid only         00641000
*                                 when FoundCert                     */ 00642000
*      ,3 VB_AA_DSNE_ModE_CertFP Char(32)  /*                           00643000
*                                 Valid only when FoundSig           */ 00644000
*      ,3 VB_AA_Union Union                                   /* @01A*/ 00645000
*        ,5 VB_AA_DSNE_ModE_KeyID Char(20) /*                           00646000
*                               Valid only when FoundSig             */ 00647000
*        ,5 VB_AA_DSNE_ModE_MachLoaderErrors /* Errors found by machine 00648000
*                                 loader. Valid only when               00649000
*                                 haveMachLoaderErrors           @01A*/ 00650000
*          ,7 VB_AA_DSNE_ModE_MLE_SCLAFED Bit(32)   /* Secure code      00651000
*                                 loading attribute facilities error    00652000
*                                 details                        @01A*/ 00653000
*          ,7 VB_AA_DSNE_ModE_MLE_IIEI Bit(16) /* IPL Information       00654000
*                                 error indicators               @01A*/ 00655000
*      ,3 * Char(4) Bdy(Word)              /* For IBM use only       */ 00656000
*        ,4 VB_AA_DSNE_ModE_NumFailures_SMF Fixed /* NumFailures, when  00657000
*                                 the last SMF90-42 record was written. 00658000
*                                 Used to tell if there have been any   00659000
*                                 more since then.                   */ 00660000
*      ,3 VB_AA_DSNE_ModE_SignTime Char(16) /*                          00661000
*                                 Valid only when FoundSig           */ 00662000
*      ,3 VB_AA_DSNE_ModE_Digest Char(64)         /* The expected       00663000
*                                 hash value.                           00664000
*                                 Valid only when FoundSig           */ 00665000
*      ,3 * Char(0) Bdy(Dword)                                          00666000
*      ;                                                                00667000
*Dcl VB_AA_DSNE_ModE_ID_Chars Char(8) Constant('VBAAMODE');             00668000
*Dcl VB_AA_DSNE_ModE_FetchType_Min Constant(0);                         00669000
*Dcl VB_AA_DSNE_ModE_FetchType_IPL Constant(0);                         00670000
*Dcl VB_AA_DSNE_ModE_FetchType_NUC Constant(1);                         00671000
*Dcl VB_AA_DSNE_ModE_FetchType_NIP Constant(2);                         00672000
*Dcl VB_AA_DSNE_ModE_FetchType_LPA Constant(3);                         00673000
*Dcl VB_AA_DSNE_ModE_FetchType_Max Constant(3);                         00674000
*                                                                       00675000
* @LOGIC;                                                               00676000
* #PRAGMA TOOL=CBGEN.                                                   00677000
* #USEORG.                                                              00678000
* #ALIGNOP.                                                             00679000
* #NOTUPPER.                                                            00680000
* #DELETE.VBA_AuditArea@_V                                              00681000
* #DELETE.VBA_First_Good_CX@_V                                          00682000
* #DELETE.VBA_First_Bad_CX@_V                                           00683000
* #DELETE.VB_CX_Next@_V                                                 00684000
* #DELETE.VB_CX_Next@_R                                                 00685000
* #DELETE.VB_CX_Flags                                                   00686000
* #DELETE.VB_CX_Reserved                                                00687000
* #DELETE.VB_CX_Index                                                   00688000
* #DELETE.VB_AA_DSNE_Next@_V                                            00689000
* #DELETE.VB_AA_DSNE_Next@_R                                            00690000
* #DELETE.VB_AA_DSNE_ModE_Next@_V                                       00691000
* #DELETE.VB_AA_DSNE_ModE_Next@_R                                       00692000
* #DELETE.VB_AA_NumFailures_SMF                                         00693000
* #DELETE.VB_AA_NumFailures_NoDSNE_SMF                                  00694000
* #DELETE.VB_AA_DSNE_NumFailures_SMF                                    00695000
* #DELETE.VB_AA_DSNE_NumFailures_NoModE_SMF                             00696000
* #DELETE.VB_AA_DSNE_ModE_NumFailures_SMF                               00697000
* #DELETE.kVB_AA_Hash_DSNE_Dim                                          00698000
* #DELETE.kVB_AA_DSNE_Hash_ModE_Dim                                     00699000
* #EPRAGMA.                                                             00700000
* @ENDLOGIC;                                                            00701000
*/* End of PL/X Source                                               */ 00702000
* %IF IHAVBA_LIST = 'NO' !                                              00703000
*    ZCBPRINT = 'NO' %THEN                                              00704000
* %DO;                                                                  00705000
*   @LIST POP NOECHO;                                                   00706000
* %END;                                                                 00707000
* %END;                                                                 00708000
