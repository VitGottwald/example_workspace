*        %GOTO POLLPRO ;        /* Bilingual header                     00010000
         MACRO                                                          00020000
         BPXYPOLL  &DSECT=YES,&LIST=YES                                 00030000
         GBLB  &POLL411                                                 00040000
         AIF   (&POLL411 EQ 1).E411                                     00050000
&POLL411 SETB  1                                                        00060000
         AIF   ('&LIST' EQ 'YES').A411                                  00070000
         PUSH  PRINT  BPXYPOLL: POLLFD structure for poll syscall       00080000
         PRINT OFF                                                      00090000
         AGO   .A411                                                    00100000
*                               */                                      00110000
*%POLLPRO : ;                                                           00120000
*/****START OF SPECIFICATIONS****************************************** 00130000
*    $MAC (BPXYPOLL) COMP(SCPX1) PROD(BPX):                             00140000
*01* MACRO NAME: BPXYPOLL                                               00150000
*01* DSECT NAME: N/A                                                    00160000
*01* DESCRIPTIVE NAME: PollFD structure for the poll syscall            00170000
*02*   ACRONYM: POLL                                                    00180000
**/                                                                     00190000
*/*01* PROPRIETARY STATEMENT=                                        */ 00200000
*/***PROPRIETARY_STATEMENT********************************************/ 00210000
*/*                                                                  */ 00220000
*/*                                                                  */ 00230000
*/* LICENSED MATERIALS - PROPERTY OF IBM                             */ 00240000
*/*     5650-ZOS COPYRIGHT IBM CORP. 1995, 2015                      */ 00250002
*/*                                                                  */ 00260000
*/* STATUS= HBB77A0                                                  */ 00270002
*/*                                                                  */ 00280000
*/***END_OF_PROPRIETARY_STATEMENT*************************************/ 00290000
*/*                                                                     00300000
*                                                                       00310000
*01* EXTERNAL CLASSIFICATION:  GUPI                                     00320000
*01* END OF EXTERNAL CLASSIFICATION:                                    00330000
*                                                                       00340000
*01* FUNCTION:                                                          00350000
*                                                                       00360000
*    The PollFD is an array that maps the status request and response   00370000
*    for each file descriptor specified on a poll syscall.              00380000
*01* METHOD OF ACCESS:                                                  00390000
*02*   PL/X:                                                            00400000
*         %INCLUDE SYSLIB(BPXYPOLL)                                     00410000
*         By default, the POLL is based on POLLPTR.                     00420000
*         If other basing is desired, use %POLLBASE='BASED(XXXXXX)'.    00430000
*         If %POLLBASE is defaulted, a declare for POLLPTR is           00440000
*         generated.                                                    00450000
*                                                                       00460000
*         If VIA basing is required, specify %POLLVIA='VIA(YYYYYY)'.    00470000
*         If %POLLVIA='VIA(POLLALET)' is specified, a declare for       00480000
*         POLLALET is generated.                                        00490000
*02*   ASM:                                                             00500000
*         With DSECT=NO, storage is allocated in line                   00510000
*         and addressability is provided thru that DSECT or CSECT.      00520000
*                                                                       00530000
*         With DSECT=YES, a DSECT is produced and "USING POLLFD,reg"    00540000
*         is required for addressability.  Here "reg" contains the      00550000
*         address of POLLFD#LENGTH bytes of storage.                    00560000
*         The default is DSECT=YES.                                     00570000
*                                                                       00580000
*01* SIZE: Release dependent.  Refer to the mapping.                    00590000
*01*             POLLFD -- X'0007' bytes                                00600000
*01* POINTED TO BY: N/A                                                 00610000
*01* CREATED BY: invoker of poll()                                      00620000
*01* DELETED BY: invoker of poll()                                      00630000
*01* STORAGE ATTRIBUTES:                                                00640000
*02*   SUBPOOL: n/a                                                     00650000
*02*   KEY: 0                                                           00660000
*02*   RESIDENCY: Primary address space                                 00670000
*01* FREQUENCY: multiple per poll() syscall                             00680000
*01* SERIALIZATION: None                                                00690000
*01* DEPENDENCIES: None                                                 00700000
*01* NOTES: When the length of PollEvents/PollRevents is changed,       00710000
*           these mapping macros: BPXYSEL, BPXZBSIC, BPXZTBSI, and      00720000
*           BPXYTCPP need to be examined and updated if necessary.      00730000
*                                                                       00740000
*01* COMPONENT: OpenMVS (SCPX1)                                         00750000
*01* DISTRIBUTION LIBRARY:  AMACLIB                                     00760000
*01* EYE-CATCHER: none                                                  00770000
*02*   OFFSET:                                                          00780000
*02*   LENGTH:                                                          00790000
*01* CHANGE-ACTIVITY:                                                   00800000
* $D0=DPFA065   HOM1130, 950201, PDNU: A065.37 Poll() Syscall           00810000
* $P1=PPF0236   HOM1130, 950213, PDJM: Correct assembler, (C) date      00820000
* $01=OW15016   HOM1130, 950829, PDDZ: A128.00 Select MsgQ support      00830000
* $D1=DRGA134   HOM1140, 950822, PDDZ: A134.02 Universal Unix           00840000
* $D2=DRGA134   HOM1140, 951114, PDDZ: A134.03 Universal Unix           00850000
* $P2=PRG0094   HOM1140, 951212, PDNU: Update  Universal Unix           00860000
* $P3=PRG0109   HOM1140, 951212, PDNU: Update  Universal Unix           00870000
* $P4=PVT0652 HBB6606 980316 PDJM: Shift ASM label to upper case        00880000
* $P5=PYN0220   HBB7708  020301  PDFO: Bilingual fixup                  00890000
* $02=OA38019   HBB7780, 111207, PDX8: Add #PollErrMask (rollup)        00900000
* $D3=DCRA595   HBB77A0  140630  PDSK: AMODE64 64-bit autodata          00901003
****END OF SPECIFICATIONS*********************************************/ 00910000
*        %GOTO POLLPLS ;        /* Bilingual header                     00920000
.A411    ANOP  ,                                                        00930000
** BPXYPOLL: POLLFD structure for poll syscall                          00940000
**  Used By: POL                                                        00950000
                     AIF   ('&DSECT' EQ 'NO').B411                      00960000
POLLFD               DSECT ,                                            00970000
                     AGO   .C411                                        00980000
.B411                ANOP  ,                                            00990000
POLLFD               DS    0F                                           01000000
.C411                ANOP  ,                                            01010000
POLLHFD              DS    FL4       File descriptor                    01020000
                     ORG   POLLHFD                               @01A   01030000
POLLHMQID            DS    FL4       Message queue identifier    @01A   01040000
POLLEVENTS           DS    0XL2      Events                        @D1C 01050000
                     DC    XL1'0'    Reserved                           01060000
                     DS    XL1       POLLEVENTS+1                       01070000
POLLEPRI             EQU   X'10'     High-pri data may be recv'd   @D1C 01080000
POLLEWRBAND          EQU   X'08'     Priority data may be written  @D1C 01090000
POLLEWRNORM          EQU   X'04'     Data on band 0 may be written.     01100000
POLLEOUT             EQU   X'04'     Same as WrNorm                     01110000
POLLEIN              EQU   X'03'     Same as RdNorm                     01120000
POLLERDBAND          EQU   X'02'     Non-0 band data may be read   @D1C 01130000
POLLERDNORM          EQU   X'01'     Data on band 0 may be read.        01140000
                     SPACE ,                                            01150000
POLLREVENTS          DS    0XL2      Returned events               @D1C 01160000
                     DS    XL1       Reserved                           01170000
                     DS    XL1       POLLREVENTS+1                      01180000
POLLRNVAL            EQU   X'80'     Invalid FD member.(Revent Only)    01190000
POLLRHUP             EQU   X'40'     Hangup occurred (Revent Only) @D1C 01200000
POLLRERR             EQU   X'20'     Error occurred. (Revent Only)      01210000
POLLRPRI             EQU   X'10'     High-pri data may be recv'd   @D1C 01220000
POLLRWRBAND          EQU   X'08'     Priority data may be written  @D1C 01230000
POLLRWRNORM          EQU   X'04'     Data on band 0 may be written.     01240000
POLLROUT             EQU   X'04'     Same as WrNorm                     01250000
POLLRIN              EQU   X'03'     Same as RdNorm                     01260000
POLLRRDBAND          EQU   X'02'     Non-0 band data may be read   @D1C 01270000
POLLRRDNORM          EQU   X'01'     Data on band 0 may be read.        01280000
POLLFD#LENGTH        EQU   *-POLLFD                                     01290000
*                                                                       01300000
#POLLEMASK           EQU   X'001F'                                 @D1A 01310000
#POLLRDMASK          EQU   X'00130000'  All Read bits              @D2A 01320000
#POLLWRMASK          EQU   X'000C0000'  All Write bits             @D2A 01330000
#POLLPRIMASK         EQU   X'00100000'  The PollPri bit            @D2A 01340000
#POLLINMASK          EQU   X'00030000'  Pollin rdnorm rdband bits  @D2A 01350000
#POLLRNMASK          EQU   X'00010000'  Read Normal                @P2A 01360000
#POLLWNMASK          EQU   X'00040000'  Write Normal               @P2A 01370000
#POLLEVMASK          EQU   X'001F0000'  Events                     @P3A 01380000
#POLLERRMASK         EQU   X'00200000'  Pollerr                    @02A 01390000
*                                                                       01400000
*                                                                       01410000
** BPXYPOLL End                                                         01420000
                     SPACE 3                                            01430000
                     AIF   ('&LIST' EQ 'YES').E411                      01440000
                     POP   PRINT                                        01450000
.E411                ANOP  ,                                            01460000
         MEND  ,                  Terminating PL/X comment           */ 01470000
*                                                                       01480000
* %POLLPLS : ;                                                          01490000
* %BPXYPOLL_INCLUDED = 'YES';                                           01500000
* %DCL ZCBPRINT CHAR EXT;                                               01510000
* %DEACTIVATE ZCBPRINT;                                                 01520000
* %DCL BPXYPOLL_LIST CHAR EXT;                                          01530000
* %DEACTIVATE BPXYPOLL_LIST;                                            01540000
* %IF BPXYPOLL_LIST ^= 'NO' &                                           01550000
*    ZCBPRINT ^= 'NO' %THEN                                             01560000
*   %GOTO BPXYPOLL_3;                                                   01570000
*   @LIST PUSH NOECHO;                                                  01580000
*   @LIST NOASSEMBLE NOECHO;                                            01590000
*   @LIST OFF C NOECHO;                                                 01600000
* %BPXYPOLL_3:;                                                         01610000
*/* Start of PL/X Source                                             */ 01620000
* %DCL ASABEGIN_AMODE CHAR EXTERNAL;                          /* @D3A*/ 01621003
* %DCL PTR_64 CHAR EXTERNAL;                                  /* @D3A*/ 01622003
* %IF POLLBASE= '' %THEN                                                01630000
*   %DO;                                                                01640000
*     %POLLBASE = 'BASED(POLLPtr)';   /* Default basing to POLLPtr   */ 01650000
*   %END;                                                               01660000
* %IF TRANSLATE(POLLBASE)='BASED(POLLPTR)' %THEN                        01670000
*   %DO;                                                                01671003
*    %IF ASABEGIN_AMODE='64' ! PTR_64='YES'                   /* @D3A*/ 01679003
*     %THEN                                                   /* @D3A*/ 01679103
*     %DO;                                                    /* @D3A*/ 01679203
*       DCL POLLPtr Ptr(64);                                  /* @D3A*/ 01679303
*     %END;                                                   /* @D3A*/ 01679403
*    %ELSE                                                    /* @D3A*/ 01679503
*     %DO;                                                    /* @D3A*/ 01679603
*       DCL POLLPtr Ptr(31);                                            01679703
*     %END;                                                   /* @D3A*/ 01679803
*   %END;                                                               01679903
*                                                                       01710000
* %IF TRANSLATE(POLLVIA)='VIA(POLLALET)' %THEN                          01720000
*   %DO;                                                                01730000
*     DCL POLLAlet FIXED(32);                                           01740000
*   %END;                                                               01750000
*/********************************************************************/ 01760000
*/* Start of POLL control block                                      */ 01770000
*/********************************************************************/ 01780000
*Declare                                                                01790000
* 1 PollFd(*) POLLBASE POLLVIA,                                         01800000
*  3 PollHFd    Fixed(31),    /* File descriptor                   */   01810000
*    5 PollHMqid  Fixed(31),  /* Message queue identifier      @01A*/   01820000
*                                                                       01830000
*  /******************************************************************/ 01840000
*  /* To use PollEvents/PollRevents to map over a piece of storage,  */ 01850000
*  /* one can follow one of these two illustrations:                 */ 01860000
*  /*                                                                */ 01870000
*  /*  Dcl 1 EventBits Like(PollEvents)                              */ 01880000
*  /*                  Defined(StorToBeMappedOver)                   */ 01890000
*  /*      - or -                                                    */ 01900000
*  /*  Dcl 1 EventBits Like(PollEvents)                              */ 01910000
*  /*                  Based(Addr(StorToBeMappedOver))               */ 01920000
*  /******************************************************************/ 01930000
*  3 PollEvents Char(2)    ,  /* Events                            */   01940000
*   5 *             Bit( 1),  /*  Reserved - DO NOT USE        @D1A*/   01950000
*   5 *             Bit(10),  /*  Reserved.                    @D1C*/   01960000
*   5 PollEPri      Bit( 1),  /* High-pri data may be recv'd   @D1C*/   01970000
*   5 PollEWrBand   Bit( 1),  /* Priority data may be written  @D1C*/   01980000
*   5 PollEWrNorm   Bit( 1),  /*  Data on band 0 may be written.   */   01990000
*    7 PollEOut     Bit( 1),  /*   Same as WrNorm                  */   02000000
*   5 PollEIn       Bit( 2),  /*  Same as RdNorm                   */   02010000
*    7 PollERdBand  Bit( 1),  /* Data from a non-zero band may be       02020000
*                                read                          @D1C*/   02030000
*    7 PollERdNorm  Bit( 1),  /*   Data on band 0 may be read.     */   02040000
*                                                                       02050000
*  3 PollRevents Char(2)   ,  /* Revents (returned events)         */   02060000
*   5 *             Bit( 1),  /*  Reserved - DO NOT USE        @D1A*/   02070000
*   5 *             Bit( 7),  /*  Reserved.                    @D1C*/   02080000
*   5 PollRNVal     Bit( 1),  /*  Invalid FD member.(Revent Only)  */   02090000
*   5 PollRHup      Bit( 1),  /* Hangup occurred (Revent Only) @D1C*/   02100000
*   5 PollRErr      Bit( 1),  /*  Error occurred.   (Revent Only)  */   02110000
*   5 PollRPri      Bit( 1),  /* High-pri data may be recv'd   @D1C*/   02120000
*   5 PollRWrBand   Bit( 1),  /* Priority data may be written  @D1C*/   02130000
*   5 PollRWrNorm   Bit( 1),  /*  Data on band 0 may be written.   */   02140000
*    7 PollROut     Bit( 1),  /*   Same as WrNorm                  */   02150000
*   5 PollRIn       Bit( 2),  /*  Same as RdNorm                   */   02160000
*    7 PollRRdBand  Bit( 1),  /* Data from a non-zero band may be       02170000
*                                read                          @D1A*/   02180000
*    7 PollRRdNorm  Bit( 1);  /*   Data on band 0 may be read.     */   02190000
*                                                                       02200000
*/********************************************************************/ 02210000
*/* Constants                                                        */ 02220000
*/********************************************************************/ 02230000
*Declare                                                                02240000
* #PollFdLen Fixed(31) Constant(Length(PollFd)),                        02250000
* #PollEMask Char(2)   Constant('001F'X),                     /* @D1A*/ 02260000
* #PollRdMask    Fixed(32) Constant('00130000'X), /* All Rd bits @D2A*/ 02270000
* #PollWrMask    Fixed(32) Constant('000C0000'X), /* All Wr bits @D2A*/ 02280000
* #PollPriMask   Fixed(32) Constant('00100000'X), /* PollPri     @D2A*/ 02290000
* #PollinMask    Fixed(32) Constant('00030000'X), /* Other Rds   @D2A*/ 02300000
* #PollRNMask    Fixed(32) Constant('00010000'X), /* Read Normal @P2A*/ 02310000
* #PollWNMask    Fixed(32) Constant('00040000'X), /* Write Norm  @P2A*/ 02320000
* #PollEvMask    Fixed(32) Constant('001F0000'X), /* Events      @P3A*/ 02330000
* #PollErrMask   Fixed(32) Constant('00200000'X); /* PollErr     @02A*/ 02340000
*                                                                       02350000
*                                                                       02360000
*/* End of PL/X Source                                               */ 02370000
* %IF BPXYPOLL_LIST ^= 'NO' &                                           02380000
*    ZCBPRINT ^= 'NO' %THEN                                             02390000
*   %GOTO BPXYPOLL_4;                                                   02400000
*   @LIST POP NOECHO;                                                   02410000
* %BPXYPOLL_4:;                                                         02420000
