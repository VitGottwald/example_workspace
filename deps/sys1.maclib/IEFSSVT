*%IEFSSVT: MACRO KEYS(SUBNAME,REQUEST,SSVTDATA,OUTTOKEN,SUBPOOL,        00000100
*                 MAXENTRIES,LOADTOGLOBAL,ERRFUNCT,INTOKEN,RETCODE,     00000200
*                 RSNCODE,COM,PLISTVER,MF);                             00000300
*/**** START OF SPECIFICATIONS **************************************** 00000400
*                                                                     * 00000500
*                                                                     * 00000600
*01* MACRO NAME:  IEFSSVT                               -10/24/16-<1> * 00000700
*                                                                     * 00000800
*                                                                     * 00000900
*01* DESCRIPTIVE NAME:  Subsystem Vector Table Service Macro          * 00001000
*                                                                     * 00001100
*01* PROPRIETARY STATEMENT:                                           * 00001200
*                                                                     * 00001300
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00001400
*     5650-ZOS COPYRIGHT IBM CORP. 1994, 2017                         * 00001500
*                                                                     * 00001600
* STATUS= HBB77B0                                                     * 00001700
*                                                                     * 00001800
*                                                                     * 00001900
*                                                                     * 00002000
*01* FUNCTION:                                                        * 00002100
*                                                                     * 00002200
*      Use the IEFSSVT macro to build and modify subsystem vector     * 00002300
*      tables.                                                        * 00002400
*                                                                     * 00002500
*01* EXTERNAL CLASSIFICATION:  PI                                     * 00002600
*                                                                     * 00002700
*01* END OF EXTERNAL CLASSIFICATION:                                  * 00002800
*                                                                     * 00002900
*01* ENVIRONMENT:                                                     * 00003000
*                                                                     * 00003100
*                                                                     * 00003200
*      Minimum authorization: All services require one of the         * 00003300
*                        following:                                   * 00003400
*                                                                     * 00003500
*                                                                     * 00003600
*                        o   Supervisor state                         * 00003700
*                                                                     * 00003800
*                        o   Any system PSW key                       * 00003900
*                                                                     * 00004000
*                        o   PSW key mask permitting use of any       * 00004100
*                            system key                               * 00004200
*                                                                     * 00004300
*                        o   APF authorization.                       * 00004400
*                                                                     * 00004500
*                                                                     * 00004600
*                                                                     * 00004700
*      Dispatchable unit mode: Task mode.                             * 00004800
*                                                                     * 00004900
*      Cross Memory Mode: PASN=HASN=SASN.                             * 00005000
*                                                                     * 00005100
*      AMODE:            24- or 31-bit.                               * 00005200
*                                                                     * 00005300
*      ASC mode:         Primary or Access Register.                  * 00005400
*                                                                     * 00005500
*      Interrupt status: Enabled for I/O and external interrupts.     * 00005600
*                                                                     * 00005700
*      Locks:            No locks held.                               * 00005800
*                                                                     * 00005900
*      Control parameters: Control parameters must be in the primary  * 00006000
*                        address space.                               * 00006100
*                                                                     * 00006200
*                                                                     * 00006300
*                                                                     * 00006400
*01* PROGRAMMING REQUIREMENTS:                                        * 00006500
*                                                                     * 00006600
*    Before issuing the IEFSSVT macro the caller must have included   * 00006700
*    the following system control blocks:                             * 00006800
*                                                                     * 00006900
*                                                                     * 00007000
*    o   CVT (mapped by macro CVT)                                    * 00007100
*                                                                     * 00007200
*    o   JESCT (mapped by macro IEFJESCT)                             * 00007300
*                                                                     * 00007400
*                                                                     * 00007500
*                                                                     * 00007600
*    If using this macro in a reentrant routine, the list form of the * 00007700
*    macro must be coded in order to use the execute form.            * 00007800
*                                                                     * 00007900
*    In a PL/X routine, the caller must invoke the ?EPILOG macro.     * 00008000
*                                                                     * 00008100
*    The caller must include the IEFJSRC macro to define the Dynamic  * 00008200
*    SSI return and reason codes.                                     * 00008300
*                                                                     * 00008400
*01* RESTRICTIONS:                                                    * 00008500
*                                                                     * 00008600
*    The caller may not have an EUT FRR established.                  * 00008700
*                                                                     * 00008800
*    The services provided by IEFSSVT are available only to dynamic   * 00008900
*    subsystems, i.e., those defined to the SSI by one of the         * 00009000
*    following mechanisms:                                            * 00009100
*                                                                     * 00009200
*                                                                     * 00009300
*    o   Keyword-format IEFSSNxx parmlib member entry                 * 00009400
*                                                                     * 00009500
*    o   IEFSSI REQUEST=ADD macro                                     * 00009600
*                                                                     * 00009700
*    o   SETSSI ADD command                                           * 00009800
*                                                                     * 00009900
*                                                                     * 00010000
*                                                                     * 00010100
*01* INPUT REGISTER INFORMATION:                                      * 00010200
*                                                                     * 00010300
*    There are no input register requirements for issuing the IEFSSVT * 00010400
*    macro.                                                           * 00010500
*                                                                     * 00010600
*01* OUTPUT REGISTER INFORMATION:                                     * 00010700
*                                                                     * 00010800
*    When control returns to the caller, the GPRs contain:            * 00010900
*                                                                     * 00011000
*                                                                     * 00011100
*    REGISTER  CONTENTS                                               * 00011200
*                                                                     * 00011300
*    0         Reason code                                            * 00011400
*                                                                     * 00011500
*    1         Used as work register by the system                    * 00011600
*                                                                     * 00011700
*    2-13      Unchanged                                              * 00011800
*                                                                     * 00011900
*    14        Used as work register by the system.                   * 00012000
*                                                                     * 00012100
*    15        Return code                                            * 00012200
*                                                                     * 00012300
*                                                                     * 00012400
*                                                                     * 00012500
*    When control returns to the caller, the ARs contain:             * 00012600
*                                                                     * 00012700
*                                                                     * 00012800
*    REGISTER  CONTENTS                                               * 00012900
*                                                                     * 00013000
*    0-1       Used as work registers by the system.                  * 00013100
*                                                                     * 00013200
*    2-13      Unchanged                                              * 00013300
*                                                                     * 00013400
*    14-15     Used as work registers by the system.                  * 00013500
*                                                                     * 00013600
*                                                                     * 00013700
*                                                                     * 00013800
*01* PERFORMANCE IMPLICATIONS:                                        * 00013900
*                                                                     * 00014000
*    None.                                                            * 00014100
*                                                                     * 00014200
*01* SYNTAX:                                                          * 00014300
*                                                                     * 00014400
*Ýxlabel¨  IEFSSVT     SUBNAME=xsubname                               * 00014500
*                   Ð ,REQUEST=CREATE                                 * 00014600
*                   !     ,SSVTDATA=xssvtdata                         * 00014700
*                   !     ,OUTTOKEN=xouttoken                         * 00014800
*                   !    Ý,SUBPOOL=»xsubpool!241º¨                    * 00014900
*                   !     ,MAXENTRIES=xmaxentries                     * 00015000
*                   !    Ý,LOADTOGLOBAL=»NO!YESº¨                     * 00015100
*                   !    Ý,ERRFUNCT=xerrfunct¨                        * 00015200
*                   Ô ,REQUEST=DISABLE                                * 00015300
*                   !     ,SSVTDATA=xssvtdata                         * 00015400
*                   !    Ý,INTOKEN=»xintoken!NULLº¨                   * 00015500
*                   Ô ,REQUEST=ENABLE                                 * 00015600
*                   !     ,SSVTDATA=xssvtdata                         * 00015700
*                   !    Ý,INTOKEN=»xintoken!NULLº¨                   * 00015800
*                   !    Ý,LOADTOGLOBAL=»NO!YESº¨                     * 00015900
*                   !    Ý,ERRFUNCT=xerrfunct¨                        * 00016000
*                   ¿ ,REQUEST=EXCHANGE                               * 00016100
*                         ,SSVTDATA=xssvtdata                         * 00016200
*                        Ý,INTOKEN=»xintoken!NULLº¨                   * 00016300
*                        Ý,LOADTOGLOBAL=»NO!YESº¨                     * 00016400
*                        Ý,ERRFUNCT=xerrfunct¨                        * 00016500
*                    Ý,RETCODE=xretcode¨                              * 00016600
*                    Ý,RSNCODE=xrsncode¨                              * 00016700
*                    Ý,COM=»xcom!NULLº¨                               * 00016800
*                    Ý,PLISTVER=»xplistver!IMPLIED_VERSIONº¨          * 00016900
*                   ÐÝ,MF=S¨                                          * 00017000
*                   ÔÝ,MF=(L,xmfctrl»,xmfattr!0Dº)¨                   * 00017100
*                   ¿Ý,MF=(E,xmfctrl»,COMPLETEº)¨                     * 00017200
*                                                                     * 00017300
*                                                                     * 00017400
*      Where:                                                         * 00017500
*                                                                     * 00017600
*                                                                     * 00017700
*      Ýxlabel¨                                                       * 00017800
*          is an optional symbol, starting in column 1, that is the   * 00017900
*          name on the IEFSSVT macro invocation.  The name must       * 00018000
*          conform to the rules for an ordinary assembler language    * 00018100
*          symbol.                                                    * 00018200
*          DEFAULT: No name.                                          * 00018300
*                                                                     * 00018400
*                                                                     * 00018500
*                                                                     * 00018600
*                                                                     * 00018700
*      SUBNAME(xsubname)                                              * 00018800
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00018900
*          only) of a required 4 character input containing the       * 00019000
*          subsystem name.  It must be the name of a subsystem that   * 00019100
*          has been previously defined to the system using SSI        * 00019200
*          services.                                                  * 00019300
*                                                                     * 00019400
*          If the length of the subsystem name is less than 4         * 00019500
*          characters, it must be padded to the right with blanks or  * 00019600
*          nulls.                                                     * 00019700
*                                                                     * 00019800
*                                                                     * 00019900
*                                                                     * 00020000
*                                                                     * 00020100
*       REQUEST(»CREATE!DISABLE!ENABLE!EXCHANGEº)                     * 00020200
*          is a required keyword input that specifies the action to   * 00020300
*          be performed.                                              * 00020400
*                                                                     * 00020500
*                                                                     * 00020600
*           REQUEST(CREATE)                                           * 00020700
*              Use the CREATE request to cause a new subsystem vector * 00020800
*              table to be built and initialized.                     * 00020900
*                                                                     * 00021000
*              Vector tables created through this service will be     * 00021100
*              located in storage above the 16M line if the requested * 00021200
*              subpool permits.                                       * 00021300
*                                                                     * 00021400
*                                                                     * 00021500
*              SSVTDATA(xssvtdata)                                    * 00021600
*                  is a required input.  It is the name (RS-type) of  * 00021700
*                  the function routine input table relating the      * 00021800
*                  function codes to be supported by the vector table * 00021900
*                  and the function routines that respond to them.    * 00022000
*                  The table is built using the IEFSSVTI macro.  This * 00022100
*                  field should contain the name specified by the     * 00022200
*                  IEFSSVTI SSVTDATA key.                             * 00022300
*                                                                     * 00022400
*                                                                     * 00022500
*                                                                     * 00022600
*                                                                     * 00022700
*              OUTTOKEN(xouttoken)                                    * 00022800
*                  is the name (RS-type) (or address in register      * 00022900
*                  (2)-(12) ASM only) of a required 32 bit output     * 00023000
*                  where the token representing the new subsystem     * 00023100
*                  vector table will be returned.  The token is used  * 00023200
*                  to identify the vector table, for example when     * 00023300
*                  activating the subsystem using the IEFSSI          * 00023400
*                  REQUEST=ACTIVATE macro.                            * 00023500
*                                                                     * 00023600
*                                                                     * 00023700
*                                                                     * 00023800
*                                                                     * 00023900
*              ÝSUBPOOL(»xsubpool!241º)¨                              * 00024000
*                  is the name (RS-type) (or address in register      * 00024100
*                  (2)-(12) ASM only) of an optional byte input       * 00024200
*                  containing the subpool number in which the         * 00024300
*                  subsystem vector table is to be built.  The        * 00024400
*                  subpool must represent common storage.             * 00024500
*                  DEFAULT: 241                                       * 00024600
*                                                                     * 00024700
*                                                                     * 00024800
*                                                                     * 00024900
*                                                                     * 00025000
*              MAXENTRIES(xmaxentries)                                * 00025100
*                  is the name (RS-type) (or address in register      * 00025200
*                  (2)-(12) ASM only) of a required halfword input    * 00025300
*                  that defines the maximum number of function        * 00025400
*                  routine entries that can be contained by the       * 00025500
*                  vector table.  The maximum number must:            * 00025600
*                                                                     * 00025700
*                                                                     * 00025800
*                  o   Be greater than or equal to 1 and less than or * 00025900
*                      equal to 255.                                  * 00026000
*                                                                     * 00026100
*                  o   Be greater than or equal to number of function * 00026200
*                      routines defined in the input table created    * 00026300
*                      with the IEFSSVTI macro.                       * 00026400
*                                                                     * 00026500
*                  o   Contain the maximum number of function routine * 00026600
*                      entries the calling subsystem will require     * 00026700
*                      throughout the life of the subsystem vector    * 00026800
*                      table.                                         * 00026900
*                                                                     * 00027000
*                                                                     * 00027100
*                                                                     * 00027200
*                                                                     * 00027300
*                                                                     * 00027400
*                                                                     * 00027500
*              ÝLOADTOGLOBAL(»NO!YESº)¨                               * 00027600
*                  is an optional keyword input that indicates that   * 00027700
*                  the function routines are to be loaded to global   * 00027800
*                  storage.  Use this keyword when the function       * 00027900
*                  routines are specified by name in the function     * 00028000
*                  routine input table created using IEFSSVTI and do  * 00028100
*                  not reside in the link pack area.  This keyword is * 00028200
*                  ignored for input function routines that are       * 00028300
*                  specified by address rather than name.             * 00028400
*                                                                     * 00028500
*                  If LOADTOGLOBAL=YES, the SSI will issue a LOAD for * 00028600
*                  the named function routine with the following      * 00028700
*                  parameters:                                        * 00028800
*                                                                     * 00028900
*                                                                     * 00029000
*                      EOM=YES                                        * 00029100
*                                                                     * 00029200
*                      LSEARCH=NO                                     * 00029300
*                                                                     * 00029400
*                      GLOBAL=(YES,P)                                 * 00029500
*                                                                     * 00029600
*                                                                     * 00029700
*                  DEFAULT: NO                                        * 00029800
*                                                                     * 00029900
*                                                                     * 00030000
*                  LOADTOGLOBAL(NO)                                   * 00030100
*                      Load to global is not necessary for the        * 00030200
*                      function routines.                             * 00030300
*                                                                     * 00030400
*                  LOADTOGLOBAL(YES)                                  * 00030500
*                      Load to global is necessary for the function   * 00030600
*                      routines.                                      * 00030700
*                                                                     * 00030800
*                                                                     * 00030900
*                                                                     * 00031000
*                                                                     * 00031100
*                                                                     * 00031200
*                                                                     * 00031300
*              ÝERRFUNCT(xerrfunct)¨                                  * 00031400
*                  is the name (RS-type) (or address in register      * 00031500
*                  (2)-(12) ASM only) of an optional 8 character      * 00031600
*                  output that receives the function routine name     * 00031700
*                  being processed when an error occurred.  Check     * 00031800
*                  this output field if you receive return code       * 00031900
*                  IEFSSVT_LOAD_ERROR (decimal 20) from the IEFSSVT   * 00032000
*                  CREATE request.                                    * 00032100
*                                                                     * 00032200
*                                                                     * 00032300
*                                                                     * 00032400
*           REQUEST(DISABLE)                                          * 00032500
*              Use the DISABLE request to deactivate specific         * 00032600
*              function codes.                                        * 00032700
*                                                                     * 00032800
*                                                                     * 00032900
*              SSVTDATA(xssvtdata)                                    * 00033000
*                  is a required input.  It is the name (RS-type) of  * 00033100
*                  the function routine input table identifying the   * 00033200
*                  function codes to be disabled.  The table is built * 00033300
*                  using the IEFSSVTI macro.  This field should       * 00033400
*                  contain the name specified by the IEFSSVTI         * 00033500
*                  SSVTDATA key.                                      * 00033600
*                                                                     * 00033700
*                  For a DISABLE request, the function routine names  * 00033800
*                  or addresses in the input table are ignored.  Only * 00033900
*                  the function code information is used.             * 00034000
*                                                                     * 00034100
*                                                                     * 00034200
*                                                                     * 00034300
*                                                                     * 00034400
*              ÝINTOKEN(»xintoken!NULLº)¨                             * 00034500
*                  is the name (RS-type) (or address in register      * 00034600
*                  (2)-(12) ASM only) of an optional 32 bit input     * 00034700
*                  that specifies the token of the target subsystem   * 00034800
*                  vector table.                                      * 00034900
*                  DEFAULT: NULL                                      * 00035000
*                                                                     * 00035100
*                                                                     * 00035200
*                                                                     * 00035300
*           REQUEST(ENABLE)                                           * 00035400
*              Use the ENABLE request to activate new function codes  * 00035500
*              or to reactivate function codes that have been         * 00035600
*              previously disabled.  New function codes can be        * 00035700
*              enabled only if the vector table has enough empty      * 00035800
*              function routine slots to contain any function         * 00035900
*              routines not already represented in the table.         * 00036000
*                                                                     * 00036100
*                                                                     * 00036200
*              SSVTDATA(xssvtdata)                                    * 00036300
*                  is a required input.  It is the name (RS-type) of  * 00036400
*                  the function routine input table identifying the   * 00036500
*                  new function codes to be supported by the vector   * 00036600
*                  table and the function routines that respond to    * 00036700
*                  them.  The table is built using the IEFSSVTI       * 00036800
*                  macro.  This field should contain the name         * 00036900
*                  specified by the IEFSSVTI SSVTDATA key.            * 00037000
*                                                                     * 00037100
*                                                                     * 00037200
*                                                                     * 00037300
*                                                                     * 00037400
*              ÝINTOKEN(»xintoken!NULLº)¨                             * 00037500
*                  is the name (RS-type) (or address in register      * 00037600
*                  (2)-(12) ASM only) of an optional 32 bit input     * 00037700
*                  that specifies the token of the target subsystem   * 00037800
*                  vector table.                                      * 00037900
*                  DEFAULT: NULL                                      * 00038000
*                                                                     * 00038100
*                                                                     * 00038200
*                                                                     * 00038300
*                                                                     * 00038400
*              ÝLOADTOGLOBAL(»NO!YESº)¨                               * 00038500
*                  is an optional keyword input that indicates that   * 00038600
*                  the function routines are to be loaded to global   * 00038700
*                  storage.  Use this keyword when the function       * 00038800
*                  routines are specified by name in the function     * 00038900
*                  routine input table created using IEFSSVTI and do  * 00039000
*                  not reside in the link pack area.  This keyword is * 00039100
*                  ignored for input function routines that are       * 00039200
*                  specified by address rather than name.             * 00039300
*                                                                     * 00039400
*                  If LOADTOGLOBAL=YES, the SSI will issue a LOAD for * 00039500
*                  the named function routine with the following      * 00039600
*                  parameters:                                        * 00039700
*                                                                     * 00039800
*                                                                     * 00039900
*                      EOM=YES                                        * 00040000
*                                                                     * 00040100
*                      LSEARCH=NO                                     * 00040200
*                                                                     * 00040300
*                      GLOBAL=(YES,P)                                 * 00040400
*                                                                     * 00040500
*                                                                     * 00040600
*                  DEFAULT: NO                                        * 00040700
*                                                                     * 00040800
*                                                                     * 00040900
*                  LOADTOGLOBAL(NO)                                   * 00041000
*                      Load to global is not necessary for the        * 00041100
*                      function routines.                             * 00041200
*                                                                     * 00041300
*                  LOADTOGLOBAL(YES)                                  * 00041400
*                      Load to global is necessary for the function   * 00041500
*                      routines.                                      * 00041600
*                                                                     * 00041700
*                                                                     * 00041800
*                                                                     * 00041900
*                                                                     * 00042000
*                                                                     * 00042100
*                                                                     * 00042200
*              ÝERRFUNCT(xerrfunct)¨                                  * 00042300
*                  is the name (RS-type) (or address in register      * 00042400
*                  (2)-(12) ASM only) of an optional 8 character      * 00042500
*                  output that receives the function routine name     * 00042600
*                  being processed when an error occurred.  Check     * 00042700
*                  this output field if you get a return code         * 00042800
*                  IEFSSVT_LOAD_ERROR (decimal 20) from the macro.    * 00042900
*                                                                     * 00043000
*                                                                     * 00043100
*                                                                     * 00043200
*           REQUEST(EXCHANGE)                                         * 00043300
*              Use the EXCHANGE request to identify new function      * 00043400
*              routines to respond to a set of function codes.        * 00043500
*                                                                     * 00043600
*                                                                     * 00043700
*              SSVTDATA(xssvtdata)                                    * 00043800
*                  is a required input.  It is the name (RS-type) of  * 00043900
*                  the function routine input table identifying the   * 00044000
*                  function codes affected by the exchange request    * 00044100
*                  and the new function routines that are to support  * 00044200
*                  them.  The table is built using the IEFSSVTI       * 00044300
*                  macro.  This field should contain the name         * 00044400
*                  specified by the IEFSSVTI SSVTDATA key.            * 00044500
*                                                                     * 00044600
*                                                                     * 00044700
*                                                                     * 00044800
*                                                                     * 00044900
*              ÝINTOKEN(»xintoken!NULLº)¨                             * 00045000
*                  is the name (RS-type) (or address in register      * 00045100
*                  (2)-(12) ASM only) of an optional 32 bit input     * 00045200
*                  that specifies the token of the target subsystem   * 00045300
*                  vector table.                                      * 00045400
*                  DEFAULT: NULL                                      * 00045500
*                                                                     * 00045600
*                                                                     * 00045700
*                                                                     * 00045800
*                                                                     * 00045900
*              ÝLOADTOGLOBAL(»NO!YESº)¨                               * 00046000
*                  is an optional keyword input that indicates that   * 00046100
*                  the function routines are to be loaded to global   * 00046200
*                  storage.  Use this keyword when the function       * 00046300
*                  routines are specified by name in the function     * 00046400
*                  routine input table created using IEFSSVTI and do  * 00046500
*                  not reside in the link pack area.  This keyword is * 00046600
*                  ignored for input function routines that are       * 00046700
*                  specified by address rather than name.             * 00046800
*                                                                     * 00046900
*                  If LOADTOGLOBAL=YES, the SSI will issue a LOAD for * 00047000
*                  the named function routine with the following      * 00047100
*                  parameters:                                        * 00047200
*                                                                     * 00047300
*                                                                     * 00047400
*                      EOM=YES                                        * 00047500
*                                                                     * 00047600
*                      LSEARCH=NO                                     * 00047700
*                                                                     * 00047800
*                      GLOBAL=(YES,P)                                 * 00047900
*                                                                     * 00048000
*                                                                     * 00048100
*                  DEFAULT: NO                                        * 00048200
*                                                                     * 00048300
*                                                                     * 00048400
*                  LOADTOGLOBAL(NO)                                   * 00048500
*                      Load to global is not necessary for the        * 00048600
*                      function routines.                             * 00048700
*                                                                     * 00048800
*                  LOADTOGLOBAL(YES)                                  * 00048900
*                      Load to global is necessary for the function   * 00049000
*                      routines.                                      * 00049100
*                                                                     * 00049200
*                                                                     * 00049300
*                                                                     * 00049400
*                                                                     * 00049500
*                                                                     * 00049600
*                                                                     * 00049700
*              ÝERRFUNCT(xerrfunct)¨                                  * 00049800
*                  is the name (RS-type) (or address in register      * 00049900
*                  (2)-(12) ASM only) of an optional 8 character      * 00050000
*                  output that receives the function routine name     * 00050100
*                  being processed when an error occurred.  Check     * 00050200
*                  this output field if you receive return code       * 00050300
*                  IEFSSVT_LOAD_ERROR (decimal 20) from the IEFSSVT   * 00050400
*                  EXCHANGE request.                                  * 00050500
*                                                                     * 00050600
*                                                                     * 00050700
*                                                                     * 00050800
*                                                                     * 00050900
*                                                                     * 00051000
*                                                                     * 00051100
*                                                                     * 00051200
*                                                                     * 00051300
*      ÝRETCODE(xretcode)¨                                            * 00051400
*          is the name (RS-type) of an optional fullword output       * 00051500
*          variable (or register (2)-(12) or (15) ASM only) into      * 00051600
*          which the return code is to be copied from GPR 15.  If you * 00051700
*          specify 15, GPR15, REG15, or R15 (within or without        * 00051800
*          parentheses), the value will be left in GPR 15.            * 00051900
*                                                                     * 00052000
*                                                                     * 00052100
*                                                                     * 00052200
*                                                                     * 00052300
*      ÝRSNCODE(xrsncode)¨                                            * 00052400
*          is the name (RS-type) of an optional fullword output       * 00052500
*          variable into which the reason code is to be copied from   * 00052600
*          GPR 0.  If you specify 0, 00, GPR0, GPR00, REG0, REG00, or * 00052700
*          R0 (within or without parentheses), the value will be left * 00052800
*          in GPR 0.                                                  * 00052900
*                                                                     * 00053000
*                                                                     * 00053100
*                                                                     * 00053200
*                                                                     * 00053300
*      ÝCOM(»xcom!NULLº)¨                                             * 00053400
*          is an optional character input  that will appear in the    * 00053500
*          block comment before the macro invocation echo. It can be  * 00053600
*          used to comment the macro invocation.  The comment string  * 00053700
*          must be enclosed in quotes if it contains any lower case   * 00053800
*          characters.                                                * 00053900
*          DEFAULT: NULL                                              * 00054000
*                                                                     * 00054100
*                                                                     * 00054200
*                                                                     * 00054300
*                                                                     * 00054400
*      ÝPLISTVER(»xplistver!IMPLIED_VERSIONº)¨                        * 00054500
*          is an optional byte input decimal value in the "1-1" range * 00054600
*          that specifies the macro version.  PLISTVER is the only    * 00054700
*          key allowed on the list form of MF and determines which    * 00054800
*          parameter list is generated.  Note that MAX may be         * 00054900
*          specified instead of a number, and the parameter list will * 00055000
*          be of the largest size currently supported. This size may  * 00055100
*          grow from release to release (thus possibly affecting the  * 00055200
*          amount of storage needed by your program).  If your        * 00055300
*          program can tolerate this, IBM recommends that you always  * 00055400
*          specify MAX when creating the list form parameter list as  * 00055500
*          that will ensure that the list form parameter list is      * 00055600
*          always long enough to hold whatever parameters might be    * 00055700
*          specified on the execute form.                             * 00055800
*          DEFAULT: IMPLIED_VERSION.  When PLISTVER is omitted, the   * 00055900
*          default is the lowest version which allows all of the      * 00056000
*          parameters specified on the invocation to be processed.    * 00056100
*                                                                     * 00056200
*                                                                     * 00056300
*                                                                     * 00056400
*                                                                     * 00056500
*      ÝMF(»S!L!Eº)¨                                                  * 00056600
*          is an optional keyword input which specifies the macro     * 00056700
*          form.                                                      * 00056800
*          DEFAULT: S                                                 * 00056900
*                                                                     * 00057000
*                                                                     * 00057100
*          ÝMF(S)¨                                                    * 00057200
*              specifies the standard form of the macro.  The "S"     * 00057300
*              form generates code to put the parameters into the     * 00057400
*              parameter list and invoke the desired service.  Full   * 00057500
*              checking for required macro keys is done along with    * 00057600
*              supplying defaults for omitted optional parameters.    * 00057700
*              The ?EPILOG macro must be invoked at the end of the    * 00057800
*              module.                                                * 00057900
*                                                                     * 00058000
*              For assembly language code modules, the "S" form       * 00058100
*              generates code to put the parameters into an in-line   * 00058200
*              parameter list and invoke the desired service.  Full   * 00058300
*              checking for required macro keys is done along with    * 00058400
*              supplying defaults for omitted optional parameters.    * 00058500
*                                                                     * 00058600
*          ÝMF(L,xmfctrl»,xmfattr!BDY(DWORD)º)¨                       * 00058700
*              specifies the list form of the macro.  The "L" form    * 00058800
*              defines an area to be used for the parameter list.     * 00058900
*              Only the PLISTVER key may be specified on the          * 00059000
*              invocation.  All other macro parameters are flagged as * 00059100
*              errors.  If PLISTVER is not specified, the original    * 00059200
*              parameter list definition is used.                     * 00059300
*                                                                     * 00059400
*            ,xmfctrl                                                 * 00059500
*              is a required input.  It is the name of a storage area * 00059600
*              for the parameter list.                                * 00059700
*                                                                     * 00059800
*            »,xmfattr!BDY(DWORD)º                                    * 00059900
*              is an optional 60 character input string that varies   * 00060000
*              from 1 to 60 characters. Use it to force boundary      * 00060100
*              alignment of the parameter list. Use only 0F or 0D     * 00060200
*              (assembler-only).                                      * 00060300
*              DEFAULT: 0D for Assembler, BDY(DWORD) for PL/X, which  * 00060400
*              forces the parameter list to a doubleword boundary.    * 00060500
*                                                                     * 00060600
*          ÝMF(E,xmfctrl»,COMPLETEº)¨                                 * 00060700
*              specifies the execute form of the macro.  The "E" form * 00060800
*              generates code to put the parameters into the          * 00060900
*              parameter list specified by xmfctrl and provides full  * 00061000
*              syntax checking with default setting.                  * 00061100
*                                                                     * 00061200
*            ,xmfctrl                                                 * 00061300
*              is a required input.  It is the name (RS-type) (or     * 00061400
*              address in register (1)-(12) ASM only) of a storage    * 00061500
*              area for the parameter list.                           * 00061600
*                                                                     * 00061700
*            »,COMPLETEº                                              * 00061800
*              is an optional keyword input which specifies the       * 00061900
*              degree of macro parameter syntax checking.             * 00062000
*              DEFAULT: COMPLETE                                      * 00062100
*                                                                     * 00062200
*                                                                     * 00062300
*              COMPLETE                                               * 00062400
*                  Checking for required macro keys is done and       * 00062500
*                  defaults are supplied for omitted optional         * 00062600
*                  parameters.                                        * 00062700
*                                                                     * 00062800
*                                                                     * 00062900
*                                                                     * 00063000
*                                                                     * 00063100
*                                                                     * 00063200
*                                                                     * 00063300
*                                                                     * 00063400
*01* ABEND CODES:                                                     * 00063500
*                                                                     * 00063600
*                                                                     * 00063700
*       8C5       Refer to MVS/ESA System Codes for an explanation    * 00063800
*                 and programmer responses.                           * 00063900
*                                                                     * 00064000
*                                                                     * 00064100
*                                                                     * 00064200
*01* RETURN CODES:                                                    * 00064300
*                                                                     * 00064400
*                                                                     * 00064500
*                 Return codes are documented in mapping macro        * 00064600
*                 IEFJSRC.                                            * 00064700
*                                                                     * 00064800
*                                                                     * 00064900
*                                                                     * 00065000
*01* REASON CODES:                                                    * 00065100
*                                                                     * 00065200
*       Reason codes are documented in mapping macro IEFJSRC.         * 00065300
*                                                                     * 00065400
*01* MODULE TYPE:  ASSEM-PL/X MACRO                                   * 00065500
*                                                                     * 00065600
*02*   PROCESSOR:  ASSEM-PL/X                                         * 00065700
*                                                                     * 00065800
*01* COMPONENT:  SC1B6                                                * 00065900
*                                                                     * 00066000
*01* DISTRIBUTION LIBRARY: AMACLIB                                    * 00066100
*                                                                     * 00066200
*01* MACRO USAGE NOTES:                                               * 00066300
*                                                                     * 00066400
*                                                                     * 00066500
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00066600
*        global macro variable.  Any value other than 'NO' will       * 00066700
*        result in the macro expansion being printed.  The default is * 00066800
*        'YES'.  The following examples illustrate how the ZPRINT     * 00066900
*        variable should be set.                                      * 00067000
*                                                                     * 00067100
*                    GBLC &ZPRINT                                     * 00067200
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00067300
*                                                                     * 00067400
*                                                                     * 00067500
*    2.  All keys currently contained in the IEFSSVT macro correspond * 00067600
*        to  version 1.  If you specify PLISTVER, use a value of 1 or * 00067700
*        MAX.                                                         * 00067800
*                                                                     * 00067900
*                                                                     * 00068000
*                                                                     * 00068100
*                                                                     * 00068200
*01* CHANGE ACTIVITY:                                                 * 00068300
*                                                                     * 00068400
*   Flag LineItem  FMID    Date   ID    Comment                       * 00068500
*                                                                     * 00068600
*    $L0=SSIDP    HBB5520 940210 PDBN:  Dynamic SSI                   * 00068700
*    $P1=PN70258  HBB5520 940310 PDBN:  Dynamic SSI                   * 00068800
*    $D1=DN70027  HBB5520 940414 PDBN:  Dynamic SSI                   * 00068900
*    $D2=DN70025  HBB5520 940414 PDBN:  Dynamic SSI                   * 00069000
*    $P2=PN70937  HBB5520 940908 PDBN:  Dynamic SSI                   * 00069100
*    $P3=W121740  HBB77B0 160715 PDTA:  Jumpify                       * 00069200
****** END OF SPECIFICATIONS *****************************************/ 00069300
*/********************************************************************* 00069400
         MACRO                                                          00069500
&XLABEL  IEFSSVT &SUBNAME=,&REQUEST=,&SSVTDATA=,&OUTTOKEN=,&SUBPOOL=,  *00069600
               &MAXENTRIES=,&LOADTOGLOBAL=,&ERRFUNCT=,&INTOKEN=,       *00069700
               &RETCODE=,&RSNCODE=,&COM=,&PLISTVER=,&MF=                00069800
.*                                                                      00069900
*                  MACDATE -10/24/16-<1>                                00070000
.*                                                                      00070100
.*******************************************************************    00070200
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00070300
.*******************************************************************    00070400
                  GBLC  &ZPRINT     YES=PRINT NO=NO PRINT               00070500
                  GBLC  &ZTEST      YES=TEST NO=NO TEST                 00070600
                  GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX         00070700
.*                                                                      00070800
                  GBLC  &ZIEFSSVT   YES=MACRO USED AT LEAST ONCE        00070900
.*******************************************************************    00071000
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00071100
.*******************************************************************    00071200
                  LCLC  &ZMS        ERROR MESSAGE WORK AREA             00071300
                  LCLC  &ZCNDX      SYSNDX CHARACTERS                   00071400
                  LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED          00071500
                  LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR         00071600
                  LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE         00071700
                  LCLA  &ZAWRK      USED AS A WORK AREA                 00071800
                  LCLA  &ZASIZ      USED FOR SIZE OF VALUE              00071900
                  LCLA  &ZN         NUMERIC WORK VARIABLE               00072000
                  LCLC  &ZC         CHARACTER WORK VARIABLE             00072100
                  LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE         00072200
                  LCLA  &ZTLA       VALUE TOO LONG VARIABLE             00072300
                  LCLC  &ZMAC_G     "G" or null                         00072400
&ZMAC_G           SETC  ''                                              00072500
                  LCLC  &ZMAC_LR                                        00072600
&ZMAC_LR          SETC  'LR'                                            00072700
                  LCLC  &ZMAC_L                                         00072800
&ZMAC_L           SETC  'L'                                             00072900
                  LCLC  &ZMAC_ST                                        00073000
&ZMAC_ST          SETC  'ST'                                            00073100
                  LCLC  &ZMAC_LLGT                                      00073200
&ZMAC_LLGT        SETC  'L'                                             00073300
                  LCLC  &ZMAC_LGR                                       00073400
&ZMAC_LGR         SETC  'LR'                                            00073500
                  LCLC  &ZMAC_LG                                        00073600
&ZMAC_LG          SETC  'L'                                             00073700
                  LCLC  &ZMAC_STG                                       00073800
&ZMAC_STG         SETC  'ST'                                            00073900
                  LCLA  &ZMACRET    MACRO RETURN CODE                   00074000
&ZMACRET          SETA  0           ASSUME NO ERRORS                    00074100
.*                                                                      00074200
                  LCLC  &ZCSYSLIST(255)         NONXKEY, POS ARRAY      00074300
                  LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()          00074400
                  LCLA  &ZPLLEN     PARAMETER LIST LENGTH               00074500
                  LCLC  &ZENDBASEPL             End of base PL          00074600
                  LCLA  &ZPLWORKA   PARAMETER LIST LENGTH               00074700
.*******************************************************************    00074800
.***AB.04  MACRO VARIABLES FOR RANGES AND SETS OF ARGUMENTS             00074900
.*******************************************************************    00075000
                  LCLA  &ZI         INDEX FOR ARRAY                     00075100
                  LCLA  &ZJ         INDEX FOR PARMS                     00075200
                  LCLA  &ZK         INDEX FOR PARSE                     00075300
                  LCLA  &ZLO        LOW RANGE VALUE                     00075400
                  LCLA  &ZHI        HIGH RANGE VALUE                    00075500
                  LCLC  &ZW         WORK AREA FOR PARM                  00075600
.********************************************************************   00075700
.***AB.05  INVOKE MVS MACROS TO CONTROL CODE GENERATION                 00075800
.********************************************************************   00075900
                  GBLC  &SYSSPLV    SP LEVEL 1,2,3 -SPLEVEL             00076000
                  GBLC  &SYSASCE    SYSTEM STATE P ANY AR-SYSSTATE      00076100
                  GBLA  &SYSALVL    SYSSTATE ARCHLVL                    00076200
                  GBLC  &SYSAM64    SYSSTATE AMODE64                    00076300
.*                                                                      00076400
                  AIF   (K'&SYSASCE GT 0).ZSYS4  SYS STATE DEFINED      00076500
                  AIF   (K'&SYSSPLV GT 0).ZSYS2  SP LEVEL DEFINED       00076600
                  SPLEVEL  TEST                                         00076700
.ZSYS2            ANOP  ,                                               00076800
                  AIF   ('&SYSSPLV' EQ '1').ZSYS3  PRE SP 3.1           00076900
                  AIF   ('&SYSSPLV' EQ '2').ZSYS3  PRE SP 3.1           00077000
                  SYSSTATE TEST                                         00077100
                  AGO   .ZSYS4                                          00077200
.ZSYS3            ANOP  ,                                               00077300
&SYSASCE          SETC  'P'         ASSUME SYSSTATE PRIMARY             00077400
.ZSYS4            ANOP  ,                                               00077500
                  AIF   ('&SYSAM64' NE 'YES').ZSYSN64                   00077600
&ZMAC_LLGT        SETC 'LLGT'                                           00077700
&ZMAC_LGR         SETC 'LGR'                                            00077800
&ZMAC_LG          SETC 'LG'                                             00077900
&ZMAC_STG         SETC 'STG'                                            00078000
.ZSYSN64          ANOP  ,                                               00078100
.*******************************************************************    00078200
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00078300
.*******************************************************************    00078400
                  LCLC  &XSUBNAME   ++ NAME                             00078500
                  LCLC  &XREQUEST   ++ VALUE                            00078600
                  LCLC  &XSSVTDATA  ++ NAME                             00078700
                  LCLC  &XOUTTOKEN  ++ NAME                             00078800
                  LCLC  &XSUBPOOL   ++ NAME                             00078900
                  LCLC  &XMAXENTRIES            ++ NAME                 00079000
                  LCLC  &XLOADTOGLOBAL          ++ VALUE                00079100
                  LCLC  &XERRFUNCT  ++ NAME                             00079200
                  LCLC  &XINTOKEN   ++ NAME                             00079300
                  LCLC  &XRETCODE   ++ NAME                             00079400
                  LCLC  &XRSNCODE   ++ NAME                             00079500
                  LCLC  &XCOM       ++ VALUE                            00079600
                  LCLA  &XPLISTVER  ++ VALUE                            00079700
                  LCLC  &XMF        ++ VALUE                            00079800
                  LCLC  &XMFCTRL    ++ NAME                             00079900
                  LCLC  &XMFATTR    ++ VALUE                            00080000
                  LCLC  &XMFSCK     ++ VALUE                            00080100
.*******************************************************************    00080200
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00080300
.*******************************************************************    00080400
                  LCLC  &ZXSUBNAME  ++ INPUT NAME                       00080500
                  LCLC  &ZXREQUEST  ++ INPUT VALUE                      00080600
                  LCLC  &ZXSSVTDATA             ++ INPUT NAME           00080700
                  LCLC  &ZXOUTTOKEN             ++ OUTPUT NAME          00080800
                  LCLC  &ZXSUBPOOL  ++ INPUT NAME                       00080900
                  LCLC  &ZXMAXENTRIES           ++ INPUT NAME           00081000
                  LCLC  &ZXLOADTOGLOBAL         ++ INPUT VALUE          00081100
                  LCLC  &ZXERRFUNCT             ++ OUTPUT NAME          00081200
                  LCLC  &ZXINTOKEN  ++ INPUT NAME                       00081300
                  LCLC  &ZXRETCODE  ++ OUTPUT NAME                      00081400
                  LCLC  &ZXRSNCODE  ++ OUTPUT NAME                      00081500
                  LCLC  &ZXCOM      ++ INPUT VALUE                      00081600
                  LCLC  &ZXPLISTVER             ++ INPUT VALUE          00081700
                  LCLC  &ZXMF       ++ INPUT VALUE                      00081800
                  LCLC  &ZXMFCTRL   ++ INPUT NAME                       00081900
                  LCLC  &ZXMFATTR   ++ INPUT VALUE                      00082000
                  LCLC  &ZXMFSCK    ++ INPUT VALUE                      00082100
.********************************************************************   00082200
.***AC.PLV01  PROCESS PLISTVER                                      *   00082300
.********************************************************************   00082400
&XPLISTVER      SETA  1                                                 00082500
                AIF   (K'&PLISTVER(1) LE 0).ZPLV0                       00082600
                AIF   ('&PLISTVER(1)' NE 'MAX').ZPLV0                   00082700
&XPLISTVER      SETA  1                                                 00082800
.ZPLV0          ANOP  ,                                                 00082900
.*                                                                      00083000
                AIF   (K'&PLISTVER(1) LE 0).ZPVCKE                      00083100
                AIF   ('&PLISTVER(1)' EQ 'IMPLIED_VERSION').ZPVCKE      00083200
                AIF   ('&PLISTVER(1)' EQ 'MAX').ZPVCKE                  00083300
.*-------------------------------------------------------------------   00083400
                AIF   (N'&PLISTVER LE 1).ZPVCK3  CK NUM                 00083500
&ZMS            SETC  '"PLISTVER='                                      00083600
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00083700
&ZMS            SETC  '&ZMS "PLISTVER"'                                 00083800
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00083900
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00084000
                AGO   .ZPVCK2                                           00084100
.ZPVCK3         ANOP  ,                                                 00084200
.*-------------------------------------------------------------------   00084300
                AIF   ('&PLISTVER'(1,1) NE '(').ZPVCK2                  00084400
&ZMS            SETC  '"PLISTVER='                                      00084500
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00084600
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00084700
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00084800
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00084900
                AGO   .ZPVCKE                                           00085000
.ZPVCK2         ANOP  ,                                                 00085100
.*-------------------------------------------------------------------   00085200
&ZCVAL          SETC  '&PLISTVER(1)'                                    00085300
                AIF   ('&ZCVAL'(1,1) EQ '(').ZPVCKE  IN GPR             00085400
                AIF   (T'&ZCVAL NE 'N').ZPVCK6  NUMERIC ERR             00085500
&ZN             SETA   &PLISTVER(1)        CONVERT TO ARITHMETIC        00085600
                AIF   (&ZN LT 1).ZPVCK6    TOO LOW                      00085700
                AIF   (&ZN LE 1).ZPVCK4A   NOT HIGH                     00085800
.ZPVCK6         ANOP  ,                                                 00085900
&ZMS            SETC  '"PLISTVER='                                      00086000
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00086100
&ZMS            SETC  '&ZMS THE RANGE IS "1-1"'                         00086200
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00086300
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00086400
&XPLISTVER      SETA  1                                                 00086500
                AGO   .ZPVCKE                                           00086600
.*-------------------------------------------------------------------   00086700
.ZPVCK4A        ANOP  ,                                                 00086800
                AIF   (&ZN GE &XPLISTVER).ZPVCK4                        00086900
&ZMS            SETC  'PLISTVER='                                       00087000
&ZMS            SETC  '&ZMS.&PLISTVER(1)'                               00087100
&ZMS            SETC  '&ZMS., BUT PLISTVER OF'                          00087200
&ZMS            SETC  '&ZMS &XPLISTVER'                                 00087300
                MNOTE 8,' &ZMS IS REQUIRED.'                            00087400
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00087500
                AGO   .ZPVCK5                                           00087600
.ZPVCK4         ANOP  ,                                                 00087700
&XPLISTVER      SETA  &PLISTVER(1)                                      00087800
.ZPVCK5         ANOP  ,                                                 00087900
.ZPVCKE         ANOP  ,                                                 00088000
.********************************************************************   00088100
.***AG.MF01 PROCESS MF MACRO FORMS                                      00088200
.********************************************************************   00088300
                  ACTR  10000                                           00088400
.*------------------------------------------------------------------    00088500
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00088600
&XMF              SETC  ''          INITIALIZE XVARIABLE                00088700
.*-------------------------------------------------------------------   00088800
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00088900
.ZG79             ANOP  ,                                               00089000
&ZTLC             SETC 'S'                                              00089100
                  AIF   ('&MF(1)' NE '&ZTLC').ZG80                      00089200
&XMF              SETC  'S'         SET KEYWORD                         00089300
                  AIF   (N'&MF LE 1).ZG79A      CK NUM                  00089400
&ZMS              SETC  '"MF='                                          00089500
&ZMS              SETC  '&ZMS.&MF"'                                     00089600
&ZMS              SETC  '&ZMS "MF"'                                     00089700
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00089800
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00089900
.ZG79A            ANOP  ,                                               00090000
.*-------------------------------------------------------------------   00090100
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00090200
.ZG80             ANOP  ,                                               00090300
&ZTLC             SETC 'L'                                              00090400
                  AIF   ('&MF(1)' NE '&ZTLC').ZG87                      00090500
&XMF              SETC  'L'         SET KEYWORD                         00090600
                  AIF   (N'&MF LE 3).ZG80A      CK NUM                  00090700
&ZMS              SETC  '"MF='                                          00090800
&ZMS              SETC  '&ZMS.&MF"'                                     00090900
&ZMS              SETC  '&ZMS "MF"'                                     00091000
                  MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'            00091100
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00091200
.ZG80A            ANOP  ,                                               00091300
.*-------------------------------------------------------------------   00091400
.***AG.KKCTL08 -MF(L) SPECIAL CHECK                                     00091500
                  AIF   (N'&SYSLIST NE 0).ZG80B  POSITIONALS?           00091600
                  AIF   ('&SUBNAME' NE '').ZG80B  KEYS?                 00091700
                  AIF   ('&REQUEST' NE '').ZG80B  KEYS?                 00091800
                  AIF   ('&SSVTDATA' NE '').ZG80B  KEYS?                00091900
                  AIF   ('&OUTTOKEN' NE '').ZG80B  KEYS?                00092000
                  AIF   ('&SUBPOOL' NE '').ZG80B  KEYS?                 00092100
                  AIF   ('&MAXENTRIES' NE '').ZG80B  KEYS?              00092200
                  AIF   ('&LOADTOGLOBAL' NE '').ZG80B  KEYS?            00092300
                  AIF   ('&ERRFUNCT' NE '').ZG80B  KEYS?                00092400
                  AIF   ('&INTOKEN' NE '').ZG80B  KEYS?                 00092500
                  AIF   ('&RETCODE' NE '').ZG80B  KEYS?                 00092600
                  AIF   ('&RSNCODE' NE '').ZG80B  KEYS?                 00092700
                  AIF   ('&COM' NE '').ZG80B    KEYS?                   00092800
                  AGO    .ZG80C     INVOCATION OKAY                     00092900
.ZG80B            ANOP  ,                                               00093000
&ZMS              SETC  'THE "L" FORM OF "MF"'                          00093100
&ZMS              SETC  '&ZMS CAN ONLY HAVE'                            00093200
&ZMS              SETC  '&ZMS THE "PLISTVER" KEY'                       00093300
                  MNOTE 8,' &ZMS SPECIFIED ON THE INVOCATION.'          00093400
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00093500
.ZG80C            ANOP  ,                                               00093600
.*-------------------------------------------------------------------   00093700
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00093800
&ZXMFCTRL         SETC  'INPUT'     SET IN/OUTPUT                       00093900
&XMFCTRL          SETC  '&MF(2,1)'  SET XVARIABLE                       00094000
                  AIF   (N'&MF(2) GT 1).ZG82B   MULTI                   00094100
&XMFCTRL          SETC  '&MF(2)'    SET XVARIABLE                       00094200
.ZG82B            AIF   (K'&MF(2) GT 0).ZG82C                           00094300
&ZXMFCTRL         SETC  ''          RESET IN/OUTPUT                     00094400
&ZMS              SETC  'WHEN "L" IS SPECIFIED'                         00094500
&ZMS              SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'             00094600
                  MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                    00094700
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00094800
.ZG82C            ANOP  ,                                               00094900
.*-------------------------------------------------------------------   00095000
.***AG.KCK01 NAME, OPT RQD INPUT, POS(2) -GPR NOT ALLOWED               00095100
                  AIF   (K'&ZXMFCTRL LE 0).ZG82P  NOT I/O               00095200
                  AIF   ('&XMFCTRL'(1,1) NE '(').ZG82P                  00095300
&ZXMFCTRL         SETC  ''          RESET IN/OUTPUT                     00095400
&ZMS              SETC  '"MF='                                          00095500
&ZMS              SETC  '&ZMS.&MF"'                                     00095600
&ZMS              SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'       00095700
                  MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 2.'               00095800
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00095900
.ZG82P            ANOP  ,                                               00096000
.*-------------------------------------------------------------------   00096100
.***AG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE                      00096200
&ZXMFATTR         SETC  'INPUT'     SET IN/OUTPUT                       00096300
&XMFATTR          SETC  '0D'                                            00096400
                  AIF   (K'&MF(3) LE 0).ZG85B   PARM                    00096500
&XMFATTR          SETC  '&MF(3,1)'  SET XVARIABLE                       00096600
                  AIF   (N'&MF(3) GT 1).ZG85B   MULTI                   00096700
&XMFATTR          SETC  '&MF(3)'    SET XVARIABLE                       00096800
.ZG85B            ANOP  ,                                               00096900
.*-------------------------------------------------------------------   00097000
.***AG.KCK01 VALUE, OPT INPUT, POS(3) -GPR NOT ALLOWED                  00097100
                  AIF   (K'&ZXMFATTR LE 0).ZG85P  NOT I/O               00097200
                  AIF   ('&XMFATTR'(1,1) NE '(').ZG85P                  00097300
&ZXMFATTR         SETC  ''          RESET IN/OUTPUT                     00097400
&ZMS              SETC  '"MF='                                          00097500
&ZMS              SETC  '&ZMS.&MF"'                                     00097600
&ZMS              SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'       00097700
                  MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 3.'               00097800
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00097900
.ZG85P            ANOP  ,                                               00098000
.*-------------------------------------------------------------------   00098100
.***AG.KCK03 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH                 00098200
                  AIF   (K'&ZXMFATTR LE 0).ZG85S  NOT I/O               00098300
                  AIF   (K'&XMFATTR LE 60).ZG85S  LNG OK                00098400
&ZXMFATTR         SETC  ''          RESET IN/OUTPUT                     00098500
&ZMS              SETC  '"MF='                                          00098600
&ZMS              SETC  '&ZMS.&MF"'                                     00098700
&ZMS              SETC  '&ZMS ARGUMENT 3 EXCEEDS THE MAXIMUM'           00098800
                  MNOTE 8,' &ZMS LENGTH OF 60 CHARACTERS.'              00098900
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00099000
.ZG85S            ANOP  ,                                               00099100
.*-------------------------------------------------------------------   00099200
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00099300
.ZG87             ANOP  ,                                               00099400
&ZTLC             SETC 'E'                                              00099500
                  AIF   ('&MF(1)' NE '&ZTLC').ZG95                      00099600
&XMF              SETC  'E'         SET KEYWORD                         00099700
                  AIF   (N'&MF LE 3).ZG87A      CK NUM                  00099800
&ZMS              SETC  '"MF='                                          00099900
&ZMS              SETC  '&ZMS.&MF"'                                     00100000
&ZMS              SETC  '&ZMS "MF"'                                     00100100
                  MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'            00100200
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00100300
.ZG87A            ANOP  ,                                               00100400
.*-------------------------------------------------------------------   00100500
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00100600
&ZXMFCTRL         SETC  'INPUT'     SET IN/OUTPUT                       00100700
&XMFCTRL          SETC  '&MF(2,1)'  SET XVARIABLE                       00100800
                  AIF   (N'&MF(2) GT 1).ZG89B   MULTI                   00100900
&XMFCTRL          SETC  '&MF(2)'    SET XVARIABLE                       00101000
.ZG89B            AIF   (K'&MF(2) GT 0).ZG89C                           00101100
&ZXMFCTRL         SETC  ''          RESET IN/OUTPUT                     00101200
&ZMS              SETC  'WHEN "E" IS SPECIFIED'                         00101300
&ZMS              SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'             00101400
                  MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                    00101500
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00101600
.ZG89C            ANOP  ,                                               00101700
.*-------------------------------------------------------------------   00101800
.***AG.KCK02 NAME, OPT RQD INPUT, POS(2) -GPR OUT OF RANGE              00101900
                  AIF   (K'&ZXMFCTRL LE 0).ZG89R  NOT I/O               00102000
                  AIF   ('&XMFCTRL'(1,1) NE '(').ZG89R                  00102100
&ZCGPR            SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)                      00102200
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG89P                    00102300
                  AIF   (K'&ZCGPR GT 2).ZG89Q                           00102400
                  AIF   ('&ZCGPR' EQ '0').ZG89Q                         00102500
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00102600
                  AIF   (T'&ZCGPR NE 'N').ZG89Q  INVALID REG NAME       00102700
.ZG89P            ANOP  ,                                               00102800
                  AIF   (T'&ZCGPR NE 'N').ZG89R  NON NUMERIC            00102900
                  AIF   ('&ZCGPR' LT '1').ZG89Q                         00103000
                  AIF   ('&ZCGPR' LE '12').ZG89R                        00103100
.ZG89Q            ANOP  ,                                               00103200
&ZMS              SETC  '"MF='                                          00103300
&ZMS              SETC  '&ZMS.&MF"'                                     00103400
&ZMS              SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'       00103500
                  MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'                00103600
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00103700
.ZG89R            ANOP  ,                                               00103800
.*-------------------------------------------------------------------   00103900
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00104000
&XMFSCK           SETC  ''          INITIALIZE XVARIABLE                00104100
.ZG93A   AIF   ('&MF(3)' NE 'COMPLETE').ZG94A                           00104200
&XMFSCK           SETC  'COMPLETE'  SET KEYWORD                         00104300
.*-------------------------------------------------------------------   00104400
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00104500
.ZG94A            AIF   (K'&XMFSCK GT 0).ZG94C  KEYWORD                 00104600
                  AIF   (K'&MF(3) LE 0).ZG94B                           00104700
&ZMS              SETC  '"MF='                                          00104800
&ZMS              SETC  '&ZMS.&MF"'                                     00104900
&ZMS              SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '       00105000
&ZMS              SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'             00105100
&ZMS              SETC  '&ZMS "COMPLETE".'                              00105200
                  MNOTE 8,' &ZMS '                                      00105300
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00105400
.ZG94B            ANOP  ,                                               00105500
&XMFSCK           SETC  'COMPLETE'  SET DEFAULT KEYWORD                 00105600
.ZG94C            ANOP  ,                                               00105700
&ZXMFSCK          SETC  'INPUT'     SET IN/OUTPUT                       00105800
.*------------------------------------------------------------------    00105900
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00106000
.ZG95             ANOP  ,                                               00106100
&ZXMF             SETC  'INPUT'     SET IN/OUTPUT                       00106200
                  AIF   (K'&XMF GT 0).ZG95E     VALID ARG               00106300
                  AIF   (T'&MF EQ 'O').ZG95D    OMITTED                 00106400
&ZASYSLNDX        SETA  0                                               00106500
.ZG95A            ANOP  ,           POSITIONAL MACRO KEY                00106600
&ZASYSLNDX        SETA  &ZASYSLNDX+1                                    00106700
                  AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG95C                00106800
&ZTLC             SETC 'MF'                                             00106900
                  AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG95A       00107000
.ZG95B            ANOP  ,                                               00107100
&ZXMF             SETC  ''          RESET IN/OUTPUT                     00107200
&ZMS              SETC  'THE "MF" KEY'                                  00107300
&ZMS              SETC  '&ZMS MUST CONTAIN ONE'                         00107400
                  MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                00107500
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00107600
                  AGO   .ZG95E                                          00107700
.ZG95C            ANOP  ,                                               00107800
&ZXMF             SETC  ''          RESET IN/OUTPUT                     00107900
&ZMS              SETC  '"MF='                                          00108000
&ZMS              SETC  '&ZMS.&MF"'                                     00108100
&ZMS              SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '       00108200
&ZMS              SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'             00108300
&ZMS              SETC  '&ZMS "S",'                                     00108400
&ZMS              SETC  '&ZMS "L",'                                     00108500
&ZMS              SETC  '&ZMS OR "E".'                                  00108600
                  MNOTE 8,' &ZMS '                                      00108700
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00108800
                  AGO   .ZG95E                                          00108900
.ZG95D            ANOP  ,                                               00109000
&XMF              SETC  'S'         SET DEFAULT KEYWORD                 00109100
&XMFSCK           SETC  'COMPLETE'  COMPLETE CHECKING                   00109200
.ZG95E            ANOP  ,                                               00109300
.********************************************************************   00109400
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00109500
.********************************************************************   00109600
                  ACTR  10000                                           00109700
.*-------------------------------------------------------------------   00109800
.***AG.MF03 MF=(SLE)                                                    00109900
                  AIF   ('&XMF' EQ 'L').ZGMFX                           00110000
.*----------------------------------------------------------------***   00110100
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00110200
                  AIF   (N'&SUBNAME LE 1).ZG2A  CK NUM                  00110300
&ZMS              SETC  '"SUBNAME='                                     00110400
&ZMS              SETC  '&ZMS.&SUBNAME"'                                00110500
&ZMS              SETC  '&ZMS "SUBNAME"'                                00110600
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00110700
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00110800
.ZG2A             ANOP  ,                                               00110900
.*-------------------------------------------------------------------   00111000
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00111100
&ZXSUBNAME        SETC  'INPUT'     SET IN/OUTPUT                       00111200
&XSUBNAME         SETC  '&SUBNAME(1)'           SET XVARIABLE           00111300
                  AIF   (N'&SUBNAME GT 1).ZG2B  MULTI                   00111400
&XSUBNAME         SETC  '&SUBNAME'  SET XVARIABLE                       00111500
.ZG2B             AIF   (K'&SUBNAME(1) GT 0).ZG2C                       00111600
&ZXSUBNAME        SETC  ''          RESET IN/OUTPUT                     00111700
&ZMS              SETC  ' '                                             00111800
&ZMS              SETC  '&ZMS "SUBNAME" KEY AND ITS'                    00111900
                  MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                00112000
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00112100
.ZG2C             ANOP  ,                                               00112200
.*-------------------------------------------------------------------   00112300
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00112400
                  AIF   (K'&ZXSUBNAME LE 0).ZG2R  NOT I/O               00112500
                  AIF   ('&XSUBNAME'(1,1) NE '(').ZG2R                  00112600
&ZCGPR            SETC  '&XSUBNAME'(2,K'&XSUBNAME-2)                    00112700
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG2P                     00112800
                  AIF   (K'&ZCGPR GT 2).ZG2Q                            00112900
                  AIF   ('&ZCGPR' EQ '0').ZG2Q                          00113000
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00113100
                  AIF   (T'&ZCGPR NE 'N').ZG2Q  INVALID REG NAME        00113200
.ZG2P             ANOP  ,                                               00113300
                  AIF   (T'&ZCGPR NE 'N').ZG2R  NON NUMERIC             00113400
                  AIF   ('&ZCGPR' LT '2').ZG2Q                          00113500
                  AIF   ('&ZCGPR' LE '12').ZG2R                         00113600
.ZG2Q             ANOP  ,                                               00113700
&ZMS              SETC  '"SUBNAME='                                     00113800
&ZMS              SETC  '&ZMS.&SUBNAME"'                                00113900
&ZMS              SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'       00114000
                  MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                00114100
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00114200
.ZG2R             ANOP  ,                                               00114300
.*------------------------------------------------------------------    00114400
.***AG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00114500
&XREQUEST         SETC  ''          INITIALIZE XVARIABLE                00114600
.*-------------------------------------------------------------------   00114700
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00114800
.ZG6              ANOP  ,                                               00114900
                  AIF   (K'&REQUEST(1) LE 0).ZG6A                       00115000
&ZTLC             SETC 'CREATE'                                         00115100
                  AIF   ('&REQUEST(1)' NE '&ZTLC').ZG27                 00115200
&XREQUEST         SETC  'CREATE'    SET KEYWORD                         00115300
                  AIF   (N'&REQUEST LE 1).ZG6A  CK NUM                  00115400
&ZMS              SETC  '"REQUEST='                                     00115500
&ZMS              SETC  '&ZMS.&REQUEST"'                                00115600
&ZMS              SETC  '&ZMS "REQUEST"'                                00115700
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00115800
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00115900
.ZG6A             ANOP  ,                                               00116000
.*------------------------------------------------------------------    00116100
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00116200
&ZCVAL            SETC ''           CLEAR ERROR KEY ACCUMULATOR         00116300
.ZG6A0            AIF   (K'&INTOKEN LE 0).ZG6A1  OK                     00116400
&ZCVAL            SETC '&ZCVAL INTOKEN'         INCORRECT KEY USED      00116500
.ZG6A1            AIF   (K'&ZCVAL LE 0).ZG6A2   OK                      00116600
&ZCVAL            SETC '&ZCVAL'(2,K'&ZCVAL-1)                           00116700
&ZMS              SETC  '"REQUEST'                                      00116800
&ZMS              SETC  '&ZMS.=&REQUEST"'                               00116900
&ZMS              SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'            00117000
                  MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'            00117100
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00117200
.ZG6A2            ANOP  ,                                               00117300
.*----------------------------------------------------------------***   00117400
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00117500
                  AIF   (N'&SSVTDATA LE 1).ZG8A  CK NUM                 00117600
&ZMS              SETC  '"SSVTDATA='                                    00117700
&ZMS              SETC  '&ZMS.&SSVTDATA"'                               00117800
&ZMS              SETC  '&ZMS "SSVTDATA"'                               00117900
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00118000
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00118100
.ZG8A             ANOP  ,                                               00118200
.*-------------------------------------------------------------------   00118300
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00118400
&ZXSSVTDATA       SETC  'INPUT'     SET IN/OUTPUT                       00118500
&XSSVTDATA        SETC  '&SSVTDATA(1)'          SET XVARIABLE           00118600
                  AIF   (N'&SSVTDATA GT 1).ZG8B  MULTI                  00118700
&XSSVTDATA        SETC  '&SSVTDATA'             SET XVARIABLE           00118800
.ZG8B             AIF   (K'&SSVTDATA(1) GT 0).ZG8C                      00118900
&ZXSSVTDATA       SETC  ''          RESET IN/OUTPUT                     00119000
&ZMS              SETC  ' '                                             00119100
&ZMS              SETC  '&ZMS "SSVTDATA" KEY AND ITS'                   00119200
                  MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                00119300
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00119400
.ZG8C             ANOP  ,                                               00119500
.*-------------------------------------------------------------------   00119600
.***AG.KCK01 NAME, RQD INPUT, KEYS -GPR NOT ALLOWED                     00119700
                  AIF   (K'&ZXSSVTDATA LE 0).ZG8P  NOT I/O              00119800
                  AIF   ('&XSSVTDATA'(1,1) NE '(').ZG8P                 00119900
&ZXSSVTDATA       SETC  ''          RESET IN/OUTPUT                     00120000
&ZMS              SETC  '"SSVTDATA='                                    00120100
&ZMS              SETC  '&ZMS.&SSVTDATA"'                               00120200
&ZMS              SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'       00120300
                  MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'               00120400
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00120500
.ZG8P             ANOP  ,                                               00120600
.*----------------------------------------------------------------***   00120700
.***AG.KXVAR05 NAME, RQD OUTPUT, KEYS -XVARIABLE KEY                    00120800
                  AIF   (N'&OUTTOKEN LE 1).ZG11A  CK NUM                00120900
&ZMS              SETC  '"OUTTOKEN='                                    00121000
&ZMS              SETC  '&ZMS.&OUTTOKEN"'                               00121100
&ZMS              SETC  '&ZMS "OUTTOKEN"'                               00121200
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00121300
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00121400
.ZG11A            ANOP  ,                                               00121500
.*-------------------------------------------------------------------   00121600
.***AG.KXVAR06 NAME, RQD OUTPUT, KEYS -XVARIABLE                        00121700
&ZXOUTTOKEN       SETC  'OUTPUT'    SET IN/OUTPUT                       00121800
&XOUTTOKEN        SETC  '&OUTTOKEN(1)'          SET XVARIABLE           00121900
                  AIF   (N'&OUTTOKEN GT 1).ZG11B  MULTI                 00122000
&XOUTTOKEN        SETC  '&OUTTOKEN'             SET XVARIABLE           00122100
.ZG11B            AIF   (K'&OUTTOKEN(1) GT 0).ZG11C                     00122200
&ZXOUTTOKEN       SETC  ''          RESET IN/OUTPUT                     00122300
&ZMS              SETC  ' '                                             00122400
&ZMS              SETC  '&ZMS "OUTTOKEN" KEY AND ITS'                   00122500
                  MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                00122600
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00122700
.ZG11C            ANOP  ,                                               00122800
.*-------------------------------------------------------------------   00122900
.***AG.KCK02 NAME, RQD OUTPUT, KEYS -GPR OUT OF RANGE                   00123000
                  AIF   (K'&ZXOUTTOKEN LE 0).ZG11R  NOT I/O             00123100
                  AIF   ('&XOUTTOKEN'(1,1) NE '(').ZG11R                00123200
&ZCGPR            SETC  '&XOUTTOKEN'(2,K'&XOUTTOKEN-2)                  00123300
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG11P                    00123400
                  AIF   (K'&ZCGPR GT 2).ZG11Q                           00123500
                  AIF   ('&ZCGPR' EQ '0').ZG11Q                         00123600
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00123700
                  AIF   (T'&ZCGPR NE 'N').ZG11Q  INVALID REG NAME       00123800
.ZG11P            ANOP  ,                                               00123900
                  AIF   (T'&ZCGPR NE 'N').ZG11R  NON NUMERIC            00124000
                  AIF   ('&ZCGPR' LT '2').ZG11Q                         00124100
                  AIF   ('&ZCGPR' LE '12').ZG11R                        00124200
.ZG11Q            ANOP  ,                                               00124300
&ZMS              SETC  '"OUTTOKEN='                                    00124400
&ZMS              SETC  '&ZMS.&OUTTOKEN"'                               00124500
&ZMS              SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'       00124600
                  MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                00124700
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00124800
.ZG11R            ANOP  ,                                               00124900
.*----------------------------------------------------------------***   00125000
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00125100
                  AIF   (N'&SUBPOOL LE 1).ZG14A  CK NUM                 00125200
&ZMS              SETC  '"SUBPOOL='                                     00125300
&ZMS              SETC  '&ZMS.&SUBPOOL"'                                00125400
&ZMS              SETC  '&ZMS "SUBPOOL"'                                00125500
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00125600
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00125700
.ZG14A            ANOP  ,                                               00125800
.*-------------------------------------------------------------------   00125900
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00126000
&ZXSUBPOOL        SETC  'INPUT'     SET IN/OUTPUT                       00126100
&XSUBPOOL         SETC  '241'                                           00126200
                  AIF   (K'&SUBPOOL(1) LE 0).ZG14B  PARM                00126300
&XSUBPOOL         SETC  '&SUBPOOL(1)'           SET XVARIABLE           00126400
                  AIF   (N'&SUBPOOL GT 1).ZG14B  MULTI                  00126500
&XSUBPOOL         SETC  '&SUBPOOL'  SET XVARIABLE                       00126600
.ZG14B            ANOP  ,                                               00126700
.*-------------------------------------------------------------------   00126800
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00126900
                  AIF   (K'&ZXSUBPOOL LE 0).ZG14R  NOT I/O              00127000
                  AIF   ('&XSUBPOOL'(1,1) NE '(').ZG14R                 00127100
&ZCGPR            SETC  '&XSUBPOOL'(2,K'&XSUBPOOL-2)                    00127200
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG14P                    00127300
                  AIF   (K'&ZCGPR GT 2).ZG14Q                           00127400
                  AIF   ('&ZCGPR' EQ '0').ZG14Q                         00127500
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00127600
                  AIF   (T'&ZCGPR NE 'N').ZG14Q  INVALID REG NAME       00127700
.ZG14P            ANOP  ,                                               00127800
                  AIF   (T'&ZCGPR NE 'N').ZG14R  NON NUMERIC            00127900
                  AIF   ('&ZCGPR' LT '2').ZG14Q                         00128000
                  AIF   ('&ZCGPR' LE '12').ZG14R                        00128100
.ZG14Q            ANOP  ,                                               00128200
&ZMS              SETC  '"SUBPOOL='                                     00128300
&ZMS              SETC  '&ZMS.&SUBPOOL"'                                00128400
&ZMS              SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'       00128500
                  MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                00128600
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00128700
.ZG14R            ANOP  ,                                               00128800
.*----------------------------------------------------------------***   00128900
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00129000
                  AIF   (N'&MAXENTRIES LE 1).ZG17A  CK NUM              00129100
&ZMS              SETC  '"MAXENTRIES='                                  00129200
&ZMS              SETC  '&ZMS.&MAXENTRIES"'                             00129300
&ZMS              SETC  '&ZMS "MAXENTRIES"'                             00129400
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00129500
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00129600
.ZG17A            ANOP  ,                                               00129700
.*-------------------------------------------------------------------   00129800
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00129900
&ZXMAXENTRIES     SETC  'INPUT'     SET IN/OUTPUT                       00130000
&XMAXENTRIES      SETC  '&MAXENTRIES(1)'        SET XVARIABLE           00130100
                  AIF   (N'&MAXENTRIES GT 1).ZG17B  MULTI               00130200
&XMAXENTRIES      SETC  '&MAXENTRIES'           SET XVARIABLE           00130300
.ZG17B            AIF   (K'&MAXENTRIES(1) GT 0).ZG17C                   00130400
&ZXMAXENTRIES     SETC  ''          RESET IN/OUTPUT                     00130500
&ZMS              SETC  ' '                                             00130600
&ZMS              SETC  '&ZMS "MAXENTRIES" KEY AND ITS'                 00130700
                  MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                00130800
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00130900
.ZG17C            ANOP  ,                                               00131000
.*-------------------------------------------------------------------   00131100
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00131200
                  AIF   (K'&ZXMAXENTRIES LE 0).ZG17R  NOT I/O           00131300
                  AIF   ('&XMAXENTRIES'(1,1) NE '(').ZG17R              00131400
&ZCGPR            SETC  '&XMAXENTRIES'(2,K'&XMAXENTRIES-2)              00131500
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG17P                    00131600
                  AIF   (K'&ZCGPR GT 2).ZG17Q                           00131700
                  AIF   ('&ZCGPR' EQ '0').ZG17Q                         00131800
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00131900
                  AIF   (T'&ZCGPR NE 'N').ZG17Q  INVALID REG NAME       00132000
.ZG17P            ANOP  ,                                               00132100
                  AIF   (T'&ZCGPR NE 'N').ZG17R  NON NUMERIC            00132200
                  AIF   ('&ZCGPR' LT '2').ZG17Q                         00132300
                  AIF   ('&ZCGPR' LE '12').ZG17R                        00132400
.ZG17Q            ANOP  ,                                               00132500
&ZMS              SETC  '"MAXENTRIES='                                  00132600
&ZMS              SETC  '&ZMS.&MAXENTRIES"'                             00132700
&ZMS              SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'       00132800
                  MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                00132900
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00133000
.ZG17R            ANOP  ,                                               00133100
.*----------------------------------------------------------------***   00133200
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00133300
                  AIF   (N'&LOADTOGLOBAL LE 1).ZG20A  CK NUM            00133400
&ZMS              SETC  '"LOADTOGLOBAL='                                00133500
&ZMS              SETC  '&ZMS.&LOADTOGLOBAL"'                           00133600
&ZMS              SETC  '&ZMS "LOADTOGLOBAL"'                           00133700
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00133800
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00133900
.ZG20A            ANOP  ,                                               00134000
.*-------------------------------------------------------------------   00134100
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00134200
&XLOADTOGLOBAL    SETC  ''          INITIALIZE XVARIABLE                00134300
.ZG21A   AIF   ('&LOADTOGLOBAL(1)' NE 'NO').ZG22A                       00134400
&XLOADTOGLOBAL    SETC  'NO'        SET KEYWORD                         00134500
.*-------------------------------------------------------------------   00134600
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00134700
.ZG22A   AIF   ('&LOADTOGLOBAL(1)' NE 'YES').ZG23A                      00134800
&XLOADTOGLOBAL    SETC  'YES'       SET KEYWORD                         00134900
.*-------------------------------------------------------------------   00135000
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00135100
.ZG23A            AIF   (K'&XLOADTOGLOBAL GT 0).ZG23C  KEYWORD          00135200
                  AIF   (K'&LOADTOGLOBAL(1) LE 0).ZG23B                 00135300
&ZMS              SETC  '"LOADTOGLOBAL='                                00135400
&ZMS              SETC  '&ZMS.&LOADTOGLOBAL"'                           00135500
&ZMS              SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '       00135600
&ZMS              SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'             00135700
&ZMS              SETC  '&ZMS "NO"'                                     00135800
&ZMS              SETC  '&ZMS OR "YES".'                                00135900
                  MNOTE 8,' &ZMS '                                      00136000
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00136100
.ZG23B            ANOP  ,                                               00136200
&XLOADTOGLOBAL    SETC  'NO'        SET DEFAULT KEYWORD                 00136300
.ZG23C            ANOP  ,                                               00136400
&ZXLOADTOGLOBAL   SETC  'INPUT'     SET IN/OUTPUT                       00136500
.*----------------------------------------------------------------***   00136600
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00136700
                  AIF   (N'&ERRFUNCT LE 1).ZG25A  CK NUM                00136800
&ZMS              SETC  '"ERRFUNCT='                                    00136900
&ZMS              SETC  '&ZMS.&ERRFUNCT"'                               00137000
&ZMS              SETC  '&ZMS "ERRFUNCT"'                               00137100
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00137200
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00137300
.ZG25A            ANOP  ,                                               00137400
.*-------------------------------------------------------------------   00137500
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00137600
                  AIF   (K'&ERRFUNCT(1) LE 0).ZG25C  NO PARM            00137700
&ZXERRFUNCT       SETC  'OUTPUT'    SET OUTPUT                          00137800
&XERRFUNCT        SETC  '&ERRFUNCT(1)'          SET XVARIABLE           00137900
                  AIF   (N'&ERRFUNCT GT 1).ZG25C                        00138000
&XERRFUNCT        SETC  '&ERRFUNCT'             SET XVARIABLE           00138100
.ZG25C            ANOP  ,                                               00138200
.*-------------------------------------------------------------------   00138300
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00138400
                  AIF   (K'&ZXERRFUNCT LE 0).ZG25R  NOT I/O             00138500
                  AIF   ('&XERRFUNCT'(1,1) NE '(').ZG25R                00138600
&ZCGPR            SETC  '&XERRFUNCT'(2,K'&XERRFUNCT-2)                  00138700
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG25P                    00138800
                  AIF   (K'&ZCGPR GT 2).ZG25Q                           00138900
                  AIF   ('&ZCGPR' EQ '0').ZG25Q                         00139000
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00139100
                  AIF   (T'&ZCGPR NE 'N').ZG25Q  INVALID REG NAME       00139200
.ZG25P            ANOP  ,                                               00139300
                  AIF   (T'&ZCGPR NE 'N').ZG25R  NON NUMERIC            00139400
                  AIF   ('&ZCGPR' LT '2').ZG25Q                         00139500
                  AIF   ('&ZCGPR' LE '12').ZG25R                        00139600
.ZG25Q            ANOP  ,                                               00139700
&ZMS              SETC  '"ERRFUNCT='                                    00139800
&ZMS              SETC  '&ZMS.&ERRFUNCT"'                               00139900
&ZMS              SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'       00140000
                  MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                00140100
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00140200
.ZG25R            ANOP  ,                                               00140300
.*-------------------------------------------------------------------   00140400
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00140500
.ZG27             ANOP  ,                                               00140600
&ZTLC             SETC 'DISABLE'                                        00140700
                  AIF   ('&REQUEST(1)' NE '&ZTLC').ZG34                 00140800
&XREQUEST         SETC  'DISABLE'   SET KEYWORD                         00140900
                  AIF   (N'&REQUEST LE 1).ZG27A  CK NUM                 00141000
&ZMS              SETC  '"REQUEST='                                     00141100
&ZMS              SETC  '&ZMS.&REQUEST"'                                00141200
&ZMS              SETC  '&ZMS "REQUEST"'                                00141300
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00141400
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00141500
.ZG27A            ANOP  ,                                               00141600
.*------------------------------------------------------------------    00141700
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00141800
&ZCVAL            SETC ''           CLEAR ERROR KEY ACCUMULATOR         00141900
.ZG27A0           AIF   (K'&OUTTOKEN LE 0).ZG27A1  OK                   00142000
&ZCVAL            SETC '&ZCVAL OUTTOKEN'        INCORRECT KEY USED      00142100
.ZG27A1           AIF   (K'&SUBPOOL LE 0).ZG27A2  OK                    00142200
&ZCVAL            SETC '&ZCVAL SUBPOOL'         INCORRECT KEY USED      00142300
.ZG27A2           AIF   (K'&MAXENTRIES LE 0).ZG27A3  OK                 00142400
&ZCVAL            SETC '&ZCVAL MAXENTRIES'      INCORRECT KEY USED      00142500
.ZG27A3           AIF   (K'&LOADTOGLOBAL LE 0).ZG27A4  OK               00142600
&ZCVAL            SETC '&ZCVAL LOADTOGLOBAL'    INCORRECT KEY USED      00142700
.ZG27A4           AIF   (K'&ERRFUNCT LE 0).ZG27A5  OK                   00142800
&ZCVAL            SETC '&ZCVAL ERRFUNCT'        INCORRECT KEY USED      00142900
.ZG27A5           AIF   (K'&ZCVAL LE 0).ZG27A6  OK                      00143000
&ZCVAL            SETC '&ZCVAL'(2,K'&ZCVAL-1)                           00143100
&ZMS              SETC  '"REQUEST'                                      00143200
&ZMS              SETC  '&ZMS.=&REQUEST"'                               00143300
&ZMS              SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'            00143400
                  MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'            00143500
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00143600
.ZG27A6           ANOP  ,                                               00143700
.*----------------------------------------------------------------***   00143800
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00143900
                  AIF   (N'&SSVTDATA LE 1).ZG29A  CK NUM                00144000
&ZMS              SETC  '"SSVTDATA='                                    00144100
&ZMS              SETC  '&ZMS.&SSVTDATA"'                               00144200
&ZMS              SETC  '&ZMS "SSVTDATA"'                               00144300
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00144400
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00144500
.ZG29A            ANOP  ,                                               00144600
.*-------------------------------------------------------------------   00144700
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00144800
&ZXSSVTDATA       SETC  'INPUT'     SET IN/OUTPUT                       00144900
&XSSVTDATA        SETC  '&SSVTDATA(1)'          SET XVARIABLE           00145000
                  AIF   (N'&SSVTDATA GT 1).ZG29B  MULTI                 00145100
&XSSVTDATA        SETC  '&SSVTDATA'             SET XVARIABLE           00145200
.ZG29B            AIF   (K'&SSVTDATA(1) GT 0).ZG29C                     00145300
&ZXSSVTDATA       SETC  ''          RESET IN/OUTPUT                     00145400
&ZMS              SETC  ' '                                             00145500
&ZMS              SETC  '&ZMS "SSVTDATA" KEY AND ITS'                   00145600
                  MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                00145700
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00145800
.ZG29C            ANOP  ,                                               00145900
.*-------------------------------------------------------------------   00146000
.***AG.KCK01 NAME, RQD INPUT, KEYS -GPR NOT ALLOWED                     00146100
                  AIF   (K'&ZXSSVTDATA LE 0).ZG29P  NOT I/O             00146200
                  AIF   ('&XSSVTDATA'(1,1) NE '(').ZG29P                00146300
&ZXSSVTDATA       SETC  ''          RESET IN/OUTPUT                     00146400
&ZMS              SETC  '"SSVTDATA='                                    00146500
&ZMS              SETC  '&ZMS.&SSVTDATA"'                               00146600
&ZMS              SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'       00146700
                  MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'               00146800
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00146900
.ZG29P            ANOP  ,                                               00147000
.*----------------------------------------------------------------***   00147100
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00147200
                  AIF   (N'&INTOKEN LE 1).ZG32A  CK NUM                 00147300
&ZMS              SETC  '"INTOKEN='                                     00147400
&ZMS              SETC  '&ZMS.&INTOKEN"'                                00147500
&ZMS              SETC  '&ZMS "INTOKEN"'                                00147600
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00147700
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00147800
.ZG32A            ANOP  ,                                               00147900
.*-------------------------------------------------------------------   00148000
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00148100
&ZXINTOKEN        SETC  'INPUT'     SET IN/OUTPUT                       00148200
&XINTOKEN         SETC  'NULL'                                          00148300
                  AIF   (K'&INTOKEN(1) LE 0).ZG32B  PARM                00148400
&XINTOKEN         SETC  '&INTOKEN(1)'           SET XVARIABLE           00148500
                  AIF   (N'&INTOKEN GT 1).ZG32B  MULTI                  00148600
&XINTOKEN         SETC  '&INTOKEN'  SET XVARIABLE                       00148700
.ZG32B            ANOP  ,                                               00148800
.*-------------------------------------------------------------------   00148900
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00149000
                  AIF   (K'&ZXINTOKEN LE 0).ZG32R  NOT I/O              00149100
         AIF   ('&XINTOKEN' EQ 'NULL').ZG32R                            00149200
                  AIF   ('&XINTOKEN'(1,1) NE '(').ZG32R                 00149300
&ZCGPR            SETC  '&XINTOKEN'(2,K'&XINTOKEN-2)                    00149400
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG32P                    00149500
                  AIF   (K'&ZCGPR GT 2).ZG32Q                           00149600
                  AIF   ('&ZCGPR' EQ '0').ZG32Q                         00149700
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00149800
                  AIF   (T'&ZCGPR NE 'N').ZG32Q  INVALID REG NAME       00149900
.ZG32P            ANOP  ,                                               00150000
                  AIF   (T'&ZCGPR NE 'N').ZG32R  NON NUMERIC            00150100
                  AIF   ('&ZCGPR' LT '2').ZG32Q                         00150200
                  AIF   ('&ZCGPR' LE '12').ZG32R                        00150300
.ZG32Q            ANOP  ,                                               00150400
&ZMS              SETC  '"INTOKEN='                                     00150500
&ZMS              SETC  '&ZMS.&INTOKEN"'                                00150600
&ZMS              SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'       00150700
                  MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                00150800
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00150900
.ZG32R            ANOP  ,                                               00151000
.*-------------------------------------------------------------------   00151100
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00151200
.ZG34             ANOP  ,                                               00151300
&ZTLC             SETC 'ENABLE'                                         00151400
                  AIF   ('&REQUEST(1)' NE '&ZTLC').ZG49                 00151500
&XREQUEST         SETC  'ENABLE'    SET KEYWORD                         00151600
                  AIF   (N'&REQUEST LE 1).ZG34A  CK NUM                 00151700
&ZMS              SETC  '"REQUEST='                                     00151800
&ZMS              SETC  '&ZMS.&REQUEST"'                                00151900
&ZMS              SETC  '&ZMS "REQUEST"'                                00152000
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00152100
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00152200
.ZG34A            ANOP  ,                                               00152300
.*------------------------------------------------------------------    00152400
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00152500
&ZCVAL            SETC ''           CLEAR ERROR KEY ACCUMULATOR         00152600
.ZG34A0           AIF   (K'&OUTTOKEN LE 0).ZG34A1  OK                   00152700
&ZCVAL            SETC '&ZCVAL OUTTOKEN'        INCORRECT KEY USED      00152800
.ZG34A1           AIF   (K'&SUBPOOL LE 0).ZG34A2  OK                    00152900
&ZCVAL            SETC '&ZCVAL SUBPOOL'         INCORRECT KEY USED      00153000
.ZG34A2           AIF   (K'&MAXENTRIES LE 0).ZG34A3  OK                 00153100
&ZCVAL            SETC '&ZCVAL MAXENTRIES'      INCORRECT KEY USED      00153200
.ZG34A3           AIF   (K'&ZCVAL LE 0).ZG34A4  OK                      00153300
&ZCVAL            SETC '&ZCVAL'(2,K'&ZCVAL-1)                           00153400
&ZMS              SETC  '"REQUEST'                                      00153500
&ZMS              SETC  '&ZMS.=&REQUEST"'                               00153600
&ZMS              SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'            00153700
                  MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'            00153800
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00153900
.ZG34A4           ANOP  ,                                               00154000
.*----------------------------------------------------------------***   00154100
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00154200
                  AIF   (N'&SSVTDATA LE 1).ZG36A  CK NUM                00154300
&ZMS              SETC  '"SSVTDATA='                                    00154400
&ZMS              SETC  '&ZMS.&SSVTDATA"'                               00154500
&ZMS              SETC  '&ZMS "SSVTDATA"'                               00154600
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00154700
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00154800
.ZG36A            ANOP  ,                                               00154900
.*-------------------------------------------------------------------   00155000
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00155100
&ZXSSVTDATA       SETC  'INPUT'     SET IN/OUTPUT                       00155200
&XSSVTDATA        SETC  '&SSVTDATA(1)'          SET XVARIABLE           00155300
                  AIF   (N'&SSVTDATA GT 1).ZG36B  MULTI                 00155400
&XSSVTDATA        SETC  '&SSVTDATA'             SET XVARIABLE           00155500
.ZG36B            AIF   (K'&SSVTDATA(1) GT 0).ZG36C                     00155600
&ZXSSVTDATA       SETC  ''          RESET IN/OUTPUT                     00155700
&ZMS              SETC  ' '                                             00155800
&ZMS              SETC  '&ZMS "SSVTDATA" KEY AND ITS'                   00155900
                  MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                00156000
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00156100
.ZG36C            ANOP  ,                                               00156200
.*-------------------------------------------------------------------   00156300
.***AG.KCK01 NAME, RQD INPUT, KEYS -GPR NOT ALLOWED                     00156400
                  AIF   (K'&ZXSSVTDATA LE 0).ZG36P  NOT I/O             00156500
                  AIF   ('&XSSVTDATA'(1,1) NE '(').ZG36P                00156600
&ZXSSVTDATA       SETC  ''          RESET IN/OUTPUT                     00156700
&ZMS              SETC  '"SSVTDATA='                                    00156800
&ZMS              SETC  '&ZMS.&SSVTDATA"'                               00156900
&ZMS              SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'       00157000
                  MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'               00157100
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00157200
.ZG36P            ANOP  ,                                               00157300
.*----------------------------------------------------------------***   00157400
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00157500
                  AIF   (N'&INTOKEN LE 1).ZG39A  CK NUM                 00157600
&ZMS              SETC  '"INTOKEN='                                     00157700
&ZMS              SETC  '&ZMS.&INTOKEN"'                                00157800
&ZMS              SETC  '&ZMS "INTOKEN"'                                00157900
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00158000
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00158100
.ZG39A            ANOP  ,                                               00158200
.*-------------------------------------------------------------------   00158300
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00158400
&ZXINTOKEN        SETC  'INPUT'     SET IN/OUTPUT                       00158500
&XINTOKEN         SETC  'NULL'                                          00158600
                  AIF   (K'&INTOKEN(1) LE 0).ZG39B  PARM                00158700
&XINTOKEN         SETC  '&INTOKEN(1)'           SET XVARIABLE           00158800
                  AIF   (N'&INTOKEN GT 1).ZG39B  MULTI                  00158900
&XINTOKEN         SETC  '&INTOKEN'  SET XVARIABLE                       00159000
.ZG39B            ANOP  ,                                               00159100
.*-------------------------------------------------------------------   00159200
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00159300
                  AIF   (K'&ZXINTOKEN LE 0).ZG39R  NOT I/O              00159400
         AIF   ('&XINTOKEN' EQ 'NULL').ZG39R                            00159500
                  AIF   ('&XINTOKEN'(1,1) NE '(').ZG39R                 00159600
&ZCGPR            SETC  '&XINTOKEN'(2,K'&XINTOKEN-2)                    00159700
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG39P                    00159800
                  AIF   (K'&ZCGPR GT 2).ZG39Q                           00159900
                  AIF   ('&ZCGPR' EQ '0').ZG39Q                         00160000
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00160100
                  AIF   (T'&ZCGPR NE 'N').ZG39Q  INVALID REG NAME       00160200
.ZG39P            ANOP  ,                                               00160300
                  AIF   (T'&ZCGPR NE 'N').ZG39R  NON NUMERIC            00160400
                  AIF   ('&ZCGPR' LT '2').ZG39Q                         00160500
                  AIF   ('&ZCGPR' LE '12').ZG39R                        00160600
.ZG39Q            ANOP  ,                                               00160700
&ZMS              SETC  '"INTOKEN='                                     00160800
&ZMS              SETC  '&ZMS.&INTOKEN"'                                00160900
&ZMS              SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'       00161000
                  MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                00161100
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00161200
.ZG39R            ANOP  ,                                               00161300
.*----------------------------------------------------------------***   00161400
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00161500
                  AIF   (N'&LOADTOGLOBAL LE 1).ZG42A  CK NUM            00161600
&ZMS              SETC  '"LOADTOGLOBAL='                                00161700
&ZMS              SETC  '&ZMS.&LOADTOGLOBAL"'                           00161800
&ZMS              SETC  '&ZMS "LOADTOGLOBAL"'                           00161900
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00162000
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00162100
.ZG42A            ANOP  ,                                               00162200
.*-------------------------------------------------------------------   00162300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00162400
&XLOADTOGLOBAL    SETC  ''          INITIALIZE XVARIABLE                00162500
.ZG43A   AIF   ('&LOADTOGLOBAL(1)' NE 'NO').ZG44A                       00162600
&XLOADTOGLOBAL    SETC  'NO'        SET KEYWORD                         00162700
.*-------------------------------------------------------------------   00162800
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00162900
.ZG44A   AIF   ('&LOADTOGLOBAL(1)' NE 'YES').ZG45A                      00163000
&XLOADTOGLOBAL    SETC  'YES'       SET KEYWORD                         00163100
.*-------------------------------------------------------------------   00163200
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00163300
.ZG45A            AIF   (K'&XLOADTOGLOBAL GT 0).ZG45C  KEYWORD          00163400
                  AIF   (K'&LOADTOGLOBAL(1) LE 0).ZG45B                 00163500
&ZMS              SETC  '"LOADTOGLOBAL='                                00163600
&ZMS              SETC  '&ZMS.&LOADTOGLOBAL"'                           00163700
&ZMS              SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '       00163800
&ZMS              SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'             00163900
&ZMS              SETC  '&ZMS "NO"'                                     00164000
&ZMS              SETC  '&ZMS OR "YES".'                                00164100
                  MNOTE 8,' &ZMS '                                      00164200
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00164300
.ZG45B            ANOP  ,                                               00164400
&XLOADTOGLOBAL    SETC  'NO'        SET DEFAULT KEYWORD                 00164500
.ZG45C            ANOP  ,                                               00164600
&ZXLOADTOGLOBAL   SETC  'INPUT'     SET IN/OUTPUT                       00164700
.*----------------------------------------------------------------***   00164800
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00164900
                  AIF   (N'&ERRFUNCT LE 1).ZG47A  CK NUM                00165000
&ZMS              SETC  '"ERRFUNCT='                                    00165100
&ZMS              SETC  '&ZMS.&ERRFUNCT"'                               00165200
&ZMS              SETC  '&ZMS "ERRFUNCT"'                               00165300
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00165400
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00165500
.ZG47A            ANOP  ,                                               00165600
.*-------------------------------------------------------------------   00165700
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00165800
                  AIF   (K'&ERRFUNCT(1) LE 0).ZG47C  NO PARM            00165900
&ZXERRFUNCT       SETC  'OUTPUT'    SET OUTPUT                          00166000
&XERRFUNCT        SETC  '&ERRFUNCT(1)'          SET XVARIABLE           00166100
                  AIF   (N'&ERRFUNCT GT 1).ZG47C                        00166200
&XERRFUNCT        SETC  '&ERRFUNCT'             SET XVARIABLE           00166300
.ZG47C            ANOP  ,                                               00166400
.*-------------------------------------------------------------------   00166500
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00166600
                  AIF   (K'&ZXERRFUNCT LE 0).ZG47R  NOT I/O             00166700
                  AIF   ('&XERRFUNCT'(1,1) NE '(').ZG47R                00166800
&ZCGPR            SETC  '&XERRFUNCT'(2,K'&XERRFUNCT-2)                  00166900
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG47P                    00167000
                  AIF   (K'&ZCGPR GT 2).ZG47Q                           00167100
                  AIF   ('&ZCGPR' EQ '0').ZG47Q                         00167200
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00167300
                  AIF   (T'&ZCGPR NE 'N').ZG47Q  INVALID REG NAME       00167400
.ZG47P            ANOP  ,                                               00167500
                  AIF   (T'&ZCGPR NE 'N').ZG47R  NON NUMERIC            00167600
                  AIF   ('&ZCGPR' LT '2').ZG47Q                         00167700
                  AIF   ('&ZCGPR' LE '12').ZG47R                        00167800
.ZG47Q            ANOP  ,                                               00167900
&ZMS              SETC  '"ERRFUNCT='                                    00168000
&ZMS              SETC  '&ZMS.&ERRFUNCT"'                               00168100
&ZMS              SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'       00168200
                  MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                00168300
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00168400
.ZG47R            ANOP  ,                                               00168500
.*-------------------------------------------------------------------   00168600
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00168700
.ZG49             ANOP  ,                                               00168800
&ZTLC             SETC 'EXCHANGE'                                       00168900
                  AIF   ('&REQUEST(1)' NE '&ZTLC').ZG64                 00169000
&XREQUEST         SETC  'EXCHANGE'  SET KEYWORD                         00169100
                  AIF   (N'&REQUEST LE 1).ZG49A  CK NUM                 00169200
&ZMS              SETC  '"REQUEST='                                     00169300
&ZMS              SETC  '&ZMS.&REQUEST"'                                00169400
&ZMS              SETC  '&ZMS "REQUEST"'                                00169500
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00169600
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00169700
.ZG49A            ANOP  ,                                               00169800
.*------------------------------------------------------------------    00169900
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00170000
&ZCVAL            SETC ''           CLEAR ERROR KEY ACCUMULATOR         00170100
.ZG49A0           AIF   (K'&OUTTOKEN LE 0).ZG49A1  OK                   00170200
&ZCVAL            SETC '&ZCVAL OUTTOKEN'        INCORRECT KEY USED      00170300
.ZG49A1           AIF   (K'&SUBPOOL LE 0).ZG49A2  OK                    00170400
&ZCVAL            SETC '&ZCVAL SUBPOOL'         INCORRECT KEY USED      00170500
.ZG49A2           AIF   (K'&MAXENTRIES LE 0).ZG49A3  OK                 00170600
&ZCVAL            SETC '&ZCVAL MAXENTRIES'      INCORRECT KEY USED      00170700
.ZG49A3           AIF   (K'&ZCVAL LE 0).ZG49A4  OK                      00170800
&ZCVAL            SETC '&ZCVAL'(2,K'&ZCVAL-1)                           00170900
&ZMS              SETC  '"REQUEST'                                      00171000
&ZMS              SETC  '&ZMS.=&REQUEST"'                               00171100
&ZMS              SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'            00171200
                  MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'            00171300
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00171400
.ZG49A4           ANOP  ,                                               00171500
.*----------------------------------------------------------------***   00171600
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00171700
                  AIF   (N'&SSVTDATA LE 1).ZG51A  CK NUM                00171800
&ZMS              SETC  '"SSVTDATA='                                    00171900
&ZMS              SETC  '&ZMS.&SSVTDATA"'                               00172000
&ZMS              SETC  '&ZMS "SSVTDATA"'                               00172100
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00172200
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00172300
.ZG51A            ANOP  ,                                               00172400
.*-------------------------------------------------------------------   00172500
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00172600
&ZXSSVTDATA       SETC  'INPUT'     SET IN/OUTPUT                       00172700
&XSSVTDATA        SETC  '&SSVTDATA(1)'          SET XVARIABLE           00172800
                  AIF   (N'&SSVTDATA GT 1).ZG51B  MULTI                 00172900
&XSSVTDATA        SETC  '&SSVTDATA'             SET XVARIABLE           00173000
.ZG51B            AIF   (K'&SSVTDATA(1) GT 0).ZG51C                     00173100
&ZXSSVTDATA       SETC  ''          RESET IN/OUTPUT                     00173200
&ZMS              SETC  ' '                                             00173300
&ZMS              SETC  '&ZMS "SSVTDATA" KEY AND ITS'                   00173400
                  MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                00173500
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00173600
.ZG51C            ANOP  ,                                               00173700
.*-------------------------------------------------------------------   00173800
.***AG.KCK01 NAME, RQD INPUT, KEYS -GPR NOT ALLOWED                     00173900
                  AIF   (K'&ZXSSVTDATA LE 0).ZG51P  NOT I/O             00174000
                  AIF   ('&XSSVTDATA'(1,1) NE '(').ZG51P                00174100
&ZXSSVTDATA       SETC  ''          RESET IN/OUTPUT                     00174200
&ZMS              SETC  '"SSVTDATA='                                    00174300
&ZMS              SETC  '&ZMS.&SSVTDATA"'                               00174400
&ZMS              SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'       00174500
                  MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'               00174600
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00174700
.ZG51P            ANOP  ,                                               00174800
.*----------------------------------------------------------------***   00174900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00175000
                  AIF   (N'&INTOKEN LE 1).ZG54A  CK NUM                 00175100
&ZMS              SETC  '"INTOKEN='                                     00175200
&ZMS              SETC  '&ZMS.&INTOKEN"'                                00175300
&ZMS              SETC  '&ZMS "INTOKEN"'                                00175400
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00175500
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00175600
.ZG54A            ANOP  ,                                               00175700
.*-------------------------------------------------------------------   00175800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00175900
&ZXINTOKEN        SETC  'INPUT'     SET IN/OUTPUT                       00176000
&XINTOKEN         SETC  'NULL'                                          00176100
                  AIF   (K'&INTOKEN(1) LE 0).ZG54B  PARM                00176200
&XINTOKEN         SETC  '&INTOKEN(1)'           SET XVARIABLE           00176300
                  AIF   (N'&INTOKEN GT 1).ZG54B  MULTI                  00176400
&XINTOKEN         SETC  '&INTOKEN'  SET XVARIABLE                       00176500
.ZG54B            ANOP  ,                                               00176600
.*-------------------------------------------------------------------   00176700
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00176800
                  AIF   (K'&ZXINTOKEN LE 0).ZG54R  NOT I/O              00176900
         AIF   ('&XINTOKEN' EQ 'NULL').ZG54R                            00177000
                  AIF   ('&XINTOKEN'(1,1) NE '(').ZG54R                 00177100
&ZCGPR            SETC  '&XINTOKEN'(2,K'&XINTOKEN-2)                    00177200
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG54P                    00177300
                  AIF   (K'&ZCGPR GT 2).ZG54Q                           00177400
                  AIF   ('&ZCGPR' EQ '0').ZG54Q                         00177500
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00177600
                  AIF   (T'&ZCGPR NE 'N').ZG54Q  INVALID REG NAME       00177700
.ZG54P            ANOP  ,                                               00177800
                  AIF   (T'&ZCGPR NE 'N').ZG54R  NON NUMERIC            00177900
                  AIF   ('&ZCGPR' LT '2').ZG54Q                         00178000
                  AIF   ('&ZCGPR' LE '12').ZG54R                        00178100
.ZG54Q            ANOP  ,                                               00178200
&ZMS              SETC  '"INTOKEN='                                     00178300
&ZMS              SETC  '&ZMS.&INTOKEN"'                                00178400
&ZMS              SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'       00178500
                  MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                00178600
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00178700
.ZG54R            ANOP  ,                                               00178800
.*----------------------------------------------------------------***   00178900
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00179000
                  AIF   (N'&LOADTOGLOBAL LE 1).ZG57A  CK NUM            00179100
&ZMS              SETC  '"LOADTOGLOBAL='                                00179200
&ZMS              SETC  '&ZMS.&LOADTOGLOBAL"'                           00179300
&ZMS              SETC  '&ZMS "LOADTOGLOBAL"'                           00179400
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00179500
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00179600
.ZG57A            ANOP  ,                                               00179700
.*-------------------------------------------------------------------   00179800
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00179900
&XLOADTOGLOBAL    SETC  ''          INITIALIZE XVARIABLE                00180000
.ZG58A   AIF   ('&LOADTOGLOBAL(1)' NE 'NO').ZG59A                       00180100
&XLOADTOGLOBAL    SETC  'NO'        SET KEYWORD                         00180200
.*-------------------------------------------------------------------   00180300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00180400
.ZG59A   AIF   ('&LOADTOGLOBAL(1)' NE 'YES').ZG60A                      00180500
&XLOADTOGLOBAL    SETC  'YES'       SET KEYWORD                         00180600
.*-------------------------------------------------------------------   00180700
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00180800
.ZG60A            AIF   (K'&XLOADTOGLOBAL GT 0).ZG60C  KEYWORD          00180900
                  AIF   (K'&LOADTOGLOBAL(1) LE 0).ZG60B                 00181000
&ZMS              SETC  '"LOADTOGLOBAL='                                00181100
&ZMS              SETC  '&ZMS.&LOADTOGLOBAL"'                           00181200
&ZMS              SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '       00181300
&ZMS              SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'             00181400
&ZMS              SETC  '&ZMS "NO"'                                     00181500
&ZMS              SETC  '&ZMS OR "YES".'                                00181600
                  MNOTE 8,' &ZMS '                                      00181700
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00181800
.ZG60B            ANOP  ,                                               00181900
&XLOADTOGLOBAL    SETC  'NO'        SET DEFAULT KEYWORD                 00182000
.ZG60C            ANOP  ,                                               00182100
&ZXLOADTOGLOBAL   SETC  'INPUT'     SET IN/OUTPUT                       00182200
.*----------------------------------------------------------------***   00182300
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00182400
                  AIF   (N'&ERRFUNCT LE 1).ZG62A  CK NUM                00182500
&ZMS              SETC  '"ERRFUNCT='                                    00182600
&ZMS              SETC  '&ZMS.&ERRFUNCT"'                               00182700
&ZMS              SETC  '&ZMS "ERRFUNCT"'                               00182800
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00182900
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00183000
.ZG62A            ANOP  ,                                               00183100
.*-------------------------------------------------------------------   00183200
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00183300
                  AIF   (K'&ERRFUNCT(1) LE 0).ZG62C  NO PARM            00183400
&ZXERRFUNCT       SETC  'OUTPUT'    SET OUTPUT                          00183500
&XERRFUNCT        SETC  '&ERRFUNCT(1)'          SET XVARIABLE           00183600
                  AIF   (N'&ERRFUNCT GT 1).ZG62C                        00183700
&XERRFUNCT        SETC  '&ERRFUNCT'             SET XVARIABLE           00183800
.ZG62C            ANOP  ,                                               00183900
.*-------------------------------------------------------------------   00184000
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00184100
                  AIF   (K'&ZXERRFUNCT LE 0).ZG62R  NOT I/O             00184200
                  AIF   ('&XERRFUNCT'(1,1) NE '(').ZG62R                00184300
&ZCGPR            SETC  '&XERRFUNCT'(2,K'&XERRFUNCT-2)                  00184400
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG62P                    00184500
                  AIF   (K'&ZCGPR GT 2).ZG62Q                           00184600
                  AIF   ('&ZCGPR' EQ '0').ZG62Q                         00184700
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00184800
                  AIF   (T'&ZCGPR NE 'N').ZG62Q  INVALID REG NAME       00184900
.ZG62P            ANOP  ,                                               00185000
                  AIF   (T'&ZCGPR NE 'N').ZG62R  NON NUMERIC            00185100
                  AIF   ('&ZCGPR' LT '2').ZG62Q                         00185200
                  AIF   ('&ZCGPR' LE '12').ZG62R                        00185300
.ZG62Q            ANOP  ,                                               00185400
&ZMS              SETC  '"ERRFUNCT='                                    00185500
&ZMS              SETC  '&ZMS.&ERRFUNCT"'                               00185600
&ZMS              SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'       00185700
                  MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                00185800
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00185900
.ZG62R            ANOP  ,                                               00186000
.*------------------------------------------------------------------    00186100
.***AG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00186200
.ZG64             ANOP  ,                                               00186300
&ZXREQUEST        SETC  'INPUT'     SET IN/OUTPUT                       00186400
                  AIF   (K'&XREQUEST GT 0).ZG64E  VALID ARG             00186500
                  AIF   (T'&REQUEST EQ 'O').ZG64D  OMITTED              00186600
&ZASYSLNDX        SETA  0                                               00186700
.ZG64A            ANOP  ,           POSITIONAL MACRO KEY                00186800
&ZASYSLNDX        SETA  &ZASYSLNDX+1                                    00186900
                  AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG64C                00187000
&ZTLC             SETC 'REQUEST'                                        00187100
                  AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG64A       00187200
.ZG64B            ANOP  ,                                               00187300
&ZXREQUEST        SETC  ''          RESET IN/OUTPUT                     00187400
&ZMS              SETC  'THE "REQUEST" KEY'                             00187500
&ZMS              SETC  '&ZMS MUST CONTAIN ONE'                         00187600
                  MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                00187700
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00187800
                  AGO   .ZG64E                                          00187900
.ZG64C            ANOP  ,                                               00188000
&ZXREQUEST        SETC  ''          RESET IN/OUTPUT                     00188100
&ZMS              SETC  '"REQUEST='                                     00188200
&ZMS              SETC  '&ZMS.&REQUEST"'                                00188300
&ZMS              SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '       00188400
&ZMS              SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'             00188500
&ZMS              SETC  '&ZMS "CREATE",'                                00188600
&ZMS              SETC  '&ZMS "DISABLE",'                               00188700
&ZMS              SETC  '&ZMS "ENABLE",'                                00188800
&ZMS              SETC  '&ZMS OR "EXCHANGE".'                           00188900
                  MNOTE 8,' &ZMS '                                      00189000
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00189100
                  AGO   .ZG64E                                          00189200
.ZG64D            ANOP  ,                                               00189300
&XREQUEST         SETC  'CREATE'    SET DEFAULT KEYWORD                 00189400
.ZG64E            ANOP  ,                                               00189500
.*------------------------------------------------------------------    00189600
.***AG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00189700
                  AIF   (K'&REQUEST(1) GT 0).ZG64F  PARM                00189800
&XREQUEST         SETC  ''          ENSURE NULL KEYWORD                 00189900
&ZXREQUEST        SETC  ''          RESET IN/OUTPUT                     00190000
&ZMS              SETC  'THE'                                           00190100
&ZMS              SETC  '&ZMS "REQUEST" KEY AND ITS'                    00190200
&ZMS              SETC  '&ZMS ARGUMENT ARE REQUIRED.'                   00190300
&ZMS              SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'             00190400
&ZMS              SETC  '&ZMS "CREATE",'                                00190500
&ZMS              SETC  '&ZMS "DISABLE",'                               00190600
&ZMS              SETC  '&ZMS "ENABLE",'                                00190700
&ZMS              SETC  '&ZMS OR "EXCHANGE".'                           00190800
                  MNOTE 8,' &ZMS '                                      00190900
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00191000
.ZG64F            ANOP  ,                                               00191100
.*----------------------------------------------------------------***   00191200
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00191300
                  AIF   (N'&RETCODE LE 1).ZG66A  CK NUM                 00191400
&ZMS              SETC  '"RETCODE='                                     00191500
&ZMS              SETC  '&ZMS.&RETCODE"'                                00191600
&ZMS              SETC  '&ZMS "RETCODE"'                                00191700
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00191800
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00191900
.ZG66A            ANOP  ,                                               00192000
.*-------------------------------------------------------------------   00192100
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00192200
                  AIF   (K'&RETCODE(1) LE 0).ZG66C  NO PARM             00192300
&ZXRETCODE        SETC  'OUTPUT'    SET OUTPUT                          00192400
&XRETCODE         SETC  '&RETCODE(1)'           SET XVARIABLE           00192500
                  AIF   (N'&RETCODE GT 1).ZG66C                         00192600
&XRETCODE         SETC  '&RETCODE'  SET XVARIABLE                       00192700
.ZG66C            ANOP  ,                                               00192800
.*-------------------------------------------------------------------   00192900
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00193000
                  AIF   (K'&ZXRETCODE LE 0).ZG66R  NOT I/O              00193100
                  AIF   ('&XRETCODE'(1,1) NE '(').ZG66R                 00193200
&ZCGPR            SETC  '&XRETCODE'(2,K'&XRETCODE-2)                    00193300
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG66P                    00193400
                  AIF   (K'&ZCGPR GT 2).ZG66Q                           00193500
                  AIF   ('&ZCGPR' EQ '0').ZG66Q                         00193600
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00193700
                  AIF   (T'&ZCGPR NE 'N').ZG66Q  INVALID REG NAME       00193800
.ZG66P            ANOP  ,                                               00193900
                  AIF   (T'&ZCGPR NE 'N').ZG66R  NON NUMERIC            00194000
                  AIF   ('&ZCGPR' EQ '15').ZG66R                        00194100
                  AIF   ('&ZCGPR' LT '2').ZG66Q                         00194200
                  AIF   ('&ZCGPR' LE '12').ZG66R                        00194300
.ZG66Q            ANOP  ,                                               00194400
&ZMS              SETC  '"RETCODE='                                     00194500
&ZMS              SETC  '&ZMS.&RETCODE"'                                00194600
&ZMS              SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'       00194700
                  MNOTE 8,' &ZMS IN THE RANGE (2)-(12) OR (15).'        00194800
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00194900
.ZG66R            ANOP  ,                                               00195000
.*----------------------------------------------------------------***   00195100
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00195200
                  AIF   (N'&RSNCODE LE 1).ZG69A  CK NUM                 00195300
&ZMS              SETC  '"RSNCODE='                                     00195400
&ZMS              SETC  '&ZMS.&RSNCODE"'                                00195500
&ZMS              SETC  '&ZMS "RSNCODE"'                                00195600
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00195700
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00195800
.ZG69A            ANOP  ,                                               00195900
.*-------------------------------------------------------------------   00196000
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00196100
                  AIF   (K'&RSNCODE(1) LE 0).ZG69C  NO PARM             00196200
&ZXRSNCODE        SETC  'OUTPUT'    SET OUTPUT                          00196300
&XRSNCODE         SETC  '&RSNCODE(1)'           SET XVARIABLE           00196400
                  AIF   (N'&RSNCODE GT 1).ZG69C                         00196500
&XRSNCODE         SETC  '&RSNCODE'  SET XVARIABLE                       00196600
.ZG69C            ANOP  ,                                               00196700
.*-------------------------------------------------------------------   00196800
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00196900
                  AIF   (K'&ZXRSNCODE LE 0).ZG69R  NOT I/O              00197000
                  AIF   ('&XRSNCODE'(1,1) NE '(').ZG69R                 00197100
&ZCGPR            SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                    00197200
                  AIF   ('&ZCGPR'(1,1) NE '0').ZG69P                    00197300
                  AIF   (K'&ZCGPR GT 2).ZG69Q                           00197400
                  AIF   ('&ZCGPR' EQ '0').ZG69R                         00197500
&ZCGPR            SETC  '&ZCGPR'(2,1)                                   00197600
                  AIF   (T'&ZCGPR NE 'N').ZG69Q  INVALID REG NAME       00197700
.ZG69P            ANOP  ,                                               00197800
                  AIF   (T'&ZCGPR NE 'N').ZG69R  NON NUMERIC            00197900
                  AIF   ('&ZCGPR' EQ '0').ZG69R                         00198000
                  AIF   ('&ZCGPR' LT '2').ZG69Q                         00198100
                  AIF   ('&ZCGPR' LE '12').ZG69R                        00198200
.ZG69Q            ANOP  ,                                               00198300
&ZMS              SETC  '"RSNCODE='                                     00198400
&ZMS              SETC  '&ZMS.&RSNCODE"'                                00198500
&ZMS              SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'       00198600
                  MNOTE 8,' &ZMS IN THE RANGE (0) OR (2)-(12).'         00198700
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00198800
.ZG69R            ANOP  ,                                               00198900
.*----------------------------------------------------------------***   00199000
.***AG.KXVAR05 VALUE, OPT INPUT, KEYS -XVARIABLE KEY                    00199100
                  AIF   (N'&COM LE 1).ZG72A     CK NUM                  00199200
&ZMS              SETC  '"COM='                                         00199300
&ZMS              SETC  '&ZMS.&COM"'                                    00199400
&ZMS              SETC  '&ZMS "COM"'                                    00199500
                  MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'             00199600
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00199700
.ZG72A            ANOP  ,                                               00199800
.*-------------------------------------------------------------------   00199900
.***AG.KXVAR13 VALUE, OPT INPUT, KEYS -XVARIABLE                        00200000
&ZXCOM            SETC  'INPUT'     SET IN/OUTPUT                       00200100
&XCOM             SETC  'NULL'                                          00200200
                  AIF   (K'&COM(1) LE 0).ZG72B  PARM                    00200300
&XCOM             SETC  '&COM(1)'   SET XVARIABLE                       00200400
                  AIF   (N'&COM GT 1).ZG72B     MULTI                   00200500
&XCOM             SETC  '&COM'      SET XVARIABLE                       00200600
.ZG72B            ANOP  ,                                               00200700
.*-------------------------------------------------------------------   00200800
.***AG.KCK01 VALUE, OPT INPUT, KEYS -GPR NOT ALLOWED                    00200900
                  AIF   (K'&ZXCOM LE 0).ZG72P   NOT I/O                 00201000
                  AIF   ('&XCOM' EQ 'NULL').ZG72P                       00201100
                  AIF   ('&XCOM'(1,1) NE '(').ZG72P                     00201200
&ZXCOM            SETC  ''          RESET IN/OUTPUT                     00201300
&ZMS              SETC  '"COM='                                         00201400
&ZMS              SETC  '&ZMS.&COM"'                                    00201500
&ZMS              SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'       00201600
                  MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'               00201700
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00201800
.ZG72P            ANOP  ,                                               00201900
.*-------------------------------------------------------------------   00202000
.***AG.KCK03 VALUE, OPT INPUT, KEYS -CHARACTER LENGTH                   00202100
                  AIF   (K'&ZXCOM LE 0).ZG72S   NOT I/O                 00202200
                  AIF   ('&XCOM' EQ 'NULL').ZG72S                       00202300
                  AIF   (K'&XCOM LE 256).ZG72S  LNG OK                  00202400
&ZXCOM            SETC  ''          RESET IN/OUTPUT                     00202500
&ZMS              SETC  '"COM='                                         00202600
&ZMS              SETC  '&ZMS.&COM"'                                    00202700
&ZMS              SETC  '&ZMS ARGUMENT 1 EXCEEDS THE MAXIMUM'           00202800
                  MNOTE 8,' &ZMS LENGTH OF 256 CHARACTERS.'             00202900
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00203000
.ZG72S            ANOP  ,                                               00203100
.******************************************************************     00203200
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00203300
.******************************************************************     00203400
                  ACTR  10000                                           00203500
.*----------------------------------------------------------------***   00203600
.***AH.P02 EXTRA POSITIONALS                                            00203700
                  AIF   (N'&SYSLIST LE 0).ZGLISTX  NO EXTRAS            00203800
                  AIF   (N'&SYSLIST NE 2).ZGLISTX1  NOT NULL            00203900
                  AIF   ('&SYSLIST(1)' NE '').ZGLISTX1  NOT NULL        00204000
                  AIF   ('&SYSLIST(2)' EQ '').ZGLISTX  NOT NULL         00204100
.ZGLISTX1         ANOP  ,                                               00204200
&ZCVAL            SETC  ''          ERROR FIELD                         00204300
&ZAWRK            SETA  0           POSITIONAL NUMBER                   00204400
.ZGLIST2          ANOP  ,                                               00204500
&ZAWRK            SETA  &ZAWRK+1    NEXT POSITIONAL                     00204600
                  AIF   (&ZAWRK GT N'&SYSLIST).ZGLIST3  DONE            00204700
&ZCVAL            SETC '&ZCVAL,&SYSLIST(&ZAWRK)'  EXTRA                 00204800
                  AGO   .ZGLIST2                                        00204900
.*                                                                      00205000
.ZGLIST3          ANOP  ,                                               00205100
&ZCVAL            SETC '&ZCVAL'(2,K'&ZCVAL-1)   STRIP COMMA             00205200
&ZMS              SETC  'POSITIONAL ARGUMENT(S),'                       00205300
&ZMS              SETC  '&ZMS "&ZCVAL"'                                 00205400
&ZMS              SETC  '&ZMS CANNOT BE USED.'                          00205500
&ZMS              SETC  '&ZMS NO POSITIONAL ARGUMENTS'                  00205600
                  MNOTE 8,' &ZMS ARE ALLOWED.'                          00205700
&ZMACRET          SETA  8           SET MACRO ERROR RETURN CODE         00205800
.ZGLISTX          ANOP  ,                                               00205900
&ZASYSLNDX        SETA  0                                               00206000
.*-------------------------------------------------------------------   00206100
.***AG.MF04 MF=(SLE)                                                    00206200
.ZGMFX            ANOP  ,           END OF FULL SYNTAX CHECK            00206300
.*******************************************************************    00206400
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       00206500
.*******************************************************************    00206600
                  AIF   (&ZMACRET NE 0).ZLX2    ERROR DETECTED          00206700
.*******************************************************************    00206800
.***AE.01  START OF IEFSSVT MACRO CODE                                  00206900
.*******************************************************************    00207000
                  LCLC  &M0M0001                 NAME                   00207100
&M0M0001          SETC  '&XLABEL'                SET NAME               00207200
                  AIF   (K'&XLABEL NE 0).XLAB2                          00207300
&M0M0001          SETC  'M00M&SYSNDX'            DEFAULT NAME           00207400
.*                                                                      00207500
.XLAB2            ANOP  ,                                               00207600
                  AIF   ('&XMF' EQ 'L').XLAB3                           00207700
&M0M0001 DS    0H                             IEFSSVT-1                 00207800
.XLAB3            ANOP  ,                                               00207900
.*******************************************************************    00208000
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              00208100
.*******************************************************************    00208200
              PUSH  PRINT                                               00208300
                  AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON      00208400
                  PRINT OFF         ++ PR01                             00208500
                  AGO   .ZPRNTXX                                        00208600
.ZPRINTX          PRINT ON                                              00208700
.ZPRNTXX          ANOP  ,                                               00208800
.********************************************************************   00208900
.***AL.L01 INTERNAL ARRAY TO PRODUCE FORMATTED CODE                     00209000
.********************************************************************   00209100
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       00209200
                      LCLA  &ZOPN1         INVOCATION INDEX             00209300
                      LCLC  &ZOPL(4095)    LABEL                        00209400
                      LCLC  &ZOPO(4095)    OPERATION                    00209500
                      LCLC  &ZOPV(4095)    VALUE                        00209600
                      LCLC  &ZOPD(4095)    DESCRIPTION                  00209700
.*                                                                      00209800
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     00209900
.******************************************************************     00210000
.***AL.L10 IEFSSVT FMT=LIST MF=S!L PARAMETERS                           00210100
.******************************************************************     00210200
                      AIF   ('&XMF' EQ 'L').ZLMFSL2                     00210300
                      AIF   ('&XMF' NE 'S').ZLMFSLX                     00210400
&XMFCTRL              SETC  '#Z'.'&SYSNDX'.'A'                          00210500
&XMFATTR              SETC  '0D'                                        00210600
.*                                                                      00210700
&ZOPN                 SETA  &ZOPN+1                                     00210800
&ZOPL(&ZOPN)          SETC  ' '                                         00210900
                      AIF   (&SYSALVL NE 0).ZALVL6A                     00211000
&ZOPO(&ZOPN)          SETC  'B'                                         00211100
&ZOPV(&ZOPN)          SETC  '&XMFCTRL.S'                                00211200
                      AGO   .ZALVL6B                                    00211300
.ZALVL6A              ANOP                                              00211400
&ZOPO(&ZOPN)          SETC  'CNOP'                                      00211500
&ZOPV(&ZOPN)          SETC  '4,8'                                       00211600
&ZOPN                 SETA  &ZOPN+1                                     00211700
&ZOPL(&ZOPN)          SETC  ' '                                         00211800
&ZOPO(&ZOPN)          SETC  'BRAS'                                      00211900
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL.S'                              00212000
.ZALVL6B              ANOP                                              00212100
&ZOPD(&ZOPN)          SETC  '++ IEFSSVT ARG PARMS'                      00212200
.*                                                                      00212300
&ZOPN                 SETA  &ZOPN+1                                     00212400
&ZOPL(&ZOPN)          SETC  ' '                                         00212500
&ZOPO(&ZOPN)          SETC  'SPACE'                                     00212600
&ZOPV(&ZOPN)          SETC  '1'                                         00212700
&ZOPD(&ZOPN)          SETC  ' '                                         00212800
.*                                                                      00212900
.ZLMFSL2              ANOP  ,                                           00213000
.*-------------------------------------------------------------------   00213100
.***AM.L00  IEFSSVT FMT=LIST name                                       00213200
                      AIF   ('&XMF' NE 'L').ZLMFSL2M                    00213300
&ZOPN                 SETA &ZOPN+1                                      00213400
&ZOPL(&ZOPN)          SETC '&M0M0001'                                   00213500
&ZOPO(&ZOPN)          SETC 'EQU'                                        00213600
&ZOPV(&ZOPN)          SETC '&XMFCTRL'                                   00213700
&ZOPD(&ZOPN)          SETC '++ IEFSSVT NAME'                            00213800
.ZLMFSL2M             ANOP  ,                                           00213900
.*-------------------------------------------------------------------   00214000
.***AM.L01  IEFSSVT FMT=LIST PARAMETERS                                 00214100
&ZOPN                 SETA &ZOPN+1                                      00214200
&ZOPL(&ZOPN)          SETC '&XMFCTRL'                                   00214300
&ZOPO(&ZOPN)          SETC 'DS'                                         00214400
&ZOPV(&ZOPN)          SETC '&XMFATTR'                                   00214500
&ZOPD(&ZOPN)          SETC '++ IEFSSVT PARM LIST'                       00214600
.*-------------------------------------------------------------------   00214700
.***AM.L09  XVT_PLIST_ID CL4                                            00214800
&ZOPN                 SETA &ZOPN+1                                      00214900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XVT_PLIST_ID'                     00215000
&ZOPO(&ZOPN)          SETC 'DS'                                         00215100
&ZOPV(&ZOPN)          SETC 'CL4'                                        00215200
&ZOPD(&ZOPN)          SETC '++ CONSTANT '                               00215300
.*-------------------------------------------------------------------   00215400
.***AM.L09  XPLISTLEN XL2                                               00215500
&ZOPN                 SETA &ZOPN+1                                      00215600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPLISTLEN'                        00215700
&ZOPO(&ZOPN)          SETC 'DS'                                         00215800
&ZOPV(&ZOPN)          SETC 'XL2'                                        00215900
&ZOPD(&ZOPN)          SETC '++ INPUT '                                  00216000
.*-------------------------------------------------------------------   00216100
.***AM.L02 XVERSION XL1                                                 00216200
&ZOPN                 SETA &ZOPN+1                                      00216300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XVERSION'                         00216400
&ZOPO(&ZOPN)          SETC 'DS'                                         00216500
&ZOPV(&ZOPN)          SETC 'XL1'                                        00216600
&ZOPD(&ZOPN)          SETC '++ INPUT XVERSION'                          00216700
.*-------------------------------------------------------------------   00216800
.***AM.L09  XRSV0001 CL1                                                00216900
&ZOPN                 SETA &ZOPN+1                                      00217000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0001'                         00217100
&ZOPO(&ZOPN)          SETC 'DS'                                         00217200
&ZOPV(&ZOPN)          SETC 'CL1'                                        00217300
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00217400
.*-------------------------------------------------------------------   00217500
.***AM.L09  XSUBNAME CL4                                                00217600
&ZOPN                 SETA &ZOPN+1                                      00217700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSUBNAME'                         00217800
&ZOPO(&ZOPN)          SETC 'DS'                                         00217900
&ZOPV(&ZOPN)          SETC 'CL4'                                        00218000
&ZOPD(&ZOPN)          SETC '++ &ZXSUBNAME '                             00218100
.*-------------------------------------------------------------------   00218200
.***AM.L09  XRSV0002 CL4                                                00218300
&ZOPN                 SETA &ZOPN+1                                      00218400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0002'                         00218500
&ZOPO(&ZOPN)          SETC 'DS'                                         00218600
&ZOPV(&ZOPN)          SETC 'CL4'                                        00218700
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00218800
.*-------------------------------------------------------------------   00218900
.***AM.L03 XREQUEST_TYPE BL.8                                           00219000
&ZOPN                 SETA &ZOPN+1                                      00219100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XREQUEST_TYPE'                    00219200
&ZOPO(&ZOPN)          SETC 'DS'                                         00219300
&ZOPV(&ZOPN)          SETC 'BL.8'                                       00219400
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'                             00219500
.*                                                                      00219600
&ZOPN                 SETA  &ZOPN+1                                     00219700
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_CREATE'                 00219800
&ZOPO(&ZOPN)          SETC  'EQU'                                       00219900
&ZOPV(&ZOPN)          SETC  'B''10000000'''                             00220000
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00220100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).CREATE'                       00220200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00220300
.*                                                                      00220400
&ZOPN                 SETA  &ZOPN+1                                     00220500
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_DISABLE'                00220600
&ZOPO(&ZOPN)          SETC  'EQU'                                       00220700
&ZOPV(&ZOPN)          SETC  'B''01000000'''                             00220800
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00220900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).DISABLE'                      00221000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00221100
.*                                                                      00221200
&ZOPN                 SETA  &ZOPN+1                                     00221300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_ENABLE'                 00221400
&ZOPO(&ZOPN)          SETC  'EQU'                                       00221500
&ZOPV(&ZOPN)          SETC  'B''00100000'''                             00221600
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00221700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ENABLE'                       00221800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00221900
.*                                                                      00222000
&ZOPN                 SETA  &ZOPN+1                                     00222100
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_EXCHANGE'               00222200
&ZOPO(&ZOPN)          SETC  'EQU'                                       00222300
&ZOPV(&ZOPN)          SETC  'B''00010000'''                             00222400
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00222500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).EXCHANGE'                     00222600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00222700
.*-------------------------------------------------------------------   00222800
.***AM.L09  XRSV0003 CL1                                                00222900
&ZOPN                 SETA &ZOPN+1                                      00223000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0003'                         00223100
&ZOPO(&ZOPN)          SETC 'DS'                                         00223200
&ZOPV(&ZOPN)          SETC 'CL1'                                        00223300
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00223400
.*-------------------------------------------------------------------   00223500
.***AM.L03 XMISC_FLAGS BL.8                                             00223600
&ZOPN                 SETA &ZOPN+1                                      00223700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XMISC_FLAGS'                      00223800
&ZOPO(&ZOPN)          SETC 'DS'                                         00223900
&ZOPV(&ZOPN)          SETC 'BL.8'                                       00224000
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'                             00224100
.*                                                                      00224200
&ZOPN                 SETA  &ZOPN+1                                     00224300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XLOADTOGLOBAL_YES'               00224400
&ZOPO(&ZOPN)          SETC  'EQU'                                       00224500
&ZOPV(&ZOPN)          SETC  'B''10000000'''                             00224600
&ZOPD(&ZOPN)          SETC  '++ XLOADTOGLOBAL.'                         00224700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).YES'                          00224800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00224900
.*-------------------------------------------------------------------   00225000
.***AM.L09  XRSV0004 CL1                                                00225100
&ZOPN                 SETA &ZOPN+1                                      00225200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0004'                         00225300
&ZOPO(&ZOPN)          SETC 'DS'                                         00225400
&ZOPV(&ZOPN)          SETC 'CL1'                                        00225500
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00225600
.*-------------------------------------------------------------------   00225700
.***AM.L09  XSSVTDATA A                                                 00225800
&ZOPN                 SETA &ZOPN+1                                      00225900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSSVTDATA'                        00226000
&ZOPO(&ZOPN)          SETC 'DS'                                         00226100
&ZOPV(&ZOPN)          SETC 'A'                                          00226200
&ZOPD(&ZOPN)          SETC '++ &ZXSSVTDATA '                            00226300
.*-------------------------------------------------------------------   00226400
.***AM.L09  XMAXENTRIES XL2                                             00226500
&ZOPN                 SETA &ZOPN+1                                      00226600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XMAXENTRIES'                      00226700
&ZOPO(&ZOPN)          SETC 'DS'                                         00226800
&ZOPV(&ZOPN)          SETC 'XL2'                                        00226900
&ZOPD(&ZOPN)          SETC '++ &ZXMAXENTRIES '                          00227000
.*-------------------------------------------------------------------   00227100
.***AM.L09  XSUBPOOL XL1                                                00227200
&ZOPN                 SETA &ZOPN+1                                      00227300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSUBPOOL'                         00227400
&ZOPO(&ZOPN)          SETC 'DS'                                         00227500
&ZOPV(&ZOPN)          SETC 'XL1'                                        00227600
&ZOPD(&ZOPN)          SETC '++ &ZXSUBPOOL '                             00227700
.*-------------------------------------------------------------------   00227800
.***AM.L09  XRSV0005 CL1                                                00227900
&ZOPN                 SETA &ZOPN+1                                      00228000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0005'                         00228100
&ZOPO(&ZOPN)          SETC 'DS'                                         00228200
&ZOPV(&ZOPN)          SETC 'CL1'                                        00228300
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00228400
.*-------------------------------------------------------------------   00228500
.***AM.L09  XINTOKEN BL.32                                              00228600
&ZOPN                 SETA &ZOPN+1                                      00228700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XINTOKEN'                         00228800
&ZOPO(&ZOPN)          SETC 'DS'                                         00228900
&ZOPV(&ZOPN)          SETC 'BL.32'                                      00229000
&ZOPD(&ZOPN)          SETC '++ &ZXINTOKEN '                             00229100
.*-------------------------------------------------------------------   00229200
.***AM.L09  XRSV0008 CL20                                               00229300
&ZOPN                 SETA &ZOPN+1                                      00229400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0008'                         00229500
&ZOPO(&ZOPN)          SETC 'DS'                                         00229600
&ZOPV(&ZOPN)          SETC 'CL20'                                       00229700
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00229800
.*-------------------------------------------------------------------   00229900
.***AM.L09  XRSV0006 CL4                                                00230000
&ZOPN                 SETA &ZOPN+1                                      00230100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0006'                         00230200
&ZOPO(&ZOPN)          SETC 'DS'                                         00230300
&ZOPV(&ZOPN)          SETC 'CL4'                                        00230400
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00230500
.*-------------------------------------------------------------------   00230600
.***AM.L09  XOUTTOKEN BL.32                                             00230700
&ZOPN                 SETA &ZOPN+1                                      00230800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XOUTTOKEN'                        00230900
&ZOPO(&ZOPN)          SETC 'DS'                                         00231000
&ZOPV(&ZOPN)          SETC 'BL.32'                                      00231100
&ZOPD(&ZOPN)          SETC '++ &ZXOUTTOKEN '                            00231200
.*-------------------------------------------------------------------   00231300
.***AM.L09  XERRFUNCT CL8                                               00231400
&ZOPN                 SETA &ZOPN+1                                      00231500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XERRFUNCT'                        00231600
&ZOPO(&ZOPN)          SETC 'DS'                                         00231700
&ZOPV(&ZOPN)          SETC 'CL8'                                        00231800
&ZOPD(&ZOPN)          SETC '++ &ZXERRFUNCT '                            00231900
.*-------------------------------------------------------------------   00232000
.***AM.L09  XRSV0007 CL4                                                00232100
&ZOPN                 SETA &ZOPN+1                                      00232200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0007'                         00232300
&ZOPO(&ZOPN)          SETC 'DS'                                         00232400
&ZOPV(&ZOPN)          SETC 'CL4'                                        00232500
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00232600
.*-------------------------------------------------------------------   00232700
.***AM.L09  XPLISTPTR A                                                 00232800
&ZOPN                 SETA &ZOPN+1                                      00232900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPLISTPTR'                        00233000
&ZOPO(&ZOPN)          SETC 'DS'                                         00233100
&ZOPV(&ZOPN)          SETC 'A'                                          00233200
&ZOPD(&ZOPN)          SETC '++ INPUT '                                  00233300
.*-------------------------------------------------------------------   00233400
.***AM.L10 END OF IEFSSVT LIST PARAMETERS                               00233500
&ZOPN                 SETA &ZOPN+1                                      00233600
&ZOPL(&ZOPN)          SETC '&XMFCTRL.L'                                 00233700
&ZOPO(&ZOPN)          SETC 'EQU'                                        00233800
&ZOPV(&ZOPN)          SETC '*-&XMFCTRL'                                 00233900
&ZOPD(&ZOPN)          SETC '++ LENGTH OF PLIST'                         00234000
.*                                                                      00234100
&ZOPN                 SETA &ZOPN+1                                      00234200
&ZOPL(&ZOPN)          SETC ' '                                          00234300
&ZOPO(&ZOPN)          SETC 'SPACE'                                      00234400
&ZOPV(&ZOPN)          SETC '1'                                          00234500
&ZOPD(&ZOPN)          SETC ' '                                          00234600
.*-------------------------------------------------------------------   00234700
.***AL.L12 IEFSSVT FMT=LIST MF=S!L PARAMETERS                           00234800
                      AIF   ('&XMF' EQ 'L').ZMFLX  DONE IF MF=L         00234900
.*                                                                      00235000
&ZOPN                 SETA  &ZOPN+1                                     00235100
&ZOPL(&ZOPN)          SETC  '&XMFCTRL.S'                                00235200
&ZOPO(&ZOPN)          SETC  'DC'                                        00235300
&ZOPV(&ZOPN)          SETC  '0H''0'''                                   00235400
&ZOPD(&ZOPN)          SETC  '++ IEFSSVT ARG PARMS'                      00235500
.*                                                                      00235600
.ZLMFSLX              ANOP  ,                                           00235700
.*-------------------------------------------------------------------   00235800
.***AL.L13 SET ZPLLEN TO ITS APPROPRIATE VALUE                          00235900
&ZPLLEN               SETA 76                                           00236000
.*                                                                      00236100
.******************************************************************     00236200
.***AI.L01 IEFSSVT FMT=LIST FILL IN PARAMETER AREA                      00236300
.******************************************************************     00236400
                      ACTR  10000                                       00236500
&ZCVAL                SETC  'LA'           ASSUME XA MODE               00236600
                      AIF   ('&SYSASCE' EQ 'P').ZIMFXA  SYSSTATE PRI    00236700
&ZCVAL                SETC  'LAE'          XAX MODE                     00236800
.ZIMFXA               ANOP ,                                            00236900
.*                                                                      00237000
                      AIF   ('&XMFCTRL'(1,1) NE '(').ZIMFN2  NOT GPR    00237100
&ZCGPR                SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)  GET GPR         00237200
                      AIF   ('&ZCGPR' EQ 'GPR1').ZIMFNX                 00237300
                      AIF   ('&ZCGPR' EQ 'GPR01').ZIMFNX                00237400
                      AIF   ('&ZCGPR' EQ 'REG1').ZIMFNX                 00237500
                      AIF   ('&ZCGPR' EQ 'REG01').ZIMFNX                00237600
                      AIF   ('&ZCGPR' EQ 'R1').ZIMFNX                   00237700
                      AIF   ('&ZCGPR' EQ '1').ZIMFNX                    00237800
                      AIF   ('&ZCGPR' EQ '01').ZIMFNX                   00237900
&ZOPN                 SETA  &ZOPN+1                                     00238000
&ZOPL(&ZOPN)          SETC  ' '                                         00238100
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00238200
&ZOPV(&ZOPN)          SETC  '1,0(,&ZCGPR)'                              00238300
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00238400
                      AGO   .ZIMFNX                                     00238500
.*                                                                      00238600
.ZIMFN2               ANOP ,                                            00238700
                      AIF   (&SYSALVL EQ 0).ZIMFNX1                     00238800
                      AIF   ('&XMF' NE 'S').ZIMFNX1                     00238900
                      AIF   ('&ZCVAL' NE 'LAE').ZIMFNX                  00239000
&ZOPN                 SETA  &ZOPN+1                                     00239100
&ZOPL(&ZOPN)          SETC  ' '                                         00239200
&ZOPO(&ZOPN)          SETC  'LAE'                                       00239300
&ZOPV(&ZOPN)          SETC  '1,0(1,0)'                                  00239400
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00239500
                      AGO   .ZIMFNX                                     00239600
.ZIMFNX1              ANOP ,                                            00239700
&ZOPN                 SETA  &ZOPN+1                                     00239800
&ZOPL(&ZOPN)          SETC  ' '                                         00239900
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00240000
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL'                                00240100
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00240200
.ZIMFNX               ANOP ,                                            00240300
.********************************************************************   00240400
.***AI.L02 IEFSSVT FMT=LIST INITIALIZE PARAMETER AREA                   00240500
.********************************************************************   00240600
.***AI.L03 MF=(SLE)                                                     00240700
                      AIF   ('&XMF' EQ 'L').ZIMFLX                      00240800
.*                                                                      00240900
&ZOPN                 SETA  &ZOPN+1                                     00241000
&ZOPL(&ZOPN)          SETC  ' '                                         00241100
&ZOPO(&ZOPN)          SETC  'XC'                                        00241200
&ZOPV(&ZOPN)          SETC  '0(&ZPLLEN,1),0(1)'                         00241300
&ZOPD(&ZOPN)          SETC  '++ INITIALIZE'                             00241400
.ZIMFLX               ANOP  ,                                           00241500
.*-------------------------------------------------------------------   00241600
.***AI.L60 XVT_PLIST_ID CL4                                             00241700
&ZOPN                 SETA  &ZOPN+1                                     00241800
&ZOPL(&ZOPN)          SETC  ' '                                         00241900
&ZOPO(&ZOPN)          SETC  'MVC'                                       00242000
&ZOPV(&ZOPN)          SETC  '0(4,1),=CL4''VTPL'''                       00242100
&ZOPD(&ZOPN)          SETC  '++ CL4 CONSTANT'                           00242200
.*-------------------------------------------------------------------   00242300
.***AI.L04 XPLISTLEN XL2                                                00242400
&ZOPN                 SETA  &ZOPN+1                                     00242500
&ZOPL(&ZOPN)          SETC  ' '                                         00242600
&ZOPO(&ZOPN)          SETC  'MVC'                                       00242700
&ZOPV(&ZOPN)          SETC  '4(2,1),=AL2(&ZPLLEN)'                      00242800
&ZOPD(&ZOPN)          SETC  '++ INPUT XPLISTLEN XL2'                    00242900
.*-------------------------------------------------------------------   00243000
.***AI.L04B XVERSION XL1                                                00243100
                      AIF   (&XPLISTVER EQ 0).ZIMFVZ                    00243200
&ZOPN                 SETA  &ZOPN+1                                     00243300
&ZOPL(&ZOPN)          SETC  ' '                                         00243400
&ZOPO(&ZOPN)          SETC  'MVI'                                       00243500
&ZOPV(&ZOPN)          SETC  '6(1),&XPLISTVER'                           00243600
&ZOPD(&ZOPN)          SETC  '++ INPUT XVERSION XL1'                     00243700
.ZIMFVZ               ANOP  ,                                           00243800
.*-------------------------------------------------------------------   00243900
.***AI.L25  XSUBNAME CL4                                                00244000
                      AIF   ('&ZXSUBNAME' EQ '').ZI5E                   00244100
                      AIF   ('&ZXSUBNAME' EQ 'OUTPUT').ZI5E             00244200
&ZCGPR                SETC  '&XSUBNAME'                                 00244300
.*                                                                      00244400
                      AIF   ('&XSUBNAME'(1,1) NE '(').ZI5B              00244500
&ZCGPR   SETC  '0('.'&XSUBNAME'(2,K'&XSUBNAME-2).')'                    00244600
.ZI5B                 ANOP  ,                                           00244700
.*                                                                      00244800
&ZOPN                 SETA  &ZOPN+1                                     00244900
&ZOPL(&ZOPN)          SETC  ' '                                         00245000
&ZOPO(&ZOPN)          SETC  'MVC'                                       00245100
&ZOPV(&ZOPN)          SETC  '8(4,1),&ZCGPR'                             00245200
&ZOPD(&ZOPN)          SETC  '++ &ZXSUBNAME XSUBNAME'                    00245300
.*                                                                      00245400
.ZI5E                 ANOP  ,                                           00245500
.*-------------------------------------------------------------------   00245600
.***AI.L05 XREQUEST_TYPE BL1                                            00245700
&ZW                   SETC  ''                                          00245800
&ZCLNG                SETC  ''             RESET BIT ON FLAG            00245900
.*-------------------------------------------------------------------   00246000
.***AI.L08 XREQUEST_TYPE "CREATE"                                       00246100
.***      BL1'1XXXXXXX'                                                 00246200
         AIF   ('&XREQUEST' NE 'CREATE').ZI8A                           00246300
&ZW                   SETC  '&ZW.1'                                     00246400
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00246500
                      AGO   .ZI8C                                       00246600
.*                                                                      00246700
.ZI8A                 ANOP  ,                                           00246800
&ZW                   SETC  '&ZW.0'                                     00246900
.ZI8C                 ANOP  ,                                           00247000
.*-------------------------------------------------------------------   00247100
.***AI.L08 XREQUEST_TYPE "DISABLE"                                      00247200
.***      BL1'X1XXXXXX'                                                 00247300
         AIF   ('&XREQUEST' NE 'DISABLE').ZI9A                          00247400
&ZW                   SETC  '&ZW.1'                                     00247500
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00247600
                      AGO   .ZI9C                                       00247700
.*                                                                      00247800
.ZI9A                 ANOP  ,                                           00247900
&ZW                   SETC  '&ZW.0'                                     00248000
.ZI9C                 ANOP  ,                                           00248100
.*-------------------------------------------------------------------   00248200
.***AI.L08 XREQUEST_TYPE "ENABLE"                                       00248300
.***      BL1'XX1XXXXX'                                                 00248400
         AIF   ('&XREQUEST' NE 'ENABLE').ZI10A                          00248500
&ZW                   SETC  '&ZW.1'                                     00248600
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00248700
                      AGO   .ZI10C                                      00248800
.*                                                                      00248900
.ZI10A                ANOP  ,                                           00249000
&ZW                   SETC  '&ZW.0'                                     00249100
.ZI10C                ANOP  ,                                           00249200
.*-------------------------------------------------------------------   00249300
.***AI.L08 XREQUEST_TYPE "EXCHANGE"                                     00249400
.***      BL1'XXX1XXXX'                                                 00249500
         AIF   ('&XREQUEST' NE 'EXCHANGE').ZI11A                        00249600
&ZW                   SETC  '&ZW.10000'                                 00249700
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00249800
                      AGO   .ZI11C                                      00249900
.*                                                                      00250000
.ZI11A                ANOP  ,                                           00250100
&ZW                   SETC  '&ZW.00000'                                 00250200
.ZI11C                ANOP  ,                                           00250300
.*-------------------------------------------------------------------   00250400
.***AI.L11 XREQUEST_TYPE BL1                                            00250500
                      AIF   ('&ZCLNG' NE 'YES').ZI11E  ALL ZERO BITS    00250600
&ZOPN                 SETA  &ZOPN+1                                     00250700
&ZOPL(&ZOPN)          SETC  ' '                                         00250800
&ZOPO(&ZOPN)          SETC  'OI'                                        00250900
&ZOPV(&ZOPN)          SETC  '16(1),B''&ZW'''                            00251000
&ZOPD(&ZOPN)          SETC  '++ INPUT BL1'                              00251100
.ZI11E                ANOP  ,                                           00251200
.*-------------------------------------------------------------------   00251300
.***AI.L05 XMISC_FLAGS BL1                                              00251400
&ZW                   SETC  ''                                          00251500
&ZCLNG                SETC  ''             RESET BIT ON FLAG            00251600
.*-------------------------------------------------------------------   00251700
.***AI.L08 XMISC_FLAGS "YES"                                            00251800
.***      BL1'1XXXXXXX'                                                 00251900
         AIF   ('&XLOADTOGLOBAL' NE 'YES').ZI14A                        00252000
&ZW                   SETC  '&ZW.10000000'                              00252100
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00252200
                      AGO   .ZI14C                                      00252300
.*                                                                      00252400
.ZI14A                ANOP  ,                                           00252500
&ZW                   SETC  '&ZW.00000000'                              00252600
.ZI14C                ANOP  ,                                           00252700
.*-------------------------------------------------------------------   00252800
.***AI.L11 XMISC_FLAGS BL1                                              00252900
                      AIF   ('&ZCLNG' NE 'YES').ZI14E  ALL ZERO BITS    00253000
&ZOPN                 SETA  &ZOPN+1                                     00253100
&ZOPL(&ZOPN)          SETC  ' '                                         00253200
&ZOPO(&ZOPN)          SETC  'OI'                                        00253300
&ZOPV(&ZOPN)          SETC  '18(1),B''&ZW'''                            00253400
&ZOPD(&ZOPN)          SETC  '++ INPUT BL1'                              00253500
.ZI14E                ANOP  ,                                           00253600
.*-------------------------------------------------------------------   00253700
.***AI.L19  XSSVTDATA A                                                 00253800
                      AIF   ('&ZXSSVTDATA' EQ '').ZI16H                 00253900
&ZCLNG                SETC  '&XSSVTDATA'                                00254000
&ZCGPR                SETC  '14'                                        00254100
.*                                                                      00254200
&ZOPN                 SETA  &ZOPN+1                                     00254300
&ZOPL(&ZOPN)          SETC  ' '                                         00254400
&ZOPO(&ZOPN)          SETC  'LA'                                        00254500
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             00254600
&ZOPD(&ZOPN)          SETC  '++ &ZXSSVTDATA XSSVTDATA'                  00254700
.*                                                                      00254800
&ZOPN                 SETA  &ZOPN+1                                     00254900
&ZOPL(&ZOPN)          SETC  ' '                                         00255000
&ZOPO(&ZOPN)          SETC  'ST'                                        00255100
&ZOPV(&ZOPN)          SETC  '&ZCGPR,20(,1)'                             00255200
&ZOPD(&ZOPN)          SETC  '++ &ZXSSVTDATA XSSVTDATA'                  00255300
.*                                                                      00255400
.ZI16H                ANOP  ,                                           00255500
.*-------------------------------------------------------------------   00255600
.***AI.L25  XMAXENTRIES XL2                                             00255700
                      AIF   ('&ZXMAXENTRIES' EQ '').ZI17E               00255800
                      AIF   ('&ZXMAXENTRIES' EQ 'OUTPUT').ZI17E         00255900
&ZCGPR                SETC  '&XMAXENTRIES'                              00256000
.*                                                                      00256100
                      AIF   ('&XMAXENTRIES'(1,1) NE '(').ZI17B          00256200
&ZCGPR   SETC  '0('.'&XMAXENTRIES'(2,K'&XMAXENTRIES-2).')'              00256300
                      AGO   .ZI17D                                      00256400
.ZI17B                ANOP  ,                                           00256500
.*                                                                      00256600
&ZC                   SETC  '&XMAXENTRIES'(1,1)                         00256700
                      AIF   (T'&ZC NE 'N').ZI17D                        00256800
&ZC                   SETC  '&XMAXENTRIES'                              00256900
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI17D               00257000
&ZCGPR                SETC  '=FL2''&XMAXENTRIES'''                      00257100
.*                                                                      00257200
.ZI17D                ANOP  ,                                           00257300
.*                                                                      00257400
&ZOPN                 SETA  &ZOPN+1                                     00257500
&ZOPL(&ZOPN)          SETC  ' '                                         00257600
&ZOPO(&ZOPN)          SETC  'MVC'                                       00257700
&ZOPV(&ZOPN)          SETC  '24(2,1),&ZCGPR'                            00257800
&ZOPD(&ZOPN)          SETC  '++ &ZXMAXENTRIES XMAXENTRIES'              00257900
.*                                                                      00258000
.ZI17E                ANOP  ,                                           00258100
.*-------------------------------------------------------------------   00258200
.***AI.L25  XSUBPOOL XL1                                                00258300
                      AIF   ('&ZXSUBPOOL' EQ '').ZI18E                  00258400
                      AIF   ('&ZXSUBPOOL' EQ 'OUTPUT').ZI18E            00258500
&ZCGPR                SETC  '&XSUBPOOL'                                 00258600
.*                                                                      00258700
                      AIF   ('&XSUBPOOL'(1,1) NE '(').ZI18B             00258800
&ZCGPR   SETC  '0('.'&XSUBPOOL'(2,K'&XSUBPOOL-2).')'                    00258900
                      AGO   .ZI18D                                      00259000
.ZI18B                ANOP  ,                                           00259100
.*                                                                      00259200
&ZC                   SETC  '&XSUBPOOL'(1,1)                            00259300
                      AIF   (T'&ZC NE 'N').ZI18D                        00259400
&ZC                   SETC  '&XSUBPOOL'                                 00259500
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI18D               00259600
&ZCGPR                SETC  '=AL1(&XSUBPOOL)'                           00259700
.*                                                                      00259800
.ZI18D                ANOP  ,                                           00259900
.*                                                                      00260000
&ZOPN                 SETA  &ZOPN+1                                     00260100
&ZOPL(&ZOPN)          SETC  ' '                                         00260200
&ZOPO(&ZOPN)          SETC  'MVC'                                       00260300
&ZOPV(&ZOPN)          SETC  '26(1,1),&ZCGPR'                            00260400
&ZOPD(&ZOPN)          SETC  '++ &ZXSUBPOOL XSUBPOOL'                    00260500
.*                                                                      00260600
.ZI18E                ANOP  ,                                           00260700
.*-------------------------------------------------------------------   00260800
.***AI.L18  XINTOKEN XL4                                                00260900
         AIF   ('&XINTOKEN' NE 'NULL').ZI20                             00261000
&ZXINTOKEN            SETC  ''             RESET INPUT/OUTPUT           00261100
.ZI20                 ANOP  ,                                           00261200
.*-------------------------------------------------------------------   00261300
.***AI.L25  XINTOKEN XL4                                                00261400
                      AIF   ('&ZXINTOKEN' EQ '').ZI20E                  00261500
                      AIF   ('&ZXINTOKEN' EQ 'OUTPUT').ZI20E            00261600
&ZCGPR                SETC  '&XINTOKEN'                                 00261700
.*                                                                      00261800
                      AIF   ('&XINTOKEN'(1,1) NE '(').ZI20B             00261900
&ZCGPR   SETC  '0('.'&XINTOKEN'(2,K'&XINTOKEN-2).')'                    00262000
                      AGO   .ZI20D                                      00262100
.ZI20B                ANOP  ,                                           00262200
.*                                                                      00262300
&ZC                   SETC  '&XINTOKEN'(1,1)                            00262400
                      AIF   (T'&ZC NE 'N').ZI20D                        00262500
&ZC                   SETC  '&XINTOKEN'                                 00262600
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI20D               00262700
&ZCGPR                SETC  '=BL4''&XINTOKEN'''                         00262800
.*                                                                      00262900
.ZI20D                ANOP  ,                                           00263000
.*                                                                      00263100
&ZOPN                 SETA  &ZOPN+1                                     00263200
&ZOPL(&ZOPN)          SETC  ' '                                         00263300
&ZOPO(&ZOPN)          SETC  'MVC'                                       00263400
&ZOPV(&ZOPN)          SETC  '28(4,1),&ZCGPR'                            00263500
&ZOPD(&ZOPN)          SETC  '++ &ZXINTOKEN XINTOKEN'                    00263600
.*                                                                      00263700
.ZI20E                ANOP  ,                                           00263800
.*-------------------------------------------------------------------   00263900
.***AI.C01 RESTORE ADDR OF PARM LIST PTR                                00264000
.*                                                                      00264100
&ZOPN                 SETA  &ZOPN+1                                     00264200
&ZOPL(&ZOPN)          SETC  ' '                                         00264300
&ZOPO(&ZOPN)          SETC  'ST'                                        00264400
&ZOPV(&ZOPN)          SETC  '1,72(,1)'                                  00264500
&ZOPD(&ZOPN)          SETC  '++ STORE ADDR OF PARM LIST'                00264600
.*                                                                      00264700
&ZOPN                 SETA  &ZOPN+1                                     00264800
&ZOPL(&ZOPN)          SETC  ' '                                         00264900
&ZOPO(&ZOPN)          SETC  'LA'                                        00265000
&ZOPV(&ZOPN)          SETC  '1,72(,1)'                                  00265100
&ZOPD(&ZOPN)          SETC  '++ LOAD ADDR OF PARM LIST PTR INTO R1'     00265200
.*-------------------------------------------------------------------   00265300
&ZOPN1                SETA &ZOPN                                        00265400
.*******************************************************************    00265500
.***  PROCESS IEFSSVT OUTPUT PARAMETERS                                 00265600
.*******************************************************************    00265700
                      ACTR  10000                                       00265800
.OUTKEYSP             ANOP  ,                                           00265900
.*                                                                      00266000
&ZOPN                 SETA  &ZOPN+1                                     00266100
&ZOPL(&ZOPN)          SETC  ' '                                         00266200
&ZOPO(&ZOPN)          SETC  'L'                                         00266300
&ZOPV(&ZOPN)          SETC  '1,0(,1)'                                   00266400
&ZOPD(&ZOPN)          SETC  '++ RESTORE ADDR OF PARM LIST'              00266500
.*                                                                      00266600
.NOOUTKEY             ANOP  ,                                           00266700
.*------------------------------------------------------------------    00266800
.***AO.L02 XOUTTOKEN XL4                                                00266900
         AIF   ('&ZXOUTTOKEN' EQ 'OUTPUT').ZO23A  OUTPUT                00267000
         AIF   ('&ZXOUTTOKEN' NE 'INOUT').ZO23C  INOUT                  00267100
.ZO23A    AIF   ('&XOUTTOKEN'(1,1) NE '(').ZO23B  ADDR IN GPR           00267200
&ZCGPR   SETC  '&XOUTTOKEN'(2,K'&XOUTTOKEN-2)                           00267300
&ZOPN                 SETA  &ZOPN+1                                     00267400
&ZOPL(&ZOPN)          SETC  ' '                                         00267500
&ZOPO(&ZOPN)          SETC  'MVC'                                       00267600
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),56(1)'                         00267700
&ZOPD(&ZOPN)          SETC  '++ XOUTTOKEN XL4'                          00267800
                      AGO   .ZO23C                                      00267900
.*                                                                      00268000
.ZO23B                ANOP  ,                                           00268100
&ZAWRK   SETA  K'&XOUTTOKEN                                             00268200
         AIF   ('&XOUTTOKEN'(&ZAWRK,1) NE ')').ZO23G                    00268300
&ZN      SETA  2                                                        00268400
.ZO23H    ANOP                                                          00268500
         AIF   (&ZN GE &ZAWRK).ZO23G                                    00268600
         AIF   ('&XOUTTOKEN'(&ZN,1) NE '(').ZO23I                       00268700
&ZC      SETC  '&XOUTTOKEN'(1,&ZN).'4'.','                              00268800
&ZC      SETC  '&ZC'.'&XOUTTOKEN'(&ZN+1,&ZAWRK-&ZN).',56(1)'            00268900
         AGO   .ZO23J                                                   00269000
.ZO23I    ANOP                                                          00269100
&ZN      SETA  &ZN+1                                                    00269200
         AGO   .ZO23H                                                   00269300
.ZO23G    ANOP                                                          00269400
&ZC      SETC  '&XOUTTOKEN.(4),56(1)'                                   00269500
.ZO23J    ANOP                                                          00269600
&ZOPN                 SETA  &ZOPN+1                                     00269700
&ZOPL(&ZOPN)          SETC  ' '                                         00269800
&ZOPO(&ZOPN)          SETC  'MVC'                                       00269900
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00270000
&ZOPD(&ZOPN)          SETC  '++ XOUTTOKEN XL4'                          00270100
.ZO23C                ANOP  ,                                           00270200
.*------------------------------------------------------------------    00270300
.***AO.L02 XERRFUNCT CL8                                                00270400
         AIF   ('&ZXERRFUNCT' EQ 'OUTPUT').ZO24A  OUTPUT                00270500
         AIF   ('&ZXERRFUNCT' NE 'INOUT').ZO24C  INOUT                  00270600
.ZO24A    AIF   ('&XERRFUNCT'(1,1) NE '(').ZO24B  ADDR IN GPR           00270700
&ZCGPR   SETC  '&XERRFUNCT'(2,K'&XERRFUNCT-2)                           00270800
&ZOPN                 SETA  &ZOPN+1                                     00270900
&ZOPL(&ZOPN)          SETC  ' '                                         00271000
&ZOPO(&ZOPN)          SETC  'MVC'                                       00271100
&ZOPV(&ZOPN)          SETC  '0(8,&ZCGPR),60(1)'                         00271200
&ZOPD(&ZOPN)          SETC  '++ XERRFUNCT CL8'                          00271300
                      AGO   .ZO24C                                      00271400
.*                                                                      00271500
.ZO24B                ANOP  ,                                           00271600
&ZAWRK   SETA  K'&XERRFUNCT                                             00271700
         AIF   ('&XERRFUNCT'(&ZAWRK,1) NE ')').ZO24G                    00271800
&ZN      SETA  2                                                        00271900
.ZO24H    ANOP                                                          00272000
         AIF   (&ZN GE &ZAWRK).ZO24G                                    00272100
         AIF   ('&XERRFUNCT'(&ZN,1) NE '(').ZO24I                       00272200
&ZC      SETC  '&XERRFUNCT'(1,&ZN).'8'.','                              00272300
&ZC      SETC  '&ZC'.'&XERRFUNCT'(&ZN+1,&ZAWRK-&ZN).',60(1)'            00272400
         AGO   .ZO24J                                                   00272500
.ZO24I    ANOP                                                          00272600
&ZN      SETA  &ZN+1                                                    00272700
         AGO   .ZO24H                                                   00272800
.ZO24G    ANOP                                                          00272900
&ZC      SETC  '&XERRFUNCT.(8),60(1)'                                   00273000
.ZO24J    ANOP                                                          00273100
&ZOPN                 SETA  &ZOPN+1                                     00273200
&ZOPL(&ZOPN)          SETC  ' '                                         00273300
&ZOPO(&ZOPN)          SETC  'MVC'                                       00273400
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00273500
&ZOPD(&ZOPN)          SETC  '++ XERRFUNCT CL8'                          00273600
.ZO24C                ANOP  ,                                           00273700
.*******************************************************************    00273800
.***AO.X02  RETURN CODE PROCESSING                                      00273900
.*******************************************************************    00274000
                      AIF   (N'&RETCODE LE 0).ZMRETX                    00274100
                      AIF   ('&XRETCODE'(1,1) EQ '(').ZMRET2            00274200
                      AIF   ('&XRETCODE' EQ 'GPR15').ZMRETX             00274300
                      AIF   ('&XRETCODE' EQ 'REG15').ZMRETX             00274400
                      AIF   ('&XRETCODE' EQ 'R15').ZMRETX               00274500
                      AIF   ('&XRETCODE' EQ '15').ZMRETX                00274600
&ZOPN                 SETA  &ZOPN+1                                     00274700
&ZOPL(&ZOPN)          SETC  ' '                                         00274800
&ZOPO(&ZOPN)          SETC  'ST'                                        00274900
&ZOPV(&ZOPN)          SETC  '15,&XRETCODE'                              00275000
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00275100
                      AGO   .ZMRETX                                     00275200
.*                                                                      00275300
.ZMRET2               ANOP  ,                                           00275400
&ZCGPR                SETC  '&XRETCODE'(2,K'&XRETCODE-2)                00275500
                      AIF   ('&ZCGPR' EQ 'GPR15').ZMRETX                00275600
                      AIF   ('&ZCGPR' EQ 'REG15').ZMRETX                00275700
                      AIF   ('&ZCGPR' EQ 'R15').ZMRETX                  00275800
                      AIF   ('&ZCGPR' EQ '15').ZMRETX                   00275900
&ZOPN                 SETA  &ZOPN+1                                     00276000
&ZOPL(&ZOPN)          SETC  ' '                                         00276100
&ZOPO(&ZOPN)          SETC  '&ZMAC_LR'                                  00276200
&ZOPV(&ZOPN)          SETC  '&ZCGPR,15'                                 00276300
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00276400
.ZMRETX               ANOP  ,                                           00276500
.*******************************************************************    00276600
.***AO.X03  REASON CODE PROCESSING                                      00276700
.*******************************************************************    00276800
                      AIF   (N'&RSNCODE LE 0).ZMRSNX                    00276900
                      AIF   ('&XRSNCODE'(1,1) EQ '(').ZMRSN2            00277000
                      AIF   ('&XRSNCODE' EQ 'GPR0').ZMRSNX              00277100
                      AIF   ('&XRSNCODE' EQ 'GPR00').ZMRSNX             00277200
                      AIF   ('&XRSNCODE' EQ 'REG0').ZMRSNX              00277300
                      AIF   ('&XRSNCODE' EQ 'REG00').ZMRSNX             00277400
                      AIF   ('&XRSNCODE' EQ 'R0').ZMRSNX                00277500
                      AIF   ('&XRSNCODE' EQ '0').ZMRSNX                 00277600
                      AIF   ('&XRSNCODE' EQ '00').ZMRSNX                00277700
&ZOPN                 SETA  &ZOPN+1                                     00277800
&ZOPL(&ZOPN)          SETC  ' '                                         00277900
&ZOPO(&ZOPN)          SETC  'ST'                                        00278000
&ZOPV(&ZOPN)          SETC  '0,&XRSNCODE'                               00278100
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00278200
                      AGO   .ZMRSNX                                     00278300
.*                                                                      00278400
.ZMRSN2               ANOP  ,                                           00278500
&ZCGPR                SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                00278600
                      AIF   ('&ZCGPR' EQ 'GPR0').ZMRSNX                 00278700
                      AIF   ('&ZCGPR' EQ 'GPR00').ZMRSNX                00278800
                      AIF   ('&ZCGPR' EQ 'REG0').ZMRSNX                 00278900
                      AIF   ('&ZCGPR' EQ 'REG00').ZMRSNX                00279000
                      AIF   ('&ZCGPR' EQ 'R0').ZMRSNX                   00279100
                      AIF   ('&ZCGPR' EQ '0').ZMRSNX                    00279200
                      AIF   ('&ZCGPR' EQ '00').ZMRSNX                   00279300
&ZOPN                 SETA  &ZOPN+1                                     00279400
&ZOPL(&ZOPN)          SETC  ' '                                         00279500
&ZOPO(&ZOPN)          SETC  '&ZMAC_LR'                                  00279600
&ZOPV(&ZOPN)          SETC  '&ZCGPR,0'                                  00279700
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00279800
.ZMRSNX               ANOP  ,                                           00279900
.*******************************************************************    00280000
.***AO.X04  LABEL FOR MF=L PROCESSING                                   00280100
.*******************************************************************    00280200
.ZMFLX                ANOP  ,              MF=L PROCESSING              00280300
.*******************************************************************    00280400
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               00280500
.*******************************************************************    00280600
                      ACTR  10000                                       00280700
.*                                                                      00280800
                      LCLA  &ZLC           COLUMN POSITION              00280900
                      LCLA  &ZOPX          LIST TABLE INDEX             00281000
                      LCLC  &ZLL           LABEL                        00281100
                      LCLC  &ZLOP          OPERATION                    00281200
                      LCLC  &ZLV           VALUE                        00281300
                      LCLC  &ZLD           DESCRIPTION                  00281400
.*                                                                      00281500
&ZOPX                 SETA  1                                           00281600
.ZL2                  AIF   (&ZOPX GT &ZOPN1).ZLX  B IF DONE            00281700
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00281800
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00281900
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00282000
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00282100
                      AIF   (K'&ZLD LE 0).ZL5                           00282200
&ZLC                  SETA  35             COMMENT COLUMN               00282300
                      AIF   ('&ZLD'(1,1) NE '*').ZL3                    00282400
&ZLC                  SETA  33             COMMMENT COLUMN              00282500
.ZL3                  AIF   (K'&ZLV GE &ZLC-16-1).ZL4                   00282600
&ZLV                  SETC  '&ZLV'.' '                                  00282700
                      AGO   .ZL3                                        00282800
.*                                                                      00282900
.ZL4                  ANOP  ,                                           00283000
&ZLV                  SETC  '&ZLV'.' '                                  00283100
.ZL5                  ANOP  ,                                           00283200
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00283300
.*                                                                      00283400
&ZLL     &ZLOP &ZLV                                                     00283500
.*                                                                      00283600
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00283700
                      AGO   .ZL2           CONTINUE LOOPING             00283800
.*                                                                      00283900
.ZLX                  ANOP  ,                                           00284000
                      AIF   ('&XMF' EQ 'L').ZLINKX  MF=L                00284100
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00284200
.********************************************************************** 00284300
.* Invoke IEFSSVT service routine                                       00284400
.********************************************************************** 00284500
         LA    15,16                                                    00284600
         L     15,0(15)                CVT address                      00284700
         USING CVT,15                                                   00284800
         L     15,CVTJESCT             JESCT address                    00284900
         USING JESCT,15                                                 00285000
         L     15,JESCTEXT             JESCT pageable extension         00285100
         USING JESPEXT,15                                               00285200
         L     15,JESVTPC              IEFSSVT PC number                00285300
         DROP  15                                                       00285400
         LTR   15,15                   Test whether service available   00285500
         JZ    #NSSI&SYSNDX                                        @P3C 00285600
         PC    0(15)                   Process service request          00285700
         J     #SSI&SYSNDX                                         @P3C 00285800
#NSSI&SYSNDX  DS  0H                                                    00285900
         LA    15,IEFSSVT_UNAVAILABLE  Indicate service not available   00286000
#SSI&SYSNDX   DS  0H                                                    00286100
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00286200
.ZLINKX               ANOP  ,                                           00286300
.*******************************************************************    00286400
.***AP.X01  FORMAT GENERATED CODE                                       00286500
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            00286600
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00286700
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00286800
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00286900
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00287000
                      AIF   (K'&ZLD LE 0).ZL51                          00287100
&ZLC                  SETA  35             COMMENT COLUMN               00287200
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   00287300
&ZLC                  SETA  33             COMMENT COLUMN               00287400
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  00287500
&ZLV                  SETC  '&ZLV'.' '                                  00287600
                      AGO   .ZL31                                       00287700
.*                                                                      00287800
.ZL41                 ANOP  ,                                           00287900
&ZLV                  SETC  '&ZLV'.' '                                  00288000
.ZL51                 ANOP  ,                                           00288100
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00288200
.*                                                                      00288300
&ZLL     &ZLOP &ZLV                                                     00288400
.*                                                                      00288500
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00288600
                      AGO   .ZL21          CONTINUE LOOPING             00288700
.*                                                                      00288800
.ZLX1                 ANOP  ,                                           00288900
.*******************************************************************    00289000
.***AP.X02  END OF IEFSSVT MACRO                                        00289100
&ZIEFSSVT             SETC  'YES'          SET IEFSSVT USED             00289200
         POP   PRINT                                                    00289300
*                                            IEFSSVT-1                  00289400
         SPACE 1                                                        00289500
.ZLX2                 ANOP  ,                                           00289600
         MEND                                                           00289700
**********************************************************************/ 00289800
*/**** START OF SPECIFICATIONS **************************************** 00289900
*                                                                     * 00290000
*                                                                     * 00290100
*01* MACRO NAME:  IEFSSVT                               -10/24/16-<1> * 00290200
*                                                                     * 00290300
*                                                                     * 00290400
*01* DESCRIPTIVE NAME:  Subsystem Vector Table Service Macro          * 00290500
*                                                                     * 00290600
*01* PROPRIETARY STATEMENT:                                           * 00290700
*                                                                     * 00290800
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00290900
*     5650-ZOS COPYRIGHT IBM CORP. 1994, 2017                         * 00291000
*                                                                     * 00291100
* STATUS= HBB77B0                                                     * 00291200
*                                                                     * 00291300
*                                                                     * 00291400
*                                                                     * 00291500
*01* FUNCTION:                                                        * 00291600
*       See the IEFSSVT macro prologue for details.                   * 00291700
*                                                                     * 00291800
*01* INPUT:                                                           * 00291900
*                                                                     * 00292000
*            ?IEFSSVT     SUBNAME(xsubname)                           * 00292100
*                       Ð REQUEST(CREATE)                             * 00292200
*                       !     SSVTDATA(xssvtdata)                     * 00292300
*                       !     OUTTOKEN(xouttoken)                     * 00292400
*                       !    ÝSUBPOOL(»xsubpool!241º)¨                * 00292500
*                       !     MAXENTRIES(xmaxentries)                 * 00292600
*                       !    ÝLOADTOGLOBAL(»NO!YESº)¨                 * 00292700
*                       !    ÝERRFUNCT(xerrfunct)¨                    * 00292800
*                       Ô REQUEST(DISABLE)                            * 00292900
*                       !     SSVTDATA(xssvtdata)                     * 00293000
*                       !    ÝINTOKEN(»xintoken!NULLº)¨               * 00293100
*                       Ô REQUEST(ENABLE)                             * 00293200
*                       !     SSVTDATA(xssvtdata)                     * 00293300
*                       !    ÝINTOKEN(»xintoken!NULLº)¨               * 00293400
*                       !    ÝLOADTOGLOBAL(»NO!YESº)¨                 * 00293500
*                       !    ÝERRFUNCT(xerrfunct)¨                    * 00293600
*                       ¿ REQUEST(EXCHANGE)                           * 00293700
*                             SSVTDATA(xssvtdata)                     * 00293800
*                            ÝINTOKEN(»xintoken!NULLº)¨               * 00293900
*                            ÝLOADTOGLOBAL(»NO!YESº)¨                 * 00294000
*                            ÝERRFUNCT(xerrfunct)¨                    * 00294100
*                        ÝRETCODE(xretcode)¨                          * 00294200
*                        ÝRSNCODE(xrsncode)¨                          * 00294300
*                        ÝCOM(»xcom!NULLº)¨                           * 00294400
*                        ÝPLISTVER(»xplistver!IMPLIED_VERSIONº)¨      * 00294500
*                       ÐÝMF(S)¨                                      * 00294600
*                       ÔÝMF(L,xmfctrl»,xmfattr!BDY(DWORD)º)¨         * 00294700
*                       ¿ÝMF(E,xmfctrl»,COMPLETEº)¨                   * 00294800
*                                                                     * 00294900
****** END OF SPECIFICATIONS *****************************************/ 00295000
*/*PB.ECHO02 ECHO MACRO COMMENT--------------------------------------*/ 00295100
*  IF COM^=''                                                           00295200
*    THEN                                                               00295300
*      DO;                                                              00295400
*        IF INDEX(COM(1),'''')=1                                        00295500
*          THEN                                                         00295600
*            ANS('/* '!!COM(1,2:LENGTH                                  00295700
*                     (COM(1))-1)!!'*/')                                00295800
*            NORESCAN COL(MACLMAR+5);  /* COMMENT ECHO */               00295900
*          ELSE                                                         00296000
*            ANS('/* '!!COM(1)!!'*/')                                   00296100
*            NORESCAN COL(MACLMAR+5);  /* COMMENT ECHO */               00296200
*        ANS('@SPACE;')                                                 00296300
*            NORESCAN COL(MACLMAR);  /* COMMENT ECHO */                 00296400
*      END;                                                             00296500
*/*PB.ECHO03 START OF MACRO INVOCATION ECHO--------------------------*/ 00296600
*  ANS('/* ? IEFSSVT '!!MACLIST!!' ')                                   00296700
*      NORESCAN COL(MACLMAR+5);    /* START ECHO */                     00296800
*                                                                       00296900
*  DCL ZELO  FIXED;                                                     00297000
*  DCL ZECOL FIXED;                                                     00297100
*                                                                       00297200
*  ZELO=1;     /* STARTING COLUMN */                                    00297300
*  DO WHILE ZELO<=LENGTH(MACKEYS);  /* PARENTHSIS SCAN */               00297400
*    IF INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),'COM(') =1 !                00297500
*       INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),' COM(')=1 !                00297600
*       INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),'COM(') =1 !                00297700
*       INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),' COM(')=1                  00297800
*      THEN                                                             00297900
*        DO;   /* CLOSING PARENTHESIS */                                00298000
*          ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');              00298100
*          IF ZECOL>0                                                   00298200
*            THEN                                                       00298300
*              ZELO=ZELO+ZECOL;    /* SKIP TEXT */                      00298400
*            ELSE                                                       00298500
*              ZELO=LENGTH(MACKEYS)+1;  /* NO CLOSING ")" */            00298600
*        END;                                                           00298700
*      ELSE                                                             00298800
*        DO;                                                            00298900
*          ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');              00299000
*          IF ZECOL>0                                                   00299100
*            THEN                                                       00299200
*              DO;                 /* PARENTHESIS FOUND */              00299300
*                ANS(MACKEYS(ZELO:ZELO+ZECOL-1)!!' ')                   00299400
*                   NORESCAN COL(MACLMAR+5);                            00299500
*                ZELO=ZELO+ZECOL;  /* NEXT PORTION */                   00299600
*              END;                                                     00299700
*            ELSE                                                       00299800
*              DO;                 /* REMAINING KEYS */                 00299900
*                ANS(MACKEYS(ZELO:LENGTH(MACKEYS)))                     00300000
*                   NORESCAN COL(MACLMAR+5);                            00300100
*                ZELO=LENGTH(MACKEYS)+1;                                00300200
*              END;                                                     00300300
*        END;                                                           00300400
*  END;                                                                 00300500
*/*PB.ECHO05 END OF MACRO INVOCATION ECHO----------------------------*/ 00300600
*  ANS(' -10/24/16-1- */')                                              00300700
*      NORESCAN COL(MACLMAR+5);    /* END ECHO */                       00300800
*/********************************************************************/ 00300900
*/*PV.DCL01 MACRO DECLARES AND CODE GENERATION CONTROLS              */ 00301000
*/********************************************************************/ 00301100
*  DCL ZPRINT  EXTERNAL; DEACT ZPRINT; /* YES=PRINT, NO=NO PRINT     */ 00301200
*  DCL ZTEST   EXTERNAL; DEACT ZTEST;  /* YES=TEST, NO=NO TEST       */ 00301300
*  DCL ZSYSTEM EXTERNAL; DEACT ZSYSTEM;/* PCCODE10, MVS, SAK, VM     */ 00301400
*                                                                       00301500
*  DCL   ZIEFSSVT CHAR EXTERNAL; /* YES=USED AT LEAST ONCE          */  00301600
*  DEACT ZIEFSSVT;                                                      00301700
*                                                                       00301800
*  DCL ZMACRET FIXED; DEACT ZMACRET;                                    00301900
*  ZMACRET=0;                   /* MACRO COMPILE RETURN CODE         */ 00302000
*                                                                       00302100
*  DCL ZMS CHAR;   DEACT ZMS;   /* ERROR MESSAGE                     */ 00302200
*  DCL ZCVAL CHAR; DEACT ZCVAL; /* ERROR MESSAGE WORK AREA           */ 00302300
*                                                                       00302400
*  DCL ZI FIXED;  DEACT ZI;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00302500
*  DCL ZJ FIXED;  DEACT ZJ;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00302600
*  DCL ZK FIXED;  DEACT ZK;     /* INDEX FOR RANGE COLON (:)         */ 00302700
*  DCL ZL FIXED;  DEACT ZL;     /* INDEX FOR RANGE VALUE CHECKING    */ 00302800
*  DCL ZLO FIXED; DEACT ZLO;    /* LOW RANGE VALUE                   */ 00302900
*  DCL ZHI FIXED; DEACT ZHI;    /* HIGH RANGE VALUE                  */ 00303000
*  DCL ZW CHAR;   DEACT ZW;     /* WORK AREA FOR RANGE VALUE SUBLIST */ 00303100
*  DCL ZN FIXED;  DEACT ZN;     /* NUMERIC WORK VARIABLE             */ 00303200
*  DCL ZC CHAR;   DEACT ZC;     /* CHARACTER WORK VARIABLE           */ 00303300
*  DCL ZMAXINVOCLEN FIXED; DEACT ZMAXINVOCLEN;  /* INVOCATION LENGTH */ 00303400
*  DCL ZPLLEN FIXED; DEACT ZPLLEN;        /* PARAMETER LIST LENGTH   */ 00303500
*                                                                       00303600
*  DCL ZPRMMAX FIXED;           /* MAXIMUM PARM LIST SIZE            */ 00303700
*  DCL ZPRMNUM FIXED;           /* PARAMETER ARRAY INDEX             */ 00303800
*  DCL ZPRM(100);               /* PARAMETER ENTRY                   */ 00303900
*  DCL EHAMAXLEN FIXED EXTERNAL;   /* MAX ILIST SIZE FOR PARM LISTS  */ 00304000
*  DCL EHAREGS CHARACTER EXTERNAL; /* REG DCLS                       */ 00304100
*  DCL EHAREGS64 CHARACTER EXTERNAL; /* REG DCLS                     */ 00304200
*  DCL EHALIST CHARACTER EXTERNAL; /* STANDARD PARM LIST GENERATION  */ 00304300
*/*******************************************************************/  00304400
*/*PV.XVAR01 DECLARE ALL MACRO PARAMETER VARIABLES                  */  00304500
*/*******************************************************************/  00304600
*  DCL XSUBNAME;  DEACT XSUBNAME;  /***PV.XVAR02 INPUT NAME */          00304700
*  DCL ZXSUBNAME; DEACT ZXSUBNAME;  /***INPUT/OUTPUT CONTROL */         00304800
*  DCL XREQUEST;  DEACT XREQUEST;  /***PV.XVAR02 INPUT VALUE */         00304900
*  DCL ZXREQUEST; DEACT ZXREQUEST;  /***INPUT/OUTPUT CONTROL */         00305000
*  DCL XSSVTDATA;  DEACT XSSVTDATA;  /***PV.XVAR02 INPUT NAME */        00305100
*  DCL ZXSSVTDATA; DEACT ZXSSVTDATA;  /***INPUT/OUTPUT CONTROL */       00305200
*  DCL XOUTTOKEN;  DEACT XOUTTOKEN;  /***PV.XVAR02 OUTPUT NAME */       00305300
*  DCL ZXOUTTOKEN; DEACT ZXOUTTOKEN;  /***INPUT/OUTPUT CONTROL */       00305400
*  DCL XSUBPOOL;  DEACT XSUBPOOL;  /***PV.XVAR02 INPUT NAME */          00305500
*  DCL ZXSUBPOOL; DEACT ZXSUBPOOL;  /***INPUT/OUTPUT CONTROL */         00305600
*  DCL   XMAXENTRIES;              /***PV.XVAR03 INPUT NAME */          00305700
*  DEACT XMAXENTRIES;              /***PV.XVAR03 INPUT NAME */          00305800
*  DCL   ZXMAXENTRIES;             /***INPUT/OUTPUT CONTROL */          00305900
*  DEACT ZXMAXENTRIES;             /***INPUT/OUTPUT CONTROL */          00306000
*  DCL   XLOADTOGLOBAL;            /***PV.XVAR03 INPUT VALUE */         00306100
*  DEACT XLOADTOGLOBAL;            /***PV.XVAR03 INPUT VALUE */         00306200
*  DCL   ZXLOADTOGLOBAL;           /***INPUT/OUTPUT CONTROL */          00306300
*  DEACT ZXLOADTOGLOBAL;           /***INPUT/OUTPUT CONTROL */          00306400
*  DCL XERRFUNCT;  DEACT XERRFUNCT;  /***PV.XVAR02 OUTPUT NAME */       00306500
*  DCL ZXERRFUNCT; DEACT ZXERRFUNCT;  /***INPUT/OUTPUT CONTROL */       00306600
*  DCL XINTOKEN;  DEACT XINTOKEN;  /***PV.XVAR02 INPUT NAME */          00306700
*  DCL ZXINTOKEN; DEACT ZXINTOKEN;  /***INPUT/OUTPUT CONTROL */         00306800
*  DCL XRETCODE;  DEACT XRETCODE;  /***PV.XVAR02 OUTPUT NAME */         00306900
*  DCL ZXRETCODE; DEACT ZXRETCODE;  /***INPUT/OUTPUT CONTROL */         00307000
*  DCL XRSNCODE;  DEACT XRSNCODE;  /***PV.XVAR02 OUTPUT NAME */         00307100
*  DCL ZXRSNCODE; DEACT ZXRSNCODE;  /***INPUT/OUTPUT CONTROL */         00307200
*  DCL XCOM;  DEACT XCOM;          /***PV.XVAR02 INPUT VALUE */         00307300
*  DCL ZXCOM; DEACT ZXCOM;         /***INPUT/OUTPUT CONTROL */          00307400
*  DCL XPLISTVER FIXED;  DEACT XPLISTVER;  /***PV.XVAR02 INPUT VALUE */ 00307500
*  DCL ZXPLISTVER; DEACT ZXPLISTVER;  /***INPUT/OUTPUT CONTROL */       00307600
*  DCL XMF;  DEACT XMF;            /***PV.XVAR02 INPUT VALUE */         00307700
*  DCL ZXMF; DEACT ZXMF;           /***INPUT/OUTPUT CONTROL */          00307800
*  DCL XMFCTRL;  DEACT XMFCTRL;    /***PV.XVAR02 INPUT NAME */          00307900
*  DCL ZXMFCTRL; DEACT ZXMFCTRL;   /***INPUT/OUTPUT CONTROL */          00308000
*  DCL XMFATTR;  DEACT XMFATTR;    /***PV.XVAR02 INPUT VALUE */         00308100
*  DCL ZXMFATTR; DEACT ZXMFATTR;   /***INPUT/OUTPUT CONTROL */          00308200
*  DCL XMFSCK;  DEACT XMFSCK;      /***PV.XVAR02 INPUT VALUE */         00308300
*  DCL ZXMFSCK; DEACT ZXMFSCK;     /***INPUT/OUTPUT CONTROL */          00308400
*/********************************************************************/ 00308500
*/***PC.PLV01  PROCESS PLISTVER                                      */ 00308600
*/********************************************************************/ 00308700
*  IF PLISTVER(1) = 'MAX' THEN                                          00308800
*    XPLISTVER=1;                                                       00308900
*  ELSE                                                                 00309000
*    XPLISTVER=1;                                                       00309100
*  IF PLISTVER^=''                                                      00309200
*     & PLISTVER(1)^='IMPLIED_VERSION'                                  00309300
*     & PLISTVER(1)^='MAX'                                              00309400
*    THEN                                                               00309500
*      DO;                                                              00309600
*                                                                       00309700
*        ZCVAL='';                           /* ERROR FLAG */           00309800
*        IF PLISTVER='PLISTVER' ! PLISTVER='()'  /*CHECK ENTRY*/        00309900
*          THEN                                                         00310000
*            DO;                                                        00310100
*              ZMS=' 8, THE "PLISTVER" KEY'!! /**KOPTP* MSG*/           00310200
*                  ' MUST CONTAIN ONE'!!                                00310300
*                  ' (OR MORE) ARGUMENT(S).';                           00310400
*              ANS MSG('?IEFSSVT ---> '!!ZMS);                          00310500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00310600
*              ZMACRET=8;                    /* MACRO ERROR */          00310700
*              ZCVAL='NO_ARGUMENT';                                     00310800
*            END;                                                       00310900
*        IF NUMBER(PLISTVER)>1               /* CHECK POSITIONALS */    00311000
*          THEN                                                         00311100
*            DO;                                                        00311200
*              ZMS=' 8, "PLISTVER'!!         /**KPOSP* MSG*/            00311300
*                  PLISTVER!!                                           00311400
*                  '" "PLISTVER"'!!                                     00311500
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00311600
*              ANS MSG('?IEFSSVT ---> '!!ZMS);                          00311700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00311800
*              ZMACRET=8;                    /* MACRO ERROR */          00311900
*            END;                                                       00312000
*                                                                       00312100
*        ZC=PLISTVER(1);                                                00312200
*        DO ZL=1 TO LENGTH(ZC);              /* MUST BE NUMBER */       00312300
*          IF ZC(ZL:ZL)<'0' !                /* MUST BE NUMERIC */      00312400
*             ZC(ZL:ZL)>'9'                  /* MUST BE NUMERIC */      00312500
*            THEN                                                       00312600
*              ZCVAL='NUMERIC';              /* NUMERIC ERROR */        00312700
*        END;                                                           00312800
*        IF ZCVAL=''                                                    00312900
*          THEN                                                         00313000
*            DO;                             /* CHECK RANGE LIMITS */   00313100
*            IF FIXED(PLISTVER(1))>=XPLISTVER                           00313200
*              THEN                                                     00313300
*                XPLISTVER=FIXED(PLISTVER(1));                          00313400
*              ELSE                                                     00313500
*                DO;                                                    00313600
*              ZMS=' 8, PLISTVER='!!         /**KVALP* MSG*/            00313700
*                    PLISTVER(1)!!                                      00313800
*                  ', BUT PLISTVER OF '!!                               00313900
*                    CHAR(XPLISTVER)!!                                  00314000
*                  ' IS REQUIRED.';                                     00314100
*              ANS MSG('?IEFSSVT ---> '!!ZMS);                          00314200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00314300
*              ZMACRET=8;                    /* MACRO ERROR */          00314400
*                END;                                                   00314500
*              IF XPLISTVER<1 !              /* LOW LIMIT */            00314600
*                 XPLISTVER>1                /* HIGH LIMIT */           00314700
*                THEN                                                   00314800
*                  ZCVAL='RANGE';            /* RANGE ERROR */          00314900
*            END;                                                       00315000
*        IF ZCVAL^=''                                                   00315100
*          THEN                                                         00315200
*            DO;                             /* RANGE ERROR */          00315300
*              ZXPLISTVER='';                /* RESET IN/OUTPUT */      00315400
*              ZMS=' 8, "PLISTVER '!!        /**KRNGP* MSG*/            00315500
*                  PLISTVER!!                                           00315600
*                  '" THE RANGE IS "1-1"'!!                             00315700
*                  ' FOR ARGUMENT 1.';                                  00315800
*              ANS MSG('?IEFSSVT ---> '!!ZMS);                          00315900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00316000
*              ZMACRET=8;                    /* MACRO ERROR */          00316100
*            END;                                                       00316200
*      END;                                                             00316300
*                                                                       00316400
*/********************************************************************/ 00316500
*/***PG.MF01  PROCESS MF MACRO FORMS                                 */ 00316600
*/********************************************************************/ 00316700
*/*PG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00316800
*  XMF='';                                                              00316900
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00317000
*  IF MF(1)='S'                              /* CHECK FOR KEYWORD */    00317100
*    THEN                                                               00317200
*      DO;                                                              00317300
*        XMF='S';                            /* SET XVARIABLE */        00317400
*        IF NUMBER(MF)>1                     /* CHECK POSITIONALS */    00317500
*          THEN                                                         00317600
*            DO;                                                        00317700
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00317800
*                  MF!!                                                 00317900
*                  '" "MF"'!!                                           00318000
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00318100
*              ANS MSG('?IEFSSVT ---> '!!ZMS);                          00318200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00318300
*              ZMACRET=8;                    /* MACRO ERROR */          00318400
*            END;                                                       00318500
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00318600
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00318700
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00318800
*  IF MF(1)='L'                              /* CHECK FOR KEYWORD */    00318900
*    THEN                                                               00319000
*      DO;                                                              00319100
*        XMF='L';                            /* SET XVARIABLE */        00319200
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00319300
*          THEN                                                         00319400
*            DO;                                                        00319500
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00319600
*                  MF!!                                                 00319700
*                  '" "MF"'!!                                           00319800
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00319900
*              ANS MSG('?IEFSSVT ---> '!!ZMS);                          00320000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00320100
*              ZMACRET=8;                    /* MACRO ERROR */          00320200
*            END;                                                       00320300
*/*PG.KKCTL10 -MF(L) SPECIAL CHECK-----------------------------------*/ 00320400
*        ZMAXINVOCLEN = LENGTH(MF) + 2;                                 00320500
*        IF PLISTVER ^= ''                                              00320600
*          THEN                                                         00320700
*            ZMAXINVOCLEN=ZMAXINVOCLEN + LENGTH(PLISTVER) + 8;          00320800
*        IF LENGTH(MACKEYS) > ZMAXINVOCLEN !                            00320900
*           MACLIST ^= ''                    /* CHECK FOR OTHER PARMS*/ 00321000
*          THEN                                                         00321100
*            DO;                                                        00321200
*              ZMS=' 8, THE "L" FORM OF "MF"'!! /**MFLP* MSG*/          00321300
*                  ' CAN ONLY HAVE'!!                                   00321400
*                  ' THE "PLISTVER" KEY'!!                              00321500
*                  ' SPECIFIED ON THE INVOCATION.';                     00321600
*              ANS MSG('?IEFSSVT ---> '!!ZMS);                          00321700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00321800
*              ZMACRET=8;                    /* MACRO ERROR */          00321900
*            END;                                                       00322000
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00322100
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00322200
*  IF MF(2)=''                               /* CHECK FOR NULL */       00322300
*   THEN                                                                00322400
*    DO;                                     /* KEY IS REQUIRED */      00322500
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00322600
*        ZMS=' 8, WHEN "L" IS SPECIFIED'!!                              00322700
*            ' FOR THE "MF" KEY, POSITIONAL'!!                          00322800
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00322900
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00323000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00323100
*        ZMACRET=8;                          /* MACRO ERROR */          00323200
*    END;                                                               00323300
*  ELSE                                                                 00323400
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00323500
*/*PG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE--------------------*/ 00323600
*  ZXMFATTR='INPUT';                         /* SET IN/OUTPUT */        00323700
*  XMFATTR='BDY(DWORD)';                     /* SET DEFAULT */          00323800
*  IF MF(3)^=''                              /* CHECK FOR NULL */       00323900
*    THEN                                                               00324000
*      XMFATTR=MF(3);                        /* SET XVARIABLE */        00324100
*/*PG.KCK01 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH---------------*/ 00324200
*  IF ZXMFATTR^='' &                         /* NOT IN/OUTPUT */        00324300
*     LENGTH(XMFATTR)>60                                                00324400
*    THEN                                                               00324500
*      DO;                                                              00324600
*        ZXMFATTR='';                        /* RESET IN/OUTPUT */      00324700
*        ZMS=' 8, "MF'!!                     /**KLNGP* MSG*/            00324800
*            MF!!                                                       00324900
*            '" ARGUMENT 3 EXCEEDS THE MAXIMUM'!!                       00325000
*            ' LENGTH OF 60 CHARACTERS. ';                              00325100
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00325200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00325300
*        ZMACRET=8;                          /* MACRO ERROR */          00325400
*      END;                                                             00325500
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00325600
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00325700
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00325800
*  IF MF(1)='E'                              /* CHECK FOR KEYWORD */    00325900
*    THEN                                                               00326000
*      DO;                                                              00326100
*        XMF='E';                            /* SET XVARIABLE */        00326200
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00326300
*          THEN                                                         00326400
*            DO;                                                        00326500
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00326600
*                  MF!!                                                 00326700
*                  '" "MF"'!!                                           00326800
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00326900
*              ANS MSG('?IEFSSVT ---> '!!ZMS);                          00327000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00327100
*              ZMACRET=8;                    /* MACRO ERROR */          00327200
*            END;                                                       00327300
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00327400
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00327500
*  IF MF(2)=''                               /* CHECK FOR NULL */       00327600
*   THEN                                                                00327700
*    DO;                                     /* KEY IS REQUIRED */      00327800
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00327900
*        ZMS=' 8, WHEN "E" IS SPECIFIED'!!                              00328000
*            ' FOR THE "MF" KEY, POSITIONAL'!!                          00328100
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00328200
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00328300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00328400
*        ZMACRET=8;                          /* MACRO ERROR */          00328500
*    END;                                                               00328600
*  ELSE                                                                 00328700
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00328800
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00328900
*  XMFSCK='';                                /* RESET XVARIABLE */      00329000
*  IF MF(3) = 'COMPLETE'                                                00329100
*    THEN                                                               00329200
*      XMFSCK = 'COMPLETE';                  /* SET XVARIABLE */        00329300
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00329400
*  ZXMFSCK='INPUT';                          /* SET IN/OUTPUT */        00329500
*  IF XMFSCK=''                              /* CHECK FOR KEYWORD */    00329600
*    THEN                                                               00329700
*      DO;                                   /* KEYWORD NOT ENTERED */  00329800
*        XMFSCK='COMPLETE';                  /* SET DEFAULT */          00329900
*        IF MF(3)^=''                                                   00330000
*          THEN                                                         00330100
*            DO;                                                        00330200
*              ZXMFSCK='';                   /* RESET IN/OUTPUT */      00330300
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/            00330400
*                  MF!!'"'!!                                            00330500
*                  ' ARGUMENT 3 IS AN UNKNOWN KEYWORD. '!!              00330600
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00330700
*                  ' "COMPLETE".';           /* VALID KEYWORD */        00330800
*              ANS MSG('?IEFSSVT ---> '!!ZMS);                          00330900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00331000
*              ZMACRET=8;                    /* MACRO ERROR */          00331100
*            END;                                                       00331200
*      END;                                                             00331300
*/*PG.KKCTL05 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00331400
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00331500
*/*PG.KKCTL06 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00331600
*  IF MF='MF'                                                           00331700
*    ! MF='()'                               /*CHECK ENTRY*/            00331800
*     THEN                                                              00331900
*       DO;                                                             00332000
*              ZMS=' 8, THE "MF" KEY'!!      /**KOPTP* MSG*/            00332100
*                  ' MUST CONTAIN ONE'!!                                00332200
*                  ' (OR MORE) ARGUMENT(S).';                           00332300
*              ANS MSG('?IEFSSVT ---> '!!ZMS);                          00332400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00332500
*              ZMACRET=8;                    /* MACRO ERROR */          00332600
*       END;                                                            00332700
*  ELSE                                                                 00332800
*    DO;                                                                00332900
*      ZXMF='INPUT';                         /* SET IN/OUTPUT */        00333000
*      IF XMF=''                             /* CHECK FOR KEYWORD */    00333100
*        THEN                                                           00333200
*          DO;                               /* KEYWORD NOT ENTERED */  00333300
*            XMF='S';                        /* SET DEFAULT */          00333400
*            XMFSCK='COMPLETE';              /* COMPLETE CHECKING */    00333500
*            IF MF(1)^=''                    /* CHECK FOR KEYWORD */    00333600
*              THEN                                                     00333700
*                DO;                                                    00333800
*                  ZXMF='';                  /* RESET IN/OUTPUT */      00333900
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/            00334000
*                  MF!!'"'!!                                            00334100
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00334200
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00334300
*                  ' "S",'!!                 /* VALID KEYWORD */        00334400
*                  ' "L",'!!                 /* VALID KEYWORD */        00334500
*                  ' OR "E".';               /* VALID KEYWORD */        00334600
*              ANS MSG('?IEFSSVT ---> '!!ZMS);                          00334700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00334800
*              ZMACRET=8;                    /* MACRO ERROR */          00334900
*                END;                                                   00335000
*          END;                                                         00335100
*    END;                                                               00335200
*/********************************************************************/ 00335300
*/***PD.P01 FULL DEFAULT CHECKING                                    */ 00335400
*/********************************************************************/ 00335500
*  IF PLISTVER=''                                                       00335600
*     ! PLISTVER(1)='IMPLIED_VERSION'                                   00335700
*    THEN                                                               00335800
*      ZC='ON';                              /* DEFAULT FLAG ON */      00335900
*    ELSE                                                               00336000
*      ZC='OFF';                             /* DEFAULT FLAG OFF */     00336100
*/********************************************************************/ 00336200
*/***PD.P02 DEFAULT ECHO                                             */ 00336300
*/********************************************************************/ 00336400
*/*PD.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00336500
*  IF XMF^='L'                                                          00336600
*    THEN                                                               00336700
*      DO;                                   /* FULL SYNTAX CHECK */    00336800
*        ANS('/*DEFAULT(S): */')                                        00336900
*           NORESCAN COL(MACLMAR+5);                                    00337000
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00337100
*  IF REQUEST(1)='CREATE' !                  /* CHECK FOR KEYWORD */    00337200
*     REQUEST(1)=''                          /* CHECK FOR NULL */       00337300
*    THEN                                                               00337400
*      DO;                                                              00337500
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00337600
*  XSUBPOOL='';                                                         00337700
*  IF SUBPOOL(1)=''                                                     00337800
*    THEN                                                               00337900
*      DO;                                                              00338000
*        XSUBPOOL='241';                     /* SET DEFAULT */          00338100
*        ZC='ON';                            /* DEFAULT FLAG ON */      00338200
*      END;                                                             00338300
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00338400
*  IF XSUBPOOL^=''                                                      00338500
*    THEN DO;                                                           00338600
*      ANS('/* SUBPOOL('!!                                              00338700
*          XSUBPOOL!!                                                   00338800
*          ')*/')                                                       00338900
*          NORESCAN COL(MACLMAR+5);                                     00339000
*      XSUBPOOL = '';                                                   00339100
*    END;                                                               00339200
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00339300
*  XLOADTOGLOBAL='NO';                       /* RESET XVARIABLE */      00339400
*  IF LOADTOGLOBAL(1)=''                                                00339500
*    THEN                                                               00339600
*        ZC='ON';                            /* DEFAULT FLAG ON */      00339700
*  IF LOADTOGLOBAL(1)='NO'                                              00339800
*    THEN                                                               00339900
*        XLOADTOGLOBAL='';                   /* SET XVARIABLE */        00340000
*  IF LOADTOGLOBAL(1)='YES'                                             00340100
*    THEN                                                               00340200
*        XLOADTOGLOBAL='';                   /* SET XVARIABLE */        00340300
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00340400
*  IF XLOADTOGLOBAL^=''                                                 00340500
*    THEN DO;                                                           00340600
*      ANS('/* LOADTOGLOBAL('!!                                         00340700
*          XLOADTOGLOBAL!!                                              00340800
*          ')*/')                                                       00340900
*          NORESCAN COL(MACLMAR+5);                                     00341000
*      XLOADTOGLOBAL = '';                                              00341100
*    END;                                                               00341200
*/*PD.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00341300
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00341400
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00341500
*  IF REQUEST(1)='DISABLE'                   /* CHECK FOR KEYWORD */    00341600
*    THEN                                                               00341700
*      DO;                                                              00341800
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00341900
*  XINTOKEN='';                                                         00342000
*  IF INTOKEN(1)=''                                                     00342100
*    THEN                                                               00342200
*      DO;                                                              00342300
*        XINTOKEN='0';                       /* SET DEFAULT */          00342400
*        ZC='ON';                            /* DEFAULT FLAG ON */      00342500
*      END;                                                             00342600
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00342700
*  IF XINTOKEN^=''                                                      00342800
*    THEN DO;                                                           00342900
*      ANS('/* INTOKEN('!!                                              00343000
*          XINTOKEN!!                                                   00343100
*          ')*/')                                                       00343200
*          NORESCAN COL(MACLMAR+5);                                     00343300
*      XINTOKEN = '';                                                   00343400
*    END;                                                               00343500
*/*PD.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00343600
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00343700
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00343800
*  IF REQUEST(1)='ENABLE'                    /* CHECK FOR KEYWORD */    00343900
*    THEN                                                               00344000
*      DO;                                                              00344100
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00344200
*  XINTOKEN='';                                                         00344300
*  IF INTOKEN(1)=''                                                     00344400
*    THEN                                                               00344500
*      DO;                                                              00344600
*        XINTOKEN='0';                       /* SET DEFAULT */          00344700
*        ZC='ON';                            /* DEFAULT FLAG ON */      00344800
*      END;                                                             00344900
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00345000
*  IF XINTOKEN^=''                                                      00345100
*    THEN DO;                                                           00345200
*      ANS('/* INTOKEN('!!                                              00345300
*          XINTOKEN!!                                                   00345400
*          ')*/')                                                       00345500
*          NORESCAN COL(MACLMAR+5);                                     00345600
*      XINTOKEN = '';                                                   00345700
*    END;                                                               00345800
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00345900
*  XLOADTOGLOBAL='NO';                       /* RESET XVARIABLE */      00346000
*  IF LOADTOGLOBAL(1)=''                                                00346100
*    THEN                                                               00346200
*        ZC='ON';                            /* DEFAULT FLAG ON */      00346300
*  IF LOADTOGLOBAL(1)='NO'                                              00346400
*    THEN                                                               00346500
*        XLOADTOGLOBAL='';                   /* SET XVARIABLE */        00346600
*  IF LOADTOGLOBAL(1)='YES'                                             00346700
*    THEN                                                               00346800
*        XLOADTOGLOBAL='';                   /* SET XVARIABLE */        00346900
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00347000
*  IF XLOADTOGLOBAL^=''                                                 00347100
*    THEN DO;                                                           00347200
*      ANS('/* LOADTOGLOBAL('!!                                         00347300
*          XLOADTOGLOBAL!!                                              00347400
*          ')*/')                                                       00347500
*          NORESCAN COL(MACLMAR+5);                                     00347600
*      XLOADTOGLOBAL = '';                                              00347700
*    END;                                                               00347800
*/*PD.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00347900
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00348000
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00348100
*  IF REQUEST(1)='EXCHANGE'                  /* CHECK FOR KEYWORD */    00348200
*    THEN                                                               00348300
*      DO;                                                              00348400
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00348500
*  XINTOKEN='';                                                         00348600
*  IF INTOKEN(1)=''                                                     00348700
*    THEN                                                               00348800
*      DO;                                                              00348900
*        XINTOKEN='0';                       /* SET DEFAULT */          00349000
*        ZC='ON';                            /* DEFAULT FLAG ON */      00349100
*      END;                                                             00349200
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00349300
*  IF XINTOKEN^=''                                                      00349400
*    THEN DO;                                                           00349500
*      ANS('/* INTOKEN('!!                                              00349600
*          XINTOKEN!!                                                   00349700
*          ')*/')                                                       00349800
*          NORESCAN COL(MACLMAR+5);                                     00349900
*      XINTOKEN = '';                                                   00350000
*    END;                                                               00350100
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00350200
*  XLOADTOGLOBAL='NO';                       /* RESET XVARIABLE */      00350300
*  IF LOADTOGLOBAL(1)=''                                                00350400
*    THEN                                                               00350500
*        ZC='ON';                            /* DEFAULT FLAG ON */      00350600
*  IF LOADTOGLOBAL(1)='NO'                                              00350700
*    THEN                                                               00350800
*        XLOADTOGLOBAL='';                   /* SET XVARIABLE */        00350900
*  IF LOADTOGLOBAL(1)='YES'                                             00351000
*    THEN                                                               00351100
*        XLOADTOGLOBAL='';                   /* SET XVARIABLE */        00351200
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00351300
*  IF XLOADTOGLOBAL^=''                                                 00351400
*    THEN DO;                                                           00351500
*      ANS('/* LOADTOGLOBAL('!!                                         00351600
*          XLOADTOGLOBAL!!                                              00351700
*          ')*/')                                                       00351800
*          NORESCAN COL(MACLMAR+5);                                     00351900
*      XLOADTOGLOBAL = '';                                              00352000
*    END;                                                               00352100
*/*PD.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00352200
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00352300
*/*PD.KXVAR01 VALUE, OPT INPUT, KEYS -XVARIABLE----------------------*/ 00352400
*  XCOM='';                                                             00352500
*  IF COM(1)=''                                                         00352600
*    THEN                                                               00352700
*      DO;                                                              00352800
*        XCOM=' ';                           /* SET DEFAULT */          00352900
*        ZC='ON';                            /* DEFAULT FLAG ON */      00353000
*      END;                                                             00353100
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00353200
*  IF XCOM^=''                                                          00353300
*    THEN DO;                                                           00353400
*      ANS('/* COM('!!                                                  00353500
*          XCOM!!                                                       00353600
*          ')*/')                                                       00353700
*          NORESCAN COL(MACLMAR+5);                                     00353800
*      XCOM = '';                                                       00353900
*    END;                                                               00354000
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00354100
*  IF PLISTVER=''                                                       00354200
*    THEN DO;                                                           00354300
*      ANS('/* PLISTVER('!!                                             00354400
*          CHAR(XPLISTVER)!!                                            00354500
*          ')*/')                                                       00354600
*          NORESCAN COL(MACLMAR+5);                                     00354700
*    END;                                                               00354800
*  IF ZC='OFF'                               /*NO DEFAULTS TAKEN */     00354900
*    THEN                                                               00355000
*      ANS('/* NONE. */')                                               00355100
*         NORESCAN COL(MACLMAR+5);                                      00355200
*/*PD.P04 END DEFAULT ECHO ------------------------------------------*/ 00355300
*      END;                                                             00355400
*/********************************************************************/ 00355500
*/*PB.SYSL01 INVOKE SP LEVEL AND SYSTEM STATE MACROS                 */ 00355600
*/********************************************************************/ 00355700
*  DCL SYSSPLV CHAR EXTERNAL; DEACT SYSSPLV;/* SPLEVEL 1,2,3         */ 00355800
*  DCL SYSASCE CHAR EXTERNAL; DEACT SYSASCE;/* STATE ANY P AR */        00355900
*  DCL SYSAM64 CHAR EXTERNAL; DEACT SYSAM64;                            00356000
*  DCL SYSALVL FIXED EXTERNAL; DEACT SYSALVL;                           00356100
*                                                                       00356200
*  IF SYSASCE=''                                                        00356300
*    THEN                                                               00356400
*      DO;                                                              00356500
*        IF SYSSPLV=''                                                  00356600
*          THEN                                                         00356700
*            ANS('?SPLEVEL  (TEST);') COL(MACLMAR);                     00356800
*        IF SYSSPLV^='1' & SYSSPLV^='2'                                 00356900
*          THEN                                                         00357000
*            ANS('?SYSSTATE (TEST);') COL(MACLMAR);                     00357100
*          ELSE                                                         00357200
*            SYSASCE='P';                    /* SYSSTATE DEFAULT*/      00357300
*      END;                                                             00357400
*/********************************************************************/ 00357500
*/***PG.P01 FULL MACRO SYNTAX CHECKING                               */ 00357600
*/********************************************************************/ 00357700
*/*PG.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00357800
*  IF XMF^='L'                                                          00357900
*    THEN                                                               00358000
*      DO;                                   /* FULL SYNTAX CHECK */    00358100
*/*PG.P03 EXCESSIVE POSITIONAL ARGUMENTS-----------------------------*/ 00358200
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */    00358300
*    THEN                                                               00358400
*      DO;                                                              00358500
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'!! /**PPOSP* MSG*/            00358600
*            ' "'!!MACLIST!!'"'!!                                       00358700
*            ' CANNOT BE USED.'!!                                       00358800
*            ' NO POSITIONAL ARGUMENTS'!!                               00358900
*            ' ARE ALLOWED.';                                           00359000
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00359100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00359200
*        ZMACRET=8;                          /* MACRO ERROR */          00359300
*      END;                                                             00359400
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00359500
*  IF NUMBER(SUBNAME)>1                      /* CHECK POSITIONALS */    00359600
*    THEN                                                               00359700
*      DO;                                                              00359800
*        ZMS=' 8, "SUBNAME'!!                /**KPOSP* MSG*/            00359900
*            SUBNAME!!                                                  00360000
*            '" "SUBNAME"'!!                                            00360100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00360200
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00360300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00360400
*        ZMACRET=8;                          /* MACRO ERROR */          00360500
*      END;                                                             00360600
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00360700
*  XSUBNAME=SUBNAME(1);                      /* SET XVARIABLE */        00360800
*  IF SUBNAME(1)=''                          /* CHECK FOR NULL */       00360900
*   THEN                                                                00361000
*    DO;                                     /* KEY IS REQUIRED */      00361100
*        ZXSUBNAME='';                       /* RESET IN/OUTPUT */      00361200
*        ZMS=' 8,  '!!                                                  00361300
*            ' "SUBNAME" KEY AND ITS'!!                                 00361400
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00361500
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00361600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00361700
*        ZMACRET=8;                          /* MACRO ERROR */          00361800
*    END;                                                               00361900
*  ELSE                                                                 00362000
*    ZXSUBNAME='INPUT';                      /* SET IN/OUTPUT */        00362100
*/*PG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00362200
*  XREQUEST='';                                                         00362300
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00362400
*  IF REQUEST(1)='CREATE'                    /* CHECK FOR KEYWORD */    00362500
*     ! REQUEST(1)=''                        /* CHECK FOR NULL */       00362600
*    THEN                                                               00362700
*      DO;                                                              00362800
*        XREQUEST='CREATE';                  /* SET XVARIABLE */        00362900
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    00363000
*          THEN                                                         00363100
*            DO;                                                        00363200
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            00363300
*                  REQUEST!!                                            00363400
*                  '" "REQUEST"'!!                                      00363500
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00363600
*              ANS MSG('?IEFSSVT ---> '!!ZMS);                          00363700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00363800
*              ZMACRET=8;                    /* MACRO ERROR */          00363900
*            END;                                                       00364000
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00364100
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00364200
*        IF INTOKEN^=''                      /* CHECK FOR KEY */        00364300
*          THEN                                                         00364400
*            ZCVAL=ZCVAL!!',INTOKEN';        /* INCORRECT KEY USED */   00364500
*        IF ZCVAL^=''                                                   00364600
*          THEN                                                         00364700
*            DO;                             /* INCORRECT KEYS USED */  00364800
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00364900
*              ZMS=' 8, "REQUEST'!!          /**KMEIP* MSG*/            00365000
*                  REQUEST!!'"'!!                                       00365100
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   00365200
*                  ' FOLLOWING KEY(S) "'!!                              00365300
*                  ZCVAL!!'".';                                         00365400
*              ANS MSG('?IEFSSVT ---> '!!ZMS);                          00365500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00365600
*              ZMACRET=8;                    /* MACRO ERROR */          00365700
*            END;                                                       00365800
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00365900
*  IF NUMBER(SSVTDATA)>1                     /* CHECK POSITIONALS */    00366000
*    THEN                                                               00366100
*      DO;                                                              00366200
*        ZMS=' 8, "SSVTDATA'!!               /**KPOSP* MSG*/            00366300
*            SSVTDATA!!                                                 00366400
*            '" "SSVTDATA"'!!                                           00366500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00366600
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00366700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00366800
*        ZMACRET=8;                          /* MACRO ERROR */          00366900
*      END;                                                             00367000
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00367100
*  XSSVTDATA=SSVTDATA(1);                    /* SET XVARIABLE */        00367200
*  IF SSVTDATA(1)=''                         /* CHECK FOR NULL */       00367300
*   THEN                                                                00367400
*    DO;                                     /* KEY IS REQUIRED */      00367500
*        ZXSSVTDATA='';                      /* RESET IN/OUTPUT */      00367600
*        ZMS=' 8,  '!!                                                  00367700
*            ' "SSVTDATA" KEY AND ITS'!!                                00367800
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00367900
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00368000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00368100
*        ZMACRET=8;                          /* MACRO ERROR */          00368200
*    END;                                                               00368300
*  ELSE                                                                 00368400
*    ZXSSVTDATA='INPUT';                     /* SET IN/OUTPUT */        00368500
*/*PG.KXVAR01 NAME, RQD OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00368600
*  IF NUMBER(OUTTOKEN)>1                     /* CHECK POSITIONALS */    00368700
*    THEN                                                               00368800
*      DO;                                                              00368900
*        ZMS=' 8, "OUTTOKEN'!!               /**KPOSP* MSG*/            00369000
*            OUTTOKEN!!                                                 00369100
*            '" "OUTTOKEN"'!!                                           00369200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00369300
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00369400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00369500
*        ZMACRET=8;                          /* MACRO ERROR */          00369600
*      END;                                                             00369700
*/*PG.KXVAR03 NAME, RQD OUTPUT, KEYS -XVARIABLE----------------------*/ 00369800
*  XOUTTOKEN=OUTTOKEN(1);                    /* SET XVARIABLE */        00369900
*  IF OUTTOKEN(1)=''                         /* CHECK FOR NULL */       00370000
*   THEN                                                                00370100
*    DO;                                     /* KEY IS REQUIRED */      00370200
*        ZXOUTTOKEN='';                      /* RESET IN/OUTPUT */      00370300
*        ZMS=' 8,  '!!                                                  00370400
*            ' "OUTTOKEN" KEY AND ITS'!!                                00370500
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00370600
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00370700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00370800
*        ZMACRET=8;                          /* MACRO ERROR */          00370900
*    END;                                                               00371000
*  ELSE                                                                 00371100
*    ZXOUTTOKEN='OUTPUT';                    /* SET IN/OUTPUT */        00371200
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00371300
*  IF SUBPOOL='SUBPOOL' ! SUBPOOL='()'       /*CHECK ENTRY*/            00371400
*    THEN                                                               00371500
*      DO;                                                              00371600
*        ZMS=' 8, THE "SUBPOOL" KEY'!!       /**KOPTP* MSG*/            00371700
*            ' MUST CONTAIN ONE'!!                                      00371800
*            ' (OR MORE) ARGUMENT(S).';                                 00371900
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00372000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00372100
*        ZMACRET=8;                          /* MACRO ERROR */          00372200
*      END;                                                             00372300
*  IF NUMBER(SUBPOOL)>1                      /* CHECK POSITIONALS */    00372400
*    THEN                                                               00372500
*      DO;                                                              00372600
*        ZMS=' 8, "SUBPOOL'!!                /**KPOSP* MSG*/            00372700
*            SUBPOOL!!                                                  00372800
*            '" "SUBPOOL"'!!                                            00372900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00373000
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00373100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00373200
*        ZMACRET=8;                          /* MACRO ERROR */          00373300
*      END;                                                             00373400
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00373500
*  ZXSUBPOOL='INPUT';                        /* SET IN/OUTPUT */        00373600
*  XSUBPOOL='241';                           /* SET DEFAULT */          00373700
*  IF SUBPOOL(1)^=''                         /* CHECK FOR NULL */       00373800
*    THEN                                                               00373900
*      XSUBPOOL=SUBPOOL(1);                  /* SET XVARIABLE */        00374000
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00374100
*  IF NUMBER(MAXENTRIES)>1                   /* CHECK POSITIONALS */    00374200
*    THEN                                                               00374300
*      DO;                                                              00374400
*        ZMS=' 8, "MAXENTRIES'!!             /**KPOSP* MSG*/            00374500
*            MAXENTRIES!!                                               00374600
*            '" "MAXENTRIES"'!!                                         00374700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00374800
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00374900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00375000
*        ZMACRET=8;                          /* MACRO ERROR */          00375100
*      END;                                                             00375200
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00375300
*  XMAXENTRIES=MAXENTRIES(1);                /* SET XVARIABLE */        00375400
*  IF MAXENTRIES(1)=''                       /* CHECK FOR NULL */       00375500
*   THEN                                                                00375600
*    DO;                                     /* KEY IS REQUIRED */      00375700
*        ZXMAXENTRIES='';                    /* RESET IN/OUTPUT */      00375800
*        ZMS=' 8,  '!!                                                  00375900
*            ' "MAXENTRIES" KEY AND ITS'!!                              00376000
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00376100
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00376200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00376300
*        ZMACRET=8;                          /* MACRO ERROR */          00376400
*    END;                                                               00376500
*  ELSE                                                                 00376600
*    ZXMAXENTRIES='INPUT';                   /* SET IN/OUTPUT */        00376700
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00376800
*  IF LOADTOGLOBAL='LOADTOGLOBAL'            /* CHECK ENTRY */          00376900
*    THEN                                                               00377000
*      DO;                                                              00377100
*        ZMS=' 8, THE "LOADTOGLOBAL" KEY'!!  /**KOPTP* MSG*/            00377200
*            ' MUST CONTAIN ONE'!!                                      00377300
*            ' (OR MORE) ARGUMENT(S).';                                 00377400
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00377500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00377600
*        ZMACRET=8;                          /* MACRO ERROR */          00377700
*      END;                                                             00377800
*  IF NUMBER(LOADTOGLOBAL)>1                 /* CHECK POSITIONALS */    00377900
*    THEN                                                               00378000
*      DO;                                                              00378100
*        ZMS=' 8, "LOADTOGLOBAL'!!           /**KPOSP* MSG*/            00378200
*            LOADTOGLOBAL!!                                             00378300
*            '" "LOADTOGLOBAL"'!!                                       00378400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00378500
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00378600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00378700
*        ZMACRET=8;                          /* MACRO ERROR */          00378800
*      END;                                                             00378900
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00379000
*  XLOADTOGLOBAL='';                         /* RESET XVARIABLE */      00379100
*  IF LOADTOGLOBAL(1) = 'NO'                                            00379200
*    THEN                                                               00379300
*      XLOADTOGLOBAL = 'NO';                 /* SET XVARIABLE */        00379400
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00379500
*  IF LOADTOGLOBAL(1) = 'YES'                                           00379600
*    THEN                                                               00379700
*      XLOADTOGLOBAL = 'YES';                /* SET XVARIABLE */        00379800
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00379900
*  ZXLOADTOGLOBAL='INPUT';                   /* SET IN/OUTPUT */        00380000
*  IF XLOADTOGLOBAL=''                       /* CHECK FOR KEYWORD */    00380100
*    THEN                                                               00380200
*      DO;                                   /* KEYWORD NOT ENTERED */  00380300
*        XLOADTOGLOBAL='NO';                 /* SET DEFAULT */          00380400
*        IF LOADTOGLOBAL(1)^=''                                         00380500
*          THEN                                                         00380600
*            DO;                                                        00380700
*              ZXLOADTOGLOBAL='';            /* RESET IN/OUTPUT */      00380800
*              ZMS=' 8, "LOADTOGLOBAL'!!     /**KUKWP* MSG*/            00380900
*                  LOADTOGLOBAL!!'"'!!                                  00381000
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00381100
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00381200
*                  ' "NO"'!!                 /* VALID KEYWORD */        00381300
*                  ' OR "YES".';             /* VALID KEYWORD */        00381400
*              ANS MSG('?IEFSSVT ---> '!!ZMS);                          00381500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00381600
*              ZMACRET=8;                    /* MACRO ERROR */          00381700
*            END;                                                       00381800
*      END;                                                             00381900
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00382000
*  IF ERRFUNCT='ERRFUNCT' ! ERRFUNCT='()'    /*CHECK ENTRY*/            00382100
*    THEN                                                               00382200
*      DO;                                                              00382300
*        ZMS=' 8, THE "ERRFUNCT" KEY'!!      /**KOPTP* MSG*/            00382400
*            ' MUST CONTAIN ONE'!!                                      00382500
*            ' (OR MORE) ARGUMENT(S).';                                 00382600
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00382700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00382800
*        ZMACRET=8;                          /* MACRO ERROR */          00382900
*      END;                                                             00383000
*  IF NUMBER(ERRFUNCT)>1                     /* CHECK POSITIONALS */    00383100
*    THEN                                                               00383200
*      DO;                                                              00383300
*        ZMS=' 8, "ERRFUNCT'!!               /**KPOSP* MSG*/            00383400
*            ERRFUNCT!!                                                 00383500
*            '" "ERRFUNCT"'!!                                           00383600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00383700
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00383800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00383900
*        ZMACRET=8;                          /* MACRO ERROR */          00384000
*      END;                                                             00384100
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00384200
*  IF ERRFUNCT(1)^=''                        /* CHECK FOR NULL */       00384300
*    THEN                                                               00384400
*      DO;                                                              00384500
*        XERRFUNCT=ERRFUNCT(1);              /* SET XVARIABLE */        00384600
*        ZXERRFUNCT='OUTPUT';                /* SET OUTPUT */           00384700
*      END;                                                             00384800
*  ELSE                                                                 00384900
*    IF ZXERRFUNCT^=''                                                  00385000
*      THEN                                                             00385100
*        ZXERRFUNCT='';                      /* RESET OUTPUT */         00385200
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00385300
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00385400
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00385500
*  IF REQUEST(1)='DISABLE'                   /* CHECK FOR KEYWORD */    00385600
*    THEN                                                               00385700
*      DO;                                                              00385800
*        XREQUEST='DISABLE';                 /* SET XVARIABLE */        00385900
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    00386000
*          THEN                                                         00386100
*            DO;                                                        00386200
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            00386300
*                  REQUEST!!                                            00386400
*                  '" "REQUEST"'!!                                      00386500
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00386600
*              ANS MSG('?IEFSSVT ---> '!!ZMS);                          00386700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00386800
*              ZMACRET=8;                    /* MACRO ERROR */          00386900
*            END;                                                       00387000
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00387100
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00387200
*        IF OUTTOKEN^=''                     /* CHECK FOR KEY */        00387300
*          THEN                                                         00387400
*            ZCVAL=ZCVAL!!',OUTTOKEN';       /* INCORRECT KEY USED */   00387500
*        IF SUBPOOL^=''                      /* CHECK FOR KEY */        00387600
*          THEN                                                         00387700
*            ZCVAL=ZCVAL!!',SUBPOOL';        /* INCORRECT KEY USED */   00387800
*        IF MAXENTRIES^=''                   /* CHECK FOR KEY */        00387900
*          THEN                                                         00388000
*            ZCVAL=ZCVAL!!',MAXENTRIES';     /* INCORRECT KEY USED */   00388100
*        IF LOADTOGLOBAL^=''                 /* CHECK FOR KEY */        00388200
*          THEN                                                         00388300
*            ZCVAL=ZCVAL!!',LOADTOGLOBAL';   /* INCORRECT KEY USED */   00388400
*        IF ERRFUNCT^=''                     /* CHECK FOR KEY */        00388500
*          THEN                                                         00388600
*            ZCVAL=ZCVAL!!',ERRFUNCT';       /* INCORRECT KEY USED */   00388700
*        IF ZCVAL^=''                                                   00388800
*          THEN                                                         00388900
*            DO;                             /* INCORRECT KEYS USED */  00389000
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00389100
*              ZMS=' 8, "REQUEST'!!          /**KMEIP* MSG*/            00389200
*                  REQUEST!!'"'!!                                       00389300
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   00389400
*                  ' FOLLOWING KEY(S) "'!!                              00389500
*                  ZCVAL!!'".';                                         00389600
*              ANS MSG('?IEFSSVT ---> '!!ZMS);                          00389700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00389800
*              ZMACRET=8;                    /* MACRO ERROR */          00389900
*            END;                                                       00390000
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00390100
*  IF NUMBER(SSVTDATA)>1                     /* CHECK POSITIONALS */    00390200
*    THEN                                                               00390300
*      DO;                                                              00390400
*        ZMS=' 8, "SSVTDATA'!!               /**KPOSP* MSG*/            00390500
*            SSVTDATA!!                                                 00390600
*            '" "SSVTDATA"'!!                                           00390700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00390800
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00390900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00391000
*        ZMACRET=8;                          /* MACRO ERROR */          00391100
*      END;                                                             00391200
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00391300
*  XSSVTDATA=SSVTDATA(1);                    /* SET XVARIABLE */        00391400
*  IF SSVTDATA(1)=''                         /* CHECK FOR NULL */       00391500
*   THEN                                                                00391600
*    DO;                                     /* KEY IS REQUIRED */      00391700
*        ZXSSVTDATA='';                      /* RESET IN/OUTPUT */      00391800
*        ZMS=' 8,  '!!                                                  00391900
*            ' "SSVTDATA" KEY AND ITS'!!                                00392000
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00392100
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00392200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00392300
*        ZMACRET=8;                          /* MACRO ERROR */          00392400
*    END;                                                               00392500
*  ELSE                                                                 00392600
*    ZXSSVTDATA='INPUT';                     /* SET IN/OUTPUT */        00392700
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00392800
*  IF INTOKEN='INTOKEN' ! INTOKEN='()'       /*CHECK ENTRY*/            00392900
*    THEN                                                               00393000
*      DO;                                                              00393100
*        ZMS=' 8, THE "INTOKEN" KEY'!!       /**KOPTP* MSG*/            00393200
*            ' MUST CONTAIN ONE'!!                                      00393300
*            ' (OR MORE) ARGUMENT(S).';                                 00393400
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00393500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00393600
*        ZMACRET=8;                          /* MACRO ERROR */          00393700
*      END;                                                             00393800
*  IF NUMBER(INTOKEN)>1                      /* CHECK POSITIONALS */    00393900
*    THEN                                                               00394000
*      DO;                                                              00394100
*        ZMS=' 8, "INTOKEN'!!                /**KPOSP* MSG*/            00394200
*            INTOKEN!!                                                  00394300
*            '" "INTOKEN"'!!                                            00394400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00394500
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00394600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00394700
*        ZMACRET=8;                          /* MACRO ERROR */          00394800
*      END;                                                             00394900
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00395000
*  ZXINTOKEN='INPUT';                        /* SET IN/OUTPUT */        00395100
*  XINTOKEN='NULL';                          /* SET DEFAULT */          00395200
*  IF INTOKEN(1)^=''                         /* CHECK FOR NULL */       00395300
*    THEN                                                               00395400
*      XINTOKEN=INTOKEN(1);                  /* SET XVARIABLE */        00395500
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00395600
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00395700
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00395800
*  IF REQUEST(1)='ENABLE'                    /* CHECK FOR KEYWORD */    00395900
*    THEN                                                               00396000
*      DO;                                                              00396100
*        XREQUEST='ENABLE';                  /* SET XVARIABLE */        00396200
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    00396300
*          THEN                                                         00396400
*            DO;                                                        00396500
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            00396600
*                  REQUEST!!                                            00396700
*                  '" "REQUEST"'!!                                      00396800
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00396900
*              ANS MSG('?IEFSSVT ---> '!!ZMS);                          00397000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00397100
*              ZMACRET=8;                    /* MACRO ERROR */          00397200
*            END;                                                       00397300
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00397400
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00397500
*        IF OUTTOKEN^=''                     /* CHECK FOR KEY */        00397600
*          THEN                                                         00397700
*            ZCVAL=ZCVAL!!',OUTTOKEN';       /* INCORRECT KEY USED */   00397800
*        IF SUBPOOL^=''                      /* CHECK FOR KEY */        00397900
*          THEN                                                         00398000
*            ZCVAL=ZCVAL!!',SUBPOOL';        /* INCORRECT KEY USED */   00398100
*        IF MAXENTRIES^=''                   /* CHECK FOR KEY */        00398200
*          THEN                                                         00398300
*            ZCVAL=ZCVAL!!',MAXENTRIES';     /* INCORRECT KEY USED */   00398400
*        IF ZCVAL^=''                                                   00398500
*          THEN                                                         00398600
*            DO;                             /* INCORRECT KEYS USED */  00398700
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00398800
*              ZMS=' 8, "REQUEST'!!          /**KMEIP* MSG*/            00398900
*                  REQUEST!!'"'!!                                       00399000
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   00399100
*                  ' FOLLOWING KEY(S) "'!!                              00399200
*                  ZCVAL!!'".';                                         00399300
*              ANS MSG('?IEFSSVT ---> '!!ZMS);                          00399400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00399500
*              ZMACRET=8;                    /* MACRO ERROR */          00399600
*            END;                                                       00399700
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00399800
*  IF NUMBER(SSVTDATA)>1                     /* CHECK POSITIONALS */    00399900
*    THEN                                                               00400000
*      DO;                                                              00400100
*        ZMS=' 8, "SSVTDATA'!!               /**KPOSP* MSG*/            00400200
*            SSVTDATA!!                                                 00400300
*            '" "SSVTDATA"'!!                                           00400400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00400500
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00400600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00400700
*        ZMACRET=8;                          /* MACRO ERROR */          00400800
*      END;                                                             00400900
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00401000
*  XSSVTDATA=SSVTDATA(1);                    /* SET XVARIABLE */        00401100
*  IF SSVTDATA(1)=''                         /* CHECK FOR NULL */       00401200
*   THEN                                                                00401300
*    DO;                                     /* KEY IS REQUIRED */      00401400
*        ZXSSVTDATA='';                      /* RESET IN/OUTPUT */      00401500
*        ZMS=' 8,  '!!                                                  00401600
*            ' "SSVTDATA" KEY AND ITS'!!                                00401700
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00401800
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00401900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00402000
*        ZMACRET=8;                          /* MACRO ERROR */          00402100
*    END;                                                               00402200
*  ELSE                                                                 00402300
*    ZXSSVTDATA='INPUT';                     /* SET IN/OUTPUT */        00402400
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00402500
*  IF INTOKEN='INTOKEN' ! INTOKEN='()'       /*CHECK ENTRY*/            00402600
*    THEN                                                               00402700
*      DO;                                                              00402800
*        ZMS=' 8, THE "INTOKEN" KEY'!!       /**KOPTP* MSG*/            00402900
*            ' MUST CONTAIN ONE'!!                                      00403000
*            ' (OR MORE) ARGUMENT(S).';                                 00403100
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00403200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00403300
*        ZMACRET=8;                          /* MACRO ERROR */          00403400
*      END;                                                             00403500
*  IF NUMBER(INTOKEN)>1                      /* CHECK POSITIONALS */    00403600
*    THEN                                                               00403700
*      DO;                                                              00403800
*        ZMS=' 8, "INTOKEN'!!                /**KPOSP* MSG*/            00403900
*            INTOKEN!!                                                  00404000
*            '" "INTOKEN"'!!                                            00404100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00404200
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00404300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00404400
*        ZMACRET=8;                          /* MACRO ERROR */          00404500
*      END;                                                             00404600
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00404700
*  ZXINTOKEN='INPUT';                        /* SET IN/OUTPUT */        00404800
*  XINTOKEN='NULL';                          /* SET DEFAULT */          00404900
*  IF INTOKEN(1)^=''                         /* CHECK FOR NULL */       00405000
*    THEN                                                               00405100
*      XINTOKEN=INTOKEN(1);                  /* SET XVARIABLE */        00405200
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00405300
*  IF LOADTOGLOBAL='LOADTOGLOBAL'            /* CHECK ENTRY */          00405400
*    THEN                                                               00405500
*      DO;                                                              00405600
*        ZMS=' 8, THE "LOADTOGLOBAL" KEY'!!  /**KOPTP* MSG*/            00405700
*            ' MUST CONTAIN ONE'!!                                      00405800
*            ' (OR MORE) ARGUMENT(S).';                                 00405900
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00406000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00406100
*        ZMACRET=8;                          /* MACRO ERROR */          00406200
*      END;                                                             00406300
*  IF NUMBER(LOADTOGLOBAL)>1                 /* CHECK POSITIONALS */    00406400
*    THEN                                                               00406500
*      DO;                                                              00406600
*        ZMS=' 8, "LOADTOGLOBAL'!!           /**KPOSP* MSG*/            00406700
*            LOADTOGLOBAL!!                                             00406800
*            '" "LOADTOGLOBAL"'!!                                       00406900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00407000
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00407100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00407200
*        ZMACRET=8;                          /* MACRO ERROR */          00407300
*      END;                                                             00407400
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00407500
*  XLOADTOGLOBAL='';                         /* RESET XVARIABLE */      00407600
*  IF LOADTOGLOBAL(1) = 'NO'                                            00407700
*    THEN                                                               00407800
*      XLOADTOGLOBAL = 'NO';                 /* SET XVARIABLE */        00407900
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00408000
*  IF LOADTOGLOBAL(1) = 'YES'                                           00408100
*    THEN                                                               00408200
*      XLOADTOGLOBAL = 'YES';                /* SET XVARIABLE */        00408300
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00408400
*  ZXLOADTOGLOBAL='INPUT';                   /* SET IN/OUTPUT */        00408500
*  IF XLOADTOGLOBAL=''                       /* CHECK FOR KEYWORD */    00408600
*    THEN                                                               00408700
*      DO;                                   /* KEYWORD NOT ENTERED */  00408800
*        XLOADTOGLOBAL='NO';                 /* SET DEFAULT */          00408900
*        IF LOADTOGLOBAL(1)^=''                                         00409000
*          THEN                                                         00409100
*            DO;                                                        00409200
*              ZXLOADTOGLOBAL='';            /* RESET IN/OUTPUT */      00409300
*              ZMS=' 8, "LOADTOGLOBAL'!!     /**KUKWP* MSG*/            00409400
*                  LOADTOGLOBAL!!'"'!!                                  00409500
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00409600
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00409700
*                  ' "NO"'!!                 /* VALID KEYWORD */        00409800
*                  ' OR "YES".';             /* VALID KEYWORD */        00409900
*              ANS MSG('?IEFSSVT ---> '!!ZMS);                          00410000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00410100
*              ZMACRET=8;                    /* MACRO ERROR */          00410200
*            END;                                                       00410300
*      END;                                                             00410400
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00410500
*  IF ERRFUNCT='ERRFUNCT' ! ERRFUNCT='()'    /*CHECK ENTRY*/            00410600
*    THEN                                                               00410700
*      DO;                                                              00410800
*        ZMS=' 8, THE "ERRFUNCT" KEY'!!      /**KOPTP* MSG*/            00410900
*            ' MUST CONTAIN ONE'!!                                      00411000
*            ' (OR MORE) ARGUMENT(S).';                                 00411100
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00411200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00411300
*        ZMACRET=8;                          /* MACRO ERROR */          00411400
*      END;                                                             00411500
*  IF NUMBER(ERRFUNCT)>1                     /* CHECK POSITIONALS */    00411600
*    THEN                                                               00411700
*      DO;                                                              00411800
*        ZMS=' 8, "ERRFUNCT'!!               /**KPOSP* MSG*/            00411900
*            ERRFUNCT!!                                                 00412000
*            '" "ERRFUNCT"'!!                                           00412100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00412200
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00412300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00412400
*        ZMACRET=8;                          /* MACRO ERROR */          00412500
*      END;                                                             00412600
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00412700
*  IF ERRFUNCT(1)^=''                        /* CHECK FOR NULL */       00412800
*    THEN                                                               00412900
*      DO;                                                              00413000
*        XERRFUNCT=ERRFUNCT(1);              /* SET XVARIABLE */        00413100
*        ZXERRFUNCT='OUTPUT';                /* SET OUTPUT */           00413200
*      END;                                                             00413300
*  ELSE                                                                 00413400
*    IF ZXERRFUNCT^=''                                                  00413500
*      THEN                                                             00413600
*        ZXERRFUNCT='';                      /* RESET OUTPUT */         00413700
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00413800
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00413900
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00414000
*  IF REQUEST(1)='EXCHANGE'                  /* CHECK FOR KEYWORD */    00414100
*    THEN                                                               00414200
*      DO;                                                              00414300
*        XREQUEST='EXCHANGE';                /* SET XVARIABLE */        00414400
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    00414500
*          THEN                                                         00414600
*            DO;                                                        00414700
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            00414800
*                  REQUEST!!                                            00414900
*                  '" "REQUEST"'!!                                      00415000
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00415100
*              ANS MSG('?IEFSSVT ---> '!!ZMS);                          00415200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00415300
*              ZMACRET=8;                    /* MACRO ERROR */          00415400
*            END;                                                       00415500
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00415600
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00415700
*        IF OUTTOKEN^=''                     /* CHECK FOR KEY */        00415800
*          THEN                                                         00415900
*            ZCVAL=ZCVAL!!',OUTTOKEN';       /* INCORRECT KEY USED */   00416000
*        IF SUBPOOL^=''                      /* CHECK FOR KEY */        00416100
*          THEN                                                         00416200
*            ZCVAL=ZCVAL!!',SUBPOOL';        /* INCORRECT KEY USED */   00416300
*        IF MAXENTRIES^=''                   /* CHECK FOR KEY */        00416400
*          THEN                                                         00416500
*            ZCVAL=ZCVAL!!',MAXENTRIES';     /* INCORRECT KEY USED */   00416600
*        IF ZCVAL^=''                                                   00416700
*          THEN                                                         00416800
*            DO;                             /* INCORRECT KEYS USED */  00416900
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00417000
*              ZMS=' 8, "REQUEST'!!          /**KMEIP* MSG*/            00417100
*                  REQUEST!!'"'!!                                       00417200
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   00417300
*                  ' FOLLOWING KEY(S) "'!!                              00417400
*                  ZCVAL!!'".';                                         00417500
*              ANS MSG('?IEFSSVT ---> '!!ZMS);                          00417600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00417700
*              ZMACRET=8;                    /* MACRO ERROR */          00417800
*            END;                                                       00417900
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00418000
*  IF NUMBER(SSVTDATA)>1                     /* CHECK POSITIONALS */    00418100
*    THEN                                                               00418200
*      DO;                                                              00418300
*        ZMS=' 8, "SSVTDATA'!!               /**KPOSP* MSG*/            00418400
*            SSVTDATA!!                                                 00418500
*            '" "SSVTDATA"'!!                                           00418600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00418700
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00418800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00418900
*        ZMACRET=8;                          /* MACRO ERROR */          00419000
*      END;                                                             00419100
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00419200
*  XSSVTDATA=SSVTDATA(1);                    /* SET XVARIABLE */        00419300
*  IF SSVTDATA(1)=''                         /* CHECK FOR NULL */       00419400
*   THEN                                                                00419500
*    DO;                                     /* KEY IS REQUIRED */      00419600
*        ZXSSVTDATA='';                      /* RESET IN/OUTPUT */      00419700
*        ZMS=' 8,  '!!                                                  00419800
*            ' "SSVTDATA" KEY AND ITS'!!                                00419900
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00420000
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00420100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00420200
*        ZMACRET=8;                          /* MACRO ERROR */          00420300
*    END;                                                               00420400
*  ELSE                                                                 00420500
*    ZXSSVTDATA='INPUT';                     /* SET IN/OUTPUT */        00420600
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00420700
*  IF INTOKEN='INTOKEN' ! INTOKEN='()'       /*CHECK ENTRY*/            00420800
*    THEN                                                               00420900
*      DO;                                                              00421000
*        ZMS=' 8, THE "INTOKEN" KEY'!!       /**KOPTP* MSG*/            00421100
*            ' MUST CONTAIN ONE'!!                                      00421200
*            ' (OR MORE) ARGUMENT(S).';                                 00421300
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00421400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00421500
*        ZMACRET=8;                          /* MACRO ERROR */          00421600
*      END;                                                             00421700
*  IF NUMBER(INTOKEN)>1                      /* CHECK POSITIONALS */    00421800
*    THEN                                                               00421900
*      DO;                                                              00422000
*        ZMS=' 8, "INTOKEN'!!                /**KPOSP* MSG*/            00422100
*            INTOKEN!!                                                  00422200
*            '" "INTOKEN"'!!                                            00422300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00422400
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00422500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00422600
*        ZMACRET=8;                          /* MACRO ERROR */          00422700
*      END;                                                             00422800
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00422900
*  ZXINTOKEN='INPUT';                        /* SET IN/OUTPUT */        00423000
*  XINTOKEN='NULL';                          /* SET DEFAULT */          00423100
*  IF INTOKEN(1)^=''                         /* CHECK FOR NULL */       00423200
*    THEN                                                               00423300
*      XINTOKEN=INTOKEN(1);                  /* SET XVARIABLE */        00423400
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00423500
*  IF LOADTOGLOBAL='LOADTOGLOBAL'            /* CHECK ENTRY */          00423600
*    THEN                                                               00423700
*      DO;                                                              00423800
*        ZMS=' 8, THE "LOADTOGLOBAL" KEY'!!  /**KOPTP* MSG*/            00423900
*            ' MUST CONTAIN ONE'!!                                      00424000
*            ' (OR MORE) ARGUMENT(S).';                                 00424100
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00424200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00424300
*        ZMACRET=8;                          /* MACRO ERROR */          00424400
*      END;                                                             00424500
*  IF NUMBER(LOADTOGLOBAL)>1                 /* CHECK POSITIONALS */    00424600
*    THEN                                                               00424700
*      DO;                                                              00424800
*        ZMS=' 8, "LOADTOGLOBAL'!!           /**KPOSP* MSG*/            00424900
*            LOADTOGLOBAL!!                                             00425000
*            '" "LOADTOGLOBAL"'!!                                       00425100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00425200
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00425300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00425400
*        ZMACRET=8;                          /* MACRO ERROR */          00425500
*      END;                                                             00425600
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00425700
*  XLOADTOGLOBAL='';                         /* RESET XVARIABLE */      00425800
*  IF LOADTOGLOBAL(1) = 'NO'                                            00425900
*    THEN                                                               00426000
*      XLOADTOGLOBAL = 'NO';                 /* SET XVARIABLE */        00426100
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00426200
*  IF LOADTOGLOBAL(1) = 'YES'                                           00426300
*    THEN                                                               00426400
*      XLOADTOGLOBAL = 'YES';                /* SET XVARIABLE */        00426500
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00426600
*  ZXLOADTOGLOBAL='INPUT';                   /* SET IN/OUTPUT */        00426700
*  IF XLOADTOGLOBAL=''                       /* CHECK FOR KEYWORD */    00426800
*    THEN                                                               00426900
*      DO;                                   /* KEYWORD NOT ENTERED */  00427000
*        XLOADTOGLOBAL='NO';                 /* SET DEFAULT */          00427100
*        IF LOADTOGLOBAL(1)^=''                                         00427200
*          THEN                                                         00427300
*            DO;                                                        00427400
*              ZXLOADTOGLOBAL='';            /* RESET IN/OUTPUT */      00427500
*              ZMS=' 8, "LOADTOGLOBAL'!!     /**KUKWP* MSG*/            00427600
*                  LOADTOGLOBAL!!'"'!!                                  00427700
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00427800
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00427900
*                  ' "NO"'!!                 /* VALID KEYWORD */        00428000
*                  ' OR "YES".';             /* VALID KEYWORD */        00428100
*              ANS MSG('?IEFSSVT ---> '!!ZMS);                          00428200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00428300
*              ZMACRET=8;                    /* MACRO ERROR */          00428400
*            END;                                                       00428500
*      END;                                                             00428600
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00428700
*  IF ERRFUNCT='ERRFUNCT' ! ERRFUNCT='()'    /*CHECK ENTRY*/            00428800
*    THEN                                                               00428900
*      DO;                                                              00429000
*        ZMS=' 8, THE "ERRFUNCT" KEY'!!      /**KOPTP* MSG*/            00429100
*            ' MUST CONTAIN ONE'!!                                      00429200
*            ' (OR MORE) ARGUMENT(S).';                                 00429300
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00429400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00429500
*        ZMACRET=8;                          /* MACRO ERROR */          00429600
*      END;                                                             00429700
*  IF NUMBER(ERRFUNCT)>1                     /* CHECK POSITIONALS */    00429800
*    THEN                                                               00429900
*      DO;                                                              00430000
*        ZMS=' 8, "ERRFUNCT'!!               /**KPOSP* MSG*/            00430100
*            ERRFUNCT!!                                                 00430200
*            '" "ERRFUNCT"'!!                                           00430300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00430400
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00430500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00430600
*        ZMACRET=8;                          /* MACRO ERROR */          00430700
*      END;                                                             00430800
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00430900
*  IF ERRFUNCT(1)^=''                        /* CHECK FOR NULL */       00431000
*    THEN                                                               00431100
*      DO;                                                              00431200
*        XERRFUNCT=ERRFUNCT(1);              /* SET XVARIABLE */        00431300
*        ZXERRFUNCT='OUTPUT';                /* SET OUTPUT */           00431400
*      END;                                                             00431500
*  ELSE                                                                 00431600
*    IF ZXERRFUNCT^=''                                                  00431700
*      THEN                                                             00431800
*        ZXERRFUNCT='';                      /* RESET OUTPUT */         00431900
*/*PG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00432000
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00432100
*/*PG.KKCTL06 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00432200
*  IF REQUEST='REQUEST'                                                 00432300
*    ! REQUEST='()'                          /*CHECK ENTRY*/            00432400
*     THEN                                                              00432500
*       DO;                                                             00432600
*              ZMS=' 8, THE "REQUEST" KEY'!! /**KOPTP* MSG*/            00432700
*                  ' MUST CONTAIN ONE'!!                                00432800
*                  ' (OR MORE) ARGUMENT(S).';                           00432900
*              ANS MSG('?IEFSSVT ---> '!!ZMS);                          00433000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00433100
*              ZMACRET=8;                    /* MACRO ERROR */          00433200
*       END;                                                            00433300
*  ELSE                                                                 00433400
*    DO;                                                                00433500
*      ZXREQUEST='INPUT';                    /* SET IN/OUTPUT */        00433600
*      IF XREQUEST=''                        /* CHECK FOR KEYWORD */    00433700
*        THEN                                                           00433800
*          DO;                               /* KEYWORD NOT ENTERED */  00433900
*            XREQUEST='CREATE';              /* SET DEFAULT */          00434000
*            IF REQUEST(1)^=''               /* CHECK FOR KEYWORD */    00434100
*              THEN                                                     00434200
*                DO;                                                    00434300
*                  ZXREQUEST='';             /* RESET IN/OUTPUT */      00434400
*              ZMS=' 8, "REQUEST'!!          /**KUKWP* MSG*/            00434500
*                  REQUEST!!'"'!!                                       00434600
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00434700
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00434800
*                  ' "CREATE",'!!            /* VALID KEYWORD */        00434900
*                  ' "DISABLE",'!!           /* VALID KEYWORD */        00435000
*                  ' "ENABLE",'!!            /* VALID KEYWORD */        00435100
*                  ' OR "EXCHANGE".';        /* VALID KEYWORD */        00435200
*              ANS MSG('?IEFSSVT ---> '!!ZMS);                          00435300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00435400
*              ZMACRET=8;                    /* MACRO ERROR */          00435500
*                END;                                                   00435600
*          END;                                                         00435700
*    END;                                                               00435800
*/*PG.KKCTL07 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00435900
*  IF REQUEST(1)=''                          /* CHECK FOR KEYWORD */    00436000
*    THEN                                                               00436100
*      DO;                                                              00436200
*        ZXREQUEST='';                       /* RESET IN/OUTPUT */      00436300
*        ZMS=' 8, THE'!!                     /**KRKWP* MSG*/            00436400
*            ' "REQUEST" KEY AND ITS'!!                                 00436500
*            ' ARGUMENT ARE REQUIRED.'!!                                00436600
*            ' VALID KEYWORD CHOICE(S) ARE:'!!                          00436700
*            ' "CREATE",'!!                  /* VALID KEYWORD */        00436800
*            ' "DISABLE",'!!                 /* VALID KEYWORD */        00436900
*            ' "ENABLE",'!!                  /* VALID KEYWORD */        00437000
*            ' OR "EXCHANGE".';              /* VALID KEYWORD */        00437100
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00437200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00437300
*        ZMACRET=8;                          /* MACRO ERROR */          00437400
*      END;                                                             00437500
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00437600
*  IF RETCODE='RETCODE' ! RETCODE='()'       /*CHECK ENTRY*/            00437700
*    THEN                                                               00437800
*      DO;                                                              00437900
*        ZMS=' 8, THE "RETCODE" KEY'!!       /**KOPTP* MSG*/            00438000
*            ' MUST CONTAIN ONE'!!                                      00438100
*            ' (OR MORE) ARGUMENT(S).';                                 00438200
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00438300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00438400
*        ZMACRET=8;                          /* MACRO ERROR */          00438500
*      END;                                                             00438600
*  IF NUMBER(RETCODE)>1                      /* CHECK POSITIONALS */    00438700
*    THEN                                                               00438800
*      DO;                                                              00438900
*        ZMS=' 8, "RETCODE'!!                /**KPOSP* MSG*/            00439000
*            RETCODE!!                                                  00439100
*            '" "RETCODE"'!!                                            00439200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00439300
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00439400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00439500
*        ZMACRET=8;                          /* MACRO ERROR */          00439600
*      END;                                                             00439700
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00439800
*  IF RETCODE(1)^=''                         /* CHECK FOR NULL */       00439900
*    THEN                                                               00440000
*      DO;                                                              00440100
*        XRETCODE=RETCODE(1);                /* SET XVARIABLE */        00440200
*        ZXRETCODE='OUTPUT';                 /* SET OUTPUT */           00440300
*      END;                                                             00440400
*  ELSE                                                                 00440500
*    IF ZXRETCODE^=''                                                   00440600
*      THEN                                                             00440700
*        ZXRETCODE='';                       /* RESET OUTPUT */         00440800
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00440900
*  IF RSNCODE='RSNCODE' ! RSNCODE='()'       /*CHECK ENTRY*/            00441000
*    THEN                                                               00441100
*      DO;                                                              00441200
*        ZMS=' 8, THE "RSNCODE" KEY'!!       /**KOPTP* MSG*/            00441300
*            ' MUST CONTAIN ONE'!!                                      00441400
*            ' (OR MORE) ARGUMENT(S).';                                 00441500
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00441600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00441700
*        ZMACRET=8;                          /* MACRO ERROR */          00441800
*      END;                                                             00441900
*  IF NUMBER(RSNCODE)>1                      /* CHECK POSITIONALS */    00442000
*    THEN                                                               00442100
*      DO;                                                              00442200
*        ZMS=' 8, "RSNCODE'!!                /**KPOSP* MSG*/            00442300
*            RSNCODE!!                                                  00442400
*            '" "RSNCODE"'!!                                            00442500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00442600
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00442700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00442800
*        ZMACRET=8;                          /* MACRO ERROR */          00442900
*      END;                                                             00443000
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00443100
*  IF RSNCODE(1)^=''                         /* CHECK FOR NULL */       00443200
*    THEN                                                               00443300
*      DO;                                                              00443400
*        XRSNCODE=RSNCODE(1);                /* SET XVARIABLE */        00443500
*        ZXRSNCODE='OUTPUT';                 /* SET OUTPUT */           00443600
*      END;                                                             00443700
*  ELSE                                                                 00443800
*    IF ZXRSNCODE^=''                                                   00443900
*      THEN                                                             00444000
*        ZXRSNCODE='';                       /* RESET OUTPUT */         00444100
*/*PG.KXVAR01 VALUE, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00444200
*  IF COM='COM' ! COM='()'                   /*CHECK ENTRY*/            00444300
*    THEN                                                               00444400
*      DO;                                                              00444500
*        ZMS=' 8, THE "COM" KEY'!!           /**KOPTP* MSG*/            00444600
*            ' MUST CONTAIN ONE'!!                                      00444700
*            ' (OR MORE) ARGUMENT(S).';                                 00444800
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00444900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00445000
*        ZMACRET=8;                          /* MACRO ERROR */          00445100
*      END;                                                             00445200
*  IF NUMBER(COM)>1                          /* CHECK POSITIONALS */    00445300
*    THEN                                                               00445400
*      DO;                                                              00445500
*        ZMS=' 8, "COM'!!                    /**KPOSP* MSG*/            00445600
*            COM!!                                                      00445700
*            '" "COM"'!!                                                00445800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00445900
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00446000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00446100
*        ZMACRET=8;                          /* MACRO ERROR */          00446200
*      END;                                                             00446300
*/*PG.KXVAR13 VALUE, OPT INPUT, KEYS -XVARIABLE----------------------*/ 00446400
*  ZXCOM='INPUT';                            /* SET IN/OUTPUT */        00446500
*  XCOM='NULL';                              /* SET DEFAULT */          00446600
*  IF COM(1)^=''                             /* CHECK FOR NULL */       00446700
*    THEN                                                               00446800
*      XCOM=COM(1);                          /* SET XVARIABLE */        00446900
*/*PG.KCK01 VALUE, OPT INPUT, KEYS -CHARACTER LENGTH-----------------*/ 00447000
*  IF ZXCOM^='' &                            /* NOT IN/OUTPUT */        00447100
*     XCOM^='NULL' &                         /* NOT STAR DEFAULT */     00447200
*     LENGTH(XCOM)>256                                                  00447300
*    THEN                                                               00447400
*      DO;                                                              00447500
*        ZXCOM='';                           /* RESET IN/OUTPUT */      00447600
*        ZMS=' 8, "COM'!!                    /**KLNGP* MSG*/            00447700
*            COM!!                                                      00447800
*            '" ARGUMENT 1 EXCEEDS THE MAXIMUM'!!                       00447900
*            ' LENGTH OF 256 CHARACTERS. ';                             00448000
*        ANS MSG('?IEFSSVT ---> '!!ZMS);                                00448100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00448200
*        ZMACRET=8;                          /* MACRO ERROR */          00448300
*      END;                                                             00448400
*/*PG.P04 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00448500
*      END;                                  /* END COMPLETE CHECKING*/ 00448600
*/********************************************************************/ 00448700
*/***PE.MR01 GENERATE CODE IF ZMACRET=0                              */ 00448800
*/********************************************************************/ 00448900
*  IF ZMACRET = 0                                                       00449000
*    THEN                                                               00449100
*      DO;                                                              00449200
*/********************************************************************/ 00449300
*/***PE.PR01 PRINT CONTROLS, DEFAULT IS YES                          */ 00449400
*/********************************************************************/ 00449500
*  ANS(MACCONC!!'LIST PUSH;') NORESCAN COL(MACLMAR);                    00449600
*  IF ZPRINT='NO'                            /* PRINT IS OFF */         00449700
*    THEN                                                               00449800
*      ANS(MACCONC!!'LIST OFF;') NORESCAN COL(MACLMAR);                 00449900
*    ELSE                                                               00450000
*      ANS(MACCONC!!'LIST ON;')  NORESCAN COL(MACLMAR);                 00450100
*/********************************************************************/ 00450200
*/*PE.DO02 OUTER MACRO DO STATEMENT----------------------------------*/ 00450300
*  IF XMF^='L'                                                          00450400
*    THEN                                                               00450500
*      ANS('DO; /* IEFSSVT-PLISTVER */')                                00450600
*          NORESCAN COL(MACLMAR);                                       00450700
*/*PL.LL01 ?IEFSSVT MF=L PARAMETER LIST------------------------------*/ 00450800
*  IF XMF='L'                                                           00450900
*    THEN                                                               00451000
*      DO;                                                              00451100
*        ANS('DCL 1 '!!XMFCTRL!!' '!!XMFATTR!!', '!!                    00451200
*            '/* ?IEFSSVT PARM LIST*/')                                 00451300
*            NORESCAN COL(MACLMAR);                                     00451400
*/*PL.LL13  XVT_PLIST_ID CHAR(4) CONSTANT----------------------------*/ 00451500
*        ANS('2 '!!XMFCTRL                                              00451600
*         !! '_XVT_PLIST_ID CHAR(4), '                                  00451700
*         !! '/* '!!ZXVT_PLIST_ID                                       00451800
*         !! ' XVT_PLIST_ID */'                                         00451900
*            ) NORESCAN COL(MACLMAR+2);                                 00452000
*/*PL.LL02  XPLISTLEN FIXED(16) BDY(BYTE) INPUT----------------------*/ 00452100
*        ANS('2 '!!XMFCTRL!!                                            00452200
*            '_XPLISTLEN FIXED(16) BDY(BYTE), '!!                       00452300
*            '/* INPUT XPLISTLEN*/')                                    00452400
*            NORESCAN COL(MACLMAR+2);                                   00452500
*/*PL.LL02  XVERSION FIXED(8) INPUT----------------------------------*/ 00452600
*        ANS('2 '!!XMFCTRL!!                                            00452700
*            '_XVERSION FIXED(8), '!!                                   00452800
*            '/* INPUT XVERSION*/')                                     00452900
*            NORESCAN COL(MACLMAR+2);                                   00453000
*/*PL.LL13  XRSV0001 CHAR(1) RESERVED--------------------------------*/ 00453100
*        ANS('2 '!!XMFCTRL                                              00453200
*         !! '_XRSV0001 CHAR(1), '                                      00453300
*         !! '/* RESERVED */'                                           00453400
*            ) NORESCAN COL(MACLMAR+2);                                 00453500
*/*PL.LL13  XSUBNAME CHAR(4) INPUT-----------------------------------*/ 00453600
*        ANS('2 '!!XMFCTRL                                              00453700
*         !! '_XSUBNAME CHAR(4), '                                      00453800
*         !! '/* '!!ZXSUBNAME                                           00453900
*         !! ' XSUBNAME */'                                             00454000
*            ) NORESCAN COL(MACLMAR+2);                                 00454100
*/*PL.LL13  XRSV0002 CHAR(4) RESERVED--------------------------------*/ 00454200
*        ANS('2 '!!XMFCTRL                                              00454300
*         !! '_XRSV0002 CHAR(4), '                                      00454400
*         !! '/* RESERVED */'                                           00454500
*            ) NORESCAN COL(MACLMAR+2);                                 00454600
*/*PL.LL04  XREQUEST_TYPE BIT(8) FIELD_LABEL-------------------------*/ 00454700
*        ANS('2 '!!XMFCTRL!!                                            00454800
*            '_XREQUEST_TYPE BIT(8), '!!                                00454900
*            '/* FIELD_LABEL */')                                       00455000
*            NORESCAN COL(MACLMAR+2);                                   00455100
*/*PL.LL09 BIT 1XXXXXXX----------------------------------------------*/ 00455200
*          ANS('3 '!!XMFCTRL!!                                          00455300
*              '_XREQUEST_CREATE BIT(1), '!!                            00455400
*              '/* BIT */')                                             00455500
*              NORESCAN COL(MACLMAR+2);                                 00455600
*/*PL.LL09 BIT X1XXXXXX----------------------------------------------*/ 00455700
*          ANS('3 '!!XMFCTRL!!                                          00455800
*              '_XREQUEST_DISABLE BIT(1), '!!                           00455900
*              '/* BIT */')                                             00456000
*              NORESCAN COL(MACLMAR+2);                                 00456100
*/*PL.LL09 BIT XX1XXXXX----------------------------------------------*/ 00456200
*          ANS('3 '!!XMFCTRL!!                                          00456300
*              '_XREQUEST_ENABLE BIT(1), '!!                            00456400
*              '/* BIT */')                                             00456500
*              NORESCAN COL(MACLMAR+2);                                 00456600
*/*PL.LL09 BIT XXX1XXXX----------------------------------------------*/ 00456700
*          ANS('3 '!!XMFCTRL!!                                          00456800
*              '_XREQUEST_EXCHANGE BIT(1), '!!                          00456900
*              '/* BIT */')                                             00457000
*              NORESCAN COL(MACLMAR+2);                                 00457100
*/*PL.LL10 RESERVED BIT----------------------------------------------*/ 00457200
*          ANS('3 '!!XMFCTRL!!                                          00457300
*              '_XREQUEST_TYPE_RSVD1 BIT(4), '!!                        00457400
*              '/* BIT */')                                             00457500
*              NORESCAN COL(MACLMAR+2);                                 00457600
*/*PL.LL13  XRSV0003 CHAR(1) RESERVED--------------------------------*/ 00457700
*        ANS('2 '!!XMFCTRL                                              00457800
*         !! '_XRSV0003 CHAR(1), '                                      00457900
*         !! '/* RESERVED */'                                           00458000
*            ) NORESCAN COL(MACLMAR+2);                                 00458100
*/*PL.LL04  XMISC_FLAGS BIT(8) FIELD_LABEL---------------------------*/ 00458200
*        ANS('2 '!!XMFCTRL!!                                            00458300
*            '_XMISC_FLAGS BIT(8), '!!                                  00458400
*            '/* FIELD_LABEL */')                                       00458500
*            NORESCAN COL(MACLMAR+2);                                   00458600
*/*PL.LL09 BIT 1XXXXXXX----------------------------------------------*/ 00458700
*          ANS('3 '!!XMFCTRL!!                                          00458800
*              '_XLOADTOGLOBAL_YES BIT(1), '!!                          00458900
*              '/* BIT */')                                             00459000
*              NORESCAN COL(MACLMAR+2);                                 00459100
*/*PL.LL10 RESERVED BIT----------------------------------------------*/ 00459200
*          ANS('3 '!!XMFCTRL!!                                          00459300
*              '_XMISC_FLAGS_RSVD1 BIT(7), '!!                          00459400
*              '/* BIT */')                                             00459500
*              NORESCAN COL(MACLMAR+2);                                 00459600
*/*PL.LL13  XRSV0004 CHAR(1) RESERVED--------------------------------*/ 00459700
*        ANS('2 '!!XMFCTRL                                              00459800
*         !! '_XRSV0004 CHAR(1), '                                      00459900
*         !! '/* RESERVED */'                                           00460000
*            ) NORESCAN COL(MACLMAR+2);                                 00460100
*/*PL.LL13  XSSVTDATA PTR(31) INPUT NAME-----------------------------*/ 00460200
*        ANS('2 '!!XMFCTRL                                              00460300
*         !! '_XSSVTDATA PTR(31), '                                     00460400
*         !! '/* '!!ZXSSVTDATA                                          00460500
*         !! ' XSSVTDATA */'                                            00460600
*            ) NORESCAN COL(MACLMAR+2);                                 00460700
*/*PL.LL13  XMAXENTRIES FIXED(15) INPUT------------------------------*/ 00460800
*        ANS('2 '!!XMFCTRL                                              00460900
*         !! '_XMAXENTRIES FIXED(15), '                                 00461000
*         !! '/* '!!ZXMAXENTRIES                                        00461100
*         !! ' XMAXENTRIES */'                                          00461200
*            ) NORESCAN COL(MACLMAR+2);                                 00461300
*/*PL.LL13  XSUBPOOL FIXED(8) INPUT----------------------------------*/ 00461400
*        ANS('2 '!!XMFCTRL                                              00461500
*         !! '_XSUBPOOL FIXED(8), '                                     00461600
*         !! '/* '!!ZXSUBPOOL                                           00461700
*         !! ' XSUBPOOL */'                                             00461800
*            ) NORESCAN COL(MACLMAR+2);                                 00461900
*/*PL.LL13  XRSV0005 CHAR(1) RESERVED--------------------------------*/ 00462000
*        ANS('2 '!!XMFCTRL                                              00462100
*         !! '_XRSV0005 CHAR(1), '                                      00462200
*         !! '/* RESERVED */'                                           00462300
*            ) NORESCAN COL(MACLMAR+2);                                 00462400
*/*PL.LL13  XINTOKEN BIT(32) INPUT-----------------------------------*/ 00462500
*        ANS('2 '!!XMFCTRL                                              00462600
*         !! '_XINTOKEN BIT(32), '                                      00462700
*         !! '/* '!!ZXINTOKEN                                           00462800
*         !! ' XINTOKEN */'                                             00462900
*            ) NORESCAN COL(MACLMAR+2);                                 00463000
*/*PL.LL13  XRSV0008 CHAR(20) RESERVED-------------------------------*/ 00463100
*        ANS('2 '!!XMFCTRL                                              00463200
*         !! '_XRSV0008 CHAR(20), '                                     00463300
*         !! '/* RESERVED */'                                           00463400
*            ) NORESCAN COL(MACLMAR+2);                                 00463500
*/*PL.LL13  XRSV0006 CHAR(4) RESERVED--------------------------------*/ 00463600
*        ANS('2 '!!XMFCTRL                                              00463700
*         !! '_XRSV0006 CHAR(4), '                                      00463800
*         !! '/* RESERVED */'                                           00463900
*            ) NORESCAN COL(MACLMAR+2);                                 00464000
*/*PL.LL13  XOUTTOKEN BIT(32) OUTPUT---------------------------------*/ 00464100
*        ANS('2 '!!XMFCTRL                                              00464200
*         !! '_XOUTTOKEN BIT(32), '                                     00464300
*         !! '/* '!!ZXOUTTOKEN                                          00464400
*         !! ' XOUTTOKEN */'                                            00464500
*            ) NORESCAN COL(MACLMAR+2);                                 00464600
*/*PL.LL13  XERRFUNCT CHAR(8) OUTPUT---------------------------------*/ 00464700
*        ANS('2 '!!XMFCTRL                                              00464800
*         !! '_XERRFUNCT CHAR(8), '                                     00464900
*         !! '/* '!!ZXERRFUNCT                                          00465000
*         !! ' XERRFUNCT */'                                            00465100
*            ) NORESCAN COL(MACLMAR+2);                                 00465200
*/*PL.LL13  XRSV0007 CHAR(4) RESERVED--------------------------------*/ 00465300
*        ANS('2 '!!XMFCTRL                                              00465400
*         !! '_XRSV0007 CHAR(4), '                                      00465500
*         !! '/* RESERVED */'                                           00465600
*            ) NORESCAN COL(MACLMAR+2);                                 00465700
*/*PL.LL13  XPLISTPTR PTR(31) INPUT----------------------------------*/ 00465800
*        ANS('2 '!!XMFCTRL                                              00465900
*         !! '_XPLISTPTR PTR(31), '                                     00466000
*         !! '/* '!!ZXPLISTPTR                                          00466100
*         !! ' XPLISTPTR */'                                            00466200
*            ) NORESCAN COL(MACLMAR+2);                                 00466300
*/*PL.LL18 ----------------------------------------------------------*/ 00466400
*        ANS('2 * CHAR(0);')                                            00466500
*            NORESCAN COL(MACLMAR+2);                                   00466600
*/*PL.LL17 END OF MF=L PARAMETER LIST--------------------------------*/ 00466700
*      END;                                                             00466800
*/*PL.L01 MACRO WORK VARIABLES---------------------------------------*/ 00466900
*  DCL ZPRMLINE CHAR;          /* ZPRM ARRAY ENTRY ACCUMULATOR      */  00467000
*  DEACT ZPRMLINE;                                                      00467100
*  DCL ZNDX CHAR;              /* UNIQUE LIST STRUCTURE NAME        */  00467200
*  DEACT ZNDX;                                                          00467300
*  ZNDX=MACINDEX;              /* MACINDEX                          */  00467400
*  DCL XVERSION CHAR;                                                   00467500
*  DEACT XVERSION;                                                      00467600
*/*PL.L02 ?IEFSSVT PARAMETER LIST------------------------------------*/ 00467700
*  IF XMF^='L'                                                          00467800
*    THEN                                                               00467900
*      DO;                                                              00468000
*/*PL.L03 ?IEFSSVT PARAMETER LIST------------------------------------*/ 00468100
*        IF XMF='S'                                                     00468200
*          THEN                                                         00468300
*            XMFCTRL='#ZPLIST';                                         00468400
*/*PL.L04 ?IEFSSVT PARAMETER LIST------------------------------------*/ 00468500
*        ZPRMLINE='DCL 1 #Z'!!ZNDX!!' DEF('!!                           00468600
*                 XMFCTRL!!'),'!!                                       00468700
*                 ' /* ?IEFSSVT PARM LIST*/';                           00468800
*/*PL.L08  XVT_PLIST_ID CHAR(4) CONSTANT-----------------------------*/ 00468900
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00469000
*                 '_XVT_PLIST_ID CHAR(4), '!!                           00469100
*                 '/* '!!ZXVT_PLIST_ID!!                                00469200
*                 ' XVT_PLIST_ID */';                                   00469300
*/*PL.L05  XPLISTLEN FIXED(16) BDY(BYTE) INPUT-----------------------*/ 00469400
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00469500
*                 '_XPLISTLEN FIXED(16) BDY(BYTE), '!!                  00469600
*                 '/* INPUT XPLISTLEN*/';                               00469700
*/*PL.L05  XVERSION FIXED(8) INPUT-----------------------------------*/ 00469800
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00469900
*                 '_XVERSION FIXED(8), '!!                              00470000
*                 '/* INPUT XVERSION*/';                                00470100
*/*PL.L08  XRSV0001 CHAR(1) RESERVED---------------------------------*/ 00470200
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00470300
*                 '_XRSV0001 CHAR(1), '!!                               00470400
*                 '/* RESERVED */';                                     00470500
*/*PL.L08  XSUBNAME CHAR(4) INPUT------------------------------------*/ 00470600
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00470700
*                 '_XSUBNAME CHAR(4), '!!                               00470800
*                 '/* '!!ZXSUBNAME!!                                    00470900
*                 ' XSUBNAME */';                                       00471000
*/*PL.L08  XRSV0002 CHAR(4) RESERVED---------------------------------*/ 00471100
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00471200
*                 '_XRSV0002 CHAR(4), '!!                               00471300
*                 '/* RESERVED */';                                     00471400
*/*PL.L08  XREQUEST_TYPE BIT(8) FIELD_LABEL--------------------------*/ 00471500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00471600
*                 '_XREQUEST_TYPE BIT(8), '!!                           00471700
*                 '/* FIELD_LABEL */';                                  00471800
*/*PL.L08  XRSV0003 CHAR(1) RESERVED---------------------------------*/ 00471900
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00472000
*                 '_XRSV0003 CHAR(1), '!!                               00472100
*                 '/* RESERVED */';                                     00472200
*/*PL.L08  XMISC_FLAGS BIT(8) FIELD_LABEL----------------------------*/ 00472300
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00472400
*                 '_XMISC_FLAGS BIT(8), '!!                             00472500
*                 '/* FIELD_LABEL */';                                  00472600
*/*PL.L08  XRSV0004 CHAR(1) RESERVED---------------------------------*/ 00472700
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00472800
*                 '_XRSV0004 CHAR(1), '!!                               00472900
*                 '/* RESERVED */';                                     00473000
*/*PL.L08  XSSVTDATA PTR(31) INPUT NAME------------------------------*/ 00473100
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00473200
*                 '_XSSVTDATA PTR(31), '!!                              00473300
*                 '/* '!!ZXSSVTDATA!!                                   00473400
*                 ' XSSVTDATA */';                                      00473500
*/*PL.L08  XMAXENTRIES FIXED(15) INPUT-------------------------------*/ 00473600
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00473700
*                 '_XMAXENTRIES FIXED(15), '!!                          00473800
*                 '/* '!!ZXMAXENTRIES!!                                 00473900
*                 ' XMAXENTRIES */';                                    00474000
*/*PL.L08  XSUBPOOL FIXED(8) INPUT-----------------------------------*/ 00474100
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00474200
*                 '_XSUBPOOL FIXED(8), '!!                              00474300
*                 '/* '!!ZXSUBPOOL!!                                    00474400
*                 ' XSUBPOOL */';                                       00474500
*/*PL.L08  XRSV0005 CHAR(1) RESERVED---------------------------------*/ 00474600
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00474700
*                 '_XRSV0005 CHAR(1), '!!                               00474800
*                 '/* RESERVED */';                                     00474900
*/*PL.L08  XINTOKEN BIT(32) INPUT------------------------------------*/ 00475000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00475100
*                 '_XINTOKEN BIT(32), '!!                               00475200
*                 '/* '!!ZXINTOKEN!!                                    00475300
*                 ' XINTOKEN */';                                       00475400
*/*PL.L08  XRSV0008 CHAR(20) RESERVED--------------------------------*/ 00475500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00475600
*                 '_XRSV0008 CHAR(20), '!!                              00475700
*                 '/* RESERVED */';                                     00475800
*/*PL.L08  XRSV0006 CHAR(4) RESERVED---------------------------------*/ 00475900
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00476000
*                 '_XRSV0006 CHAR(4), '!!                               00476100
*                 '/* RESERVED */';                                     00476200
*/*PL.L08  XOUTTOKEN BIT(32) OUTPUT----------------------------------*/ 00476300
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00476400
*                 '_XOUTTOKEN BIT(32), '!!                              00476500
*                 '/* '!!ZXOUTTOKEN!!                                   00476600
*                 ' XOUTTOKEN */';                                      00476700
*/*PL.L08  XERRFUNCT CHAR(8) OUTPUT----------------------------------*/ 00476800
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00476900
*                 '_XERRFUNCT CHAR(8), '!!                              00477000
*                 '/* '!!ZXERRFUNCT!!                                   00477100
*                 ' XERRFUNCT */';                                      00477200
*/*PL.L08  XRSV0007 CHAR(4) RESERVED---------------------------------*/ 00477300
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00477400
*                 '_XRSV0007 CHAR(4), '!!                               00477500
*                 '/* RESERVED */';                                     00477600
*/*PL.L09  XPLISTPTR PTR(31) INPUT-----------------------------------*/ 00477700
*        ZPRMNUM=ZPRMNUM+1;                                             00477800
*        ZPRM(ZPRMNUM)=ZPRMLINE!!' 2 #Z'!!ZNDX!!                        00477900
*            '_XPLISTPTR PTR(31), '!!                                   00478000
*            '/* '!!ZXPLISTPTR!!                                        00478100
*            ' XPLISTPTR */';                                           00478200
*        ZPRMLINE='';                                                   00478300
*/*PL.L11 CONSTANT TO ENSURE THAT LIST FORM IS LONG ENOUGH ----------*/ 00478400
*        ZPRMNUM=ZPRMNUM+1;                                             00478500
*        ZPRM(ZPRMNUM)=ZPRMLINE!!' 2 * CHAR(0);';                       00478600
*        IF XPLISTVER^=1                                                00478700
*           & XMF^='S'                                                  00478800
*          THEN                                                         00478900
*            DO;                                                        00479000
*              ZPRMNUM=ZPRMNUM+1;                                       00479100
*              ZPRM(ZPRMNUM)=                                           00479200
*               'DCL #Z'!!ZNDX!!'_LENCHECK FIXED(32) CONSTANT('!!       00479300
*               'LENGTH('!!XMFCTRL!!')-LENGTH(#Z'!!ZNDX!!'));'!!        00479400
*               '/* CONSTANT TO ENSURE THAT THE LIST FORM'!!            00479500
*               ' IS LONG ENOUGH */';                                   00479600
*            END;                                                       00479700
*/*PL.L12 PARAMETER LIST SIZE----------------------------------------*/ 00479800
*        ZPLLEN=76;                                                     00479900
*        IF ZPRMMAX<ZPLLEN                                              00480000
*           & XMF^='E'                                                  00480100
*          THEN                                                         00480200
*            ZPRMMAX=ZPLLEN;                                            00480300
*/*PL.L13 -----------------------------------------------------------*/ 00480400
*      END;                                                             00480500
*/*PI.L01 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00480600
*  IF XMF^='L'                                                          00480700
*    THEN                                                               00480800
*      DO;                                                              00480900
*/*PI.L03 CLEAR PARAMETER LIST --------------------------------------*/ 00481000
*            ANS('#Z'!!ZNDX!!'=''''B;'!!                                00481100
*                '/* CLEAR PARAMETER AREA */')                          00481200
*                NORESCAN COL(MACLMAR);                                 00481300
*/*PI.L28 XVT_PLIST_ID  CHAR(4)--------------------------------------*/ 00481400
*        ANS('#Z'!!ZNDX!!'_XVT_PLIST_ID=''VTPL'';'!!                    00481500
*            '/* XVT_PLIST_ID CHAR(4) CONSTANT */')                     00481600
*            NORESCAN COL(MACLMAR);                                     00481700
*/*PI.L05C XPLISTLEN FIXED(16)---------------------------------------*/ 00481800
*        ANS('#Z'!!ZNDX!!'_XPLISTLEN=LENGTH(#Z'!!ZNDX!!');'!!           00481900
*            '/* XPLISTLEN FIXED(16) */')                               00482000
*            NORESCAN COL(MACLMAR);                                     00482100
*/*PI.L05B XVERSION FIXED(8)-----------------------------------------*/ 00482200
*        IF XPLISTVER^=0                                                00482300
*          THEN                                                         00482400
*            ANS('#Z'!!ZNDX!!'_XVERSION='!!CHAR(XPLISTVER)!!'; '!!      00482500
*                '/* XVERSION FIXED(8) */')                             00482600
*                NORESCAN COL(MACLMAR);                                 00482700
*/*PI.L21 XSUBNAME NAME CHAR(4)--------------------------------------*/ 00482800
*        IF ZXSUBNAME='INPUT' !                                         00482900
*           ZXSUBNAME='INOUT'                                           00483000
*          THEN                                                         00483100
*            ANS('#Z'!!ZNDX!!'_XSUBNAME='!!                             00483200
*                XSUBNAME!!';'!!                                        00483300
*                '/* XSUBNAME CHAR(4) */')                              00483400
*                NORESCAN COL(MACLMAR);                                 00483500
*/*PI.L06 XREQUEST_TYPE BIT(8)---------------------------------------*/ 00483600
*        ZW='';                                                         00483700
*        ZMS='';                                                        00483800
*/*PI.L07 XREQUEST_TYPE BIT(8) 1XXXXXXX------------------------------*/ 00483900
*        IF XREQUEST='CREATE'                                           00484000
*          THEN                                                         00484100
*            ZW=ZW!!'1';                                                00484200
*          ELSE                                                         00484300
*            ZW=ZW!!'0';                                                00484400
*/*PI.L07 XREQUEST_TYPE BIT(8) X1XXXXXX------------------------------*/ 00484500
*        IF XREQUEST='DISABLE'                                          00484600
*          THEN                                                         00484700
*            ZW=ZW!!'1';                                                00484800
*          ELSE                                                         00484900
*            ZW=ZW!!'0';                                                00485000
*/*PI.L07 XREQUEST_TYPE BIT(8) XX1XXXXX------------------------------*/ 00485100
*        IF XREQUEST='ENABLE'                                           00485200
*          THEN                                                         00485300
*            ZW=ZW!!'1';                                                00485400
*          ELSE                                                         00485500
*            ZW=ZW!!'0';                                                00485600
*/*PI.L07 XREQUEST_TYPE BIT(8) XXX1XXXX------------------------------*/ 00485700
*        IF XREQUEST='EXCHANGE'                                         00485800
*          THEN                                                         00485900
*            ZW=ZW!!'10000';                                            00486000
*          ELSE                                                         00486100
*            ZW=ZW!!'00000';                                            00486200
*/*PI.L09 XREQUEST_TYPE BIT(8)---------------------------------------*/ 00486300
*        IF INDEX(ZW,'1')^=0                                            00486400
*          THEN                                                         00486500
*            ANS('#Z'!!ZNDX!!'_XREQUEST_TYPE='!!                        00486600
*                '#Z'!!ZNDX!!'_XREQUEST_TYPE ! '!!                      00486700
*                ''''!!ZW!!'''B; '!!                                    00486800
*                '/* BIT(8) */')                                        00486900
*                NORESCAN COL(MACLMAR);                                 00487000
*/*PI.L06 XMISC_FLAGS BIT(8)-----------------------------------------*/ 00487100
*        ZW='';                                                         00487200
*        ZMS='';                                                        00487300
*/*PI.L07 XMISC_FLAGS BIT(8) 1XXXXXXX--------------------------------*/ 00487400
*        IF XLOADTOGLOBAL='YES'                                         00487500
*          THEN                                                         00487600
*            ZW=ZW!!'10000000';                                         00487700
*          ELSE                                                         00487800
*            ZW=ZW!!'00000000';                                         00487900
*/*PI.L09 XMISC_FLAGS BIT(8)-----------------------------------------*/ 00488000
*        IF INDEX(ZW,'1')^=0                                            00488100
*          THEN                                                         00488200
*            ANS('#Z'!!ZNDX!!'_XMISC_FLAGS='!!                          00488300
*                '#Z'!!ZNDX!!'_XMISC_FLAGS ! '!!                        00488400
*                ''''!!ZW!!'''B; '!!                                    00488500
*                '/* BIT(8) */')                                        00488600
*                NORESCAN COL(MACLMAR);                                 00488700
*/*PI.L23 XSSVTDATA NAME---------------------------------------------*/ 00488800
*        IF ZXSSVTDATA^=''                                              00488900
*          THEN                                                         00489000
*            ANS('#Z'!!ZNDX!!'_XSSVTDATA='!!                            00489100
*                'ADDR('!!XSSVTDATA!!');'!!                             00489200
*                '/* XSSVTDATA NAME */')                                00489300
*                NORESCAN COL(MACLMAR);                                 00489400
*/*PI.L17 XMAXENTRIES FIXED(15)--------------------------------------*/ 00489500
*        IF ZXMAXENTRIES='INPUT' !                                      00489600
*           ZXMAXENTRIES='INOUT'                                        00489700
*          THEN                                                         00489800
*            ANS('#Z'!!ZNDX!!'_XMAXENTRIES='!!                          00489900
*                XMAXENTRIES!!';'!!                                     00490000
*                '/* XMAXENTRIES FIXED(15) */')                         00490100
*                NORESCAN COL(MACLMAR);                                 00490200
*/*PI.L17 XSUBPOOL FIXED(8)------------------------------------------*/ 00490300
*        IF ZXSUBPOOL='INPUT' !                                         00490400
*           ZXSUBPOOL='INOUT'                                           00490500
*          THEN                                                         00490600
*            ANS('#Z'!!ZNDX!!'_XSUBPOOL='!!                             00490700
*                XSUBPOOL!!';'!!                                        00490800
*                '/* XSUBPOOL FIXED(8) */')                             00490900
*                NORESCAN COL(MACLMAR);                                 00491000
*/*PI.L14 CHECK FOR * AS THE BIT(32) ARGUMENT------------------------*/ 00491100
*        IF XINTOKEN='NULL'                                             00491200
*          THEN                                                         00491300
*            ZXINTOKEN='';                   /* RESET INPUT/INOUT */    00491400
*/*PI.L19 XINTOKEN NAME BIT(32)--------------------------------------*/ 00491500
*        IF ZXINTOKEN='INPUT' !                                         00491600
*           ZXINTOKEN='INOUT'                                           00491700
*          THEN                                                         00491800
*            IF (XINTOKEN(1:1)^='0' &                                   00491900
*               XINTOKEN(1:1)^='1')                                     00492000
*              THEN                                                     00492100
*                ANS('#Z'!!ZNDX!!'_XINTOKEN='!!                         00492200
*                    XINTOKEN!!';'!!                                    00492300
*                    '/* XINTOKEN BIT(32) */')                          00492400
*                    NORESCAN COL(MACLMAR);                             00492500
*              ELSE                                                     00492600
*                ANS('#Z'!!ZNDX!!'_XINTOKEN='!!                         00492700
*                    ''''!!XINTOKEN!!'''B;'!!                           00492800
*                    '/* XINTOKEN BIT(32) */')                          00492900
*                    NORESCAN COL(MACLMAR);                             00493000
*/*PI.L31 INVOKE FUNCTION--------------------------------------------*/ 00493100
*              IF NUMBER(RSNCODE)>0                                     00493200
*                THEN                                                   00493300
*                  ANS('RFY GPR00F RSTD;') NORESCAN COL(MACLMAR);       00493400
*              IF NUMBER(RETCODE)>0                                     00493500
*                THEN                                                   00493600
*                  ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);       00493700
*              ANS('RFY GPR01P RSTD;') NORESCAN COL(MACLMAR);           00493800
*              ANS('#Z'!!ZNDX!!'_XPLISTPTR=ADDR(#Z'!!ZNDX!!');'!!       00493900
*                  '/* STORE PARM LIST ADDR */')                        00494000
*                  NORESCAN COL(MACLMAR);                               00494100
*              ANS('GPR01P=ADDR(#Z'!!ZNDX!!'_XPLISTPTR);'!!             00494200
*                  '/* LOAD PARM LIST ADDR INTO R1*/')                  00494300
*                  NORESCAN COL(MACLMAR);                               00494400
*              IF SYSASCE^='P'                                          00494500
*                THEN                                                   00494600
*                  ANS('SAR(GPR01P,ALET(#Z'!!ZNDX!!'));'!!              00494700
*                      '/* PARAMETER LIST AR */')                       00494800
*                      NORESCAN COL(MACLMAR);                           00494900
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00495000
*/********************************************************************/ 00495100
*/* Invoke IEFSSVT service routine                                   */ 00495200
*/********************************************************************/ 00495300
*DCL EHAMAPS CHAR EXT;              /*                           @P2A*/ 00495400
*IF INDEX(EHAMAPS,'XM@')=0 THEN                                         00495500
*    EHAMAPS=EHAMAPS!!'XM@,';       /*                           @P2A*/ 00495600
*                                                                       00495700
*ANS('RFY GPR15F RSTD;') NOSCAN COL(MACCOL+2);                          00495800
*ANS('IF (XM@CVT->CVTJESCT->JESCTEXT->JESVTPC ^= 0) THEN')              00495900
*    NOSCAN COL(MACCOL+2);          /*                           @P3C*/ 00496000
*ANS('/* Test whether service available */') NOSCAN COL(37);            00496100
*                                                                       00496200
*ANS('PC(XM@CVT->CVTJESCT->JESCTEXT->JESVTPC);')                        00496300
*    NOSCAN COL(MACCOL+4);          /*                           @P3C*/ 00496400
*ANS('/* Process service request */') NOSCAN COL(37);                   00496500
*                                                                       00496600
*ANS('ELSE') NOSCAN COL(MACCOL+2);                            /* @P3C*/ 00496700
*ANS('/* Service not available */') NOSCAN COL(37);                     00496800
*                                                                       00496900
*ANS('GPR15F = IEFSSVT_UNAVAILABLE;') NOSCAN COL(MACCOL+4);   /* @P3C*/ 00497000
*ANS('/* Indicate service not available */') NOSCAN COL(37);            00497100
*                                                                       00497200
*ANS('RFY GPR15F UNRSTD;') NOSCAN COL(MACCOL+2);                        00497300
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00497400
*              ANS('RFY GPR01P UNRSTD;') NORESCAN COL(MACLMAR);         00497500
*/*PO.L04 XOUTTOKEN BIT(32)------------------------------------------*/ 00497600
*              IF ZXOUTTOKEN='OUTPUT' !                                 00497700
*                 ZXOUTTOKEN='INOUT'                                    00497800
*                THEN                                                   00497900
*                  ANS(XOUTTOKEN!!                                      00498000
*                      '=#Z'!!ZNDX!!'_XOUTTOKEN;'!!                     00498100
*                      '/* XOUTTOKEN BIT(32) */')                       00498200
*                      NORESCAN COL(MACLMAR);                           00498300
*/*PO.L05 XERRFUNCT CHAR(8)------------------------------------------*/ 00498400
*              IF ZXERRFUNCT='OUTPUT' !                                 00498500
*                 ZXERRFUNCT='INOUT'                                    00498600
*                THEN                                                   00498700
*                  ANS(XERRFUNCT!!                                      00498800
*                      '=#Z'!!ZNDX!!'_XERRFUNCT;'!!                     00498900
*                      '/* XERRFUNCT CHAR(8) */')                       00499000
*                      NORESCAN COL(MACLMAR);                           00499100
*/*PO.L08 XRETCODE RETURN CODE---------------------------------------*/ 00499200
*              IF NUMBER(RETCODE)>0                                     00499300
*                THEN                                                   00499400
*                    ANS(XRETCODE!!                                     00499500
*                     '=GPR15F; /* SET RETURN CODE */')                 00499600
*                      NORESCAN COL(MACLMAR);                           00499700
*/*PO.L09 XRSNCODE REASON CODE---------------------------------------*/ 00499800
*              IF NUMBER(RSNCODE)>0                                     00499900
*                THEN                                                   00500000
*                    ANS(XRSNCODE!!                                     00500100
*                     '=GPR00F; /* SET REASON CODE */')                 00500200
*                      NORESCAN COL(MACLMAR);                           00500300
*/*PO.L10 REMOVE REGISTER RESTRICTIONS-------------------------------*/ 00500400
*              IF NUMBER(RSNCODE)>0                                     00500500
*                THEN                                                   00500600
*              ANS('RFY GPR00F UNRSTD;') NORESCAN COL(MACLMAR);         00500700
*              IF NUMBER(RETCODE)>0                                     00500800
*                THEN                                                   00500900
*              ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);         00501000
*/*PO.L12 END OF PARAMETER LIST PROCESSING---------------------------*/ 00501100
*      END;                                                             00501200
*/*PO.L13 IEFSSVT USAGE INDICATOR------------------------------------*/ 00501300
*  ZIEFSSVT='YES';                           /* SET IEFSSVT USED */     00501400
*/*PO.L15 END OF EXECUTABLE IEFSSVT-PLISTVER MACRO-------------------*/ 00501500
*  IF XMF^='L'                                                          00501600
*    THEN                                                               00501700
*      ANS('END; /* IEFSSVT-PLISTVER */')                               00501800
*          NORESCAN COL(MACLMAR);                                       00501900
*/*PO.L16 RESTORE PRINT CONTROLS-------------------------------------*/ 00502000
*  ANS(MACCONC!!'LIST POP;') NORESCAN COL(MACLMAR);                     00502100
*/*PO.L17 END OF IEFSSVT MACRO---------------------------------------*/ 00502200
*  ANS(MACCONC!!'SPACE;') NORESCAN COL(MACLMAR);                        00502300
*  ANS(' ') NORESCAN COL(MACLMAR);                                      00502400
*/*******************************************************************/  00502500
*/*  PO.L18 END OF CODE TO BE BYPASSED WHEN ZMACRET ^= 0            */  00502600
*/*******************************************************************/  00502700
*      END;                                                             00502800
*/*******************************************************************/  00502900
*/*  MVS ONLY     -CHECK IF AMG PARM LISTS ARE PRESENT              */  00503000
*/*               -ROUND MAX AMG PARM LIST TO DOUBLEWORD MULTIPLES  */  00503100
*/*******************************************************************/  00503200
*  IF ZPRMNUM>0                   /* NUMBER OF AMG PARM LIST ENTRIES*/  00503300
*    THEN                                                               00503400
*      DO;                                                              00503500
*        ZPRMMAX=((ZPRMMAX+7)/8)*8; /* ROUND PARM LIST SIZE UP TO       00503600
*                                      DOUBLEWORD MULTIPLES        */   00503700
*/*******************************************************************/  00503800
*/*  MVS -GENERATE PARM LIST DCL TO OVERLAY ?EPILOG'S ILIST AREA    */  00503900
*/*******************************************************************/  00504000
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00504100
*          THEN                                                         00504200
*            DO;                                                        00504300
*              IF INDEX(EHALIST,',AMG,')=0 /* HAS DECLARE BEEN DONE?*/  00504400
*                THEN                                                   00504500
*                  DO;                                                  00504600
*                    ANS('?EPILOG                                       00504700
*                        STRING(''DCL #ZPLIST DEF(ILIST);'');');        00504800
*                    EHALIST=EHALIST!!',AMG,';                          00504900
*                  END;                                                 00505000
*            END;                                                       00505100
*/*******************************************************************/  00505200
*/*  MVS  -EXTRACT PARM LISTS FROM AMG GLOBAL MACRO ARRAYS          */  00505300
*/*******************************************************************/  00505400
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00505500
*          THEN                                                         00505600
*            DO;                                                        00505700
*              IF ZPRMMAX>EHAMAXLEN                                     00505800
*                THEN                                                   00505900
*                  EHAMAXLEN=ZPRMMAX; /* SET MAX PARM LIST SIZE     */  00506000
*            END;                                                       00506100
*        DO ZI=1 TO ZPRMNUM; /* EXTRACT AMG PARM LISTS               */ 00506200
*          ANS('?EPILOG STRING('''!!ZPRM(ZI)!!''');')                   00506300
*              COL(MACLMAR);                                            00506400
*        END;                                                           00506500
*      END;                                                             00506600
*/*-----------------------------------------------------------------*/  00506700
*/*  MVS  -ENSURE THAT GPRS NEEDED BY AMG MACROS WILL BE PROVIDED   */  00506800
*/*        BY ?EPILOG                                               */  00506900
*/*-----------------------------------------------------------------*/  00507000
*        IF INDEX(EHAREGS,'01P')=0                                      00507100
*          THEN                                                         00507200
*            EHAREGS=EHAREGS!!'01P'; /* GPR01P                      */  00507300
*        IF INDEX(EHAREGS,'00F')=0                                      00507400
*          & NUMBER(RSNCODE)>0                                          00507500
*          THEN                                                         00507600
*            EHAREGS=EHAREGS!!'00F'; /* GPR00F                      */  00507700
*        IF INDEX(EHAREGS,'15F')=0                                      00507800
*          THEN                                                         00507900
*            EHAREGS=EHAREGS!!'15F'; /* GPR15F                      */  00508000
*  RETURN CODE(ZMACRET);                                                00508100
*%END IEFSSVT;                                                          00508200
