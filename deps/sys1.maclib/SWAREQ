*/*** START OF SPECIFICATIONS **************************************/           
*/*                                                                 */          
*/*01* MACRO NAME: SWAREQ                                       @L4A*/          
*/*                                                                 */          
*/*01* PROPRIETARY STATEMENT=                                       */          
*/*                                                                 */          
*/*                 LICENSED MATERIALS - PROPERTY OF IBM            */          
*/*                 5650-zOS                                        */          
*/*                 COPYRIGHT IBM CORP. 1983, 2021                  */          
*/*                                                                 */          
*/*01*   STATUS - HBB77D0                                           */          
*/*                                                                 */          
*/**** END OF PROPRIETARY STATEMENT *********************************/          
*/*                                                                 */          
*/*01* EXTERNAL CLASSIFICATION:                                     */          
*/*02*   NOTPI: BASE                                            @L4C*/          
*/*02*   PI: FIELDS                                                 */          
*/*          FCODE = RL                                             */          
*/*          FCODE = WL                                             */          
*/*          EPA                                                    */          
*/*          UNAUTH = YES                                           */          
*/*          UNAUTH = NO                                            */          
*/*01* END OF EXTERNAL CLASSIFICATION:                          @P2A*/          
*/*                                                                 */          
*/*01* DESCRIPTIVE NAME: SWA MANAGER LOCATE MODE INVOCATION     @L4C*/          
*/*02* ACRONYM: NONE                                                */          
*/*                                                                 */          
*/*01* FUNCTION:                                                @L4C*/          
*/*                                                                 */          
*/*     PL/X:   THE SWAREQ MACRO IS USED TO INVOKE THE SWA      @L4C*/          
*/*             MANAGER LOCATE MODE (IEFQB556) ROUTINE OR       @T0A*/          
*/*             OPTIONALLY THE UNAUTHORIZED SERVICE (IEFQBSVA). @T0A*/          
*/*                                                                 */          
*/*     ASM:    THE SWAREQ MACRO IS USED TO SET/MODIFY THE      @L4C*/          
*/*             PARAMETER LIST TO SWA MANAGER AND/OR INVOKE     @L2A*/          
*/*             THE SWA MANAGER LOCATE MODE(IEFQB556) ROUTINE   @T0A*/          
*/*             OR OPTIONALLY THE UNAUTHORIZED SERVICE          @T0A*/          
*/*             (IEFQBSVA).                                     @T0A*/          
*/*                                                             @L2A*/          
*/*02* OPERATION:                                               @L1A*/          
*/*                                                             @L2A*/          
*/*     PLX:                                                    @L4C*/          
*/*      . VERIFY THE FUNCTION CODE                             @L1A*/          
*/*        VALID FUNCTION CODES ARE:                            @L1A*/          
*/*        AL, AC, WL, RL, R6, DB, LA, AS, GB, FB               @P3C*/          
*/*                                                             @L1A*/          
*/*      . CHECK FOR A MISSING EPA KEYWORD OR NULL SUBPARAMETER @L1A*/          
*/*      . CHECK FOR MORE THAN 1 POSITIONAL PARAMETER           @L1A*/          
*/*      . CHECK FOR MORE THAN 1 SUBPARAMETER ON EPA KEYWORD    @L1A*/          
*/*      . VERIFY THE UNAUTH KEYWORD AS YES OR NO               @T0A*/          
*/*      . VERIFY IEFJESCT WAS INCLUDED                         @D1A*/          
*/*      . IF UNAUTH=YES IS SPECIFIED, CHECK FOR AN EXTENDED    @D1A*/          
*/*        EPA (Extended or version 2 extended).                @L4C*/          
*/*                                                                 */          
*/*       IF AN INVALID FUNCTION CODE WAS FOUND OR ANY OF THE   @L1A*/          
*/*       ABOVE CONDITIONS WERE TRUE THEN SET UP THE            @L1A*/          
*/*       APPROPRIATE ERROR MESSAGE TO BE ISSUED AT COMPILE     @L1A*/          
*/*       STAGE AND MACRO PROCESSING STAGE AND RETURN TO        @L1A*/          
*/*       CALLER.                                               @L1A*/          
*/*                                                                 */          
*/*       IF NO ERRORS WERE ENCOUNTERED, THEN GENERATE CODE     @L1A*/          
*/*       TO CALL THE SWA MANAGER VIA A BASSM AND PASS THE      @L1A*/          
*/*       PARAMETERS REQUESTED.                                 @L1A*/          
*/*                                                                 */          
*/*       IF NO ERRORS WERE ENCOUNTERED AND UNAUTH WAS          @T0A*/          
*/*       SPECIFIED AS YES, THEN GENERATE THE CODE TO CALL THE  @T0A*/          
*/*       UNAUTHORIZED SWA MANAGER VIA A BALR AND PASS THE      @T0A*/          
*/*       PARAMETERS REQUESTED.                                 @T0A*/          
*/*                                                                 */          
*/*     ASM :                                                   @L2A*/          
*/*      . VERIFY THE MACRO FORM                                @L2A*/          
*/*        VALID MACRO FORMS ARE:                               @L2A*/          
*/*        L (LIST), E (EXEC), M (MODIFY)                       @L2A*/          
*/*                                                             @L2A*/          
*/*      . IF MF=L                                              @L2A*/          
*/*        - GENERATE GENERALIZED PARAMETER LIST.               @L2A*/          
*/*                                                             @L2A*/          
*/*      . IF MF=M OR E                                         @L2A*/          
*/*                                                             @L2A*/          
*/*        - CHECK THE SECOND SUBPARAMETER ON THE MF KEYWORD,   @L2A*/          
*/*          WHICH IS THE ADDRESS OF THE PARAMETER LIST TO SWA  @L2A*/          
*/*          MANAGER, TO SEE IF IT IS A SYMBOL OR REGISTER.     @L2A*/          
*/*        - CHECK FOR ADDITIONAL SUBPARAMTERS                  @L2A*/          
*/*                                                             @L2A*/          
*/*      . IF FUNCTION CODE SPECIFIED                           @L2A*/          
*/*        - VERIFY THE FUNCTION CODE                           @L2A*/          
*/*          VALID FUNCTION CODES ARE:                          @L2A*/          
*/*          AL, AC, WL, RL, R6, DB, LA, AS, GB, FB             @P3C*/          
*/*        - CHECK FOR ADDITIONAL SUBPARAMETERS.                @L2A*/          
*/*                                                             @L2A*/          
*/*      . IF EPA SPECIFIED                                     @L2A*/          
*/*        - VERIFY THE EPA                                     @L2A*/          
*/*          VALID EPA VALUES ARE:                              @L2A*/          
*/*          VALID ASSEMBLER SYMBOLS OR REGISTERS.              @L2A*/          
*/*        - CHECK FOR ADDITIONAL SUBPARAMETERS.                @L2A*/          
*/*                                                             @L2A*/          
*/*      . IF UNAUTH SPECIFIED                                  @T0A*/          
*/*        - VERIFY THE VALUE SPECIFIED AS YES OR NO            @T0A*/          
*/*                                                             @L2A*/          
*/*       IF ANY ERRORS WERE FOUND AS A RESULT OF DOING THE     @L2A*/          
*/*       ABOVE PROCESSING THEN ISSUE THE APPROPRIATE MNOTE.    @L2A*/          
*/*                                                             @L2A*/          
*/*       IF NO SERIOUS ERRORS(LEVEL 12) WERE FOUND, THEN       @L2A*/          
*/*         IF MF=L, THEN GENERATE GENERALIZED PARAMETER LIST   @L2A*/          
*/*         IF MF=M, THEN SET/MODIFY THE PARAMETERS SPECIFIED.  @L2A*/          
*/*         IF MF=E, THEN SET/MODIFY THE PARAMETERS SPECIFIED   @L2A*/          
*/*                  AND GENERATE THE CODE TO CALL THE SWA      @L2A*/          
*/*                  MANAGER VIA A BASSM OR IF REQUESTED THE    @T0A*/          
*/*                  UNAUTHORIZED SWA MANAGER VIA A BALR        @T0A*/          
*/*                  PASSING THE PARAMETER LIST SPECIFIED.      @T0A*/          
*/*                                                             @L2A*/          
*/*01* NOTES = NONE                                             @L1A*/          
*/*                                                                 */          
*/*02* DEPENDENCIES =                                           @L1A*/          
*/*                                                                 */          
*/*     PLX :THE CALLER MUST DEFINE CVTPTR                      @L4C*/          
*/*          (EQUAL TO LOCATION 16) AND INCLUDE THE CVT AND     @L1A*/          
*/*          IEFJESCT MAPPING MACROS.                           @L1A*/          
*/*          THE JESCT SHOULD BE INCLUDED BEFORE THIS MACRO IS  @D1A*/          
*/*          INVOKED.                                           @D1A*/          
*/*                                                                 */          
*/*     ASM: THE CALLER MUST INCLUDE THE CVT AND THE            @L2A*/          
*/*          IEFJESCT MAPPING MACROS.                           @L2A*/          
*/*          THE CALLER MUST OBTAIN THE STORAGE FOR THE         @L2A*/          
*/*          PARAMETER LIST.                                    @L2A*/          
*/*                                                             @L2A*/          
*/*02* RESTRICTIONS =                                           @L1A*/          
*/*       ASSEMBLER H IS REQUIRED FOR BASSM INSTRUCTION.        @L1A*/          
*/*                                                                 */          
*/*       THE UNAUTHORIZED FUNCTION ONLY SUPPORTS CALLERS       @T0A*/          
*/*       EXECUTING IN 31-BIT ADDRESSING MODE.                      */          
*/*                                                                 */          
*/*       THE UNAUTHORIZED FUNCTION ONLY SUPPORTS THE           @T0A*/          
*/*       LOCATE/ALL (LA) FUNCTION. ONLY 1 EPA, NOT A           @T0A*/          
*/*       CHAIN OF EPAS, MAY BE PASSED AS INPUT. THE            @T0A*/          
*/*       FUNCTION CODE SPECIFIED IS IGNORED.                   @T0A*/          
*/*                                                                 */          
*/*01* COMPONENT:  SWA MANAGER (SC1B5)                          @P2A*/          
*/*                                                                 */          
*/*01* EYE CATCHER:   NONE                                      @L4C*/          
*/*02*   OFFSET:  N/A                                           @P2A*/          
*/*02*   LENGTH:  N/A                                           @P2A*/          
*/*                                                                 */          
*/*01* ENTRY POINT = N/A                                        @L1A*/          
*/*                                                                 */          
*/*    DSECT Name: N/A                                           @L4A*/         
*/*                                                                  */         
*/*    Eye-Catcher: N/A                                          @L4A*/         
*/*       OFFSET:  N/A                                           @L4A*/         
*/*       LENGTH:  N/A                                           @L4A*/         
*/*                                                                  */         
*/*    Storage Attributes: N/A                                   @L4A*/         
*/*       KEY: N/A                                               @L4A*/         
*/*       DATA SPACE: N/A                                        @L4A*/         
*/*       RESIDENCY: N/A                                         @L4A*/         
*/*                                                                  */         
*/*    Size: N/A                                                 @L4A*/         
*/*                                                                  */         
*/*    Created by: N/A                                           @L4A*/         
*/*                                                                  */         
*/*    Pointed to by: N/A                                        @L4A*/         
*/*                                                                  */         
*/*    SERIALIZATION: N/A                                        @L4A*/         
*/*                                                                 */          
*/*02* METHOD OF ACCESS:                                        @L4C*/          
*/*                                                                 */          
*/*     PLX INVOCATION:                                         @L2A*/          
*/*       ?SWAREQ(FUNCTION CODE) EPA(EPA ADDR) UNAUTH(YES/NO)   @T0C*/          
*/*                                                                 */          
*/*       WHERE FUNCTION CODE IS ONE OF THE FOLLOWING:          @L1A*/          
*/*          AL, AC, WL, RL, R6, DB, LA, AS, GB, FB             @P3C*/          
*/*                                                                 */          
*/*       WHERE EPA ADDRESS IS THE ADDRESS OF AN EPA            @L1A*/          
*/*                                                                 */          
*/*       WHERE UNAUTH SPECIFIES WHETHER THE UNAUTHORIZED       @T0A*/          
*/*       INTERFACE TO THE LOCATE ALL FUNCTION IS DESIRED       @T0A*/          
*/*                                                                 */          
*/*     ASM INVOCATION:                                         @T0C*/          
*/*       AA   SWAREQ FCODE=XX,EPA=YY,MF=ZZ,UNAUTH=YES/NO       @L2A*/          
*/*                                                             @L2A*/          
*/*       WHERE AA IS A LABEL WHICH WILL APPEAR ON THE          @L2A*/          
*/*       FIRST GENERATED ASSEMBLER STATEMENT.                  @L2A*/          
*/*                                                             @L2A*/          
*/*       WHERE XX IS ONE OF THE FOLLOWING:                     @L2A*/          
*/*          AL, AC, WL, RL, R6, DB, LA, AS, GB, FB             @P3C*/          
*/*                                                             @L2A*/          
*/*       WHERE YY IS THE ADDRESS OF AN EPA POINTER WHICH CAN   @L2A*/          
*/*       BE SPECIFIED AS A SYMBOL OR REGISTER 2-12.            @L2A*/          
*/*       FOR MF=L, THE REGISTER FORM IS INVALID.               @L2A*/          
*/*                                                             @L2A*/          
*/*       WHERE ZZ IS ONE OF THE FOLLOWING: L, M, OR E          @L2A*/          
*/*       IF MF=M OR E , THEN THE ADDRESS OF THE PARAMETER      @L2A*/          
*/*       LIST MUST BE SPECIFIED AS THE SECOND SUBPARAMETER.    @L2A*/          
*/*       THIS CAN BE A SYMBOL OR REGISTER 2-12.                @L2A*/          
*/*                                                             @L2A*/          
*/*       IF A REGISTER IS USED, IT MUST BE IN PARENTHESIS.     @L2A*/          
*/*       SYMBOLS EQUATED TO REGISTERS ENCLOSED IN PARENTHESIS  @L2A*/          
*/*       ARE ALSO VALID.                                       @L2A*/          
*/*                                                             @L2A*/          
*/*       WHERE UNAUTH SPECIFIES WHETHER THE UNAUTHORIZED       @T0A*/          
*/*       INTERFACE TO THE LOCATE ALL FUNCTION IS DESIRED       @T0A*/          
*/*                                                             @L2A*/          
*/*02* REGISTERS USED IN ASSEMBLER VERSION: R0,R1,R13,R14,R15   @L2A*/          
*/*                                                             @L2A*/          
*/*02* INPUT =                                                  @L1C*/          
*/*                                                                 */          
*/*     PLX:  THE FOLLOWING PARAMETERS MUST BE SPECIFIED:       @L4C*/          
*/*         . FUNCTION CODE                                     @L1A*/          
*/*         . ADDRESS OF THE EPA                                @L1A*/          
*/*         THE FOLLOWING PARAMETER IS OPTIONAL:                @T0A*/          
*/*         . UNAUTH        (UNAUTHORIZED SERVICE)              @T0A*/          
*/*                                                                 */          
*/*     ASM:  THE FOLLOWING PARAMETERS MUST BE SPECIFIED:       @L2A*/          
*/*         . MACRO FORM (MF)                                   @L2A*/          
*/*         . IF MF=M OR E, THEN THE SECOND SUBPARAMETER OF MF  @L2A*/          
*/*           IS THE ADDRESS OF THE PARAMETER LIST FOR SWA      @L2A*/          
*/*           MANAGER.                                          @L2A*/          
*/*                                                             @L2A*/          
*/*         THE FOLLOWING PARAMETERS ARE OPTIONAL BUT MUST BE   @L2A*/          
*/*         SPECIFIED AT LEAST ONCE ON SOME MACRO FORM:         @L2A*/          
*/*         . FUNCTION CODE (FCODE)                             @L2A*/          
*/*         . EPA POINTER ADDRESS   (EPA)                       @L2A*/          
*/*         . UNAUTH        (UNAUTHORIZED SERVICE)              @T0A*/          
*/*                                                             @L2A*/          
*/*         A LABEL MAY ALSO BE PLACED ON THE MACRO CALL        @L2A*/          
*/*         WHICH WILL BE PLACED ON THE FIRST ASSEMBLER         @L2A*/          
*/*         STATEMENT GENERATED.                                @L2A*/          
*/*                                                             @L2A*/          
*/*02* OUTPUT =                                                 @L1A*/          
*/*                                                                 */          
*/*     PLX:  THE OUTPUT FROM THE SWAREQ MACRO CONSISTS OF      @L4C*/          
*/*           INSTRUCTIONS TO CLEAN THE SAVE AREA ADDRESS,      @L1A*/          
*/*           GET THE ADDRESS OF SWA MANAGER (IEFQB556)         @L1A*/          
*/*           OR UNAUTHORIZED SWA MANAGER (IEFQBSVA)            @T0A*/          
*/*           AND BRANCH TO IT, OR TO PRODUCE AN ERROR MESSAGE  @L1A*/          
*/*           IF AN INVALID REQUEST IS ISSUED.                  @L1A*/          
*/*           A RETURN CODE (EHARC) IS ALSO SET.                @D1A*/          
*/*                                                                 */          
*/*     ASM:  IF MF=L:                                          @L2A*/          
*/*            . THE GENERALIZED PARAMETER LIST:                @L2A*/          
*/*              THE FIRST WORD IS THE ADDRESS OF THE           @L2A*/          
*/*              POINTER TO THE EPA CHAIN.                      @L2A*/          
*/*              THE SECOND WORD IS THE ADDRESS OF THE          @L2A*/          
*/*              FUNCTION CODE.                                 @L2A*/          
*/*           IF MF=M:                                          @L2A*/          
*/*            . THE CODE TO SET/MODIFY THE PARAMETER LIST.     @L2A*/          
*/*           IF MF=E:                                          @L2A*/          
*/*            . THE INSTRUCTIONS TO SET/MODIFY THE PARAMETER   @L2A*/          
*/*              LIST, TO CLEAN THE SAVE AREA ADDRESS, TO GET   @L2A*/          
*/*              ADDRESS OF SWA MANAGER (IEFQB556) OR           @L2A*/          
*/*              UNAUTHORIZED SWA MANAGER (IEFQBSVA) AND TO     @T0A*/          
*/*              BRANCH TO IT.                                  @L2A*/          
*/*                                                             @L2A*/          
*/*02* EXIT - NORMAL =                                          @L1A*/          
*/*                                                             @L2A*/          
*/*         . CONDITION = NO ERRORS DETECTED                    @L2C*/          
*/*         . OUTPUT    = REFER TO OUTPUT SECTION IN PROLOG     @L1A*/          
*/*         . RETURN CODES = NONE                               @L1A*/          
*/*                                                             @L2A*/          
*/*02* EXIT - ERROR =                                           @L1A*/          
*/*                                                             @L2A*/          
*/*     PLX:. CONDITIONS =                                      @L4C*/          
*/*            . INVALID FUNCTION REQUEST OR FUNCTION NOT       @L1A*/          
*/*              REQUESTED                                      @L1A*/          
*/*            . KEYWORD EPA IS MISSING                         @L1A*/          
*/*            . MORE THAN 1 POSITIONAL PARAMETER IS PRESENT    @L1A*/          
*/*            . MORE THAN 1 SUBPARAMETER ON KEYWORD EPA        @L1A*/          
*/*            . INVALID VALUE SPECIFIED FOR THE KEYWORD UNAUTH @T0A*/          
*/*    EHARC=4 - IEFJESCT NOT INCLUDED                          @D1A*/          
*/*    EHARC=4 - UNAUTH=YES SPECIFIED WITHOUT AN EXTENDED EPA   @D1A*/          
*/*         . OUTPUT    =                                       @L1A*/          
*/*            ERROR MNOTE ISSUED                               @L1A*/          
*/*            RETURN CODE 4 MAY BE SET                         @D1A*/          
*/*                                                                 */          
*/*     ASM:. CONDITIONS =                                      @L2A*/          
*/*            . MACRO FORM REQUEST IS INVALID OR MISSING       @L2A*/          
*/*            . INCORRECT NUMBER OF SUBPARAMETERS FOR          @L2A*/          
*/*              MF=M OR E.                                     @L2A*/          
*/*            . INVALID SPECIFICATION FOR ADDRESS OF PARAMETER @L2A*/          
*/*              LIST FOR SWA MANAGER ON THE MF KEYWORD         @L2A*/          
*/*            . INCORRECT NUMBER OF SUBPARAMETERS FOR REGISTER @L2A*/          
*/*              FORM OF ADDRESS ON MF KEYWORD                  @L2A*/          
*/*            . INVALID FUNCTION CODE                          @L2A*/          
*/*            . MORE THAN 1 SUBPARAMETER ON KEYWORD FCODE      @L2A*/          
*/*            . INVALID PARAMETER FOR EPA ADDRESS              @L2A*/          
*/*            . MORE THAN 1 SUBPARAMETER ON KEYWORD EPA        @L2A*/          
*/*            . SPECIFYING REGISTER FORM OF EPA WHEN MF=L      @L2A*/          
*/*            . INVALID VALUE SPECIFIED FOR THE KEYWORD UNAUTH @T0A*/          
*/*            . KEYWORD UNAUTH IS ONLY VALID FOR MF=E          @T0A*/          
*/*                                                             @L2A*/          
*/*         . OUTPUT    =                                       @L2A*/          
*/*            . ERROR MNOTE ISSUED                             @L2A*/          
*/*            . IF SEVERITY IS 4, CODE WILL BE GENERATED       @L2A*/          
*/*              AS REQUESTED.                                  @L2A*/          
*/*                                                             @L2A*/          
*/*01* EXTERNAL REFERENCES = NONE                               @L1A*/          
*/*                                                                 */          
*/*01* MESSAGES =                                               @L1A*/          
*/*                                                                 */          
*/*     PLX:                                                    @L4C*/          
*/*      . 'FUNCTION REQUEST IS INVALID OR MISSING'             @L1A*/          
*/*      . 'KEYWORD ''EPA'' IS MISSING'                         @L1A*/          
*/*      . 'MORE THAN 1 POSITIONAL PARAMETER PRESENT'           @L1A*/          
*/*      . 'MORE THAN 1 SUBPARAMETER ON KEYWORD ''EPA'''        @L1A*/          
*/*      . 'KEYWORD ''UNAUTH'' MUST BE SPECIFIED AS YES OR NO'  @T0A*/          
*/*    'AHA0053 SWAREQ: MACRO IEFJESCT REQUIRED BUT WAS NOT     @D1A*/          
*/*     FOUND BEFORE THIS INVOCATION'                           @D1A*/          
*/*    'AHA0053 SWAREQ: INSERT OR MOVE THE INCLUDE OF IEFJESCT  @D1A*/          
*/*     BEFORE THIS INVOCATION'                                 @D1A*/          
*/*    'AHA0054 SWAREQ: KEYWORD 'UNAUTH' REQUIRES EXTENDED EPA  @D1A*/          
*/*    'AHA0055 SWAREQ: KEYWORD 'UNAUTH' ALLOWED ONLY FOR       @D1A*/          
*/*     FUNCTIONS 'LA', 'RL' AND 'R6'                           @P3C*/          
*/*                                                                 */          
*/*     ASM:                                                        */          
*/*      . 'MACRO FORM REQUEST IS INVALID OR MISSING'           @L2A*/          
*/*      . 'INCORRECT NUMBER OF SUBPARAMETERS FOR MF=M OR E'    @L2A*/          
*/*      . 'INCORRECT NUMBER OF SUBPARAMETERS FOR REGISTER FORM @L2A*/          
*/*         OF ADDRESS PARAMETER ON MF KEYWORD'                 @L2A*/          
*/*      . 'ADDRESS PARAMETER ON MF KEYWORD IS MISSING OR       @L2A*/          
*/*         INVALID'                                            @L2A*/          
*/*      . 'FUNCTION REQUEST IS INVALID'                        @L2A*/          
*/*      . 'MORE THAN 1 SUBPARAMETER ON KEYWORD ''FCODE'''      @L2A*/          
*/*      . 'ADDRESS PARAMETER ON EPA KEYWORD IS INVALID'        @L2A*/          
*/*      . 'MORE THAN 1 SUBPARAMETER ON KEYWORD ''EPA'''        @L2A*/          
*/*      . 'REGISTER FORM OF EPA KEYWORD IS INVALID FOR MF=L'   @L2A*/          
*/*      . 'KEYWORD ''UNAUTH'' MUST BE SPECIFIED AS YES OR NO'  @T0A*/          
*/*      . 'KEYWORD ''UNAUTH'' IS ONLY VALID FOR MF=E'          @T0A*/          
*/*                                                                 */          
*/*01*   ABEND CODES = N/A                                      @L1A*/          
*/*                                                                 */          
*/*01*   SERIALIZATION:  N/A                                    @L4C*/          
*/*                                                                 */          
*/*01*   DISTRIBUTION LIBRARY = AMACLIB                         @P2A*/          
*/*                                                                 */          
*/*01*   CHANGE ACTIVITY = ZA52669,L1,R1,L2,R2,T0,D1,L3         @L3C*/          
*/*                                                                 */          
*/*   $L1=ALLVSCR  JBB2110 820605 PDD7: SWA MANAGER VSCR        @L1A*/          
*/*   $R1=PAB0002  JBB2110 820608 PDD7: PTM PAB0002             @R1A*/          
*/*   $L2=SWABOVE  JBB2220 850220 PDR6: SWA ABOVE THE LINE      @L2A*/          
*/*   $R2=PA20697  JBB2220 851209 PDR6: PTM PA20697             @R2A*/          
*/*   $T0=OY10290  JBB2220 871120 PDR6: UNAUTH SWA MANAGER SUPT @T0A*/          
*/*   $D1=DEO0265  HBB4410 890918 PDCC: COMPILE ERROR CHECKING  @D1A*/          
*/*   $L3=APPC1    HBB4420 890310 PDB3: APPC                    @L3A*/          
*/*   $P1=ME18813  HBB7780 100318 PDXB: AVOID NULL BASEREG      @P1A*/          
*/*   $P2=ME19660  HBB7780 110111 PDTY: PROPCHECK ERRORS        @P2A*/          
*/*   $L4=SWBNATB  HBB77D0 210104 PDBO: SWBNext ATB             @L4A*/          
*/*   $P3=W399787  HBB77D0 210201 PDOO:IEFZB505 VR2 for R6      @P3A*/          
*/*                                                                 */          
*/** END OF SPECIFICATIONS *****************************************/           
*/* A  PROLOGUE                                                 @L1A*/          
*/* C  CODE TO CLEAN UP SAVE AREA ADDRESS BEFORE CALL TO SWA    @L1A*/          
*/*    MANAGER.                                                 @L1A*/          
*/* A  CODE TO SURROUND THE INSTRUCTIONS THAT ISSUE THE CALL    @R1A*/          
*/*    TO SWA MANAGER WITH A DO-END GROUP.                      @R1A*/          
*/* A  CODE TO PROVIDE ASSEMBLER VERSION OF SWAREQ MACRO AND    @L2A*/          
*/*    TO ADD NEW SWA MANAGER FUNCTION LOCATE/ALL (LA)          @L2A*/          
*/* A  ADDED SKIP TO THE ANSWER STATEMENTS WHICH GENERATE THE   @R2A*/          
*/*    MODIFIED SOURCE CODE.                                    @R2A*/          
*/* A  SUPPORT TO PROVIDE THE INVOCATION OF THE UNAUTHORIZED    @T0A*/          
*/*    VERSION OF SWA MANAGER FOR LOCATE/ALL REQUESTS           @T0A*/          
*/* A  ADDED PLAS MACRO STATEMENTS TO CHECK FOR IEFJESCT BEING  @D1A*/          
*/*    INCLUDED. SWAREQ WILL NOW ISSUE WARNING MESSAGES AND     @D1A*/          
*/*    RETURN TO THE CALLER WITH A CONDITION CODE OF 4 IF THE   @D1A*/          
*/*    JESCT WASN'T ALREADY INCLUDED.                           @D1A*/          
*/* A  ADDED PLAS MACRO STATEMENTS TO CHECK FOR EXTENDED EPA    @D1A*/          
*/*    BEING REQUESTED IF UNAUTH=YES IS CODED.                  @D1A*/          
*/* A  ADDED PLAS MACRO STATEMENTS TO CHECK FOR ALLOWABLE       @D1A*/          
*/*    FUNCTIONS IF UNAUTH=YES IS CODED.                        @D1A*/          
*/* A  ADD SUPPORT FOR NEW FUNCTIONS AS, GB AND FB              @L3A*/          
*/* C  USE BASE-REG NOTATION                                    @P1A*/          
*/* C  SHOWHDR COMPLIANCE                                       @P2A*/          
*/* A  Add funtion R6 for Read Locate 64-bit                    @P3A*/          
*                                                                               
* % SWAREQ: MACRO KEYS(EPA,UNAUTH);              /*              @T0C*/         
*                                                                               
*/* THESE DECLARES ARE EXTERNAL TO THIS MACRO DEFINITION        @D1A*/          
*                                                                               
*  DECLARE EHARC FIXED EXTERNAL;                 /*             @D1A*/          
*  DECLARE IEFJESCT CHARACTER EXTERNAL;          /*             @D1A*/          
*  DEACTIVATE IEFJESCT;                          /*             @D1A*/          
*  DECLARE EPAEXTND CHARACTER EXTERNAL;          /*             @D1A*/          
*                                                                               
*/* THESE DECLARES ARE INTERNAL TO THIS MACRO DEFINITION        @D1C*/          
*                                                                               
*  DCL INCLUDE_MESSAGE CHAR;                                /*  @D1A*/          
*  DCL (FCODE,MCALL,ERROR,ERRCK) CHAR;                                          
*  DCL (BADFCODE,KEYPARM1,XTRPOSPM,KEYPARM2,KEYPARM3) CHAR; /*  @T0C*/          
*  DCL (COMNT,COMNT2,COMNT3,COMNT4,COMNT5,COMNT6) CHAR;     /*  @T0C*/          
*                                                                               
*  EHARC = 0;                       /*                          @D1A*/          
*  FCODE = MACLIST(1);              /* SET TO VALUE OF FIRST                    
*                                      POSITIONAL PARAMETER          */         
*                                                                               
*/* RECONSTRUCT MACRO INVOCATION AS CODED BY USER. PUT IT IN COMMENT */         
*/* FORM FOR COMPILE STAGE.                                          */         
*                                                                               
*  IF UNAUTH = '' THEN              /* DETERMINE IF UNAUTH SPECIFIED            
*                                                                @T0A*/         
*    MCALL = '?SWAREQ (' !! FCODE !! ') EPA (' !! EPA(1) !! ')'; /*             
*                                       REMOVED SEMICOLON    @ZA52669*/         
*  ELSE                             /* UNAUTH WAS SPECIFIED      @T0A*/         
*    MCALL = '?SWAREQ (' !! FCODE !! ') EPA (' !! EPA(1) !!                     
*           ') UNAUTH ' !! UNAUTH ; /*                           @T0A*/         
*                                                                               
*  COMNT = COMMENT (MCALL);                                                     
*                                                                               
*/* TEST FOR A VALID POSITIONAL PARAMETER (FUNCTION CODE)            */         
*                                                                               
*  IF FCODE = 'AL' THEN             /* ASSIGN LOCATE                 */         
*  ERRCK = 'OK';                                                                
*  IF FCODE = 'AC' THEN             /* ASSIGN CONDITIONAL    @ZA52669*/         
*  ERRCK = 'OK';                                                                
*  IF FCODE = 'WL' THEN             /* WRITE LOCATE                  */         
*  ERRCK = 'OK';                                                                
*  IF FCODE = 'RL' THEN             /* READ LOCATE                   */         
*  ERRCK = 'OK';                                                                
*  IF FCODE = 'R6' THEN             /* READ LOCATE 64-bit        @P3A*/         
*  ERRCK = 'OK';                    /*                           @P3A*/         
*  IF FCODE = 'DB' THEN             /* DELETE BLOCK                  */         
*  ERRCK = 'OK';                                                                
*  IF FCODE = 'LA' THEN             /* LOCATE ALL                @L2A*/         
*  ERRCK = 'OK';                    /*                           @L2A*/         
*  IF FCODE = 'AS' THEN             /* ASSIGN SPECIFIC           @L3A*/         
*  ERRCK = 'OK';                    /*                           @L3A*/         
*  IF FCODE = 'GB' THEN             /* GET BLOCK                 @L3A*/         
*  ERRCK = 'OK';                    /*                           @L3A*/         
*  IF FCODE = 'FB' THEN             /* FREE BLOCK                @L3A*/         
*  ERRCK = 'OK';                    /*                           @L3A*/         
*  IF ERRCK ^= 'OK' THEN            /* INVALID FUNCTION REQUEST      */         
*    DO;                                                                        
*      ERROR = 'YES';               /* INDICATE ERROR FOR LATER USE  */         
*      BADFCODE = 'FUNCTION REQUEST IS INVALID OR MISSING';                     
*      COMNT2 = COMMENT (BADFCODE); /* PUT MESSAGE IN COMMENT FORM   */         
*      ANS(COMNT2) SKIP ;           /* MESSAGE FOR COMPILE STAGE     */         
*      ANS MSG (BADFCODE);          /* MESSAGE FOR MACRO PROCESSING             
*                                      STAGE                         */         
*    END;                                                                       
*                                                                               
*/* TEST FOR OTHER ERRORS AS FOLLOWS                                 */         
*/* MISSING EPA KEYWORD OR NULL SUBPARAMETER.                        */         
*/* MORE THAN 1 POSITIONAL PARAMETER.                                */         
*/* MORE THAN 1 SUBPARAMETER ON EPA KEYWORD.                         */         
*/* MACRO IEFJESCT NOT INCLUDED                                  @D1A*/         
*/* UNAUTH SPECIFIED WITHOUT EXTENDED EPA                        @D1A*/         
*/* UNAUTH SPECIFIED FOR INVALID FUNCTIONS                       @D1A*/         
*                                                                               
*/* IF THE MAPPING MACRO IEFJESCT HASN'T BEEN INCLUDED, ISSUE    @D1A*/         
*/* A MESSAGE AND SET THE 'ERROR' FLAG.                          @D1A*/         
*  IF IEFJESCT ^= 'IEFJESCT' THEN DO;                         /* @D1A*/         
*                                                                               
*    ERRTEXT = 'AHA0053 SWAREQ: MACRO IEFJESCT REQUIRED BUT WAS ' !!            
*              'NOT FOUND BEFORE THIS INVOCATION';   /* PRIME MESSAGE           
*                                                       AREA     @D1A*/         
*    ANSWER MSG(ERRTEXT) NORESCAN;  /* PUT OUT MESSAGE           @D1A*/         
*    COMNT6 = COMMENT(ERRTEXT);   /* PUT MESSAGE IN COMMENT FORM @D1A*/         
*    ANS(COMNT6) SKIP ;           /* MESSAGE FOR COMPILE STAGE   @D1A*/         
*                                                                               
*    ERRTEXT = 'AHA0053 SWAREQ: INSERT OR MOVE THE INCLUDE ' !!                 
*              'OF IEFJESCT BEFORE THIS INVOCATION';   /* PRIME MESSAGE         
*                                                         AREA   @D1A*/         
*    ANSWER MSG(ERRTEXT) NORESCAN;  /* PUT OUT MESSAGE           @D1A*/         
*    COMNT6 = COMMENT(ERRTEXT);   /* PUT MESSAGE IN COMMENT FORM @D1A*/         
*    ANS(COMNT6) SKIP ;           /* MESSAGE FOR COMPILE STAGE   @D1A*/         
*                                                                               
*    EHARC = 4;                   /* WARNING FROM MACRO PHASE    @D1A*/         
*  END;                                                       /* @D1A*/         
*                                                                               
*/* IF THE UNAUTHORIZED INTERFACE WAS SPECIFIED, BUT THE         @D1A*/         
*/* EXTENDED EPA WAS NOT, ISSUE A MESSAGE AND SET THE 'ERROR'    @D1A*/         
*/* FLAG.                                                        @D1A*/         
*/*                                                              @D1A*/         
*                                                                               
*  IF UNAUTH = '(YES)' &                                                        
*    (EPAEXTND ^= 'YES' &                                                       
*     EPAEXTND ^= 'VR2') THEN     /* If UNAUTH was specified and                
*                                    niether versions of the extended           
*                                    EPA was declared ...        @L4C*/         
*  DO;                            /* Error - UNAUTH requires an                 
*                                    extended EPA          BEGIN @L4A*/         
*    ERRTEXT = 'AHA0054 SWAREQ: KEYWORD ''UNAUTH'' REQUIRES ' !!                
*                 'EXTENDED EPA';  /* SET ERROR MESSAGE          @D1A*/         
*    ANSWER MSG(ERRTEXT) NORESCAN;  /* PUT OUT MESSAGE           @D1A*/         
*    COMNT6 = COMMENT(ERRTEXT);   /* PUT MESSAGE IN COMMENT FORM @D1A*/         
*    ANS(COMNT6) SKIP ;           /* MESSAGE FOR COMPILE STAGE   @D1A*/         
*                                                                               
*    EHARC = 4;                   /* WARNING FROM MACRO PHASE    @D1A*/         
*  END;                           /* Error - UNAUTH requires an                 
*                                    extended EPA           END  @L4A*/         
*                                                                               
*  IF UNAUTH = '(YES)' & (FCODE ^= 'LA' &                                       
*      FCODE ^= 'RL' & FCODE ^= 'R6') THEN DO;  /*                              
*                                     IF UNAUTH WAS SPECIFIED, WAS THE          
*                                     FUNCTION ALLOWED?          @P3C*/         
*                                                                               
*    ERRTEXT = 'AHA0055 SWAREQ: KEYWORD ''UNAUTH'' ALLOWED ONLY FOR' !!         
*          ' FUNCTIONS ''LA'', ''RL'' AND ''R6''';  /* SET ERROR                
*                                    MESSAGE                     @P3C*/         
*    ANSWER MSG(ERRTEXT) NORESCAN;  /* PUT OUT MESSAGE           @D1A*/         
*    COMNT6 = COMMENT(ERRTEXT);   /* PUT MESSAGE IN COMMENT FORM @D1A*/         
*    ANS(COMNT6) SKIP ;           /* MESSAGE FOR COMPILE STAGE   @D1A*/         
*                                                                               
*    EHARC = 4;                   /* WARNING FROM MACRO PHASE    @D1A*/         
*  END;                            /*                            @D1A*/         
*                                                                               
*  IF EPA(1) = '' THEN              /* WAS THERE AN EPA KEYWORD                 
*                                      PARAMETER                     */         
*    KEYPARM1 = 'KEYWORD ''EPA'' MISSING'; /* NO SET UP MESSAGE      */         
*  IF MACLIST(2) ^= '' THEN         /* MORE THAN 1 POSITIONAL                   
*                                      PARAMETER                     */         
*    XTRPOSPM = 'MORE THAN 1 POSITIONAL PARAMETER PRESENT'; /* YES   */         
*  IF EPA(2) ^= '' THEN             /* MORE THAN 1 SUBPARAMETER ON              
*                                      EPA KEYWORD                   */         
*    KEYPARM2 = 'MORE THAN 1 SUBPARAMETER ON KEYWORD ''EPA'''; /* YES*/         
*  IF KEYPARM1 ^= '' THEN           /* WAS THERE AN EPA KEYWORD      */         
*    DO;                                                                        
*      ERROR = 'YES';               /* INDICATE ERROR FOR LATER USE  */         
*      COMNT3 = COMMENT (KEYPARM1); /* PUT MESSAGE IN COMMENT FORM   */         
*      ANS(COMNT3) SKIP ;           /* MESSAGE FOR COMPILE STAGE     */         
*      ANS MSG (KEYPARM1);          /* MESSAGE FOR MACRO PROCESSING             
*                                      STAGE                         */         
*    END;                                                                       
*  IF KEYPARM2 ^= '' THEN           /* WAS THERE MORE THAN 1                    
*                                      SUBPARAMETER ON EPA KEYWORD   */         
*    DO;                                                                        
*      ERROR = 'YES';               /* INDICATE ERROR FOR LATER USE  */         
*      COMNT5 = COMMENT (KEYPARM2); /* PUT MESSAGE IN COMMENT FORM   */         
*      ANS(COMNT5) SKIP ;           /* MESSAGE FOR COMPILE STAGE     */         
*      ANS MSG (KEYPARM2);          /* MESSAGE FOR MACRO PROCESSING             
*                                      STAGE                         */         
*    END;                                                                       
*  IF XTRPOSPM ^= '' THEN           /* WAS THERE MORE THAN 1                    
*                                      POSITIONAL PARAMETER          */         
*    DO;                                                                        
*      ERROR = 'YES';               /* INDICATE ERROR FOR LATER USE  */         
*      COMNT4 = COMMENT(XTRPOSPM);  /* PUT MESSAGE IN COMMENT FORM   */         
*      ANS(COMNT4) SKIP ;           /* MESSAGE FOR COMPILE STAGE     */         
*      ANS MSG (XTRPOSPM);          /* MESSAGE FOR MACRO PROCESSING             
*                                      STAGE                         */         
*    END;                                                                       
*                                                                               
*/* TEST FOR A VALID SPECIFICATION FOR UNAUTH KEYWORD.           @T0A*/         
*                                                                               
*  IF UNAUTH ^= '' & UNAUTH ^= '(YES)' &                                        
*     UNAUTH ^= '(NO)' THEN         /* IF UNAUTH WAS SPECIFIED, DID             
*                                      IT CONTAIN A VALID VALUE 8@T0A*/         
*    DO;                                                                        
*      ERROR = 'YES';               /* INDICATE ERROR FOR LATER USE  */         
*      KEYPARM3 = 'KEYWORD ''UNAUTH'' MUST BE SPECIFIED AS YES OR NO';          
*      COMNT6 = COMMENT(KEYPARM3);  /* PUT MESSAGE IN COMMENT FORM   */         
*      ANS(COMNT6) SKIP ;           /* MESSAGE FOR COMPILE STAGE     */         
*      ANS MSG (KEYPARM3);          /* MESSAGE FOR MACRO PROCESSING             
*                                      STAGE                         */         
*    END;                                                                       
*                                                                               
*  IF ERROR = 'YES' THEN            /* IF THERE WAS AN ERROR A       */         
*  GOTO B;                          /* COMPILE STAGE MESSAGE HAS BEEN           
*                                      GENERATED. SKIP THE NEXT                 
*                                      MESSAGE AND DON'T PASS A CALL            
*                                      SWAMGR STATEMENT TO THE                  
*                                      COMPILE STAGE                 */         
*  ANS (COMNT) SKIP;                /* REPLICA OF THE MACRO                     
*                                      INVOCATION FOR A COMPILE                 
*                                      STAGE MESSAGE             @R2C*/         
*                                                                               
*/* PASS THE STATEMENT TO THE COMPILE STAGE THAT WILL CALL THE SWA   */         
*/* MANAGER AND PASS THE PARAMETERS REQUESTED. THIS WILL BE BYPASSED */         
*/* IF ANY ERROR WAS DETECTED.                                       */         
*                                                                               
*  ANS('DO;') SKIP;                                            /*@R2C*/         
*  ANS('GEN(LA    13,0(,13));') SKIP;                          /*@R2C*/         
*  IF UNAUTH = '(YES)' THEN         /* IF UNAUTHORIZED SERVICE                  
*                                      REQUESTED                3@T0A*/         
*     ANS('CALL USWAMGR (' !! EPA(1) !! ',''' !! FCODE !! ''');') SKIP;         
*  ELSE                                                                         
*     ANS('CALL SWAMGR (' !! EPA(1) !! ',''' !! FCODE !! ''');') SKIP;          
*  ANS('END;') SKIP;                                           /*@R2C*/         
*  B:;                                                                          
*  RETURN CODE(EHARC);              /* RETURN MACRO CODE         @D1A*/         
*                                                                               
*% END  SWAREQ;                                                /*@L2C*/         
*% GOTO ENDMAC;                                                /*@L2A           
         MACRO                                                     @L2A         
&NAME    SWAREQ &FCODE=,&EPA=,&MF=,&UNAUTH=                        @T0C         
         LCLC  &ERROR                      DEFINE SET SYMBOL ERROR @L2A         
&ERROR   SETC  'NO'                        INIT ERROR TO 'NO'      @L2A         
.*                                                                 @L2A         
.**********************************************************************         
.*                                                                @L2A*         
.*   TEST THE MF KEYWORD TO DETERMINE THE FORM OF EXPANSION       @L2A*         
.*   REQUESTED. THE THREE TYPES ALLOWED ARE:                      @L2A*         
.*       L - LIST FORM                                            @L2A*         
.*       M - MODIFY FORM                                          @L2A*         
.*       E - EXECUTE FORM                                         @L2A*         
.*   IF THE MF PARAMETER IS INVALID ISSUE AN MNOTE.               @L2A*         
.*                                                                @L2A*         
.**********************************************************************         
.*                                                                @L2A          
         AIF   ('&MF' EQ 'L').SWALIST      IS MACRO FORM=LIST     @L2A          
         AIF   ('&MF(1)' EQ 'E' OR '&MF(1)' EQ 'M').SWAMDEX       @L2A          
.*                                   IS MACRO FORM=MODIFY OR EXEC @L2A          
         MNOTE 12,'SWAREQ: MACRO FORM REQUEST IS INVALID OR MISSING'            
.*                                                                @L2A          
         AGO   .MACEND                                                          
.*                                                                @L2A          
.**********************************************************************         
.*                                                                @L2A*         
.*   THIS IS THE PORTION OF THE MACRO COMMON TO THE MODIFY AND    @L2A*         
.*   EXECUTE FORM OF SWAREQ. ON THE MODIFY AND EXECUTE FORM BOTH  @L2A*         
.*   THE FORM (E OR M) AND THE ADDRESS OF THE PARAMETER LIST      @L2A*         
.*   MUST BE SPECIFIED.                                           @L2A*         
.*                                                                @L2A*         
.**********************************************************************         
.*                                                                @L2A          
.SWAMDEX ANOP                                                     @L2A          
.*                                                                @L2A          
.**********************************************************************         
.*                                                                @L2A*         
.*   TEST THE ADDRESS PARAMETER SPECIFIED ON THE MF KEYWORD TO    @L2A*         
.*   SEE IF IT IS PRESENT AND TO SEE IF IT IS SPECIFIED IN   .    @L2A*         
.*   SYMBOL OR REGISTER FORM. IF VALID, PUT ADDRESS OF PARAMETER  @L2A*         
.*   LIST INTO REGISTER 1. IF INVALID, ISSUE AN MNOTE.            @L2A*         
.*                                                                @L2A*         
.**********************************************************************         
.*                                                                @L2A          
         ANOP                                                     @L2A          
         AIF   (T'&NAME EQ 'O').MFADDR WAS A LABEL SPECIFIED ON   @L2A          
.*                                     THE MACRO CALL             @L2A          
&NAME    DS    0H                      LABEL SPECIFIED ON MACRO CALL            
*                                      FOR BRANCHING              @L2A          
.MFADDR  ANOP                                                     @L2A          
         AIF   (T'&MF(2) EQ 'O').ADDRINV  IS ADDRESS PARAMETER ON @L2A          
.*                                        MF KEYWORD MISSING      @L2A          
         AIF   ('&MF(2)'(1,1) EQ '(').MFREG  WAS THE ADDRESS SPECIFIED          
.*                                           IN A REGISTER        @L2A          
.MFSYMB  ANOP                       NO, A SYMBOL CONTAINS ADDRESS @L2A          
         AIF   (T'&MF(2) EQ 'N').ADDRINV  IS ADDRESS PARAMETER ON @L2A          
.*                                        MF KEYWORD INVALID      @L2A          
         LA    1,&MF(2)                PUT THE ADDRESS OF THE PARAMETER         
*                                      LIST IN REGISTER 1         @L2A          
         AGO   .SUBMF                                             @L2A          
.MFREG   ANOP                       YES, A REGISTER CONTAINS ADDR @L2A          
         LR    1,&MF(2,1)              PUT THE ADDRESS OF THE PARAMETER         
*                                      LIST IN REGISTER 1         @L2A          
         AIF   (N'&MF(2) EQ 1).FCDECHK CORRECT NUMBER OF SUBPARMS @L2A          
         MNOTE 04,'SWAREQ: INCORRECT NUMBER OF SUBPARAMETERS FOR REGIST*        
               ER FORM OF ADDRESS PARAMETER ON MF KEYWORD'        @L2A          
         AGO   .SUBMF                                             @L2A          
.ADDRINV ANOP                                                     @L2A          
         MNOTE 12,'SWAREQ: ADDRESS PARAMETER ON MF KEYWORD IS MISSING  *        
               OR INVALID'                                        @L2A          
         AGO   .MACEND                                            @L2A          
.*                                                                @L2A          
.**********************************************************************         
.*                                                                @L2A*         
.*   TEST TO SEE IF THE CORRECT NUMBER OF SUBPARAMETERS IS        @L2A*         
.*   PRESENT ON THE MF KEYWORD. IF INVALID, ISSUE AN MNOTE.       @L2A*         
.*                                                                @L2A*         
.**********************************************************************         
.*                                                                @L2A          
.SUBMF   ANOP                                                     @L2A          
         AIF   (N'&MF EQ 2).FCDECHK    CORRECT NUMBER OF SUBPARMS @L2A          
         MNOTE 04,'SWAREQ: INCORRECT NUMBER OF SUBPARAMETERS FOR MF=M  *        
               OR E'                                              @L2A          
.*                                                                @L2A          
.**********************************************************************         
.*                                                                @L2A*         
.*   TEST FCODE TO SEE IF A FUNCTION CODE WAS SPECIFIED. IF       @L2A*         
.*   PRESENT, VERIFY THAT IT IS A VALID TYPE. IF INVALID,         @L2A*         
.*   ISSUE AN MNOTE AND SET ERROR TO 'YES'                        @L2A*         
.*                                                                @L2A*         
.**********************************************************************         
.*                                                                @L2A          
.FCDECHK ANOP                                                     @L2A          
         AIF   (T'&FCODE EQ 'O').EPACHK        IS FCODE NULL      @L2A          
         AIF   ('&FCODE(1)' EQ 'AL').FCDEOK1   ASSIGN LOCATE      @L2A          
         AIF   ('&FCODE(1)' EQ 'AC').FCDEOK1   ASSIGN CONDITIONAL @L2A          
         AIF   ('&FCODE(1)' EQ 'WL').FCDEOK1   WRITE LOCATE       @L2A          
         AIF   ('&FCODE(1)' EQ 'RL').FCDEOK1   READ LOCATE        @L2A          
         AIF   ('&FCODE(1)' EQ 'R6').FCDEOK1   READ LOCATE 64-bit @P3A          
         AIF   ('&FCODE(1)' EQ 'DB').FCDEOK1   DELETE BLOCK       @L2A          
         AIF   ('&FCODE(1)' EQ 'LA').FCDEOK1   LOCATE ALL         @L2A          
         AIF   ('&FCODE(1)' EQ 'AS').FCDEOK1   ASSIGN SPECIFIC    @L3A          
         AIF   ('&FCODE(1)' EQ 'GB').FCDEOK1   GET BLOCK          @L3A          
         AIF   ('&FCODE(1)' EQ 'FB').FCDEOK1   FREE BLOCK         @L3A          
         MNOTE 12,'SWAREQ: FUNCTION REQUEST IS INVALID'           @L2A          
&ERROR   SETC  'YES'                           SET INVALID        @L2A          
         AGO   .SUBFCDE                                           @L2A          
.FCDEOK1 ANOP                                                     @L2A          
         LA    0,=CL2'&FCODE(1)'       GET ADDRESS OF FCODE       @L2A          
         ST    0,4(,1)                 PUT ADDRESS OF FCODE IN THE              
*                                      2ND WORD OF PARAMETER LIST @L2A          
.*                                                                @L2A          
.**********************************************************************         
.*                                                                @L2A*         
.*      TEST FOR AN EXTRA SUBPARAMETER IN THE FUNCTION REQUEST.   @L2A*         
.*      IF PRESENT, ISSUE AN MNOTE.                               @L2A*         
.*                                                                @L2A*         
.**********************************************************************         
.*                                                                @L2A          
.SUBFCDE ANOP                                                     @L2A          
         AIF   (N'&FCODE LE 1).EPACHK        NO EXTRA SUBPARM     @L2A          
         MNOTE 04,'SWAREQ: MORE THAN 1 SUBPARAMETER ON KEYWORD ''FCODE'*        
               ''                                                 @L2A          
.*                                                                @L2A          
.**********************************************************************         
.*                                                                @L2A*         
.*      TEST EPA TO SEE IF IT WAS SPECIFIED. IF PRESENT, VERIFY   @L2A*         
.*      THAT IT IS IN VALID SYMBOL OR REGISTER FORM. IF INVALID,  @L2A*         
.*      ISSUE AN MNOTE AND SET ERROR TO 'YES'.                    @L2A*         
.*                                                                @L2A*         
.**********************************************************************         
.*                                                                @L2A          
.EPACHK  ANOP                                                     @L2A          
         AIF   (T'&EPA EQ 'O').UNAUCHK       IS EPA PARM NULL     @T0C          
         AIF   ('&EPA'(1,1) EQ '(').EPAREG   WAS ADDRESS SPECIFIED              
.*                                           IN A REGISTER        @L2A          
.EPASYM  ANOP                          NO, A SYMBOL CONTAINS ADDR @L2A          
         AIF   (T'&EPA EQ 'N').EPAINV1 IS THE ADDRESS INVALID     @L2A          
         LA    0,&EPA                  GET ADDRESS OF EPAPTR      @L2A          
         ST    0,0(,1)                 PUT ADDRESS OF EPAPTR IN THE             
*                                      1ST WORD OF PARAMETER LIST @L2A          
         AGO   .UNAUCHK                                           @T0C          
.EPAREG  ANOP                          YES,A REGISTER CONTAINS ADDR@L2A         
         ST    &EPA(1),0(,1)           PUT ADDRESS OF EPAPTR IN THE             
*                                      1ST WORD OF PARAMETER LIST @L2A          
         AGO   .SUBEPA                                            @L2A          
.EPAINV1 ANOP                                                     @L2A          
         MNOTE 12,'SWAREQ: ADDRESS PARAMETER ON EPA KEYWORD IS INVALID'         
.*                                                                @L2A          
&ERROR   SETC  'YES'                   SET INVALID                @L2A          
.*                                                                @L2A          
.**********************************************************************         
.*                                                                @L2A*         
.*      TEST FOR AN EXTRA SUBPARAMETER IN THE EPA PARAMETER. IF   @L2A*         
.*      PRESENT, ISSUE AN MNOTE.                                  @L2A*         
.*                                                                @L2A*         
.**********************************************************************         
.*                                                                @L2A          
.SUBEPA  ANOP                                                     @L2A          
         AIF   (N'&EPA LE 1).UNAUCHK   NO EXTRA SUBPARM ON EPA    @T0C          
         MNOTE 04,'SWAREQ: MORE THAN 1 SUBPARAMETER ON KEYWORD ''EPA'''         
.*                                                                @L2A          
.*                                                                              
.**********************************************************************         
.*                                                                    *         
.*      TEST TO SEE IF THE UNAUTH KEYWORD WAS VALIDLY SPECIFIED       *         
.*                                                                    *         
.**********************************************************************         
.*                                                                              
.UNAUCHK ANOP                                                     @T0A          
         AIF   (T'&UNAUTH EQ 'O').SWAEXEC    IS UNAUTH PARM NULL  @T0A          
         AIF   ('&UNAUTH' EQ 'YES').UNAUEXEC IS UNAUTH PARM YES   @T0A          
         AIF   ('&UNAUTH' EQ 'NO').UNAUEXEC  IS UNAUTH PARM NO    @T0A          
         MNOTE 12,'SWAREQ: KEYWORD ''UNAUTH'' MUST BE SPECIFIED AS YES *        
               OR NO'                                             @T0A          
&ERROR   SETC  'YES'                   SET INVALID                @T0A          
.UNAUEXEC ANOP                                                    @T0A          
         AIF   ('&MF(1)' EQ 'E').SWAEXEC   IS MACRO FORM EXEC     @T0A          
         MNOTE 12,'SWAREQ: KEYWORD ''UNAUTH'' IS ONLY VALID FOR MF=E'  *        
                                                                  @T0A          
&ERROR   SETC  'YES'                   SET INVALID                @T0A          
.*                                                                @L2A          
.**********************************************************************         
.*                                                                @L2A*         
.*      TEST TO SEE IF MACRO FORM IS EXEC. IF YES, TEST ERROR     @L2A*         
.*      TO SEE IF THE MACRO CALL IS VALID. IF VALID SET UP THE    @L2A*         
.*      CALL TO THE SWA MANAGER.                                  @L2A*         
.*                                                                @L2A*         
.**********************************************************************         
.*                                                                @L2A          
.SWAEXEC ANOP                                                     @L2A          
         AIF   ('&MF(1)' NE 'E').MACEND    IS MACRO FORM NOT EXEC @L2A          
         AIF   ('&ERROR' EQ 'YES').MACEND  IS MACRO CALL VALID    @L2A          
         LA    13,0(,13)               PREPARE R13 FOR CALL       @L2A          
         L     15,CVTPTR(0,0)          GET POINTER TO CVT         @P1C          
         USING CVTMAP,15                                          @L2A          
         L     15,CVTJESCT             GET POINTER TO JESCT       @L2A          
         USING JESCT,15                                           @L2A          
         L     15,JESCTEXT             GET POINTER TO JESCTEXT    @L2A          
         USING JESPEXT,15                                         @L2A          
         AIF   ('&UNAUTH' EQ 'YES').USWAMGR   WAS UNAUTHORIZED         *        
                                       SERVICE REQUESTED?         @T0A          
         L     15,JESQB556             GET ADDRESS OF SWA MANAGER @L2A          
         DROP  15                                                 @L2A          
         BASSM 14,15                   BRANCH TO SWA MANAGER      @L2A          
         AGO   .MACEND                                                          
.USWAMGR ANOP                          UNAUTHORIZED SERVICE REQUESTED  *        
                                                                  @T0A          
         L     15,JESQBSVA             GET ADDRESS OF UNAUTHORIZED     *        
                                       SWA MANAGER                @T0A          
         DROP  15                                                 @T0A          
         BALR  14,15                   BRANCH TO SWA MANAGER      @T0A          
         AGO   .MACEND                                            @L2A          
.*                                                                @L2A          
.**********************************************************************         
.*                                                                @L2A*         
.*      THIS IS THE LIST FORM OF THE MACRO. IT WILL GENERATE THE  @L2A*         
.*      GENERALIZED PARAMETER LIST. IF THE EPA AND FCODE ARE      @L2A*         
.*      PRESENT THEY WILL ALSO BE PROCESSED.                      @L2A*         
.*                                                                @L2A*         
.**********************************************************************         
.*                                                                @L2A          
.SWALIST ANOP                                                     @L2A          
&NAME    DS    0F                      SWA MANAGER PARAMETER LIST @L2A          
.*                                                                @L2A          
.**********************************************************************         
.*                                                                @L2A*         
.*      TEST EPA TO SEE IF IT WAS SPECIFIED. IF PRESENT, VERIFY   @L2A*         
.*      THAT IT IS NOT A REGISTER SINCE FOR MF=L REGISTERS ARE    @L2A*         
.*      NOT VALID. IF INVALID, ISSUE AND MNOTE. IF VALID,         @L2A*         
.*      GENERATE THE EPA PORTION OF THE PARAMETER LIST USING THE  @L2A*         
.*      VALUE OF THE EPA GIVEN. IF NOT PRESENT, GENERATE A DS     @L2A*         
.*      FOR THE EPA.                                              @L2A*         
.*                                                                @L2A*         
.**********************************************************************         
.*                                                                @L2A          
         AIF   (T'&EPA EQ 'O').NULLEPA IS EPA NULL                @L2A          
         AIF   ('&EPA'(1,1) EQ '(').EPAINV2 IS EPA IN REGISTER FORM@L2A         
EPA@&SYSNDX DC A(&EPA)                 ADDR OF EPA FOR SWA MANAGER@L2A          
         AGO   .FCDCHK                                            @L2A          
.EPAINV2 ANOP                                                     @L2A          
         MNOTE 12,'SWAREQ: REGISTER FORM OF EPA KEYWORD IS INVALID FOR *        
               MF=L'                                              @L2A          
         AGO   .FCDCHK                                            @L2A          
.NULLEPA ANOP                                                     @L2A          
EPA@&SYSNDX DS A                       ADDR OF EPA FOR SWA MANAGER@L2A          
.*                                                                @L2A          
.**********************************************************************         
.*                                                                @L2A*         
.*   TEST FCODE TO SEE IF A FUNCTION CODE WAS SPECIFIED. IF       @L2A*         
.*   PRESENT, VERIFY THAT IT IS A VALID TYPE. IF INVALID,         @L2A*         
.*   ISSUE AN MNOTE. IF VALID, GENERATE THE FCODE PORTION OF THE  @L2A*         
.*   PARAMETER LIST USING THE VALUE OF THE FCODE GIVEN. IF NOT    @L2A*         
.*   PRESENT, GENERATE A DS FOR THE FCODE.                        @L2A*         
.*                                                                @L2A*         
.**********************************************************************         
.*                                                                @L2A          
.FCDCHK  ANOP                                                     @L2A          
         AIF   (T'&FCODE EQ 'O').NULLFCD       IS FCODE NULL      @L2A          
         AIF   ('&FCODE(1)' EQ 'AL').FCDEOK2   ASSIGN LOCATE      @L2A          
         AIF   ('&FCODE(1)' EQ 'AC').FCDEOK2   ASSIGN CONDITIONAL @L2A          
         AIF   ('&FCODE(1)' EQ 'WL').FCDEOK2   WRITE LOCATE       @L2A          
         AIF   ('&FCODE(1)' EQ 'RL').FCDEOK2   READ LOCATE        @L2A          
         AIF   ('&FCODE(1)' EQ 'R6').FCDEOK2   READ LOCATE 64-bit @P3A          
         AIF   ('&FCODE(1)' EQ 'DB').FCDEOK2   DELETE BLOCK       @L2A          
         AIF   ('&FCODE(1)' EQ 'LA').FCDEOK2   LOCATE ALL         @L2A          
         AIF   ('&FCODE(1)' EQ 'AS').FCDEOK2   ASSIGN SPECIFIC    @L3A          
         AIF   ('&FCODE(1)' EQ 'GB').FCDEOK2   GET BLOCK          @L3A          
         AIF   ('&FCODE(1)' EQ 'FB').FCDEOK2   FREE BLOCK         @L3A          
         MNOTE 12,'SWAREQ: FUNCTION REQUEST IS INVALID'           @L2A          
         AGO   .SUBFCD                                            @L2A          
.FCDEOK2 ANOP                                                     @L2A          
FCD@&SYSNDX DC A(FCDE&SYSNDX)          ADDR OF FUNCTION CODE FOR  @L2A          
*                                      SWA MANAGER                @L2A          
FCDE&SYSNDX DC CL2'&FCODE(1)'          FUNCTION CODE              @L2A          
.*                                                                @L2A          
.**********************************************************************         
.*                                                                @L2A*         
.*      TEST FOR AN EXTRA SUBPARAMETER IN THE FUNCTION REQUEST.   @L2A*         
.*      IF PRESENT, ISSUE AN MNOTE.                               @L2A*         
.*                                                                @L2A*         
.**********************************************************************         
.*                                                                @L2A          
.SUBFCD  ANOP                                                     @L2A          
         AIF   (N'&FCODE LE 1).MACEND        NO EXTRA SUBPARM     @L2A          
         MNOTE 04,'SWAREQ: MORE THAN 1 SUBPARAMETER ON KEYWORD ''FCODE'*        
               ''                                                 @L2A          
         AGO   .MACEND                                            @L2A          
.NULLFCD ANOP                                                     @L2A          
FCD@&SYSNDX DS A                       ADDR OF FUNCTION CODE FOR  @L2A          
*                                      SWA MANAGER                @L2A          
.MACEND  ANOP                                                     @L2A          
         MEND                                                     @L2A          
*                                                               @L2A*/          
* %ENDMAC: ;                                                  /*@L2A*/          
