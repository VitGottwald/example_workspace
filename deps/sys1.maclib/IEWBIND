*/**** START OF SPECIFICATIONS ****************************************         
*                                                                     *         
* $MAC(IEWBIND) COMP(PMB01): Invoke the Binder call interface.        *         
*                                                                     *         
*PROPRIETARY V3 STATEMENT                                             *         
*LICENSED MATERIALS - PROPERTY OF IBM                                 *         
*5650-ZOS                                                             *         
*COPYRIGHT IBM CORP. 1993, 2017                                       *         
*END PROPRIETARY V3 STATEMENT                                         *         
*                                                                     *         
* STATUS= HPM77B0                                                     *         
*                                                                     *         
* MACRO NAME: IEWBIND                                                 *         
*                                                                     *         
* DESCRIPTIVE NAME: Invoke the Binder call interface.                 *         
*                                                                     *         
* FUNCTION:                                                           *         
*                                                                     *         
*    IEWBIND is the bilingual macro which abbreviates and             *         
*    translates keyword values and invokes macro IEWBIND2.            *         
*    IEWBIND2 validates the syntax and calls the Binder.  When        *         
*    IEWBIND detects an invalid keyword value, IEWBIND passes it      *         
*    unchanged to IEWBIND2 for analysis.                              *         
*                                                                     *         
*    IEWBIND translates keyword XTLST to EXTLST for IEWBIND2.         *         
*                                                                     *         
*  INVOCATION FORMAT:                                                 *         
*                                                                     *         
*  <xlabel>  IEWBIND2  +- FUNC=ADDALIAS!ADDA                          *         
*                      !     ,WORKMOD=xworkmod                        *         
*                      !     ,ANAME=xaname                            *         
*                      !    <,ENAME=xename!0>                         *         
*                      !    <,AMODE=xamode!0>                         *         
*                      !    <,ATYPE=A!T!S!P>                      @P4C*         
*                      !    <,DNAME=xdname!0>                     @P5A*         
*                      +-,FUNC=ALIGNTEXT!ALIGNT                       *         
*                      !     ,WORKMOD=xworkmod                        *         
*                      !     ,SECTION=xsection                        *         
*                      !    <,BDY=xbdy>                           @LFA*         
*                      !    <,CLASSL=xclassl!0>                   @LFA*         
*                      +-,FUNC=ALTERWMOD!ALTERW                       *         
*                      !     ,WORKMOD=xworkmod                        *         
*                      !     ,OLDNAME=xoldname                        *         
*                      !   +-,ATYPE=CHANGE!C                          *         
*                      !   !     ,NEWNAME=xnewname                    *         
*                      !   !                                     2@L8D*         
*                      !   +-,ATYPE=REPLACE!R                         *         
*                      !   !     ,NEWNAME=xnewname                    *         
*                      !   +-,ATYPE=DELETE!D                          *         
*                      !   +-,ATYPE=EXPAND!E                          *         
*                      !         ,COUNT=xcount                        *         
*                      !    <,CLASS=xclass!0>                     @L2A*         
*                      !    <,MODE=NEXT!N!IMMED!I>                    *         
*                      +-,FUNC=AUTOCALL!AUTOC                     @L5A*         
*                      !     ,WORKMOD=xworkmod                    @L5A*         
*                      !   +-<,CALLIB=xcallib>                    @L8C*         
*                      !   +-<,PATHNAME=xpathname>                @L8C*         
*                      +-,FUNC=BINDWMOD!BINDW                         *         
*                      !     ,WORKMOD=xworkmod                        *         
*                      !    <,CALLIB=xcallib!0>                       *         
*                      +-,FUNC=CREATEWMOD!CREATEW                     *         
*                      !     ,DIALOG=xdialog                          *         
*                      !     ,WORKMOD=xworkmod                        *         
*                      !     ,INTENT=BIND!B!ACCESS!A                  *         
*                      +-,FUNC=DELETEWMOD!DELETEW                     *         
*                      !     ,WORKMOD=xworkmod                        *         
*                      !    <,PROTECT=YES!Y!NO!N>                     *         
*                      +-,FUNC=DLLRENAME!DLLR                     @L5A*         
*                      !     ,WORKMOD=xworkmod                    @L5A*         
*                      !     ,RENAMEL=xrenamel                    @L5A*         
*                      +-,FUNC=ENDDIALOG!ENDD                         *         
*                      !     ,DIALOG=xdialog                          *         
*                      !    <,PROTECT=YES!Y!NO!N>                     *         
*                      +-,FUNC=GETDATA!GETD                           *         
*                      !     ,WORKMOD=xworkmod                        *         
*                      !     ,CLASS=xclass                            *         
*                      !    <,SECTION=xsection!0>                     *         
*                      !     ,AREA=xarea                              *         
*                      !     ,CURSOR=xcursor                          *         
*                      !     ,COUNT=xcount                            *         
*                      !    <,RELOC=xreloc!0>                     @LAA*         
*                      +-,FUNC=GETESD!GETE                            *         
*                      !     ,WORKMOD=xworkmod                        *         
*                      !    <,SECTION=xsection!0>                     *         
*                      !    <,RECTYPE=xrectype!0>                     *         
*                      !   +-<,OFFSET=xoffset!-1>                     *         
*                      !   +-<,SYMBOL=xsymbol!0>                      *         
*                      !     ,AREA=xarea                              *         
*                      !     ,CURSOR=xcursor                          *         
*                      !     ,COUNT=xcount                            *         
*                      !    <,CLASS=xclass!0>                     @L8A*         
*                      +-,FUNC=GETNAMES!GETN                          *         
*                      !     ,WORKMOD=xworkmod                        *         
*                      !    <,AREA=xarea>                             *         
*                      !     ,CURSOR=xcursor                          *         
*                      !     ,COUNT=xcount                            *         
*                      !     ,TCOUNT=xtcount                          *         
*                      !    <,NTYPE=S!C>                          @L8A*         
*                      +-,FUNC=GETCOMPILEUNITINFO!GETC            @LAA*         
*                      !     ,WORKMOD=xworkmod                        *         
*                      !    <,CULIST=xculist!0>                       *         
*                      !    <,AREA=xarea>                             *         
*                      !     ,CURSOR=xcursor                          *         
*                      !     ,COUNT=xcount                            *         
*                      +-,FUNC=IMPORT                                 *         
*                      !     ,WORKMOD=xworkmod                        *         
*                      !     ,ITYPE=CODE!C!DATA!D!CODE64!E!       @LBC*         
*                      !            DATA64!F                      @LBA*         
*                      !     ,DLLNAME=xdllname                        *         
*                      !     ,INAME=xiname                            *         
*                      !    <,OFFSET=xoffset!0>                   @L8A*         
*                      +-,FUNC=INCLUDE                                *         
*                      !     ,WORKMOD=xworkmod                        *         
*                      !   +-,INTYPE=DEPTR!D                          *         
*                      !   !     ,DDNAME=xddname                      *         
*                      !   !     ,DEPTR=xdeptr                        *         
*                      !   +-,INTYPE=NAME!N                           *         
*                      !   !     ,DDNAME=xddname                      *         
*                      !   !        <,MEMBER=xmember!0>               *         
*                      !   !     ,PATHNAME=xpathname             @P2A *         
*                      !   +-,INTYPE=POINTER!P                        *         
*                      !   !     ,DCBPTR=xdcbptr                      *         
*                      !   !     ,DEPTR=xdeptr                        *         
*                      !   +-,INTYPE=SMDE!S                           *         
*                      !   !     ,DDNAME=xddname                      *         
*                      !   !     ,DEPTR=xdeptr                        *         
*                      !   +-,INTYPE=TOKEN!T                          *         
*                      !         ,EPTOKEN=xeptoken                    *         
*                      !                                          @L8D*         
*                      !    <,ATTRIB=NO!N!YES!Y>                      *         
*                      !    <,ALIASES=NO!N!YES!Y!KEEP!K>          @P5C*         
*                      !    <,IMPORTS=NO!N!YES!Y>                 @L9A*         
*                      +-,FUNC=INSERTSECT!INSERTS                     *         
*                      !     ,WORKMOD=xworkmod                        *         
*                      !     ,SECTION=xsection                        *         
*                      +-,FUNC=LOADWMOD!LOADW                         *         
*                      !     ,WORKMOD=xworkmod                        *         
*                      !     ,EPLOC=xeploc                            *         
*                      !   +-,IDENTIFY=NO!N                           *         
*                      !   !     ,XTLST=xxtlst                        *         
*                      !   +-,IDENTIFY=YES!Y                          *         
*                      !        <,XTLST=xxtlst>                       *         
*                      !        <,LNAME=xlname!0>                     *         
*                      +-,FUNC=ORDERSECT!ORDERS                       *         
*                      !     ,WORKMOD=xworkmod                        *         
*                      !     ,SECTION=xsection                        *         
*                      +-,FUNC=PUTDATA!PUTD                           *         
*                      !     ,WORKMOD=xworkmod                        *         
*                      !     ,CLASS=xclass                            *         
*                      !    <,SECTION=xsection!0>                 @L8C*         
*                      !    <,AREA=xarea!0                            *         
*                      !         ,COUNT=xcount>                       *         
*                      !    <,CURSOR=xcursor!-1>                      *         
*                      !    <,NEWSECT=NO!N!YES!Y>                     *         
*                      !    <,ENDDATA=NO!N!YES!Y>                     *         
*                      +-,FUNC=RENAME                          4@L5A  *         
*                      !     ,WORKMOD=xworkmod                        *         
*                      !     ,NEWNAME=xnewname                        *         
*                      !     ,OLDNAME=xoldname                        *         
*                      +-,FUNC=RESETWMOD!RESETW                       *         
*                      !     ,WORKMOD=xworkmod                        *         
*                      !     ,INTENT=BIND!B!ACCESS!A                  *         
*                      !    <,PROTECT=YES!Y!NO!N>                     *         
*                      +-,FUNC=SAVEWMOD!SAVEW                         *         
*                      !     ,WORKMOD=xworkmod                        *         
*                      !    <,MODLIB=xmodlib!0>                       *         
*                      !    <,SNAME=xsname!0>                         *         
*                      !    <,REPLACE=NO!N!YES!Y>                     *         
*                      +-,FUNC=SETLIB!SETL                            *         
*                      !     ,WORKMOD=xworkmod                        *         
*                      !     ,SYMBOL=xsymbol                          *         
*                      !    <,LIBOPT=CALL!C!NOCALL!N!EXCLUDE!E>       *         
*                      !   +-<,CALLIB=xcallib!0>                  @L8C*         
*                      !   +-<,PATHNAME=xpathname!0>              @L8C*         
*                      +-,FUNC=SETOPTIONS!SETO                        *         
*                      !   +-,DIALOG=xdialog                          *         
*                      !   +-,WORKMOD=xworkmod                        *         
*                      !     ,OPTION=xoption!0                    @L8C*         
*                      !     ,OPTVAL=xoptval!0                    @L8C*         
*                      !    <,PARMSTR=xparmstr!0>                @L2A *         
*                      +-,FUNC=STARTDIALOG!STARTD                     *         
*                      !     ,DIALOG=xdialog                          *         
*                      !    <,FILES=xfiles!0>                         *         
*                      !    <,EXITS=xexits!0>                         *         
*                      !    <,OPTIONS=xoptions!0>                     *         
*                      !    <,PARMS=xparms!0>                     @L8C*         
*                      !    <,ENVARS=xenvars!0>                   @LCA*         
*                      +-,FUNC=STARTSEG!STARTS                        *         
*                            ,WORKMOD=xworkmod                        *         
*                            ,ORIGIN=xorigin                          *         
*                           <,REGION=NO!N!YES!Y>                      *         
*                       <,RETCODE=xretcode>                           *         
*                       <,RSNCODE=xrsncode>                           *         
*                       <,VERSION=1!2!3!4!5!6!7!8!9>              @03C*         
*                      +<,MF=S>                                       *         
*                      +<,MF=(L,xmfctrl<,xmfattr!0D>)>            @L8C*         
*                      +<,MF=(E,xmfctrl<,COMPLETE>)>              @L8C*         
*                                                                     *         
*                                                                     *         
*        Where: The keywords are described in macro IEWBIND2.         *         
*                                                                     *         
* RETURN CODES: Refer to macro IEWBIND2.                              *         
*                                                                     *         
* REASON CODES: Refer to macro IEWBIND2.                              *         
*                                                                     *         
* MODULE TYPE:  PL/X-370 MACRO                                        *         
*                                                                     *         
*   PROCESSOR:  PL/X-370                                              *         
*                                                                     *         
* COMPONENT:  PMB01                                                   *         
*                                                                     *         
* DISTRIBUTION LIBRARY: AMACLIB                                       *         
*                                                                     *         
* MACRO USAGE NOTES: Refer to macro IEWBIND2                          *         
*                                                                     *         
* CHANGE ACTIVITY:                                                    *         
*                                                                     *         
* $L0=PMBINDER,JDZ1110,911213,SJPLPCC: Base macro                     *         
* $L1=PM2ITER1,HDZ11C0,930603,SJPCNSN: DFSMS 1.3 CHANGES              *         
* $01=OY61831 ,JDZ1110,930115,SJPLLDB: ABBREV FOR NTYPE               *         
* $L2=PM2ITER2,HDZ11C0,940401,SJPLLDB: new parm lists  add &PARM      *         
* $L3=PM2ITER3,HDZ11C0,940812,SJPLLDB: add &VERSION                   *         
* $02=OW16586 ,JDZ1110,951218,SJPLSML: MISSING &XLABEL          @02A  *         
* $L4=PM3DRVR1,HDZ1110,960115,SJPLSML: PM3 DRIVER 1             @L4A  *         
* $L5=PM3DRVR2,HDZ1110,960402,SJPLSML: PM3 DRIVER 2             @L5A  *         
* $P1=KM30304,HDZ11D0,961016,SJPLSML:  BAD ABREV OF CODE/DATA   @P1A  *         
* $L6=PM3DRVR3,HDZ11D0,961018,SJPLSML: ADD PATHNAME PARM        @L6A  *         
* $P2=NOPTM  ,HDZ11D0,970418,SJPLSML:  PROLOG UPDATE            @P2A  *         
* $L7=XPLINK  ,HDZ11F0,990810,STLRWT: Multiclass segment offset @L7A  *         
* $P2=K160768,HDZ11F0,991115,STLMD:  UPDATE PROLOG              @P2A  *         
* $L8=PM4ITER2,HPMB110,000718,STLRT:  Correct syntax in prolog  @L8A  *         
* $L9=PM4ITER2,HPMB110,000911,STLEA:  add imports to INCLUDE    @L9A  *         
* $P3=K64xxxx,HPMB110,001201,SVLRT:  Permit buffer version 5    @P3A  *         
* $LA=DCRA595,HPM7708,020613,SVLNW:  CDA support                @LAA  *         
* $LB=DCRA659,HPM7709,030325,PMBNW:  Support new itype          @LBA  *         
* $LC=DA85301,HPM7730,050518,PMBLB:  new STARTD parm     A853   @LCA  *         
* $LD=DC07504,HPM7790,111202,PMBBL:  identify version 7         @LDA  *         
* $LE=DC90102,HPM7790,120222,PMBFS:  NRU identify version 8     @LEA  *         
* $LF=DC07501,HPM7790,120720,PMBST:  GENALIGN unfencing         @LFA  *         
* $P4=MG14972,HPM77A0,140311,PMBST:  ADDA ATYPE=T supporting    @P4A  *         
*                                    ref HLD C641.00            @P4A  *         
* $P5=MG15924,HPM77A0,140627,PMBST:  USE INPUT DIR INFO ON      @P5A  *         
*                                    ADDA, REF HLD C641.00      @P5A  *         
* $03=WI103599,HPM77B0,160229,PMBRL:  ADD VERSION 9 IN PROLOG   @03A  *         
*                                     OA47462                   @03A  *         
****** END OF SPECIFICATIONS *****************************************/         
*/*********************************************************************         
         MACRO                                                                  
&XLABEL  IEWBIND &FUNC=,&WORKMOD=,&ANAME=,                             *        
               &ENAME=,&AMODE=,&SECTION=,&ATYPE=,&NEWNAME=,            *        
               &COUNT=,&MODE=,&OLDNAME=,&CALLIB=,&DIALOG=,&INTENT=,    *        
               &PROTECT=,&CLASS=,&AREA=,&CURSOR=,&RECTYPE=,&OFFSET=,   *        
               &SYMBOL=,&TCOUNT=,&INTYPE=,&DDNAME=,&MEMBER=,&DCBPTR=,  *        
               &DEPTR=,&EPTOKEN=,&ATTRIB=,&ALIASES=,&EPLOC=,&IDENTIFY=,*        
               &XTLST=,&LNAME=,&NEWSECT=,&ENDDATA=,&MODLIB=,&SNAME=,   *        
               &REPLACE=,&LIBOPT=,&OPTION=,&OPTVAL=,&FILES=,&EXITS=,   *        
               &OPTIONS=,&ORIGIN=,&REGION=,&RETCODE=,&RSNCODE=,&MF=,   *        
               &NTYPE=,&PARMS=,&VERSION=,&RENAMEL=,&ITYPE=,&DLLNAME=,  *        
               &INAME=,&PATHNAME=,&IMPORTS=,&RELOC=,&CULIST=,&ENVARS=, *        
               &BDY=,&CLASSL=,&DNAME=                                           
.*******************************************************************            
.* Parms &RENAMEL, &ITYPE, &DLLNAME, and &INAME                                 
.* were added to the above list per flag   @L5A                                 
.*                                                                              
.* Parm &PATHNAME was added to the above list per flag @L6A                     
.* Parm &BDY and &CLASSL added   @LFA                                           
.*******************************************************************            
.*******************************************************************            
.*         Define all macro variables                                           
.*******************************************************************            
                 LCLC  &XFUNC      ++-VALUE                                     
                 LCLC  &XWORKMOD   ++-NAME                                      
                 LCLC  &XANAME     ++-NAME                                      
                 LCLC  &XENAME     ++-NAME                                      
                 LCLC  &XAMODE     ++-NAME                                      
                 LCLC  &XSECTION   ++-NAME                                      
                 LCLC  &XATYPE     ++-VALUE                                     
                 LCLC  &XNEWNAME   ++-NAME                                      
                 LCLC  &XCOUNT     ++-NAME                                      
                 LCLC  &XMODE      ++-VALUE                                     
                 LCLC  &XOLDNAME   ++-NAME                                      
                 LCLC  &XCALLIB    ++-NAME                                      
                 LCLC  &XDIALOG    ++-NAME                                      
                 LCLC  &XINTENT    ++-VALUE                                     
                 LCLC  &XPROTECT   ++-VALUE                                     
                 LCLC  &XCLASS     ++-NAME                                      
                 LCLC  &XAREA      ++-NAME                                      
                 LCLC  &XCURSOR    ++-NAME                                      
                 LCLC  &XRECTYPE   ++-NAME                                      
                 LCLC  &XOFFSET    ++-NAME                                      
                 LCLC  &XSYMBOL    ++-NAME                                      
                 LCLC  &XTCOUNT    ++-NAME                                      
                 LCLC  &XINTYPE    ++-VALUE                                     
                 LCLC  &XDDNAME    ++-NAME                                      
                 LCLC  &XMEMBER    ++-NAME                                      
                 LCLC  &XDCBPTR    ++-NAME                                      
                 LCLC  &XDEPTR     ++-NAME                                      
                 LCLC  &XEPTOKEN   ++-NAME                                      
                 LCLC  &XATTRIB    ++-VALUE                                     
                 LCLC  &XALIASES   ++-VALUE                                     
                 LCLC  &XIMPORTS   ++-VALUE                       @L9A          
                 LCLC  &XEPLOC     ++-NAME                                      
                 LCLC  &XIDENTIFY  ++-VALUE                                     
                 LCLC  &XXTLST     ++-NAME                                      
                 LCLC  &XLNAME     ++-NAME                                      
                 LCLC  &XNEWSECT   ++-VALUE                                     
                 LCLC  &XENDDATA   ++-VALUE                                     
                 LCLC  &XMODLIB    ++-NAME                                      
                 LCLC  &XSNAME     ++-NAME                                      
                 LCLC  &XREPLACE   ++-VALUE                                     
                 LCLC  &XLIBOPT    ++-VALUE                                     
                 LCLC  &XOPTION    ++-NAME                                      
                 LCLC  &XOPTVAL    ++-NAME                                      
                 LCLC  &XFILES     ++-NAME                                      
                 LCLC  &XEXITS     ++-NAME                                      
                 LCLC  &XOPTIONS   ++-NAME                                      
                 LCLC  &XORIGIN    ++-NAME                                      
                 LCLC  &XREGION    ++-VALUE                                     
                 LCLC  &XRETCODE   ++-NAME                                      
                 LCLC  &XRSNCODE   ++-NAME                                      
                 LCLC  &XMF        ++-VALUE                                     
                 LCLC  &XNTYPE     ++-VALUE                                     
                 LCLC  &XPARMS     ++-NAME                         @L2A         
                 LCLC  &XVERSION   ++-VALUE                        @L3A         
                 LCLC  &XRENAMEL   ++-NAME                         @L5A         
                 LCLC  &XITYPE     ++-VALUE                        @L5A         
                 LCLC  &XDLLNAME   ++-NAME                         @L5A         
                 LCLC  &XINAME     ++-NAME                         @L5A         
                 LCLC  &XRELOC     ++-NAME                         @LAA         
                 LCLC  &XCULIST    ++-NAME                         @LAA         
                 LCLC  &XENVARS     ++-NAME                        @LCA         
                 LCLC  &XBDY       ++-NAME                         @LFA         
                 LCLC  &XCLASSL    ++-NAME                         @LFA         
                 LCLC  &XDNAME     ++-NAME                         @P5A         
.*******************************************************************            
.*         Abbreviate keyword values                                            
.*******************************************************************            
&XFUNC           SETC  '&FUNC'     Keep original keyword value                  
                 AIF   ('&FUNC' EQ '').Z99FUNC                                  
                 AIF   (K'&FUNC(1) LE 0).Z99FUNC                                
                 AIF   ('&FUNC(1)' NE 'ADDALIAS').Z01FUNC                       
&XFUNC           SETC  'ADDA'      Abbreviate keyword value                     
.Z01FUNC         ANOP  ,                                                        
                 AIF   ('&FUNC(1)' NE 'ALIGNTEXT').Z02FUNC                      
&XFUNC           SETC  'ALIGNT'    Abbreviate keyword value                     
.Z02FUNC         ANOP  ,                                                        
                 AIF   ('&FUNC(1)' NE 'ALTERWMOD').Z03FUNC                      
&XFUNC           SETC  'ALTERW'    Abbreviate keyword value                     
.Z03FUNC         ANOP  ,                                                        
.*  @L5A BEGIN  (3 lines added)                                                 
                 AIF   ('&FUNC(1)' NE 'AUTOCALL').Z03AFUNC                      
&XFUNC           SETC  'AUTOC'     Abbreviate keyword value                     
.Z03AFUNC        ANOP  ,                                                        
.*  @L5A END    (3 lines added)                                                 
                 AIF   ('&FUNC(1)' NE 'BINDWMOD').Z04FUNC                       
&XFUNC           SETC  'BINDW'     Abbreviate keyword value                     
.Z04FUNC         ANOP  ,                                                        
                 AIF   ('&FUNC(1)' NE 'CREATEWMOD').Z05FUNC                     
&XFUNC           SETC  'CREATEW'   Abbreviate keyword value                     
.Z05FUNC         ANOP  ,                                                        
.*  @L5A BEGIN  (3 lines added)                                                 
                 AIF   ('&FUNC(1)' NE 'DLLRENAME').Z05AFUNC                     
&XFUNC           SETC  'DLLR'      Abbreviate keyword value                     
.Z05AFUNC        ANOP  ,                                                        
.*  @L5A END    (3 lines added)                                                 
                 AIF   ('&FUNC(1)' NE 'DELETEWMOD').Z06FUNC                     
&XFUNC           SETC  'DELETEW'   Abbreviate keyword value                     
.Z06FUNC         ANOP  ,                                                        
                 AIF   ('&FUNC(1)' NE 'ENDDIALOG').Z07FUNC                      
&XFUNC           SETC  'ENDD'      Abbreviate keyword value                     
.Z07FUNC         ANOP  ,                                                        
                 AIF   ('&FUNC(1)' NE 'GETDATA').Z08FUNC                        
&XFUNC           SETC  'GETD'      Abbreviate keyword value                     
.Z08FUNC         ANOP  ,                                                        
                 AIF   ('&FUNC(1)' NE 'GETESD').Z09FUNC                         
&XFUNC           SETC  'GETE'      Abbreviate keyword value                     
.Z09FUNC         ANOP  ,                                                        
                 AIF   ('&FUNC(1)' NE 'GETCOMPILEUNITINFO').Z10AFUNC            
&XFUNC           SETC  'GETC'      Abbreviate keyword value                     
.Z10AFUNC        ANOP  ,                                                        
                 AIF   ('&FUNC(1)' NE 'GETNAMES').Z12AFUNC                      
&XFUNC           SETC  'GETN'      Abbreviate keyword value                     
.Z12AFUNC        ANOP  ,                                                        
.* (Keyword value IMPORT is not abbreviated)                                    
.* (Keyword value INCLUDE is not abbreviated)                                   
                 AIF   ('&FUNC(1)' NE 'INSERTSECT').Z12FUNC                     
&XFUNC           SETC  'INSERTS'   Abbreviate keyword value                     
.Z12FUNC         ANOP  ,                                                        
                 AIF   ('&FUNC(1)' NE 'LOADWMOD').Z13FUNC                       
&XFUNC           SETC  'LOADW'     Abbreviate keyword value                     
.Z13FUNC         ANOP  ,                                                        
                 AIF   ('&FUNC(1)' NE 'ORDERSECT').Z14FUNC                      
&XFUNC           SETC  'ORDERS'    Abbreviate keyword value                     
.Z14FUNC         ANOP  ,                                                        
                 AIF   ('&FUNC(1)' NE 'PUTDATA').Z15FUNC                        
&XFUNC           SETC  'PUTD'      Abbreviate keyword value                     
.Z15FUNC         ANOP  ,                                                        
.* (Keyword value RENAME is not abbreviated)                                    
                 AIF   ('&FUNC(1)' NE 'RESETWMOD').Z16FUNC                      
&XFUNC           SETC  'RESETW'    Abbreviate keyword value                     
.Z16FUNC         ANOP  ,                                                        
                 AIF   ('&FUNC(1)' NE 'SAVEWMOD').Z17FUNC                       
&XFUNC           SETC  'SAVEW'     Abbreviate keyword value                     
.Z17FUNC         ANOP  ,                                                        
                 AIF   ('&FUNC(1)' NE 'SETLIB').Z18FUNC                         
&XFUNC           SETC  'SETL'      Abbreviate keyword value                     
.Z18FUNC         ANOP  ,                                                        
                 AIF   ('&FUNC(1)' NE 'SETOPTIONS').Z19FUNC                     
&XFUNC           SETC  'SETO'      Abbreviate keyword value                     
.Z19FUNC         ANOP  ,                                                        
                 AIF   ('&FUNC(1)' NE 'STARTDIALOG').Z20FUNC                    
&XFUNC           SETC  'STARTD'    Abbreviate keyword value                     
.Z20FUNC         ANOP  ,                                                        
                 AIF   ('&FUNC(1)' NE 'STARTSEG').Z21FUNC                       
&XFUNC           SETC  'STARTS'    Abbreviate keyword value                     
.Z21FUNC         ANOP  ,                                                        
.Z99FUNC         ANOP  ,                                                        
&XATYPE          SETC  '&ATYPE'       Keep original keyword value               
                 AIF   ('&ATYPE' EQ '').Z99ATYPE                                
                 AIF   (K'&ATYPE(1) LE 0).Z99ATYPE                              
                 AIF   ('&ATYPE(1)' NE 'CHANGE').Z01ATYPE                       
&XATYPE          SETC  'C'         Abbreviate keyword value                     
.Z01ATYPE        ANOP  ,                                                        
                 AIF   ('&ATYPE(1)' NE 'REPLACE').Z02ATYPE                      
&XATYPE          SETC  'R'         Abbreviate keyword value                     
.Z02ATYPE        ANOP  ,                                                        
                 AIF   ('&ATYPE(1)' NE 'DELETE').Z03ATYPE                       
&XATYPE          SETC  'D'         Abbreviate keyword value                     
.Z03ATYPE        ANOP  ,                                                        
                 AIF   ('&ATYPE(1)' NE 'EXPAND').Z04ATYPE                       
&XATYPE          SETC  'E'         Abbreviate keyword value                     
.Z04ATYPE        ANOP  ,                                                        
.Z99ATYPE        ANOP  ,                                                        
&XMODE           SETC  '&MODE'        Keep original keyword value               
                 AIF   ('&MODE' EQ '').Z99MODE                                  
                 AIF   (K'&MODE(1) LE 0).Z99MODE                                
                 AIF   ('&MODE(1)' NE 'NEXT').Z01MODE                           
&XMODE           SETC  'N'         Abbreviate keyword value                     
.Z01MODE         ANOP  ,                                                        
                 AIF   ('&MODE(1)' NE 'IMMED').Z02MODE                          
&XMODE           SETC  'I'         Abbreviate keyword value                     
.Z02MODE         ANOP  ,                                                        
.Z99MODE         ANOP  ,                                                        
&XINTENT         SETC  '&INTENT'      Keep original keyword value               
                 AIF   ('&INTENT' EQ '').Z99INTENT                              
                 AIF   (K'&INTENT(1) LE 0).Z99INTENT                            
                 AIF   ('&INTENT(1)' NE 'BIND').Z01INTENT                       
&XINTENT         SETC  'B'         Abbreviate keyword value                     
.Z01INTENT       ANOP  ,                                                        
                 AIF   ('&INTENT(1)' NE 'ACCESS').Z02INTENT                     
&XINTENT         SETC  'A'         Abbreviate keyword value                     
.Z02INTENT       ANOP  ,                                                        
.Z99INTENT       ANOP  ,                                                        
&XPROTECT        SETC  '&PROTECT'    Keep original keyword value                
                 AIF   ('&PROTECT' EQ '').Z99PROTECT                            
                 AIF   (K'&PROTECT(1) LE 0).Z99PROTECT                          
                 AIF   ('&PROTECT(1)' NE 'YES').Z01PROTECT                      
&XPROTECT        SETC  'Y'         Abbreviate keyword value                     
.Z01PROTECT      ANOP  ,                                                        
                 AIF   ('&PROTECT(1)' NE 'NO').Z02PROTECT                       
&XPROTECT        SETC  'N'         Abbreviate keyword value                     
.Z02PROTECT      ANOP  ,                                                        
.Z99PROTECT      ANOP  ,                                                        
&XINTYPE         SETC  '&INTYPE'      Keep original keyword value               
                 AIF   ('&INTYPE' EQ '').Z99INTYPE                              
                 AIF   (K'&INTYPE(1) LE 0).Z99INTYPE                            
                 AIF   ('&INTYPE(1)' NE 'NAME').Z01INTYPE                       
&XINTYPE         SETC  'N'         Abbreviate keyword value                     
.Z01INTYPE       ANOP  ,                                                        
                 AIF   ('&INTYPE(1)' NE 'POINTER').Z02INTYPE                    
&XINTYPE         SETC  'P'         Abbreviate keyword value                     
.Z02INTYPE       ANOP  ,                                                        
                 AIF   ('&INTYPE(1)' NE 'TOKEN').Z03INTYPE                      
&XINTYPE         SETC  'T'         Abbreviate keyword value                     
.Z03INTYPE       ANOP  ,                                                        
                 AIF   ('&INTYPE(1)' NE 'SMDE').Z04INTYPE                       
&XINTYPE         SETC  'S'         Abbreviate keyword value                     
.Z04INTYPE       ANOP  ,                                                        
                 AIF   ('&INTYPE(1)' NE 'DEPTR').Z05INTYPE                      
&XINTYPE         SETC  'D'         Abbreviate keyword value                     
.Z05INTYPE       ANOP  ,                                                        
.Z99INTYPE       ANOP  ,                                                        
&XATTRIB         SETC  '&ATTRIB'      Keep original keyword value               
                 AIF   ('&ATTRIB' EQ '').Z99ATTRIB                              
                 AIF   (K'&ATTRIB(1) LE 0).Z99ATTRIB                            
                 AIF   ('&ATTRIB(1)' NE 'NO').Z01ATTRIB                         
&XATTRIB         SETC  'N'         Abbreviate keyword value                     
.Z01ATTRIB       ANOP  ,                                                        
                 AIF   ('&ATTRIB(1)' NE 'YES').Z02ATTRIB                        
&XATTRIB         SETC  'Y'         Abbreviate keyword value                     
.Z02ATTRIB       ANOP  ,                                                        
.Z99ATTRIB       ANOP  ,                                                        
&XALIASES        SETC  '&ALIASES'     Keep original keyword value               
                 AIF   ('&ALIASES' EQ '').Z99ALIASES                            
                 AIF   (K'&ALIASES(1) LE 0).Z99ALIASES                          
                 AIF   ('&ALIASES(1)' NE 'NO').Z01ALIASES                       
&XALIASES        SETC  'N'         Abbreviate keyword value                     
.Z01ALIASES      ANOP  ,                                                        
                 AIF   ('&ALIASES(1)' NE 'YES').Z02ALIASES                      
&XALIASES        SETC  'Y'         Abbreviate keyword value                     
.Z02ALIASES      ANOP  ,                                                        
                 AIF   ('&ALIASES(1)' NE 'KEEP').Z03ALIASES                     
&XALIASES        SETC  'K'                                                      
.Z03ALIASES      ANOP  ,                                                        
.Z99ALIASES      ANOP  ,                                                        
.*  @L9A start  (10 lines added)                                                
&XIMPORTS        SETC  '&IMPORTS'     Keep original keyword value               
                 AIF   ('&IMPORTS' EQ '').Z99IMPORTS                            
                 AIF   (K'&IMPORTS(1) LE 0).Z99IMPORTS                          
                 AIF   ('&IMPORTS(1)' NE 'NO').Z01IMPORTS                       
&XIMPORTS        SETC  'N'         Abbreviate keyword value                     
.Z01IMPORTS      ANOP  ,                                                        
                 AIF   ('&IMPORTS(1)' NE 'YES').Z02IMPORTS                      
&XIMPORTS        SETC  'Y'         Abbreviate keyword value                     
.Z02IMPORTS      ANOP  ,                                                        
.Z99IMPORTS      ANOP  ,                                                        
.*  @L9A end                                                                    
&XIDENTIFY       SETC  '&IDENTIFY'    Keep original keyword value               
                 AIF   ('&IDENTIFY' EQ '').Z99IDENTIFY                          
                 AIF   (K'&IDENTIFY(1) LE 0).Z99IDENTIFY                        
                 AIF   ('&IDENTIFY(1)' NE 'NO').Z01IDENTIFY                     
&XIDENTIFY       SETC  'N'         Abbreviate keyword value                     
.Z01IDENTIFY     ANOP  ,                                                        
                 AIF   ('&IDENTIFY(1)' NE 'YES').Z02IDENTIFY                    
&XIDENTIFY       SETC  'Y'         Abbreviate keyword value                     
.Z02IDENTIFY     ANOP  ,                                                        
.Z99IDENTIFY     ANOP  ,                                                        
&XNEWSECT        SETC  '&NEWSECT'    Keep original keyword value                
                 AIF   ('&NEWSECT' EQ '').Z99NEWSECT                            
                 AIF   (K'&NEWSECT(1) LE 0).Z99NEWSECT                          
                 AIF   ('&NEWSECT(1)' NE 'NO').Z01NEWSECT                       
&XNEWSECT        SETC  'N'         Abbreviate keyword value                     
.Z01NEWSECT      ANOP  ,                                                        
                 AIF   ('&NEWSECT(1)' NE 'YES').Z02NEWSECT                      
&XNEWSECT        SETC  'Y'         Abbreviate keyword value                     
.Z02NEWSECT      ANOP  ,                                                        
.Z99NEWSECT      ANOP  ,                                                        
&XENDDATA        SETC  '&ENDDATA'    Keep original keyword value                
                 AIF   ('&ENDDATA' EQ '').Z99ENDDATA                            
                 AIF   (K'&ENDDATA(1) LE 0).Z99ENDDATA                          
                 AIF   ('&ENDDATA(1)' NE 'NO').Z01ENDDATA                       
&XENDDATA        SETC  'N'         Abbreviate keyword value                     
.Z01ENDDATA      ANOP  ,                                                        
                 AIF   ('&ENDDATA(1)' NE 'YES').Z02ENDDATA                      
&XENDDATA        SETC  'Y'         Abbreviate keyword value                     
.Z02ENDDATA      ANOP  ,                                                        
.Z99ENDDATA      ANOP  ,                                                        
&XREPLACE        SETC  '&REPLACE'    Keep original keyword value                
                 AIF   ('&REPLACE' EQ '').Z99REPLACE                            
                 AIF   (K'&REPLACE(1) LE 0).Z99REPLACE                          
                 AIF   ('&REPLACE(1)' NE 'NO').Z01REPLACE                       
&XREPLACE        SETC  'N'         Abbreviate keyword value                     
.Z01REPLACE      ANOP  ,                                                        
                 AIF   ('&REPLACE(1)' NE 'YES').Z02REPLACE                      
&XREPLACE        SETC  'Y'         Abbreviate keyword value                     
.Z02REPLACE      ANOP  ,                                                        
.Z99REPLACE      ANOP  ,                                                        
&XLIBOPT         SETC  '&LIBOPT'    Keep original keyword value                 
                 AIF   ('&LIBOPT' EQ '').Z99LIBOPT                              
                 AIF   (K'&LIBOPT(1) LE 0).Z99LIBOPT                            
                 AIF   ('&LIBOPT(1)' NE 'CALL').Z01LIBOPT                       
&XLIBOPT         SETC  'C'         Abbreviate keyword value                     
.Z01LIBOPT       ANOP  ,                                                        
                 AIF   ('&LIBOPT(1)' NE 'NOCALL').Z02LIBOPT                     
&XLIBOPT         SETC  'N'         Abbreviate keyword value                     
.Z02LIBOPT       ANOP  ,                                                        
                 AIF   ('&LIBOPT(1)' NE 'EXCLUDE').Z03LIBOPT                    
&XLIBOPT         SETC  'E'         Abbreviate keyword value                     
.Z03LIBOPT       ANOP  ,                                                        
.Z99LIBOPT       ANOP  ,                                                        
&XREGION         SETC  '&REGION'    Keep original keyword value                 
                 AIF   ('&REGION' EQ '').Z99REGION                              
                 AIF   (K'&REGION(1) LE 0).Z99REGION                            
                 AIF   ('&REGION(1)' NE 'NO').Z01REGION                         
&XREGION         SETC  'N'         Abbreviate keyword value                     
.Z01REGION       ANOP  ,                                                        
                 AIF   ('&REGION(1)' NE 'YES').Z02REGION                        
&XREGION         SETC  'Y'         Abbreviate keyword value                     
.Z02REGION       ANOP  ,                                                        
.Z99REGION       ANOP  ,                                                        
&XNTYPE          SETC  '&NTYPE'    Keep original keyword value   @01A           
                 AIF   ('&NTYPE' EQ '').Z99NTYPE                                
                 AIF   (K'&NTYPE(1) LE 0).Z99NTYPE                              
                 AIF   ('&NTYPE(1)' NE 'SECTION').Z01NTYPE                      
&XNTYPE          SETC  'S'         Abbreviate keyword value                     
.Z01NTYPE        ANOP  ,                                                        
                 AIF   ('&NTYPE(1)' NE 'CLASS').Z02NTYPE                        
&XNTYPE          SETC  'C'         Abbreviate keyword value                     
.Z02NTYPE        ANOP  ,                                                        
.Z99NTYPE        ANOP  ,                                                        
&XRENAMEL        SETC  '&RENAMEL'    Keep original keyword value                
&XVERSION        SETC  '&VERSION'   Keep original keyword value                 
&XITYPE          SETC  '&ITYPE'     Keep original keyword value                 
                 AIF   ('&ITYPE' EQ '').Z99ITYPE                                
                 AIF   (K'&ITYPE(1) LE 0).Z99ITYPE                              
                 AIF   ('&ITYPE(1)' NE 'CODE').Z01ITYPE                         
&XITYPE          SETC  'C'          Abbreviate keyword value                    
.Z01ITYPE        ANOP  ,                                                        
                 AIF   ('&ITYPE(1)' NE 'DATA').Z02ITYPE          @LBC           
&XITYPE          SETC  'D'          Abbreviate keyword value                    
.Z02ITYPE        ANOP  ,                                         @LBA           
                 AIF   ('&ITYPE(1)' NE 'CODE64').Z03ITYPE        @LBA           
&XITYPE          SETC  'E'          Abbreviate keyword value     @LBA           
.Z03ITYPE        ANOP  ,                                         @LBA           
                 AIF   ('&ITYPE(1)' NE 'DATA64').Z99ITYPE        @LBA           
&XITYPE          SETC  'F'          Abbreviate keyword value     @LBA           
.Z99ITYPE        ANOP  ,                                                        
.*******************************************************************            
.*         Invoke IEWBIND2 with fixed up parameters                             
.*******************************************************************            
.* @02A - THE LINE BELOW WAS MISSING &XLABEL,WHICH CAUSED AN INVOCATION         
.* @02A - TO IEWBIND2 W/O A LABEL, AND SO IF THE CALLER SPECIFIED ONE           
.* @02A - HE/SHE WOULD NEVER HAVE GOTTEN IT IN THE MACRO EXPANSION.             
.*                                                                              
.* @L5A - RENAMEL, ITYPE, DLLNAME, and INAME                                    
.* @L5A - WERE ADDED TO THE LIST OF PARMS BELOW PER @L5                         
.*                                                                              
.* @L6A - PATHNAME WAS ADDED TO THE LIST OF PARMS PER @L6A                      
.* @L9A - IMPORTS  WAS ADDED TO THE LIST OF PARMS PER @L9A                      
.* @LAA - RELOC    WAS ADDED TO THE LIST OF PARMS PER @LAA                      
.* @LAA - CULIST   WAS ADDED TO THE LIST OF PARMS PER @LAA                      
.* @LCA - ENVARS    WAS ADDED TO THE LIST OF PARMS PER @LCA                     
.* @LFA - BDY AND CLASSL WERE ADDED TO THE LIST OF PARMS PER @LFA               
&XLABEL  IEWBIND2                                                      X        
               FUNC=&XFUNC,                                            X        
               WORKMOD=&WORKMOD,                                       X        
               ANAME=&ANAME,                                           X        
               ENAME=&ENAME,                                           X        
               AMODE=&AMODE,                                           X        
               SECTION=&SECTION,                                       X        
               ATYPE=&XATYPE,                                          X        
               NEWNAME=&NEWNAME,                                       X        
               COUNT=&COUNT,                                           X        
               MODE=&XMODE,                                            X        
               OLDNAME=&OLDNAME,                                       X        
               CALLIB=&CALLIB,                                         X        
               DIALOG=&DIALOG,                                         X        
               INTENT=&XINTENT,                                        X        
               PROTECT=&XPROTECT,                                      X        
               CLASS=&CLASS,                                           X        
               AREA=&AREA,                                             X        
               CURSOR=&CURSOR,                                         X        
               RECTYPE=&RECTYPE,                                       X        
               OFFSET=&OFFSET,                                         X        
               SYMBOL=&SYMBOL,                                         X        
               TCOUNT=&TCOUNT,                                         X        
               INTYPE=&XINTYPE,                                        X        
               DDNAME=&DDNAME,                                         X        
               MEMBER=&MEMBER,                                         X        
               DCBPTR=&DCBPTR,                                         X        
               DEPTR=&DEPTR,                                           X        
               EPTOKEN=&EPTOKEN,                                       X        
               ATTRIB=&XATTRIB,                                        X        
               ALIASES=&XALIASES,                                      X        
               IMPORTS=&XIMPORTS,                                      X        
               EPLOC=&EPLOC,                                           X        
               IDENTIFY=&XIDENTIFY,                                    X        
               EXTLST=&XTLST,                                          X        
               LNAME=&LNAME,                                           X        
               NEWSECT=&XNEWSECT,                                      X        
               ENDDATA=&XENDDATA,                                      X        
               MODLIB=&MODLIB,                                         X        
               SNAME=&SNAME,                                           X        
               REPLACE=&XREPLACE,                                      X        
               LIBOPT=&XLIBOPT,                                        X        
               OPTION=&OPTION,                                         X        
               OPTVAL=&OPTVAL,                                         X        
               FILES=&FILES,                                           X        
               EXITS=&EXITS,                                           X        
               OPTIONS=&OPTIONS,                                       X        
               ORIGIN=&ORIGIN,                                         X        
               REGION=&XREGION,                                        X        
               NTYPE=&XNTYPE,                                          X        
               PARMS=&PARMS,                                           X        
               RETCODE=&RETCODE,                                       X        
               RSNCODE=&RSNCODE,                                       X        
               VERSION=&VERSION,                                       X        
               RENAMEL=&RENAMEL,                                       X        
               ITYPE=&XITYPE,                                          X        
               DLLNAME=&DLLNAME,                                       X        
               INAME=&INAME,                                           X        
               PATHNAME=&PATHNAME,                                     X        
               RELOC=&RELOC,                                           X        
               CULIST=&CULIST,                                         X        
               ENVARS=&ENVARS,                                         X        
               BDY=&BDY,                                               X        
               CLASSL=&CLASSL,                                         X        
               DNAME=&DNAME,                                           X        
               MF=&MF                                                           
         MEND                                                                   
**********************************************************************/         
*/* Start of PL/X macro----------------------------------------------*/         
*%IEWBIND: MACRO KEYS(FUNC,WORKMOD,ANAME,                                       
*                 ENAME,AMODE,SECTION,ATYPE,NEWNAME,COUNT,                      
*                 MODE,OLDNAME,CALLIB,DIALOG,INTENT,PROTECT,CLASS,              
*                 AREA,CURSOR,RECTYPE,OFFSET,SYMBOL,TCOUNT,INTYPE,              
*                 DDNAME,MEMBER,DCBPTR,DEPTR,EPTOKEN,ATTRIB,ALIASES,            
*                 EPLOC,IDENTIFY,XTLST,LNAME,NEWSECT,ENDDATA,MODLIB,            
*                 SNAME,REPLACE,LIBOPT,OPTION,OPTVAL,FILES,EXITS,               
*                 OPTIONS,ORIGIN,REGION,NTYPE,IMPORTS,                          
*                 PARMS,RETCODE,RSNCODE,VERSION,RENAMEL,ITYPE,DLLNAME,          
*                 INAME,PATHNAME,RELOC,CULIST,ENVARS,BDY,                       
*                 CLASSL,DNAME,MF) TRACE;                                       
*                                             /* @LFC @LCC @LAC @L5A */         
*                                                                               
*DCL XMACKEYS CHAR;                 /* Fixed up MACKEYS string       */         
*DCL XLEFT FIXED;                   /* Last byte of left text        */         
*DCL XRIGHT FIXED;                  /* First byte of right text      */         
*                                                                               
*XMACKEYS=MACKEYS;                  /* Make local copy of keywords   */         
*IF FUNC(1)^='' THEN                /* FUNC(something) passed in     */         
*DO;                                /* Abbreviate FUNC keyword value */         
*  XFUNC=FUNC(1);                   /* Set passed keyword value      */         
*  XLEFT=4+INDEX(XMACKEYS,'FUNC('); /* Point to left parenthesis     */         
*  XRIGHT=XLEFT+1+LENGTH(XFUNC); /* Point to right parenthesis       */         
*  IF FUNC(1)='ADDALIAS' THEN XFUNC='ADDA';           /* Abbreviate  */         
*  IF FUNC(1)='ALIGNTEXT' THEN XFUNC='ALIGNT';        /* Abbreviate  */         
*  IF FUNC(1)='ALTERWMOD' THEN XFUNC='ALTERW';        /* Abbreviate  */         
*  IF FUNC(1)='AUTOCALL' THEN XFUNC='AUTOC';          /*       @L5A  */         
*  IF FUNC(1)='BINDWMOD' THEN XFUNC='BINDW';          /* Abbreviate  */         
*  IF FUNC(1)='CREATEWMOD' THEN XFUNC='CREATEW';      /* Abbreviate  */         
*  IF FUNC(1)='DELETEWMOD' THEN XFUNC='DELETEW';      /* Abbreviate  */         
*  IF FUNC(1)='DLLRENAME' THEN XFUNC='DLLR';          /*       @L5A  */         
*  IF FUNC(1)='ENDDIALOG' THEN XFUNC='ENDD';          /* Abbreviate  */         
*  IF FUNC(1)='GETDATA' THEN XFUNC='GETD';            /* Abbreviate  */         
*  IF FUNC(1)='GETESD' THEN XFUNC='GETE';             /* Abbreviate  */         
*  IF FUNC(1)='GETCOMPILEUNITINFO' THEN XFUNC='GETC'; /*       @LAA  */         
*  IF FUNC(1)='GETNAMES' THEN XFUNC='GETN';           /* Abbreviate  */         
*  /*    (FUNC(IMPORT) is not abbreviated)                     @L5A  */         
*  /*    (FUNC(INCLUDE) is not abbreviated)                          */         
*  IF FUNC(1)='INSERTSECT' THEN XFUNC='INSERTS';      /* Abbreviate  */         
*  IF FUNC(1)='LOADWMOD' THEN XFUNC='LOADW';          /* Abbreviate  */         
*  IF FUNC(1)='ORDERSECT' THEN XFUNC='ORDERS';        /* Abbreviate  */         
*  IF FUNC(1)='PUTDATA' THEN XFUNC='PUTD';            /* Abbreviate  */         
*  /*    (FUNC(RENAME) is not abbreviated)                     @L5A  */         
*  IF FUNC(1)='RESETWMOD' THEN XFUNC='RESETW';        /* Abbreviate  */         
*  IF FUNC(1)='SAVEWMOD' THEN XFUNC='SAVEW';          /* Abbreviate  */         
*  IF FUNC(1)='SETLIB' THEN XFUNC='SETL';             /* Abbreviate  */         
*  IF FUNC(1)='SETOPTIONS' THEN XFUNC='SETO';         /* Abbreviate  */         
*  IF FUNC(1)='STARTDIALOG' THEN XFUNC='STARTD';      /* Abbreviate  */         
*  IF FUNC(1)='STARTSEG' THEN XFUNC='STARTS';         /* Abbreviate  */         
*  XMACKEYS=XMACKEYS(1:XLEFT) !!    /* First part of keys            */         
*           XFUNC !!                /* Abbreviated FUNC value        */         
*           XMACKEYS(XRIGHT:LENGTH(XMACKEYS)); /* Remainder of keys */          
*END;                               /* Abbreviate FUNC keyword value */         
*                                                                               
*IF ATYPE(1)^='' THEN               /* ATYPE(something) passed in    */         
*DO;                                /* Abbreviate ATYPE keyword      */         
*  XATYPE=ATYPE(1);                 /* Set passed keyword value      */         
*  XLEFT=5+INDEX(XMACKEYS,'ATYPE('); /* Point to left parenthesis    */         
*  XRIGHT=XLEFT+1+LENGTH(XATYPE); /* Point to right parenthesis      */         
*  IF ATYPE(1)='CHANGE' THEN XATYPE='C';    /* Abbreviate            */         
*  IF ATYPE(1)='REPLACE' THEN XATYPE='R';   /* Abbreviate            */         
*  IF ATYPE(1)='DELETE' THEN XATYPE='D';    /* Abbreviate            */         
*  IF ATYPE(1)='EXPAND' THEN XATYPE='E';    /* Abbreviate            */         
*  XMACKEYS=XMACKEYS(1:XLEFT) !!    /* First part of keys            */         
*           XATYPE !!               /* Abbreviated ATYPE value       */         
*           XMACKEYS(XRIGHT:LENGTH(XMACKEYS)); /* Remainder of keys */          
*END;                               /* Abbreviate ATYPE keyword      */         
*                                                                               
*IF MODE(1)^='' THEN                /* MODE(something) passed in     */         
*DO;                                /* Abbreviate MODE keyword       */         
*  XMODE=MODE(1);                   /* Set passed keyword value      */         
*  XLEFT=4+INDEX(XMACKEYS,'MODE('); /* Point to left parenthesis     */         
*  XRIGHT=XLEFT+1+LENGTH(XMODE); /* Point to right parenthesis       */         
*  IF MODE(1)='NEXT' THEN XMODE='N';        /* Abbreviate            */         
*  IF MODE(1)='IMMED' THEN XMODE='I';       /* Abbreviate            */         
*  XMACKEYS=XMACKEYS(1:XLEFT) !!    /* First part of keys            */         
*           XMODE !!                /* Abbreviated MODE value        */         
*           XMACKEYS(XRIGHT:LENGTH(XMACKEYS)); /* Remainder of keys */          
*END;                               /* Abbreviate MODE keyword       */         
*                                                                               
*IF INTENT(1)^='' THEN              /* INTENT(something) passed in   */         
*DO;                                /* Abbreviate INTENT keyword     */         
*  XINTENT=INTENT(1);               /* Set passed keyword value      */         
*  XLEFT=6+INDEX(XMACKEYS,'INTENT('); /* Point to left parenthesis */           
*  XRIGHT=XLEFT+1+LENGTH(XINTENT); /* Point to right parenthesis     */         
*  IF INTENT(1)='BIND' THEN XINTENT='B';    /* Abbreviate            */         
*  IF INTENT(1)='ACCESS' THEN XINTENT='A';  /* Abbreviate            */         
*  XMACKEYS=XMACKEYS(1:XLEFT) !!    /* First part of keys            */         
*           XINTENT !!              /* Abbreviated INTENT value      */         
*           XMACKEYS(XRIGHT:LENGTH(XMACKEYS)); /* Remainder of keys */          
*END;                               /* Abbreviate INTENT keyword     */         
*                                                                               
*IF PROTECT(1)^='' THEN             /* PROTECT(something) passed in  */         
*DO;                                /* Abbreviate PROTECT keyword    */         
*  XPROTECT=PROTECT(1);             /* Set passed keyword value      */         
*  XLEFT=7+INDEX(XMACKEYS,'PROTECT('); /* Point to left paren.       */         
*  XRIGHT=XLEFT+1+LENGTH(XPROTECT); /* Point to right parenthesis */            
*  IF PROTECT(1)='YES' THEN XPROTECT='Y';   /* Abbreviate            */         
*  IF PROTECT(1)='NO' THEN XPROTECT='N';    /* Abbreviate            */         
*  XMACKEYS=XMACKEYS(1:XLEFT) !!    /* First part of keys            */         
*           XPROTECT !!             /* Abbreviated PROTECT value     */         
*           XMACKEYS(XRIGHT:LENGTH(XMACKEYS)); /* Remainder of keys */          
*END;                               /* Abbreviate PROTECT keyword    */         
*                                                                               
*IF INTYPE(1)^='' THEN              /* INTYPE(something) passed in   */         
*DO;                                /* Abbreviate INTYPE keyword     */         
*  XINTYPE=INTYPE(1);               /* Set passed keyword value      */         
*  XLEFT=6+INDEX(XMACKEYS,'INTYPE('); /* Point to left paren.        */         
*  XRIGHT=XLEFT+1+LENGTH(XINTYPE); /* Point to right parenthesis */             
*  IF INTYPE(1)='NAME' THEN XINTYPE='N';    /* Abbreviate            */         
*  IF INTYPE(1)='POINTER' THEN XINTYPE='P'; /* Abbreviate            */         
*  IF INTYPE(1)='TOKEN' THEN XINTYPE='T';   /* Abbreviate            */         
*  IF INTYPE(1)='SMDE' THEN XINTYPE='S';    /* Abbreviate            */         
*  XMACKEYS=XMACKEYS(1:XLEFT) !!    /* First part of keys            */         
*           XINTYPE !!              /* Abbreviated INTYPE value      */         
*           XMACKEYS(XRIGHT:LENGTH(XMACKEYS)); /* Remainder of keys */          
*END;                               /* Abbreviate INTYPE keyword     */         
*                                                                               
*IF ATTRIB(1)^='' THEN              /* ATTRIB(something) passed in   */         
*DO;                                /* Abbreviate ATTRIB keyword     */         
*  XATTRIB=ATTRIB(1);               /* Set passed keyword value      */         
*  XLEFT=6+INDEX(XMACKEYS,'ATTRIB('); /* Point to left paren.        */         
*  XRIGHT=XLEFT+1+LENGTH(XATTRIB); /* Point to right parenthesis */             
*  IF ATTRIB(1)='NO' THEN XATTRIB='N';      /* Abbreviate            */         
*  IF ATTRIB(1)='YES' THEN XATTRIB='Y';     /* Abbreviate            */         
*  XMACKEYS=XMACKEYS(1:XLEFT) !!    /* First part of keys            */         
*           XATTRIB !!              /* Abbreviated ATTRIB value      */         
*           XMACKEYS(XRIGHT:LENGTH(XMACKEYS)); /* Remainder of keys */          
*END;                               /* Abbreviate ATTRIB keyword     */         
*                                                                               
*IF ALIASES(1)^='' THEN             /* ALIASES(something) passed in  */         
*DO;                                /* Abbreviate ALIASES keyword    */         
*  XALIASES=ALIASES(1);             /* Set passed keyword value      */         
*  XLEFT=7+INDEX(XMACKEYS,'ALIASES('); /* Point to left paren.       */         
*  XRIGHT=XLEFT+1+LENGTH(XALIASES); /* Point to right parenthesis */            
*  IF ALIASES(1)='NO' THEN XALIASES='N';    /* Abbreviate            */         
*  IF ALIASES(1)='YES' THEN XALIASES='Y';   /* Abbreviate            */         
*  XMACKEYS=XMACKEYS(1:XLEFT) !!    /* First part of keys            */         
*           XALIASES !!             /* Abbreviated ALIASES value     */         
*           XMACKEYS(XRIGHT:LENGTH(XMACKEYS)); /* Remainder of keys */          
*END;                               /* Abbreviate ALIASES keyword    */         
*                                                                               
*IF IMPORTS(1)^='' THEN             /* IMPORTS(something)        @L9A*/         
*DO;                                /* Abbreviate IMPORTS keyword@L9A*/         
*  XIMPORTS=IMPORTS(1);             /* Set passed keyword value  @L9A*/         
*  XLEFT=7+INDEX(XMACKEYS,'IMPORTS('); /* Point to left paren.   @L9A*/         
*  XRIGHT=XLEFT+1+LENGTH(XIMPORTS); /* Point to right parenthesis@L9A*/         
*  IF IMPORTS(1)='NO' THEN XIMPORTS='N';    /* Abbreviate        @L9A*/         
*  IF IMPORTS(1)='YES' THEN XIMPORTS='Y';   /* Abbreviate        @L9A*/         
*  XMACKEYS=XMACKEYS(1:XLEFT) !!    /* First part of keys        @L9A*/         
*           XIMPORTS !!             /* Abbreviated IMPORTS value @L9A*/         
*           XMACKEYS(XRIGHT:LENGTH(XMACKEYS)); /* Remainder      @L9A*/         
*END;                               /* Abbreviate IMPORTS keyword@L9A*/         
*                                                                               
*IF IDENTIFY(1)^='' THEN            /* IDENTIFY(something) passed in */         
*DO;                                /* Abbreviate IDENTIFY keyword   */         
*  XIDENTIFY=IDENTIFY(1);           /* Set passed keyword value      */         
*  XLEFT=8+INDEX(XMACKEYS,'IDENTIFY('); /* Point to left paren.      */         
*  XRIGHT=XLEFT+1+LENGTH(XIDENTIFY); /* Point to right paren.        */         
*  IF IDENTIFY(1)='NO' THEN XIDENTIFY='N';  /* Abbreviate            */         
*  IF IDENTIFY(1)='YES' THEN XIDENTIFY='Y'; /* Abbreviate            */         
*  XMACKEYS=XMACKEYS(1:XLEFT) !!    /* First part of keys            */         
*           XIDENTIFY !!            /* Abbreviated IDENTIFY value    */         
*           XMACKEYS(XRIGHT:LENGTH(XMACKEYS)); /* Remainder of keys */          
*END;                               /* Abbreviate IDENTIFY keyword   */         
*                                                                               
*IF NEWSECT(1)^='' THEN             /* NEWSECT(something) passed in  */         
*DO;                                /* Abbreviate NEWSECT keyword    */         
*  XNEWSECT=NEWSECT(1);             /* Set passed keyword value      */         
*  XLEFT=7+INDEX(XMACKEYS,'NEWSECT('); /* Point to left paren.       */         
*  XRIGHT=XLEFT+1+LENGTH(XNEWSECT); /* Point to right parenthesis */            
*  IF NEWSECT(1)='NO' THEN XNEWSECT='N';    /* Abbreviate            */         
*  IF NEWSECT(1)='YES' THEN XNEWSECT='Y';   /* Abbreviate            */         
*  XMACKEYS=XMACKEYS(1:XLEFT) !!    /* First part of keys            */         
*           XNEWSECT !!             /* Abbreviated NEWSECT value     */         
*           XMACKEYS(XRIGHT:LENGTH(XMACKEYS)); /* Remainder of keys */          
*END;                               /* Abbreviate NEWSECT keyword    */         
*                                                                               
*IF ENDDATA(1)^='' THEN             /* ENDDATA(something) passed in  */         
*DO;                                /* Abbreviate ENDDATA keyword    */         
*  XENDDATA=ENDDATA(1);             /* Set passed keyword value      */         
*  XLEFT=7+INDEX(XMACKEYS,'ENDDATA('); /* Point to left paren.       */         
*  XRIGHT=XLEFT+1+LENGTH(XENDDATA); /* Point to right parenthesis */            
*  IF ENDDATA(1)='NO' THEN XENDDATA='N';    /* Abbreviate            */         
*  IF ENDDATA(1)='YES' THEN XENDDATA='Y';   /* Abbreviate            */         
*  XMACKEYS=XMACKEYS(1:XLEFT) !!    /* First part of keys            */         
*           XENDDATA !!             /* Abbreviated ENDDATA value     */         
*           XMACKEYS(XRIGHT:LENGTH(XMACKEYS)); /* Remainder of keys */          
*END;                               /* Abbreviate ENDDATA keyword    */         
*                                                                               
*IF REPLACE(1)^='' THEN             /* REPLACE(something) passed in  */         
*DO;                                /* Abbreviate REPLACE keyword    */         
*  XREPLACE=REPLACE(1);             /* Set passed keyword value      */         
*  XLEFT=7+INDEX(XMACKEYS,'REPLACE('); /* Point to left paren.       */         
*  XRIGHT=XLEFT+1+LENGTH(XREPLACE); /* Point to right parenthesis */            
*  IF REPLACE(1)='NO' THEN XREPLACE='N';    /* Abbreviate            */         
*  IF REPLACE(1)='YES' THEN XREPLACE='Y';   /* Abbreviate            */         
*  XMACKEYS=XMACKEYS(1:XLEFT) !!    /* First part of keys            */         
*           XREPLACE !!             /* Abbreviated REPLACE value     */         
*           XMACKEYS(XRIGHT:LENGTH(XMACKEYS)); /* Remainder of keys */          
*END;                               /* Abbreviate REPLACE keyword    */         
*                                                                               
*IF LIBOPT(1)^='' THEN              /* LIBOPT(something) passed in   */         
*DO;                                /* Abbreviate LIBOPT keyword     */         
*  XLIBOPT=LIBOPT(1);               /* Set passed keyword value      */         
*  XLEFT=6+INDEX(XMACKEYS,'LIBOPT('); /* Point to left paren.        */         
*  XRIGHT=XLEFT+1+LENGTH(XLIBOPT); /* Point to right parenthesis */             
*  IF LIBOPT(1)='CALL' THEN XLIBOPT='C';    /* Abbreviate            */         
*  IF LIBOPT(1)='NOCALL' THEN XLIBOPT='N';  /* Abbreviate            */         
*  IF LIBOPT(1)='EXCLUDE' THEN XLIBOPT='E'; /* Abbreviate            */         
*  XMACKEYS=XMACKEYS(1:XLEFT) !!    /* First part of keys            */         
*           XLIBOPT !!              /* Abbreviated LIBOPT value      */         
*           XMACKEYS(XRIGHT:LENGTH(XMACKEYS)); /* Remainder of keys */          
*END;                               /* Abbreviate LIBOPT keyword     */         
*                                                                               
*IF REGION(1)^='' THEN              /* REGION(something) passed in   */         
*DO;                                /* Abbreviate REGION keyword     */         
*  XREGION=REGION(1);               /* Set passed keyword value      */         
*  XLEFT=6+INDEX(XMACKEYS,'REGION('); /* Point to left paren.        */         
*  XRIGHT=XLEFT+1+LENGTH(XREGION); /* Point to right parenthesis */             
*  IF REGION(1)='NO' THEN XREGION='N';      /* Abbreviate            */         
*  IF REGION(1)='YES' THEN XREGION='Y';     /* Abbreviate            */         
*  XMACKEYS=XMACKEYS(1:XLEFT) !!    /* First part of keys            */         
*           XREGION !!              /* Abbreviated REGION value      */         
*           XMACKEYS(XRIGHT:LENGTH(XMACKEYS)); /* Remainder of keys */          
*END;                               /* Abbreviate REGION keyword     */         
*                                                                               
*IF NTYPE(1)^='' THEN               /* NTYPE(something) passed in    */         
*DO;                                /* Abbreviate NTYPE keyword      */         
*  XNTYPE=NTYPE(1);                 /* Set passed keyword value      */         
*  XLEFT=5+INDEX(XMACKEYS,'NTYPE('); /* Point to left paren.         */         
*  XRIGHT=XLEFT+1+LENGTH(XNTYPE);  /* Point to right parenthesis     */         
*  IF NTYPE(1)='SECTION' THEN XNTYPE='S';   /* Abbreviate            */         
*  IF NTYPE(1)='CLASS' THEN XNTYPE='C';     /* Abbreviate            */         
*  XMACKEYS=XMACKEYS(1:XLEFT) !!    /* First part of keys            */         
*           XNTYPE !!                /* Abbreviated NTYPE value      */         
*           XMACKEYS(XRIGHT:LENGTH(XMACKEYS)); /* Remainder of keys */          
*END;                               /* Abbreviate NTYPE keyword      */         
*                                                                               
*/**** LINES STARTING HERE WERE ADDED PER FLAG  @L5            @L5A  */         
*                                                                               
*IF ITYPE(1)^='' THEN               /* ITYPE(something) passed in    */         
*DO;                                /* Abbreviate ITYPE keyword      */         
*  XITYPE=ITYPE(1);                 /* Set passed keyword value      */         
*  XLEFT=5+INDEX(XMACKEYS,'ITYPE(');/* Point to left paren.          */         
*  XRIGHT=XLEFT+1+LENGTH(XITYPE);   /* Point to right parenthesis    */         
*  IF ITYPE(1)='CODE' THEN XITYPE='C';      /* Abbreviate            */         
*  IF ITYPE(1)='DATA' THEN XITYPE='D';      /* Abbreviate            */         
*  IF ITYPE(1)='CODE64' THEN XITYPE='E';    /* Abbreviate        @LBA*/         
*  IF ITYPE(1)='DATA64' THEN XITYPE='F';    /* Abbreviate        @LBA*/         
*  XMACKEYS=XMACKEYS(1:XLEFT) !!    /* First part of keys            */         
*           XITYPE !!               /* Abbreviated ITYPE value       */         
*           XMACKEYS(XRIGHT:LENGTH(XMACKEYS));  /* Remainder of keys */         
*END;                               /* Abbreviate ITYPE keyword      */         
*                                                                               
*/**** LINES ENDING HERE WERE ADDED PER FLAG  @L5              @L5A  */         
*                                                                               
*XRIGHT=INDEX(XMACKEYS,'XTLST');    /* Point to XTLST keyword        */         
*XLEFT=XRIGHT-1;                    /* Point to preceding character  */         
*IF XRIGHT > 0 THEN                 /* XTLST exists                  */         
*DO;                                /* Change XTLST to EXTLST        */         
*  IF XRIGHT=1 THEN                 /* XTLST is first keyword        */         
*    XMACKEYS='E'!!XMACKEYS;        /* Insert E in front of XTLST    */         
*  ELSE                             /* XTLST is imbedded keyword     */         
*    XMACKEYS=XMACKEYS(1:XLEFT) !!  /* First part of keys            */         
*             'E' !!                /* Extra E                       */         
*             XMACKEYS(XRIGHT:LENGTH(XMACKEYS)); /* Remainder of keys*/         
*END;                               /* Change XTLST to EXTLST        */         
*                                                                               
*                                                                               
*ANS('?'!!MACLABEL!!' '!!'IEWBIND2 '!!MACLIST!!                                 
*         ' '!!XMACKEYS!!';') COL(MACLMAR);                                     
*%END IEWBIND;                                                                  
