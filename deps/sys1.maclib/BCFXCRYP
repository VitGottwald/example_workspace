*/***START OF SPECIFICATIONS******************************************/         
*/*                                                                  */         
*/*  $MAC (BCFXCRYP) COMP(05103) PROD(BCF):                          */         
*/*                                                                  */         
*/*01* MACRO NAME: BCFXCRYP                                          */         
*/*                                                                  */         
*/*01* DESCRIPTIVE NAME: Interface to invoke the protected key       */         
*/*                      encryption service                          */         
*/*                                                                  */         
*/*01* COPYRIGHT:                                                    */         
*/*                                                                  */         
*/*    LICENSED MATERIALS - PROPERTY OF IBM                          */         
*/*                                                                  */         
*/*    5650-ZOS                                                      */         
*/*                                                                  */         
*/*    COPYRIGHT IBM CORP. 2017                                      */         
*/*                                                                  */         
*/*01* STATUS = HBB77B0                                              */         
*/*                                                                  */         
*/*01* EXTERNAL CLASSIFICATION: PI                                   */         
*/*01* END OF EXTERNAL CLASSIFICATION:                               */         
*/*                                                                  */         
*/*01* FUNCTION:                                                     */         
*/*                                                                  */         
*/*    This macro provides an interface to the BCFCRYPT callable     */         
*/*    service (used to provide encrypt/decrypt/MAC functions).      */         
*/*                                                                  */         
*/*01* ENVIRONMENT:                                                  */         
*/*                                                                  */         
*/*    Minimum authorization: Problem state. Any PSW key.            */         
*/*                                                                  */         
*/*    Dispatchable unit mode: Task or SRB mode.                     */         
*/*                                                                  */         
*/*    Cross Memory Mode: Any PASN, any HASN, any SASN.              */         
*/*                                                                  */         
*/*    Addressing Mode:  31- or 64-bit addressing mode.              */         
*/*                                                                  */         
*/*                      If in AMODE 64, specify SYSSTATE AMODE64=YES*/         
*/*                      before invoking this macro.                 */         
*/*                                                                  */         
*/*    ASC mode:         Primary or Access Register ASC mode.        */         
*/*                                                                  */         
*/*                      If in access register ASC mode, specify     */         
*/*                      SYSSTATE ASCENV=AR before invoking this     */         
*/*                      macro.                                      */         
*/*                                                                  */         
*/*    Interrupt status: Enabled for I/O and external interrupts.    */         
*/*                                                                  */         
*/*    Locks:            The caller must not be locked.              */         
*/*                                                                  */         
*/*    Serialization:    N/A                                         */         
*/*                                                                  */         
*/*01* PROGRAMMING REQUIREMENTS:                                     */         
*/*                                                                  */         
*/*    The caller must include the BCFZCRYP macro to get the         */         
*/*    mappings for the CRYPI, CRYPV, and CRYPWA structures.         */         
*/*                                                                  */         
*/*01* RESTRICTIONS:                                                 */         
*/*                                                                  */         
*/*    None                                                          */         
*/*                                                                  */         
*/*01* INPUT REGISTER INFORMATION:                                   */         
*/*                                                                  */         
*/*    Before issuing the BCFXCRYP macro, the caller does not have   */         
*/*    to place any information into any general purpose register    */         
*/*    (GPR) or access register (AR) unless using it in register     */         
*/*    notation for a particular parameter, or using it as a base    */         
*/*    register.                                                     */         
*/*                                                                  */         
*/*01* OUTPUT REGISTER INFORMATION:                                  */         
*/*                                                                  */         
*/*    When control returns to the caller, the GPRs contain:         */         
*/*                                                                  */         
*/*    REGISTER    CONTENTS                                          */         
*/*                                                                  */         
*/*    0           Reason code                                       */         
*/*                                                                  */         
*/*    1           Used as a work register by the system             */         
*/*                                                                  */         
*/*    2-13        Unchanged                                         */         
*/*                                                                  */         
*/*    14          Used as a work register by the system             */         
*/*                                                                  */         
*/*    15          Return code                                       */         
*/*                                                                  */         
*/*    When control returns to the caller, the ARs contain:          */         
*/*                                                                  */         
*/*    REGISTER    CONTENTS                                          */         
*/*                                                                  */         
*/*    0-1         Used as work registers by the system              */         
*/*                                                                  */         
*/*    2-13        Unchanged                                         */         
*/*                                                                  */         
*/*    14-15       Used as work registers by the system              */         
*/*                                                                  */         
*/*    Some callers depend on register contents remaining the same   */         
*/*    before and after issuing a service. If the system changes the */         
*/*    contents of registers on which the caller depends, the caller */         
*/*    must save them before issuing the service, and restore them   */         
*/*    after the system returns control.                             */         
*/*                                                                  */         
*/*01* PERFORMANCE IMPLICATIONS:                                     */         
*/*                                                                  */         
*/*    None                                                          */         
*/*                                                                  */         
*/*01* INVOCATION FORMAT:                                            */         
*/*                                                                  */         
*/* PL/X:                                                            */         
*/*                                                                  */         
*/*   ?Ýxlabel:¨BCFXCRYP(workarea,cryp_block)                        */         
*/*                     Ý INIT_CRYPI ! FLUSH_STATS ¨                 */         
*/*                     RETCODE(rc,rs)                               */         
*/*                                                                  */         
*/* ASSEMBLER:                                                       */         
*/*                                                                  */         
*/*   Ýplabel¨ BCFXCRYP MF=L                                         */         
*/*   Ýxlabel¨ BCFXCRYP workarea,cryp_block,request,MF=(E,plabel)    */         
*/*   Ýxlabel¨ BCFXCRYP workarea,cryp_block,request                  */         
*/*                                                                  */         
*/* Where:                                                           */         
*/*                                                                  */         
*/*      Ýplabel¨                                                    */         
*/*          is an symbol that is the name of the BCFXCRYP macro     */         
*/*          invocation when creating the parmlist.                  */         
*/*            Assembler:                                            */         
*/*              The name must begin in column 1 and conform to the  */         
*/*              rules for an ordinary assembler language symbol.    */         
*/*            PL/X:                                                 */         
*/*              Not applicable.                                     */         
*/*          There is no default.                                    */         
*/*                                                                  */         
*/*      Ýxlabel¨                                                    */         
*/*          is an optional symbol that is the name of the BCFXCRYP  */         
*/*          macro invocation.                                       */         
*/*            Assembler:                                            */         
*/*              The name must begin in column 1 and conform to the  */         
*/*              rules for an ordinary assembler language symbol.    */         
*/*            PL/X:                                                 */         
*/*              The macro label (MACLABEL).                         */         
*/*          The default is no name.                                 */         
*/*                                                                  */         
*/*      workarea                                                    */         
*/*          is a 512-byte work area for use by the BCFCRYPT service */         
*/*            Assembler:                                            */         
*/*              A required positional parameter that contains       */         
*/*              either the name (RS-type) or address in register    */         
*/*              (2)-(12)                                            */         
*/*            PL/X:                                                 */         
*/*              A CHAR(*) variable                                  */         
*/*          Notes:                                                  */         
*/*            See "BCFCRYPT work area size constant" and            */         
*/*            "BCFCRYPT work area declaration" in BCFZCRYP macro.   */         
*/*                                                                  */         
*/*            The work area does not need to be initialized         */         
*/*            prior to the first use, nor does it need to be        */         
*/*            cleared prior to subsequent uses.                     */         
*/*                                                                  */         
*/*            CRYPWA is the name of the work area defined from      */         
*/*            BCFZCRYP if you specify %CRYPWA_DCL = 'YES'           */         
*/*                                                                  */         
*/*      cryp_block                                                  */         
*/*          is either the CRYPV or CRYPI parm block.                */         
*/*            Assembler:                                            */         
*/*              A required positional parameter that contains       */         
*/*              either the name (RS-type) or address in register    */         
*/*              (2)-(12)                                            */         
*/*            PL/X:                                                 */         
*/*              A CHAR(*) variable                                  */         
*/*          Notes:                                                  */         
*/*              BCFZCRYP will declare mappings of the CRYPI and     */         
*/*              CRYPV areas for filling in. By default, these       */         
*/*              mappings are BASED for PL/X.                        */         
*/*                                                                  */         
*/*      request                                                     */         
*/*          indicates the type of operation requested               */         
*/*            Assembler:                                            */         
*/*              An optional positional parameter that contains      */         
*/*              one of the following literals:                      */         
*/*                INIT_CRYPI                                        */         
*/*                FLUSH_STATS                                       */         
*/*                nil (no positional parameter specified)           */         
*/*            PL/X:                                                 */         
*/*              One of these macro keys (mutually exclusive):       */         
*/*                INIT_CRYPI                                        */         
*/*                FLUSH_STATS                                       */         
*/*          Notes:                                                  */         
*/*            The behavior changes based on the request:            */         
*/*              INIT_CRYPI                                          */         
*/*                This invocation is to set up the initial query.   */         
*/*                The cryp_block passed must be a CRYPI, and there  */         
*/*                must be only one task accessing the CRYPI.        */         
*/*              FLUSH_STATS                                         */         
*/*                This invocation is to force recording of any      */         
*/*                crypto statistics data before freeing the CRYPI.  */         
*/*                The cryp_block passed must be a CRYPI, and there  */         
*/*                must be only one task accessing the CRYPI.        */         
*/*              neither INIT_CRYPI nor FLUSH_STATS specified        */         
*/*                This invocation is perform the operation          */         
*/*                requested in the CRYPV. The cryp_block passed     */         
*/*                must be a CRYPV.                                  */         
*/*                                                                  */         
*/*      rc                                                          */         
*/*          is the return code from the requested operation.        */         
*/*            Assembler:                                            */         
*/*              Not applicable: rc is returned in register 15       */         
*/*            PL/X:                                                 */         
*/*              A Fixed(32) variable                                */         
*/*                                                                  */         
*/*      rs                                                          */         
*/*          is the reason code from the requested operation.        */         
*/*            Assembler:                                            */         
*/*              Not applicable: rc is returned in register 0        */         
*/*            PL/X:                                                 */         
*/*              A Fixed(32) variable                                */         
*/*                                                                  */         
*/*01* RETURN CODES:                                                 */         
*/*                                                                  */         
*/*                 Macro BCFZCRYP provides equate symbols for the   */         
*/*                 return and reason codes.                         */         
*/*                                                                  */         
*/*       00        Name: CRYP_RC_OK                                 */         
*/*                                                                  */         
*/*                 Meaning:  BCFXCRYP request successful.           */         
*/*                                                                  */         
*/*                 Action: None required.                           */         
*/*                                                                  */         
*/*       08        Name: CRYP_RC_APPL_ERR                           */         
*/*                                                                  */         
*/*                 Meaning:  BCFXCRYP request was not successful    */         
*/*                           because of caller parameter(s).        */         
*/*                                                                  */         
*/*                 Action: Refer to action under the individual     */         
*/*                         reason code.                             */         
*/*                                                                  */         
*/*                 HEX REASON  MEANING/ACTION                       */         
*/*                 CODE                                             */         
*/*                                                                  */         
*/*                 xxxx0801    Name: CRYP_RS_8_INSUF_IN             */         
*/*                                                                  */         
*/*                             Meaning: CRYPV_TEXT_LEN is too short */         
*/*                                      for the mode specified.     */         
*/*                                                                  */         
*/*                             Action: Provide sufficient text for  */         
*/*                                     the operation.               */         
*/*                                                                  */         
*/*                 xxxx0802    Name: CRYP_RS_8_OVERLAP              */         
*/*                                                                  */         
*/*                             Meaning: An output field             */         
*/*                                      destructively overlaps an   */         
*/*                                      input field.                */         
*/*                                                                  */         
*/*                             Action: Ensure that the output field */         
*/*                                     does not destructively       */         
*/*                                     overlap the input field.     */         
*/*                                     It is acceptable for the     */         
*/*                                     output field to exactly      */         
*/*                                     overlap the input field.     */         
*/*                                                                  */         
*/*                 xxxx0803    Name: CRYP_RS_8_BAD_WRAP             */         
*/*                                                                  */         
*/*                             Meaning: The protected key contains  */         
*/*                                      an incorrect wrapping key   */         
*/*                                      VP.                         */         
*/*                                                                  */         
*/*                             Action: Retrieve the protected key   */         
*/*                                     for the operation again.     */         
*/*                                                                  */         
*/*                 xxxx0804    Name: CRYP_RS_8_BAD_CRYPI_FLAGS      */         
*/*                                                                  */         
*/*                             Meaning: CRYPI was passed directly,  */         
*/*                                      but no valid flag was set.  */         
*/*                                                                  */         
*/*                             Action: Ensure that the CRYPV is     */         
*/*                                     provided when neither        */         
*/*                                     INIT_CRYPI or FLUSH_STATS    */         
*/*                                     are used.                    */         
*/*                                                                  */         
*/*                 xxxx0805    Name: CRYP_RS_8_BAD_BCFXCRYP_OPT     */         
*/*                                                                  */         
*/*                             Meaning: CRYPV was passed to BCFXCRYP*/         
*/*                                      with a CRYPI-only option.   */         
*/*                                                                  */         
*/*                             Action: Ensure that the CRYPI is     */         
*/*                                     provided when either         */         
*/*                                     INIT_CRYPI or FLUSH_STATS    */         
*/*                                     are used.                    */         
*/*                                                                  */         
*/*                 xxxx0806    Name: CRYP_RS_8_BAD_KEY1_LENGTH      */         
*/*                                                                  */         
*/*                             Meaning: KEY1 length is not valid.   */         
*/*                                                                  */         
*/*                             Action: Provide a valid key for the  */         
*/*                                     operation.                   */         
*/*                                                                  */         
*/*                 xxxx0807    Name: CRYP_RS_8_XTS_KEYLEN_MISMATCH  */         
*/*                                                                  */         
*/*                             Meaning: KEY1 and KEY2 aren't the    */         
*/*                                      same size (XTS only).       */         
*/*                                                                  */         
*/*                             Action: Provide either two AES-128   */         
*/*                                     or two AES-256 keys.         */         
*/*                                                                  */         
*/*                 xxxx0808    Name: CRYP_RS_8_CRYPI_NOT_INITED     */         
*/*                                                                  */         
*/*                             Meaning: CRYPI referenced from CRYPV */         
*/*                                      was not properly            */         
*/*                                      initialized.                */         
*/*                                                                  */         
*/*                             Action: Ensure that the CRYPI was    */         
*/*                                     initialized with INIT_CRYPI  */         
*/*                                     before attempting any other  */         
*/*                                     operations.                  */         
*/*                                                                  */         
*/*       0C        Name: CRYP_RC_ENV_ERR                            */         
*/*                                                                  */         
*/*                 Meaning:  BCFXCRYP request was not successful    */         
*/*                           because of environmental issue(s).     */         
*/*                                                                  */         
*/*                 Action: Refer to action under the individual     */         
*/*                         reason code.                             */         
*/*                                                                  */         
*/*                 HEX REASON  MEANING/ACTION                       */         
*/*                 CODE                                             */         
*/*                                                                  */         
*/*                 xxxx0C01    Name: CRYP_RS_12_NO_CPACF            */         
*/*                                                                  */         
*/*                             Meaning: There is no MSA support on  */         
*/*                                      this machine                */         
*/*                                                                  */         
*/*                             Action: Provide sufficient text for  */         
*/*                                     the operation                */         
*/*                                                                  */         
*/*                 xxxx0C02    Name: CRYP_RS_12_UNSUP_MODE          */         
*/*                                                                  */         
*/*                             Meaning: The requested mode is not   */         
*/*                                      supported                   */         
*/*                                                                  */         
*/*                             Action: Provide sufficient text for  */         
*/*                                     the operation                */         
*/*                                                                  */         
*/*                 xxxx0C03    Name: CRYP_RS_12_UNSUP_FC            */         
*/*                                                                  */         
*/*                             Meaning: The requested key size or   */         
*/*                                      key format is not supported */         
*/*                                                                  */         
*/*                             Action: Provide sufficient text for  */         
*/*                                     the operation                */         
*/*                                                                  */         
*/*                 xxxx0C04    Name: CRYP_RS_12_INTERNAL_ERROR      */         
*/*                                                                  */         
*/*                             Meaning: Internal error occurred.    */         
*/*                                      Please contact IBM service. */         
*/*                                                                  */         
*/*                             Action: Provide sufficient text for  */         
*/*                                     the operation                */         
*/*                                                                  */         
*/*01* REASON CODES:                                                 */         
*/*                                                                  */         
*/*       Reason codes, as appropriate, are defined under their      */         
*/*       corresponding return code.                                 */         
*/*                                                                  */         
*/*01* NOTES:                                                        */         
*/*                                                                  */         
*/*    The module that invokes this macro must build the appropriate */         
*/*    CRYPI and/or CRYPV blocks to pass in.                         */         
*/*    - The CRYPI block is where all the information that remains   */         
*/*      the same is kept.                                           */         
*/*    - The CRYPV block is where all the information that changes   */         
*/*      on a per-call basis is kept.                                */         
*/*    - The CRYPWA is the dynamic area for the crypto operation.    */         
*/*                                                                  */         
*/* 1. Up front, you will have some main module that is responsible  */         
*/*    for setting up (perhaps OPENing a dataset). This module will: */         
*/*    - Allocate a CRYPI block (private, fetch-protected)           */         
*/*    - Clear the CRYPI                                             */         
*/*    - Fill in the fields in CRYPI_HDR                             */         
*/*        CRYPI_ID                                                  */         
*/*        CRYPI_VER                                                 */         
*/*        CRYPI_LEN                                                 */         
*/*    - Retrieve the key from your provider (for example, using     */         
*/*      CSNBKRR2 with rule "PROTKEY " if running authorized).       */         
*/*    - Fill in the fields in CRYPI_CallerInfo with the information */         
*/*      that won't change from call to call (mode/key information)  */         
*/*        CRYPI_MODE                                                */         
*/*        CRYPI_KEY1_LEN                                            */         
*/*        CRYPI_KEY1                                                */         
*/*        CRYPI_KEY2_LEN (for XTS mode)                             */         
*/*        CRYPI_KEY2     (for XTS mode)                             */         
*/*    - Invoke BCFXCRYP INIT_CRYPI to fill in internal fields       */         
*/*      (some CPACF query information and related fields)           */         
*/*      For ASM callers, either use the standard form or the        */         
*/*      list/execute forms. The list form only defines the          */         
*/*      two-entry parmlist and will ignore the three positional     */         
*/*      parameters on the macro invocation, issuing an MNOTE if     */         
*/*      they are present.                                           */         
*/*    NOTE: Do not modify any of the fields in the CRYPI block      */         
*/*          after this point.                                       */         
*/*                                                                  */         
*/* 2. For each task that will be calling the BCFCRYPT service:      */         
*/*    The first time:                                               */         
*/*    - Allocate a CRYPWA block (private, fetch-protected)          */         
*/*    - Allocate a CRYPV block (private, fetch-protected)           */         
*/*    - Clear the CRYPV                                             */         
*/*    - Fill in the fields in CRYPV_HDR                             */         
*/*        CRYPV_ID                                                  */         
*/*        CRYPV_VER                                                 */         
*/*        CRYPV_LEN                                                 */         
*/*        CRYPV_CRYPI@                                              */         
*/*    Then, for each call:                                          */         
*/*    - Fill in the relevant per-call fields:                       */         
*/*        CRYPV_F_DECIPH_OP                                         */         
*/*        CRYPV_AES_CHAIN                                           */         
*/*        CRYPV_TEXT_LEN                                            */         
*/*        CRYPV_INPUT_ADDR                                          */         
*/*        CRYPV_INPUT_ALET                                          */         
*/*        CRYPV_OUTPUT_ADDR                                         */         
*/*        CRYPV_OUTPUT_ALET                                         */         
*/*        CRYPV_ADDT_ADDR     (GCM only, not currently supported)   */         
*/*        CRYPV_ADDT_LEN      (GCM only, not currently supported)   */         
*/*        CRYPV_ADDT_ALET     (GCM only, not currently supported)   */         
*/*        CRYPV_XTS_TweakVal  (XTS only)                            */         
*/*        CRYPV_AES_CHAIN     (chaining is not currently supported) */         
*/*    - Invoke BCFXCRYP to perform the requested operation          */         
*/*                                                                  */         
*/* 3. At the end of a task that has allocated a CRYPWA and a CRYPV, */         
*/*    the module will:                                              */         
*/*    - Clear the CRYPV and CRYPWA                                  */         
*/*    - Free the storage                                            */         
*/*                                                                  */         
*/* 4. At the very end, after ALL the tasks using CRYPVs pointing to */         
*/*    the CRYPI are done, the main module will:                     */         
*/*    - Invoke BCFCRYPT FLUSH_STATS                                 */         
*/*    - Clear the CRYPI                                             */         
*/*    - Free the storage                                            */         
*/*                                                                  */         
*/*01* ABEND CODES:                                                  */         
*/*                                                                  */         
*/*     None                                                         */         
*/*                                                                  */         
*/*01* ABEND REASON CODES:                                           */         
*/*                                                                  */         
*/*     n/a                                                          */         
*/*                                                                  */         
*/*01* MODULE TYPE: Bilingual PL/X and ASM macro                     */         
*/*                                                                  */         
*/*02* PROCESSOR: PL/X or ASM                                        */         
*/*                                                                  */         
*/*01* MACRO USAGE NOTES:                                            */         
*/*                                                                  */         
*/*     1) CRYPI, CRYPV, and CRYPWA must be in Primary, but the      */         
*/*        input, output, and additional data fields pointed to from */         
*/*        the CRYPV control block may be ALET-qualified.            */         
*/*                                                                  */         
*/*     2) The callable service provides no recovery and performs    */         
*/*        minimal checking of input fields, so make sure you pass   */         
*/*        the correct information.                                  */         
*/*                                                                  */         
*/*01* COMPONENT: 05103 (BCF)                                        */         
*/*                                                                  */         
*/*01* DISTRIBUTION LIBRARY: AMACLIB                                 */         
*/*                                                                  */         
*/*01* CHANGE-ACTIVITY:                                              */         
*/*                                                                  */         
*/* $L0=BCFPROT  HBB77B0,161017, PDER: BCFCRYPT service              */         
*/* $A1=OA58246  HBB77C0,190730, PDER: Make bilingual                */         
*/* $A2=OA59347  HBB77C0,200113, PDER: Use LLGT for CVTPTR in AM(64) */         
*/*                                                                  */         
*/**** END OF SPECIFICATIONS *****************************************/         
*        %GOTO XCRYPPLX  ;          /* Bilingual header                         
         MACRO                                                                  
&XLABEL  BCFXCRYP &WORKAREA,&CRYP_BLOCK,&REQUEST,&MF=                           
.********************************************************************           
.* External Macro Variables                                                     
.********************************************************************           
         GBLC  &SYSASCE                                                         
         GBLC  &SYSAM64                                                         
         GBLC  &XCRYPL                 Address of BCFCRPT parm list             
.********************************************************************           
.* Internal Macro Variables                                                     
.********************************************************************           
         LCLC  &PLABEL                 Name of the parm list                    
         LCLC  &NX                     Contains SYSNDX for labels               
         LCLC  &LL,&LR,&ST                                         @A2C         
         LCLC  &ADSIZ,&ADDCL                                                    
.********************************************************************           
.* Initialize various macro variables                                           
.********************************************************************           
&NX      SETC  '&SYSNDX'                                                        
.********************************************************************           
.* Set up based on our AMODE                                                    
.********************************************************************           
         SYSSTATE TEST                                                          
         AIF   ('&SYSAM64' EQ 'YES').AM640                                      
&LL      SETC  'L'                                                 @A2A         
&LR      SETC  'LR'                                                             
&ST      SETC  'ST'                                                             
&ADDCL   SETC  'A'                                                              
&ADSIZ   SETC  '4'                                                              
         AGO   .AM31640                                                         
.AM640   ANOP                                                                   
&LL      SETC  'LLGT'                                              @A2A         
&LR      SETC  'LGR'                                                            
&ST      SETC  'STG'                                                            
&ADDCL   SETC  'AD'                                                             
&ADSIZ   SETC  '8'                                                              
.AM31640 ANOP                                                                   
.********************************************************************           
.* Check for the macro form (list, execute, standard)                           
.********************************************************************           
.CHKMFL  AIF   ('&MF(1)' NE 'L').CHKMFS                                         
.* List form (the three positional parms are ignored)                           
.CHKMFL1 AIF   ('&WORKAREA' EQ '').CHKMFL2                                      
         MNOTE 0,'The value for "WORKAREA" is ignored.'                         
.CHKMFL2 AIF   ('&CRYP_BLOCK' EQ '').CHKMFL3                                    
         MNOTE 0,'The value for "CRYP_BLOCK" is ignored.'                       
.CHKMFL3 AIF   ('&REQUEST' EQ '').CHKMFL4                                       
         MNOTE 0,'The value for "REQUEST" is ignored.'                          
.CHKMFL4 ANOP                                                                   
&PLABEL  SETC  '&XLABEL'                                                        
&PLABEL  DS    2&ADDCL                                                          
         AGO   .END                                                             
.CHKMFS  AIF   ('&MF(1)' NE '' AND '&MF(1)' NE 'S').CHKMFE                      
.* Standard form (inline declares)                                              
&PLABEL  SETC  '&XLABEL.P'                                                      
&XLABEL  BAL   1,XCRP&NX.S                                                      
         CNOP  0,4                  Force parm list to word boundary            
&PLABEL  DS    2&ADDCL              Inline parmlist                             
XCRP&NX.S DS    0H                                                              
         AGO   .CHKMFX                                                          
.CHKMFE  AIF   ('&MF(1)' NE 'E').BADMF                                          
.* Execute form                                                                 
         AIF   (K'&MF(2) GT 0).MFEGOOD                                          
         MNOTE 8,'WHEN "L" IS SPECIFIED FOR THE "MF" KEY, POSITIONAL ARX        
               G 2 IS REQUIRED.'                                                
         AGO   .END                                                             
.MFEGOOD ANOP                                                                   
&PLABEL  SETC  '&MF(2)'                                                         
&XLABEL  DS    0H                                                               
         AGO   .CHKMFX                                                          
.BADMF   ANOP                                                                   
         MNOTE 8,'"MF" must be one of "", "L", "E", or "S".'                    
         AGO   .END                                                             
.CHKMFX  ANOP                                                                   
.********************************************************************           
.* Check for all required keywords and the correct number of fields             
.********************************************************************           
.CHKWA   AIF   ('&WORKAREA' NE '').CHKCRYP                                      
         MNOTE 8,'A value for "WORKAREA" must be provided.'                     
         AGO   .END                                                             
.CHKCRYP AIF   ('&CRYP_BLOCK' NE '').CHKREQ                                     
         MNOTE 8,'A value for "CRYP_BLOCK" must be provided.'                   
         AGO   .END                                                             
.CHKREQ  AIF   ('&REQUEST' EQ '' OR '&REQUEST' EQ 'INIT_CRYPI' OR      *        
                '&REQUEST' EQ 'FLUSH_STATS').PARMSOK                            
         MNOTE 8,'The value for "REQUEST" must be an empty string, "INIX        
               T_CRYPI", or "FLUSH_STATS".'                                     
         AGO   .END                                                             
.********************************************************************           
.* Parms look OK.                                                               
.********************************************************************           
.PARMSOK ANOP                          Parms look decent                        
.********************************************************************           
.* Load R15 with the CRYP_BLOCK address and do checking if needed.              
.********************************************************************           
.CRYPBLK AIF   ('&CRYP_BLOCK'(1,1) NE '(').CRYPVAR                              
         AIF   (T'&CRYP_BLOCK(1) NE 'N').CRYPREG                                
         AIF   ('&CRYP_BLOCK(1)' GE '2' AND                            *        
                '&CRYP_BLOCK(1)' LE '12').CRYPREG                               
         MNOTE 8,'CRYP_BLOCK NOT SPECIFIED IN REGISTER (2)-(12)'                
         AGO   .END                                                             
.CRYPREG ANOP                                                                   
         &LR   15,&CRYP_BLOCK(1)       Load CRYP_BLOCK addr into R15            
         AGO   .VALCRYI                                                         
.CRYPVAR ANOP                                                                   
         LA    15,&CRYP_BLOCK          Load CRYP_BLOCK addr into R15            
.VALCRYI AIF   ('&REQUEST' EQ '').WRKAREA                                       
XCRYPIU  USING CRYPI,15                                                         
.* If this is INIT_CRYPI or FLUSH_STATS, make sure we have a CRYPI              
         CLC   XCRYPIU.CRYPI_ID,=CL4'CRYI'                                      
         BE    XCRP&NX.T                                                        
         LHI   15,8                                                             
         ICM   0,B'1111',=X'99990805'                                           
         B     XCRP&NX.Z                                                        
XCRP&NX.T DS   0H                                                               
.* Looks good. Set the correct flag.                                            
.CRYINIT AIF   ('&REQUEST' NE 'INIT_CRYPI').CRYFLSH                             
         OI    XCRYPIU.CRYPI_Flags,CRYPI_F_InitQuery                            
         DROP  XCRYPIU                                                          
         AGO   .WRKAREA                                                         
.CRYFLSH ANOP                                                                   
         OI    XCRYPIU.CRYPI_Flags,CRYPI_F_ForceRec                             
         DROP  XCRYPIU                                                          
.********************************************************************           
.* Load R0 with the WORKAREA address.                                           
.********************************************************************           
.WRKAREA AIF   ('&WORKAREA'(1,1) NE '(').WRKAVAR                                
         AIF   (T'&WORKAREA(1) NE 'N').WRKAREG                                  
         AIF   ('&WORKAREA(1)' GE '2' AND                              *        
                '&WORKAREA(1)' LE '12').WRKAREG                                 
         MNOTE 8,'WORKAREA NOT SPECIFIED IN REGISTER (2)-(12)'                  
         AGO   .END                                                             
.WRKAREG ANOP                                                                   
         &LR   0,&WORKAREA(1)         Load WORKAREA addr into R0                
         AGO   .INVCRYP                                                         
.WRKAVAR ANOP                                                                   
         LA    0,&WORKAREA            Load WORKAREA addr into R0                
.********************************************************************           
.* Load R0 with the WORKAREA address.                                           
.********************************************************************           
.INVCRYP ANOP                                                                   
         IHBINNRA &PLABEL              Load GR1 with parmlist addr              
         &ST   0,0(1)                  Store WORKAREA addr into plist           
         &ST   15,&ADSIZ+0(1)          Store CRYP_BLOCK addr into plist         
XCVTU    USING CVT,15                                                           
         &LL   15,CVTPTR(,0)           CVT (base R0 treated as 0)  @A2C         
         L     15,XCVTU.CVTCSRT        Callable service request table           
         DROP  XCVTU                                                            
         L     15,92(,15)              BCFVTABL=entry 24 (4*(24-1)=92)          
         L     15,4(,15)               First word is the count                  
*                                      Next word is addr of BCFCRYPT            
         BASR  14,15                                                            
XCRP&NX.Z DS   0H                                                               
.END     MEND                                                                   
* Terminating PL/X comment                                           */         
*        %XCRYPPLX : ;                                                          
*%BCFXCRYP:                                                                     
*  MACRO                                                                        
*   KEYS(INIT_CRYPI,FLUSH_STATS,RETCODE);                                       
*                                                                               
*/********************************************************************/         
*/* Standard External Macro Variables                                */         
*/********************************************************************/         
*DCL                                                                            
*  SysASCE      EXTERNAL CHARACTER, /* ?SYSSTATE TEST result         */         
*  SysAM64      EXTERNAL CHARACTER; /* ?SYSSTATE TEST result         */         
*                                                                               
*/********************************************************************/         
*/* Internal macro variables                                         */         
*/********************************************************************/         
*DCL                                                                            
*  WORKAREA_           CHAR,        /* BCFCRYPT workarea ÝCHAR(*)¨   */         
*  CRYP_BLOCK_         CHAR,        /* CRYP block        ÝCHAR(*)¨   */         
*  RC_                 CHAR,        /* return code       ÝFIXED(32)¨ */         
*  RS_                 CHAR;        /* reason code       ÝFIXED(32)¨ */         
*                                                                               
*/* Check for all required keywords and the correct number of fields */         
*IF NUMBER(MACLIST) ^= 2 THEN                                                   
*  DO;                                                                          
*    ANS MSG(MACNAME!!': MACLIST must have exactly 2 fields')                   
*        MSGLEVEL(8);                                                           
*    RETURN CODE(8);                                                            
*  END;                                                                         
*WORKAREA_   = MACLIST(1);                                                      
*CRYP_BLOCK_ = MACLIST(2);                                                      
*IF ^MACKEY(RETCODE) THEN                                                       
*  DO;                                                                          
*    ANS MSG(MACNAME!!': You must specify RETCODE') MSGLEVEL(8);                
*    RETURN CODE(8);                                                            
*  END;                                                                         
*IF (NUMBER(RETCODE) ^= 2) THEN                                                 
*  DO;                                                                          
*    ANS MSG(MACNAME!!': RETCODE must have exactly 2 fields')                   
*        MSGLEVEL(8);                                                           
*    RETURN CODE(8);                                                            
*  END;                                                                         
*RC_ = RETCODE(1);                                                              
*RS_ = RETCODE(2);                                                              
*IF (MACKEY(INIT_CRYPI) & MACKEY(FLUSH_STATS)) THEN                             
*  DO;                                                                          
*    ANS MSG(MACNAME!!': You cannot specify both INIT_CRYPI and '!!             
*            'FLUSH_STATS') MSGLEVEL(8);                                        
*    RETURN CODE(8);                                                            
*  END;                                                                         
*                                                                               
*ANS('?SYSSTATE (TEST);') RESCAN;       /* Establish mac vars SysASCE           
*                                          and SysAM64               */         
*                                                                               
*/********************************************************************/         
*/* Set up appropriate entry point for our current AMODE.            */         
*/********************************************************************/         
*IF SysAm64 = 'YES' THEN                                                        
*  DO;  /* AMODE is 64 */                                                       
*    BCFCRYPT_ = 'BCFVTAB1_ENT(BCFCRYPT_IDX)->I64ANY';                          
*  END; /* AMODE is 64 */                                                       
*ELSE                                                                           
*  DO;  /* AMODE is 31 */                                                       
*    BCFCRYPT_ = 'BCFVTAB1_ENT(BCFCRYPT_IDX)->I31ANY';                          
*  END; /* AMODE is 31 */                                                       
*                                                                               
*ANS(COMMENT('?'!!MACNAME!!MACLIST!!' '!!MACKEYS)) COL(MACCOL);                 
*                                                                               
*/* Define unique label for the DO group                             */         
*XCRYP_PROC_  = 'XCRYP'!!MACINDEX;                                              
*                                                                               
*/********************************************************************/         
*/* Make the actual call. Using a BEGIN group to hide CRYPI Dcl.     */         
*/********************************************************************/         
*BLOCKANSWER COL(MACCOL);                                                       
*'Begin;                                                              '         
*'XCRYP_PROC_: Do;                                                    '         
*ENDANSWER;                                                                     
*IF (MACKEY(INIT_CRYPI) ! MACKEY(FLUSH_STATS)) THEN                             
*  DO;                                                                          
*    BLOCKANSWER COL(MACCOL);                                                   
*'  Dcl 1 X Like(CRYPI) Based(Addr(CRYP_BLOCK_));                     '         
*'  If X.CRYPI_ID ^= CRYPI_ID_C Then                                  '         
*'    Do;                                                             '         
*'      /* Most likely here that CRYPV was passed instead of CRYPI  */'         
*'      RC_ = CRYP_RC_APPL_ERR;                                       '         
*'            /* Code loc !! reason code */                           '         
*'      RS_ = ''99990000''X + CRYP_RS_8_BAD_BCFXCRYP_OPT;             '         
*'      Leave XCRYP_PROC_;                                            '         
*'    End;                                                            '         
*    ENDANSWER;                                                                 
*    IF MACKEY(INIT_CRYPI) THEN                                                 
*      ANS('  X.CRYPI_F_InitQuery = ''1''b;');                                  
*    ELSE                                                                       
*      ANS('  X.CRYPI_F_ForceRec = ''1''b;');                                   
*  END;                                                                         
*BLOCKANSWER COL(MACCOL);                                                       
*'  Call BCFCRYPT_(WORKAREA_,CRYP_BLOCK_)                             '         
*'       RETCODE(RC_,RS_);                                            '         
*'End XCRYP_PROC_;                                                    '         
*'End;                                                                '         
*ENDANSWER;                                                                     
*                                                                               
*RETURN CODE(0);                                                                
*%END;                                                                          
