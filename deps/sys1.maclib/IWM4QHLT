*%IWM4QHLT: MACRO KEYS(ASID_LIST,ASID_NUM,ANSAREA,ANSLEN,QUERYLEN,      00000100
*                 RETCODE,RSNCODE,PLISTVER,MF);                         00000200
*/**** START OF SPECIFICATIONS **************************************** 00000300
*                                                                     * 00000400
*                                                                     * 00000500
*01* MACRO NAME:  IWM4QHLT                              -07/31/14-<0> * 00000600
*                                                                     * 00000700
*                                                                     * 00000800
*01* DESCRIPTIVE NAME:  Query Server Health Indicator                 * 00000900
*                                                                     * 00001000
*01* PROPRIETARY STATEMENT:                                           * 00001100
*                                                                     * 00001200
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00001300
*     5650-ZOS COPYRIGHT IBM CORP. 2015, 2017                         * 00001400
*                                                                     * 00001500
* STATUS= HBB77B0                                                     * 00001600
*                                                                     * 00001700
*                                                                     * 00001800
*                                                                     * 00001900
*01* FUNCTION:                                                        * 00002000
*                                                                     * 00002100
*      IWM4QHLT provides information about health indicators which    * 00002200
*      have been set for server address spaces via IWM4HLTH (Setting  * 00002300
*      Server Health Indicator) or IWMSRSRG (Register a Server for    * 00002400
*      Sysplex Routing). IWM4QHLT allows the caller to obtain the     * 00002500
*      health information for                                         * 00002600
*                                                                     * 00002700
*                                                                     * 00002800
*      o   all address spaces for which health indicators had been    * 00002900
*          provided                                                   * 00003000
*                                                                     * 00003100
*      o   a list of particular address spaces                        * 00003200
*                                                                     * 00003300
*                                                                     * 00003400
*                                                                     * 00003500
*      The caller must provide an area of storage in the ANSAREA      * 00003600
*      parameter and the length of that area in the ANSLEN parameter  * 00003700
*      for IWM4QHLT to place the health indicator information.        * 00003800
*      IWM4QHLT returns the actual length of the information in the   * 00003900
*      QUERYLEN parameter. The answer area is mapped by the IWMWQHAA  * 00004000
*      data area.                                                     * 00004100
*                                                                     * 00004200
*      If the storage area provided is insufficient, no data is       * 00004300
*      returned by IWM4QHLT but an appropriate return and reason code * 00004400
*      is issued and the required amount of storage is returned in    * 00004500
*      the QUERYLEN parameter. It is possible that the storage        * 00004600
*      required by IWM4QHLT may change and multiple calls are         * 00004700
*      required to obtain the information.                            * 00004800
*                                                                     * 00004900
*      If a user does not know the size of the answer area required   * 00005000
*      by the service, he should issue IWM4QHLT with ANSLEN set to    * 00005100
*      zero. The length of the answer area will be placed in          * 00005200
*      QUERYLEN.                                                      * 00005300
*                                                                     * 00005400
*      The information returned is not serialized upon return to the  * 00005500
*      caller, and so may be out of date due to a change in health    * 00005600
*      indicators.                                                    * 00005700
*                                                                     * 00005800
*01* EXTERNAL CLASSIFICATION:  PI                                     * 00005900
*                                                                     * 00006000
*01* END OF EXTERNAL CLASSIFICATION:                                  * 00006100
*                                                                     * 00006200
*01* ENVIRONMENT:                                                     * 00006300
*                                                                     * 00006400
*                                                                     * 00006500
*      Minimum authorization: Supervisor state or program key mask    * 00006600
*                        (PKM) allowing keys 0-7.                     * 00006700
*                                                                     * 00006800
*      Dispatchable unit mode: Task mode.                             * 00006900
*                                                                     * 00007000
*      Cross Memory Mode: Any PASN, any HASN, any SASN.               * 00007100
*                                                                     * 00007200
*      AMODE:            31- or 64-bit.  If in 64-Bit addressing      * 00007300
*                        mode, code SYSSTATE AMODE64=YES before       * 00007400
*                        invoking this macro.                         * 00007500
*                                                                     * 00007600
*      ASC mode:         Primary or Access Register.                  * 00007700
*                                                                     * 00007800
*                        If in Access Register ASC mode, specify      * 00007900
*                        SYSSTATE ASCENV=AR before invoking this      * 00008000
*                        macro.                                       * 00008100
*                                                                     * 00008200
*      Interrupt status: Enabled for I/O and external interrupts.     * 00008300
*                                                                     * 00008400
*      Locks:            No locks held.  FRRs may be established.     * 00008500
*                                                                     * 00008600
*      Control parameters:     The caller of IWM4QHLT must provide    * 00008700
*                        storage for an answer area mapped by         * 00008800
*                        IWMWQHAA. This answer area may reside in the * 00008900
*                        caller's primary address space, or in a      * 00009000
*                        dataspace accessible via the current unit of * 00009100
*                        work's dispatchable unit access list (DUal). * 00009200
*                                                                     * 00009300
*                                                                     * 00009400
*                                                                     * 00009500
*01* PROGRAMMING REQUIREMENTS:                                        * 00009600
*                                                                     * 00009700
*                                                                     * 00009800
*    1.  The macro CVT must be included to use this macro.            * 00009900
*                                                                     * 00010000
*    2.  The macro IWMYCON must be included to use this macro.        * 00010100
*                                                                     * 00010200
*    3.  The macro IWMPB must be in the library concatenation, since  * 00010300
*        it is included by IWMYCON.                                   * 00010400
*                                                                     * 00010500
*    4.  Note that the high order halfword of register 0, and the     * 00010600
*        reason code variable when specified, may be non-zero and     * 00010700
*        represents diagnostic data which is NOT part of the external * 00010800
*        interface.  The high order halfword should thus be excluded  * 00010900
*        from comparison with the reason code values described above. * 00011000
*        The constant, IWMRSNCODE_MASK_CONST defined in IWMYCON, may  * 00011100
*        be used for this purpose.                                    * 00011200
*                                                                     * 00011300
*    5.  All character data, unless otherwise specified, is assumed   * 00011400
*        to be left justified and padded with blanks on the right, as * 00011500
*        needed, to occupy the specified number of bytes.             * 00011600
*                                                                     * 00011700
*                                                                     * 00011800
*                                                                     * 00011900
*01* RESTRICTIONS:                                                    * 00012000
*                                                                     * 00012100
*                                                                     * 00012200
*    1.  This macro may not be used prior to the completion of WLM    * 00012300
*        address space initialization                                 * 00012400
*                                                                     * 00012500
*    2.  This macro may only be used on z/OS V2.2 or higher levels.   * 00012600
*                                                                     * 00012700
*                                                                     * 00012800
*                                                                     * 00012900
*01* INPUT REGISTER INFORMATION:                                      * 00013000
*                                                                     * 00013100
*    Before issuing the IWM4QHLT macro, the caller does not have to   * 00013200
*    place any information into any register unless using it in       * 00013300
*    register notation for a particular parameter, using it as a base * 00013400
*    register, or using it to provide the ALET of the storage area.   * 00013500
*                                                                     * 00013600
*01* OUTPUT REGISTER INFORMATION:                                     * 00013700
*                                                                     * 00013800
*    When control returns to the caller, the GPRs contain:            * 00013900
*                                                                     * 00014000
*                                                                     * 00014100
*    REGISTER  CONTENTS                                               * 00014200
*                                                                     * 00014300
*    0         Reason code if GR15 return code is non-zero            * 00014400
*                                                                     * 00014500
*    1         Used as work register by the system                    * 00014600
*                                                                     * 00014700
*    2-13      Unchanged                                              * 00014800
*                                                                     * 00014900
*    14        Used as work register by the system                    * 00015000
*                                                                     * 00015100
*    15        Return code                                            * 00015200
*                                                                     * 00015300
*                                                                     * 00015400
*                                                                     * 00015500
*    When control returns to the caller, the ARs contain:             * 00015600
*                                                                     * 00015700
*                                                                     * 00015800
*    REGISTER  CONTENTS                                               * 00015900
*                                                                     * 00016000
*    0-1       Used as work registers by the system                   * 00016100
*                                                                     * 00016200
*    2-13      Unchanged                                              * 00016300
*                                                                     * 00016400
*    14-15     Used as work registers by the system                   * 00016500
*                                                                     * 00016600
*                                                                     * 00016700
*                                                                     * 00016800
*    Some callers depend on register contents remaining the same      * 00016900
*    before and after issuing a service.  If the system changes the   * 00017000
*    contents of registers on which the caller depends, the caller    * 00017100
*    must save them before issuing the service, and restore them      * 00017200
*    after the system returns control.                                * 00017300
*                                                                     * 00017400
*01* PERFORMANCE IMPLICATIONS:                                        * 00017500
*                                                                     * 00017600
*    None                                                             * 00017700
*                                                                     * 00017800
*01* SYNTAX:                                                          * 00017900
*                                                                     * 00018000
*Ýxlabel¨  IWM4QHLT   Ý ASID_LIST=»xasid_list!NO_ASID_LISTº           * 00018100
*                          ,ASID_NUM=xasid_num¨                       * 00018200
*                      ,ANSAREA=xansarea                              * 00018300
*                      ,ANSLEN=xanslen                                * 00018400
*                      ,QUERYLEN=xquerylen                            * 00018500
*                     Ý,RETCODE=xretcode¨                             * 00018600
*                     Ý,RSNCODE=xrsncode¨                             * 00018700
*                     Ý,PLISTVER=»xplistver!IMPLIED_VERSIONº¨         * 00018800
*                    ÐÝ,MF=S¨                                         * 00018900
*                    ÔÝ,MF=(L,xmfctrl»,xmfattr!0Dº)¨                  * 00019000
*                    ¿Ý,MF=(E,xmfctrl»,COMPLETEº)¨                    * 00019100
*                                                                     * 00019200
*                                                                     * 00019300
*      Where:                                                         * 00019400
*                                                                     * 00019500
*                                                                     * 00019600
*      Ýxlabel¨                                                       * 00019700
*          is an optional symbol, starting in column 1, that is the   * 00019800
*          name on the IWM4QHLT macro invocation.  The name must      * 00019900
*          conform to the rules for an ordinary assembler language    * 00020000
*          symbol.                                                    * 00020100
*          DEFAULT: No name.                                          * 00020200
*                                                                     * 00020300
*                                                                     * 00020400
*                                                                     * 00020500
*                                                                     * 00020600
*      ÝASID_LIST(»xasid_list!NO_ASID_LISTº)                          * 00020700
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00020800
*          only) of an optional character input which specifies an    * 00020900
*          area for the list of ASIDs for which health information    * 00021000
*          should be returned. Each entry (ASID) is a halfword field  * 00021100
*          in hexadecimal format. A maximum number of 100 entries in  * 00021200
*          the list is supported.                                     * 00021300
*          DEFAULT: NO_ASID_LIST indicates that no ASID list was      * 00021400
*          passed and health information for all address spaces for   * 00021500
*          which health indicators have been provided should be       * 00021600
*          returned.                                                  * 00021700
*                                                                     * 00021800
*                                                                     * 00021900
*          ASID_NUM(xasid_num)¨                                       * 00022000
*              is the name (RS-type) (or address in register (2)-(12) * 00022100
*              ASM only) of a required fullword input which contains  * 00022200
*              the number of ASIDs specified in ASID_LIST.            * 00022300
*                                                                     * 00022400
*                                                                     * 00022500
*                                                                     * 00022600
*                                                                     * 00022700
*                                                                     * 00022800
*                                                                     * 00022900
*      ANSAREA(xansarea)                                              * 00023000
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00023100
*          only) of a required character output that contains the     * 00023200
*          address of a storage area to hold the information returned * 00023300
*          by IWM4QHLT. The area is mapped by the IWMWQHAA mapping    * 00023400
*          macro.                                                     * 00023500
*                                                                     * 00023600
*                                                                     * 00023700
*                                                                     * 00023800
*                                                                     * 00023900
*      ANSLEN(xanslen)                                                * 00024000
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00024100
*          only) of a required fullword input that contains the       * 00024200
*          length of the storage area (answer area) you are providing * 00024300
*          on ANSAREA.                                                * 00024400
*                                                                     * 00024500
*                                                                     * 00024600
*                                                                     * 00024700
*                                                                     * 00024800
*      QUERYLEN(xquerylen)                                            * 00024900
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00025000
*          only) of a required fullword output which contains the     * 00025100
*          length of the storage area required by the IWM4QHLT        * 00025200
*          service.  The length of the area may change between        * 00025300
*          invocations.                                               * 00025400
*                                                                     * 00025500
*                                                                     * 00025600
*                                                                     * 00025700
*                                                                     * 00025800
*      ÝRETCODE(xretcode)¨                                            * 00025900
*          is the name (RS-type) of an optional fullword output       * 00026000
*          variable (or register (2)-(12) or (15) ASM only) into      * 00026100
*          which the return code is to be copied from GPR 15.  If you * 00026200
*          specify 15, GPR15, REG15, or R15 (within or without        * 00026300
*          parentheses), the value will be left in GPR 15.            * 00026400
*                                                                     * 00026500
*                                                                     * 00026600
*                                                                     * 00026700
*                                                                     * 00026800
*      ÝRSNCODE(xrsncode)¨                                            * 00026900
*          is the name (RS-type) of an optional fullword output       * 00027000
*          variable into which the reason code is to be copied from   * 00027100
*          GPR 0.  If you specify 0, 00, GPR0, GPR00, REG0, REG00, or * 00027200
*          R0 (within or without parentheses), the value will be left * 00027300
*          in GPR 0.                                                  * 00027400
*                                                                     * 00027500
*                                                                     * 00027600
*                                                                     * 00027700
*                                                                     * 00027800
*      ÝPLISTVER(»xplistver!IMPLIED_VERSIONº)¨                        * 00027900
*          is an optional byte input decimal value in the "0-0" range * 00028000
*          that specifies the macro version.  PLISTVER is the only    * 00028100
*          key allowed on the list form of MF and determines which    * 00028200
*          parameter list is generated.  Note that MAX may be         * 00028300
*          specified instead of a number, and the parameter list will * 00028400
*          be of the largest size currently supported. This size may  * 00028500
*          grow from release to release (thus possibly affecting the  * 00028600
*          amount of storage needed by your program).  If your        * 00028700
*          program can tolerate this, IBM recommends that you always  * 00028800
*          specify MAX when creating the list form parameter list as  * 00028900
*          that will ensure that the list form parameter list is      * 00029000
*          always long enough to hold whatever parameters might be    * 00029100
*          specified on the execute form.                             * 00029200
*          DEFAULT: IMPLIED_VERSION.  When PLISTVER is omitted, the   * 00029300
*          default is the lowest version which allows all of the      * 00029400
*          parameters specified on the invocation to be processed.    * 00029500
*                                                                     * 00029600
*                                                                     * 00029700
*                                                                     * 00029800
*                                                                     * 00029900
*      ÝMF(»S!L!Eº)¨                                                  * 00030000
*          is an optional keyword input which specifies the macro     * 00030100
*          form.                                                      * 00030200
*          DEFAULT: S                                                 * 00030300
*                                                                     * 00030400
*                                                                     * 00030500
*          ÝMF(S)¨                                                    * 00030600
*              specifies the standard form of the macro.  The "S"     * 00030700
*              form generates code to put the parameters into the     * 00030800
*              parameter list and invoke the desired service.  Full   * 00030900
*              checking for required macro keys is done along with    * 00031000
*              supplying defaults for omitted optional parameters.    * 00031100
*              The ?EPILOG macro must be invoked at the end of the    * 00031200
*              module.                                                * 00031300
*                                                                     * 00031400
*              For assembly language code modules, the "S" form       * 00031500
*              generates code to put the parameters into an in-line   * 00031600
*              parameter list and invoke the desired service.  Full   * 00031700
*              checking for required macro keys is done along with    * 00031800
*              supplying defaults for omitted optional parameters.    * 00031900
*                                                                     * 00032000
*          ÝMF(L,xmfctrl»,xmfattr!BDY(DWORD)º)¨                       * 00032100
*              specifies the list form of the macro.  The "L" form    * 00032200
*              defines an area to be used for the parameter list.     * 00032300
*              Only the PLISTVER key may be specified on the          * 00032400
*              invocation.  All other macro parameters are flagged as * 00032500
*              errors.  If PLISTVER is not specified, the original    * 00032600
*              parameter list definition is used.                     * 00032700
*                                                                     * 00032800
*            ,xmfctrl                                                 * 00032900
*              is a required input.  It is the name of a storage area * 00033000
*              for the parameter list.                                * 00033100
*                                                                     * 00033200
*            »,xmfattr!BDY(DWORD)º                                    * 00033300
*              is an optional 60 character input string that varies   * 00033400
*              from 1 to 60 characters. Use it to force boundary      * 00033500
*              alignment of the parameter list. Use only 0F or 0D     * 00033600
*              (assembler-only).                                      * 00033700
*              DEFAULT: 0D for Assembler, BDY(DWORD) for PL/X, which  * 00033800
*              forces the parameter list to a doubleword boundary.    * 00033900
*                                                                     * 00034000
*          ÝMF(E,xmfctrl»,COMPLETEº)¨                                 * 00034100
*              specifies the execute form of the macro.  The "E" form * 00034200
*              generates code to put the parameters into the          * 00034300
*              parameter list specified by xmfctrl and provides full  * 00034400
*              syntax checking with default setting.                  * 00034500
*                                                                     * 00034600
*            ,xmfctrl                                                 * 00034700
*              is a required input.  It is the name (RS-type) (or     * 00034800
*              address in register (1)-(12) ASM only) of a storage    * 00034900
*              area for the parameter list.                           * 00035000
*                                                                     * 00035100
*            »,COMPLETEº                                              * 00035200
*              is an optional keyword input which specifies the       * 00035300
*              degree of macro parameter syntax checking.             * 00035400
*              DEFAULT: COMPLETE                                      * 00035500
*                                                                     * 00035600
*                                                                     * 00035700
*              COMPLETE                                               * 00035800
*                  Checking for required macro keys is done and       * 00035900
*                  defaults are supplied for omitted optional         * 00036000
*                  parameters.                                        * 00036100
*                                                                     * 00036200
*                                                                     * 00036300
*                                                                     * 00036400
*                                                                     * 00036500
*                                                                     * 00036600
*                                                                     * 00036700
*                                                                     * 00036800
*01* ABEND CODES:  None.                                              * 00036900
*                                                                     * 00037000
*01* RETURN CODES:                                                    * 00037100
*                                                                     * 00037200
*                                                                     * 00037300
*            0    Name: IwmRetCodeOk                                  * 00037400
*                                                                     * 00037500
*                 Meaning: Successful completion.                     * 00037600
*                                                                     * 00037700
*                 Action: None required.                              * 00037800
*                                                                     * 00037900
*            4    Name: IwmRetCodeWarning                             * 00038000
*                                                                     * 00038100
*                 Meaning: Successful completion, unusual conditions  * 00038200
*                 noted.                                              * 00038300
*                                                                     * 00038400
*                                                                     * 00038500
*                 HEX REASON  MEANING/ACTION                          * 00038600
*                 CODE                                                * 00038700
*                                                                     * 00038800
*                 xxxx0408    Name: IwmRsnCodeWorkNotFound            * 00038900
*                                                                     * 00039000
*                             Meaning:  An address space matching the * 00039100
*                             input ASID(s) was not found or none of  * 00039200
*                             the input ASID(s) has a health factor   * 00039300
*                             associated.                             * 00039400
*                                                                     * 00039500
*                             Action: None required.                  * 00039600
*                                                                     * 00039700
*                 xxxx040A    Name: IwmRsnCodeOutputAreaTooSmall      * 00039800
*                                                                     * 00039900
*                             Meaning:  The output area supplied is   * 00040000
*                             too small to receive all the available  * 00040100
*                             information.                            * 00040200
*                                                                     * 00040300
*                             Action: None required.  If necessary,   * 00040400
*                             reinvoke the service with an output     * 00040500
*                             area of sufficient size to receive all  * 00040600
*                             information.                            * 00040700
*                                                                     * 00040800
*                                                                     * 00040900
*                                                                     * 00041000
*            8    Name: IwmRetCodeInvocError                          * 00041100
*                                                                     * 00041200
*                 Meaning: Invalid invocation environment or          * 00041300
*                 parameters.                                         * 00041400
*                                                                     * 00041500
*                                                                     * 00041600
*                 HEX REASON  MEANING/ACTION                          * 00041700
*                 CODE                                                * 00041800
*                                                                     * 00041900
*                 xxxx0801    Name: IwmRsnCodeSrbMode                 * 00042000
*                                                                     * 00042100
*                             Meaning: Caller is in SRB mode.         * 00042200
*                                                                     * 00042300
*                             Action: Avoid requesting this function  * 00042400
*                             while in SRB mode.                      * 00042500
*                                                                     * 00042600
*                 xxxx0803    Name: IwmRsnCodeDisabled                * 00042700
*                                                                     * 00042800
*                             Meaning: Caller is disabled.            * 00042900
*                                                                     * 00043000
*                             Action: Avoid requesting this function  * 00043100
*                             while disabled.                         * 00043200
*                                                                     * 00043300
*                 xxxx0804    Name: IwmRsnCodeLocked                  * 00043400
*                                                                     * 00043500
*                             Meaning: Caller is locked.              * 00043600
*                                                                     * 00043700
*                             Action: Avoid requesting this function  * 00043800
*                             while locked.                           * 00043900
*                                                                     * 00044000
*                 xxxx080B    Name: IwmRsnCodeBadPl                   * 00044100
*                                                                     * 00044200
*                             Meaning:  Error accessing parameter     * 00044300
*                             list.                                   * 00044400
*                                                                     * 00044500
*                             Action: Check for possible storage      * 00044600
*                             overlay.                                * 00044700
*                                                                     * 00044800
*                 xxxx0823    Name: IwmRsnCodeDatoff                  * 00044900
*                                                                     * 00045000
*                             Meaning: Caller invoked service while   * 00045100
*                             DATOFF                                  * 00045200
*                                                                     * 00045300
*                             Action: Avoid requesting this function  * 00045400
*                             in this environment.                    * 00045500
*                                                                     * 00045600
*                 xxxx0824    Name: IwmRsnCodeAmode24                 * 00045700
*                                                                     * 00045800
*                             Meaning: Caller invoked service but was * 00045900
*                             in 24 bit addressing mode.              * 00046000
*                                                                     * 00046100
*                             Action: Request this function only when * 00046200
*                             you are in 31 bit addressing mode.      * 00046300
*                                                                     * 00046400
*                 xxxx0827    Name: IwmRsnCodeRsvdNot0                * 00046500
*                                                                     * 00046600
*                             Meaning: Reserved field in parameter    * 00046700
*                             list was non-zero.                      * 00046800
*                                                                     * 00046900
*                             Action: Check for possible storage      * 00047000
*                             overlay of the parameter list.          * 00047100
*                                                                     * 00047200
*                 xxxx0828    Name: IwmRsnCodeBadVersion              * 00047300
*                                                                     * 00047400
*                             Meaning: Version number in parameter    * 00047500
*                             list or version length field is not     * 00047600
*                             valid. Or this service was called on a  * 00047700
*                             z/OS release not supported.             * 00047800
*                                                                     * 00047900
*                             Action: Check for possible storage      * 00048000
*                             overlay of the parameter list.          * 00048100
*                                                                     * 00048200
*                 xxxx0829    Name: IwmRsnCodeBadOptions              * 00048300
*                                                                     * 00048400
*                             Meaning:  Parameter list omits required * 00048500
*                             parameters or supplies mutually         * 00048600
*                             exclusive parameters or provides data   * 00048700
*                             associated with options not selected or * 00048800
*                             the number of ASIDs specified in        * 00048900
*                             ASID_LIST is greater than 64.           * 00049000
*                                                                     * 00049100
*                             Action: Check for possible storage      * 00049200
*                             overlay of the parameter list or        * 00049300
*                             variable.                               * 00049400
*                                                                     * 00049500
*                 xxxx0830    Name: IwmRsnCodeBadAlet                 * 00049600
*                                                                     * 00049700
*                             Meaning:  Caller specified an invalid   * 00049800
*                             alet for the storage pointed to by the  * 00049900
*                             ANSAREA keyword.                        * 00050000
*                                                                     * 00050100
*                             Action: Check for possible storage      * 00050200
*                             overlay of the parameter list or        * 00050300
*                             variable.                               * 00050400
*                                                                     * 00050500
*                                                                     * 00050600
*                                                                     * 00050700
*            C    Name: IwmRetCodeEnvError                            * 00050800
*                                                                     * 00050900
*                 Meaning: Environmental error.                       * 00051000
*                                                                     * 00051100
*                                                                     * 00051200
*                 HEX REASON  MEANING/ACTION                          * 00051300
*                 CODE                                                * 00051400
*                                                                     * 00051500
*                 xxxx0C01    Name: IwmRsnCodeNoStg                   * 00051600
*                                                                     * 00051700
*                             Meaning:  Storage is not available for  * 00051800
*                             the request.                            * 00051900
*                                                                     * 00052000
*                             Action: There is a storage shortage.    * 00052100
*                             The function may work successfully at a * 00052200
*                             later time.                             * 00052300
*                                                                     * 00052400
*                                                                     * 00052500
*                                                                     * 00052600
*            10   Name: IwmRetCodeCompError                           * 00052700
*                                                                     * 00052800
*                 Meaning: Component error.                           * 00052900
*                                                                     * 00053000
*                 Action: No action required.  The function may be    * 00053100
*                 successful if invoked again.                        * 00053200
*                                                                     * 00053300
*                                                                     * 00053400
*                                                                     * 00053500
*01* REASON CODES:                                                    * 00053600
*                                                                     * 00053700
*       A unique reason code will be returned whenever the return     * 00053800
*       code is non-zero.  Reason codes, as appropriate, are defined  * 00053900
*       under their corresponding return code.  Reason code and       * 00054000
*       return code constants are defined within IWMYCON.  Note that  * 00054100
*       the high order halfword of register 0, and the reason code    * 00054200
*       variable when specified, may be non-zero and represents       * 00054300
*       diagnostic data which is NOT part of the external interface.  * 00054400
*       The high order halfword should thus be excluded from          * 00054500
*       comparison with the reason code values described above.  The  * 00054600
*       constant, IWMRSNCODE_MASK_CONST defined in IWMYCON, may be    * 00054700
*       used for this purpose.                                        * 00054800
*                                                                     * 00054900
*01* MODULE TYPE:  ASSEM-PL/X MACRO                                   * 00055000
*                                                                     * 00055100
*02*   PROCESSOR:  ASSEM-PL/X                                         * 00055200
*                                                                     * 00055300
*01* COMPONENT:  SCWLM                                                * 00055400
*                                                                     * 00055500
*01* DISTRIBUTION LIBRARY: AMACLIB                                    * 00055600
*                                                                     * 00055700
*01* MACRO USAGE NOTES:                                               * 00055800
*                                                                     * 00055900
*                                                                     * 00056000
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00056100
*        global macro variable.  Any value other than 'NO' will       * 00056200
*        result in the macro expansion being printed.  The default is * 00056300
*        'YES'.  The following examples illustrate how the ZPRINT     * 00056400
*        variable should be set.                                      * 00056500
*                                                                     * 00056600
*                    GBLC &ZPRINT                                     * 00056700
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00056800
*                                                                     * 00056900
*                                                                     * 00057000
*    2.  All   keys   currently   contained  in  the  IWM4QHLT  macro * 00057100
*        correspond  to  version  0.   If you specify PLISTVER, use a * 00057200
*        value of 0 or MAX.                                           * 00057300
*                                                                     * 00057400
*                                                                     * 00057500
*                                                                     * 00057600
*                                                                     * 00057700
*01* CHANGE ACTIVITY:                                                 * 00057800
*                                                                     * 00057900
*   Flag LineItem  FMID    Date   ID    Comment                       * 00058000
*                                                                     * 00058100
*    $L0=LHEALTH  HBB77A0 140731 3241MG:  Health based routing        * 00058200
*    $P1=MISC     HBB77B0 150904 3241MG:  Doc updates                 * 00058300
****** END OF SPECIFICATIONS *****************************************/ 00058400
*/********************************************************************* 00058500
         MACRO                                                          00058600
&XLABEL  IWM4QHLT &ASID_LIST=,&ASID_NUM=,&ANSAREA=,&ANSLEN=,&QUERYLEN=,*00058700
               &RETCODE=,&RSNCODE=,&PLISTVER=,&MF=                      00058800
.*                                                                      00058900
*               MACDATE -07/31/14-<0>                                   00059000
.*                                                                      00059100
.*******************************************************************    00059200
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00059300
.*******************************************************************    00059400
               GBLC  &ZPRINT     YES=PRINT NO=NO PRINT                  00059500
               GBLC  &ZTEST      YES=TEST NO=NO TEST                    00059600
               GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX            00059700
.*                                                                      00059800
               GBLC  &ZIWM4QHLT  YES=MACRO USED AT LEAST ONCE           00059900
.*******************************************************************    00060000
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00060100
.*******************************************************************    00060200
               LCLC  &ZMS        ERROR MESSAGE WORK AREA                00060300
               LCLC  &ZCNDX      SYSNDX CHARACTERS                      00060400
               LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED             00060500
               LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR            00060600
               LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE            00060700
               LCLA  &ZAWRK      USED AS A WORK AREA                    00060800
               LCLA  &ZASIZ      USED FOR SIZE OF VALUE                 00060900
               LCLA  &ZN         NUMERIC WORK VARIABLE                  00061000
               LCLC  &ZC         CHARACTER WORK VARIABLE                00061100
               LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE            00061200
               LCLA  &ZTLA       VALUE TOO LONG VARIABLE                00061300
               LCLC  &ZMAC_G     "G" or null                            00061400
&ZMAC_G        SETC  ''                                                 00061500
               LCLC  &ZMAC_LR                                           00061600
&ZMAC_LR       SETC  'LR'                                               00061700
               LCLC  &ZMAC_L                                            00061800
&ZMAC_L        SETC  'L'                                                00061900
               LCLC  &ZMAC_ST                                           00062000
&ZMAC_ST       SETC  'ST'                                               00062100
               LCLC  &ZMAC_LLGT                                         00062200
&ZMAC_LLGT     SETC  'L'                                                00062300
               LCLC  &ZMAC_LGR                                          00062400
&ZMAC_LGR      SETC  'LR'                                               00062500
               LCLC  &ZMAC_LG                                           00062600
&ZMAC_LG       SETC  'L'                                                00062700
               LCLC  &ZMAC_STG                                          00062800
&ZMAC_STG      SETC  'ST'                                               00062900
               LCLA  &ZMACRET    MACRO RETURN CODE                      00063000
&ZMACRET       SETA  0           ASSUME NO ERRORS                       00063100
.*                                                                      00063200
               LCLC  &ZCSYSLIST(255)            NONXKEY, POS ARRAY      00063300
               LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()             00063400
               LCLA  &ZPLLEN     PARAMETER LIST LENGTH                  00063500
               LCLC  &ZENDBASEPL                End of base PL          00063600
               LCLA  &ZPLWORKA   PARAMETER LIST LENGTH                  00063700
.*******************************************************************    00063800
.***AB.04  MACRO VARIABLES FOR RANGES AND SETS OF ARGUMENTS             00063900
.*******************************************************************    00064000
               LCLA  &ZI         INDEX FOR ARRAY                        00064100
               LCLA  &ZJ         INDEX FOR PARMS                        00064200
               LCLA  &ZK         INDEX FOR PARSE                        00064300
               LCLA  &ZLO        LOW RANGE VALUE                        00064400
               LCLA  &ZHI        HIGH RANGE VALUE                       00064500
               LCLC  &ZW         WORK AREA FOR PARM                     00064600
.********************************************************************   00064700
.***AB.05  INVOKE MVS MACROS TO CONTROL CODE GENERATION                 00064800
.********************************************************************   00064900
               GBLC  &SYSSPLV    SP LEVEL 1,2,3 -SPLEVEL                00065000
               GBLC  &SYSASCE    SYSTEM STATE P ANY AR-SYSSTATE         00065100
               GBLA  &SYSALVL    SYSSTATE ARCHLVL                       00065200
               GBLC  &SYSAM64    SYSSTATE AMODE64                       00065300
.*                                                                      00065400
               AIF   (K'&SYSASCE GT 0).ZSYS4    SYS STATE DEFINED       00065500
               AIF   (K'&SYSSPLV GT 0).ZSYS2    SP LEVEL DEFINED        00065600
               SPLEVEL  TEST                                            00065700
.ZSYS2         ANOP  ,                                                  00065800
               AIF   ('&SYSSPLV' EQ '1').ZSYS3  PRE SP 3.1              00065900
               AIF   ('&SYSSPLV' EQ '2').ZSYS3  PRE SP 3.1              00066000
               SYSSTATE TEST                                            00066100
               AGO   .ZSYS4                                             00066200
.ZSYS3         ANOP  ,                                                  00066300
&SYSASCE       SETC  'P'         ASSUME SYSSTATE PRIMARY                00066400
.ZSYS4         ANOP  ,                                                  00066500
               AIF   ('&SYSAM64' NE 'YES').ZSYSN64                      00066600
&ZMAC_LLGT     SETC 'LLGT'                                              00066700
&ZMAC_LGR      SETC 'LGR'                                               00066800
&ZMAC_LG       SETC 'LG'                                                00066900
&ZMAC_STG      SETC 'STG'                                               00067000
.ZSYSN64       ANOP  ,                                                  00067100
               AIF   (&SYSALVL LE 1).ZSYS4A                             00067200
&ZMAC_G        SETC 'G'                                                 00067300
&ZMAC_LR       SETC 'LGR'                                               00067400
&ZMAC_L        SETC 'LG'                                                00067500
&ZMAC_ST       SETC 'STG'                                               00067600
.ZSYS4A        ANOP  ,                                                  00067700
.*******************************************************************    00067800
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00067900
.*******************************************************************    00068000
               LCLC  &XASID_LIST                ++ NAME                 00068100
               LCLC  &XASID_NUM  ++ NAME                                00068200
               LCLC  &XANSAREA   ++ NAME                                00068300
               LCLC  &XANSLEN    ++ NAME                                00068400
               LCLC  &XQUERYLEN  ++ NAME                                00068500
               LCLC  &XRETCODE   ++ NAME                                00068600
               LCLC  &XRSNCODE   ++ NAME                                00068700
               LCLA  &XPLISTVER  ++ VALUE                               00068800
               LCLC  &XMF        ++ VALUE                               00068900
               LCLC  &XMFCTRL    ++ NAME                                00069000
               LCLC  &XMFATTR    ++ VALUE                               00069100
               LCLC  &XMFSCK     ++ VALUE                               00069200
.*******************************************************************    00069300
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00069400
.*******************************************************************    00069500
               LCLC  &ZXASID_LIST               ++ INPUT NAME           00069600
               LCLC  &ZXASID_NUM                ++ INPUT NAME           00069700
               LCLC  &ZXANSAREA  ++ OUTPUT NAME                         00069800
               LCLC  &ZXANSLEN   ++ INPUT NAME                          00069900
               LCLC  &ZXQUERYLEN                ++ OUTPUT NAME          00070000
               LCLC  &ZXRETCODE  ++ OUTPUT NAME                         00070100
               LCLC  &ZXRSNCODE  ++ OUTPUT NAME                         00070200
               LCLC  &ZXPLISTVER                ++ INPUT VALUE          00070300
               LCLC  &ZXMF       ++ INPUT VALUE                         00070400
               LCLC  &ZXMFCTRL   ++ INPUT NAME                          00070500
               LCLC  &ZXMFATTR   ++ INPUT VALUE                         00070600
               LCLC  &ZXMFSCK    ++ INPUT VALUE                         00070700
.********************************************************************   00070800
.***AC.PLV01  PROCESS PLISTVER                                      *   00070900
.********************************************************************   00071000
&XPLISTVER      SETA  0                                                 00071100
                AIF   (K'&PLISTVER(1) LE 0).ZPLV0                       00071200
                AIF   ('&PLISTVER(1)' NE 'MAX').ZPLV0                   00071300
&XPLISTVER      SETA  0                                                 00071400
.ZPLV0          ANOP  ,                                                 00071500
.*                                                                      00071600
                AIF   (K'&PLISTVER(1) LE 0).ZPVCKE                      00071700
                AIF   ('&PLISTVER(1)' EQ 'IMPLIED_VERSION').ZPVCKE      00071800
                AIF   ('&PLISTVER(1)' EQ 'MAX').ZPVCKE                  00071900
.*-------------------------------------------------------------------   00072000
                AIF   (N'&PLISTVER LE 1).ZPVCK3  CK NUM                 00072100
&ZMS            SETC  '"PLISTVER='                                      00072200
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00072300
&ZMS            SETC  '&ZMS "PLISTVER"'                                 00072400
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00072500
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00072600
                AGO   .ZPVCK2                                           00072700
.ZPVCK3         ANOP  ,                                                 00072800
.*-------------------------------------------------------------------   00072900
                AIF   ('&PLISTVER'(1,1) NE '(').ZPVCK2                  00073000
&ZMS            SETC  '"PLISTVER='                                      00073100
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00073200
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00073300
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00073400
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00073500
                AGO   .ZPVCKE                                           00073600
.ZPVCK2         ANOP  ,                                                 00073700
.*-------------------------------------------------------------------   00073800
&ZCVAL          SETC  '&PLISTVER(1)'                                    00073900
                AIF   ('&ZCVAL'(1,1) EQ '(').ZPVCKE  IN GPR             00074000
                AIF   (T'&ZCVAL NE 'N').ZPVCK6  NUMERIC ERR             00074100
&ZN             SETA   &PLISTVER(1)        CONVERT TO ARITHMETIC        00074200
                AIF   (&ZN LT 0).ZPVCK6    TOO LOW                      00074300
                AIF   (&ZN LE 0).ZPVCK4A   NOT HIGH                     00074400
.ZPVCK6         ANOP  ,                                                 00074500
&ZMS            SETC  '"PLISTVER='                                      00074600
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00074700
&ZMS            SETC  '&ZMS THE RANGE IS "0-0"'                         00074800
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00074900
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00075000
&XPLISTVER      SETA  0                                                 00075100
                AGO   .ZPVCKE                                           00075200
.*-------------------------------------------------------------------   00075300
.ZPVCK4A        ANOP  ,                                                 00075400
                AIF   (&ZN GE &XPLISTVER).ZPVCK4                        00075500
&ZMS            SETC  'PLISTVER='                                       00075600
&ZMS            SETC  '&ZMS.&PLISTVER(1)'                               00075700
&ZMS            SETC  '&ZMS., BUT PLISTVER OF'                          00075800
&ZMS            SETC  '&ZMS &XPLISTVER'                                 00075900
                MNOTE 8,' &ZMS IS REQUIRED.'                            00076000
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00076100
                AGO   .ZPVCK5                                           00076200
.ZPVCK4         ANOP  ,                                                 00076300
&XPLISTVER      SETA  &PLISTVER(1)                                      00076400
.ZPVCK5         ANOP  ,                                                 00076500
.ZPVCKE         ANOP  ,                                                 00076600
.********************************************************************   00076700
.***AG.MF01 PROCESS MF MACRO FORMS                                      00076800
.********************************************************************   00076900
               ACTR  10000                                              00077000
.*------------------------------------------------------------------    00077100
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00077200
&XMF           SETC  ''          INITIALIZE XVARIABLE                   00077300
.*-------------------------------------------------------------------   00077400
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00077500
.ZG27          ANOP  ,                                                  00077600
&ZTLC          SETC 'S'                                                 00077700
               AIF   ('&MF(1)' NE '&ZTLC').ZG28                         00077800
&XMF           SETC  'S'         SET KEYWORD                            00077900
               AIF   (N'&MF LE 1).ZG27A         CK NUM                  00078000
&ZMS           SETC  '"MF='                                             00078100
&ZMS           SETC  '&ZMS.&MF"'                                        00078200
&ZMS           SETC  '&ZMS "MF"'                                        00078300
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00078400
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00078500
.ZG27A         ANOP  ,                                                  00078600
.*-------------------------------------------------------------------   00078700
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00078800
.ZG28          ANOP  ,                                                  00078900
&ZTLC          SETC 'L'                                                 00079000
               AIF   ('&MF(1)' NE '&ZTLC').ZG35                         00079100
&XMF           SETC  'L'         SET KEYWORD                            00079200
               AIF   (N'&MF LE 3).ZG28A         CK NUM                  00079300
&ZMS           SETC  '"MF='                                             00079400
&ZMS           SETC  '&ZMS.&MF"'                                        00079500
&ZMS           SETC  '&ZMS "MF"'                                        00079600
               MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'               00079700
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00079800
.ZG28A         ANOP  ,                                                  00079900
.*-------------------------------------------------------------------   00080000
.***AG.KKCTL08 -MF(L) SPECIAL CHECK                                     00080100
               AIF   (N'&SYSLIST NE 0).ZG28B    POSITIONALS?            00080200
               AIF   ('&ASID_LIST' NE '').ZG28B  KEYS?                  00080300
               AIF   ('&ASID_NUM' NE '').ZG28B  KEYS?                   00080400
               AIF   ('&ANSAREA' NE '').ZG28B   KEYS?                   00080500
               AIF   ('&ANSLEN' NE '').ZG28B    KEYS?                   00080600
               AIF   ('&QUERYLEN' NE '').ZG28B  KEYS?                   00080700
               AIF   ('&RETCODE' NE '').ZG28B   KEYS?                   00080800
               AIF   ('&RSNCODE' NE '').ZG28B   KEYS?                   00080900
               AGO    .ZG28C     INVOCATION OKAY                        00081000
.ZG28B         ANOP  ,                                                  00081100
&ZMS           SETC  'THE "L" FORM OF "MF"'                             00081200
&ZMS           SETC  '&ZMS CAN ONLY HAVE'                               00081300
&ZMS           SETC  '&ZMS THE "PLISTVER" KEY'                          00081400
               MNOTE 8,' &ZMS SPECIFIED ON THE INVOCATION.'             00081500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00081600
.ZG28C         ANOP  ,                                                  00081700
.*-------------------------------------------------------------------   00081800
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00081900
&ZXMFCTRL      SETC  'INPUT'     SET IN/OUTPUT                          00082000
&XMFCTRL       SETC  '&MF(2,1)'  SET XVARIABLE                          00082100
               AIF   (N'&MF(2) GT 1).ZG30B      MULTI                   00082200
&XMFCTRL       SETC  '&MF(2)'    SET XVARIABLE                          00082300
.ZG30B         AIF   (K'&MF(2) GT 0).ZG30C                              00082400
&ZXMFCTRL      SETC  ''          RESET IN/OUTPUT                        00082500
&ZMS           SETC  'WHEN "L" IS SPECIFIED'                            00082600
&ZMS           SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'                00082700
               MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                       00082800
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00082900
.ZG30C         ANOP  ,                                                  00083000
.*-------------------------------------------------------------------   00083100
.***AG.KCK01 NAME, OPT RQD INPUT, POS(2) -GPR NOT ALLOWED               00083200
               AIF   (K'&ZXMFCTRL LE 0).ZG30P   NOT I/O                 00083300
               AIF   ('&XMFCTRL'(1,1) NE '(').ZG30P                     00083400
&ZXMFCTRL      SETC  ''          RESET IN/OUTPUT                        00083500
&ZMS           SETC  '"MF='                                             00083600
&ZMS           SETC  '&ZMS.&MF"'                                        00083700
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00083800
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 2.'                  00083900
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00084000
.ZG30P         ANOP  ,                                                  00084100
.*-------------------------------------------------------------------   00084200
.***AG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE                      00084300
&ZXMFATTR      SETC  'INPUT'     SET IN/OUTPUT                          00084400
&XMFATTR       SETC  '0D'                                               00084500
               AIF   (K'&MF(3) LE 0).ZG33B      PARM                    00084600
&XMFATTR       SETC  '&MF(3,1)'  SET XVARIABLE                          00084700
               AIF   (N'&MF(3) GT 1).ZG33B      MULTI                   00084800
&XMFATTR       SETC  '&MF(3)'    SET XVARIABLE                          00084900
.ZG33B         ANOP  ,                                                  00085000
.*-------------------------------------------------------------------   00085100
.***AG.KCK01 VALUE, OPT INPUT, POS(3) -GPR NOT ALLOWED                  00085200
               AIF   (K'&ZXMFATTR LE 0).ZG33P   NOT I/O                 00085300
               AIF   ('&XMFATTR'(1,1) NE '(').ZG33P                     00085400
&ZXMFATTR      SETC  ''          RESET IN/OUTPUT                        00085500
&ZMS           SETC  '"MF='                                             00085600
&ZMS           SETC  '&ZMS.&MF"'                                        00085700
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00085800
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 3.'                  00085900
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00086000
.ZG33P         ANOP  ,                                                  00086100
.*-------------------------------------------------------------------   00086200
.***AG.KCK03 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH                 00086300
               AIF   (K'&ZXMFATTR LE 0).ZG33S   NOT I/O                 00086400
               AIF   (K'&XMFATTR LE 60).ZG33S   LNG OK                  00086500
&ZXMFATTR      SETC  ''          RESET IN/OUTPUT                        00086600
&ZMS           SETC  '"MF='                                             00086700
&ZMS           SETC  '&ZMS.&MF"'                                        00086800
&ZMS           SETC  '&ZMS ARGUMENT 3 EXCEEDS THE MAXIMUM'              00086900
               MNOTE 8,' &ZMS LENGTH OF 60 CHARACTERS.'                 00087000
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00087100
.ZG33S         ANOP  ,                                                  00087200
.*-------------------------------------------------------------------   00087300
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00087400
.ZG35          ANOP  ,                                                  00087500
&ZTLC          SETC 'E'                                                 00087600
               AIF   ('&MF(1)' NE '&ZTLC').ZG43                         00087700
&XMF           SETC  'E'         SET KEYWORD                            00087800
               AIF   (N'&MF LE 3).ZG35A         CK NUM                  00087900
&ZMS           SETC  '"MF='                                             00088000
&ZMS           SETC  '&ZMS.&MF"'                                        00088100
&ZMS           SETC  '&ZMS "MF"'                                        00088200
               MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'               00088300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00088400
.ZG35A         ANOP  ,                                                  00088500
.*-------------------------------------------------------------------   00088600
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00088700
&ZXMFCTRL      SETC  'INPUT'     SET IN/OUTPUT                          00088800
&XMFCTRL       SETC  '&MF(2,1)'  SET XVARIABLE                          00088900
               AIF   (N'&MF(2) GT 1).ZG37B      MULTI                   00089000
&XMFCTRL       SETC  '&MF(2)'    SET XVARIABLE                          00089100
.ZG37B         AIF   (K'&MF(2) GT 0).ZG37C                              00089200
&ZXMFCTRL      SETC  ''          RESET IN/OUTPUT                        00089300
&ZMS           SETC  'WHEN "E" IS SPECIFIED'                            00089400
&ZMS           SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'                00089500
               MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                       00089600
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00089700
.ZG37C         ANOP  ,                                                  00089800
.*-------------------------------------------------------------------   00089900
.***AG.KCK02 NAME, OPT RQD INPUT, POS(2) -GPR OUT OF RANGE              00090000
               AIF   (K'&ZXMFCTRL LE 0).ZG37R   NOT I/O                 00090100
               AIF   ('&XMFCTRL'(1,1) NE '(').ZG37R                     00090200
&ZCGPR         SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)                         00090300
               AIF   ('&ZCGPR'(1,1) NE '0').ZG37P                       00090400
               AIF   (K'&ZCGPR GT 2).ZG37Q                              00090500
               AIF   ('&ZCGPR' EQ '0').ZG37Q                            00090600
&ZCGPR         SETC  '&ZCGPR'(2,1)                                      00090700
               AIF   (T'&ZCGPR NE 'N').ZG37Q    INVALID REG NAME        00090800
.ZG37P         ANOP  ,                                                  00090900
               AIF   (T'&ZCGPR NE 'N').ZG37R    NON NUMERIC             00091000
               AIF   ('&ZCGPR' LT '1').ZG37Q                            00091100
               AIF   ('&ZCGPR' LE '12').ZG37R                           00091200
.ZG37Q         ANOP  ,                                                  00091300
&ZMS           SETC  '"MF='                                             00091400
&ZMS           SETC  '&ZMS.&MF"'                                        00091500
&ZMS           SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'          00091600
               MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'                   00091700
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00091800
.ZG37R         ANOP  ,                                                  00091900
.*-------------------------------------------------------------------   00092000
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00092100
&XMFSCK        SETC  ''          INITIALIZE XVARIABLE                   00092200
.ZG41A   AIF   ('&MF(3)' NE 'COMPLETE').ZG42A                           00092300
&XMFSCK        SETC  'COMPLETE'  SET KEYWORD                            00092400
.*-------------------------------------------------------------------   00092500
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00092600
.ZG42A         AIF   (K'&XMFSCK GT 0).ZG42C     KEYWORD                 00092700
               AIF   (K'&MF(3) LE 0).ZG42B                              00092800
&ZMS           SETC  '"MF='                                             00092900
&ZMS           SETC  '&ZMS.&MF"'                                        00093000
&ZMS           SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '          00093100
&ZMS           SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                00093200
&ZMS           SETC  '&ZMS "COMPLETE".'                                 00093300
               MNOTE 8,' &ZMS '                                         00093400
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00093500
.ZG42B         ANOP  ,                                                  00093600
&XMFSCK        SETC  'COMPLETE'  SET DEFAULT KEYWORD                    00093700
.ZG42C         ANOP  ,                                                  00093800
&ZXMFSCK       SETC  'INPUT'     SET IN/OUTPUT                          00093900
.*------------------------------------------------------------------    00094000
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00094100
.ZG43          ANOP  ,                                                  00094200
&ZXMF          SETC  'INPUT'     SET IN/OUTPUT                          00094300
               AIF   (K'&XMF GT 0).ZG43E        VALID ARG               00094400
               AIF   (T'&MF EQ 'O').ZG43D       OMITTED                 00094500
&ZASYSLNDX     SETA  0                                                  00094600
.ZG43A         ANOP  ,           POSITIONAL MACRO KEY                   00094700
&ZASYSLNDX     SETA  &ZASYSLNDX+1                                       00094800
               AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG43C                   00094900
&ZTLC          SETC 'MF'                                                00095000
               AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG43A          00095100
.ZG43B         ANOP  ,                                                  00095200
&ZXMF          SETC  ''          RESET IN/OUTPUT                        00095300
&ZMS           SETC  'THE "MF" KEY'                                     00095400
&ZMS           SETC  '&ZMS MUST CONTAIN ONE'                            00095500
               MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                   00095600
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00095700
               AGO   .ZG43E                                             00095800
.ZG43C         ANOP  ,                                                  00095900
&ZXMF          SETC  ''          RESET IN/OUTPUT                        00096000
&ZMS           SETC  '"MF='                                             00096100
&ZMS           SETC  '&ZMS.&MF"'                                        00096200
&ZMS           SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '          00096300
&ZMS           SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                00096400
&ZMS           SETC  '&ZMS "S",'                                        00096500
&ZMS           SETC  '&ZMS "L",'                                        00096600
&ZMS           SETC  '&ZMS OR "E".'                                     00096700
               MNOTE 8,' &ZMS '                                         00096800
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00096900
               AGO   .ZG43E                                             00097000
.ZG43D         ANOP  ,                                                  00097100
&XMF           SETC  'S'         SET DEFAULT KEYWORD                    00097200
&XMFSCK        SETC  'COMPLETE'  COMPLETE CHECKING                      00097300
.ZG43E         ANOP  ,                                                  00097400
.********************************************************************   00097500
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00097600
.********************************************************************   00097700
               ACTR  10000                                              00097800
.*-------------------------------------------------------------------   00097900
.***AG.MF03 MF=(SLE)                                                    00098000
               AIF   ('&XMF' EQ 'L').ZGMFX                              00098100
.*----------------------------------------------------------------***   00098200
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00098300
               AIF   (N'&ASID_LIST LE 1).ZG2A   CK NUM                  00098400
&ZMS           SETC  '"ASID_LIST='                                      00098500
&ZMS           SETC  '&ZMS.&ASID_LIST"'                                 00098600
&ZMS           SETC  '&ZMS "ASID_LIST"'                                 00098700
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00098800
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00098900
.ZG2A          ANOP  ,                                                  00099000
.*-------------------------------------------------------------------   00099100
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00099200
&ZXASID_LIST   SETC  'INPUT'     SET IN/OUTPUT                          00099300
&XASID_LIST    SETC  'NO_ASID_LIST'                                     00099400
               AIF   (K'&ASID_LIST(1) LE 0).ZG2B  PARM                  00099500
&XASID_LIST    SETC  '&ASID_LIST(1)'            SET XVARIABLE           00099600
               AIF   (N'&ASID_LIST GT 1).ZG2B   MULTI                   00099700
&XASID_LIST    SETC  '&ASID_LIST'               SET XVARIABLE           00099800
.ZG2B          ANOP  ,                                                  00099900
.*-------------------------------------------------------------------   00100000
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00100100
               AIF   (K'&ZXASID_LIST LE 0).ZG2R  NOT I/O                00100200
         AIF   ('&XASID_LIST' EQ 'NO_ASID_LIST').ZG2R                   00100300
               AIF   ('&XASID_LIST'(1,1) NE '(').ZG2R                   00100400
&ZCGPR         SETC  '&XASID_LIST'(2,K'&XASID_LIST-2)                   00100500
               AIF   ('&ZCGPR'(1,1) NE '0').ZG2P                        00100600
               AIF   (K'&ZCGPR GT 2).ZG2Q                               00100700
               AIF   ('&ZCGPR' EQ '0').ZG2Q                             00100800
&ZCGPR         SETC  '&ZCGPR'(2,1)                                      00100900
               AIF   (T'&ZCGPR NE 'N').ZG2Q     INVALID REG NAME        00101000
.ZG2P          ANOP  ,                                                  00101100
               AIF   (T'&ZCGPR NE 'N').ZG2R     NON NUMERIC             00101200
               AIF   ('&ZCGPR' LT '2').ZG2Q                             00101300
               AIF   ('&ZCGPR' LE '12').ZG2R                            00101400
.ZG2Q          ANOP  ,                                                  00101500
&ZMS           SETC  '"ASID_LIST='                                      00101600
&ZMS           SETC  '&ZMS.&ASID_LIST"'                                 00101700
&ZMS           SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'          00101800
               MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                   00101900
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00102000
.ZG2R          ANOP  ,                                                  00102100
.*----------------------------------------------------------------***   00102200
.***AG.KXVAR05 NAME, OPT RQD INPUT, KEYS -XVARIABLE KEY                 00102300
               AIF   (N'&ASID_NUM LE 1).ZG4A    CK NUM                  00102400
&ZMS           SETC  '"ASID_NUM='                                       00102500
&ZMS           SETC  '&ZMS.&ASID_NUM"'                                  00102600
&ZMS           SETC  '&ZMS "ASID_NUM"'                                  00102700
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00102800
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00102900
.ZG4A          ANOP  ,                                                  00103000
.*-------------------------------------------------------------------   00103100
.***AG.KXVAR09 NAME, OPT RQD INPUT, KEYS -XVARIABLE                     00103200
&ZXASID_NUM    SETC  'INPUT'     SET IN/OUTPUT                          00103300
&XASID_NUM     SETC  '&ASID_NUM(1)'             SET XVARIABLE           00103400
               AIF   (N'&ASID_NUM GT 1).ZG4B    MULTI                   00103500
&XASID_NUM     SETC  '&ASID_NUM'                SET XVARIABLE           00103600
.ZG4B          AIF   (K'&ASID_LIST(1) GT 0).ZG4C  KEY                   00103700
               AIF   (K'&ASID_NUM(1) LE 0).ZG4D  PARM                   00103800
&ZMS           SETC  '"ASID_NUM'                                        00103900
&ZMS           SETC  '&ZMS.=&ASID_NUM"'                                 00104000
&ZMS           SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                    00104100
&ZMS           SETC  '&ZMS '                                            00104200
&ZMS           SETC  '&ZMS "ASID_LIST"'                                 00104300
               MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                       00104400
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00104500
               AGO   .ZG4E                                              00104600
.*                                                                      00104700
.ZG4C          AIF   (K'&ASID_NUM(1) GT 0).ZG4E  PARM                   00104800
&ZXASID_NUM    SETC  ''          RESET IN/OUTPUT                        00104900
&ZMS           SETC  'WHEN "ASID_LIST" IS SPECIFIED'                    00105000
&ZMS           SETC  '&ZMS , "ASID_NUM" KEY AND ITS'                    00105100
               MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                   00105200
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00105300
.ZG4D          ANOP  ,                                                  00105400
&XASID_NUM     SETC  '0'         SET DEFAULT                            00105500
.ZG4E          ANOP  ,                                                  00105600
.*-------------------------------------------------------------------   00105700
.***AG.KCK02 NAME, OPT RQD INPUT, KEYS -GPR OUT OF RANGE                00105800
               AIF   (K'&ZXASID_NUM LE 0).ZG4R  NOT I/O                 00105900
               AIF   ('&XASID_NUM'(1,1) NE '(').ZG4R                    00106000
&ZCGPR         SETC  '&XASID_NUM'(2,K'&XASID_NUM-2)                     00106100
               AIF   ('&ZCGPR'(1,1) NE '0').ZG4P                        00106200
               AIF   (K'&ZCGPR GT 2).ZG4Q                               00106300
               AIF   ('&ZCGPR' EQ '0').ZG4Q                             00106400
&ZCGPR         SETC  '&ZCGPR'(2,1)                                      00106500
               AIF   (T'&ZCGPR NE 'N').ZG4Q     INVALID REG NAME        00106600
.ZG4P          ANOP  ,                                                  00106700
               AIF   (T'&ZCGPR NE 'N').ZG4R     NON NUMERIC             00106800
               AIF   ('&ZCGPR' LT '2').ZG4Q                             00106900
               AIF   ('&ZCGPR' LE '12').ZG4R                            00107000
.ZG4Q          ANOP  ,                                                  00107100
&ZMS           SETC  '"ASID_NUM='                                       00107200
&ZMS           SETC  '&ZMS.&ASID_NUM"'                                  00107300
&ZMS           SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'          00107400
               MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                   00107500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00107600
.ZG4R          ANOP  ,                                                  00107700
.*----------------------------------------------------------------***   00107800
.***AG.KXVAR05 NAME, RQD OUTPUT, KEYS -XVARIABLE KEY                    00107900
               AIF   (N'&ANSAREA LE 1).ZG8A     CK NUM                  00108000
&ZMS           SETC  '"ANSAREA='                                        00108100
&ZMS           SETC  '&ZMS.&ANSAREA"'                                   00108200
&ZMS           SETC  '&ZMS "ANSAREA"'                                   00108300
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00108400
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00108500
.ZG8A          ANOP  ,                                                  00108600
.*-------------------------------------------------------------------   00108700
.***AG.KXVAR06 NAME, RQD OUTPUT, KEYS -XVARIABLE                        00108800
&ZXANSAREA     SETC  'OUTPUT'    SET IN/OUTPUT                          00108900
&XANSAREA      SETC  '&ANSAREA(1)'              SET XVARIABLE           00109000
               AIF   (N'&ANSAREA GT 1).ZG8B     MULTI                   00109100
&XANSAREA      SETC  '&ANSAREA'  SET XVARIABLE                          00109200
.ZG8B          AIF   (K'&ANSAREA(1) GT 0).ZG8C                          00109300
&ZXANSAREA     SETC  ''          RESET IN/OUTPUT                        00109400
&ZMS           SETC  ' '                                                00109500
&ZMS           SETC  '&ZMS "ANSAREA" KEY AND ITS'                       00109600
               MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                   00109700
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00109800
.ZG8C          ANOP  ,                                                  00109900
.*-------------------------------------------------------------------   00110000
.***AG.KCK02 NAME, RQD OUTPUT, KEYS -GPR OUT OF RANGE                   00110100
               AIF   (K'&ZXANSAREA LE 0).ZG8R   NOT I/O                 00110200
               AIF   ('&XANSAREA'(1,1) NE '(').ZG8R                     00110300
&ZCGPR         SETC  '&XANSAREA'(2,K'&XANSAREA-2)                       00110400
               AIF   ('&ZCGPR'(1,1) NE '0').ZG8P                        00110500
               AIF   (K'&ZCGPR GT 2).ZG8Q                               00110600
               AIF   ('&ZCGPR' EQ '0').ZG8Q                             00110700
&ZCGPR         SETC  '&ZCGPR'(2,1)                                      00110800
               AIF   (T'&ZCGPR NE 'N').ZG8Q     INVALID REG NAME        00110900
.ZG8P          ANOP  ,                                                  00111000
               AIF   (T'&ZCGPR NE 'N').ZG8R     NON NUMERIC             00111100
               AIF   ('&ZCGPR' LT '2').ZG8Q                             00111200
               AIF   ('&ZCGPR' LE '12').ZG8R                            00111300
.ZG8Q          ANOP  ,                                                  00111400
&ZMS           SETC  '"ANSAREA='                                        00111500
&ZMS           SETC  '&ZMS.&ANSAREA"'                                   00111600
&ZMS           SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'          00111700
               MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                   00111800
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00111900
.ZG8R          ANOP  ,                                                  00112000
.*----------------------------------------------------------------***   00112100
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00112200
               AIF   (N'&ANSLEN LE 1).ZG11A     CK NUM                  00112300
&ZMS           SETC  '"ANSLEN='                                         00112400
&ZMS           SETC  '&ZMS.&ANSLEN"'                                    00112500
&ZMS           SETC  '&ZMS "ANSLEN"'                                    00112600
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00112700
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00112800
.ZG11A         ANOP  ,                                                  00112900
.*-------------------------------------------------------------------   00113000
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00113100
&ZXANSLEN      SETC  'INPUT'     SET IN/OUTPUT                          00113200
&XANSLEN       SETC  '&ANSLEN(1)'               SET XVARIABLE           00113300
               AIF   (N'&ANSLEN GT 1).ZG11B     MULTI                   00113400
&XANSLEN       SETC  '&ANSLEN'   SET XVARIABLE                          00113500
.ZG11B         AIF   (K'&ANSLEN(1) GT 0).ZG11C                          00113600
&ZXANSLEN      SETC  ''          RESET IN/OUTPUT                        00113700
&ZMS           SETC  ' '                                                00113800
&ZMS           SETC  '&ZMS "ANSLEN" KEY AND ITS'                        00113900
               MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                   00114000
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00114100
.ZG11C         ANOP  ,                                                  00114200
.*-------------------------------------------------------------------   00114300
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00114400
               AIF   (K'&ZXANSLEN LE 0).ZG11R   NOT I/O                 00114500
               AIF   ('&XANSLEN'(1,1) NE '(').ZG11R                     00114600
&ZCGPR         SETC  '&XANSLEN'(2,K'&XANSLEN-2)                         00114700
               AIF   ('&ZCGPR'(1,1) NE '0').ZG11P                       00114800
               AIF   (K'&ZCGPR GT 2).ZG11Q                              00114900
               AIF   ('&ZCGPR' EQ '0').ZG11Q                            00115000
&ZCGPR         SETC  '&ZCGPR'(2,1)                                      00115100
               AIF   (T'&ZCGPR NE 'N').ZG11Q    INVALID REG NAME        00115200
.ZG11P         ANOP  ,                                                  00115300
               AIF   (T'&ZCGPR NE 'N').ZG11R    NON NUMERIC             00115400
               AIF   ('&ZCGPR' LT '2').ZG11Q                            00115500
               AIF   ('&ZCGPR' LE '12').ZG11R                           00115600
.ZG11Q         ANOP  ,                                                  00115700
&ZMS           SETC  '"ANSLEN='                                         00115800
&ZMS           SETC  '&ZMS.&ANSLEN"'                                    00115900
&ZMS           SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'          00116000
               MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                   00116100
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00116200
.ZG11R         ANOP  ,                                                  00116300
.*----------------------------------------------------------------***   00116400
.***AG.KXVAR05 NAME, RQD OUTPUT, KEYS -XVARIABLE KEY                    00116500
               AIF   (N'&QUERYLEN LE 1).ZG14A   CK NUM                  00116600
&ZMS           SETC  '"QUERYLEN='                                       00116700
&ZMS           SETC  '&ZMS.&QUERYLEN"'                                  00116800
&ZMS           SETC  '&ZMS "QUERYLEN"'                                  00116900
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00117000
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00117100
.ZG14A         ANOP  ,                                                  00117200
.*-------------------------------------------------------------------   00117300
.***AG.KXVAR06 NAME, RQD OUTPUT, KEYS -XVARIABLE                        00117400
&ZXQUERYLEN    SETC  'OUTPUT'    SET IN/OUTPUT                          00117500
&XQUERYLEN     SETC  '&QUERYLEN(1)'             SET XVARIABLE           00117600
               AIF   (N'&QUERYLEN GT 1).ZG14B   MULTI                   00117700
&XQUERYLEN     SETC  '&QUERYLEN'                SET XVARIABLE           00117800
.ZG14B         AIF   (K'&QUERYLEN(1) GT 0).ZG14C                        00117900
&ZXQUERYLEN    SETC  ''          RESET IN/OUTPUT                        00118000
&ZMS           SETC  ' '                                                00118100
&ZMS           SETC  '&ZMS "QUERYLEN" KEY AND ITS'                      00118200
               MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                   00118300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00118400
.ZG14C         ANOP  ,                                                  00118500
.*-------------------------------------------------------------------   00118600
.***AG.KCK02 NAME, RQD OUTPUT, KEYS -GPR OUT OF RANGE                   00118700
               AIF   (K'&ZXQUERYLEN LE 0).ZG14R  NOT I/O                00118800
               AIF   ('&XQUERYLEN'(1,1) NE '(').ZG14R                   00118900
&ZCGPR         SETC  '&XQUERYLEN'(2,K'&XQUERYLEN-2)                     00119000
               AIF   ('&ZCGPR'(1,1) NE '0').ZG14P                       00119100
               AIF   (K'&ZCGPR GT 2).ZG14Q                              00119200
               AIF   ('&ZCGPR' EQ '0').ZG14Q                            00119300
&ZCGPR         SETC  '&ZCGPR'(2,1)                                      00119400
               AIF   (T'&ZCGPR NE 'N').ZG14Q    INVALID REG NAME        00119500
.ZG14P         ANOP  ,                                                  00119600
               AIF   (T'&ZCGPR NE 'N').ZG14R    NON NUMERIC             00119700
               AIF   ('&ZCGPR' LT '2').ZG14Q                            00119800
               AIF   ('&ZCGPR' LE '12').ZG14R                           00119900
.ZG14Q         ANOP  ,                                                  00120000
&ZMS           SETC  '"QUERYLEN='                                       00120100
&ZMS           SETC  '&ZMS.&QUERYLEN"'                                  00120200
&ZMS           SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'          00120300
               MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                   00120400
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00120500
.ZG14R         ANOP  ,                                                  00120600
.*----------------------------------------------------------------***   00120700
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00120800
               AIF   (N'&RETCODE LE 1).ZG17A    CK NUM                  00120900
&ZMS           SETC  '"RETCODE='                                        00121000
&ZMS           SETC  '&ZMS.&RETCODE"'                                   00121100
&ZMS           SETC  '&ZMS "RETCODE"'                                   00121200
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00121300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00121400
.ZG17A         ANOP  ,                                                  00121500
.*-------------------------------------------------------------------   00121600
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00121700
               AIF   (K'&RETCODE(1) LE 0).ZG17C  NO PARM                00121800
&ZXRETCODE     SETC  'OUTPUT'    SET OUTPUT                             00121900
&XRETCODE      SETC  '&RETCODE(1)'              SET XVARIABLE           00122000
               AIF   (N'&RETCODE GT 1).ZG17C                            00122100
&XRETCODE      SETC  '&RETCODE'  SET XVARIABLE                          00122200
.ZG17C         ANOP  ,                                                  00122300
.*-------------------------------------------------------------------   00122400
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00122500
               AIF   (K'&ZXRETCODE LE 0).ZG17R  NOT I/O                 00122600
               AIF   ('&XRETCODE'(1,1) NE '(').ZG17R                    00122700
&ZCGPR         SETC  '&XRETCODE'(2,K'&XRETCODE-2)                       00122800
               AIF   ('&ZCGPR'(1,1) NE '0').ZG17P                       00122900
               AIF   (K'&ZCGPR GT 2).ZG17Q                              00123000
               AIF   ('&ZCGPR' EQ '0').ZG17Q                            00123100
&ZCGPR         SETC  '&ZCGPR'(2,1)                                      00123200
               AIF   (T'&ZCGPR NE 'N').ZG17Q    INVALID REG NAME        00123300
.ZG17P         ANOP  ,                                                  00123400
               AIF   (T'&ZCGPR NE 'N').ZG17R    NON NUMERIC             00123500
               AIF   ('&ZCGPR' EQ '15').ZG17R                           00123600
               AIF   ('&ZCGPR' LT '2').ZG17Q                            00123700
               AIF   ('&ZCGPR' LE '12').ZG17R                           00123800
.ZG17Q         ANOP  ,                                                  00123900
&ZMS           SETC  '"RETCODE='                                        00124000
&ZMS           SETC  '&ZMS.&RETCODE"'                                   00124100
&ZMS           SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'          00124200
               MNOTE 8,' &ZMS IN THE RANGE (2)-(12) OR (15).'           00124300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00124400
.ZG17R         ANOP  ,                                                  00124500
.*----------------------------------------------------------------***   00124600
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00124700
               AIF   (N'&RSNCODE LE 1).ZG20A    CK NUM                  00124800
&ZMS           SETC  '"RSNCODE='                                        00124900
&ZMS           SETC  '&ZMS.&RSNCODE"'                                   00125000
&ZMS           SETC  '&ZMS "RSNCODE"'                                   00125100
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00125200
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00125300
.ZG20A         ANOP  ,                                                  00125400
.*-------------------------------------------------------------------   00125500
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00125600
               AIF   (K'&RSNCODE(1) LE 0).ZG20C  NO PARM                00125700
&ZXRSNCODE     SETC  'OUTPUT'    SET OUTPUT                             00125800
&XRSNCODE      SETC  '&RSNCODE(1)'              SET XVARIABLE           00125900
               AIF   (N'&RSNCODE GT 1).ZG20C                            00126000
&XRSNCODE      SETC  '&RSNCODE'  SET XVARIABLE                          00126100
.ZG20C         ANOP  ,                                                  00126200
.*-------------------------------------------------------------------   00126300
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00126400
               AIF   (K'&ZXRSNCODE LE 0).ZG20R  NOT I/O                 00126500
               AIF   ('&XRSNCODE'(1,1) NE '(').ZG20R                    00126600
&ZCGPR         SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                       00126700
               AIF   ('&ZCGPR'(1,1) NE '0').ZG20P                       00126800
               AIF   (K'&ZCGPR GT 2).ZG20Q                              00126900
               AIF   ('&ZCGPR' EQ '0').ZG20R                            00127000
&ZCGPR         SETC  '&ZCGPR'(2,1)                                      00127100
               AIF   (T'&ZCGPR NE 'N').ZG20Q    INVALID REG NAME        00127200
.ZG20P         ANOP  ,                                                  00127300
               AIF   (T'&ZCGPR NE 'N').ZG20R    NON NUMERIC             00127400
               AIF   ('&ZCGPR' EQ '0').ZG20R                            00127500
               AIF   ('&ZCGPR' LT '2').ZG20Q                            00127600
               AIF   ('&ZCGPR' LE '12').ZG20R                           00127700
.ZG20Q         ANOP  ,                                                  00127800
&ZMS           SETC  '"RSNCODE='                                        00127900
&ZMS           SETC  '&ZMS.&RSNCODE"'                                   00128000
&ZMS           SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'          00128100
               MNOTE 8,' &ZMS IN THE RANGE (0) OR (2)-(12).'            00128200
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00128300
.ZG20R         ANOP  ,                                                  00128400
.******************************************************************     00128500
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00128600
.******************************************************************     00128700
               ACTR  10000                                              00128800
.*----------------------------------------------------------------***   00128900
.***AH.P02 EXTRA POSITIONALS                                            00129000
               AIF   (N'&SYSLIST LE 0).ZGLISTX  NO EXTRAS               00129100
               AIF   (N'&SYSLIST NE 2).ZGLISTX1  NOT NULL               00129200
               AIF   ('&SYSLIST(1)' NE '').ZGLISTX1  NOT NULL           00129300
               AIF   ('&SYSLIST(2)' EQ '').ZGLISTX  NOT NULL            00129400
.ZGLISTX1      ANOP  ,                                                  00129500
&ZCVAL         SETC  ''          ERROR FIELD                            00129600
&ZAWRK         SETA  0           POSITIONAL NUMBER                      00129700
.ZGLIST2       ANOP  ,                                                  00129800
&ZAWRK         SETA  &ZAWRK+1    NEXT POSITIONAL                        00129900
               AIF   (&ZAWRK GT N'&SYSLIST).ZGLIST3  DONE               00130000
&ZCVAL         SETC '&ZCVAL,&SYSLIST(&ZAWRK)'   EXTRA                   00130100
               AGO   .ZGLIST2                                           00130200
.*                                                                      00130300
.ZGLIST3       ANOP  ,                                                  00130400
&ZCVAL         SETC '&ZCVAL'(2,K'&ZCVAL-1)      STRIP COMMA             00130500
&ZMS           SETC  'POSITIONAL ARGUMENT(S),'                          00130600
&ZMS           SETC  '&ZMS "&ZCVAL"'                                    00130700
&ZMS           SETC  '&ZMS CANNOT BE USED.'                             00130800
&ZMS           SETC  '&ZMS NO POSITIONAL ARGUMENTS'                     00130900
               MNOTE 8,' &ZMS ARE ALLOWED.'                             00131000
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00131100
.ZGLISTX       ANOP  ,                                                  00131200
&ZASYSLNDX     SETA  0                                                  00131300
.*-------------------------------------------------------------------   00131400
.***AG.MF04 MF=(SLE)                                                    00131500
.ZGMFX         ANOP  ,           END OF FULL SYNTAX CHECK               00131600
.*******************************************************************    00131700
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       00131800
.*******************************************************************    00131900
               AIF   (&ZMACRET NE 0).ZLX2       ERROR DETECTED          00132000
.*******************************************************************    00132100
.***AE.01  START OF IWM4QHLT MACRO CODE                                 00132200
.*******************************************************************    00132300
               LCLC  &M0M0001                 NAME                      00132400
&M0M0001       SETC  '&XLABEL'                SET NAME                  00132500
               AIF   (K'&XLABEL NE 0).XLAB2                             00132600
&M0M0001       SETC  'M00M&SYSNDX'            DEFAULT NAME              00132700
.*                                                                      00132800
.XLAB2         ANOP  ,                                                  00132900
               AIF   ('&XMF' EQ 'L').XLAB3                              00133000
&M0M0001 DS    0H                             IWM4QHLT-0                00133100
.XLAB3         ANOP  ,                                                  00133200
.*******************************************************************    00133300
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              00133400
.*******************************************************************    00133500
              PUSH  PRINT                                               00133600
               AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON         00133700
               PRINT OFF         ++ PR01                                00133800
               AGO   .ZPRNTXX                                           00133900
.ZPRINTX       PRINT ON                                                 00134000
.ZPRNTXX       ANOP  ,                                                  00134100
.********************************************************************   00134200
.***AL.L01 INTERNAL ARRAY TO PRODUCE FORMATTED CODE                     00134300
.********************************************************************   00134400
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       00134500
                      LCLA  &ZOPN1         INVOCATION INDEX             00134600
                      LCLC  &ZOPL(4095)    LABEL                        00134700
                      LCLC  &ZOPO(4095)    OPERATION                    00134800
                      LCLC  &ZOPV(4095)    VALUE                        00134900
                      LCLC  &ZOPD(4095)    DESCRIPTION                  00135000
.*                                                                      00135100
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     00135200
.******************************************************************     00135300
.***AL.L10 IWM4QHLT FMT=LIST MF=S!L PARAMETERS                          00135400
.******************************************************************     00135500
                      AIF   ('&XMF' EQ 'L').ZLMFSL2                     00135600
                      AIF   ('&XMF' NE 'S').ZLMFSLX                     00135700
&XMFCTRL              SETC  '#Z'.'&SYSNDX'.'A'                          00135800
&XMFATTR              SETC  '0D'                                        00135900
.*                                                                      00136000
&ZOPN                 SETA  &ZOPN+1                                     00136100
&ZOPL(&ZOPN)          SETC  ' '                                         00136200
&ZOPO(&ZOPN)          SETC  'CNOP'                                      00136300
&ZOPV(&ZOPN)          SETC  '4,8'                                       00136400
&ZOPN                 SETA  &ZOPN+1                                     00136500
&ZOPL(&ZOPN)          SETC  ' '                                         00136600
&ZOPO(&ZOPN)          SETC  'BRAS'                                      00136700
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL.S'                              00136800
&ZOPD(&ZOPN)          SETC  '++ IWM4QHLT ARG PARMS'                     00136900
.*                                                                      00137000
&ZOPN                 SETA  &ZOPN+1                                     00137100
&ZOPL(&ZOPN)          SETC  ' '                                         00137200
&ZOPO(&ZOPN)          SETC  'SPACE'                                     00137300
&ZOPV(&ZOPN)          SETC  '1'                                         00137400
&ZOPD(&ZOPN)          SETC  ' '                                         00137500
.*                                                                      00137600
.ZLMFSL2              ANOP  ,                                           00137700
.*-------------------------------------------------------------------   00137800
.***AM.L00  IWM4QHLT FMT=LIST name                                      00137900
                      AIF   ('&XMF' NE 'L').ZLMFSL2M                    00138000
&ZOPN                 SETA &ZOPN+1                                      00138100
&ZOPL(&ZOPN)          SETC '&M0M0001'                                   00138200
&ZOPO(&ZOPN)          SETC 'EQU'                                        00138300
&ZOPV(&ZOPN)          SETC '&XMFCTRL'                                   00138400
&ZOPD(&ZOPN)          SETC '++ IWM4QHLT NAME'                           00138500
.ZLMFSL2M             ANOP  ,                                           00138600
.*-------------------------------------------------------------------   00138700
.***AM.L01  IWM4QHLT FMT=LIST PARAMETERS                                00138800
&ZOPN                 SETA &ZOPN+1                                      00138900
&ZOPL(&ZOPN)          SETC '&XMFCTRL'                                   00139000
&ZOPO(&ZOPN)          SETC 'DS'                                         00139100
&ZOPV(&ZOPN)          SETC '&XMFATTR'                                   00139200
&ZOPD(&ZOPN)          SETC '++ IWM4QHLT PARM LIST'                      00139300
.*-------------------------------------------------------------------   00139400
.***AM.L02 XVERSION XL1                                                 00139500
&ZOPN                 SETA &ZOPN+1                                      00139600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XVERSION'                         00139700
&ZOPO(&ZOPN)          SETC 'DS'                                         00139800
&ZOPV(&ZOPN)          SETC 'XL1'                                        00139900
&ZOPD(&ZOPN)          SETC '++ INPUT XVERSION'                          00140000
.*-------------------------------------------------------------------   00140100
.***AM.L03 XFLAGS BL.8                                                  00140200
&ZOPN                 SETA &ZOPN+1                                      00140300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XFLAGS'                           00140400
&ZOPO(&ZOPN)          SETC 'DS'                                         00140500
&ZOPV(&ZOPN)          SETC 'BL.8'                                       00140600
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'                             00140700
.*                                                                      00140800
&ZOPN                 SETA  &ZOPN+1                                     00140900
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_ASID_LIST'               00141000
&ZOPO(&ZOPN)          SETC  'EQU'                                       00141100
&ZOPV(&ZOPN)          SETC  'B''10000000'''                             00141200
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               00141300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ASID_LIST'                    00141400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00141500
.*                                                                      00141600
&ZOPN                 SETA  &ZOPN+1                                     00141700
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_ASID_NUM'                00141800
&ZOPO(&ZOPN)          SETC  'EQU'                                       00141900
&ZOPV(&ZOPN)          SETC  'B''01000000'''                             00142000
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               00142100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ASID_NUM'                     00142200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00142300
.*-------------------------------------------------------------------   00142400
.***AM.L09  XPLISTLEN XL2                                               00142500
&ZOPN                 SETA &ZOPN+1                                      00142600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPLISTLEN'                        00142700
&ZOPO(&ZOPN)          SETC 'DS'                                         00142800
&ZOPV(&ZOPN)          SETC 'XL2'                                        00142900
&ZOPD(&ZOPN)          SETC '++ INPUT '                                  00143000
.*-------------------------------------------------------------------   00143100
.***AM.L09  XASID_NUM F                                                 00143200
&ZOPN                 SETA &ZOPN+1                                      00143300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XASID_NUM'                        00143400
&ZOPO(&ZOPN)          SETC 'DS'                                         00143500
&ZOPV(&ZOPN)          SETC 'F'                                          00143600
&ZOPD(&ZOPN)          SETC '++ &ZXASID_NUM '                            00143700
.*-------------------------------------------------------------------   00143800
.***AM.L09 ADDR3164 XASID_LIST AD                                       00143900
&ZOPN                 SETA &ZOPN+1                                      00144000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XASID_LIST_ADDR3164'              00144100
&ZOPO(&ZOPN)          SETC 'DS'                                         00144200
&ZOPV(&ZOPN)          SETC 'AD'                                         00144300
&ZOPD(&ZOPN)          SETC '++ &ZXASID_LIST ADDR3164'                   00144400
.*-------------------------------------------------------------------   00144500
.***AM.L09 ADDR3164 XANSAREA AD                                         00144600
&ZOPN                 SETA &ZOPN+1                                      00144700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XANSAREA_ADDR3164'                00144800
&ZOPO(&ZOPN)          SETC 'DS'                                         00144900
&ZOPV(&ZOPN)          SETC 'AD'                                         00145000
&ZOPD(&ZOPN)          SETC '++ &ZXANSAREA ADDR3164'                     00145100
.*-------------------------------------------------------------------   00145200
.***AM.L09 ALET XANSAREA F                                              00145300
&ZOPN                 SETA &ZOPN+1                                      00145400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XANSAREA_ALET'                    00145500
&ZOPO(&ZOPN)          SETC 'DS'                                         00145600
&ZOPV(&ZOPN)          SETC 'F'                                          00145700
&ZOPD(&ZOPN)          SETC '++ &ZXANSAREA ALET'                         00145800
.*-------------------------------------------------------------------   00145900
.***AM.L09  XANSLEN F                                                   00146000
&ZOPN                 SETA &ZOPN+1                                      00146100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XANSLEN'                          00146200
&ZOPO(&ZOPN)          SETC 'DS'                                         00146300
&ZOPV(&ZOPN)          SETC 'F'                                          00146400
&ZOPD(&ZOPN)          SETC '++ &ZXANSLEN '                              00146500
.*-------------------------------------------------------------------   00146600
.***AM.L09  XQUERYLEN F                                                 00146700
&ZOPN                 SETA &ZOPN+1                                      00146800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XQUERYLEN'                        00146900
&ZOPO(&ZOPN)          SETC 'DS'                                         00147000
&ZOPV(&ZOPN)          SETC 'F'                                          00147100
&ZOPD(&ZOPN)          SETC '++ &ZXQUERYLEN '                            00147200
.*-------------------------------------------------------------------   00147300
.***AM.L09  XRSV0024 CL12                                               00147400
&ZOPN                 SETA &ZOPN+1                                      00147500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0024'                         00147600
&ZOPO(&ZOPN)          SETC 'DS'                                         00147700
&ZOPV(&ZOPN)          SETC 'CL12'                                       00147800
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00147900
.*-------------------------------------------------------------------   00148000
.***AM.L10 END OF IWM4QHLT LIST PARAMETERS                              00148100
&ZOPN                 SETA &ZOPN+1                                      00148200
&ZOPL(&ZOPN)          SETC '&XMFCTRL.L'                                 00148300
&ZOPO(&ZOPN)          SETC 'EQU'                                        00148400
&ZOPV(&ZOPN)          SETC '*-&XMFCTRL'                                 00148500
&ZOPD(&ZOPN)          SETC '++ LENGTH OF PLIST'                         00148600
.*                                                                      00148700
&ZOPN                 SETA &ZOPN+1                                      00148800
&ZOPL(&ZOPN)          SETC ' '                                          00148900
&ZOPO(&ZOPN)          SETC 'SPACE'                                      00149000
&ZOPV(&ZOPN)          SETC '1'                                          00149100
&ZOPD(&ZOPN)          SETC ' '                                          00149200
.*-------------------------------------------------------------------   00149300
.***AL.L12 IWM4QHLT FMT=LIST MF=S!L PARAMETERS                          00149400
                      AIF   ('&XMF' EQ 'L').ZMFLX  DONE IF MF=L         00149500
.*                                                                      00149600
&ZOPN                 SETA  &ZOPN+1                                     00149700
&ZOPL(&ZOPN)          SETC  '&XMFCTRL.S'                                00149800
&ZOPO(&ZOPN)          SETC  'DC'                                        00149900
&ZOPV(&ZOPN)          SETC  '0H''0'''                                   00150000
&ZOPD(&ZOPN)          SETC  '++ IWM4QHLT ARG PARMS'                     00150100
.*                                                                      00150200
.ZLMFSLX              ANOP  ,                                           00150300
.*-------------------------------------------------------------------   00150400
.***AL.L13 SET ZPLLEN TO ITS APPROPRIATE VALUE                          00150500
&ZPLLEN               SETA 48                                           00150600
.*                                                                      00150700
.******************************************************************     00150800
.***AI.L01 IWM4QHLT FMT=LIST FILL IN PARAMETER AREA                     00150900
.******************************************************************     00151000
                      ACTR  10000                                       00151100
&ZCVAL                SETC  'LA'           ASSUME XA MODE               00151200
                      AIF   ('&SYSASCE' EQ 'P').ZIMFXA  SYSSTATE PRI    00151300
&ZCVAL                SETC  'LAE'          XAX MODE                     00151400
.ZIMFXA               ANOP ,                                            00151500
.*                                                                      00151600
                      AIF   ('&XMFCTRL'(1,1) NE '(').ZIMFN2  NOT GPR    00151700
&ZCGPR                SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)  GET GPR         00151800
                      AIF   ('&ZCGPR' EQ 'GPR1').ZIMFNX                 00151900
                      AIF   ('&ZCGPR' EQ 'GPR01').ZIMFNX                00152000
                      AIF   ('&ZCGPR' EQ 'REG1').ZIMFNX                 00152100
                      AIF   ('&ZCGPR' EQ 'REG01').ZIMFNX                00152200
                      AIF   ('&ZCGPR' EQ 'R1').ZIMFNX                   00152300
                      AIF   ('&ZCGPR' EQ '1').ZIMFNX                    00152400
                      AIF   ('&ZCGPR' EQ '01').ZIMFNX                   00152500
&ZOPN                 SETA  &ZOPN+1                                     00152600
&ZOPL(&ZOPN)          SETC  ' '                                         00152700
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00152800
&ZOPV(&ZOPN)          SETC  '1,0(,&ZCGPR)'                              00152900
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00153000
                      AGO   .ZIMFNX                                     00153100
.*                                                                      00153200
.ZIMFN2               ANOP ,                                            00153300
                      AIF   ('&XMF' NE 'S').ZIMFNX1                     00153400
                      AIF   ('&ZCVAL' NE 'LAE').ZIMFNX                  00153500
&ZOPN                 SETA  &ZOPN+1                                     00153600
&ZOPL(&ZOPN)          SETC  ' '                                         00153700
&ZOPO(&ZOPN)          SETC  'LAE'                                       00153800
&ZOPV(&ZOPN)          SETC  '1,0(1,0)'                                  00153900
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00154000
                      AGO   .ZIMFNX                                     00154100
.ZIMFNX1              ANOP ,                                            00154200
&ZOPN                 SETA  &ZOPN+1                                     00154300
&ZOPL(&ZOPN)          SETC  ' '                                         00154400
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00154500
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL'                                00154600
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00154700
.ZIMFNX               ANOP ,                                            00154800
.********************************************************************   00154900
.***AI.L02 IWM4QHLT FMT=LIST INITIALIZE PARAMETER AREA                  00155000
.********************************************************************   00155100
.***AI.L03 MF=(SLE)                                                     00155200
                      AIF   ('&XMF' EQ 'L').ZIMFLX                      00155300
.*                                                                      00155400
&ZOPN                 SETA  &ZOPN+1                                     00155500
&ZOPL(&ZOPN)          SETC  ' '                                         00155600
&ZOPO(&ZOPN)          SETC  'XC'                                        00155700
&ZOPV(&ZOPN)          SETC  '0(&ZPLLEN,1),0(1)'                         00155800
&ZOPD(&ZOPN)          SETC  '++ INITIALIZE'                             00155900
.ZIMFLX               ANOP  ,                                           00156000
.*-------------------------------------------------------------------   00156100
.***AI.L05 XFLAGS BL1                                                   00156200
&ZW                   SETC  ''                                          00156300
&ZCLNG                SETC  ''             RESET BIT ON FLAG            00156400
.*-------------------------------------------------------------------   00156500
.***AI.L08 XFLAGS "ASID_LIST"                                           00156600
.***      BL1'1XXXXXXX'                                                 00156700
         AIF   ('&ASID_LIST' EQ '').ZI3A                                00156800
&ZW                   SETC  '&ZW.1'                                     00156900
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00157000
                      AGO   .ZI3C                                       00157100
.*                                                                      00157200
.ZI3A                 ANOP  ,                                           00157300
&ZW                   SETC  '&ZW.0'                                     00157400
.ZI3C                 ANOP  ,                                           00157500
.*-------------------------------------------------------------------   00157600
.***AI.L08 XFLAGS "ASID_NUM"                                            00157700
.***      BL1'X1XXXXXX'                                                 00157800
         AIF   ('&ASID_NUM' EQ '').ZI4A                                 00157900
&ZW                   SETC  '&ZW.1000000'                               00158000
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00158100
                      AGO   .ZI4C                                       00158200
.*                                                                      00158300
.ZI4A                 ANOP  ,                                           00158400
&ZW                   SETC  '&ZW.0000000'                               00158500
.ZI4C                 ANOP  ,                                           00158600
.*-------------------------------------------------------------------   00158700
.***AI.L11 XFLAGS BL1                                                   00158800
                      AIF   ('&ZCLNG' NE 'YES').ZI4E  ALL ZERO BITS     00158900
&ZOPN                 SETA  &ZOPN+1                                     00159000
&ZOPL(&ZOPN)          SETC  ' '                                         00159100
&ZOPO(&ZOPN)          SETC  'OI'                                        00159200
&ZOPV(&ZOPN)          SETC  '1(1),B''&ZW'''                             00159300
&ZOPD(&ZOPN)          SETC  '++ INPUT BL1'                              00159400
.ZI4E                 ANOP  ,                                           00159500
.*-------------------------------------------------------------------   00159600
.***AI.L04 XPLISTLEN XL2                                                00159700
&ZOPN                 SETA  &ZOPN+1                                     00159800
&ZOPL(&ZOPN)          SETC  ' '                                         00159900
&ZOPO(&ZOPN)          SETC  'MVC'                                       00160000
&ZOPV(&ZOPN)          SETC  '2(2,1),=AL2(&ZPLLEN)'                      00160100
&ZOPD(&ZOPN)          SETC  '++ INPUT XPLISTLEN XL2'                    00160200
.*-------------------------------------------------------------------   00160300
.***AI.L25  XASID_NUM F                                                 00160400
                      AIF   ('&ZXASID_NUM' EQ '').ZI6E                  00160500
                      AIF   ('&ZXASID_NUM' EQ 'OUTPUT').ZI6E            00160600
&ZCGPR                SETC  '&XASID_NUM'                                00160700
.*                                                                      00160800
                      AIF   ('&XASID_NUM'(1,1) NE '(').ZI6B             00160900
&ZCGPR   SETC  '0('.'&XASID_NUM'(2,K'&XASID_NUM-2).')'                  00161000
                      AGO   .ZI6D                                       00161100
.ZI6B                 ANOP  ,                                           00161200
.*                                                                      00161300
&ZC                   SETC  '&XASID_NUM'(1,1)                           00161400
                      AIF   (T'&ZC NE 'N').ZI6D                         00161500
&ZC                   SETC  '&XASID_NUM'                                00161600
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI6D                00161700
&ZCGPR                SETC  '=AL4(&XASID_NUM)'                          00161800
.*                                                                      00161900
.ZI6D                 ANOP  ,                                           00162000
.*                                                                      00162100
&ZOPN                 SETA  &ZOPN+1                                     00162200
&ZOPL(&ZOPN)          SETC  ' '                                         00162300
&ZOPO(&ZOPN)          SETC  'MVC'                                       00162400
&ZOPV(&ZOPN)          SETC  '4(4,1),&ZCGPR'                             00162500
&ZOPD(&ZOPN)          SETC  '++ &ZXASID_NUM XASID_NUM'                  00162600
.*                                                                      00162700
.ZI6E                 ANOP  ,                                           00162800
.*-------------------------------------------------------------------   00162900
.***AI.L18 ADDR3164 XASID_LIST AD                                       00163000
         AIF   ('&XASID_LIST' NE 'NO_ASID_LIST').ZI7                    00163100
&ZXASID_LIST          SETC  ''             RESET INPUT/OUTPUT           00163200
.ZI7                  ANOP  ,                                           00163300
.*-------------------------------------------------------------------   00163400
.***AI.L19 ADDR3164 XASID_LIST AD                                       00163500
                      AIF   ('&ZXASID_LIST' EQ '').ZI7H                 00163600
&ZCLNG                SETC  '&XASID_LIST'                               00163700
&ZCGPR                SETC  '14'                                        00163800
         AIF   ('&XASID_LIST'(1,1) EQ '(').ZI7F  IN GPR                 00163900
.*                                                                      00164000
&ZOPN                 SETA  &ZOPN+1                                     00164100
&ZOPL(&ZOPN)          SETC  ' '                                         00164200
&ZOPO(&ZOPN)          SETC  'LA'                                        00164300
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             00164400
&ZOPD(&ZOPN)          SETC  '++ &ZXASID_LIST XASID_LIST'                00164500
.*                                                                      00164600
                      AGO   .ZI7G                                       00164700
.*                                                                      00164800
.ZI7F                 ANOP  ,                                           00164900
&ZCGPR   SETC  '&XASID_LIST'(2,K'&XASID_LIST-2)                         00165000
.*                                                                      00165100
.ZI7G                 ANOP  ,                                           00165200
                      AIF   ('&SYSAM64' EQ 'YES').ZI7H1A                00165300
.*                                                                      00165400
&ZOPN                 SETA  &ZOPN+1                                     00165500
&ZOPL(&ZOPN)          SETC  ' '                                         00165600
&ZOPO(&ZOPN)          SETC  'ST'                                        00165700
&ZOPV(&ZOPN)          SETC  '&ZCGPR,4+8(,1)'                            00165800
&ZOPD(&ZOPN)          SETC  '++ &ZXASID_LIST XASID_LIST'                00165900
.*                                                                      00166000
                      AGO   .ZI7H                                       00166100
.ZI7H1A               ANOP  ,                                           00166200
.*                                                                      00166300
&ZOPN                 SETA  &ZOPN+1                                     00166400
&ZOPL(&ZOPN)          SETC  ' '                                         00166500
&ZOPO(&ZOPN)          SETC  'STG'                                       00166600
&ZOPV(&ZOPN)          SETC  '&ZCGPR,8(,1)'                              00166700
&ZOPD(&ZOPN)          SETC  '++ &ZXASID_LIST XASID_LIST'                00166800
.*                                                                      00166900
.ZI7H                 ANOP  ,                                           00167000
.*-------------------------------------------------------------------   00167100
.***AI.L19 ADDR3164 XANSAREA AD                                         00167200
                      AIF   ('&ZXANSAREA' EQ '').ZI8H                   00167300
&ZCLNG                SETC  '&XANSAREA'                                 00167400
&ZCGPR                SETC  '14'                                        00167500
         AIF   ('&XANSAREA'(1,1) EQ '(').ZI8F  IN GPR                   00167600
.*                                                                      00167700
&ZOPN                 SETA  &ZOPN+1                                     00167800
&ZOPL(&ZOPN)          SETC  ' '                                         00167900
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00168000
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             00168100
&ZOPD(&ZOPN)          SETC  '++ &ZXANSAREA XANSAREA'                    00168200
.*                                                                      00168300
                      AGO   .ZI8G                                       00168400
.*                                                                      00168500
.ZI8F                 ANOP  ,                                           00168600
&ZCGPR   SETC  '&XANSAREA'(2,K'&XANSAREA-2)                             00168700
.*                                                                      00168800
.ZI8G                 ANOP  ,                                           00168900
                      AIF   ('&SYSAM64' EQ 'YES').ZI8H1A                00169000
.*                                                                      00169100
&ZOPN                 SETA  &ZOPN+1                                     00169200
&ZOPL(&ZOPN)          SETC  ' '                                         00169300
&ZOPO(&ZOPN)          SETC  'ST'                                        00169400
&ZOPV(&ZOPN)          SETC  '&ZCGPR,4+16(,1)'                           00169500
&ZOPD(&ZOPN)          SETC  '++ &ZXANSAREA XANSAREA'                    00169600
.*                                                                      00169700
                      AGO   .ZI8H                                       00169800
.ZI8H1A               ANOP  ,                                           00169900
.*                                                                      00170000
&ZOPN                 SETA  &ZOPN+1                                     00170100
&ZOPL(&ZOPN)          SETC  ' '                                         00170200
&ZOPO(&ZOPN)          SETC  'STG'                                       00170300
&ZOPV(&ZOPN)          SETC  '&ZCGPR,16(,1)'                             00170400
&ZOPD(&ZOPN)          SETC  '++ &ZXANSAREA XANSAREA'                    00170500
.*                                                                      00170600
.ZI8H                 ANOP  ,                                           00170700
.*-------------------------------------------------------------------   00170800
.***AI.L23 ALET XANSAREA F                                              00170900
         AIF   ('&ZXANSAREA' EQ '').ZI9G                                00171000
         AIF   ('&SYSASCE' EQ 'P').ZI9G    SYSSTATE PRIMARY             00171100
&ZCLNG                SETC  '&XANSAREA'                                 00171200
         AIF   ('&XANSAREA'(1,1) EQ '(').ZI9E  IN AR                    00171300
.*                                                                      00171400
&ZCGPR                SETC  '14'                                        00171500
                      AGO   .ZI9F                                       00171600
.*                                                                      00171700
.ZI9E                 ANOP  ,                                           00171800
&ZCGPR   SETC  '&XANSAREA'(2,K'&XANSAREA-2)                             00171900
.*                                                                      00172000
.ZI9F                 ANOP  ,                                           00172100
.*                                                                      00172200
&ZOPN                 SETA  &ZOPN+1                                     00172300
&ZOPL(&ZOPN)          SETC  ' '                                         00172400
&ZOPO(&ZOPN)          SETC  'STAM'                                      00172500
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCGPR,24(1)'                       00172600
&ZOPD(&ZOPN)          SETC  '++ &ZXANSAREA XANSAREA'                    00172700
.*                                                                      00172800
.ZI9G                 ANOP  ,                                           00172900
.*-------------------------------------------------------------------   00173000
.***AI.L25  XANSLEN F                                                   00173100
                      AIF   ('&ZXANSLEN' EQ '').ZI10E                   00173200
                      AIF   ('&ZXANSLEN' EQ 'OUTPUT').ZI10E             00173300
&ZCGPR                SETC  '&XANSLEN'                                  00173400
.*                                                                      00173500
                      AIF   ('&XANSLEN'(1,1) NE '(').ZI10B              00173600
&ZCGPR   SETC  '0('.'&XANSLEN'(2,K'&XANSLEN-2).')'                      00173700
                      AGO   .ZI10D                                      00173800
.ZI10B                ANOP  ,                                           00173900
.*                                                                      00174000
&ZC                   SETC  '&XANSLEN'(1,1)                             00174100
                      AIF   (T'&ZC NE 'N').ZI10D                        00174200
&ZC                   SETC  '&XANSLEN'                                  00174300
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI10D               00174400
&ZCGPR                SETC  '=FL4''&XANSLEN'''                          00174500
.*                                                                      00174600
.ZI10D                ANOP  ,                                           00174700
.*                                                                      00174800
&ZOPN                 SETA  &ZOPN+1                                     00174900
&ZOPL(&ZOPN)          SETC  ' '                                         00175000
&ZOPO(&ZOPN)          SETC  'MVC'                                       00175100
&ZOPV(&ZOPN)          SETC  '28(4,1),&ZCGPR'                            00175200
&ZOPD(&ZOPN)          SETC  '++ &ZXANSLEN XANSLEN'                      00175300
.*                                                                      00175400
.ZI10E                ANOP  ,                                           00175500
.*-------------------------------------------------------------------   00175600
&ZOPN1                SETA &ZOPN                                        00175700
.*******************************************************************    00175800
.***  PROCESS IWM4QHLT OUTPUT PARAMETERS                                00175900
.*******************************************************************    00176000
                      ACTR  10000                                       00176100
.*------------------------------------------------------------------    00176200
.***AO.L02 XQUERYLEN F                                                  00176300
         AIF   ('&ZXQUERYLEN' EQ 'OUTPUT').ZO11A  OUTPUT                00176400
         AIF   ('&ZXQUERYLEN' NE 'INOUT').ZO11C  INOUT                  00176500
.ZO11A    AIF   ('&XQUERYLEN'(1,1) NE '(').ZO11B  ADDR IN GPR           00176600
&ZCGPR   SETC  '&XQUERYLEN'(2,K'&XQUERYLEN-2)                           00176700
&ZOPN                 SETA  &ZOPN+1                                     00176800
&ZOPL(&ZOPN)          SETC  ' '                                         00176900
&ZOPO(&ZOPN)          SETC  'MVC'                                       00177000
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),32(1)'                         00177100
&ZOPD(&ZOPN)          SETC  '++ XQUERYLEN F'                            00177200
                      AGO   .ZO11C                                      00177300
.*                                                                      00177400
.ZO11B                ANOP  ,                                           00177500
&ZAWRK   SETA  K'&XQUERYLEN                                             00177600
         AIF   ('&XQUERYLEN'(&ZAWRK,1) NE ')').ZO11G                    00177700
&ZN      SETA  2                                                        00177800
.ZO11H    ANOP                                                          00177900
         AIF   (&ZN GE &ZAWRK).ZO11G                                    00178000
         AIF   ('&XQUERYLEN'(&ZN,1) NE '(').ZO11I                       00178100
&ZC      SETC  '&XQUERYLEN'(1,&ZN).'4'.','                              00178200
&ZC      SETC  '&ZC'.'&XQUERYLEN'(&ZN+1,&ZAWRK-&ZN).',32(1)'            00178300
         AGO   .ZO11J                                                   00178400
.ZO11I    ANOP                                                          00178500
&ZN      SETA  &ZN+1                                                    00178600
         AGO   .ZO11H                                                   00178700
.ZO11G    ANOP                                                          00178800
&ZC      SETC  '&XQUERYLEN.(4),32(1)'                                   00178900
.ZO11J    ANOP                                                          00179000
&ZOPN                 SETA  &ZOPN+1                                     00179100
&ZOPL(&ZOPN)          SETC  ' '                                         00179200
&ZOPO(&ZOPN)          SETC  'MVC'                                       00179300
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00179400
&ZOPD(&ZOPN)          SETC  '++ XQUERYLEN F'                            00179500
.ZO11C                ANOP  ,                                           00179600
.*******************************************************************    00179700
.***AO.X02  RETURN CODE PROCESSING                                      00179800
.*******************************************************************    00179900
                      AIF   (N'&RETCODE LE 0).ZMRETX                    00180000
                      AIF   ('&XRETCODE'(1,1) EQ '(').ZMRET2            00180100
                      AIF   ('&XRETCODE' EQ 'GPR15').ZMRETX             00180200
                      AIF   ('&XRETCODE' EQ 'REG15').ZMRETX             00180300
                      AIF   ('&XRETCODE' EQ 'R15').ZMRETX               00180400
                      AIF   ('&XRETCODE' EQ '15').ZMRETX                00180500
&ZOPN                 SETA  &ZOPN+1                                     00180600
&ZOPL(&ZOPN)          SETC  ' '                                         00180700
&ZOPO(&ZOPN)          SETC  'ST'                                        00180800
&ZOPV(&ZOPN)          SETC  '15,&XRETCODE'                              00180900
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00181000
                      AGO   .ZMRETX                                     00181100
.*                                                                      00181200
.ZMRET2               ANOP  ,                                           00181300
&ZCGPR                SETC  '&XRETCODE'(2,K'&XRETCODE-2)                00181400
                      AIF   ('&ZCGPR' EQ 'GPR15').ZMRETX                00181500
                      AIF   ('&ZCGPR' EQ 'REG15').ZMRETX                00181600
                      AIF   ('&ZCGPR' EQ 'R15').ZMRETX                  00181700
                      AIF   ('&ZCGPR' EQ '15').ZMRETX                   00181800
&ZOPN                 SETA  &ZOPN+1                                     00181900
&ZOPL(&ZOPN)          SETC  ' '                                         00182000
&ZOPO(&ZOPN)          SETC  '&ZMAC_LR'                                  00182100
&ZOPV(&ZOPN)          SETC  '&ZCGPR,15'                                 00182200
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00182300
.ZMRETX               ANOP  ,                                           00182400
.*******************************************************************    00182500
.***AO.X03  REASON CODE PROCESSING                                      00182600
.*******************************************************************    00182700
                      AIF   (N'&RSNCODE LE 0).ZMRSNX                    00182800
                      AIF   ('&XRSNCODE'(1,1) EQ '(').ZMRSN2            00182900
                      AIF   ('&XRSNCODE' EQ 'GPR0').ZMRSNX              00183000
                      AIF   ('&XRSNCODE' EQ 'GPR00').ZMRSNX             00183100
                      AIF   ('&XRSNCODE' EQ 'REG0').ZMRSNX              00183200
                      AIF   ('&XRSNCODE' EQ 'REG00').ZMRSNX             00183300
                      AIF   ('&XRSNCODE' EQ 'R0').ZMRSNX                00183400
                      AIF   ('&XRSNCODE' EQ '0').ZMRSNX                 00183500
                      AIF   ('&XRSNCODE' EQ '00').ZMRSNX                00183600
&ZOPN                 SETA  &ZOPN+1                                     00183700
&ZOPL(&ZOPN)          SETC  ' '                                         00183800
&ZOPO(&ZOPN)          SETC  'ST'                                        00183900
&ZOPV(&ZOPN)          SETC  '0,&XRSNCODE'                               00184000
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00184100
                      AGO   .ZMRSNX                                     00184200
.*                                                                      00184300
.ZMRSN2               ANOP  ,                                           00184400
&ZCGPR                SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                00184500
                      AIF   ('&ZCGPR' EQ 'GPR0').ZMRSNX                 00184600
                      AIF   ('&ZCGPR' EQ 'GPR00').ZMRSNX                00184700
                      AIF   ('&ZCGPR' EQ 'REG0').ZMRSNX                 00184800
                      AIF   ('&ZCGPR' EQ 'REG00').ZMRSNX                00184900
                      AIF   ('&ZCGPR' EQ 'R0').ZMRSNX                   00185000
                      AIF   ('&ZCGPR' EQ '0').ZMRSNX                    00185100
                      AIF   ('&ZCGPR' EQ '00').ZMRSNX                   00185200
&ZOPN                 SETA  &ZOPN+1                                     00185300
&ZOPL(&ZOPN)          SETC  ' '                                         00185400
&ZOPO(&ZOPN)          SETC  '&ZMAC_LR'                                  00185500
&ZOPV(&ZOPN)          SETC  '&ZCGPR,0'                                  00185600
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00185700
.ZMRSNX               ANOP  ,                                           00185800
.*******************************************************************    00185900
.***AO.X04  LABEL FOR MF=L PROCESSING                                   00186000
.*******************************************************************    00186100
.ZMFLX                ANOP  ,              MF=L PROCESSING              00186200
.*******************************************************************    00186300
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               00186400
.*******************************************************************    00186500
                      ACTR  10000                                       00186600
.*                                                                      00186700
                      LCLA  &ZLC           COLUMN POSITION              00186800
                      LCLA  &ZOPX          LIST TABLE INDEX             00186900
                      LCLC  &ZLL           LABEL                        00187000
                      LCLC  &ZLOP          OPERATION                    00187100
                      LCLC  &ZLV           VALUE                        00187200
                      LCLC  &ZLD           DESCRIPTION                  00187300
.*                                                                      00187400
&ZOPX                 SETA  1                                           00187500
.ZL2                  AIF   (&ZOPX GT &ZOPN1).ZLX  B IF DONE            00187600
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00187700
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00187800
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00187900
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00188000
                      AIF   (K'&ZLD LE 0).ZL5                           00188100
&ZLC                  SETA  35             COMMENT COLUMN               00188200
                      AIF   ('&ZLD'(1,1) NE '*').ZL3                    00188300
&ZLC                  SETA  33             COMMMENT COLUMN              00188400
.ZL3                  AIF   (K'&ZLV GE &ZLC-16-1).ZL4                   00188500
&ZLV                  SETC  '&ZLV'.' '                                  00188600
                      AGO   .ZL3                                        00188700
.*                                                                      00188800
.ZL4                  ANOP  ,                                           00188900
&ZLV                  SETC  '&ZLV'.' '                                  00189000
.ZL5                  ANOP  ,                                           00189100
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00189200
.*                                                                      00189300
&ZLL     &ZLOP &ZLV                                                     00189400
.*                                                                      00189500
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00189600
                      AGO   .ZL2           CONTINUE LOOPING             00189700
.*                                                                      00189800
.ZLX                  ANOP  ,                                           00189900
                      AIF   ('&XMF' EQ 'L').ZLINKX  MF=L                00190000
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00190100
         AIF   ('&SYSAM64' NE 'YES').AMODE31                            00190200
         LLGTR 14,14                   CLEAR HIGH HALF IN 64BIT MODE    00190300
.AMODE31 L     14,16(0,0)              GET CVT ADDRESS                  00190400
         L     14,772(14,0)            GET SFT ADDRESS                  00190500
         L     14,380(14,0)            GET LX FOR SERVICE ROUTINE       00190600
         LA    15,129                  GET EX FOR SERVICE ROUTINE       00190700
         OR    14,15                   GET PC NUMBER                    00190800
         PC    0(14)                                                    00190900
END&SYSNDX DS    0H                END LABEL                            00191000
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00191100
.ZLINKX               ANOP  ,                                           00191200
.*******************************************************************    00191300
.***AP.X01  FORMAT GENERATED CODE                                       00191400
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            00191500
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00191600
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00191700
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00191800
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00191900
                      AIF   (K'&ZLD LE 0).ZL51                          00192000
&ZLC                  SETA  35             COMMENT COLUMN               00192100
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   00192200
&ZLC                  SETA  33             COMMENT COLUMN               00192300
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  00192400
&ZLV                  SETC  '&ZLV'.' '                                  00192500
                      AGO   .ZL31                                       00192600
.*                                                                      00192700
.ZL41                 ANOP  ,                                           00192800
&ZLV                  SETC  '&ZLV'.' '                                  00192900
.ZL51                 ANOP  ,                                           00193000
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00193100
.*                                                                      00193200
&ZLL     &ZLOP &ZLV                                                     00193300
.*                                                                      00193400
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00193500
                      AGO   .ZL21          CONTINUE LOOPING             00193600
.*                                                                      00193700
.ZLX1                 ANOP  ,                                           00193800
.*******************************************************************    00193900
.***AP.X02  END OF IWM4QHLT MACRO                                       00194000
&ZIWM4QHLT            SETC  'YES'          SET IWM4QHLT USED            00194100
         POP   PRINT                                                    00194200
*                                            IWM4QHLT-0                 00194300
         SPACE 1                                                        00194400
.ZLX2                 ANOP  ,                                           00194500
         MEND                                                           00194600
**********************************************************************/ 00194700
*/**** START OF SPECIFICATIONS **************************************** 00194800
*                                                                     * 00194900
*                                                                     * 00195000
*01* MACRO NAME:  IWM4QHLT                              -07/31/14-<0> * 00195100
*                                                                     * 00195200
*                                                                     * 00195300
*01* DESCRIPTIVE NAME:  Query Server Health Indicator                 * 00195400
*                                                                     * 00195500
*01* PROPRIETARY STATEMENT:                                           * 00195600
*                                                                     * 00195700
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00195800
*     5650-ZOS COPYRIGHT IBM CORP. 2015, 2017                         * 00195900
*                                                                     * 00196000
* STATUS= HBB77B0                                                     * 00196100
*                                                                     * 00196200
*                                                                     * 00196300
*                                                                     * 00196400
*01* FUNCTION:                                                        * 00196500
*       See the IWM4QHLT macro prologue for details.                  * 00196600
*                                                                     * 00196700
*01* INPUT:                                                           * 00196800
*                                                                     * 00196900
*            ?IWM4QHLT    ÝASID_LIST                                  * 00197000
*                                    (»xasid_list!NO_ASID_LISTº)      * 00197100
*                              ASID_NUM(xasid_num)¨                   * 00197200
*                          ANSAREA(xansarea)                          * 00197300
*                          ANSLEN(xanslen)                            * 00197400
*                          QUERYLEN(xquerylen)                        * 00197500
*                         ÝRETCODE(xretcode)¨                         * 00197600
*                         ÝRSNCODE(xrsncode)¨                         * 00197700
*                         ÝPLISTVER(»xplistver!IMPLIED_VERSIONº)¨     * 00197800
*                        ÐÝMF(S)¨                                     * 00197900
*                        ÔÝMF(L,xmfctrl»,xmfattr!BDY(DWORD)º)¨        * 00198000
*                        ¿ÝMF(E,xmfctrl»,COMPLETEº)¨                  * 00198100
*                                                                     * 00198200
****** END OF SPECIFICATIONS *****************************************/ 00198300
*/*PB.ECHO01 MACRO INVOCATION ECHO-----------------------------------*/ 00198400
*  ANS('@SPACE;') NORESCAN COL(MACLMAR);                                00198500
*  ANS('/* ? IWM4QHLT '!!MACLIST!!' ')                                  00198600
*      NORESCAN COL(MACLMAR+5);    /* START ECHO */                     00198700
*                                                                       00198800
*  DCL ZELO  FIXED;                                                     00198900
*  DCL ZECOL FIXED;                                                     00199000
*                                                                       00199100
*  ZELO=1;     /* STARTING COLUMN */                                    00199200
*  DO WHILE ZELO<=LENGTH(MACKEYS);  /* PARENTHSIS SCAN */               00199300
*    ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');                    00199400
*    IF ZECOL>0                                                         00199500
*      THEN                                                             00199600
*        DO;   /* PARENTHESIS FOUND */                                  00199700
*          ANS(MACKEYS(ZELO:ZELO+ZECOL-1)!!' ')                         00199800
*             NORESCAN COL(MACLMAR+5);                                  00199900
*          ZELO=ZELO+ZECOL;        /* NEXT PORTION */                   00200000
*        END;                                                           00200100
*      ELSE                                                             00200200
*        DO;   /* REMAINING KEYS */                                     00200300
*          ANS(MACKEYS(ZELO:LENGTH(MACKEYS)))                           00200400
*             NORESCAN COL(MACLMAR+5);                                  00200500
*          ZELO=LENGTH(MACKEYS)+1;                                      00200600
*        END;                                                           00200700
*  END;                                                                 00200800
*  ANS(' -07/31/14-0- */')                                              00200900
*      NORESCAN COL(MACLMAR+5);    /* END ECHO */                       00201000
*/********************************************************************/ 00201100
*/*PV.DCL01 MACRO DECLARES AND CODE GENERATION CONTROLS              */ 00201200
*/********************************************************************/ 00201300
*  DCL ZPRINT  EXTERNAL; DEACT ZPRINT; /* YES=PRINT, NO=NO PRINT     */ 00201400
*  DCL ZTEST   EXTERNAL; DEACT ZTEST;  /* YES=TEST, NO=NO TEST       */ 00201500
*  DCL ZSYSTEM EXTERNAL; DEACT ZSYSTEM;/* PCCODE10, MVS, SAK, VM     */ 00201600
*                                                                       00201700
*  DCL   ZIWM4QHLT CHAR EXTERNAL; /* YES=USED AT LEAST ONCE          */ 00201800
*  DEACT ZIWM4QHLT;                                                     00201900
*                                                                       00202000
*  DCL ZMACRET FIXED; DEACT ZMACRET;                                    00202100
*  ZMACRET=0;                   /* MACRO COMPILE RETURN CODE         */ 00202200
*                                                                       00202300
*  DCL ZMS CHAR;   DEACT ZMS;   /* ERROR MESSAGE                     */ 00202400
*  DCL ZCVAL CHAR; DEACT ZCVAL; /* ERROR MESSAGE WORK AREA           */ 00202500
*                                                                       00202600
*  DCL ZI FIXED;  DEACT ZI;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00202700
*  DCL ZJ FIXED;  DEACT ZJ;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00202800
*  DCL ZK FIXED;  DEACT ZK;     /* INDEX FOR RANGE COLON (:)         */ 00202900
*  DCL ZL FIXED;  DEACT ZL;     /* INDEX FOR RANGE VALUE CHECKING    */ 00203000
*  DCL ZLO FIXED; DEACT ZLO;    /* LOW RANGE VALUE                   */ 00203100
*  DCL ZHI FIXED; DEACT ZHI;    /* HIGH RANGE VALUE                  */ 00203200
*  DCL ZW CHAR;   DEACT ZW;     /* WORK AREA FOR RANGE VALUE SUBLIST */ 00203300
*  DCL ZN FIXED;  DEACT ZN;     /* NUMERIC WORK VARIABLE             */ 00203400
*  DCL ZC CHAR;   DEACT ZC;     /* CHARACTER WORK VARIABLE           */ 00203500
*  DCL ZMAXINVOCLEN FIXED; DEACT ZMAXINVOCLEN;  /* INVOCATION LENGTH */ 00203600
*  DCL ZPLLEN FIXED; DEACT ZPLLEN;        /* PARAMETER LIST LENGTH   */ 00203700
*                                                                       00203800
*  DCL ZPRMMAX FIXED;           /* MAXIMUM PARM LIST SIZE            */ 00203900
*  DCL ZPRMNUM FIXED;           /* PARAMETER ARRAY INDEX             */ 00204000
*  DCL ZPRM(100);               /* PARAMETER ENTRY                   */ 00204100
*  DCL EHAMAXLEN FIXED EXTERNAL;   /* MAX ILIST SIZE FOR PARM LISTS  */ 00204200
*  DCL EHAREGS CHARACTER EXTERNAL; /* REG DCLS                       */ 00204300
*  DCL EHAREGS64 CHARACTER EXTERNAL; /* REG DCLS                     */ 00204400
*  DCL EHALIST CHARACTER EXTERNAL; /* STANDARD PARM LIST GENERATION  */ 00204500
*/*******************************************************************/  00204600
*/*PV.XVAR01 DECLARE ALL MACRO PARAMETER VARIABLES                  */  00204700
*/*******************************************************************/  00204800
*  DCL   XASID_LIST;               /***PV.XVAR03 INPUT NAME */          00204900
*  DEACT XASID_LIST;               /***PV.XVAR03 INPUT NAME */          00205000
*  DCL   ZXASID_LIST;              /***INPUT/OUTPUT CONTROL */          00205100
*  DEACT ZXASID_LIST;              /***INPUT/OUTPUT CONTROL */          00205200
*  DCL XASID_NUM;  DEACT XASID_NUM;  /***PV.XVAR02 INPUT NAME */        00205300
*  DCL ZXASID_NUM; DEACT ZXASID_NUM;  /***INPUT/OUTPUT CONTROL */       00205400
*  DCL XANSAREA;  DEACT XANSAREA;  /***PV.XVAR02 OUTPUT NAME */         00205500
*  DCL ZXANSAREA; DEACT ZXANSAREA;  /***INPUT/OUTPUT CONTROL */         00205600
*  DCL XANSLEN;  DEACT XANSLEN;    /***PV.XVAR02 INPUT NAME */          00205700
*  DCL ZXANSLEN; DEACT ZXANSLEN;   /***INPUT/OUTPUT CONTROL */          00205800
*  DCL XQUERYLEN;  DEACT XQUERYLEN;  /***PV.XVAR02 OUTPUT NAME */       00205900
*  DCL ZXQUERYLEN; DEACT ZXQUERYLEN;  /***INPUT/OUTPUT CONTROL */       00206000
*  DCL XRETCODE;  DEACT XRETCODE;  /***PV.XVAR02 OUTPUT NAME */         00206100
*  DCL ZXRETCODE; DEACT ZXRETCODE;  /***INPUT/OUTPUT CONTROL */         00206200
*  DCL XRSNCODE;  DEACT XRSNCODE;  /***PV.XVAR02 OUTPUT NAME */         00206300
*  DCL ZXRSNCODE; DEACT ZXRSNCODE;  /***INPUT/OUTPUT CONTROL */         00206400
*  DCL XPLISTVER FIXED;  DEACT XPLISTVER;  /***PV.XVAR02 INPUT VALUE */ 00206500
*  DCL ZXPLISTVER; DEACT ZXPLISTVER;  /***INPUT/OUTPUT CONTROL */       00206600
*  DCL XMF;  DEACT XMF;            /***PV.XVAR02 INPUT VALUE */         00206700
*  DCL ZXMF; DEACT ZXMF;           /***INPUT/OUTPUT CONTROL */          00206800
*  DCL XMFCTRL;  DEACT XMFCTRL;    /***PV.XVAR02 INPUT NAME */          00206900
*  DCL ZXMFCTRL; DEACT ZXMFCTRL;   /***INPUT/OUTPUT CONTROL */          00207000
*  DCL XMFATTR;  DEACT XMFATTR;    /***PV.XVAR02 INPUT VALUE */         00207100
*  DCL ZXMFATTR; DEACT ZXMFATTR;   /***INPUT/OUTPUT CONTROL */          00207200
*  DCL XMFSCK;  DEACT XMFSCK;      /***PV.XVAR02 INPUT VALUE */         00207300
*  DCL ZXMFSCK; DEACT ZXMFSCK;     /***INPUT/OUTPUT CONTROL */          00207400
*/********************************************************************/ 00207500
*/***PC.PLV01  PROCESS PLISTVER                                      */ 00207600
*/********************************************************************/ 00207700
*  IF TRANSLATE(PLISTVER(1)) = 'MAX' THEN                               00207800
*    XPLISTVER=0;                                                       00207900
*  ELSE                                                                 00208000
*    XPLISTVER=0;                                                       00208100
*  IF PLISTVER^=''                                                      00208200
*     & TRANSLATE(PLISTVER(1))^='IMPLIED_VERSION'                       00208300
*     & TRANSLATE(PLISTVER(1))^='MAX'                                   00208400
*    THEN                                                               00208500
*      DO;                                                              00208600
*                                                                       00208700
*        ZCVAL='';                           /* ERROR FLAG */           00208800
*        IF PLISTVER='PLISTVER' ! PLISTVER='()'  /*CHECK ENTRY*/        00208900
*          THEN                                                         00209000
*            DO;                                                        00209100
*              ZMS=' 8, THE "PLISTVER" KEY'!! /**KOPTP* MSG*/           00209200
*                  ' MUST CONTAIN ONE'!!                                00209300
*                  ' (OR MORE) ARGUMENT(S).';                           00209400
*              ANS MSG('?IWM4QHLT ---> '!!ZMS);                         00209500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00209600
*              ZMACRET=8;                    /* MACRO ERROR */          00209700
*              ZCVAL='NO_ARGUMENT';                                     00209800
*            END;                                                       00209900
*        IF NUMBER(PLISTVER)>1               /* CHECK POSITIONALS */    00210000
*          THEN                                                         00210100
*            DO;                                                        00210200
*              ZMS=' 8, "PLISTVER'!!         /**KPOSP* MSG*/            00210300
*                  PLISTVER!!                                           00210400
*                  '" "PLISTVER"'!!                                     00210500
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00210600
*              ANS MSG('?IWM4QHLT ---> '!!ZMS);                         00210700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00210800
*              ZMACRET=8;                    /* MACRO ERROR */          00210900
*            END;                                                       00211000
*                                                                       00211100
*        ZC=PLISTVER(1);                                                00211200
*        DO ZL=1 TO LENGTH(ZC);              /* MUST BE NUMBER */       00211300
*          IF ZC(ZL:ZL)<'0' !                /* MUST BE NUMERIC */      00211400
*             ZC(ZL:ZL)>'9'                  /* MUST BE NUMERIC */      00211500
*            THEN                                                       00211600
*              ZCVAL='NUMERIC';              /* NUMERIC ERROR */        00211700
*        END;                                                           00211800
*        IF ZCVAL=''                                                    00211900
*          THEN                                                         00212000
*            DO;                             /* CHECK RANGE LIMITS */   00212100
*            IF FIXED(PLISTVER(1))>=XPLISTVER                           00212200
*              THEN                                                     00212300
*                XPLISTVER=FIXED(PLISTVER(1));                          00212400
*              ELSE                                                     00212500
*                DO;                                                    00212600
*              ZMS=' 8, PLISTVER='!!         /**KVALP* MSG*/            00212700
*                    PLISTVER(1)!!                                      00212800
*                  ', BUT PLISTVER OF '!!                               00212900
*                    CHAR(XPLISTVER)!!                                  00213000
*                  ' IS REQUIRED.';                                     00213100
*              ANS MSG('?IWM4QHLT ---> '!!ZMS);                         00213200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00213300
*              ZMACRET=8;                    /* MACRO ERROR */          00213400
*                END;                                                   00213500
*              IF XPLISTVER<0 !              /* LOW LIMIT */            00213600
*                 XPLISTVER>0                /* HIGH LIMIT */           00213700
*                THEN                                                   00213800
*                  ZCVAL='RANGE';            /* RANGE ERROR */          00213900
*            END;                                                       00214000
*        IF ZCVAL^=''                                                   00214100
*          THEN                                                         00214200
*            DO;                             /* RANGE ERROR */          00214300
*              ZXPLISTVER='';                /* RESET IN/OUTPUT */      00214400
*              ZMS=' 8, "PLISTVER '!!        /**KRNGP* MSG*/            00214500
*                  PLISTVER!!                                           00214600
*                  '" THE RANGE IS "0-0"'!!                             00214700
*                  ' FOR ARGUMENT 1.';                                  00214800
*              ANS MSG('?IWM4QHLT ---> '!!ZMS);                         00214900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00215000
*              ZMACRET=8;                    /* MACRO ERROR */          00215100
*            END;                                                       00215200
*      END;                                                             00215300
*                                                                       00215400
*/********************************************************************/ 00215500
*/***PG.MF01  PROCESS MF MACRO FORMS                                 */ 00215600
*/********************************************************************/ 00215700
*/*PG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00215800
*  XMF='';                                                              00215900
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00216000
*  IF TRANSLATE(MF(1))                                                  00216100
*              = 'S'                         /* CHECK FOR KEYWORD */    00216200
*    THEN                                                               00216300
*      DO;                                                              00216400
*        XMF='S';                            /* SET XVARIABLE */        00216500
*        IF NUMBER(MF)>1                     /* CHECK POSITIONALS */    00216600
*          THEN                                                         00216700
*            DO;                                                        00216800
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00216900
*                  MF!!                                                 00217000
*                  '" "MF"'!!                                           00217100
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00217200
*              ANS MSG('?IWM4QHLT ---> '!!ZMS);                         00217300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00217400
*              ZMACRET=8;                    /* MACRO ERROR */          00217500
*            END;                                                       00217600
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00217700
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00217800
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00217900
*  IF TRANSLATE(MF(1))                                                  00218000
*              = 'L'                         /* CHECK FOR KEYWORD */    00218100
*    THEN                                                               00218200
*      DO;                                                              00218300
*        XMF='L';                            /* SET XVARIABLE */        00218400
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00218500
*          THEN                                                         00218600
*            DO;                                                        00218700
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00218800
*                  MF!!                                                 00218900
*                  '" "MF"'!!                                           00219000
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00219100
*              ANS MSG('?IWM4QHLT ---> '!!ZMS);                         00219200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00219300
*              ZMACRET=8;                    /* MACRO ERROR */          00219400
*            END;                                                       00219500
*/*PG.KKCTL10 -MF(L) SPECIAL CHECK-----------------------------------*/ 00219600
*        ZMAXINVOCLEN = LENGTH(MF) + 2;                                 00219700
*        IF PLISTVER ^= ''                                              00219800
*          THEN                                                         00219900
*            ZMAXINVOCLEN=ZMAXINVOCLEN + LENGTH(PLISTVER) + 8;          00220000
*        IF LENGTH(MACKEYS) > ZMAXINVOCLEN !                            00220100
*           MACLIST ^= ''                    /* CHECK FOR OTHER PARMS*/ 00220200
*          THEN                                                         00220300
*            DO;                                                        00220400
*              ZMS=' 8, THE "L" FORM OF "MF"'!! /**MFLP* MSG*/          00220500
*                  ' CAN ONLY HAVE'!!                                   00220600
*                  ' THE "PLISTVER" KEY'!!                              00220700
*                  ' SPECIFIED ON THE INVOCATION.';                     00220800
*              ANS MSG('?IWM4QHLT ---> '!!ZMS);                         00220900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00221000
*              ZMACRET=8;                    /* MACRO ERROR */          00221100
*            END;                                                       00221200
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00221300
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00221400
*  IF MF(2)=''                               /* CHECK FOR NULL */       00221500
*   THEN                                                                00221600
*    DO;                                     /* KEY IS REQUIRED */      00221700
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00221800
*        ZMS=' 8, WHEN "L" IS SPECIFIED'!!                              00221900
*            ' FOR THE "MF" KEY, POSITIONAL'!!                          00222000
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00222100
*        ANS MSG('?IWM4QHLT ---> '!!ZMS);                               00222200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00222300
*        ZMACRET=8;                          /* MACRO ERROR */          00222400
*    END;                                                               00222500
*  ELSE                                                                 00222600
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00222700
*/*PG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE--------------------*/ 00222800
*  ZXMFATTR='INPUT';                         /* SET IN/OUTPUT */        00222900
*  XMFATTR='BDY(DWORD)';                     /* SET DEFAULT */          00223000
*  IF MF(3)^=''                              /* CHECK FOR NULL */       00223100
*    THEN                                                               00223200
*      XMFATTR=MF(3);                        /* SET XVARIABLE */        00223300
*/*PG.KCK01 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH---------------*/ 00223400
*  IF ZXMFATTR^='' &                         /* NOT IN/OUTPUT */        00223500
*     LENGTH(XMFATTR)>60                                                00223600
*    THEN                                                               00223700
*      DO;                                                              00223800
*        ZXMFATTR='';                        /* RESET IN/OUTPUT */      00223900
*        ZMS=' 8, "MF'!!                     /**KLNGP* MSG*/            00224000
*            MF!!                                                       00224100
*            '" ARGUMENT 3 EXCEEDS THE MAXIMUM'!!                       00224200
*            ' LENGTH OF 60 CHARACTERS. ';                              00224300
*        ANS MSG('?IWM4QHLT ---> '!!ZMS);                               00224400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00224500
*        ZMACRET=8;                          /* MACRO ERROR */          00224600
*      END;                                                             00224700
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00224800
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00224900
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00225000
*  IF TRANSLATE(MF(1))                                                  00225100
*              = 'E'                         /* CHECK FOR KEYWORD */    00225200
*    THEN                                                               00225300
*      DO;                                                              00225400
*        XMF='E';                            /* SET XVARIABLE */        00225500
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00225600
*          THEN                                                         00225700
*            DO;                                                        00225800
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00225900
*                  MF!!                                                 00226000
*                  '" "MF"'!!                                           00226100
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00226200
*              ANS MSG('?IWM4QHLT ---> '!!ZMS);                         00226300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00226400
*              ZMACRET=8;                    /* MACRO ERROR */          00226500
*            END;                                                       00226600
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00226700
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00226800
*  IF MF(2)=''                               /* CHECK FOR NULL */       00226900
*   THEN                                                                00227000
*    DO;                                     /* KEY IS REQUIRED */      00227100
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00227200
*        ZMS=' 8, WHEN "E" IS SPECIFIED'!!                              00227300
*            ' FOR THE "MF" KEY, POSITIONAL'!!                          00227400
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00227500
*        ANS MSG('?IWM4QHLT ---> '!!ZMS);                               00227600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00227700
*        ZMACRET=8;                          /* MACRO ERROR */          00227800
*    END;                                                               00227900
*  ELSE                                                                 00228000
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00228100
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00228200
*  XMFSCK='';                                /* RESET XVARIABLE */      00228300
*  IF TRANSLATE(MF(3))                                                  00228400
*              = 'COMPLETE'                  /* CHECK FOR KEYWORD */    00228500
*    THEN                                                               00228600
*      XMFSCK = 'COMPLETE';                  /* SET XVARIABLE */        00228700
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00228800
*  ZXMFSCK='INPUT';                          /* SET IN/OUTPUT */        00228900
*  IF XMFSCK=''                              /* CHECK FOR KEYWORD */    00229000
*    THEN                                                               00229100
*      DO;                                   /* KEYWORD NOT ENTERED */  00229200
*        XMFSCK='COMPLETE';                  /* SET DEFAULT */          00229300
*        IF MF(3)^=''                                                   00229400
*          THEN                                                         00229500
*            DO;                                                        00229600
*              ZXMFSCK='';                   /* RESET IN/OUTPUT */      00229700
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/            00229800
*                  MF!!'"'!!                                            00229900
*                  ' ARGUMENT 3 IS AN UNKNOWN KEYWORD. '!!              00230000
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00230100
*                  ' "COMPLETE".';           /* VALID KEYWORD */        00230200
*              ANS MSG('?IWM4QHLT ---> '!!ZMS);                         00230300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00230400
*              ZMACRET=8;                    /* MACRO ERROR */          00230500
*            END;                                                       00230600
*      END;                                                             00230700
*/*PG.KKCTL05 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00230800
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00230900
*/*PG.KKCTL06 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00231000
*  IF MF='MF'                                                           00231100
*    ! MF='()'                               /*CHECK ENTRY*/            00231200
*     THEN                                                              00231300
*       DO;                                                             00231400
*              ZMS=' 8, THE "MF" KEY'!!      /**KOPTP* MSG*/            00231500
*                  ' MUST CONTAIN ONE'!!                                00231600
*                  ' (OR MORE) ARGUMENT(S).';                           00231700
*              ANS MSG('?IWM4QHLT ---> '!!ZMS);                         00231800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00231900
*              ZMACRET=8;                    /* MACRO ERROR */          00232000
*       END;                                                            00232100
*  ELSE                                                                 00232200
*    DO;                                                                00232300
*      ZXMF='INPUT';                         /* SET IN/OUTPUT */        00232400
*      IF XMF=''                             /* CHECK FOR KEYWORD */    00232500
*        THEN                                                           00232600
*          DO;                               /* KEYWORD NOT ENTERED */  00232700
*            XMF='S';                        /* SET DEFAULT */          00232800
*            XMFSCK='COMPLETE';              /* COMPLETE CHECKING */    00232900
*            IF MF(1)^=''                    /* CHECK FOR KEYWORD */    00233000
*              THEN                                                     00233100
*                DO;                                                    00233200
*                  ZXMF='';                  /* RESET IN/OUTPUT */      00233300
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/            00233400
*                  MF!!'"'!!                                            00233500
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00233600
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00233700
*                  ' "S",'!!                 /* VALID KEYWORD */        00233800
*                  ' "L",'!!                 /* VALID KEYWORD */        00233900
*                  ' OR "E".';               /* VALID KEYWORD */        00234000
*              ANS MSG('?IWM4QHLT ---> '!!ZMS);                         00234100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00234200
*              ZMACRET=8;                    /* MACRO ERROR */          00234300
*                END;                                                   00234400
*          END;                                                         00234500
*    END;                                                               00234600
*/********************************************************************/ 00234700
*/***PD.P01 FULL DEFAULT CHECKING                                    */ 00234800
*/********************************************************************/ 00234900
*  IF PLISTVER=''                                                       00235000
*     ! PLISTVER(1)='IMPLIED_VERSION'                                   00235100
*    THEN                                                               00235200
*      ZC='ON';                              /* DEFAULT FLAG ON */      00235300
*    ELSE                                                               00235400
*      ZC='OFF';                             /* DEFAULT FLAG OFF */     00235500
*/********************************************************************/ 00235600
*/***PD.P02 DEFAULT ECHO                                             */ 00235700
*/********************************************************************/ 00235800
*/*PD.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00235900
*  IF XMF^='L'                                                          00236000
*    THEN                                                               00236100
*      DO;                                   /* FULL SYNTAX CHECK */    00236200
*        ANS('/*DEFAULT(S): */')                                        00236300
*           NORESCAN COL(MACLMAR+5);                                    00236400
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00236500
*  XASID_LIST='';                                                       00236600
*  IF ASID_LIST(1)=''                                                   00236700
*    THEN                                                               00236800
*      DO;                                                              00236900
*        XASID_LIST='NO_ASID_LIST';          /* SET DEFAULT */          00237000
*        ZC='ON';                            /* DEFAULT FLAG ON */      00237100
*      END;                                                             00237200
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00237300
*  IF XASID_LIST^=''                                                    00237400
*    THEN DO;                                                           00237500
*      ANS('/* ASID_LIST('!!                                            00237600
*          XASID_LIST!!                                                 00237700
*          ')*/')                                                       00237800
*          NORESCAN COL(MACLMAR+5);                                     00237900
*      XASID_LIST = '';                                                 00238000
*    END;                                                               00238100
*/*PD.KXVAR01 NAME, OPT RQD INPUT, KEYS -XVARIABLE-------------------*/ 00238200
*  XASID_NUM='';                                                        00238300
*  IF ASID_NUM(1)=''                                                    00238400
*    THEN                                                               00238500
*      DO;                                                              00238600
*        XASID_NUM='0';                      /* SET DEFAULT */          00238700
*        ZC='ON';                            /* DEFAULT FLAG ON */      00238800
*      END;                                                             00238900
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00239000
*  IF XASID_NUM^=''                                                     00239100
*    THEN DO;                                                           00239200
*      ANS('/* ASID_NUM('!!                                             00239300
*          XASID_NUM!!                                                  00239400
*          ')*/')                                                       00239500
*          NORESCAN COL(MACLMAR+5);                                     00239600
*      XASID_NUM = '';                                                  00239700
*    END;                                                               00239800
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00239900
*  IF PLISTVER=''                                                       00240000
*    THEN DO;                                                           00240100
*      ANS('/* PLISTVER('!!                                             00240200
*          CHAR(XPLISTVER)!!                                            00240300
*          ')*/')                                                       00240400
*          NORESCAN COL(MACLMAR+5);                                     00240500
*    END;                                                               00240600
*  IF ZC='OFF'                               /*NO DEFAULTS TAKEN */     00240700
*    THEN                                                               00240800
*      ANS('/* NONE. */')                                               00240900
*         NORESCAN COL(MACLMAR+5);                                      00241000
*/*PD.P04 END DEFAULT ECHO ------------------------------------------*/ 00241100
*      END;                                                             00241200
*/********************************************************************/ 00241300
*/*PB.SYSL01 INVOKE SP LEVEL AND SYSTEM STATE MACROS                 */ 00241400
*/********************************************************************/ 00241500
*  DCL SYSSPLV CHAR EXTERNAL; DEACT SYSSPLV;/* SPLEVEL 1,2,3         */ 00241600
*  DCL SYSASCE CHAR EXTERNAL; DEACT SYSASCE;/* STATE ANY P AR */        00241700
*  DCL SYSAM64 CHAR EXTERNAL; DEACT SYSAM64;                            00241800
*  DCL SYSALVL FIXED EXTERNAL; DEACT SYSALVL;                           00241900
*                                                                       00242000
*  IF SYSASCE=''                                                        00242100
*    THEN                                                               00242200
*      DO;                                                              00242300
*        IF SYSSPLV=''                                                  00242400
*          THEN                                                         00242500
*            ANS('?SPLEVEL  (TEST);') COL(MACLMAR);                     00242600
*        IF SYSSPLV^='1' & SYSSPLV^='2'                                 00242700
*          THEN                                                         00242800
*            ANS('?SYSSTATE (TEST);') COL(MACLMAR);                     00242900
*          ELSE                                                         00243000
*            SYSASCE='P';                    /* SYSSTATE DEFAULT*/      00243100
*      END;                                                             00243200
*/********************************************************************/ 00243300
*/***PG.P01 FULL MACRO SYNTAX CHECKING                               */ 00243400
*/********************************************************************/ 00243500
*/*PG.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00243600
*  IF XMF^='L'                                                          00243700
*    THEN                                                               00243800
*      DO;                                   /* FULL SYNTAX CHECK */    00243900
*/*PG.P03 EXCESSIVE POSITIONAL ARGUMENTS-----------------------------*/ 00244000
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */    00244100
*    THEN                                                               00244200
*      DO;                                                              00244300
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'!! /**PPOSP* MSG*/            00244400
*            ' "'!!MACLIST!!'"'!!                                       00244500
*            ' CANNOT BE USED.'!!                                       00244600
*            ' NO POSITIONAL ARGUMENTS'!!                               00244700
*            ' ARE ALLOWED.';                                           00244800
*        ANS MSG('?IWM4QHLT ---> '!!ZMS);                               00244900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00245000
*        ZMACRET=8;                          /* MACRO ERROR */          00245100
*      END;                                                             00245200
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00245300
*  IF ASID_LIST='ASID_LIST' ! ASID_LIST='()'  /*CHECK ENTRY*/           00245400
*    THEN                                                               00245500
*      DO;                                                              00245600
*        ZMS=' 8, THE "ASID_LIST" KEY'!!     /**KOPTP* MSG*/            00245700
*            ' MUST CONTAIN ONE'!!                                      00245800
*            ' (OR MORE) ARGUMENT(S).';                                 00245900
*        ANS MSG('?IWM4QHLT ---> '!!ZMS);                               00246000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00246100
*        ZMACRET=8;                          /* MACRO ERROR */          00246200
*      END;                                                             00246300
*  IF NUMBER(ASID_LIST)>1                    /* CHECK POSITIONALS */    00246400
*    THEN                                                               00246500
*      DO;                                                              00246600
*        ZMS=' 8, "ASID_LIST'!!              /**KPOSP* MSG*/            00246700
*            ASID_LIST!!                                                00246800
*            '" "ASID_LIST"'!!                                          00246900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00247000
*        ANS MSG('?IWM4QHLT ---> '!!ZMS);                               00247100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00247200
*        ZMACRET=8;                          /* MACRO ERROR */          00247300
*      END;                                                             00247400
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00247500
*  ZXASID_LIST='INPUT';                      /* SET IN/OUTPUT */        00247600
*  XASID_LIST='NO_ASID_LIST';                /* SET DEFAULT */          00247700
*  IF ASID_LIST(1)^=''                       /* CHECK FOR NULL */       00247800
*    THEN                                                               00247900
*      XASID_LIST=ASID_LIST(1);              /* SET XVARIABLE */        00248000
*/*PG.KXVAR01 NAME, OPT RQD INPUT, KEYS -EXCESSIVE ARGUMENTS---------*/ 00248100
*  IF NUMBER(ASID_NUM)>1                     /* CHECK POSITIONALS */    00248200
*    THEN                                                               00248300
*      DO;                                                              00248400
*        ZMS=' 8, "ASID_NUM'!!               /**KPOSP* MSG*/            00248500
*            ASID_NUM!!                                                 00248600
*            '" "ASID_NUM"'!!                                           00248700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00248800
*        ANS MSG('?IWM4QHLT ---> '!!ZMS);                               00248900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00249000
*        ZMACRET=8;                          /* MACRO ERROR */          00249100
*      END;                                                             00249200
*/*PG.KXVAR07 NAME, OPT RQD INPUT, KEYS -XVARIABLE-------------------*/ 00249300
*  ZXASID_NUM='INPUT';                       /* SET IN/OUTPUT*/         00249400
*  XASID_NUM=ASID_NUM(1);                    /* SET XVARIABLE */        00249500
*  IF ASID_LIST(1)=''                        /* CHECK KEY */            00249600
*    THEN                                                               00249700
*      DO;                                                              00249800
*        IF ASID_NUM(1)=''                   /* CHECK PARM */           00249900
*          THEN                                                         00250000
*            ZXASID_NUM='';                  /* RESET IN/OUTPUT*/       00250100
*          ELSE                                                         00250200
*            DO;                                                        00250300
*            ZMS=' 8, "ASID_NUM'!!           /**KDEPP* MSG*/            00250400
*                ASID_NUM!!'"'!!                                        00250500
*                ' CAN ONLY BE SPECIFIED IF'!!                          00250600
*                ' '!!                                                  00250700
*                ' "ASID_LIST"'!!                                       00250800
*                ' IS ALSO SPECIFIED.';                                 00250900
*            ANS MSG('?IWM4QHLT ---> '!!ZMS);                           00251000
*            ANS(COMMENT(ZMS)) COL(MACLMAR);                            00251100
*            ZMACRET=8;                      /* MACRO ERROR */          00251200
*            END;                                                       00251300
*      END;                                                             00251400
*    ELSE                                                               00251500
*      IF ASID_NUM(1)=''                     /* CHECK PARM */           00251600
*        THEN                                                           00251700
*          DO;                                                          00251800
*            ZXASID_NUM='';                  /* RESET IN/OUTPUT*/       00251900
*            ZMS=' 8, WHEN "ASID_LIST" IS SPECIFIED'!!                  00252000
*                ' , "ASID_NUM" KEY AND ITS'!!                          00252100
*                ' ARGUMENT ARE REQUIRED.';  /**KRQDP* MSG*/            00252200
*            ANS MSG('?IWM4QHLT ---> '!!ZMS);                           00252300
*            ANS(COMMENT(ZMS)) COL(MACLMAR);                            00252400
*            ZMACRET=8;                      /* MACRO ERROR */          00252500
*          END;                                                         00252600
*/*PG.KXVAR01 NAME, RQD OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00252700
*  IF NUMBER(ANSAREA)>1                      /* CHECK POSITIONALS */    00252800
*    THEN                                                               00252900
*      DO;                                                              00253000
*        ZMS=' 8, "ANSAREA'!!                /**KPOSP* MSG*/            00253100
*            ANSAREA!!                                                  00253200
*            '" "ANSAREA"'!!                                            00253300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00253400
*        ANS MSG('?IWM4QHLT ---> '!!ZMS);                               00253500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00253600
*        ZMACRET=8;                          /* MACRO ERROR */          00253700
*      END;                                                             00253800
*/*PG.KXVAR03 NAME, RQD OUTPUT, KEYS -XVARIABLE----------------------*/ 00253900
*  XANSAREA=ANSAREA(1);                      /* SET XVARIABLE */        00254000
*  IF ANSAREA(1)=''                          /* CHECK FOR NULL */       00254100
*   THEN                                                                00254200
*    DO;                                     /* KEY IS REQUIRED */      00254300
*        ZXANSAREA='';                       /* RESET IN/OUTPUT */      00254400
*        ZMS=' 8,  '!!                                                  00254500
*            ' "ANSAREA" KEY AND ITS'!!                                 00254600
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00254700
*        ANS MSG('?IWM4QHLT ---> '!!ZMS);                               00254800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00254900
*        ZMACRET=8;                          /* MACRO ERROR */          00255000
*    END;                                                               00255100
*  ELSE                                                                 00255200
*    ZXANSAREA='OUTPUT';                     /* SET IN/OUTPUT */        00255300
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00255400
*  IF NUMBER(ANSLEN)>1                       /* CHECK POSITIONALS */    00255500
*    THEN                                                               00255600
*      DO;                                                              00255700
*        ZMS=' 8, "ANSLEN'!!                 /**KPOSP* MSG*/            00255800
*            ANSLEN!!                                                   00255900
*            '" "ANSLEN"'!!                                             00256000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00256100
*        ANS MSG('?IWM4QHLT ---> '!!ZMS);                               00256200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00256300
*        ZMACRET=8;                          /* MACRO ERROR */          00256400
*      END;                                                             00256500
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00256600
*  XANSLEN=ANSLEN(1);                        /* SET XVARIABLE */        00256700
*  IF ANSLEN(1)=''                           /* CHECK FOR NULL */       00256800
*   THEN                                                                00256900
*    DO;                                     /* KEY IS REQUIRED */      00257000
*        ZXANSLEN='';                        /* RESET IN/OUTPUT */      00257100
*        ZMS=' 8,  '!!                                                  00257200
*            ' "ANSLEN" KEY AND ITS'!!                                  00257300
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00257400
*        ANS MSG('?IWM4QHLT ---> '!!ZMS);                               00257500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00257600
*        ZMACRET=8;                          /* MACRO ERROR */          00257700
*    END;                                                               00257800
*  ELSE                                                                 00257900
*    ZXANSLEN='INPUT';                       /* SET IN/OUTPUT */        00258000
*/*PG.KXVAR01 NAME, RQD OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00258100
*  IF NUMBER(QUERYLEN)>1                     /* CHECK POSITIONALS */    00258200
*    THEN                                                               00258300
*      DO;                                                              00258400
*        ZMS=' 8, "QUERYLEN'!!               /**KPOSP* MSG*/            00258500
*            QUERYLEN!!                                                 00258600
*            '" "QUERYLEN"'!!                                           00258700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00258800
*        ANS MSG('?IWM4QHLT ---> '!!ZMS);                               00258900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00259000
*        ZMACRET=8;                          /* MACRO ERROR */          00259100
*      END;                                                             00259200
*/*PG.KXVAR03 NAME, RQD OUTPUT, KEYS -XVARIABLE----------------------*/ 00259300
*  XQUERYLEN=QUERYLEN(1);                    /* SET XVARIABLE */        00259400
*  IF QUERYLEN(1)=''                         /* CHECK FOR NULL */       00259500
*   THEN                                                                00259600
*    DO;                                     /* KEY IS REQUIRED */      00259700
*        ZXQUERYLEN='';                      /* RESET IN/OUTPUT */      00259800
*        ZMS=' 8,  '!!                                                  00259900
*            ' "QUERYLEN" KEY AND ITS'!!                                00260000
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00260100
*        ANS MSG('?IWM4QHLT ---> '!!ZMS);                               00260200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00260300
*        ZMACRET=8;                          /* MACRO ERROR */          00260400
*    END;                                                               00260500
*  ELSE                                                                 00260600
*    ZXQUERYLEN='OUTPUT';                    /* SET IN/OUTPUT */        00260700
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00260800
*  IF RETCODE='RETCODE' ! RETCODE='()'       /*CHECK ENTRY*/            00260900
*    THEN                                                               00261000
*      DO;                                                              00261100
*        ZMS=' 8, THE "RETCODE" KEY'!!       /**KOPTP* MSG*/            00261200
*            ' MUST CONTAIN ONE'!!                                      00261300
*            ' (OR MORE) ARGUMENT(S).';                                 00261400
*        ANS MSG('?IWM4QHLT ---> '!!ZMS);                               00261500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00261600
*        ZMACRET=8;                          /* MACRO ERROR */          00261700
*      END;                                                             00261800
*  IF NUMBER(RETCODE)>1                      /* CHECK POSITIONALS */    00261900
*    THEN                                                               00262000
*      DO;                                                              00262100
*        ZMS=' 8, "RETCODE'!!                /**KPOSP* MSG*/            00262200
*            RETCODE!!                                                  00262300
*            '" "RETCODE"'!!                                            00262400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00262500
*        ANS MSG('?IWM4QHLT ---> '!!ZMS);                               00262600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00262700
*        ZMACRET=8;                          /* MACRO ERROR */          00262800
*      END;                                                             00262900
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00263000
*  IF RETCODE(1)^=''                         /* CHECK FOR NULL */       00263100
*    THEN                                                               00263200
*      DO;                                                              00263300
*        XRETCODE=RETCODE(1);                /* SET XVARIABLE */        00263400
*        ZXRETCODE='OUTPUT';                 /* SET OUTPUT */           00263500
*      END;                                                             00263600
*  ELSE                                                                 00263700
*    IF ZXRETCODE^=''                                                   00263800
*      THEN                                                             00263900
*        ZXRETCODE='';                       /* RESET OUTPUT */         00264000
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00264100
*  IF RSNCODE='RSNCODE' ! RSNCODE='()'       /*CHECK ENTRY*/            00264200
*    THEN                                                               00264300
*      DO;                                                              00264400
*        ZMS=' 8, THE "RSNCODE" KEY'!!       /**KOPTP* MSG*/            00264500
*            ' MUST CONTAIN ONE'!!                                      00264600
*            ' (OR MORE) ARGUMENT(S).';                                 00264700
*        ANS MSG('?IWM4QHLT ---> '!!ZMS);                               00264800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00264900
*        ZMACRET=8;                          /* MACRO ERROR */          00265000
*      END;                                                             00265100
*  IF NUMBER(RSNCODE)>1                      /* CHECK POSITIONALS */    00265200
*    THEN                                                               00265300
*      DO;                                                              00265400
*        ZMS=' 8, "RSNCODE'!!                /**KPOSP* MSG*/            00265500
*            RSNCODE!!                                                  00265600
*            '" "RSNCODE"'!!                                            00265700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00265800
*        ANS MSG('?IWM4QHLT ---> '!!ZMS);                               00265900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00266000
*        ZMACRET=8;                          /* MACRO ERROR */          00266100
*      END;                                                             00266200
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00266300
*  IF RSNCODE(1)^=''                         /* CHECK FOR NULL */       00266400
*    THEN                                                               00266500
*      DO;                                                              00266600
*        XRSNCODE=RSNCODE(1);                /* SET XVARIABLE */        00266700
*        ZXRSNCODE='OUTPUT';                 /* SET OUTPUT */           00266800
*      END;                                                             00266900
*  ELSE                                                                 00267000
*    IF ZXRSNCODE^=''                                                   00267100
*      THEN                                                             00267200
*        ZXRSNCODE='';                       /* RESET OUTPUT */         00267300
*/*PG.P04 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00267400
*      END;                                  /* END COMPLETE CHECKING*/ 00267500
*/********************************************************************/ 00267600
*/***PE.MR01 GENERATE CODE IF ZMACRET=0                              */ 00267700
*/********************************************************************/ 00267800
*  IF ZMACRET = 0                                                       00267900
*    THEN                                                               00268000
*      DO;                                                              00268100
*/********************************************************************/ 00268200
*/***PE.PR01 PRINT CONTROLS, DEFAULT IS YES                          */ 00268300
*/********************************************************************/ 00268400
*  ANS(MACCONC!!'LIST PUSH NOECHO;') NORESCAN COL(MACLMAR);             00268500
*  IF ZPRINT='NO'                            /* PRINT IS OFF */         00268600
*    THEN                                                               00268700
*      ANS(MACCONC!!'LIST OFF NOECHO;') NORESCAN COL(MACLMAR);          00268800
*    ELSE                                                               00268900
*      ANS(MACCONC!!'LIST ON NOECHO;')  NORESCAN COL(MACLMAR);          00269000
*/********************************************************************/ 00269100
*/*PE.DO02 OUTER MACRO DO STATEMENT----------------------------------*/ 00269200
*  IF XMF^='L'                                                          00269300
*    THEN                                                               00269400
*      ANS('DO; /* IWM4QHLT-PLISTVER */')                               00269500
*          NORESCAN COL(MACLMAR);                                       00269600
*/*PL.LL01 ?IWM4QHLT MF=L PARAMETER LIST-----------------------------*/ 00269700
*  IF XMF='L'                                                           00269800
*    THEN                                                               00269900
*      DO;                                                              00270000
*        ANS('DCL 1 '!!XMFCTRL!!' '!!XMFATTR!!', '!!                    00270100
*            '/* ?IWM4QHLT PARM LIST*/')                                00270200
*            NORESCAN COL(MACLMAR);                                     00270300
*/*PL.LL02  XVERSION FIXED(8) INPUT----------------------------------*/ 00270400
*        ANS('2 '!!XMFCTRL!!                                            00270500
*            '_XVERSION FIXED(8), '!!                                   00270600
*            '/* INPUT XVERSION*/')                                     00270700
*            NORESCAN COL(MACLMAR+2);                                   00270800
*/*PL.LL04  XFLAGS BIT(8) FIELD_LABEL--------------------------------*/ 00270900
*        ANS('2 '!!XMFCTRL!!                                            00271000
*            '_XFLAGS BIT(8), '!!                                       00271100
*            '/* FIELD_LABEL */')                                       00271200
*            NORESCAN COL(MACLMAR+2);                                   00271300
*/*PL.LL09 BIT 1XXXXXXX----------------------------------------------*/ 00271400
*          ANS('3 '!!XMFCTRL!!                                          00271500
*              '_KEYUSED_ASID_LIST BIT(1), '!!                          00271600
*              '/* BIT */')                                             00271700
*              NORESCAN COL(MACLMAR+2);                                 00271800
*/*PL.LL09 BIT X1XXXXXX----------------------------------------------*/ 00271900
*          ANS('3 '!!XMFCTRL!!                                          00272000
*              '_KEYUSED_ASID_NUM BIT(1), '!!                           00272100
*              '/* BIT */')                                             00272200
*              NORESCAN COL(MACLMAR+2);                                 00272300
*/*PL.LL10 RESERVED BIT----------------------------------------------*/ 00272400
*          ANS('3 '!!XMFCTRL!!                                          00272500
*              '_XFLAGS_RSVD1 BIT(6), '!!                               00272600
*              '/* BIT */')                                             00272700
*              NORESCAN COL(MACLMAR+2);                                 00272800
*/*PL.LL02  XPLISTLEN FIXED(16) BDY(BYTE) INPUT----------------------*/ 00272900
*        ANS('2 '!!XMFCTRL!!                                            00273000
*            '_XPLISTLEN FIXED(16) BDY(BYTE), '!!                       00273100
*            '/* INPUT XPLISTLEN*/')                                    00273200
*            NORESCAN COL(MACLMAR+2);                                   00273300
*/*PL.LL13  XASID_NUM FIXED(32) INPUT--------------------------------*/ 00273400
*        ANS('2 '!!XMFCTRL                                              00273500
*         !! '_XASID_NUM FIXED(32), '                                   00273600
*         !! '/* '!!ZXASID_NUM                                          00273700
*         !! ' XASID_NUM */'                                            00273800
*            ) NORESCAN COL(MACLMAR+2);                                 00273900
*/*PL.LL13 ADDR3164 XASID_LIST PTR(64) INPUT ADDR3164----------------*/ 00274000
*        ANS('2 '!!XMFCTRL                                              00274100
*         !! '_XASID_LIST_ADDR3164 PTR(64), '                           00274200
*         !! '/* '!!ZXASID_LIST_ADDR3164                                00274300
*         !! ' XASID_LIST_ADDR3164 */'                                  00274400
*         !!   '3 '!!XMFCTRL                                            00274500
*         !!   '_XASID_LIST_ADDR64_H FIXED(32), '                       00274600
*         !!   '3 '!!XMFCTRL                                            00274700
*         !!   '_XASID_LIST_ADDR31 PTR(31),'                            00274800
*            ) NORESCAN COL(MACLMAR+2);                                 00274900
*/*PL.LL13 ADDR3164 XANSAREA PTR(64) OUTPUT ADDR3164-----------------*/ 00275000
*        ANS('2 '!!XMFCTRL                                              00275100
*         !! '_XANSAREA_ADDR3164 PTR(64), '                             00275200
*         !! '/* '!!ZXANSAREA_ADDR3164                                  00275300
*         !! ' XANSAREA_ADDR3164 */'                                    00275400
*         !!   '3 '!!XMFCTRL                                            00275500
*         !!   '_XANSAREA_ADDR64_H FIXED(32), '                         00275600
*         !!   '3 '!!XMFCTRL                                            00275700
*         !!   '_XANSAREA_ADDR31 PTR(31),'                              00275800
*            ) NORESCAN COL(MACLMAR+2);                                 00275900
*/*PL.LL13 ALET XANSAREA FIXED(32) OUTPUT ALET-----------------------*/ 00276000
*        ANS('2 '!!XMFCTRL                                              00276100
*         !! '_XANSAREA_ALET FIXED(32), '                               00276200
*         !! '/* '!!ZXANSAREA_ALET                                      00276300
*         !! ' XANSAREA_ALET */'                                        00276400
*            ) NORESCAN COL(MACLMAR+2);                                 00276500
*/*PL.LL13  XANSLEN FIXED(31) INPUT----------------------------------*/ 00276600
*        ANS('2 '!!XMFCTRL                                              00276700
*         !! '_XANSLEN FIXED(31), '                                     00276800
*         !! '/* '!!ZXANSLEN                                            00276900
*         !! ' XANSLEN */'                                              00277000
*            ) NORESCAN COL(MACLMAR+2);                                 00277100
*/*PL.LL13  XQUERYLEN FIXED(31) OUTPUT-------------------------------*/ 00277200
*        ANS('2 '!!XMFCTRL                                              00277300
*         !! '_XQUERYLEN FIXED(31), '                                   00277400
*         !! '/* '!!ZXQUERYLEN                                          00277500
*         !! ' XQUERYLEN */'                                            00277600
*            ) NORESCAN COL(MACLMAR+2);                                 00277700
*/*PL.LL13  XRSV0024 CHAR(12) RESERVED-------------------------------*/ 00277800
*        ANS('2 '!!XMFCTRL                                              00277900
*         !! '_XRSV0024 CHAR(12), '                                     00278000
*         !! '/* RESERVED */'                                           00278100
*            ) NORESCAN COL(MACLMAR+2);                                 00278200
*/*PL.LL18 ----------------------------------------------------------*/ 00278300
*        ANS('2 * CHAR(0);')                                            00278400
*            NORESCAN COL(MACLMAR+2);                                   00278500
*/*PL.LL17 END OF MF=L PARAMETER LIST--------------------------------*/ 00278600
*      END;                                                             00278700
*/*PL.L01 MACRO WORK VARIABLES---------------------------------------*/ 00278800
*  DCL ZPRMLINE CHAR;          /* ZPRM ARRAY ENTRY ACCUMULATOR      */  00278900
*  DEACT ZPRMLINE;                                                      00279000
*  DCL ZNDX CHAR;              /* UNIQUE LIST STRUCTURE NAME        */  00279100
*  DEACT ZNDX;                                                          00279200
*  ZNDX=MACINDEX;              /* MACINDEX                          */  00279300
*  DCL XVERSION CHAR;                                                   00279400
*  DEACT XVERSION;                                                      00279500
*/*PL.L02 ?IWM4QHLT PARAMETER LIST-----------------------------------*/ 00279600
*  IF XMF^='L'                                                          00279700
*    THEN                                                               00279800
*      DO;                                                              00279900
*/*PL.L03 ?IWM4QHLT PARAMETER LIST-----------------------------------*/ 00280000
*        IF XMF='S'                                                     00280100
*          THEN                                                         00280200
*            XMFCTRL='#ZPLIST';                                         00280300
*/*PL.L04 ?IWM4QHLT PARAMETER LIST-----------------------------------*/ 00280400
*        ZPRMLINE='DCL 1 #Z'!!ZNDX!!' DEF('!!                           00280500
*                 XMFCTRL!!'),'!!                                       00280600
*                 ' /* ?IWM4QHLT PARM LIST*/';                          00280700
*/*PL.L05  XVERSION FIXED(8) INPUT-----------------------------------*/ 00280800
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00280900
*                 '_XVERSION FIXED(8), '!!                              00281000
*                 '/* INPUT XVERSION*/';                                00281100
*/*PL.L08  XFLAGS BIT(8) FIELD_LABEL---------------------------------*/ 00281200
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00281300
*                 '_XFLAGS BIT(8), '!!                                  00281400
*                 '/* FIELD_LABEL */';                                  00281500
*/*PL.L05  XPLISTLEN FIXED(16) BDY(BYTE) INPUT-----------------------*/ 00281600
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00281700
*                 '_XPLISTLEN FIXED(16) BDY(BYTE), '!!                  00281800
*                 '/* INPUT XPLISTLEN*/';                               00281900
*/*PL.L08  XASID_NUM FIXED(32) INPUT---------------------------------*/ 00282000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00282100
*                 '_XASID_NUM FIXED(32), '!!                            00282200
*                 '/* '!!ZXASID_NUM!!                                   00282300
*                 ' XASID_NUM */';                                      00282400
*/*PL.L08 ADDR3164 XASID_LIST PTR(64) INPUT ADDR3164-----------------*/ 00282500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00282600
*                 '_XASID_LIST_ADDR3164 PTR(64), '!!                    00282700
*                 '/* '!!ZXASID_LIST_ADDR3164!!                         00282800
*                 ' XASID_LIST_ADDR3164 */';                            00282900
*        ZPRMLINE=ZPRMLINE!!' 3 #Z'!!ZNDX!!                             00283000
*                 '_XASID_LIST_ADDR64_H FIXED(32),';                    00283100
*        ZPRMLINE=ZPRMLINE!!' 3 #Z'!!ZNDX!!                             00283200
*                 '_XASID_LIST_ADDR31 PTR(31),';                        00283300
*/*PL.L08 ADDR3164 XANSAREA PTR(64) OUTPUT ADDR3164------------------*/ 00283400
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00283500
*                 '_XANSAREA_ADDR3164 PTR(64), '!!                      00283600
*                 '/* '!!ZXANSAREA_ADDR3164!!                           00283700
*                 ' XANSAREA_ADDR3164 */';                              00283800
*        ZPRMLINE=ZPRMLINE!!' 3 #Z'!!ZNDX!!                             00283900
*                 '_XANSAREA_ADDR64_H FIXED(32),';                      00284000
*        ZPRMLINE=ZPRMLINE!!' 3 #Z'!!ZNDX!!                             00284100
*                 '_XANSAREA_ADDR31 PTR(31),';                          00284200
*/*PL.L08 ALET XANSAREA FIXED(32) OUTPUT ALET------------------------*/ 00284300
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00284400
*                 '_XANSAREA_ALET FIXED(32), '!!                        00284500
*                 '/* '!!ZXANSAREA_ALET!!                               00284600
*                 ' XANSAREA_ALET */';                                  00284700
*/*PL.L08  XANSLEN FIXED(31) INPUT-----------------------------------*/ 00284800
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00284900
*                 '_XANSLEN FIXED(31), '!!                              00285000
*                 '/* '!!ZXANSLEN!!                                     00285100
*                 ' XANSLEN */';                                        00285200
*/*PL.L08  XQUERYLEN FIXED(31) OUTPUT--------------------------------*/ 00285300
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00285400
*                 '_XQUERYLEN FIXED(31), '!!                            00285500
*                 '/* '!!ZXQUERYLEN!!                                   00285600
*                 ' XQUERYLEN */';                                      00285700
*/*PL.L08  XRSV0024 CHAR(12) RESERVED--------------------------------*/ 00285800
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00285900
*                 '_XRSV0024 CHAR(12), '!!                              00286000
*                 '/* RESERVED */';                                     00286100
*/*PL.L11 CONSTANT TO ENSURE THAT LIST FORM IS LONG ENOUGH ----------*/ 00286200
*        ZPRMNUM=ZPRMNUM+1;                                             00286300
*        ZPRM(ZPRMNUM)=ZPRMLINE!!' 2 * CHAR(0);';                       00286400
*        IF XPLISTVER^=0                                                00286500
*           & XMF^='S'                                                  00286600
*          THEN                                                         00286700
*            DO;                                                        00286800
*              ZPRMNUM=ZPRMNUM+1;                                       00286900
*              ZPRM(ZPRMNUM)=                                           00287000
*               'DCL #Z'!!ZNDX!!'_LENCHECK FIXED(32) CONSTANT('!!       00287100
*               'LENGTH('!!XMFCTRL!!')-LENGTH(#Z'!!ZNDX!!'));'!!        00287200
*               '/* CONSTANT TO ENSURE THAT THE LIST FORM'!!            00287300
*               ' IS LONG ENOUGH */';                                   00287400
*            END;                                                       00287500
*/*PL.L12 PARAMETER LIST SIZE----------------------------------------*/ 00287600
*        ZPLLEN=48;                                                     00287700
*        IF ZPRMMAX<ZPLLEN                                              00287800
*           & XMF^='E'                                                  00287900
*          THEN                                                         00288000
*            ZPRMMAX=ZPLLEN;                                            00288100
*/*PL.L13 -----------------------------------------------------------*/ 00288200
*      END;                                                             00288300
*/*PI.L01 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00288400
*  IF XMF^='L'                                                          00288500
*    THEN                                                               00288600
*      DO;                                                              00288700
*/*PI.L03 CLEAR PARAMETER LIST --------------------------------------*/ 00288800
*            ANS('#Z'!!ZNDX!!'=''''B;'!!                                00288900
*                '/* CLEAR PARAMETER AREA */')                          00289000
*                NORESCAN COL(MACLMAR);                                 00289100
*/*PI.L06 XFLAGS BIT(8)----------------------------------------------*/ 00289200
*        ZW='';                                                         00289300
*        ZMS='';                                                        00289400
*/*PI.L07 XFLAGS BIT(8) 1XXXXXXX-------------------------------------*/ 00289500
*        IF ASID_LIST^=''                                               00289600
*          THEN                                                         00289700
*            ZW=ZW!!'1';                                                00289800
*          ELSE                                                         00289900
*            ZW=ZW!!'0';                                                00290000
*/*PI.L07 XFLAGS BIT(8) X1XXXXXX-------------------------------------*/ 00290100
*        IF ASID_NUM^=''                                                00290200
*          THEN                                                         00290300
*            ZW=ZW!!'1000000';                                          00290400
*          ELSE                                                         00290500
*            ZW=ZW!!'0000000';                                          00290600
*/*PI.L09 XFLAGS BIT(8)----------------------------------------------*/ 00290700
*        IF INDEX(ZW,'1')^=0                                            00290800
*          THEN                                                         00290900
*            ANS('#Z'!!ZNDX!!'_XFLAGS='!!                               00291000
*                '#Z'!!ZNDX!!'_XFLAGS ! '!!                             00291100
*                ''''!!ZW!!'''B; '!!                                    00291200
*                '/* BIT(8) */')                                        00291300
*                NORESCAN COL(MACLMAR);                                 00291400
*/*PI.L05C XPLISTLEN FIXED(16)---------------------------------------*/ 00291500
*        ANS('#Z'!!ZNDX!!'_XPLISTLEN=LENGTH(#Z'!!ZNDX!!');'!!           00291600
*            '/* XPLISTLEN FIXED(16) */')                               00291700
*            NORESCAN COL(MACLMAR);                                     00291800
*/*PI.L17 XASID_NUM FIXED(32)----------------------------------------*/ 00291900
*        IF ZXASID_NUM='INPUT' !                                        00292000
*           ZXASID_NUM='INOUT'                                          00292100
*          THEN                                                         00292200
*            ANS('#Z'!!ZNDX!!'_XASID_NUM='!!                            00292300
*                XASID_NUM!!';'!!                                       00292400
*                '/* XASID_NUM FIXED(32) */')                           00292500
*                NORESCAN COL(MACLMAR);                                 00292600
*/*PI.L14 CHECK FOR * AS THE CHAR(256) ARGUMENT----------------------*/ 00292700
*        IF TRANSLATE(XASID_LIST)                                       00292800
*                    = 'NO_ASID_LIST'                                   00292900
*          THEN                                                         00293000
*            ZXASID_LIST='';                 /* RESET INPUT/INOUT */    00293100
*/*PI.L15 ADDR3164(XASID_LIST) CHAR(256)-----------------------------*/ 00293200
*        IF ZXASID_LIST^=''                                             00293300
*          THEN                                                         00293400
*            IF SYSAM64 = 'YES' THEN                                    00293500
*            DO;                                                        00293600
*              ANS('#Z'!!ZNDX!!'_XASID_LIST_ADDR3164='!!                00293700
*                  'ADDR('!!XASID_LIST!!');'!!                          00293800
*                  '/* ADDR3164 XASID_LIST CHAR(256) */')               00293900
*                  NORESCAN COL(MACLMAR);                               00294000
*            END;                                                       00294100
*            ELSE DO;                                                   00294200
*              ANS('#Z'!!ZNDX!!'_XASID_LIST_ADDR31='!!                  00294300
*                  'ADDR('!!XASID_LIST!!');'!!                          00294400
*                  '/* ADDR31 XASID_LIST CHAR(256) */')                 00294500
*                  NORESCAN COL(MACLMAR);                               00294600
*            END;                                                       00294700
*/*PI.L15 ADDR3164(XANSAREA) CHAR(256)-------------------------------*/ 00294800
*        IF ZXANSAREA^=''                                               00294900
*          THEN                                                         00295000
*            IF SYSAM64 = 'YES' THEN                                    00295100
*            DO;                                                        00295200
*              ANS('#Z'!!ZNDX!!'_XANSAREA_ADDR3164='!!                  00295300
*                  'ADDR('!!XANSAREA!!');'!!                            00295400
*                  '/* ADDR3164 XANSAREA CHAR(256) */')                 00295500
*                  NORESCAN COL(MACLMAR);                               00295600
*            END;                                                       00295700
*            ELSE DO;                                                   00295800
*              ANS('#Z'!!ZNDX!!'_XANSAREA_ADDR31='!!                    00295900
*                  'ADDR('!!XANSAREA!!');'!!                            00296000
*                  '/* ADDR31 XANSAREA CHAR(256) */')                   00296100
*                  NORESCAN COL(MACLMAR);                               00296200
*            END;                                                       00296300
*/*PI.L16 ALET(XANSAREA) CHAR(256)-----------------------------------*/ 00296400
*        IF ZXANSAREA^=''                                               00296500
*          THEN                                                         00296600
*            IF SYSASCE^='P'                                            00296700
*              THEN                                                     00296800
*                ANS('#Z'!!ZNDX!!'_XANSAREA_ALET='!!                    00296900
*                    'ALET('!!XANSAREA!!');'!!                          00297000
*                    '/* ALET XANSAREA CHAR(256) */')                   00297100
*                    NORESCAN COL(MACLMAR);                             00297200
*/*PI.L17 XANSLEN FIXED(31)------------------------------------------*/ 00297300
*        IF ZXANSLEN='INPUT' !                                          00297400
*           ZXANSLEN='INOUT'                                            00297500
*          THEN                                                         00297600
*            ANS('#Z'!!ZNDX!!'_XANSLEN='!!                              00297700
*                XANSLEN!!';'!!                                         00297800
*                '/* XANSLEN FIXED(31) */')                             00297900
*                NORESCAN COL(MACLMAR);                                 00298000
*/*PI.L31 INVOKE FUNCTION--------------------------------------------*/ 00298100
*              IF NUMBER(RSNCODE)>0                                     00298200
*                THEN                                                   00298300
*                  ANS('RFY GPR00F RSTD;') NORESCAN COL(MACLMAR);       00298400
*              IF NUMBER(RETCODE)>0                                     00298500
*                THEN                                                   00298600
*                  ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);       00298700
*              ANS('RFY GPR01P RSTD;') NORESCAN COL(MACLMAR);           00298800
*                    IF SYSAM64 = 'YES' THEN                            00298900
*              ANS('G64R01P=ADDR(#Z'!!ZNDX!!');'!!                      00299000
*                  '/* PARAMETER LIST */')                              00299100
*                  NORESCAN COL(MACLMAR);                               00299200
*                    ELSE                                               00299300
*              ANS('GPR01P=ADDR(#Z'!!ZNDX!!');'!!                       00299400
*                  '/* PARAMETER LIST */')                              00299500
*                  NORESCAN COL(MACLMAR);                               00299600
*              IF SYSASCE^='P'                                          00299700
*                THEN                                                   00299800
*                  ANS('SAR(GPR01P,ALET(#Z'!!ZNDX!!'));'!!              00299900
*                      '/* PARAMETER LIST AR */')                       00300000
*                      NORESCAN COL(MACLMAR);                           00300100
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00300200
       DCL EHAMAPS CHAR EXTERNAL;                                       00300300
       IF INDEX(EHAMAPS,'XM@')=0 THEN                                   00300400
         EHAMAPS=EHAMAPS!!'XM@,';                                       00300500
                                                                        00300600
                                                                        00300700
       ANS('PC(XM@(96)!129);') SKIP COL(5);                             00300800
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00300900
*              ANS('RFY GPR01P UNRSTD;') NORESCAN COL(MACLMAR);         00301000
*/*PO.L03 XQUERYLEN FIXED(31)----------------------------------------*/ 00301100
*              IF ZXQUERYLEN='OUTPUT' !                                 00301200
*                 ZXQUERYLEN='INOUT'                                    00301300
*                THEN                                                   00301400
*                  ANS(XQUERYLEN!!                                      00301500
*                      '=#Z'!!ZNDX!!'_XQUERYLEN;'!!                     00301600
*                      '/* XQUERYLEN FIXED(31) */')                     00301700
*                      NORESCAN COL(MACLMAR);                           00301800
*/*PO.L08 XRETCODE RETURN CODE---------------------------------------*/ 00301900
*              IF NUMBER(RETCODE)>0                                     00302000
*                THEN                                                   00302100
*                    ANS(XRETCODE!!                                     00302200
*                     '=GPR15F; /* SET RETURN CODE */')                 00302300
*                      NORESCAN COL(MACLMAR);                           00302400
*/*PO.L09 XRSNCODE REASON CODE---------------------------------------*/ 00302500
*              IF NUMBER(RSNCODE)>0                                     00302600
*                THEN                                                   00302700
*                    ANS(XRSNCODE!!                                     00302800
*                     '=GPR00F; /* SET REASON CODE */')                 00302900
*                      NORESCAN COL(MACLMAR);                           00303000
*/*PO.L10 REMOVE REGISTER RESTRICTIONS-------------------------------*/ 00303100
*              IF NUMBER(RSNCODE)>0                                     00303200
*                THEN                                                   00303300
*              ANS('RFY GPR00F UNRSTD;') NORESCAN COL(MACLMAR);         00303400
*              IF NUMBER(RETCODE)>0                                     00303500
*                THEN                                                   00303600
*              ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);         00303700
*/*PO.L12 END OF PARAMETER LIST PROCESSING---------------------------*/ 00303800
*      END;                                                             00303900
*/*PO.L13 IWM4QHLT USAGE INDICATOR-----------------------------------*/ 00304000
*  ZIWM4QHLT='YES';                          /* SET IWM4QHLT USED */    00304100
*/*PO.L15 END OF EXECUTABLE IWM4QHLT-PLISTVER MACRO------------------*/ 00304200
*  IF XMF^='L'                                                          00304300
*    THEN                                                               00304400
*      ANS('END; /* IWM4QHLT-PLISTVER */')                              00304500
*          NORESCAN COL(MACLMAR);                                       00304600
*/*PO.L16 RESTORE PRINT CONTROLS-------------------------------------*/ 00304700
*  ANS(MACCONC!!'LIST POP NOECHO;') NORESCAN COL(MACLMAR);              00304800
*/*PO.L17 END OF IWM4QHLT MACRO--------------------------------------*/ 00304900
*  ANS(MACCONC!!'SPACE;') NORESCAN COL(MACLMAR);                        00305000
*  ANS(' ') NORESCAN COL(MACLMAR);                                      00305100
*/*******************************************************************/  00305200
*/*  PO.L18 END OF CODE TO BE BYPASSED WHEN ZMACRET ^= 0            */  00305300
*/*******************************************************************/  00305400
*      END;                                                             00305500
*/*******************************************************************/  00305600
*/*  MVS ONLY     -CHECK IF AMG PARM LISTS ARE PRESENT              */  00305700
*/*               -ROUND MAX AMG PARM LIST TO DOUBLEWORD MULTIPLES  */  00305800
*/*******************************************************************/  00305900
*  IF ZPRMNUM>0                   /* NUMBER OF AMG PARM LIST ENTRIES*/  00306000
*    THEN                                                               00306100
*      DO;                                                              00306200
*        ZPRMMAX=((ZPRMMAX+7)/8)*8; /* ROUND PARM LIST SIZE UP TO       00306300
*                                      DOUBLEWORD MULTIPLES        */   00306400
*/*******************************************************************/  00306500
*/*  MVS -GENERATE PARM LIST DCL TO OVERLAY ?EPILOG'S ILIST AREA    */  00306600
*/*******************************************************************/  00306700
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00306800
*          THEN                                                         00306900
*            DO;                                                        00307000
*              IF INDEX(EHALIST,',AMG,')=0 /* HAS DECLARE BEEN DONE?*/  00307100
*                THEN                                                   00307200
*                  DO;                                                  00307300
*                    ANS('?EPILOG                                       00307400
*                        STRING(''DCL #ZPLIST DEF(ILIST);'');');        00307500
*                    EHALIST=EHALIST!!',AMG,';                          00307600
*                  END;                                                 00307700
*            END;                                                       00307800
*/*******************************************************************/  00307900
*/*  MVS  -EXTRACT PARM LISTS FROM AMG GLOBAL MACRO ARRAYS          */  00308000
*/*******************************************************************/  00308100
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00308200
*          THEN                                                         00308300
*            DO;                                                        00308400
*              IF ZPRMMAX>EHAMAXLEN                                     00308500
*                THEN                                                   00308600
*                  EHAMAXLEN=ZPRMMAX; /* SET MAX PARM LIST SIZE     */  00308700
*            END;                                                       00308800
*        DO ZI=1 TO ZPRMNUM; /* EXTRACT AMG PARM LISTS               */ 00308900
*          ANS('?EPILOG STRING('''!!ZPRM(ZI)!!''');')                   00309000
*              COL(MACLMAR);                                            00309100
*        END;                                                           00309200
*      END;                                                             00309300
*/*-----------------------------------------------------------------*/  00309400
*/*  MVS  -ENSURE THAT GPRS NEEDED BY AMG MACROS WILL BE PROVIDED   */  00309500
*/*        BY ?EPILOG                                               */  00309600
*/*-----------------------------------------------------------------*/  00309700
*        IF INDEX(EHAREGS,'01P')=0                                      00309800
*          THEN                                                         00309900
*            EHAREGS=EHAREGS!!'01P'; /* GPR01P                      */  00310000
*        IF INDEX(EHAREGS,'00F')=0                                      00310100
*          & NUMBER(RSNCODE)>0                                          00310200
*          THEN                                                         00310300
*            EHAREGS=EHAREGS!!'00F'; /* GPR00F                      */  00310400
*        IF INDEX(EHAREGS,'15F')=0                                      00310500
*          THEN                                                         00310600
*            EHAREGS=EHAREGS!!'15F'; /* GPR15F                      */  00310700
*        IF SYSALVL > 1 THEN                                            00310800
*        DO;                                                            00310900
*          IF INDEX(EHAREGS64,'00F')=0 THEN                             00311000
*            EHAREGS64 = EHAREGS64 !! '00F';                            00311100
*          IF INDEX(EHAREGS64,'01P')=0 THEN                             00311200
*            EHAREGS64 = EHAREGS64 !! '01P';                            00311300
*          IF INDEX(EHAREGS64,'15F')=0 THEN                             00311400
*            EHAREGS64 = EHAREGS64 !! '15F';                            00311500
*        END;                                                           00311600
*  RETURN CODE(ZMACRET);                                                00311700
*%END IWM4QHLT;                                                         00311800
