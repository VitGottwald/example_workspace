*                                                                               
* %DCL BPXZOAPB_INCLUDED CHAR EXT;                                              
* %DEACTIVATE BPXZOAPB_INCLUDED;                                                
* %IF BPXZOAPB_INCLUDED = '' %THEN                                              
* %DO;                                                                          
*/* Macro made bi-lingual on 22259. CBGEN compile date 21138         */         
*% /*                                                                           
         MACRO                                                                  
         BPXZOAPB &DSECT=YES,&LIST=YES,&TITLE=YES,&OAPB=YES                     
         GBLC  &BPXZOAPB_INCLUDED                                               
         GBLC  &ZCBPRINT                                                        
&BPXZOAPB_INCLUDED SETC 'YES'                                                   
         AIF   ('&LIST' EQ 'NONE').P0                                           
         AIF   ('&TITLE' EQ 'NO').P5                                            
 TITLE   'BPXZOAPB  - OpenMVS address space per-process extension     '*        
                                                                                
.P5      ANOP                                                                   
**/ ;                                                                           
*/****START OF SPECIFICATIONS******************************************         
*                                                                               
*    $MAC (BPXZOAPB) COMP(SCPX1) PROD(BPX):                                     
*                                                                               
*01* MACRO NAME: BPXZOAPB                                                       
*                                                                               
*01* DSECT NAME: N/A                                                            
*                                                                               
*01* DESCRIPTIVE NAME: OpenMVS address space per-process extension              
*                                                                               
*02*   ACRONYM: OAPB                                                            
*                                                                               
**/                                                                             
*/*01* PROPRIETARY STATEMENT=                                        */         
*/***PROPRIETARY_STATEMENT********************************************/         
*/*                                                                  */         
*/*                                                                  */         
*/* LICENSED MATERIALS - PROPERTY OF IBM                             */         
*/* 5650-ZOS COPYRIGHT IBM CORP. 1997, 2022                          */         
*/*                                                                  */         
*/* STATUS= HBB77D0                                                  */         
*/*                                                                  */         
*/***END_OF_PROPRIETARY_STATEMENT*************************************/         
*/*                                                                             
*                                                                               
*01* EXTERNAL CLASSIFICATION:                                                   
*02*         NOTPI:BASE                                                         
*02*            PI:  FIELDS                                                     
*                   OapbDefaultUseridLen                                        
*                   OapbDefaultUserid                                           
*                   OapbDefaultGroupidLen                                       
*                   OapbDefaultGroupid                                          
*                                                                               
*                                                                               
*01* END OF EXTERNAL CLASSIFICATION:                                            
*                                                                               
*01* FUNCTION:                                                                  
*                                                                               
*    This maps the OpenMVS extension to the ASSB.                               
*                                                                               
*01* METHOD OF ACCESS:                                                          
*                                                                               
*02*   PL/X:                                                                    
*                                                                               
*        %INCLUDE SYSLIB(BPXZOAPB)                                              
*        By default, the OAPB is based on OtcbOapb. If                          
*        other basing is desired, use %OAPBBASE='BASED(XXXXXX)'.                
*        If %OAPBBASE='BASED(OAPBPTR)' is coded, a Declare for                  
*        OAPBPTR is also generated.                                             
*                                                                               
*02*   ASM:                                                                     
*                                                                               
*        N/A                                                                    
*                                                                               
*01* SIZE: Release dependent.  Refer to the mapping.                            
*            OAPB -- X'01B0' bytes                                              
*                                                                               
*01* POINTED TO BY:                                                             
*      1) OtcbOapb, PprpOapb                                                    
*                                                                               
*01* CREATED BY: OpenMVS Process Initialization (BPXPRIN1)                      
*                                                                               
*01* DELETED BY: OpenMVS Resource Recovery Exit (BPXRRTRM)                      
*                                                                               
*01* STORAGE ATTRIBUTES:                                                        
*02*   SUBPOOL: 241                                                             
*02*   KEY: 0, non fetch protected                                              
*02*   RESIDENCY: ECSA                                                          
*                                                                               
*01* FREQUENCY: 1 per OpenMVS process                                           
*                                                                               
*01* SERIALIZATION: N/A                                                         
*                                                                               
*01* DEPENDENCIES: None                                                         
*                                                                               
*01* NOTES: None                                                                
*                                                                               
*01* COMPONENT: OpenMVS (SCPX1)                                                 
*                                                                               
*01* DISTRIBUTION LIBRARY:  AINTLIB                                             
*                                                                               
*01* EYE-CATCHER: OAPB                                                          
*02*   OFFSET:  0                                                               
*02*   LENGTH:  4                                                               
*                                                                               
*01* CHANGE-ACTIVITY:                                                           
*    $L0=DOAA006  HOM1120 930330 PDPB: Multi-Process support.                   
*    $D1=DOAA017  HOM1120 930615 PDI6: Fork Fast Path Support.                  
*    $D5=DOAA003  HOM1120 930519 PDPE: Ptrace Thread Support                    
*    $D6=DOAA018  HOM1120,930615,PDXU: MvsIptAffinity support                   
*    $D7=DOAA045  HOM1120,930921,PDJJ: Steplib support                          
*    $P1=DOA0097  HOM1120,931105,PDJM: Zombe - invalidates OapbPprp             
*    $P2=POA0279  HOM1120,931122,PDJQ: Multi-Process quiescing                  
*    $P3=POA0381  HOM1120,940310,PDI6: Multi-Process Cleanup                    
*    $D8=DPFA065  HOM1130,940505,PDAX: A065.05 Rlimits/Rusage                   
*    $D9=DPFA065  HOM1130,940519,PDJM: A065.03 MMAP count                       
*    $DA=DPFA079  HOM1130,940619,PDJI: A079.02 fork support for memory          
*                                      objects                                  
*    $DB=DPFA051  HOM1130,940624,PDJJ: A051.07 Fork daemon                      
*    $P4=PPF0098  HOM1130,940910,PDPE: CopyOnFork emancipation                  
*    $DC=DPFA094  HOM1130,940924,PDJJ: A094.02 Handle indirect SA               
*    $P5=PPF0123  HOM1130,941007,PDJJ: Shared subpool support                   
*    $DD=DPFA100  HOM1130,941109,PDPE: DCR A100.01 Captured storage             
*    $P6=PPF0201  HOM1130,950117,PDJI: Cleanup of unknown child                 
*    $P7=PPF0389  HOM1130,950421,PDI6: Cleanup of Common EDSA                   
*    $DE=DPFA126  HOM1130,950505,PDJQ: PL/I ENQ wait interruption               
*    $DF=DPFA126  HOM1130,950509,PDKG: freeze_exit support                      
*    $DG=DPFA111  HOM1130,950601,PDJG: Task level security (A111.00)            
*    $P8=PRG0007  HOM1140,950531,PDJQ: Rollup REL3 DCR A126.00                  
*    $P9=PRG0017  HOM1140,950622,PDKG: Rollup Rel3 DCR A130.00 and              
*                                      DCR A111.00                              
*    $DH=DRGA153  HOM1150,960108,PDJJ: Spawn userid (A153.02) rollup            
*    $DI=DRGA153  HOM1150,951212,PDPY: A153.03 - Performance                    
*    $PA=PRG0080  HOM1140,951212,PDJQ: Rollup RACF/DCE SPE (OW15865)            
*    $DJ=DRGA153  HOM1150,951212,PDJQ: A153.01 - ACEE caching                   
*    $DK=DSPA164  HOM1150,960212,PDI6: A164.02 - WLM Server Support             
*    $DL=DSPA164  HOM1150,960212,PDPY: A164.02 - WLM Server Support             
*    $DM=DSPA158  HOM1150,960109,PDJI: AF-ESCON support A158.00                 
*    $DN=DCA0153  HOM1150,960422,PDKG: A153.11 - Medium weight spawn            
*    $PB=PQC1585  HBB6603,960618,PDJM: Env Vars to Kernel OapbIPFP...           
*    $DO=DSPA175  HOM1150,960425,PDPY: SRB Mode Support (A175.01)               
*    $PC=PQC1821  HBB6603 960721 PDJT: OapbArqFreeChain for asyncio             
*    $DP=DSYA196  JBB6604,960826,PDJC: (A196.01) SMF syscall                    
*    $DQ=DSYA195  JBB6604 960918 PDJT: OEUDP - Fd Bit Array   (A195.02)         
*    $DR=DSYA194  JBB6604 961002 PDJJ: Unauth async I/O exits (A194.02)         
*    $DS=DSYA195  JBB6604 961009 PDJI: AF-INET C-inet support (A195.02)         
*    $DT=DSYA196  JBB6604 961029 PDAE: SpawnU inheritance     (A196.02)         
*    $DU=PSY0202  JBB6604 970102 PDJM: Fast Path Name                           
*    $DV=DSYA197  JBB6604 961220 PDPY: A197.00 APPC Elimination                 
*    $PD=PSY0276  JBB6604 970106 PDJJ: Synch in state of caller                 
*    $PE=PSY0357  JBB6604 970210 PDKJ: Add orphaned ksers field                 
*    $PF=PSY0355  JBB6604 970219 PDKC: IPC performance                          
*    $PG=PUX0108  HBB6605 970410 PDSZ: Logging error msgs at interval           
*    $PH=PSY0553  JBB6604 970320 PDJQ: RACF managed ACEEs (OW26085)             
*    $PI=DUXA217  HBB6605 970410 PDKG: A217.06 OASB/OAPB CPOOLs                 
*    $DW=DUXA217  HBB6605 970525 PDI6: A217.14 OE WLM Interfaces                
*    $DX=DUXA217  HBB6605 970525 PDJQ: A217.01 MultiProc/MultiUser              
*    $PJ=PUX0181  HBB6605 970519 PDJJ: Default UID support                      
*    $PK=PUX0245  HBB6605 970612 PDJJ: Add default group id                     
*    $DY=PVTA248  HBB6606 970826 PDSZ: QuickPool support (A248.00)              
*    $DZ=DVTA242  HBB6606 970929 PDJM: __getthent connection (A247.01)          
*    $E1=DVZA237  HBB6606 971006 PDKG: __security                               
*    $E2=DVTA238  HBB6606 971006 PDPY: A238.00 IEEE support                     
*    $E3=DVTA245  HBB6606 971110 PDI6: Semaphore Performance (A245.00)          
*    $01=OW31970  HBB6603 980216 PDI6: DBX Support for Sticky Pgms              
*                                      (Merge up PTM PWA0085)                   
*    $PL=PWA0078  HBB6607 980410 PDZJ: Propagate JSCBAUTH from parent           
*    $E4=DWAA291  JBB6607 980409 PDKG: Dynamic SYSMDUMP (A291.02)               
*    $PM=PWA0110  HBB6607 980423 PDZJ: Remove PWA0078                           
*    $PN=DWA0155  JBB6607 980526 PDKG: Merge up OW32119 - def UIDs              
*    $PP=PWA0383  JBB6607 980828 PDKG: SIGDUMP support                          
*    $PQ=PWA0453  JBB6607 981007 PDI6: No IRB Support for Exec                  
*    $E5=DCRA305  HBB6608 980826 PDZJ: A304.00 queued signals                   
*    $E6=DWKA320  HBB6608 980717 PDJI: Add OapbOsenvCpid A320.00                
*    $PR=PWK0541  HBB6608 981206 PDJQ: spawn/exec BPX.JOBNAME support           
*    $PS=PWK0711  HBB6608 990226 PDJC: msgq processing level env var            
*    $PT=PWK0800  HBB6608 990226 PDJC: msgq processing level env var            
*    $PO=PWY0206  JBB6609 990315 PDJM: Roll from R8 to R9 - recompile           
*    $E7=DWYMPES  JBB6609 980319 PDI6: Multi-System Enclave Support             
*    $E8=DWYA365  JBB6609 990329 PDPY: __map service support A365.00            
*    $E9=PWYA352  JBB6609 990323 PDJC: (DCR A352.00) JobLog To STDERR           
*    $02=OW38800  JBB6609 990515 PDPY: SRB Schedule Fix (PWY0432)               
*    $PP=PWY0471  JBB6609 990518 PDJM: Rollup OW39110 (pull ref to PGTH         
*    $03=OW39152  HBB6606 990606 PDI6: _BPX_PTRACE_ATTACH Fix                   
*    $EA=DXDA403  HBB7703 990915 PDPY: Performance (A403.00)                    
*    $EB=DXDA406  HBB7703 991029 PDPY: BPX1TAF Thread affinity                  
*                                      support (A406.00)                        
*    $PQ=PXD0497  HBB7703 912508 PDKG: Exec/term serialization                  
*    $EC=DXDA405  HBB7703 000118 PDQR: A405.05 zombie process removal           
*    $PR=PXD1361  HBB7703 000211 PDAE: Default UID bit                          
*    $ED=DXDA405  HBB7703 991115 PDJI: system/process limits A405.03            
*    $EE=DXVA409  HBB7704 000227 PDJI: A409.01 Fast quiesce freeze              
*    $03=OW44571  HBB7703 000601 PDZJ: A408.03 POST MORTEM DEBUG                
*    $PS=PXV0305  HBB7704 000929 PDJI: Add OapbFQQuiesceTerm flag               
*    $04=OW45005  HBB7705 001031 PDQR: Abend Zombie IRB while in abend          
*    $EF=DYN0519  HBB7708 001130 PDZJ: A519.03 64 bit support                   
*    $05=OW47854  HBB7705 010222 PDSZ: seteuid propogate on spawn               
*    $PT=PYM0415  HBB7706 010828 PDKG: Medium weights - OW49764 FIN             
*    $EG=DYMA511  HBB7706 010305 PDPY: OMVS Restart Support                     
*    $EH=DYNA519  HBB7709 010405 PDKG: 64 bit                                   
*    $EI=DYN0519  HBB7709 010415 PDZJ: A519.11 limit storage above bar          
*    $EJ=DYN0519  HBB7708 010701 PDJQ: (DCR A519.98) QueryMode Support          
*    $EK=DYN0519  HBB7708 071701 PDZJ: (DCR A519.12) LE HiMem token             
*    $EL=DYVA551  HBB7707 010221 PDJI: A551.00 Enhanced pthread quiesce         
*    $06=ow51421  HBB7707 011128 PDSZ: pull ow47854                             
*    $EM=DYVA568  HBB7707 010725 PDAE: DCR A568 Process start/end exit          
*    $EN=DYNA613  HBB7708 020801 PDSZ: Dynamic CBS                              
*    $EO=DYNA567  HBB7708 020207 PDJQ: DCR A567.00 (MLS Support) rollup         
*    $PU=PJK1232  HBB7700 031123 PDKG: Set mmap area to fixed(31)               
*    $07=OA05582  HBB7708 021118 PDJQ: Save dub key                             
*    $EP=DDEA768  HBB7720 040208 PDJJ: A768.00 DAEMON ATTACH                    
*    $EQ=DDEA735  HBB7720 031209 PDJC: DCR A735.00 WLM Enclave                  
*                                                  Propagation                  
*    $ER=DCRA585  HBB7730 050505 PDKG: inittab/respawn                          
*    $ES=DCRA851  HBB7730 050609 PDJC: Dump PPSQs for SYSMDUMPs and             
*                                      non-USS gernerated SVC dumps             
*    $ET=DcrB035  HBB7740 060103 PDJT: I/O Complete --> Msg Queues              
*    $EU=DCRB110  HBB7740 060215 PDJQ: Propagate setuid/exec across             
*                                      fork                                     
*    $08=OA06279  HBB7708 040223 PDJQ: No signals during fork CSV Exits         
*    $PV=ME06095  HBB7700 060317 PDKG: inittab - respfrk                        
*    $EV=DCRA955  HBB7740 060316 PDHA: super pthread_cancel                     
*    $EW=DCRA888  HBB7740 060316 PDHA: SUSv3 alarm behavior                     
*    $PW=ME09644  HBB7740 070312 PDI6: EEOP Memterm Recovery Fix                
*    $EX=DCRB209  HBB7750 070215 PDI6: VSCR and Performance                     
*    $PX=ME10248  HBB7750 070514 PDI6: ASAADMAC BPXZOCVT                        
*    $EY=DCRB421  HBB7760 071019 PDHA: VSCR for v1r11: EDSA in C2DS             
*    $EZ=DCRB395  HBB7760 070915 PDI6: User Syscall Trace                       
*    $F0=ME13542  HBB7760 080508 PDHA: DCR B421 withdrawn                       
*    $F1=DCRB799  HBB7770 090130 PDJQ: DCR B799.00 __poe r/w support            
*    $09=OA30088  HBB7740 090917 PDJC: Recover from ABEND during FIFO           
*                                      ENQ to prevent infinite loop             
*    $0A=OA31278  HBB7750 100215 PDJQ: Ensure BPX_PREPROC_TERM exits            
*                                      only called for process term             
*    $F2=DCRB930  HBB7780 100331 PDJQ: B930.00 RAS - _BPXK_MIN_PWFOLD           
*    $F3=DCRB930  HBB7780 100504 PDJC: Hard copy log message reduction          
*    $0B=OA33516  HBB7750 100731 PDJQ: _BPXK_DISABLE_SHLIB (SPE)                
*    $0C=OA35080  HBB7750 110216 PDJT: EC6 for Aiocb Exit/ECB change            
*    $F4=DCRC368  HBB7790 110915 PDJQ: Remove BPX.DEFAULT.USER support          
*    $F5=DCRC403  HBB7790 120830 PDJQ: Count Kernel stack cells in use          
*    $F6=DCRC114  HBB7790 120525 PDKG: Process wait time                        
*    $PY=OA40531  HBB7790 130301 PDJQ: Remove OapbSctb for surrogates           
*    $PZ=ME25792  HBB7790 130220 PDKG: PWT no propagation new job exec          
*    $0D=OA43472  HBB7780 130927 PDKG: PTXAG tasks waiting disposition          
*    $F7=DCRC749  HBB77A0 131103 PDJJ: Use thread identity for getpsent         
*    $Q1=WI112562 HBB77B0 160404 PDJJ: Update access to BPX.DAEMON              
*                                      (OA50245)                                
*    $F8=DCRC995  HBB77B0 170101 PDMX: 2038/2042                                
*    $0E=OA55202  HBB77C0 180413 PDJJ: Speed up quiesce freeze                  
*    $F9=238205   HBB77C0 180430 PDJQ: Query_Mode RMODE64 support               
*    $0F=                                                                       
*    $FA=                                                                       
*    $FB=                                                                       
*    $FC=WI401043 HBB77D0 220816 PDSA: Add XPLATFORM level                      
****END OF SPECIFICATIONS*********************************************/         
*% /*                                                                           
.P0      ANOP                                                                   
         AIF   ('&ZCBPRINT' EQ 'NO').P1                                         
         AIF   ('&LIST' EQ 'YES').P2                                            
.P1      ANOP                                                                   
         PUSH  PRINT                                                            
         PRINT OFF                                                              
.P2      ANOP                                                                   
         AIF   ('&OAPB' EQ 'NO').L0002                                          
         AIF   ('&DSECT' EQ 'YES').L0003                                        
         AIF   ('&OAPB' NE 'YES').L0002                                         
OAPB     DS    0D                                                               
         AGO   .L0004                                                           
.L0003   ANOP                                                                   
OAPB     DSECT                                                                  
.L0004   ANOP                                                                   
OAPB1    DS    CL256                                                            
*                                                                               
*      ***************************************************************          
*      *                                                             *          
*      * Flag byte 1 of OapbFlags                                    *          
*      *                                                             *          
*      ***************************************************************          
*                                                                               
*                                                                               
OAPB2    DS    CL20                                                             
         ORG   OAPB2                                                            
OAPBDEFAULTUSERIDLEN DS X Length of default userid                              
OAPBDEFAULTUSERID DS CL8 Default userid                                         
OAPBDEFAULTGROUPIDLEN DS X Length default groupid                               
OAPBDEFAULTGROUPID DS CL8 Default groupid                                       
         DS    CL2       reserved                                               
OAPB3    DS    CL156                                                            
OAPB_LEN EQU   *-OAPB                                                           
.L0002   ANOP                                                                   
         AIF   ('&ZCBPRINT' EQ 'NO').P3                                         
         AIF   ('&LIST' EQ 'YES').P4                                            
.P3      ANOP                                                                   
         POP   PRINT                                                            
.P4      ANOP                                                                   
.P_EXIT  ANOP                                                                   
         MEND                                                                   
**/ ;                                                                           
* %BPXZOAPB_INCLUDED = 'YES';                                                   
* %DCL ZCBPRINT CHAR EXT;                                                       
* %DEACTIVATE ZCBPRINT;                                                         
* %DCL BPXZOAPB_LIST CHAR EXT;                                                  
* %DEACTIVATE BPXZOAPB_LIST;                                                    
* %IF BPXZOAPB_LIST = 'NO' !                                                    
*    ZCBPRINT = 'NO' %THEN                                                      
* %DO;                                                                          
*   @LIST PUSH NOECHO;                                                          
*   @LIST NOASSEMBLE NOECHO;                                                    
*   @LIST OFF C NOECHO;                                                         
* %END;                                                                         
*/* Start of PL/X Source                                             */         
*                                                                               
*%IF OAPBBASE='' %THEN                                                          
*  %DO;                                                                         
*    %OAPBBASE='Based(OtcbOapb)';                                               
*  %END;                                                                        
* %IF OAPBBASE='Based(OapbPtr)' %THEN                                           
*   %DO;                                                                        
*     DCL OapbPtr Ptr(31);           /* Pointer to the OAPB          */         
*   %END;                                                                       
*DCL                                                                            
*1     Oapb          OAPBBASE   Bdy(DWord),                                     
* 2 OAPB1,                                                                      
* 3 OAPB1_NOTASM,                                                               
*  4   OapbID        Char(4),   /* EBCDIC ID - OAPB                  */         
*  4   OapbSP        Fixed(08), /* Subpool of this OAPB              */         
*  4   OapbLen       Fixed(24), /* Length of this OAPB               */         
*  4   OapbNext      Ptr(31),   /* Address of next OAPB              */         
*  4   OapbPrev      Ptr(31),   /* Address of previous OAPB          */         
*  4   OapbPprp      Ptr(31),   /* ->PPRP (memterm check StatusZombie*/         
*  4   OapbInitialThread                                                        
*                    Ptr(31),   /* Process Initial Thread            */         
*  4   OapbProcessID Fixed(32), /* Process ID                        */         
*  4   OapbProcGrpID Fixed(32), /* Process Group ID                  */         
*  4   OapbParentPID Fixed(32), /* Parent Process ID                 */         
*  4   OapbCleanupTcb Ptr(31),  /* Tcb that is to cleanup this process          
*                                  if other than the initial thread             
*                                                                @P3A*/         
*  4   OapbExitStatus Fixed(32),/* Status from Exited Process        */         
*  4   OapbEdsa       Ptr(31),  /* Address of Edsa                   */         
*  4   OapbSavedUserTime Bit(64) Bdy(DWord), /* Last user time value            
*                                  times() returned                  */         
*  4   OapbSessionID Fixed(32), /* Session ID                        */         
*  4   OapbOrphKser  Ptr(31),   /* Ksers orphaned by timed kern wait            
*                                    in SRB mode (post in flight)@PEA*/         
*  4   OapbFlags     Bit(32),   /* Flags for the process that need to           
*                                  reside in common                  */         
*    /****************************************************************/         
*    /* Flag byte 1 of OapbFlags                                     */         
*    /****************************************************************/         
*    5 OapbExecComplete  Bit(1),/* Process Completed fork/exec       */         
*    5 OapbExec2Start    Bit(1),/* 1=Exec Phase II Started           */         
*    5 OapbPtDetContDone Bit(1),/* 1=Ptrace detach or continue request          
*                                  has completed                     */         
*    5 OapbLocalChild    Bit(1),/* 1=Process created by attach_exec or          
*                                  attach_execmvs                    */         
*    5 OapbInExec        Bit(1),/* 1=Process in the midst of an exec or         
*                                  execmvs                           */         
*    5 OapbNoCoreDump    Bit(1),/* No Core Dump should be taken during          
*                                  during _exit, exec or signal term */         
*    5 OapbPtWrtFocOldDone Bit(1),/* 1=Ptrace thread write focus done           
*                                  on old focus thread           @D5A*/         
*    5 OapbClnCrntStplib Bit(1), /* OapbStwa needs to be                        
*                                  cleaned up by BPXPRMPC        @D7A*/         
*    /* Flag byte 2 of OapbFlags                                     */         
*    5 OapbLfcJlbProp    Bit(1), /* TcbJlb has been propagated to a             
*                                  local fork child              @D7A*/         
*    5 OapbStatusZombie  Bit(01),   /* = = PprpStatusZombie      @P1A*/         
*    5 OapbQuiesceKilled Bit(1),    /* 1=Process has been quiesced by           
*                                      quiesce_local_processes   @P2A*/         
*    5 OapbQuiesceCounted Bit(1),   /* 1=Process has been counted by            
*                                      quiesce_local_processes   @P2A*/         
*    5 OapbProcessFrozen Bit(1),/* 1=Process is currently frozen @DBA*/         
*    5 OapbForkFailed    Bit(1),/* 1=fork process failed. This flag             
*                                  is set on in the fork child                  
*                                  process when its parent has been             
*                                  informed of a fork failure, but              
*                                  it does not know that the child              
*                                  lived as far as being dubbed  @P6A*/         
*    5 OapbEdsaCommon     Bit(1),  /* 1=EDSA is in common storage, used         
*                                      by memterm to determine if EDSA          
*                                      requires cleanup          @P7A*/         
*    5 OapbServerVerified Bit(1),   /* Process is permitted to the              
*                                      BPX.SERVER facility class, set           
*                                      by BPX1TLS service        @P9A*/         
*    /* Flag byte 3 of OapbFlags                                     */         
*    5 OapbDaemonVerified Bit(1),   /* Process is permitted to the              
*                                      BPX.DAEMON facility class @DHA*/         
*    /***************************************************************/          
*    /* The following bits are used to identify the authority level */          
*    /* of the process. The bits are set by the BPX1TLS and BPX1ACK */          
*    /* services. The bits are referenced by BPX1TLS as part of the */          
*    /* determination to build authenticated or unauthenticated     */          
*    /* client ACEEs.                                               */          
*    /***************************************************************/          
*    5 OapbServerReadAccess Bit(1),  /* Process has READ permission             
*                                       to BPX.SERVER facility class            
*                                                                @PAA*/         
*    5 OapbServerUpdateAccess Bit(1), /* Process has UPDATE permission          
*                                        to BPX.SERVER facility class           
*                                        or BPX.SERVER undefined and            
*                                        process is SUPERUSER    @PAA*/         
*    5 OapbEnclaveOwner    Bit(1),  /* Process is an owner of a WLM             
*                                      Enclave                   @DKA*/         
*    5 OapbWLMEManaged     Bit(1),  /* Enclave managed by WLM    @DLA*/         
*    5 OapbNotDirty Bit(1),           /* Set by password service once           
*                                        the process has been found not         
*                                        to have loaded from unauth             
*                                        library.                @PBA*/         
*    5 OapbCalledPtsec    Bit(1),  /* 1=A thread in this process has            
*                                        called pthread_security @PHA*/         
*    5 OapbRespawn         Bit(1),  /* process will be respawned                
*                                      when it ends              @ERA*/         
*    /* Flag byte 4 of OapbFlags                                     */         
*    5 OapbPropSuidOnFork  Bit(1),  /* 1=Propagate setuid flag to               
*                                      forked processes          @EUA*/         
*    5 OapbRespFork        Bit(1),  /* Parent process will transfer             
*                                     respawn attribute to child @PVA*/         
*    5 OapbCalledTermExits Bit(1),  /* The BPX_PREPROC_TERM exits have          
*                                      been called for this process             
*                                                                @0AA*/         
*    5 OapbDaemonUpdateVerified Bit(1),/* Process has update access             
*                                         to BPX.DAEMON          @Q1A*/         
*    5 OapbSMFVerified     Bit(1),  /* Process is permitted to the              
*                                      BPX.SMF facility class, set              
*                                      by BPX1SMF service        @DPA*/         
*    5 OapbSuperVerified Bit(1),    /* Process is permitted to the              
*                                   BPX.SUPERUSER facility class @DTA*/         
*    5 OapbSigDlvState     Bit(1),  /* State that OESIR was called in           
*                                      on first Asynch I/O call  @PDA*/         
*    5 OapbWLMVerified     Bit(1),  /* Process is permitted to the              
*                                      BPX.WLMSERVER Class       @DWA*/         
*                                                                               
*  4   OapbForkVsmlistSize Fixed(32),                                           
*  4   OapbStwa      Ptr(31),   /* Address of Stwa for Steplib that             
*                                  is current for the process    @D7A*/         
*  4   *             Char(2),   /* Reserved                          */         
*  4   OapbSigDlvKey Bit(04),   /* PSW key of invoker causing first             
*                                  task to get dubbed in the process            
*                                                                    */         
*  4   OapbDubKey    Bit(04),   /* Callers key when first dubbed @07C*/         
*  4   *             Char(1),                                                   
*  4   OapbPtrbAdr   Ptr(31),   /* Pointer to Ptrace Request Block   */         
*  4   OapbSysCallCount  Fixed(32),  /* Number of syscalls issued by            
*                                  this process                      */         
*  4   OapbTimeUsed   Bit(64) Bdy(DWord), /* Rollup of task TIMEUSED            
*                                  as each task undubs               */         
*  4   OapbMmapCount  Fixed(31),/* Count of GYMM hung off PPRP   @D9A*/         
*  4   OapbKillReason Fixed(32),/* Reason for 422 killing            */         
*    5  *             Char(3),  /* Unused portion of reason          */         
*    5  OapbKillReasonComp Fixed(8), /* 01-7F=signal, 81=exec, 82=exit          
*                                                                    */         
*                               /* Login info moved to OASB          */         
*  4 OapbPenFrzThdsCnt Fixed(32), /* Number of threads that could not           
*                                    be frozen due to the target TCB's          
*                                    state.                      @0EA*/         
*  4 OapbAceeFreeQ  Ptr(31),    /* FIFO Q head pointer of unused ACEE's         
*                                  to be freed. BPXPTXAG adds, BPXPTSET         
*                                  and BPXPRMPC takes off        @P9A*/         
*  4 OapbPThreadStuff  ,        /* Thread stuff                      */         
*    5 OapbIPT       Ptr(31),   /* Initial Pthread_create Task       */         
*    5 OapbIPTKey    Fixed(08), /* TCBPKF of IPT                     */         
*    5 OapbThreadFlags Bit(08), /* Thread Flags                      */         
*      7 OapbIPTWaiting Bit(01), /* IPT is waiting for the last                 
*                                   thread to end                    */         
*      7 OapbIShotIPT   Bit(01), /* IPT was shot due to abnormally              
*                                   terminated pthread               */         
*      7 OapbAllFrozen  Bit(01), /* All threads have been frozen in             
*                                  response to quiesce freeze invoked           
*                                  by a kernwaiting thread       @D5A*/         
*      7 OapbNoQWait    Bit(01), /* Ptrace sets this to prevent                 
*                                  quiesce_freeze from waiting in the           
*                                  kernel (it's a long story)    @D5A*/         
*      7 OapbQuiesceInProg Bit(01), /* Thread quiesce is in progress            
*                                                                @D5A*/         
*      7 OapbIPTFPCinuse Bit(1), /* The floating point control register         
*                                   is to be used for all pthread               
*                                   creates                      @E2A*/         
*    5 OapbCreInProg Fixed(16) Abnormal, /*Create in progress        */         
*    5 OapbThdInitRtn@ Ptr(31),/* -> To Thread Init Routine          */         
*    5 OapbQuiesceType Fixed(32), /* Quiesce type in progress    @DBA*/         
*    5 OapbIPTFPCreg Char(4),   /* IPTs FPC reg at time of first                
*                                  pthread create                @E2A*/         
*    5 OapbQuiesceData31 Char(4), /* Low part of quiesce data which             
*                                    will contain KILL, EXEC or EXIT            
*                                    if pthread quiesce force was               
*                                    issued from signal delivery,               
*                                    exec or exit                @F3C*/         
*  4 OapbFocusTHID   Char(8) Bdy(Word), /* Ptrace focus thread ID               
*                                                                @D5A*/         
*    5 OapbFocusPprt   Ptr(31), /*  Address of Focus Pprt        @D5A*/         
*  4 OapbPtEventQ    Ptr(31),   /* Ptrace event pipeline queue header           
*                                                                @D5A*/         
*  4 OapbXferPid   Fixed(32),   /* PidXfer exec target PID       @EFC*/         
*  4 OapbJlb         Ptr(31),          /* Address of steplib dcb @D7A*/         
*  4 OapbSavedJlb    Ptr(31),          /* Address of saved steplib    /         
*                                         dcb                    @D7A*/         
*  4 OapbCofPtr      Ptr(31),   /* Address of CopyOnFork area    @P4A*/         
*  4 OapbShSp       Char(16),   /* Shared subpool list           @P5A*/         
*    5 OapbShSpMask    Bit(128),/* Shared subpool bit mask       @P5A*/         
*      7 *                 Bit(127), /* Bit on = subpool shared  @P5A*/         
*      7 OapbShSpInUse     Bit(1),   /* Bit off = defualt used                  
*                                       Bit on = SP mask used    @P5A*/         
*  4 OapbPtca   Isa(pointer_t), /* Address of ptrace Ptca        @DDA*/         
*  4 OapbPrli        Ptr(31),   /* -> Prli                       @DIA*/         
*  4 OapbFupt        Ptr(31),   /* -> Fupt Saved for EOM#EEOP    @PWA*/         
*  4 OapbPseudoPprt  Ptr(31),   /* -> Pseudo Pprt from PRTRM     @PWA*/         
*  4 OapbRespawnEdsa Ptr(31),   /* Addr of Edsa for respawn      @ERA*/         
*  4 OapbSrbPtr      Ptr(31),   /* Addr of Srb Info in CADS      @EXC*/         
*                                                             /* @F0D*/         
*  4 OapbQuiesceTimeoutType Fixed(32), /* Quiesce type when quiesce             
*                                  timeout occurs                @F3A*/         
*  4 *               Char(16),  /* Reserved                      @F3C*/         
*  4 Oapb_SRB_Rmtr,             /* This area of the Oapb contains the           
*                                  resource manager code (RMTR) for the         
*                                  SRB. This allows us to purge the             
*                                  SRBs by process while still having           
*                                  only one SRB                  @DOA*/         
*      7 Oapb_Srb_Rmtr_L Char(4),/* This word contains an instruction           
*                                  which loads the address of the real          
*                                  RMTR, BPXPRRMT.  (L  15,*+8(15))             
*                                                                @DOA*/         
*      7 Oapb_Srb_Rmtr_BR Char(2),/* This word contains an instruction          
*                                  which branches to the real RMTR,             
*                                  BPXPRRMT. (BR   15)           @DOA*/         
*      7 Oapb_Srb_Rmtr_Nop Char(2),/* This word contains instruction            
*                                  which aligns the next full word              
*                                  (NOP)                         @DOA*/         
*      7 Oapb_Srb_Rmtr_addr Ptr(31),/* This word contains the address           
*                                   of the real rmtr routine     @DOA*/         
*  4 OapbFdBa         Ptr,        /* File Descriptor Bit Array   @DQA*/         
*  4 OapbArqPtr       Ptr,        /* Pointer to Arq Area         @EXC*/         
*  4 OapbKStksInUse     Fixed(32), /* Count of SS stacks in use  @F5C*/         
*  4 *                   Fixed(32), /*                           @F8C*/         
*  4 OapbFlags3        Bit(32),   /* More flags                  @DXA*/         
*   5 OapbMpMuProcess   Bit(1),   /* 1=Process is mp/mu          @DXA*/         
*   5 OapbF3__SecAcee   Bit(1),   /* ACEE built via __security   @E1A*/         
*   5 OapbAuthGodFather Bit(1),   /* Godfather (debugger) is permitted          
*                                      to BPX.DEBUG              @01A*/         
*   5 OapbF3_MvsSysMDump Bit(1),  /* 1 - MVS ds for SYSMDUMP     @E4A*/         
*                                 /* 0 - HFS file for SYSMDUMP   @E4A*/         
*   5 OapbF3_SkipUIDCount Bit(1), /* Default UID - skip count                   
*                                    towards MaxProcUsers        @PNA*/         
*   5 OapbF3_SigDump      Bit(1), /* SIGDUMP issued to process   @PPA*/         
*   5 OapbNoIRB         Bit(1),   /* 1=Don't Interrupt with Signal              
*                                      IRB                       @PQA*/         
*   5 OapbJobNameVerified Bit(1), /* Process permission to change               
*                                    jobname has been determined @PRA*/         
*   5 OapbMapGNumASAct    Bit(1),  /* Number of active address spaces           
*                                    in MapG has been incremented for           
*                                    this process                @E8A*/         
*   5 OapbMapGNumAsPotential Bit(1), /* Number of address spaces in             
*                                    MapG who can potentially use the           
*                                    __map environment has been                 
*                                    incremented for this process               
*                                                                @E8A*/         
*   5 OapbMapInitDone     Bit(1), /* Map initialization done.  The MapA         
*                                    has been allocated and the actual          
*                                    and potential MapG counts have             
*                                    been adjusted               @E8A*/         
*   5 OapbF3_GotLocal     Bit(1), /* Local process attached      @PQA*/         
*   5 *                   Bit(1), /* Available                   @F4C*/         
*   5 OapbInZombieTerm    Bit(1), /* The process is in zombie                   
*                                    termination                 @04A*/         
*   5 OapbPXCreated       Bit(1), /* The current process image was              
*                                    result of a PidXfer         @EFA*/         
*   5 OapbPXSrcBPXDEBUG   Bit(1), /* The original identity (source as)          
*                                    had access to BPX.DEBUG     @EFA*/         
*   5 OapbPXChildBelow    Bit(1), /* This process (determined by QLP)           
*                                    has at least one subprocess that           
*                                    was created by PidXfer      @EFA*/         
*   5 OapbCheckPointed    Bit(1), /* On if process has been check               
*                                    pointed by shutdown (process is            
*                                    pointed to by a CPE block)  @EGA*/         
*                                                                               
*   5 OapbSigDanger       Bit(1), /* On if process has requested                
*                                    SIGDANGER for shutdown via the             
*                                    _BPX_SIGDANGER env var      @EGA*/         
*   5 OapbAMODE24         Bit(1), /* When process was first dubbed              
*                                    caller was in 24 bit mode   @EJA*/         
*   5 OapbAMODE31         Bit(1), /* When process was first dubbed              
*                                    caller was in 31 bit mode   @EJA*/         
*   5 OapbAMODE64         Bit(1), /* When process was first dubbed              
*                                    caller was in 64 bit mode   @EJA*/         
*   5 OapbMsgQErrDumped   Bit(1), /* SDump taken for msgsnd err  @ETA*/         
*   5 OapbPOEVerified     Bit(1), /* Authorized to BPX.POE       @EOA*/         
*   5 OapbSMtoNonSM       Bit(1), /* Process changed identity, was              
*                                    SYSMULTI, now non-SYSMULTI  @EOA*/         
*   5 OapbForkCSVExits    Bit(1), /* fork child invoked CSV exits,              
*                                    signals not allowed         @08A*/         
*   5 OapbForceCancel     Bit(1), /* 1=_BPXK_FORCE_CANCEL = YES  @EVA*/         
*   5 OapbPoeFromUserData Bit(1), /* 1=POE data supplied by user @F1A*/         
*   5 OapbAioErrAbend     Bit(1), /* Abend done for AIO Error    @0CA*/         
*   5 OapbRMODE24         Bit(1), /* RMODE of initial or last program           
*                                    image file was RMODE24      @F9A*/         
*   5 OapbRMODE31         Bit(1), /* RMODE of initial or last program           
*                                    image file was RMODE31      @F9A*/         
*   5 OapbRMODE64         Bit(1), /* RMODE of initial or last program           
*                                    image file was RMODE64      @F9A*/         
* 2 OAPB2,                                                                      
*  4 OapbDefaultUseridLen  Fixed(8), /* Length of default userid @PJA*/         
*  4 OapbDefaultUserid     Char(8),  /* Default userid           @PJA*/         
*  4 OapbDefaultGroupidLen Fixed(8), /* Length default groupid   @PKA*/         
*  4 OapbDefaultGroupid    Char(8),  /* Default groupid          @PKA*/         
*  4 *          Char(2),          /* reserved                    @PKA*/         
* 2 OAPB3 Bdy(Dword,5),                                                         
* 3 OAPB3_NOTASM Bdy(Dword,5),                                                  
*  4 Oapb_QNext      Ptr(31),     /* Ptr to free OAPB on free queue             
*                                  Used by BPXXQPOL for chaining                
*                                  elements onto the quick pool  @DYA*/         
*  4 OapbFqwa        Ptr(31),     /* Fast Quiesce Work Area      @EEA*/         
*                                                                               
*  4 OapbFQStatus    Fixed(32),   /* Fast Quiesce Status word    @EEA*/         
*   5 OapbFQStatus1    Fixed(8),  /* Fast freeze status byte 1   @ELA*/         
*   7 OapbFQFrzStop     Bit(1),   /* Status Stop Done for Fast Quiesce          
*                                    for at least one thread     @EEA*/         
*   7 OapbFQFrzDone    Bit(1),    /* Fast Quiesce Freeze Completed              
*                                                                @EEA*/         
*   7 OapbFQUnFrzRqd   Bit(1),    /* Unfreeze requested while Freeze in         
*                                    progress                    @EEA*/         
*   7 OapbFQQuiesceTerm Bit(1),   /* Quiesce_term or Quiesce_Force in           
*                                    progress. No new fast freeze               
*                                    requests                    @PSA*/         
*   5 OapbFQStatus2    Fixed(8),  /* Fast freeze status byte 2   @ELA*/         
*    7 OapbQFrzInProg  Bit(1),    /* pthread_quiesce_and_get_np freeze          
*                                    is in progress              @ELM*/         
*  4 OapbMDumpNamePtr  Ptr,          /* Ptr to SYSMDUMP name     @E4A*/         
*  4 OapbSigQdepth Fixed(31),        /* Queued signals by pid    @E5C*/         
*  4 OapbOsenvQhdr   Char(8) Bdy(Dword), /* queue header for osenv              
*                                    cells (mapped by BPXZOSE)   @E6A*/         
*    5 OapbOsenvFwd  Ptr(31),     /* Ptr to first osenv cell in the             
*                                    queue                       @E6A*/         
*    5 OapbOsenvSeqN Fixed(32),   /* sequence number             @E6A*/         
*  4 OapbOsenvCpid   Ptr(31),     /* CPOOL ID for osenv          @E6A*/         
*  4 Oapb_WLM_Data,               /* Data saved for __wlm syscall               
*                                                                @E7A*/         
*    5 Oapb_WLM_Flags Fixed(32),  /* __wlm status flags          @E7A*/         
*      7 Oapb_WLM_ConnectExpImp Bit(1),  /* __wlm Connect_ExportImport          
*                                           done                 @E7A*/         
*      7 Oapb_WLM_Continue Bit(1),  /* __wlm continue done       @E7A*/         
*      7 Oapb_WLM_Export   Bit(1),  /* __wlm export done         @E7A*/         
*      7 Oapb_WLM_Unexport Bit(1),  /* __wlm unexport done       @E7A*/         
*    5 Oapb_WLM_UserEnclave Char(8),/* User Enclave Token        @E7A*/         
*    5 Oapb_WLM_ExportToken Char(32),/* Export Token             @E7A*/         
*  4 OapbParentTask Ptr,          /* TCB addr of task that       @PQA*/         
*                                 /* attached this local child   @PQA*/         
*  4 OapbZombieCount     Fixed(31), /* Number of zombies for this               
*                                      process                   @ECA*/         
*  4  OapbPtraceThreadInfo BDY(DWORD), /* PT_THREAD_INFO_EXTENDED               
*                                      ptrace information about all             
*                                      thread in this process    @03X*/         
*   5 OapbPtraceThreadInfoBuf Ptr(31),                                          
*                                   /* Extended thread status buffer            
*                                      for all threads in this process          
*                                                                    */         
*   5 OapbPtraceThreadInfoSz Fixed(32),                                         
*                                   /* Size of the thread status                
*                                      Buffer                    @03X*/         
*  4 OapbRestartInfo isa(RestartInfo) Bdy(Dword),  /* USS Restart               
*                                    processing information      @EGA*/         
*  4 OapbSysTime     Char(8),   /* Syscall Time accumulated      @EGA*/         
*  4 OapbPECBPtr     Ptr(31),   /* Ptr to the PECB               @EMA*/         
*  4 OapbOasb        Ptr,       /* Address of the Oasb           @EGC*/         
*  4 OapbAuthTkn     Char(4),   /* Authorized Hi memory token for               
*                                  fork, initialized by LE       @EKA*/         
*  4 OapbProcessInitPpsqChunk  Ptr(31), /* Address of the process               
*                                          initial chunk of PPSQs for           
*                                          dumping by the dump exit             
*                                                                @ESA*/         
*  4 OapbInitTaskInitPpsqChunk Ptr(31), /* Address of the initial tasks         
*                                          initial chunk of PPSQs for           
*                                          dumping by the dump exit             
*                                                                @ESA*/         
*  4 OapbTib         Ptr(31),       /* Timer Information Block   @EWA*/         
*  4 OapbFIFOABENDCnt Fixed(31),    /*                           @09A*/         
*  4 OapbForkMessageTime Bit(40),   /*future time to log errmsgs @F8C*/         
*                                   /*(extended time format)         */         
*  4 *               Char(15),      /* Reserved                  @09C*/         
*  /*                                                                */         
*  /* NOTE: The size of this control block is retrieved dynamically  */         
*  /*       during runtime by the modules that need it.              */         
*  /*       When adding additional fields to this control block,     */         
*  /*                                                                */         
*  /* ====> THE ONLY MODULE THAT *MUST* BE RECOMPILED IS BPXPRIT @ENA*/         
*  /*                                                                */         
*  4 Oapb_End Bdy(DWord) Char(0); /* make CB end on doubleword   @P4A*/         
*                                                                               
*%IF OAPB_CBGEN = '' %THEN                                                      
*%DO;                                                                           
*/********************************************************************/         
*/*                                                                  */         
*/* NOTE: The "OapbCopyOnFork" is contiguous to the end of the Oapb. */         
*/*       IPCS modules respecify its base on the address of Oapb_End */         
*/*       because the field OapbCofPtr does NOT contain an address   */         
*/*       that is usable by IPCS without another ?ASAXACC.           */         
*/*                                                                  */         
*/********************************************************************/         
*DCL                                                                            
*1  OapbCopyOnFork Based(OapbCofPtr), /* These fields will be copied to         
*                                  the child Oapb on fork()      @P4M*/         
*  4 OapbGodfatherPid Fixed(32),    /*  Process ID of godfather                 
*                                  (debugger) process                */         
*  4 OapbPtFlags        Bit(8), /* Ptrace flags                      */         
*    5 OapbPtTraceMe    Bit(1), /* Ptrace active for this process    */         
*    5 OapbPtMulti      Bit(1), /* Ptrace multi process mode active  */         
*    5 OapbSaIndirect   Bit(1), /* 1=SA_Handlers are indirect @s @DCA*/         
*    5 OapbPtraceAttach Bit(1), /* 1=_BPX_PTRACE_ATTACH = YES    @03A*/         
*    5 *                Bit(4), /* Reserved                      @03C*/         
*  4 OapbFlags2         Bit(8), /* General flags that are copied on             
*                                  fork                          @DAA*/         
*    5 OapbMemObj       Bit(1), /* Memory objects (i.e. shmem, mmap)            
*                                  have been created             @DAA*/         
*    5 OapbEnqWaitIrpt  Bit(1), /* 1=quiesce_freeze, quiesce_term,              
*                                  quiesce_force and pthread_cancel             
*                                  events can interrupt threads in ENQ          
*                                  waits                         @P8A*/         
*    5 OapbStickyPgm    Bit(1), /* Exec'd or Spawned pgm is a sticky            
*                                  program                       @01A*/         
*    5 OapbIPFPAccept   Bit(1), /* FastPath for accept() BPX1ENV @PBA*/         
*    5 OapbIPFPSocket   Bit(1), /* FastPath for socket() BPX1ENV @PBA*/         
*    5 OapbEscon        Bit(1), /* Bypass syscall for Escon R/W  @DQC*/         
*    5 OapbJobLogFIdValid Bit(1), /* JobLog file descriptor ok   @E9C*/         
*    5 OapbOESIR        Bit(1), /* OE SIR established            @DRA*/         
*  4 OapbFlags4         Bit(8), /* More general flags that are copied           
*                                  on fork                       @PSC*/         
*    5 OapbMsgQLevel    Bit(2), /* Override MsgQ serialization level            
*                                  via _BPXK_MQ_LEVEL environment               
*                                  variable                      @PSA*/         
*    5 OapbJobLogUnique Bit(1), /* JobLog must be correct file   @E9A*/         
*    5 OapbPoeAttrSet   Bit(1), /* The OapbPoeAttr has been set by              
*                                  __poe                         @ENA*/         
*    5 OapbSirM64       Bit(1), /* MSS caller Amode 64           @EHA*/         
*    5 OapbQFrzM64      Bit(1), /* Pth_quiesce caller Amode 64   @EHA*/         
*    5 OapbFrExM64      Bit(1), /* FreezeExit caller is Amode 64 @EHA*/         
*    5 OapbSclMsgIssued Bit(1), /* This SYSMULTI daemon/server has had          
*                                  the exec BPXP022I message issued             
*                                  on it's behalf                @ENA*/         
*  4 OapbQFrExKey     Char(1),  /* Storage key of TCB that                      
*                                       registered freeze_exit @ @DFA*/         
*  4 OapbRlimitCOREHard Isa(rlim_t), /* RLIMIT_CORE hard limit   @D8A*/         
*  4 OapbRlimitCORESoft Isa(rlim_t), /* RLIMIT_CORE soft limit   @D8A*/         
*  4 OapbQFreezeExit    Ptr(31),     /* User exit address        @P8A*/         
*  4 OapbExitThdsCnt    Fixed(32), /* Freeze thread count        @P8A*/         
*    5 * Fixed(16),                                           /* @DOA*/         
*    5 OapbETC Fixed(16),       /* For use in hangout proc       @DOA*/         
*  4 OapbSavedPag    Fixed(32), /* Saved pag for backs               */         
*  4 OapbPag         Fixed(32), /* Process Auth Group                */         
*  4 OapbWLMEToken   Bit(64),   /* WLM Enclave token for process @DKA*/         
*  4 OapbFastPathPFS Char(8),   /* Fast Path PFS Name            @DUA*/         
*  4 OapbXferEcb     Fixed(32), /* reserved                      @EFA*/         
*    5 *             Char(2),   /* data management completion    @EFA*/         
*    5 OapbXferEcbCC Bit(16),   /* completion code               @EFA*/         
*  4 *               Char(4),   /* Reserved                      @EFC*/         
*  4 OapbUIDs,                  /* User IDs                      @DXA*/         
*   5 OapbRUid       Fixed(32), /*   Real Uid                    @DXA*/         
*   5 OapbEUid       Fixed(32), /*   Effective Uid               @DXA*/         
*   5 OapbSUid       Fixed(32), /*   Saved Uid                   @DXA*/         
*  4 OapbGIDs,                  /* Group IDs                     @DXA*/         
*   5 OapbRGid       Fixed(32), /*   Real Gid                    @DXA*/         
*   5 OapbEGid       Fixed(32), /*   Effective Gid               @DXA*/         
*   5 OapbSGid       Fixed(32), /*   Saved Gid                   @DXA*/         
*  4 OapbUIDTIndex   Fixed(32), /* Index into UID Table to locate               
*                                  process checking data for the                
*                                  process's real UID            @DXA*/         
*  4 OapbLoginNInfo,            /* Group Login name and length   @DXA*/         
*   5 OapbLoginNLen Fixed(31),  /* User Login Name Length        @DXA*/         
*   5 OapbLoginName Char(9),    /* User Login Name. Its length should           
*                                  be 1 byte longer than                        
*                                  Oasb#MaxLogNameLen. The 1 byte is            
*                                  for '00' (null terminator)    @DXA*/         
*  4 OapbCelExitPswState Bit(8), /* PSW State and Key of CEL quick              
*                                  freeze exit                   @EFM*/         
*   5 OapbCelExitPswKey Bit(4), /* PSW Key of CEL Exit           @EFM*/         
*   5 *                 Bit(3), /*                               @EFM*/         
*   5 OapbCelExitSupvr  Bit(1), /* Sup State Flag of Exit        @EFM*/         
*  4 OapbFlags5         Bit(8), /* More general flags that are copied           
*                                                                @EIA*/         
*    5 OapbRlimitCHBin  Bit(1), /* CoreHard is a binary value with a            
*                                  one character multiplier      @EIA*/         
*    5 OapbByPassEnclaveProp Bit(1), /* Set by environment variable             
*                                  _BPXK_WLM_PROPAGATE, ON indicates            
*                                  to bypass propagating non-USS                
*                                  enclaves on fork, exec,                      
*                                  pthread_create, FastCGI and osenv            
*                                  requests. When off, non-USS enclaves         
*                                  will be propagated.           @EQA*/         
*    5 OapbDaemonAttach Bit(1), /* Tell setuid to nest acee      @EPA*/         
*    5 OapbProcessAlarm Bit(1), /* 1=_BPXK_PROCESS_ALARM = YES   @EWA*/         
*    5 OapbSyscallTrace Bit(1), /* On if SIGTRACE Signal sent turning           
*                                  on User SYSCALL Trace         @EZA*/         
*    5 OapbMinimalPwFold Bit(1), /* 1=_BPXK_MIN_PW_FOLD=YES      @F2A*/         
*    5 OapbDisableShlib Bit(1),  /* 1=_BPXK_DISABLE_SHLIB=YES    @0BA*/         
*    5 OapbPtxagKeep    Bit(1), /* KEEP PTXAG tasks in a WAIT    @0DA*/         
*  4 OapbFlags6         Bit(8), /* More general flags that are copied           
*                                                                @EIA*/         
*    5 OapbRlimitCSBin  Bit(1), /* CoreSoft is a binary value with a            
*                                  one character multiplier      @EIA*/         
*    5 OapbF6PWT            Bit(1),  /* ON-Process can time out  @F6A*/         
*                                    /*    when in a TTy WAIT        */         
*    5 OapbF6PwtSMF         Bit(1),  /* ON-PWT(SMF) specified    @F6A*/         
*    5 OapbF6PWTIgnoreBpxk  Bit(1),  /* ON-ignore _BPXK_TIMEOUT  @F6A*/         
*                                    /* OFF-PWT(ENV!SMFENV) specified*/         
*    5 OapbGPSThread    Bit(1), /* Getpsent uses thread identity @F7A*/         
*  4 OapbAliasNInfo,            /* Alias name and length         @DXA*/         
*   5 OapbAliasNLen Fixed(31),  /* User Alias Name Length        @DXA*/         
*   5 OapbAliasName Char(9),    /* User Login Name. Null terminated             
*                                                                @DXA*/         
*  4 * Char(1),                 /* Available                     @FCC*/         
*  4 OapbXPlatform Fixed(16),   /* Indicate the version of Linux                
*                                  emulation in effect. Currently               
*                                  0 (no emulation) and 1 are the               
*                                  only valid values             @FCA*/         
*  4 OapbMapGPtr     ptr,       /* __map MapG control block      @E8C*/         
*  4 Oapb_JobLogFId Fixed(31),  /* JobLog file descriptor        @E9A*/         
*  4 Oapb_URdev    Fixed(31),   /* JobLog uniqness info          @E9A*/         
*  4 Oapb_UFid     Char(8),     /* JobLog uniqness info          @E9A*/         
*  4 Oapb_ThreadTasksMax Fixed(31),  /* SC_THREAD_TASK_MAX_NP    @EAA*/         
*  4 Oapb_ThreadsMax Fixed(31), /* SC_THREADS_MAX_NP value       @EAA*/         
*  4 Oapb_ChildMax  Fixed(31),  /* SC_CHILD_MAX value            @EAA*/         
*  4 Oapb_OpenMax   Fixed(31),  /* SC_OPEN_MAX value             @EAA*/         
*  4 *              Fixed(32),  /*                               @06C*/         
*  4 OapbProcLimMask   bit(32), /* Masks for process limit. Bit ON =            
*                                  the process limit is in the PPRP.            
*                                  It has been modified via the OUSP,           
*                                  via the SETOMVS PID=xx command, or           
*                                  via set rlimit().                            
*                                  OFF = limit is in the OPTN.                  
*                                  NOTE: The order of these flags must          
*                                  be in limit number order as defined          
*                                  in BPXZLIMT.                  @EDA*/         
*   5 OapbMaxFileProcF    bit(1), /* MaxFileProc                 @EDA*/         
*   5 OapbMaxProcUserF    bit(1), /* MaxProcUser                 @EDA*/         
*   5 OapbMaxQueuedSigsF  bit(1), /* MaxQueuedSigs               @EDA*/         
*   5 OapbMaxThreadsF     bit(1), /* MaxThreads                  @EDA*/         
*   5 OapbMaxThreadTasksF bit(1), /* MaxThreadTasks              @EDA*/         
*   5 OapbIpcShmNSegsF    bit(1), /* IpcShmNSegs                 @EDA*/         
*   5 OapbMaxCoreSizeF    bit(1), /* MaxCoreSize                 @EDA*/         
*   5 OapbMaxFileSizeF    bit(1), /* MaxFileSize                 @EDA*/         
*  4 OapbCelExitAddrC Char(08) BDY(DWORD),                                      
*                               /* Address of CEL quick freeze exit             
*                                                                @EFM*/         
*   5 OapbCelExitAddrG Ptr(64),    /* 64 bit addressability      @EFA*/         
*     7 OapbCelExitHi Fixed(32),   /* Hi order word              @EFA*/         
*     7 OapbCelExitAddr   Ptr(31), /* 31 bit address of cel exit @EFA*/         
*/* SC_MMAP_MEM_MAX - system configuration max mmap value (in bytes) */         
*/* Reserve high half in case mmap ever goes to 64 bit value.        */         
*/* For now, HBB7709, the value remains below the bar            @PUA*/         
*  4 Oapb_MmapMemMax64    Fixed(64),                          /* @PUA*/         
*   5 *                   Fixed(32),                          /* @PUA*/         
*   5 Oapb_MmapMemMax     Fixed(31),                          /* @PUC*/         
*  4 OapbSeclabel    Char(8),    /* Process id seclabel (MLS)    @EOA*/         
*  4 OapbPoeAttr,                /* __poe() port of entry info   @EOA*/         
*   5 OapbPoePeerIpAddr Char(16) Bdy(Word), /* Peer IP Address   @EOA*/         
*     7 OapbPoePeerIPv6Prefix Char(12),                        /*@EOA*/         
*     7 OapbPoePeerIPv4Addr Fixed(32),                         /*@EOA*/         
*   5 OapbPoeTermid  Char(8),           /* TERMINAL Profile Name @EOA*/         
*   5 OapbPoeLabel   Char(8),           /* Security Label of poe @EOA*/         
*   5 OapbPoeProfile Char(64),          /* SERVAUTH Profile Name @EOA*/         
*  4 *               Char(16),      /* Available                 @PZC*/         
*  /*                                                                */         
*  /* NOTE: The size of this control block is retrieved dynamically  */         
*  /*       during runtime by the modules that need it.              */         
*  /*       When adding additional fields to this control block,     */         
*  /*                                                                */         
*  /* ====> THE ONLY MODULE THAT *MUST* BE RECOMPILED IS BPXPRIT @ENA*/         
*  4 *      Bdy(DWord) Char(0); /* make CB end on doubleword         */         
*                                                                               
*DCL                                                                            
* 1 OapbArq Based(OapbArqPtr) Via(OcvtCadsAlet) Bdy(Dword),   /* @EXA*/         
*  3 OapbArqFreeChain Char(8) Bdy(Dword);    /* Arq Free Chain   @PCA*/         
*DCL                                                                            
* 1 OapbSrb Based(OapbSrbPtr) Via(OcvtCadsAlet),              /* @EXA*/         
*  3 OapbSrbInfo,               /* Information for kernel SRBs   @DOA*/         
*   5 Oapb_SRB_TraceData,                                                       
*      7 Oapb_SRB_Cntl Fixed(32) Abnormal, /* SRB control word   @02C*/         
*         9 *    Bit(16),       /*                               @02C*/         
*            11 Oapb_SRB_ShutDown Bit(1), /* 1 ==> no more SRBs are to          
*                                  be scheduled and existing                    
*                                  SRBs are to stop processing   @02C*/         
*         9 Oapb_SRB_#SRBs Fixed(16), /* The number of SRBs currently           
*                                  scheduled to process SRB work                
*                                  elements                      @02C*/         
*      7 Oapb_SRB_EQIndex Fixed(31), /* Index of work element queue             
*                                  anchor to be used for adding work            
*                                  elements                      @02C*/         
*      7 Oapb_SRB_WEQ(0:1) Like(OapbQPool), /* Work element queue               
*                                  anchor array. Quick pool anchors in          
*                                  BPXXQPOL format               @EXC*/         
*   5 Oapb_SRB_PauseTkn Char(16),                             /* @EXA*/         
*   5 Oapb_SRB_PauseQAnc Like(OapbQPool);                     /* @EXA*/         
*                                                                               
*DCL                                                                            
*  Oapb#ID     Char(4)   Constant('OAPB'), /* Control Block Acronym  */         
*  Oapb#CpName Char(8)   Constant('OAPBPOOL'),  /* CPOOL ID      @PIA*/         
*  Oapb#Len    Fixed(16) Constant(Length(Oapb)+Length(OapbCopyOnFork)),         
*                                       /* Length of OAPB        @P4C*/         
*  Oapb#OnlyLen Fixed(16) Constant(Length(Oapb)),                               
*                                       /* Length of OAPB only   @ENC*/         
*  Oapb#SP     Fixed(08) Constant(241); /* Subpool for the OAPB  @DBD*/         
*/* Settings for OapbMsgQLevel, override msgq serialization          */         
*DCL                                                                            
*  Oapb#MsgQNoOverride Bit(2) Constant('00'b), /*                               
*                                  _BPXK_MQ_LEVEL=NONE, do not                  
*                                  override msgq serialization, use             
*                                  serialization requested on msgget            
*                                                                @PSA*/         
*  Oapb#MsgQLatch      Bit(2) Constant('01'b), /*                               
*                                  _BPXK_MQ_LEVEL=LATCH, override               
*                                  msgq serialization to use latch              
*                                                                @PSA*/         
*  Oapb#MsgQCond       Bit(2) Constant('10'b), /*                               
*                                  _BPXK_MQ_LEVEL=COND, override                
*                                  msgq serialization to conditionlly           
*                                  use PLO, if PLO available, msgq              
*                                  will try to pick best method  @PSA*/         
*  Oapb#MsgQOpt        Bit(2) Constant('11'b), /*                               
*                                  _BPXK_MQ_LEVEL=OPT, override                 
*                                  msgq serialization to use PLO,               
*                                  if PLO is available           @PSA*/         
*  OapbF6PwtRelated#   Bit(8) Constant('01110000'b);          /* @PZA*/         
*                                                                               
* ?BPXXQPOL MF(L,OapbQpool);                                  /* @DOA*/         
* ?ASAADMAC NAME(BPXZTYPE);                                   /* @EGA*/         
* ?ASAADMAC NAME(BPXZOCVT);                                   /* @PXA*/         
* ?ASAADMAC NAME(IHAECVT);                                    /* @PXA*/         
* ?ASAADMAC NAME(CVT);                                        /* @PXA*/         
*%END;                                                                          
*@LOGIC;                                                                        
*#PRAGMA TOOL=CBGEN.                                                            
*#USEORG.                                                                       
*#LINE.%OAPB_CBGEN='YES';                                                       
*#LINE.%OAPBBASE='Based';                                                       
*#LINE.%INCLUDE SYSLIB(BPXZOAPB);                                               
*#NOMAP.                                                                        
*#LINE.?BPXXQPOL MF(L,OapbQPool);                                               
*#LINE.%INCLUDE SYSLIB(BPXZTYPE);                                               
*#DELETE.OAPB1_NOTASM                                                           
*#DELETE.OAPB3_NOTASM                                                           
*#DELETE.RESTARTINFO                                                            
*#EPRAGMA.                                                                      
*@ENDLOGIC;                                                                     
*@LOGIC;                                                                        
*#PRAGMA TOOL=PADI.                                                             
*#PADIDELETE.OAPB_LEN                                                           
*#EPRAGMA.                                                                      
*@ENDLOGIC;                                                                     
*/* End of PL/X Source                                               */         
* %IF BPXZOAPB_LIST = 'NO' !                                                    
*    ZCBPRINT = 'NO' %THEN                                                      
* %DO;                                                                          
*   @LIST POP NOECHO;                                                           
* %END;                                                                         
* %END;                                                                         
