*        %GOTO MSGHPRO  ;         /* Bilingual header                   00010000
         MACRO                                                          00020000
         BPXYMSGH  &DSECT=YES,&LIST=YES                                 00021002
         GBLB  &MSGH411                                                 00040000
         GBLC  &SYSAM64       Variable set by SYSSTATE AMODE64=YES      00050000
         AIF   (&MSGH411 EQ 1).E411                                     00060000
&MSGH411 SETB  1                                                        00070000
         AIF   ('&LIST' EQ 'YES').A411                                  00080000
         PUSH  PRINT  BPXYMSGH: MsgH system call structure              00090000
         PRINT OFF                                                      00100000
         AGO   .A411                                                    00110000
*                                  */                                   00120000
*%MSGHPRO : ;                                                           00130000
*/****START OF SPECIFICATIONS****************************************** 00140000
*                                                                       00150000
*    $MAC (BPXYMSGH) COMP(SCPX1) PROD(BPX):                             00160000
*                                                                       00170000
*01* MACRO NAME: BPXYMSGH                                               00180000
*                                                                       00190000
*01* DSECT NAME: MsgH                                                   00200000
*                                                                       00210000
*01* DESCRIPTIVE NAME: MsgHeader                                        00220000
*                                                                       00230000
*02*   ACRONYM: MsgH                                                    00240000
**/                                                                     00250000
*/*01* PROPRIETARY STATEMENT=                                        */ 00260000
*/***PROPRIETARY_STATEMENT********************************************/ 00270000
*/*                                                                  */ 00280000
*/*                                                                  */ 00290000
*/* LICENSED MATERIALS - PROPERTY OF IBM                             */ 00300000
*/* 5694-A01 COPYRIGHT IBM CORP. 1993, 2015                          */ 00310005
*/*                                                                  */ 00320000
*/* STATUS= HBB77A0                                                  */ 00330004
*/*                                                                  */ 00340000
*/***END_OF_PROPRIETARY_STATEMENT*************************************/ 00350000
*/*                                                                     00360000
*                                                                       00370000
*01* EXTERNAL CLASSIFICATION:  GUPI                                     00380000
*01* END OF EXTERNAL CLASSIFICATION:                                    00390000
*                                                                       00400000
*01* FUNCTION:                                                          00410000
*                                                                       00420000
*      The MsgH maps the MsgHeader structure that is passed on the      00430000
*      sockets SendMsg / RecvMsg system call.                           00440000
*                                                                       00450000
*                                                                       00460000
*01* METHOD OF ACCESS:                                                  00470000
*                                                                       00480000
*02*   PL/X:                                                            00490000
*                                                                       00500000
*        %INCLUDE SYSLIB(BPXYMsgH)                                      00510000
*        By default, the MsgH is based on MsgHPtr. If                   00520000
*        other basing is desired, use %MsgHBASE='BASED(XXXXXX)'.        00530000
*        If %MsgHBASE='BASED(MsgHPtr)' is coded, a Declare for          00540000
*        MsgHPtr is also generated.                                     00550000
*                                                                       00560000
*                                                                       00570000
*      LP64 - To use the 8-byte pointers as other than Char(8):    @D1A 00580000
*       Issue 'ASAXMAC SetEsameInfo' to define appropriate 8-byte types 00590000
*        Or define the following to suit your needs:                    00600000
*            %AsaxmacP64 = 'Ptr(64)'  <or>  'Like()', 'IsA()', etc.     00610000
*                                                                       00620000
*02*   ASM:                                                             00630000
*        SYSSTATE  AMODE64=YES  if you are in AMODE(64)                 00640000
*                                                                       00650000
*        With DSECT=NO, storage is allocated in line                    00660000
*        and addressability is provided thru that DSECT or CSECT.       00670000
*        With DSECT=YES, a DSECT is produced and "USING MsgH,reg"       00680000
*        is required for addressability.  Here "reg" contains the       00690000
*        address of MsgH#LENGTH bytes of storage.                       00700000
*        The default is DSECT=YES.                                      00710000
*                                                                       00729000
*01* SIZE: MsgH#LENGTH                                                  00730000
*                                                                       00740000
*01* POINTED TO BY: MsgHPtr                                             00750000
*                                                                       00760000
*01* CREATED BY: Storage obtained by caller of system call              00770000
*                                                                       00780000
*01* DELETED BY: Caller of system call                                  00790000
*                                                                       00800000
*01* STORAGE ATTRIBUTES:                                                00810000
*02*   SUBPOOL/DATASPACE:  N/A                                          00820000
*02*   KEY:                N/A                                          00830000
*02*   RESIDENCY:          N/A                                          00840000
*                                                                       00850000
*01* FREQUENCY: 1 per call to SendMsg / RecvMsg                         00860000
*                                                                       00870000
*01* SERIALIZATION: N/A                                                 00880000
*                                                                       00890000
*01* DEPENDENCIES: None                                                 00900000
*                                                                       00910000
*01* NOTES:                                                             00920000
*                                                                       00930000
*      AMODE(64) Usage - - - - - - - - - - - - - - - - - - -     @T0A   00940000
*       1) In ASM: SYSSTATE AMODE64=YES must be used before             00950000
*                  including this macro and all field names             00960000
*                  remain the same as for 31-bit mode.                  00970000
*                                                                       00980000
*       2) In PL/X --> ALL FIELD NAMES ARE DIFFERENT <--                00990000
*               You MUST use the MSGH64 structure and those names       01000000
*               and field locations when calling BPX4 routines.         01010000
*                                                                       01020000
*               Issue 'ASAXMAC SetEsameInfo' to define the              01030000
*                  appropriate 8-byte data type for %AsaxmacP64,        01040000
*                  or define the macro variable yourself.               01050000
*                  The Default is Char(8) for Amode(31) usage           01060000
*                  where the space is not used.                         01070000
*                                                                       01080000
*                                                                       01090000
*01* COMPONENT:  OpenMVS (SCPX1)                                        01100000
*                                                                       01110000
*01* DISTRIBUTION LIBRARY:  AMACLIB                                     01120000
*                                                                       01130000
*01* EYE-CATCHER: None                                                  01140000
*02*   OFFSET:                                                          01150000
*02*   LENGTH:                                                          01160000
*                                                                       01170000
*01* CHANGE-ACTIVITY:                                                   01180000
*                                                                       01190000
* $D0=DOAA002   HOM1111, 930601, PDNU: Dcr A002.01 LFS Socket Support   01200000
* $D1=DRGA134   HOM1140, 950706, PDSK: Output msg_flags (A134.02)       01210000
* $D2=DRGA134   HOM1140, 951006, PDJZ: Sockets Access Rights (A134.01)  01220000
* $D3=DXDA400   HBB7703  990915  PDNU: AF_UNIX Security Enhancements    01230000
* $D4=DxxA505   HBB7704  000420  PDJT: LP64 & 64-Bit addressing         01240000
* $D5=DYNA519   HBB7708  000927  PDSK: 64-Bit                  A519.01  01250000
* $D5=PX01158   HBB7705  010103  PDJT: MsgH64BASE Rolldown to R12       01260000
* $01=OW48918   HBB7707  010613  PDJT: Fix DSECT=NO for all DSECTs      01270000
* $P1=PYN0220   HBB7708  020301  PDFO: Bilingual fixup                  01280000
* $T0=TJK0971   HBB7709  031030  PDJT: 64-Bit cleanup                   01290000
* $D6=ME11672   HBB7750  070709  PDJT: SCM_RECVUSERNAME                 01300000
* $P2=ME10587   HBB7750, 071026, PDJT: Remove "RESTRICTED MATERIALS"    01310000
* $D7=DCRC595   HBB77A0  140328  PDSK: AMODE64 64-bit autodata          01320003
*                                                                       01322005
****END OF SPECIFICATIONS*********************************************/ 01330000
*        %GOTO MsgHPLS  ;         /* Bilingual header                   01340000
.A411    ANOP  ,                                                        01350000
** BPXYMSGH: MSGH system call structure                                 01360000
**  Used By: SendMsg / RecvMsg                                          01370000
         AIF   ('&DSECT' EQ 'NO').B411                                  01380000
MSGH                 DSECT ,                                            01390000
         AGO   .C411                                                    01400000
.B411    ANOP  ,                                                        01410000
MSGH                 DS    0D                                           01420000
.C411    ANOP  ,                                                        01430000
MSGHBEGIN            DS    0D                                           01440000
         AIF   ('&SYSAM64' EQ 'YES').AM64A                              01450000
* ------------- 32-Bit Version                                          01460000
MSGHNAMEPTR          DS    A(0)   Pointer to a structure that contains  01470000
*                                  the recipient's address.             01480000
MSGHNAMELEN          DS    F'0'   Buffer length.                        01490000
MSGHIOVPTR           DS    A(0)   Pointer to an array of IOVEC buffers. 01500000
MSGHIOVNUM           DS    F'0'   Number of elements in IOVEC array.    01510000
MSGHCONTROLPTR       DS    0AL4   Pointer to ancillary data buffer @D1A 01520000
MSGHACCRIGHTSPTR     DS    A(0)   Pointer to access rights buffer.      01530000
MSGHCONTROLLEN       DS    0FL4   Length of ancillary data buffer  @D1A 01540000
MSGHACCRIGHTSLEN     DS    F'0'   Access rights buffer length.          01550000
MSGHFLAGS            DS    F'0'   Output flags on received message @D1A 01560000
         AGO   .AM64B                                                   01570000
.AM64A   ANOP  ,                                                        01580000
* ------------- 64-Bit Version                                          01590000
MSGHNAMEPTR          DS    D'0'   Pointer to sockaddr                   01600000
MSGHIOVPTR           DS    D'0'   Pointer to an array of IOVEC buffers. 01610000
MSGHCONTROLPTR       DS    D'0'   Pointer to ancillary data buffer      01620000
MSGHFLAGS            DS    F'0'   Output flags on received message      01630000
MSGHNAMELEN          DS    F'0'   Buffer length.                        01640000
MSGHIOVNUM           DS    F'0'   Number of elements in IOVEC array.    01650000
MSGHCONTROLLEN       DS    F'0'   Length of ancillary data buffer       01660000
.AM64B   ANOP  ,                                                        01670000
*                                                                       01680000
*   Constants                                                           01690000
*                                                                       01700000
MSGH#LENGTH          EQU   *-MSGH   Length of MsgH                      01710000
*                                                                       01720000
CMSGPTR              DS    A(0)   CMsg pointer                     @D1A 01730000
*                                                                       01740000
         AIF   ('&DSECT' EQ 'NO').B412                             @01A 01750000
CMSGHDR              DSECT ,                                       @D1A 01760000
         AGO   .C412                                               @01A 01770000
.B412    ANOP  ,                                                   @01A 01780000
CMSGHDR              DS    0D                                      @01A 01790000
.C412    ANOP  ,                                                   @01A 01800000
CMSGLEN              DS    F'0'   Length, including header         @D1A 01810000
CMSGLEVEL            DS    F'0'   Level                            @D1A 01820000
CMSGTYPE             DS    F'0'   Type                             @D1A 01830000
CMSGDATA             DS    0C     Data                             @D1A 01840000
*                                                                       01850000
*   Constants                                                           01860000
*                                                                       01870000
SCM_RIGHTS           EQU   1        Access Rights                  @D1A 01880000
SCM_SECINFO          EQU   16386    Security Information  =x4002   @D3A 01890000
SCM_RECVUSERNAME     EQU   X'00004003'  Username                   @D6A 01900000
*                                                                       01910000
*  CmsgData for SCM_RECVUSERNAME                                   @D6A 01920000
         AIF   ('&DSECT' EQ 'NO').B413                             @D6A 01930000
SCM_RUSER            DSECT ,                                       @D6A 01940000
         AGO   .C413                                               @D6A 01950000
.B413    ANOP  ,                                                   @D6A 01960000
SCM_RUSER            DS    0D                                      @D6A 01970000
.C413    ANOP  ,                                                   @D6A 01980000
SCM_RUSERFLAGS       DS    CL1                                     @D6A 01990000
SCM_RUSERUSRISET     EQU   X'80'        ACEEUSRI is set            @D6A 02000000
SCM_RUSERACEEUSRI    DS    CL8          Sender's ACEEUSRI          @D6A 02010000
                     DS    CL3          Padding                    @D6A 02020000
*                                                                       02030000
*                                                                       02040000
** BPXYMSGH End                                                         02050000
         SPACE 3                                                        02060000
         AIF   ('&LIST' EQ 'YES').E411                                  02070000
         POP   PRINT                                                    02080000
.E411    ANOP  ,                                                        02090000
         MEND  ,                  Terminating PL/X comment           */ 02100000
*                                                                       02110000
*%MsgHPLS : ;                                                           02120000
*%IF MsgHBASE='' %THEN                                                  02130000
*  %DO;                                                                 02140000
*    %MsgHBASE='BASED(MsgHPtr)';                                        02150000
*  %END;                                                                02160000
* %IF TRANSLATE(MSGHBASE)='BASED(MSGHPTR)' %THEN                        02170000
*   %DO;                                                                02180000
*     DCL MsgHPtr Ptr(31);         /* Pointer to the MsgH            */ 02190000
*   %END;                                                               02200000
*                                                                       02210000
*/********************************************************************/ 02220000
*/* Allow separate basing for MsgH and MsgH64. If MsgH64BASE is      */ 02230000
*/* not specified, default the basing for MsgH64 to MsgHBASE.    @D5A*/ 02240000
*/********************************************************************/ 02250000
*%IF MsgH64BASE='' %THEN                                                02260000
*  %DO;                                                                 02270000
*   %MsgH64BASE = MsgHBASE;                                             02280000
*  %END;                                                      /* @D5A*/ 02290000
*                                                                       02300000
*Declare                                                                02310000
* 1 MsgH MSGHBASE,               /* MsgHeader Structure              */ 02320000
*  3 MsgHOrig,                   /*                              @D2A*/ 02330000
*    5 MsgHNamePtr    Ptr(31),   /* Pointer to a structure that has  */ 02340000
*                                /*  the recipient's address         */ 02350000
*    5 MsgHNameLen    Fixed(31), /* Length of structure              */ 02360000
*    5 MsgHIovPtr     Ptr(31),   /* Pointer to array of IOVEC buffers*/ 02370000
*    5 MsgHIovNum     Fixed(31), /* Number of elements in array      */ 02380000
*    5 MsgHAccRightsPtr Ptr(31), /* Pointer to access rights buffer  */ 02390000
*      7 MsgHControlPtr Ptr(31), /* Pointer to ancillary data buffer    02400000
*                                                                @D1A*/ 02410000
*    5 MsgHAccRightsLen Fixed(31), /* Length of access rights buffer */ 02420000
*      7 MsgHControlLen Fixed(31), /* Length of ancillary data buffer   02430000
*                                                                @D1A*/ 02440000
*  3 MsgHFlags        Bit(32);   /* Output flags on received msg @D1A*/ 02450000
*                                                                       02460000
*                                                                       02470000
*                                /* LP64 Version --------------- @D4A*/ 02480000
*%IF AsaxmacP64 = ''                                           /*@D4A*/ 02490000
*   %Then %AsaxmacP64 = 'Char(8)';                             /*@D4A*/ 02500000
*                                                                       02510000
*Declare                                                                02520000
*  1 MsgH64 MsgH64BASE,           /* MsgHeader LP64 Structure @D5CD4A*/ 02530000
*    3 MsgH64NamePtr     AsaxmacP64,    /* Ptr to Sockaddr           */ 02540000
*    3 MsgH64IovPtr      AsaxmacP64,    /* Ptr to Iov array          */ 02550000
*    3 MsgH64ControlPtr  AsaxmacP64,    /* Ptr to ancillary data     */ 02560000
*    3 MsgH64Flags       Bit(32),       /* Output flags              */ 02570000
*    3 MsgH64NameLen     Fixed(31),     /* Length of Sockaddr        */ 02580000
*    3 MsgH64IovNum      Fixed(31),     /* Number of Iov entries     */ 02590000
*    3 MsgH64ControlLen  Fixed(31);     /* Length of ancillary data  */ 02600000
*                                                                       02610000
*  Declare                                                              02620000
*   MsgH64#Length Constant(Length(MsgH64));  /* Length of MsgH64 @D4A*/ 02630000
*                                /* End LP64 ------------------- @D4A*/ 02640000
*                                                                       02680000
* /* Allow setting CMSGBASE for modules that want to set 64-bit      */ 02680103
* /* basing - see BPXTCRDW. Default is 31-bit for AF_UNIX.           */ 02680206
*                                                             /* @D7A*/ 02680303
* %IF CMSGBASE='' %THEN                                       /* @D7A*/ 02681003
*  %DO;                                                       /* @D7A*/ 02682003
*    %CMSGBASE='BASED(CMsgPtr)';                              /* @D7A*/ 02683003
*  %END;                                                      /* @D7A*/ 02684003
* %IF TRANSLATE(CMSGBASE)='BASED(CMSGPTR)' %THEN              /* @D7A*/ 02685003
*  %DO;                                                       /* @D7A*/ 02686003
*    DCL CMsgPtr Ptr(31);        /* Cmsg pointer                 @D1A*/ 02687003
*  %END;                                                      /* @D7A*/ 02688003
*                                                                       02689002
*Declare                         /* CMsg Header                  @D1A*/ 02690000
* 1 CMsgHdr Bdy(Word) CMSGBASE,  /*                          @D7C@D1A*/ 02700003
*  3 CmsgLen Fixed(31),          /* Length, including header     @D1A*/ 02710000
*  3 CmsgLevel Fixed(32),        /* Level                        @D1A*/ 02720000
*  3 CmsgType Fixed(32),         /* Type                         @D1A*/ 02730000
*  3 CmsgData Char(0);           /* Data                         @D1A*/ 02740000
*                                                                       02750000
*Declare                                                                02760000
* SCM_RIGHTS  Fixed(32) Constant(1),                  /*         @D1A*/ 02770000
* SCM_SECINFO Fixed(32) Constant(4002x),              /*         @D3A*/ 02780000
* SCM_RECVUSERNAME Fixed(32) Constant(4003x);       /* Username  @D6A*/ 02790000
*                                                                       02800000
* /* CmsgData for SCM_RECVUSERNAME                               @D6A*/ 02810000
* Dcl 1 SCM_RUSER Based,         /* Received User Name Structure @D6A*/ 02820000
*       3 SCM_RuserUsriSet  Bit(1),   /* ON = ACEEUSRI is set    @D6A*/ 02830000
*       3 *                 Bit(7),                            /*@D6A*/ 02840000
*       3 SCM_RuserACEEUSRI char(8),  /* Sender's ACEEUSRI       @D6A*/ 02850000
*       3 *                 char(3);  /* pad out to word bdy     @D6A*/ 02860000
*                                                                       02870000
*Declare                                                                02880000
* MsgH#Length  Fixed(16) Constant(Length(MsgH)); /* Length of MsgH   */ 02890000
*Declare                                                                02900000
* MsgHO#Length  Fixed(16) Constant(Length(MsgHOrig));                   02910000
*                                          /* Original MsgHdr length */ 02920000
