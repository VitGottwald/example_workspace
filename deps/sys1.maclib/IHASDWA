*%       GOTO SDWABSL1;  /*                                                     
         MACRO                                                                  
         IHASDWA &DSECT=YES,&VRAMAP=YES,&GR32=NO                   @LQC         
.*A000000                                                        Y02704         
*                                                                    */         
*%SDWABSL1 : ;                                                                  
*/** START OF SPECIFICATIONS *****************************************/         
*/*                                                                  */         
*/* PROPRIETARY STATEMENT:                                           */         
*/* 5650-ZOS                                                         */         
*/* COPYRIGHT IBM CORP. 1980, 2019                                   */         
*/* LICENSED MATERIALS - PROPERTY OF IBM                             */         
*/*                                                                  */         
*/* STATUS = HBB77C0                                                 */         
*/*                                                                  */         
*/*01* EXTERNAL CLASSIFICATION:                                      */         
*/*02* NOTPI: BASE                                                   */         
*/*02* PI: FIELDS                                                    */         
*/*  SDWAABCC SDWACOMP SDWAFMID SDWAOCRC SDWASC   SDWAXFLG           */         
*/*  SDWAABTM SDWACOMU SDWAFPRX SDWAPARM SDWASDRC SDWAXPAD           */         
*/*  SDWAAEC1 SDWACRC  SDWAGRSV SDWAPCHK SDWASRSV SDWALSLV           */         
*/*  SDWAAEC2 SDWACRGS SDWAIDNT SDWAPGIO SDWASRVP SDWAG64        @LIC*/         
*/*  SDWAARER SDWACTS  SDWAIOFS SDWAPSWU SDWASTAE SDWARFXM           */         
*/*  SDWAARGU SDWAEC1  SDWAMABD SDWARA   SDWASVCD SDWARTAM       @06C*/         
*/*  SDWAARSV SDWAEC2  SDWAMCHK SDWAREGU SDWASVCE SDWASFLG       @PKA*/         
*/*  SDWAASCB SDWAEPA  SDWAMCIV SDWARKEY SDWATEAR SDWARELEASECODE    */         
*/*  SDWACID  SDWAERRB SDWAMLVL SDWARPIV SDWATEXC                    */         
*/*  SDWACIDB SDWAERRC SDWANAME SDWARRL  SDWATYPE                    */         
*/*  SDWACLUP SDWAFIOB SDWANRBE SDWASABC SDWAVRIV SDWAPSW16          */         
*/*  SDWATX_PITDB_GRSV SDWATX_PITDB_EC1                              */         
*/*  SDWATX_PITDB_G64  SDWATX_PITDB_PSW16                            */         
*/*                                                                  */         
*/*01* END OF EXTERNAL CLASSIFICATION:                               */         
*/*                                                                  */         
*/* MACRO NAME:  IHASDWA                                             */         
*/*                                                                  */         
*/* DESCRIPTIVE NAME:  SYSTEM DIAGNOSTIC WORK AREA                   */         
*/*                                                                  */         
*/* DSECT NAME: SDWA, SDWARC1, SDWARC2, SDWARC3, SDWARC4, SDWARC5,   */         
*/*             SDWAPTS, SDWANRC1, SDWANRC2, SDWANRC3            @LIC*/         
*/*                                                                  */         
*/* COMPONENT: RECOVERY TERMINATION MANAGER (SCRTM)              @PCC*/         
*/*                                                                  */         
*/* EYE CATCHER: SDWA                                                */         
*/* OFFSET: X'293'                                                   */         
*/* LENGTH: 5                                                        */         
*/*                                                                  */         
*/* STORAGE ATTRIBUTES:                                              */         
*/*  SUBPOOL:  0 OR 230 OR 239                                       */         
*/*  KEY:  TCB KEY FOR SUBPOOL 0, OTHERWISE KEY 0                    */         
*/*  RESIDENCY:  Above or below the 16M line, depending on the       */         
*/*              recovery routine that the SDWA is provided for      */         
*/*                                                                  */         
*/* SIZE:                                                            */         
*/*     Variable, depending on which which extensions are            */         
*/*     provided with the SDWA.                                  @LIC*/         
*/*                                                                  */         
*/* CREATED BY:                                                      */         
*/*     GLOBAL SDWAS ARE PREALLOCATED, GETMAINED SDWAS ARE           */         
*/*     OBTAINED BY IEAVTR1S, TASK MODE SDWAS ARE OBTAINED           */         
*/*     BY IEAVTRT2 AND IEAVTAS1                                     */         
*/*                                                                  */         
*/* POINTED TO BY:                                                   */         
*/*     REGISTER 1 UPON ENTRY TO AN FRR, REGISTER 1 UPON ENTRY TO    */         
*/*     AN ESTAE-TYPE RECOVERY ROUTINE IF REGISTER 0 DOES NOT        */         
*/*     CONTAIN 12 (X'0C').                                          */         
*/*     ADJACENT TO EACH SUPER FRR STACK (GLOBAL SDWA)               */         
*/*     RT1WRTCA FIELD OF THE RT1W DATA AREA                         */         
*/*     RT1WSD24 FIELD OF THE RT1W DATA AREA                         */         
*/*     RT1WSD31 FIELD OF THE RT1W DATA AREA                         */         
*/*     RTM2RTCA AND RTM2SDW2 FIELD OF THE RTM2WA DATA AREA          */         
*/*     FOR TASK MODE SDWAS                                          */         
*/*                                                                  */         
*/* SERIALIZATION:                                                   */         
*/*     GLOBAL SDWA - PHYSICALLY DISABLED OR GLOBALLY LOCKED         */         
*/*     GETMAINED SDWA - SRB MODE, LOCALLY LOCKED, OR NONE           */         
*/*                                                                  */         
*/* FUNCTION:                                                        */         
*/*     THE SDWA PROVIDES FOR COMMUNICATION BETWEEN THE RTM AND      */         
*/*     FRRS OR ESTAE-TYPE RECOVERY ROUTINES.  IT CONTAINS DATA      */         
*/*     ABOUT THE ORIGINAL ERROR AND ALSO CONCERNING ACTIONS         */         
*/*     OF PREVIOUSLY ENTERED RECOVERY ROUTINES.  THE SDWA IS        */         
*/*     ALSO KNOWN AS THE RTCA.                                      */         
*/*                                                                  */         
*/*     THE SDWA IS USED FOR RECORDING ERRORS IN LOGREC              */         
*/*     AS SOFTWARE RECORDS.                                         */         
*/*                                                                  */         
*/* METHOD OF ACCESS:                                                */         
*/* ASM:                                                             */         
*/*             IHASDWA DSECT=YES,VRAMAP=YES,GR32=NO             @LQC*/         
*/*                           NO         NO       YES            @LQC*/         
*/* DSECT = YES IS THE DEFAULT AND WILL PRODUCE THE SDWA             */         
*/*            AS A DSECT.                                           */         
*/* DSECT = NO WILL PRODUCE THE SDWA AS A CONTINUATION OF            */         
*/*            DEFINED STORAGE. (NO DSECT CARD PRODUCED)             */         
*/* VRAMAP=YES IS THE DEFAULT AND WILL PRODUCE THE IHAVRA    @G81EP11*/         
*/*            MAPPING MACRO FIELDS FOLLOWING THE SDWA       @G81EP11*/         
*/*            FIELDS.                                       @G81EP11*/         
*/* VRAMAP=NO  WILL PRODUCE THE SDWA, BUT NOT THE IHAVRA     @G81EP11*/         
*/*            MAPPING MACRO.                                @G81EP11*/         
*/* GR32=NO    Is the default and indicates not to have the      @LQA*/         
*/*            GR32 attribute on SDWANOPR.                       @LQA*/         
*/* GR32=YES   Indicates to have the GR32 attribute on           @LQA*/         
*/*            SDWANOPR. You would use this if you have used     @LQA*/         
*/*            the GR, GR32, or GR64 attribute on other equates  @LQA*/         
*/*            and have TYPECHECK(REGISTER) in effect at the     @LQA*/         
*/*            invocation of SETRP. Without GR32=YES, you can    @LQA*/         
*/*            get assembler messages such as ASMA324I Symbol    @LQA*/         
*/*            SDWANOPR may have incompatible type with the      @LQA*/         
*/*            general register field. Note that when            @LQA*/         
*/*            TYPECHECK(REGISTER) is in effect, use of the      @LQA*/         
*/*            GR, GR32, or GR64 attribute on ANY equate results @LQA*/         
*/*            in this type checking for all register usage.     @LQA*/         
*/*                                                                  */         
*/* PL/AS:                                                           */         
*/*   IF MACRO VARIABLE                                              */         
*/*   %SDWALVL IS NULL, THE SDWA WILL BE INCLUDED                    */         
*/*   AS A LEVEL 1 STRUCTURE BASED ON SDWAPTR.                       */         
*/*                                                                  */         
*/*   IF %SDWALVL IS SPECIFIED AS A NUMBER FROM 1 TO 4               */         
*/*   THE SDWA WILL BE A NON-BASED STRUCTURE WITH THE                */         
*/*   TOP LEVEL EQUAL TO %SDWALVL.                                   */         
*/*                                                                  */         
*/*   THE DEFAULT INCLUSION OF THE IHAVRA MAPPING MACRO      @G81EP11*/         
*/*   ALONG WITH THE SDWA CAN BE SUPPRESSED BY SETTING       @G81EP11*/         
*/*   MACRO VARIABLE SDWAVRAMAP EQUAL TO 'NO'.               @G81EP11*/         
*/*                                                                  */         
*/*   VIA ATTRIBUTE - SPECIFY %IHAVIA='YES' BEFORE %INCLUDE.         */         
*/*                   DECLARE SDWAALET.                              */         
*/*                                                                  */         
*/*   Note: In order to access SDWARC4, that DSECT must be based     */         
*/*         upon SDWAXEME.  See the SDWARC4 section for details. @LIA*/         
*/*                                                                  */         
*/*   Note: In order to access SDWARC5, that DSECT must be based     */         
*/*         upon SDWAXRC5.  See the SDWARC5 section for details. @LUA*/         
*/*                                                                  */         
*/* DEPENDENCIES =                                                   */         
*/*                CHANGES TO THE SIZE OF THIS MACRO REQUIRE A NEW   */         
*/*                VERSION NUMBER.  WHEN THE SIZE OF THIS MACRO IS   */         
*/*                CHANGED, IT MUST BE DONE IN DOUBLE WORD           */         
*/*                INCREMENTS.  SIZE CHANGES TO THE SDWA ARE         */         
*/*                REFLECTED IN IHART1W.  MODULES THAT USE EITHER    */         
*/*                MACRO TO GET OR RELEASE SDWA STORAGE MUST BE      */         
*/*                RECOMPILED.  ALSO, IHASFPL MUST BE UPDATED TO     */         
*/*                MATCH THE NEW VERSION AND ITS ASSOCIATED MODULES  */         
*/*                MUST BE RECOMPILED.                               */         
*/*                THE HARD CODED VALUES IN WSACSTKA AND WSACSTKB    */         
*/*                IN THE IHAWSAVT MACRO MUST BE UPDATED, AND ANY    */         
*/*                MODULES THAT USE THOSE FIELDS SHOULD BE           */         
*/*                RECOMPILED.                                   @P6C*/         
*/*                                                                  */         
*/*                                                                  */         
*/* USAGE =                                                          */         
*/*     THE SDWA HAS EXTENSIONS.  THE SDWAXPAD (X'170') POINTS TO    */         
*/*     AN EXTENSION WHICH IS MADE UP OF POINTERS TO ALL THE OTHER   */         
*/*     EXTENSIONS.  THE MAIN BODY AND POINTERS EXTENSION WILL       */         
*/*     ALWAYS EXIST WHILE THE OTHER EXTENSIONS MAY NOT DEPENDING    */         
*/*     ON THE ERROR ENVIRONMENT.  PHYSICALLY, THE MAIN BODY OF THE  */         
*/*     SDWA COMES FIRST, FOLLOWED BY THE RECORDABLE EXTENSIONS,     */         
*/*     THEN THE POINTERS EXTENSION, AND LAST THE NON-RECORDABLE     */         
*/*     EXTENSIONS.                                                  */         
*/*                                                                  */         
*/*                   ***************                                */         
*/*                   *             *                                */         
*/*                   *    SDWA     *                                */         
*/*                   *             *                                */         
*/*                   ***************                                */         
*/*                   *  SDWARC1    *                                */         
*/*                   ***************                                */         
*/*                   *  SDWARC2    *                                */         
*/*                   ***************                                */         
*/*                   *  SDWARC3    *                                */         
*/*                   ***************                                */         
*/*                   *  SDWARC4    *                            @LIA*/         
*/*                   ***************                                */         
*/*                   *  SDWARC5    *                            @LUA*/         
*/*                   ***************                                */         
*/*                   *  SDWAPTRS   *                                */         
*/*                   *  --------   *                                */         
*/*                   *    ORDER    *                                */         
*/*                   * => SDWANRC1 *                                */         
*/*                   * => SDWARC1  *                                */         
*/*                   * => SDWARC2  *                                */         
*/*                   * => SDWANRC2 *                            @01C*/         
*/*                   * => SDWARC3  *                            @01C*/         
*/*                   * => SDWANRC3 *                            @L7A*/         
*/*                   * => SDWARC4  *                            @LIA*/         
*/*                   * => SDWARC5  *                            @LUA*/         
*/*                   ***************                                */         
*/*                   *  SDWANRC1   *                                */         
*/*                   ***************                                */         
*/*                   *  SDWANRC2   *                                */         
*/*                   ***************                            @L1C*/         
*/*                   *  SDWANRC3   *                                */         
*/*                   ***************                            @L7A*/         
*/*                                                                  */         
*/*                                                                  */         
*/* CHANGE ACTIVITY:                                                 */         
*/* MACMEAN SDWA MEANS SYSTEM DIAGNOSTIC WORK AREA                   */         
*/* MACCOMP SCRTM                                                @PCC*/         
*/* UPDATED 9/23/76 SU33                                     @G33SPHW*/         
*/* UPDATED 8/14/79 OS/VS2 JBB1126  (ADD VRA MAPPING)        @G81EP11*/         
*/* UPDATED 2/1/79  MVS/SYSTEM PRODUCT RELEASE 2             @G381P2F*/         
*/* UPDATED 10/28/80 MVS/SYSTEM PRODUCT VERSION 2 RELEASE 1  @G860P1S*/         
*/* UPDATED 3/2/81   MVS/SYSTEM PRODUCT VERSION 2 RELEASE 1  @G860P38*/         
*/* UPDATED 11/17/81 MVS/SYSTEM PRODUCT VERSION 2 RELEASE 1  @G860P1F*/         
*/*$L1=RAPRAS ,JBB2110,820604,PDA8: ADDED NEW FIELDS IN SDWARC1  @L1A*/         
*/*$L2=DAE    ,JBB2110,820801,PDA8: ADDED SUPPORT FOR DAE        @L2A*/         
*/*$P1=PAB0071,JBB2110,820915,PDA8: CHANGED COMMENTS FOR DAE     @P1A*/         
*/* OZ73969 - MAKE BAL THE SAME AS PL/S.                     @ZA73969*/         
*/*$01=OZ73969,JBB2133,831027,PDA8: APAR OZ73969                 @01A*/         
*/*$H1=VF     ,JBB2214,840202,PDA8: VECTOR FEATURE SUPPORT       @H1A*/         
*/*$L3=RASENH ,JBB2220,840622,PDA8: SUPPORT FOR RETRY OPTIONS    @L3A*/         
*/*$L4=AR     ,HBB3310,850916,PDA8: ACCESS REGISTER SUPPORT      @L4A*/         
*/*$L5=AR     ,HBB3310,850916,PDPY: ACCESS REGISTER SUPPORT      @L5A*/         
*/*$D1=DCR0031,HBB3310,860423,PDT9: IOS LOCK SUPPORT             @D1A*/         
*/*$L6=DATASPAC,HBB3310,860728,PDA8: RSMDS LOCK SUPPORT          @L6A*/         
*/*$L7=DATASPAC,HBB3310,861029,PDT9: PROPAGATION OF DATA SPACE       */         
*/*                                  STORAGE RANGES FOR ABDUMP   @L7A*/         
*/*$D2=DCR0088,HBB3310,861029,PDBD: LOCATING REGS SAVED BY A     @D2A*/         
*/*                                 STACKING PC WITHIN A DUMP    @D2A*/         
*/*$P2=PC40412,HBB3310,861029,PDT9: MOVE SDWAXLST FIELD          @P2A*/         
*/*$P3=PC40460,HBB3310,861215,PDT9: NO LOCKWORD FOR IOS LOCK     @P3A*/         
*/*$P4=PC40713,HBB3310,870225,PDT9: MOVE IOS LOCK BIT            @P4A*/         
*/*$L8=LOCKR  ,HBB4410,870701,PDT9: LOCK RESTRUCTURE             @L8A*/         
*/*$L9=LOCKR  ,HBB4410,870916,PDT9: LOCK RESTRUCTURE             @L9A*/         
*/*$LA=CLOCK  ,HBB4410,870916,PDT9: NEW LOCKS FOR ETR            @LAA*/         
*/*$LB=COUPLRTM,HBB4410,870916,PDT9: NEW LOCKS FOR XCF           @LBA*/         
*/*$LC=JUP03   ,HBB4410,870916,PDT9: NEW LOCKS FOR SMSX          @LCA*/         
*/*$LD=USERV   ,HBB4410,890626,PDCI: NEW IOSULUT LOCK            @LDA*/         
*/*$LE=ANVALPUR,HBB4430,910327,PD00XB: SDWAESTX                  @LEA*/         
*/*                                                                  */         
*/*$LF=SYSLKRTM,HBB5510,900112,PD00XB: NEW IXL LOCKS UPDATE VERSION  */         
*/*$P5=PIG0446 ,HBB5510,911021,PD00CK: DOCUMENT VERSION UPDATE       */         
*/*                                  PROCEDURE.                      */         
*/*$LG=SUBSPRTM,HBB5510,930329,PDKD: NEW FIELDS FOR SUBSPACE     @LGA*/         
*/*$P6=PIG1487 ,HBB5510,930429,PDKD: UPDATE DEPENDENCIES TO INCLUDE  */         
*/*                                  CHANGING THE IHASFPL, AND MINOR */         
*/*                                  COMMENT AND PROLOG UPDATES.     */         
*/*                                  ALSO ADD USABLE LENGTH          */         
*/*                                  CONSTANTS                   @P6A*/         
*/*$P7=PIG1553 ,HBB5510,030507,PDKD: REMOVE A COMMENT * FROM THE     */         
*/*                                  RESERVED FIELD ADDED FOR SUBSP  */         
*/*                                  SUPPORT                     @P7A*/         
*/*$P8=PIG2130 ,HBB5510,930717,PDCJ: ADDED BIT SDWARFXM              */         
*/*$LH=PARADRTM,HBB5510,930909,PDKD: ADDED BIT SDWAPDIP          @LHA*/         
*/*$02=OY66732 ,HBB3310,930908,PDEI: CORRECTED THE DOCUMENTATION     */         
*/*                                  FOR SDWAEC2 AND SDWAINTF    @02A*/         
*/*$P9=PN70279 ,HBB5520,940307,PDKD: CDPI UPDATES                @P9A*/         
*/*$03=OW02796 ,HBB5510,931207,PDKD: TRSQ FOR IXLREQST LOCK      @03A*/         
*/*$LI=RTMLS   ,HBB5520,940315,PDXB: SDWALSLV                        */         
*/*$PA=PN70828  HBB5520 940606 PDKD: CORRECT CONTINUATION COLUMNS    */         
*/*                                  FOR SDWALSLV                @PAA*/         
*/*$04=OW04284  HBB4410 940331 PDKD: ADDED MCHO                  @04A*/         
*/*$PB=PN71617  HBB5520 941007 PDKD: CLARIFY REASON CODE FIELDS  @PBA*/         
*/*$05=OW13819  HBB5520 950614 PDKD: System Name support         @05A*/         
*/*$PC=PR20011  HBB6601 950908 PDKD: SC1CM compid split          @PCA*/         
*/*$LJ=WLMPSAM ,HBB6603,950929,PDKD: WLM locks and RRS locks     @LJA*/         
*/*$PD=PQC0553  HBB6603 951030 PDKD: Remove SETRP support for recent */         
*/*                                  class locks                 @PDA*/         
*/*$PE=PQC0626  HBB6603 951204 PDKD: Update HBB6603 lock order   @PEA*/         
*/*$PF=PQC0643  HBB6603 951207 PDKD: Reinstate SETRP support for     */         
*/*                                  class locks - lockword is NOT   */         
*/*                                  required for SETRP usage    @PFA*/         
*/*$LK=IEEERTM  HBB6606 970807 PDXB: FP simulation                   */         
*/*$LI=64BITRTM HBB7703 971031 PDKD: 64-bit register support         */         
*/*$PG=PXD0681  HBB7703 991110 PDKD: move SDWAKEAX                   */         
*/*$PH=PXD1313  HBB7703 000211 PDKD: add SDWAARCH                    */         
*/*$PI=PYD0100  JBB7713 000608 PDKB: Fix bit to BIT for PLS3H        */         
*/*$LL=PRSER    HBB7706 001015 B7HGH5:  SSD Lock                     */         
*/*$PJ=PYM0463  HBB7706 010911 PDKD: CDPI for SDWARFXM               */         
*/*$06=OA02360  HBB7706 030317 PDKD: SDWARTAM is intended interface  */         
*/*$PK=PJK0462  HBB7709 030601 PDXB: SDWABSA                         */         
*/*$LM=LXREU    HBB7709 030801 PDXB: ASN-and-LX-Reuse Facility       */         
*/*$LN=WILDB    HBB7720 040303 PDXB: Breaking Event Address          */         
*/*$LO=GRSLOCK  HBB7740 060502 PDXZ: GRSINT lock                     */         
*/*$PL=ME12042  HBB7750 071130 PDKD: SDWATIRR                        */         
*/*$LP=DDMINF   HBB7760 080324 PDXZ: DDM locks                       */         
*/*$LQ=ME15002  HBB7760 081115 PDXB: GR32                            */         
*/*$LR=RTMR12   HBB7770 090505 PDKD: Provide Time of Error lock      */         
*/*                                  information to Estae-type       */         
*/*                                  recovery routines               */         
*/*$LS=RMODE64  HBB7780 091101 PDXB: RMODE 64                        */         
*/*$PM=ME17308  HBB7770 091005 PDKD: SDWANMFS Not My Fault Summary   */         
*/*$PN=ME18645  HBB7770 100302 PDKD: SDWASRBS indicates SRB SDWA     */         
*/*$LT=SRMLOCK  HBB7780 091231 PDKP: SRMENQ lock                     */         
*/*$LU=TX       HBB7790 110315 PDXB: TX                              */         
*/*$LV=CPUINFR1 HBB7790 110531 PDD0: CPUINFR1 support                */         
*/*$PO=ME22732  HBB7790 111013 PDKD: SDWASRBT                        */         
*/*$PP=ME22983  HBB7790 111114 PDKD: Update reason code comment      */         
*/*$PR=ME24739  HBB7790 120912 PDKD: Add SDWAMABD to SDWANMFS        */         
*/*$07=ME24870  HBB7780 120906 PDKD: SdwaReleaseCode                 */         
*/*$LW=DYNEXITS HBB77A0 130430 PDXB: MISC lock                       */         
*/*$08=OA42236  HBB7790 130508 PDKD: Minor doc update                */         
*/*$LX=RSMQ     HBB77A0 130901 PDXB: RSMQ                            */         
*/*$LY=MLTPAUSE HBB77A0 131004 PDKD: SSDGROUP lock                   */         
*/*$09=OA43803  HBB7790 131111 PDXB: SIMD                            */         
*/*$LZ=TX       HBB77A0 141201 PDXB: TX                              */         
*/*$PS=ME28233  HBB77A0 140212 PDKD: SDWAG64R                        */         
*/*$M0=IEP      HBB77B0 160201 PDKD: IEP                             */         
*/*   =W117855  HBB77B0 160531 PDKD: Fix PLX comment for SDWAPARM    */         
*/*$0A=OA51375  HBB7790 160930 PDXB: EPIERSET behavior               */         
*/*$0B=OA54587  HBB7790 180330 PDXB: OA54807                         */         
*/*$0C=OA61760  HBB77C0 210801 PDXB: IntegMon                        */         
*/*                                                                  */         
*/* CAUTION: when the size of SDWA sections changes, be sure to      */         
*/* regenerate IHART1WF and recompile IEAVWSAT                       */         
*/*                                                                  */         
*/*** END OF SPECIFICATIONS ******************************************/         
*%       GOTO SDWABSL;  /*                                                      
         AIF ('&DSECT' EQ 'YES').SDWA001                                        
SDWA     DS   0D -                                                              
         AGO  .SDWA002                                                          
.SDWA001 ANOP                                                                   
SDWA     DSECT ,       SDWAPTR                                                  
.SDWA002 SPACE 2                                                                
SDWAPARM DS    A -     PARAMETER LIST ADDRESS IF (E)STAE MACRO                  
*                      SPECIFIED PARAM OPTION OR 0. FOR FRRS THIS               
*                      IS THE ADDRESS OF THE 6 WORD PARM AREA                   
*                      RETURNED BY THE SETFRR MACRO WHEN THE                    
*                      PARMAD KEYWORD IS SPECIFIED ON THE SETFRR                
*                      FOR AN ARR, THIS IS THE ADDRESS OF THE 8-BYTES           
*                       OF THE MSTA AREA.                                       
*                      FOR ESTAEX, THIS IS THE ADDRESS OF 8-BYTES               
*                      CONTAINING THE ADDRESS AND ALET OF THE                   
*                      PARAMETER LIST.                                          
*                      For a recovery routine that gets control                 
*                      in AMODE 64, it is the address of 8-bytes                
*                      that contains the 64-bit address of the                  
*                      parameter list.                                          
SDWAFIOB DS    0A -    ADDRESS OF PURGE I/O REQUEST LIST (PIRL)                 
*                      OR 0 IF HALT I/O IS REQUESTED ON ENTRY TO                
*                      RETRY ROUTINE FOR (E)STAE.                               
SDWAABCC DS    0BL4 -  ABEND COMPLETION CODE ON ENTRY TO EXIT ROUTINE.          
SDWACMPF DS    B -     FLAG BITS IN COMPLETION CODE.                            
SDWAREQ  EQU   X'80' - ON, SYSABEND/SYSMDUMP/SYSUDUMP DUMP TO BE                
*                      GIVEN.  SET IF DUMP=YES REQUESTED ON ABEND,              
*                      CALLRTM OR SETRP MACRO.                                  
SDWASTEP EQU   X'40' - ON, JOBSTEP TO BE TERMINATED.                            
*                      SET IF STEP OPTION SPECIFIED                             
*                      ON ABEND MACRO.                                          
SDWASTCC EQU   X'10' - ON, DON'T STORE COMPLETION CODE.                         
*                      NOT USED IN OS/VS2 R2.                                   
SDWARCF  EQU   X'04' - ON, REASON CODE IN SDWACRC IS VALID         @PBC         
SDWACMPC DS    BL3 -   SYSTEM COMPLETION CODE (FIRST 12 BITS) AND               
*                      USER COMPLETION CODE (SECOND 12 BITS).                   
SDWACTL1 DS    0CL8 -  BC MODE PSW AT TIME OF ERROR                             
*                      NOT INITIALIZED FOR FRRS.                                
SDWACMKA DS    B -     CHANNEL INTERRUPT MASKS.                                 
SDWAIOA  EQU   X'FE' - I/O INTERRUPTS (ALL ZEROS OR ALL ONES).                  
SDWAEXTA EQU   X'01' - EXTERNAL INTERRUPT.                                      
SDWAMWPA DS    B -     PSW KEY AND 'M-W-P'.                                     
SDWAKEYA EQU   X'F0' - PSW KEY.                                                 
SDWAMCKA EQU   X'04' - MACHINE CHECK INTERRUPT.                                 
SDWAWATA EQU   X'02' - WAIT STATE.                                              
SDWASPVA EQU   X'01' - SUPERVISOR/PROBLEM-PROGRAM MODE.                         
SDWAINTA DS    CL2 -   INTERRUPT CODE (LAST 2 BYTES OF INTERRUPT                
*                      CODE IF I/O INTERRUPT).                                  
SDWAPMKA DS    B -     INSTRUCTION LENGTH CODE, CONDITION CODE,                 
*                      AND PROGRAM MASKS.                                       
SDWAILA  EQU   X'C0' - INSTRUCTION LENGTH CODE.                                 
SDWACCA  EQU   X'30' - LAST CONDITION CODE.                                     
SDWAFPA  EQU   X'08' - FIXED-POINT OVERFLOW.                                    
SDWADOA  EQU   X'04' - DECIMAL OVERFLOW.                                        
SDWAEUA  EQU   X'02' - EXPONENT UNDERFLOW.                                      
SDWASGA  EQU   X'01' - SIGNIFICANCE.                                            
SDWANXTA DS    AL3 -   ADDRESS OF NEXT INSTRUCTION TO BE EXECUTED.              
*                                                                               
SDWACTL2 DS    0CL8 -  BC MODE PSW FROM LAST PRB ON RB CHAIN.                   
*                      ZERO FOR FRRS.                                           
SDWACMKP DS    B -     CHANNEL INTERRUPT MASKS.                                 
SDWAIOP  EQU   X'FE' - I/O INTERRUPTS (ALL ZEROS OR ALL ONES).                  
SDWAEXTP EQU   X'01' - EXTERNAL INTERRUPT.                                      
SDWAMWPP DS    B -     PSW KEY AND 'M-W-P'.                                     
SDWAKEYP EQU   X'F0' - PSW KEY.                                                 
SDWAMCKP EQU   X'04' - MACHINE CHECK INTERRUPT.                                 
SDWAWATP EQU   X'02' - WAIT STATE.                                              
SDWASPVP EQU   X'01' - SUPERVISOR/PROBLEM-PROGRAM MODE.                         
SDWAINTP DS    CL2 -   INTERRUPT CODE (LAST 2 BYTES OF INTERRUPT                
*                      CODE IF I/O INTERRUPT).                                  
SDWAPMKP DS    B -     INSTRUCTION LENGTH CODE, CONDITION CODE,                 
*                      AND PROGRAM MASKS.                                       
SDWAILP  EQU   X'C0' - INSTRUCTION LENGTH CODE.                                 
SDWACCP  EQU   X'30' - LAST CONDITION CODE.                                     
SDWAFPP  EQU   X'08' - FIXED-POINT OVERFLOW.                                    
SDWADOP  EQU   X'04' - DECIMAL OVERFLOW.                                        
SDWAEUP  EQU   X'02' - EXPONENT UNDERFLOW.                                      
SDWASGP  EQU   X'01' - SIGNIFICANCE.                                            
SDWANXTP DS    AL3 -   ADDRESS OF NEXT INSTRUCTION TO BE EXECUTED.              
*                                                                               
SDWAGRSV DS    0CL64 - General purpose registers at time of error.     *        
                       When the error was a program interrupt within   *        
                       transactional execution, these are the regs     *        
                       at the time of the program interrupt within the *        
                       transaction.                                @LUC         
SDWATX_PITDB_GRSV DS 0CL64 - Same as SDWAGRSV                      @LZA         
SDWAGR00 DS    F -     GPR 0.                                                   
SDWAGR01 DS    F -     GPR 1.                                                   
SDWAGR02 DS    F -     GPR 2.                                                   
SDWAGR03 DS    F -     GPR 3.                                                   
SDWAGR04 DS    F -     GPR 4.                                                   
SDWAGR05 DS    F -     GPR 5.                                                   
SDWAGR06 DS    F -     GPR 6.                                                   
SDWAGR07 DS    F -     GPR 7.                                                   
SDWAGR08 DS    F -     GPR 8.                                                   
SDWAGR09 DS    F -     GPR 9.                                                   
SDWAGR10 DS    F -     GPR 10.                                                  
SDWAGR11 DS    F -     GPR 11.                                                  
SDWAGR12 DS    F -     GPR 12.                                                  
SDWAGR13 DS    F -     GPR 13.                                                  
SDWAGR14 DS    F -     GPR 14.                                                  
SDWAGR15 DS    F -     GPR 15.                                                  
*                                                                               
SDWANAME DS    0CL8 -  IF PROBLEM PROGRAM MODE NAME                             
*                      OF ABENDING PROGRAM, OR ZERO                             
*                      IF NO NAME IS AVAILABLE.                                 
*                      ZERO IF NOT RUNNING UNDER AN RB                          
SDWARBAD DS    A -     RB ADDRESS OF ABENDING PROGRAM (IF SUPERVISOR            
*                      MODE PROGRAM RUNNING UNDER AN RB)                        
         DS    XL4 -   CONTAINS ZEROS IF SUPERVISOR MODE PROGRAM                
*                      RUNNING UNDER AN RB OR IF PROGRAM NOT                    
*                      RUNNING UNDER AN RB                                      
SDWAEPA  DS    A -     ENTRY POINT ADDRESS OF ABENDING PROGRAM.                 
*                      ZERO IF NOT RUNNING UNDER AN RB                          
SDWAIOBR DS    A -     POINTER TO SDWAFIOB FIELD,                               
*                      OR 0 IF NO RETRY, OR 0 IF HALT I/O                       
*                      IS REQUESTED FOR (E)STA EXITS.                           
*                      ZERO FOR FRRS                           ICB377           
SDWAEC1  DS    0CL8    Extended control PSW at time of error(abend).   *        
                       When the error was a program interrupt within   *        
                       transactional execution, this is the PSW        *        
                       at the time of the program interrupt within the *        
                       transaction.                                @LUC         
*                      When the initial error was a program interrupt  *        
                       handled by an ESPIE routine that specified both *        
                       EPIEPERC and EPIERSET, the program mask in this *        
                       field is the program mask that resulted from    *        
                       the ESPIE RESET rather than the value at the    *        
                       time of error.                              @0AA         
SDWATX_PITDB_EC1 DS 0CL8 Same as SDWAEC1                           @LZA         
SDWAEMK1 DS    B       INTERRUPT INFORMATION MASKS                              
SDWAPER1 EQU   X'40'   ON,PROGRAM EVENT RECORDING                               
*                      INTERRUPTS CAN OCCUR                                     
*                      OFF, PROGRAM EVENT RECORDING                             
*                      INTERRUPTS CANNOT OCCUR                                  
SDWATRM1 EQU   X'04'   ON,ADDRESS TRANSLATION ACTIVE                            
SDWAIO1  EQU   X'02'   OFF,I/0 INTERRUPTION CAN NOT OCCUR                       
*                      ON,I/0 INTERRUPTIONS CAN OCCUR SUBJECT TO                
*                      TO CHANNEL MASK BITS IN CONTROL REGS 2 AND 3             
SDWAEXT1 EQU   X'01'   OFF,EXTERNAL INTERRUPTION CANNOT OCCUR                   
*                      ON,EXTERNAL INTERRUPTIONS CAN OCCUR SUBJECT TO           
*                      EXTERNAL SUBCLASS MASK BITS OF CONTROL REG 0             
SDWAMWP1 DS    B       PSW KEY AND 'M-W-P'                                      
SDWAKEY1 EQU   X'F0'   PSW KEY                                                  
SDWAECT1 EQU   X'08'   EXTENDED CONTROL MODE BIT                                
SDWAMCK1 EQU   X'04'   OFF,MACHINE CHECK CANNOT OCCUR                           
*                      ON,MACHINE CHECK DUE TO SYSTEM DAMAGE AND                
*                      INSTRUCTION-PROCESSING DAMAGE CAN OCCUR                  
*                      OTHER MACHINE CHECKS SUBJECT TO MASK BITS                
*                      IN CONTROL REGISTER 14                                   
SDWAWAT1 EQU   X'02'   ON,CPU IN WAIT STATE                                     
SDWAPGM1 EQU   X'01'   ON,PROBLEM STATE                                         
*                      OFF, SUPERVISOR STATE                                    
SDWAINT1 DS    B       CONDITION CODE AND PROGRAM MASK                          
SDWAASCM EQU   X'C0'   ADDRESS SPACE CONTROL MODE BITS                          
*                      00 - PRIMARY MODE                                        
*                      01 - ACCESS REGISTER MODE                                
*                      10 - SECONDARY MODE                                      
*                      11 - HOME SPACE MODE                        @L4A         
SDWAS1   EQU   X'80'   ADDRESS SPACE SELECTION BIT             @G381P2F         
SDWACC1  EQU   X'30'   CONDITION CODE                                           
SDWAFPO1 EQU   X'08'   FIXED POINT OVERFLOW                                     
SDWADEC1 EQU   X'04'   DECIMAL OVERFLOW                                         
SDWAEXP1 EQU   X'02'   EXPONENT UNDERFLOW                                       
SDWASGN1 EQU   X'01'   SIGNIFICANCE                                             
         DS    B       RESERVED                                                 
SDWANXT1 DS    0F      ADDRESS OF NEXT INSTRUCTION TO BE EXECUTED.              
*                      Bit 31 could be on due to                                
*                      - bad address                                            
*                      - address in SDWAPSW16 above 2G                          
*                        (note that an address above 2G will not                
*                        always result in Bit 31 being turned on)               
SDWAAMF1 DS    B       ADDRESSING MODE FLAG                    @G860P1S         
SDWAMOD1 EQU   X'80'   ADDRESSING MODE OF THE NEXT INSTRUCTION @G860P1S         
*                      TO BE EXECUTED.                         @G860P1S         
SDWAADD1 DS    CL3     INSTRUCTION ADDRESS                                      
SDWAAEC1 DS    0CL8    ADDITIONAL EC MODE INFORMATION                           
         DS    CL1     RESERVED                                                 
SDWAILC1 DS    B       INSTRUCTION LENGTH CODE FOR PSW DEFINED                  
*                      BY SDWAEC1/SDWAPSW16                                     
SDWAIL1  EQU   X'06'   ILC                                                      
SDWAINC1 DS    0CL2    INTERRUPT CODE. IF PROGRAM CHECK OCCURRED                
*                      THE SUBFIELDS ARE FURTHER DIVIDED                        
SDWAIC1H DS    B       High byte of PI code                        @LUA         
SDWAPTX1 EQU   X'02'   Program interrupt during transactional          *        
                       execution                                   @LUA         
SDWAICD1 DS    B       8 BIT INTERRUPT CODE                                     
*                      IF PROGRAM CHECK                                         
SDWAIPR1 EQU   X'80'   PER INTERRUPT OCCURRED                                   
SDWAIMC1 EQU   X'40'   MONITOR CALL INTERRUPT OCCURRED                          
SDWAIPC1 EQU   X'3F'   AN UNSOLICITED PROGRAM CHECK                             
*                      HAS OCCURRED                                             
SDWATRAN DS    A       VIRTUAL ADDRESS CAUSING TRANSLATION                      
*                      EXCEPTION                                                
         ORG   SDWATRAN+3                                          @LKA         
SDWADXC  DS    0X      Data exception code when program interrupt               
*                      code 7                                      @09C         
SDWAVXC  DS    X       Vector exception code when program interrupt             
*                      code 1B                                     @09A         
SDWAEC2  DS    0CL8    EXTENDED CONTROL PSW FROM THE RB LEVEL OR                
*                      LINKAGE STACK LEVEL WHICH CREATED THE                    
*                      ESTAE EXIT AT THE TIME IT LAST                           
*                      INCURRED AN INTERRUPT OR 0 FOR ESTAI.       @02C         
*                      OR PSW USED TO GIVE FRR CONTROL                          
SDWAEMK2 DS    B       INTERRUPT INFORMATION MASKS                              
SDWAPER2 EQU   X'40'   ON,PROGRAM EVENT RECORDING                               
*                      INTERRUPTS CAN OCCUR                                     
*                      OFF,PROGRAM EVENT RECORDING                              
*                      INTERRUPTS CANNOT OCCUR                                  
SDWATRM2 EQU   X'04'   ON,ADDRESS TRANSLATION ACTIVE                            
SDWAIO2  EQU   X'02'   OFF,I/0 INTERRUPTION CANNOT OCCUR                        
*                      ON,I/0 INTERRUPTIONS CAN OCCUR SUBJECT TO                
*                      TO CHANNEL MASK BITS IN CONTROL REGS 2 AND 3             
SDWAEXT2 EQU   X'01'   OFF,EXTERNAL INTERRUPTION CANNOT OCCUR                   
*                      ON,EXTERNAL INTERRUPTIONS CAN OCCUR SUBJECT TO           
*                      EXTERNAL SUBCLASS MASK BITS OF CONTROL REG 0             
SDWAMWP2 DS    B       PSW KEY AND 'M-W-P'                                      
SDWAKEY2 EQU   X'F0'   PSW KEY                                                  
SDWAECT2 EQU   X'08'   EXTENDED CONTROL MODE BIT                                
SDWAMCK2 EQU   X'04'   OFF,MACHINE CHECK CANNOT OCCUR                           
*                      ON,MACHINE CHECK DUE TO SYSTEM DAMAGE AND                
*                      INSTRUCTION-PROCESSING DAMAGE CAN OCCUR                  
*                      OTHER MACHINE CHECKS SUBJECT TO MASK BITS                
*                      IN CONTROL REGISTER 14                                   
SDWAWAT2 EQU   X'02'   ON,CPU IN WAIT STATE                                     
SDWAPGM2 EQU   X'01'   ON,PROBLEM STATE                                         
*                      OFF, SUPERVISOR STATE                                    
SDWAINT2 DS    B       CONDITION CODE AND PROGRAM MASK                          
SDWAS2   EQU   X'80'   ADDRESS SPACE SELECTION BIT             @G381P2F         
SDWACC2  EQU   X'30'   CONDITION CODE                                           
SDWAFPO2 EQU   X'08'   FIXED POINT OVERFLOW                                     
SDWADEC2 EQU   X'04'   DECIMAL OVERFLOW                                         
SDWAEXP2 EQU   X'02'   EXPONENT UNDERFLOW                                       
SDWASGN2 EQU   X'01'   SIGNIFICANCE                                             
         DS    B       RESERVED                                                 
SDWANXT2 DS    0F      ADDRESS OF NEXT INSTRUCTION TO BE                        
*                      EXECUTED                                                 
*                      Bit 31 could be on due to                                
*                      - bad address                                            
*                      - address in SDWAPSW16 above 2G                          
*                        (note that an address above 2G will not                
*                        always result in Bit 31 being turned on)               
SDWAAMF2 DS    B       ADDRESSING MODE FLAG                    @G860P1S         
SDWAMOD2 EQU   X'80'   ADDRESSING MODE OF THE NEXT INSTRUCTION @G860P1S         
*                      TO BE EXECUTED.                         @G860P1S         
SDWAADD2 DS    CL3     INSTRUCTION ADDRESS                                      
SDWAAEC2 DS    0CL8    ADDITIONAL EC MODE INFORMATION                           
         DS    CL1     RESERVED                                                 
SDWAILC2 DS    B       INSTRUCTION LENGTH CODE FOR PSW DEFINED                  
*                      BY SDWAEC2                                               
SDWAIL2  EQU   X'06'   ILC                                                      
SDWAINC2 DS    0CL2    INTERRUPT CODE. IF PROGRAM CHECK OCCURRED                
*                      THE SUBFIELDS ARE FURTHER DIVIDED                        
SDWAIC2H DS    B       High byte of PI code                        @LUA         
SDWAPTX2 EQU   X'02'   Program interrupt during transactional          *        
                       execution                                   @LUA         
SDWAICD2 DS    B       8 BIT INTERRUPT CODE                                     
*                      IF PROGRAM CHECK                                         
SDWAIPR2 EQU   X'80'   PER INTERRUPT OCCURRED                                   
SDWAIMC2 EQU   X'40'   MONITOR CALL INTERRRUPT OCCURRED                         
SDWAIPC2 EQU   X'3F'   AN UNSOLICITED PROGRAM CHECK                             
*                      HAS OCCURRED                                             
SDWATRN2 DS    A       VIRTUAL ADDRESS CAUSING TRANSLATION                      
*                      EXCEPTION                                                
SDWASRSV DS    0CL64   GENERAL PURPOSE REGISTERS OF THE RB LEVEL OR             
*                      LINKAGE STACK LEVEL                                      
*                      WHICH CREATED THE ESTAE EXIT AT THE TIME                 
*                      IT LAST INCURRED AN INTERRUPT OR 0 FOR ESTAI             
*                      FOR FRRS INITIALIZED TO REGISTERS                        
*                      AT TIME OF ERROR.                                        
*                      THIS REGISTER AREA IS USED TO                            
*                      UPDATE REGISTER CONTENTS FOR RETRY IF REQUESTED          
SDWASR00 DS    F       GPR 0.                                                   
SDWASR01 DS    F       GPR 1.                                                   
SDWASR02 DS    F       GPR 2.                                                   
SDWASR03 DS    F       GPR 3.                                                   
SDWASR04 DS    F       GPR 4.                                                   
SDWASR05 DS    F       GPR 5.                                                   
SDWASR06 DS    F       GPR 6.                                                   
SDWASR07 DS    F       GPR 7.                                                   
SDWASR08 DS    F       GPR 8.                                                   
SDWASR09 DS    F       GPR 9.                                                   
SDWASR10 DS    F       GPR 10.                                                  
SDWASR11 DS    F       GPR 11.                                                  
SDWASR12 DS    F       GPR 12.                                                  
SDWASR13 DS    F       GPR 13.                                                  
SDWASR14 DS    F       GPR 14.                                                  
SDWASR15 DS    F       GPR 15.                                                  
*                                                                               
SDWAIDNT DS    0CL4    SDWA IDENTIFICATION ATTRIBUTES                           
SDWASPID DS    CL1     SUBPOOL ID OF STORAGE CONTAINING THIS SDWA               
SDWALNTH DS    CL3     LENGTH OF THIS SDWA IN BYTES                             
SDWAMCH  DS    0CL28   CONTAINS MACHINE CHECK DATA                              
*                      IF SDWAMCHK IS ON                                        
SDWASTCK DS    0CL8    BEGINNING AND ENDING STORAGE CHECK ADDRESSES.            
*                      FILLED IN DUE TO STORAGE ERROR (SDWASCK)                 
*                      OR A KEY FAILURE (SDWASKYF).                             
*                      THESE ADDRESSES ARE VALID ONLY IF                        
*                      INDICATED BY THE SDWASRVL FLAG.                          
SDWASCKB DS    A       BEGINNING VIRTUAL ADDRESS OF STORAGE CHECK               
SDWASCKE DS    A       ENDING VIRTUAL ADDRESS OF STORAGE CHECK                  
*                                                                               
SDWAMCHI DS    0BL2    ADDITIONAL MCH INFORMATION FLAGS                         
SDWAMCHS DS    B       MCH FLAG BYTE                                            
SDWASRVL EQU   X'80'   ON,STORAGE ADDRESSES SUPPLIED                            
*                      (SDWASTCK, SDWARFSA) ARE VALID.                          
*                      On z/Architecture system, SDWARFSA contains              
*                      only the low word of the FSA.                            
*                      SDWARFSE contains the 8-byte FSA.                        
SDWARCDF EQU   X'40'   ON,MACHINE CHECK RECORD NOT RECORDED                     
SDWATSVL EQU   X'20'   ON,TIME STAMP IS VALID                                   
SDWAINVP EQU   X'10'   ON,STORAGE IS RECONFIGURED, PAGE IS INVALIDATED          
SDWARSRC EQU   X'08'   ON,STORAGE RECONFIGURATION (SDWARSR1,SDWARSR2)           
*                      STATUS AVAILABLE.                                        
SDWARSRF EQU   X'04'   ON,STORAGE RECONFIGURATION NOT ATTEMPTED.                
*                      (SDWARSR1 AND SDWARSR2 ARE INVALID)                      
SDWAVRIV EQU   X'02'   ON, INDICATES VECTOR REGISTERS ARE UNPREDICTABLE         
*                                                                  @H1A         
SDWAARGU EQU   X'01'   ON, INDICATES ACCESS REGISTERS ARE UNPREDICTABLE         
*                                                                  @L5A         
SDWAMCHD DS    B       INPUT INFORMATION TO RECOVERY ROUTINE CONCERNING         
*                      A MACHINE CHECK ERROR                                    
SDWASKYF EQU   X'80'   ON,STORAGE KEY FAILURE                                   
SDWAREGU EQU   X'40'   ON,GENERAL PURPOSE REGISTER CONTENTS AT TIME OF          
*                      MACHINE CHECK UNPREDICTABLE                              
SDWAPSWU EQU   X'20'   ON,PSW AND/OR CONTROL REGISTERS AT TIME OF               
*                      MACHINE CHECK UNPREDICTABLE                              
SDWASCK  EQU   X'10'   ON,INDICATES STORAGE DATA CHECK                          
SDWAACR  EQU   X'08'   ON,INDICATES ACR REQUEST                                 
SDWAINSF EQU   X'04'   ON,INSTRUCTION FAILURE                                   
SDWAFPRX EQU   X'02'   ON,CONTENTS OF FLOATING POINT REGISTERS AT TIME          
*                      MACHINE CHECK ARE UNPREDICTABLE                          
SDWATERR EQU   X'01'   ON,TIMER ERROR - CAUSES ENTRY TO                         
*                      RECOVERY ROUTINES ONLY IF LOGOUT                         
*                      FAILED.                                                  
SDWACPID DS    CL2     ID OF OF FAILING CPU CAUSING ACR                         
*                                                                               
SDWARSR1 DS    B       ADDITIONAL STORAGE FRAME ERROR INDICATORS                
*                      AS RETURNED FROM REAL STORAGE RECONFIGURATION.           
SDWAPREF EQU   X'20'   PREFERRED FRAME                         @G860P1F         
SDWAVRCN EQU   X'10'   V = R CANDIDATE - CAN GO OFFLINE        @G860P1F         
SDWANSWP EQU   X'08'   LONG-TERM NON-SWAPPABLE ADDRESS SPACE   @G860P1F         
SDWANSWA EQU   X'04'   NON-SWAPPABLE ADDRESS SPACE             @G860P1F         
SDWAMSER EQU   X'02'   STORAGE ERROR ALREADY SET IN FRAME.                      
SDWACHNG EQU   X'01'   CHANGE INDICATOR WAS ON IN FRAME.                        
SDWARSR2 DS    B       ADDITIONAL STORAGE ERROR INDICATORS.                     
SDWAOFLN EQU   X'80'   FRAME OFFLINE OR SCHEDULED TO GO OFFLINE                 
*                      IF SDWAINTC IS ON                                        
SDWAINTC EQU   X'40'   INTERCEPT                                                
*                      THE FRAME IS SCHEDULED TO GO OFFLINE,                    
*                                   OR                                          
*                      THE FRAME HAS INCURRED A STORAGE ERROR,                  
*                      OR IS V=R INTERCEPTED                   @G860P1F         
SDWASPER EQU   X'20'   STORAGE ERROR PERMANENT ON FRAME.                        
SDWANUCL EQU   X'10'   FRAME CONTAINS PERMANENT RESIDENT STORAGE,               
*                      I.E. NUCLEUS.                                            
SDWAFSQA EQU   X'08'   FRAME IN SQA                                             
SDWAFLSQ EQU   X'04'   FRAME IN LSQA                                            
SDWAPGFX EQU   X'02'   FRAME IS PAGE FIXED                                      
SDWAVEQR EQU   X'01'   FRAME IS VIRTUAL = REAL                 @G860P1F         
SDWAMCHO DS    B       OTHER MACHINE CHECK FLAGS                   @04A         
SDWASKPR EQU   X'80'   SKIP RECORDING REQUESTED BY MACHINE CHECK   @04A         
         DS    CL1     RESERVED                                    @04C         
SDWARFSA DS    A       REAL STORAGE FAILING ADDRESS  ( VALID ONLY IF            
*                      INDICATED BY SDWASRVL )                                  
SDWATIME DS    CL8     TIME STAMP OF ASSOCIATED MACHINE CHECK RECORD            
SDWAFLGS DS    0BL4    INPUT FLAGS DESCRIBING REASONS AND CONDITIONS            
*                      FOR ENTERING A RECOVERY EXIT ROUTINE.                    
SDWAERRA DS    B       ERROR TYPE CAUSING ENTRY TO RECOVERY EXIT                
SDWAMCHK EQU   X'80'   ON INDICATES MACHINE CHECK                               
SDWAPCHK EQU   X'40'   ON INDICATES PROGRAM CHECK                               
SDWARKEY EQU   X'20'   ON INDICATES CONSOLE RESTART KEY WAS DEPRESSED           
SDWASVCD EQU   X'10'   ON INDICATES TASK ISSUED SVC 13                          
SDWAABTM EQU   X'08'   ON INDICATES SYSTEM FORCED SVC 13(I.E.ABTERM)            
SDWASVCE EQU   X'04'   ON,INDICATES AN SVC WAS ISSUED BY                        
*                      A LOCKED OR SRB ROUTINE                                  
SDWATEXC EQU   X'02'   ON,INDICATES AN UNRECOVERABLE TRANSLATION                
*                      FAILURE                                                  
SDWAPGIO EQU   X'01'   ON,INDICATES A PAGE I/O ERROR                            
SDWASTRM EQU   X'01'   ON,INDICATES AN RTM1 SERVICE ROUTINE    @G38AP1F         
*                      (SUCH AS IEAVTSR1 PROCESSING ITERM OR   @G38AP1F         
*                      IEAVTRTM PROCESSING STERM) SCHEDULED    @G38AP1F         
*                      RTM1 TO CONTINUE PROCESSING AS AN SVC   @G38AP1F         
*                      ERROR (BY PUTTING SVC 13 IN THE PSW TO  @G38AP1F         
*                      BE DISPATCHED).                         @G38AP1F         
SDWAERRB DS    B       ADDITIONAL ERROR ENTRY INFORMATION                       
SDWAPDIP EQU   X'80'   ON INDICATES THAT THIS TASK WAS PARALLEL                 
*                      DETACHED - RECOVERY ROUTINES FOR OTHER TASKS             
*                      IN THIS ADDRESS SPACE MAY BE EXECUTING AT THE            
*                      SAME TIME AS THIS RECOVERY ROUTINE         @LHA          
SDWANMFS EQU   X'40'   Not My Fault Summary -- indicates that this              
*                      abend was received asynchronously (from an               
*                      external source).  SDWANMFS may be examined              
*                      as an alternative to checking individual abend           
*                      codes when deciding whether to capture failure           
*                      documentation or retry since when it is on the           
*                      abend generally will not have been the fault             
*                      of the program that received it.  SDWANMFS is            
*                      available to Estae-type recovery and EUT FRRs            
*                      running under TCBs.  It is set when any of the           
*                      following abend indicators have been set:                
*                      SDWAABTM - ABTERM indicator (note that Cancel            
*                                 and Detach are always ABTERMs)                
*                      SDWAMABD - This TCB has been detached by RTM             
*                                 after its mother task abended  @PRA           
*                      SDWASRBM - An SRB has abended and percolated             
*                                 to this TCB                                   
*                      SDWAIRB  - An IRB has interrupted this TCB               
*                                 and abended                                   
*                      SDWAMCHK - A Machine Check has occurred                  
*                      SDWARKEY - A Restart was received                        
*                      SDWACTS  - An abend was Converted To Step                
*                                                                @PMA           
SDWASRBT EQU   X'20'   On, indicates that this abend was issued                 
*                      via CALLRTM TYPE=SRBTERM                  @POA           
SDWASRBS EQU   X'10'   On - this SDWA was allocated for an SRB                  
*                      Off - this SDWA was allocated for a TCB                  
*                      SDWASRBS is only valid when SDWASVAL is on @PNA          
SDWATYP1 EQU   X'08'   ON TYPE 1 SVC IN CONTROL AT TIME OF ERROR                
SDWAENRB EQU   X'04'   ON ENABLED RB IN CONTROL AT TIME OF ERROR                
SDWALDIS EQU   X'02'   ON A LOGICALLY OR PHYSICALLY DISABLED ROUTINE            
*                      WAS IN CONTROL AT THE TIME OF ERROR.                     
SDWASRBM EQU   X'01'   ON SYSTEM IN SRB MODE AT TIME OF ERROR                   
SDWAERRC DS    B       ADDITIONAL ERROR ENTRY INFORMATION                       
SDWASTAF EQU   X'80'   ON INDICATES A PREVIOUS (E)STA  OR FRR                   
*                      EXIT FAILED.                                             
SDWASTAI EQU   X'40'   ON A (E)STAI EXIT PREVIOUSLY RECEIVED CONTROL            
SDWAIRB  EQU   X'20'   ON AN IRB PRECEDED THE RB THAT IS                        
*                      ASSOCIATED WITH THIS EXIT                                
SDWAPERC EQU   X'10'   ON THIS RECOVERY ROUTINE IS BEING PERCOLATED TO          
SDWAEAS  EQU   X'08'   ON INDICATES A LOWER LEVEL EXIT HAS RECOGNIZED           
*                      AN ERROR AND PROVIDED SERVICEABILITY INFORMATION         
SDWASKIP EQU   X'04'   ON INDICATES FRRS WERE SKIPPED          @G381P2F         
SDWALCL  EQU   X'02'   ON IND ENTRY AS A LOCAL RESOURCE MGR    @G382P2F         
SDWAGLBL EQU   X'01'   ON IND ENTRY AS A GLOBAL RESOURCE MGR   @G382P2F         
SDWAERRD DS    B       ADDITIONAL ERROR ENTRY INFORMATION                       
SDWACLUP EQU   X'80'   ON INDICATES RECOVERY EXIT ONLY TO CLEANUP AND           
*                      NOT RETRY (IF ESTA EXIT AND 33E COMPLETION CODE          
*                      THE DUMP IS TAKEN AFTER ENTRY TO THE RECOVERY            
*                      ROUTINE,IF THE COMPLETION CODE IS OTHER THAN             
*                      33E AND IT IS AN ESTA EXIT THE DUMP IS                   
*                      TAKEN BEFORE ENTRY TO THE RECOVERY ROUTINE)              
SDWANRBE EQU   X'40'   ON RB ASSOCIATED WITH THIS ESTA EXIT WAS NOT             
*                      IN CONTROL AT TIME OF ERROR                              
*                      NEVER ON FOR FRRS                                        
SDWASTAE EQU   X'20'   ON THIS ESTA EXIT HAS BEEN ENTERED FOR A                 
*                      PREVIOUS ABEND                                           
*                      NEVER ON FOR FRRS                                        
SDWACTS  EQU   X'10'   ON,THIS TASK WAS NOT IN CONTROL AT TIME OF               
*                      ERROR BUT A TASK WITHIN THE SAME JOBSTEP TREE            
*                      REQUESTED A 'STEP' ABEND. ONLY 'ON' IF SDWACLUP          
*                      IS 'ON'                                                  
SDWAMABD EQU   X'08'   ON,THIS TASK WAS NOT IN CONTROL AT TIME OF               
*                      ERROR BUT AN ANCESTOR OF THIS TASK HAS ABEND'ED          
*                      ONLY 'ON' IF SDWACLUP IS 'ON'.                           
SDWARPIV EQU   X'04'   ON, THE REGISTERS, PSW AND CONTROL REGISTERS             
*                      AT TIME OF ERROR ARE UNAVAILABLE                         
SDWAMCIV EQU   X'02'   ON,MACHINE CHECK ERROR INFORMATION                       
*                      IS UNAVAILABLE.                                          
SDWAERFL EQU   X'01'   ON,ERRORID INFORMATION AVAILABLE       @G17EP5W          
SDWAFMID DS    CL2     ASID OF MEMORY IN WHICH ERROR OCCURRED.                  
*                      =0, IF THE MEMORY IS CURRENT                             
*                      NOT=0, IF OTHER MEMORY IS CURRENT                        
*                               FOR FRRS-                                       
*                      IF THE VALUE IS NON ZERO THE                             
*                      FRR IS RECEIVING CONTROL IN THE                          
*                      MASTER SCHEDULER ADDRESS SPACE AND CANNOT                
*                      ADDRESS THE PRIVATE AREA OF THE FAILING                  
*                      ADDRESS SPACE.                                           
*                               FOR ESTA-                                       
*                      IF THE VALUE IS NON ZERO                                 
*                      ENTRY IS DUE TO CROSS MEMORY                             
*                      ABTERM.                                                  
SDWAIOFS DS    B       THIS IS THE CURRENT I/O STATUS (THE I/O                  
*                      PROCESSING REQUESTED BY THE FIRST (E)STA                 
*                      EXIT IS THE ONLY REQUEST HONORED )                       
SDWAIOQR EQU   X'80'   ON,I/O FOR FAILING PROGRAM HAS BEEN QUIESCED AND         
*                      IS RESTOREABLE                                           
SDWAIOHT EQU   X'40'   ON,I/O FOR FAILING PROGRAM HAS BEEN HALTED AND           
*                      IS NOT RESTOREABLE                                       
SDWANOIO EQU   X'20'   ON,FAILING PROGRAM HAS NO I/O OUTSTANDING                
SDWANIOP EQU   X'10'   ON,USER REQUESTED NO I/O PROCESSING                      
*                                                                               
SDWACPUI DS    CL1     Low order byte of the error logical CPU id.     X        
                       IBM recommends using the 2-byte logical CPU id  X        
                       in SDWA2CID.                                @LVC         
SDWARTYA DS    0A      ADDRESS OF RETRY ROUTINE                @G860P1C         
SDWARTYF DS    B       ADDRESSING MODE INDICATOR BYTE          @G860P1S         
SDWAAMOD EQU   X'80'   This bit is never looked at. The AMODE of the   *        
                       retry is determined by other information    @LSC         
         DS    AL3     LOW THREE ORDER BYTES OF RETRY ADDRESS  @G860P1S         
SDWARECA DS    A       ADDRESS OF VARIABLE RECORDING AREA WITHIN SDWA           
SDWACPUA DS    0CL4    ADDRESS OF CPU HOLDING RESOURCE WHICH CAUSES             
*                      VALID SPIN ON CURRENT CPU - USED WITH RESTART            
*                      KEY ERROR TYPE.IF THIS FIELD IS VALIDLY FILLED           
*                      IN BY AN FRR THE FRRS MAINLINE PROGRAM WILL BE           
*                      RESUMED AT THE NEXT SEQUENTIAL INSTRUCTION.              
*                      NOT VALID FOR ESTAE EXITS.                               
         DS    CL2     RESERVED                                                 
SDWALCPU DS    H       LOGICAL ADDRESS OF CPU HOLDING RESOURCE                  
SDWAPARQ DS    0BL4    FLAGS SET BY RECOVERY ROUTINE TO REQUEST FURTHER         
*                      PROCESSING ACTION                                        
SDWARCDE DS    B       RETURN CODE FROM RECOVERY ROUTINE TO INDICATE            
*                      RETRY OR TERMINATION                                     
SDWACWT  EQU   0       0 ,CONTINUE WITH TERMINATION. THIS INDICATION            
*                      IMPLIES PERCOLATION                                      
SDWARETY EQU   4       4 ,RETRY USING RETRY ADDRESS IN SDWARTYA FIELD           
SDWAPSTI EQU   16      16,PREVENT FURTHER (E)STAI PROCESSING                    
SDWAACF2 DS    B       FLAGS TO INDICATE ADDITIONAL PROCESSING                  
*                      REQUESTS                                                 
SDWARCRD EQU   X'80'   ON,RECORDING REQUESTED                                   
SDWARFXM EQU   X'40'   ON,RETRY TO FULLXM AT TIME OF FRR SET.                   
*                      CAN BE USED BY BY MODE=PRIMARY FRRS        @P8A          
SDWASPIN EQU   X'20'   ON,PROGRAM INTERRUPTED VIA  THE RESTART KEY WAS          
*                      IN A VALID SPIN(SET BY THE SETRP MACRO WHEN CPU          
*                      ADRESS IS SPECIFIED ALONG WITH THE CPU ADDRESS           
*                      IN SDWACPUA FIELD TO ALLOW RESTART OF THE                
*                      ALTERNATE CPU)                                           
SDWARERR EQU   X'10'   ON,RETRY USING THE CROSS MEMORY ADDRESSING               
*                      ENVIRONMENT AT THE TIME OF THE ERROR.                    
*                      OFF,RETRY USING THE CROSS MEMORY ADDR ENV ON             
*                      ENTRY TO THE FRR.                       @G381P2F         
SDWAUPRG EQU   X'08'   ON,UPDATED REGISTERS STARTING WITH SDWASR00 ARE          
*                      TO BE USED FOR RETRY                                     
SDWAFREE EQU   X'04'   ON, SDWA (RTCA) TO BE FREED PRIOR TO RETRY.              
*                      ONLY VALID FOR ESTA TYPE EXITS.                          
SDWASERP EQU   X'02'   ON,SERIALIZE PERCOLATION (USED WHEN AN SRB MODE          
*                      FRR PERCOLATES SERIALLY TO A RELATED TASK)               
*                                                              @G381P2F         
SDWACML  EQU   X'01'   ON,FREE THE CROSS MEMORY LOCAL LOCK     @G381P2F         
SDWAACF3 DS    B       FLAGS INDICATING SOME GLOBAL LOCKS TO BE FREED.          
*                      ONLY VALID FOR FRRS.  OTHER LOCKS ARE INDICATED          
*                      AT SDWAFLK1 AND SDWAFLK2.               @G860P1S         
SDWAFRSX EQU   X'80'   ON, THE RSM CROSS MEMORY CLASS LOCK     @G860P1S         
SDWAFRSA EQU   X'40'   ON, THE RSM ADDRESS SPACE CLASS LOCK    @G860P1S         
SDWAFVSP EQU   X'20'   ON, THE VSM PAGE LOCK                   @G860P1S         
SDWADISP EQU   X'10'   ON,THE DISPATCHER LOCK                                   
SDWAASMP EQU   X'08'   ON,THE ASM CLASS LOCK                   Z40WPXH          
SDWASALL EQU   X'04'   ON, THE SALLOC LOCK                                      
SDWAIPRG EQU   X'02'   ON, THE IOSYNCH LOCK                                     
SDWAFRSD EQU   X'01'   ON, THE RSM DATA SPACE LOCK                 @L6C         
SDWAACF4 DS    B       ADDITIONAL LOCKS TO BE FREED, OR ADDITIONAL     *        
                       PROCESSING FOR FRRS                                      
SDWAIUCB EQU   X'80'   ON, FREE IOSUCB LOCK                                     
SDWARSMQ EQU   X'40'   ON, FREE RSMQ LOCK                          @LXA         
SDWATADB EQU   X'08'   RESERVED LOCK                           Z40WPXH          
SDWAOPTM EQU   X'04'   ON, FREE SYSTEM RESOURCES MGR(SRM) LOCK                  
SDWACMS  EQU   X'02'   ON, FREE CMS LOCK                                        
SDWAFLLK EQU   X'01'   ON, FREE LOCAL LOCK                                      
*                                                                               
SDWALKWA DS    0CL32   LOCK AREA                              @ZA05516          
SDWALKWS DS    0CL32   LOCKWORDS REQUIRED TO FREE GLOBAL LOCKS                  
*                      ONLY USED FOR FRRS                                       
SDWALRSD DS    A       LOCKWORD FOR THE RSM DATA SPACE LOCK        @L6C         
SDWAIULW DS    A       LOCKWORD FOR THE IOSUCB LOCK                             
         DS    A       LOCKWORD - RESERVED                         @P3C         
SDWAIPLW DS    A       LOCKWORD FOR THE IOSYNCH LOCK                            
SDWAAPLW DS    A       LOCKWORD FOR THE ASM CLASS LOCK         Z40WPXH          
         DS    A       RESERVED                                   @L9C          
         DS    A       RESERVED                                   @L9C          
SDWATALW DS    A       LOCKWORD - RESERVED                     Z40WPXH          
*                                                                               
SDWAASID DS    CL2     ASID FOR LOGREC DEBUGGING (HOME ASID)   @ZA05516         
SDWASEQ# DS    CL2     ERRORID SEQUENCE NUMBER                 @G17EP5W         
SDWARECP DS    0CL24   RECORDING PARAMETERS (MODULE,CSECT AND RECOVERY          
*                      ROUTINE NAMES-RESPECTIVELY)                              
SDWAMODN DS   CL8      THE LOAD MODULE NAME INVOLVED IN THE ERROR               
*                      (SUPPLIED BY THE RECOVERY ROUTINE)                       
SDWACSCT DS   CL8      THE CSECT (MICROFICHE) NAME INVOLVED IN THE              
*                      ERROR (SUPPLIED BY THE RECOVERY ROUTINE)                 
SDWAREXN DS   CL8      THE RECOVERY ROUTINE (MICROFICHE) NAME                   
*                      HANDLING THE ERROR (SUPPLIED BY THE RECOVERY             
*                      ROUTINE)                                                 
*                                                                               
SDWADPLA DS   A        POINTER TO DUMP PARAMETER LIST                           
*                      RESIDING IN SDWA                                         
SDWASNPA DS   0CL8     SNAP PARAMETER LIST FLAGS                                
SDWADUMP DS   0CL4     DUMP CHARACTERISTICS                                     
SDWADPID DS   CL1      ID OF DUMP REQUESTED                                     
SDWADPFS DS   B        DUMP FLAGS                                               
SDWADPT  EQU  X'80'    ALWAYS OFF, INDICATES SNAP DUMP REQUEST                  
SDWADLST EQU  X'40'    ALWAYS ON, INDICATES  OS/VS2 REL. 2 DUMP                 
*                      PARAMETER LIST SUPPLIED                                  
*                      USED BY RTM TO INDICATE DUMP OPTIONS ARE                 
*                      AVAILABLE IN THE SDWA                                    
SDWAENSN EQU  X'20'    ON,ENHANCED DUMP OPTIONS              @G33SPHW           
SDWASLST EQU  X'02'    ON,STORAGE LISTS SUPPLIED FOR DUMP                       
SDWADPF2 DS   B        DUMP FLAGS 2                          @G382P2F           
SDWADVS3 EQU  X'80'    ON, STORAGE RANGES IN SDWADSR, OFF, STORAGE              
*                      RANGES IN SDWADPSL                    @G382P2F           
SDWAXLST EQU  X'08'    ON,DATA SPACE STORAGE LISTS SUPPLIED FOR DUMP   X        
                                                                   @P2M         
SDWALVL2 EQU  X'04'    ON, MVS/SP2.1 VERSION OF SNAP PARMLIST  @G860P1F         
SDWASUBL EQU  X'02'    ON, SUBPOOL LIST SUPPLIED               @G860P1C         
         DS   CL1      RESERVED                                                 
*                                                                               
SDWADDAT DS   0CL4     SDATA AND PDATA OPTIONS                                  
SDWASDAT DS   0CL2     SDATA OPTIONS                          @G33SPHW          
SDWASDA0 DS   BL1      SDATA OPTIONS FLAG ONE                 @G33SPHW          
SDWANUC  EQU  X'80'    DISPLAY NUCLEUS                                          
SDWASQA  EQU  X'40'    DISPLAY SQA                                              
SDWALSQA EQU  X'20'    DISPLAY LSQA                                             
SDWASWA  EQU  X'10'    DISPLAY SWA                                              
SDWAGTF  EQU  X'08'    DISPLAY GTF INCORE TRACE TABLE                           
SDWACBS  EQU  X'04'    FORMAT AND DISPLAY CONTROL BLOCKS                        
SDWAQQS  EQU  X'02'    FORMAT AND DISPLAY QCBS/QELS                             
SDWADM   EQU  X'01'    FORMAT DATA MGT CONTROL BLOCKS        @G33SPHW           
SDWASDA1 DS   BL1      SDATA OPTIONS                         @G33SPHW           
SDWAIO   EQU  X'80'    FORMAT I/O SUPERVISOR CONTROL BLOCKS  @G33SPHW           
SDWAERR  EQU  X'40'    FORMAT ERROR CONTROL BLOCKS           @G33SPHW           
SDWASUM  EQU  X'10'    PROVIDE SUMMARY DUMP                    @G860P1S         
SDWAALLN EQU  X'08'    DISPLAY ENTIRE VIRTUAL NUCLEUS          @G860P1S         
SDWAPDAT DS   BL1      PDATA OPTIONS                                            
SDWADSAS EQU  X'80'    DISPLAY SAVE AREAS                                       
SDWADSAH EQU  X'40'    DISPLAY SAVE AREA HEADER                                 
SDWADREG EQU  X'20'    DISPLAY REGISTERS                                        
SDWATLPA EQU  X'10'    DISPLAY LPA MODULES OF TASK                              
SDWATJPA EQU  X'08'    DISPLAY JPA MODULES OF TASK                              
SDWADPSW EQU  X'04'    DISPLAY PSW                                              
SDWAUSPL EQU  X'02'    DISPLAY USER SUBPOOLS                                    
         DS   B        RESERVED                                                 
*                                                                               
SDWADPSA DS   0CL36    DUMP RANGES AREA.  Note the last 4 bytes of     X        
                       this area is a substructure of the dump ranges  X        
                       area, but it should not be part of the dump     X        
                       ranges area.  However, for compatibility        X        
                       reasons, no changes were made to size of        X        
                       the SDWADPSA area.                          @LVA         
SDWADPSL DS   0CL32    DUMP STORAGE LISTS (MAX 4 RANGES AVAILABLE)              
SDWAFRM1 DS   A        BEGINNING ADDRESS FOR STORAGE RANGE 1                    
SDWATO1  DS   A        ENDING ADDRESS FOR STORAGE RANGE 1                       
SDWAFRM2 DS   A        BEGINNING ADDRESS FOR STORAGE RANGE2                     
SDWATO2  DS   A        ENDING ADDRESS FOR STORAGE RANGE 2                       
SDWAFRM3 DS   A        BEGINNING ADDRESS FOR STORAGE RANGE 3                    
SDWATO3  DS   A        ENDING ADDRESS FOR STORAGE RANGE 3                       
SDWAFRM4 DS   A        BEGINNING ADDRESS FOR STORAGE RANGE 4                    
SDWATO4  DS   A        ENDING ADDRESS FOR STORAGE RANGE 4                       
SDWA2CID DS   H        2-byte ERRORID logical CPU id.  See SDWADPSA    X        
                       comment.                                    @LVA         
SDWAOPIC DS   X        Low byte of original PIC, without PER bit.  @0BA         
*                      Valid only when non-0 and SDWAPCHK and                   
*                      SDWACMPC is x'0C4000'.                                   
*                      See SDWADPSA comment.                                    
SDWAIFLG DS   0X       Flag bits                                   @0CC         
SDWAIFlags DS X        Flag bits                                   @0CC         
SDWA_Valid1 EQU X'80'  When on, the next 3 bits have valid values  @0CA         
SDWA_IntegMon EQU X'40' Integrity monitor event, when SDWA_Valid1               
*                      is on                                       @0CA         
SDWA_JscbAuth EQU X'20' For an error event that occurred in task mode,          
*                      the task's jobstep task has a JSCB                       
*                      in which bit JSCBAUTH is on                 @0CA         
SDWA_SDIP     EQU X'10' SVC Dump is in prgress                     @0CA         
*                                                                               
*                      SDWAVERI IS TO INDICATE THE VERSION OF                   
*                      THE SDWA VIA A NUMBER IN THE SDWAVID    @G38FP2F         
*                                                                               
SDWAVERI DS   0CL4     SDWA VERSION INDICATOR                  @G38FP2F         
SDWAVERF DS   CL2      FFFF INDICATES VID FIELD IS VALID       @G38FP2F         
SDWAVID  DS   CL2      VERSION INDICATOR, EXPLAINED AS FOLLOWS:    @L1A         
*                      1, INDICATES THE SDWA IS AT AN MVS/SYSTEM   @L1A         
*                      PRODUCT RELEASE 2 LEVEL                     @L1A         
*                      2, INDICATES THE SDWA IS AT AN MVS/SYSTEM   @L1A         
*                      PRODUCT VERSION 2 RELEASE 1 LEVEL           @L1A         
*                      3, INDICATES THE SDWA IS AT AN MVS/SYSTEM   @L1A         
*                      PRODUCT JBB2110 LEVEL.                      @L1A         
*                      4, INDICATES THE SDWA IS AT AN MVS/SYSTEM   @L4A         
*                      PRODUCT HBB3310 LEVEL.                      @L4A         
*                      5, INDICATES THE SDWA IS AT AN MVS/SYSTEM   @L9A         
*                      PRODUCT HBB4410 LEVEL.                      @L9A         
*                      6, INDICATES THE SDWA IS AT AN MVS/SYSTEM   @L9A         
*                      PRODUCT HBB5510 LEVEL.                      @L9Z         
*                      7, indicates the SDWA is at an OS/390 R10   @L9A         
*                      HBB7703 level *and* that it                 @LIA         
*                      contains the SDWARC4 extension              @LIA         
*                      8, indicates the SDWA is at a z/OS R7       @LNA         
*                      HBB7720 level *and* that it                 @LNA         
*                      contains the SDWARC4 extension              @LNA         
*                      9, indicates the SDWA is at a z/OS V2R1     @LUA         
*                      HBB7790 level *and* that it                 @LUA         
*                      contains the SDWARC5 extension              @LNA         
SDWAVS3  EQU  1        1, INDICATES THE SDWA IS AT AN MVS/SYSTEM                
*                      PRODUCT RELEASE 2 LEVEL                 @G382P2F         
SDWAVS4  EQU  2        2, INDICATES THE SDWA IS AT AN MVS/SYSTEM                
*                      PRODUCT VERSION 2 RELEASE 1 LEVEL       @G860P1S         
SDWAVS5  EQU  3        3, INDICATES THE SDWA IS AT AN MVS/SYSTEM   @L1A         
*                      PRODUCT JBB2110 LEVEL.                      @L1A         
SDWAVS6  EQU  4        4, INDICATES THE SDWA IS AT AN MVS/SYSTEM   @L4A         
*                      PRODUCT HBB3310 LEVEL.                      @L4A         
SDWAVS7  EQU  5        5, INDICATES THE SDWA IS AT AN MVS/SYSTEM   @L9A         
*                      PRODUCT HBB4410 LEVEL.                      @L9A         
SDWAVS8  EQU  6        6, INDICATES THE SDWA IS AT AN MVS/SYSTEM   @L9A         
*                      PRODUCT HBB5510 LEVEL.                      @L9Z         
SDWAVS9  EQU  7        7, indicates the SDWA is at an OS/390 R10   @L9A         
*                      HBB7703 level *and* that it                 @LIA         
*                      contains the SDWARC4 extension              @LIA         
SDWAVS10 EQU  8        8, indicates the SDWA is at a z/OS R7       @LNA         
*                      HBB7720 level *and* that it                 @LNA         
*                      contains the SDWARC4 extension              @LNA         
SDWAVS11 EQU  9        9, indicates the SDWA is at a z/OS V2R1     @LUA         
*                      HBB7790 level *and* that it                 @LUA         
*                      contains the SDWARC5 extension              @LUA         
SDWAVSN  EQU  9        9, indicates the SDWA is at a z/OS V2R1     @LUC         
*                      HBB7790 level *and* that it                 @LUA         
*                      contains the SDWARC5 extension              @LUA         
*                      IF THE VALUE OF THIS EQUATE IS CHANGED,                  
*                      ADD A NEW SDWAVSX WHERE X IS THE NUMBER                  
*                      THAT FOLLOWS THE LAST SDWAVSX FIELD, AND                 
*                      MAKE THE EQUATE EQUAL TO SDWAVSN.                        
*                      ALSO DOCUMENT THE VALUE IN SDWAVID AS ABOVE.             
*                      REFER TO MODULE IEAVTFRO FOR INSTRUCTIONS ON             
*                      WHICH MODULES NEED TO CHANGE AND RECOMPILE  @P5C         
SDWAXPAD DS   A        ADDR OF THE EXTENSION POINTERS (SDWAPTRS)   @L1C         
SDWAXM   DS   0CL12    CROSS MEMORY INFORMATION                @G381P2F         
SDWACRGS DS   0CL8     CONTROL REGISTERS 3 AND 4               @G381P2F         
SDWACR3  DS   0CL4     CONTROL REGISTER 3                      @G381P2F         
SDWAKM   DS   CL2      KEY MASK                                @G381P2F         
SDWASCND DS   CL2      ASID OF THE SECONDARY ADDR SPACE -SASID @G381P2F         
SDWACR4  DS   0CL4     CONTROL REGISTER 4                      @G381P2F         
SDWAAX   DS   CL2      AUTHORIZATION INDEX                     @G381P2F         
SDWAPRIM DS   CL2      ASID OF THE PRIMARY ADDR SPACE -PASID   @G381P2F         
SDWACMLA DS   A        ADDRESS OF ASCB OF CML TO BE FREED      @G381P2F         
SDWACOMU DS   CL8      FRR to ESTAE communication buffer       @G382P2F         
*                      Also applies to ESTAE-type to ESTAE-type.                
SDWACOMP DS   A        THIS WORD IS PROVIDED FOR COMMUNICATION OF               
*                      ADDITIONAL RECOVERY DATA ON A PER COMPONENT              
*                      BASIS (FOR OS/VS2 RELEASE 2 THIS FIELD IS ONLY           
*                      USED BY DATA MANAGER )                                   
SDWAERTM DS   CL4      ERRORID TIME STAMP                     @G17EP5W          
SDWARA   DS   0CL264   VARIABLE RECORDING AREA PREFIXED BY A TWO BYTE           
*                      LENGTH FIELD OF AREA, A ONE BYTE FLAG FIELD,             
*                      AND A ONE BYTE FIELD WITH LENGTH OF USER                 
*                      SUPPLIED RECORDING INFORMATION         @G388P2F          
SDWAVRAL DS   CL2      LENGTH OF VARIABLE RECORDING AREA                        
SDWADPVA DS    B       BITS THAT DEFINE DATA IN VARIABLE AREA                   
SDWAHEX  EQU   X'80'   SDWAVRA DATA TO BE PRINTED BY EREP IN HEX                
SDWAEBC  EQU   X'40'   SDWAVRA DATA TO BE PRINTED BY EREP IN EBCDIC             
SDWAVRAM EQU   X'20'   SDWAVRA DATA IS IN THE FORMAT MAPPED BY THE              
*                      VRAMAP DSECT (IHAVRA MACRO)            @G81EP11          
SDWAURAL DS   XL1      LENGTH OF USER SUPPLIED INFORMATION IN                   
*                      THE VARIABLE RECORDING AREA (ZEROED BEFORE               
*                      EACH RECOVERY ROUTINE IS INVOKED)                        
SDWAVRA  DS   CL255    VARIABLE RECORDING AREA                 @G388P2F         
SDWAID   DS   CL5      CONTAINS 'SDWA ' AS ID                  @G860P1F         
SDWAEND  DS   0D       END OF NON-EXTENDED SDWA                @G381P2F         
*                                                                               
SDWARC1  DSECT ,       RECORDABLE EXTENSION, BASED ON SDWASRVP @G388P2F         
SDWASERV DS   0CL456   ADDITIONAL COMPONENT SERVICE DATA           @LGC         
SDWARC1Z DS   0CL118   CAN BE ZEROED ON PERCOLATION.               @L2A         
SDWACID  DS   CL5      COMPONENT ID OF THE COMPONENT INVOLVED                   
*                      IN THE ERROR (FOR EXAMPLE, SC1CR)       @G388P2F         
SDWASC   DS   CL23     NAME OF THE SUBCOMPONENT AND THE MODULE                  
*                      SUBFUNCTION INVOLVED IN THE ERROR       @G388P2F         
SDWAMLVL DS   0CL16    LEVEL OF THE MODULE INVOLVED IN THE ERROR                
*                                                              @G38AP2F         
SDWAMDAT DS   CL8      ASSEMBLY DATE OF THE MODULE INVOLVED IN                  
*                      THE ERROR                               @G38AP2F         
SDWAMVRS DS   CL8      VERSION OF THE MODULE - PTF OR PRODUCT                   
*                      NUMBER                                  @G38AP2F         
SDWACRC  DS   0CL4     This field contains the abend reason code that           
*                      was set via an ABEND, CALLRTM, or SETRP macro.           
*                      It is valid only if SDWARCF is set on.                   
*                      For SRBTERM abends (see SDWASRBT),  the high             
*                      order bit of the reason code, when on,                   
*                      indicates that the issuer felt that an                   
*                      SVCDUMP was not necessary for this abend.                
*                      Note that this field should not be confused              
*                      with the return code that some programs place            
*                      into register 15 before issuing an abend.   @PPC         
SDWAHRC  DS   F        HEXADECIMAL DECLARE FOR SDWACRC             @PBC         
SDWARRL  DS   CL8      ENTRY POINT LABEL OF THE RECOVERY ROUTINE THAT           
*                      FILLED IN THIS SDWA                                      
SDWACIDB DS   CL4      THE COMPONENT ID BASE (PREFIX) NUMBER,  @G38PP1F         
*                      SUCH AS 5741.                           @G38PP1F         
SDWASDRC DS   FL1      SVCDUMP STATUS INDICATOR (FOR USE BY SDUMP)              
*                                                              @G860P1S         
SDWACCRC DS   CL1      FLAGS FOR COMPCODE AND REASON CODE      @G860P1C         
SDWACCF  EQU  X'80'   =1, IF RECOVERY EXIT ALTERED COMPCODE    @G860P1C         
SDWAREAF EQU  X'40'   =1, IF RECOVERY EXIT ALTERED REASON CODE @G860P1C         
SDWARETF DS   B        SDWA RETRY FLAGS                            @L3A         
SDWART15 EQU  X'80'    ON, SET REGISTER 15 ON RETRY TO THE VALUE IN             
*                      SDWASR15.  OFF, SET REGISTER 15 ON RETRY TO              
*                      THE RETRY ADDRESS, REGARDLESS OF THE VALUE IN            
*                      SDWASR15. ONLY VALID FOR FRRS               @L3A         
SDWAREMR EQU  X'40'    ON, REMOVE RECOVERY ROUTINE ON RETRY                     
*                      OFF, DONT REMOVE RECOVERY ROUTINE ON RETRY  @L3A         
SDWAFRLK EQU  X'20'    ON, FREE LOCKS ON A RETRY WHOSE BIT SETTINGS             
*                      IN THE SDWA HAVE BEEN TURNED ON                          
*                      OFF, DO NOT FREE ANY LOCKS ON A RETRY       @L3A         
SDWAUP64 EQU  X'10'    If on, use the 64-bit GPRs for                           
*                      setting the retry regs. Only valid when                  
*                      SDWARC4 extension exists.                   @LIA         
SDWAKEAX EQU  X'08'    ON, when retrying keep the current EAX rather   *        
                       than resetting EAX to time-of-FRR-set       @PGM         
SDWAG64R EQU  X'04'    If on in a logrec record or SDWA in a dump,              
*                      indicates that RTM has set up SDWAG64 with               
*                      the retry registers requested by a recovery              
*                      routine so that it is clear for debugging                
*                      which SDWA field contains the retry regs.                
*                      The time of error registers are in SDWAGRSV              
*                      and SDWAG64H                                @PSA         
SDWATYPE DS   B        TYPE OF RECOVERY ROUTINE THAT RTM GAVE CONTROL           
*                      TO:                                                      
*                        0 - NO RECOVERY WAS SET UP                             
*                        1 - FRR                                                
*                        2 - NON FRR (ESTAE, ESTAI, ETC.)                       
*                        3 - ARR (ASSOCIATED RECOVERY ROUTINE)     @L4A         
SDWANREC EQU  0        NO RECOVERY WAS SET UP                      @L4A         
SDWATFRR EQU  1        FRR WAS GIVEN CONTROL                       @L4A         
SDWATEST EQU  2        ESTAE/I/X WAS GIVEN CONTROL                 @L4A         
SDWATARR EQU  3        ARR WAS GIVEN CONTROL                       @L4A         
SDWAHLHI DS   CL4      Copy of PSAHLHI (Highest Lock Held Indicator)            
*                      at the time of error, minus any locks that have          
*                      been released by FRR recovery routines that ran          
*                      before the current recovery routine.                     
*                      This field was always '0' on entry to Estae-type         
*                      recovery routines prior to HBB7770          @LRC         
SDWASUPR DS   CL4      Copy of PSASUPER (Supervisor Control Word) at            
*                      the time of error, minus any bits that have              
*                      been turned off by FRR recovery routines that            
*                      ran before the current recovery routine.                 
*                      This field was always '0' on entry to Estae-type         
*                      recovery routines prior to HBB7770          @LRC         
SDWASPN  DS   CL4      Copy of LCCASPIN (Processor Spinning Indicators)         
*                      at the time of error, minus any spins that have          
*                      been resolved by FRR recovery routines that ran          
*                      before the current recovery routine.                     
*                      This field was always '0' on entry to Estae-type         
*                      recovery routines prior to HBB7770          @LRC         
SDWAEADR DS   CL4      FRR OR ESTAE RECOVERY ROUTINE ADDRESS.                   
*                      =0 IF NO FRR EXISTED WHEN RTM1 RECIEVED CONTROL          
*                      TO PROCESS A SYSTEM MODE ERROR.         @G860P38         
SDWAFRRE DS   CL24     IF FRR EXISTS: COPY OF FRR PARAMETER AREA FROM           
*                                     THE CURRENT FRR STACK ENTRY               
*                      ON ENTRY TO AN ESTAE: 0                 @G860P38         
SDWASDRN DS   CL4      SDUMP REASON FLAGS FOR TAKING PARTIAL   @ZMC2916         
*                      DUMP. SEE RTSDSRSN FIELD IN RTSD.       @ZMC2916         
*                      ADDITIONS TO SDWARC1 - 40 BYTES             @L1A         
SDWADAEW DS    0CL10           STRUCTURE FOR DAE INFO              @L2A         
SDWADAET DS    CL8             DAE STATUS FLAGS MAPPED BY ADYDSTAT @P1C         
SDWAOCUR DS    CL2             NUMBER OF OCCURRENCES OF THIS PROBLEM.           
*                              IF 0 THEN DAE DID NOT CHECK FOR                  
*                              DUPLICATE OCCURRENCES.  IF 1 THEN THIS           
*                              IS THE FIRST OCCURRENCE OF THIS PROBLEM.         
*                              IF GREATER THAN 1 THEN THIS IS THE COUNT         
*                              OF HOW MANY TIMES THIS DUMP REQUEST HAS          
*                              OCCURRED WHILE DAE WAS ACTIVE.      @P1C         
SDWARC1P DS    0CL34           THIS PART IS TO BE PRESERVED ON                  
*                              PERCOLATION AND NOT ZEROED          @L1A         
SDWAPGTA DS    0CL6            CONTAINING STRUCTURE AS IN LCCAPGTA @L1A         
SDWAASI1 DS    CL2             ADDRESS SPACE ID OF TASK FOR PURGEDQ             
*                                                                  @L1A         
SDWATCB  DS    F               ADDRESS OF TCB FOR PURGEDQ          @L1A         
SDWART12 DS    0CL28           USED FOR FILLING IN EED'S           @L1A         
SDWAFAIN DS    CL12            12 BYTES OF INSTRUCTION STREAM AS                
*                              DETERMINED BY THE ADDRESS IN THE PSW AT          
*                              THE TIME OF FAILURE. 6 BYTES BEFORE AND          
*                              AFTER.                              @L2A         
SDWAASCB DS    F               ADDRESS OF ASCB FOR FAILING ADDRESS              
*                              SPACE.                              @L1A         
SDWAASST DS    F               ADDRESS OF ADDRESS SPACE SEGMENT                 
*                              TABLE.                              @L1A         
SDWASABC DS    0F              ORIGINAL COMPLETION CODE.           @L1A         
SDWAOABF DS    CL1             FLAGS IN COMPLETION CODE REGISTER.  @L1A         
SDWAOREQ EQU   X'80'           ORIGINAL VALUE OF SDWAREQ           @L1A         
SDWAOSTP EQU   X'40'           ORIGINAL VALUE OF SDWASTEP          @L1A         
*        EQU   X'20'           USED FOR MEMTERM REQUESTS           @L1A         
SDWAOSTC EQU   X'10'           ORIGINAL VALUE OF SDWASTCC          @L1A         
*        EQU   X'08'           USED BY RTM2 FOR NORMAL END-OF-TASK @L1A         
SDWAORCF EQU   X'04'           VALID REASON CODE IN SDWAOCRC.      @L1A         
*        EQU   X'02'           RESERVED                            @L1A         
*        EQU   X'01'           RESERVED                            @L1A         
SDWAOCMP DS    CL3             COMPLETION CODE.                    @L1A         
SDWAOCRC DS    F               ORIGINAL REASON CODE FROM SDWACRC AT             
*                              ENTRY TO RECOVERY PROCESSING.  ONLY              
*                              VALID IF SDWAORCF IS SET ON.        @PBC         
*                                                                               
*   SDWARC1 FIELDS FROM THIS POINT ON ARE PRESERVED ON RTM1                     
*   FRR PERCOLATION AND ARE ZEROED ON RTM2 ESTAE PERCOLATION.                   
*                                                                               
SDWACRER DS    0CL64           CONTROL REGISTERS AT TIME OF ERROR.              
*                              THESE VALUES ARE NOT RESTORED ON RETRY.          
*                                                                  @L4A         
SDWACRE0 DS    F               CONTROL REGISTER 0                  @L4A         
SDWACRE1 DS    F               CONTROL REGISTER 1                  @L4A         
SDWACRE2 DS    F               CONTROL REGISTER 2                  @L4A         
SDWACRE3 DS    F               CONTROL REGISTER 3                  @L4A         
SDWACRE4 DS    F               CONTROL REGISTER 4                  @L4A         
SDWACRE5 DS    F               CONTROL REGISTER 5                  @L4A         
SDWACRE6 DS    F               CONTROL REGISTER 6                  @L4A         
SDWACRE7 DS    F               CONTROL REGISTER 7                  @L4A         
SDWACRE8 DS    F               CONTROL REGISTER 8                  @L4A         
SDWACRE9 DS    F               CONTROL REGISTER 9                  @L4A         
SDWACREA DS    F               CONTROL REGISTER 10                 @L4A         
SDWACREB DS    F               CONTROL REGISTER 11                 @L4A         
SDWACREC DS    F               CONTROL REGISTER 12                 @L4A         
SDWACRED DS    F               CONTROL REGISTER 13                 @L4A         
SDWACREE DS    F               CONTROL REGISTER 14                 @L4A         
SDWACREF DS    F               CONTROL REGISTER 15                 @L4A         
SDWAARER DS    0CL64           ACCESS REGISTERS AT TIME OF ERROR   @L4A         
SDWAARE0 DS    F               ACCESS REGISTER 0                   @L4A         
SDWAARE1 DS    F               ACCESS REGISTER 1                   @L4A         
SDWAARE2 DS    F               ACCESS REGISTER 2                   @L4A         
SDWAARE3 DS    F               ACCESS REGISTER 3                   @L4A         
SDWAARE4 DS    F               ACCESS REGISTER 4                   @L4A         
SDWAARE5 DS    F               ACCESS REGISTER 5                   @L4A         
SDWAARE6 DS    F               ACCESS REGISTER 6                   @L4A         
SDWAARE7 DS    F               ACCESS REGISTER 7                   @L4A         
SDWAARE8 DS    F               ACCESS REGISTER 8                   @L4A         
SDWAARE9 DS    F               ACCESS REGISTER 9                   @L4A         
SDWAAREA DS    F               ACCESS REGISTER 10                  @L4A         
SDWAAREB DS    F               ACCESS REGISTER 11                  @L4A         
SDWAAREC DS    F               ACCESS REGISTER 12                  @L4A         
SDWAARED DS    F               ACCESS REGISTER 13                  @L4A         
SDWAAREE DS    F               ACCESS REGISTER 14                  @L4A         
SDWAAREF DS    F               ACCESS REGISTER 15                  @L4A         
SDWAARSV DS    0CL64           ACCESS REGISTERS OF THE RB LEVEL AND             
*                              LINKAGE STACK LEVEL WHICH CREATED THE            
*                              ESTAE EXIT AT THE TIME IT LAST INCURRED          
*                              AN INTERRUPT OR 0 FOR ESTAI.  FOR FRRS           
*                              INITIALIZED TO REGISTERS AT TIME OF              
*                              ERROR.  THIS REGISTER AREA IS USED TO            
*                              UPDATE REGISTER CONTENTS FOR RETRY IF            
*                              REQUESTED.                          @L4A         
SDWAARS0 DS    F               ACCESS REGISTER 0                   @L4A         
SDWAARS1 DS    F               ACCESS REGISTER 1                   @L4A         
SDWAARS2 DS    F               ACCESS REGISTER 2                   @L4A         
SDWAARS3 DS    F               ACCESS REGISTER 3                   @L4A         
SDWAARS4 DS    F               ACCESS REGISTER 4                   @L4A         
SDWAARS5 DS    F               ACCESS REGISTER 5                   @L4A         
SDWAARS6 DS    F               ACCESS REGISTER 6                   @L4A         
SDWAARS7 DS    F               ACCESS REGISTER 7                   @L4A         
SDWAARS8 DS    F               ACCESS REGISTER 8                   @L4A         
SDWAARS9 DS    F               ACCESS REGISTER 9                   @L4A         
SDWAARSA DS    F               ACCESS REGISTER 10                  @L4A         
SDWAARSB DS    F               ACCESS REGISTER 11                  @L4A         
SDWAARSC DS    F               ACCESS REGISTER 12                  @L4A         
SDWAARSD DS    F               ACCESS REGISTER 13                  @L4A         
SDWAARSE DS    F               ACCESS REGISTER 14                  @L4A         
SDWAARSF DS    F               ACCESS REGISTER 15                  @L4A         
SDWADUCT DS    CL64            DISPATCHABLE UNIT CONTROL TABLE     @L4A         
SDWATEAR DS    XL1             TRANSLATION EXCEPTION ACCESS REGISTER   X        
                               NUMBER in bits 4-7. The first 4 bits    X        
                               might not be 0.                     @LMC         
SDWATEAN EQU   X'0F'           Actual bits for AR number           @LMA         
SDWAXFLG DS    XL1             EXTENDED FLAG AREA                  @L4A         
SDWAINTF EQU   X'80'   ON, SDWAEC2, SDWASRSV, AND SDWAARSV ARE                  
*                      FROM A LINKAGE STACK ENTRY                  @02C         
SDWATEAV EQU   X'40'   ON, SDWATRAN CONTAINS A VALID ADDRESS       @L8A         
SDWATEIV EQU   X'20'   ON, SDWATRAN CONTAINS A VALID ASID          @L8A         
SDWAESTX EQU   X'10'   ON, IF SDWATYPE = SDWATEST, THE RECOVERY    @LEA         
*                      ROUTINE WAS ESTABLISHED VIA ESTAEX          @LEA         
SDWATEPC EQU   X'08'   ON, SDWATRAN CONTAINS A VALID PC number     @LIA         
SDWATIRR EQU   X'04'   On, if SDWATYPE = SDWATARR, the recovery                 
*                      routine was established via IEAARR          @PLA         
SDWASVAL EQU   X'02'   On, the state of SDWASRBS is valid          @PNA         
SDWARELEASECODEVALID EQU X'01'  On, indicates that the abended RB               
*                      level was interrupted for RTM processing after           
*                      it had been Released but before it could regain          
*                      control, and that SdwaReleaseCode contains its           
*                      Release code.  This bit (and SdwaReleaseCode)            
*                      is propagated upon percolation to another                
*                      recovery routine                            @07A         
SDWASFLG DS    XL1     SUBSPACE FLAG AREA                          @LGA         
SDWASVLD EQU   X'80'   ON IF SUBSPACE INFORMATION AT TIME OF ERROR              
*                      (SDWASTKN AND SDWASNM) IS AVAILABLE AND VALID            
*                                                                  @LGA         
SDWASSA  EQU   X'40'   ON IF A SUBSPACE WAS ACTIVE AT TIME OF ERROR             
*                                                                  @LGA         
SDWABSA  EQU   X'02'   Indicates that Reduced Authority (set via the            
*                      BSA instruction) is in effect.              @PKA         
SDWASSRS EQU   X'01'   TURNED ON BY AN ESTAE-TYPE RECOVERY ROUTINE              
*                      TO INDICATE THAT RTM SHOULD RESTORE ITS ORIGINAL         
*                      SUBSPACE ENVIRONMENT IF IT RECURSES         @LGA         
SDWAARCH DS    B               Copy of FLCARCH                     @PHC         
SDWAZARC EQU   X'01'           Copy of PSAZARCH                    @PHA         
SDWAESAM EQU   X'01'           Copy of PSAZARCH                    @PHA         
SDWAPRM2 DS    0CL8            ARR MSTA AREA COPY                  @L4A         
SDWAMST1 DS    0CL4            1ST WORD OF MSTA AREA               @L4A         
SDWAPCEP DS    CL4             PC ESTAE PARAM VALUE                @L4A         
SDWAMST2 DS    0CL4            2ND WORD OF MSTA AREA               @L4A         
SDWAPCEA DS    CL4             PC ESTAE PARAM ALET VALUE           @L4A         
SDWALSED DS    F               PTR TO LINKAGE STK ENTRY (CR15)     @D2C         
SDWACLSE DS    CL4     Copy of PSACLHSE (Locks Held String Extension)           
*                      at the time of error, minus any locks that have          
*                      been released by FRR recovery routines that ran          
*                      before the current recovery routine.                     
*                      This field was always '0' on entry to Estae-type         
*                      recovery routines prior to HBB7770          @LRC         
SDWALSLV DS    XL2             FOR RETRY: NUMBER OF BAKR ENTRIES PAST  -        
                               TIME-OF-SET TO SET LINKAGE STACK ON     -        
                               RETRY. IGNORED FOR FRR IF RETRY=ERROR   -        
                                                                   @PAC         
SDWARTAM DS    X       Retry Amode: 0 = "normal", 1 = AMODE 24,        -        
                       2 = AMODE 31, 3 = AMODE 64                  @LxA         
SDWARASR EQU  0        Retry using default AMODE system rules      @06A         
SDWARA24 EQU  1        Retry to AMODE 24 specifically              @06A         
SDWARA31 EQU  2        Retry to AMODE 31 specifically              @06A         
SDWARA64 EQU  3        Retry to AMODE 64 specifically              @06A         
         DS    CL1             RESERVED                            @LxC         
SDWASTKN DS    CL8     STOKEN OF THE SUBSPACE AT TIME OF ERROR - VALID          
*                      ONLY IF SDWASVLD IS ON, NOT AVAILABLE FOR FRRS           
*                                                                  @LGA         
SDWASNM  DS    CL8     NAME OF THE SUBSPACE AT TIME OF ERROR - VALID            
*                      ONLY IF SDWASVLD IS ON, NOT AVAILABLE FOR FRRS           
*                                                                  @LGA         
SDWASNAM DS    CL8     Name of the SYSTEM that this record was created          
*                      on.  This is the same system name that is used           
*                      in a SYSPLEX.                               @05A         
*    THE LENGTH MUST BE UPDATED IF ADDITIONS ARE MADE HERE         @L4A         
SDWASEND DS   0D       END OF SERV EXTENSION OF SDWA           @G388P2F         
*                                                                               
**********************************************************************          
*           EXTENSION FOR THE IO MACHINE CHECK ADDITIONAL DATA.      *          
*           THIS EXTENSION IS RECORDED.                      @G860P1C*          
**********************************************************************          
SDWARC2  DSECT ,       POINTED TO BY SDWAXIOM                  @G860P1C         
SDWAIOMA DS   0CL16    ADDITIONAL IO MACHINE CHECK DATA        @G860P1C         
SDWARFSE DS   0CL8     FSA                                         @LIC         
SDWARFSH DS   CL4      High half of FSA (zero pre-z/Architecture)  @LIA         
SDWARFSL DS   CL4      Low half of FSA                             @LIA         
SDWAMCIC DS   CL8      MACHINE CHECK INTERRUPT CODE            @G860P1C         
SDWAIEND DS   0D       END OF SDWAIOMA EXTENSION OF SDWA       @G860P1C         
*                                                                               
**********************************************************************          
*           EXTENSION FOR THE ADDITIONAL FRELOCK DATA.               *          
*           THIS EXTENSION IS RECORDED.                      @G860P1C*          
**********************************************************************          
SDWARC3  DSECT ,       POINTED TO BY SDWAXLCK                      @L1C         
SDWAFLCK DS   0CL32    ADDITIONAL FRELOCK DATA                 @G860P1C         
SDWAFLK1 DS   B        FLAGS INDICATING WHAT LOCKS ARE TO      @G860P1C         
*                      BE FREED                                @G860P1C         
SDWAFCPU EQU  X'80'    ON, FREE THE CPU LOCK                   @G860P1S         
SDWAFRSM EQU  X'08'    ON, FREE THE RSM LOCK                   @G860P1S         
SDWAFTRC EQU  X'04'    ON, FREE THE TRACE LOCK                 @G860P1S         
SDWAIOCB EQU  X'02'    ON, THE IOS LOCK                            @P4M         
SDWAFLK2 DS   B        FLAGS INDICATING WHAT LOCKS ARE TO      @G860P1C         
*                      BE FREED                                @G860P1C         
SDWAFRSC EQU  X'10'    ON, FREE THE RSM COMMON CLASS LOCK      @G860P1S         
SDWAFRSG EQU  X'08'    ON, FREE THE RSM GLOBAL CLASS LOCK      @G860P1S         
SDWAFVSF EQU  X'04'    ON, FREE THE VSM FIX LOCK               @G860P1S         
SDWAFASG EQU  X'02'    ON, FREE THE ASM GLOBAL CLASS LOCK      @G860P1S         
SDWAFRSS EQU  X'01'    ON, FREE THE RSM STEAL CLASS LOCK       @G860P1S         
SDWAFLKE DS   0CL4     FLAGS INDICATING LOCKS TO BE FREED          @L9C         
SDWAFLE1 DS   CL1      FLAGS FOR LOCKS TO BE FREED IN FIRST BYTE OF    X        
                       EXTENSION                                   @L9A         
SDWABLSD EQU  X'80'    ON, FREE THE BMFLSD LOCK                    @LCA         
SDWAXDS  EQU  X'40'    ON, FREE THE XCFDS LOCK                     @LBA         
SDWAXRES EQU  X'20'    ON, FREE THE XCFRES LOCK                    @LBA         
SDWAXQ   EQU  X'10'    ON, FREE THE XCFQ LOCK                      @LBA         
SDWAESET EQU  X'08'    ON, FREE THE ETRSET LOCK                    @LAA         
SDWAIXSC EQU  X'04'    ON, FREE THE IXLSCH  LOCK                   @LFA         
SDWAIXSR EQU  X'02'    ON, FREE THE IXLSHR  LOCK                   @LFA         
SDWAIXDS EQU  X'01'    ON, FREE THE IXLDS   LOCK                   @LFA         
SDWAFLE2 DS   CL1      FLAGS FOR LOCKS TO BE FREED IN SECOND BYTE OF   X        
                       EXTENSION                                   @L9A         
SDWAIXSH EQU  X'80'    ON, FREE THE IXLSHELL LOCK                  @LFA         
SDWAULUT EQU  X'40'    ON, FREE THE IOSULUT LOCK                   @LDA         
SDWAIXRE EQU  X'20'    ON, FREE THE IXLREQST LOCK                  @03A         
SDWAWLMR EQU  X'10'    On, free the WLMRES lock                    @PFC         
SDWAWLMQ EQU  X'08'    On, free the WLMQ lock                      @PEC         
SDWACNTX EQU  X'04'    On, free the CONTEXT lock                   @PFC         
SDWARGSV EQU  X'02'    On, free the REGSRV lock                    @LJA         
SDWASSD  EQU  X'01'    On, free the SSD lock                       @LLA         
SDWAFLE3 DS   CL1      FLAGS FOR LOCKS TO BE FREED IN THIRD BYTE OF    X        
                       EXTENSION                                   @L9A         
SDWAGRSI EQU  X'80'    On, free the GRSINT lock                    @LOA         
SDWAMISL EQU  X'40'    On, free the MISC lock                      @LWA         
SDWASLK1 EQU  X'40'    N/A                                         @LWC         
SDWADNU2 EQU  X'20'    N/A                                         @LWA         
SDWANLK1 EQU  X'20'    N/A                                         @LWC         
SDWADNU3 EQU  X'10'    N/A                                         @LWA         
SDWAOLK1 EQU  X'10'    N/A                                         @LWC         
SDWADNU4 EQU  X'08'    N/A                                         @LWA         
SDWAXLK1 EQU  X'08'    N/A                                         @LWC         
SDWADNU5 EQU  X'04'    N/A                                         @LWA         
SDWARLK3 EQU  X'04'    N/A                                         @LWC         
SDWARLK2 EQU  X'02'    On, free the HCWDRLK2 lock                  @LPA         
SDWARLK1 EQU  X'01'    On, free the HCWDRLK1 lock                  @LPA         
SDWAFLE4 DS   CL1      FLAGS FOR LOCKS TO BE FREED IN FOURTH BYTE OF   X        
                       EXTENSION                                   @L9A         
SDWASRME EQU  X'80'    On, free the SRMENQ lock                    @LTA         
SDWASSDG EQU  X'40'    On, free the SSDGROUP lock                  @LYA         
         DS   CL2      RESERVED                                    @L9A         
SDWALRSG DS   F        LOCKWORD ADDR FOR THE RSMGL  LOCK       @G860P1C         
SDWALASG DS   F        LOCKWORD ADDR FOR THE ASMGL  LOCK       @G860P1C         
SDWALRSS DS   F        LOCKWORD ADDR FOR THE RSMST  LOCK       @G860P1C         
SDWALRSX DS   F        LOCKWORD ADDR FOR THE RSMXM  LOCK       @G860P1C         
SDWALRSA DS   F        LOCKWORD ADDR FOR THE RSMAD  LOCK       @G860P1C         
SDWALRSC DS   F        LOCKWORD ADDR FOR THE RSMCM  LOCK       @G860P1S         
SDWALEND DS   0D       END OF SDWAFLCK EXTENSION OF SDWA       @G860P1C         
*                                                                               
**********************************************************************          
* SDWARC4 - Extension for 64-bit related information.                *          
*           For FRRs, this extension is always present.              *          
*           For ESTAE-type recovery, this extension is present       *          
*           ONLY when the SDWA is above 16M. Be sure to check        *          
*           for a non-zero SDWAXEME before accessing it from         *          
*           ESTAE-type recovery]]]  This extension is recorded   @LIA*          
**********************************************************************          
SDWARC4  DSECT ,       Pointed to by SDWAXEME                      @LIA         
SDWAG64 DS 0CL128      64-bit GPRs - initially contains registers at   X        
                       the time of error.  When SDWAUP64 or SDWAG64R   *        
                       are on, these have been set to contain the      *        
                       requested retry registers and SDWAGRSV and      *        
                       SDWAG64H should be used for the time of error   *        
                       register contents.                          @PSC*        
                       When the error was a program interrupt within   *        
                       transactional execution, these are the regs     *        
                       at the time of the program interrupt within the *        
                       transaction.                                @LUC         
SDWATX_PITDB_G64 DS 0CL128 Same as SDWAG64                         @LZA         
SDWAG6400 DS   D       Register 0                                  @LIA         
SDWAG6401 DS   D       Register 1                                  @LIA         
SDWAG6402 DS   D       Register 2                                  @LIA         
SDWAG6403 DS   D       Register 3                                  @LIA         
SDWAG6404 DS   D       Register 4                                  @LIA         
SDWAG6405 DS   D       Register 5                                  @LIA         
SDWAG6406 DS   D       Register 6                                  @LIA         
SDWAG6407 DS   D       Register 7                                  @LIA         
SDWAG6408 DS   D       Register 8                                  @LIA         
SDWAG6409 DS   D       Register 9                                  @LIA         
SDWAG6410 DS   D       Register 10                                 @LIA         
SDWAG6411 DS   D       Register 11                                 @LIA         
SDWAG6412 DS   D       Register 12                                 @LIA         
SDWAG6413 DS   D       Register 13                                 @LIA         
SDWAG6414 DS   D       Register 14                                 @LIA         
SDWAG6415 DS   D       Register 15                                 @LIA         
         DS    CL1     Reserved                                    @07A         
SDWARELEASECODE DS CL3 Release code when the abended RB level was               
*                      interrupted for RTM processing after it had              
*                      been Released but before it could regain                 
*                      control.  This field is valid only when                  
*                      SdwaReleaseCodeValid is on.  For a Pause                 
*                      multiple, contains the highest Release code              
*                      at the time of the abend                    @LYC         
         DS    CL4     Reserved                                    @07C         
SDWAG64H DS   0CL64    High order halves of the time of error          *        
                       64-bit registers.  The low order halves are     *        
                       in SDWAGRSV.  Also see SDWAG64.             @PSC*        
                       When the error was a program interrupt within   *        
                       transactional execution, these are the regs     *        
                       at the time of the program interrupt within the *        
                       transaction.                                @LUC         
SDWATX_PITDB_G64H DS CL64 Same as SDWAG64H                         @LZA         
SDWAC64S DS   0CL128   z/Architecture CRs at time of error         @LIA         
SDWAC640 DS    CL8     z/Architecture CR0 at time of error         @LMA         
SDWAC641 DS    CL8     z/Architecture CR1 at time of error         @LMA         
SDWAC642 DS    CL8     z/Architecture CR2 at time of error         @LMA         
SDWAC64_XM DS 0CL16    z/Architecture CR3/CR4 at time of error     @LMA         
SDWAC643 DS   0CL8     z/Architecture CR3 at time of error         @LMA         
         DS    CL4                                                 @LMA         
SDWAC643_KM DS CL2     Key Mask                                    @LMA         
SDWAC643_SASID DS CL2  Secondary ASID                              @LMA         
SDWAC644 DS   0CL8     z/Architecture CR4 at time of error         @LMA         
         DS    CL4                                                 @LMA         
SDWAC644_AX DS CL2     Authorization index                         @LMA         
SDWAC644_PASID DS CL2  Primary ASID                                @LMA         
SDWAC645 DS    CL8     z/Architecture CR5 at time of error         @LMA         
SDWAC646 DS    CL8     z/Architecture CR6 at time of error         @LMA         
SDWAC647 DS    CL8     z/Architecture CR7 at time of error         @LMA         
SDWAC648 DS    CL8     z/Architecture CR8 at time of error         @LMA         
SDWAC649 DS    CL8     z/Architecture CR9 at time of error         @LMA         
SDWAC64A DS    CL8     z/Architecture CRA at time of error         @LMA         
SDWAC64B DS    CL8     z/Architecture CRB at time of error         @LMA         
SDWAC64C DS    CL8     z/Architecture CRC at time of error         @LMA         
SDWAC64D DS    CL8     z/Architecture CRD at time of error         @LMA         
SDWAC64E DS    CL8     z/Architecture CRE at time of error         @LMA         
SDWAC64F DS    CL8     z/Architecture CRF at time of error         @LMA         
SDWATRNE DS   0CL8     8-byte TEA                                  @M0C         
SDWATRNEHIGH DS CL4    8-byte TEA upper half                       @M0A         
SDWATRNELOW  DS CL4    8-byte TEA lower half                       @M0A         
SDWABEA  DS    CL8     Breaking Event Address                      @LNA         
SDWAPSW16 DS  0CL16    16-byte PSW analog of SDWAEC1.                  *        
                       When the error was a program interrupt within   *        
                       transactional execution, this is the PSW        *        
                       at the time of the program interrupt within the *        
                       transaction.                                @LUC         
*                      When the initial error was a program interrupt  *        
                       handled by an ESPIE routine that specified both *        
                       EPIEPERC and EPIERSET, the program mask in this *        
                       field is the program mask that resulted from    *        
                       the ESPIE RESET rather than the value at the    *        
                       time of error.                              @0AA         
SDWATX_PITDB_PSW16 DS CL16 Same as SDWAPSW16                       @LZA         
SDWAEEND DS   0D       End of 64-bit extension of the SDWA         @LIA         
*                                                                               
**********************************************************************          
* SDWARC5 - Extension for things that do not go into the             *          
*           dump header record but instead into an RTM               *          
*           component record.                                        *          
*           For FRRs, this extension is always present.              *          
*           For ESTAE-type recovery, this extension is present       *          
*           ONLY when the SDWA is above 16M. Be sure to check        *          
*           for a non-zero SDWAXRC5 before accessing it from         *          
*           ESTAE-type recovery unless you know that the SDWA        *          
*           is above 16M. This extension is recorded.            @LIA*          
**********************************************************************          
SDWARC5  DSECT ,       Pointed to by SDWAXRC5                      @LUA         
SDWATX_ABORT_G64 DS 0CL128 Transaction abort G64.                  @LZA         
*                      64-bit GPRs 0-15 in order.                               
*                      This data is valid only when bits                        
*                      SDWAPCHK and SDWAPTX1 are on,                            
*                      indicating that the                                      
*                      program interrupt occurred while within                  
*                      transactional execution                     @LUA         
SDWATXG64  DS CL128    Same as SDWATX_ABORT_G64                                 
SDWATX_ABORT_PSW16 DS 0CL16 Transaction abort PSW.                 @LZA         
*                      This data is valid only when bits                        
*                      SDWAPCHK and SDWAPTX1 are on,                            
*                      indicating that the                                      
*                      program interrupt occurred while within                  
*                      transactional execution.                    @LUA         
*                      When the initial error was a program interrupt  *        
                       handled by an ESPIE routine that specified both *        
                       EPIEPERC and EPIERSET, the program mask in this *        
                       field is the program mask that resulted from    *        
                       the ESPIE RESET rather than the value at the    *        
                       time of error.                              @0AA         
SDWATXPSW16 DS CL16    Same as SDWATX_ABORT_PSW16                               
SDWA5END DS    0D      End of SDWARC5                              @LUA         
**********************************************************************          
*                                                                    *          
* SDWAPTRS - pointers to the SDWA extensions.  This ptr section      *          
*            must be of doubleword length (multiple of 8) and all    *          
*            extensions must also be of doubleword length            *          
*                                                                    *          
**********************************************************************          
SDWAPTRS DSECT ,       POINTED TO BY SDWAXPAD                  @G381P2F         
SDWADSRP DS   A        ADDR DUMP STORAGE RANGES PTR. - SDWANRC1    @L1C         
SDWASRVP DS   A        ADDR ADDITIONAL COMP SERV DATA - SDWARC1    @L1C         
SDWAXIOM DS   A        ADDR OF I/O MACHINE CHECK AREA - SDWARC2    @L1C         
SDWAXSPL DS   A        ADDR OF STORAGE SUBPOOLS AREA - SDWANRC2    @L1C         
SDWAXLCK DS   A        ADDR ADDITIONAL FRELOCK DATA - SDWARC3      @01M         
SDWADSPP DS   A        DATA SPACE STORAGE RANGES POINTER - SDWANRC3    X        
                                                                   @L7C         
SDWAXEME DS   A        Addr 64-bit information - SDWARC4           @LIA         
SDWAXRC5 DS   A        Addr SDWARC5                                @LUA         
SDWAPEND DS   0D       END OF PTRS EXTENSION OF SDWA           @G38FP2F         
*                                                                               
**********************************************************************          
*           EXTENSION FOR THE LIST OF DUMP STORAGE RANGES.           *          
*           THIS EXTENSION IS NOT RECORDED.                      @L4A*          
**********************************************************************          
SDWANRC1 DSECT ,       NONRECORDABLE EXTENSION, BASED SDWADSRP @G381P2F         
SDWADSR  DS   CL240    DUMP STORAGE RANGES                     @G382P2F         
SDWAREND DS   0D       END OF DSR EXTENSION OF SDWA            @G382P2F         
*                                                                               
**********************************************************************          
*           EXTENSION FOR THE LIST OF STORAGE SUBPOOLS.              *          
*           THIS EXTENSION IS NOT RECORDED AND IS NOT ALLOCATED      *          
*           FOR SUPER FRR STACKS.                            @G860P1C*          
**********************************************************************          
SDWANRC2 DSECT ,       POINTED TO BY SDWAXSPL                  @G860P1C         
SDWASPMX EQU  7        MAX NUMBER OF SUBPOOLS ON DUMPOPT       @G860P1C         
SDWASPLE DS   0CL16    UP TO 7 SUBPOOLS OF STORAGE TO BE       @G860P1C         
*                      DUMPED BY ABDUMP                        @G860P1C         
SDWASPLN DS   H        NUMBER OF SUBPOOLS TO BE DUMPED         @G860P1C         
SDWASPLS DS   7H       IDS OF SUBPOOLS TO BE DUMPED            @G860P1C         
SDWASEN  DS   0D       END OF SDWASPLS EXTENSION OF SDWA       @G860P1C         
*                                                                               
**********************************************************************          
*           EXTENSION FOR THE LIST OF DUMPOPX STORAGE RANGES.        *          
*           THIS EXTENSION IS NOT RECORDED.                      @L7A*          
**********************************************************************          
*                                                                               
SDWANRC3 DSECT ,       DUMPOPX EXTENSION, POINTED TO BY SDWADSPP  @L7A          
SDWADXSL DS    0CL240              LIST OF DUMPOPX RANGES         @L7A          
SDWADXSR DS    15CL16              DUMPOPX RANGE (UP TO 15)       @L7A          
SDWADEND DS    0D                                                 @L7A          
SDWADXMX EQU   15      UP TO 15 DATA SPACE STORAGE RANGES MAY BE       X        
                       SPECIFIED                                  @L7A          
*                                                                               
SDWALEN  EQU  SDWAEND-SDWA  LENGTH OF SDWA                                      
SDWAPLEN EQU  SDWAPEND-SDWAPTRS  LENGTH OF PTRS EXTENSION      @G381P2F         
SDWARLEN EQU  SDWAREND-SDWANRC1  LENGTH OF DSR EXTENSION       @G382P2F         
SDWACLEN EQU  SDWASEND-SDWARC1   LENGTH OF SERV EXTENSION      @G388P2F         
SDWAILEN EQU  SDWAIEND-SDWARC2   LENGTH OF IOMA EXTENSION      @G860P1C         
SDWALLEN EQU  SDWALEND-SDWARC3   LENGTH OF FRELOCK EXTENSION   @G860P1C         
SDWASPL  EQU  SDWASEN-SDWANRC2   LENGTH OF SUBPOOL EXTENSION   @G860P1C         
SDWADLEN EQU  SDWADEND-SDWANRC3  LENGTH OF EXTENSION FOR DATA SPACE    X        
                                  RANGES                           @L7A         
SDWANLNS EQU  SDWARLEN+SDWASPL+SDWADLEN Non-recordable extensions  @LIA         
SDWAELEN EQU  SDWAEEND-SDWARC4  Length of z/Architecture extension @LIA         
SDWARC5L EQU  SDWA5END-SDWARC5  Length of SDWARC5                  @LUA         
SDWARLNS EQU  SDWACLEN+SDWAILEN+SDWALLEN+SDWAELEN+SDWARC5L         @LUC         
SDWAMLNP EQU  SDWALEN+SDWACLEN+SDWAILEN+SDWALLEN+SDWAELEN+SDWARC5L @LUC         
SDWAMLEN EQU  SDWAMLNP+SDWAPLEN                                    @LIC         
*             Total length of SDWA with only recordable            @LIC         
*             extensions. This is a super stack SDWA.              @LIC         
SDWATLEN EQU  SDWAMLEN+SDWANLNS                                    @LIC         
*             Total length of SDWA with all extensions             @LIC         
*             This is a normal stack SDWA                          @LIC         
SDWAOLEN EQU  SDWATLEN-SDWAELEN-SDWARC5L                           @LUC         
*             Total length of SDWA with all extensions except RC4  @LIA         
*             and RC5.                                             @LIA         
*             This is an RTM2 below-16M SDWA                       @LIA         
SDWASLEN EQU  SDWAMLEN+272                                         @LIC         
*             Getmain length for super stack FRR SDWA          @G860P1C         
SDWAFLEN EQU  SDWASLEN+SDWANLNS                                    @LIC         
*             Getmain length for normal stack FRR SDWA         @G860P1S         
*                                                                               
         AIF  ('&GR32' EQ 'YES').SDWANOPR_ATTR1A                   @LQA         
SDWANOPR EQU  0                 THIS FIELD IS ONLY DEFINED IN                   
*                               ASSEMBLER VERSION OF THE SDWA. ITS              
*                               PURPOSE IS TO FLAG INCOMPATIBLE USE             
*                               OF SETRP AND SDWA.             @G38AP2F         
         AGO  .SDWANOPR_ATTR1B                                     @LQA         
.SDWANOPR_ATTR1A ANOP                                              @LQA         
SDWANOPR EQU  0,,,,GR32         THIS FIELD IS ONLY DEFINED IN                   
*                               ASSEMBLER VERSION OF THE SDWA. ITS              
*                               PURPOSE IS TO FLAG INCOMPATIBLE USE             
*                               OF SETRP AND SDWA.             @G38AP2F         
.SDWANOPR_ATTR1B ANOP                                              @LQA         
         AIF ('&VRAMAP' EQ 'NO').SDWA011  IF NO IHAVRA WANTED @G81EP11          
         EJECT                                                @G81EP11          
         IHAVRA                                               @G81EP11          
.SDWA011 ANOP          LABEL TO SKIP IHAVRA (WHEN VRAMAP=NO)  @G81EP11          
         AIF ('&DSECT' NE 'YES').SDWA012                      @G81EP11          
.*                      THE FOLLOWING DSECT LINE IS TO         @ZMB0065         
.*                      ALLOW A USER SPECIFIED ORG TO          @ZMB0065         
.*                      ADDRESS FIELDS IN THE SDWA             @ZMB0065         
SDWA     DSECT ,                                               @ZMB0065         
.SDWA012 ANOP                                                  @ZMB0065         
         MEND  ,   */                                                           
*%SDWABSL  :  ;                                                                 
*%IF SDWALVL ^= '' %THEN                                                        
*  %GOTO SDWABSL2;                                                              
* %IF IHAVIA='YES' %THEN                  /*                     @L4A*/         
*    %IHAALET='VIA(SDWAALET)';            /*                     @L4A*/         
* %ELSE %IHAALET='';                      /*                     @L4A*/         
*DECLARE                                                                        
*  1 SDWA   IHAALET BASED(SDWAPTR),       /*                     @L4C*/         
*%GOTO SDWABSL3;                                                                
*%SDWABSL2: ;                                                                   
*  SDWALVL SDWA,                                                                
*%SDWABSL3: ;                                                                   
*   6 SDWAPARM    PTR(31),              /* PARAMETER LIST ADDRESS               
*                                          IF (E)STA MACRO                      
*                                          SPECIFIED PARAM OPTION               
*                                          OR 0. FOR FRRS THIS IS THE           
*                                          ADDRESS OF THE 6 WORD PARM           
*                                          AREA RETURNED BY THE SETFRR          
*                                          MACRO WHEN THE PARMAD                
*                                          KEYWORD IS SPECIFIED ON THE          
*                                          ON THE SETFRR MACRO.                 
*                      FOR AN ARR, THIS IS THE ADDRESS OF THE 8-BYTES           
*                       OF THE MSTA AREA.                                       
*                      FOR ESTAEX, THIS IS THE ADDRESS OF 8-BYTES               
*                      CONTAINING THE ADDRESS AND ALET OF THE                   
*                      PARAMETER LIST.                                          
*                      For a recovery routine that gets control                 
*                      in AMODE 64, it is the address of 8-bytes                
*                      that contains the 64-bit address of the                  
*                      parameter list                                */         
*   6 SDWAFIOB    PTR(31),              /* ADDRESS OF PURGE I/O                 
*                                          REQUEST LIST (PIRL),                 
*                                          OR 0 IF HALT I/O IS                  
*                                          REQUESTED ON ENTRY TO                
*                                          RETRY ROUTINE FOR (E)STA. */         
*    7 SDWAABCC   CHAR(4),              /* ABEND COMPLETION CODE                
*                                          ON ENTRY TO EXIT ROUTINE  */         
*     8 SDWACMPF   CHAR(1),             /* FLAG BITS IN COMPLETION              
*                                          CODE.                     */         
*      9 SDWAREQ    BIT(1),             /* ON,                                  
*                                          SYSABEND/SYSMDUMP/SYSUDUMP           
*                                          DUMP TO BE GIVEN.                    
*                                          SET IF DUMP=YES REQUESTED            
*                                          ON ABEND, CALLRTM, OR                
*                                          SETRP MACRO.              */         
*      9 SDWASTEP   BIT(1),             /* ON, JOBSTEP TO BE                    
*                                          TERMINATED.SET IF                    
*                                          STEP OPTION SPECIFIED                
*                                          ON ABEND MACRO.           */         
*      9 *          BIT(1),             /* INDICATES VALID ADDRESS IN           
*                                          R0 FOR DUMPOPTS       @L1C*/         
*      9 SDWASTCC   BIT(1),             /* ON, IMPLIES MEMORY TERM-             
*                                          INATION VIA SVC 13    @L1C*/         
*      9 *          BIT(1),             /* USED BY SVC 13 FOR NORMAL            
*                                          END-OF-TASK           @L1C*/         
*      9 SDWARCF    BIT(1),             /* ON, REASON CODE SUPPLIED             
*                                          ON ENTRY TO RTM   @G860P1C*/         
*      9 *          BIT(2),             /* RESERVED          @G860P1C*/         
*     8 SDWACMPC   CHAR(3),             /* SYSTEM COMPLETION CODE               
*                                          (FIRST 12 BITS) AND USER             
*                                          COMPLETION CODE (SECOND              
*                                          12 BITS).                 */         
*   6 SDWACTL1     CHAR(8) BDY(WORD),   /* BC MODE PSW AT TIME OF               
*                                          ERROR. NOT INITIALIZED               
*                                          FOR FRRS.                 */         
*    7 SDWACMKA     CHAR(1),            /* CHANNEL INTERRUPTS MASKS  */         
*     8 SDWAIOA     BIT(7),             /* I/O INTERRUPTS (ALL                  
*                                          ZEROS OR ALL ONES).       */         
*     8 SDWAEXTA    BIT(1),             /* EXTERNAL INTERRUPT.       */         
*    7 SDWAMWPA    CHAR(1),             /* PSW KEY AND 'M-W-P'.      */         
*     8 SDWAKEYA    BIT(4),             /* PSW KEY                   */         
*     8 *           BIT(1),             /* RESERVED                  */         
*     8 SDWAMCKA    BIT(1),             /* MACHINE CHECK INTERRUPT   */         
*     8 SDWAWATA    BIT(1),             /* WAIT STATE.               */         
*     8 SDWASPVA    BIT(1),             /* SUPERVISOR/PROBLEM-                  
*                                          PROGRAM MODE.             */         
*    7 SDWAINTA    CHAR(2),             /* INTERRUPT CODE (LAST 2               
*                                          BYTES OF INTERRUPT CODE              
*                                          IF I/O INTERRUPT).        */         
*    7 SDWAPMKA    CHAR(1),             /* INSTRUCTION LENGTH CODE,             
*                                          CONDITION CODE, AND                  
*                                          PROGRAM MASKS.            */         
*     8 SDWAILA     BIT(2),             /* INSTRUCTION LENGTH CODE   */         
*     8 SDWACCA     BIT(2),             /* LAST CONDITION CODE       */         
*     8 SDWAFPA     BIT(1),             /* FIXED-POINT OVERFLOW      */         
*     8 SDWADOA     BIT(1),             /* DECIMAL OVERFLOW          */         
*     8 SDWAEUA     BIT(1),             /* EXPONENT UNDERFLOW        */         
*     8 SDWASGA     BIT(1),             /* SIGNIFANCE                */         
*    7 SDWANXTA    PTR(24),             /* ADDRESS OF NEXT                      
*                                          INSTRUCTION                          
*                                          TO BE EXECUTED            */         
*   6 SDWACTL2    CHAR(8) BDY(WORD),    /* BC MODE PSW FROM LAST                
*                                          PRB ON RB CHAIN.                     
*                                          ZERO FOR FRRS.            */         
*    7 SDWACMKP    CHAR(1),             /* CHANNEL INTERRUPTS MASKS  */         
*     8 SDWAIOP     BIT(7),             /* I/O INTERRUPTS (ALL                  
*                                          ZEROS OR ALL ONES).       */         
*     8 SDWAEXTP    BIT(1),             /* EXTERNAL INTERRUPT.       */         
*    7 SDWAMWPP    CHAR(1),             /* PSW KEY AND 'M-W-P'.      */         
*     8 SDWAKEYP    BIT(4),             /* PSW KEY                   */         
*     8 *           BIT(1),             /* RESERVED                  */         
*     8 SDWAMCKP    BIT(1),             /* MACHINE CHECK INTERRUPT   */         
*     8 SDWAWATP    BIT(1),             /* WAIT STATE.               */         
*     8 SDWASPVP    BIT(1),             /* SUPERVISOR/PROBLEM-                  
*                                          PROGRAM MODE.             */         
*    7 SDWAINTP    CHAR(2),             /* INTERRUPT CODE (LAST 2               
*                                          BYTES OF INTERRUPT CODE              
*                                          IF I/O INTERRUPT).        */         
*    7 SDWAPMKP    CHAR(1),             /* INSTRUCTION LENGTH CODE,             
*                                          CONDITION CODE, AND                  
*                                          PROGRAM MASKS.            */         
*     8 SDWAILP     BIT(2),             /* INSTRUCTION LENGTH CODE   */         
*     8 SDWACCP     BIT(2),             /* LAST CONDITION CODE       */         
*     8 SDWAFPP     BIT(1),             /* FIXED-POINT OVERFLOW      */         
*     8 SDWADOP     BIT(1),             /* DECIMAL OVERFLOW          */         
*     8 SDWAEUP     BIT(1),             /* EXPONENT UNDERFLOW        */         
*     8 SDWASGP     BIT(1),             /* SIGNIFICANCE              */         
*    7 SDWANXTP    PTR(24),             /* ADDRESS OF NEXT                      
*                                          INSTRUCTION                          
*                                          TO BE EXECUTED            */         
*   6 SDWAGRSV    CHAR(64) BDY(WORD),   /* General purpose                      
*                      registers at time of error.                              
*                      When the error was a program interrupt within            
*                      transactional execution, these are the regs              
*                      at the time of the program interrupt within the          
*                      transaction.                              @LUC*/         
*%IF SYSVERSION = '' %THEN %GOTO SDWAPLS4;                    /* @LZA*/         
*%IF SYSRULESMOD='PL/S-III ' %THEN %GOTO SDWAPLS4;            /* @LZA*/         
*   7 SDWATX_PITDB_GRSV CHAR(64) BDY(WORD), /* Same as SDWAGRSV @LZA*/          
* %SDWAPLS4:;                                                 /* @LZA*/         
*    8 SDWAGR00    FIXED(31),           /* GPR 0.                    */         
*    8 SDWAGR01    FIXED(31),           /* GPR 1.                    */         
*    8 SDWAGR02    FIXED(31),           /* GPR 2.                    */         
*    8 SDWAGR03    FIXED(31),           /* GPR 3.                    */         
*    8 SDWAGR04    FIXED(31),           /* GPR 4.                    */         
*    8 SDWAGR05    FIXED(31),           /* GPR 5.                    */         
*    8 SDWAGR06    FIXED(31),           /* GPR 6.                    */         
*    8 SDWAGR07    FIXED(31),           /* GPR 7.                    */         
*    8 SDWAGR08    FIXED(31),           /* GPR 8.                    */         
*    8 SDWAGR09    FIXED(31),           /* GPR 9.                    */         
*    8 SDWAGR10    FIXED(31),           /* GPR 10.                   */         
*    8 SDWAGR11    FIXED(31),           /* GPR 11.                   */         
*    8 SDWAGR12    FIXED(31),           /* GPR 12.                   */         
*    8 SDWAGR13    FIXED(31),           /* GPR 13.                   */         
*    8 SDWAGR14    FIXED(31),           /* GPR 14.                   */         
*    8 SDWAGR15    FIXED(31),           /* GPR 15.                   */         
*   6 SDWANAME    CHAR(8) BDY(WORD),    /* IF PROBLEM PROGRAM MODE              
*                                          NAME OF ABENDING                     
*                                          PROGRAM, OR ZERO IF NO               
*                                          NAME IS AVAILABLE.                   
*                                          ZERO IF NOT RUNNING                  
*                                          UNDER AN RB.              */         
*    7 SDWARBAD    PTR(31),             /* RB ADDRESS OF ABENDING               
*                                          PROGRAM (IF SUPERVISOR               
*                                          MODE PROGRAM RUNNING UNDER           
*                                          AN RB).                   */         
*    7 *           CHAR(4),             /* CONTAINS ZEROS IF                    
*                                          SUPERVISOR MODE PROGRAM              
*                                          RUNNING UNDER AN RB.                 
*                                          OR IF PROGRAM NOT                    
*                                          RUNNING UNDER AN RB.      */         
*   6 SDWAEPA    PTR(31),               /* ENTRY POINT ADDRESS OF               
*                                          ABENDING PROGRAM.                    
*                                          ZERO IF NOT RUNNING                  
*                                          UNDER AN RB.              */         
*   6 SDWAIOBR   PTR(31),               /* POINTER TO SDWAFIOB FIELD,           
*                                          OR 0 IF NO RETRY,                    
*                                          OR 0 IF HALT I/O                     
*                                          IS REQUESTED FOR (E)STA              
*                                          EXITS. ZERO FOR FRRS.                
*                                                           ICB3777  */         
*   6 SDWAEC1   CHAR(8) BDY(WORD),      /* Extended control PSW at              
*                      time of error (abend).                                   
*                      When the error was a program interrupt within            
*                      transactional execution, this is the PSW                 
*                      at the time of the program interrupt within the          
*                      transaction.                                             
*                      When the initial error was a program interrupt           
*                      handled by an ESPIE routine that specified both          
*                      EPIEPERC and EPIERSET, the program mask in this          
*                      field is the program mask that resulted from             
*                      the ESPIE RESET rather than the value at the             
*                      time of error.                            @0AA*/         
*%IF SYSVERSION = '' %THEN %GOTO SDWAPLS5;                    /* @LZA*/         
*%IF SYSRULESMOD='PL/S-III ' %THEN %GOTO SDWAPLS5;            /* @LZA*/         
*    7 SDWATX_PITDB_EC1 CHAR(8) BDY(WORD), /* Same as SDWAEC1    @LZA*/         
* %SDWAPLS5:;                                                 /* @LZA*/         
*     8 SDWAEMK1    CHAR(1),            /* INTERRUPT INFORMATION                
*                                          MASKS                     */         
*       9 *         BIT(1),             /* RESERVED                  */         
*       9 SDWAPER1   BIT(1),            /* ON,PROGRAM EVENT RECORD-             
*                                          ING INTERRUPTS CAN OCCUR             
*                                          OFF,PROGRAM EVENT RECORD-            
*                                          ING INTERRUPTS CANNOT                
*                                          OCCUR                     */         
*       9 *           BIT(3),           /* RESERVED                  */         
*       9  SDWATRM1   BIT(1),           /* ON,ADDRESS TRANSLATION               
*                                          ACTIVE                    */         
*       9 SDWAIO1    BIT(1),            /* OFF,I/O INTERRUPTIONS                
*                                          CANNOT OCCUR                         
*                                          ON,I/O INTERRUPTIONS CAN             
*                                          OCCUR SUBJECT TO CHANNEL             
*                                          MASK BITS IN CONTROL REGS            
*                                          2 AND 3                   */         
*       9 SDWAEXT1    BIT(1),           /* OFF,EXTERNAL INTERRUPTIONS           
*                                          CANNOT OCCUR                         
*                                          ON,EXTERNAL INTERRUPTIONS            
*                                          CAN OCCUR SUBJECT TO                 
*                                          EXTERNAL SUBCLASS MASK               
*                                          BITS OF CONTROL REGISTER 0*/         
*     8 SDWAMWP1    CHAR(1),            /* PSW KEY AND 'M-W-P'       */         
*       9 SDWAKEY1   BIT(4),            /* PSW KEY                   */         
*       9 SDWAECT1   BIT(1),            /* EXTENDED CONTROL MODE BIT */         
*       9 SDWAMCK1   BIT(1),            /* OFF,MACHINE CHECKS CANNOT            
*                                          OCCUR                                
*                                          ON,MACHINE CHECKS DUE TO             
*                                          SYSTEM DAMAGE AND                    
*                                          INSTRUCTION-PROCESSING               
*                                          DAMAGE CAN OCCUR.  OTHER             
*                                          MACHINE CHECKS SUBJECT TO            
*                                          MASK BITS IN CONTROL                 
*                                          REGISTER 14               */         
*       9 SDWAWAT1     BIT(1),          /* ON,CPU IN WAIT STATE      */         
*       9 SDWAPGM1     BIT(1),          /* ON,PROBLEM STATE                     
*                                          OFF,SUPERVISOR STATE      */         
*     8 SDWAINT1     CHAR(1),           /* CONDITION CODE AND                   
*                                          PROGRAM MASK              */         
*       9 SDWAASCM BIT(2),              /* ADDRESS SPACE CONTROL MODE           
*                                          BITS                                 
*                                          00 - PRIMARY MODE                    
*                                          01 - ACCESS REGISTER MODE            
*                                          10 - SECONDARY MODE                  
*                                          11 - HOME SPACE MODE  @L4A*/         
*        10 SDWAS1    BIT(1),           /* ADDRESS SPACE SELECTION BIT          
*                                                            @G381P2F*/         
*        10 *         BIT(1),           /* RESERVED          @G381P2F*/         
*       9 SDWACC1     BIT(2),           /* CONDITION CODE            */         
*       9 SDWAFPO1    BIT(1),           /* FIXED POINT OVERFLOW      */         
*       9 SDWADEC1    BIT(1),           /* DECIMAL OVERFLOW          */         
*       9 SDWAEXP1    BIT(1),           /* EXPONENT UNDERFLOW        */         
*       9 SDWASGN1    BIT(1),           /* SIGNIFICANCE              */         
*     8 *            CHAR(1),           /* RESERVED                  */         
*     8 SDWANXT1     PTR(31),           /* Address of next instruction          
*                               to be executed.                                 
*                               Bit 31 could be on due to                       
*                               - bad address                                   
*                               - address in SDWAPSW16 above 2G                 
*                        (note that an address above 2G will not                
*                        always result in Bit 31 being turned on)    */         
*       9 SDWAAMF1     CHAR(1),         /* ADDRESSING MODE FLAG                 
*                                                            @G860P1S*/         
*        10 SDWAMOD1     BIT(1),        /* ADDRESSING MODE OF THE NEXT          
*                                          INSTRUCTION TO BE EXECUTED           
*                                                            @G860P1S*/         
*       9 SDWAADD1     PTR(24),         /* INSTRUCTION ADDRESS       */         
*   6 SDWAAEC1       CHAR(8) BDY(WORD), /* ADDITIONAL EC MODE                   
*                                          INFORMATION               */         
*     7 *              CHAR(1),         /* RESERVED                  */         
*     7 SDWAILC1        PTR(8),         /* INSTRUCTION LENGTH CODE              
*                                          FOR PSW DEFINED BY                   
*                                          SDWAEC1 / SDWAPSW16       */         
*       8 *             BIT(5),         /* RESERVED  ALWAYS ZERO     */         
*       8 SDWAIL1       BIT(2),         /* INSTRUCTION LENGTH CODE   */         
*       8 *             BIT(1),         /* RESERVED  ALWAYS ZERO     */         
*     7 SDWAINC1     FIXED(16),         /* INTERRUPT CODE. IF PROGRAM           
*                                          CHECK OCCURRED                       
*                                          THE SUBFIELDS ARE                    
*                                          FURTHER DIVIDED           */         
*       8 SDWAIC1H     FIXED(8),        /* High byte of PI code  @LUA*/         
*         9 * BIT(6),                   /*                       @LUA*/         
*         9 SDWAPTX1 BIT(1),            /* Program interrupt during             
*                          transactional execution               @LUA*/         
*       8 SDWAICD1      PTR(8),         /* 8 BIT INTERRUPT CODE                 
*                                          IF PROGRAM CHECK          */         
*         9 SDWAIPR1   BIT(1),          /* PER INTERRUPT OCCURRED    */         
*         9 SDWAIMC1   BIT(1),          /* MONITOR CALL INTERRUPT               
*                                          OCCURRED                  */         
*         9 SDWAIPC1   BIT(6),          /* AN UNSOLICITED PROGRAM               
*                                          CHECK HAS OCCURRED        */         
*     7 SDWATRAN   PTR(31),             /* VIRTUAL ADDRESS CAUSING              
*                                          TRANSLATION EXCEPTION     */         
*     9 * CHAR(3),                      /* First 3 bytes         @LKA*/         
*     9 SDWADXC FIXED(8),               /* Data exception code when             
*                                          interrupt code 7      @LKA*/         
*     10 SDWAVXC FIXED(8),              /* Vector exception code when           
*                                          interrupt code 1B     @09A*/         
*       11 SDWATB56 BIT(1),             /* Bit 56 of 8-byte TEID.               
*                          When on for interrupt code 4,                        
*                          and bit SDWATB60 is off and bit SDWATB61             
*                          is on, indicates Instruction Execution               
*                          Protection exception                  @M0C*/         
*       11 * BIT(3),                    /*                       @M0A*/         
*       11 SDWATB60 BIT(1),             /* Bit 60 of 8-byte TEID.               
*                          When on for interrupt code 4,                        
*                          and bit SDWATB56 is off and bit SDWATB61             
*                          is on, indicates Access List Control                 
*                          Protection exception                  @M0A*/         
*       11 SDWATB61 BIT(1),             /* Bit 61 of 8-byte TEID.               
*                          When on for interrupt code 4,                        
*                          and bits SDWATB56 and SDWATB60 are off,              
*                          indicates DAT Protection exception    @M0A*/         
*          13 SDWASOPI BIT(1),          /* When on for interrupt code           
*                          4, and bits SDWATB56 and SDWATB60 are off,           
*                          indicates Suppress on Protect         @M0C*/         
*       11 * BIT(2),                    /*                       @LIA*/         
*   6 SDWAEC2    CHAR(8) BDY(WORD),     /* EC MODE PSW OF THE RB LEVEL          
*                                          OR LINKAGE STACK LEVEL               
*                                          WHICH CREATED THE ESTAE              
*                                          EXIT AT THE TIME IT LAST             
*                                          INCURRED AN INTERRUPT                
*                                          OR 0 FOR ESTAI.                      
*                                          OR PSW USED TO GIVE FRR              
*                                          CONTROL               @02C*/         
*     7 SDWAEMK2        CHAR(1),        /* INTERRUPT INFORMATION                
*                                          MASKS                     */         
*       8 *           BIT(1),           /* RESERVED                  */         
*       8 SDWAPER2    BIT(1),           /* ON,PROGRAM EVENT RECORD-             
*                                          ING INTERRUPTS CAN OCCUR             
*                                          OFF,PROGRAM EVENT RECORD-            
*                                          ING INTERRUPTS CANNOT                
*                                          OCCUR                     */         
*       8 *           BIT(3),           /* RESERVED                  */         
*       8 SDWATRM2    BIT(1),           /* ON,ADDRESS TRANSLATION               
*                                          ACTIVE                    */         
*       8 SDWAIO2     BIT(1),           /* OFF,I/O INTERRUPTIONS                
*                                          CANNOT OCCUR                         
*                                          ON,I/O INTERRUPTIONS CAN             
*                                          OCCUR SUBJECT TO CHANNEL             
*                                          MASK BITS IN CONTROL REGS            
*                                          2 AND 3                   */         
*       8 SDWAEXT2    BIT(1),           /* OFF,EXTERNAL INTERRUPTIONS           
*                                          CANNOT OCCUR                         
*                                          ON,EXTERNAL INTERRUPTIONS            
*                                          CAN OCCUR SUBJECT TO                 
*                                          EXTERNAL SUBCLASS MASK               
*                                          BITS OF CONTROL REGISTER 0*/         
*     7 SDWAMWP2    CHAR(1),            /* PSW KEY AND 'M-W-P'       */         
*       8 SDWAKEY2   BIT(4),            /* PSW KEY                   */         
*       8 SDWAECT2   BIT(1),            /* EXTENDED CONTROL MODE BIT */         
*       8 SDWAMCK2   BIT(1),            /* OFF,MACHINE CHECKS CANNOT            
*                                          OCCUR                                
*                                          ON,MACHINE CHECKS DUE TO             
*                                          SYSTEM DAMAGE AND                    
*                                          INSTRUCTION-PROCESSING               
*                                          DAMAGE CAN OCCUR.  OTHER             
*                                          MACHINE CHECKS SUBJECT TO            
*                                          MASK BITS IN CONTROL                 
*                                          REGISTER 14               */         
*       8 SDWAWAT2     BIT(1),          /* ON,CPU IN WAIT STATE      */         
*       8 SDWAPGM2     BIT(1),          /* ON,PROBLEM STATE                     
*                                          OFF,SUPERVISOR STATE      */         
*     7 SDWAINT2     CHAR(1),           /* CONDITION CODE AND                   
*                                          PROGRAM MASK              */         
*       8 SDWAS2      BIT(1),           /* ADDRESS SPACE SELECTION BIT          
*                                                            @G381P2F*/         
*       8 *           BIT(1),           /* RESERVED          @G381P2F*/         
*       8 SDWACC2     BIT(2),           /* CONDITION CODE            */         
*       8 SDWAFPO2    BIT(1),           /* FIXED POINT OVERFLOW      */         
*       8 SDWADEC2    BIT(1),           /* DECIMAL OVERFLOW          */         
*       8 SDWAEXP2    BIT(1),           /* EXPONENT UNDERFLOW        */         
*       8 SDWASGN2    BIT(1),           /* SIGNIFICANCE              */         
*     7 *            CHAR(1),           /* RESERVED                  */         
*     7 SDWANXT2     PTR(31),           /* Address of next instruction          
*                               to be executed.                                 
*                               Bit 31 could be on due to                       
*                               - bad address                                   
*                               - address in SDWAPSW16 above 2G                 
*                        (note that an address above 2G will not                
*                        always result in Bit 31 being turned on)    */         
*       8 SDWAAMF2     CHAR(1),         /* ADDRESSING MODE FLAG                 
*                                                            @G860P1S*/         
*         9 SDWAMOD2     BIT(1),        /* ADDRESSING MODE OF THE NEXT          
*                                          INSTRUCTION TO BE EXECUTED           
*                                                            @G860P1S*/         
*       8 SDWAADD2    PTR(24),          /* INSTRUCTION ADDRESS       */         
*   6 SDWAAEC2     CHAR(8) BDY(WORD),   /* ADDITIONAL EC MODE                   
*                                          INFORMATION               */         
*     7 *             CHAR(1),          /* RESERVED                  */         
*     7 SDWAILC2       CHAR(1),         /* INSTRUCTION LENGTH CODE              
*                                          FOR PSW DEFINED BY SDWAEC2*/         
*       8 *             BIT(5),         /* RESERVED ALWAYS ZERO      */         
*       8 SDWAIL2       BIT(2),         /* INSTRUCTION LENGTH CODE   */         
*       8 *             BIT(1),         /* RESERVED ALWAYS ZERO      */         
*     7 SDWAINC2  FIXED(16),            /* INTERRUPT CODE. IF PROGRAM           
*                                          CHECK OCCURRED                       
*                                          THE SUBFIELDS ARE                    
*                                          FURTHER DIVIDED           */         
*       8 SDWAIC2H     CHAR(1),         /* High byte of PI code  @LUA*/         
*         9 * BIT(6),                   /*                       @LUA*/         
*         9 SDWAPTX2 BIT(1),            /* Program interrupt during             
*                          transactional execution               @LUA*/         
*       8 SDWAICD2      PTR(8),         /* 8 BIT INTERRUPT CODE                 
*                                          IF PROGRAM CHECK          */         
*         9 SDWAIPR2      BIT(1),       /* PER INTERRUPT OCCURRED    */         
*         9 SDWAIMC2      BIT(1),       /* MONITOR CALL INTERRUPT               
*                                          OCCURRED                  */         
*         9 SDWAIPC2      BIT(6),       /* AN UNSOLICITED PROGRAM               
*                                          CHECK OCCURRED            */         
*     7 SDWATRN2   PTR(31),             /* VIRTUAL ADDRESS CAUSING              
*                                          TRANSLATION EXCEPTION     */         
*   6 SDWASRSV  CHAR(64) BDY(WORD),     /* GENERAL PURPOSE                      
*                                          REGISTERS OF THE RB                  
*                                          LEVEL OR LINKAGE STACK               
*                                          LEVEL WHICH CREATED THE              
*                                          ESTAE EXIT AT THE TIME               
*                                          IT LAST INCURRED                     
*                                          AN INTERRUPT                         
*                                          OR 0 FOR ESTAI.                      
*                                          FOR FRRS INITIALIZED TO              
*                                          REGISTERS AT TIME OF                 
*                                          ERROR.  THIS                         
*                                          REGISTER AREA IS USED TO             
*                                          UPDATE REGISTER CONTENTS             
*                                          FOR RETRY IF REQUESTED    */         
*     7 SDWASR00    FIXED(31),          /* GPR 0.                    */         
*     7 SDWASR01    FIXED(31),          /* GPR 1.                    */         
*     7 SDWASR02    FIXED(31),          /* GPR 2.                    */         
*     7 SDWASR03    FIXED(31),          /* GPR 3.                    */         
*     7 SDWASR04    FIXED(31),          /* GPR 4.                    */         
*     7 SDWASR05    FIXED(31),          /* GPR 5.                    */         
*     7 SDWASR06    FIXED(31),          /* GPR 6.                    */         
*     7 SDWASR07    FIXED(31),          /* GPR 7.                    */         
*     7 SDWASR08    FIXED(31),          /* GPR 8.                    */         
*     7 SDWASR09    FIXED(31),          /* GPR 9.                    */         
*     7 SDWASR10    FIXED(31),          /* GPR 10,                   */         
*     7 SDWASR11    FIXED(31),          /* GPR 11.                   */         
*     7 SDWASR12    FIXED(31),          /* GPR 12.                   */         
*     7 SDWASR13    FIXED(31),          /* GPR 13.                   */         
*     7 SDWASR14    FIXED(31),          /* GPR 14.                   */         
*     7 SDWASR15    FIXED(31),          /* GPR 15.                   */         
*   6 SDWAIDNT       CHAR(4),           /* SDWA IDENTIFICATION                  
*                                          AND ATTRIBUTES            */         
*     7 SDWASPID     CHAR(1),           /* SUBPOOL ID OF STORAGE                
*                                          CONTAINING THIS SDWA      */         
*     7 SDWALNTH     CHAR(3),           /* LENGTH OF THIS SDWA IN               
*                                          BYTES                     */         
*   6 SDWAMCH        CHAR(28) BDY(WORD), /*CONTAINS MACHINE CHECK               
*                                          DATA IF SDWAMCHK IS ON    */         
*     7 SDWASTCK       CHAR(8) BDY(WORD),/*BEGINNING AND ENDING                 
*                                          STORAGE CHECK ADDRESSES.             
*                                          FILLED IN DUE TO                     
*                                          STORAGE ERROR (SDWASCK)              
*                                          OR A KEY FAILURE (SDWASKYF)          
*                                          THESE ADDRESSES ARE VALID            
*                                          ONLY IF INDICATED BY THE             
*                                          SDWASRVL FLAG.            */         
*       8 SDWASCKB      PTR(31),        /* BEGINNING VIRTUAL ADDRESS            
*                                          OF STORAGE CHECK          */         
*       8 SDWASCKE      PTR(31),        /* ENDING VIRTUAL ADDRESS               
*                                          OF STORAGE CHECK          */         
*     7 SDWAMCHI       CHAR(2),         /* ADDITIONAL MCH INFORMATION           
*                                          FLAGS                     */         
*       8 SDWAMCHS      CHAR(1),        /* MCH FLAG BYTE             */         
*         9 SDWASRVL     BIT(1),        /* ON,STORAGE ADDRESS                   
*                                          SUPPLIED (SDWASTCK,                  
*                                          SDWARFSA) ARE VALID.                 
*                                  On Z/Architecture system,                    
*                                  SDWARFSA contains                            
*                                  only the low word of the FSA.                
*                                  SDWARFSE contains the 8-byte                 
*                                  FSA.                          @LIC*/         
*         9 SDWARCDF     BIT(1),        /* ON,MACHINE CHECK RECORD              
*                                          NOT RECORDED              */         
*         9 SDWATSVL     BIT(1),        /* ON,TIME STAMP VALID       */         
*         9 SDWAINVP     BIT(1),        /* ON,STORAGE IS RECONFIGURED,          
*                                          PAGE IS INVALIDATED.      */         
*         9 SDWARSRC     BIT(1),        /* ON,STORAGE RECONFIGURATION           
*                                          STATUS AVAILABLE                     
*                                          (SDWARSR1,SDWARSR2)       */         
*         9 SDWARSRF     BIT(1),        /* ON,STORAGE RECONFIGURATION           
*                                          NOT ATTEMPTED (SDWARSR1,             
*                                          SDWARSR2 ARE INVALID )    */         
*         9 SDWAVRIV     BIT(1),        /* ON, INDICATES VECTOR                 
*                                          REGISTERS ARE UNPREDICTABLE          
*                                                                @H1A*/         
*         9 SDWAARGU     BIT(1),        /* ON, INDICATES ACCESS                 
*                                          REGISTERS ARE UNPREDICTABLE          
*                                                                @L5C*/         
*       8 SDWAMCHD     CHAR(1),         /* INPUT INFORMATION                    
*                                          TO RECOVERY ROUTINE CON-             
*                                          CERNING A MACHINE CHECK              
*                                          ERROR                     */         
*         9 SDWASKYF    BIT(1),         /* ON,STORAGE KEY FAILURE    */         
*         9 SDWAREGU    BIT(1),         /* ON,GENERAL PURPOSE REGISTER          
*                                          CONTENTS AT TIME OF MACHINE          
*                                          CHECK UNPREDICTABLE       */         
*         9 SDWAPSWU    BIT(1),         /* ON,PSW AND-OR CONTROL                
*                                          REGISTERS AT TIME OF MACHINE         
*                                          CHECK UNPREDICTABLE       */         
*         9 SDWASCK     BIT(1),         /* ON,STORAGE DATA CHECK     */         
*         9 SDWAACR     BIT(1),         /* ON,INDICATES ACR REQUEST  */         
*         9 SDWAINSF    BIT(1),         /* ON,INSTRUCTION FAILURE    */         
*         9 SDWAFPRX    BIT(1),         /* ON, CONTENTS OF FLOATING             
*                                          POINT REGISTERS                      
*                                          AT TIME OF MACHINE CHECK             
*                                          ARE UNPREDICTABLE         */         
*         9 SDWATERR    BIT(1),         /* ON,TIMER ERROR - CAUSES              
*                                          ENTRY TO RECOVERY ROUTINES           
*                                          ONLY IF LOGOUT FAILED     */         
*     7 SDWACPID     CHAR(2),           /* ID OF FAILING CPU CAUSING            
*                                          ACR                       */         
*     7 SDWARSR1     CHAR(1),           /* ADDITIONAL STORAGE FRAME             
*                                          ERROR INDICATORS AS                  
*                                          RETURNED FROM REAL STORAGE           
*                                          RECONFIGURATION           */         
*       8 *               BIT(2),       /* RESERVED          @G860P1F*/         
*       8 SDWAPREF        BIT(1),       /* PREFERRED FRAME   @G860P1F*/         
*       8 SDWAVRCN        BIT(1),       /* V = R CANDIDATE - CAN GO             
*                                          OFFLINE           @G860P1F*/         
*       8 SDWANSWP        BIT(1),       /* LONG-TERM NON-SWAPPABLE              
*                                          ADDRESS SPACE     @G860P1F*/         
*       8 SDWANSWA        BIT(1),       /* NON-SWAPPABLE ADDRESS                
*                                          SPACE             @G860P1F*/         
*       8 SDWAMSER        BIT(1),       /* STORAGE ERROR ALREADY                
*                                          SET IN FRAME              */         
*       8 SDWACHNG        BIT(1),       /* CHANGE INDICATOR WAS                 
*                                          ON IN FRAME               */         
*     7 SDWARSR2        CHAR(1),        /* ADDITIONAL STORAGE                   
*                                          ERROR INDICATORS.         */         
*       8 SDWAOFLN        BIT(1),       /* FRAME OFFLINE OR                     
*                                          SCHEDULED TO GO OFFLINE              
*                                          IF SDWAINTC IS ON         */         
*       8 SDWAINTC        BIT(1),       /* INTERCEPT                            
*                                          THE FRAME IS SCHEDULED               
*                                          TO GO OFFLINE                        
*                                                OR                             
*                                          THE FRAME HAS INCURRED               
*                                          A STORAGE ERROR                      
*                                          OR IS V=R INTERCEPTED                
*                                                            @G860P1F*/         
*       8 SDWASPER        BIT(1),       /* STORAGE ERROR PERMANENT              
*                                          ON FRAME                  */         
*       8 SDWANUCL        BIT(1),       /* FRAME CONTAINS PERMANENT             
*                                          RESIDENT STORAGE,I.E.                
*                                          NUCLEUS.                  */         
*       8 SDWAFSQA        BIT(1),       /* FRAME IN SQA              */         
*       8 SDWAFLSQ        BIT(1),       /* FRAME IN LSQA             */         
*       8 SDWAPGFX        BIT(1),       /* FRAME IS PAGE FIXED       */         
*       8 SDWAVEQR        BIT(1),       /* FRAME IS VIRTUAL=REAL                
*                                                            @G860P1F*/         
*     7 SDWAMCHO        CHAR(1),        /* OTHER MCH FLAGS       @04A*/         
*       8 SDWASKPR        BIT(1),       /* SKIP RECORDING REQUESTED             
*                                          BY MCH                @04A*/         
*       8 *               BIT(7),       /* RESERVED              @04A*/         
*     7 *               CHAR(1),        /* RESERVED              @04C*/         
*     7 SDWARFSA        PTR(31),        /* REAL STORAGE FAILING                 
*                                          ADDRESS. ( VALID ONLY IF             
*                                          INDICATED BY SDWASRVL )   */         
*     7 SDWATIME        CHAR(8),        /* TIME STAMP OF ASSOCIATED             
*                                          MACHINE CHECK RECORD.     */         
*   6 SDWAFLGS        CHAR(4),          /* INPUT FLAGS DESCRIBING               
*                                          REASONS AND CONDITIONS               
*                                          FOR ENTERING A RECOVERY              
*                                          EXIT ROUTINE              */         
*     7 SDWAERRA     CHAR(1),           /* ERROR TYPE CAUSING ENTRY             
*                                          TO RECOVERY ROUTINE       */         
*       8 SDWAMCHK    BIT(1),           /* ON,MACHINE CHECK          */         
*       8 SDWAPCHK    BIT(1),           /* ON,PROGRAM CHECK          */         
*       8 SDWARKEY    BIT(1),           /* ON,INDICATES CONSOLE                 
*                                          RESTART KEY DEPRESSED     */         
*       8 SDWASVCD    BIT(1),           /* ON,INDICATES TASK ISSUED             
*                                          SVC 13                    */         
*       8 SDWAABTM    BIT(1),           /* ON,INDICATES SYSTEM FORCED           
*                                          SVC 13(ABTERM)            */         
*       8 SDWASVCE    BIT(1),           /* ON,INDICATES AN SVC WAS              
*                                          ISSUED BY A LOCKED OR                
*                                          SRB ROUTINE               */         
*       8 SDWATEXC    BIT(1),           /* ON,INDICATES AN                      
*                                          UNRECOVERABLE TRANSLATION            
*                                          FAILURE                   */         
*       8 SDWAPGIO    BIT(1),           /* ON,INDICATES A PAGE                  
*                                          I/O ERROR                 */         
*         9 SDWASTRM  BIT(1),           /* ON,INDICATES AN RTM1 SERVICE         
*                                          ROUTINE (SUCH AS IEAVTSR1            
*                                          PROCESSING ITERM OR IEAVTRTM         
*                                          PROCESSING STERM) SCHEDULED          
*                                          RTM1 TO CONTINUE PROCESSING          
*                                          AS AN SVC ERROR (BY PUTTING          
*                                          SVC 13 IN THE PSW TO BE              
*                                          DISPATCHED).      @G38AP1F*/         
*     7 SDWAERRB     CHAR(1),           /* ADDITIONAL ERROR ENTRY               
*                                          INFORMATION               */         
*       8 SDWAPDIP    BIT(1),           /* ON INDICATES THAT THIS TASK          
*                                          WAS PARALLEL DETACHED -              
*                                          RECOVERY ROUTINES FOR OTHER          
*                                          TASKS IN THIS ADDRESS SPACE          
*                                          MAY BE EXECUTING AT THE              
*                                          SAME TIME AS THIS RECOVERY           
*                                          ROUTINE               @LHA*/         
*       8 SDWANMFS    BIT(1),     /* Not My Fault Summary -- indicates          
*                           that this abend was received asynchronously         
*                           (from an external source).  SDWANMFS may            
*                           be examined as an alternative to checking           
*                           individual abend codes when deciding                
*                           whether to capture failure documentation            
*                           or retry since when it is on the abend              
*                           generally will not have been the fault of           
*                           the program that received it.  SDWANMFS is          
*                           available to Estae-type recovery and EUT            
*                           FRRs running under TCBs.  It is set when            
*                           any of the following abend indicators               
*                           have been set:                                      
*                           SDWAABTM - ABTERM indicator (note that              
*                                      Cancel and Detach are always             
*                                      ABTERMs)                                 
*                           SDWAMABD - This TCB has been detached by            
*                                      RTM after its mother task                
*                                      abended                   @PRA           
*                           SDWASRBM - An SRB has abended and                   
*                                      percolated to this TCB                   
*                           SDWAIRB  - An IRB has interrupted this TCB          
*                                      and abended                              
*                           SDWAMCHK - A Machine Check has occurred             
*                           SDWARKEY - A Restart was received                   
*                           SDWACTS  - An abend was Converted To Step           
*                                                                @PMA*/         
*       8 SDWASRBT    BIT(1),     /* On, indicates that this abend              
*                           was issued via CALLRTM TYPE=SRBTERM  @POA*/         
*       8 SDWASRBS    BIT(1),     /* On - this SDWA was allocated for           
*                                         an SRB                                
*                                    Off - this SDWA was allocated for          
*                                         a TCB                                 
*                                    SDWASRBS is only valid when                
*                                    SDWASVAL is on              @PNA*/         
*       8 SDWATYP1    BIT(1),           /* ON,TYPE1 SVC IN CONTROL AT           
*                                          TIME OF ERROR             */         
*       8 SDWAENRB    BIT(1),           /* ON,ENABLED RB IN CONTROL             
*                                           AT TIME OF ERROR         */         
*       8 SDWALDIS    BIT(1),           /* ON,A LOGICALLY OR PHYSICALLY         
*                                          DISABLED ROUTINE WAS IN              
*                                          CONTROL AT TIME OF ERROR. */         
*       8 SDWASRBM   BIT(1),            /* SYSTEM IN SRB MODE AT TIME           
*                                          OF ERROR                  */         
*     7 SDWAERRC     CHAR(1),           /* ADDITIONAL ERROR ENTRY               
*                                          INFORMATION               */         
*       8 SDWASTAF    BIT(1),           /* ON,A PREVIOUS (E)STA EXIT            
*                                          OR FRR FAILED             */         
*       8 SDWASTAI    BIT(1),           /* ON, A (E)STAI EXIT                   
*                                          PREVIOUSLY RECEIVED                  
*                                          CONTROL                   */         
*       8 SDWAIRB    BIT(1),            /* ON,AN IRB PRECEDED THE RB            
*                                          THAT IS ASSOCIATED WITH              
*                                          THIS EXIT                 */         
*       8 SDWAPERC    BIT(1),           /* ON,THIS RECOVERY ROUTINE             
*                                          IS BEING PERCOLATED TO    */         
*       8 SDWAEAS    BIT(1),            /* ON INDICATES A LOWER LEVEL           
*                                          EXIT HAS RECOGNIZED AN               
*                                          ERROR AND PROVIDED SERVICE-          
*                                          ABILITY INFORMATION       */         
*       8 SDWASKIP   BIT(1),            /* ON INDICATES FRRS WERE               
*                                          SKIPPED           @G381P2F*/         
*       8 SDWALCL    BIT(1),            /* ON IND ENTRY AS A LOCAL              
*                                          RESOURCE MGR      @G382P2F*/         
*       8 SDWAGLBL   BIT(1),            /* ON IND ENTRY AS A GLOBAL             
*                                          RESOURCE MGR      @G382P2F*/         
*     7 SDWAERRD     CHAR(1),           /* ADDITIONAL ERROR ENTRY               
*                                          INFORMATION.              */         
*       8 SDWACLUP    BIT(1),           /* ON,INDICATES RECOVERY                
*                                          ROUTINE ONLY TO CLEANUP              
*                                          AND NOT RETRY (IF ESTA               
*                                          EXIT AND 33E                         
*                                          COMPLETION CODE THE DUMP             
*                                          IS TAKEN AFTER ENTRY TO              
*                                          THE RECOVERY ROUTINE,IF              
*                                          THE COMPLETION CODE IS OTHER         
*                                          THAN 33E AND IT IS AN                
*                                          ESTA EXIT THE                        
*                                          DUMP IS TAKEN BEFORE                 
*                                          ENTRY TO THE RECOVERY                
*                                          ROUTINE)                  */         
*       8 SDWANRBE    BIT(1),           /* ON,RB ASSOCIATED WITH THIS           
*                                          ESTA EXIT WAS NOT IN CONTROL         
*                                          AT TIME OF ERROR          */         
*       8 SDWASTAE    BIT(1),           /* ON,THIS ESTA EXIT HAS                
*                                          BEEN ENTERED FOR A PREVIOUS          
*                                          ABEND. NEVER ON FOR FRRS. */         
*       8 SDWACTS     BIT(1),           /* ON,THIS TASK WAS NOT IN              
*                                          CONTROL AT TIME OF ERROR             
*                                          BUT A TASK WITHIN THE SAME           
*                                          JOBSTEP TREE REQUESTED A             
*                                          'STEP' ABEND. ONLY 'ON'              
*                                          IF SDWACLUP IS 'ON'.      */         
*       8 SDWAMABD    BIT(1),           /* ON,THIS TASK WAS NOT IN              
*                                          CONTROL AT TIME OF ERROR             
*                                          BUT AN ANCESTOR OF THIS              
*                                          TASK HAS ABENDED. ONLY               
*                                          'ON' IF SDWACLUP IS 'ON'  */         
*       8 SDWARPIV    BIT(1),           /* ON, THE REGISTERS, PSW AND           
*                                          CONTROL REGISTERS AT TIME            
*                                          OF ERROR ARE UNAVAILABLE  */         
*       8 SDWAMCIV    BIT(1),           /* ON, MACHINE CHECK ERROR              
*                                          INFORMATION IS                       
*                                          UNAVAILABLE.              */         
*       8 SDWAERFL    BIT(1),           /* ON, ERRORID INFORMATION              
*                                          IN SDWA           @G17EP5W*/         
*    6 SDWAFMID     CHAR(2),            /* ASID OF MEMORY IN WHICH              
*                                          ERROR OCCURRED                       
*                                          =0, IF MEMORY IS CURRENT             
*                                          NOT=0, IF OTHER MEMORY               
*                                          IS CURRENT.                          
*                                            FOR FRRS-                          
*                                          IF THE VALUE IS NON ZERO             
*                                          THE FRR IS RECEIVING                 
*                                          CONTROL IN THE MASTER                
*                                          SCHEDULER ADDRESS SPACE              
*                                          AND CANNOT ADDRESS THE               
*                                          PRIVATE AREA OF THE                  
*                                          FAILING ADDRESS SPACE.               
*                                            FOR ESTA-                          
*                                          IF THE VALUE IS NON ZERO             
*                                          ENTRY IS DUE TO CROSS                
*                                          MEMORY ABTERM.            */         
*    6 SDWAIOFS     CHAR(1),            /* THIS IS THE CURRENT I/O              
*                                          STATUS.(THE I/O                      
*                                          PROCESSING REQUESTED BY              
*                                          THE FIRST (E)STA EXIT                
*                                          IS THE ONLY REQUEST                  
*                                          HONORED )                 */         
*       8 SDWAIOQR    BIT(1),           /*  ON,I/O FOR FAILING                  
*                                          PROGRAM HAS BEEN QUIESCED            
*                                          AND IS RESTOREABLE        */         
*       8 SDWAIOHT    BIT(1),           /* ON,I/O FOR FAILING                   
*                                          PROGRAM IS HALTED AND IS             
*                                          NOT RESTOREABLE           */         
*       8 SDWANOIO    BIT(1),           /* ON,FAILING PROGRAM HAS NO            
*                                          I/O OUTSTANDING           */         
*       8 SDWANIOP    BIT(1),           /* ON,USER REQUESTED NO I/O             
*                                          PROCESSING                */         
*      8 *            BIT(4),           /* RESERVED                  */         
*   6 SDWACPUI        PTR(8),           /* Low order byte of the                
*              error logical CPU id.  IBM recommends                            
*              using the 2-byte logical CPU id in SDWA2CID.      @LVA*/         
*   6 SDWARTYA        PTR(31),          /* ADDRESS OF RETRY ROUTINE  */         
*     7 SDWARTYF      CHAR(1),          /* ADDRESSING MODE INDICATOR            
*                                          BYTE              @G860P1S*/         
*       8 SDWAAMOD     BIT(1),          /* This bit is never looked at.         
*                                          The AMODE of the retry               
*                                          routine is determined by             
*                                          other information     @LSC*/         
*     7 *             CHAR(3),          /* LOW ORDER 3 BYTES OF THE             
*                                          RETRY ADDRESS.    @G860P1S*/         
*   6 SDWARECA        PTR(31),          /* ADDRESS OF VARIABLE                  
*                                          RECORDING AREA WITHIN SDWA*/         
*   6 SDWACPUA        CHAR(4) BDY(WORD),/* ADDRESS OF CPU HOLDING               
*                                          RESOURCE WHICH CAUSES                
*                                          VALID SPIN ON CURRENT                
*                                          CPU-USED WITH RESTART KEY            
*                                          ERROR TYPE.IF THIS FIELD             
*                                          IS VALIDLY FILLED IN BY AN           
*                                          FRR THE FRRS MAINLINE                
*                                          PROGRAM WILL BE RESUMED AT           
*                                          THE NEXT SEQUENTIAL                  
*                                          INSTRUCTION. NOT VALID FOR           
*                                          ESTAE EXITS.              */         
*     7 *             CHAR(2),          /* RESERVED                  */         
*     7 SDWALCPU     PTR(15) BDY(HWORD),/* LOGICAL ADDRESS OF CPU               
*                                          HOLDING RESOURCE          */         
*   6 SDWAPARQ        CHAR(4),          /* FLAGS SET BY RECOVERY                
*                                          ROUTINE TO REQUEST FUR-              
*                                          THEIR PROCESSING ACTION   */         
*     7  SDWARCDE    FIXED(8),          /* RETURN CODE FROM RECOVERY            
*                                          ROUTINE TO INDICATE RETRY            
*                                          OR TERMINATION ACTIONS :             
*                                          0, CONTINUE WITH TERMINATION         
*                                          THIS INDICATION IMPLIES              
*                                          PERCOLATION                          
*                                          4, RETRY                             
*                                          16, PREVENT FURTHER (E)STAI          
*                                              PROCESSING        @L3C*/         
*     7 SDWAACF2      CHAR(1),          /* FLAGS TO INDICATE ADDITIO-           
*                                          NAL PROCESSING REQUESTS   */         
*       8 SDWARCRD     BIT(1),          /* ON,RECORDING REQUESTED    */         
*       8 SDWARFXM     BIT(1),          /* ON,RETRY TO FULLXM AT TIME           
*                                          OF FRR SET. CAN ONLY BE              
*                                          USED BY MODE=PRIMARY FRRS            
*                                          @P8A*/                               
*       8 SDWASPIN     BIT(1),          /* ON,PROGRAM INTERRUPTED               
*                                          VIA THE RESTART KEY WAS              
*                                          IN A VALID SPIN(SET BY               
*                                          THE SETRP MACRO WHEN CPU             
*                                          ADDRESS IS SPECIFIED ALONG           
*                                          WITH CPU ADDRESS IN SDWACPUA         
*                                          FIELD TO ALLOW RESTART               
*                                          OF ALTERNATE CPU)         */         
*       8 SDWARERR     BIT(1),          /* ON,RETRY USING THE CROSS             
*                                          MEMORY ADDRESSING ENV                
*                                          AT THE TIME OF THE ERROR.            
*                                          OFF,RETRY USING THE CROSS            
*                                          MEMORY ADDR ENV ON ENTRY             
*                                          TO THE FRR.       @G381P2F*/         
*       8 SDWAUPRG     BIT(1),          /* ON,UPDATED REGISTERS                 
*                                          STARTING WITH SDWASR00               
*                                          ARE TO BE USED FOR RETRY  */         
*       8 SDWAFREE     BIT(1),          /* ON,SDWA (RTCA) TO BE FREED           
*                                          PRIOR TO RETRY. ONLY VALID           
*                                          FOR ESTA EXITS            */         
*       8 SDWASERP     BIT(1),          /* ON,SERIALIZE PERCOLATION             
*                                          (USED WHEN AN SRB MODE FRR           
*                                          PERCOLATES SERIALLY TO A             
*                                          RELATED TASK)     @G381P2F*/         
*       8 SDWACML      BIT(1),          /* ON,FREE THE CROSS MEMORY             
*                                          LOCAL LOCK        @G381P2F*/         
*     7 SDWAACF3      CHAR(1),          /* FLAGS INDICATING SOME GLOBAL         
*                                          LOCKS TO BE FREED.  ONLY             
*                                          VALID FOR FRRS.  OTHER               
*                                          LOCKS ARE INDICATED AT               
*                                          SDWAFLK1 AND SDWAFLK2.               
*                                                            @G860P1S*/         
*       8 SDWAFRSX    BIT(1),           /* ON, THE RSM CROSS MEMORY             
*                                          CLASS LOCK        @G860P1S*/         
*       8 SDWAFRSA    BIT(1),           /* ON, THE RSM ADDRESS SPACE            
*                                          CLASS LOCK        @G860P1S*/         
*       8 SDWAFVSP    BIT(1),           /* ON, THE VSM PAGE LOCK                
*                                                            @G860P1S*/         
*       8 SDWADISP    BIT(1),           /* ON THE DISPATCHER LOCK    */         
*       8 SDWAASMP    BIT(1),           /* ON, ASM CLASS LOCK@Z40WPXH*/         
*       8 SDWASALL    BIT(1),           /* ON, THE SALLOC LOCK       */         
*       8 SDWAIPRG    BIT(1),           /* ON, THE IOSYNCH LOCK      */         
*       8 SDWAFRSD    BIT(1),           /* ON, THE RSM DATA SPACE LOCK          
*                                                                @L6C*/         
*     7 SDWAACF4    CHAR(1),            /* ADDITIONAL LOCKS TO BE               
*                                          FREED, OR ADDITIONAL FRR             
*                                          PROCESSING                */         
*       8 SDWAIUCB    BIT(1),           /* ON, FREE IOSUCB LOCK      */         
*       8 SDWARSMQ    BIT(1),           /* On, free RSMQ lock    @LXA*/         
*       8 *           BIT(2),           /* RESERVED              @LXC*/         
*       8 SDWATADB    BIT(1),           /* RESERVED LOCK     @Z40WPXH*/         
*       8 SDWAOPTM    BIT(1),           /* ON, FREE SRM LOCK         */         
*       8 SDWACMS     BIT(1),           /* ON, FREE CMS LOCK         */         
*       8 SDWAFLLK    BIT(1),           /* ON, FREE LOCAL LOCK       */         
*   6 SDWALKWA    CHAR(32) BDY(WORD),   /* LOCK AREA         @ZA05516*/         
*     7 SDWALKWS    CHAR(32) BDY(WORD), /* LOCKWORDS REQUIRED TO FREE           
*                                          THE GLOBAL LOCKS                     
*                                          ONLY USED FOR FRRS        */         
*       8 SDWALRSD     PTR(31),         /* LOCKWORD FOR THE RSM DATA            
*                                          SPACE LOCK            @L6C*/         
*       8 SDWAIULW      PTR(31),        /* LOCKWORD FOR THE IOSUCB              
*                                          LOCK                      */         
*       8 *             PTR(31),        /* LOCKWORD - RESERVED   @P3C*/         
*       8 SDWAIPLW      PTR(31),        /* LOCKWORD FOR THE IOSYNCH             
*                                          LOCK                      */         
*       8 SDWAAPLW      PTR(31),        /* LOCKWORD FOR THE ASM CLASS           
*                                          LOCK              @Z40WPXH*/         
*       8 *             PTR(31),        /* RESERVED              @L9C*/         
*       8 *             PTR(31),        /* RESERVED              @L9C*/         
*       8 SDWATALW      PTR(31),        /* LOCKWORD - RESERVED                  
*                                          LOCK              @Z40WPXH*/         
*   6 SDWAASID        CHAR(2),          /* ASID FOR LOGREC DEBUGGING            
*                                          (HOME ASID)       @ZA05516*/         
*   6 SDWASEQ#        CHAR(2),          /* ERRORID SEQ NBR   @G17EP5W*/         
*   6 SDWARECP        CHAR(24),         /* RECORDING PARAMETERS                 
*                                          (MODULE, CSECT,AND RECOVERY          
*                                          ROUTINE NAME-RESPECTIVELY)*/         
*     7 SDWAMODN      CHAR(8),          /* THE LOAD MODULE NAME                 
*                                          INVOLVED IN THE ERROR                
*                                          (SUPPLIED BY THE RECOVERY            
*                                          ROUTINE)                  */         
*     7 SDWACSCT      CHAR(8),          /* THE CSECT (MICROFICHE)               
*                                          NAME INVOLVED                        
*                                          IN THE ERROR (SUPPLIED               
*                                          BY THE RECOVERY ROUTINE)  */         
*     7 SDWAREXN      CHAR(8),          /* THE RECOVERY ROUTINE                 
*                                          (MICROFICHE) NAME                    
*                                          HANDLING THE ERROR (SUPPLIED         
*                                          BY THE RECOVERY ROUTINE)  */         
*   6 SDWADPLA        PTR(31),          /* POINTER TO DUMP                      
*                                          PARAMETER LIST RESIDING              
*                                          IN SDWA                   */         
*   6 SDWASNPA        CHAR(8),          /* SNAP PARAMETER LIST FLAGS */         
*     7 SDWADUMP        CHAR(4),        /* DUMP CHARACTERISTICS      */         
*       8 SDWADPID      CHAR(1),        /* ID OF DUMP REQUESTED      */         
*       8 SDWADPFS      CHAR(1),        /* DUMP FLAGS                */         
*         9 SDWADPT      BIT(1),        /* ALWAYS  OFF, INDICATES SNAP          
*                                          DUMP  REQUEST             */         
*         9 SDWADLST     BIT(1),        /* ALWAYS ON, INDICATES OS/VS2          
*                                          REL. 2 DUMP  PARAMETER LIST          
*                                          SUPPLIED. USED BY RTM TO             
*                                          INDICATE DUMP OPTIONS                
*                                          ARE AVAILABLE IN THE SDWA */         
*         9  SDWAENSN    BIT(1),        /* 1=ENHANCED DUMP OPTIONS              
*                                                            @G33SPHW*/         
*         9  *           BIT(3),        /* RESERVED                  */         
*         9  SDWASLST    BIT(1),        /* ON,STORAGE LIST SUPPLIED             
*                                          FOR DUMP                  */         
*         9  *           BIT(1),        /* RESERVED              @P2C*/         
*       8 SDWADPF2      CHAR(1),        /* DUMP FLAGS 2      @G382P2F*/         
*         9 SDWADVS3     BIT(1),        /* ON, STORAGE RANGES IN                
*                                          SDWADSR, OFF, STORAGE RANGES         
*                                          IN SDWADPSL       @G382P2F*/         
*         9  *           BIT(3),        /* RESERVED          @G860P1C*/         
*         9  SDWAXLST    BIT(1),        /* ON,DATA SPACES STORAGE LIST          
*                                          SUPPLIED FOR DUMP     @P2M*/         
*         9  SDWALVL2    BIT(1),        /* ON, INDICATES                        
*                                          MVS/SP2.1 LEVEL OF                   
*                                          SNAP PARMLIST     @G860P1F*/         
*         9  SDWASUBL    BIT(1),         /* ON, SUBPOOL LIST                    
*                                           SUPPLIED.        @G860P1C*/         
*         9  *           BIT(1),         /* RESERVED         @G860P1C*/         
*       8 *             CHAR(1),        /* RESERVED          @G382P2F*/         
*     7 SDWADDAT        CHAR(4),        /* SDATA/PDATA OPTIONS       */         
*       8 SDWASDAT      CHAR(2),        /* SDATA OPTIONS             */         
*        9 SDWASDA0      CHAR(1),       /* SDATA OPTIONS FLAG ONE               
*                                                            @G33SPHW*/         
*        10 SDWANUC      BIT(1),        /* DISPLAY NUCLEUS           */         
*        10 SDWASQA      BIT(1),        /* DISPLAY SQA               */         
*        10 SDWALSQA     BIT(1),        /* DISPLAY LSQA              */         
*        10 SDWASWA      BIT(1),        /* DISPLAY SWA               */         
*        10 SDWAGTF      BIT(1),        /* DISPLAY GTF INCORE TRACE             
*                                          TABLE                     */         
*        10 SDWACBS      BIT(1),        /* FORMAT AND DISPLAY CONTROL           
*                                          BLOCKS                    */         
*        10 SDWAQQS      BIT(1),        /* FORMAT AND DISPLAY QCBS/             
*                                          QELS                      */         
*        10 SDWADM       BIT(1),        /* FORMAT DATA MGT CONTROL              
*                                          BLOCKS            @G33SPHW*/         
*       9 SDWASDA1      CHAR(1),        /* SDATA OPTIONS     @G33SPHW*/         
*        10 SDWAIO       BIT(1),        /* FORMAT IOS CONTROL BLOCKS            
*                                                            @G33SPHW*/         
*        10 SDWAERR      BIT(1),        /* FORMAT ERROR CONTROL                 
*                                          BLOCKS            @G33SPHW*/         
*        10 *            BIT(1),        /* RESERVED          @G860P1C*/         
*        10 SDWASUM      BIT(1),        /* PROVIDE SUMMARY                      
*                                          DUMP              @G860P1C*/         
*        10 SDWAALLN     BIT(1),        /* DISPLAY ENTIRE                       
*                                          VIRTUAL NUCLEUS   @G860P1C*/         
*        10 *            BIT(3),        /* RESERVED          @G860P1C*/         
*       8 SDWAPDAT      CHAR(1),        /* PDATA OPTIONS             */         
*         9 SDWADSAS     BIT(1),        /* DISPLAY SAVE AREAS        */         
*         9 SDWADSAH     BIT(1),        /* DISPLAY SAVE AREA HEADER  */         
*         9 SDWADREG     BIT(1),        /* DISPLAY REGISTERS         */         
*         9 SDWATLPA     BIT(1),        /* DISPLAY LPA MODULES OF               
*                                          TASK                      */         
*         9 SDWATJPA     BIT(1),        /* DISPLAY JPA MODULES OF               
*                                          TASK                      */         
*         9 SDWADPSW     BIT(1),        /* DISPLAY PSW               */         
*         9 SDWAUSPL     BIT(1),        /* DISPLAY USER SUBPOOLS     */         
*         9 *            BIT(1),        /* RESERVED                  */         
*       8 *             CHAR(1),        /* RESERVED                  */         
*   6 SDWADPSA     CHAR(36) BDY(WORD),  /* DUMP RANGES AREA                     
*                       Note the last 4 bytes of                                
*                       this area is a substructure of the dump ranges          
*                       area, but it should not be part of the dump             
*                       ranges area.  However, for compatibility                
*                       reasons, no changes were made to size of                
*                       the SDWADPSA area.                       @LVA*/         
*     7 SDWADPSL    CHAR(32) BDY(WORD), /* DUMP STORAGE LISTS(MAX 4             
*                                          RANGES AVAILABLE)         */         
*       8 SDWAFRM1      PTR(31),        /* BEGINNING ADDRESS FOR                
*                                          STORAGE RANGE 1           */         
*       8 SDWATO1       PTR(31),        /* ENDING ADDRESS FOR STORAGE           
*                                          RANGE 1                   */         
*       8 SDWAFRM2      PTR(31),        /* BEGINNING ADDRESS FOR                
*                                          STORAGE RANGE 2           */         
*       8 SDWATO2       PTR(31),        /* ENDING ADDRESS FOR STORAGE           
*                                          RANGE 2                   */         
*       8 SDWAFRM3      PTR(31),        /* BEGINNING ADDRESS FOR                
*                                          STORAGE RANGE 3           */         
*       8 SDWATO3       PTR(31),        /* ENDING ADDRESS FOR STORAGE           
*                                          RANGE 3                   */         
*       8 SDWAFRM4      PTR(31),        /* BEGINNING ADDRESS FOR                
*                                          STORAGE RANGE 4           */         
*       8 SDWATO4       PTR(31),        /* ENDING ADDRESS FOR STORAGE           
*                                          RANGE 4                   */         
*     7 SDWA2CID      FIXED(16),        /* 2-byte ERRORID logical CPU           
*                                          id.  See SDWADPSA comment.           
*                                                                @LVA*/         
*     7 SDWAOPIC FIXED(8),              /* Low byte of original PIC             
*                      without PER bit.                                         
*                      Valid only when non-0 and SDWAPCHK and                   
*                      SDWACMPC is x'0C4000'.                                   
*                      See SDWADPSA comment.                     @0BA*/         
*     7 SDWAIFLG BIT(8),                /* Flag bits             @0CC*/         
*%IF SYSVERSION = '' %THEN %GOTO SDWAPLS6;                    /* @0CA*/         
*%IF SYSRULESMOD='PL/S-III ' %THEN %GOTO SDWAPLS6;            /* @0CA*/         
*      8 SDWAIFlags BIT(8),             /* Flag bits             @0CC*/         
*       9 SDWA_Valid1 Bit(1),           /* When on, the next 3                  
*                      bits have valid values.                   @0CA*/         
*       9 SDWA_IntegMon Bit(1),         /* Integrity monitor event,             
*                      when SDWA_Valid1 is on                    @0CA*/         
*       9 SDWA_JscbAuth Bit(1),         /* For an error event that              
*                      occurred in task mode, the task's jobstep task           
*                      has a JSCB in which bit JSCBAUTH is on    @0CA*/         
*       9 SDWA_SDIP Bit(1),             /* SVC Dump is in progress              
*                                                                @0CA*/         
* %SDWAPLS6:;                                                 /* @0CA*/         
*/*                                                                  */         
*/*              SDWAVERI IS TO INDICATE THE VERSION OF THE          */         
*/*              SDWA VIA A NUMBER IN THE SDWAVID            @G38FP2F*/         
*   6 SDWAVERI       CHAR(4),           /* SDWA VERSION INDICATOR               
*                                                            @G38FP2F*/         
*     7 SDWAVERF      CHAR(2),          /* FFFF INDICATES VID FIELD             
*                                          IS VALID          @G38FP2F*/         
*     7 SDWAVID       CHAR(2),          /* VERSION INDICATOR, EXPLAINED         
*                      AS FOLLOWS:                                              
*                      1, INDICATES THE SDWA IS AT AN MVS/SYSTEM                
*                      PRODUCT RELEASE 2 LEVEL                                  
*                      2, INDICATES THE SDWA IS AT AN MVS/SYSTEM                
*                      PRODUCT VERSION 2 RELEASE 1 LEVEL                        
*                      3, INDICATES THE SDWA IS AT AN MVS/SYSTEM                
*                      PRODUCT JBB2110 LEVEL.                                   
*                      4, INDICATES THE SDWA IS AT AN MVS/SYSTEM                
*                      PRODUCT HBB3310 LEVEL.                                   
*                      5, INDICATES THE SDWA IS AT AN MVS/SYSTEM                
*                      PRODUCT HBB4410 LEVEL.                                   
*                      6, INDICATES THE SDWA IS AT AN MVS/SYSTEM                
*                      PRODUCT HBB5510 LEVEL.                                   
*                      7, Indicates the SDWA is at an OS/390 R10                
*                      HBB7703 level and contains SDWARC4                       
*                      8, Indicates the SDWA is at a z/OS R6                    
*                      HBB7720 level and contains SDWARC4                       
*                      9, Indicates the SDWA is at a z/OS V2R1                  
*                      HBB7790 level and contains SDWARC5        @LUC*/         
*   6 SDWAXPAD       PTR(31),           /* ADDRESS OF THE EXTENSION             
*                                          POINTERS (SDWAPTRS)   @L1C*/         
*   6 SDWAXM        CHAR(12) BDY(WORD), /* CROSS MEMORY INFO @G381P2F*/         
*     7 SDWACRGS      CHAR(8),          /* CONTROL REGS 3&4  @G381P2F*/         
*       8 SDWACR3     CHAR(4),          /* CONTROL REG 3     @G381P2F*/         
*         9 SDWAKM      CHAR(2),        /* KEY MASK          @G381P2F*/         
*         9 SDWASCND    CHAR(2),        /* ASID OF THE SECONDARY                
*                                          ADDR SPACE -SASID @G381P2F*/         
*       8 SDWACR4     CHAR(4),          /* CONTROL REG 4     @G381P2F*/         
*         9 SDWAAX      CHAR(2),        /* AUTHORIZATION INDEX                  
*                                                            @G381P2F*/         
*         9 SDWAPRIM    CHAR(2),        /* ASID OF THE PRIMARY                  
*                                          ADDR SPACE -PASID @G381P2F*/         
*     7 SDWACMLA      PTR(31),          /* ADDRESS OF ASCB OF CML TO            
*                                          BE FREED          @G381P2F*/         
*   6 SDWACOMU      CHAR(8),            /* FRR to ESTAE communication           
*                                          buffer. Also applies to              
*                                          ESTAE-type to ESTAE-type.            
*                                                            @G382P2F*/         
*   6 SDWACOMP       PTR(31),           /* THIS WORD IS PROVIDED FOR            
*                                          COMMUNICATION OF ADDITIONAL          
*                                          RECOVERY DATA ON A PER               
*                                          COMPONENT BASIS (FOR                 
*                                          OS/VS2 RELEASE 2 THIS                
*                                          FIELD IS ONLY USED BY                
*                                          DATA MANAGER).            */         
*   6 SDWAERTM       CHAR(4),           /* ERRORID TIME STAMP@G17EP5W*/         
*   6 SDWARA      CHAR(264) BDY(WORD),  /* VARIABLE RECORDING AREA              
*                                          PREFIXED BY TWO BYTE                 
*                                          LENGTH FIELD OF AREA,                
*                                          A ONE BYTE FLAG FIELD,               
*                                          AND A ONE BYTE FIELD WITH            
*                                          LENGTH OF USER SUPPLIED              
*                                          RECORDING INFORMATION                
*                                                                @L5C*/         
*     7 SDWAVRAL      CHAR(2),          /* LENGTH OF VARIABLE                   
*                                          RECORDING AREA        @L5C*/         
*     7 SDWADPVA      CHAR(1),          /* BITS THAT DEFINE DATA IN             
*                                          VARIABLE AREA             */         
*       8 SDWAHEX      BIT(1),          /* SDWAVRA DATA TO BE                   
*                                          PRINTED BY EREP IN HEX    */         
*       8 SDWAEBC      BIT(1),          /* SDWAVRA DATA TO BE                   
*                                          PRINTED BY EREP IN EBCDIC */         
*       8 SDWAVRAM     BIT(1),          /* SDWAVRA DATA IS IN THE               
*                                          FORMAT MAPPED BY THE VRAMAP          
*                                          STRUCTURE (IHAVRA MACRO)             
*                                                            @G81EP11*/         
*       8 *            BIT(5),          /* RESERVED          @G81EP11*/         
*     7 SDWAURAL      FIXED(8),         /* LENGTH OF USER  (RECOVERY            
*                                          ROUTINE) SUPPLIED                    
*                                          RECORDING AREA (ZEROED               
*                                          BEFORE EACH RECOVERY                 
*                                          ROUTINE IS INVOKED)       */         
*     7 SDWAVRA       CHAR(255),        /* VARIABLE RECORDING AREA              
*                                                            @G388P2F*/         
*     7 SDWAID        CHAR(5),          /* CONTAINS 'SDWA ' AS ID               
*                                                            @G860P1F*/         
*   6 *   CHAR(0) BDY(DWORD),           /* ROUND UP TO DOUBLE WORD              
*                                                            @G381P2F*/         
*%IF SDWALVL ^= '' %THEN                                                        
*  %GOTO SDWABSLA;                                                              
* %IF IHAVIA='YES' %THEN                  /*                     @L4A*/         
*    %IHAALET='VIA(SDWAALET)';            /*                     @L4A*/         
* %ELSE %IHAALET='';                      /*                     @L4A*/         
* %IF SDWA_PRD = '' %THEN                 /*                     @LIA*/         
*   %SDWASRVPB = 'BASED(SDWASRVP)';       /*                     @LIA*/         
* %ELSE                                   /*                     @LIA*/         
*   %SDWASRVPB = 'BASED(ADDR(SDWA)+SDWASRVP)';  /*               @LIA*/         
*  1 SDWARC1 IHAALET SDWASRVPB,         /* RECORDABLE EXTEN      @L4A*/         
*%GOTO SDWABSLB;                                                                
*%SDWABSLA: ;                                                                   
*  SDWALVL SDWARC1,                     /* RECORDABLE EXTEN  @G388P2F*/         
*%SDWABSLB: ;                                                                   
*   6 SDWASERV CHAR(456) BDY(DWORD),    /* ADDITIONAL COMPONENT                 
*                                          SERVICE DATA.         @LGC*/         
*     7 SDWARC1Z,                       /* THIS AREA CAN BE ZEROED ON           
*                                          PERCOLATION.          @L2A*/         
*       8 SDWACID CHAR(5),              /* COMPONENT ID OF THE                  
*                                          COMPONENT INVOLVED IN                
*                                          THE ERROR (FOR EXAMPLE,              
*                                          SC1CR)            @G388P2F*/         
*       8 SDWASC CHAR(23),              /* NAME OF THE SUBCOMPONENT             
*                                          AND THE MODULE SUBFUNCTION           
*                                          INVOLVED IN THE ERROR                
*                                                            @G388P2F*/         
*       8 SDWAMLVL CHAR(16),            /* LEVEL OF THE MODULE                  
*                                          INVOLVED IN THE ERROR                
*                                                            @G388P2F*/         
*         9 SDWAMDAT CHAR(8),           /* ASSEMBLY DATE OF THE                 
*                                          MODULE INVOLVED IN THE               
*                                          ERROR             @G38AP2F*/         
*         9 SDWAMVRS CHAR(8),           /* VERSION OF THE MODULE - PTF          
*                                          OR PRODUCT NUMBER @G38AP2F*/         
*       8 SDWACRC CHAR(4) BDY(WORD),  /* This field contains the abend          
*                                   reason code that was set via an             
*                                   ABEND, CALLRTM, or SETRP macro.             
*                                   It is valid only if SDWARCF is set          
*                                   on.  For SRBTERM abends (see                
*                                   SDWASRBT), the high order bit of            
*                                   the reason code, when on, indicates         
*                                   that the issuer felt that an                
*                                   SVCDUMP was not necessary for this          
*                                   abend.  Note that this field should         
*                                   not be confused with the return             
*                                   code that some programs place into          
*                                   register 15 before issuing an               
*                                   abend.                       @PPC*/         
*         9 SDWAHRC FIXED(31),          /* HEXADECIMAL DECLARE FOR              
*                                          SDWACRC               @PBC*/         
*       8 SDWARRL CHAR(8),              /* ENTRY POINT LABEL OF THE             
*                                          RECOVERY ROUTINE THAT FILLED         
*                                          IN THIS SDWA      @G388P2F*/         
*       8 SDWACIDB CHAR(4),             /* THE COMPONENT ID BASE                
*                                          (PREFIX) NUMBER, SUCH AS             
*                                          5741.             @G38PP1F*/         
*       8 SDWASDRC FIXED(8),            /* SVCDUMP STATUS INDICATOR             
*                                          (FOR USE BY SDUMP)                   
*                                                            @G860P1S*/         
*       8 SDWACCRC CHAR(1),      /* FLAGS FOR REASON AND COMP CODE              
*                                                            @G860P1C*/         
*         9 SDWACCF BIT(1),      /* =1, RECOVERY EXIT HAS ALTERED               
*                                   COMPCODE                 @G860P1C*/         
*         9 SDWAREAF BIT(1),     /* =1, RECOVERY EXIT HAS ALTERED               
*                                   THE REASON CODE          @G860P1C*/         
*       8 SDWARETF CHAR(1),      /* SDWA RETRY FLAGS             @L3A*/         
*         9 SDWART15 BIT(1),     /* ON, REGISTER 15 ON RETRY WILL BE            
*                                   SET TO THE VALUE IN SDWASR15.               
*                                   OFF, REGISTER 15 ON RETRY WILL BE           
*                                   SET TO THE RETRY ADDRESS REGARDLESS         
*                                   OF THE CONTENTS OF SDWASR15. ONLY           
*                                   VALID FOR FRRS.              @L3A*/         
*         9 SDWAREMR BIT(1),     /* ON, REMOVE REC ROUTINE ON RETRY             
*                                   OFF, DONT REMOVE REC ROUTINE ON             
*                                   RETRY.                       @L3A*/         
*         9 SDWAFRLK BIT(1),     /* ON, FREE LOCKS ON RETRY                     
*                                   WHOSE BIT SETTINGS HAVE BEEN                
*                                   TURNED ON IN THE SDWA.                      
*                                   OFF, DO NOT FREE ANY LOCKS                  
*                                   ON A RETRY.                  @L3A*/         
*         9 SDWAUP64 BIT(1),     /* If on, use the 64-bit GPRs for              
*                                   setting the retry regs. Only valid          
*                                   when SDWARC4 extension exists               
*                                                                @LIA*/         
*         9 SDWAKEAX BIT(1),     /* When retrying, keep the current             
*                                   EAX rather than resetting the EAX           
*                                   to time-of-FRR-set           @PGM*/         
*         9 SDWAG64R BIT(1),     /* If on in a logrec record or SDWA            
*                                   in a dump, indicates that RTM has           
*                                   set up SDWAG64 with the retry               
*                                   registers requested by a recovery           
*                                   routine so that it is clear for             
*                                   debugging which SDWA field contains         
*                                   the retry regs.  The time of error          
*                                   registers are in SDWAGRSV and               
*                                   SDWAG64H                     @PSA*/         
*         9 * BIT(2),            /* Reserved                     @PSC*/         
*       8 SDWATYPE FIXED(8),     /* TYPE OF RECOVERY ROUTINE                    
*                                   THAT RTM GAVE CONTROL TO:                   
*                                   0 - NO RECOVERY WAS SETUP                   
*                                   1 - FRR                                     
*                                   2 - NON FRR (ESTAE, ESTAI, ETC.)            
*                                   3 - ARR (ASSOCIATED RECOVERY                
*                                       ROUTINE)                 @L4A*/         
*       8 SDWAHLHI CHAR(4),      /* Copy of PSAHLHI (Highest Lock Held          
*                                   Indicator) at the time of error,            
*                                   minus any locks that have been              
*                                   released by FRR recovery routines           
*                                   that ran before the current                 
*                                   recovery routine.  This field was           
*                                   always '0' on entry to Estae-type           
*                                   recovery routines prior to                  
*                                   HBB7770                      @LRC*/         
*       8 SDWASUPR CHAR(4),      /* Copy of PSASUPER (Supervisor                
*                                   Control Word) at the time of error,         
*                                   minus any bits that have been               
*                                   turned off by FRR recovery routines         
*                                   that ran before the current                 
*                                   recovery routine.  This field was           
*                                   always '0' on entry to Estae-type           
*                                   recovery routines prior to                  
*                                   HBB7770                      @LRC*/         
*       8 SDWASPN CHAR(4),       /* Copy of LCCASPIN (Processor                 
*                                   Spinning Indicators) at the time of         
*                                   error, minus any spins that have            
*                                   been resolved by FRR recovery               
*                                   routines that ran before the                
*                                   current recovery routine.  This             
*                                   field was always '0' on entry to            
*                                   Estae-type recovery routines                
*                                   prior to HBB7770             @LRC*/         
*       8 SDWAEADR CHAR(4),      /* FRR OR ESTAE RECOVERY ROUTINE               
*                                   ADDRESS. IF NO FRR EXISTED WHEN             
*                                   RTM1 RECIEVED CONTROL TO PROCESS            
*                                   A SYSTEM MODE ERROR THIS FIELD IS           
*                                   ZERO                     @G860P38*/         
*       8 SDWAFRRE CHAR(24),     /* IF FRR EXISTS: COPY OF FRR                  
*                                   PARAMETER AREA FROM THE CURRENT             
*                                   FRR STACK ENTRY.                            
*                                   ON ENTRY TO AN ESTAE: 0  @G860P38*/         
*       8 SDWASDRN CHAR(4),      /* SDUMP REASON FLAGS FOR TAKING               
*                                   PARTIAL DUMP. SEE RTSDSRSN                  
*                                   IN RTSD.                 @ZMC2916*/         
*       8 SDWADAEW,              /* STRUCTURE FOR DAE INFO       @L2A*/         
*         9 SDWADAET CHAR(8),    /* DAE STATUS FLAGS MAPPED BY ADYDSTAT         
*                                                                @P1C*/         
*         9 SDWAOCUR CHAR(2),    /* NUMBER OF OCCURRENCES OF THIS               
*                                   PROBLEM. IF 0 THEN DAE DID NOT              
*                                   CHECK FOR DUPLICATE OCCURRENCES. IF         
*                                   1 THEN THIS IS THE FIRST OCCURRENCE         
*                                   OF THIS PROBLEM. IF GREATER THAN 1          
*                                   THAN THIS IS THE COUNT OF HOW MANY          
*                                   TIMES THIS DUMP REQUEST HAS                 
*                                   OCCURRED WHILE DAE WAS ACTIVE.              
*                                                                @P1C*/         
*     7 SDWARC1P CHAR(34) BDY(DWORD,7), /* THESE BYTES ARE NOT TO BE            
*                                   ZEROED ON PERCOLATION.       @L1A*/         
*       8 SDWAPGTA CHAR(6) BDY(DWORD,7), /* CONTAINING STRUCTURE AS IN          
*                                   LCCAPGTA.                    @L1A*/         
*         9 SDWAASI1 CHAR(2),    /* ADDRESS SPACE ID OF TASK FOR                
*                                   PURGEDQ                      @L1A*/         
*         9 SDWATCB PTR(31) BDY(WORD), /* ADDRESS OF TCB FOR PURGEDQ            
*                                                                @L1A*/         
*       8 SDWART12,              /* INFORMATION TO BE PASSED IN EED'S           
*                                                                @L1A*/         
*       10 SDWAFAIN CHAR(12),    /* 12 BYTES OF INSTRUCTION STREAM              
*                                   AS DETERMINED BY THE ADDRESS IN             
*                                   THE PSW AT THE TIME OF FAILURE,             
*                                   6 BYTES BEFORE AND AFTER.    @L2A*/         
*       10 SDWAASCB PTR(31),     /* ADDRESS OF ASCB FOR FAILING                 
*                                   ADDRESS SPACE.               @L1A*/         
*       10 SDWAASST PTR(31),     /* ADDRESS OF ADDRESS SPACE                    
*                                   SEGMENT TABLE.               @L1A*/         
*       10 SDWASABC,             /* ORIGINAL COMPLETION CODE     @L1A*/         
*         12 SDWAOABF CHAR(1),   /* FLAGS IN COMP CODE REG.      @L1A*/         
*           14 SDWAOREQ BIT(1),  /* ORIGINAL VALUE OF SDWAREQ    @L1A*/         
*           14 SDWAOSTP BIT(1),  /* ORIGINAL VALUE OF SDWASTEP   @L1A*/         
*           14 *        BIT(1),  /* USED FOR MEMTERM REQUESTS    @L1A*/         
*           14 SDWAOSTC BIT(1),  /* ORIGINAL VALUE OF SDWASTCC   @L1A*/         
*           14 *        BIT(1),  /* USED BY RTM2 FOR NORMAL END-OF-TASK         
*                                                                @L1A*/         
*           14 SDWAORCF BIT(1),  /* VALID REASON CODE IN SDWAOCRC.              
*                                                                @L1A*/         
*           14 * BIT(2),         /* RESERVED                     @L1A*/         
*         12 SDWAOCMP CHAR(3),   /* ORIGINAL COMPLETION CODE     @L1A*/         
*       10 SDWAOCRC CHAR(4),     /* ORIGINAL REASON CODE FROM SDWACRC           
*                                   AT ENTRY TO RECOVERY PROCESSING.            
*                                   ONLY VALID IF SDWAORCF IS SET ON.           
*                                                                @PBC*/         
*                                                                               
*       /* SDWARC1 FIELDS FROM THIS POINT ON ARE PRESERVED ON RTM1              
*          FRR PERCOLATION AND ARE ZEROED ON RTM2 ESTAE PERCOLATION. */         
*                                                                               
*     7 SDWACRER CHAR(64) BDY(DWORD), /* CONTROL REGISTERS AT TIME OF           
*                                   ERROR. THESE VALUES ARE NOT                 
*                                   RESTORED ON RETRY.           @L4A*/         
*       9 SDWACRE0 PTR(31),      /* CONTROL REGISTER 0           @L4A*/         
*       9 SDWACRE1 PTR(31),      /* CONTROL REGISTER 1           @L4A*/         
*       9 SDWACRE2 PTR(31),      /* CONTROL REGISTER 2           @L4A*/         
*       9 SDWACRE3 PTR(31),      /* CONTROL REGISTER 3           @L4A*/         
*       9 SDWACRE4 PTR(31),      /* CONTROL REGISTER 4           @L4A*/         
*       9 SDWACRE5 PTR(31),      /* CONTROL REGISTER 5           @L4A*/         
*       9 SDWACRE6 PTR(31),      /* CONTROL REGISTER 6           @L4A*/         
*       9 SDWACRE7 PTR(31),      /* CONTROL REGISTER 7           @L4A*/         
*       9 SDWACRE8 PTR(31),      /* CONTROL REGISTER 8           @L4A*/         
*       9 SDWACRE9 PTR(31),      /* CONTROL REGISTER 9           @L4A*/         
*       9 SDWACREA PTR(31),      /* CONTROL REGISTER 10          @L4A*/         
*       9 SDWACREB PTR(31),      /* CONTROL REGISTER 11          @L4A*/         
*       9 SDWACREC PTR(31),      /* CONTROL REGISTER 12          @L4A*/         
*       9 SDWACRED PTR(31),      /* CONTROL REGISTER 13          @L4A*/         
*       9 SDWACREE PTR(31),      /* CONTROL REGISTER 14          @L4A*/         
*       9 SDWACREF PTR(31),      /* CONTROL REGISTER 15          @L4A*/         
*     7 SDWAARER CHAR(64) BDY(DWORD), /* ACCESS REGISTERS AT TIME OF            
*                                        ERROR                   @L4A*/         
*       9 SDWAARE0 PTR(31),      /* ACCESS REGISTER 0            @L4A*/         
*       9 SDWAARE1 PTR(31),      /* ACCESS REGISTER 1            @L4A*/         
*       9 SDWAARE2 PTR(31),      /* ACCESS REGISTER 2            @L4A*/         
*       9 SDWAARE3 PTR(31),      /* ACCESS REGISTER 3            @L4A*/         
*       9 SDWAARE4 PTR(31),      /* ACCESS REGISTER 4            @L4A*/         
*       9 SDWAARE5 PTR(31),      /* ACCESS REGISTER 5            @L4A*/         
*       9 SDWAARE6 PTR(31),      /* ACCESS REGISTER 6            @L4A*/         
*       9 SDWAARE7 PTR(31),      /* ACCESS REGISTER 7            @L4A*/         
*       9 SDWAARE8 PTR(31),      /* ACCESS REGISTER 8            @L4A*/         
*       9 SDWAARE9 PTR(31),      /* ACCESS REGISTER 9            @L4A*/         
*       9 SDWAAREA PTR(31),      /* ACCESS REGISTER 10           @L4A*/         
*       9 SDWAAREB PTR(31),      /* ACCESS REGISTER 11           @L4A*/         
*       9 SDWAAREC PTR(31),      /* ACCESS REGISTER 12           @L4A*/         
*       9 SDWAARED PTR(31),      /* ACCESS REGISTER 13           @L4A*/         
*       9 SDWAAREE PTR(31),      /* ACCESS REGISTER 14           @L4A*/         
*       9 SDWAAREF PTR(31),      /* ACCESS REGISTER 15           @L4A*/         
*     7 SDWAARSV CHAR(64) BDY(DWORD), /* ACCESS REGISTERS OF THE RB             
*                                   LEVEL AND LINKAGE STACK LEVEL WHICH         
*                                   CREATED THE ESTAE EXIT AT THE TIME          
*                                   IT LAST INCURRED AN INTERRUPT OR 0          
*                                   FOR ESTAI.  FOR FRRS INITIALIZED TO         
*                                   REGISTERS AT TIME OF ERROR.  THIS           
*                                   REGISTER AREA IS USED TO UPDATE             
*                                   REGISTER CONTENTS FOR RETRY IF              
*                                   REQUESTED.                   @L4A*/         
*       9 SDWAARS0 PTR(31),      /* ACCESS REGISTER 0            @L4A*/         
*       9 SDWAARS1 PTR(31),      /* ACCESS REGISTER 1            @L4A*/         
*       9 SDWAARS2 PTR(31),      /* ACCESS REGISTER 2            @L4A*/         
*       9 SDWAARS3 PTR(31),      /* ACCESS REGISTER 3            @L4A*/         
*       9 SDWAARS4 PTR(31),      /* ACCESS REGISTER 4            @L4A*/         
*       9 SDWAARS5 PTR(31),      /* ACCESS REGISTER 5            @L4A*/         
*       9 SDWAARS6 PTR(31),      /* ACCESS REGISTER 6            @L4A*/         
*       9 SDWAARS7 PTR(31),      /* ACCESS REGISTER 7            @L4A*/         
*       9 SDWAARS8 PTR(31),      /* ACCESS REGISTER 8            @L4A*/         
*       9 SDWAARS9 PTR(31),      /* ACCESS REGISTER 9            @L4A*/         
*       9 SDWAARSA PTR(31),      /* ACCESS REGISTER 10           @L4A*/         
*       9 SDWAARSB PTR(31),      /* ACCESS REGISTER 11           @L4A*/         
*       9 SDWAARSC PTR(31),      /* ACCESS REGISTER 12           @L4A*/         
*       9 SDWAARSD PTR(31),      /* ACCESS REGISTER 13           @L4A*/         
*       9 SDWAARSE PTR(31),      /* ACCESS REGISTER 14           @L4A*/         
*       9 SDWAARSF PTR(31),      /* ACCESS REGISTER 15           @L4A*/         
*     7 SDWADUCT CHAR(64),    /* DISPATCHABLE UNIT CONTROL TABLE @L4A*/         
*     7 SDWATEAR FIXED(8),    /* TRANSLATION EXCEPTION ACCESS REGISTER          
*                                NUMBER                          @LMA*/         
*       9 * BIT(4),           /* Reserved bits. Might not be 0   @LMA*/         
*       9 SDWATEAN BIT(4),    /* TRANSLATION EXCEPTION ACCESS REGISTER          
*                                NUMBER                          @LMC*/         
*     7 SDWAXFLG BIT(8),      /* EXTENDED FLAG AREA              @L4A*/         
*       8 SDWAINTF    BIT(1), /* ON, SDWAEC2, SDWASRSV, SDWAARSV ARE            
*                                FROM A LINKAGE STACK ENTRY      @02C*/         
*       8 SDWATEAV    BIT(1), /* ON, SDWATRAN CONTAINS A VALID ADDRESS          
*                                                                @L8A*/         
*       8 SDWATEIV    BIT(1), /* ON, SDWATRAN CONTAINS A VALID ASID             
*                                                                @L8A*/         
*       8 SDWAESTX    BIT(1), /* ON, IF SDWATYPE = SDWATEST, THE                
*                  RECOVERY ROUTINE WAS ESTABLISHED VIA ESTAEX   @LEA*/         
*       8 SDWATEPC    BIT(1), /* ON, SDWATRAN contains a valid PC               
*                                number                          @LIA*/         
*       8 SDWATIRR    BIT(1), /* On, if SDWATYPE = SDWATARR, the                
*                                recovery routine was established               
*                                via IEAARR                      @PLA*/         
*       8 SDWASVAL    BIT(1), /* On, the state of SDWASRBS is valid             
*                                                                @PNA*/         
*%IF SYSVERSION = '' %THEN %GOTO SDWAPLS3;                    /* @07A*/         
*%IF SYSRULESMOD='PL/S-III ' %THEN %GOTO SDWAPLS3;            /* @07A*/         
*       8 SdwaReleaseCodeValid Bit(1), /* On, indicates that the                
*                                abended RB level was interrupted for           
*                                RTM processing after it had been               
*                                Released but before it could regain            
*                                control, and that SdwaReleaseCode              
*                                contains its Release code.  This bit           
*                                (and SdwaReleaseCode) is propagated            
*                                upon percolation to another recovery           
*                                routine                         @07A*/         
* %SDWAPLS3:;                                                 /* @07A*/         
*     7 SDWASFLG BIT(8),      /* SUBSPACE FLAG AREA              @LGA*/         
*       8 SDWASVLD    BIT(1), /* ON IF SUBSPACE INFORMATION AT TIME OF          
*                                ERROR (SDWASTKN AND SDWASNM) IS                
*                                AVAILABLE AND VALID             @LGA*/         
*       8 SDWASSA     BIT(1), /* ON IF A SUBSPACE WAS ACTIVE AT TIME            
*                                OF ERROR                        @LGA*/         
*       8 *           BIT(4), /* RESERVED                        @PKC*/         
*       8 SDWABSA     BIT(1), /* Indicates that Reduced Authority (set          
*                                via the BSA instruction) is in effect.         
*                                                                @PKA*/         
*       8 SDWASSRS    BIT(1), /* TURNED ON BY AN ESTAE-TYPE RECOVERY            
*                                ROUTINE TO INDICATE THAT RTM SHOULD            
*                                RESTORE ITS ORIGINAL SUBSPACE                  
*                                ENVIRONMENT IF IT RECURSES      @LGA*/         
*     7 SDWAARCH BIT(8),      /* Copy of FLCARCH                 @PHC*/         
*       9 *           BIT(7), /*                                 @PHA*/         
*       9 SDWAZARC    BIT(1), /* Copy of PSAZARCH                @PHA*/         
*        11 SDWAESAM  BIT(1), /* Copy of PSAZARCH                @PHA*/         
*     7 SDWAPRM2 CHAR(8),     /* ARR MSTA AREA COPY              @L4A*/         
*       9 SDWAMST1 CHAR(4),   /* 1ST WORD OF MSTA AREA           @L4A*/         
*         11 SDWAPCEP BIT(32),/* PC ESTAE PARAM VALUE            @L4A*/         
*       9 SDWAMST2 CHAR(4),   /* 2ND WORD OF MSTA AREA           @L4A*/         
*         11 SDWAPCEA BIT(32),/* PC ESTAE PARAM ALET VALUE       @L4A*/         
*    7 SDWALSED PTR(31),      /* PTR TO LINKAGE STK ENTRY (CR15) @D2C*/         
*    7 SDWACLSE CHAR(4),      /* Copy of PSACLHSE (Locks Held String            
*                                Extension) at the time of error,               
*                                minus any locks that have been                 
*                                released by FRR recovery routines              
*                                that ran before the current                    
*                                recovery routine.  This field was              
*                                always '0' on entry to Estae-type              
*                                recovery routines prior to                     
*                                HBB7770                         @LRC*/         
*    7 SDWALSLV FIXED(16),    /* FOR RETRY: NUMBER OF BAKR ENTRIES PAST         
*                              TIME-OF-SET TO SET LINKAGE STACK ON              
*                              RETRY. IGNORED FOR FRR IF RETRY=ERROR            
*                                                                    */         
*    7 SDWARTAM FIXED(8),     /* Retry Amode:                                   
*                                0 = "normal", 1 = AMODE 24,                    
*                                2 = AMODE 31, 3 = AMODE 64      @LxA*/         
*    7 * CHAR(1),             /* ROUND TO DOUBLE WORD BOUNDARY   @L9C*/         
*    7 SDWASTKN CHAR(8),      /* STOKEN OF THE SUBSPACE THAT WAS                
*                                ACTIVE AT THE TIME OF ERROR  - VALID           
*                                ONLY IF SDWASVLD IS ON, NOT AVAILABLE          
*                                FOR FRRS                        @LGA*/         
*    7 SDWASNM  CHAR(8),      /* NAME OF THE SUBSPACE THAT WAS                  
*                                ACTIVE AT THE TIME OF ERROR  - VALID           
*                                ONLY IF SDWASVLD IS ON, NOT AVAILABLE          
*                                FOR FRRS                        @LGA*/         
*    7 SDWASNAM CHAR(8),      /* Name of the SYSTEM that this record            
*                                was created on.  This is the same              
*                                system name that is used in a                  
*                                SYSPLEX.                        @05A*/         
* /* THE LENGTH MUST BE UPDATED IF ADDITIONS ARE MADE HERE       @L4A*/         
*%IF SDWALVL ^= '' %THEN                                                        
*  %GOTO SDWABSL8;                      /*                   @G860P1C*/         
* %IF IHAVIA='YES' %THEN                  /*                     @L4A*/         
*    %IHAALET='VIA(SDWAALET)';            /*                     @L4A*/         
* %ELSE %IHAALET='';                      /*                     @L4A*/         
* %IF SDWA_PRD = '' %THEN                 /*                     @LIA*/         
*   %SDWAXIOMB = 'BASED(SDWAXIOM)';       /*                     @LIA*/         
* %ELSE                                   /*                     @LIA*/         
*   %SDWAXIOMB = 'BASED(ADDR(SDWA)+SDWAXIOM)';  /*               @LIA*/         
*  1 SDWARC2  IHAALET  SDWAXIOMB,       /*                       @L4C*/         
*%GOTO SDWABSL9;                        /*                   @G860P1C*/         
*%SDWABSL8: ;                           /*                   @G860P1C*/         
*  SDWALVL SDWARC2,                     /*                   @G860P1C*/         
*%SDWABSL9: ;                           /*                   @G860P1C*/         
* /*******************************************************************/         
* /*                                                                 */         
* /*        EXTENSION FOR I/O MACHINE CHECK ADDITIONAL DATA.         */         
* /*        THIS EXTENSION IS RECORDED.                      @G860P1C*/         
* /*                                                                 */         
* /*******************************************************************/         
*  6 SDWAIOMA CHAR(16),                 /*                   @G860P1C*/         
*   7 SDWARFSE CHAR(8),                 /* z/Architecture FSA    @LIC*/         
*   8 SDWARFSH CHAR(4),                 /* High half of FSA (zero               
*                                          pre-z/Architecture    @LIA*/         
*   8 SDWARFSL CHAR(4),                 /* Low half of FSA       @LIA*/         
*   7 SDWAMCIC CHAR(8),                 /* MACHINE CHECK                        
*                                          INTERRUPT CODE    @G860P1C*/         
*%IF SDWALVL ^= '' %THEN                                                        
*  %GOTO SDWABSLG;                      /*                   @G860P1C*/         
* %IF IHAVIA='YES' %THEN                  /*                     @L4A*/         
*    %IHAALET='VIA(SDWAALET)';            /*                     @L4A*/         
* %ELSE %IHAALET='';                      /*                     @L4A*/         
* %IF SDWA_PRD = '' %THEN                 /*                     @LIA*/         
*   %SDWAXLCKB = 'BASED(SDWAXLCK)';       /*                     @LIA*/         
* %ELSE                                   /*                     @LIA*/         
*   %SDWAXLCKB = 'BASED(ADDR(SDWA)+SDWAXLCK)';  /*               @LIA*/         
*  1 SDWARC3 IHAALET   SDWAXLCKB,       /*                       @L4C*/         
*%GOTO SDWABSLH;                        /*                   @G860P1C*/         
*%SDWABSLG: ;                           /*                   @G860P1C*/         
*  SDWALVL SDWARC3,                     /*                   @G860P1C*/         
*%SDWABSLH: ;                           /*                   @G860P1C*/         
* /*******************************************************************/         
* /*                                                                 */         
* /*        EXTENSION FOR THE ADDITIONAL FRELOCK DATA.               */         
* /*        THIS EXTENSION IS RECORDED.                      @G860P1C*/         
* /*                                                                 */         
* /*******************************************************************/         
*    6 SDWAFLCK CHAR(32) BDY(WORD),  /* ADDITIONAL FRELOCK                      
*                                                INFORMATION @G860P1C*/         
*      7 SDWAFLK1 BIT(8),  /* FLAGS INDICATING WHAT LOCKS ARE                   
*                             TO BE FREED                    @G860P1C*/         
*        8 SDWAFCPU BIT(1),  /* ON, FREE THE CPU LOCK        @G860P1S*/         
*        8 *        BIT(3),  /* RESERVED                     @G860P1S*/         
*        8 SDWAFRSM BIT(1),  /* ON, FREE THE RSM LOCK        @G860P1S*/         
*        8 SDWAFTRC BIT(1),  /* ON, FREE THE TRACE LOCK      @G860P1S*/         
*        8 SDWAIOCB BIT(1),  /* ON, THE IOS LOCK                 @P4M*/         
*        8 *        BIT(1),  /* RESERVED                         @P4C*/         
*      7 SDWAFLK2 BIT(8),  /* FLAGS INDICATING WHAT LOCKS ARE                   
*                             TO BE FREED                    @G860P1C*/         
*        8 *        BIT(3),  /* RESERVED                     @G860P1S*/         
*        8 SDWAFRSC BIT(1),  /* ON, FREE THE RSM COMMON CLASS LOCK              
*                                                            @G860P1S*/         
*        8 SDWAFRSG BIT(1),  /* ON, FREE THE RSM GLOBAL CLASS LOCK              
*                                                            @G860P1S*/         
*        8 SDWAFVSF BIT(1),  /* ON, FREE THE VSM FIX LOCK    @G860P1S*/         
*        8 SDWAFASG BIT(1),  /* ON, FREE THE ASM GLOBAL CLASS LOCK              
*                                                            @G860P1S*/         
*        8 SDWAFRSS BIT(1),  /* ON, FREE THE RSM STEAL CLASS LOCK               
*                                                            @G860P1S*/         
*      7 SDWAFLKE CHAR(4), /* FLAGS INDICATING LOCKS TO BE FREED @L9C*/         
*        9 SDWAFLE1 CHAR(1),  /* FLAGS FOR LOCKS TO BE FREED IN FIRST           
*                             BYTE OF CLHS EXTENSION             @L9A*/         
*          11 SDWABLSD BIT(1),  /* ON, FREE THE BMFLSD LOCK      @LCA*/         
*          11 SDWAXDS  BIT(1),  /* ON, FREE THE XCFDS LOCK       @LBA*/         
*          11 SDWAXRES BIT(1),  /* ON, FREE THE XCFRES LOCK      @LBA*/         
*          11 SDWAXQ   BIT(1),  /* ON, FREE THE XCFQ LOCK        @LBA*/         
*          11 SDWAESET BIT(1),  /* ON, FREE THE ETRSET LOCK      @LAA*/         
*          11 SDWAIXSC BIT(1),  /* ON, FREE THE IXLSCH LOCK      @LFA*/         
*          11 SDWAIXSR BIT(1),  /* ON, FREE THE IXLSHR LOCK      @LFA*/         
*          11 SDWAIXDS BIT(1),  /* ON, FREE THE IXLDS LOCK       @LFA*/         
*        9 SDWAFLE2 CHAR(1),  /* FLAGS FOR LOCKS TO BE FREED IN SECOND          
*                             BYTE OF CLHS EXTENSION             @L9A*/         
*          11 SDWAIXSH BIT(1),  /* ON, FREE THE IXLSHELL LOCK    @LFA*/         
*          11 SDWAULUT BIT(1),  /* ON, FREE THE IOSULUT LOCK     @LDA*/         
*          11 SDWAIXRE BIT(1),  /* ON, FREE THE IXLREQST LOCK    @03A*/         
*          11 SDWAWLMR BIT(1),  /* On, free the WLMRES lock      @PFC*/         
*          11 SDWAWLMQ BIT(1),  /* On, free the WLMQ lock        @LJA*/         
*          11 SDWACNTX BIT(1),  /* On, free the CONTEXT lock     @PFC*/         
*          11 SDWARGSV BIT(1),  /* On, free the REGSRV lock      @LJA*/         
*          11 SDWASSD  BIT(1),  /* On, free the SSD lock         @LLA*/         
*        9 SDWAFLE3 CHAR(1),  /* FLAGS FOR LOCKS TO BE FREED IN THIRD           
*                             BYTE OF CLHS EXTENSION             @L9A*/         
*          11 SDWAGRSI BIT(1),  /* On, free the GRSINT lock      @LOA*/         
*          11 SDWAMISL BIT(1),  /* On, free the MISC lock        @LWA*/         
*            13 SDWASLK1 BIT(1), /* N/A                          @LWC*/         
*          11 SDWADNU2 BIT(1),  /* N/A                           @LWA*/         
*            13 SDWANLK1 BIT(1), /* N/A                          @LWC*/         
*          11 SDWADNU3 BIT(1),  /* N/A                           @LWA*/         
*            13 SDWAOLK1 BIT(1), /* N/A                          @LWC*/         
*          11 SDWADNU4 BIT(1),  /* N/A                           @LWA*/         
*            13 SDWAXLK1 BIT(1), /* N/A                          @LWC*/         
*          11 SDWADNU5 BIT(1),  /* N/A                           @LWA*/         
*            13 SDWARLK3 BIT(1), /* N/A                          @LWC*/         
*          11 SDWARLK2 BIT(1),  /* On, free the HCWDRLK2 lock    @LPA*/         
*          11 SDWARLK1 BIT(1),  /* On, free the HCWDRLK1 lock    @LPA*/         
*        9 SDWAFLE4 CHAR(1),  /* FLAGS FOR LOCKS TO BE FREED IN FOURTH          
*                             BYTE OF CLHS EXTENSION             @L9A*/         
*          11 SDWASRME BIT(1),  /* On, free the SRMENQ lock      @LTA*/         
*          11 SDWASSDG BIT(1),  /* On, free the SSDGROUP lock    @LYA*/         
*      7 *        CHAR(2), /* RESERVED                           @L9A*/         
*      7 SDWALRSG PTR(31), /* LOCKWORD ADDR FOR RSMGL  LOCK  @G860P1C*/         
*      7 SDWALASG PTR(31), /* LOCKWORD ADDR FOR ASMGL  LOCK  @G860P1C*/         
*      7 SDWALRSS PTR(31), /* LOCKWORD ADDR FOR RSMST  LOCK  @G860P1C*/         
*      7 SDWALRSX PTR(31), /* LOCKWORD ADDR FOR RSMXM  LOCK  @G860P1C*/         
*      7 SDWALRSA PTR(31), /* LOCKWORD ADDR FOR RSMAD  LOCK  @G860P1C*/         
*      7 SDWALRSC PTR(31), /* LOCKWORD ADDR FOR RSMCM  LOCK  @G860P1S*/         
*%IF SDWALVL ^= '' %THEN                                                        
*  %GOTO SDWABSLK;                      /*                       @LIA*/         
* %IF IHAVIA='YES' %THEN                /*                       @LIA*/         
*    %IHAALET='VIA(SDWAALET)';          /*                       @LIA*/         
* %ELSE %IHAALET='';                    /*                       @LIA*/         
* %IF SDWA_PRD = '' %THEN                 /*                     @LIA*/         
*   %SDWAXEMEB = 'BASED(SDWAXEME)';       /*                     @LIA*/         
* %ELSE                                   /*                     @LIA*/         
*   %SDWAXEMEB = 'BASED(ADDR(SDWA)+SDWAXEME)';  /*               @LIA*/         
*  1 SDWARC4 IHAALET SDWAXEMEB,         /*                       @LIC*/         
*%GOTO SDWABSLL;                        /*                       @LIA*/         
*%SDWABSLK: ;                           /*                       @LIA*/         
*  SDWALVL SDWARC4,                     /*                       @LIA*/         
*%SDWABSLL: ;                           /*                       @LIA*/         
*/********************************************************************/         
*/*                                                                  */         
*/* SDWARC4 - Extension for 64-bit related information.              */         
*/*                                                                  */         
*/*        For FRRs, this extension is always present.               */         
*/*        For ESTAE-type recovery, this extension is present        */         
*/*        ONLY when the SDWA is above 16M. Be sure to check for     */         
*/*        a non-zero SDWAXEME before accessing it from              */         
*/*        ESTAE-type recovery unless you know that the SDWA is      */         
*/*        above 16M]]] This extension is recorded.                  */         
*/*        In order to access this extension, PL/X code should       */         
*/*        use the following RFY (after, for ESTAE-type recovery,    */         
*/*        verifying that SDWAXEME is non-zero if needed):           */         
*/*        Rfy SDWARC4 via(SDWAALET) based(SDWAXEME)                 */         
*/*                    -------------                                 */         
*/*                         !                                        */         
*/*                     (optional - depending on usage)              */         
*/*                                                              @LIA*/         
*/********************************************************************/         
*     7 SDWAG64  CHAR(128) BDY(DWORD), /* 64-bit GPRs - initially               
*                      contains registers at the time of error.  When           
*                      SDWAUP64 or SDWAG64R are on, these have been set         
*                      to contain the requested retry registers and             
*                      SDWAGRSV and SDWAG64H should be used for the             
*                      time of error register contents.          @PSC           
*                      When the error was a program interrupt within            
*                      transactional execution, these are the regs              
*                      at the time of the program interrupt within the          
*                      transaction.                              @LUC*/         
*   %IF SYSVERSION = '' %THEN       /* PL/S-III                  @LIA*/         
*     %GOTO SDWAPLS1;               /* Skip PL/X declare         @LIA*/         
*   %IF SYSRULESMOD='PL/S-III ' %THEN                         /* @LIA*/         
*     %GOTO SDWAPLS1;               /* Skip PL/X declare         @LIA*/         
*      8 SDWATX_PITDB_G64 CHAR(128) BDY(DWORD), /* Same as SDWAG64              
*                                                                @LZA*/         
*       9 SDWAG6400 CHAR(8),     /* Register 0                   @LIA*/         
*       9 SDWAG6401 CHAR(8),     /* Register 1                   @LIA*/         
*       9 SDWAG6402 CHAR(8),     /* Register 2                   @LIA*/         
*       9 SDWAG6403 CHAR(8),     /* Register 3                   @LIA*/         
*       9 SDWAG6404 CHAR(8),     /* Register 4                   @LIA*/         
*       9 SDWAG6405 CHAR(8),     /* Register 5                   @LIA*/         
*       9 SDWAG6406 CHAR(8),     /* Register 6                   @LIA*/         
*       9 SDWAG6407 CHAR(8),     /* Register 7                   @LIA*/         
*       9 SDWAG6408 CHAR(8),     /* Register 8                   @LIA*/         
*       9 SDWAG6409 CHAR(8),     /* Register 9                   @LIA*/         
*       9 SDWAG6410 CHAR(8),     /* Register 10                  @LIA*/         
*       9 SDWAG6411 CHAR(8),     /* Register 11                  @LIA*/         
*       9 SDWAG6412 CHAR(8),     /* Register 12                  @LIA*/         
*       9 SDWAG6413 CHAR(8),     /* Register 13                  @LIA*/         
*       9 SDWAG6414 CHAR(8),     /* Register 14                  @LIA*/         
*       9 SDWAG6415 CHAR(8),     /* Register 15                  @LIA*/         
*     7 * char(4),               /* SdwaReleaseCode              @07A*/         
*       9 * char(1),             /* Reserved                     @07A*/         
*       9 SdwaReleaseCode char(3), /* Release code when the abended             
*                                   RB level was interrupted for RTM            
*                                   processing after it had been                
*                                   Released but before it could regain         
*                                   control.  This field is valid               
*                                   only when SdwaReleaseCodeValid              
*                                   is on.  For a Pause multiple,               
*                                   contains the highest Release code           
*                                   at the time of the abend     @LYC*/         
*     7 * CHAR(4),               /* Reserved                     @07C*/         
*     7 SDWAG64H CHAR(64),       /* High order halves of the time               
*                      of error 64-bit registers.  The low order                
*                      halves are in SDWAGRSV.  Also see SDWAG64. @PSC          
*                      When the error was a program interrupt within            
*                      transactional execution, these are the regs              
*                      at the time of the program interrupt within the          
*                      transaction.                              @LUC*/         
*      8 SDWATX_PITDB_G64H CHAR(64), /* Same as SDWAG64H         @LZA*/         
*     7 SDWAC64S CHAR(128) BDY(DWORD), /* Z/Architecture                        
*                                   control regs at time                        
*                                   of error. These values are not              
*                                   restored on retry.           @LIA*/         
*       9 SDWAC640 CHAR(8),      /* CONTROL REGISTER 0           @LIA*/         
*       9 SDWAC641 CHAR(8),      /* CONTROL REGISTER 1           @LIA*/         
*       9 SDWAC642 CHAR(8),      /* CONTROL REGISTER 2           @LIA*/         
*       9 SDWAC64_XM BDY(DWORD), /*                              @LMA*/         
*        11 SDWAC643 CHAR(8) BDY(DWORD), /* Control Register 3   @LIA*/         
*         13 SDWAC643_SAsteSN Fixed(32),  /* Secondary ASTE Seq# @LMA*/         
*         13 SDWAC643_KM_SASID,    /* Key mask / SASID           @LMA*/         
*           15 SDWAC643_KM CHAR(2), /* Key mask                  @LMA*/         
*           15 SDWAC643_SASID CHAR(2), /* Secondary ASID         @LMA*/         
*        11 SDWAC644 CHAR(8) BDY(DWORD), /* Control Register 4   @LMA*/         
*         13 SDWAC644_PAsteSN Fixed(32),  /* Primary ASTE Seq#   @LMA*/         
*         13 SDWAC644_AX_PASID,    /* Authorization index / PASN @LMA*/         
*           15 SDWAC644_AX CHAR(2), /* Authorization index       @LMA*/         
*           15 SDWAC644_PASID CHAR(2), /* Primary ASID           @LMA*/         
*       9 SDWAC645 CHAR(8),      /* CONTROL REGISTER 5           @LIA*/         
*       9 SDWAC646 CHAR(8),      /* CONTROL REGISTER 6           @LIA*/         
*       9 SDWAC647 CHAR(8),      /* CONTROL REGISTER 7           @LIA*/         
*       9 SDWAC648 CHAR(8),      /* CONTROL REGISTER 8           @LIA*/         
*       9 SDWAC649 CHAR(8),      /* CONTROL REGISTER 9           @LIA*/         
*       9 SDWAC64A CHAR(8),      /* CONTROL REGISTER 10          @LIA*/         
*       9 SDWAC64B CHAR(8),      /* CONTROL REGISTER 11          @LIA*/         
*       9 SDWAC64C CHAR(8),      /* CONTROL REGISTER 12          @LIA*/         
*       9 SDWAC64D CHAR(8),      /* CONTROL REGISTER 13          @LIA*/         
*       9 SDWAC64E CHAR(8),      /* CONTROL REGISTER 14          @LIA*/         
*       9 SDWAC64F CHAR(8),      /* CONTROL REGISTER 15          @LIA*/         
*     7 SDWATRNE CHAR(8) BDY(DWORD), /* 8-byte TEA               @LIA*/         
*       9 SDWATRNEHIGH CHAR(4), /* 8-byte TEA upper half         @M0A*/         
*       9 SDWATRNELOW  CHAR(4), /* 8-byte TEA lower half         @M0A*/         
*     7 SDWABEA  CHAR(8) BDY(DWORD), /* Breaking Event Address   @LNA*/         
*     7 SDWAPSW16 CHAR(16) BDY(DWORD),  /* 16-byte PSW analog of                
*                      SDWAEC1.                                                 
*                      When the error was a program interrupt within            
*                      transactional execution, this is the PSW                 
*                      at the time of the program interrupt within the          
*                      transaction.                                             
*                      When the initial error was a program interrupt           
*                      handled by an ESPIE routine that specified both          
*                      EPIEPERC and EPIERSET, the program mask in this          
*                      field is the program mask that resulted from             
*                      the ESPIE RESET rather than the value at the             
*                      time of error.                            @0AA*/         
*      9 SDWATX_PITDB_PSW16 CHAR(16) BDY(DWORD), /* Same as SDWAPSW16           
*                                                                @LZA*/         
*   %SDWAPLS1:;                  /*                              @LMM*/         
*%IF SDWALVL ^= '' %THEN                                                        
*  %GOTO SDWABSLRC5K;                   /*                       @LUA*/         
* %IF IHAVIA='YES' %THEN                /*                       @LUA*/         
*    %IHAALET='VIA(SDWAALET)';          /*                       @LUA*/         
* %ELSE %IHAALET='';                    /*                       @LUA*/         
* %IF SDWA_PRD = '' %THEN                 /*                     @LUA*/         
*   %SDWARC5B = 'BASED(SDWAXRC5)';        /*                     @LUA*/         
* %ELSE                                   /*                     @LUA*/         
*   %SDWARC5B = 'BASED(ADDR(SDWA)+SDWAXRC5)';   /*               @LUA*/         
*  1 SDWARC5 BDY(DWORD) IHAALET SDWARC5B, /*                     @LUC*/         
*%GOTO SDWABSLRC5L;                     /*                       @LUA*/         
*%SDWABSLRC5K: ;                        /*                       @LUA*/         
*  SDWALVL SDWARC5 BDY(DWORD),          /*                       @LUA*/         
*%SDWABSLRC5L: ;                        /*                       @LUA*/         
*        6 SDWATXD,                 /*                           @LUA*/         
*   %IF SYSVERSION = '' %THEN       /* PL/S-III                  @LUA*/         
*     %GOTO SDWAPLS2;               /* Skip PL/X declare         @LUA*/         
*   %IF SYSRULESMOD='PL/S-III ' %THEN                         /* @LUA*/         
*     %GOTO SDWAPLS2;               /* Skip PL/X declare         @LUA*/         
*/********************************************************************/         
*/*                                                                  */         
*/* SDWARC5 -                                                        */         
*/*                                                                  */         
*/*        For FRRs, this extension is always present.               */         
*/*        For ESTAE-type recovery, this extension is present        */         
*/*        ONLY when the SDWA is above 16M. Be sure to check for     */         
*/*        a non-zero SDWAXRC5 before accessing it from              */         
*/*        ESTAE-type recovery unless you know that the SDWA is      */         
*/*        above 16M]]] This extension is recorded.                  */         
*/*        In order to access this extension, PL/X code should       */         
*/*        use the following RFY (after, for ESTAE-type recovery,    */         
*/*        verifying that SDWAXRC5is non-zero if needed):            */         
*/*        Rfy SDWARC5 via(SDWAALET) based(SDWAXEME)                 */         
*/*                    -------------                                 */         
*/*                         !                                        */         
*/*                     (optional - depending on usage)              */         
*/*                                                              @LUA*/         
*/********************************************************************/         
*         7 SDWATX_ABORT_G64 CHAR(128), /* Transaction abort G64.               
*                             64-bit GPRs 0-15 in order.                        
*                             This data is valid only when bits                 
*                             SDWAPCHK and SDWAPTX1 are on,                     
*                             indicating that the                               
*                             program interrupt occurred while within           
*                             transactional execution            @LZA*/         
*          8 SDWATXG64 CHAR(128), /* Same as SDWATX_ABORT_G64    @LUA*/         
*         7 SDWATX_ABORT_PSW16 CHAR(16) BDY(DWORD), /*                          
*                             Transaction abort PSW.                            
*                             This data is valid only when bits                 
*                             SDWAPCHK and SDWAPTX1 are on,                     
*                             indicating that the                               
*                             program interrupt occurred while within           
*                             transactional execution.                          
*                      When the initial error was a program interrupt           
*                      handled by an ESPIE routine that specified both          
*                      EPIEPERC and EPIERSET, the program mask in this          
*                      field is the program mask that resulted from             
*                      the ESPIE RESET rather than the value at the             
*                      time of error.                            @0AA*/         
*         8 SDWATXPSW16 CHAR(16) BDY(DWORD), /* Same as                         
*                             SDWATX_ABORT_PSW16                 @LUA*/         
*   %SDWAPLS2:;                  /*                              @LUA*/         
*%IF SDWALVL ^= '' %THEN                                                        
*  %GOTO SDWABSL4;                                                              
* %IF IHAVIA='YES' %THEN                  /*                     @L4A*/         
*    %IHAALET='VIA(SDWAALET)';            /*                     @L4A*/         
* %ELSE %IHAALET='';                      /*                     @L4A*/         
* %IF SDWA_PRD = '' %THEN                 /*                     @LIA*/         
*   %SDWAPTRSB = 'BASED(SDWAXPAD)';       /*                     @LIA*/         
* %ELSE                                   /*                     @LIA*/         
*   %SDWAPTRSB = 'BASED(ADDR(SDWA)+SDWAXPAD)';  /*               @LIA*/         
*  1 SDWAPTRS IHAALET SDWAPTRSB,        /* THIS PTR SECTION MUST BE A           
*                                          DOUBLEWORD LENGTH (MULTIPLE          
*                                          OF 8) AND ALL EXTENSIONS             
*                                          MUST BE A DOUBLEWORD LENGTH          
*                                          (MULTIPLE OF 8)       @L4C*/         
*%GOTO SDWABSL5;                                                                
*%SDWABSL4: ;                                                                   
*  SDWALVL SDWAPTRS,                    /*                   @G38FP2F*/         
*%SDWABSL5: ;                                                                   
*   6 SDWADSRP    PTR(31),              /* DUMP STORAGE RANGES PTR.             
*                                          POINTS TO SDWANRC1    @L1C*/         
*   6 SDWASRVP    PTR(31),              /* ADDITIONAL COMPONENT SERVICE         
*                                          DATA PTR. POINTS TO SDWARC1          
*                                                                @L1C*/         
*   6 SDWAXIOM    PTR(31),              /* ADDRESS OF I/O MACHINE CHECK         
*                                          AREA. PTS TO SDWARC2  @L1C*/         
*   6 SDWAXSPL    PTR(31),              /* ADDRESS OF STORAGE SUBPOOLS          
*                                          AREA. PTS TO SDWANRC2 @L1C*/         
*   6 SDWAXLCK    PTR(31),              /* ADDRESS OF ADDITIONAL                
*                                          FRELOCK INFORMATION. PTS TO          
*                                          SDWARC3               @L1C*/         
*   6 SDWADSPP    PTR(31),              /* DATA SPACE STORAGE RANGES            
*                                          POINTER - SDWANRC3    @L7C*/         
*   6 SDWAXEME    PTR(31),              /* Address of 64-bit info               
*                                          Points to SDWARC4     @LIC*/         
*   6 SDWAXRC5    PTR(31),              /* Address of SDWARC5    @LUC*/         
*%IF SDWALVL ^= '' %THEN                                                        
*  %GOTO SDWABSL6;                                                              
* %IF IHAVIA='YES' %THEN                  /*                     @L4A*/         
*    %IHAALET='VIA(SDWAALET)';            /*                     @L4A*/         
* %ELSE %IHAALET='';                      /*                     @L4A*/         
*  1 SDWANRC1 IHAALET BASED(SDWADSRP),  /* NONRECORDABLE         @L4C*/         
*%GOTO SDWABSL7;                                                                
*%SDWABSL6: ;                                                                   
*  SDWALVL SDWANRC1,                    /* NONRECORDABLE     @G381P2F*/         
*%SDWABSL7: ;                                                                   
* /*******************************************************************/         
* /*                                                                 */         
* /*        EXTENSION FOR THE DUMP STORAGE RANGES                    */         
* /*        THIS EXTENSION IS NOT RECORDED.                      @L4A*/         
* /*                                                                 */         
* /*******************************************************************/         
*   6 SDWADSR CHAR(240) BDY(WORD),      /* DUMP STORAGE RANGES                  
*                                                            @G382P2F*/         
*     7 SDWADSRA(30) CHAR(8),           /* ARRAY OF THE RANGES                  
*                                                            @G382P2F*/         
*       8 SDWADSRS    CHAR(4),          /* START ADDRESS OF THE                 
*                                          RANGE             @G382P2F*/         
*       8 SDWADSRE    CHAR(4),          /* END ADDRESS OF THE RANGE             
*                                                            @G382P2F*/         
*         9 SDWADSRL   BIT(1),          /* LAST RANGE INDICATOR                 
*                                                            @G860P1S*/         
*%IF SDWALVL ^= '' %THEN                                                        
*  %GOTO SDWABSLE;                                                              
* %IF IHAVIA='YES' %THEN                  /*                     @L4A*/         
*    %IHAALET='VIA(SDWAALET)';            /*                     @L4A*/         
* %ELSE %IHAALET='';                      /*                     @L4A*/         
*  1 SDWANRC2 IHAALET  BASED(SDWAXSPL), /*                       @L4C*/         
*  %GOTO SDWABSLF;                      /*                   @G860P1C*/         
*%SDWABSLE: ;                           /*                   @G860P1C*/         
*  SDWALVL SDWANRC2,                    /*                   @G860P1C*/         
*%SDWABSLF: ;                           /*                   @G860P1C*/         
* /*******************************************************************/         
* /*                                                                 */         
* /*        EXTENSION FOR THE LIST OF STORAGE SUBPOOLS.              */         
* /*        THIS EXTENSION IS NOT RECORDED AND IS NOT ALLOCATED      */         
* /*        FOR SUPER FRR STACKS.                            @G860P1C*/         
* /*                                                                 */         
* /*******************************************************************/         
*   6 SDWASPLE    CHAR(16) BDY(WORD),   /* UP TO 7 SUBPOOLS OF                  
*                                          STORAGE TO BE DUMPED                 
*                                          BY ABDUMP         @G860P1C*/         
*    7 SDWASPLN    FIXED(15),           /* NUMBER OF SUBPOOLS                   
*                                          TO DUMP           @G860P1C*/         
*    7 SDWASPLS(7) FIXED(15),           /* IDS OF SUBPOOLS                      
*                                          TO DUMP               @L7C*/         
*%IF SDWALVL ^= '' %THEN                /*                       @L7A*/         
*  %GOTO SDWABSLI;                      /*                       @L7A*/         
* %IF IHAVIA='YES' %THEN                /*                       @L7A*/         
*    %IHAALET='VIA(SDWAALET)';          /*                       @L7A*/         
* %ELSE %IHAALET='';                    /*                       @L7A*/         
*  1 SDWANRC3 IHAALET  BASED(SDWADSPP), /*                       @L7C*/         
*  %GOTO SDWABSLJ;                      /*                       @L7A*/         
*%SDWABSLI: ;                           /*                       @L7A*/         
*  SDWALVL SDWANRC3,                    /*                       @L7A*/         
*%SDWABSLJ: ;                           /*                       @L7A*/         
* /*******************************************************************/         
* /*                                                                 */         
* /*        EXTENSION FOR THE LIST OF DUMPOPX STORAGE RANGES.        */         
* /*        THIS EXTENSION IS NOT RECORDED.                      @L7A*/         
* /*                                                                 */         
* /*******************************************************************/         
*   6 SDWADXSL    CHAR(240) BDY(DWORD), /* LIST OF DATA SPACE STORAGE           
*                                          RANGES                @L7A*/         
*     7 SDWADXSR(15) CHAR(16) BDY(WORD), /* UP TO 15 RANGES      @L7A*/         
*       8 SDWADXBG PTR(31),             /* BEGINNING OF RANGE    @L7A*/         
*       8 SDWADXEN PTR(31),             /* END OF RANGE          @L7A*/         
*         9 SDWADXLE BIT(1),            /* BIT INDICATING END OF LIST           
*                                                                @L7A*/         
*       8 SDWADXST CHAR(8);             /* STOKEN FOR RANGE      @L7A*/         
*/* THESE CONSTANTS MAP RETURN CODES FROM AN EXIT IN FIELD           */         
*/* SDWARCDE                                                         */         
*DECLARE                                                                        
*  SDWACWT  CONSTANT(0),                /* CONTINUE WITH TERMINATION.           
*                                          THIS INDICATION IMPLIES              
*                                          PERCOLATION               */         
*  SDWARETY CONSTANT(4),                /* RETRY USING RETRY ADDRESS            
*                                          IN SDWARTYA FIELD         */         
*  SDWAPSTI CONSTANT(16);               /* PREVENT FURTHER (E)STAI              
*                                          PROCESSING                */         
*/*  THESE CONSTANTS MAP THE LEVEL OF THE SDWA IN FIELD              */         
*/*  SDWAVID                                                 @G382P2F*/         
*DECLARE                                                                        
*  SDWAVS3 CONSTANT(1),                 /* THE SDWA IS AT AN                    
*                                          MVS/SYSTEM PRODUCT                   
*                                          RELEASE 2 LEVEL   @G860P1S*/         
*  SDWAVS4 CONSTANT(2),                 /* THE SDWA IS AT AN MVS/SYSTEM         
*                                          PRODUCT VERSION 2 RELEASE 1          
*                                          LEVEL             @G860P1S*/         
*  SDWAVS5 CONSTANT(3),                 /* THE SDWA IS AT AN MVS/SYSTEM         
*                                          PRODUCT JBB2110 LEVEL @L1A*/         
*  SDWAVS6 CONSTANT(4),                 /* THE SDWA IS AT AN MVS/SYSTEM         
*                                          PRODUCT HBB3310 LEVEL @L4A*/         
*  SDWAVS7 CONSTANT(5),                 /* THE SDWA IS AT AN MVS/SYSTEM         
*                                          PRODUCT HBB4410 LEVEL @L9A*/         
*  SDWAVS8 CONSTANT(6),                 /* THE SDWA IS AT AN MVS/SYSTEM         
*                                          PRODUCT HBB5510 LEVEL @L9Z*/         
*  SDWAVS9 CONSTANT(7),                 /* The SDWA is at level                 
*                                          HBB7703               @LIA*/         
*  SDWAVS10 CONSTANT(8),                /* The SDWA is at level                 
*                                          HBB7720               @LNA*/         
*  SDWAVS11 CONSTANT(9),                /* The SDWA is at level                 
*                                          HBB7790               @LUA*/         
*  SDWAVSN CONSTANT(9); /* 9, INDICATES THE SDWA IS AT AN                       
*                      MVS/SYSTEM PRODUCT HBB7790 LEVEL.                        
*                      IF THE VALUE OF THIS CONSTANT IS CHANGED,                
*                      ADD A NEW SDWAVSX WHERE X IS THE NUMBER                  
*                      THAT FOLLOWS THE LAST SDWAVSX FIELD, AND                 
*                      MAKE THE CONSTANT EQUAL TO SDWAVSN.                      
*                      ALSO DOCUMENT THE VALUE IN SDWAVID AS ABOVE.             
*                      REFER TO MODULE IEAVTFRO FOR A LIST OF MODULES           
*                      WHICH MUST BE CHANGED/RECOMPILED WHEN THE                
*                      VERSION NUMBER IS CHANGED                 @LUC*/         
*/*  THESE CONSTANTS REPRESENT THE MAXIMUM NUMBER OF DUMP STORAGE    */         
*/*  RANGES ALLOWED IN SDWADSR                               @G382P2F*/         
*DECLARE                                                                        
*  SDWASPMX CONSTANT(7),                /* MAXIMUM NUMBER OF                    
*                                          SUBPOOLS          @G860P1C*/         
*  SDWADMX1 CONSTANT(4),                /* PREVIOUS MAXIMUM NUMBER              
*                                          OF DUMP RANGES    @G382P2F*/         
*  SDWADMX2 CONSTANT(30),               /* NEW MAXIMUM NUMBER OF                
*                                          DUMP RANGES           @L7C*/         
*  SDWADXMX CONSTANT(15);               /* MAXIMUM NUMBER OF DUMPOPX            
*                                          DATA SPACE RANGES     @L7A*/         
*/*  THESE CONSTANTS REPRESENT THE VARIOUS VALUES SDWATYPE CAN HAVE  */         
*DECLARE                                                                        
*  SDWANREC CONSTANT(0) FIXED(8), /* NO RECOVERY WAS SETUP       @L4A*/         
*  SDWATFRR CONSTANT(1) FIXED(8), /* FRR WAS GIVEN CONTROL       @L4A*/         
*  SDWATEST CONSTANT(2) FIXED(8), /* ESTAE/I/X WAS GIVEN CONTROL @L4A*/         
*  SDWATARR CONSTANT(3) FIXED(8); /* ARR WAS GIVEN CONTROL       @L4A*/         
*                                                                               
*/*  CONSTANTS FOR SDWARTAM                                      @06A*/         
*DECLARE                                                                        
*  SDWARASR CONSTANT(0),  /* Retry using default AMODE system rules             
*                                                                @06A*/         
*  SDWARA24 CONSTANT(1),  /* Retry to AMODE 24 specifically      @06A*/         
*  SDWARA31 CONSTANT(2),  /* Retry to AMODE 31 specifically      @06A*/         
*  SDWARA64 CONSTANT(3);  /* Retry to AMODE 64 specifically      @06A*/         
*                                                                               
*/*  CONSTANTS FOR LENGTHS OF THE SDWA AND ITS EXTENSIONS        @P6A*/         
*                                                                               
*%SDWALEN = 'LENGTH(SDWA)';             /*LENGTH OF NON-EXTENDED SDWA*/         
*  DCL SDWALN1 CONSTANT(LENGTH(SDWA));  /* CONSTANT FOR LENGTH OF THE           
*                                          NON-EXTENDED SDWA     @P6A*/         
*                                                                               
*%SDWAPLEN = 'LENGTH(SDWAPTRS)';        /* LEN OF PTRS EXTEN @G381P2F*/         
*  DCL SDWAPLN1 CONSTANT(LENGTH(SDWAPTRS));  /* CONSTANT FOR LENGTH             
*                                          OF SDWA POINTERS      @P6A*/         
*                                                                               
*%SDWARLEN = 'LENGTH(SDWANRC1)';        /* LEN OF DSR EXTEN  @G382P2F*/         
*  DCL SDWARLN1 CONSTANT(LENGTH(SDWANRC1));  /* CONSTANT FOR LENGTH             
*                                          OF DSR EXTENSION      @P6A*/         
*                                                                               
*%SDWACLEN = 'LENGTH(SDWARC1)';         /* LEN OF SERV EXTEN @G388P2F*/         
*  DCL SDWACLN1 CONSTANT(LENGTH(SDWARC1));  /* CONSTANT FOR LENGTH OF           
*                                          SERVICE EXTENSION     @P6A*/         
*                                                                               
*%SDWAILEN = 'LENGTH(SDWARC2)';         /* LENGTH OF I/O MACHINE                
*                                          CHECK EXTENSION   @G860P1C*/         
*  DCL SDWAILN1 CONSTANT(LENGTH(SDWARC2));  /* CONSTANT FOR LENGTH OF           
*                                          I/O MACH CHECK EXT    @P6A*/         
*                                                                               
*%SDWASPL  = 'LENGTH(SDWANRC2)';        /* LENGTH OF SUBPOOL                    
*                                          LIST EXTENSION    @G860P1C*/         
*  DCL SDWASPL1 CONSTANT(LENGTH(SDWANRC2));  /* CONSTANT FOR LENGTH             
*                                          OF SUBPOOL LIST EXT   @P6A*/         
*                                                                               
*%SDWALLEN = 'LENGTH(SDWARC3)';         /* LENGTH OF ADDED FRELOCK              
*                                          DATA EXTENSION    @G860P1C*/         
*  DCL SDWALLN1 CONSTANT(LENGTH(SDWARC3));  /* CONSTANT FOR LENGTH OF           
*                                          FRELOCK DATA EXT      @P6A*/         
*                                                                               
*%SDWADLEN = 'LENGTH(SDWANRC3)';        /* LENGTH OF EXTENSION FOR DATA         
*                                          SPACE RANGES          @L7A*/         
*  DCL SDWADLN1 CONSTANT(LENGTH(SDWANRC3));  /* CONSTANT FOR LENGTH OF          
*                                          DATA SPACE RANGES EXT @P6A*/         
*                                                                               
* DCL SDWAELEN CONSTANT(LENGTH(SDWARC4));  /* Constant for length of            
*                                          64-bit extension      @LIA*/         
* DCL SDWARC5L CONSTANT(LENGTH(SDWARC5));  /* Constant for length of            
*                                          SDWARC5               @LUA*/         
* DCL SDWAELN1 CONSTANT(SDWAELEN);         /* Constant for length of            
*                                          64-bit extension      @LIA*/         
* DCL SDWARLNS CONSTANT(LENGTH(SDWARC1)+                                        
*                        LENGTH(SDWARC2)+                                       
*                        LENGTH(SDWARC3)+                                       
*                        LENGTH(SDWARC4)+                                       
*                        LENGTH(SDWARC5));  /* Sum of recordable                
*                                          extension lengths     @LUC*/         
*%SDWANLEN = '('!!SDWARLEN!!'+'!!SDWASPL!!'+'!!SDWADLEN!!')'; /* @LIA*/         
* DCL SDWANLNS CONSTANT(SDWARLEN+SDWASPL+SDWADLEN)                              
*               ;                       /* length of non-recordable             
*                                          extensions            @LIA*/         
*%SDWAMLEN = '(LENGTH(SDWA)+LENGTH(SDWAPTRS)+LENGTH(SDWARC1)+                   
*             LENGTH(SDWARC2)+LENGTH(SDWARC3)+LENGTH(SDWARC4)+                  
*             LENGTH(SDWARC5))'; /*                                             
*                                  Length of SDWA with only recordable          
*                                  extensions. This is a super                  
*                                  stack SDWA                    @LIC*/         
* DCL SDWAMLNP CONSTANT(LENGTH(SDWA)+SDWARLNS)                                  
*            ;                                                  /*              
*                                  Length of SDWA with only recordable          
*                                  extensions but without "SDWAPTRS"            
*                                  section. This constant is only               
*                                  for RTM use                   @LIC*/         
* DCL SDWAMLN1 CONSTANT(SDWAMLNP+LENGTH(SDWAPTRS));  /*                         
*                                  Length of SDWA with only recordable          
*                                  extensions. This is a super                  
*                                  stack SDWA                    @LIC*/         
*                                                                               
*                                                                               
*                                                                               
*%SDWATLEN = '('!!SDWAMLEN!!'+'!!SDWANLEN!!')';  /*                             
*                                  Length of SDWA with all extemsions.          
*                                  This is a normal stack SDWA   @LIC*/         
* DCL SDWATLN1 CONSTANT(SDWAMLN1+SDWANLNS);                     /*              
*                                  Length of SDWA with all extemsions.          
*                                  This is a normal stack SDWA   @LIC*/         
*                                                                               
* DCL SDWAOLEN CONSTANT(SDWATLN1-LENGTH(SDWARC4)-LENGTH(SDWARC5))               
*            ;                                   /* Constant for the            
*                                          SDWA length when the                 
*                                          SDWARC4/5 extensions are not         
*                                          provided for a below the             
*                                          line SDWA             @LUC*/         
*                                                                               
* DCL SDWAOLN1 CONSTANT(SDWAOLEN)                                               
*            ;                                   /* Constant for the            
*                                          SDWA length when the                 
*                                          SDWARC4/5 extensions are not         
*                                          provided for a below the             
*                                          line SDWA             @LUC*/         
*%SDWASLEN = '('!!SDWAMLEN!!'+272)';             /*                             
*                                          Getmain length of a Super            
*                                          stack SDWA            @LIC*/         
* DCL SDWASLN1 CONSTANT(SDWAMLN1+272);           /*                             
*                                          Constant for the Getmain             
*                                          length of a Super stack              
*                                          SDWA                  @LIC*/         
*                                                                               
*%SDWAFLEN = '('!!SDWASLEN!!'+'!!SDWANLEN!!')';            /*                   
*                                          Getmain length of a Normal           
*                                          stack SDWA            @LIC*/         
* DCL SDWAFLN1 CONSTANT(SDWASLN1+SDWANLNS);      /*                             
*                                          Constant for the Getmain             
*                                          length of a Normal stack             
*                                          SDWA                  @LIC*/         
*                                                                               
*%IF SDWAVRAMAP = 'NO' %THEN           /* IF NOT WANT IHAVRA @G81EP11*/         
*  %GOTO SDWABSLN;                      /* SKIP THE INCLUDE  @G860P1S*/         
*  @EJECT;                              /*                   @G81EP11*/         
*  %INCLUDE SYSLIB(IHAVRA) NOSEGMENT;   /* REQUEST IHAVRA    @G81EP11*/         
*%SDWABSLN:;                            /* LABEL TO SKIP MAP @G860P1S*/         
