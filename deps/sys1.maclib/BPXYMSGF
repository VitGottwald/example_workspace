*        %GOTO MSGFPRO  ;         /* Bilingual header                   00050000
         MACRO                                                          00100000
         BPXYMSGF  &DSECT=YES,&LIST=YES                       8@D1A     00150000
         GBLB  &MSGF411                                                 00200000
         AIF   (&MSGF411 EQ 1).E411                                     00250000
&MSGF411 SETB  1                                                        00300000
         AIF   ('&LIST' EQ 'YES').A411                                  00350000
         PUSH  PRINT  BPXYMSGF: MSG flag constants specified on         00429900
         PRINT OFF              socket I/O calls.                       00459900
         AGO   .A411                                                    00500000
*                                  */                                   00550000
*%MSGFPRO : ;                                                           00600000
*/****START OF SPECIFICATIONS****************************************** 00650000
*                                                                       00700000
*    $MAC (BPXYMSGF) COMP(SCPX1) PROD(BPX):                             00750000
*                                                                       00800000
*01* MACRO NAME: BPXYMSGF                                               00850000
*                                                                       00900000
*01* DSECT NAME: MSG_FLAGS                                              00950000
*                                                                       01000000
*01* DESCRIPTIVE NAME: Message flag constants specified on              01079900
*                      Input/Output operations with sockets.            01109900
*                                                                       01150000
*02*   ACRONYM: MSGF                                                    01200000
**/                                                                     01250000
*/*01* PROPRIETARY STATEMENT=                                        */ 01300000
*/***PROPRIETARY_STATEMENT********************************************/ 01350000
*/*                                                                  */ 01400000
*/*                                                                  */ 01450000
*/* LICENSED MATERIALS - PROPERTY OF IBM                             */ 01500000
*/* 5694-A01 COPYRIGHT IBM CORP. 1993, 2013                          */ 01600000
*/*                                                                  */ 01650000
*/* STATUS= HBB7790                                                  */ 01700000
*/*                                                                  */ 01750000
*/***END_OF_PROPRIETARY_STATEMENT*************************************/ 01800000
*/*                                                                     01850000
*                                                                       01900000
*01* EXTERNAL CLASSIFICATION:  GUPI                                     01950000
*01* END OF EXTERNAL CLASSIFICATION:                                    02000000
*                                                                       02050000
*01* FUNCTION:                                                          02100000
*                                                                       02150000
*      The MSGF defines the Message flags used on the send, recv,       02200000
*      sendto, recvfrom, sendmsg, recvmsg, srx_np, and asyncio calls.   02269900
*                                                                       02300000
*01* METHOD OF ACCESS:                                                  02350000
*                                                                       02400000
*02*   PL/X:                                                            02450000
*                                                                       02500000
*        %INCLUDE SYSLIB(BPXYMSGF)                                      02550000
*        By default, the MSGF is based on MSGFlagsPtr. If               02600000
*        other basing is desired, use %MSGFBASE='BASED(XXXXXX)'.        02650000
*        If %MSGFBASE='BASED(MSGFlagsPtr)' is coded, a Declare for      02700000
*        MSGFlagsPtr also generated.                                    02750000
*                                                                       02800000
*02*   ASM:                                                             02850000
*        With DSECT=NO, storage is allocated in line                    02900000
*        and addressability is provided thru that DSECT or CSECT.       02950000
*        With DSECT=YES, a DSECT is produced and "USING MSG_FLAGS,reg"  03000000
*        is required for addressability.  Here "reg" contains the       03050000
*        address of MSG#LENGTH bytes of storage.                        03119900
*        The default is DSECT=YES.                                      03150000
*                                                                       03200000
*01* SIZE: MSG#LENGTH = 4 bytes                                         03269900
*                                                                       03300000
*01* POINTED TO BY: MSGFlagsPtr                                         03350000
*                                                                       03400000
*01* CREATED BY: Caller of system call                                  03450000
*                                                                       03500000
*01* DELETED BY: Caller of system call                                  03550000
*                                                                       03600000
*01* STORAGE ATTRIBUTES:                                                03650000
*02*   SUBPOOL/DATASPACE:  N/A                                          03700000
*02*   KEY:                N/A                                          03750000
*02*   RESIDENCY:          N/A                                          03800000
*                                                                       03850000
*01* FREQUENCY: Included with compile                                   03900000
*                                                                       03950000
*01* SERIALIZATION: N/A                                                 04000000
*                                                                       04050000
*01* DEPENDENCIES: None                                                 04100000
*                                                                       04150000
*01* NOTES: None                                                        04200000
*                                                                       04250000
*01* COMPONENT: OpenMVS (SCPX1)                                         04300000
*                                                                       04350000
*01* DISTRIBUTION LIBRARY:  AMACLIB                                     04400000
*                                                                       04450000
*01* EYE-CATCHER: None                                                  04500000
*                                                                       04550000
*01* CHANGE-ACTIVITY:                                                   04600000
*                                                                       04650000
* $D1=DOAA002  HOM1111 930505 PDNE: Integrated Sockets support          04700000
*                                       Dcr A002.02                     04750000
* $D2=DRGA134  HOM1140 950607 PDSK: UU Compliance (A134.02)             04800000
* $D3=DSPA158  HOM1150 950821 PDJI: AF-ESCON support (A158.00)          04850000
* $P1=PVT0656  HBB6606 980326 PDJT: MSG_EOF                             04900000
* $P2=PYN0220  HBB7708 020301 PDFO: Bilingual fixup                     04950000
* $D4=ME24230  HBB7790 120531 PDJT: MSG_CONNTERM & Descriptions OA39810 04970002
*                                                                       05000000
****END OF SPECIFICATIONS*********************************************/ 05050000
*        %GOTO MSGFPLS  ;         /* Bilingual header                   05100000
.A411    ANOP  ,                                                        05150000
** BPXYMSGF: Socket MSG_* flags                                         05229900
**  Used By: SND RCV STO RFM SMS RMS SRX AIO                            05259900
         AIF   ('&DSECT' EQ 'NO').B411                                  05300000
MSG_FLAGS            DSECT ,                                            05350000
         AGO   .C411                                                    05400000
.B411    ANOP  ,                                                        05450000
MSG_FLAGS            DS    0F                                           05500000
.C411    ANOP  ,                                                        05550000
MSG_FLAGS1           DS    B      I_flags - byte 1                      05600000
MSGFHIGH             EQU   X'80'  DO NOT USE THIS BIT]                  05650000
*                                 MSG_FLAGS must never be < 0           05700000
MSG_ACK_GEN          EQU   X'40'  Generate a UDP 'ACK packet'           05750000
*                                 automatically to the originator if    05829900
*                                 an incoming UDP packet arrives  @D3A  05859900
*                This flag is no longer supported by z/OS TCPIP.        05889900
MSG_ACK_TIMEOUT      EQU   X'20'  The caller expects an incoming UDP    05950000
*                                 packet within the "standard ACK       06000000
*                                 time interval".  Return to caller     06050000
*                                 with an EINTR return code if no       06100000
*                                 incoming UDP packet arrives           06150000
*                                 within this time interval.      @D3A  06200000
*                This flag is no longer supported by z/OS TCPIP.        06220000
MSG_ACK_EXPECTED     EQU   X'10'  (Used along with MSG_ACK_TIMEOUT)     06250000
*                                 The incoming packet is expected to    06300000
*                                 be an ACK. If the ACK arrives,        06350000
*                                 the caller does not need to be        06400000
*                                 activated to process it.              06450000
*                                 Instead, the protocol will just       06500000
*                                 cancel the timeout and let the        06550000
*                                 application wait for the real data    06600000
*                                 to arrive.                      @D3A  06650000
*                This flag is no longer supported by z/OS TCPIP.        06670000
                     SPACE ,                                            06700000
MSG_FLAGS2           DS    B      MSG_flags - byte 2                    06750000
*                                                                       06800000
                     SPACE ,                                            06850000
MSG_FLAGS3           DS    B      MSG_flags - byte 3                    06900000
MSG_EOF              EQU   X'80'  Close socket after the send.    @P1A  06959900
*             On the send function only - Requests that the socket      06969900
*             be closed after all data has been transmitted.            06979900
*                                                                       06989900
                     SPACE ,                                            07000000
MSG_FLAGS4           DS    B      MSG_flags - byte 4                    07050000
MSG_CONNTERM         EQU   X'80'  Complete when connection ends.  @D4A  07053000
*             Requests that a receive-type function completes only      07056000
*             when a TCP socket connection is terminated.               07059000
*             - The buffer length specified on the operation must be 0, 07062000
*             thus there is no data associated with this receive and    07065000
*             the other MSG_FLAGS may not be used.  This operation is   07068000
*             only for connection termination notification.             07071000
*             - Any other normal outstanding receive-type requests will 07074000
*             also be completed at connection termination and these     07077000
*             completions may be running in parallel with that of       07080000
*             the MSG_CONNTERM request.                                 07083000
*                                                                       07086000
MSG_WAITALL          EQU   X'40'  Wait until all data returned    @D2A  07100000
*             Requests that a receive-type function block until the     07158900
*             full amount of data requested can be returned.            07167900
*             The function may return a smaller amount of data if a     07176900
*             signal is caught, the connection is terminated, an error  07185900
*             is pending or SO_RCVTIMEO is set and the timer expires.   07194900
*                                                                       07203900
MSG_CTRUNC           EQU   X'20'  Control data was truncated.     @D2A  07212900
*             An output flag for recvmsg, returned in the MsgHFlags     07221900
*             field of the MSGH structure.                              07230900
*                                                                       07239900
MSG_TRUNC            EQU   X'10'  Normal data was truncated.      @D2A  07248800
*             An output flag for recvmsg, returned in the MsgHFlags     07257800
*             field of the MSGH structure.                              07266800
*                                                                       07275800
MSG_EOR              EQU   X'08'  Terminate a record.             @D2A  07284800
*             Only supported for FRCA enabled TCP sockets.              07293800
*                                                                       07302800
MSG_DONTROUTE        EQU   X'04'  Send without network routing.         07311800
*             Bypass normal routing for one send-type function request. 07320800
*             Usually used only by diagnostic or routing programs.      07329800
*                                                                       07338700
MSG_PEEK             EQU   X'02'  Peek at incoming data.                07347700
*             The data is returned but not consumed, so that a          07356700
*             subsequent receive-type function will see the same data.  07365700
*                                                                       07374700
MSG_OOB              EQU   X'01'  Send/Receive out of band data.        07383700
*             Sends out-of-band data for send, sendto or sendmsg.       07392700
*             Requests out-of-band data for recv, recvfrom or recvmsg.  07401700
*             Also, is an output flag for recvmsg indicating that       07410700
*              out-of-band data was received.  This is returned         07419700
*              in the MsgHFlags field of the MSGH structure,            07428600
*                                                                       07437600
                     SPACE ,                                            07450000
MSG#LENGTH          EQU   *-MSG_FLAGS Length of this structure          07500000
** BPXYMSGF End                                                         07550000
         SPACE 3                                                        07600000
         AIF   ('&LIST' EQ 'YES').E411                        6@D1A     07650000
         POP   PRINT                                                    07700000
.E411    ANOP  ,                                                        07750000
         MEND  ,                  Terminating PL/X comment           */ 07800000
*%MSGFPLS : ;                                                           07850000
*%IF MSGFBASE='' %THEN                                                  07900000
*  %DO;                                                                 07950000
*    %MSGFBASE='BASED(MSGFLAGSPTR)';                                    08000000
*  %END;                                                                08050000
* %IF TRANSLATE(MSGFBASE)='BASED(MSGFLAGSPTR)' %THEN                    08100000
*   %DO;                                                                08150000
*     DCL MSGFLAGSPTR Ptr(31);    /* Pointer to the MSG_FLAGS       */  08200000
*   %END;                                                               08250000
*                                                                       08300000
*DCL 1 MSG_FLAGS Bit(32) MSGFBASE,                                      08350000
* 3 MSG_FLAGS1    Bit(8),                                               08400000
*   5 MSGFHIGH     Bit(1),         /* DO NOT USE THIS BIT]           */ 08450000
*                                  /* MSG_FLAGS must never be < 0    */ 08500000
*   5 MSG_ACK_GEN  Bit(1),         /* No Longer supported.   @D4C@D3A*/ 08749900
*   5 MSG_ACK_TIMEOUT Bit(1),      /* No Longer supported.   @D4C@D3A*/ 08949900
*   5 MSG_ACK_EXPECTED Bit(1),     /* No Longer supported.   @D4C@D3A*/ 09149900
*   5 *            Bit(4),         /* Reserved                   @D3C*/ 09600000
*                                                                       09650000
* 3 MSG_FLAGS2    Bit(8),                                               09700000
*   5 *            Bit(8),         /* Reserved                       */ 09750000
*                                                                       09800000
*          /* See above for descriptions of the following flags: @D4A*/ 09820000
* 3 MSG_FLAGS3    Bit(8),                                               09850000
*   5 MSG_EOF      Bit(1),         /* Close after send           @P1A*/ 09900000
*   5 *            Bit(7),         /* Reserved                       */ 09950000
*                                                                       10000000
* 3 MSG_FLAGS4    Bit(8),                                               10050000
*   5 MSG_CONNTERM   Bit(1),       /* Complete at connection end @D4A*/ 10119900
*   5 MSG_WAITALL    Bit(1),       /* Wait til all data returned @D2A*/ 10150000
*   5 MSG_CTRUNC     Bit(1),       /* Control data truncated     @D2A*/ 10200000
*   5 MSG_TRUNC      Bit(1),       /* Normal data truncated      @D2A*/ 10250000
*                                                                       10270000
*   5 MSG_EOR        Bit(1),       /* Terminate a record         @D2A*/ 10300000
*   5 MSG_DONTROUTE  Bit(1),       /* Send without network routing   */ 10350000
*   5 MSG_PEEK       Bit(1),       /* Peek at incoming data          */ 10400000
*   5 MSG_OOB        Bit(1);       /* Send/Receive out of band data  */ 10450000
*                                                                       10500000
*/* Msg#Length is missing from the PL/X part which causes PADI to fail. 10501000
*   It wasn't added now because, after 20 years, that name may be used  10502000
*   in some IBM product somewhere and adding it here would cause that   10503000
*   product to unexpectedly start having compile failures for           10504000
*   "Duplicate name" errors.   So, we tell PADI to ignore it.    @D4A*/ 10505000
* @LOGIC;                                                      /*@D4A*/ 10506000
* #PRAGMA TOOL=PADI.                                           /*@D4A*/ 10507000
* #PADIDELETE.Msg#Length                                       /*@D4A*/ 10508000
* #EPRAGMA.                                                    /*@D4A*/ 10509000
* @ENDLOGIC;                                                   /*@D4A*/ 10510000
