*/********************************************************************* 00000100
*                                                                       00000200
* $MAC(IGGENCPL) COMP(28414):                                           00000300
*                                                                       00000400
* MACRO NAME: IGGENCPL                                                  00000500
*                                                                       00000600
* DESCRIPTION: Maps the the following for the access method             00000700
*              encryption callable service, which can be called         00000800
*              with the IGGENC macro or the IGGENCAM callable service:  00000900
*       Parameter list.                                                 00001000
*       Options block.                                                  00001100
*       Return and reason codes.                                        00001200
*                                                                       00001300
* STATUS: z/OS 2.5 DFSMS                                                00001400
*                                                                       00001500
* PROPRIETARY V3 STATEMENT                                              00001600
* Licensed Materials - Property of IBM                                  00001700
* "Restricted Materials of IBM"                                         00001800
* 5650-ZOS                                                              00001900
* Copyright IBM Corp. 2020                                              00002000
* END PROPRIETARY V3 STATEMENT                                          00002100
*                                                                       00002200
* FUNCTION: Provide the mappings for the 31-bit version and the         00002300
*           64-bit version of the parameter list for the access         00002400
*           method encryption service.                                  00002500
*                                                                       00002600
* NOTES:                                                                00002700
*                                                                       00002800
*   DEPENDENCIES: None                                                  00002900
*   RESTRICTIONS: None                                                  00003000
*                                                                       00003100
* MACRO:                                                                00003200
*                                                                       00003300
*   PROCESSOR: Assembler and PL/X.                                      00003400
*   DISTRIBUTION LIBRARY: AMODGEN                                       00003500
*   ATTRIBUTES: INCLUDE                                                 00003600
*                                                                       00003700
* LINKAGE:                                                              00003800
*   ASSEMBLER :                                                         00003900
*       IGGENCPL DSECT={YES or NO}   Default is YES                     00004000
*                      Whether to generate a DSECT statement            00004100
*                PList=(YES or NO)   Default is YES                     00004200
*                      Whether to map the parameter list.  It is        00004300
*                      for both formats so it is long.                  00004400
*                Options=(YES or NO) Default is YES                     00004500
*                      Whether to map the options block (1st param)     00004600
*                Codes=(YES or NO)  Default is YES                      00004700
*                      Whether to define the return and reason code     00004800
*                      constants.                                       00004900
*       USING IGGENCParmL,reg                                           00005000
*   PL/X :                                                              00005100
*       %INCLUDE SYSLIB(IGGENCPL)                                       00005200
*                                                                       00005300
* EXIT NORMAL:                                                          00005400
*                                                                       00005500
*   Define the parameter list for access method encryption routine      00005600
*                                                                       00005700
* EXIT IF ERROR:                                                        00005800
*   None.                                                               00005900
*                                                                       00006000
* CHANGE ACTIVITY                                                       00006100
* $L0=Encrypt,HDZ2250,20200120,TUCJRB:Basic, large format encryp   @L0A 00006200
* $01=OA61188,HDZ2259,20210601,TUCARW: Encryption archived key     @01A         
*                                      support                     @01A         
**********************************************************************/ 00006300
*   %GOTO IGGENCPLX;          /*                                        00006400
         MACRO                                                          00006500
         IGGENCPL &DSECT=YES,                                          *00006600
               &PList=YES,                                             *00006700
               &Options=YES,                                           *00006800
               &Codes=YES                                               00006900
         AIF   ('YES' NE Upper('&PList')).TryOpts                       00007000
*********************************************************************** 00007100
* Access method encryption parameter list.                              00007200
*********************************************************************** 00007300
         AIF   ('YES' EQ Upper('&DSECT')).DoDSECT1                      00007400
IGGENCParmL DC 0AD(0)    Start on a doubleword boundary                 00007500
         AGO   .DoData1                                                 00007600
.DoDSECT1 ANOP                                                          00007700
IGGENCParmL DSECT        Start on a doubleword boundary                 00007800
.DoData1 ANOP                                                           00007900
DSEP1Opt DC    A(0)      31-bit addr of 1st param, options              00008000
DSEP2RC  DC    A(0)      31-bit addr of 2nd param, return code          00008100
DSEP3ReaC DC   A(0)      31-bit addr of 3rd param, reason code          00008200
DSEP4CT  DC    A(0)      31-bit addr of 4th param, connect token        00008300
DSEP5Enc DC    0A(0)     31-bit addr of 5th parameter (connect)         00008400
DSEP5Blk DC    A(0)      31-bit addr of 5th parameter (encrypt/decrypt) 00008500
DSEP6TCBAddr DC 0A(0)    1-bit addr of 6th parameter (connect)          00008600
DSEP6InB DC    A(0)      31-bit addr of 6th parameter (encrypt/decrypt) 00008700
DSEP7BL  DC    A(0)      31-bit addr of 7th parameter (encrypt/decrypt) 00008800
DSEP8Num DC    A(0)      31-bit addr of 8th parameter (encrypt/decrypt) 00008900
DSEP9OutB DC   A(0)      31-bit addr of 9th parameter (encrypt/decrypt) 00009000
DSELength   EQU  *-IGGENCParmL    Length of max 31-bit parameter list   00009100
         ORG   IGGENCParmL   Remap for the other format of list         00009200
DSE64P1Opt DC  AD(0)     64-bit addr of 1st param, options              00009300
DSE64P2RC  DC  AD(0)     64-bit addr of 2nd param, return code          00009400
DSE64P3ReaC DC AD(0)     64-bit addr of 3rd param, reason code          00009500
DSE64P4CT  DC  AD(0)     64-bit addr of 4th param, connect token        00009600
DSE64P5Enc DC  0AD(0)    64-bit addr of 5th parameter (connect)         00009700
DSE64P5Blk DC  AD(0)     64-bit addr of 5th parameter (encrypt/decrypt) 00009800
DSE64P6TCBAddr DC 0AD(0) 64-bit addr of 6th parameter (connect)         00009900
DSE64P6InB DC  AD(0)     64-bit addr of 6th parameter (encrypt/decrypt) 00010000
DSE64P7BL  DC  AD(0)     64-bit addr of 7th parameter (encrypt/decrypt) 00010100
DSE64P8Num DC  AD(0)     64-bit addr of 8th parameter (encrypt/decrypt) 00010200
DSE64P9OutB DC AD(0)     64-bit addr of 9th parameter (encrypt/decrypt) 00010300
DSELength64 EQU  *-IGGENCParmL    Length of max 64-bit parameter list   00010400
*                                                                       00010500
.TryOpts AIF   ('YES' NE Upper('&Options')).TryCodes                    00010600
*********************************************************************** 00010700
* Access Method Encryption Options.                                     00010800
*********************************************************************** 00010900
         AIF   ('YES' EQ Upper('&DSECT')).DoDSECT2                      00011000
IGGENCOpts DC  0CL8       First parameter (options)                     00011100
         AGO   .DoData2                                                 00011200
.DoDSECT2 ANOP                                                          00011300
IGGENCOpts DSECT            First parameter (options)                   00011400
.DoData2 ANOP                                                           00011500
IGGENCLength     DS   FL1    Length of this block.  Must be 8.          00011600
IGGENCFunction   DS   FL1    Function code                              00011700
*    Values for the function code in IGGENCFunction.                    00011800
IGGENCConnect    EQU  1      Connect                                    00011900
IGGENCEncrypt    EQU  2      Encrypt                                    00012000
IGGENCDecrypt    EQU  3      Decrypt                                    00012100
IGGENCDisconnect EQU  4      Disconnect                                 00012200
*                                                                       00012300
IGGENCFlag1      DS   X      Flags                                      00012400
*    Bits defined for IGGENCFlag1                                       00012500
IGGENCBypassAuth EQU  X'80'  Bypass security check. Valid only if       00012600
*                            connect and caller is APF auth, sup.       00012700
*                            state or system key.                       00012800
IGGENCENCRYPTA   EQU  X'40'  Caller utilizing IGGENC interface          00012900
*                            without an OPEN DCB -- ENCRYPTA            00013000
*                            catalog cell is passed instead             00013100
*                            on CONNECT call                            00013200
*                                                                       00013300
                 DS   XL5    Reserved, should be zero                   00013400
IGGENCOptsLen    EQU  *-IGGENCOpts     Length of Options block          00013500
*                                                                       00013600
.TryCodes  AIF   ('YES' NE Upper('&Codes')).MExit                       00013700
*********************************************************************** 00013800
* Return Codes.                                                         00013900
*********************************************************************** 00014000
IGGENCRC0  EQU   0     Success                                          00014100
IGGENCRC4  EQU   4     Warning                                     @01C 00014200
IGGENCRC8  EQU   8     Error                                            00014300
IGGENCRC12 EQU   12                                                     00014400
IGGENCRC16 EQU   16                                                     00014500
*                                                                       00014600
*********************************************************************** 00014700
* Reason Codes.                                                         00014800
*    Second half of eight-byte reason codes.                            00014900
*    Bytes 0-4 are zero unless otherwise stated.                        00015000
*    Byte 5: Buffer Number in Error (when applicable)                   00015100
*    Byte 6: Error Category Indicator                                   00015200
*    Byte 7:                                                            00015300
*      High Nibble - Reason indicator                                   00015400
*      Low Nibble - Function code of 1, 2, 3 or 4.  If defined as zero  00015500
*        here, it will be zero at run time only if the actual function  00015600
*        code is not available.                                         00015700
*********************************************************************** 00015800
* >>>>> Reason codes for return code 8 <<<<<                            00015900
* Bad parameters passed in parm list                                    00016000
IGGENCReaAddr    EQU X'00000110'  A required address is 0               00016100
IGGENCReaFunc    EQU X'00000120'  Invalid function code in Options      00016200
IGGENCReaLength  EQU X'00000130'  Length byte in Options < 8            00016300
IGGENCReaToken   EQU X'00000140'  Bad token                             00016400
IGGENCReaDEBErr  EQU X'00000150'  Invalid DEB                           00016500
IGGENCReaLockErr EQU X'00000160'  Local Lock not held                   00016600
IGGENCReaBypAuth EQU X'00000171'  User requested to bypass auth but     00016700
*                                   is not authorized                   00016800
* Diagnostic codes for IGGENCReaToken                                   00016900
IGGENCReaTokenDiag32 EQU X'20'    Token not zero for connect            00017000
IGGENCReaTokenDiag33 EQU X'21'    Token is 0 but function not connect   00017100
* Bad fields passed in ENCRYPTA area                                    00017200
* NOTE: IGGENCReaType, IGGENCReaKLen, IGGENCReaMode to have             00017300
*   incorrect value inserted in Byte 4 for diagnostic purposes.         00017400
*   IGGENCReaKLab to have first 5 bytes of incorrect key label          00017500
*   inserted in the first 5 bytes of the reason code for                00017600
*   diagnostic purposes.                                                00017700
IGGENCReaType    EQU X'00000211'  Bad encryption type in ENCRYPTA       00017800
IGGENCReaKLen    EQU X'00000221'  Bad key length code in ENCRYPTA       00017900
IGGENCReaKLab    EQU X'00000231'  Bad key label in ENCRYPTA             00018000
IGGENCReaMode    EQU X'00000241'  Bad encryption mode in ENCRYPTA       00018100
* Error during Storage OBTAIN/RELEASE                                   00018200
* NOTE: The following storage related reason codes to have the          00018300
*   non-zero return code value returned from the STORAGE macros         00018400
*   inserted into Byte 4 for diagostic purposes.                        00018500
IGGENCReaGet31   EQU X'00000311'  Unable to get storage below the bar   00018600
IGGENCReaGet64   EQU X'00000321'  Unable to get storage above the bar   00018700
IGGENCReaFree31  EQU X'00000334'  Unable to free storage below the bar  00018800
IGGENCReaFree64  EQU X'00000344'  Unable to free storage above the bar  00018900
* Miscellaneous encryption errors                                       00019000
* NOTE: IGGENCReaICSFErr, IGGENCReaBCFErr, and IGGENCReaKeyAcc to       00019100
*   have the related service's non-zero return code insert into         00019200
*   Byte 0 and the corresponding reason code into Bytes 1-3.            00019300
IGGENCReaNoEncCell EQU X'00000411' Encryption cell does not exist       00019400
IGGENCReaSetLock EQU X'00000510'  Error obtaining local lock            00019500
IGGENCReaICSFErr EQU X'00000611'  Error encountered during CSNEKRR2     00019600
IGGENCReaCrypKL  EQU X'00000711'  Incorrect crypto key length           00019700
IGGENCReaBCFErr  EQU X'00000810'  Error encountered during BCFXCRYPT    00019800
IGGENCReaVerErr  EQU X'00000911'  Incorrect verification bytes          00019900
IGGENCReaCatErr  EQU X'00000A11'  Error occurred during Catalog call    00020000
IGGENCReaKeyAcc  EQU X'00000B11'  Not authorized to read key label      00020100
IGGENCReaBuffCnt EQU X'00000C10'  Encryption Buffer Count < 1           00020200
IGGENCReaBuffLen EQU X'00000D10'  Encryption Buffer Length < 16 bytes   00020300
IGGENCReaBuffAddr EQU X'00000E10' Encryption Buffer Addr is Zero        00020400
IGGENCReaPfxAddr EQU X'00000F10'  Block ID Address is Zero              00020500
IGGENCReaBuffInv EQU X'00001010'  Encryption Buffer invalid             00020600
IGGENCReaNonEncDS EQU X'00001110' Non-encrypted data set                00020700
IGGENCReaEncNotOk EQU X'00001210' EXCP caller DCBEDSENCRYPTOK is OFF    00020800
IGGENCReaEncSysErr EQU X'00001310' Encryption Service Error             00020900
IGGENCReaTCBAddr   EQU X'00001411'  Caller unauthorized to specify TCB  00021000
IGGENCReaNpDCBE    EQU X'00001511'  DCBEDSENCNP bit is on, but the      00021100
*                                     non-prefixed bit in the ENCRYPTA  00021200
*                                     field in the catalog entry        00021300
*                                     is off.                           00021400
IGGENCReaNpCatlg   EQU X'00001521'  Non-prefixed bit in the ENCRYPTA    00021500
*                                     field in the catalog entry is on, 00021600
*                                     but DCBEDSENCNP bit is off.       00021700
IGGENCReaNpInvDCB  EQU X'00001531'  OPEN issued for encrypted basic/    00021800
*                                     large format data set that has    00021900
*                                     non-prefixed blocks but the DCB   00022000
*                                     is not for EXCP.                  00022100
IGGENCReaConArchKey EQU X'00001611'  An archived read only encryption           
*                                      key was used in a call to                
*                                      IGGENC CONNECT. This key cannot          
*                                      be used for encryption      @01A         
IGGENCReaEncArchKey EQU X'00001622'  An archived read only encryption           
*                                     key was used during encam                 
*                                     processing but the data set was           
*                                     not opened for INPUT         @01A         
.MExit   MEND       */                                                  00022200
*%IGGENCPLX:;                                                           00022300
*]********************************************************************* 00022400
*] Access Method Encryption Parameter List.                             00022500
*]********************************************************************* 00022600
*Dcl 1 IGGENCParmL_t type boundary(DWord),                              00022700
*      2 *        union bdy(DWord),]31-bit and 64-bit versions          00022800
*]  First are the 24-bit and 31-bit parameter lists.                    00022900
*        3 IGGENCPLConnect31 bdy(word), ]Connect parameter list         00023000
*          ]The next four are the same for all calls.                   00023100
*          4 DSEP1Opt ptr(31),     ]Address of Function code & flags    00023200
*                                  ]  (IGGENCOpts)                      00023300
*          4 DSEP2RC  ptr(31),     ]Address of Return code              00023400
*                                  ]  (four byte return code)           00023500
*          4 DSEP3ReaC ptr(31),    ]Address of Reason code              00023600
*                                  ]  (eight byte reason code)          00023700
*          4 DSEP4CT  ptr(31),     ]Address of Encryption token         00023800
*                                  ]  (output from Connect call)        00023900
*          4 DSEP5Enc ptr(31),     ]Address of open DCB associated with 00024000
*                                  ]  encrypted data set                00024100
*          4 DSEP6TCBAddr ptr(31), ]Address to word containing TCB      00024200
*                                  ]  address                           00024300
*        3 IGGENCPLEncrypt31 bdy(word),  ]Encrypt/decrypt (24 & 31-bit) 00024400
*          4 *        ptr(31),     ]Address of Function code & flags    00024500
*                                  ]  (IGGENCOpts)                      00024600
*          4 *        ptr(31),     ]Address of Return code              00024700
*                                  ]  (four byte return code)           00024800
*          4 *        ptr(31),     ]Address of Reason code              00024900
*                                  ]  (eight byte reason code)          00025000
*          4 *        ptr(31),     ]Address of Encryption token         00025100
*                                  ]  (input for Encrypt/Decrypt call)  00025200
*          4 DSEP5Blk ptr(31),     ]Address of Eight-byte block         00025300
*                                  ]  identifier list                   00025400
*          4 DSEP6InB ptr(31),     ]Address of Input buffer list        00025500
*          4 DSEP7BL  ptr(31),     ]Address of Buffer length list       00025600
*          4 DSEP8Num ptr(31),     ]Address of Halfword with number     00025700
*                                  ]  of buffers and lengths            00025800
*          4 DSEP9OutB ptr(31),    ]Address of Optional output buffer   00025900
*                                  ]  list or zero                      00026000
*        3 IGGENCPLDisconnect31 bdy(word),  ]Disconnect param list      00026100
*          4 *        ptr(31),     ]Address of Function code & flags    00026200
*                                  ]  (IGGENCOpts)                      00026300
*          4 *        ptr(31),     ]Address of Return code              00026400
*                                  ]  (four byte return code)           00026500
*          4 *        ptr(31),     ]Address of Reason code              00026600
*                                  ]  (eight byte reason code)          00026700
*          4 *        ptr(31),     ]Address of Encryption token         00026800
*                                  ]  (output for Disconnect call)      00026900
*]  64-bit versions of the above parameter list.                        00027000
*        3 IGGENCPLConnect64 bdy(DWord),]Connect parameter list         00027100
*          ]The next four are the same for all calls.                   00027200
*          4 DSE64P1Opt ptr(64),   ]Address of Function code & flags    00027300
*                                  ]  (IGGENCOpts)                      00027400
*          4 DSE64P2RC  ptr(64),   ]Address of Return code              00027500
*                                  ]  (four byte return code)           00027600
*          4 DSE64P3ReaC ptr(64),  ]Address of Reason code              00027700
*                                  ]  (eight byte reason code)          00027800
*          4 DSE64P4CT  ptr(64),   ]Address of Connect token            00027900
*          4 DSE64P5Enc ptr(64),   ]Address of open DCB associated with 00028000
*                                  ]  encrypted data set                00028100
*          4 DSE64P6TCBAddr ptr(64), ]Address of word containing TCB    00028200
*                                    ] address                          00028300
*        3 IGGENCPLEncrypt64 bdy(DWord), ]Encrypt/decrypt (24 & 31-bit) 00028400
*          4 *        ptr(64),     ]Address of Function code & flags    00028500
*                                  ]  (IGGENCOpts)                      00028600
*          4 *        ptr(64),     ]Address of Return code              00028700
*                                  ]  (four byte return code)           00028800
*          4 *        ptr(64),     ]Address of Reason code              00028900
*                                  ]  (eight byte reason code)          00029000
*          4 *        ptr(64),     ]Address of Connect token (DCB)      00029100
*          4 DSE64P5Blk ptr(64),   ]Address of Eight-byte block         00029200
*                                  ]  identifier list                   00029300
*          4 DSE64P6InB ptr(64),   ]Address of Input buffer list        00029400
*          4 DSE64P7BL  ptr(64),   ]Address of Buffer length list       00029500
*          4 DSE64P8Num ptr(64),   ]Address of Halfword with number     00029600
*                                  ]  of buffers and lengths            00029700
*          4 DSE64P9OutB ptr(64),  ]Address of Optional output buffer   00029800
*                                  ]  list or zero                      00029900
*        3 IGGENCPLDisconnect64 bdy(DWord),  ]Disconnect param list     00030000
*          4 *        ptr(64),     ]Address of Function code & flags    00030100
*                                  ]  (IGGENCOpts)                      00030200
*          4 *        ptr(64),     ]Address of Return code              00030300
*                                  ]  (four byte return code)           00030400
*          4 *        ptr(64),     ]Address of Reason code              00030500
*                                  ]  (eight bytes reason code)         00030600
*          4 *        ptr(64);     ]Address of Connect token            00030700
*]********************************************************************* 00030800
*]  Data Set Encryption Parameters.                                     00030900
*]********************************************************************* 00031000
*Dcl 1 IGGENCOpts_t type,          ]First parameter (options)           00031100
*      2 IGGENCLength   fixed(8),  ]Length of this block.  Must be 8.   00031200
*      2 IGGENCFunction fixed(8),  ]Function code                       00031300
*      2 IGGENCFlag1    bit(8),    ]Flags                               00031400
*        3 IGGENCBypassAuth bit(1), ]If connect and caller supervisor   00031500
*                                   ]  state or system key, bypass      00031600
*                                   ]  security check                   00031700
*        3 IGGENCENCRYPTA   bit(1), ]Caller is utilizing IGGENC         00031800
*                                   ]  interface without an OPEN DCB -- 00031900
*                                   ]  passing ENCRYPTA catalog cell    00032000
*                                   ]  instead on CONNECT call          00032100
*        3 *            bit(6),    ]Reserved                            00032200
*      2 *              char(5);   ]Reserved, should be zero            00032300
*Dcl  IGGENCOptsLen    fixed(8) constant(8);  ]Options block length     00032400
*Dcl  IGGENCConnect    fixed(8) constant(1),  ]Connect                  00032500
*     IGGENCEncrypt    fixed(8) constant(2),  ]Encrypt                  00032600
*     IGGENCDecrypt    fixed(8) constant(3),  ]Decrypt                  00032700
*     IGGENCDisconnect fixed(8) constant(4);  ]Disconnect               00032800
*                                                                       00032900
*] The following do not have an assembler equivalent in this macro.     00033000
*Dcl                                                                    00033100
*  IGGENCRC_t  fixed type,            ] Second parameter, Return code   00033200
*  1 IGGENCRea_t char(8) type,        ] Third parameter, Reason Code    00033300
*    3 IGGENCRea_High char(4),        ]   High Order Word               00033400
*      5 IGGENCRea_ExtRSN char(4),    ]     External RSN Code (BCF)     00033500
*    3 IGGENCRea_Low char(4),         ]   Low Order Word                00033600
*      5 IGGENCRea_ExtRC char(1),     ]     External Ret Code (BCF)     00033700
*      5 IGGENCRea_IntRSN char(3),    ]     ENCAM Internal RSN Code     00033800
*        7 IGGENCRea_BuffNum fixed(8),]       Buff Number in Error      00033900
*        7 IGGENCRea_ErrCat char(1),  ]       RSN Code Category         00034000
*        7 IGGENCRea_Descr char(1),   ]       RSN Code Descriptor       00034100
*          9 IGGENCRea_ErrId bit(4),  ]         RSN Code Identifier     00034200
*          9 IGGENCRea_ErrFunc bit(4);]         RSN Code ENCAM Function 00034300
*                                                                       00034400
*]   Reason Code Error Categories (ErrCat).                             00034500
*Dcl   IGGENCReaErrCSuccess     fixed(8) constant(0),                   00034600
*      IGGENCReaErrCParmList    fixed(8) constant(1),                   00034700
*      IGGENCReaErrCEncryptCell fixed(8) constant(2),                   00034800
*      IGGENCReaErrCStorage     fixed(8) constant(3),                   00034900
*      IGGENCReaErrCNonPrefix   fixed(8) constant(21),                  00035000
*      IGGENCReaErrCArchKey     fixed(8) constant(22);            ]@01A         
*                                                                       00035100
*]   Reason Code Functions (ErrFunc).                                   00035200
*Dcl   IGGENCReaErrFConn    bit(4) constant('1'X),  ] Connect           00035300
*      IGGENCReaErrFCrypt   bit(4) constant('2'X),  ] Encrypt           00035400
*      IGGENCReaErrFDecrypt bit(4) constant('3'X),  ] Decrypt           00035500
*      IGGENCReaErrFDconn   bit(4) constant('4'X);  ] Disconnect        00035600
*                                                                       00035700
*Dcl                                                                    00035800
*  IGGENCToken_t ptr(64) type,        ] Fourth parameter, Connect token 00035900
*  IGGENCENCRYPTA_t char(96) type,    ] Fifth parameter, ENCRYPTA from  00036000
*                                     ]   catalog                       00036100
*  IGGENCBlockIDL_t char(8) type,     ] Fifth parameter, block ident.   00036200
*  IGGENCBufferCount_t fixed(15) type;] Eighth parameter                00036300
*                                                                       00036400
*]********************************************************************* 00036500
*]   Return Codes.                                                      00036600
*]********************************************************************* 00036700
*Dcl   IGGENCRC0  fixed constant(0),  ]Success                          00036800
*      IGGENCRC4  fixed constant(4),  ]Warning                     @01C 00036900
*      IGGENCRC8  fixed constant(8),  ]Error                            00037000
*      IGGENCRC12 fixed constant(12),                                   00037100
*      IGGENCRC16 fixed constant(16);                                   00037200
*                                                                       00037300
*]********************************************************************* 00037400
*]   Reason Codes.                                                      00037500
*]********************************************************************* 00037600
*]   Bytes 0-4: Zero unless otherwise noted below for diagnostics       00037700
*]   Byte 5: Buffer Number in Error (when applicable)                   00037800
*]   Byte 6: Error Category indicator                                   00037900
*]   Byte 7:                                                            00038000
*]     High Nibble - Reason indicator                                   00038100
*]     Low Nibble - Function code of 1, 2, 3 or 4.  If defined as zero  00038200
*]       here, it will be zero at run time only if the actual function  00038300
*]       code is not available.                                         00038400
*]===Reason codes for return code 8===                                  00038500
*     ] Bad parameters passed in parm list                              00038600
*Dcl   IGGENCReaAddr      char(8)  ] A required address is 0            00038700
*                       constant('0000000000000110'X),                  00038800
*      IGGENCReaFunc      char(8)  ] Invalid function code in Options   00038900
*                       constant('0000000000000120'X),                  00039000
*      IGGENCReaLength    char(8)  ] Length byte in Options < 8         00039100
*                       constant('0000000000000130'X),                  00039200
*      IGGENCReaToken     char(8)  ] Bad token                          00039300
*                       constant('0000000000000140'X),                  00039400
*      IGGENCReaTokenDiag32 char(1) constant('20'X), ] Token not 0 for  00039500
*                                                ] Connect function     00039600
*      IGGENCReaTokenDiag33 char(1) constant('21'X), ] Token is 0 but   00039700
*                                                ] function not Connect 00039800
*      IGGENCReaDEBErr    char(8)  ] Invalid DEB                        00039900
*                       constant('0000000000000150'X),                  00040000
*      IGGENCReaLockErr   char(8)  ] Local Lock not held                00040100
*                       constant('0000000000000160'X),                  00040200
*      IGGENCReaBypAuth   char(8)  ] User requested to bypass auth      00040300
*                                  ]   but is not authorized            00040400
*                       constant('0000000000000171'X),                  00040500
*     ] Bad field in ENCRYPTA area                                      00040600
*     ] NOTE: IGGENCReaType, IGGENCReaKLen, IGGENCReaMode to have       00040700
*     ]   incorrect value inserted in Byte 4 for diagnostic purposes.   00040800
*     ]   IGGENCReaKLab to have first 5 bytes of incorrect key label    00040900
*     ]   inserted in the first 5 bytes of the reason code for          00041000
*     ]   diagnostic purposes.                                          00041100
*      IGGENCReaType      char(8)  ] Bad encryption type in ENCRYPTA    00041200
*                       constant('0000000000000211'X),                  00041300
*      IGGENCReaKLen      char(8)  ] Bad key length code in ENCRYPTA    00041400
*                       constant('0000000000000221'X),                  00041500
*      IGGENCReaKLab      char(8)  ] Bad key label in ENCRYPTA          00041600
*                       constant('0000000000000231'X),                  00041700
*      IGGENCReaMode      char(8)  ] Bad encryption mode in ENCRYPTA    00041800
*                       constant('0000000000000241'X),                  00041900
*     ] Error during storage obtain/release                             00042000
*     ] NOTE: The following storage related reason codes to have the    00042100
*     ]   non-zero return code value returned from the STORAGE macros   00042200
*     ]   inserted into Byte 4 for diagnostic purposes.                 00042300
*      IGGENCReaGet31     char(8) ] Unable to get storage below the bar 00042400
*                       constant('0000000000000311'X),                  00042500
*      IGGENCReaGet64     char(8) ] Unable to get storage above the bar 00042600
*                       constant('0000000000000321'X),                  00042700
*      IGGENCReaFree31    char(8) ]Unable to free storage below the bar 00042800
*                       constant('0000000000000334'X),                  00042900
*      IGGENCReaFree64    char(8) ]Unable to free storage above the bar 00043000
*                       constant('0000000000000344'X),                  00043100
*     ] Miscellaneous encryption errors                                 00043200
*     ] NOTE: IGGENCReaICSFErr, IGGENCReaBCFErr, and IGGENCReaKeyAcc to 00043300
*     ]   have the related service's non-zero return code inserted into 00043400
*     ]   Byte 0 and the corresponding reason code into Bytes 1-3.      00043500
*      IGGENCReaNoEncCell char(8)  ] Encryption cell does not exist     00043600
*                       constant('0000000000000411'X),                  00043700
*      IGGENCReaSetLock   char(8)  ] Error obtaining local lock         00043800
*                       constant('0000000000000510'X),                  00043900
*      IGGENCReaICSFErr   char(8)  ] Error encountered during CSNEKRR2  00044000
*                       constant('0000000000000611'X),                  00044100
*      IGGENCReaCrypKL    char(8)  ] Incorrect crypto key length        00044200
*                       constant('0000000000000711'X),                  00044300
*      IGGENCReaBCFErr    char(8)  ] Error encountered during BCFXCRYPT 00044400
*                       constant('0000000000000810'X),                  00044500
*      IGGENCReaVerErr    char(8)  ] Incorrect verification bytes       00044600
*                       constant('0000000000000911'X),                  00044700
*      IGGENCReaCatErr    char(8)  ] Error occurred during Catalog call 00044800
*                       constant('0000000000000A11'X),                  00044900
*      IGGENCReaKeyAcc    char(8)  ] Not authorized to read key label   00045000
*                       constant('0000000000000B11'X),                  00045100
*      IGGENCReaBuffCnt   char(8)  ] Encryption Buffer Count < 1        00045200
*                       constant('0000000000000C10'X),                  00045300
*      IGGENCReaBuffLen   char(8)  ] Encryption Buffer Length is        00045400
*                                  ]   < 16 bytes                       00045500
*                       constant('0000000000000D10'X),                  00045600
*      IGGENCReaBuffAddr  char(8)  ] Encryption Buffer Address is Zero  00045700
*                       constant('0000000000000E10'X),                  00045800
*      IGGENCReaPfxAddr  char(8)   ] Block ID Address is Zero           00045900
*                       constant('0000000000000F10'X),                  00046000
*      IGGENCReaBuffInv   char(8)  ] Encryption Buffer invalid          00046100
*                       constant('0000000000001010'X),                  00046200
*      IGGENCReaNonEncDS  char(8)  ] Non-encrypted data set             00046300
*                       constant('0000000000001110'X),                  00046400
*      IGGENCReaEncNotOk  char(8)  ] EXCP caller DCBEDSENCRYPTOK        00046500
*                                  ]   is OFF                           00046600
*                       constant('0000000000001210'X),                  00046700
*      IGGENCReaEncSysErr char(8)  ] Encryption Service Error           00046800
*                       constant('0000000000001310'X),                  00046900
*      IGGENCReaTCBAddr   char(8)  ] Caller unauthorized to specify TCB 00047000
*                       constant('0000000000001411'X),                  00047100
*      IGGENCReaNpDCBE    char(8)  ] DCBEDSENCNP bit is on, but the     00047200
*                                  ]   non-prefixed bit in the ENCRYPTA 00047300
*                                  ]   field in the catalog entry       00047400
*                                  ]   is off.                          00047500
*                       constant('0000000000001511'X),                  00047600
*      IGGENCReaNpCtlg    char(8)  ] Non-prefixed bit in the ENCRYPTA   00047700
*                                  ]   field in the catalog entry is    00047800
*                                  ]   on, but DCBEDSENCNP bit is off.  00047900
*                       constant('0000000000001521'X),                  00048000
*      IGGENCReaNpInvDCB char(8)   ] OPEN issued for encrypted basic/   00048100
*                                  ]   large format data set that has   00048200
*                                  ]   non-prefixed blocks but the DCB  00048300
*                                  ]   is not for EXCP.                 00048400
*                       constant('0000000000001531'X),                  00048500
*      IGGENCReaConArchKey char(8) ] An archived encryption key    @01A         
*                                  ]   was used during a call to                
*                                  ]   IGGENC CONNECT              @01A         
*                       constant('0000000000001611'X),            ]@01A         
*      IGGENCReaEncArchKey char(8) ] An archived read only encryption           
*                                  ]   key was used during a call to            
*                                  ]   IGGENC ENCRYPT.                          
*                       constant('0000000000001622'X);            ]@01A         
