*/**** START OF SPECIFICATIONS ****************************************         
*                                                                     *         
*                                                                     *         
*01* MACRO NAME:  GRBSMFR                               -21/02/18-<0> *         
*                                                                     *         
*                                                                     *         
*01* DESCRIPTIVE NAME:  Data Gatherer SMF record retrieval            *         
*                                                                     *         
*01* PROPRIETARY STATEMENT:                                           *         
*                                                                     *         
*     LICENSED MATERIALS - PROPERTY OF IBM                            *         
*     5650-ZOS COPYRIGHT IBM CORP. 2021, 2021                         *         
*                                                                     *         
* STATUS= HRG77D0                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*01* FUNCTION:                                                        *         
*                                                                     *         
*                                                                     *         
*      SMF post-processing applications must be able to retrieve into *         
*      storage SMF records that reside in an SMF data set or SMF log  *         
*      stream. Such applications often face the problem that SMF      *         
*      records that were written on another z/OS release or service   *         
*      level must be either (up-)converted to a higher service level  *         
*      or (down)-converted to an older service level. z/OS Data       *         
*      Gatherer provides a conversion method in the GRBSMFR service   *         
*      that adapts SMF data section lengths and data fields in such a *         
*      way that the calling program can read and understand the       *         
*      converted data. If the SMF records were physically broken by   *         
*      the z/OS Data Gatherer, this service can be used to            *         
*      re-assemble these records into one large logical SMF record.   *         
*                                                                     *         
*      The service GRBSMFR can be invoked to request three functions  *         
*                                                                     *         
*                                                                     *         
*      1.  The OPEN function explores the SMF data set or log-stream  *         
*          and returns information that can be used as input for      *         
*          calling the GET function                                   *         
*                                                                     *         
*      2.  The GET function retrieves either broken, unbroken, or     *         
*          re-assembled SMF records from the SMF data set or          *         
*          log-stream specified in the ddname parameter. If an SMF    *         
*          record is at a different service level than the GRBSMFR    *         
*          service level, the SMF records are converted to the        *         
*          current level before they are re-assembled                 *         
*                                                                     *         
*      3.  The CLOSE function closes the SMF data set or SMF          *         
*          log-stream and cleans up internal work areas               *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*01* EXTERNAL CLASSIFICATION:  PSPI                                   *         
*                                                                     *         
*01* END OF EXTERNAL CLASSIFICATION:                                  *         
*                                                                     *         
*01* ENVIRONMENT:                                                     *         
*                                                                     *         
*                                                                     *         
*      Minimum authorization: Problem state.  Any PSW key.            *         
*                                                                     *         
*      Dispatchable unit mode: Task mode.                             *         
*                                                                     *         
*      Cross Memory Mode: Any PASN, any HASN, any SASN.               *         
*                                                                     *         
*      AMODE:            64-bit.  Code SYSSTATE AMODE64=YES before    *         
*                        invoking this macro.                         *         
*                                                                     *         
*      ASC mode:         Primary.                                     *         
*                                                                     *         
*      Interrupt status: Enabled for I/O and external interrupts.     *         
*                                                                     *         
*      Locks:            No locks held.                               *         
*                                                                     *         
*      Control parameters: Control parameters must be in the primary  *         
*                        address space.                               *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*01* PROGRAMMING REQUIREMENTS:                                        *         
*    Do not link the service module GRBSMFR into your application     *         
*    program.  Code the program to call the service module at run     *         
*    time. How to do this depends on the programming language you     *         
*    use:                                                             *         
*                                                                     *         
*                                                                     *         
*    o   Assembler, use LOAD or LINK macros                           *         
*                                                                     *         
*    o   In PL/I, use FETCH and RELEASE                               *         
*                                                                     *         
*    o   In C, use the fetch built-in function                        *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*01* SYNTAX:                                                          *         
*                                                                     *         
*Ýxlabel¨  GRBSMFR  æ  OPEN                                          *         
*                   !   æ ,ASSEMBLE                                  *         
*                   !   ó ,CONVERT                                   *         
*                   !   ¿ ,NONE                                      *         
*                   !     ,REQTOKEN=xreqtoken                         *         
*                   !     ,DDNAME=xddname                             *         
*                   !     ,FILTLIST=xfiltlist                         *         
*                   !     ,ANSAREAP=xansareap                         *         
*                   !     ,ANSAREAL=xansareal                         *         
*                   ó ,GET                                           *         
*                   !     ,REQTOKEN=xreqtoken                         *         
*                   !     ,RSTOKEN=xrstoken                           *         
*                   !     ,ANSAREAP=xansareap                         *         
*                   !     ,ANSAREAL=xansareal                         *         
*                   ¿ ,CLOSE                                         *         
*                         ,REQTOKEN=xreqtoken                         *         
*                    Ý,RETCODE=xretcode¨                              *         
*                    Ý,REASCODE=xreascode¨                            *         
*                    Ý,PLISTVER=»xplistver!IMPLIED_VERSIONº¨        *         
*                   æÝ,MF=S¨                                         *         
*                   óÝ,MF=(L,xmfctrl»,xmfattr!0Dº)¨                *         
*                   ¿Ý,MF=(E,xmfctrl»,COMPLETEº)¨                  *         
*                                                                     *         
*                                                                     *         
*      Where:                                                         *         
*                                                                     *         
*                                                                     *         
*      Ýxlabel¨                                                       *         
*          is an optional symbol, starting in column 1, that is the   *         
*          name on the GRBSMFR macro invocation.  The name must       *         
*          conform to the rules for an ordinary assembler language    *         
*          symbol.                                                    *         
*          DEFAULT: No name.                                          *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*      The following is a set of mutually exclusive keys.  This set   *         
*      is required; only one key must be specified.                   *         
*                                                                     *         
*                                                                     *         
*      OPEN                                                           *         
*          The OPEN function explores the SMF data set or SMF         *         
*          log-stream and returns information that can be used as     *         
*          input for calling the GET function. The OPEN request must  *         
*          be submitted before the first GET request.                 *         
*                                                                     *         
*                                                                     *         
*          The following is a set of mutually exclusive keys.  This   *         
*          set is required; only one key must be specified.           *         
*                                                                     *         
*                                                                     *         
*          ASSEMBLE                                                   *         
*              specifies that SMF records written on a different z/OS *         
*              release or service level must be converted to the SMF  *         
*              record level that is supported by this service. In     *         
*              addition, all broken SMF records are re-assembled into *         
*              one large logical SMF record.                          *         
*                                                                     *         
*          CONVERT                                                    *         
*              specifies that SMF records written on a different z/OS *         
*              release or service level must be converted to the SMF  *         
*              record level that is supported by this service. No SMF *         
*              record re-assembly is done.                            *         
*                                                                     *         
*          NONE                                                       *         
*              specifies that SMF records must be neither converted   *         
*              to another SMF record level nor re-assembled into a    *         
*              large logical SMF record.                              *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*          End of a set of mutually exclusive required keys.          *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*          REQTOKEN=xreqtoken                                         *         
*              is the name (RS-type), or address in register          *         
*              (2)-(12), of a required fullword output in which a     *         
*              request token is returned by the OPEN function. The    *         
*              request token must be used for subsequent GET requests *         
*              and the final CLOSE request.                           *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*          DDNAME=xddname                                             *         
*              is the name (RS-type), or address in register          *         
*              (2)-(12), of a required 8 character input which        *         
*              specifies the DDNAME of the SMF data set or SMF        *         
*              log-stream that contains the SMF records to be         *         
*              retrieved. The SMF data set or log-stream can contain  *         
*              broken and unbroken SMF records.                       *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*          FILTLIST=xfiltlist                                         *         
*              is the name (RS-type), or address in register          *         
*              (2)-(12), of a required 40 character input which       *         
*              specifies the filter criteria to be applied to the     *         
*              input SMF records. The input SMF records are provided  *         
*              in the SMF data set or SMF log-stream specified by the *         
*              ddname parameter.                                      *         
*                                                                     *         
*              Specify one or more of the following filters:          *         
*                                                                     *         
*                                                                     *         
*              VERSION (BYTE 0-1)                                     *         
*                                                                     *         
*                         2-byte unsigned integer value that          *         
*                        specifies the version of the filter list.    *         
*                        Must be set to 1.                            *         
*                                                                     *         
*              LENGTH (BYTE 2-3)                                      *         
*                                                                     *         
*                         2-byte unsigned integer value that          *         
*                        specifies the length of the filter list.     *         
*                        Must be set to 40.                           *         
*                                                                     *         
*              TYPE (BYTE 4-5)                                        *         
*                                                                     *         
*                         2-byte unsigned integer value that          *         
*                        specifies the SMF type of the records to be  *         
*                        processed                                    *         
*                                                                     *         
*              SUBTYPE (BYTE 6-7)                                     *         
*                                                                     *         
*                         2-byte unsigned integer value that          *         
*                        specifies the SMF subtype of the records to  *         
*                        be processed                                 *         
*                                                                     *         
*              SMFID (BYTE 8-11)                                      *         
*                                                                     *         
*                         4-byte character that specifies the SMF ID  *         
*                        of the z/OS system that has written the SMF  *         
*                        records to be processed                      *         
*                                                                     *         
*              STARTTIME (BYTE 12-25)                                 *         
*                                                                     *         
*                         14-byte character in format YYYYMMDDHHMMSS  *         
*                        that specifies the beginning of the time     *         
*                        interval for which information is requested  *         
*                                                                     *         
*              ENDTIME (BYTE 26-39)                                   *         
*                                                                     *         
*                         14-byte character in format YYYYMMDDHHMMSS  *         
*                        that specifies the end of the time interval  *         
*                        for which information is requested           *         
*                                                                     *         
*                                                                     *         
*              Specify binary zeroes for filters type, subtype and    *         
*              blanks for filters smfid, starttime, endtime if you do *         
*              not want to apply those filters to select input SMF    *         
*              records                                                *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*          ANSAREAP=xansareap                                         *         
*              is the name (RS-type), or address in register          *         
*              (2)-(12), of a required 8 character input/output that  *         
*              specifies the 64-bit address of the area to which the  *         
*              GRBSMFR service returns the information requested by   *         
*              the caller. The area must be in the caller's primary   *         
*              address space.                                         *         
*                                                                     *         
*              The answer area contains the SMF Data Set Lookup table *         
*              (DSLT) which consists of a header and one or more data *         
*              sections. Each data section provides the calling       *         
*              program with information about one specific SMF record *         
*              in the SMF data set or SMF log-stream. Only SMF        *         
*              records that match the specified selection criteria    *         
*              are described in DSLT data sections.                   *         
*                                                                     *         
*              DSLT Header                                            *         
*                                                                     *         
*                                                                     *         
*              ACRONYM (BYTE 0-3)                                     *         
*                                                                     *         
*                         is the four-character acronym, DSLT, of the *         
*                        Data Set Lookup table                        *         
*                                                                     *         
*              VERSION (BYTE 4-5)                                     *         
*                                                                     *         
*                         is the version of the Data Set Lookup table *         
*                                                                     *         
*              HEADER LENGTH (BYTE 6-7)                               *         
*                                                                     *         
*                         is the length of the header of the Data Set *         
*                        Lookup table                                 *         
*                                                                     *         
*              TOTAL LENGTH (BYTE 8-11)                               *         
*                                                                     *         
*                         is the total length of the Data Set Lookup  *         
*                        table, including all data sections           *         
*                                                                     *         
*              NUMBER OF DATA SECTIONS (BYTE 12-15)                   *         
*                                                                     *         
*                         is the total number of data sections in the *         
*                        Data Set Lookup table                        *         
*                                                                     *         
*              DATA SECTION LENGTH (BYTE 16-17)                       *         
*                                                                     *         
*                         is the length of one data section           *         
*                                                                     *         
*              '0000'X (BYTE 18-19)                                   *         
*                                                                     *         
*                         Reserved                                    *         
*                                                                     *         
*              NUMBER OF SMF RECORD SETS (BYTE 20-23)                 *         
*                                                                     *         
*                         is the total number of SMF record sets in   *         
*                        the Data Set Lookup table                    *         
*                                                                     *         
*              REQUEST TOKEN (BYTE 24-31)                             *         
*                                                                     *         
*                         is returned by the OPEN function and        *         
*                        connects the Open, Get, and Close requests   *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*              DSLT Data Section                                      *         
*                                                                     *         
*                                                                     *         
*              DSLT RECORD ID (BYTE 0-3)                              *         
*                                                                     *         
*                         is the identifier of the SMF record in the  *         
*                        Data Set Lookup table                        *         
*                                                                     *         
*              SMF RECORD ID (BYTE 4-7)                               *         
*                                                                     *         
*                         is the identifier of the SMF record in the  *         
*                        SMF data set or SMF log-stream               *         
*                                                                     *         
*              RECORD SET TOKEN (BYTE 8-11)                           *         
*                                                                     *         
*                         is the identifier of the SMF record set     *         
*                        which consists of either one unbroken SMF    *         
*                        record or multiple broken records that are   *         
*                        re-assembled into one large logical SMF      *         
*                        record                                       *         
*                                                                     *         
*              BROKEN RECORD NUMBER (BYTE 12-13)                      *         
*                                                                     *         
*                         is the sequence number of the broken SMF    *         
*                        record set identified by record set number   *         
*                                                                     *         
*              TOTAL BROKEN RECORD (BYTE 14-15)                       *         
*                                                                     *         
*                         is the number of broken records that belong *         
*                        to the SMF record set identified by the      *         
*                        record set number                            *         
*                                                                     *         
*              SMF TYPE (BYTE 16-17)                                  *         
*                                                                     *         
*                         is the SMF type as specified in FILTLIST    *         
*                        parameter type                               *         
*                                                                     *         
*              SMF SUBTYPE (BYTE 18-19)                               *         
*                                                                     *         
*                         is the SMF subtype as specified in FILTLIST *         
*                        parameter subtype                            *         
*                                                                     *         
*              SMF ID (BYTE 20-23)                                    *         
*                                                                     *         
*                         is the SMF ID of the z/OS system that wrote *         
*                        the SMF record.  The SMF ID was specified in *         
*                        FILTLIST parameter smfid                     *         
*                                                                     *         
*              INTERVAL START DATE (BYTE 24-27)                       *         
*                                                                     *         
*                         is the start date of the SMF interval in    *         
*                        the form 0CYYDDDx.  The date was specified   *         
*                        in the form YYYYMMDD in FILTLIST parameter   *         
*                        starttime                                    *         
*                                                                     *         
*              INTERVAL START TIME (BYTE 28-31)                       *         
*                                                                     *         
*                         is the start time of the SMF interval in    *         
*                        the form 0HHMMSSx.  The start time was       *         
*                        specified in the form HHMMSS in FILTLIST     *         
*                        parameter starttime                          *         
*                                                                     *         
*              INTERVAL DURATION (BYTE 32-35)                         *         
*                                                                     *         
*                         is the length of the SMF interval in the    *         
*                        form MMSSTTTx                                *         
*                                                                     *         
*              DSLT FLAG (BYTE 36)                                    *         
*                                                                     *         
*                         indicates the validity of Data Set Lookup   *         
*                        table fields. If bit 0 is set, the SMF       *         
*                        subtype in bytes 18-19 of the DSLT is valid. *         
*                        If bit 1 is set, the interval start date,    *         
*                        start time and duration in bytes 24-35 are   *         
*                        valid. Bits 2-7 are not used                 *         
*                                                                     *         
*              SMF RECORD LENGTH (BYTE 38-39)                         *         
*                                                                     *         
*                         is the length of the SMF record             *         
*                                                                     *         
*              SMF RECORD MOVE TIME (BYTE 40-43)                      *         
*                                                                     *         
*                         is the time since midnight, in hundredths   *         
*                        of a second, when the record was moved into  *         
*                        the SMF buffer. In record types 2 and 3,     *         
*                        this is the time when the record was moved   *         
*                        to the dump data set                         *         
*                                                                     *         
*              SMF RECORD MOVE DATE (BYTE 44-47)                      *         
*                                                                     *         
*                         is the date, in the form 0CYYDDDx, when the *         
*                        record was moved into the SMF buffer. In     *         
*                        record types 2 and 3, this is the date when  *         
*                        the record was moved to the dump data set    *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*          ANSAREAL=xansareal                                         *         
*              is the name (RS-type), or address in register          *         
*              (2)-(12), of a required fullword input/output that     *         
*              specifies the length of the allocated answer area.  If *         
*              you do not provide enough space, the service returns   *         
*              in this parameter the length needed for the complete   *         
*              data. The length value returned on OPEN requests is    *         
*              the exact size of the SMF Data Set Lookup table.       *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*      GET                                                            *         
*          The GET function retrieves either broken, unbroken, or     *         
*          re-assembled SMF records from the SMF data set or          *         
*          log-stream specified in the ddname parameter. If an SMF    *         
*          record is at a different service level than this service,  *         
*          the SMF records are converted to the current service level *         
*          before they are re-assembled.                              *         
*                                                                     *         
*          The GET request must be submitted after the OPEN request.  *         
*                                                                     *         
*                                                                     *         
*          REQTOKEN=xreqtoken                                         *         
*              is the name (RS-type), or address in register          *         
*              (2)-(12), of a required fullword input which contains  *         
*              the request token that was returned by the OPEN        *         
*              function                                               *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*          RSTOKEN=xrstoken                                           *         
*              is the name (RS-type), or address in register          *         
*              (2)-(12), of a required fullword input which specifies *         
*              the record set token that identifies the SMF record    *         
*              set that is to be processed by the GET request. Valid  *         
*              record set tokens are returned in the answer area of   *         
*              the OPEN request in bytes 8-11 of each data section    *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*          ANSAREAP=xansareap                                         *         
*              is the name (RS-type), or address in register          *         
*              (2)-(12), of a required 8 character input/output that  *         
*              specifies the 64-bit address of the area to which the  *         
*              service returns the requested information. The area    *         
*              must be in the caller's primary address space. The     *         
*              area contains a 4-byte prefix area that contains the   *         
*              SMF record length followed by exactly one SMF record   *         
*              that is either an unbroken or re-assembled SMF record. *         
*              The first two bytes of the SMF record provide the      *         
*              length of the SMF record if it is not re-assembled. If *         
*              the returned SMF record was re-assembled, bytes 0 and  *         
*              1 of the SMF record are set to zero.                   *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*          ANSAREAL=xansareal                                         *         
*              is the name (RS-type), or address in register          *         
*              (2)-(12), of a required fullword input/output that     *         
*              specifies the length of the allocated answer area.  If *         
*              you do not provide enough space, the service returns   *         
*              in this parameter the length needed for the complete   *         
*              data. The value returned on GET requests is the        *         
*              estimated length of the re-assembled SMF record. The   *         
*              size can only be estimated to avoid re-positioning     *         
*              actions on the SMF data set or log-stream due to       *         
*              unsuccessful read operations.                          *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*      CLOSE                                                          *         
*          The CLOSE function closes the SMF data set or SMF          *         
*          log-stream and cleans up internal work areas.              *         
*                                                                     *         
*          It must be invoked after the last invocation of the GET    *         
*          function for a specific data set or log-stream.            *         
*                                                                     *         
*                                                                     *         
*          REQTOKEN=xreqtoken                                         *         
*              is the name (RS-type), or address in register          *         
*              (2)-(12), of a required fullword input which contains  *         
*              the request token that was returned by the OPEN        *         
*              function                                               *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*      End of a set of mutually exclusive required keys.              *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*      ÝRETCODE=xretcode¨                                             *         
*          is the name (RS-type) of an optional fullword output       *         
*          variable, or register (2)-(12), that will contain the      *         
*          return code.                                               *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*      ÝREASCODE=xreascode¨                                           *         
*          is the name (RS-type) of an optional fullword output       *         
*          variable, or register (2)-(12), that will contain the      *         
*          reason code.                                               *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*      ÝPLISTVER=»xplistver!IMPLIED_VERSIONº¨                       *         
*          is an optional byte input decimal value in the "0-0" range *         
*          that specifies the macro version.  PLISTVER is the only    *         
*          key allowed on the list form of MF and determines which    *         
*          parameter list is generated.  Note that MAX may be         *         
*          specified instead of a number, and the parameter list will *         
*          be of the largest size currently supported. This size may  *         
*          grow from release to release (thus possibly affecting the  *         
*          amount of storage needed by your program).  If your        *         
*          program can tolerate this, IBM recommends that you always  *         
*          specify MAX when creating the list form parameter list as  *         
*          that will ensure that the list form parameter list is      *         
*          always long enough to hold whatever parameters might be    *         
*          specified on the execute form.                             *         
*          DEFAULT: IMPLIED_VERSION.  When PLISTVER is omitted, the   *         
*          default is the lowest version which allows all of the      *         
*          parameters specified on the invocation to be processed.    *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*      ÝMF=»S!L!Eº¨                                                 *         
*          is an optional keyword input which specifies the macro     *         
*          form.                                                      *         
*          DEFAULT: S                                                 *         
*                                                                     *         
*                                                                     *         
*          ÝMF=S¨                                                     *         
*              specifies the standard form of the macro.  The "S"     *         
*              form generates code to put the parameters into an      *         
*              in-line parameter list and invoke the desired service. *         
*              Full checking for required macro keys is done along    *         
*              with supplying defaults for omitted optional           *         
*              parameters.                                            *         
*                                                                     *         
*          ÝMF=(L,xmfctrl»,xmfattr!0Dº)¨                            *         
*              specifies the list form of the macro.  The "L" form    *         
*              defines an area to be used for the parameter list.     *         
*              Only the PLISTVER key may be specified on the          *         
*              invocation.  All other macro parameters are flagged as *         
*              errors.  If PLISTVER is not specified, the original    *         
*              parameter list definition is used.                     *         
*                                                                     *         
*            ,xmfctrl                                                 *         
*              is a required input.  It is the name of a storage area *         
*              for the parameter list.                                *         
*                                                                     *         
*            »,xmfattr!0Dº                                          *         
*              is an optional 60 character input string that varies   *         
*              from 1 to 60 characters. Use it to force boundary      *         
*              alignment of the parameter list. Use only 0F or 0D.    *         
*              DEFAULT: 0D which forces the parameter list to a       *         
*              doubleword boundary.                                   *         
*                                                                     *         
*          ÝMF=(E,xmfctrl»,COMPLETEº)¨                              *         
*              specifies the execute form of the macro.  The "E" form *         
*              generates code to put the parameters into the          *         
*              parameter list specified by xmfctrl and provides full  *         
*              syntax checking with default setting.                  *         
*                                                                     *         
*            ,xmfctrl                                                 *         
*              is a required input.  It is the name (RS-type), or     *         
*              address in register (1)-(12), of a storage area for    *         
*              the parameter list.                                    *         
*                                                                     *         
*            »,COMPLETEº                                            *         
*              is an optional keyword input which specifies the       *         
*              degree of macro parameter syntax checking.             *         
*              DEFAULT: COMPLETE                                      *         
*                                                                     *         
*                                                                     *         
*              COMPLETE                                               *         
*                  Checking for required macro keys is done and       *         
*                  defaults are supplied for omitted optional         *         
*                  parameters.                                        *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*01* RETURN CODES:                                                    *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                 0         The operation was successful. The         *         
*                           requested data has been stored in the     *         
*                           answer area provided by the calling       *         
*                           program.                                  *         
*                                                                     *         
*                           Reason Codes                              *         
*                                                                     *         
*                                                                     *         
*                           0         Meaning: The operation was      *         
*                                     successful. The answer area     *         
*                                     contains the requested data.    *         
*                                                                     *         
*                                     Action: Continue normal program *         
*                                     execution.                      *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                 4         The returned data may be inconsistent.    *         
*                                                                     *         
*                           Reason Codes                              *         
*                                                                     *         
*                                                                     *         
*                           0         Meaning: No SMF record data was *         
*                                     found that matches the filter   *         
*                                     criteria specified in the       *         
*                                     filter list.                    *         
*                                                                     *         
*                                     Action: Specify other filter    *         
*                                     criteria in the FILTLIST        *         
*                                     parameter or continue normal    *         
*                                     program execution.              *         
*                                                                     *         
*                           4         Meaning: At least one broken    *         
*                                     SMF record was detected in an   *         
*                                     SMF record set that belongs to  *         
*                                     a different time interval or    *         
*                                     was collected on a different    *         
*                                     system than the other records   *         
*                                     in the SMF record set. The      *         
*                                     inconsistent SMF record is      *         
*                                     ignored.                        *         
*                                                                     *         
*                                     Action: Ensure that only        *         
*                                     consistent SMF record sets are  *         
*                                     passed to the service.          *         
*                                                                     *         
*                           8         Meaning: At least one SMF       *         
*                                     record was not converted to the *         
*                                     service level supported by z/OS *         
*                                     Data Gatherer.                  *         
*                                                                     *         
*                                     Action: The service provides    *         
*                                     the calling program with the    *         
*                                     unconverted SMF record in the   *         
*                                     answer area. Contact your       *         
*                                     system administrator and        *         
*                                     request the latest z/OS Data    *         
*                                     Gatherer service to be          *         
*                                     installed.                      *         
*                                                                     *         
*                           12        Meaning: At least one broken    *         
*                                     SMF record was found that       *         
*                                     cannot be reassembled by the    *         
*                                     service.                        *         
*                                                                     *         
*                                     Action: The service provides    *         
*                                     the calling program with the    *         
*                                     broken SMF record in the answer *         
*                                     area.                           *         
*                                                                     *         
*                           16        Meaning: At least one           *         
*                                     incomplete SMF record set was   *         
*                                     found that cannot be            *         
*                                     reassembled by the service.     *         
*                                                                     *         
*                                     Action: The service provides a  *         
*                                     DSLT entry in the answer area.  *         
*                                     The DSLT is supposed to belong  *         
*                                     to the incomplete SMF record    *         
*                                     set. Use the DSLT to determine  *         
*                                     which SMF records are affected  *         
*                                     and remove those records from   *         
*                                     the SMF data set or exclude     *         
*                                     them by using another filter in *         
*                                     the FILTLIST parameter.         *         
*                                                                     *         
*                           20        Meaning: At least one SMF       *         
*                                     record was converted to the     *         
*                                     version or SMF record level     *         
*                                     that is supported by GRBSMFR.   *         
*                                                                     *         
*                                     Action: The service provides    *         
*                                     the calling program with the    *         
*                                     converted SMF record in the     *         
*                                     answer area.                    *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                 8         No data was returned, for example,        *         
*                           because invalid parameters were specified *         
*                           by the caller.                            *         
*                                                                     *         
*                           Reason Codes                              *         
*                                                                     *         
*                                                                     *         
*                           4         Meaning: The answer area        *         
*                                     provided by the calling program *         
*                                     was too small for the service   *         
*                                     to return all the requested     *         
*                                     information.                    *         
*                                                                     *         
*                                     Action: Use the required answer *         
*                                     area length returned by the     *         
*                                     OPEN or GET request to provide  *         
*                                     an answer area large enough to  *         
*                                     contain the reassembled SMF     *         
*                                     record.                         *         
*                                                                     *         
*                           8         Meaning: The start or end time  *         
*                                     in the FILTLIST parameter was   *         
*                                     specified in an invalid format. *         
*                                                                     *         
*                                     Action: Specify start and end   *         
*                                     time in the format              *         
*                                     YYYYMMDDHHMMSS and rerun the    *         
*                                     program.                        *         
*                                                                     *         
*                           12        Meaning: The specified request  *         
*                                     token is invalid.               *         
*                                                                     *         
*                                     Action: Specify the request     *         
*                                     token that was passed back on   *         
*                                     completion of the OPEN request. *         
*                                                                     *         
*                           16        Meaning: The specified record   *         
*                                     set token is invalid.           *         
*                                                                     *         
*                                     Action: Use the DSLT to         *         
*                                     determine a valid SMF record    *         
*                                     set ID and specify the ID as    *         
*                                     SMF record set token.           *         
*                                                                     *         
*                           20        Meaning: The specified request  *         
*                                     type is invalid.                *         
*                                                                     *         
*                                     Action: Specify a request type  *         
*                                     of OPEN, GET, or CLOSE.         *         
*                                                                     *         
*                           24        Meaning: The calling program is *         
*                                     not in task mode.               *         
*                                                                     *         
*                                     Action: Rerun your program in   *         
*                                     the correct mode.               *         
*                                                                     *         
*                           28        Meaning: The calling program is *         
*                                     not enabled.                    *         
*                                                                     *         
*                                     Action: Rerun your program in   *         
*                                     the correct mode.               *         
*                                                                     *         
*                           32        Meaning: The calling program is *         
*                                     not unlocked.                   *         
*                                                                     *         
*                                     Action: Rerun your program in   *         
*                                     the correct mode.               *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                 16        A problem has been detected within SMF    *         
*                           processing.                               *         
*                                                                     *         
*                           Reason Codes                              *         
*                                                                     *         
*                                                                     *         
*                           4         Meaning: The service was unable *         
*                                     to access the SMF data set or   *         
*                                     log stream.                     *         
*                                                                     *         
*                           8         Meaning: Internal error. The    *         
*                                     service was unable to establish *         
*                                     a recovery environment.         *         
*                                                                     *         
*                           12        Meaning: Unexpected error. The  *         
*                                     error recovery routine of the   *         
*                                     service had control.            *         
*                                                                     *         
*                           16        Meaning: Unexpected internal    *         
*                                     error.                          *         
*                                                                     *         
*                           20        Meaning: Unexpected error.      *         
*                                     Number of triplets in SMF       *         
*                                     record is higher than supported *         
*                                     by this service.                *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*01* ABEND CODES:  None.                                              *         
*                                                                     *         
*       None                                                          *         
*                                                                     *         
*01* REASON CODES:                                                    *         
*                                                                     *         
*       See return codes section.                                     *         
*                                                                     *         
*01* MODULE TYPE:  ASSEM MACRO                                        *         
*                                                                     *         
*02*   PROCESSOR:  ASSEM                                              *         
*                                                                     *         
*01* COMPONENT:  27401                                                *         
*                                                                     *         
*01* DISTRIBUTION LIBRARY: AGRBMAC1                                   *         
*                                                                     *         
*01* MACRO USAGE NOTES:                                               *         
*                                                                     *         
*                                                                     *         
*    1.  Printing of the macro expansion is controlled by the ZPRINT  *         
*        global macro variable.  Any value other than 'NO' will       *         
*        result in the macro expansion being printed.  The default is *         
*        'YES'.  The following examples illustrate how the ZPRINT     *         
*        variable should be set.                                      *         
*                                                                     *         
*                    GBLC &ZPRINT                                     *         
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            *         
*                                                                     *         
*                                                                     *         
*    2.  All keys currently contained in the GRBSMFR macro correspond *         
*        to  version 0.  If you specify PLISTVER, use a value of 0 or *         
*        MAX.                                                         *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*01* CHANGE ACTIVITY:                                                 *         
*                                                                     *         
*   Flag LineItem  FMID    Date   ID    Comment                       *         
*                                                                     *         
*    $A00=ZOSB     HRG77D0 210218 JKu:  SMF record retrieval service  *         
*    $A01=OA61287  HRG77D0 210609 Mai:  Add environment checks        *         
*                                                                     *         
*                                                                     *         
****** END OF SPECIFICATIONS *****************************************/         
*/*********************************************************************         
         MACRO                                                                  
&XLABEL  GRBSMFR &REQTOKEN=,&DDNAME=,&FILTLIST=,&ANSAREAP=,&ANSAREAL=, *        
               &RSTOKEN=,&RETCODE=,&REASCODE=,&PLISTVER=,&MF=                   
.*                                                                              
*              MACDATE -21/02/18-<0>                                            
.*                                                                              
.*******************************************************************            
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION                
.*******************************************************************            
              GBLC  &ZPRINT     YES=PRINT NO=NO PRINT                           
              GBLC  &ZTEST      YES=TEST NO=NO TEST                             
              GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX                     
.*                                                                              
              GBLC  &ZGRBSMFR   YES=MACRO USED AT LEAST ONCE                    
.*******************************************************************            
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                                  
.*******************************************************************            
              LCLC  &ZMS        ERROR MESSAGE WORK AREA                         
              LCLC  &ZCNDX      SYSNDX CHARACTERS                               
              LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED                      
              LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR                     
              LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE                     
              LCLA  &ZAWRK      USED AS A WORK AREA                             
              LCLA  &ZASIZ      USED FOR SIZE OF VALUE                          
              LCLA  &ZN         NUMERIC WORK VARIABLE                           
              LCLC  &ZC         CHARACTER WORK VARIABLE                         
              LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE                     
              LCLA  &ZTLA       VALUE TOO LONG VARIABLE                         
              LCLC  &ZMAC_G     "G" or null                                     
&ZMAC_G       SETC  ''                                                          
              LCLC  &ZMAC_LR                                                    
&ZMAC_LR      SETC  'LR'                                                        
              LCLC  &ZMAC_L                                                     
&ZMAC_L       SETC  'L'                                                         
              LCLC  &ZMAC_ST                                                    
&ZMAC_ST      SETC  'ST'                                                        
              LCLC  &ZMAC_LLGT                                                  
&ZMAC_LLGT    SETC  'L'                                                         
              LCLC  &ZMAC_LGR                                                   
&ZMAC_LGR     SETC  'LR'                                                        
              LCLC  &ZMAC_LG                                                    
&ZMAC_LG      SETC  'L'                                                         
              LCLC  &ZMAC_STG                                                   
&ZMAC_STG     SETC  'ST'                                                        
              LCLA  &ZMACRET    MACRO RETURN CODE                               
&ZMACRET      SETA  0           ASSUME NO ERRORS                                
.*                                                                              
              LCLC  &ZCSYSLIST(255)             NONXKEY, POS ARRAY              
              LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()                      
              LCLA  &ZPLLEN     PARAMETER LIST LENGTH                           
              LCLC  &ZENDBASEPL                 End of base PL                  
              LCLA  &ZPLWORKA   PARAMETER LIST LENGTH                           
.*******************************************************************            
.***AB.04  MACRO VARIABLES FOR RANGES AND SETS OF ARGUMENTS                     
.*******************************************************************            
              LCLA  &ZI         INDEX FOR ARRAY                                 
              LCLA  &ZJ         INDEX FOR PARMS                                 
              LCLA  &ZK         INDEX FOR PARSE                                 
              LCLA  &ZLO        LOW RANGE VALUE                                 
              LCLA  &ZHI        HIGH RANGE VALUE                                
              LCLC  &ZW         WORK AREA FOR PARM                              
              GBLA  &SYSALVL    SYSSTATE ARCHLVL                                
.*******************************************************************            
.***AB.07  DEFINE ALL MACRO VARIABLES                                           
.*******************************************************************            
              LCLC  &XREQUEST   ++ VALUE                                        
              LCLC  &XOPEN      ++ VALUE                                        
              LCLC  &XPROCESSFUNCTION           ++ VALUE                        
              LCLC  &XASSEMBLE  ++ VALUE                                        
              LCLC  &XCONVERT   ++ VALUE                                        
              LCLC  &XNONE      ++ VALUE                                        
              LCLC  &XREQTOKEN  ++ NAME                                         
              LCLC  &XDDNAME    ++ NAME                                         
              LCLC  &XFILTLIST  ++ NAME                                         
              LCLC  &XANSAREAP  ++ NAME                                         
              LCLC  &XANSAREAL  ++ NAME                                         
              LCLC  &XGET       ++ VALUE                                        
              LCLC  &XRSTOKEN   ++ NAME                                         
              LCLC  &XCLOSE     ++ VALUE                                        
              LCLC  &XRETCODE   ++ NAME                                         
              LCLC  &XREASCODE  ++ NAME                                         
              LCLA  &XPLISTVER  ++ VALUE                                        
              LCLC  &XMF        ++ VALUE                                        
              LCLC  &XMFCTRL    ++ NAME                                         
              LCLC  &XMFATTR    ++ VALUE                                        
              LCLC  &XMFSCK     ++ VALUE                                        
.*******************************************************************            
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING                   
.*******************************************************************            
              LCLC  &ZXREQUEST  ++ INPUT VALUE                                  
              LCLC  &ZXOPEN     ++ INPUT VALUE                                  
              LCLC  &ZXPROCESSFUNCTION          ++ INPUT VALUE                  
              LCLC  &ZXASSEMBLE                 ++ INPUT VALUE                  
              LCLC  &ZXCONVERT  ++ INPUT VALUE                                  
              LCLC  &ZXNONE     ++ INPUT VALUE                                  
              LCLC  &ZXREQTOKEN                 ++ OUTPUT NAME                  
              LCLC  &ZXDDNAME   ++ INPUT NAME                                   
              LCLC  &ZXFILTLIST                 ++ INPUT NAME                   
              LCLC  &ZXANSAREAP                 ++ INOUT NAME                   
              LCLC  &ZXANSAREAL                 ++ INOUT NAME                   
              LCLC  &ZXGET      ++ INPUT VALUE                                  
              LCLC  &ZXRSTOKEN  ++ INPUT NAME                                   
              LCLC  &ZXCLOSE    ++ INPUT VALUE                                  
              LCLC  &ZXRETCODE  ++ OUTPUT NAME                                  
              LCLC  &ZXREASCODE                 ++ OUTPUT NAME                  
              LCLC  &ZXPLISTVER                 ++ INPUT VALUE                  
              LCLC  &ZXMF       ++ INPUT VALUE                                  
              LCLC  &ZXMFCTRL   ++ INPUT NAME                                   
              LCLC  &ZXMFATTR   ++ INPUT VALUE                                  
              LCLC  &ZXMFSCK    ++ INPUT VALUE                                  
.********************************************************************           
.***AC.PLV01  PROCESS PLISTVER                                      *           
.********************************************************************           
&XPLISTVER      SETA  0                                                         
                AIF   (K'&PLISTVER(1) LE 0).ZPLV0                               
                AIF   ('&PLISTVER(1)' NE 'MAX').ZPLV0                           
&XPLISTVER      SETA  0                                                         
.ZPLV0          ANOP  ,                                                         
.*                                                                              
                AIF   (K'&PLISTVER(1) LE 0).ZPVCKE                              
                AIF   ('&PLISTVER(1)' EQ 'IMPLIED_VERSION').ZPVCKE              
                AIF   ('&PLISTVER(1)' EQ 'MAX').ZPVCKE                          
.*-------------------------------------------------------------------           
                AIF   (N'&PLISTVER LE 1).ZPVCK3  CK NUM                         
&ZMS            SETC  '"PLISTVER='                                              
&ZMS            SETC  '&ZMS.&PLISTVER"'                                         
&ZMS            SETC  '&ZMS "PLISTVER"'                                         
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                       
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                        
                AGO   .ZPVCK2                                                   
.ZPVCK3         ANOP  ,                                                         
.*-------------------------------------------------------------------           
                AIF   ('&PLISTVER'(1,1) NE '(').ZPVCK2                          
&ZMS            SETC  '"PLISTVER='                                              
&ZMS            SETC  '&ZMS.&PLISTVER"'                                         
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'                 
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                         
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                        
                AGO   .ZPVCKE                                                   
.ZPVCK2         ANOP  ,                                                         
.*-------------------------------------------------------------------           
&ZCVAL          SETC  '&PLISTVER(1)'                                            
                AIF   ('&ZCVAL'(1,1) EQ '(').ZPVCKE  IN GPR                     
                AIF   (T'&ZCVAL NE 'N').ZPVCK6  NUMERIC ERR                     
&ZN             SETA   &PLISTVER(1)        CONVERT TO ARITHMETIC                
                AIF   (&ZN LT 0).ZPVCK6    TOO LOW                              
                AIF   (&ZN LE 0).ZPVCK4A   NOT HIGH                             
.ZPVCK6         ANOP  ,                                                         
&ZMS            SETC  '"PLISTVER='                                              
&ZMS            SETC  '&ZMS.&PLISTVER"'                                         
&ZMS            SETC  '&ZMS THE RANGE IS "0-0"'                                 
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                                 
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                        
&XPLISTVER      SETA  0                                                         
                AGO   .ZPVCKE                                                   
.*-------------------------------------------------------------------           
.ZPVCK4A        ANOP  ,                                                         
                AIF   (&ZN GE &XPLISTVER).ZPVCK4                                
&ZMS            SETC  'PLISTVER='                                               
&ZMS            SETC  '&ZMS.&PLISTVER(1)'                                       
&ZMS            SETC  '&ZMS., BUT PLISTVER OF'                                  
&ZMS            SETC  '&ZMS &XPLISTVER'                                         
                MNOTE 8,' &ZMS IS REQUIRED.'                                    
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                        
                AGO   .ZPVCK5                                                   
.ZPVCK4         ANOP  ,                                                         
&XPLISTVER      SETA  &PLISTVER(1)                                              
.ZPVCK5         ANOP  ,                                                         
.ZPVCKE         ANOP  ,                                                         
.********************************************************************           
.***AG.MF01 PROCESS MF MACRO FORMS                                              
.********************************************************************           
              ACTR  10000                                                       
.*------------------------------------------------------------------            
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL                   
&XMF          SETC  ''          INITIALIZE XVARIABLE                            
.*-------------------------------------------------------------------           
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL                   
.ZG52         ANOP  ,                                                           
&ZTLC         SETC 'S'                                                          
              AIF   ('&MF(1)' NE '&ZTLC').ZG53                                  
&XMF          SETC  'S'         SET KEYWORD                                     
              AIF   (N'&MF LE 1).ZG52A          CK NUM                          
&ZMS          SETC  '"MF='                                                      
&ZMS          SETC  '&ZMS.&MF"'                                                 
&ZMS          SETC  '&ZMS "MF"'                                                 
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                         
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG52A        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL                   
.ZG53         ANOP  ,                                                           
&ZTLC         SETC 'L'                                                          
              AIF   ('&MF(1)' NE '&ZTLC').ZG60                                  
&XMF          SETC  'L'         SET KEYWORD                                     
              AIF   (N'&MF LE 3).ZG53A          CK NUM                          
&ZMS          SETC  '"MF='                                                      
&ZMS          SETC  '&ZMS.&MF"'                                                 
&ZMS          SETC  '&ZMS "MF"'                                                 
              MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'                        
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG53A        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KKCTL08 -MF(L) SPECIAL CHECK                                             
              AIF   (N'&SYSLIST NE 0).ZG53B     POSITIONALS?                    
              AIF   ('&REQTOKEN' NE '').ZG53B   KEYS?                           
              AIF   ('&DDNAME' NE '').ZG53B     KEYS?                           
              AIF   ('&FILTLIST' NE '').ZG53B   KEYS?                           
              AIF   ('&ANSAREAP' NE '').ZG53B   KEYS?                           
              AIF   ('&ANSAREAL' NE '').ZG53B   KEYS?                           
              AIF   ('&RSTOKEN' NE '').ZG53B    KEYS?                           
              AIF   ('&RETCODE' NE '').ZG53B    KEYS?                           
              AIF   ('&REASCODE' NE '').ZG53B   KEYS?                           
              AGO    .ZG53C     INVOCATION OKAY                                 
.ZG53B        ANOP  ,                                                           
&ZMS          SETC  'THE "L" FORM OF "MF"'                                      
&ZMS          SETC  '&ZMS CAN ONLY HAVE'                                        
&ZMS          SETC  '&ZMS THE "PLISTVER" KEY'                                   
              MNOTE 8,' &ZMS SPECIFIED ON THE INVOCATION.'                      
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG53C        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                           
&ZXMFCTRL     SETC  'INPUT'     SET IN/OUTPUT                                   
&XMFCTRL      SETC  '&MF(2,1)'  SET XVARIABLE                                   
              AIF   (N'&MF(2) GT 1).ZG55B       MULTI                           
&XMFCTRL      SETC  '&MF(2)'    SET XVARIABLE                                   
.ZG55B        AIF   (K'&MF(2) GT 0).ZG55C                                       
&ZXMFCTRL     SETC  ''          RESET IN/OUTPUT                                 
&ZMS          SETC  'WHEN "L" IS SPECIFIED'                                     
&ZMS          SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'                         
              MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                                
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG55C        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KCK01 NAME, OPT RQD INPUT, POS(2) -GPR NOT ALLOWED                       
              AIF   (K'&ZXMFCTRL LE 0).ZG55P    NOT I/O                         
              AIF   ('&XMFCTRL'(1,1) NE '(').ZG55P                              
&ZXMFCTRL     SETC  ''          RESET IN/OUTPUT                                 
&ZMS          SETC  '"MF='                                                      
&ZMS          SETC  '&ZMS.&MF"'                                                 
&ZMS          SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'                   
              MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 2.'                           
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG55P        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE                              
&ZXMFATTR     SETC  'INPUT'     SET IN/OUTPUT                                   
&XMFATTR      SETC  '0D'                                                        
              AIF   (K'&MF(3) LE 0).ZG58B       PARM                            
&XMFATTR      SETC  '&MF(3,1)'  SET XVARIABLE                                   
              AIF   (N'&MF(3) GT 1).ZG58B       MULTI                           
&XMFATTR      SETC  '&MF(3)'    SET XVARIABLE                                   
.ZG58B        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KCK01 VALUE, OPT INPUT, POS(3) -GPR NOT ALLOWED                          
              AIF   (K'&ZXMFATTR LE 0).ZG58P    NOT I/O                         
              AIF   ('&XMFATTR'(1,1) NE '(').ZG58P                              
&ZXMFATTR     SETC  ''          RESET IN/OUTPUT                                 
&ZMS          SETC  '"MF='                                                      
&ZMS          SETC  '&ZMS.&MF"'                                                 
&ZMS          SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'                   
              MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 3.'                           
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG58P        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KCK03 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH                         
              AIF   (K'&ZXMFATTR LE 0).ZG58S    NOT I/O                         
              AIF   (K'&XMFATTR LE 60).ZG58S    LNG OK                          
&ZXMFATTR     SETC  ''          RESET IN/OUTPUT                                 
&ZMS          SETC  '"MF='                                                      
&ZMS          SETC  '&ZMS.&MF"'                                                 
&ZMS          SETC  '&ZMS ARGUMENT 3 EXCEEDS THE MAXIMUM'                       
              MNOTE 8,' &ZMS LENGTH OF 60 CHARACTERS.'                          
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG58S        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL                   
.ZG60         ANOP  ,                                                           
&ZTLC         SETC 'E'                                                          
              AIF   ('&MF(1)' NE '&ZTLC').ZG68                                  
&XMF          SETC  'E'         SET KEYWORD                                     
              AIF   (N'&MF LE 3).ZG60A          CK NUM                          
&ZMS          SETC  '"MF='                                                      
&ZMS          SETC  '&ZMS.&MF"'                                                 
&ZMS          SETC  '&ZMS "MF"'                                                 
              MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'                        
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG60A        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                           
&ZXMFCTRL     SETC  'INPUT'     SET IN/OUTPUT                                   
&XMFCTRL      SETC  '&MF(2,1)'  SET XVARIABLE                                   
              AIF   (N'&MF(2) GT 1).ZG62B       MULTI                           
&XMFCTRL      SETC  '&MF(2)'    SET XVARIABLE                                   
.ZG62B        AIF   (K'&MF(2) GT 0).ZG62C                                       
&ZXMFCTRL     SETC  ''          RESET IN/OUTPUT                                 
&ZMS          SETC  'WHEN "E" IS SPECIFIED'                                     
&ZMS          SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'                         
              MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                                
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG62C        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KCK02 NAME, OPT RQD INPUT, POS(2) -GPR OUT OF RANGE                      
              AIF   (K'&ZXMFCTRL LE 0).ZG62R    NOT I/O                         
              AIF   ('&XMFCTRL'(1,1) NE '(').ZG62R                              
&ZCGPR        SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)                                  
              AIF   ('&ZCGPR'(1,1) NE '0').ZG62P                                
              AIF   (K'&ZCGPR GT 2).ZG62Q                                       
              AIF   ('&ZCGPR' EQ '0').ZG62Q                                     
&ZCGPR        SETC  '&ZCGPR'(2,1)                                               
              AIF   (T'&ZCGPR NE 'N').ZG62Q     INVALID REG NAME                
.ZG62P        ANOP  ,                                                           
              AIF   (T'&ZCGPR NE 'N').ZG62R     NON NUMERIC                     
              AIF   ('&ZCGPR' LT '1').ZG62Q                                     
              AIF   ('&ZCGPR' LE '12').ZG62R                                    
.ZG62Q        ANOP  ,                                                           
&ZMS          SETC  '"MF='                                                      
&ZMS          SETC  '&ZMS.&MF"'                                                 
&ZMS          SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'                   
              MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'                            
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG62R        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD                     
&XMFSCK       SETC  ''          INITIALIZE XVARIABLE                            
.ZG66A   AIF   ('&MF(3)' NE 'COMPLETE').ZG67A                                   
&XMFSCK       SETC  'COMPLETE'  SET KEYWORD                                     
.*-------------------------------------------------------------------           
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD                     
.ZG67A        AIF   (K'&XMFSCK GT 0).ZG67C      KEYWORD                         
              AIF   (K'&MF(3) LE 0).ZG67B                                       
&ZMS          SETC  '"MF='                                                      
&ZMS          SETC  '&ZMS.&MF"'                                                 
&ZMS          SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '                   
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                         
&ZMS          SETC  '&ZMS "COMPLETE".'                                          
              MNOTE 8,' &ZMS '                                                  
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG67B        ANOP  ,                                                           
&XMFSCK       SETC  'COMPLETE'  SET DEFAULT KEYWORD                             
.ZG67C        ANOP  ,                                                           
&ZXMFSCK      SETC  'INPUT'     SET IN/OUTPUT                                   
.*------------------------------------------------------------------            
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL                   
.ZG68         ANOP  ,                                                           
&ZXMF         SETC  'INPUT'     SET IN/OUTPUT                                   
              AIF   (K'&XMF GT 0).ZG68E         VALID ARG                       
              AIF   (T'&MF EQ 'O').ZG68D        OMITTED                         
&ZASYSLNDX    SETA  0                                                           
.ZG68A        ANOP  ,           POSITIONAL MACRO KEY                            
&ZASYSLNDX    SETA  &ZASYSLNDX+1                                                
              AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG68C                            
&ZTLC         SETC 'MF'                                                         
              AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG68A                   
.ZG68B        ANOP  ,                                                           
&ZXMF         SETC  ''          RESET IN/OUTPUT                                 
&ZMS          SETC  'THE "MF" KEY'                                              
&ZMS          SETC  '&ZMS MUST CONTAIN ONE'                                     
              MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                            
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
              AGO   .ZG68E                                                      
.ZG68C        ANOP  ,                                                           
&ZXMF         SETC  ''          RESET IN/OUTPUT                                 
&ZMS          SETC  '"MF='                                                      
&ZMS          SETC  '&ZMS.&MF"'                                                 
&ZMS          SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '                   
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                         
&ZMS          SETC  '&ZMS "S",'                                                 
&ZMS          SETC  '&ZMS "L",'                                                 
&ZMS          SETC  '&ZMS OR "E".'                                              
              MNOTE 8,' &ZMS '                                                  
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
              AGO   .ZG68E                                                      
.ZG68D        ANOP  ,                                                           
&XMF          SETC  'S'         SET DEFAULT KEYWORD                             
&XMFSCK       SETC  'COMPLETE'  COMPLETE CHECKING                               
.ZG68E        ANOP  ,                                                           
.********************************************************************           
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                         
.********************************************************************           
              ACTR  10000                                                       
.*-------------------------------------------------------------------           
.***AG.MF03 MF=(SLE)                                                            
              AIF   ('&XMF' EQ 'L').ZGMFX                                       
.*-------------------------------------------------------------------           
.***AG.KMEKY05 VALUE, RQD INPUT, ME KEYS -NO ARGUMENTS                          
&XREQUEST     SETC  ''          INITIALIZE XVARIABLE                            
&ZASYSLNDX    SETA  0                                                           
.ZG2A         ANOP  ,           POSITIONAL KEY SEARCH                           
&ZASYSLNDX    SETA  &ZASYSLNDX+1                NEXT POSITIONAL                 
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG2B  DONE                            
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZG2A                     
         AIF   ('&SYSLIST(&ZASYSLNDX)' NE 'OPEN').ZG2A                          
&ZCSYSLIST(&ZASYSLNDX) SETC 'NONXKEY'           KEY IS NON-XKEY                 
&ZXREQUEST    SETC  'INPUT'     SET IN/OUTPUT                                   
&XREQUEST     SETC  'OPEN'      SET XVARIABLE                                   
&ZXOPEN       SETC  'INPUT'     SET IN/OUTPUT                                   
&XOPEN        SETC  'OPEN'      SET XVARIABLE PARM                              
.ZG2B         ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KMEKY06 VALUE, RQD INPUT, ME KEYS -NO ARGUMENTS                          
&ZASYSLNDX    SETA  0                                                           
.ZG23A        ANOP  ,           POSITIONAL KEY SEARCH                           
&ZASYSLNDX    SETA  &ZASYSLNDX+1                NEXT POSITIONAL                 
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG23C  DONE                           
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZG23A                    
         AIF   ('&SYSLIST(&ZASYSLNDX)' NE 'GET').ZG23A                          
&ZCSYSLIST(&ZASYSLNDX) SETC 'NONXKEY'           KEY IS NON-XKEY                 
              AIF   (K'&XREQUEST LE 0).ZG23B    VALID                           
&ZMS          SETC  '"GET'                                                      
&ZMS          SETC  '&ZMS."'                                                    
&ZMS          SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'                       
&ZMS          SETC  '&ZMS "&XREQUEST"'                                          
              MNOTE 8,' &ZMS KEY.'                                              
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
              AGO   .ZG23C                                                      
.*                                                                              
.ZG23B        ANOP  ,                                                           
&ZXREQUEST    SETC  'INPUT'     SET IN/OUTPUT                                   
&XREQUEST     SETC  'GET'       SET XVARIABLE                                   
&ZXGET        SETC  'INPUT'     SET IN/OUTPUT                                   
&XGET         SETC  'GET'       SET XVARIABLE PARM                              
.ZG23C        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KMEKY06 VALUE, RQD INPUT, ME KEYS -NO ARGUMENTS                          
&ZASYSLNDX    SETA  0                                                           
.ZG36A        ANOP  ,           POSITIONAL KEY SEARCH                           
&ZASYSLNDX    SETA  &ZASYSLNDX+1                NEXT POSITIONAL                 
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG36C  DONE                           
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZG36A                    
         AIF   ('&SYSLIST(&ZASYSLNDX)' NE 'CLOSE').ZG36A                        
&ZCSYSLIST(&ZASYSLNDX) SETC 'NONXKEY'           KEY IS NON-XKEY                 
              AIF   (K'&XREQUEST LE 0).ZG36B    VALID                           
&ZMS          SETC  '"CLOSE'                                                    
&ZMS          SETC  '&ZMS."'                                                    
&ZMS          SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'                       
&ZMS          SETC  '&ZMS "&XREQUEST"'                                          
              MNOTE 8,' &ZMS KEY.'                                              
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
              AGO   .ZG36C                                                      
.*                                                                              
.ZG36B        ANOP  ,                                                           
&ZXREQUEST    SETC  'INPUT'     SET IN/OUTPUT                                   
&XREQUEST     SETC  'CLOSE'     SET XVARIABLE                                   
&ZXCLOSE      SETC  'INPUT'     SET IN/OUTPUT                                   
&XCLOSE       SETC  'CLOSE'     SET XVARIABLE PARM                              
.ZG36C        ANOP  ,                                                           
.*------------------------------------------------------------------            
.***AG.KME4Y09 VALUE, RQD INPUT, ME KEYS -CHECK IF KEY ENTERED                  
              AIF   (K'&XREQUEST GT 0).ZG40B                                    
&ZXREQUEST    SETC  ''          RESET IN/OUTPUT                                 
&ZXOPEN       SETC  ''          RESET IN/OUTPUT                                 
&XREQUEST     SETC  ''          ENSURE NULL                                     
&XOPEN        SETC  ''          ENSURE NULL                                     
&ZMS          SETC  'ONE OF THE FOLLOWING'                                      
&ZMS          SETC  '&ZMS MUTUALLY EXCLUSIVE KEY(S) IS'                         
&ZMS          SETC  '&ZMS REQUIRED:'                                            
&ZMS          SETC  '&ZMS "OPEN",'              VALID ME KEY                    
&ZMS          SETC  '&ZMS "GET",'               VALID ME KEY                    
&ZMS          SETC  '&ZMS OR "CLOSE".'          VALID ME KEY                    
              MNOTE 8,' &ZMS '                                                  
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG40B        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KMEKY13 VALUE, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES                  
         AIF   ('&XOPEN'  NE 'OPEN').ZG23ZY                                     
.ZG2ZY  AIF    ('&XREQUEST' NE 'OPEN').ZG23ZY                                   
.*-------------------------------------------------------------------           
.***AG.KMEKY14 VALUE, RQD INPUT, ME KEYS -DISALLOWED KEYS                       
&ZCVAL        SETC ''           ERROR KEY FIELD                                 
.ZG2I0        AIF   (K'&RSTOKEN LE 0).ZG2I1                                     
&ZCVAL        SETC '&ZCVAL RSTOKEN'             DISALLOWED KEY                  
.ZG2I1        AIF   (K'&ZCVAL LE 0).ZG2J        KEY                             
&ZCVAL        SETC '&ZCVAL'(2,K'&ZCVAL-1)                                       
&ZMS          SETC  '"OPEN'                                                     
&ZMS          SETC  '&ZMS."'                                                    
&ZMS          SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'                        
              MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'                        
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG2J         ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KMEKY05 VALUE, RQD INPUT, ME KEYS -NO ARGUMENTS                          
&XPROCESSFUNCTION               SETC  ''        INITIALIZE XVARIABLE            
&ZASYSLNDX    SETA  0                                                           
.ZG4A         ANOP  ,           POSITIONAL KEY SEARCH                           
&ZASYSLNDX    SETA  &ZASYSLNDX+1                NEXT POSITIONAL                 
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG4B  DONE                            
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZG4A                     
         AIF   ('&SYSLIST(&ZASYSLNDX)' NE 'ASSEMBLE').ZG4A                      
&ZCSYSLIST(&ZASYSLNDX) SETC 'NONXKEY'           KEY IS NON-XKEY                 
&ZXPROCESSFUNCTION              SETC  'INPUT'   SET IN/OUTPUT                   
&XPROCESSFUNCTION               SETC  'ASSEMBLE'  SET XVARIABLE                 
&ZXASSEMBLE   SETC  'INPUT'     SET IN/OUTPUT                                   
&XASSEMBLE    SETC  'ASSEMBLE'  SET XVARIABLE PARM                              
.ZG4B         ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KMEKY06 VALUE, RQD INPUT, ME KEYS -NO ARGUMENTS                          
&ZASYSLNDX    SETA  0                                                           
.ZG5A         ANOP  ,           POSITIONAL KEY SEARCH                           
&ZASYSLNDX    SETA  &ZASYSLNDX+1                NEXT POSITIONAL                 
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG5C  DONE                            
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZG5A                     
         AIF   ('&SYSLIST(&ZASYSLNDX)' NE 'CONVERT').ZG5A                       
&ZCSYSLIST(&ZASYSLNDX) SETC 'NONXKEY'           KEY IS NON-XKEY                 
              AIF   (K'&XPROCESSFUNCTION LE 0).ZG5B  VALID                      
&ZMS          SETC  '"CONVERT'                                                  
&ZMS          SETC  '&ZMS."'                                                    
&ZMS          SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'                       
&ZMS          SETC  '&ZMS "&XPROCESSFUNCTION"'                                  
              MNOTE 8,' &ZMS KEY.'                                              
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
              AGO   .ZG5C                                                       
.*                                                                              
.ZG5B         ANOP  ,                                                           
&ZXPROCESSFUNCTION              SETC  'INPUT'   SET IN/OUTPUT                   
&XPROCESSFUNCTION               SETC  'CONVERT'  SET XVARIABLE                  
&ZXCONVERT    SETC  'INPUT'     SET IN/OUTPUT                                   
&XCONVERT     SETC  'CONVERT'   SET XVARIABLE PARM                              
.ZG5C         ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KMEKY06 VALUE, RQD INPUT, ME KEYS -NO ARGUMENTS                          
&ZASYSLNDX    SETA  0                                                           
.ZG6A         ANOP  ,           POSITIONAL KEY SEARCH                           
&ZASYSLNDX    SETA  &ZASYSLNDX+1                NEXT POSITIONAL                 
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG6C  DONE                            
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZG6A                     
         AIF   ('&SYSLIST(&ZASYSLNDX)' NE 'NONE').ZG6A                          
&ZCSYSLIST(&ZASYSLNDX) SETC 'NONXKEY'           KEY IS NON-XKEY                 
              AIF   (K'&XPROCESSFUNCTION LE 0).ZG6B  VALID                      
&ZMS          SETC  '"NONE'                                                     
&ZMS          SETC  '&ZMS."'                                                    
&ZMS          SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'                       
&ZMS          SETC  '&ZMS "&XPROCESSFUNCTION"'                                  
              MNOTE 8,' &ZMS KEY.'                                              
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
              AGO   .ZG6C                                                       
.*                                                                              
.ZG6B         ANOP  ,                                                           
&ZXPROCESSFUNCTION              SETC  'INPUT'   SET IN/OUTPUT                   
&XPROCESSFUNCTION               SETC  'NONE'    SET XVARIABLE                   
&ZXNONE       SETC  'INPUT'     SET IN/OUTPUT                                   
&XNONE        SETC  'NONE'      SET XVARIABLE PARM                              
.ZG6C         ANOP  ,                                                           
.*------------------------------------------------------------------            
.***AG.KME4Y09 VALUE, RQD INPUT, ME KEYS -CHECK IF KEY ENTERED                  
              AIF   (K'&XPROCESSFUNCTION GT 0).ZG7B                             
&ZXPROCESSFUNCTION              SETC  ''        RESET IN/OUTPUT                 
&ZXASSEMBLE   SETC  ''          RESET IN/OUTPUT                                 
&XPROCESSFUNCTION               SETC  ''        ENSURE NULL                     
&XASSEMBLE    SETC  ''          ENSURE NULL                                     
&ZMS          SETC  'ONE OF THE FOLLOWING'                                      
&ZMS          SETC  '&ZMS MUTUALLY EXCLUSIVE KEY(S) IS'                         
&ZMS          SETC  '&ZMS REQUIRED:'                                            
&ZMS          SETC  '&ZMS "ASSEMBLE",'          VALID ME KEY                    
&ZMS          SETC  '&ZMS "CONVERT",'           VALID ME KEY                    
&ZMS          SETC  '&ZMS OR "NONE".'           VALID ME KEY                    
              MNOTE 8,' &ZMS '                                                  
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG7B         ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KMEKY13 VALUE, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES                  
         AIF   ('&XASSEMBLE'  NE 'ASSEMBLE').ZG5ZY                              
.ZG4ZY  AIF    ('&XPROCESSFUNCTION' NE 'ASSEMBLE').ZG5ZY                        
.*-------------------------------------------------------------------           
.***AG.KMEKY13 VALUE, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES                  
.ZG5ZY  AIF    ('&XPROCESSFUNCTION' NE 'CONVERT').ZG6ZY                         
.*-------------------------------------------------------------------           
.***AG.KMEKY13 VALUE, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES                  
.ZG6ZY  AIF    ('&XPROCESSFUNCTION' NE 'NONE').ZG7ZY                            
.*-------------------------------------------------------------------           
.***AG.KMEKY15 VALUE, RQD INPUT, ME KEYS -END                                   
.ZG7ZY        ANOP ,            END MUTUALLY EXCLUSIVE KEYS                     
.*----------------------------------------------------------------***           
.***AG.KXVAR05 NAME, RQD OUTPUT, KEYS -XVARIABLE KEY                            
              AIF   (N'&REQTOKEN LE 1).ZG9A     CK NUM                          
&ZMS          SETC  '"REQTOKEN='                                                
&ZMS          SETC  '&ZMS.&REQTOKEN"'                                           
&ZMS          SETC  '&ZMS "REQTOKEN"'                                           
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                         
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG9A         ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KXVAR06 NAME, RQD OUTPUT, KEYS -XVARIABLE                                
&ZXREQTOKEN   SETC  'OUTPUT'    SET IN/OUTPUT                                   
&XREQTOKEN    SETC  '&REQTOKEN(1)'              SET XVARIABLE                   
              AIF   (N'&REQTOKEN GT 1).ZG9B     MULTI                           
&XREQTOKEN    SETC  '&REQTOKEN'                 SET XVARIABLE                   
.ZG9B         AIF   (K'&REQTOKEN(1) GT 0).ZG9C                                  
&ZXREQTOKEN   SETC  ''          RESET IN/OUTPUT                                 
&ZMS          SETC  ' '                                                         
&ZMS          SETC  '&ZMS "REQTOKEN" KEY AND ITS'                               
              MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                            
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG9C         ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KCK02 NAME, RQD OUTPUT, KEYS -GPR OUT OF RANGE                           
              AIF   (K'&ZXREQTOKEN LE 0).ZG9R   NOT I/O                         
              AIF   ('&XREQTOKEN'(1,1) NE '(').ZG9R                             
&ZCGPR        SETC  '&XREQTOKEN'(2,K'&XREQTOKEN-2)                              
              AIF   ('&ZCGPR'(1,1) NE '0').ZG9P                                 
              AIF   (K'&ZCGPR GT 2).ZG9Q                                        
              AIF   ('&ZCGPR' EQ '0').ZG9Q                                      
&ZCGPR        SETC  '&ZCGPR'(2,1)                                               
              AIF   (T'&ZCGPR NE 'N').ZG9Q      INVALID REG NAME                
.ZG9P         ANOP  ,                                                           
              AIF   (T'&ZCGPR NE 'N').ZG9R      NON NUMERIC                     
              AIF   ('&ZCGPR' LT '2').ZG9Q                                      
              AIF   ('&ZCGPR' LE '12').ZG9R                                     
.ZG9Q         ANOP  ,                                                           
&ZMS          SETC  '"REQTOKEN='                                                
&ZMS          SETC  '&ZMS.&REQTOKEN"'                                           
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'                   
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                            
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG9R         ANOP  ,                                                           
.*----------------------------------------------------------------***           
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                             
              AIF   (N'&DDNAME LE 1).ZG12A      CK NUM                          
&ZMS          SETC  '"DDNAME='                                                  
&ZMS          SETC  '&ZMS.&DDNAME"'                                             
&ZMS          SETC  '&ZMS "DDNAME"'                                             
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                         
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG12A        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                                 
&ZXDDNAME     SETC  'INPUT'     SET IN/OUTPUT                                   
&XDDNAME      SETC  '&DDNAME(1)'                SET XVARIABLE                   
              AIF   (N'&DDNAME GT 1).ZG12B      MULTI                           
&XDDNAME      SETC  '&DDNAME'   SET XVARIABLE                                   
.ZG12B        AIF   (K'&DDNAME(1) GT 0).ZG12C                                   
&ZXDDNAME     SETC  ''          RESET IN/OUTPUT                                 
&ZMS          SETC  ' '                                                         
&ZMS          SETC  '&ZMS "DDNAME" KEY AND ITS'                                 
              MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                            
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG12C        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                            
              AIF   (K'&ZXDDNAME LE 0).ZG12R    NOT I/O                         
              AIF   ('&XDDNAME'(1,1) NE '(').ZG12R                              
&ZCGPR        SETC  '&XDDNAME'(2,K'&XDDNAME-2)                                  
              AIF   ('&ZCGPR'(1,1) NE '0').ZG12P                                
              AIF   (K'&ZCGPR GT 2).ZG12Q                                       
              AIF   ('&ZCGPR' EQ '0').ZG12Q                                     
&ZCGPR        SETC  '&ZCGPR'(2,1)                                               
              AIF   (T'&ZCGPR NE 'N').ZG12Q     INVALID REG NAME                
.ZG12P        ANOP  ,                                                           
              AIF   (T'&ZCGPR NE 'N').ZG12R     NON NUMERIC                     
              AIF   ('&ZCGPR' LT '2').ZG12Q                                     
              AIF   ('&ZCGPR' LE '12').ZG12R                                    
.ZG12Q        ANOP  ,                                                           
&ZMS          SETC  '"DDNAME='                                                  
&ZMS          SETC  '&ZMS.&DDNAME"'                                             
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'                   
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                            
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG12R        ANOP  ,                                                           
.*----------------------------------------------------------------***           
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                             
              AIF   (N'&FILTLIST LE 1).ZG15A    CK NUM                          
&ZMS          SETC  '"FILTLIST='                                                
&ZMS          SETC  '&ZMS.&FILTLIST"'                                           
&ZMS          SETC  '&ZMS "FILTLIST"'                                           
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                         
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG15A        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                                 
&ZXFILTLIST   SETC  'INPUT'     SET IN/OUTPUT                                   
&XFILTLIST    SETC  '&FILTLIST(1)'              SET XVARIABLE                   
              AIF   (N'&FILTLIST GT 1).ZG15B    MULTI                           
&XFILTLIST    SETC  '&FILTLIST'                 SET XVARIABLE                   
.ZG15B        AIF   (K'&FILTLIST(1) GT 0).ZG15C                                 
&ZXFILTLIST   SETC  ''          RESET IN/OUTPUT                                 
&ZMS          SETC  ' '                                                         
&ZMS          SETC  '&ZMS "FILTLIST" KEY AND ITS'                               
              MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                            
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG15C        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                            
              AIF   (K'&ZXFILTLIST LE 0).ZG15R  NOT I/O                         
              AIF   ('&XFILTLIST'(1,1) NE '(').ZG15R                            
&ZCGPR        SETC  '&XFILTLIST'(2,K'&XFILTLIST-2)                              
              AIF   ('&ZCGPR'(1,1) NE '0').ZG15P                                
              AIF   (K'&ZCGPR GT 2).ZG15Q                                       
              AIF   ('&ZCGPR' EQ '0').ZG15Q                                     
&ZCGPR        SETC  '&ZCGPR'(2,1)                                               
              AIF   (T'&ZCGPR NE 'N').ZG15Q     INVALID REG NAME                
.ZG15P        ANOP  ,                                                           
              AIF   (T'&ZCGPR NE 'N').ZG15R     NON NUMERIC                     
              AIF   ('&ZCGPR' LT '2').ZG15Q                                     
              AIF   ('&ZCGPR' LE '12').ZG15R                                    
.ZG15Q        ANOP  ,                                                           
&ZMS          SETC  '"FILTLIST='                                                
&ZMS          SETC  '&ZMS.&FILTLIST"'                                           
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'                   
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                            
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG15R        ANOP  ,                                                           
.*----------------------------------------------------------------***           
.***AG.KXVAR05 NAME, RQD INOUT, KEYS -XVARIABLE KEY                             
              AIF   (N'&ANSAREAP LE 1).ZG18A    CK NUM                          
&ZMS          SETC  '"ANSAREAP='                                                
&ZMS          SETC  '&ZMS.&ANSAREAP"'                                           
&ZMS          SETC  '&ZMS "ANSAREAP"'                                           
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                         
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG18A        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KXVAR06 NAME, RQD INOUT, KEYS -XVARIABLE                                 
&ZXANSAREAP   SETC  'INOUT'     SET IN/OUTPUT                                   
&XANSAREAP    SETC  '&ANSAREAP(1)'              SET XVARIABLE                   
              AIF   (N'&ANSAREAP GT 1).ZG18B    MULTI                           
&XANSAREAP    SETC  '&ANSAREAP'                 SET XVARIABLE                   
.ZG18B        AIF   (K'&ANSAREAP(1) GT 0).ZG18C                                 
&ZXANSAREAP   SETC  ''          RESET IN/OUTPUT                                 
&ZMS          SETC  ' '                                                         
&ZMS          SETC  '&ZMS "ANSAREAP" KEY AND ITS'                               
              MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                            
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG18C        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KCK02 NAME, RQD INOUT, KEYS -GPR OUT OF RANGE                            
              AIF   (K'&ZXANSAREAP LE 0).ZG18R  NOT I/O                         
              AIF   ('&XANSAREAP'(1,1) NE '(').ZG18R                            
&ZCGPR        SETC  '&XANSAREAP'(2,K'&XANSAREAP-2)                              
              AIF   ('&ZCGPR'(1,1) NE '0').ZG18P                                
              AIF   (K'&ZCGPR GT 2).ZG18Q                                       
              AIF   ('&ZCGPR' EQ '0').ZG18Q                                     
&ZCGPR        SETC  '&ZCGPR'(2,1)                                               
              AIF   (T'&ZCGPR NE 'N').ZG18Q     INVALID REG NAME                
.ZG18P        ANOP  ,                                                           
              AIF   (T'&ZCGPR NE 'N').ZG18R     NON NUMERIC                     
              AIF   ('&ZCGPR' LT '2').ZG18Q                                     
              AIF   ('&ZCGPR' LE '12').ZG18R                                    
.ZG18Q        ANOP  ,                                                           
&ZMS          SETC  '"ANSAREAP='                                                
&ZMS          SETC  '&ZMS.&ANSAREAP"'                                           
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'                   
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                            
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG18R        ANOP  ,                                                           
.*----------------------------------------------------------------***           
.***AG.KXVAR05 NAME, RQD INOUT, KEYS -XVARIABLE KEY                             
              AIF   (N'&ANSAREAL LE 1).ZG21A    CK NUM                          
&ZMS          SETC  '"ANSAREAL='                                                
&ZMS          SETC  '&ZMS.&ANSAREAL"'                                           
&ZMS          SETC  '&ZMS "ANSAREAL"'                                           
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                         
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG21A        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KXVAR06 NAME, RQD INOUT, KEYS -XVARIABLE                                 
&ZXANSAREAL   SETC  'INOUT'     SET IN/OUTPUT                                   
&XANSAREAL    SETC  '&ANSAREAL(1)'              SET XVARIABLE                   
              AIF   (N'&ANSAREAL GT 1).ZG21B    MULTI                           
&XANSAREAL    SETC  '&ANSAREAL'                 SET XVARIABLE                   
.ZG21B        AIF   (K'&ANSAREAL(1) GT 0).ZG21C                                 
&ZXANSAREAL   SETC  ''          RESET IN/OUTPUT                                 
&ZMS          SETC  ' '                                                         
&ZMS          SETC  '&ZMS "ANSAREAL" KEY AND ITS'                               
              MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                            
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG21C        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KCK02 NAME, RQD INOUT, KEYS -GPR OUT OF RANGE                            
              AIF   (K'&ZXANSAREAL LE 0).ZG21R  NOT I/O                         
              AIF   ('&XANSAREAL'(1,1) NE '(').ZG21R                            
&ZCGPR        SETC  '&XANSAREAL'(2,K'&XANSAREAL-2)                              
              AIF   ('&ZCGPR'(1,1) NE '0').ZG21P                                
              AIF   (K'&ZCGPR GT 2).ZG21Q                                       
              AIF   ('&ZCGPR' EQ '0').ZG21Q                                     
&ZCGPR        SETC  '&ZCGPR'(2,1)                                               
              AIF   (T'&ZCGPR NE 'N').ZG21Q     INVALID REG NAME                
.ZG21P        ANOP  ,                                                           
              AIF   (T'&ZCGPR NE 'N').ZG21R     NON NUMERIC                     
              AIF   ('&ZCGPR' LT '2').ZG21Q                                     
              AIF   ('&ZCGPR' LE '12').ZG21R                                    
.ZG21Q        ANOP  ,                                                           
&ZMS          SETC  '"ANSAREAL='                                                
&ZMS          SETC  '&ZMS.&ANSAREAL"'                                           
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'                   
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                            
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG21R        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KMEKY13 VALUE, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES                  
.ZG23ZY  AIF    ('&XREQUEST' NE 'GET').ZG36ZY                                   
.*-------------------------------------------------------------------           
.***AG.KMEKY14 VALUE, RQD INPUT, ME KEYS -DISALLOWED KEYS                       
&ZCVAL        SETC ''           ERROR KEY FIELD                                 
.ZG23I0       AIF   (K'&XASSEMBLE LE 0).ZG23I1                                  
&ZCVAL        SETC '&ZCVAL XASSEMBLE'           DISALLOWED KEY                  
.ZG23I1       AIF   (K'&XCONVERT LE 0).ZG23I2                                   
&ZCVAL        SETC '&ZCVAL XCONVERT'            DISALLOWED KEY                  
.ZG23I2       AIF   (K'&XNONE LE 0).ZG23I3                                      
&ZCVAL        SETC '&ZCVAL XNONE'               DISALLOWED KEY                  
.ZG23I3       AIF   (K'&DDNAME LE 0).ZG23I4                                     
&ZCVAL        SETC '&ZCVAL DDNAME'              DISALLOWED KEY                  
.ZG23I4       AIF   (K'&FILTLIST LE 0).ZG23I5                                   
&ZCVAL        SETC '&ZCVAL FILTLIST'            DISALLOWED KEY                  
.ZG23I5       AIF   (K'&ZCVAL LE 0).ZG23J       KEY                             
&ZCVAL        SETC '&ZCVAL'(2,K'&ZCVAL-1)                                       
&ZMS          SETC  '"GET'                                                      
&ZMS          SETC  '&ZMS."'                                                    
&ZMS          SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'                        
              MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'                        
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG23J        ANOP  ,                                                           
.*----------------------------------------------------------------***           
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                             
              AIF   (N'&REQTOKEN LE 1).ZG25A    CK NUM                          
&ZMS          SETC  '"REQTOKEN='                                                
&ZMS          SETC  '&ZMS.&REQTOKEN"'                                           
&ZMS          SETC  '&ZMS "REQTOKEN"'                                           
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                         
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG25A        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                                 
&ZXREQTOKEN   SETC  'INPUT'     SET IN/OUTPUT                                   
&XREQTOKEN    SETC  '&REQTOKEN(1)'              SET XVARIABLE                   
              AIF   (N'&REQTOKEN GT 1).ZG25B    MULTI                           
&XREQTOKEN    SETC  '&REQTOKEN'                 SET XVARIABLE                   
.ZG25B        AIF   (K'&REQTOKEN(1) GT 0).ZG25C                                 
&ZXREQTOKEN   SETC  ''          RESET IN/OUTPUT                                 
&ZMS          SETC  ' '                                                         
&ZMS          SETC  '&ZMS "REQTOKEN" KEY AND ITS'                               
              MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                            
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG25C        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                            
              AIF   (K'&ZXREQTOKEN LE 0).ZG25R  NOT I/O                         
              AIF   ('&XREQTOKEN'(1,1) NE '(').ZG25R                            
&ZCGPR        SETC  '&XREQTOKEN'(2,K'&XREQTOKEN-2)                              
              AIF   ('&ZCGPR'(1,1) NE '0').ZG25P                                
              AIF   (K'&ZCGPR GT 2).ZG25Q                                       
              AIF   ('&ZCGPR' EQ '0').ZG25Q                                     
&ZCGPR        SETC  '&ZCGPR'(2,1)                                               
              AIF   (T'&ZCGPR NE 'N').ZG25Q     INVALID REG NAME                
.ZG25P        ANOP  ,                                                           
              AIF   (T'&ZCGPR NE 'N').ZG25R     NON NUMERIC                     
              AIF   ('&ZCGPR' LT '2').ZG25Q                                     
              AIF   ('&ZCGPR' LE '12').ZG25R                                    
.ZG25Q        ANOP  ,                                                           
&ZMS          SETC  '"REQTOKEN='                                                
&ZMS          SETC  '&ZMS.&REQTOKEN"'                                           
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'                   
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                            
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG25R        ANOP  ,                                                           
.*----------------------------------------------------------------***           
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                             
              AIF   (N'&RSTOKEN LE 1).ZG28A     CK NUM                          
&ZMS          SETC  '"RSTOKEN='                                                 
&ZMS          SETC  '&ZMS.&RSTOKEN"'                                            
&ZMS          SETC  '&ZMS "RSTOKEN"'                                            
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                         
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG28A        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                                 
&ZXRSTOKEN    SETC  'INPUT'     SET IN/OUTPUT                                   
&XRSTOKEN     SETC  '&RSTOKEN(1)'               SET XVARIABLE                   
              AIF   (N'&RSTOKEN GT 1).ZG28B     MULTI                           
&XRSTOKEN     SETC  '&RSTOKEN'  SET XVARIABLE                                   
.ZG28B        AIF   (K'&RSTOKEN(1) GT 0).ZG28C                                  
&ZXRSTOKEN    SETC  ''          RESET IN/OUTPUT                                 
&ZMS          SETC  ' '                                                         
&ZMS          SETC  '&ZMS "RSTOKEN" KEY AND ITS'                                
              MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                            
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG28C        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                            
              AIF   (K'&ZXRSTOKEN LE 0).ZG28R   NOT I/O                         
              AIF   ('&XRSTOKEN'(1,1) NE '(').ZG28R                             
&ZCGPR        SETC  '&XRSTOKEN'(2,K'&XRSTOKEN-2)                                
              AIF   ('&ZCGPR'(1,1) NE '0').ZG28P                                
              AIF   (K'&ZCGPR GT 2).ZG28Q                                       
              AIF   ('&ZCGPR' EQ '0').ZG28Q                                     
&ZCGPR        SETC  '&ZCGPR'(2,1)                                               
              AIF   (T'&ZCGPR NE 'N').ZG28Q     INVALID REG NAME                
.ZG28P        ANOP  ,                                                           
              AIF   (T'&ZCGPR NE 'N').ZG28R     NON NUMERIC                     
              AIF   ('&ZCGPR' LT '2').ZG28Q                                     
              AIF   ('&ZCGPR' LE '12').ZG28R                                    
.ZG28Q        ANOP  ,                                                           
&ZMS          SETC  '"RSTOKEN='                                                 
&ZMS          SETC  '&ZMS.&RSTOKEN"'                                            
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'                   
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                            
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG28R        ANOP  ,                                                           
.*----------------------------------------------------------------***           
.***AG.KXVAR05 NAME, RQD INOUT, KEYS -XVARIABLE KEY                             
              AIF   (N'&ANSAREAP LE 1).ZG31A    CK NUM                          
&ZMS          SETC  '"ANSAREAP='                                                
&ZMS          SETC  '&ZMS.&ANSAREAP"'                                           
&ZMS          SETC  '&ZMS "ANSAREAP"'                                           
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                         
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG31A        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KXVAR06 NAME, RQD INOUT, KEYS -XVARIABLE                                 
&ZXANSAREAP   SETC  'INOUT'     SET IN/OUTPUT                                   
&XANSAREAP    SETC  '&ANSAREAP(1)'              SET XVARIABLE                   
              AIF   (N'&ANSAREAP GT 1).ZG31B    MULTI                           
&XANSAREAP    SETC  '&ANSAREAP'                 SET XVARIABLE                   
.ZG31B        AIF   (K'&ANSAREAP(1) GT 0).ZG31C                                 
&ZXANSAREAP   SETC  ''          RESET IN/OUTPUT                                 
&ZMS          SETC  ' '                                                         
&ZMS          SETC  '&ZMS "ANSAREAP" KEY AND ITS'                               
              MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                            
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG31C        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KCK02 NAME, RQD INOUT, KEYS -GPR OUT OF RANGE                            
              AIF   (K'&ZXANSAREAP LE 0).ZG31R  NOT I/O                         
              AIF   ('&XANSAREAP'(1,1) NE '(').ZG31R                            
&ZCGPR        SETC  '&XANSAREAP'(2,K'&XANSAREAP-2)                              
              AIF   ('&ZCGPR'(1,1) NE '0').ZG31P                                
              AIF   (K'&ZCGPR GT 2).ZG31Q                                       
              AIF   ('&ZCGPR' EQ '0').ZG31Q                                     
&ZCGPR        SETC  '&ZCGPR'(2,1)                                               
              AIF   (T'&ZCGPR NE 'N').ZG31Q     INVALID REG NAME                
.ZG31P        ANOP  ,                                                           
              AIF   (T'&ZCGPR NE 'N').ZG31R     NON NUMERIC                     
              AIF   ('&ZCGPR' LT '2').ZG31Q                                     
              AIF   ('&ZCGPR' LE '12').ZG31R                                    
.ZG31Q        ANOP  ,                                                           
&ZMS          SETC  '"ANSAREAP='                                                
&ZMS          SETC  '&ZMS.&ANSAREAP"'                                           
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'                   
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                            
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG31R        ANOP  ,                                                           
.*----------------------------------------------------------------***           
.***AG.KXVAR05 NAME, RQD INOUT, KEYS -XVARIABLE KEY                             
              AIF   (N'&ANSAREAL LE 1).ZG34A    CK NUM                          
&ZMS          SETC  '"ANSAREAL='                                                
&ZMS          SETC  '&ZMS.&ANSAREAL"'                                           
&ZMS          SETC  '&ZMS "ANSAREAL"'                                           
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                         
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG34A        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KXVAR06 NAME, RQD INOUT, KEYS -XVARIABLE                                 
&ZXANSAREAL   SETC  'INOUT'     SET IN/OUTPUT                                   
&XANSAREAL    SETC  '&ANSAREAL(1)'              SET XVARIABLE                   
              AIF   (N'&ANSAREAL GT 1).ZG34B    MULTI                           
&XANSAREAL    SETC  '&ANSAREAL'                 SET XVARIABLE                   
.ZG34B        AIF   (K'&ANSAREAL(1) GT 0).ZG34C                                 
&ZXANSAREAL   SETC  ''          RESET IN/OUTPUT                                 
&ZMS          SETC  ' '                                                         
&ZMS          SETC  '&ZMS "ANSAREAL" KEY AND ITS'                               
              MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                            
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG34C        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KCK02 NAME, RQD INOUT, KEYS -GPR OUT OF RANGE                            
              AIF   (K'&ZXANSAREAL LE 0).ZG34R  NOT I/O                         
              AIF   ('&XANSAREAL'(1,1) NE '(').ZG34R                            
&ZCGPR        SETC  '&XANSAREAL'(2,K'&XANSAREAL-2)                              
              AIF   ('&ZCGPR'(1,1) NE '0').ZG34P                                
              AIF   (K'&ZCGPR GT 2).ZG34Q                                       
              AIF   ('&ZCGPR' EQ '0').ZG34Q                                     
&ZCGPR        SETC  '&ZCGPR'(2,1)                                               
              AIF   (T'&ZCGPR NE 'N').ZG34Q     INVALID REG NAME                
.ZG34P        ANOP  ,                                                           
              AIF   (T'&ZCGPR NE 'N').ZG34R     NON NUMERIC                     
              AIF   ('&ZCGPR' LT '2').ZG34Q                                     
              AIF   ('&ZCGPR' LE '12').ZG34R                                    
.ZG34Q        ANOP  ,                                                           
&ZMS          SETC  '"ANSAREAL='                                                
&ZMS          SETC  '&ZMS.&ANSAREAL"'                                           
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'                   
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                            
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG34R        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KMEKY13 VALUE, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES                  
.ZG36ZY  AIF    ('&XREQUEST' NE 'CLOSE').ZG40ZY                                 
.*-------------------------------------------------------------------           
.***AG.KMEKY14 VALUE, RQD INPUT, ME KEYS -DISALLOWED KEYS                       
&ZCVAL        SETC ''           ERROR KEY FIELD                                 
.ZG36I0       AIF   (K'&XASSEMBLE LE 0).ZG36I1                                  
&ZCVAL        SETC '&ZCVAL XASSEMBLE'           DISALLOWED KEY                  
.ZG36I1       AIF   (K'&XCONVERT LE 0).ZG36I2                                   
&ZCVAL        SETC '&ZCVAL XCONVERT'            DISALLOWED KEY                  
.ZG36I2       AIF   (K'&XNONE LE 0).ZG36I3                                      
&ZCVAL        SETC '&ZCVAL XNONE'               DISALLOWED KEY                  
.ZG36I3       AIF   (K'&DDNAME LE 0).ZG36I4                                     
&ZCVAL        SETC '&ZCVAL DDNAME'              DISALLOWED KEY                  
.ZG36I4       AIF   (K'&FILTLIST LE 0).ZG36I5                                   
&ZCVAL        SETC '&ZCVAL FILTLIST'            DISALLOWED KEY                  
.ZG36I5       AIF   (K'&ANSAREAP LE 0).ZG36I6                                   
&ZCVAL        SETC '&ZCVAL ANSAREAP'            DISALLOWED KEY                  
.ZG36I6       AIF   (K'&ANSAREAL LE 0).ZG36I7                                   
&ZCVAL        SETC '&ZCVAL ANSAREAL'            DISALLOWED KEY                  
.ZG36I7       AIF   (K'&RSTOKEN LE 0).ZG36I8                                    
&ZCVAL        SETC '&ZCVAL RSTOKEN'             DISALLOWED KEY                  
.ZG36I8       AIF   (K'&ZCVAL LE 0).ZG36J       KEY                             
&ZCVAL        SETC '&ZCVAL'(2,K'&ZCVAL-1)                                       
&ZMS          SETC  '"CLOSE'                                                    
&ZMS          SETC  '&ZMS."'                                                    
&ZMS          SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'                        
              MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'                        
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG36J        ANOP  ,                                                           
.*----------------------------------------------------------------***           
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                             
              AIF   (N'&REQTOKEN LE 1).ZG38A    CK NUM                          
&ZMS          SETC  '"REQTOKEN='                                                
&ZMS          SETC  '&ZMS.&REQTOKEN"'                                           
&ZMS          SETC  '&ZMS "REQTOKEN"'                                           
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                         
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG38A        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                                 
&ZXREQTOKEN   SETC  'INPUT'     SET IN/OUTPUT                                   
&XREQTOKEN    SETC  '&REQTOKEN(1)'              SET XVARIABLE                   
              AIF   (N'&REQTOKEN GT 1).ZG38B    MULTI                           
&XREQTOKEN    SETC  '&REQTOKEN'                 SET XVARIABLE                   
.ZG38B        AIF   (K'&REQTOKEN(1) GT 0).ZG38C                                 
&ZXREQTOKEN   SETC  ''          RESET IN/OUTPUT                                 
&ZMS          SETC  ' '                                                         
&ZMS          SETC  '&ZMS "REQTOKEN" KEY AND ITS'                               
              MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                            
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG38C        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                            
              AIF   (K'&ZXREQTOKEN LE 0).ZG38R  NOT I/O                         
              AIF   ('&XREQTOKEN'(1,1) NE '(').ZG38R                            
&ZCGPR        SETC  '&XREQTOKEN'(2,K'&XREQTOKEN-2)                              
              AIF   ('&ZCGPR'(1,1) NE '0').ZG38P                                
              AIF   (K'&ZCGPR GT 2).ZG38Q                                       
              AIF   ('&ZCGPR' EQ '0').ZG38Q                                     
&ZCGPR        SETC  '&ZCGPR'(2,1)                                               
              AIF   (T'&ZCGPR NE 'N').ZG38Q     INVALID REG NAME                
.ZG38P        ANOP  ,                                                           
              AIF   (T'&ZCGPR NE 'N').ZG38R     NON NUMERIC                     
              AIF   ('&ZCGPR' LT '2').ZG38Q                                     
              AIF   ('&ZCGPR' LE '12').ZG38R                                    
.ZG38Q        ANOP  ,                                                           
&ZMS          SETC  '"REQTOKEN='                                                
&ZMS          SETC  '&ZMS.&REQTOKEN"'                                           
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'                   
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                            
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG38R        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KMEKY15 VALUE, RQD INPUT, ME KEYS -END                                   
.ZG40ZY       ANOP ,            END MUTUALLY EXCLUSIVE KEYS                     
.*----------------------------------------------------------------***           
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                            
              AIF   (N'&RETCODE LE 1).ZG42A     CK NUM                          
&ZMS          SETC  '"RETCODE='                                                 
&ZMS          SETC  '&ZMS.&RETCODE"'                                            
&ZMS          SETC  '&ZMS "RETCODE"'                                            
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                         
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG42A        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                                
              AIF   (K'&RETCODE(1) LE 0).ZG42C  NO PARM                         
&ZXRETCODE    SETC  'OUTPUT'    SET OUTPUT                                      
&XRETCODE     SETC  '&RETCODE(1)'               SET XVARIABLE                   
              AIF   (N'&RETCODE GT 1).ZG42C                                     
&XRETCODE     SETC  '&RETCODE'  SET XVARIABLE                                   
.ZG42C        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                           
              AIF   (K'&ZXRETCODE LE 0).ZG42R   NOT I/O                         
              AIF   ('&XRETCODE'(1,1) NE '(').ZG42R                             
&ZCGPR        SETC  '&XRETCODE'(2,K'&XRETCODE-2)                                
              AIF   ('&ZCGPR'(1,1) NE '0').ZG42P                                
              AIF   (K'&ZCGPR GT 2).ZG42Q                                       
              AIF   ('&ZCGPR' EQ '0').ZG42Q                                     
&ZCGPR        SETC  '&ZCGPR'(2,1)                                               
              AIF   (T'&ZCGPR NE 'N').ZG42Q     INVALID REG NAME                
.ZG42P        ANOP  ,                                                           
              AIF   (T'&ZCGPR NE 'N').ZG42R     NON NUMERIC                     
              AIF   ('&ZCGPR' LT '2').ZG42Q                                     
              AIF   ('&ZCGPR' LE '12').ZG42R                                    
.ZG42Q        ANOP  ,                                                           
&ZMS          SETC  '"RETCODE='                                                 
&ZMS          SETC  '&ZMS.&RETCODE"'                                            
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'                   
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                            
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG42R        ANOP  ,                                                           
.*----------------------------------------------------------------***           
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                            
              AIF   (N'&REASCODE LE 1).ZG45A    CK NUM                          
&ZMS          SETC  '"REASCODE='                                                
&ZMS          SETC  '&ZMS.&REASCODE"'                                           
&ZMS          SETC  '&ZMS "REASCODE"'                                           
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                         
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG45A        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                                
              AIF   (K'&REASCODE(1) LE 0).ZG45C  NO PARM                        
&ZXREASCODE   SETC  'OUTPUT'    SET OUTPUT                                      
&XREASCODE    SETC  '&REASCODE(1)'              SET XVARIABLE                   
              AIF   (N'&REASCODE GT 1).ZG45C                                    
&XREASCODE    SETC  '&REASCODE'                 SET XVARIABLE                   
.ZG45C        ANOP  ,                                                           
.*-------------------------------------------------------------------           
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                           
              AIF   (K'&ZXREASCODE LE 0).ZG45R  NOT I/O                         
              AIF   ('&XREASCODE'(1,1) NE '(').ZG45R                            
&ZCGPR        SETC  '&XREASCODE'(2,K'&XREASCODE-2)                              
              AIF   ('&ZCGPR'(1,1) NE '0').ZG45P                                
              AIF   (K'&ZCGPR GT 2).ZG45Q                                       
              AIF   ('&ZCGPR' EQ '0').ZG45Q                                     
&ZCGPR        SETC  '&ZCGPR'(2,1)                                               
              AIF   (T'&ZCGPR NE 'N').ZG45Q     INVALID REG NAME                
.ZG45P        ANOP  ,                                                           
              AIF   (T'&ZCGPR NE 'N').ZG45R     NON NUMERIC                     
              AIF   ('&ZCGPR' LT '2').ZG45Q                                     
              AIF   ('&ZCGPR' LE '12').ZG45R                                    
.ZG45Q        ANOP  ,                                                           
&ZMS          SETC  '"REASCODE='                                                
&ZMS          SETC  '&ZMS.&REASCODE"'                                           
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'                   
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                            
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZG45R        ANOP  ,                                                           
.******************************************************************             
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                                
.******************************************************************             
              ACTR  10000                                                       
.*-------------------------------------------------------------------           
.***AH.P03 EXTRA POSITIONALS AMONG NON-X KEYS                                   
&ZCVAL        SETC  ''          ERROR FIELD                                     
&ZAWRK        SETA  0           POSITIONAL COUNTER                              
&ZASYSLNDX    SETA  0           NON-X KEY COUNTER                               
.ZGLIST2      ANOP  ,                                                           
&ZASYSLNDX    SETA  &ZASYSLNDX+1                NEXT NON-X KEY                  
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZGLIST3  DONE                         
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZGLIST2                  
&ZAWRK        SETA  &ZAWRK+1    NEXT POSITIONAL                                 
              AIF   (&ZAWRK LE 0).ZGLIST2                                       
&ZCVAL        SETC '&ZCVAL,&SYSLIST(&ZASYSLNDX)'  EXTRA                         
              AGO   .ZGLIST2                                                    
.*                                                                              
.ZGLIST3  AIF  (K'&ZCVAL LE 0).ZGLISTX                                          
&ZCVAL        SETC '&ZCVAL'(2,K'&ZCVAL-1)       STRIP COMMA                     
&ZMS          SETC  'POSITIONAL ARGUMENT(S),'                                   
&ZMS          SETC  '&ZMS "&ZCVAL"'                                             
&ZMS          SETC  '&ZMS CANNOT BE USED.'                                      
&ZMS          SETC  '&ZMS NO POSITIONAL ARGUMENTS'                              
              MNOTE 8,' &ZMS ARE ALLOWED.'                                      
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE                     
.ZGLISTX      ANOP  ,                                                           
&ZASYSLNDX    SETA  0                                                           
.*-------------------------------------------------------------------           
.***AG.MF04 MF=(SLE)                                                            
.ZGMFX        ANOP  ,           END OF FULL SYNTAX CHECK                        
.*******************************************************************            
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                               
.*******************************************************************            
              AIF   (&ZMACRET NE 0).ZLX2        ERROR DETECTED                  
.*******************************************************************            
.***AE.01  START OF GRBSMFR MACRO CODE                                          
.*******************************************************************            
              LCLC  &M0M0001                 NAME                               
&M0M0001      SETC  '&XLABEL'                SET NAME                           
              AIF   (K'&XLABEL NE 0).XLAB2                                      
&M0M0001      SETC  'M00M&SYSNDX'            DEFAULT NAME                       
.*                                                                              
.XLAB2        ANOP  ,                                                           
              AIF   ('&XMF' EQ 'L').XLAB3                                       
&M0M0001 DS    0H                             GRBSMFR-0                         
.XLAB3        ANOP  ,                                                           
.*******************************************************************            
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                                      
.*******************************************************************            
              PUSH  PRINT                                                       
              AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON                  
              PRINT OFF         ++ PR01                                         
              AGO   .ZPRNTXX                                                    
.ZPRINTX      PRINT ON                                                          
.ZPRNTXX      ANOP  ,                                                           
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*          
         GBLC  &SYSAM64                                                         
                                                                                
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*          
.********************************************************************           
.***AL.L01 INTERNAL ARRAY TO PRODUCE FORMATTED CODE                             
.********************************************************************           
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX               
                      LCLA  &ZOPN1         INVOCATION INDEX                     
                      LCLC  &ZOPL(4095)    LABEL                                
                      LCLC  &ZOPO(4095)    OPERATION                            
                      LCLC  &ZOPV(4095)    VALUE                                
                      LCLC  &ZOPD(4095)    DESCRIPTION                          
.*                                                                              
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE             
.******************************************************************             
.***AL.L10 GRBSMFR FMT=LIST MF=S!L PARAMETERS                                   
.******************************************************************             
                      AIF   ('&XMF' EQ 'L').ZLMFSL2                             
                      AIF   ('&XMF' NE 'S').ZLMFSLX                             
&XMFCTRL              SETC  '#Z'.'&SYSNDX'.'A'                                  
&XMFATTR              SETC  '0D'                                                
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
                      AIF   (&SYSALVL NE 0).ZALVL6A                             
&ZOPO(&ZOPN)          SETC  'B'                                                 
&ZOPV(&ZOPN)          SETC  '&XMFCTRL.S'                                        
                      AGO   .ZALVL6B                                            
.ZALVL6A              ANOP                                                      
&ZOPO(&ZOPN)          SETC  'CNOP'                                              
&ZOPV(&ZOPN)          SETC  '4,8'                                               
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'BRAS'                                              
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL.S'                                      
.ZALVL6B              ANOP                                                      
&ZOPD(&ZOPN)          SETC  '++ GRBSMFR ARG PARMS'                              
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'SPACE'                                             
&ZOPV(&ZOPN)          SETC  '1'                                                 
&ZOPD(&ZOPN)          SETC  ' '                                                 
.*                                                                              
.ZLMFSL2              ANOP  ,                                                   
.*-------------------------------------------------------------------           
.***AM.L00  GRBSMFR FMT=LIST name                                               
                      AIF   ('&XMF' NE 'L').ZLMFSL2M                            
&ZOPN                 SETA &ZOPN+1                                              
&ZOPL(&ZOPN)          SETC '&M0M0001'                                           
&ZOPO(&ZOPN)          SETC 'EQU'                                                
&ZOPV(&ZOPN)          SETC '&XMFCTRL'                                           
&ZOPD(&ZOPN)          SETC '++ GRBSMFR NAME'                                    
.ZLMFSL2M             ANOP  ,                                                   
.*-------------------------------------------------------------------           
.***AM.L01  GRBSMFR FMT=LIST PARAMETERS                                         
&ZOPN                 SETA &ZOPN+1                                              
&ZOPL(&ZOPN)          SETC '&XMFCTRL'                                           
&ZOPO(&ZOPN)          SETC 'DS'                                                 
&ZOPV(&ZOPN)          SETC '&XMFATTR'                                           
&ZOPD(&ZOPN)          SETC '++ GRBSMFR PARM LIST'                               
.*-------------------------------------------------------------------           
.***AM.L09  XREQUEST CL8                                                        
&ZOPN                 SETA &ZOPN+1                                              
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XREQUEST'                                 
&ZOPO(&ZOPN)          SETC 'DS'                                                 
&ZOPV(&ZOPN)          SETC 'CL8'                                                
&ZOPD(&ZOPN)          SETC '++ &ZXREQUEST '                                     
.*-------------------------------------------------------------------           
.***AM.L09  XPROCESSFUNCTION CL8                                                
&ZOPN                 SETA &ZOPN+1                                              
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPROCESSFUNCTION'                         
&ZOPO(&ZOPN)          SETC 'DS'                                                 
&ZOPV(&ZOPN)          SETC 'CL8'                                                
&ZOPD(&ZOPN)          SETC '++ &ZXPROCESSFUNCTION '                             
.*-------------------------------------------------------------------           
.***AM.L09 ADDR64 XREQTOKEN AD                                                  
&ZOPN                 SETA &ZOPN+1                                              
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XREQTOKEN_ADDR64'                         
&ZOPO(&ZOPN)          SETC 'DS'                                                 
&ZOPV(&ZOPN)          SETC 'AD'                                                 
&ZOPD(&ZOPN)          SETC '++ &ZXREQTOKEN ADDR64'                              
.*-------------------------------------------------------------------           
.***AM.L09 ADDR64 XDDNAME AD                                                    
&ZOPN                 SETA &ZOPN+1                                              
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XDDNAME_ADDR64'                           
&ZOPO(&ZOPN)          SETC 'DS'                                                 
&ZOPV(&ZOPN)          SETC 'AD'                                                 
&ZOPD(&ZOPN)          SETC '++ &ZXDDNAME ADDR64'                                
.*-------------------------------------------------------------------           
.***AM.L09 ADDR64 XFILTLIST AD                                                  
&ZOPN                 SETA &ZOPN+1                                              
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XFILTLIST_ADDR64'                         
&ZOPO(&ZOPN)          SETC 'DS'                                                 
&ZOPV(&ZOPN)          SETC 'AD'                                                 
&ZOPD(&ZOPN)          SETC '++ &ZXFILTLIST ADDR64'                              
.*-------------------------------------------------------------------           
.***AM.L09 ADDR64 XRSTOKEN AD                                                   
&ZOPN                 SETA &ZOPN+1                                              
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSTOKEN_ADDR64'                          
&ZOPO(&ZOPN)          SETC 'DS'                                                 
&ZOPV(&ZOPN)          SETC 'AD'                                                 
&ZOPD(&ZOPN)          SETC '++ &ZXRSTOKEN ADDR64'                               
.*-------------------------------------------------------------------           
.***AM.L09 ADDR64 XANSAREAP AD                                                  
&ZOPN                 SETA &ZOPN+1                                              
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XANSAREAP_ADDR64'                         
&ZOPO(&ZOPN)          SETC 'DS'                                                 
&ZOPV(&ZOPN)          SETC 'AD'                                                 
&ZOPD(&ZOPN)          SETC '++ &ZXANSAREAP ADDR64'                              
.*-------------------------------------------------------------------           
.***AM.L09 ADDR64 XANSAREAL AD                                                  
&ZOPN                 SETA &ZOPN+1                                              
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XANSAREAL_ADDR64'                         
&ZOPO(&ZOPN)          SETC 'DS'                                                 
&ZOPV(&ZOPN)          SETC 'AD'                                                 
&ZOPD(&ZOPN)          SETC '++ &ZXANSAREAL ADDR64'                              
.*-------------------------------------------------------------------           
.***AM.L09 ADDR64 XRETCODE AD                                                   
&ZOPN                 SETA &ZOPN+1                                              
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRETCODE_ADDR64'                          
&ZOPO(&ZOPN)          SETC 'DS'                                                 
&ZOPV(&ZOPN)          SETC 'AD'                                                 
&ZOPD(&ZOPN)          SETC '++ &ZXRETCODE ADDR64'                               
.*-------------------------------------------------------------------           
.***AM.L09 ADDR64 XREASCODE AD                                                  
&ZOPN                 SETA &ZOPN+1                                              
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XREASCODE_ADDR64'                         
&ZOPO(&ZOPN)          SETC 'DS'                                                 
&ZOPV(&ZOPN)          SETC 'AD'                                                 
&ZOPD(&ZOPN)          SETC '++ &ZXREASCODE ADDR64'                              
.*-------------------------------------------------------------------           
.***AM.L02 XVERSION XL1                                                         
&ZOPN                 SETA &ZOPN+1                                              
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XVERSION'                                 
&ZOPO(&ZOPN)          SETC 'DS'                                                 
&ZOPV(&ZOPN)          SETC 'XL1'                                                
&ZOPD(&ZOPN)          SETC '++ INPUT XVERSION'                                  
.*-------------------------------------------------------------------           
.***AM.L10 END OF GRBSMFR LIST PARAMETERS                                       
&ZOPN                 SETA &ZOPN+1                                              
&ZOPL(&ZOPN)          SETC '&XMFCTRL.L'                                         
&ZOPO(&ZOPN)          SETC 'EQU'                                                
&ZOPV(&ZOPN)          SETC '*-&XMFCTRL'                                         
&ZOPD(&ZOPN)          SETC '++ LENGTH OF PLIST'                                 
.*                                                                              
&ZOPN                 SETA &ZOPN+1                                              
&ZOPL(&ZOPN)          SETC ' '                                                  
&ZOPO(&ZOPN)          SETC 'SPACE'                                              
&ZOPV(&ZOPN)          SETC '1'                                                  
&ZOPD(&ZOPN)          SETC ' '                                                  
.*-------------------------------------------------------------------           
.***AL.L12 GRBSMFR FMT=LIST MF=S!L PARAMETERS                                   
                      AIF   ('&XMF' EQ 'L').ZMFLX  DONE IF MF=L                 
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  '&XMFCTRL.S'                                        
&ZOPO(&ZOPN)          SETC  'DC'                                                
&ZOPV(&ZOPN)          SETC  '0H''0'''                                           
&ZOPD(&ZOPN)          SETC  '++ GRBSMFR ARG PARMS'                              
.*                                                                              
.ZLMFSLX              ANOP  ,                                                   
.*-------------------------------------------------------------------           
.***AL.L13 SET ZPLLEN TO ITS APPROPRIATE VALUE                                  
&ZPLLEN               SETA 81                                                   
.*                                                                              
.******************************************************************             
.***AI.L01 GRBSMFR FMT=LIST FILL IN PARAMETER AREA                              
.******************************************************************             
                      ACTR  10000                                               
&ZCVAL                SETC  'LA'            XA MODE                             
.*                                                                              
                      AIF   ('&XMFCTRL'(1,1) NE '(').ZIMFN2  NOT GPR            
&ZCGPR                SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)  GET GPR                 
                      AIF   ('&ZCGPR' EQ 'GPR1').ZIMFNX                         
                      AIF   ('&ZCGPR' EQ 'GPR01').ZIMFNX                        
                      AIF   ('&ZCGPR' EQ 'REG1').ZIMFNX                         
                      AIF   ('&ZCGPR' EQ 'REG01').ZIMFNX                        
                      AIF   ('&ZCGPR' EQ 'R1').ZIMFNX                           
                      AIF   ('&ZCGPR' EQ '1').ZIMFNX                            
                      AIF   ('&ZCGPR' EQ '01').ZIMFNX                           
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                            
&ZOPV(&ZOPN)          SETC  '1,0(,&ZCGPR)'                                      
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                               
                      AGO   .ZIMFNX                                             
.*                                                                              
.ZIMFN2               ANOP ,                                                    
                      AIF   (&SYSALVL EQ 0).ZIMFNX1                             
                      AIF   ('&XMF' NE 'S').ZIMFNX1                             
                      AIF   ('&ZCVAL' NE 'LAE').ZIMFNX                          
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'LAE'                                               
&ZOPV(&ZOPN)          SETC  '1,0(1,0)'                                          
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                               
                      AGO   .ZIMFNX                                             
.ZIMFNX1              ANOP ,                                                    
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                            
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL'                                        
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                               
.ZIMFNX               ANOP ,                                                    
.********************************************************************           
.***AI.L02 GRBSMFR FMT=LIST INITIALIZE PARAMETER AREA                           
.********************************************************************           
.***AI.L03 MF=(SLE)                                                             
                      AIF   ('&XMF' EQ 'L').ZIMFLX                              
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'XC'                                                
&ZOPV(&ZOPN)          SETC  '0(&ZPLLEN,1),0(1)'                                 
&ZOPD(&ZOPN)          SETC  '++ INITIALIZE'                                     
.ZIMFLX               ANOP  ,                                                   
.*-------------------------------------------------------------------           
.***AI.L29  XREQUEST CL8                                                        
                      AIF   ('&ZXREQUEST' EQ '').ZI1C                           
                      AIF   ('&ZXREQUEST' EQ 'OUTPUT').ZI1C                     
&ZCGPR                SETC  '=CL8''&XREQUEST'''                                 
         AIF   ('&XREQUEST'(1,1) EQ '(').ZI1B  IN GPR                           
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'MVC'                                               
&ZOPV(&ZOPN)          SETC  '0(8,1),&ZCGPR'                                     
&ZOPD(&ZOPN)          SETC  '++ &ZXREQUEST XREQUEST'                            
                      AGO   .ZI1C                                               
.*                                                                              
.ZI1B                 ANOP  ,                                                   
&ZCGPR   SETC '&XREQUEST'(2,K'&XREQUEST-2)                                      
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'STG'                                               
&ZOPV(&ZOPN)          SETC  '&ZCGPR,0(,1)'                                      
&ZOPD(&ZOPN)          SETC  '++ &ZXREQUEST XREQUEST'                            
.*                                                                              
.ZI1C                 ANOP  ,                                                   
.*-------------------------------------------------------------------           
.***AI.L29  XPROCESSFUNCTION CL8                                                
                      AIF   ('&ZXPROCESSFUNCTION' EQ '').ZI2C                   
                      AIF   ('&ZXPROCESSFUNCTION' EQ 'OUTPUT').ZI2C             
&ZCGPR                SETC  '=CL8''&XPROCESSFUNCTION'''                         
         AIF   ('&XPROCESSFUNCTION'(1,1) EQ '(').ZI2B  IN GPR                   
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'MVC'                                               
&ZOPV(&ZOPN)          SETC  '8(8,1),&ZCGPR'                                     
&ZOPD(&ZOPN)          SETC  '++ &ZXPROCESSFUNCTION XPROCESSFUNCTION'            
                      AGO   .ZI2C                                               
.*                                                                              
.ZI2B                 ANOP  ,                                                   
&ZCGPR   SETC '&XPROCESSFUNCTION'(2,K'&XPROCESSFUNCTION-2)                      
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'STG'                                               
&ZOPV(&ZOPN)          SETC  '&ZCGPR,8(,1)'                                      
&ZOPD(&ZOPN)          SETC  '++ &ZXPROCESSFUNCTION XPROCESSFUNCTION'            
.*                                                                              
.ZI2C                 ANOP  ,                                                   
.*-------------------------------------------------------------------           
.***AI.L19 ADDR64 XREQTOKEN AD                                                  
                      AIF   ('&ZXREQTOKEN' EQ '').ZI3H                          
&ZCLNG                SETC  '&XREQTOKEN'                                        
&ZCGPR                SETC  '14'                                                
         AIF   ('&XREQTOKEN'(1,1) EQ '(').ZI3F  IN GPR                          
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'LA'                                                
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                                     
&ZOPD(&ZOPN)          SETC  '++ &ZXREQTOKEN XREQTOKEN'                          
.*                                                                              
                      AGO   .ZI3G                                               
.*                                                                              
.ZI3F                 ANOP  ,                                                   
&ZCGPR   SETC  '&XREQTOKEN'(2,K'&XREQTOKEN-2)                                   
.*                                                                              
.ZI3G                 ANOP  ,                                                   
                      AIF   ('&SYSAM64' EQ 'YES').ZI3H1A                        
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'ST'                                                
&ZOPV(&ZOPN)          SETC  '&ZCGPR,4+16(,1)'                                   
&ZOPD(&ZOPN)          SETC  '++ &ZXREQTOKEN XREQTOKEN'                          
.*                                                                              
                      AGO   .ZI3H                                               
.ZI3H1A               ANOP  ,                                                   
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'STG'                                               
&ZOPV(&ZOPN)          SETC  '&ZCGPR,16(,1)'                                     
&ZOPD(&ZOPN)          SETC  '++ &ZXREQTOKEN XREQTOKEN'                          
.*                                                                              
.ZI3H                 ANOP  ,                                                   
.*-------------------------------------------------------------------           
.***AI.L19 ADDR64 XDDNAME AD                                                    
                      AIF   ('&ZXDDNAME' EQ '').ZI4H                            
&ZCLNG                SETC  '&XDDNAME'                                          
&ZCGPR                SETC  '14'                                                
         AIF   ('&XDDNAME'(1,1) EQ '(').ZI4F  IN GPR                            
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'LA'                                                
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                                     
&ZOPD(&ZOPN)          SETC  '++ &ZXDDNAME XDDNAME'                              
.*                                                                              
                      AGO   .ZI4G                                               
.*                                                                              
.ZI4F                 ANOP  ,                                                   
&ZCGPR   SETC  '&XDDNAME'(2,K'&XDDNAME-2)                                       
.*                                                                              
.ZI4G                 ANOP  ,                                                   
                      AIF   ('&SYSAM64' EQ 'YES').ZI4H1A                        
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'ST'                                                
&ZOPV(&ZOPN)          SETC  '&ZCGPR,4+24(,1)'                                   
&ZOPD(&ZOPN)          SETC  '++ &ZXDDNAME XDDNAME'                              
.*                                                                              
                      AGO   .ZI4H                                               
.ZI4H1A               ANOP  ,                                                   
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'STG'                                               
&ZOPV(&ZOPN)          SETC  '&ZCGPR,24(,1)'                                     
&ZOPD(&ZOPN)          SETC  '++ &ZXDDNAME XDDNAME'                              
.*                                                                              
.ZI4H                 ANOP  ,                                                   
.*-------------------------------------------------------------------           
.***AI.L19 ADDR64 XFILTLIST AD                                                  
                      AIF   ('&ZXFILTLIST' EQ '').ZI5H                          
&ZCLNG                SETC  '&XFILTLIST'                                        
&ZCGPR                SETC  '14'                                                
         AIF   ('&XFILTLIST'(1,1) EQ '(').ZI5F  IN GPR                          
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'LA'                                                
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                                     
&ZOPD(&ZOPN)          SETC  '++ &ZXFILTLIST XFILTLIST'                          
.*                                                                              
                      AGO   .ZI5G                                               
.*                                                                              
.ZI5F                 ANOP  ,                                                   
&ZCGPR   SETC  '&XFILTLIST'(2,K'&XFILTLIST-2)                                   
.*                                                                              
.ZI5G                 ANOP  ,                                                   
                      AIF   ('&SYSAM64' EQ 'YES').ZI5H1A                        
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'ST'                                                
&ZOPV(&ZOPN)          SETC  '&ZCGPR,4+32(,1)'                                   
&ZOPD(&ZOPN)          SETC  '++ &ZXFILTLIST XFILTLIST'                          
.*                                                                              
                      AGO   .ZI5H                                               
.ZI5H1A               ANOP  ,                                                   
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'STG'                                               
&ZOPV(&ZOPN)          SETC  '&ZCGPR,32(,1)'                                     
&ZOPD(&ZOPN)          SETC  '++ &ZXFILTLIST XFILTLIST'                          
.*                                                                              
.ZI5H                 ANOP  ,                                                   
.*-------------------------------------------------------------------           
.***AI.L19 ADDR64 XRSTOKEN AD                                                   
                      AIF   ('&ZXRSTOKEN' EQ '').ZI6H                           
&ZCLNG                SETC  '&XRSTOKEN'                                         
&ZCGPR                SETC  '14'                                                
         AIF   ('&XRSTOKEN'(1,1) EQ '(').ZI6F  IN GPR                           
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'LA'                                                
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                                     
&ZOPD(&ZOPN)          SETC  '++ &ZXRSTOKEN XRSTOKEN'                            
.*                                                                              
                      AGO   .ZI6G                                               
.*                                                                              
.ZI6F                 ANOP  ,                                                   
&ZCGPR   SETC  '&XRSTOKEN'(2,K'&XRSTOKEN-2)                                     
.*                                                                              
.ZI6G                 ANOP  ,                                                   
                      AIF   ('&SYSAM64' EQ 'YES').ZI6H1A                        
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'ST'                                                
&ZOPV(&ZOPN)          SETC  '&ZCGPR,4+40(,1)'                                   
&ZOPD(&ZOPN)          SETC  '++ &ZXRSTOKEN XRSTOKEN'                            
.*                                                                              
                      AGO   .ZI6H                                               
.ZI6H1A               ANOP  ,                                                   
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'STG'                                               
&ZOPV(&ZOPN)          SETC  '&ZCGPR,40(,1)'                                     
&ZOPD(&ZOPN)          SETC  '++ &ZXRSTOKEN XRSTOKEN'                            
.*                                                                              
.ZI6H                 ANOP  ,                                                   
.*-------------------------------------------------------------------           
.***AI.L19 ADDR64 XANSAREAP AD                                                  
                      AIF   ('&ZXANSAREAP' EQ '').ZI7H                          
&ZCLNG                SETC  '&XANSAREAP'                                        
&ZCGPR                SETC  '14'                                                
         AIF   ('&XANSAREAP'(1,1) EQ '(').ZI7F  IN GPR                          
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'LA'                                                
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                                     
&ZOPD(&ZOPN)          SETC  '++ &ZXANSAREAP XANSAREAP'                          
.*                                                                              
                      AGO   .ZI7G                                               
.*                                                                              
.ZI7F                 ANOP  ,                                                   
&ZCGPR   SETC  '&XANSAREAP'(2,K'&XANSAREAP-2)                                   
.*                                                                              
.ZI7G                 ANOP  ,                                                   
                      AIF   ('&SYSAM64' EQ 'YES').ZI7H1A                        
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'ST'                                                
&ZOPV(&ZOPN)          SETC  '&ZCGPR,4+48(,1)'                                   
&ZOPD(&ZOPN)          SETC  '++ &ZXANSAREAP XANSAREAP'                          
.*                                                                              
                      AGO   .ZI7H                                               
.ZI7H1A               ANOP  ,                                                   
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'STG'                                               
&ZOPV(&ZOPN)          SETC  '&ZCGPR,48(,1)'                                     
&ZOPD(&ZOPN)          SETC  '++ &ZXANSAREAP XANSAREAP'                          
.*                                                                              
.ZI7H                 ANOP  ,                                                   
.*-------------------------------------------------------------------           
.***AI.L19 ADDR64 XANSAREAL AD                                                  
                      AIF   ('&ZXANSAREAL' EQ '').ZI8H                          
&ZCLNG                SETC  '&XANSAREAL'                                        
&ZCGPR                SETC  '14'                                                
         AIF   ('&XANSAREAL'(1,1) EQ '(').ZI8F  IN GPR                          
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'LA'                                                
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                                     
&ZOPD(&ZOPN)          SETC  '++ &ZXANSAREAL XANSAREAL'                          
.*                                                                              
                      AGO   .ZI8G                                               
.*                                                                              
.ZI8F                 ANOP  ,                                                   
&ZCGPR   SETC  '&XANSAREAL'(2,K'&XANSAREAL-2)                                   
.*                                                                              
.ZI8G                 ANOP  ,                                                   
                      AIF   ('&SYSAM64' EQ 'YES').ZI8H1A                        
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'ST'                                                
&ZOPV(&ZOPN)          SETC  '&ZCGPR,4+56(,1)'                                   
&ZOPD(&ZOPN)          SETC  '++ &ZXANSAREAL XANSAREAL'                          
.*                                                                              
                      AGO   .ZI8H                                               
.ZI8H1A               ANOP  ,                                                   
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'STG'                                               
&ZOPV(&ZOPN)          SETC  '&ZCGPR,56(,1)'                                     
&ZOPD(&ZOPN)          SETC  '++ &ZXANSAREAL XANSAREAL'                          
.*                                                                              
.ZI8H                 ANOP  ,                                                   
.*-------------------------------------------------------------------           
.***AI.L19 ADDR64 XRETCODE AD                                                   
                      AIF   ('&ZXRETCODE' EQ '').ZI9H                           
&ZCLNG                SETC  '&XRETCODE'                                         
&ZCGPR                SETC  '14'                                                
         AIF   ('&XRETCODE'(1,1) EQ '(').ZI9F  IN GPR                           
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'LA'                                                
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                                     
&ZOPD(&ZOPN)          SETC  '++ &ZXRETCODE XRETCODE'                            
.*                                                                              
                      AGO   .ZI9G                                               
.*                                                                              
.ZI9F                 ANOP  ,                                                   
&ZCGPR   SETC  '&XRETCODE'(2,K'&XRETCODE-2)                                     
.*                                                                              
.ZI9G                 ANOP  ,                                                   
                      AIF   ('&SYSAM64' EQ 'YES').ZI9H1A                        
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'ST'                                                
&ZOPV(&ZOPN)          SETC  '&ZCGPR,4+64(,1)'                                   
&ZOPD(&ZOPN)          SETC  '++ &ZXRETCODE XRETCODE'                            
.*                                                                              
                      AGO   .ZI9H                                               
.ZI9H1A               ANOP  ,                                                   
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'STG'                                               
&ZOPV(&ZOPN)          SETC  '&ZCGPR,64(,1)'                                     
&ZOPD(&ZOPN)          SETC  '++ &ZXRETCODE XRETCODE'                            
.*                                                                              
.ZI9H                 ANOP  ,                                                   
.*-------------------------------------------------------------------           
.***AI.L19 ADDR64 XREASCODE AD                                                  
                      AIF   ('&ZXREASCODE' EQ '').ZI10H                         
&ZCLNG                SETC  '&XREASCODE'                                        
&ZCGPR                SETC  '14'                                                
         AIF   ('&XREASCODE'(1,1) EQ '(').ZI10F  IN GPR                         
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'LA'                                                
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                                     
&ZOPD(&ZOPN)          SETC  '++ &ZXREASCODE XREASCODE'                          
.*                                                                              
                      AGO   .ZI10G                                              
.*                                                                              
.ZI10F                ANOP  ,                                                   
&ZCGPR   SETC  '&XREASCODE'(2,K'&XREASCODE-2)                                   
.*                                                                              
.ZI10G                ANOP  ,                                                   
                      AIF   ('&SYSAM64' EQ 'YES').ZI10H1A                       
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'ST'                                                
&ZOPV(&ZOPN)          SETC  '&ZCGPR,4+72(,1)'                                   
&ZOPD(&ZOPN)          SETC  '++ &ZXREASCODE XREASCODE'                          
.*                                                                              
                      AGO   .ZI10H                                              
.ZI10H1A              ANOP  ,                                                   
.*                                                                              
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  ' '                                                 
&ZOPO(&ZOPN)          SETC  'STG'                                               
&ZOPV(&ZOPN)          SETC  '&ZCGPR,72(,1)'                                     
&ZOPD(&ZOPN)          SETC  '++ &ZXREASCODE XREASCODE'                          
.*                                                                              
.ZI10H                ANOP  ,                                                   
.*-------------------------------------------------------------------           
&ZOPN1                SETA &ZOPN                                                
.*******************************************************************            
.***  PROCESS GRBSMFR OUTPUT PARAMETERS                                         
.*******************************************************************            
                      ACTR  10000                                               
.*******************************************************************            
.***AO.X01  LABEL TO BYPASS INVOCATION                                          
.*******************************************************************            
&ZOPN                 SETA  &ZOPN+1                                             
&ZOPL(&ZOPN)          SETC  'AMGE&SYSNDX'                                       
&ZOPO(&ZOPN)          SETC  'DS'                                                
&ZOPV(&ZOPN)          SETC  '0H'                                                
&ZOPD(&ZOPN)          SETC  '++ BYPASS INVOCATION'                              
.*******************************************************************            
.***AO.X04  LABEL FOR MF=L PROCESSING                                           
.*******************************************************************            
.ZMFLX                ANOP  ,              MF=L PROCESSING                      
.*******************************************************************            
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                                       
.*******************************************************************            
                      ACTR  10000                                               
.*                                                                              
                      LCLA  &ZLC           COLUMN POSITION                      
                      LCLA  &ZOPX          LIST TABLE INDEX                     
                      LCLC  &ZLL           LABEL                                
                      LCLC  &ZLOP          OPERATION                            
                      LCLC  &ZLV           VALUE                                
                      LCLC  &ZLD           DESCRIPTION                          
.*                                                                              
&ZOPX                 SETA  1                                                   
.ZL2                  AIF   (&ZOPX GT &ZOPN1).ZLX  B IF DONE                    
&ZLL                  SETC  '&ZOPL(&ZOPX)'                                      
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                                      
&ZLV                  SETC  '&ZOPV(&ZOPX)'                                      
&ZLD                  SETC  '&ZOPD(&ZOPX)'                                      
                      AIF   (K'&ZLD LE 0).ZL5                                   
&ZLC                  SETA  35             COMMENT COLUMN                       
                      AIF   ('&ZLD'(1,1) NE '*').ZL3                            
&ZLC                  SETA  33             COMMMENT COLUMN                      
.ZL3                  AIF   (K'&ZLV GE &ZLC-16-1).ZL4                           
&ZLV                  SETC  '&ZLV'.' '                                          
                      AGO   .ZL3                                                
.*                                                                              
.ZL4                  ANOP  ,                                                   
&ZLV                  SETC  '&ZLV'.' '                                          
.ZL5                  ANOP  ,                                                   
&ZLV                  SETC  '&ZLV'.'&ZLD'                                       
.*                                                                              
&ZLL     &ZLOP &ZLV                                                             
.*                                                                              
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE                       
                      AGO   .ZL2           CONTINUE LOOPING                     
.*                                                                              
.ZLX                  ANOP  ,                                                   
                      AIF   ('&XMF' EQ 'L').ZLINKX  MF=L                        
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*          
         LGR   5,1                                                              
         LOAD  EP=GRBSMFRR                                                      
         LLGTR 15,0                                                             
         OILL  15,1                                                             
         LGR   1,5                                                              
         XR    14,14                                                            
         LA    14,=CL5'OPEN '                                                   
         STG   14,0(,1)                                                         
         AIF   ('&XREQUEST' NE 'OPEN').ZLBL03                                   
         AIF   ('&XPROCESSFUNCTION' NE 'ASSEMBLE').ZLBL01                       
         LA    14,=CL8'REASSEMB'                                                
         STG   14,8(,1)                                                         
.ZLBL01  AIF   ('&XPROCESSFUNCTION' NE 'CONVERT').ZLBL02                        
         LA    14,=CL8'CONVERT'                                                 
         STG   14,8(,1)                                                         
.ZLBL02  AIF   ('&XPROCESSFUNCTION' NE 'NONE').ZLBL03                           
         LA    14,=CL8'NONE'                                                    
         STG   14,8(,1)                                                         
.ZLBL03  AIF   ('&XREQUEST' NE 'GET').ZLBL04                                    
         LA    14,=CL5'GET  '                                                   
         STG   14,0(,1)                                                         
.ZLBL04  AIF   ('&XREQUEST' NE 'CLOSE').ZLBL05                                  
         LA    14,=CL5'CLOSE'                                                   
         STG   14,0(,1)                                                         
.ZLBL05  BASSM 14,15                                                            
         DELETE EP=GRBSMFRR                                                     
                                                                                
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*          
.ZLINKX               ANOP  ,                                                   
.*******************************************************************            
.***AP.X01  FORMAT GENERATED CODE                                               
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE                    
&ZLL                  SETC  '&ZOPL(&ZOPX)'                                      
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                                      
&ZLV                  SETC  '&ZOPV(&ZOPX)'                                      
&ZLD                  SETC  '&ZOPD(&ZOPX)'                                      
                      AIF   (K'&ZLD LE 0).ZL51                                  
&ZLC                  SETA  35             COMMENT COLUMN                       
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                           
&ZLC                  SETA  33             COMMENT COLUMN                       
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                          
&ZLV                  SETC  '&ZLV'.' '                                          
                      AGO   .ZL31                                               
.*                                                                              
.ZL41                 ANOP  ,                                                   
&ZLV                  SETC  '&ZLV'.' '                                          
.ZL51                 ANOP  ,                                                   
&ZLV                  SETC  '&ZLV'.'&ZLD'                                       
.*                                                                              
&ZLL     &ZLOP &ZLV                                                             
.*                                                                              
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE                       
                      AGO   .ZL21          CONTINUE LOOPING                     
.*                                                                              
.ZLX1                 ANOP  ,                                                   
.*******************************************************************            
.***AP.X02  END OF GRBSMFR MACRO                                                
&ZGRBSMFR             SETC  'YES'          SET GRBSMFR USED                     
         POP   PRINT                                                            
*                                            GRBSMFR-0                          
         SPACE 1                                                                
.ZLX2                 ANOP  ,                                                   
         MEND                                                                   
**********************************************************************/         
*/*PB.OC01 INVOKE MACRO---------------------------------------------*/          
*%GRBSMFR: MACRO KEYS(OPEN,ASSEMBLE,CONVERT,NONE,REQTOKEN,DDNAME,               
*                 FILTLIST,ANSAREAP,ANSAREAL,GET,RSTOKEN,CLOSE,                 
*                 RETCODE,REASCODE,PLISTVER,MF);                                
*  ANS('?'!!MACLABEL!!' '!!'GRBSMFRP '!!MACLIST!!                               
*         ' '!!MACKEYS!!';') COL(MACLMAR);                                      
*%END GRBSMFR;                                                                  
