*%IWM4SRSC: MACRO KEYS(WEIGHT,STOKEN,ABNORM_COUNT,HEALTH,CPUWEIGHT,     00000100
*                 ZAAPWEIGHT,ZIIPWEIGHT,CPUPROPORTION,ZAAPPROPORTION,   00000200
*                 ZIIPPROPORTION,MAXSRVUNITS,METHOD,COST_ZAAP_ON_CP,    00000300
*                 COST_ZIIP_ON_CP,MAXEQUIVUNITS,IL_WEIGHTING,RETCODE,   00000400
*                 RSNCODE,PLISTVER,MF);                                 00000500
*/**** START OF SPECIFICATIONS **************************************** 00000600
*                                                                     * 00000700
*                                                                     * 00000800
*01* MACRO NAME:  IWM4SRSC                              -09/03/23-<4> * 00000900
*                                                                     * 00001000
*                                                                     * 00001100
*01* DESCRIPTIVE NAME:  Server Specific Routing Information           * 00001200
*                                                                     * 00001300
*01* PROPRIETARY STATEMENT:                                           * 00001400
*                                                                     * 00001500
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00001600
*     5694-A01 COPYRIGHT IBM CORP. 2005, 2009                         * 00001700
*                                                                     * 00001800
* STATUS= HBB7760                                                     * 00001900
*                                                                     * 00002000
*                                                                     * 00002100
*                                                                     * 00002200
*01* FUNCTION:                                                        * 00002300
*                                                                     * 00002400
*      The IWM4SRSC service provides information about how well a     * 00002500
*      server is suitable to receive work from a WLM point-of-view.   * 00002600
*      The IWM4SRSC service allows to check a specific server before  * 00002700
*      routing work to it from WLM.  Thus, the information obtained   * 00002800
*      can be used for making balanced routing decisions.             * 00002900
*                                                                     * 00003000
*      The input to the IWM4SRSC service is the STOKEN of an address  * 00003100
*      space.  The WEIGHT output is an indicator, of how well the     * 00003200
*      address space itself, the transactions or enclaves - if it is  * 00003300
*      a registered transaction server, an enclave server or an       * 00003400
*      enclave owner - are performing relative to their WLM goal and  * 00003500
*      to the displaceable capacity for its WLM importance on that    * 00003600
*      system.                                                        * 00003700
*                                                                     * 00003800
*      This WEIGHT indicator can be used for load balancing, by       * 00003900
*      comparing it to calls of this service for other servers.       * 00004000
*                                                                     * 00004100
*      WLM provides two methods for computing the weight, which can   * 00004200
*      be specified with the optional input parameter METHOD. The     * 00004300
*      default method is PROPORTIONAL, and the other one is EQUICPU.  * 00004400
*                                                                     * 00004500
*      With PROPORTIONAL, the  weight is calculated based on six      * 00004600
*      factors:  it is a combination of the three processor weights   * 00004700
*      (CPU weight, ZAAP weight and ZIIP weight) and their respective * 00004800
*      consumed service units repartition. With EQUICPU, WLM computes * 00004900
*      the weight by trying to simulate a 100% usage of the system    * 00005000
*      capacity, and determining the capacity of a CPU-only system    * 00005100
*      having equivalent resource consumption.                        * 00005200
*                                                                     * 00005300
*      The CPU, ZAAP and ZIIP weights are each computed based on the  * 00005400
*      following four factors:                                        * 00005500
*                                                                     * 00005600
*                                                                     * 00005700
*      o   The first factor is how well this server, or the           * 00005800
*          transactions or enclaves it is related to, fulfill their   * 00005900
*          goals.                                                     * 00006000
*                                                                     * 00006100
*      o   The second factor is the abnormal termination factor. This * 00006200
*          depends on the ratio of abnormal terminations to normal    * 00006300
*          terminations as reported by the IWMRPT service. If no      * 00006400
*          terminations were reported by IWMRPT, this factor is       * 00006500
*          neutral (=1).                                              * 00006600
*                                                                     * 00006700
*      o   The third factor is the health factor of this server. It   * 00006800
*          is dependent on the health indicator, that was reported to * 00006900
*          WLM for this server by one of the services IWM4HLTH or     * 00007000
*          IWMSRSRG. If no health indicator was reported, this factor * 00007100
*          is also neutral.                                           * 00007200
*                                                                     * 00007300
*      o   The fourth factor is how much other work with lower        * 00007400
*          importance can be displaced, if it receives more work to   * 00007500
*          handle on this system. With the optional IL_WEIGHTING      * 00007600
*          parameter, the caller can set the relative balance between * 00007700
*          the lower and the higher importance levels.                * 00007800
*                                                                     * 00007900
*                                                                     * 00008000
*      These four factors are combined to create the output processor * 00008100
*      WEIGHT as a number.                                            * 00008200
*                                                                     * 00008300
*      To make it easier for the caller to determine, how far the     * 00008400
*      weights were influenced by the abnormal terminations and       * 00008500
*      health factors, those values can also be output through the    * 00008600
*      optional parameters ABNORM_COUNT and HEALTH.                   * 00008700
*                                                                     * 00008800
*      The processor weights are returned through the optional        * 00008900
*      CPUWEIGHT, ZAAPWEIGHT and ZIIPWEIGHT parameter.  The           * 00009000
*      respective parts of these weights in the WEIGHT are returned   * 00009100
*      through the optional parameters CPUPROPORTION, ZAAPPROPORTION, * 00009200
*      and ZIIPPROPORTION.                                            * 00009300
*                                                                     * 00009400
*      If there are pre-V1R9 systems in the sysplex, the zAAP and     * 00009500
*      zIIP weights and proportions are automatically set to 0,       * 00009600
*      because pre-V1R9 systems do not have such weights and could    * 00009700
*      not be compared to V1R9 systems. For the same reason, if there * 00009800
*      are pre-V1R11 systems in the sysplex, only METHOD=PROPORTIONAL * 00009900
*      will be used, even if METHOD=EQUICPU is specified.             * 00010000
*                                                                     * 00010100
*      The WEIGHT is equal to the sum of these three proportion       * 00010200
*      fields. As WLM computes the values with higher precision, and  * 00010300
*      rounds them before output, the WEIGHT actually returned is     * 00010400
*      probably greater than the sum of the returned proportion       * 00010500
*      fields by one or two units.                                    * 00010600
*                                                                     * 00010700
*      A scenario where TCP/IP communicates on each system with WLM   * 00010800
*      to obtain information about the servers which receive work is  * 00010900
*      described in the following.                                    * 00011000
*                                                                     * 00011100
*      TCP/IP recognizes the server address spaces when they open a   * 00011200
*      port.  It invokes the IWM4SRSC service to WLM with an          * 00011300
*      identification of the address space (STOKEN). WLM now finds    * 00011400
*      out whether this address space is a registered WLM server      * 00011500
*      address space or whether it creates WLM transactions which can * 00011600
*      execute in other server address spaces. The following          * 00011700
*      possibilities are considered:                                  * 00011800
*                                                                     * 00011900
*                                                                     * 00012000
*      1.  The address space does not create any enclaves and is not  * 00012100
*          a registered server address space to WLM. The FTP daemon   * 00012200
*          would be such an address space. In this case WLM will use  * 00012300
*          the service class the address space has been classified    * 00012400
*          to.                                                        * 00012500
*                                                                     * 00012600
*      2.  The address space is not a registered server address space * 00012700
*          but it creates independent enclaves which are processed by * 00012800
*          other address spaces on that system. In this case WLM has  * 00012900
*          to use the service classes for the enclaves which are      * 00013000
*          owned by this address space. Note: There can be multiple   * 00013100
*          service classes which are associated with enclaves. In     * 00013200
*          this case the service class with the highest transaction   * 00013300
*          rate is used.                                              * 00013400
*                                                                     * 00013500
*      3.  The address space is a server address space from the point * 00013600
*          of view of WLM. In this case it is either an enclave or a  * 00013700
*          transaction server, for example CICS or IMS.  In this case * 00013800
*          WLM will use the service classes the enclaves or CICS/IMS  * 00013900
*          transactions are classified to.                            * 00014000
*                                                                     * 00014100
*                                                                     * 00014200
*                                                                     * 00014300
*                                                                     * 00014400
*01* EXTERNAL CLASSIFICATION:  GUPI                                   * 00014500
*                                                                     * 00014600
*01* END OF EXTERNAL CLASSIFICATION:                                  * 00014700
*                                                                     * 00014800
*01* ENVIRONMENT:                                                     * 00014900
*                                                                     * 00015000
*                                                                     * 00015100
*      Minimum authorization: Problem state with any PSW key.         * 00015200
*                                                                     * 00015300
*      Dispatchable unit mode: Task or SRB mode.                      * 00015400
*                                                                     * 00015500
*      Cross Memory Mode: Any PASN, any HASN, any SASN.               * 00015600
*                                                                     * 00015700
*      AMODE:            31- or 64-bit.  If in 64-Bit addressing      * 00015800
*                        mode, code SYSSTATE AMODE64=YES before       * 00015900
*                        invoking this macro.                         * 00016000
*                                                                     * 00016100
*      ASC mode:         Primary.                                     * 00016200
*                                                                     * 00016300
*      Interrupt status: Enabled for I/O and external interrupts.     * 00016400
*                                                                     * 00016500
*      Locks:            No locks held.  FRRs may be established.     * 00016600
*                                                                     * 00016700
*      Control parameters: Control parameters must be in the primary  * 00016800
*                        address space.                               * 00016900
*                                                                     * 00017000
*                                                                     * 00017100
*                                                                     * 00017200
*01* PROGRAMMING REQUIREMENTS:                                        * 00017300
*                                                                     * 00017400
*                                                                     * 00017500
*    1.  The macro CVT must be included to use this macro.            * 00017600
*                                                                     * 00017700
*    2.  The macro IWMYCON must be included to use this macro.        * 00017800
*                                                                     * 00017900
*    3.  The macro IWMPB must be in the library concatenation, since  * 00018000
*        it is included by IWMYCON.                                   * 00018100
*                                                                     * 00018200
*    4.  Note that the high order halfword of register 0, and the     * 00018300
*        reason code variable when specified, may be non-zero and     * 00018400
*        represents diagnostic data which is NOT part of the external * 00018500
*        interface.  The high order halfword should thus be excluded  * 00018600
*        from comparison with the reason code values described above. * 00018700
*        The constant, IWMRSNCODE_MASK_CONST defined in IWMYCON, may  * 00018800
*        be used for this purpose.                                    * 00018900
*                                                                     * 00019000
*    5.  All character data, unless otherwise specified, is assumed   * 00019100
*        to be left justified and padded with blanks on the right, as * 00019200
*        needed, to occupy the specified number of bytes.             * 00019300
*                                                                     * 00019400
*                                                                     * 00019500
*                                                                     * 00019600
*01* RESTRICTIONS:                                                    * 00019700
*                                                                     * 00019800
*                                                                     * 00019900
*    1.  This macro may not be used prior to the completion of WLM    * 00020000
*        address space initialization                                 * 00020100
*                                                                     * 00020200
*    2.  This macro may only be used on z/OS 1.7 or higher levels.    * 00020300
*                                                                     * 00020400
*                                                                     * 00020500
*                                                                     * 00020600
*01* INPUT REGISTER INFORMATION:                                      * 00020700
*                                                                     * 00020800
*    Before issuing the IWM4SRSC macro, the caller does not have to   * 00020900
*    place any information into any register unless using it in       * 00021000
*    register notation for a particular parameter, or using it as a   * 00021100
*    base register.                                                   * 00021200
*                                                                     * 00021300
*01* OUTPUT REGISTER INFORMATION:                                     * 00021400
*                                                                     * 00021500
*    When control returns to the caller, the GPRs contain:            * 00021600
*                                                                     * 00021700
*                                                                     * 00021800
*    REGISTER  CONTENTS                                               * 00021900
*                                                                     * 00022000
*    0         Reason code if GR15 return code is non-zero            * 00022100
*                                                                     * 00022200
*    1         Used as work register by the system                    * 00022300
*                                                                     * 00022400
*    2-13      Unchanged                                              * 00022500
*                                                                     * 00022600
*    14        Used as work register by the system                    * 00022700
*                                                                     * 00022800
*    15        Return code                                            * 00022900
*                                                                     * 00023000
*                                                                     * 00023100
*                                                                     * 00023200
*    When control returns to the caller, the ARs contain:             * 00023300
*                                                                     * 00023400
*                                                                     * 00023500
*    REGISTER  CONTENTS                                               * 00023600
*                                                                     * 00023700
*    0-1       Used as work registers by the system                   * 00023800
*                                                                     * 00023900
*    2-13      Unchanged                                              * 00024000
*                                                                     * 00024100
*    14-15     Used as work registers by the system                   * 00024200
*                                                                     * 00024300
*                                                                     * 00024400
*                                                                     * 00024500
*    Some callers depend on register contents remaining the same      * 00024600
*    before and after issuing a service.  If the system changes the   * 00024700
*    contents of registers on which the caller depends, the caller    * 00024800
*    must save them before issuing the service, and restore them      * 00024900
*    after the system returns control.                                * 00025000
*                                                                     * 00025100
*01* PERFORMANCE IMPLICATIONS:                                        * 00025200
*                                                                     * 00025300
*    None                                                             * 00025400
*                                                                     * 00025500
*01* SYNTAX:                                                          * 00025600
*                                                                     * 00025700
*Ýxlabel¨  IWM4SRSC     WEIGHT=xweight                                * 00025800
*                      ,STOKEN=xstoken                                * 00025900
*                     Ý,ABNORM_COUNT=xabnorm_count¨                   * 00026000
*                     Ý,HEALTH=xhealth¨                               * 00026100
*                     Ý,CPUWEIGHT=xcpuweight¨                         * 00026200
*                     Ý,ZAAPWEIGHT=xzaapweight¨                       * 00026300
*                     Ý,ZIIPWEIGHT=xziipweight¨                       * 00026400
*                     Ý,CPUPROPORTION=xcpuproportion¨                 * 00026500
*                     Ý,ZAAPPROPORTION=xzaapproportion¨               * 00026600
*                     Ý,ZIIPPROPORTION=xziipproportion¨               * 00026700
*                     Ý,MAXSRVUNITS=xmaxsrvunits¨                     * 00026800
*                     Ý,METHOD=»PROPORTIONAL!EQUICPUº¨                * 00026900
*                     Ý,COST_ZAAP_ON_CP=»xcost_zaap_on_cp!1º¨         * 00027000
*                     Ý,COST_ZIIP_ON_CP=»xcost_ziip_on_cp!1º¨         * 00027100
*                     Ý,MAXEQUIVUNITS=xmaxequivunits¨                 * 00027200
*                     Ý,IL_WEIGHTING=»xil_weighting!0º¨               * 00027300
*                     Ý,RETCODE=xretcode¨                             * 00027400
*                     Ý,RSNCODE=xrsncode¨                             * 00027500
*                     Ý,PLISTVER=»xplistver!IMPLIED_VERSIONº¨         * 00027600
*                    ÐÝ,MF=S¨                                         * 00027700
*                    ÔÝ,MF=(L,xmfctrl»,xmfattr!0Dº)¨                  * 00027800
*                    ¿Ý,MF=(E,xmfctrl»,COMPLETEº)¨                    * 00027900
*                                                                     * 00028000
*                                                                     * 00028100
*      Where:                                                         * 00028200
*                                                                     * 00028300
*                                                                     * 00028400
*      Ýxlabel¨                                                       * 00028500
*          is an optional symbol, starting in column 1, that is the   * 00028600
*          name on the IWM4SRSC macro invocation.  The name must      * 00028700
*          conform to the rules for an ordinary assembler language    * 00028800
*          symbol.                                                    * 00028900
*          DEFAULT: No name.                                          * 00029000
*                                                                     * 00029100
*                                                                     * 00029200
*                                                                     * 00029300
*                                                                     * 00029400
*      WEIGHT(xweight)                                                * 00029500
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00029600
*          only) of a required fullword output which contains the     * 00029700
*          weight of how good the server is doing here. The returned  * 00029800
*          WEIGHT value is equal to the sum of the processor          * 00029900
*          PROPORTION fields (plus the rounding errors).              * 00030000
*                                                                     * 00030100
*                                                                     * 00030200
*                                                                     * 00030300
*                                                                     * 00030400
*      STOKEN(xstoken)                                                * 00030500
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00030600
*          only) of a required 64 bit input which contains the Space  * 00030700
*          Token of the server.                                       * 00030800
*                                                                     * 00030900
*                                                                     * 00031000
*                                                                     * 00031100
*                                                                     * 00031200
*      ÝABNORM_COUNT(xabnorm_count)¨                                  * 00031300
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00031400
*          only) of an optional fullword output which contains the    * 00031500
*          number of abnormal Terminations per 1000 total             * 00031600
*          Terminations, if available. If no abnormal terminations    * 00031700
*          were reported to WLM, this value is zero. This is          * 00031800
*          independant of the reason for not reporting - whether no   * 00031900
*          abnormal terminations did occur or the subsystem of the    * 00032000
*          server is not enabled to report them to WLM.               * 00032100
*                                                                     * 00032200
*                                                                     * 00032300
*                                                                     * 00032400
*                                                                     * 00032500
*      ÝHEALTH(xhealth)¨                                              * 00032600
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00032700
*          only) of an optional fullword output which contains the    * 00032800
*          Health Indicator of this Server. This is a value between 0 * 00032900
*          and 100, which was reported to WLM either by the IWM4HLTH  * 00033000
*          or the IWMSRSRG Service. If no Health Indicator had been   * 00033100
*          reported, the value is 100.                                * 00033200
*                                                                     * 00033300
*                                                                     * 00033400
*                                                                     * 00033500
*                                                                     * 00033600
*      ÝCPUWEIGHT(xcpuweight)¨                                        * 00033700
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00033800
*          only) of an optional fullword output which contains the    * 00033900
*          weight of how good the server is doing on the CPU.         * 00034000
*                                                                     * 00034100
*                                                                     * 00034200
*                                                                     * 00034300
*                                                                     * 00034400
*      ÝZAAPWEIGHT(xzaapweight)¨                                      * 00034500
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00034600
*          only) of an optional fullword output which contains the    * 00034700
*          weight of how good the server is doing on the ZAAP.        * 00034800
*                                                                     * 00034900
*                                                                     * 00035000
*                                                                     * 00035100
*                                                                     * 00035200
*      ÝZIIPWEIGHT(xziipweight)¨                                      * 00035300
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00035400
*          only) of an optional fullword output which contains the    * 00035500
*          weight of how good the server is doing on the ZIIP.        * 00035600
*                                                                     * 00035700
*                                                                     * 00035800
*                                                                     * 00035900
*                                                                     * 00036000
*      ÝCPUPROPORTION(xcpuproportion)¨                                * 00036100
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00036200
*          only) of an optional fullword output which contains the    * 00036300
*          CPU weight part in the computation of the WEIGHT.          * 00036400
*                                                                     * 00036500
*                                                                     * 00036600
*                                                                     * 00036700
*                                                                     * 00036800
*      ÝZAAPPROPORTION(xzaapproportion)¨                              * 00036900
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00037000
*          only) of an optional fullword output which contains the    * 00037100
*          ZAAP weight part in the computation of the WEIGHT.         * 00037200
*                                                                     * 00037300
*                                                                     * 00037400
*                                                                     * 00037500
*                                                                     * 00037600
*      ÝZIIPPROPORTION(xziipproportion)¨                              * 00037700
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00037800
*          only) of an optional fullword output which contains the    * 00037900
*          ZIIP weight part in the computation of the WEIGHT.         * 00038000
*                                                                     * 00038100
*                                                                     * 00038200
*                                                                     * 00038300
*                                                                     * 00038400
*      ÝMAXSRVUNITS(xmaxsrvunits)¨                                    * 00038500
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00038600
*          only) of an optional fullword output which contains the    * 00038700
*          maximum service units across all processing resources used * 00038800
*          to calculate the weights.                                  * 00038900
*                                                                     * 00039000
*                                                                     * 00039100
*                                                                     * 00039200
*                                                                     * 00039300
*      ÝMETHOD(»PROPORTIONAL!EQUICPUº)¨                               * 00039400
*          is an optional keyword input which selects the method for  * 00039500
*          computing the output weights.  The default is              * 00039600
*          METHOD=PROPORTIONAL.                                       * 00039700
*          DEFAULT: PROPORTIONAL                                      * 00039800
*                                                                     * 00039900
*                                                                     * 00040000
*          METHOD(PROPORTIONAL)                                       * 00040100
*              Computes the output weights as a proportion of the     * 00040200
*              three processor types weights.                         * 00040300
*                                                                     * 00040400
*          METHOD(EQUICPU)                                            * 00040500
*              Computes a CPU equivalent of the systems before        * 00040600
*              computing the output weights.                          * 00040700
*                                                                     * 00040800
*              In order for METHOD=EQUICPU to be active, all systems  * 00040900
*              in the sysplex must run z/OS V1R11 or higher.          * 00041000
*              Otherwise WLM automatically switches back to           * 00041100
*              METHOD=PROPORTIONAL.                                   * 00041200
*                                                                     * 00041300
*                                                                     * 00041400
*                                                                     * 00041500
*                                                                     * 00041600
*                                                                     * 00041700
*                                                                     * 00041800
*      ÝCOST_ZAAP_ON_CP(»xcost_zaap_on_cp!1º)¨                        * 00041900
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00042000
*          only) of an optional fullword input which is used in       * 00042100
*          conjunction with METHOD=EQUICPU. It describes how much     * 00042200
*          more it costs to execute zAAP-eligible work on a CPU       * 00042300
*          instead of on a zAAP processor.                            * 00042400
*                                                                     * 00042500
*          To use the full system capacity, independently of the      * 00042600
*          cost, specify COST_ZAAP_ON_CP=1.  With high values of this * 00042700
*          cost parameter, WLM considers that a system having used up * 00042800
*          its full free zAAP capacity should offload less work to    * 00042900
*          the CPU, and gives this system a smaller output weight.    * 00043000
*                                                                     * 00043100
*          This cost parameter must be in the range from 1 to 100.    * 00043200
*          If the passed value is outside of this range, WLM will     * 00043300
*          instead use the nearest valid integer (1 or 100) as cost   * 00043400
*          parameter.  The default is 1.                              * 00043500
*          DEFAULT: 1                                                 * 00043600
*                                                                     * 00043700
*                                                                     * 00043800
*                                                                     * 00043900
*                                                                     * 00044000
*      ÝCOST_ZIIP_ON_CP(»xcost_ziip_on_cp!1º)¨                        * 00044100
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00044200
*          only) of an optional fullword input which is used in       * 00044300
*          conjunction with METHOD=EQUICPU. It describes how much     * 00044400
*          more it costs to execute zIIP-eligible work on a CPU       * 00044500
*          instead of on a zIIP processor.                            * 00044600
*                                                                     * 00044700
*          To use the full system capacity, independently of the      * 00044800
*          cost, specify COST_ZIIP_ON_CP=1.  With high values of this * 00044900
*          cost parameter, WLM considers that a system having upsed   * 00045000
*          up its full free zIIP capacity should offload less work to * 00045100
*          the CPU, and gives this system a smaller output weight.    * 00045200
*                                                                     * 00045300
*          This cost parameter must be in the range from 1 to 100.    * 00045400
*          If the passed value is outside of this range, WLM will     * 00045500
*          instead use the nearest valid integer (1 or 100) as cost   * 00045600
*          parameter.  The default is 1.                              * 00045700
*          DEFAULT: 1                                                 * 00045800
*                                                                     * 00045900
*                                                                     * 00046000
*                                                                     * 00046100
*                                                                     * 00046200
*      ÝMAXEQUIVUNITS(xmaxequivunits)¨                                * 00046300
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00046400
*          only) of an optional fullword output which contains the    * 00046500
*          maximum equivalent service units across all processing     * 00046600
*          resources used to calculate the mixed weight output.       * 00046700
*                                                                     * 00046800
*          If METHOD=PROPORTIONAL is specified, MAXEQUIVUNITS is      * 00046900
*          automatically set to 0, since WLM does not compute         * 00047000
*          equivalent CPU service units in this case.                 * 00047100
*                                                                     * 00047200
*          If METHOD=EQUICPU is specified, MAXEQUIVUNITS is always a  * 00047300
*          number in the range from 1 to MAXSRVUNITS. MAXEQUIVUNITS   * 00047400
*          then relates to the mixed weight output only, and          * 00047500
*          MAXSRVUNITS to the CPU, ZAAP and ZIIP weight outputs only. * 00047600
*                                                                     * 00047700
*                                                                     * 00047800
*                                                                     * 00047900
*                                                                     * 00048000
*      ÝIL_WEIGHTING(»xil_weighting!0º)¨                              * 00048100
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00048200
*          only) of an optional fullword input which controls how WLM * 00048300
*          weights available capacity at importance levels (ILs)      * 00048400
*          lower than the currently selected one. The value of        * 00048500
*          IL_WEIGHTING should be in the range from 0 to 3.  If the   * 00048600
*          passed value is out of this range, WLM will instead use    * 00048700
*          the nearest valid integer (0 or 3) as IL_WEIGHTING         * 00048800
*          instead.                                                   * 00048900
*                                                                     * 00049000
*          When this parameter is set to 0 (the default value), all   * 00049100
*          free capacities used by levels less important than the     * 00049200
*          current one are weighted the same. This means that the     * 00049300
*          free capacity below current level is considered to be      * 00049400
*          totally free, and this is equivalent to what WLM did prior * 00049500
*          to V1R11.                                                  * 00049600
*                                                                     * 00049700
*          When this parameter is set to 1, free capacity at the      * 00049800
*          lowest ILs is weighted more than the current IL, with a    * 00049900
*          weighting growing proportionally to the square root of the * 00050000
*          IL difference + 1. For example , with a selected IL of 1,  * 00050100
*          free capacity at IL 5 is weighted about 2.236 times more   * 00050200
*          than free capacity at IL 1.                                * 00050300
*                                                                     * 00050400
*          When this parameter is set to 2, free capacity at the      * 00050500
*          lowest ILs is weighted more than the current IL, with a    * 00050600
*          weighting growing proportionally to the IL difference + 1. * 00050700
*          For example , with a selected IL of 1, free capacity at IL * 00050800
*          5 is weighted 5 times more than free capacity at IL 1.     * 00050900
*                                                                     * 00051000
*          When this parameter is set to 3, free capacity at the      * 00051100
*          lowest ILs is weighted more than the current IL, with a    * 00051200
*          weighting growing proportionally to the square of the IL   * 00051300
*          difference + 1. For example , with a selected IL of 1,     * 00051400
*          free capacity at IL 5 is weighted 25 times more than free  * 00051500
*          capacity at IL 1.                                          * 00051600
*                                                                     * 00051700
*          The default is 0.                                          * 00051800
*          DEFAULT: 0                                                 * 00051900
*                                                                     * 00052000
*                                                                     * 00052100
*                                                                     * 00052200
*                                                                     * 00052300
*      ÝRETCODE(xretcode)¨                                            * 00052400
*          is the name (RS-type) of an optional fullword output       * 00052500
*          variable (or register (2)-(12) or (15) ASM only) into      * 00052600
*          which the return code is to be copied from GPR 15.  If you * 00052700
*          specify 15, GPR15, REG15, or R15 (within or without        * 00052800
*          parentheses), the value will be left in GPR 15.            * 00052900
*                                                                     * 00053000
*                                                                     * 00053100
*                                                                     * 00053200
*                                                                     * 00053300
*      ÝRSNCODE(xrsncode)¨                                            * 00053400
*          is the name (RS-type) of an optional fullword output       * 00053500
*          variable into which the reason code is to be copied from   * 00053600
*          GPR 0.  If you specify 0, 00, GPR0, GPR00, REG0, REG00, or * 00053700
*          R0 (within or without parentheses), the value will be left * 00053800
*          in GPR 0.                                                  * 00053900
*                                                                     * 00054000
*                                                                     * 00054100
*                                                                     * 00054200
*                                                                     * 00054300
*      ÝPLISTVER(»xplistver!IMPLIED_VERSIONº)¨                        * 00054400
*          is an optional byte input decimal value in the "0-4" range * 00054500
*          that specifies the macro version.  PLISTVER is the only    * 00054600
*          key allowed on the list form of MF and determines which    * 00054700
*          parameter list is generated.  The macro keys associated    * 00054800
*          with each supported version of the macro are listed in     * 00054900
*          MACRO USAGE NOTE 2.  Note that MAX may be specified        * 00055000
*          instead of a number, and the parameter list will be of the * 00055100
*          largest size currently supported. This size may grow from  * 00055200
*          release to release (thus possibly affecting the amount of  * 00055300
*          storage needed by your program).  If your program can      * 00055400
*          tolerate this, IBM recommends that you always specify MAX  * 00055500
*          when creating the list form parameter list as that will    * 00055600
*          ensure that the list form parameter list is always long    * 00055700
*          enough to hold whatever parameters might be specified on   * 00055800
*          the execute form.                                          * 00055900
*          DEFAULT: IMPLIED_VERSION.  When PLISTVER is omitted, the   * 00056000
*          default is the lowest version which allows all of the      * 00056100
*          parameters specified on the invocation to be processed.    * 00056200
*                                                                     * 00056300
*                                                                     * 00056400
*                                                                     * 00056500
*                                                                     * 00056600
*      ÝMF(»S!L!Eº)¨                                                  * 00056700
*          is an optional keyword input which specifies the macro     * 00056800
*          form.                                                      * 00056900
*          DEFAULT: S                                                 * 00057000
*                                                                     * 00057100
*                                                                     * 00057200
*          ÝMF(S)¨                                                    * 00057300
*              specifies the standard form of the macro.  The "S"     * 00057400
*              form generates code to put the parameters into the     * 00057500
*              parameter list and invoke the desired service.  Full   * 00057600
*              checking for required macro keys is done along with    * 00057700
*              supplying defaults for omitted optional parameters.    * 00057800
*              The ?EPILOG macro must be invoked at the end of the    * 00057900
*              module.                                                * 00058000
*                                                                     * 00058100
*              For assembly language code modules, the "S" form       * 00058200
*              generates code to put the parameters into an in-line   * 00058300
*              parameter list and invoke the desired service.  Full   * 00058400
*              checking for required macro keys is done along with    * 00058500
*              supplying defaults for omitted optional parameters.    * 00058600
*                                                                     * 00058700
*          ÝMF(L,xmfctrl»,xmfattr!BDY(DWORD)º)¨                       * 00058800
*              specifies the list form of the macro.  The "L" form    * 00058900
*              defines an area to be used for the parameter list.     * 00059000
*              Only the PLISTVER key may be specified on the          * 00059100
*              invocation.  All other macro parameters are flagged as * 00059200
*              errors.  If PLISTVER is not specified, the original    * 00059300
*              parameter list definition is used.                     * 00059400
*                                                                     * 00059500
*            ,xmfctrl                                                 * 00059600
*              is a required input.  It is the name of a storage area * 00059700
*              for the parameter list.                                * 00059800
*                                                                     * 00059900
*            »,xmfattr!BDY(DWORD)º                                    * 00060000
*              is an optional 60 character input string that varies   * 00060100
*              from 1 to 60 characters. Use it to force boundary      * 00060200
*              alignment of the parameter list. Use only 0F or 0D     * 00060300
*              (assembler-only).                                      * 00060400
*              DEFAULT: 0D for Assembler, BDY(DWORD) for PL/X, which  * 00060500
*              forces the parameter list to a doubleword boundary.    * 00060600
*                                                                     * 00060700
*          ÝMF(E,xmfctrl»,COMPLETEº)¨                                 * 00060800
*              specifies the execute form of the macro.  The "E" form * 00060900
*              generates code to put the parameters into the          * 00061000
*              parameter list specified by xmfctrl and provides full  * 00061100
*              syntax checking with default setting.                  * 00061200
*                                                                     * 00061300
*            ,xmfctrl                                                 * 00061400
*              is a required input.  It is the name (RS-type) (or     * 00061500
*              address in register (1)-(12) ASM only) of a storage    * 00061600
*              area for the parameter list.                           * 00061700
*                                                                     * 00061800
*            »,COMPLETEº                                              * 00061900
*              is an optional keyword input which specifies the       * 00062000
*              degree of macro parameter syntax checking.             * 00062100
*              DEFAULT: COMPLETE                                      * 00062200
*                                                                     * 00062300
*                                                                     * 00062400
*              COMPLETE                                               * 00062500
*                  Checking for required macro keys is done and       * 00062600
*                  defaults are supplied for omitted optional         * 00062700
*                  parameters.                                        * 00062800
*                                                                     * 00062900
*                                                                     * 00063000
*                                                                     * 00063100
*                                                                     * 00063200
*                                                                     * 00063300
*                                                                     * 00063400
*                                                                     * 00063500
*01* ABEND CODES:  None.                                              * 00063600
*                                                                     * 00063700
*01* RETURN CODES:                                                    * 00063800
*                                                                     * 00063900
*                                                                     * 00064000
*            0    Name: IwmRetCodeOk                                  * 00064100
*                                                                     * 00064200
*                 Meaning: Successful completion.                     * 00064300
*                                                                     * 00064400
*                 Action: None required.                              * 00064500
*                                                                     * 00064600
*            4    Name: IwmRetCodeWarning                             * 00064700
*                                                                     * 00064800
*                 Meaning: Successful completion, unusual conditions  * 00064900
*                 noted.                                              * 00065000
*                                                                     * 00065100
*                                                                     * 00065200
*                 HEX REASON  MEANING/ACTION                          * 00065300
*                 CODE                                                * 00065400
*                                                                     * 00065500
*                                                                     * 00065600
*                                                                     * 00065700
*            8    Name: IwmRetCodeInvocError                          * 00065800
*                                                                     * 00065900
*                 Meaning: Invalid invocation environment or          * 00066000
*                 parameters.                                         * 00066100
*                                                                     * 00066200
*                                                                     * 00066300
*                 HEX REASON  MEANING/ACTION                          * 00066400
*                 CODE                                                * 00066500
*                                                                     * 00066600
*                 xxxx0803    Name: IwmRsnCodeDisabled                * 00066700
*                                                                     * 00066800
*                             Meaning: Caller is disabled.            * 00066900
*                                                                     * 00067000
*                             Action: Avoid requesting this function  * 00067100
*                             while disabled.                         * 00067200
*                                                                     * 00067300
*                 xxxx0804    Name: IwmRsnCodeLocked                  * 00067400
*                                                                     * 00067500
*                             Meaning: Caller is locked.              * 00067600
*                                                                     * 00067700
*                             Action: Avoid requesting this function  * 00067800
*                             while locked.                           * 00067900
*                                                                     * 00068000
*                 xxxx0807    Name: IwmRsnCodeBadSTOKEN               * 00068100
*                                                                     * 00068200
*                             Meaning:  Bad STOKEN passed.            * 00068300
*                                                                     * 00068400
*                             Action: Check for possible storage      * 00068500
*                             overlay.                                * 00068600
*                                                                     * 00068700
*                 xxxx080B    Name: IwmRsnCodeBadPl                   * 00068800
*                                                                     * 00068900
*                             Meaning:  Error accessing parameter     * 00069000
*                             list.                                   * 00069100
*                                                                     * 00069200
*                             Action: Check for possible storage      * 00069300
*                             overlay.                                * 00069400
*                                                                     * 00069500
*                 xxxx0823    Name: IwmRsnCodeDatoff                  * 00069600
*                                                                     * 00069700
*                             Meaning: Caller invoked service while   * 00069800
*                             DATOFF                                  * 00069900
*                                                                     * 00070000
*                             Action: Avoid requesting this function  * 00070100
*                             in this environment.                    * 00070200
*                                                                     * 00070300
*                 xxxx0824    Name: IwmRsnCodeAmode24                 * 00070400
*                                                                     * 00070500
*                             Meaning: Caller invoked service but was * 00070600
*                             in 24 bit addressing mode.              * 00070700
*                                                                     * 00070800
*                             Action: Request this function only when * 00070900
*                             you are in 31 bit addressing mode.      * 00071000
*                                                                     * 00071100
*                 xxxx0825    Name: IwmRsnCodeAscModeNotPrimary       * 00071200
*                                                                     * 00071300
*                             Meaning: Caller invoked service but was * 00071400
*                             not DAT on Primary ASC mode.            * 00071500
*                                                                     * 00071600
*                             Action: Avoid requesting this function  * 00071700
*                             in this environment.                    * 00071800
*                                                                     * 00071900
*                 xxxx0828    Name: IwmRsnCodeBadVersion              * 00072000
*                                                                     * 00072100
*                             Meaning: Version number in parameter    * 00072200
*                             list or version length field is not     * 00072300
*                             valid.                                  * 00072400
*                                                                     * 00072500
*                             Action: Check for possible storage      * 00072600
*                             overlay of the parameter list.          * 00072700
*                                                                     * 00072800
*                                                                     * 00072900
*                                                                     * 00073000
*            C    Name: IwmRetCodeEnvError                            * 00073100
*                                                                     * 00073200
*                 Meaning: Environmental error.                       * 00073300
*                                                                     * 00073400
*                                                                     * 00073500
*                 HEX REASON  MEANING/ACTION                          * 00073600
*                 CODE                                                * 00073700
*                                                                     * 00073800
*                 xxxx0C01    Name: IwmRsnCodeNoStg                   * 00073900
*                                                                     * 00074000
*                             Meaning:  Storage is not available for  * 00074100
*                             the request.                            * 00074200
*                                                                     * 00074300
*                             Action: There is a storage shortage.    * 00074400
*                             The function may work successfully at a * 00074500
*                             later time.                             * 00074600
*                                                                     * 00074700
*                                                                     * 00074800
*                                                                     * 00074900
*            10   Name: IwmRetCodeCompError                           * 00075000
*                                                                     * 00075100
*                 Meaning: Component error.                           * 00075200
*                                                                     * 00075300
*                 Action: No action required.  The function may be    * 00075400
*                 successful if invoked again.                        * 00075500
*                                                                     * 00075600
*                                                                     * 00075700
*                                                                     * 00075800
*01* REASON CODES:                                                    * 00075900
*                                                                     * 00076000
*       A unique reason code will be returned whenever the return     * 00076100
*       code is non-zero.  Reason codes, as appropriate, are defined  * 00076200
*       under their corresponding return code.  Reason code and       * 00076300
*       return code constants are defined within IWMYCON.  Note that  * 00076400
*       the high order halfword of register 0, and the reason code    * 00076500
*       variable when specified, may be non-zero and represents       * 00076600
*       diagnostic data which is NOT part of the external interface.  * 00076700
*       The high order halfword should thus be excluded from          * 00076800
*       comparison with the reason code values described above.  The  * 00076900
*       constant, IWMRSNCODE_MASK_CONST defined in IWMYCON, may be    * 00077000
*       used for this purpose.                                        * 00077100
*                                                                     * 00077200
*01* MODULE TYPE:  ASSEM-PL/X MACRO                                   * 00077300
*                                                                     * 00077400
*02*   PROCESSOR:  ASSEM-PL/X                                         * 00077500
*                                                                     * 00077600
*01* COMPONENT:  SCWLM                                                * 00077700
*                                                                     * 00077800
*01* DISTRIBUTION LIBRARY: AMACLIB                                    * 00077900
*                                                                     * 00078000
*01* EXAMPLES:                                                        * 00078100
*                                                                     * 00078200
*    To get the recommendation values for a given server:             * 00078300
*                                                                     * 00078400
*               IWM4SRSC STOKEN=STKN,                                 * 00078500
*                        WEIGHT=WGHT,                                 * 00078600
*                        ABNORM_COUNT=ABCNT,                          * 00078700
*                        HEALTH=HLTH,                                 * 00078800
*                        RETCODE=RC,RSNCODE=RSN                       * 00078900
*      *                                                              * 00079000
*      * Storage areas                                                * 00079100
*      *                                                              * 00079200
*      STKN     DS    CL8             Contains the STOKEN             * 00079300
*      *                              associated with the address     * 00079400
*      *                              space                           * 00079500
*      WGHT     DS    F               Field to receive the weight     * 00079600
*      ABCNT    DS    F               Field to receive the Abnormal C * 00079700
*      ount                                                           * 00079800
*      HLTH     DS    F               Field to receive the Health Ind * 00079900
*      icator                                                         * 00080000
*      RC       DS    F               Return code                     * 00080100
*      RSN      DS    F               Reason code                     * 00080200
*                                                                     * 00080300
*                                                                     * 00080400
*01* MACRO USAGE NOTES:                                               * 00080500
*                                                                     * 00080600
*                                                                     * 00080700
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00080800
*        global macro variable.  Any value other than 'NO' will       * 00080900
*        result in the macro expansion being printed.  The default is * 00081000
*        'YES'.  The following examples illustrate how the ZPRINT     * 00081100
*        variable should be set.                                      * 00081200
*                                                                     * 00081300
*                    GBLC &ZPRINT                                     * 00081400
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00081500
*                                                                     * 00081600
*                                                                     * 00081700
*    2.  The IWM4SRSC macro supports multiple versions. The macro key * 00081800
*        list  below  contains the version level in which the key was * 00081900
*        first  introduced.  Positionals  are  identified by the word * 00082000
*        'Positional'  followed by the numeric value of its position. * 00082100
*        Nested  positionals  are  preceded  by their outer key.  The * 00082200
*        lowest value represents the original version and the highest * 00082300
*        value  represents  the  most  recent version of the IWM4SRSC * 00082400
*        macro.    When  specifying  PLISTVER,  be sure that it is at * 00082500
*        least  as high as the highest version number of all the keys * 00082600
*        being used.                                                  * 00082700
*                                                                     * 00082800
*        VERSION   KEY                                                * 00082900
*                                                                     * 00083000
*              0      STOKEN                                          * 00083100
*                     WEIGHT                                          * 00083200
*              1      ABNORM_COUNT                                    * 00083300
*                     HEALTH                                          * 00083400
*              2      CPUPROPORTION                                   * 00083500
*                     CPUWEIGHT                                       * 00083600
*                     ZAAPPROPORTION                                  * 00083700
*                     ZAAPWEIGHT                                      * 00083800
*                     ZIIPPROPORTION                                  * 00083900
*                     ZIIPWEIGHT                                      * 00084000
*              3      MAXSRVUNITS                                     * 00084100
*              4      COST_ZAAP_ON_CP                                 * 00084200
*                     COST_ZIIP_ON_CP                                 * 00084300
*                     IL_WEIGHTING                                    * 00084400
*                     MAXEQUIVUNITS                                   * 00084500
*                     METHOD                                          * 00084600
*                                                                     * 00084700
*                                                                     * 00084800
*                                                                     * 00084900
*01* CHANGE ACTIVITY:                                                 * 00085000
*                                                                     * 00085100
*   Flag LineItem  FMID    Date   ID    Comment                       * 00085200
*                                                                     * 00085300
*    $L0=WLMPSRC  HBB7720 040315 3241NN:  Server Specific Load        * 00085400
*                                         Balancing.                  * 00085500
*    $P1=ME02195  HBB7720 041030 3241NN:  Suppress abnormal_count     * 00085600
*                                         references (waits for new   * 00085700
*                                         design).                    * 00085800
*    $P2=WLMPSTR  HBB7730 050816 3241NN:  Enable abnormal_count and   * 00085900
*                                         include Health Parameter    * 00086000
*    $P3=LZAAP3A  HBB7740 060630 3241NN:  New optional parms          * 00086100
*                                         CPUWEIGHT, ZAAPWEIGHT,      * 00086200
*                                         ZIIPWEIGHT. 043E removed.   * 00086300
*    $P4=LZIIP2A  HBB7750 070611 3241AK:  New optional parm           * 00086400
*                                         MAXSRVUNITS                 * 00086500
*    $P5=LENHRTA  HBB7760 080420 3241NN:  New optional parameters     * 00086600
*                                         METHOD, COST_ZAAP_ON_CP,    * 00086700
*                                         COST_ZIIP_ON_CP,            * 00086800
*                                         MAXEQUIVUNITS and           * 00086900
*                                         IL_WEIGHTING.               * 00087000
*    $P6=ME15836  HBB7760 090323 3241NN:  Synchronization with WLM    * 00087100
*                                         services book.  Correcting  * 00087200
*                                         descriptions of macro and   * 00087300
*                                         parameters METHOD,          * 00087400
*                                         COST_ZAAP_ON_CP,            * 00087500
*                                         COST_ZIIP_ON_CP and         * 00087600
*                                         IL_WEIGHTING.               * 00087700
****** END OF SPECIFICATIONS *****************************************/ 00087800
*/********************************************************************* 00087900
         MACRO                                                          00088000
&XLABEL  IWM4SRSC &WEIGHT=,&STOKEN=,&ABNORM_COUNT=,&HEALTH=,           *00088100
               &CPUWEIGHT=,&ZAAPWEIGHT=,&ZIIPWEIGHT=,&CPUPROPORTION=,  *00088200
               &ZAAPPROPORTION=,&ZIIPPROPORTION=,&MAXSRVUNITS=,        *00088300
               &METHOD=,&COST_ZAAP_ON_CP=,&COST_ZIIP_ON_CP=,           *00088400
               &MAXEQUIVUNITS=,&IL_WEIGHTING=,&RETCODE=,&RSNCODE=,     *00088500
               &PLISTVER=,&MF=                                          00088600
.*                                                                      00088700
*                     MACDATE -09/03/23-<4>                             00088800
.*                                                                      00088900
.*******************************************************************    00089000
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00089100
.*******************************************************************    00089200
                     GBLC  &ZPRINT     YES=PRINT NO=NO PRINT            00089300
                     GBLC  &ZTEST      YES=TEST NO=NO TEST              00089400
                     GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX      00089500
.*                                                                      00089600
                     GBLC  &ZIWM4SRSC  YES=MACRO USED AT LEAST ONCE     00089700
.*******************************************************************    00089800
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00089900
.*******************************************************************    00090000
                     LCLC  &ZMS        ERROR MESSAGE WORK AREA          00090100
                     LCLC  &ZCNDX      SYSNDX CHARACTERS                00090200
                     LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED       00090300
                     LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR      00090400
                     LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE      00090500
                     LCLA  &ZAWRK      USED AS A WORK AREA              00090600
                     LCLA  &ZASIZ      USED FOR SIZE OF VALUE           00090700
                     LCLA  &ZN         NUMERIC WORK VARIABLE            00090800
                     LCLC  &ZC         CHARACTER WORK VARIABLE          00090900
                     LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE      00091000
                     LCLA  &ZTLA       VALUE TOO LONG VARIABLE          00091100
                     LCLC  &ZMAC_G     "G" or null                      00091200
&ZMAC_G              SETC  ''                                           00091300
                     LCLC  &ZMAC_LR                                     00091400
&ZMAC_LR             SETC  'LR'                                         00091500
                     LCLC  &ZMAC_L                                      00091600
&ZMAC_L              SETC  'L'                                          00091700
                     LCLC  &ZMAC_ST                                     00091800
&ZMAC_ST             SETC  'ST'                                         00091900
                     LCLC  &ZMAC_LLGT                                   00092000
&ZMAC_LLGT           SETC  'L'                                          00092100
                     LCLC  &ZMAC_LGR                                    00092200
&ZMAC_LGR            SETC  'LR'                                         00092300
                     LCLC  &ZMAC_LG                                     00092400
&ZMAC_LG             SETC  'L'                                          00092500
                     LCLC  &ZMAC_STG                                    00092600
&ZMAC_STG            SETC  'ST'                                         00092700
                     LCLA  &ZMACRET    MACRO RETURN CODE                00092800
&ZMACRET             SETA  0           ASSUME NO ERRORS                 00092900
.*                                                                      00093000
                     LCLC  &ZCSYSLIST(255)      NONXKEY, POS ARRAY      00093100
                     LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()       00093200
                     LCLA  &ZPLLEN     PARAMETER LIST LENGTH            00093300
                     LCLC  &ZENDBASEPL          End of base PL          00093400
                     LCLA  &ZPLWORKA   PARAMETER LIST LENGTH            00093500
.*******************************************************************    00093600
.***AB.04  MACRO VARIABLES FOR RANGES AND SETS OF ARGUMENTS             00093700
.*******************************************************************    00093800
                     LCLA  &ZI         INDEX FOR ARRAY                  00093900
                     LCLA  &ZJ         INDEX FOR PARMS                  00094000
                     LCLA  &ZK         INDEX FOR PARSE                  00094100
                     LCLA  &ZLO        LOW RANGE VALUE                  00094200
                     LCLA  &ZHI        HIGH RANGE VALUE                 00094300
                     LCLC  &ZW         WORK AREA FOR PARM               00094400
.********************************************************************   00094500
.***AB.05  INVOKE MVS MACROS TO CONTROL CODE GENERATION                 00094600
.********************************************************************   00094700
                     GBLC  &SYSSPLV    SP LEVEL 1,2,3 -SPLEVEL          00094800
                     GBLC  &SYSASCE    SYSTEM STATE P ANY AR-SYSSTATE   00094900
                     GBLA  &SYSALVL    SYSSTATE ARCHLVL                 00095000
                     GBLC  &SYSAM64    SYSSTATE AMODE64                 00095100
.*                                                                      00095200
                     AIF   (K'&SYSASCE GT 0).ZSYS4  SYS STATE DEFINED   00095300
                     AIF   (K'&SYSSPLV GT 0).ZSYS2  SP LEVEL DEFINED    00095400
                     SPLEVEL  TEST                                      00095500
.ZSYS2               ANOP  ,                                            00095600
                     AIF   ('&SYSSPLV' EQ '1').ZSYS3  PRE SP 3.1        00095700
                     AIF   ('&SYSSPLV' EQ '2').ZSYS3  PRE SP 3.1        00095800
                     SYSSTATE TEST                                      00095900
                     AGO   .ZSYS4                                       00096000
.ZSYS3               ANOP  ,                                            00096100
&SYSASCE             SETC  'P'         ASSUME SYSSTATE PRIMARY          00096200
.ZSYS4               ANOP  ,                                            00096300
                     AIF   ('&SYSAM64' NE 'YES').ZSYSN64                00096400
&ZMAC_LLGT           SETC 'LLGT'                                        00096500
&ZMAC_LGR            SETC 'LGR'                                         00096600
&ZMAC_LG             SETC 'LG'                                          00096700
&ZMAC_STG            SETC 'STG'                                         00096800
.ZSYSN64             ANOP  ,                                            00096900
                     AIF   (&SYSALVL LE 1).ZSYS4A                       00097000
&ZMAC_G              SETC 'G'                                           00097100
&ZMAC_LR             SETC 'LGR'                                         00097200
&ZMAC_L              SETC 'LG'                                          00097300
&ZMAC_ST             SETC 'STG'                                         00097400
.ZSYS4A              ANOP  ,                                            00097500
.*******************************************************************    00097600
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00097700
.*******************************************************************    00097800
                     LCLC  &XWEIGHT    ++ NAME                          00097900
                     LCLC  &XSTOKEN    ++ NAME                          00098000
                     LCLC  &XABNORM_COUNT       ++ NAME                 00098100
                     LCLC  &XHEALTH    ++ NAME                          00098200
                     LCLC  &XCPUWEIGHT          ++ NAME                 00098300
                     LCLC  &XZAAPWEIGHT         ++ NAME                 00098400
                     LCLC  &XZIIPWEIGHT         ++ NAME                 00098500
                     LCLC  &XCPUPROPORTION      ++ NAME                 00098600
                     LCLC  &XZAAPPROPORTION     ++ NAME                 00098700
                     LCLC  &XZIIPPROPORTION     ++ NAME                 00098800
                     LCLC  &XMAXSRVUNITS        ++ NAME                 00098900
                     LCLC  &XMETHOD    ++ VALUE                         00099000
                     LCLC  &XCOST_ZAAP_ON_CP    ++ NAME                 00099100
                     LCLC  &XCOST_ZIIP_ON_CP    ++ NAME                 00099200
                     LCLC  &XMAXEQUIVUNITS      ++ NAME                 00099300
                     LCLC  &XIL_WEIGHTING       ++ NAME                 00099400
                     LCLC  &XRETCODE   ++ NAME                          00099500
                     LCLC  &XRSNCODE   ++ NAME                          00099600
                     LCLA  &XPLISTVER  ++ VALUE                         00099700
                     LCLC  &XMF        ++ VALUE                         00099800
                     LCLC  &XMFCTRL    ++ NAME                          00099900
                     LCLC  &XMFATTR    ++ VALUE                         00100000
                     LCLC  &XMFSCK     ++ VALUE                         00100100
.*******************************************************************    00100200
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00100300
.*******************************************************************    00100400
                     LCLC  &ZXWEIGHT   ++ OUTPUT NAME                   00100500
                     LCLC  &ZXSTOKEN   ++ INPUT NAME                    00100600
                     LCLC  &ZXABNORM_COUNT      ++ OUTPUT NAME          00100700
                     LCLC  &ZXHEALTH   ++ OUTPUT NAME                   00100800
                     LCLC  &ZXCPUWEIGHT         ++ OUTPUT NAME          00100900
                     LCLC  &ZXZAAPWEIGHT        ++ OUTPUT NAME          00101000
                     LCLC  &ZXZIIPWEIGHT        ++ OUTPUT NAME          00101100
                     LCLC  &ZXCPUPROPORTION     ++ OUTPUT NAME          00101200
                     LCLC  &ZXZAAPPROPORTION    ++ OUTPUT NAME          00101300
                     LCLC  &ZXZIIPPROPORTION    ++ OUTPUT NAME          00101400
                     LCLC  &ZXMAXSRVUNITS       ++ OUTPUT NAME          00101500
                     LCLC  &ZXMETHOD   ++ INPUT VALUE                   00101600
                     LCLC  &ZXCOST_ZAAP_ON_CP   ++ INPUT NAME           00101700
                     LCLC  &ZXCOST_ZIIP_ON_CP   ++ INPUT NAME           00101800
                     LCLC  &ZXMAXEQUIVUNITS     ++ OUTPUT NAME          00101900
                     LCLC  &ZXIL_WEIGHTING      ++ INPUT NAME           00102000
                     LCLC  &ZXRETCODE  ++ OUTPUT NAME                   00102100
                     LCLC  &ZXRSNCODE  ++ OUTPUT NAME                   00102200
                     LCLC  &ZXPLISTVER          ++ INPUT VALUE          00102300
                     LCLC  &ZXMF       ++ INPUT VALUE                   00102400
                     LCLC  &ZXMFCTRL   ++ INPUT NAME                    00102500
                     LCLC  &ZXMFATTR   ++ INPUT VALUE                   00102600
                     LCLC  &ZXMFSCK    ++ INPUT VALUE                   00102700
.********************************************************************   00102800
.***AC.PLV01  PROCESS PLISTVER                                      *   00102900
.********************************************************************   00103000
&XPLISTVER      SETA  0                                                 00103100
                AIF   (K'&PLISTVER(1) LE 0).ZPLV0                       00103200
                AIF   ('&PLISTVER(1)' NE 'MAX').ZPLV0                   00103300
&XPLISTVER      SETA  4                                                 00103400
.ZPLV0          ANOP  ,                                                 00103500
.*                                                                      00103600
                AIF   ('&ABNORM_COUNT' EQ '').ZPLV1E                    00103700
                AIF   (&XPLISTVER GE 1).ZPLV1E                          00103800
&XPLISTVER      SETA  1                                                 00103900
.ZPLV1E         ANOP  ,                                                 00104000
.*                                                                      00104100
                AIF   ('&HEALTH' EQ '').ZPLV2E                          00104200
                AIF   (&XPLISTVER GE 1).ZPLV2E                          00104300
&XPLISTVER      SETA  1                                                 00104400
.ZPLV2E         ANOP  ,                                                 00104500
.*                                                                      00104600
                AIF   ('&CPUWEIGHT' EQ '').ZPLV3E                       00104700
                AIF   (&XPLISTVER GE 2).ZPLV3E                          00104800
&XPLISTVER      SETA  2                                                 00104900
.ZPLV3E         ANOP  ,                                                 00105000
.*                                                                      00105100
                AIF   ('&ZAAPWEIGHT' EQ '').ZPLV4E                      00105200
                AIF   (&XPLISTVER GE 2).ZPLV4E                          00105300
&XPLISTVER      SETA  2                                                 00105400
.ZPLV4E         ANOP  ,                                                 00105500
.*                                                                      00105600
                AIF   ('&ZIIPWEIGHT' EQ '').ZPLV5E                      00105700
                AIF   (&XPLISTVER GE 2).ZPLV5E                          00105800
&XPLISTVER      SETA  2                                                 00105900
.ZPLV5E         ANOP  ,                                                 00106000
.*                                                                      00106100
                AIF   ('&CPUPROPORTION' EQ '').ZPLV6E                   00106200
                AIF   (&XPLISTVER GE 2).ZPLV6E                          00106300
&XPLISTVER      SETA  2                                                 00106400
.ZPLV6E         ANOP  ,                                                 00106500
.*                                                                      00106600
                AIF   ('&ZAAPPROPORTION' EQ '').ZPLV7E                  00106700
                AIF   (&XPLISTVER GE 2).ZPLV7E                          00106800
&XPLISTVER      SETA  2                                                 00106900
.ZPLV7E         ANOP  ,                                                 00107000
.*                                                                      00107100
                AIF   ('&ZIIPPROPORTION' EQ '').ZPLV8E                  00107200
                AIF   (&XPLISTVER GE 2).ZPLV8E                          00107300
&XPLISTVER      SETA  2                                                 00107400
.ZPLV8E         ANOP  ,                                                 00107500
.*                                                                      00107600
                AIF   ('&MAXSRVUNITS' EQ '').ZPLV9E                     00107700
                AIF   (&XPLISTVER GE 3).ZPLV9E                          00107800
&XPLISTVER      SETA  3                                                 00107900
.ZPLV9E         ANOP  ,                                                 00108000
.*                                                                      00108100
                AIF   ('&METHOD' EQ '').ZPLV10E                         00108200
                AIF   (&XPLISTVER GE 4).ZPLV10E                         00108300
&XPLISTVER      SETA  4                                                 00108400
.ZPLV10E        ANOP  ,                                                 00108500
.*                                                                      00108600
                AIF   ('&COST_ZAAP_ON_CP' EQ '').ZPLV11E                00108700
                AIF   (&XPLISTVER GE 4).ZPLV11E                         00108800
&XPLISTVER      SETA  4                                                 00108900
.ZPLV11E        ANOP  ,                                                 00109000
.*                                                                      00109100
                AIF   ('&COST_ZIIP_ON_CP' EQ '').ZPLV12E                00109200
                AIF   (&XPLISTVER GE 4).ZPLV12E                         00109300
&XPLISTVER      SETA  4                                                 00109400
.ZPLV12E        ANOP  ,                                                 00109500
.*                                                                      00109600
                AIF   ('&MAXEQUIVUNITS' EQ '').ZPLV13E                  00109700
                AIF   (&XPLISTVER GE 4).ZPLV13E                         00109800
&XPLISTVER      SETA  4                                                 00109900
.ZPLV13E        ANOP  ,                                                 00110000
.*                                                                      00110100
                AIF   ('&IL_WEIGHTING' EQ '').ZPLV14E                   00110200
                AIF   (&XPLISTVER GE 4).ZPLV14E                         00110300
&XPLISTVER      SETA  4                                                 00110400
.ZPLV14E        ANOP  ,                                                 00110500
.*                                                                      00110600
                AIF   (K'&PLISTVER(1) LE 0).ZPVCKE                      00110700
                AIF   ('&PLISTVER(1)' EQ 'IMPLIED_VERSION').ZPVCKE      00110800
                AIF   ('&PLISTVER(1)' EQ 'MAX').ZPVCKE                  00110900
.*-------------------------------------------------------------------   00111000
                AIF   (N'&PLISTVER LE 1).ZPVCK3  CK NUM                 00111100
&ZMS            SETC  '"PLISTVER='                                      00111200
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00111300
&ZMS            SETC  '&ZMS "PLISTVER"'                                 00111400
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00111500
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00111600
                AGO   .ZPVCK2                                           00111700
.ZPVCK3         ANOP  ,                                                 00111800
.*-------------------------------------------------------------------   00111900
                AIF   ('&PLISTVER'(1,1) NE '(').ZPVCK2                  00112000
&ZMS            SETC  '"PLISTVER='                                      00112100
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00112200
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00112300
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00112400
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00112500
                AGO   .ZPVCKE                                           00112600
.ZPVCK2         ANOP  ,                                                 00112700
.*-------------------------------------------------------------------   00112800
&ZCVAL          SETC  '&PLISTVER(1)'                                    00112900
                AIF   ('&ZCVAL'(1,1) EQ '(').ZPVCKE  IN GPR             00113000
                AIF   (T'&ZCVAL NE 'N').ZPVCK6  NUMERIC ERR             00113100
&ZN             SETA   &PLISTVER(1)        CONVERT TO ARITHMETIC        00113200
                AIF   (&ZN LT 0).ZPVCK6    TOO LOW                      00113300
                AIF   (&ZN LE 4).ZPVCK4A   NOT HIGH                     00113400
.ZPVCK6         ANOP  ,                                                 00113500
&ZMS            SETC  '"PLISTVER='                                      00113600
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00113700
&ZMS            SETC  '&ZMS THE RANGE IS "0-4"'                         00113800
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00113900
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00114000
&XPLISTVER      SETA  4                                                 00114100
                AGO   .ZPVCKE                                           00114200
.*-------------------------------------------------------------------   00114300
.ZPVCK4A        ANOP  ,                                                 00114400
                AIF   (&ZN GE &XPLISTVER).ZPVCK4                        00114500
&ZMS            SETC  'PLISTVER='                                       00114600
&ZMS            SETC  '&ZMS.&PLISTVER(1)'                               00114700
&ZMS            SETC  '&ZMS., BUT PLISTVER OF'                          00114800
&ZMS            SETC  '&ZMS &XPLISTVER'                                 00114900
                MNOTE 8,' &ZMS IS REQUIRED.'                            00115000
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00115100
                AGO   .ZPVCK5                                           00115200
.ZPVCK4         ANOP  ,                                                 00115300
&XPLISTVER      SETA  &PLISTVER(1)                                      00115400
.ZPVCK5         ANOP  ,                                                 00115500
.ZPVCKE         ANOP  ,                                                 00115600
.********************************************************************   00115700
.***AG.MF01 PROCESS MF MACRO FORMS                                      00115800
.********************************************************************   00115900
                     ACTR  10000                                        00116000
.*------------------------------------------------------------------    00116100
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00116200
&XMF                 SETC  ''          INITIALIZE XVARIABLE             00116300
.*-------------------------------------------------------------------   00116400
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00116500
.ZG62                ANOP  ,                                            00116600
&ZTLC                SETC 'S'                                           00116700
                     AIF   ('&MF(1)' NE '&ZTLC').ZG63                   00116800
&XMF                 SETC  'S'         SET KEYWORD                      00116900
                     AIF   (N'&MF LE 1).ZG62A   CK NUM                  00117000
&ZMS                 SETC  '"MF='                                       00117100
&ZMS                 SETC  '&ZMS.&MF"'                                  00117200
&ZMS                 SETC  '&ZMS "MF"'                                  00117300
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00117400
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00117500
.ZG62A               ANOP  ,                                            00117600
.*-------------------------------------------------------------------   00117700
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00117800
.ZG63                ANOP  ,                                            00117900
&ZTLC                SETC 'L'                                           00118000
                     AIF   ('&MF(1)' NE '&ZTLC').ZG70                   00118100
&XMF                 SETC  'L'         SET KEYWORD                      00118200
                     AIF   (N'&MF LE 3).ZG63A   CK NUM                  00118300
&ZMS                 SETC  '"MF='                                       00118400
&ZMS                 SETC  '&ZMS.&MF"'                                  00118500
&ZMS                 SETC  '&ZMS "MF"'                                  00118600
                     MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'         00118700
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00118800
.ZG63A               ANOP  ,                                            00118900
.*-------------------------------------------------------------------   00119000
.***AG.KKCTL08 -MF(L) SPECIAL CHECK                                     00119100
                     AIF   (N'&SYSLIST NE 0).ZG63B  POSITIONALS?        00119200
                     AIF   ('&WEIGHT' NE '').ZG63B  KEYS?               00119300
                     AIF   ('&STOKEN' NE '').ZG63B  KEYS?               00119400
                     AIF   ('&ABNORM_COUNT' NE '').ZG63B  KEYS?         00119500
                     AIF   ('&HEALTH' NE '').ZG63B  KEYS?               00119600
                     AIF   ('&CPUWEIGHT' NE '').ZG63B  KEYS?            00119700
                     AIF   ('&ZAAPWEIGHT' NE '').ZG63B  KEYS?           00119800
                     AIF   ('&ZIIPWEIGHT' NE '').ZG63B  KEYS?           00119900
                     AIF   ('&CPUPROPORTION' NE '').ZG63B  KEYS?        00120000
                     AIF   ('&ZAAPPROPORTION' NE '').ZG63B  KEYS?       00120100
                     AIF   ('&ZIIPPROPORTION' NE '').ZG63B  KEYS?       00120200
                     AIF   ('&MAXSRVUNITS' NE '').ZG63B  KEYS?          00120300
                     AIF   ('&METHOD' NE '').ZG63B  KEYS?               00120400
                     AIF   ('&COST_ZAAP_ON_CP' NE '').ZG63B  KEYS?      00120500
                     AIF   ('&COST_ZIIP_ON_CP' NE '').ZG63B  KEYS?      00120600
                     AIF   ('&MAXEQUIVUNITS' NE '').ZG63B  KEYS?        00120700
                     AIF   ('&IL_WEIGHTING' NE '').ZG63B  KEYS?         00120800
                     AIF   ('&RETCODE' NE '').ZG63B  KEYS?              00120900
                     AIF   ('&RSNCODE' NE '').ZG63B  KEYS?              00121000
                     AGO    .ZG63C     INVOCATION OKAY                  00121100
.ZG63B               ANOP  ,                                            00121200
&ZMS                 SETC  'THE "L" FORM OF "MF"'                       00121300
&ZMS                 SETC  '&ZMS CAN ONLY HAVE'                         00121400
&ZMS                 SETC  '&ZMS THE "PLISTVER" KEY'                    00121500
                     MNOTE 8,' &ZMS SPECIFIED ON THE INVOCATION.'       00121600
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00121700
.ZG63C               ANOP  ,                                            00121800
.*-------------------------------------------------------------------   00121900
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00122000
&ZXMFCTRL            SETC  'INPUT'     SET IN/OUTPUT                    00122100
&XMFCTRL             SETC  '&MF(2,1)'  SET XVARIABLE                    00122200
                     AIF   (N'&MF(2) GT 1).ZG65B  MULTI                 00122300
&XMFCTRL             SETC  '&MF(2)'    SET XVARIABLE                    00122400
.ZG65B               AIF   (K'&MF(2) GT 0).ZG65C                        00122500
&ZXMFCTRL            SETC  ''          RESET IN/OUTPUT                  00122600
&ZMS                 SETC  'WHEN "L" IS SPECIFIED'                      00122700
&ZMS                 SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'          00122800
                     MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                 00122900
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00123000
.ZG65C               ANOP  ,                                            00123100
.*-------------------------------------------------------------------   00123200
.***AG.KCK01 NAME, OPT RQD INPUT, POS(2) -GPR NOT ALLOWED               00123300
                     AIF   (K'&ZXMFCTRL LE 0).ZG65P  NOT I/O            00123400
                     AIF   ('&XMFCTRL'(1,1) NE '(').ZG65P               00123500
&ZXMFCTRL            SETC  ''          RESET IN/OUTPUT                  00123600
&ZMS                 SETC  '"MF='                                       00123700
&ZMS                 SETC  '&ZMS.&MF"'                                  00123800
&ZMS                 SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'    00123900
                     MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 2.'            00124000
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00124100
.ZG65P               ANOP  ,                                            00124200
.*-------------------------------------------------------------------   00124300
.***AG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE                      00124400
&ZXMFATTR            SETC  'INPUT'     SET IN/OUTPUT                    00124500
&XMFATTR             SETC  '0D'                                         00124600
                     AIF   (K'&MF(3) LE 0).ZG68B  PARM                  00124700
&XMFATTR             SETC  '&MF(3,1)'  SET XVARIABLE                    00124800
                     AIF   (N'&MF(3) GT 1).ZG68B  MULTI                 00124900
&XMFATTR             SETC  '&MF(3)'    SET XVARIABLE                    00125000
.ZG68B               ANOP  ,                                            00125100
.*-------------------------------------------------------------------   00125200
.***AG.KCK01 VALUE, OPT INPUT, POS(3) -GPR NOT ALLOWED                  00125300
                     AIF   (K'&ZXMFATTR LE 0).ZG68P  NOT I/O            00125400
                     AIF   ('&XMFATTR'(1,1) NE '(').ZG68P               00125500
&ZXMFATTR            SETC  ''          RESET IN/OUTPUT                  00125600
&ZMS                 SETC  '"MF='                                       00125700
&ZMS                 SETC  '&ZMS.&MF"'                                  00125800
&ZMS                 SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'    00125900
                     MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 3.'            00126000
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00126100
.ZG68P               ANOP  ,                                            00126200
.*-------------------------------------------------------------------   00126300
.***AG.KCK03 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH                 00126400
                     AIF   (K'&ZXMFATTR LE 0).ZG68S  NOT I/O            00126500
                     AIF   (K'&XMFATTR LE 60).ZG68S  LNG OK             00126600
&ZXMFATTR            SETC  ''          RESET IN/OUTPUT                  00126700
&ZMS                 SETC  '"MF='                                       00126800
&ZMS                 SETC  '&ZMS.&MF"'                                  00126900
&ZMS                 SETC  '&ZMS ARGUMENT 3 EXCEEDS THE MAXIMUM'        00127000
                     MNOTE 8,' &ZMS LENGTH OF 60 CHARACTERS.'           00127100
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00127200
.ZG68S               ANOP  ,                                            00127300
.*-------------------------------------------------------------------   00127400
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00127500
.ZG70                ANOP  ,                                            00127600
&ZTLC                SETC 'E'                                           00127700
                     AIF   ('&MF(1)' NE '&ZTLC').ZG78                   00127800
&XMF                 SETC  'E'         SET KEYWORD                      00127900
                     AIF   (N'&MF LE 3).ZG70A   CK NUM                  00128000
&ZMS                 SETC  '"MF='                                       00128100
&ZMS                 SETC  '&ZMS.&MF"'                                  00128200
&ZMS                 SETC  '&ZMS "MF"'                                  00128300
                     MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'         00128400
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00128500
.ZG70A               ANOP  ,                                            00128600
.*-------------------------------------------------------------------   00128700
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00128800
&ZXMFCTRL            SETC  'INPUT'     SET IN/OUTPUT                    00128900
&XMFCTRL             SETC  '&MF(2,1)'  SET XVARIABLE                    00129000
                     AIF   (N'&MF(2) GT 1).ZG72B  MULTI                 00129100
&XMFCTRL             SETC  '&MF(2)'    SET XVARIABLE                    00129200
.ZG72B               AIF   (K'&MF(2) GT 0).ZG72C                        00129300
&ZXMFCTRL            SETC  ''          RESET IN/OUTPUT                  00129400
&ZMS                 SETC  'WHEN "E" IS SPECIFIED'                      00129500
&ZMS                 SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'          00129600
                     MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                 00129700
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00129800
.ZG72C               ANOP  ,                                            00129900
.*-------------------------------------------------------------------   00130000
.***AG.KCK02 NAME, OPT RQD INPUT, POS(2) -GPR OUT OF RANGE              00130100
                     AIF   (K'&ZXMFCTRL LE 0).ZG72R  NOT I/O            00130200
                     AIF   ('&XMFCTRL'(1,1) NE '(').ZG72R               00130300
&ZCGPR               SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)                   00130400
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG72P                 00130500
                     AIF   (K'&ZCGPR GT 2).ZG72Q                        00130600
                     AIF   ('&ZCGPR' EQ '0').ZG72Q                      00130700
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00130800
                     AIF   (T'&ZCGPR NE 'N').ZG72Q  INVALID REG NAME    00130900
.ZG72P               ANOP  ,                                            00131000
                     AIF   (T'&ZCGPR NE 'N').ZG72R  NON NUMERIC         00131100
                     AIF   ('&ZCGPR' LT '1').ZG72Q                      00131200
                     AIF   ('&ZCGPR' LE '12').ZG72R                     00131300
.ZG72Q               ANOP  ,                                            00131400
&ZMS                 SETC  '"MF='                                       00131500
&ZMS                 SETC  '&ZMS.&MF"'                                  00131600
&ZMS                 SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'    00131700
                     MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'             00131800
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00131900
.ZG72R               ANOP  ,                                            00132000
.*-------------------------------------------------------------------   00132100
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00132200
&XMFSCK              SETC  ''          INITIALIZE XVARIABLE             00132300
.ZG76A   AIF   ('&MF(3)' NE 'COMPLETE').ZG77A                           00132400
&XMFSCK              SETC  'COMPLETE'  SET KEYWORD                      00132500
.*-------------------------------------------------------------------   00132600
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00132700
.ZG77A               AIF   (K'&XMFSCK GT 0).ZG77C  KEYWORD              00132800
                     AIF   (K'&MF(3) LE 0).ZG77B                        00132900
&ZMS                 SETC  '"MF='                                       00133000
&ZMS                 SETC  '&ZMS.&MF"'                                  00133100
&ZMS                 SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '    00133200
&ZMS                 SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'          00133300
&ZMS                 SETC  '&ZMS "COMPLETE".'                           00133400
                     MNOTE 8,' &ZMS '                                   00133500
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00133600
.ZG77B               ANOP  ,                                            00133700
&XMFSCK              SETC  'COMPLETE'  SET DEFAULT KEYWORD              00133800
.ZG77C               ANOP  ,                                            00133900
&ZXMFSCK             SETC  'INPUT'     SET IN/OUTPUT                    00134000
.*------------------------------------------------------------------    00134100
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00134200
.ZG78                ANOP  ,                                            00134300
&ZXMF                SETC  'INPUT'     SET IN/OUTPUT                    00134400
                     AIF   (K'&XMF GT 0).ZG78E  VALID ARG               00134500
                     AIF   (T'&MF EQ 'O').ZG78D  OMITTED                00134600
&ZASYSLNDX           SETA  0                                            00134700
.ZG78A               ANOP  ,           POSITIONAL MACRO KEY             00134800
&ZASYSLNDX           SETA  &ZASYSLNDX+1                                 00134900
                     AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG78C             00135000
&ZTLC                SETC 'MF'                                          00135100
                     AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG78A    00135200
.ZG78B               ANOP  ,                                            00135300
&ZXMF                SETC  ''          RESET IN/OUTPUT                  00135400
&ZMS                 SETC  'THE "MF" KEY'                               00135500
&ZMS                 SETC  '&ZMS MUST CONTAIN ONE'                      00135600
                     MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'             00135700
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00135800
                     AGO   .ZG78E                                       00135900
.ZG78C               ANOP  ,                                            00136000
&ZXMF                SETC  ''          RESET IN/OUTPUT                  00136100
&ZMS                 SETC  '"MF='                                       00136200
&ZMS                 SETC  '&ZMS.&MF"'                                  00136300
&ZMS                 SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '    00136400
&ZMS                 SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'          00136500
&ZMS                 SETC  '&ZMS "S",'                                  00136600
&ZMS                 SETC  '&ZMS "L",'                                  00136700
&ZMS                 SETC  '&ZMS OR "E".'                               00136800
                     MNOTE 8,' &ZMS '                                   00136900
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00137000
                     AGO   .ZG78E                                       00137100
.ZG78D               ANOP  ,                                            00137200
&XMF                 SETC  'S'         SET DEFAULT KEYWORD              00137300
&XMFSCK              SETC  'COMPLETE'  COMPLETE CHECKING                00137400
.ZG78E               ANOP  ,                                            00137500
.********************************************************************   00137600
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00137700
.********************************************************************   00137800
                     ACTR  10000                                        00137900
.*-------------------------------------------------------------------   00138000
.***AG.MF03 MF=(SLE)                                                    00138100
                     AIF   ('&XMF' EQ 'L').ZGMFX                        00138200
.*----------------------------------------------------------------***   00138300
.***AG.KXVAR05 NAME, RQD OUTPUT, KEYS -XVARIABLE KEY                    00138400
                     AIF   (N'&WEIGHT LE 1).ZG2A  CK NUM                00138500
&ZMS                 SETC  '"WEIGHT='                                   00138600
&ZMS                 SETC  '&ZMS.&WEIGHT"'                              00138700
&ZMS                 SETC  '&ZMS "WEIGHT"'                              00138800
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00138900
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00139000
.ZG2A                ANOP  ,                                            00139100
.*-------------------------------------------------------------------   00139200
.***AG.KXVAR06 NAME, RQD OUTPUT, KEYS -XVARIABLE                        00139300
&ZXWEIGHT            SETC  'OUTPUT'    SET IN/OUTPUT                    00139400
&XWEIGHT             SETC  '&WEIGHT(1)'         SET XVARIABLE           00139500
                     AIF   (N'&WEIGHT GT 1).ZG2B  MULTI                 00139600
&XWEIGHT             SETC  '&WEIGHT'   SET XVARIABLE                    00139700
.ZG2B                AIF   (K'&WEIGHT(1) GT 0).ZG2C                     00139800
&ZXWEIGHT            SETC  ''          RESET IN/OUTPUT                  00139900
&ZMS                 SETC  ' '                                          00140000
&ZMS                 SETC  '&ZMS "WEIGHT" KEY AND ITS'                  00140100
                     MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'             00140200
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00140300
.ZG2C                ANOP  ,                                            00140400
.*-------------------------------------------------------------------   00140500
.***AG.KCK02 NAME, RQD OUTPUT, KEYS -GPR OUT OF RANGE                   00140600
                     AIF   (K'&ZXWEIGHT LE 0).ZG2R  NOT I/O             00140700
                     AIF   ('&XWEIGHT'(1,1) NE '(').ZG2R                00140800
&ZCGPR               SETC  '&XWEIGHT'(2,K'&XWEIGHT-2)                   00140900
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG2P                  00141000
                     AIF   (K'&ZCGPR GT 2).ZG2Q                         00141100
                     AIF   ('&ZCGPR' EQ '0').ZG2Q                       00141200
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00141300
                     AIF   (T'&ZCGPR NE 'N').ZG2Q  INVALID REG NAME     00141400
.ZG2P                ANOP  ,                                            00141500
                     AIF   (T'&ZCGPR NE 'N').ZG2R  NON NUMERIC          00141600
                     AIF   ('&ZCGPR' LT '2').ZG2Q                       00141700
                     AIF   ('&ZCGPR' LE '12').ZG2R                      00141800
.ZG2Q                ANOP  ,                                            00141900
&ZMS                 SETC  '"WEIGHT='                                   00142000
&ZMS                 SETC  '&ZMS.&WEIGHT"'                              00142100
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00142200
                     MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'             00142300
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00142400
.ZG2R                ANOP  ,                                            00142500
.*----------------------------------------------------------------***   00142600
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00142700
                     AIF   (N'&STOKEN LE 1).ZG5A  CK NUM                00142800
&ZMS                 SETC  '"STOKEN='                                   00142900
&ZMS                 SETC  '&ZMS.&STOKEN"'                              00143000
&ZMS                 SETC  '&ZMS "STOKEN"'                              00143100
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00143200
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00143300
.ZG5A                ANOP  ,                                            00143400
.*-------------------------------------------------------------------   00143500
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00143600
&ZXSTOKEN            SETC  'INPUT'     SET IN/OUTPUT                    00143700
&XSTOKEN             SETC  '&STOKEN(1)'         SET XVARIABLE           00143800
                     AIF   (N'&STOKEN GT 1).ZG5B  MULTI                 00143900
&XSTOKEN             SETC  '&STOKEN'   SET XVARIABLE                    00144000
.ZG5B                AIF   (K'&STOKEN(1) GT 0).ZG5C                     00144100
&ZXSTOKEN            SETC  ''          RESET IN/OUTPUT                  00144200
&ZMS                 SETC  ' '                                          00144300
&ZMS                 SETC  '&ZMS "STOKEN" KEY AND ITS'                  00144400
                     MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'             00144500
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00144600
.ZG5C                ANOP  ,                                            00144700
.*-------------------------------------------------------------------   00144800
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00144900
                     AIF   (K'&ZXSTOKEN LE 0).ZG5R  NOT I/O             00145000
                     AIF   ('&XSTOKEN'(1,1) NE '(').ZG5R                00145100
&ZCGPR               SETC  '&XSTOKEN'(2,K'&XSTOKEN-2)                   00145200
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG5P                  00145300
                     AIF   (K'&ZCGPR GT 2).ZG5Q                         00145400
                     AIF   ('&ZCGPR' EQ '0').ZG5Q                       00145500
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00145600
                     AIF   (T'&ZCGPR NE 'N').ZG5Q  INVALID REG NAME     00145700
.ZG5P                ANOP  ,                                            00145800
                     AIF   (T'&ZCGPR NE 'N').ZG5R  NON NUMERIC          00145900
                     AIF   ('&ZCGPR' LT '2').ZG5Q                       00146000
                     AIF   ('&ZCGPR' LE '12').ZG5R                      00146100
.ZG5Q                ANOP  ,                                            00146200
&ZMS                 SETC  '"STOKEN='                                   00146300
&ZMS                 SETC  '&ZMS.&STOKEN"'                              00146400
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00146500
                     MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'             00146600
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00146700
.ZG5R                ANOP  ,                                            00146800
.*----------------------------------------------------------------***   00146900
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00147000
                     AIF   (N'&ABNORM_COUNT LE 1).ZG8A  CK NUM          00147100
&ZMS                 SETC  '"ABNORM_COUNT='                             00147200
&ZMS                 SETC  '&ZMS.&ABNORM_COUNT"'                        00147300
&ZMS                 SETC  '&ZMS "ABNORM_COUNT"'                        00147400
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00147500
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00147600
.ZG8A                ANOP  ,                                            00147700
.*-------------------------------------------------------------------   00147800
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00147900
                     AIF   (K'&ABNORM_COUNT(1) LE 0).ZG8C  NO PARM      00148000
&ZXABNORM_COUNT      SETC  'OUTPUT'    SET OUTPUT                       00148100
&XABNORM_COUNT       SETC  '&ABNORM_COUNT(1)'   SET XVARIABLE           00148200
                     AIF   (N'&ABNORM_COUNT GT 1).ZG8C                  00148300
&XABNORM_COUNT       SETC  '&ABNORM_COUNT'      SET XVARIABLE           00148400
.ZG8C                ANOP  ,                                            00148500
.*-------------------------------------------------------------------   00148600
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00148700
                     AIF   (K'&ZXABNORM_COUNT LE 0).ZG8R  NOT I/O       00148800
                     AIF   ('&XABNORM_COUNT'(1,1) NE '(').ZG8R          00148900
&ZCGPR               SETC  '&XABNORM_COUNT'(2,K'&XABNORM_COUNT-2)       00149000
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG8P                  00149100
                     AIF   (K'&ZCGPR GT 2).ZG8Q                         00149200
                     AIF   ('&ZCGPR' EQ '0').ZG8Q                       00149300
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00149400
                     AIF   (T'&ZCGPR NE 'N').ZG8Q  INVALID REG NAME     00149500
.ZG8P                ANOP  ,                                            00149600
                     AIF   (T'&ZCGPR NE 'N').ZG8R  NON NUMERIC          00149700
                     AIF   ('&ZCGPR' LT '2').ZG8Q                       00149800
                     AIF   ('&ZCGPR' LE '12').ZG8R                      00149900
.ZG8Q                ANOP  ,                                            00150000
&ZMS                 SETC  '"ABNORM_COUNT='                             00150100
&ZMS                 SETC  '&ZMS.&ABNORM_COUNT"'                        00150200
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00150300
                     MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'             00150400
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00150500
.ZG8R                ANOP  ,                                            00150600
.*----------------------------------------------------------------***   00150700
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00150800
                     AIF   (N'&HEALTH LE 1).ZG11A  CK NUM               00150900
&ZMS                 SETC  '"HEALTH='                                   00151000
&ZMS                 SETC  '&ZMS.&HEALTH"'                              00151100
&ZMS                 SETC  '&ZMS "HEALTH"'                              00151200
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00151300
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00151400
.ZG11A               ANOP  ,                                            00151500
.*-------------------------------------------------------------------   00151600
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00151700
                     AIF   (K'&HEALTH(1) LE 0).ZG11C  NO PARM           00151800
&ZXHEALTH            SETC  'OUTPUT'    SET OUTPUT                       00151900
&XHEALTH             SETC  '&HEALTH(1)'         SET XVARIABLE           00152000
                     AIF   (N'&HEALTH GT 1).ZG11C                       00152100
&XHEALTH             SETC  '&HEALTH'   SET XVARIABLE                    00152200
.ZG11C               ANOP  ,                                            00152300
.*-------------------------------------------------------------------   00152400
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00152500
                     AIF   (K'&ZXHEALTH LE 0).ZG11R  NOT I/O            00152600
                     AIF   ('&XHEALTH'(1,1) NE '(').ZG11R               00152700
&ZCGPR               SETC  '&XHEALTH'(2,K'&XHEALTH-2)                   00152800
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG11P                 00152900
                     AIF   (K'&ZCGPR GT 2).ZG11Q                        00153000
                     AIF   ('&ZCGPR' EQ '0').ZG11Q                      00153100
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00153200
                     AIF   (T'&ZCGPR NE 'N').ZG11Q  INVALID REG NAME    00153300
.ZG11P               ANOP  ,                                            00153400
                     AIF   (T'&ZCGPR NE 'N').ZG11R  NON NUMERIC         00153500
                     AIF   ('&ZCGPR' LT '2').ZG11Q                      00153600
                     AIF   ('&ZCGPR' LE '12').ZG11R                     00153700
.ZG11Q               ANOP  ,                                            00153800
&ZMS                 SETC  '"HEALTH='                                   00153900
&ZMS                 SETC  '&ZMS.&HEALTH"'                              00154000
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00154100
                     MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'             00154200
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00154300
.ZG11R               ANOP  ,                                            00154400
.*----------------------------------------------------------------***   00154500
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00154600
                     AIF   (N'&CPUWEIGHT LE 1).ZG14A  CK NUM            00154700
&ZMS                 SETC  '"CPUWEIGHT='                                00154800
&ZMS                 SETC  '&ZMS.&CPUWEIGHT"'                           00154900
&ZMS                 SETC  '&ZMS "CPUWEIGHT"'                           00155000
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00155100
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00155200
.ZG14A               ANOP  ,                                            00155300
.*-------------------------------------------------------------------   00155400
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00155500
                     AIF   (K'&CPUWEIGHT(1) LE 0).ZG14C  NO PARM        00155600
&ZXCPUWEIGHT         SETC  'OUTPUT'    SET OUTPUT                       00155700
&XCPUWEIGHT          SETC  '&CPUWEIGHT(1)'      SET XVARIABLE           00155800
                     AIF   (N'&CPUWEIGHT GT 1).ZG14C                    00155900
&XCPUWEIGHT          SETC  '&CPUWEIGHT'         SET XVARIABLE           00156000
.ZG14C               ANOP  ,                                            00156100
.*-------------------------------------------------------------------   00156200
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00156300
                     AIF   (K'&ZXCPUWEIGHT LE 0).ZG14R  NOT I/O         00156400
                     AIF   ('&XCPUWEIGHT'(1,1) NE '(').ZG14R            00156500
&ZCGPR               SETC  '&XCPUWEIGHT'(2,K'&XCPUWEIGHT-2)             00156600
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG14P                 00156700
                     AIF   (K'&ZCGPR GT 2).ZG14Q                        00156800
                     AIF   ('&ZCGPR' EQ '0').ZG14Q                      00156900
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00157000
                     AIF   (T'&ZCGPR NE 'N').ZG14Q  INVALID REG NAME    00157100
.ZG14P               ANOP  ,                                            00157200
                     AIF   (T'&ZCGPR NE 'N').ZG14R  NON NUMERIC         00157300
                     AIF   ('&ZCGPR' LT '2').ZG14Q                      00157400
                     AIF   ('&ZCGPR' LE '12').ZG14R                     00157500
.ZG14Q               ANOP  ,                                            00157600
&ZMS                 SETC  '"CPUWEIGHT='                                00157700
&ZMS                 SETC  '&ZMS.&CPUWEIGHT"'                           00157800
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00157900
                     MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'             00158000
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00158100
.ZG14R               ANOP  ,                                            00158200
.*----------------------------------------------------------------***   00158300
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00158400
                     AIF   (N'&ZAAPWEIGHT LE 1).ZG17A  CK NUM           00158500
&ZMS                 SETC  '"ZAAPWEIGHT='                               00158600
&ZMS                 SETC  '&ZMS.&ZAAPWEIGHT"'                          00158700
&ZMS                 SETC  '&ZMS "ZAAPWEIGHT"'                          00158800
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00158900
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00159000
.ZG17A               ANOP  ,                                            00159100
.*-------------------------------------------------------------------   00159200
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00159300
                     AIF   (K'&ZAAPWEIGHT(1) LE 0).ZG17C  NO PARM       00159400
&ZXZAAPWEIGHT        SETC  'OUTPUT'    SET OUTPUT                       00159500
&XZAAPWEIGHT         SETC  '&ZAAPWEIGHT(1)'     SET XVARIABLE           00159600
                     AIF   (N'&ZAAPWEIGHT GT 1).ZG17C                   00159700
&XZAAPWEIGHT         SETC  '&ZAAPWEIGHT'        SET XVARIABLE           00159800
.ZG17C               ANOP  ,                                            00159900
.*-------------------------------------------------------------------   00160000
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00160100
                     AIF   (K'&ZXZAAPWEIGHT LE 0).ZG17R  NOT I/O        00160200
                     AIF   ('&XZAAPWEIGHT'(1,1) NE '(').ZG17R           00160300
&ZCGPR               SETC  '&XZAAPWEIGHT'(2,K'&XZAAPWEIGHT-2)           00160400
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG17P                 00160500
                     AIF   (K'&ZCGPR GT 2).ZG17Q                        00160600
                     AIF   ('&ZCGPR' EQ '0').ZG17Q                      00160700
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00160800
                     AIF   (T'&ZCGPR NE 'N').ZG17Q  INVALID REG NAME    00160900
.ZG17P               ANOP  ,                                            00161000
                     AIF   (T'&ZCGPR NE 'N').ZG17R  NON NUMERIC         00161100
                     AIF   ('&ZCGPR' LT '2').ZG17Q                      00161200
                     AIF   ('&ZCGPR' LE '12').ZG17R                     00161300
.ZG17Q               ANOP  ,                                            00161400
&ZMS                 SETC  '"ZAAPWEIGHT='                               00161500
&ZMS                 SETC  '&ZMS.&ZAAPWEIGHT"'                          00161600
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00161700
                     MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'             00161800
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00161900
.ZG17R               ANOP  ,                                            00162000
.*----------------------------------------------------------------***   00162100
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00162200
                     AIF   (N'&ZIIPWEIGHT LE 1).ZG20A  CK NUM           00162300
&ZMS                 SETC  '"ZIIPWEIGHT='                               00162400
&ZMS                 SETC  '&ZMS.&ZIIPWEIGHT"'                          00162500
&ZMS                 SETC  '&ZMS "ZIIPWEIGHT"'                          00162600
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00162700
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00162800
.ZG20A               ANOP  ,                                            00162900
.*-------------------------------------------------------------------   00163000
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00163100
                     AIF   (K'&ZIIPWEIGHT(1) LE 0).ZG20C  NO PARM       00163200
&ZXZIIPWEIGHT        SETC  'OUTPUT'    SET OUTPUT                       00163300
&XZIIPWEIGHT         SETC  '&ZIIPWEIGHT(1)'     SET XVARIABLE           00163400
                     AIF   (N'&ZIIPWEIGHT GT 1).ZG20C                   00163500
&XZIIPWEIGHT         SETC  '&ZIIPWEIGHT'        SET XVARIABLE           00163600
.ZG20C               ANOP  ,                                            00163700
.*-------------------------------------------------------------------   00163800
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00163900
                     AIF   (K'&ZXZIIPWEIGHT LE 0).ZG20R  NOT I/O        00164000
                     AIF   ('&XZIIPWEIGHT'(1,1) NE '(').ZG20R           00164100
&ZCGPR               SETC  '&XZIIPWEIGHT'(2,K'&XZIIPWEIGHT-2)           00164200
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG20P                 00164300
                     AIF   (K'&ZCGPR GT 2).ZG20Q                        00164400
                     AIF   ('&ZCGPR' EQ '0').ZG20Q                      00164500
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00164600
                     AIF   (T'&ZCGPR NE 'N').ZG20Q  INVALID REG NAME    00164700
.ZG20P               ANOP  ,                                            00164800
                     AIF   (T'&ZCGPR NE 'N').ZG20R  NON NUMERIC         00164900
                     AIF   ('&ZCGPR' LT '2').ZG20Q                      00165000
                     AIF   ('&ZCGPR' LE '12').ZG20R                     00165100
.ZG20Q               ANOP  ,                                            00165200
&ZMS                 SETC  '"ZIIPWEIGHT='                               00165300
&ZMS                 SETC  '&ZMS.&ZIIPWEIGHT"'                          00165400
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00165500
                     MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'             00165600
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00165700
.ZG20R               ANOP  ,                                            00165800
.*----------------------------------------------------------------***   00165900
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00166000
                     AIF   (N'&CPUPROPORTION LE 1).ZG23A  CK NUM        00166100
&ZMS                 SETC  '"CPUPROPORTION='                            00166200
&ZMS                 SETC  '&ZMS.&CPUPROPORTION"'                       00166300
&ZMS                 SETC  '&ZMS "CPUPROPORTION"'                       00166400
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00166500
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00166600
.ZG23A               ANOP  ,                                            00166700
.*-------------------------------------------------------------------   00166800
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00166900
                     AIF   (K'&CPUPROPORTION(1) LE 0).ZG23C  NO PARM    00167000
&ZXCPUPROPORTION     SETC  'OUTPUT'    SET OUTPUT                       00167100
&XCPUPROPORTION      SETC  '&CPUPROPORTION(1)'  SET XVARIABLE           00167200
                     AIF   (N'&CPUPROPORTION GT 1).ZG23C                00167300
&XCPUPROPORTION      SETC  '&CPUPROPORTION'     SET XVARIABLE           00167400
.ZG23C               ANOP  ,                                            00167500
.*-------------------------------------------------------------------   00167600
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00167700
                     AIF   (K'&ZXCPUPROPORTION LE 0).ZG23R  NOT I/O     00167800
                     AIF   ('&XCPUPROPORTION'(1,1) NE '(').ZG23R        00167900
&ZCGPR               SETC  '&XCPUPROPORTION'(2,K'&XCPUPROPORTION-2)     00168000
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG23P                 00168100
                     AIF   (K'&ZCGPR GT 2).ZG23Q                        00168200
                     AIF   ('&ZCGPR' EQ '0').ZG23Q                      00168300
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00168400
                     AIF   (T'&ZCGPR NE 'N').ZG23Q  INVALID REG NAME    00168500
.ZG23P               ANOP  ,                                            00168600
                     AIF   (T'&ZCGPR NE 'N').ZG23R  NON NUMERIC         00168700
                     AIF   ('&ZCGPR' LT '2').ZG23Q                      00168800
                     AIF   ('&ZCGPR' LE '12').ZG23R                     00168900
.ZG23Q               ANOP  ,                                            00169000
&ZMS                 SETC  '"CPUPROPORTION='                            00169100
&ZMS                 SETC  '&ZMS.&CPUPROPORTION"'                       00169200
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00169300
                     MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'             00169400
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00169500
.ZG23R               ANOP  ,                                            00169600
.*----------------------------------------------------------------***   00169700
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00169800
                     AIF   (N'&ZAAPPROPORTION LE 1).ZG26A  CK NUM       00169900
&ZMS                 SETC  '"ZAAPPROPORTION='                           00170000
&ZMS                 SETC  '&ZMS.&ZAAPPROPORTION"'                      00170100
&ZMS                 SETC  '&ZMS "ZAAPPROPORTION"'                      00170200
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00170300
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00170400
.ZG26A               ANOP  ,                                            00170500
.*-------------------------------------------------------------------   00170600
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00170700
                     AIF   (K'&ZAAPPROPORTION(1) LE 0).ZG26C  NO PARM   00170800
&ZXZAAPPROPORTION    SETC  'OUTPUT'    SET OUTPUT                       00170900
&XZAAPPROPORTION     SETC  '&ZAAPPROPORTION(1)'  SET XVARIABLE          00171000
                     AIF   (N'&ZAAPPROPORTION GT 1).ZG26C               00171100
&XZAAPPROPORTION     SETC  '&ZAAPPROPORTION'    SET XVARIABLE           00171200
.ZG26C               ANOP  ,                                            00171300
.*-------------------------------------------------------------------   00171400
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00171500
                     AIF   (K'&ZXZAAPPROPORTION LE 0).ZG26R  NOT I/O    00171600
                     AIF   ('&XZAAPPROPORTION'(1,1) NE '(').ZG26R       00171700
&ZCGPR               SETC  '&XZAAPPROPORTION'(2,K'&XZAAPPROPORTION-2)   00171800
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG26P                 00171900
                     AIF   (K'&ZCGPR GT 2).ZG26Q                        00172000
                     AIF   ('&ZCGPR' EQ '0').ZG26Q                      00172100
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00172200
                     AIF   (T'&ZCGPR NE 'N').ZG26Q  INVALID REG NAME    00172300
.ZG26P               ANOP  ,                                            00172400
                     AIF   (T'&ZCGPR NE 'N').ZG26R  NON NUMERIC         00172500
                     AIF   ('&ZCGPR' LT '2').ZG26Q                      00172600
                     AIF   ('&ZCGPR' LE '12').ZG26R                     00172700
.ZG26Q               ANOP  ,                                            00172800
&ZMS                 SETC  '"ZAAPPROPORTION='                           00172900
&ZMS                 SETC  '&ZMS.&ZAAPPROPORTION"'                      00173000
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00173100
                     MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'             00173200
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00173300
.ZG26R               ANOP  ,                                            00173400
.*----------------------------------------------------------------***   00173500
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00173600
                     AIF   (N'&ZIIPPROPORTION LE 1).ZG29A  CK NUM       00173700
&ZMS                 SETC  '"ZIIPPROPORTION='                           00173800
&ZMS                 SETC  '&ZMS.&ZIIPPROPORTION"'                      00173900
&ZMS                 SETC  '&ZMS "ZIIPPROPORTION"'                      00174000
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00174100
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00174200
.ZG29A               ANOP  ,                                            00174300
.*-------------------------------------------------------------------   00174400
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00174500
                     AIF   (K'&ZIIPPROPORTION(1) LE 0).ZG29C  NO PARM   00174600
&ZXZIIPPROPORTION    SETC  'OUTPUT'    SET OUTPUT                       00174700
&XZIIPPROPORTION     SETC  '&ZIIPPROPORTION(1)'  SET XVARIABLE          00174800
                     AIF   (N'&ZIIPPROPORTION GT 1).ZG29C               00174900
&XZIIPPROPORTION     SETC  '&ZIIPPROPORTION'    SET XVARIABLE           00175000
.ZG29C               ANOP  ,                                            00175100
.*-------------------------------------------------------------------   00175200
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00175300
                     AIF   (K'&ZXZIIPPROPORTION LE 0).ZG29R  NOT I/O    00175400
                     AIF   ('&XZIIPPROPORTION'(1,1) NE '(').ZG29R       00175500
&ZCGPR               SETC  '&XZIIPPROPORTION'(2,K'&XZIIPPROPORTION-2)   00175600
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG29P                 00175700
                     AIF   (K'&ZCGPR GT 2).ZG29Q                        00175800
                     AIF   ('&ZCGPR' EQ '0').ZG29Q                      00175900
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00176000
                     AIF   (T'&ZCGPR NE 'N').ZG29Q  INVALID REG NAME    00176100
.ZG29P               ANOP  ,                                            00176200
                     AIF   (T'&ZCGPR NE 'N').ZG29R  NON NUMERIC         00176300
                     AIF   ('&ZCGPR' LT '2').ZG29Q                      00176400
                     AIF   ('&ZCGPR' LE '12').ZG29R                     00176500
.ZG29Q               ANOP  ,                                            00176600
&ZMS                 SETC  '"ZIIPPROPORTION='                           00176700
&ZMS                 SETC  '&ZMS.&ZIIPPROPORTION"'                      00176800
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00176900
                     MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'             00177000
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00177100
.ZG29R               ANOP  ,                                            00177200
.*----------------------------------------------------------------***   00177300
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00177400
                     AIF   (N'&MAXSRVUNITS LE 1).ZG32A  CK NUM          00177500
&ZMS                 SETC  '"MAXSRVUNITS='                              00177600
&ZMS                 SETC  '&ZMS.&MAXSRVUNITS"'                         00177700
&ZMS                 SETC  '&ZMS "MAXSRVUNITS"'                         00177800
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00177900
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00178000
.ZG32A               ANOP  ,                                            00178100
.*-------------------------------------------------------------------   00178200
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00178300
                     AIF   (K'&MAXSRVUNITS(1) LE 0).ZG32C  NO PARM      00178400
&ZXMAXSRVUNITS       SETC  'OUTPUT'    SET OUTPUT                       00178500
&XMAXSRVUNITS        SETC  '&MAXSRVUNITS(1)'    SET XVARIABLE           00178600
                     AIF   (N'&MAXSRVUNITS GT 1).ZG32C                  00178700
&XMAXSRVUNITS        SETC  '&MAXSRVUNITS'       SET XVARIABLE           00178800
.ZG32C               ANOP  ,                                            00178900
.*-------------------------------------------------------------------   00179000
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00179100
                     AIF   (K'&ZXMAXSRVUNITS LE 0).ZG32R  NOT I/O       00179200
                     AIF   ('&XMAXSRVUNITS'(1,1) NE '(').ZG32R          00179300
&ZCGPR               SETC  '&XMAXSRVUNITS'(2,K'&XMAXSRVUNITS-2)         00179400
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG32P                 00179500
                     AIF   (K'&ZCGPR GT 2).ZG32Q                        00179600
                     AIF   ('&ZCGPR' EQ '0').ZG32Q                      00179700
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00179800
                     AIF   (T'&ZCGPR NE 'N').ZG32Q  INVALID REG NAME    00179900
.ZG32P               ANOP  ,                                            00180000
                     AIF   (T'&ZCGPR NE 'N').ZG32R  NON NUMERIC         00180100
                     AIF   ('&ZCGPR' LT '2').ZG32Q                      00180200
                     AIF   ('&ZCGPR' LE '12').ZG32R                     00180300
.ZG32Q               ANOP  ,                                            00180400
&ZMS                 SETC  '"MAXSRVUNITS='                              00180500
&ZMS                 SETC  '&ZMS.&MAXSRVUNITS"'                         00180600
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00180700
                     MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'             00180800
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00180900
.ZG32R               ANOP  ,                                            00181000
.*----------------------------------------------------------------***   00181100
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00181200
                     AIF   (N'&METHOD LE 1).ZG35A  CK NUM               00181300
&ZMS                 SETC  '"METHOD='                                   00181400
&ZMS                 SETC  '&ZMS.&METHOD"'                              00181500
&ZMS                 SETC  '&ZMS "METHOD"'                              00181600
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00181700
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00181800
.ZG35A               ANOP  ,                                            00181900
.*-------------------------------------------------------------------   00182000
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00182100
&XMETHOD             SETC  ''          INITIALIZE XVARIABLE             00182200
.ZG36A   AIF   ('&METHOD(1)' NE 'PROPORTIONAL').ZG37A                   00182300
&XMETHOD             SETC  'PROPORTIONAL'       SET KEYWORD             00182400
.*-------------------------------------------------------------------   00182500
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00182600
.ZG37A   AIF   ('&METHOD(1)' NE 'EQUICPU').ZG38A                        00182700
&XMETHOD             SETC  'EQUICPU'   SET KEYWORD                      00182800
.*-------------------------------------------------------------------   00182900
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00183000
.ZG38A               AIF   (K'&XMETHOD GT 0).ZG38C  KEYWORD             00183100
                     AIF   (K'&METHOD(1) LE 0).ZG38B                    00183200
&ZMS                 SETC  '"METHOD='                                   00183300
&ZMS                 SETC  '&ZMS.&METHOD"'                              00183400
&ZMS                 SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '    00183500
&ZMS                 SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'          00183600
&ZMS                 SETC  '&ZMS "PROPORTIONAL"'                        00183700
&ZMS                 SETC  '&ZMS OR "EQUICPU".'                         00183800
                     MNOTE 8,' &ZMS '                                   00183900
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00184000
.ZG38B               ANOP  ,                                            00184100
&XMETHOD             SETC  'PROPORTIONAL'       SET DEFAULT KEYWORD     00184200
.ZG38C               ANOP  ,                                            00184300
&ZXMETHOD            SETC  'INPUT'     SET IN/OUTPUT                    00184400
.*----------------------------------------------------------------***   00184500
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00184600
                     AIF   (N'&COST_ZAAP_ON_CP LE 1).ZG40A  CK NUM      00184700
&ZMS                 SETC  '"COST_ZAAP_ON_CP='                          00184800
&ZMS                 SETC  '&ZMS.&COST_ZAAP_ON_CP"'                     00184900
&ZMS                 SETC  '&ZMS "COST_ZAAP_ON_CP"'                     00185000
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00185100
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00185200
.ZG40A               ANOP  ,                                            00185300
.*-------------------------------------------------------------------   00185400
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00185500
&ZXCOST_ZAAP_ON_CP   SETC  'INPUT'     SET IN/OUTPUT                    00185600
&XCOST_ZAAP_ON_CP    SETC  '1'                                          00185700
                     AIF   (K'&COST_ZAAP_ON_CP(1) LE 0).ZG40B  PARM     00185800
&XCOST_ZAAP_ON_CP    SETC  '&COST_ZAAP_ON_CP(1)'  SET XVARIABLE         00185900
                     AIF   (N'&COST_ZAAP_ON_CP GT 1).ZG40B  MULTI       00186000
&XCOST_ZAAP_ON_CP    SETC  '&COST_ZAAP_ON_CP'   SET XVARIABLE           00186100
.ZG40B               ANOP  ,                                            00186200
.*-------------------------------------------------------------------   00186300
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00186400
                     AIF   (K'&ZXCOST_ZAAP_ON_CP LE 0).ZG40R  NOT I/O   00186500
                     AIF   ('&XCOST_ZAAP_ON_CP'(1,1) NE '(').ZG40R      00186600
&ZCGPR               SETC  '&XCOST_ZAAP_ON_CP'(2,K'&XCOST_ZAAP_ON_CP-2) 00186700
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG40P                 00186800
                     AIF   (K'&ZCGPR GT 2).ZG40Q                        00186900
                     AIF   ('&ZCGPR' EQ '0').ZG40Q                      00187000
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00187100
                     AIF   (T'&ZCGPR NE 'N').ZG40Q  INVALID REG NAME    00187200
.ZG40P               ANOP  ,                                            00187300
                     AIF   (T'&ZCGPR NE 'N').ZG40R  NON NUMERIC         00187400
                     AIF   ('&ZCGPR' LT '2').ZG40Q                      00187500
                     AIF   ('&ZCGPR' LE '12').ZG40R                     00187600
.ZG40Q               ANOP  ,                                            00187700
&ZMS                 SETC  '"COST_ZAAP_ON_CP='                          00187800
&ZMS                 SETC  '&ZMS.&COST_ZAAP_ON_CP"'                     00187900
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00188000
                     MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'             00188100
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00188200
.ZG40R               ANOP  ,                                            00188300
.*----------------------------------------------------------------***   00188400
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00188500
                     AIF   (N'&COST_ZIIP_ON_CP LE 1).ZG43A  CK NUM      00188600
&ZMS                 SETC  '"COST_ZIIP_ON_CP='                          00188700
&ZMS                 SETC  '&ZMS.&COST_ZIIP_ON_CP"'                     00188800
&ZMS                 SETC  '&ZMS "COST_ZIIP_ON_CP"'                     00188900
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00189000
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00189100
.ZG43A               ANOP  ,                                            00189200
.*-------------------------------------------------------------------   00189300
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00189400
&ZXCOST_ZIIP_ON_CP   SETC  'INPUT'     SET IN/OUTPUT                    00189500
&XCOST_ZIIP_ON_CP    SETC  '1'                                          00189600
                     AIF   (K'&COST_ZIIP_ON_CP(1) LE 0).ZG43B  PARM     00189700
&XCOST_ZIIP_ON_CP    SETC  '&COST_ZIIP_ON_CP(1)'  SET XVARIABLE         00189800
                     AIF   (N'&COST_ZIIP_ON_CP GT 1).ZG43B  MULTI       00189900
&XCOST_ZIIP_ON_CP    SETC  '&COST_ZIIP_ON_CP'   SET XVARIABLE           00190000
.ZG43B               ANOP  ,                                            00190100
.*-------------------------------------------------------------------   00190200
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00190300
                     AIF   (K'&ZXCOST_ZIIP_ON_CP LE 0).ZG43R  NOT I/O   00190400
                     AIF   ('&XCOST_ZIIP_ON_CP'(1,1) NE '(').ZG43R      00190500
&ZCGPR               SETC  '&XCOST_ZIIP_ON_CP'(2,K'&XCOST_ZIIP_ON_CP-2) 00190600
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG43P                 00190700
                     AIF   (K'&ZCGPR GT 2).ZG43Q                        00190800
                     AIF   ('&ZCGPR' EQ '0').ZG43Q                      00190900
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00191000
                     AIF   (T'&ZCGPR NE 'N').ZG43Q  INVALID REG NAME    00191100
.ZG43P               ANOP  ,                                            00191200
                     AIF   (T'&ZCGPR NE 'N').ZG43R  NON NUMERIC         00191300
                     AIF   ('&ZCGPR' LT '2').ZG43Q                      00191400
                     AIF   ('&ZCGPR' LE '12').ZG43R                     00191500
.ZG43Q               ANOP  ,                                            00191600
&ZMS                 SETC  '"COST_ZIIP_ON_CP='                          00191700
&ZMS                 SETC  '&ZMS.&COST_ZIIP_ON_CP"'                     00191800
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00191900
                     MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'             00192000
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00192100
.ZG43R               ANOP  ,                                            00192200
.*----------------------------------------------------------------***   00192300
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00192400
                     AIF   (N'&MAXEQUIVUNITS LE 1).ZG46A  CK NUM        00192500
&ZMS                 SETC  '"MAXEQUIVUNITS='                            00192600
&ZMS                 SETC  '&ZMS.&MAXEQUIVUNITS"'                       00192700
&ZMS                 SETC  '&ZMS "MAXEQUIVUNITS"'                       00192800
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00192900
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00193000
.ZG46A               ANOP  ,                                            00193100
.*-------------------------------------------------------------------   00193200
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00193300
                     AIF   (K'&MAXEQUIVUNITS(1) LE 0).ZG46C  NO PARM    00193400
&ZXMAXEQUIVUNITS     SETC  'OUTPUT'    SET OUTPUT                       00193500
&XMAXEQUIVUNITS      SETC  '&MAXEQUIVUNITS(1)'  SET XVARIABLE           00193600
                     AIF   (N'&MAXEQUIVUNITS GT 1).ZG46C                00193700
&XMAXEQUIVUNITS      SETC  '&MAXEQUIVUNITS'     SET XVARIABLE           00193800
.ZG46C               ANOP  ,                                            00193900
.*-------------------------------------------------------------------   00194000
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00194100
                     AIF   (K'&ZXMAXEQUIVUNITS LE 0).ZG46R  NOT I/O     00194200
                     AIF   ('&XMAXEQUIVUNITS'(1,1) NE '(').ZG46R        00194300
&ZCGPR               SETC  '&XMAXEQUIVUNITS'(2,K'&XMAXEQUIVUNITS-2)     00194400
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG46P                 00194500
                     AIF   (K'&ZCGPR GT 2).ZG46Q                        00194600
                     AIF   ('&ZCGPR' EQ '0').ZG46Q                      00194700
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00194800
                     AIF   (T'&ZCGPR NE 'N').ZG46Q  INVALID REG NAME    00194900
.ZG46P               ANOP  ,                                            00195000
                     AIF   (T'&ZCGPR NE 'N').ZG46R  NON NUMERIC         00195100
                     AIF   ('&ZCGPR' LT '2').ZG46Q                      00195200
                     AIF   ('&ZCGPR' LE '12').ZG46R                     00195300
.ZG46Q               ANOP  ,                                            00195400
&ZMS                 SETC  '"MAXEQUIVUNITS='                            00195500
&ZMS                 SETC  '&ZMS.&MAXEQUIVUNITS"'                       00195600
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00195700
                     MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'             00195800
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00195900
.ZG46R               ANOP  ,                                            00196000
.*----------------------------------------------------------------***   00196100
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00196200
                     AIF   (N'&IL_WEIGHTING LE 1).ZG49A  CK NUM         00196300
&ZMS                 SETC  '"IL_WEIGHTING='                             00196400
&ZMS                 SETC  '&ZMS.&IL_WEIGHTING"'                        00196500
&ZMS                 SETC  '&ZMS "IL_WEIGHTING"'                        00196600
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00196700
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00196800
.ZG49A               ANOP  ,                                            00196900
.*-------------------------------------------------------------------   00197000
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00197100
&ZXIL_WEIGHTING      SETC  'INPUT'     SET IN/OUTPUT                    00197200
&XIL_WEIGHTING       SETC  '0'                                          00197300
                     AIF   (K'&IL_WEIGHTING(1) LE 0).ZG49B  PARM        00197400
&XIL_WEIGHTING       SETC  '&IL_WEIGHTING(1)'   SET XVARIABLE           00197500
                     AIF   (N'&IL_WEIGHTING GT 1).ZG49B  MULTI          00197600
&XIL_WEIGHTING       SETC  '&IL_WEIGHTING'      SET XVARIABLE           00197700
.ZG49B               ANOP  ,                                            00197800
.*-------------------------------------------------------------------   00197900
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00198000
                     AIF   (K'&ZXIL_WEIGHTING LE 0).ZG49R  NOT I/O      00198100
                     AIF   ('&XIL_WEIGHTING'(1,1) NE '(').ZG49R         00198200
&ZCGPR               SETC  '&XIL_WEIGHTING'(2,K'&XIL_WEIGHTING-2)       00198300
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG49P                 00198400
                     AIF   (K'&ZCGPR GT 2).ZG49Q                        00198500
                     AIF   ('&ZCGPR' EQ '0').ZG49Q                      00198600
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00198700
                     AIF   (T'&ZCGPR NE 'N').ZG49Q  INVALID REG NAME    00198800
.ZG49P               ANOP  ,                                            00198900
                     AIF   (T'&ZCGPR NE 'N').ZG49R  NON NUMERIC         00199000
                     AIF   ('&ZCGPR' LT '2').ZG49Q                      00199100
                     AIF   ('&ZCGPR' LE '12').ZG49R                     00199200
.ZG49Q               ANOP  ,                                            00199300
&ZMS                 SETC  '"IL_WEIGHTING='                             00199400
&ZMS                 SETC  '&ZMS.&IL_WEIGHTING"'                        00199500
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00199600
                     MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'             00199700
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00199800
.ZG49R               ANOP  ,                                            00199900
.*----------------------------------------------------------------***   00200000
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00200100
                     AIF   (N'&RETCODE LE 1).ZG52A  CK NUM              00200200
&ZMS                 SETC  '"RETCODE='                                  00200300
&ZMS                 SETC  '&ZMS.&RETCODE"'                             00200400
&ZMS                 SETC  '&ZMS "RETCODE"'                             00200500
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00200600
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00200700
.ZG52A               ANOP  ,                                            00200800
.*-------------------------------------------------------------------   00200900
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00201000
                     AIF   (K'&RETCODE(1) LE 0).ZG52C  NO PARM          00201100
&ZXRETCODE           SETC  'OUTPUT'    SET OUTPUT                       00201200
&XRETCODE            SETC  '&RETCODE(1)'        SET XVARIABLE           00201300
                     AIF   (N'&RETCODE GT 1).ZG52C                      00201400
&XRETCODE            SETC  '&RETCODE'  SET XVARIABLE                    00201500
.ZG52C               ANOP  ,                                            00201600
.*-------------------------------------------------------------------   00201700
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00201800
                     AIF   (K'&ZXRETCODE LE 0).ZG52R  NOT I/O           00201900
                     AIF   ('&XRETCODE'(1,1) NE '(').ZG52R              00202000
&ZCGPR               SETC  '&XRETCODE'(2,K'&XRETCODE-2)                 00202100
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG52P                 00202200
                     AIF   (K'&ZCGPR GT 2).ZG52Q                        00202300
                     AIF   ('&ZCGPR' EQ '0').ZG52Q                      00202400
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00202500
                     AIF   (T'&ZCGPR NE 'N').ZG52Q  INVALID REG NAME    00202600
.ZG52P               ANOP  ,                                            00202700
                     AIF   (T'&ZCGPR NE 'N').ZG52R  NON NUMERIC         00202800
                     AIF   ('&ZCGPR' EQ '15').ZG52R                     00202900
                     AIF   ('&ZCGPR' LT '2').ZG52Q                      00203000
                     AIF   ('&ZCGPR' LE '12').ZG52R                     00203100
.ZG52Q               ANOP  ,                                            00203200
&ZMS                 SETC  '"RETCODE='                                  00203300
&ZMS                 SETC  '&ZMS.&RETCODE"'                             00203400
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00203500
                     MNOTE 8,' &ZMS IN THE RANGE (2)-(12) OR (15).'     00203600
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00203700
.ZG52R               ANOP  ,                                            00203800
.*----------------------------------------------------------------***   00203900
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00204000
                     AIF   (N'&RSNCODE LE 1).ZG55A  CK NUM              00204100
&ZMS                 SETC  '"RSNCODE='                                  00204200
&ZMS                 SETC  '&ZMS.&RSNCODE"'                             00204300
&ZMS                 SETC  '&ZMS "RSNCODE"'                             00204400
                     MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'          00204500
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00204600
.ZG55A               ANOP  ,                                            00204700
.*-------------------------------------------------------------------   00204800
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00204900
                     AIF   (K'&RSNCODE(1) LE 0).ZG55C  NO PARM          00205000
&ZXRSNCODE           SETC  'OUTPUT'    SET OUTPUT                       00205100
&XRSNCODE            SETC  '&RSNCODE(1)'        SET XVARIABLE           00205200
                     AIF   (N'&RSNCODE GT 1).ZG55C                      00205300
&XRSNCODE            SETC  '&RSNCODE'  SET XVARIABLE                    00205400
.ZG55C               ANOP  ,                                            00205500
.*-------------------------------------------------------------------   00205600
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00205700
                     AIF   (K'&ZXRSNCODE LE 0).ZG55R  NOT I/O           00205800
                     AIF   ('&XRSNCODE'(1,1) NE '(').ZG55R              00205900
&ZCGPR               SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                 00206000
                     AIF   ('&ZCGPR'(1,1) NE '0').ZG55P                 00206100
                     AIF   (K'&ZCGPR GT 2).ZG55Q                        00206200
                     AIF   ('&ZCGPR' EQ '0').ZG55R                      00206300
&ZCGPR               SETC  '&ZCGPR'(2,1)                                00206400
                     AIF   (T'&ZCGPR NE 'N').ZG55Q  INVALID REG NAME    00206500
.ZG55P               ANOP  ,                                            00206600
                     AIF   (T'&ZCGPR NE 'N').ZG55R  NON NUMERIC         00206700
                     AIF   ('&ZCGPR' EQ '0').ZG55R                      00206800
                     AIF   ('&ZCGPR' LT '2').ZG55Q                      00206900
                     AIF   ('&ZCGPR' LE '12').ZG55R                     00207000
.ZG55Q               ANOP  ,                                            00207100
&ZMS                 SETC  '"RSNCODE='                                  00207200
&ZMS                 SETC  '&ZMS.&RSNCODE"'                             00207300
&ZMS                 SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'    00207400
                     MNOTE 8,' &ZMS IN THE RANGE (0) OR (2)-(12).'      00207500
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00207600
.ZG55R               ANOP  ,                                            00207700
.******************************************************************     00207800
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00207900
.******************************************************************     00208000
                     ACTR  10000                                        00208100
.*----------------------------------------------------------------***   00208200
.***AH.P02 EXTRA POSITIONALS                                            00208300
                     AIF   (N'&SYSLIST LE 0).ZGLISTX  NO EXTRAS         00208400
                     AIF   (N'&SYSLIST NE 2).ZGLISTX1  NOT NULL         00208500
                     AIF   ('&SYSLIST(1)' NE '').ZGLISTX1  NOT NULL     00208600
                     AIF   ('&SYSLIST(2)' EQ '').ZGLISTX  NOT NULL      00208700
.ZGLISTX1            ANOP  ,                                            00208800
&ZCVAL               SETC  ''          ERROR FIELD                      00208900
&ZAWRK               SETA  0           POSITIONAL NUMBER                00209000
.ZGLIST2             ANOP  ,                                            00209100
&ZAWRK               SETA  &ZAWRK+1    NEXT POSITIONAL                  00209200
                     AIF   (&ZAWRK GT N'&SYSLIST).ZGLIST3  DONE         00209300
&ZCVAL               SETC '&ZCVAL,&SYSLIST(&ZAWRK)'  EXTRA              00209400
                     AGO   .ZGLIST2                                     00209500
.*                                                                      00209600
.ZGLIST3             ANOP  ,                                            00209700
&ZCVAL               SETC '&ZCVAL'(2,K'&ZCVAL-1)  STRIP COMMA           00209800
&ZMS                 SETC  'POSITIONAL ARGUMENT(S),'                    00209900
&ZMS                 SETC  '&ZMS "&ZCVAL"'                              00210000
&ZMS                 SETC  '&ZMS CANNOT BE USED.'                       00210100
&ZMS                 SETC  '&ZMS NO POSITIONAL ARGUMENTS'               00210200
                     MNOTE 8,' &ZMS ARE ALLOWED.'                       00210300
&ZMACRET             SETA  8           SET MACRO ERROR RETURN CODE      00210400
.ZGLISTX             ANOP  ,                                            00210500
&ZASYSLNDX           SETA  0                                            00210600
.*-------------------------------------------------------------------   00210700
.***AG.MF04 MF=(SLE)                                                    00210800
.ZGMFX               ANOP  ,           END OF FULL SYNTAX CHECK         00210900
.*******************************************************************    00211000
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       00211100
.*******************************************************************    00211200
                     AIF   (&ZMACRET NE 0).ZLX2  ERROR DETECTED         00211300
.*******************************************************************    00211400
.***AE.01  START OF IWM4SRSC MACRO CODE                                 00211500
.*******************************************************************    00211600
                     LCLC  &M0M0001                 NAME                00211700
&M0M0001             SETC  '&XLABEL'                SET NAME            00211800
                     AIF   (K'&XLABEL NE 0).XLAB2                       00211900
&M0M0001             SETC  'M00M&SYSNDX'            DEFAULT NAME        00212000
.*                                                                      00212100
.XLAB2               ANOP  ,                                            00212200
                     AIF   ('&XMF' EQ 'L').XLAB3                        00212300
&M0M0001 DS    0H                             IWM4SRSC-4                00212400
.XLAB3               ANOP  ,                                            00212500
.*******************************************************************    00212600
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              00212700
.*******************************************************************    00212800
              PUSH  PRINT                                               00212900
                     AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON   00213000
                     PRINT OFF         ++ PR01                          00213100
                     AGO   .ZPRNTXX                                     00213200
.ZPRINTX             PRINT ON                                           00213300
.ZPRNTXX             ANOP  ,                                            00213400
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00213500
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00213600
.********************************************************************   00213700
.***AL.L01 INTERNAL ARRAY TO PRODUCE FORMATTED CODE                     00213800
.********************************************************************   00213900
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       00214000
                      LCLA  &ZOPN1         INVOCATION INDEX             00214100
                      LCLC  &ZOPL(4095)    LABEL                        00214200
                      LCLC  &ZOPO(4095)    OPERATION                    00214300
                      LCLC  &ZOPV(4095)    VALUE                        00214400
                      LCLC  &ZOPD(4095)    DESCRIPTION                  00214500
.*                                                                      00214600
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     00214700
.******************************************************************     00214800
.***AL.L10 IWM4SRSC FMT=LIST MF=S!L PARAMETERS                          00214900
.******************************************************************     00215000
                      AIF   ('&XMF' EQ 'L').ZLMFSL2                     00215100
                      AIF   ('&XMF' NE 'S').ZLMFSLX                     00215200
&XMFCTRL              SETC  '#Z'.'&SYSNDX'.'A'                          00215300
&XMFATTR              SETC  '0D'                                        00215400
.*                                                                      00215500
&ZOPN                 SETA  &ZOPN+1                                     00215600
&ZOPL(&ZOPN)          SETC  ' '                                         00215700
&ZOPO(&ZOPN)          SETC  'CNOP'                                      00215800
&ZOPV(&ZOPN)          SETC  '4,8'                                       00215900
&ZOPN                 SETA  &ZOPN+1                                     00216000
&ZOPL(&ZOPN)          SETC  ' '                                         00216100
&ZOPO(&ZOPN)          SETC  'BRAS'                                      00216200
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL.S'                              00216300
&ZOPD(&ZOPN)          SETC  '++ IWM4SRSC ARG PARMS'                     00216400
.*                                                                      00216500
&ZOPN                 SETA  &ZOPN+1                                     00216600
&ZOPL(&ZOPN)          SETC  ' '                                         00216700
&ZOPO(&ZOPN)          SETC  'SPACE'                                     00216800
&ZOPV(&ZOPN)          SETC  '1'                                         00216900
&ZOPD(&ZOPN)          SETC  ' '                                         00217000
.*                                                                      00217100
.ZLMFSL2              ANOP  ,                                           00217200
.*-------------------------------------------------------------------   00217300
.***AM.L00  IWM4SRSC FMT=LIST name                                      00217400
                      AIF   ('&XMF' NE 'L').ZLMFSL2M                    00217500
&ZOPN                 SETA &ZOPN+1                                      00217600
&ZOPL(&ZOPN)          SETC '&M0M0001'                                   00217700
&ZOPO(&ZOPN)          SETC 'EQU'                                        00217800
&ZOPV(&ZOPN)          SETC '&XMFCTRL'                                   00217900
&ZOPD(&ZOPN)          SETC '++ IWM4SRSC NAME'                           00218000
.ZLMFSL2M             ANOP  ,                                           00218100
.*-------------------------------------------------------------------   00218200
.***AM.L01  IWM4SRSC FMT=LIST PARAMETERS                                00218300
&ZOPN                 SETA &ZOPN+1                                      00218400
&ZOPL(&ZOPN)          SETC '&XMFCTRL'                                   00218500
&ZOPO(&ZOPN)          SETC 'DS'                                         00218600
&ZOPV(&ZOPN)          SETC '&XMFATTR'                                   00218700
&ZOPD(&ZOPN)          SETC '++ IWM4SRSC PARM LIST'                      00218800
.*-------------------------------------------------------------------   00218900
.***AM.L02 XVERSION XL1                                                 00219000
&ZOPN                 SETA &ZOPN+1                                      00219100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XVERSION'                         00219200
&ZOPO(&ZOPN)          SETC 'DS'                                         00219300
&ZOPV(&ZOPN)          SETC 'XL1'                                        00219400
&ZOPD(&ZOPN)          SETC '++ INPUT XVERSION'                          00219500
.*-------------------------------------------------------------------   00219600
.***AM.L09  XOPTIONS BL.8                                               00219700
&ZOPN                 SETA &ZOPN+1                                      00219800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XOPTIONS'                         00219900
&ZOPO(&ZOPN)          SETC 'DS'                                         00220000
&ZOPV(&ZOPN)          SETC 'BL.8'                                       00220100
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL '                            00220200
.*-------------------------------------------------------------------   00220300
.***AM.L09  XPLISTLEN XL2                                               00220400
&ZOPN                 SETA &ZOPN+1                                      00220500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPLISTLEN'                        00220600
&ZOPO(&ZOPN)          SETC 'DS'                                         00220700
&ZOPV(&ZOPN)          SETC 'XL2'                                        00220800
&ZOPD(&ZOPN)          SETC '++ INPUT '                                  00220900
.*-------------------------------------------------------------------   00221000
.***AM.L09  XWEIGHT F                                                   00221100
&ZOPN                 SETA &ZOPN+1                                      00221200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XWEIGHT'                          00221300
&ZOPO(&ZOPN)          SETC 'DS'                                         00221400
&ZOPV(&ZOPN)          SETC 'F'                                          00221500
&ZOPD(&ZOPN)          SETC '++ &ZXWEIGHT '                              00221600
.*-------------------------------------------------------------------   00221700
.***AM.L09  XSTOKEN BL.64                                               00221800
&ZOPN                 SETA &ZOPN+1                                      00221900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSTOKEN'                          00222000
&ZOPO(&ZOPN)          SETC 'DS'                                         00222100
&ZOPV(&ZOPN)          SETC 'BL.64'                                      00222200
&ZOPD(&ZOPN)          SETC '++ &ZXSTOKEN '                              00222300
.*-------------------------------------------------------------------   00222400
.***AM.L09  XABNORM_COUNT F                                             00222500
&ZOPN                 SETA &ZOPN+1                                      00222600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XABNORM_COUNT'                    00222700
&ZOPO(&ZOPN)          SETC 'DS'                                         00222800
&ZOPV(&ZOPN)          SETC 'F'                                          00222900
&ZOPD(&ZOPN)          SETC '++ &ZXABNORM_COUNT '                        00223000
.*-------------------------------------------------------------------   00223100
.***AM.L09  XHEALTH F                                                   00223200
&ZOPN                 SETA &ZOPN+1                                      00223300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XHEALTH'                          00223400
&ZOPO(&ZOPN)          SETC 'DS'                                         00223500
&ZOPV(&ZOPN)          SETC 'F'                                          00223600
&ZOPD(&ZOPN)          SETC '++ &ZXHEALTH '                              00223700
.*-------------------------------------------------------------------   00223800
.***AM.L09  XRSV0018 CL24                                               00223900
&ZOPN                 SETA &ZOPN+1                                      00224000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0018'                         00224100
&ZOPO(&ZOPN)          SETC 'DS'                                         00224200
&ZOPV(&ZOPN)          SETC 'CL24'                                       00224300
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00224400
.*-------------------------------------------------------------------   00224500
.***AM.MLM2 SAVED LOCATION COUNTER                                      00224600
                      AIF  (&XPLISTVER GE 2).ZL8LA                      00224700
                      AIF  ('&ZENDBASEPL' NE '').ZL8LA                  00224800
&ZENDBASEPL           SETC 'YES'                                        00224900
&ZOPN                 SETA &ZOPN+1                                      00225000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._PL_END'                           00225100
&ZOPO(&ZOPN)          SETC 'EQU'                                        00225200
&ZOPV(&ZOPN)          SETC '*'                                          00225300
&ZOPD(&ZOPN)          SETC '++ END OF BASE PLIST'                       00225400
.ZL8LA                ANOP  ,                                           00225500
.*-------------------------------------------------------------------   00225600
.***AM.LVER1                                                            00225700
                      AIF  (&XPLISTVER LT 2).ZL8L                       00225800
.*-------------------------------------------------------------------   00225900
.*-------------------------------------------------------------------   00226000
.***AM.L09  XCPUWEIGHT F                                                00226100
&ZOPN                 SETA &ZOPN+1                                      00226200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCPUWEIGHT'                       00226300
&ZOPO(&ZOPN)          SETC 'DS'                                         00226400
&ZOPV(&ZOPN)          SETC 'F'                                          00226500
&ZOPD(&ZOPN)          SETC '++ &ZXCPUWEIGHT '                           00226600
.*-------------------------------------------------------------------   00226700
.***AM.LVER2                                                            00226800
.ZL8L                 ANOP  ,                                           00226900
.*-------------------------------------------------------------------   00227000
.*-------------------------------------------------------------------   00227100
.***AM.LVER1                                                            00227200
                      AIF  (&XPLISTVER LT 2).ZL9L                       00227300
.*-------------------------------------------------------------------   00227400
.*-------------------------------------------------------------------   00227500
.***AM.L09  XZAAPWEIGHT F                                               00227600
&ZOPN                 SETA &ZOPN+1                                      00227700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XZAAPWEIGHT'                      00227800
&ZOPO(&ZOPN)          SETC 'DS'                                         00227900
&ZOPV(&ZOPN)          SETC 'F'                                          00228000
&ZOPD(&ZOPN)          SETC '++ &ZXZAAPWEIGHT '                          00228100
.*-------------------------------------------------------------------   00228200
.***AM.LVER2                                                            00228300
.ZL9L                 ANOP  ,                                           00228400
.*-------------------------------------------------------------------   00228500
.*-------------------------------------------------------------------   00228600
.***AM.LVER1                                                            00228700
                      AIF  (&XPLISTVER LT 2).ZL10L                      00228800
.*-------------------------------------------------------------------   00228900
.*-------------------------------------------------------------------   00229000
.***AM.L09  XZIIPWEIGHT F                                               00229100
&ZOPN                 SETA &ZOPN+1                                      00229200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XZIIPWEIGHT'                      00229300
&ZOPO(&ZOPN)          SETC 'DS'                                         00229400
&ZOPV(&ZOPN)          SETC 'F'                                          00229500
&ZOPD(&ZOPN)          SETC '++ &ZXZIIPWEIGHT '                          00229600
.*-------------------------------------------------------------------   00229700
.***AM.LVER2                                                            00229800
.ZL10L                ANOP  ,                                           00229900
.*-------------------------------------------------------------------   00230000
.*-------------------------------------------------------------------   00230100
.***AM.LVER1                                                            00230200
                      AIF  (&XPLISTVER LT 2).ZL11L                      00230300
.*-------------------------------------------------------------------   00230400
.*-------------------------------------------------------------------   00230500
.***AM.L09  XCPUPROPORTION F                                            00230600
&ZOPN                 SETA &ZOPN+1                                      00230700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCPUPROPORTION'                   00230800
&ZOPO(&ZOPN)          SETC 'DS'                                         00230900
&ZOPV(&ZOPN)          SETC 'F'                                          00231000
&ZOPD(&ZOPN)          SETC '++ &ZXCPUPROPORTION '                       00231100
.*-------------------------------------------------------------------   00231200
.***AM.LVER2                                                            00231300
.ZL11L                ANOP  ,                                           00231400
.*-------------------------------------------------------------------   00231500
.*-------------------------------------------------------------------   00231600
.***AM.LVER1                                                            00231700
                      AIF  (&XPLISTVER LT 2).ZL12L                      00231800
.*-------------------------------------------------------------------   00231900
.*-------------------------------------------------------------------   00232000
.***AM.L09  XZAAPPROPORTION F                                           00232100
&ZOPN                 SETA &ZOPN+1                                      00232200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XZAAPPROPORTION'                  00232300
&ZOPO(&ZOPN)          SETC 'DS'                                         00232400
&ZOPV(&ZOPN)          SETC 'F'                                          00232500
&ZOPD(&ZOPN)          SETC '++ &ZXZAAPPROPORTION '                      00232600
.*-------------------------------------------------------------------   00232700
.***AM.LVER2                                                            00232800
.ZL12L                ANOP  ,                                           00232900
.*-------------------------------------------------------------------   00233000
.*-------------------------------------------------------------------   00233100
.***AM.LVER1                                                            00233200
                      AIF  (&XPLISTVER LT 2).ZL13L                      00233300
.*-------------------------------------------------------------------   00233400
.*-------------------------------------------------------------------   00233500
.***AM.L09  XZIIPPROPORTION F                                           00233600
&ZOPN                 SETA &ZOPN+1                                      00233700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XZIIPPROPORTION'                  00233800
&ZOPO(&ZOPN)          SETC 'DS'                                         00233900
&ZOPV(&ZOPN)          SETC 'F'                                          00234000
&ZOPD(&ZOPN)          SETC '++ &ZXZIIPPROPORTION '                      00234100
.*-------------------------------------------------------------------   00234200
.***AM.LVER2                                                            00234300
.ZL13L                ANOP  ,                                           00234400
.*-------------------------------------------------------------------   00234500
.*-------------------------------------------------------------------   00234600
.***AM.MLM2 SAVED LOCATION COUNTER                                      00234700
                      AIF  (&XPLISTVER GE 3).ZL14LA                     00234800
                      AIF  ('&ZENDBASEPL' NE '').ZL14LA                 00234900
&ZENDBASEPL           SETC 'YES'                                        00235000
&ZOPN                 SETA &ZOPN+1                                      00235100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._PL_END'                           00235200
&ZOPO(&ZOPN)          SETC 'EQU'                                        00235300
&ZOPV(&ZOPN)          SETC '*'                                          00235400
&ZOPD(&ZOPN)          SETC '++ END OF BASE PLIST'                       00235500
.ZL14LA               ANOP  ,                                           00235600
.*-------------------------------------------------------------------   00235700
.***AM.LVER1                                                            00235800
                      AIF  (&XPLISTVER LT 3).ZL14L                      00235900
.*-------------------------------------------------------------------   00236000
.*-------------------------------------------------------------------   00236100
.***AM.L09  XMAXSRVUNITS F                                              00236200
&ZOPN                 SETA &ZOPN+1                                      00236300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XMAXSRVUNITS'                     00236400
&ZOPO(&ZOPN)          SETC 'DS'                                         00236500
&ZOPV(&ZOPN)          SETC 'F'                                          00236600
&ZOPD(&ZOPN)          SETC '++ &ZXMAXSRVUNITS '                         00236700
.*-------------------------------------------------------------------   00236800
.***AM.LVER2                                                            00236900
.ZL14L                ANOP  ,                                           00237000
.*-------------------------------------------------------------------   00237100
.*-------------------------------------------------------------------   00237200
.***AM.MLM2 SAVED LOCATION COUNTER                                      00237300
                      AIF  (&XPLISTVER GE 4).ZL15LA                     00237400
                      AIF  ('&ZENDBASEPL' NE '').ZL15LA                 00237500
&ZENDBASEPL           SETC 'YES'                                        00237600
&ZOPN                 SETA &ZOPN+1                                      00237700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._PL_END'                           00237800
&ZOPO(&ZOPN)          SETC 'EQU'                                        00237900
&ZOPV(&ZOPN)          SETC '*'                                          00238000
&ZOPD(&ZOPN)          SETC '++ END OF BASE PLIST'                       00238100
.ZL15LA               ANOP  ,                                           00238200
.*-------------------------------------------------------------------   00238300
.***AM.LVER1                                                            00238400
                      AIF  (&XPLISTVER LT 4).ZL15L                      00238500
.*-------------------------------------------------------------------   00238600
.*-------------------------------------------------------------------   00238700
.***AM.L09  XCOST_ZAAP_ON_CP F                                          00238800
&ZOPN                 SETA &ZOPN+1                                      00238900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCOST_ZAAP_ON_CP'                 00239000
&ZOPO(&ZOPN)          SETC 'DS'                                         00239100
&ZOPV(&ZOPN)          SETC 'F'                                          00239200
&ZOPD(&ZOPN)          SETC '++ &ZXCOST_ZAAP_ON_CP '                     00239300
.*-------------------------------------------------------------------   00239400
.***AM.LVER2                                                            00239500
.ZL15L                ANOP  ,                                           00239600
.*-------------------------------------------------------------------   00239700
.*-------------------------------------------------------------------   00239800
.***AM.LVER1                                                            00239900
                      AIF  (&XPLISTVER LT 4).ZL16L                      00240000
.*-------------------------------------------------------------------   00240100
.*-------------------------------------------------------------------   00240200
.***AM.L09  XCOST_ZIIP_ON_CP F                                          00240300
&ZOPN                 SETA &ZOPN+1                                      00240400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCOST_ZIIP_ON_CP'                 00240500
&ZOPO(&ZOPN)          SETC 'DS'                                         00240600
&ZOPV(&ZOPN)          SETC 'F'                                          00240700
&ZOPD(&ZOPN)          SETC '++ &ZXCOST_ZIIP_ON_CP '                     00240800
.*-------------------------------------------------------------------   00240900
.***AM.LVER2                                                            00241000
.ZL16L                ANOP  ,                                           00241100
.*-------------------------------------------------------------------   00241200
.*-------------------------------------------------------------------   00241300
.***AM.LVER1                                                            00241400
                      AIF  (&XPLISTVER LT 4).ZL17L                      00241500
.*-------------------------------------------------------------------   00241600
.*-------------------------------------------------------------------   00241700
.***AM.L09  XIL_WEIGHTING F                                             00241800
&ZOPN                 SETA &ZOPN+1                                      00241900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XIL_WEIGHTING'                    00242000
&ZOPO(&ZOPN)          SETC 'DS'                                         00242100
&ZOPV(&ZOPN)          SETC 'F'                                          00242200
&ZOPD(&ZOPN)          SETC '++ &ZXIL_WEIGHTING '                        00242300
.*-------------------------------------------------------------------   00242400
.***AM.LVER2                                                            00242500
.ZL17L                ANOP  ,                                           00242600
.*-------------------------------------------------------------------   00242700
.*-------------------------------------------------------------------   00242800
.***AM.LVER1                                                            00242900
                      AIF  (&XPLISTVER LT 4).ZL18L                      00243000
.*-------------------------------------------------------------------   00243100
.*-------------------------------------------------------------------   00243200
.***AM.L09  XMAXEQUIVUNITS F                                            00243300
&ZOPN                 SETA &ZOPN+1                                      00243400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XMAXEQUIVUNITS'                   00243500
&ZOPO(&ZOPN)          SETC 'DS'                                         00243600
&ZOPV(&ZOPN)          SETC 'F'                                          00243700
&ZOPD(&ZOPN)          SETC '++ &ZXMAXEQUIVUNITS '                       00243800
.*-------------------------------------------------------------------   00243900
.***AM.LVER2                                                            00244000
.ZL18L                ANOP  ,                                           00244100
.*-------------------------------------------------------------------   00244200
.*-------------------------------------------------------------------   00244300
.***AM.LVER1                                                            00244400
                      AIF  (&XPLISTVER LT 4).ZL19L                      00244500
.*-------------------------------------------------------------------   00244600
.*-------------------------------------------------------------------   00244700
.***AM.L03 XEQUICPU_OPTIONS BL.8                                        00244800
&ZOPN                 SETA &ZOPN+1                                      00244900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XEQUICPU_OPTIONS'                 00245000
&ZOPO(&ZOPN)          SETC 'DS'                                         00245100
&ZOPV(&ZOPN)          SETC 'BL.8'                                       00245200
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'                             00245300
.*-------------------------------------------------------------------   00245400
.***AM.LVER2                                                            00245500
.ZL19L                ANOP  ,                                           00245600
.*-------------------------------------------------------------------   00245700
.*-------------------------------------------------------------------   00245800
.***AM.LVER1                                                            00245900
                      AIF  (&XPLISTVER LT 4).ZL20L                      00246000
.*-------------------------------------------------------------------   00246100
.*                                                                      00246200
&ZOPN                 SETA  &ZOPN+1                                     00246300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XMETHOD_PROPORTIONAL'            00246400
&ZOPO(&ZOPN)          SETC  'EQU'                                       00246500
&ZOPV(&ZOPN)          SETC  'B''10000000'''                             00246600
&ZOPD(&ZOPN)          SETC  '++ XMETHOD.'                               00246700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).PROPORTIONAL'                 00246800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00246900
.*-------------------------------------------------------------------   00247000
.***AM.LVER2                                                            00247100
.ZL20L                ANOP  ,                                           00247200
.*-------------------------------------------------------------------   00247300
.*-------------------------------------------------------------------   00247400
.***AM.LVER1                                                            00247500
                      AIF  (&XPLISTVER LT 4).ZL21L                      00247600
.*-------------------------------------------------------------------   00247700
.*                                                                      00247800
&ZOPN                 SETA  &ZOPN+1                                     00247900
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XMETHOD_EQUICPU'                 00248000
&ZOPO(&ZOPN)          SETC  'EQU'                                       00248100
&ZOPV(&ZOPN)          SETC  'B''01000000'''                             00248200
&ZOPD(&ZOPN)          SETC  '++ XMETHOD.'                               00248300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).EQUICPU'                      00248400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00248500
.*-------------------------------------------------------------------   00248600
.***AM.LVER2                                                            00248700
.ZL21L                ANOP  ,                                           00248800
.*-------------------------------------------------------------------   00248900
.*-------------------------------------------------------------------   00249000
.***AM.L10 END OF IWM4SRSC LIST PARAMETERS                              00249100
&ZOPN                 SETA &ZOPN+1                                      00249200
&ZOPL(&ZOPN)          SETC '&XMFCTRL.L'                                 00249300
&ZOPO(&ZOPN)          SETC 'EQU'                                        00249400
&ZOPV(&ZOPN)          SETC '*-&XMFCTRL'                                 00249500
&ZOPD(&ZOPN)          SETC '++ LENGTH OF PLIST'                         00249600
.*                                                                      00249700
&ZOPN                 SETA &ZOPN+1                                      00249800
&ZOPL(&ZOPN)          SETC ' '                                          00249900
&ZOPO(&ZOPN)          SETC 'SPACE'                                      00250000
&ZOPV(&ZOPN)          SETC '1'                                          00250100
&ZOPD(&ZOPN)          SETC ' '                                          00250200
.*-------------------------------------------------------------------   00250300
.***AL.L12 IWM4SRSC FMT=LIST MF=S!L PARAMETERS                          00250400
                      AIF   ('&XMF' EQ 'L').ZMFLX  DONE IF MF=L         00250500
.*                                                                      00250600
&ZOPN                 SETA  &ZOPN+1                                     00250700
&ZOPL(&ZOPN)          SETC  '&XMFCTRL.S'                                00250800
&ZOPO(&ZOPN)          SETC  'DC'                                        00250900
&ZOPV(&ZOPN)          SETC  '0H''0'''                                   00251000
&ZOPD(&ZOPN)          SETC  '++ IWM4SRSC ARG PARMS'                     00251100
.*                                                                      00251200
.ZLMFSLX              ANOP  ,                                           00251300
.*-------------------------------------------------------------------   00251400
.***AL.L13 SET ZPLLEN TO ITS APPROPRIATE VALUE                          00251500
&ZPLLEN               SETA 48                                           00251600
.*                                                                      00251700
                      AIF  (&XPLISTVER LT 2).ZLLEN2Z                    00251800
&ZPLLEN               SETA 72                                           00251900
.ZLLEN2Z              ANOP  ,                                           00252000
.*                                                                      00252100
                      AIF  (&XPLISTVER LT 3).ZLLEN3Z                    00252200
&ZPLLEN               SETA 76                                           00252300
.ZLLEN3Z              ANOP  ,                                           00252400
.*                                                                      00252500
                      AIF  (&XPLISTVER LT 4).ZLLEN4Z                    00252600
&ZPLLEN               SETA 93                                           00252700
.ZLLEN4Z              ANOP  ,                                           00252800
.*                                                                      00252900
.******************************************************************     00253000
.***AI.L01 IWM4SRSC FMT=LIST FILL IN PARAMETER AREA                     00253100
.******************************************************************     00253200
                      ACTR  10000                                       00253300
&ZCVAL                SETC  'LA'           ASSUME XA MODE               00253400
                      AIF   ('&SYSASCE' EQ 'P').ZIMFXA  SYSSTATE PRI    00253500
&ZCVAL                SETC  'LAE'          XAX MODE                     00253600
.ZIMFXA               ANOP ,                                            00253700
.*                                                                      00253800
                      AIF   ('&XMFCTRL'(1,1) NE '(').ZIMFN2  NOT GPR    00253900
&ZCGPR                SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)  GET GPR         00254000
                      AIF   ('&ZCGPR' EQ 'GPR1').ZIMFNX                 00254100
                      AIF   ('&ZCGPR' EQ 'GPR01').ZIMFNX                00254200
                      AIF   ('&ZCGPR' EQ 'REG1').ZIMFNX                 00254300
                      AIF   ('&ZCGPR' EQ 'REG01').ZIMFNX                00254400
                      AIF   ('&ZCGPR' EQ 'R1').ZIMFNX                   00254500
                      AIF   ('&ZCGPR' EQ '1').ZIMFNX                    00254600
                      AIF   ('&ZCGPR' EQ '01').ZIMFNX                   00254700
&ZOPN                 SETA  &ZOPN+1                                     00254800
&ZOPL(&ZOPN)          SETC  ' '                                         00254900
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00255000
&ZOPV(&ZOPN)          SETC  '1,0(,&ZCGPR)'                              00255100
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00255200
                      AGO   .ZIMFNX                                     00255300
.*                                                                      00255400
.ZIMFN2               ANOP ,                                            00255500
                      AIF   ('&XMF' NE 'S').ZIMFNX1                     00255600
                      AIF   ('&ZCVAL' NE 'LAE').ZIMFNX                  00255700
&ZOPN                 SETA  &ZOPN+1                                     00255800
&ZOPL(&ZOPN)          SETC  ' '                                         00255900
&ZOPO(&ZOPN)          SETC  'LAE'                                       00256000
&ZOPV(&ZOPN)          SETC  '1,0(1,0)'                                  00256100
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00256200
                      AGO   .ZIMFNX                                     00256300
.ZIMFNX1              ANOP ,                                            00256400
&ZOPN                 SETA  &ZOPN+1                                     00256500
&ZOPL(&ZOPN)          SETC  ' '                                         00256600
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00256700
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL'                                00256800
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00256900
.ZIMFNX               ANOP ,                                            00257000
.********************************************************************   00257100
.***AI.L02 IWM4SRSC FMT=LIST INITIALIZE PARAMETER AREA                  00257200
.********************************************************************   00257300
.***AI.L03 MF=(SLE)                                                     00257400
                      AIF   ('&XMF' EQ 'L').ZIMFLX                      00257500
.*                                                                      00257600
&ZOPN                 SETA  &ZOPN+1                                     00257700
&ZOPL(&ZOPN)          SETC  ' '                                         00257800
&ZOPO(&ZOPN)          SETC  'XC'                                        00257900
&ZOPV(&ZOPN)          SETC  '0(&ZPLLEN,1),0(1)'                         00258000
&ZOPD(&ZOPN)          SETC  '++ INITIALIZE'                             00258100
.ZIMFLX               ANOP  ,                                           00258200
.*-------------------------------------------------------------------   00258300
.***AI.L04A XVERSION XL1                                                00258400
                      AIF   (&XPLISTVER EQ 0).ZIMFVW                    00258500
&ZOPN                 SETA  &ZOPN+1                                     00258600
&ZOPL(&ZOPN)          SETC  ' '                                         00258700
&ZOPO(&ZOPN)          SETC  'MVI'                                       00258800
&ZOPV(&ZOPN)          SETC  '0(1),&XPLISTVER'                           00258900
&ZOPD(&ZOPN)          SETC  '++ INPUT XVERSION XL1'                     00259000
.ZIMFVW               ANOP  ,                                           00259100
.*-------------------------------------------------------------------   00259200
.***AI.L04 XPLISTLEN XL2                                                00259300
&ZOPN                 SETA  &ZOPN+1                                     00259400
&ZOPL(&ZOPN)          SETC  ' '                                         00259500
&ZOPO(&ZOPN)          SETC  'MVC'                                       00259600
&ZOPV(&ZOPN)          SETC  '2(2,1),=AL2(&ZPLLEN)'                      00259700
&ZOPD(&ZOPN)          SETC  '++ INPUT XPLISTLEN XL2'                    00259800
.*-------------------------------------------------------------------   00259900
.***AI.L25  XSTOKEN XL8                                                 00260000
                      AIF   ('&ZXSTOKEN' EQ '').ZI5E                    00260100
                      AIF   ('&ZXSTOKEN' EQ 'OUTPUT').ZI5E              00260200
&ZCGPR                SETC  '&XSTOKEN'                                  00260300
.*                                                                      00260400
                      AIF   ('&XSTOKEN'(1,1) NE '(').ZI5B               00260500
&ZCGPR   SETC  '0('.'&XSTOKEN'(2,K'&XSTOKEN-2).')'                      00260600
                      AGO   .ZI5D                                       00260700
.ZI5B                 ANOP  ,                                           00260800
.*                                                                      00260900
&ZC                   SETC  '&XSTOKEN'(1,1)                             00261000
                      AIF   (T'&ZC NE 'N').ZI5D                         00261100
&ZC                   SETC  '&XSTOKEN'                                  00261200
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI5D                00261300
&ZCGPR                SETC  '=BL8''&XSTOKEN'''                          00261400
.*                                                                      00261500
.ZI5D                 ANOP  ,                                           00261600
.*                                                                      00261700
&ZOPN                 SETA  &ZOPN+1                                     00261800
&ZOPL(&ZOPN)          SETC  ' '                                         00261900
&ZOPO(&ZOPN)          SETC  'MVC'                                       00262000
&ZOPV(&ZOPN)          SETC  '8(8,1),&ZCGPR'                             00262100
&ZOPD(&ZOPN)          SETC  '++ &ZXSTOKEN XSTOKEN'                      00262200
.*                                                                      00262300
.ZI5E                 ANOP  ,                                           00262400
.*-------------------------------------------------------------------   00262500
.***AI.LVER01                                                           00262600
                      AIF  (&XPLISTVER LT 4).ZI16Z                      00262700
.*-------------------------------------------------------------------   00262800
.***AI.L25  XCOST_ZAAP_ON_CP F                                          00262900
                      AIF   ('&ZXCOST_ZAAP_ON_CP' EQ '').ZI16E          00263000
                      AIF   ('&ZXCOST_ZAAP_ON_CP' EQ 'OUTPUT').ZI16E    00263100
&ZCGPR                SETC  '&XCOST_ZAAP_ON_CP'                         00263200
.*                                                                      00263300
                      AIF   ('&XCOST_ZAAP_ON_CP'(1,1) NE '(').ZI16B     00263400
&ZCGPR   SETC  '0('.'&XCOST_ZAAP_ON_CP'(2,K'&XCOST_ZAAP_ON_CP-2).')'    00263500
                      AGO   .ZI16D                                      00263600
.ZI16B                ANOP  ,                                           00263700
.*                                                                      00263800
&ZC                   SETC  '&XCOST_ZAAP_ON_CP'(1,1)                    00263900
                      AIF   (T'&ZC NE 'N').ZI16D                        00264000
&ZC                   SETC  '&XCOST_ZAAP_ON_CP'                         00264100
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI16D               00264200
&ZCGPR                SETC  '=FL4''&XCOST_ZAAP_ON_CP'''                 00264300
.*                                                                      00264400
.ZI16D                ANOP  ,                                           00264500
.*                                                                      00264600
&ZOPN                 SETA  &ZOPN+1                                     00264700
&ZOPL(&ZOPN)          SETC  ' '                                         00264800
&ZOPO(&ZOPN)          SETC  'MVC'                                       00264900
&ZOPV(&ZOPN)          SETC  '76(4,1),&ZCGPR'                            00265000
&ZOPD(&ZOPN)          SETC  '++ &ZXCOST_ZAAP_ON_CP XCOST_ZAAP_ON_CP'    00265100
.*                                                                      00265200
.ZI16E                ANOP  ,                                           00265300
.*-------------------------------------------------------------------   00265400
.***AI.LVER02                                                           00265500
.ZI16Z                ANOP  ,                                           00265600
.*-------------------------------------------------------------------   00265700
.***AI.LVER01                                                           00265800
                      AIF  (&XPLISTVER LT 4).ZI17Z                      00265900
.*-------------------------------------------------------------------   00266000
.***AI.L25  XCOST_ZIIP_ON_CP F                                          00266100
                      AIF   ('&ZXCOST_ZIIP_ON_CP' EQ '').ZI17E          00266200
                      AIF   ('&ZXCOST_ZIIP_ON_CP' EQ 'OUTPUT').ZI17E    00266300
&ZCGPR                SETC  '&XCOST_ZIIP_ON_CP'                         00266400
.*                                                                      00266500
                      AIF   ('&XCOST_ZIIP_ON_CP'(1,1) NE '(').ZI17B     00266600
&ZCGPR   SETC  '0('.'&XCOST_ZIIP_ON_CP'(2,K'&XCOST_ZIIP_ON_CP-2).')'    00266700
                      AGO   .ZI17D                                      00266800
.ZI17B                ANOP  ,                                           00266900
.*                                                                      00267000
&ZC                   SETC  '&XCOST_ZIIP_ON_CP'(1,1)                    00267100
                      AIF   (T'&ZC NE 'N').ZI17D                        00267200
&ZC                   SETC  '&XCOST_ZIIP_ON_CP'                         00267300
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI17D               00267400
&ZCGPR                SETC  '=FL4''&XCOST_ZIIP_ON_CP'''                 00267500
.*                                                                      00267600
.ZI17D                ANOP  ,                                           00267700
.*                                                                      00267800
&ZOPN                 SETA  &ZOPN+1                                     00267900
&ZOPL(&ZOPN)          SETC  ' '                                         00268000
&ZOPO(&ZOPN)          SETC  'MVC'                                       00268100
&ZOPV(&ZOPN)          SETC  '80(4,1),&ZCGPR'                            00268200
&ZOPD(&ZOPN)          SETC  '++ &ZXCOST_ZIIP_ON_CP XCOST_ZIIP_ON_CP'    00268300
.*                                                                      00268400
.ZI17E                ANOP  ,                                           00268500
.*-------------------------------------------------------------------   00268600
.***AI.LVER02                                                           00268700
.ZI17Z                ANOP  ,                                           00268800
.*-------------------------------------------------------------------   00268900
.***AI.LVER01                                                           00269000
                      AIF  (&XPLISTVER LT 4).ZI18Z                      00269100
.*-------------------------------------------------------------------   00269200
.***AI.L25  XIL_WEIGHTING F                                             00269300
                      AIF   ('&ZXIL_WEIGHTING' EQ '').ZI18E             00269400
                      AIF   ('&ZXIL_WEIGHTING' EQ 'OUTPUT').ZI18E       00269500
&ZCGPR                SETC  '&XIL_WEIGHTING'                            00269600
         AIF   ('&XIL_WEIGHTING' EQ '0').ZI18E                          00269700
         AIF   ('&XIL_WEIGHTING' EQ '0').ZI18E                          00269800
.*                                                                      00269900
                      AIF   ('&XIL_WEIGHTING'(1,1) NE '(').ZI18B        00270000
&ZCGPR   SETC  '0('.'&XIL_WEIGHTING'(2,K'&XIL_WEIGHTING-2).')'          00270100
                      AGO   .ZI18D                                      00270200
.ZI18B                ANOP  ,                                           00270300
.*                                                                      00270400
&ZC                   SETC  '&XIL_WEIGHTING'(1,1)                       00270500
                      AIF   (T'&ZC NE 'N').ZI18D                        00270600
&ZC                   SETC  '&XIL_WEIGHTING'                            00270700
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI18D               00270800
&ZCGPR                SETC  '=FL4''&XIL_WEIGHTING'''                    00270900
.*                                                                      00271000
.ZI18D                ANOP  ,                                           00271100
.*                                                                      00271200
&ZOPN                 SETA  &ZOPN+1                                     00271300
&ZOPL(&ZOPN)          SETC  ' '                                         00271400
&ZOPO(&ZOPN)          SETC  'MVC'                                       00271500
&ZOPV(&ZOPN)          SETC  '84(4,1),&ZCGPR'                            00271600
&ZOPD(&ZOPN)          SETC  '++ &ZXIL_WEIGHTING XIL_WEIGHTING'          00271700
.*                                                                      00271800
.ZI18E                ANOP  ,                                           00271900
.*-------------------------------------------------------------------   00272000
.***AI.LVER02                                                           00272100
.ZI18Z                ANOP  ,                                           00272200
.*-------------------------------------------------------------------   00272300
.***AI.LVER01                                                           00272400
                      AIF  (&XPLISTVER LT 4).ZI20Z                      00272500
.*-------------------------------------------------------------------   00272600
.***AI.L05 XEQUICPU_OPTIONS BL1                                         00272700
&ZW                   SETC  ''                                          00272800
&ZCLNG                SETC  ''             RESET BIT ON FLAG            00272900
.*-------------------------------------------------------------------   00273000
.***AI.LVER02                                                           00273100
.ZI20Z                ANOP  ,                                           00273200
.*-------------------------------------------------------------------   00273300
.***AI.LVER01                                                           00273400
                      AIF  (&XPLISTVER LT 4).ZI21Z                      00273500
.*-------------------------------------------------------------------   00273600
.***AI.L08 XEQUICPU_OPTIONS "PROPORTIONAL"                              00273700
.***      BL1'1XXXXXXX'                                                 00273800
         AIF   ('&XMETHOD' NE 'PROPORTIONAL').ZI21A                     00273900
&ZW                   SETC  '&ZW.1'                                     00274000
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00274100
                      AGO   .ZI21C                                      00274200
.*                                                                      00274300
.ZI21A                ANOP  ,                                           00274400
&ZW                   SETC  '&ZW.0'                                     00274500
.ZI21C                ANOP  ,                                           00274600
.*-------------------------------------------------------------------   00274700
.***AI.LVER02                                                           00274800
.ZI21Z                ANOP  ,                                           00274900
.*-------------------------------------------------------------------   00275000
.***AI.LVER01                                                           00275100
                      AIF  (&XPLISTVER LT 4).ZI22Z                      00275200
.*-------------------------------------------------------------------   00275300
.***AI.L08 XEQUICPU_OPTIONS "EQUICPU"                                   00275400
.***      BL1'X1XXXXXX'                                                 00275500
         AIF   ('&XMETHOD' NE 'EQUICPU').ZI22A                          00275600
&ZW                   SETC  '&ZW.1000000'                               00275700
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00275800
                      AGO   .ZI22C                                      00275900
.*                                                                      00276000
.ZI22A                ANOP  ,                                           00276100
&ZW                   SETC  '&ZW.0000000'                               00276200
.ZI22C                ANOP  ,                                           00276300
.*-------------------------------------------------------------------   00276400
.***AI.L11 XEQUICPU_OPTIONS BL1                                         00276500
                      AIF   ('&ZCLNG' NE 'YES').ZI22E  ALL ZERO BITS    00276600
&ZOPN                 SETA  &ZOPN+1                                     00276700
&ZOPL(&ZOPN)          SETC  ' '                                         00276800
&ZOPO(&ZOPN)          SETC  'OI'                                        00276900
&ZOPV(&ZOPN)          SETC  '92(1),B''&ZW'''                            00277000
&ZOPD(&ZOPN)          SETC  '++ INPUT BL1'                              00277100
.ZI22E                ANOP  ,                                           00277200
.*-------------------------------------------------------------------   00277300
.***AI.LVER02                                                           00277400
.ZI22Z                ANOP  ,                                           00277500
.*-------------------------------------------------------------------   00277600
&ZOPN1                SETA &ZOPN                                        00277700
.*******************************************************************    00277800
.***  PROCESS IWM4SRSC OUTPUT PARAMETERS                                00277900
.*******************************************************************    00278000
                      ACTR  10000                                       00278100
.*------------------------------------------------------------------    00278200
.***AO.L02 XWEIGHT F                                                    00278300
         AIF   ('&ZXWEIGHT' EQ 'OUTPUT').ZO4A  OUTPUT                   00278400
         AIF   ('&ZXWEIGHT' NE 'INOUT').ZO4C  INOUT                     00278500
.ZO4A    AIF   ('&XWEIGHT'(1,1) NE '(').ZO4B  ADDR IN GPR               00278600
&ZCGPR   SETC  '&XWEIGHT'(2,K'&XWEIGHT-2)                               00278700
&ZOPN                 SETA  &ZOPN+1                                     00278800
&ZOPL(&ZOPN)          SETC  ' '                                         00278900
&ZOPO(&ZOPN)          SETC  'MVC'                                       00279000
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),4(1)'                          00279100
&ZOPD(&ZOPN)          SETC  '++ XWEIGHT F'                              00279200
                      AGO   .ZO4C                                       00279300
.*                                                                      00279400
.ZO4B                 ANOP  ,                                           00279500
&ZAWRK   SETA  K'&XWEIGHT                                               00279600
         AIF   ('&XWEIGHT'(&ZAWRK,1) NE ')').ZO4G                       00279700
&ZN      SETA  2                                                        00279800
.ZO4H    ANOP                                                           00279900
         AIF   (&ZN GE &ZAWRK).ZO4G                                     00280000
         AIF   ('&XWEIGHT'(&ZN,1) NE '(').ZO4I                          00280100
&ZC      SETC  '&XWEIGHT'(1,&ZN).'4'.','                                00280200
&ZC      SETC  '&ZC'.'&XWEIGHT'(&ZN+1,&ZAWRK-&ZN).',4(1)'               00280300
         AGO   .ZO4J                                                    00280400
.ZO4I    ANOP                                                           00280500
&ZN      SETA  &ZN+1                                                    00280600
         AGO   .ZO4H                                                    00280700
.ZO4G    ANOP                                                           00280800
&ZC      SETC  '&XWEIGHT.(4),4(1)'                                      00280900
.ZO4J    ANOP                                                           00281000
&ZOPN                 SETA  &ZOPN+1                                     00281100
&ZOPL(&ZOPN)          SETC  ' '                                         00281200
&ZOPO(&ZOPN)          SETC  'MVC'                                       00281300
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00281400
&ZOPD(&ZOPN)          SETC  '++ XWEIGHT F'                              00281500
.ZO4C                 ANOP  ,                                           00281600
.*------------------------------------------------------------------    00281700
.***AO.L02 XABNORM_COUNT F                                              00281800
         AIF   ('&ZXABNORM_COUNT' EQ 'OUTPUT').ZO6A  OUTPUT             00281900
         AIF   ('&ZXABNORM_COUNT' NE 'INOUT').ZO6C  INOUT               00282000
.ZO6A    AIF   ('&XABNORM_COUNT'(1,1) NE '(').ZO6B  ADDR IN GPR         00282100
&ZCGPR   SETC  '&XABNORM_COUNT'(2,K'&XABNORM_COUNT-2)                   00282200
&ZOPN                 SETA  &ZOPN+1                                     00282300
&ZOPL(&ZOPN)          SETC  ' '                                         00282400
&ZOPO(&ZOPN)          SETC  'MVC'                                       00282500
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),16(1)'                         00282600
&ZOPD(&ZOPN)          SETC  '++ XABNORM_COUNT F'                        00282700
                      AGO   .ZO6C                                       00282800
.*                                                                      00282900
.ZO6B                 ANOP  ,                                           00283000
&ZAWRK   SETA  K'&XABNORM_COUNT                                         00283100
         AIF   ('&XABNORM_COUNT'(&ZAWRK,1) NE ')').ZO6G                 00283200
&ZN      SETA  2                                                        00283300
.ZO6H    ANOP                                                           00283400
         AIF   (&ZN GE &ZAWRK).ZO6G                                     00283500
         AIF   ('&XABNORM_COUNT'(&ZN,1) NE '(').ZO6I                    00283600
&ZC      SETC  '&XABNORM_COUNT'(1,&ZN).'4'.','                          00283700
&ZC      SETC  '&ZC'.'&XABNORM_COUNT'(&ZN+1,&ZAWRK-&ZN).',16(1)'        00283800
         AGO   .ZO6J                                                    00283900
.ZO6I    ANOP                                                           00284000
&ZN      SETA  &ZN+1                                                    00284100
         AGO   .ZO6H                                                    00284200
.ZO6G    ANOP                                                           00284300
&ZC      SETC  '&XABNORM_COUNT.(4),16(1)'                               00284400
.ZO6J    ANOP                                                           00284500
&ZOPN                 SETA  &ZOPN+1                                     00284600
&ZOPL(&ZOPN)          SETC  ' '                                         00284700
&ZOPO(&ZOPN)          SETC  'MVC'                                       00284800
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00284900
&ZOPD(&ZOPN)          SETC  '++ XABNORM_COUNT F'                        00285000
.ZO6C                 ANOP  ,                                           00285100
.*------------------------------------------------------------------    00285200
.***AO.L02 XHEALTH F                                                    00285300
         AIF   ('&ZXHEALTH' EQ 'OUTPUT').ZO7A  OUTPUT                   00285400
         AIF   ('&ZXHEALTH' NE 'INOUT').ZO7C  INOUT                     00285500
.ZO7A    AIF   ('&XHEALTH'(1,1) NE '(').ZO7B  ADDR IN GPR               00285600
&ZCGPR   SETC  '&XHEALTH'(2,K'&XHEALTH-2)                               00285700
&ZOPN                 SETA  &ZOPN+1                                     00285800
&ZOPL(&ZOPN)          SETC  ' '                                         00285900
&ZOPO(&ZOPN)          SETC  'MVC'                                       00286000
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),20(1)'                         00286100
&ZOPD(&ZOPN)          SETC  '++ XHEALTH F'                              00286200
                      AGO   .ZO7C                                       00286300
.*                                                                      00286400
.ZO7B                 ANOP  ,                                           00286500
&ZAWRK   SETA  K'&XHEALTH                                               00286600
         AIF   ('&XHEALTH'(&ZAWRK,1) NE ')').ZO7G                       00286700
&ZN      SETA  2                                                        00286800
.ZO7H    ANOP                                                           00286900
         AIF   (&ZN GE &ZAWRK).ZO7G                                     00287000
         AIF   ('&XHEALTH'(&ZN,1) NE '(').ZO7I                          00287100
&ZC      SETC  '&XHEALTH'(1,&ZN).'4'.','                                00287200
&ZC      SETC  '&ZC'.'&XHEALTH'(&ZN+1,&ZAWRK-&ZN).',20(1)'              00287300
         AGO   .ZO7J                                                    00287400
.ZO7I    ANOP                                                           00287500
&ZN      SETA  &ZN+1                                                    00287600
         AGO   .ZO7H                                                    00287700
.ZO7G    ANOP                                                           00287800
&ZC      SETC  '&XHEALTH.(4),20(1)'                                     00287900
.ZO7J    ANOP                                                           00288000
&ZOPN                 SETA  &ZOPN+1                                     00288100
&ZOPL(&ZOPN)          SETC  ' '                                         00288200
&ZOPO(&ZOPN)          SETC  'MVC'                                       00288300
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00288400
&ZOPD(&ZOPN)          SETC  '++ XHEALTH F'                              00288500
.ZO7C                 ANOP  ,                                           00288600
.*------------------------------------------------------------------    00288700
.***AO.LVER01                                                           00288800
                      AIF  (&XPLISTVER LT 2).ZO9Z  PLVER                00288900
.*------------------------------------------------------------------    00289000
.***AO.L02 XCPUWEIGHT F                                                 00289100
         AIF   ('&ZXCPUWEIGHT' EQ 'OUTPUT').ZO9A  OUTPUT                00289200
         AIF   ('&ZXCPUWEIGHT' NE 'INOUT').ZO9C  INOUT                  00289300
.ZO9A    AIF   ('&XCPUWEIGHT'(1,1) NE '(').ZO9B  ADDR IN GPR            00289400
&ZCGPR   SETC  '&XCPUWEIGHT'(2,K'&XCPUWEIGHT-2)                         00289500
&ZOPN                 SETA  &ZOPN+1                                     00289600
&ZOPL(&ZOPN)          SETC  ' '                                         00289700
&ZOPO(&ZOPN)          SETC  'MVC'                                       00289800
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),48(1)'                         00289900
&ZOPD(&ZOPN)          SETC  '++ XCPUWEIGHT F'                           00290000
                      AGO   .ZO9C                                       00290100
.*                                                                      00290200
.ZO9B                 ANOP  ,                                           00290300
&ZAWRK   SETA  K'&XCPUWEIGHT                                            00290400
         AIF   ('&XCPUWEIGHT'(&ZAWRK,1) NE ')').ZO9G                    00290500
&ZN      SETA  2                                                        00290600
.ZO9H    ANOP                                                           00290700
         AIF   (&ZN GE &ZAWRK).ZO9G                                     00290800
         AIF   ('&XCPUWEIGHT'(&ZN,1) NE '(').ZO9I                       00290900
&ZC      SETC  '&XCPUWEIGHT'(1,&ZN).'4'.','                             00291000
&ZC      SETC  '&ZC'.'&XCPUWEIGHT'(&ZN+1,&ZAWRK-&ZN).',48(1)'           00291100
         AGO   .ZO9J                                                    00291200
.ZO9I    ANOP                                                           00291300
&ZN      SETA  &ZN+1                                                    00291400
         AGO   .ZO9H                                                    00291500
.ZO9G    ANOP                                                           00291600
&ZC      SETC  '&XCPUWEIGHT.(4),48(1)'                                  00291700
.ZO9J    ANOP                                                           00291800
&ZOPN                 SETA  &ZOPN+1                                     00291900
&ZOPL(&ZOPN)          SETC  ' '                                         00292000
&ZOPO(&ZOPN)          SETC  'MVC'                                       00292100
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00292200
&ZOPD(&ZOPN)          SETC  '++ XCPUWEIGHT F'                           00292300
.ZO9C                 ANOP  ,                                           00292400
.*------------------------------------------------------------------    00292500
.***AO.LVER02                                                           00292600
.ZO9Z                 ANOP  ,                                           00292700
.*------------------------------------------------------------------    00292800
.***AO.LVER01                                                           00292900
                      AIF  (&XPLISTVER LT 2).ZO10Z  PLVER               00293000
.*------------------------------------------------------------------    00293100
.***AO.L02 XZAAPWEIGHT F                                                00293200
         AIF   ('&ZXZAAPWEIGHT' EQ 'OUTPUT').ZO10A  OUTPUT              00293300
         AIF   ('&ZXZAAPWEIGHT' NE 'INOUT').ZO10C  INOUT                00293400
.ZO10A    AIF   ('&XZAAPWEIGHT'(1,1) NE '(').ZO10B  ADDR IN GPR         00293500
&ZCGPR   SETC  '&XZAAPWEIGHT'(2,K'&XZAAPWEIGHT-2)                       00293600
&ZOPN                 SETA  &ZOPN+1                                     00293700
&ZOPL(&ZOPN)          SETC  ' '                                         00293800
&ZOPO(&ZOPN)          SETC  'MVC'                                       00293900
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),52(1)'                         00294000
&ZOPD(&ZOPN)          SETC  '++ XZAAPWEIGHT F'                          00294100
                      AGO   .ZO10C                                      00294200
.*                                                                      00294300
.ZO10B                ANOP  ,                                           00294400
&ZAWRK   SETA  K'&XZAAPWEIGHT                                           00294500
         AIF   ('&XZAAPWEIGHT'(&ZAWRK,1) NE ')').ZO10G                  00294600
&ZN      SETA  2                                                        00294700
.ZO10H    ANOP                                                          00294800
         AIF   (&ZN GE &ZAWRK).ZO10G                                    00294900
         AIF   ('&XZAAPWEIGHT'(&ZN,1) NE '(').ZO10I                     00295000
&ZC      SETC  '&XZAAPWEIGHT'(1,&ZN).'4'.','                            00295100
&ZC      SETC  '&ZC'.'&XZAAPWEIGHT'(&ZN+1,&ZAWRK-&ZN).',52(1)'          00295200
         AGO   .ZO10J                                                   00295300
.ZO10I    ANOP                                                          00295400
&ZN      SETA  &ZN+1                                                    00295500
         AGO   .ZO10H                                                   00295600
.ZO10G    ANOP                                                          00295700
&ZC      SETC  '&XZAAPWEIGHT.(4),52(1)'                                 00295800
.ZO10J    ANOP                                                          00295900
&ZOPN                 SETA  &ZOPN+1                                     00296000
&ZOPL(&ZOPN)          SETC  ' '                                         00296100
&ZOPO(&ZOPN)          SETC  'MVC'                                       00296200
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00296300
&ZOPD(&ZOPN)          SETC  '++ XZAAPWEIGHT F'                          00296400
.ZO10C                ANOP  ,                                           00296500
.*------------------------------------------------------------------    00296600
.***AO.LVER02                                                           00296700
.ZO10Z                ANOP  ,                                           00296800
.*------------------------------------------------------------------    00296900
.***AO.LVER01                                                           00297000
                      AIF  (&XPLISTVER LT 2).ZO11Z  PLVER               00297100
.*------------------------------------------------------------------    00297200
.***AO.L02 XZIIPWEIGHT F                                                00297300
         AIF   ('&ZXZIIPWEIGHT' EQ 'OUTPUT').ZO11A  OUTPUT              00297400
         AIF   ('&ZXZIIPWEIGHT' NE 'INOUT').ZO11C  INOUT                00297500
.ZO11A    AIF   ('&XZIIPWEIGHT'(1,1) NE '(').ZO11B  ADDR IN GPR         00297600
&ZCGPR   SETC  '&XZIIPWEIGHT'(2,K'&XZIIPWEIGHT-2)                       00297700
&ZOPN                 SETA  &ZOPN+1                                     00297800
&ZOPL(&ZOPN)          SETC  ' '                                         00297900
&ZOPO(&ZOPN)          SETC  'MVC'                                       00298000
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),56(1)'                         00298100
&ZOPD(&ZOPN)          SETC  '++ XZIIPWEIGHT F'                          00298200
                      AGO   .ZO11C                                      00298300
.*                                                                      00298400
.ZO11B                ANOP  ,                                           00298500
&ZAWRK   SETA  K'&XZIIPWEIGHT                                           00298600
         AIF   ('&XZIIPWEIGHT'(&ZAWRK,1) NE ')').ZO11G                  00298700
&ZN      SETA  2                                                        00298800
.ZO11H    ANOP                                                          00298900
         AIF   (&ZN GE &ZAWRK).ZO11G                                    00299000
         AIF   ('&XZIIPWEIGHT'(&ZN,1) NE '(').ZO11I                     00299100
&ZC      SETC  '&XZIIPWEIGHT'(1,&ZN).'4'.','                            00299200
&ZC      SETC  '&ZC'.'&XZIIPWEIGHT'(&ZN+1,&ZAWRK-&ZN).',56(1)'          00299300
         AGO   .ZO11J                                                   00299400
.ZO11I    ANOP                                                          00299500
&ZN      SETA  &ZN+1                                                    00299600
         AGO   .ZO11H                                                   00299700
.ZO11G    ANOP                                                          00299800
&ZC      SETC  '&XZIIPWEIGHT.(4),56(1)'                                 00299900
.ZO11J    ANOP                                                          00300000
&ZOPN                 SETA  &ZOPN+1                                     00300100
&ZOPL(&ZOPN)          SETC  ' '                                         00300200
&ZOPO(&ZOPN)          SETC  'MVC'                                       00300300
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00300400
&ZOPD(&ZOPN)          SETC  '++ XZIIPWEIGHT F'                          00300500
.ZO11C                ANOP  ,                                           00300600
.*------------------------------------------------------------------    00300700
.***AO.LVER02                                                           00300800
.ZO11Z                ANOP  ,                                           00300900
.*------------------------------------------------------------------    00301000
.***AO.LVER01                                                           00301100
                      AIF  (&XPLISTVER LT 2).ZO12Z  PLVER               00301200
.*------------------------------------------------------------------    00301300
.***AO.L02 XCPUPROPORTION F                                             00301400
         AIF   ('&ZXCPUPROPORTION' EQ 'OUTPUT').ZO12A  OUTPUT           00301500
         AIF   ('&ZXCPUPROPORTION' NE 'INOUT').ZO12C  INOUT             00301600
.ZO12A    AIF   ('&XCPUPROPORTION'(1,1) NE '(').ZO12B  ADDR IN GPR      00301700
&ZCGPR   SETC  '&XCPUPROPORTION'(2,K'&XCPUPROPORTION-2)                 00301800
&ZOPN                 SETA  &ZOPN+1                                     00301900
&ZOPL(&ZOPN)          SETC  ' '                                         00302000
&ZOPO(&ZOPN)          SETC  'MVC'                                       00302100
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),60(1)'                         00302200
&ZOPD(&ZOPN)          SETC  '++ XCPUPROPORTION F'                       00302300
                      AGO   .ZO12C                                      00302400
.*                                                                      00302500
.ZO12B                ANOP  ,                                           00302600
&ZAWRK   SETA  K'&XCPUPROPORTION                                        00302700
         AIF   ('&XCPUPROPORTION'(&ZAWRK,1) NE ')').ZO12G               00302800
&ZN      SETA  2                                                        00302900
.ZO12H    ANOP                                                          00303000
         AIF   (&ZN GE &ZAWRK).ZO12G                                    00303100
         AIF   ('&XCPUPROPORTION'(&ZN,1) NE '(').ZO12I                  00303200
&ZC      SETC  '&XCPUPROPORTION'(1,&ZN).'4'.','                         00303300
&ZC      SETC  '&ZC'.'&XCPUPROPORTION'(&ZN+1,&ZAWRK-&ZN).',60(1)'       00303400
         AGO   .ZO12J                                                   00303500
.ZO12I    ANOP                                                          00303600
&ZN      SETA  &ZN+1                                                    00303700
         AGO   .ZO12H                                                   00303800
.ZO12G    ANOP                                                          00303900
&ZC      SETC  '&XCPUPROPORTION.(4),60(1)'                              00304000
.ZO12J    ANOP                                                          00304100
&ZOPN                 SETA  &ZOPN+1                                     00304200
&ZOPL(&ZOPN)          SETC  ' '                                         00304300
&ZOPO(&ZOPN)          SETC  'MVC'                                       00304400
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00304500
&ZOPD(&ZOPN)          SETC  '++ XCPUPROPORTION F'                       00304600
.ZO12C                ANOP  ,                                           00304700
.*------------------------------------------------------------------    00304800
.***AO.LVER02                                                           00304900
.ZO12Z                ANOP  ,                                           00305000
.*------------------------------------------------------------------    00305100
.***AO.LVER01                                                           00305200
                      AIF  (&XPLISTVER LT 2).ZO13Z  PLVER               00305300
.*------------------------------------------------------------------    00305400
.***AO.L02 XZAAPPROPORTION F                                            00305500
         AIF   ('&ZXZAAPPROPORTION' EQ 'OUTPUT').ZO13A  OUTPUT          00305600
         AIF   ('&ZXZAAPPROPORTION' NE 'INOUT').ZO13C  INOUT            00305700
.ZO13A    AIF   ('&XZAAPPROPORTION'(1,1) NE '(').ZO13B  ADDR IN GPR     00305800
&ZCGPR   SETC  '&XZAAPPROPORTION'(2,K'&XZAAPPROPORTION-2)               00305900
&ZOPN                 SETA  &ZOPN+1                                     00306000
&ZOPL(&ZOPN)          SETC  ' '                                         00306100
&ZOPO(&ZOPN)          SETC  'MVC'                                       00306200
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),64(1)'                         00306300
&ZOPD(&ZOPN)          SETC  '++ XZAAPPROPORTION F'                      00306400
                      AGO   .ZO13C                                      00306500
.*                                                                      00306600
.ZO13B                ANOP  ,                                           00306700
&ZAWRK   SETA  K'&XZAAPPROPORTION                                       00306800
         AIF   ('&XZAAPPROPORTION'(&ZAWRK,1) NE ')').ZO13G              00306900
&ZN      SETA  2                                                        00307000
.ZO13H    ANOP                                                          00307100
         AIF   (&ZN GE &ZAWRK).ZO13G                                    00307200
         AIF   ('&XZAAPPROPORTION'(&ZN,1) NE '(').ZO13I                 00307300
&ZC      SETC  '&XZAAPPROPORTION'(1,&ZN).'4'.','                        00307400
&ZC      SETC  '&ZC'.'&XZAAPPROPORTION'(&ZN+1,&ZAWRK-&ZN).',64(1)'      00307500
         AGO   .ZO13J                                                   00307600
.ZO13I    ANOP                                                          00307700
&ZN      SETA  &ZN+1                                                    00307800
         AGO   .ZO13H                                                   00307900
.ZO13G    ANOP                                                          00308000
&ZC      SETC  '&XZAAPPROPORTION.(4),64(1)'                             00308100
.ZO13J    ANOP                                                          00308200
&ZOPN                 SETA  &ZOPN+1                                     00308300
&ZOPL(&ZOPN)          SETC  ' '                                         00308400
&ZOPO(&ZOPN)          SETC  'MVC'                                       00308500
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00308600
&ZOPD(&ZOPN)          SETC  '++ XZAAPPROPORTION F'                      00308700
.ZO13C                ANOP  ,                                           00308800
.*------------------------------------------------------------------    00308900
.***AO.LVER02                                                           00309000
.ZO13Z                ANOP  ,                                           00309100
.*------------------------------------------------------------------    00309200
.***AO.LVER01                                                           00309300
                      AIF  (&XPLISTVER LT 2).ZO14Z  PLVER               00309400
.*------------------------------------------------------------------    00309500
.***AO.L02 XZIIPPROPORTION F                                            00309600
         AIF   ('&ZXZIIPPROPORTION' EQ 'OUTPUT').ZO14A  OUTPUT          00309700
         AIF   ('&ZXZIIPPROPORTION' NE 'INOUT').ZO14C  INOUT            00309800
.ZO14A    AIF   ('&XZIIPPROPORTION'(1,1) NE '(').ZO14B  ADDR IN GPR     00309900
&ZCGPR   SETC  '&XZIIPPROPORTION'(2,K'&XZIIPPROPORTION-2)               00310000
&ZOPN                 SETA  &ZOPN+1                                     00310100
&ZOPL(&ZOPN)          SETC  ' '                                         00310200
&ZOPO(&ZOPN)          SETC  'MVC'                                       00310300
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),68(1)'                         00310400
&ZOPD(&ZOPN)          SETC  '++ XZIIPPROPORTION F'                      00310500
                      AGO   .ZO14C                                      00310600
.*                                                                      00310700
.ZO14B                ANOP  ,                                           00310800
&ZAWRK   SETA  K'&XZIIPPROPORTION                                       00310900
         AIF   ('&XZIIPPROPORTION'(&ZAWRK,1) NE ')').ZO14G              00311000
&ZN      SETA  2                                                        00311100
.ZO14H    ANOP                                                          00311200
         AIF   (&ZN GE &ZAWRK).ZO14G                                    00311300
         AIF   ('&XZIIPPROPORTION'(&ZN,1) NE '(').ZO14I                 00311400
&ZC      SETC  '&XZIIPPROPORTION'(1,&ZN).'4'.','                        00311500
&ZC      SETC  '&ZC'.'&XZIIPPROPORTION'(&ZN+1,&ZAWRK-&ZN).',68(1)'      00311600
         AGO   .ZO14J                                                   00311700
.ZO14I    ANOP                                                          00311800
&ZN      SETA  &ZN+1                                                    00311900
         AGO   .ZO14H                                                   00312000
.ZO14G    ANOP                                                          00312100
&ZC      SETC  '&XZIIPPROPORTION.(4),68(1)'                             00312200
.ZO14J    ANOP                                                          00312300
&ZOPN                 SETA  &ZOPN+1                                     00312400
&ZOPL(&ZOPN)          SETC  ' '                                         00312500
&ZOPO(&ZOPN)          SETC  'MVC'                                       00312600
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00312700
&ZOPD(&ZOPN)          SETC  '++ XZIIPPROPORTION F'                      00312800
.ZO14C                ANOP  ,                                           00312900
.*------------------------------------------------------------------    00313000
.***AO.LVER02                                                           00313100
.ZO14Z                ANOP  ,                                           00313200
.*------------------------------------------------------------------    00313300
.***AO.LVER01                                                           00313400
                      AIF  (&XPLISTVER LT 3).ZO15Z  PLVER               00313500
.*------------------------------------------------------------------    00313600
.***AO.L02 XMAXSRVUNITS F                                               00313700
         AIF   ('&ZXMAXSRVUNITS' EQ 'OUTPUT').ZO15A  OUTPUT             00313800
         AIF   ('&ZXMAXSRVUNITS' NE 'INOUT').ZO15C  INOUT               00313900
.ZO15A    AIF   ('&XMAXSRVUNITS'(1,1) NE '(').ZO15B  ADDR IN GPR        00314000
&ZCGPR   SETC  '&XMAXSRVUNITS'(2,K'&XMAXSRVUNITS-2)                     00314100
&ZOPN                 SETA  &ZOPN+1                                     00314200
&ZOPL(&ZOPN)          SETC  ' '                                         00314300
&ZOPO(&ZOPN)          SETC  'MVC'                                       00314400
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),72(1)'                         00314500
&ZOPD(&ZOPN)          SETC  '++ XMAXSRVUNITS F'                         00314600
                      AGO   .ZO15C                                      00314700
.*                                                                      00314800
.ZO15B                ANOP  ,                                           00314900
&ZAWRK   SETA  K'&XMAXSRVUNITS                                          00315000
         AIF   ('&XMAXSRVUNITS'(&ZAWRK,1) NE ')').ZO15G                 00315100
&ZN      SETA  2                                                        00315200
.ZO15H    ANOP                                                          00315300
         AIF   (&ZN GE &ZAWRK).ZO15G                                    00315400
         AIF   ('&XMAXSRVUNITS'(&ZN,1) NE '(').ZO15I                    00315500
&ZC      SETC  '&XMAXSRVUNITS'(1,&ZN).'4'.','                           00315600
&ZC      SETC  '&ZC'.'&XMAXSRVUNITS'(&ZN+1,&ZAWRK-&ZN).',72(1)'         00315700
         AGO   .ZO15J                                                   00315800
.ZO15I    ANOP                                                          00315900
&ZN      SETA  &ZN+1                                                    00316000
         AGO   .ZO15H                                                   00316100
.ZO15G    ANOP                                                          00316200
&ZC      SETC  '&XMAXSRVUNITS.(4),72(1)'                                00316300
.ZO15J    ANOP                                                          00316400
&ZOPN                 SETA  &ZOPN+1                                     00316500
&ZOPL(&ZOPN)          SETC  ' '                                         00316600
&ZOPO(&ZOPN)          SETC  'MVC'                                       00316700
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00316800
&ZOPD(&ZOPN)          SETC  '++ XMAXSRVUNITS F'                         00316900
.ZO15C                ANOP  ,                                           00317000
.*------------------------------------------------------------------    00317100
.***AO.LVER02                                                           00317200
.ZO15Z                ANOP  ,                                           00317300
.*------------------------------------------------------------------    00317400
.***AO.LVER01                                                           00317500
                      AIF  (&XPLISTVER LT 4).ZO19Z  PLVER               00317600
.*------------------------------------------------------------------    00317700
.***AO.L02 XMAXEQUIVUNITS F                                             00317800
         AIF   ('&ZXMAXEQUIVUNITS' EQ 'OUTPUT').ZO19A  OUTPUT           00317900
         AIF   ('&ZXMAXEQUIVUNITS' NE 'INOUT').ZO19C  INOUT             00318000
.ZO19A    AIF   ('&XMAXEQUIVUNITS'(1,1) NE '(').ZO19B  ADDR IN GPR      00318100
&ZCGPR   SETC  '&XMAXEQUIVUNITS'(2,K'&XMAXEQUIVUNITS-2)                 00318200
&ZOPN                 SETA  &ZOPN+1                                     00318300
&ZOPL(&ZOPN)          SETC  ' '                                         00318400
&ZOPO(&ZOPN)          SETC  'MVC'                                       00318500
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),88(1)'                         00318600
&ZOPD(&ZOPN)          SETC  '++ XMAXEQUIVUNITS F'                       00318700
                      AGO   .ZO19C                                      00318800
.*                                                                      00318900
.ZO19B                ANOP  ,                                           00319000
&ZAWRK   SETA  K'&XMAXEQUIVUNITS                                        00319100
         AIF   ('&XMAXEQUIVUNITS'(&ZAWRK,1) NE ')').ZO19G               00319200
&ZN      SETA  2                                                        00319300
.ZO19H    ANOP                                                          00319400
         AIF   (&ZN GE &ZAWRK).ZO19G                                    00319500
         AIF   ('&XMAXEQUIVUNITS'(&ZN,1) NE '(').ZO19I                  00319600
&ZC      SETC  '&XMAXEQUIVUNITS'(1,&ZN).'4'.','                         00319700
&ZC      SETC  '&ZC'.'&XMAXEQUIVUNITS'(&ZN+1,&ZAWRK-&ZN).',88(1)'       00319800
         AGO   .ZO19J                                                   00319900
.ZO19I    ANOP                                                          00320000
&ZN      SETA  &ZN+1                                                    00320100
         AGO   .ZO19H                                                   00320200
.ZO19G    ANOP                                                          00320300
&ZC      SETC  '&XMAXEQUIVUNITS.(4),88(1)'                              00320400
.ZO19J    ANOP                                                          00320500
&ZOPN                 SETA  &ZOPN+1                                     00320600
&ZOPL(&ZOPN)          SETC  ' '                                         00320700
&ZOPO(&ZOPN)          SETC  'MVC'                                       00320800
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00320900
&ZOPD(&ZOPN)          SETC  '++ XMAXEQUIVUNITS F'                       00321000
.ZO19C                ANOP  ,                                           00321100
.*------------------------------------------------------------------    00321200
.***AO.LVER02                                                           00321300
.ZO19Z                ANOP  ,                                           00321400
.*******************************************************************    00321500
.***AO.X02  RETURN CODE PROCESSING                                      00321600
.*******************************************************************    00321700
                      AIF   (N'&RETCODE LE 0).ZMRETX                    00321800
                      AIF   ('&XRETCODE'(1,1) EQ '(').ZMRET2            00321900
                      AIF   ('&XRETCODE' EQ 'GPR15').ZMRETX             00322000
                      AIF   ('&XRETCODE' EQ 'REG15').ZMRETX             00322100
                      AIF   ('&XRETCODE' EQ 'R15').ZMRETX               00322200
                      AIF   ('&XRETCODE' EQ '15').ZMRETX                00322300
&ZOPN                 SETA  &ZOPN+1                                     00322400
&ZOPL(&ZOPN)          SETC  ' '                                         00322500
&ZOPO(&ZOPN)          SETC  'ST'                                        00322600
&ZOPV(&ZOPN)          SETC  '15,&XRETCODE'                              00322700
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00322800
                      AGO   .ZMRETX                                     00322900
.*                                                                      00323000
.ZMRET2               ANOP  ,                                           00323100
&ZCGPR                SETC  '&XRETCODE'(2,K'&XRETCODE-2)                00323200
                      AIF   ('&ZCGPR' EQ 'GPR15').ZMRETX                00323300
                      AIF   ('&ZCGPR' EQ 'REG15').ZMRETX                00323400
                      AIF   ('&ZCGPR' EQ 'R15').ZMRETX                  00323500
                      AIF   ('&ZCGPR' EQ '15').ZMRETX                   00323600
&ZOPN                 SETA  &ZOPN+1                                     00323700
&ZOPL(&ZOPN)          SETC  ' '                                         00323800
&ZOPO(&ZOPN)          SETC  '&ZMAC_LR'                                  00323900
&ZOPV(&ZOPN)          SETC  '&ZCGPR,15'                                 00324000
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00324100
.ZMRETX               ANOP  ,                                           00324200
.*******************************************************************    00324300
.***AO.X03  REASON CODE PROCESSING                                      00324400
.*******************************************************************    00324500
                      AIF   (N'&RSNCODE LE 0).ZMRSNX                    00324600
                      AIF   ('&XRSNCODE'(1,1) EQ '(').ZMRSN2            00324700
                      AIF   ('&XRSNCODE' EQ 'GPR0').ZMRSNX              00324800
                      AIF   ('&XRSNCODE' EQ 'GPR00').ZMRSNX             00324900
                      AIF   ('&XRSNCODE' EQ 'REG0').ZMRSNX              00325000
                      AIF   ('&XRSNCODE' EQ 'REG00').ZMRSNX             00325100
                      AIF   ('&XRSNCODE' EQ 'R0').ZMRSNX                00325200
                      AIF   ('&XRSNCODE' EQ '0').ZMRSNX                 00325300
                      AIF   ('&XRSNCODE' EQ '00').ZMRSNX                00325400
&ZOPN                 SETA  &ZOPN+1                                     00325500
&ZOPL(&ZOPN)          SETC  ' '                                         00325600
&ZOPO(&ZOPN)          SETC  'ST'                                        00325700
&ZOPV(&ZOPN)          SETC  '0,&XRSNCODE'                               00325800
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00325900
                      AGO   .ZMRSNX                                     00326000
.*                                                                      00326100
.ZMRSN2               ANOP  ,                                           00326200
&ZCGPR                SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                00326300
                      AIF   ('&ZCGPR' EQ 'GPR0').ZMRSNX                 00326400
                      AIF   ('&ZCGPR' EQ 'GPR00').ZMRSNX                00326500
                      AIF   ('&ZCGPR' EQ 'REG0').ZMRSNX                 00326600
                      AIF   ('&ZCGPR' EQ 'REG00').ZMRSNX                00326700
                      AIF   ('&ZCGPR' EQ 'R0').ZMRSNX                   00326800
                      AIF   ('&ZCGPR' EQ '0').ZMRSNX                    00326900
                      AIF   ('&ZCGPR' EQ '00').ZMRSNX                   00327000
&ZOPN                 SETA  &ZOPN+1                                     00327100
&ZOPL(&ZOPN)          SETC  ' '                                         00327200
&ZOPO(&ZOPN)          SETC  '&ZMAC_LR'                                  00327300
&ZOPV(&ZOPN)          SETC  '&ZCGPR,0'                                  00327400
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00327500
.ZMRSNX               ANOP  ,                                           00327600
.*******************************************************************    00327700
.***AO.X04  LABEL FOR MF=L PROCESSING                                   00327800
.*******************************************************************    00327900
.ZMFLX                ANOP  ,              MF=L PROCESSING              00328000
.*******************************************************************    00328100
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               00328200
.*******************************************************************    00328300
                      ACTR  10000                                       00328400
.*                                                                      00328500
                      LCLA  &ZLC           COLUMN POSITION              00328600
                      LCLA  &ZOPX          LIST TABLE INDEX             00328700
                      LCLC  &ZLL           LABEL                        00328800
                      LCLC  &ZLOP          OPERATION                    00328900
                      LCLC  &ZLV           VALUE                        00329000
                      LCLC  &ZLD           DESCRIPTION                  00329100
.*                                                                      00329200
&ZOPX                 SETA  1                                           00329300
.ZL2                  AIF   (&ZOPX GT &ZOPN1).ZLX  B IF DONE            00329400
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00329500
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00329600
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00329700
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00329800
                      AIF   (K'&ZLD LE 0).ZL5                           00329900
&ZLC                  SETA  35             COMMENT COLUMN               00330000
                      AIF   ('&ZLD'(1,1) NE '*').ZL3                    00330100
&ZLC                  SETA  33             COMMMENT COLUMN              00330200
.ZL3                  AIF   (K'&ZLV GE &ZLC-16-1).ZL4                   00330300
&ZLV                  SETC  '&ZLV'.' '                                  00330400
                      AGO   .ZL3                                        00330500
.*                                                                      00330600
.ZL4                  ANOP  ,                                           00330700
&ZLV                  SETC  '&ZLV'.' '                                  00330800
.ZL5                  ANOP  ,                                           00330900
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00331000
.*                                                                      00331100
&ZLL     &ZLOP &ZLV                                                     00331200
.*                                                                      00331300
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00331400
                      AGO   .ZL2           CONTINUE LOOPING             00331500
.*                                                                      00331600
.ZLX                  ANOP  ,                                           00331700
                      AIF   ('&XMF' EQ 'L').ZLINKX  MF=L                00331800
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00331900
         AIF   ('&SYSAM64' NE 'YES').AMODE31                            00332000
         LLGTR 14,14                   CLEAR HIGH HALF IN 64BIT MODE    00332100
.AMODE31 L     14,16(0,0)              GET CVT ADDRESS                  00332200
.*-------------------------------------------------------------------   00332300
         TM    CVTOSLV5-CVT(14),CVTH7720  test for HBB7720 presence     00332400
         BNZ   VEROK&SYSNDX               running on HBB7720            00332500
         LA    0,IWMRSNCODEBADVERSION     HBB7720 is required           00332600
         LA    15,IWMRETCODEINVOCERROR    set return code               00332700
         B     END&SYSNDX                 skip service invocation       00332800
VEROK&SYSNDX DS    0H                     version check successful      00332900
.*-------------------------------------------------------------------   00333000
         L     14,772(14,0)            GET SFT ADDRESS                  00333100
         L     14,380(14,0)            GET LX FOR SERVICE ROUTINE       00333200
         LA    15,116                  GET EX FOR SERVICE ROUTINE       00333300
         OR    14,15                   GET PC NUMBER                    00333400
         PC    0(14)                                                    00333500
END&SYSNDX DS    0H                END LABEL                            00333600
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00333700
.ZLINKX               ANOP  ,                                           00333800
.*******************************************************************    00333900
.***AP.X01  FORMAT GENERATED CODE                                       00334000
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            00334100
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00334200
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00334300
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00334400
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00334500
                      AIF   (K'&ZLD LE 0).ZL51                          00334600
&ZLC                  SETA  35             COMMENT COLUMN               00334700
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   00334800
&ZLC                  SETA  33             COMMENT COLUMN               00334900
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  00335000
&ZLV                  SETC  '&ZLV'.' '                                  00335100
                      AGO   .ZL31                                       00335200
.*                                                                      00335300
.ZL41                 ANOP  ,                                           00335400
&ZLV                  SETC  '&ZLV'.' '                                  00335500
.ZL51                 ANOP  ,                                           00335600
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00335700
.*                                                                      00335800
&ZLL     &ZLOP &ZLV                                                     00335900
.*                                                                      00336000
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00336100
                      AGO   .ZL21          CONTINUE LOOPING             00336200
.*                                                                      00336300
.ZLX1                 ANOP  ,                                           00336400
.*******************************************************************    00336500
.***AP.X02  END OF IWM4SRSC MACRO                                       00336600
&ZIWM4SRSC            SETC  'YES'          SET IWM4SRSC USED            00336700
         POP   PRINT                                                    00336800
*                                            IWM4SRSC-4                 00336900
         SPACE 1                                                        00337000
.ZLX2                 ANOP  ,                                           00337100
         MEND                                                           00337200
**********************************************************************/ 00337300
*/**** START OF SPECIFICATIONS **************************************** 00337400
*                                                                     * 00337500
*                                                                     * 00337600
*01* MACRO NAME:  IWM4SRSC                              -09/03/23-<4> * 00337700
*                                                                     * 00337800
*                                                                     * 00337900
*01* DESCRIPTIVE NAME:  Server Specific Routing Information           * 00338000
*                                                                     * 00338100
*01* PROPRIETARY STATEMENT:                                           * 00338200
*                                                                     * 00338300
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00338400
*     5694-A01 COPYRIGHT IBM CORP. 2005, 2009                         * 00338500
*                                                                     * 00338600
* STATUS= HBB7760                                                     * 00338700
*                                                                     * 00338800
*                                                                     * 00338900
*                                                                     * 00339000
*01* FUNCTION:                                                        * 00339100
*       See the IWM4SRSC macro prologue for details.                  * 00339200
*                                                                     * 00339300
*01* INPUT:                                                           * 00339400
*                                                                     * 00339500
*            ?IWM4SRSC     WEIGHT(xweight)                            * 00339600
*                          STOKEN(xstoken)                            * 00339700
*                         ÝABNORM_COUNT(xabnorm_count)¨               * 00339800
*                         ÝHEALTH(xhealth)¨                           * 00339900
*                         ÝCPUWEIGHT(xcpuweight)¨                     * 00340000
*                         ÝZAAPWEIGHT(xzaapweight)¨                   * 00340100
*                         ÝZIIPWEIGHT(xziipweight)¨                   * 00340200
*                         ÝCPUPROPORTION(xcpuproportion)¨             * 00340300
*                         ÝZAAPPROPORTION(xzaapproportion)¨           * 00340400
*                         ÝZIIPPROPORTION(xziipproportion)¨           * 00340500
*                         ÝMAXSRVUNITS(xmaxsrvunits)¨                 * 00340600
*                         ÝMETHOD(»PROPORTIONAL!EQUICPUº)¨            * 00340700
*                         ÝCOST_ZAAP_ON_CP(»xcost_zaap_on_cp!1º)¨     * 00340800
*                         ÝCOST_ZIIP_ON_CP(»xcost_ziip_on_cp!1º)¨     * 00340900
*                         ÝMAXEQUIVUNITS(xmaxequivunits)¨             * 00341000
*                         ÝIL_WEIGHTING(»xil_weighting!0º)¨           * 00341100
*                         ÝRETCODE(xretcode)¨                         * 00341200
*                         ÝRSNCODE(xrsncode)¨                         * 00341300
*                         ÝPLISTVER(»xplistver!IMPLIED_VERSIONº)¨     * 00341400
*                        ÐÝMF(S)¨                                     * 00341500
*                        ÔÝMF(L,xmfctrl»,xmfattr!BDY(DWORD)º)¨        * 00341600
*                        ¿ÝMF(E,xmfctrl»,COMPLETEº)¨                  * 00341700
*                                                                     * 00341800
****** END OF SPECIFICATIONS *****************************************/ 00341900
*/*PB.ECHO01 MACRO INVOCATION ECHO-----------------------------------*/ 00342000
*  ANS('@SPACE;') NORESCAN COL(MACLMAR);                                00342100
*  ANS('/* ? IWM4SRSC '!!MACLIST!!' ')                                  00342200
*      NORESCAN COL(MACLMAR+5);    /* START ECHO */                     00342300
*                                                                       00342400
*  DCL ZELO  FIXED;                                                     00342500
*  DCL ZECOL FIXED;                                                     00342600
*                                                                       00342700
*  ZELO=1;     /* STARTING COLUMN */                                    00342800
*  DO WHILE ZELO<=LENGTH(MACKEYS);  /* PARENTHSIS SCAN */               00342900
*    ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');                    00343000
*    IF ZECOL>0                                                         00343100
*      THEN                                                             00343200
*        DO;   /* PARENTHESIS FOUND */                                  00343300
*          ANS(MACKEYS(ZELO:ZELO+ZECOL-1)!!' ')                         00343400
*             NORESCAN COL(MACLMAR+5);                                  00343500
*          ZELO=ZELO+ZECOL;        /* NEXT PORTION */                   00343600
*        END;                                                           00343700
*      ELSE                                                             00343800
*        DO;   /* REMAINING KEYS */                                     00343900
*          ANS(MACKEYS(ZELO:LENGTH(MACKEYS)))                           00344000
*             NORESCAN COL(MACLMAR+5);                                  00344100
*          ZELO=LENGTH(MACKEYS)+1;                                      00344200
*        END;                                                           00344300
*  END;                                                                 00344400
*  ANS(' -09/03/23-4- */')                                              00344500
*      NORESCAN COL(MACLMAR+5);    /* END ECHO */                       00344600
*/********************************************************************/ 00344700
*/*PV.DCL01 MACRO DECLARES AND CODE GENERATION CONTROLS              */ 00344800
*/********************************************************************/ 00344900
*  DCL ZPRINT  EXTERNAL; DEACT ZPRINT; /* YES=PRINT, NO=NO PRINT     */ 00345000
*  DCL ZTEST   EXTERNAL; DEACT ZTEST;  /* YES=TEST, NO=NO TEST       */ 00345100
*  DCL ZSYSTEM EXTERNAL; DEACT ZSYSTEM;/* PCCODE10, MVS, SAK, VM     */ 00345200
*                                                                       00345300
*  DCL   ZIWM4SRSC CHAR EXTERNAL; /* YES=USED AT LEAST ONCE          */ 00345400
*  DEACT ZIWM4SRSC;                                                     00345500
*                                                                       00345600
*  DCL ZMACRET FIXED; DEACT ZMACRET;                                    00345700
*  ZMACRET=0;                   /* MACRO COMPILE RETURN CODE         */ 00345800
*                                                                       00345900
*  DCL ZMS CHAR;   DEACT ZMS;   /* ERROR MESSAGE                     */ 00346000
*  DCL ZCVAL CHAR; DEACT ZCVAL; /* ERROR MESSAGE WORK AREA           */ 00346100
*                                                                       00346200
*  DCL ZI FIXED;  DEACT ZI;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00346300
*  DCL ZJ FIXED;  DEACT ZJ;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00346400
*  DCL ZK FIXED;  DEACT ZK;     /* INDEX FOR RANGE COLON (:)         */ 00346500
*  DCL ZL FIXED;  DEACT ZL;     /* INDEX FOR RANGE VALUE CHECKING    */ 00346600
*  DCL ZLO FIXED; DEACT ZLO;    /* LOW RANGE VALUE                   */ 00346700
*  DCL ZHI FIXED; DEACT ZHI;    /* HIGH RANGE VALUE                  */ 00346800
*  DCL ZW CHAR;   DEACT ZW;     /* WORK AREA FOR RANGE VALUE SUBLIST */ 00346900
*  DCL ZN FIXED;  DEACT ZN;     /* NUMERIC WORK VARIABLE             */ 00347000
*  DCL ZC CHAR;   DEACT ZC;     /* CHARACTER WORK VARIABLE           */ 00347100
*  DCL ZMAXINVOCLEN FIXED; DEACT ZMAXINVOCLEN;  /* INVOCATION LENGTH */ 00347200
*  DCL ZPLLEN FIXED; DEACT ZPLLEN;        /* PARAMETER LIST LENGTH   */ 00347300
*                                                                       00347400
*  DCL ZPRMMAX FIXED;           /* MAXIMUM PARM LIST SIZE            */ 00347500
*  DCL ZPRMNUM FIXED;           /* PARAMETER ARRAY INDEX             */ 00347600
*  DCL ZPRM(100);               /* PARAMETER ENTRY                   */ 00347700
*  DCL EHAMAXLEN FIXED EXTERNAL;   /* MAX ILIST SIZE FOR PARM LISTS  */ 00347800
*  DCL EHAREGS CHARACTER EXTERNAL; /* REG DCLS                       */ 00347900
*  DCL EHAREGS64 CHARACTER EXTERNAL; /* REG DCLS                     */ 00348000
*  DCL EHALIST CHARACTER EXTERNAL; /* STANDARD PARM LIST GENERATION  */ 00348100
*/*******************************************************************/  00348200
*/*PV.XVAR01 DECLARE ALL MACRO PARAMETER VARIABLES                  */  00348300
*/*******************************************************************/  00348400
*  DCL XWEIGHT;  DEACT XWEIGHT;    /***PV.XVAR02 OUTPUT NAME */         00348500
*  DCL ZXWEIGHT; DEACT ZXWEIGHT;   /***INPUT/OUTPUT CONTROL */          00348600
*  DCL XSTOKEN;  DEACT XSTOKEN;    /***PV.XVAR02 INPUT NAME */          00348700
*  DCL ZXSTOKEN; DEACT ZXSTOKEN;   /***INPUT/OUTPUT CONTROL */          00348800
*  DCL   XABNORM_COUNT;            /***PV.XVAR03 OUTPUT NAME */         00348900
*  DEACT XABNORM_COUNT;            /***PV.XVAR03 OUTPUT NAME */         00349000
*  DCL   ZXABNORM_COUNT;           /***INPUT/OUTPUT CONTROL */          00349100
*  DEACT ZXABNORM_COUNT;           /***INPUT/OUTPUT CONTROL */          00349200
*  DCL XHEALTH;  DEACT XHEALTH;    /***PV.XVAR02 OUTPUT NAME */         00349300
*  DCL ZXHEALTH; DEACT ZXHEALTH;   /***INPUT/OUTPUT CONTROL */          00349400
*  DCL   XCPUWEIGHT;               /***PV.XVAR03 OUTPUT NAME */         00349500
*  DEACT XCPUWEIGHT;               /***PV.XVAR03 OUTPUT NAME */         00349600
*  DCL   ZXCPUWEIGHT;              /***INPUT/OUTPUT CONTROL */          00349700
*  DEACT ZXCPUWEIGHT;              /***INPUT/OUTPUT CONTROL */          00349800
*  DCL   XZAAPWEIGHT;              /***PV.XVAR03 OUTPUT NAME */         00349900
*  DEACT XZAAPWEIGHT;              /***PV.XVAR03 OUTPUT NAME */         00350000
*  DCL   ZXZAAPWEIGHT;             /***INPUT/OUTPUT CONTROL */          00350100
*  DEACT ZXZAAPWEIGHT;             /***INPUT/OUTPUT CONTROL */          00350200
*  DCL   XZIIPWEIGHT;              /***PV.XVAR03 OUTPUT NAME */         00350300
*  DEACT XZIIPWEIGHT;              /***PV.XVAR03 OUTPUT NAME */         00350400
*  DCL   ZXZIIPWEIGHT;             /***INPUT/OUTPUT CONTROL */          00350500
*  DEACT ZXZIIPWEIGHT;             /***INPUT/OUTPUT CONTROL */          00350600
*  DCL   XCPUPROPORTION;           /***PV.XVAR03 OUTPUT NAME */         00350700
*  DEACT XCPUPROPORTION;           /***PV.XVAR03 OUTPUT NAME */         00350800
*  DCL   ZXCPUPROPORTION;          /***INPUT/OUTPUT CONTROL */          00350900
*  DEACT ZXCPUPROPORTION;          /***INPUT/OUTPUT CONTROL */          00351000
*  DCL   XZAAPPROPORTION;          /***PV.XVAR03 OUTPUT NAME */         00351100
*  DEACT XZAAPPROPORTION;          /***PV.XVAR03 OUTPUT NAME */         00351200
*  DCL   ZXZAAPPROPORTION;         /***INPUT/OUTPUT CONTROL */          00351300
*  DEACT ZXZAAPPROPORTION;         /***INPUT/OUTPUT CONTROL */          00351400
*  DCL   XZIIPPROPORTION;          /***PV.XVAR03 OUTPUT NAME */         00351500
*  DEACT XZIIPPROPORTION;          /***PV.XVAR03 OUTPUT NAME */         00351600
*  DCL   ZXZIIPPROPORTION;         /***INPUT/OUTPUT CONTROL */          00351700
*  DEACT ZXZIIPPROPORTION;         /***INPUT/OUTPUT CONTROL */          00351800
*  DCL   XMAXSRVUNITS;             /***PV.XVAR03 OUTPUT NAME */         00351900
*  DEACT XMAXSRVUNITS;             /***PV.XVAR03 OUTPUT NAME */         00352000
*  DCL   ZXMAXSRVUNITS;            /***INPUT/OUTPUT CONTROL */          00352100
*  DEACT ZXMAXSRVUNITS;            /***INPUT/OUTPUT CONTROL */          00352200
*  DCL XMETHOD;  DEACT XMETHOD;    /***PV.XVAR02 INPUT VALUE */         00352300
*  DCL ZXMETHOD; DEACT ZXMETHOD;   /***INPUT/OUTPUT CONTROL */          00352400
*  DCL   XCOST_ZAAP_ON_CP;         /***PV.XVAR03 INPUT NAME */          00352500
*  DEACT XCOST_ZAAP_ON_CP;         /***PV.XVAR03 INPUT NAME */          00352600
*  DCL   ZXCOST_ZAAP_ON_CP;        /***INPUT/OUTPUT CONTROL */          00352700
*  DEACT ZXCOST_ZAAP_ON_CP;        /***INPUT/OUTPUT CONTROL */          00352800
*  DCL   XCOST_ZIIP_ON_CP;         /***PV.XVAR03 INPUT NAME */          00352900
*  DEACT XCOST_ZIIP_ON_CP;         /***PV.XVAR03 INPUT NAME */          00353000
*  DCL   ZXCOST_ZIIP_ON_CP;        /***INPUT/OUTPUT CONTROL */          00353100
*  DEACT ZXCOST_ZIIP_ON_CP;        /***INPUT/OUTPUT CONTROL */          00353200
*  DCL   XMAXEQUIVUNITS;           /***PV.XVAR03 OUTPUT NAME */         00353300
*  DEACT XMAXEQUIVUNITS;           /***PV.XVAR03 OUTPUT NAME */         00353400
*  DCL   ZXMAXEQUIVUNITS;          /***INPUT/OUTPUT CONTROL */          00353500
*  DEACT ZXMAXEQUIVUNITS;          /***INPUT/OUTPUT CONTROL */          00353600
*  DCL   XIL_WEIGHTING;            /***PV.XVAR03 INPUT NAME */          00353700
*  DEACT XIL_WEIGHTING;            /***PV.XVAR03 INPUT NAME */          00353800
*  DCL   ZXIL_WEIGHTING;           /***INPUT/OUTPUT CONTROL */          00353900
*  DEACT ZXIL_WEIGHTING;           /***INPUT/OUTPUT CONTROL */          00354000
*  DCL XRETCODE;  DEACT XRETCODE;  /***PV.XVAR02 OUTPUT NAME */         00354100
*  DCL ZXRETCODE; DEACT ZXRETCODE;  /***INPUT/OUTPUT CONTROL */         00354200
*  DCL XRSNCODE;  DEACT XRSNCODE;  /***PV.XVAR02 OUTPUT NAME */         00354300
*  DCL ZXRSNCODE; DEACT ZXRSNCODE;  /***INPUT/OUTPUT CONTROL */         00354400
*  DCL XPLISTVER FIXED;  DEACT XPLISTVER;  /***PV.XVAR02 INPUT VALUE */ 00354500
*  DCL ZXPLISTVER; DEACT ZXPLISTVER;  /***INPUT/OUTPUT CONTROL */       00354600
*  DCL XMF;  DEACT XMF;            /***PV.XVAR02 INPUT VALUE */         00354700
*  DCL ZXMF; DEACT ZXMF;           /***INPUT/OUTPUT CONTROL */          00354800
*  DCL XMFCTRL;  DEACT XMFCTRL;    /***PV.XVAR02 INPUT NAME */          00354900
*  DCL ZXMFCTRL; DEACT ZXMFCTRL;   /***INPUT/OUTPUT CONTROL */          00355000
*  DCL XMFATTR;  DEACT XMFATTR;    /***PV.XVAR02 INPUT VALUE */         00355100
*  DCL ZXMFATTR; DEACT ZXMFATTR;   /***INPUT/OUTPUT CONTROL */          00355200
*  DCL XMFSCK;  DEACT XMFSCK;      /***PV.XVAR02 INPUT VALUE */         00355300
*  DCL ZXMFSCK; DEACT ZXMFSCK;     /***INPUT/OUTPUT CONTROL */          00355400
*/********************************************************************/ 00355500
*/***PC.PLV01  PROCESS PLISTVER                                      */ 00355600
*/********************************************************************/ 00355700
*  IF TRANSLATE(PLISTVER(1)) = 'MAX' THEN                               00355800
*    XPLISTVER=4;                                                       00355900
*  ELSE                                                                 00356000
*    XPLISTVER=0;                                                       00356100
*  IF ABNORM_COUNT^='' & XPLISTVER<1                                    00356200
*    THEN                                                               00356300
*      XPLISTVER=1;                                                     00356400
*  IF HEALTH^='' & XPLISTVER<1                                          00356500
*    THEN                                                               00356600
*      XPLISTVER=1;                                                     00356700
*  IF CPUWEIGHT^='' & XPLISTVER<2                                       00356800
*    THEN                                                               00356900
*      XPLISTVER=2;                                                     00357000
*  IF ZAAPWEIGHT^='' & XPLISTVER<2                                      00357100
*    THEN                                                               00357200
*      XPLISTVER=2;                                                     00357300
*  IF ZIIPWEIGHT^='' & XPLISTVER<2                                      00357400
*    THEN                                                               00357500
*      XPLISTVER=2;                                                     00357600
*  IF CPUPROPORTION^='' & XPLISTVER<2                                   00357700
*    THEN                                                               00357800
*      XPLISTVER=2;                                                     00357900
*  IF ZAAPPROPORTION^='' & XPLISTVER<2                                  00358000
*    THEN                                                               00358100
*      XPLISTVER=2;                                                     00358200
*  IF ZIIPPROPORTION^='' & XPLISTVER<2                                  00358300
*    THEN                                                               00358400
*      XPLISTVER=2;                                                     00358500
*  IF MAXSRVUNITS^='' & XPLISTVER<3                                     00358600
*    THEN                                                               00358700
*      XPLISTVER=3;                                                     00358800
*  IF METHOD^='' & XPLISTVER<4                                          00358900
*    THEN                                                               00359000
*      XPLISTVER=4;                                                     00359100
*  IF COST_ZAAP_ON_CP^='' & XPLISTVER<4                                 00359200
*    THEN                                                               00359300
*      XPLISTVER=4;                                                     00359400
*  IF COST_ZIIP_ON_CP^='' & XPLISTVER<4                                 00359500
*    THEN                                                               00359600
*      XPLISTVER=4;                                                     00359700
*  IF MAXEQUIVUNITS^='' & XPLISTVER<4                                   00359800
*    THEN                                                               00359900
*      XPLISTVER=4;                                                     00360000
*  IF IL_WEIGHTING^='' & XPLISTVER<4                                    00360100
*    THEN                                                               00360200
*      XPLISTVER=4;                                                     00360300
*  IF PLISTVER^=''                                                      00360400
*     & TRANSLATE(PLISTVER(1))^='IMPLIED_VERSION'                       00360500
*     & TRANSLATE(PLISTVER(1))^='MAX'                                   00360600
*    THEN                                                               00360700
*      DO;                                                              00360800
*                                                                       00360900
*        ZCVAL='';                           /* ERROR FLAG */           00361000
*        IF PLISTVER='PLISTVER' ! PLISTVER='()'  /*CHECK ENTRY*/        00361100
*          THEN                                                         00361200
*            DO;                                                        00361300
*              ZMS=' 8, THE "PLISTVER" KEY'!!                           00361400
*                  ' MUST CONTAIN ONE'!!                                00361500
*                  ' (OR MORE) ARGUMENT(S).';                           00361600
*              ANS MSG('?IWM4SRSC ---> '!!ZMS);                         00361700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00361800
*              ZMACRET=8;                    /* MACRO ERROR */          00361900
*              ZCVAL='NO_ARGUMENT';                                     00362000
*            END;                                                       00362100
*        IF NUMBER(PLISTVER)>1               /* CHECK POSITIONALS */    00362200
*          THEN                                                         00362300
*            DO;                                                        00362400
*              ZMS=' 8, "PLISTVER'!!         /**KPOSP* MSG*/            00362500
*                  PLISTVER!!                                           00362600
*                  '" "PLISTVER"'!!                                     00362700
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00362800
*              ANS MSG('?IWM4SRSC ---> '!!ZMS);                         00362900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00363000
*              ZMACRET=8;                    /* MACRO ERROR */          00363100
*            END;                                                       00363200
*                                                                       00363300
*        ZC=PLISTVER(1);                                                00363400
*        DO ZL=1 TO LENGTH(ZC);              /* MUST BE NUMBER */       00363500
*          IF ZC(ZL:ZL)<'0' !                /* MUST BE NUMERIC */      00363600
*             ZC(ZL:ZL)>'9'                  /* MUST BE NUMERIC */      00363700
*            THEN                                                       00363800
*              ZCVAL='NUMERIC';              /* NUMERIC ERROR */        00363900
*        END;                                                           00364000
*        IF ZCVAL=''                                                    00364100
*          THEN                                                         00364200
*            DO;                             /* CHECK RANGE LIMITS */   00364300
*            IF FIXED(PLISTVER(1))>=XPLISTVER                           00364400
*              THEN                                                     00364500
*                XPLISTVER=FIXED(PLISTVER(1));                          00364600
*              ELSE                                                     00364700
*                DO;                                                    00364800
*              ZMS=' 8, PLISTVER='!!         /**KVALP* MSG*/            00364900
*                    PLISTVER(1)!!                                      00365000
*                  ', BUT PLISTVER OF '!!                               00365100
*                    CHAR(XPLISTVER)!!                                  00365200
*                  ' IS REQUIRED.';                                     00365300
*              ANS MSG('?IWM4SRSC ---> '!!ZMS);                         00365400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00365500
*              ZMACRET=8;                    /* MACRO ERROR */          00365600
*                END;                                                   00365700
*              IF XPLISTVER<0 !              /* LOW LIMIT */            00365800
*                 XPLISTVER>4                /* HIGH LIMIT */           00365900
*                THEN                                                   00366000
*                  ZCVAL='RANGE';            /* RANGE ERROR */          00366100
*            END;                                                       00366200
*        IF ZCVAL^=''                                                   00366300
*          THEN                                                         00366400
*            DO;                             /* RANGE ERROR */          00366500
*              ZXPLISTVER='';                /* RESET IN/OUTPUT */      00366600
*              ZMS=' 8, "PLISTVER '!!        /**KRNGP* MSG*/            00366700
*                  PLISTVER!!                                           00366800
*                  '" THE RANGE IS "0-4"'!!                             00366900
*                  ' FOR ARGUMENT 1.';                                  00367000
*              ANS MSG('?IWM4SRSC ---> '!!ZMS);                         00367100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00367200
*              ZMACRET=8;                    /* MACRO ERROR */          00367300
*            END;                                                       00367400
*      END;                                                             00367500
*                                                                       00367600
*/********************************************************************/ 00367700
*/***PG.MF01  PROCESS MF MACRO FORMS                                 */ 00367800
*/********************************************************************/ 00367900
*/*PG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00368000
*  XMF='';                                                              00368100
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00368200
*  IF TRANSLATE(MF(1))                                                  00368300
*              = 'S'                         /* CHECK FOR KEYWORD */    00368400
*    THEN                                                               00368500
*      DO;                                                              00368600
*        XMF='S';                            /* SET XVARIABLE */        00368700
*        IF NUMBER(MF)>1                     /* CHECK POSITIONALS */    00368800
*          THEN                                                         00368900
*            DO;                                                        00369000
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00369100
*                  MF!!                                                 00369200
*                  '" "MF"'!!                                           00369300
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00369400
*              ANS MSG('?IWM4SRSC ---> '!!ZMS);                         00369500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00369600
*              ZMACRET=8;                    /* MACRO ERROR */          00369700
*            END;                                                       00369800
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00369900
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00370000
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00370100
*  IF TRANSLATE(MF(1))                                                  00370200
*              = 'L'                         /* CHECK FOR KEYWORD */    00370300
*    THEN                                                               00370400
*      DO;                                                              00370500
*        XMF='L';                            /* SET XVARIABLE */        00370600
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00370700
*          THEN                                                         00370800
*            DO;                                                        00370900
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00371000
*                  MF!!                                                 00371100
*                  '" "MF"'!!                                           00371200
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00371300
*              ANS MSG('?IWM4SRSC ---> '!!ZMS);                         00371400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00371500
*              ZMACRET=8;                    /* MACRO ERROR */          00371600
*            END;                                                       00371700
*/*PG.KKCTL10 -MF(L) SPECIAL CHECK-----------------------------------*/ 00371800
*        ZMAXINVOCLEN = LENGTH(MF) + 2;                                 00371900
*        IF PLISTVER ^= ''                                              00372000
*          THEN                                                         00372100
*            ZMAXINVOCLEN=ZMAXINVOCLEN + LENGTH(PLISTVER) + 8;          00372200
*        IF LENGTH(MACKEYS) > ZMAXINVOCLEN !                            00372300
*           MACLIST ^= ''                    /* CHECK FOR OTHER PARMS*/ 00372400
*          THEN                                                         00372500
*            DO;                                                        00372600
*              ZMS=' 8, THE "L" FORM OF "MF"'!! /**MFLP* MSG*/          00372700
*                  ' CAN ONLY HAVE'!!                                   00372800
*                  ' THE "PLISTVER" KEY'!!                              00372900
*                  ' SPECIFIED ON THE INVOCATION.';                     00373000
*              ANS MSG('?IWM4SRSC ---> '!!ZMS);                         00373100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00373200
*              ZMACRET=8;                    /* MACRO ERROR */          00373300
*            END;                                                       00373400
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00373500
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00373600
*  IF MF(2)=''                               /* CHECK FOR NULL */       00373700
*   THEN                                                                00373800
*    DO;                                     /* KEY IS REQUIRED */      00373900
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00374000
*        ZMS=' 8, WHEN "L" IS SPECIFIED'!!                              00374100
*            ' FOR THE "MF" KEY, POSITIONAL'!!                          00374200
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00374300
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00374400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00374500
*        ZMACRET=8;                          /* MACRO ERROR */          00374600
*    END;                                                               00374700
*  ELSE                                                                 00374800
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00374900
*/*PG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE--------------------*/ 00375000
*  ZXMFATTR='INPUT';                         /* SET IN/OUTPUT */        00375100
*  XMFATTR='BDY(DWORD)';                     /* SET DEFAULT */          00375200
*  IF MF(3)^=''                              /* CHECK FOR NULL */       00375300
*    THEN                                                               00375400
*      XMFATTR=MF(3);                        /* SET XVARIABLE */        00375500
*/*PG.KCK01 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH---------------*/ 00375600
*  IF ZXMFATTR^='' &                         /* NOT IN/OUTPUT */        00375700
*     LENGTH(XMFATTR)>60                                                00375800
*    THEN                                                               00375900
*      DO;                                                              00376000
*        ZXMFATTR='';                        /* RESET IN/OUTPUT */      00376100
*        ZMS=' 8, "MF'!!                     /**KLNGP* MSG*/            00376200
*            MF!!                                                       00376300
*            '" ARGUMENT 3 EXCEEDS THE MAXIMUM'!!                       00376400
*            ' LENGTH OF 60 CHARACTERS. ';                              00376500
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00376600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00376700
*        ZMACRET=8;                          /* MACRO ERROR */          00376800
*      END;                                                             00376900
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00377000
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00377100
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00377200
*  IF TRANSLATE(MF(1))                                                  00377300
*              = 'E'                         /* CHECK FOR KEYWORD */    00377400
*    THEN                                                               00377500
*      DO;                                                              00377600
*        XMF='E';                            /* SET XVARIABLE */        00377700
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00377800
*          THEN                                                         00377900
*            DO;                                                        00378000
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00378100
*                  MF!!                                                 00378200
*                  '" "MF"'!!                                           00378300
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00378400
*              ANS MSG('?IWM4SRSC ---> '!!ZMS);                         00378500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00378600
*              ZMACRET=8;                    /* MACRO ERROR */          00378700
*            END;                                                       00378800
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00378900
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00379000
*  IF MF(2)=''                               /* CHECK FOR NULL */       00379100
*   THEN                                                                00379200
*    DO;                                     /* KEY IS REQUIRED */      00379300
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00379400
*        ZMS=' 8, WHEN "E" IS SPECIFIED'!!                              00379500
*            ' FOR THE "MF" KEY, POSITIONAL'!!                          00379600
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00379700
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00379800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00379900
*        ZMACRET=8;                          /* MACRO ERROR */          00380000
*    END;                                                               00380100
*  ELSE                                                                 00380200
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00380300
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00380400
*  XMFSCK='';                                /* RESET XVARIABLE */      00380500
*  IF TRANSLATE(MF(3))                                                  00380600
*              = 'COMPLETE'                  /* CHECK FOR KEYWORD */    00380700
*    THEN                                                               00380800
*      XMFSCK = 'COMPLETE';                  /* SET XVARIABLE */        00380900
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00381000
*  ZXMFSCK='INPUT';                          /* SET IN/OUTPUT */        00381100
*  IF XMFSCK=''                              /* CHECK FOR KEYWORD */    00381200
*    THEN                                                               00381300
*      DO;                                   /* KEYWORD NOT ENTERED */  00381400
*        XMFSCK='COMPLETE';                  /* SET DEFAULT */          00381500
*        IF MF(3)^=''                                                   00381600
*          THEN                                                         00381700
*            DO;                                                        00381800
*              ZXMFSCK='';                   /* RESET IN/OUTPUT */      00381900
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/            00382000
*                  MF!!'"'!!                                            00382100
*                  ' ARGUMENT 3 IS AN UNKNOWN KEYWORD. '!!              00382200
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00382300
*                  ' "COMPLETE".';           /* VALID KEYWORD */        00382400
*              ANS MSG('?IWM4SRSC ---> '!!ZMS);                         00382500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00382600
*              ZMACRET=8;                    /* MACRO ERROR */          00382700
*            END;                                                       00382800
*      END;                                                             00382900
*/*PG.KKCTL05 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00383000
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00383100
*/*PG.KKCTL06 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00383200
*  IF MF='MF'                                                           00383300
*    ! MF='()'                               /*CHECK ENTRY*/            00383400
*     THEN                                                              00383500
*       DO;                                                             00383600
*              ZMS=' 8, THE "MF" KEY'!!                                 00383700
*                  ' MUST CONTAIN ONE'!!                                00383800
*                  ' (OR MORE) ARGUMENT(S).';                           00383900
*              ANS MSG('?IWM4SRSC ---> '!!ZMS);                         00384000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00384100
*              ZMACRET=8;                    /* MACRO ERROR */          00384200
*       END;                                                            00384300
*  ELSE                                                                 00384400
*    DO;                                                                00384500
*      ZXMF='INPUT';                         /* SET IN/OUTPUT */        00384600
*      IF XMF=''                             /* CHECK FOR KEYWORD */    00384700
*        THEN                                                           00384800
*          DO;                               /* KEYWORD NOT ENTERED */  00384900
*            XMF='S';                        /* SET DEFAULT */          00385000
*            XMFSCK='COMPLETE';              /* COMPLETE CHECKING */    00385100
*            IF MF(1)^=''                    /* CHECK FOR KEYWORD */    00385200
*              THEN                                                     00385300
*                DO;                                                    00385400
*                  ZXMF='';                  /* RESET IN/OUTPUT */      00385500
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/            00385600
*                  MF!!'"'!!                                            00385700
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00385800
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00385900
*                  ' "S",'!!                 /* VALID KEYWORD */        00386000
*                  ' "L",'!!                 /* VALID KEYWORD */        00386100
*                  ' OR "E".';               /* VALID KEYWORD */        00386200
*              ANS MSG('?IWM4SRSC ---> '!!ZMS);                         00386300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00386400
*              ZMACRET=8;                    /* MACRO ERROR */          00386500
*                END;                                                   00386600
*          END;                                                         00386700
*    END;                                                               00386800
*/********************************************************************/ 00386900
*/***PD.P01 FULL DEFAULT CHECKING                                    */ 00387000
*/********************************************************************/ 00387100
*  IF PLISTVER=''                                                       00387200
*     ! PLISTVER(1)='IMPLIED_VERSION'                                   00387300
*    THEN                                                               00387400
*      ZC='ON';                              /* DEFAULT FLAG ON */      00387500
*    ELSE                                                               00387600
*      ZC='OFF';                             /* DEFAULT FLAG OFF */     00387700
*/********************************************************************/ 00387800
*/***PD.P02 DEFAULT ECHO                                             */ 00387900
*/********************************************************************/ 00388000
*/*PD.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00388100
*  IF XMF^='L'                                                          00388200
*    THEN                                                               00388300
*      DO;                                   /* FULL SYNTAX CHECK */    00388400
*        ANS('/*DEFAULT(S): */')                                        00388500
*           NORESCAN COL(MACLMAR+5);                                    00388600
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00388700
*  IF XPLISTVER>=4                                                      00388800
*    THEN                                                               00388900
*      DO;                                                              00389000
*  XMETHOD='PROPORTIONAL';                   /* RESET XVARIABLE */      00389100
*  IF METHOD(1)=''                                                      00389200
*    THEN                                                               00389300
*        ZC='ON';                            /* DEFAULT FLAG ON */      00389400
*  IF TRANSLATE(METHOD(1))                                              00389500
*              = 'PROPORTIONAL'                                         00389600
*    THEN                                                               00389700
*        XMETHOD='';                         /* SET XVARIABLE */        00389800
*      END;                                                             00389900
*  IF XPLISTVER>=4                                                      00390000
*    THEN                                                               00390100
*      DO;                                                              00390200
*  IF TRANSLATE(METHOD(1))                                              00390300
*              = 'EQUICPU'                                              00390400
*    THEN                                                               00390500
*        XMETHOD='';                         /* SET XVARIABLE */        00390600
*      END;                                                             00390700
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00390800
*  IF XPLISTVER>=4                                                      00390900
*    THEN                                                               00391000
*      DO;                                                              00391100
*  IF XMETHOD^=''                                                       00391200
*    THEN DO;                                                           00391300
*      ANS('/* METHOD('!!                                               00391400
*          XMETHOD!!                                                    00391500
*          ')*/')                                                       00391600
*          NORESCAN COL(MACLMAR+5);                                     00391700
*      XMETHOD = '';                                                    00391800
*    END;                                                               00391900
*      END;                                                             00392000
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00392100
*  XCOST_ZAAP_ON_CP='';                                                 00392200
*  IF COST_ZAAP_ON_CP(1)=''                                             00392300
*    THEN                                                               00392400
*      DO;                                                              00392500
*        XCOST_ZAAP_ON_CP='1';               /* SET DEFAULT */          00392600
*        ZC='ON';                            /* DEFAULT FLAG ON */      00392700
*      END;                                                             00392800
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00392900
*  IF XPLISTVER>=4                                                      00393000
*    THEN                                                               00393100
*      DO;                                                              00393200
*  IF XCOST_ZAAP_ON_CP^=''                                              00393300
*    THEN DO;                                                           00393400
*      ANS('/* COST_ZAAP_ON_CP('!!                                      00393500
*          XCOST_ZAAP_ON_CP!!                                           00393600
*          ')*/')                                                       00393700
*          NORESCAN COL(MACLMAR+5);                                     00393800
*      XCOST_ZAAP_ON_CP = '';                                           00393900
*    END;                                                               00394000
*      END;                                                             00394100
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00394200
*  XCOST_ZIIP_ON_CP='';                                                 00394300
*  IF COST_ZIIP_ON_CP(1)=''                                             00394400
*    THEN                                                               00394500
*      DO;                                                              00394600
*        XCOST_ZIIP_ON_CP='1';               /* SET DEFAULT */          00394700
*        ZC='ON';                            /* DEFAULT FLAG ON */      00394800
*      END;                                                             00394900
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00395000
*  IF XPLISTVER>=4                                                      00395100
*    THEN                                                               00395200
*      DO;                                                              00395300
*  IF XCOST_ZIIP_ON_CP^=''                                              00395400
*    THEN DO;                                                           00395500
*      ANS('/* COST_ZIIP_ON_CP('!!                                      00395600
*          XCOST_ZIIP_ON_CP!!                                           00395700
*          ')*/')                                                       00395800
*          NORESCAN COL(MACLMAR+5);                                     00395900
*      XCOST_ZIIP_ON_CP = '';                                           00396000
*    END;                                                               00396100
*      END;                                                             00396200
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00396300
*  XIL_WEIGHTING='';                                                    00396400
*  IF IL_WEIGHTING(1)=''                                                00396500
*    THEN                                                               00396600
*      DO;                                                              00396700
*        XIL_WEIGHTING='0';                  /* SET DEFAULT */          00396800
*        ZC='ON';                            /* DEFAULT FLAG ON */      00396900
*      END;                                                             00397000
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00397100
*  IF XPLISTVER>=4                                                      00397200
*    THEN                                                               00397300
*      DO;                                                              00397400
*  IF XIL_WEIGHTING^=''                                                 00397500
*    THEN DO;                                                           00397600
*      ANS('/* IL_WEIGHTING('!!                                         00397700
*          XIL_WEIGHTING!!                                              00397800
*          ')*/')                                                       00397900
*          NORESCAN COL(MACLMAR+5);                                     00398000
*      XIL_WEIGHTING = '';                                              00398100
*    END;                                                               00398200
*      END;                                                             00398300
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00398400
*  IF PLISTVER=''                                                       00398500
*    THEN DO;                                                           00398600
*      ANS('/* PLISTVER('!!                                             00398700
*          CHAR(XPLISTVER)!!                                            00398800
*          ')*/')                                                       00398900
*          NORESCAN COL(MACLMAR+5);                                     00399000
*    END;                                                               00399100
*  IF ZC='OFF'                               /*NO DEFAULTS TAKEN */     00399200
*    THEN                                                               00399300
*      ANS('/* NONE. */')                                               00399400
*         NORESCAN COL(MACLMAR+5);                                      00399500
*/*PD.P04 END DEFAULT ECHO ------------------------------------------*/ 00399600
*      END;                                                             00399700
*/********************************************************************/ 00399800
*/*PB.SYSL01 INVOKE SP LEVEL AND SYSTEM STATE MACROS                 */ 00399900
*/********************************************************************/ 00400000
*  DCL SYSSPLV CHAR EXTERNAL; DEACT SYSSPLV;/* SPLEVEL 1,2,3         */ 00400100
*  DCL SYSASCE CHAR EXTERNAL; DEACT SYSASCE;/* STATE ANY P AR */        00400200
*  DCL SYSAM64 CHAR EXTERNAL; DEACT SYSAM64;                            00400300
*  DCL SYSALVL FIXED EXTERNAL; DEACT SYSALVL;                           00400400
*                                                                       00400500
*  IF SYSASCE=''                                                        00400600
*    THEN                                                               00400700
*      DO;                                                              00400800
*        IF SYSSPLV=''                                                  00400900
*          THEN                                                         00401000
*            ANS('?SPLEVEL  (TEST);') COL(MACLMAR);                     00401100
*        IF SYSSPLV^='1' & SYSSPLV^='2'                                 00401200
*          THEN                                                         00401300
*            ANS('?SYSSTATE (TEST);') COL(MACLMAR);                     00401400
*          ELSE                                                         00401500
*            SYSASCE='P';                    /* SYSSTATE DEFAULT*/      00401600
*      END;                                                             00401700
*/********************************************************************/ 00401800
*/***PG.P01 FULL MACRO SYNTAX CHECKING                               */ 00401900
*/********************************************************************/ 00402000
*/*PG.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00402100
*  IF XMF^='L'                                                          00402200
*    THEN                                                               00402300
*      DO;                                   /* FULL SYNTAX CHECK */    00402400
*/*PG.P03 EXCESSIVE POSITIONAL ARGUMENTS-----------------------------*/ 00402500
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */    00402600
*    THEN                                                               00402700
*      DO;                                                              00402800
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'!! /**PPOSP* MSG*/            00402900
*            ' "'!!MACLIST!!'"'!!                                       00403000
*            ' CANNOT BE USED.'!!                                       00403100
*            ' NO POSITIONAL ARGUMENTS'!!                               00403200
*            ' ARE ALLOWED.';                                           00403300
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00403400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00403500
*        ZMACRET=8;                          /* MACRO ERROR */          00403600
*      END;                                                             00403700
*/*PG.KXVAR01 NAME, RQD OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00403800
*  IF NUMBER(WEIGHT)>1                       /* CHECK POSITIONALS */    00403900
*    THEN                                                               00404000
*      DO;                                                              00404100
*        ZMS=' 8, "WEIGHT'!!                 /**KPOSP* MSG*/            00404200
*            WEIGHT!!                                                   00404300
*            '" "WEIGHT"'!!                                             00404400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00404500
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00404600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00404700
*        ZMACRET=8;                          /* MACRO ERROR */          00404800
*      END;                                                             00404900
*/*PG.KXVAR03 NAME, RQD OUTPUT, KEYS -XVARIABLE----------------------*/ 00405000
*  XWEIGHT=WEIGHT(1);                        /* SET XVARIABLE */        00405100
*  IF WEIGHT(1)=''                           /* CHECK FOR NULL */       00405200
*   THEN                                                                00405300
*    DO;                                     /* KEY IS REQUIRED */      00405400
*        ZXWEIGHT='';                        /* RESET IN/OUTPUT */      00405500
*        ZMS=' 8,  '!!                                                  00405600
*            ' "WEIGHT" KEY AND ITS'!!                                  00405700
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00405800
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00405900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00406000
*        ZMACRET=8;                          /* MACRO ERROR */          00406100
*    END;                                                               00406200
*  ELSE                                                                 00406300
*    ZXWEIGHT='OUTPUT';                      /* SET IN/OUTPUT */        00406400
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00406500
*  IF NUMBER(STOKEN)>1                       /* CHECK POSITIONALS */    00406600
*    THEN                                                               00406700
*      DO;                                                              00406800
*        ZMS=' 8, "STOKEN'!!                 /**KPOSP* MSG*/            00406900
*            STOKEN!!                                                   00407000
*            '" "STOKEN"'!!                                             00407100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00407200
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00407300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00407400
*        ZMACRET=8;                          /* MACRO ERROR */          00407500
*      END;                                                             00407600
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00407700
*  XSTOKEN=STOKEN(1);                        /* SET XVARIABLE */        00407800
*  IF STOKEN(1)=''                           /* CHECK FOR NULL */       00407900
*   THEN                                                                00408000
*    DO;                                     /* KEY IS REQUIRED */      00408100
*        ZXSTOKEN='';                        /* RESET IN/OUTPUT */      00408200
*        ZMS=' 8,  '!!                                                  00408300
*            ' "STOKEN" KEY AND ITS'!!                                  00408400
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00408500
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00408600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00408700
*        ZMACRET=8;                          /* MACRO ERROR */          00408800
*    END;                                                               00408900
*  ELSE                                                                 00409000
*    ZXSTOKEN='INPUT';                       /* SET IN/OUTPUT */        00409100
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00409200
*  IF ABNORM_COUNT='ABNORM_COUNT' !                                     00409300
*     ABNORM_COUNT='()'                      /*CHECK ENTRY*/            00409400
*    THEN                                                               00409500
*      DO;                                                              00409600
*        ZMS=' 8, THE "ABNORM_COUNT" KEY'!!                             00409700
*            ' MUST CONTAIN ONE'!!                                      00409800
*            ' (OR MORE) ARGUMENT(S).';                                 00409900
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00410000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00410100
*        ZMACRET=8;                          /* MACRO ERROR */          00410200
*      END;                                                             00410300
*  IF NUMBER(ABNORM_COUNT)>1                 /* CHECK POSITIONALS */    00410400
*    THEN                                                               00410500
*      DO;                                                              00410600
*        ZMS=' 8, "ABNORM_COUNT'!!           /**KPOSP* MSG*/            00410700
*            ABNORM_COUNT!!                                             00410800
*            '" "ABNORM_COUNT"'!!                                       00410900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00411000
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00411100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00411200
*        ZMACRET=8;                          /* MACRO ERROR */          00411300
*      END;                                                             00411400
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00411500
*  IF ABNORM_COUNT(1)^=''                    /* CHECK FOR NULL */       00411600
*    THEN                                                               00411700
*      DO;                                                              00411800
*        XABNORM_COUNT=ABNORM_COUNT(1);      /* SET XVARIABLE */        00411900
*        ZXABNORM_COUNT='OUTPUT';            /* SET OUTPUT */           00412000
*      END;                                                             00412100
*  ELSE                                                                 00412200
*    IF ZXABNORM_COUNT^=''                                              00412300
*      THEN                                                             00412400
*        ZXABNORM_COUNT='';                  /* RESET OUTPUT */         00412500
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00412600
*  IF HEALTH='HEALTH' ! HEALTH='()'          /*CHECK ENTRY*/            00412700
*    THEN                                                               00412800
*      DO;                                                              00412900
*        ZMS=' 8, THE "HEALTH" KEY'!!                                   00413000
*            ' MUST CONTAIN ONE'!!                                      00413100
*            ' (OR MORE) ARGUMENT(S).';                                 00413200
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00413300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00413400
*        ZMACRET=8;                          /* MACRO ERROR */          00413500
*      END;                                                             00413600
*  IF NUMBER(HEALTH)>1                       /* CHECK POSITIONALS */    00413700
*    THEN                                                               00413800
*      DO;                                                              00413900
*        ZMS=' 8, "HEALTH'!!                 /**KPOSP* MSG*/            00414000
*            HEALTH!!                                                   00414100
*            '" "HEALTH"'!!                                             00414200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00414300
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00414400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00414500
*        ZMACRET=8;                          /* MACRO ERROR */          00414600
*      END;                                                             00414700
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00414800
*  IF HEALTH(1)^=''                          /* CHECK FOR NULL */       00414900
*    THEN                                                               00415000
*      DO;                                                              00415100
*        XHEALTH=HEALTH(1);                  /* SET XVARIABLE */        00415200
*        ZXHEALTH='OUTPUT';                  /* SET OUTPUT */           00415300
*      END;                                                             00415400
*  ELSE                                                                 00415500
*    IF ZXHEALTH^=''                                                    00415600
*      THEN                                                             00415700
*        ZXHEALTH='';                        /* RESET OUTPUT */         00415800
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00415900
*  IF CPUWEIGHT='CPUWEIGHT' ! CPUWEIGHT='()'  /*CHECK ENTRY*/           00416000
*    THEN                                                               00416100
*      DO;                                                              00416200
*        ZMS=' 8, THE "CPUWEIGHT" KEY'!!                                00416300
*            ' MUST CONTAIN ONE'!!                                      00416400
*            ' (OR MORE) ARGUMENT(S).';                                 00416500
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00416600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00416700
*        ZMACRET=8;                          /* MACRO ERROR */          00416800
*      END;                                                             00416900
*  IF NUMBER(CPUWEIGHT)>1                    /* CHECK POSITIONALS */    00417000
*    THEN                                                               00417100
*      DO;                                                              00417200
*        ZMS=' 8, "CPUWEIGHT'!!              /**KPOSP* MSG*/            00417300
*            CPUWEIGHT!!                                                00417400
*            '" "CPUWEIGHT"'!!                                          00417500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00417600
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00417700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00417800
*        ZMACRET=8;                          /* MACRO ERROR */          00417900
*      END;                                                             00418000
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00418100
*  IF CPUWEIGHT(1)^=''                       /* CHECK FOR NULL */       00418200
*    THEN                                                               00418300
*      DO;                                                              00418400
*        XCPUWEIGHT=CPUWEIGHT(1);            /* SET XVARIABLE */        00418500
*        ZXCPUWEIGHT='OUTPUT';               /* SET OUTPUT */           00418600
*      END;                                                             00418700
*  ELSE                                                                 00418800
*    IF ZXCPUWEIGHT^=''                                                 00418900
*      THEN                                                             00419000
*        ZXCPUWEIGHT='';                     /* RESET OUTPUT */         00419100
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00419200
*  IF ZAAPWEIGHT='ZAAPWEIGHT' ! ZAAPWEIGHT='()'  /*CHECK ENTRY*/        00419300
*    THEN                                                               00419400
*      DO;                                                              00419500
*        ZMS=' 8, THE "ZAAPWEIGHT" KEY'!!                               00419600
*            ' MUST CONTAIN ONE'!!                                      00419700
*            ' (OR MORE) ARGUMENT(S).';                                 00419800
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00419900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00420000
*        ZMACRET=8;                          /* MACRO ERROR */          00420100
*      END;                                                             00420200
*  IF NUMBER(ZAAPWEIGHT)>1                   /* CHECK POSITIONALS */    00420300
*    THEN                                                               00420400
*      DO;                                                              00420500
*        ZMS=' 8, "ZAAPWEIGHT'!!             /**KPOSP* MSG*/            00420600
*            ZAAPWEIGHT!!                                               00420700
*            '" "ZAAPWEIGHT"'!!                                         00420800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00420900
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00421000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00421100
*        ZMACRET=8;                          /* MACRO ERROR */          00421200
*      END;                                                             00421300
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00421400
*  IF ZAAPWEIGHT(1)^=''                      /* CHECK FOR NULL */       00421500
*    THEN                                                               00421600
*      DO;                                                              00421700
*        XZAAPWEIGHT=ZAAPWEIGHT(1);          /* SET XVARIABLE */        00421800
*        ZXZAAPWEIGHT='OUTPUT';              /* SET OUTPUT */           00421900
*      END;                                                             00422000
*  ELSE                                                                 00422100
*    IF ZXZAAPWEIGHT^=''                                                00422200
*      THEN                                                             00422300
*        ZXZAAPWEIGHT='';                    /* RESET OUTPUT */         00422400
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00422500
*  IF ZIIPWEIGHT='ZIIPWEIGHT' ! ZIIPWEIGHT='()'  /*CHECK ENTRY*/        00422600
*    THEN                                                               00422700
*      DO;                                                              00422800
*        ZMS=' 8, THE "ZIIPWEIGHT" KEY'!!                               00422900
*            ' MUST CONTAIN ONE'!!                                      00423000
*            ' (OR MORE) ARGUMENT(S).';                                 00423100
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00423200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00423300
*        ZMACRET=8;                          /* MACRO ERROR */          00423400
*      END;                                                             00423500
*  IF NUMBER(ZIIPWEIGHT)>1                   /* CHECK POSITIONALS */    00423600
*    THEN                                                               00423700
*      DO;                                                              00423800
*        ZMS=' 8, "ZIIPWEIGHT'!!             /**KPOSP* MSG*/            00423900
*            ZIIPWEIGHT!!                                               00424000
*            '" "ZIIPWEIGHT"'!!                                         00424100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00424200
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00424300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00424400
*        ZMACRET=8;                          /* MACRO ERROR */          00424500
*      END;                                                             00424600
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00424700
*  IF ZIIPWEIGHT(1)^=''                      /* CHECK FOR NULL */       00424800
*    THEN                                                               00424900
*      DO;                                                              00425000
*        XZIIPWEIGHT=ZIIPWEIGHT(1);          /* SET XVARIABLE */        00425100
*        ZXZIIPWEIGHT='OUTPUT';              /* SET OUTPUT */           00425200
*      END;                                                             00425300
*  ELSE                                                                 00425400
*    IF ZXZIIPWEIGHT^=''                                                00425500
*      THEN                                                             00425600
*        ZXZIIPWEIGHT='';                    /* RESET OUTPUT */         00425700
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00425800
*  IF CPUPROPORTION='CPUPROPORTION' !                                   00425900
*     CPUPROPORTION='()'                     /*CHECK ENTRY*/            00426000
*    THEN                                                               00426100
*      DO;                                                              00426200
*        ZMS=' 8, THE "CPUPROPORTION" KEY'!!                            00426300
*            ' MUST CONTAIN ONE'!!                                      00426400
*            ' (OR MORE) ARGUMENT(S).';                                 00426500
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00426600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00426700
*        ZMACRET=8;                          /* MACRO ERROR */          00426800
*      END;                                                             00426900
*  IF NUMBER(CPUPROPORTION)>1                /* CHECK POSITIONALS */    00427000
*    THEN                                                               00427100
*      DO;                                                              00427200
*        ZMS=' 8, "CPUPROPORTION'!!          /**KPOSP* MSG*/            00427300
*            CPUPROPORTION!!                                            00427400
*            '" "CPUPROPORTION"'!!                                      00427500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00427600
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00427700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00427800
*        ZMACRET=8;                          /* MACRO ERROR */          00427900
*      END;                                                             00428000
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00428100
*  IF CPUPROPORTION(1)^=''                   /* CHECK FOR NULL */       00428200
*    THEN                                                               00428300
*      DO;                                                              00428400
*        XCPUPROPORTION=CPUPROPORTION(1);    /* SET XVARIABLE */        00428500
*        ZXCPUPROPORTION='OUTPUT';           /* SET OUTPUT */           00428600
*      END;                                                             00428700
*  ELSE                                                                 00428800
*    IF ZXCPUPROPORTION^=''                                             00428900
*      THEN                                                             00429000
*        ZXCPUPROPORTION='';                 /* RESET OUTPUT */         00429100
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00429200
*  IF ZAAPPROPORTION='ZAAPPROPORTION' !                                 00429300
*     ZAAPPROPORTION='()'                    /*CHECK ENTRY*/            00429400
*    THEN                                                               00429500
*      DO;                                                              00429600
*        ZMS=' 8, THE "ZAAPPROPORTION" KEY'!!                           00429700
*            ' MUST CONTAIN ONE'!!                                      00429800
*            ' (OR MORE) ARGUMENT(S).';                                 00429900
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00430000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00430100
*        ZMACRET=8;                          /* MACRO ERROR */          00430200
*      END;                                                             00430300
*  IF NUMBER(ZAAPPROPORTION)>1               /* CHECK POSITIONALS */    00430400
*    THEN                                                               00430500
*      DO;                                                              00430600
*        ZMS=' 8, "ZAAPPROPORTION'!!         /**KPOSP* MSG*/            00430700
*            ZAAPPROPORTION!!                                           00430800
*            '" "ZAAPPROPORTION"'!!                                     00430900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00431000
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00431100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00431200
*        ZMACRET=8;                          /* MACRO ERROR */          00431300
*      END;                                                             00431400
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00431500
*  IF ZAAPPROPORTION(1)^=''                  /* CHECK FOR NULL */       00431600
*    THEN                                                               00431700
*      DO;                                                              00431800
*        XZAAPPROPORTION=ZAAPPROPORTION(1);  /* SET XVARIABLE */        00431900
*        ZXZAAPPROPORTION='OUTPUT';          /* SET OUTPUT */           00432000
*      END;                                                             00432100
*  ELSE                                                                 00432200
*    IF ZXZAAPPROPORTION^=''                                            00432300
*      THEN                                                             00432400
*        ZXZAAPPROPORTION='';                /* RESET OUTPUT */         00432500
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00432600
*  IF ZIIPPROPORTION='ZIIPPROPORTION' !                                 00432700
*     ZIIPPROPORTION='()'                    /*CHECK ENTRY*/            00432800
*    THEN                                                               00432900
*      DO;                                                              00433000
*        ZMS=' 8, THE "ZIIPPROPORTION" KEY'!!                           00433100
*            ' MUST CONTAIN ONE'!!                                      00433200
*            ' (OR MORE) ARGUMENT(S).';                                 00433300
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00433400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00433500
*        ZMACRET=8;                          /* MACRO ERROR */          00433600
*      END;                                                             00433700
*  IF NUMBER(ZIIPPROPORTION)>1               /* CHECK POSITIONALS */    00433800
*    THEN                                                               00433900
*      DO;                                                              00434000
*        ZMS=' 8, "ZIIPPROPORTION'!!         /**KPOSP* MSG*/            00434100
*            ZIIPPROPORTION!!                                           00434200
*            '" "ZIIPPROPORTION"'!!                                     00434300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00434400
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00434500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00434600
*        ZMACRET=8;                          /* MACRO ERROR */          00434700
*      END;                                                             00434800
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00434900
*  IF ZIIPPROPORTION(1)^=''                  /* CHECK FOR NULL */       00435000
*    THEN                                                               00435100
*      DO;                                                              00435200
*        XZIIPPROPORTION=ZIIPPROPORTION(1);  /* SET XVARIABLE */        00435300
*        ZXZIIPPROPORTION='OUTPUT';          /* SET OUTPUT */           00435400
*      END;                                                             00435500
*  ELSE                                                                 00435600
*    IF ZXZIIPPROPORTION^=''                                            00435700
*      THEN                                                             00435800
*        ZXZIIPPROPORTION='';                /* RESET OUTPUT */         00435900
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00436000
*  IF MAXSRVUNITS='MAXSRVUNITS' ! MAXSRVUNITS='()'  /*CHECK ENTRY*/     00436100
*    THEN                                                               00436200
*      DO;                                                              00436300
*        ZMS=' 8, THE "MAXSRVUNITS" KEY'!!                              00436400
*            ' MUST CONTAIN ONE'!!                                      00436500
*            ' (OR MORE) ARGUMENT(S).';                                 00436600
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00436700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00436800
*        ZMACRET=8;                          /* MACRO ERROR */          00436900
*      END;                                                             00437000
*  IF NUMBER(MAXSRVUNITS)>1                  /* CHECK POSITIONALS */    00437100
*    THEN                                                               00437200
*      DO;                                                              00437300
*        ZMS=' 8, "MAXSRVUNITS'!!            /**KPOSP* MSG*/            00437400
*            MAXSRVUNITS!!                                              00437500
*            '" "MAXSRVUNITS"'!!                                        00437600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00437700
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00437800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00437900
*        ZMACRET=8;                          /* MACRO ERROR */          00438000
*      END;                                                             00438100
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00438200
*  IF MAXSRVUNITS(1)^=''                     /* CHECK FOR NULL */       00438300
*    THEN                                                               00438400
*      DO;                                                              00438500
*        XMAXSRVUNITS=MAXSRVUNITS(1);        /* SET XVARIABLE */        00438600
*        ZXMAXSRVUNITS='OUTPUT';             /* SET OUTPUT */           00438700
*      END;                                                             00438800
*  ELSE                                                                 00438900
*    IF ZXMAXSRVUNITS^=''                                               00439000
*      THEN                                                             00439100
*        ZXMAXSRVUNITS='';                   /* RESET OUTPUT */         00439200
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00439300
*  IF METHOD='METHOD'                        /* CHECK ENTRY */          00439400
*    THEN                                                               00439500
*      DO;                                                              00439600
*        ZMS=' 8, THE "METHOD" KEY'!!                                   00439700
*            ' MUST CONTAIN ONE'!!                                      00439800
*            ' (OR MORE) ARGUMENT(S).';                                 00439900
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00440000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00440100
*        ZMACRET=8;                          /* MACRO ERROR */          00440200
*      END;                                                             00440300
*  IF NUMBER(METHOD)>1                       /* CHECK POSITIONALS */    00440400
*    THEN                                                               00440500
*      DO;                                                              00440600
*        ZMS=' 8, "METHOD'!!                 /**KPOSP* MSG*/            00440700
*            METHOD!!                                                   00440800
*            '" "METHOD"'!!                                             00440900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00441000
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00441100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00441200
*        ZMACRET=8;                          /* MACRO ERROR */          00441300
*      END;                                                             00441400
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00441500
*  XMETHOD='';                               /* RESET XVARIABLE */      00441600
*  IF TRANSLATE(METHOD(1))                                              00441700
*              = 'PROPORTIONAL'              /* CHECK FOR KEYWORD */    00441800
*    THEN                                                               00441900
*      XMETHOD = 'PROPORTIONAL';             /* SET XVARIABLE */        00442000
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00442100
*  IF TRANSLATE(METHOD(1))                                              00442200
*              = 'EQUICPU'                   /* CHECK FOR KEYWORD */    00442300
*    THEN                                                               00442400
*      XMETHOD = 'EQUICPU';                  /* SET XVARIABLE */        00442500
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00442600
*  ZXMETHOD='INPUT';                         /* SET IN/OUTPUT */        00442700
*  IF XMETHOD=''                             /* CHECK FOR KEYWORD */    00442800
*    THEN                                                               00442900
*      DO;                                   /* KEYWORD NOT ENTERED */  00443000
*        XMETHOD='PROPORTIONAL';             /* SET DEFAULT */          00443100
*        IF METHOD(1)^=''                                               00443200
*          THEN                                                         00443300
*            DO;                                                        00443400
*              ZXMETHOD='';                  /* RESET IN/OUTPUT */      00443500
*              ZMS=' 8, "METHOD'!!           /**KUKWP* MSG*/            00443600
*                  METHOD!!'"'!!                                        00443700
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00443800
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00443900
*                  ' "PROPORTIONAL"'!!       /* VALID KEYWORD */        00444000
*                  ' OR "EQUICPU".';         /* VALID KEYWORD */        00444100
*              ANS MSG('?IWM4SRSC ---> '!!ZMS);                         00444200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00444300
*              ZMACRET=8;                    /* MACRO ERROR */          00444400
*            END;                                                       00444500
*      END;                                                             00444600
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00444700
*  IF COST_ZAAP_ON_CP='COST_ZAAP_ON_CP' !                               00444800
*     COST_ZAAP_ON_CP='()'                   /*CHECK ENTRY*/            00444900
*    THEN                                                               00445000
*      DO;                                                              00445100
*        ZMS=' 8, THE "COST_ZAAP_ON_CP" KEY'!!                          00445200
*            ' MUST CONTAIN ONE'!!                                      00445300
*            ' (OR MORE) ARGUMENT(S).';                                 00445400
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00445500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00445600
*        ZMACRET=8;                          /* MACRO ERROR */          00445700
*      END;                                                             00445800
*  IF NUMBER(COST_ZAAP_ON_CP)>1              /* CHECK POSITIONALS */    00445900
*    THEN                                                               00446000
*      DO;                                                              00446100
*        ZMS=' 8, "COST_ZAAP_ON_CP'!!        /**KPOSP* MSG*/            00446200
*            COST_ZAAP_ON_CP!!                                          00446300
*            '" "COST_ZAAP_ON_CP"'!!                                    00446400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00446500
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00446600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00446700
*        ZMACRET=8;                          /* MACRO ERROR */          00446800
*      END;                                                             00446900
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00447000
*  ZXCOST_ZAAP_ON_CP='INPUT';                /* SET IN/OUTPUT */        00447100
*  XCOST_ZAAP_ON_CP='1';                     /* SET DEFAULT */          00447200
*  IF COST_ZAAP_ON_CP(1)^=''                 /* CHECK FOR NULL */       00447300
*    THEN                                                               00447400
*      XCOST_ZAAP_ON_CP=COST_ZAAP_ON_CP(1);  /* SET XVARIABLE */        00447500
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00447600
*  IF COST_ZIIP_ON_CP='COST_ZIIP_ON_CP' !                               00447700
*     COST_ZIIP_ON_CP='()'                   /*CHECK ENTRY*/            00447800
*    THEN                                                               00447900
*      DO;                                                              00448000
*        ZMS=' 8, THE "COST_ZIIP_ON_CP" KEY'!!                          00448100
*            ' MUST CONTAIN ONE'!!                                      00448200
*            ' (OR MORE) ARGUMENT(S).';                                 00448300
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00448400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00448500
*        ZMACRET=8;                          /* MACRO ERROR */          00448600
*      END;                                                             00448700
*  IF NUMBER(COST_ZIIP_ON_CP)>1              /* CHECK POSITIONALS */    00448800
*    THEN                                                               00448900
*      DO;                                                              00449000
*        ZMS=' 8, "COST_ZIIP_ON_CP'!!        /**KPOSP* MSG*/            00449100
*            COST_ZIIP_ON_CP!!                                          00449200
*            '" "COST_ZIIP_ON_CP"'!!                                    00449300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00449400
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00449500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00449600
*        ZMACRET=8;                          /* MACRO ERROR */          00449700
*      END;                                                             00449800
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00449900
*  ZXCOST_ZIIP_ON_CP='INPUT';                /* SET IN/OUTPUT */        00450000
*  XCOST_ZIIP_ON_CP='1';                     /* SET DEFAULT */          00450100
*  IF COST_ZIIP_ON_CP(1)^=''                 /* CHECK FOR NULL */       00450200
*    THEN                                                               00450300
*      XCOST_ZIIP_ON_CP=COST_ZIIP_ON_CP(1);  /* SET XVARIABLE */        00450400
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00450500
*  IF MAXEQUIVUNITS='MAXEQUIVUNITS' !                                   00450600
*     MAXEQUIVUNITS='()'                     /*CHECK ENTRY*/            00450700
*    THEN                                                               00450800
*      DO;                                                              00450900
*        ZMS=' 8, THE "MAXEQUIVUNITS" KEY'!!                            00451000
*            ' MUST CONTAIN ONE'!!                                      00451100
*            ' (OR MORE) ARGUMENT(S).';                                 00451200
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00451300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00451400
*        ZMACRET=8;                          /* MACRO ERROR */          00451500
*      END;                                                             00451600
*  IF NUMBER(MAXEQUIVUNITS)>1                /* CHECK POSITIONALS */    00451700
*    THEN                                                               00451800
*      DO;                                                              00451900
*        ZMS=' 8, "MAXEQUIVUNITS'!!          /**KPOSP* MSG*/            00452000
*            MAXEQUIVUNITS!!                                            00452100
*            '" "MAXEQUIVUNITS"'!!                                      00452200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00452300
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00452400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00452500
*        ZMACRET=8;                          /* MACRO ERROR */          00452600
*      END;                                                             00452700
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00452800
*  IF MAXEQUIVUNITS(1)^=''                   /* CHECK FOR NULL */       00452900
*    THEN                                                               00453000
*      DO;                                                              00453100
*        XMAXEQUIVUNITS=MAXEQUIVUNITS(1);    /* SET XVARIABLE */        00453200
*        ZXMAXEQUIVUNITS='OUTPUT';           /* SET OUTPUT */           00453300
*      END;                                                             00453400
*  ELSE                                                                 00453500
*    IF ZXMAXEQUIVUNITS^=''                                             00453600
*      THEN                                                             00453700
*        ZXMAXEQUIVUNITS='';                 /* RESET OUTPUT */         00453800
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00453900
*  IF IL_WEIGHTING='IL_WEIGHTING' !                                     00454000
*     IL_WEIGHTING='()'                      /*CHECK ENTRY*/            00454100
*    THEN                                                               00454200
*      DO;                                                              00454300
*        ZMS=' 8, THE "IL_WEIGHTING" KEY'!!                             00454400
*            ' MUST CONTAIN ONE'!!                                      00454500
*            ' (OR MORE) ARGUMENT(S).';                                 00454600
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00454700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00454800
*        ZMACRET=8;                          /* MACRO ERROR */          00454900
*      END;                                                             00455000
*  IF NUMBER(IL_WEIGHTING)>1                 /* CHECK POSITIONALS */    00455100
*    THEN                                                               00455200
*      DO;                                                              00455300
*        ZMS=' 8, "IL_WEIGHTING'!!           /**KPOSP* MSG*/            00455400
*            IL_WEIGHTING!!                                             00455500
*            '" "IL_WEIGHTING"'!!                                       00455600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00455700
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00455800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00455900
*        ZMACRET=8;                          /* MACRO ERROR */          00456000
*      END;                                                             00456100
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00456200
*  ZXIL_WEIGHTING='INPUT';                   /* SET IN/OUTPUT */        00456300
*  XIL_WEIGHTING='0';                        /* SET DEFAULT */          00456400
*  IF IL_WEIGHTING(1)^=''                    /* CHECK FOR NULL */       00456500
*    THEN                                                               00456600
*      XIL_WEIGHTING=IL_WEIGHTING(1);        /* SET XVARIABLE */        00456700
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00456800
*  IF RETCODE='RETCODE' ! RETCODE='()'       /*CHECK ENTRY*/            00456900
*    THEN                                                               00457000
*      DO;                                                              00457100
*        ZMS=' 8, THE "RETCODE" KEY'!!                                  00457200
*            ' MUST CONTAIN ONE'!!                                      00457300
*            ' (OR MORE) ARGUMENT(S).';                                 00457400
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00457500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00457600
*        ZMACRET=8;                          /* MACRO ERROR */          00457700
*      END;                                                             00457800
*  IF NUMBER(RETCODE)>1                      /* CHECK POSITIONALS */    00457900
*    THEN                                                               00458000
*      DO;                                                              00458100
*        ZMS=' 8, "RETCODE'!!                /**KPOSP* MSG*/            00458200
*            RETCODE!!                                                  00458300
*            '" "RETCODE"'!!                                            00458400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00458500
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00458600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00458700
*        ZMACRET=8;                          /* MACRO ERROR */          00458800
*      END;                                                             00458900
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00459000
*  IF RETCODE(1)^=''                         /* CHECK FOR NULL */       00459100
*    THEN                                                               00459200
*      DO;                                                              00459300
*        XRETCODE=RETCODE(1);                /* SET XVARIABLE */        00459400
*        ZXRETCODE='OUTPUT';                 /* SET OUTPUT */           00459500
*      END;                                                             00459600
*  ELSE                                                                 00459700
*    IF ZXRETCODE^=''                                                   00459800
*      THEN                                                             00459900
*        ZXRETCODE='';                       /* RESET OUTPUT */         00460000
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00460100
*  IF RSNCODE='RSNCODE' ! RSNCODE='()'       /*CHECK ENTRY*/            00460200
*    THEN                                                               00460300
*      DO;                                                              00460400
*        ZMS=' 8, THE "RSNCODE" KEY'!!                                  00460500
*            ' MUST CONTAIN ONE'!!                                      00460600
*            ' (OR MORE) ARGUMENT(S).';                                 00460700
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00460800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00460900
*        ZMACRET=8;                          /* MACRO ERROR */          00461000
*      END;                                                             00461100
*  IF NUMBER(RSNCODE)>1                      /* CHECK POSITIONALS */    00461200
*    THEN                                                               00461300
*      DO;                                                              00461400
*        ZMS=' 8, "RSNCODE'!!                /**KPOSP* MSG*/            00461500
*            RSNCODE!!                                                  00461600
*            '" "RSNCODE"'!!                                            00461700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00461800
*        ANS MSG('?IWM4SRSC ---> '!!ZMS);                               00461900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00462000
*        ZMACRET=8;                          /* MACRO ERROR */          00462100
*      END;                                                             00462200
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00462300
*  IF RSNCODE(1)^=''                         /* CHECK FOR NULL */       00462400
*    THEN                                                               00462500
*      DO;                                                              00462600
*        XRSNCODE=RSNCODE(1);                /* SET XVARIABLE */        00462700
*        ZXRSNCODE='OUTPUT';                 /* SET OUTPUT */           00462800
*      END;                                                             00462900
*  ELSE                                                                 00463000
*    IF ZXRSNCODE^=''                                                   00463100
*      THEN                                                             00463200
*        ZXRSNCODE='';                       /* RESET OUTPUT */         00463300
*/*PG.P04 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00463400
*      END;                                  /* END COMPLETE CHECKING*/ 00463500
*/********************************************************************/ 00463600
*/***PE.MR01 GENERATE CODE IF ZMACRET=0                              */ 00463700
*/********************************************************************/ 00463800
*  IF ZMACRET = 0                                                       00463900
*    THEN                                                               00464000
*      DO;                                                              00464100
*/********************************************************************/ 00464200
*/***PE.PR01 PRINT CONTROLS, DEFAULT IS YES                          */ 00464300
*/********************************************************************/ 00464400
*  ANS(MACCONC!!'LIST PUSH NOECHO;') NORESCAN COL(MACLMAR);             00464500
*  IF ZPRINT='NO'                            /* PRINT IS OFF */         00464600
*    THEN                                                               00464700
*      ANS(MACCONC!!'LIST OFF NOECHO;') NORESCAN COL(MACLMAR);          00464800
*    ELSE                                                               00464900
*      ANS(MACCONC!!'LIST ON NOECHO;')  NORESCAN COL(MACLMAR);          00465000
*/********************************************************************/ 00465100
*/*PE.DO02 OUTER MACRO DO STATEMENT----------------------------------*/ 00465200
*  IF XMF^='L'                                                          00465300
*    THEN                                                               00465400
*      ANS('DO; /* IWM4SRSC-PLISTVER */')                               00465500
*          NORESCAN COL(MACLMAR);                                       00465600
*/*MCMPLS01 RFY 15*/                                                    00465700
*  IF XMF^='L' & ZMACRET = 0                                            00465800
*    THEN                                                               00465900
*      ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);                   00466000
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00466100
       DCL EHAMAPS CHAR EXTERNAL;                                       00466200
       IF INDEX(EHAMAPS,'XM@')=0 THEN                                   00466300
         EHAMAPS=EHAMAPS!!'XM@,';                                       00466400
       IF INDEX(EHAREGS,'00F')=0                                        00466500
         THEN                                                           00466600
           EHAREGS=EHAREGS!!'00F'; /* GPR00F                      */    00466700
       IF INDEX(EHAREGS,'15F')=0                                        00466800
         THEN                                                           00466900
           EHAREGS=EHAREGS!!'15F'; /* GPR15F                      */    00467000
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00467100
*/*PL.LL01 ?IWM4SRSC MF=L PARAMETER LIST-----------------------------*/ 00467200
*  IF XMF='L'                                                           00467300
*    THEN                                                               00467400
*      DO;                                                              00467500
*        ANS('DCL 1 '!!XMFCTRL!!' '!!XMFATTR!!', '!!                    00467600
*            '/* ?IWM4SRSC PARM LIST*/')                                00467700
*            NORESCAN COL(MACLMAR);                                     00467800
*/*PL.LL02  XVERSION FIXED(8) INPUT----------------------------------*/ 00467900
*        ANS('2 '!!XMFCTRL!!                                            00468000
*            '_XVERSION FIXED(8), '!!                                   00468100
*            '/* INPUT XVERSION*/')                                     00468200
*            NORESCAN COL(MACLMAR+2);                                   00468300
*/*PL.LL13  XOPTIONS BIT(8) FIELD_LABEL------------------------------*/ 00468400
*        ANS('2 '!!XMFCTRL                                              00468500
*         !! '_XOPTIONS BIT(8), '                                       00468600
*         !! '/* '!!ZXOPTIONS                                           00468700
*         !! ' XOPTIONS */'                                             00468800
*            ) NORESCAN COL(MACLMAR+2);                                 00468900
*/*PL.LL02  XPLISTLEN FIXED(16) BDY(BYTE) INPUT----------------------*/ 00469000
*        ANS('2 '!!XMFCTRL!!                                            00469100
*            '_XPLISTLEN FIXED(16) BDY(BYTE), '!!                       00469200
*            '/* INPUT XPLISTLEN*/')                                    00469300
*            NORESCAN COL(MACLMAR+2);                                   00469400
*/*PL.LL13  XWEIGHT FIXED(31) OUTPUT---------------------------------*/ 00469500
*        ANS('2 '!!XMFCTRL                                              00469600
*         !! '_XWEIGHT FIXED(31), '                                     00469700
*         !! '/* '!!ZXWEIGHT                                            00469800
*         !! ' XWEIGHT */'                                              00469900
*            ) NORESCAN COL(MACLMAR+2);                                 00470000
*/*PL.LL13  XSTOKEN BIT(64) INPUT------------------------------------*/ 00470100
*        ANS('2 '!!XMFCTRL                                              00470200
*         !! '_XSTOKEN BIT(64), '                                       00470300
*         !! '/* '!!ZXSTOKEN                                            00470400
*         !! ' XSTOKEN */'                                              00470500
*            ) NORESCAN COL(MACLMAR+2);                                 00470600
*/*PL.LL13  XABNORM_COUNT FIXED(31) OUTPUT---------------------------*/ 00470700
*        ANS('2 '!!XMFCTRL                                              00470800
*         !! '_XABNORM_COUNT FIXED(31), '                               00470900
*         !! '/* '!!ZXABNORM_COUNT                                      00471000
*         !! ' XABNORM_COUNT */'                                        00471100
*            ) NORESCAN COL(MACLMAR+2);                                 00471200
*/*PL.LL13  XHEALTH FIXED(31) OUTPUT---------------------------------*/ 00471300
*        ANS('2 '!!XMFCTRL                                              00471400
*         !! '_XHEALTH FIXED(31), '                                     00471500
*         !! '/* '!!ZXHEALTH                                            00471600
*         !! ' XHEALTH */'                                              00471700
*            ) NORESCAN COL(MACLMAR+2);                                 00471800
*/*PL.LL13  XRSV0018 CHAR(24) RESERVED-------------------------------*/ 00471900
*        ANS('2 '!!XMFCTRL                                              00472000
*         !! '_XRSV0018 CHAR(24), '                                     00472100
*         !! '/* RESERVED */'                                           00472200
*            ) NORESCAN COL(MACLMAR+2);                                 00472300
*/*PL.LPVER01 -------------------------------------------------------*/ 00472400
*  IF XPLISTVER>=2                                                      00472500
*    THEN                                                               00472600
*      DO;                                                              00472700
*/*PL.LL13  XCPUWEIGHT FIXED(31) OUTPUT------------------------------*/ 00472800
*        ANS('2 '!!XMFCTRL                                              00472900
*         !! '_XCPUWEIGHT FIXED(31), '                                  00473000
*         !! '/* '!!ZXCPUWEIGHT                                         00473100
*         !! ' XCPUWEIGHT */'                                           00473200
*            ) NORESCAN COL(MACLMAR+2);                                 00473300
*/*PL.LPVER02 -------------------------------------------------------*/ 00473400
*      END;                                                             00473500
*/*PL.LPVER01 -------------------------------------------------------*/ 00473600
*  IF XPLISTVER>=2                                                      00473700
*    THEN                                                               00473800
*      DO;                                                              00473900
*/*PL.LL13  XZAAPWEIGHT FIXED(31) OUTPUT-----------------------------*/ 00474000
*        ANS('2 '!!XMFCTRL                                              00474100
*         !! '_XZAAPWEIGHT FIXED(31), '                                 00474200
*         !! '/* '!!ZXZAAPWEIGHT                                        00474300
*         !! ' XZAAPWEIGHT */'                                          00474400
*            ) NORESCAN COL(MACLMAR+2);                                 00474500
*/*PL.LPVER02 -------------------------------------------------------*/ 00474600
*      END;                                                             00474700
*/*PL.LPVER01 -------------------------------------------------------*/ 00474800
*  IF XPLISTVER>=2                                                      00474900
*    THEN                                                               00475000
*      DO;                                                              00475100
*/*PL.LL13  XZIIPWEIGHT FIXED(31) OUTPUT-----------------------------*/ 00475200
*        ANS('2 '!!XMFCTRL                                              00475300
*         !! '_XZIIPWEIGHT FIXED(31), '                                 00475400
*         !! '/* '!!ZXZIIPWEIGHT                                        00475500
*         !! ' XZIIPWEIGHT */'                                          00475600
*            ) NORESCAN COL(MACLMAR+2);                                 00475700
*/*PL.LPVER02 -------------------------------------------------------*/ 00475800
*      END;                                                             00475900
*/*PL.LPVER01 -------------------------------------------------------*/ 00476000
*  IF XPLISTVER>=2                                                      00476100
*    THEN                                                               00476200
*      DO;                                                              00476300
*/*PL.LL13  XCPUPROPORTION FIXED(31) OUTPUT--------------------------*/ 00476400
*        ANS('2 '!!XMFCTRL                                              00476500
*         !! '_XCPUPROPORTION FIXED(31), '                              00476600
*         !! '/* '!!ZXCPUPROPORTION                                     00476700
*         !! ' XCPUPROPORTION */'                                       00476800
*            ) NORESCAN COL(MACLMAR+2);                                 00476900
*/*PL.LPVER02 -------------------------------------------------------*/ 00477000
*      END;                                                             00477100
*/*PL.LPVER01 -------------------------------------------------------*/ 00477200
*  IF XPLISTVER>=2                                                      00477300
*    THEN                                                               00477400
*      DO;                                                              00477500
*/*PL.LL13  XZAAPPROPORTION FIXED(31) OUTPUT-------------------------*/ 00477600
*        ANS('2 '!!XMFCTRL                                              00477700
*         !! '_XZAAPPROPORTION FIXED(31), '                             00477800
*         !! '/* '!!ZXZAAPPROPORTION                                    00477900
*         !! ' XZAAPPROPORTION */'                                      00478000
*            ) NORESCAN COL(MACLMAR+2);                                 00478100
*/*PL.LPVER02 -------------------------------------------------------*/ 00478200
*      END;                                                             00478300
*/*PL.LPVER01 -------------------------------------------------------*/ 00478400
*  IF XPLISTVER>=2                                                      00478500
*    THEN                                                               00478600
*      DO;                                                              00478700
*/*PL.LL13  XZIIPPROPORTION FIXED(31) OUTPUT-------------------------*/ 00478800
*        ANS('2 '!!XMFCTRL                                              00478900
*         !! '_XZIIPPROPORTION FIXED(31), '                             00479000
*         !! '/* '!!ZXZIIPPROPORTION                                    00479100
*         !! ' XZIIPPROPORTION */'                                      00479200
*            ) NORESCAN COL(MACLMAR+2);                                 00479300
*/*PL.LPVER02 -------------------------------------------------------*/ 00479400
*      END;                                                             00479500
*/*PL.LPVER01 -------------------------------------------------------*/ 00479600
*  IF XPLISTVER>=3                                                      00479700
*    THEN                                                               00479800
*      DO;                                                              00479900
*/*PL.LL13  XMAXSRVUNITS FIXED(31) OUTPUT----------------------------*/ 00480000
*        ANS('2 '!!XMFCTRL                                              00480100
*         !! '_XMAXSRVUNITS FIXED(31), '                                00480200
*         !! '/* '!!ZXMAXSRVUNITS                                       00480300
*         !! ' XMAXSRVUNITS */'                                         00480400
*            ) NORESCAN COL(MACLMAR+2);                                 00480500
*/*PL.LPVER02 -------------------------------------------------------*/ 00480600
*      END;                                                             00480700
*/*PL.LPVER01 -------------------------------------------------------*/ 00480800
*  IF XPLISTVER>=4                                                      00480900
*    THEN                                                               00481000
*      DO;                                                              00481100
*/*PL.LL13  XCOST_ZAAP_ON_CP FIXED(31) INPUT-------------------------*/ 00481200
*        ANS('2 '!!XMFCTRL                                              00481300
*         !! '_XCOST_ZAAP_ON_CP FIXED(31), '                            00481400
*         !! '/* '!!ZXCOST_ZAAP_ON_CP                                   00481500
*         !! ' XCOST_ZAAP_ON_CP */'                                     00481600
*            ) NORESCAN COL(MACLMAR+2);                                 00481700
*/*PL.LPVER02 -------------------------------------------------------*/ 00481800
*      END;                                                             00481900
*/*PL.LPVER01 -------------------------------------------------------*/ 00482000
*  IF XPLISTVER>=4                                                      00482100
*    THEN                                                               00482200
*      DO;                                                              00482300
*/*PL.LL13  XCOST_ZIIP_ON_CP FIXED(31) INPUT-------------------------*/ 00482400
*        ANS('2 '!!XMFCTRL                                              00482500
*         !! '_XCOST_ZIIP_ON_CP FIXED(31), '                            00482600
*         !! '/* '!!ZXCOST_ZIIP_ON_CP                                   00482700
*         !! ' XCOST_ZIIP_ON_CP */'                                     00482800
*            ) NORESCAN COL(MACLMAR+2);                                 00482900
*/*PL.LPVER02 -------------------------------------------------------*/ 00483000
*      END;                                                             00483100
*/*PL.LPVER01 -------------------------------------------------------*/ 00483200
*  IF XPLISTVER>=4                                                      00483300
*    THEN                                                               00483400
*      DO;                                                              00483500
*/*PL.LL13  XIL_WEIGHTING FIXED(31) INPUT----------------------------*/ 00483600
*        ANS('2 '!!XMFCTRL                                              00483700
*         !! '_XIL_WEIGHTING FIXED(31), '                               00483800
*         !! '/* '!!ZXIL_WEIGHTING                                      00483900
*         !! ' XIL_WEIGHTING */'                                        00484000
*            ) NORESCAN COL(MACLMAR+2);                                 00484100
*/*PL.LPVER02 -------------------------------------------------------*/ 00484200
*      END;                                                             00484300
*/*PL.LPVER01 -------------------------------------------------------*/ 00484400
*  IF XPLISTVER>=4                                                      00484500
*    THEN                                                               00484600
*      DO;                                                              00484700
*/*PL.LL13  XMAXEQUIVUNITS FIXED(31) OUTPUT--------------------------*/ 00484800
*        ANS('2 '!!XMFCTRL                                              00484900
*         !! '_XMAXEQUIVUNITS FIXED(31), '                              00485000
*         !! '/* '!!ZXMAXEQUIVUNITS                                     00485100
*         !! ' XMAXEQUIVUNITS */'                                       00485200
*            ) NORESCAN COL(MACLMAR+2);                                 00485300
*/*PL.LPVER02 -------------------------------------------------------*/ 00485400
*      END;                                                             00485500
*/*PL.LPVER01 -------------------------------------------------------*/ 00485600
*  IF XPLISTVER>=4                                                      00485700
*    THEN                                                               00485800
*      DO;                                                              00485900
*/*PL.LL04  XEQUICPU_OPTIONS BIT(8) FIELD_LABEL----------------------*/ 00486000
*        ANS('2 '!!XMFCTRL!!                                            00486100
*            '_XEQUICPU_OPTIONS BIT(8), '!!                             00486200
*            '/* FIELD_LABEL */')                                       00486300
*            NORESCAN COL(MACLMAR+2);                                   00486400
*/*PL.LPVER02 -------------------------------------------------------*/ 00486500
*      END;                                                             00486600
*/*PL.LPVER01 -------------------------------------------------------*/ 00486700
*  IF XPLISTVER>=4                                                      00486800
*    THEN                                                               00486900
*      DO;                                                              00487000
*/*PL.LL09 BIT 1XXXXXXX----------------------------------------------*/ 00487100
*          ANS('3 '!!XMFCTRL!!                                          00487200
*              '_XMETHOD_PROPORTIONAL BIT(1), '!!                       00487300
*              '/* BIT */')                                             00487400
*              NORESCAN COL(MACLMAR+2);                                 00487500
*/*PL.LPVER02 -------------------------------------------------------*/ 00487600
*      END;                                                             00487700
*/*PL.LPVER01 -------------------------------------------------------*/ 00487800
*  IF XPLISTVER>=4                                                      00487900
*    THEN                                                               00488000
*      DO;                                                              00488100
*/*PL.LL09 BIT X1XXXXXX----------------------------------------------*/ 00488200
*          ANS('3 '!!XMFCTRL!!                                          00488300
*              '_XMETHOD_EQUICPU BIT(1), '!!                            00488400
*              '/* BIT */')                                             00488500
*              NORESCAN COL(MACLMAR+2);                                 00488600
*/*PL.LL10 RESERVED BIT----------------------------------------------*/ 00488700
*          ANS('3 '!!XMFCTRL!!                                          00488800
*              '_XEQUICPU_OPTIONS_RSVD1 BIT(6), '!!                     00488900
*              '/* BIT */')                                             00489000
*              NORESCAN COL(MACLMAR+2);                                 00489100
*/*PL.LPVER02 -------------------------------------------------------*/ 00489200
*      END;                                                             00489300
*/*PL.LL18 ----------------------------------------------------------*/ 00489400
*        ANS('2 * CHAR(0);')                                            00489500
*            NORESCAN COL(MACLMAR+2);                                   00489600
*/*PL.LL17 END OF MF=L PARAMETER LIST--------------------------------*/ 00489700
*      END;                                                             00489800
*/*PL.L01 MACRO WORK VARIABLES---------------------------------------*/ 00489900
*  DCL ZPRMLINE CHAR;          /* ZPRM ARRAY ENTRY ACCUMULATOR      */  00490000
*  DEACT ZPRMLINE;                                                      00490100
*  DCL ZNDX CHAR;              /* UNIQUE LIST STRUCTURE NAME        */  00490200
*  DEACT ZNDX;                                                          00490300
*  ZNDX=MACINDEX;              /* MACINDEX                          */  00490400
*  DCL XVERSION CHAR;                                                   00490500
*  DEACT XVERSION;                                                      00490600
*/*PL.L02 ?IWM4SRSC PARAMETER LIST-----------------------------------*/ 00490700
*  IF XMF^='L'                                                          00490800
*    THEN                                                               00490900
*      DO;                                                              00491000
*/*PL.L03 ?IWM4SRSC PARAMETER LIST-----------------------------------*/ 00491100
*        IF XMF='S'                                                     00491200
*          THEN                                                         00491300
*            XMFCTRL='#ZPLIST';                                         00491400
*/*PL.L04 ?IWM4SRSC PARAMETER LIST-----------------------------------*/ 00491500
*        ZPRMLINE='DCL 1 #Z'!!ZNDX!!' DEF('!!                           00491600
*                 XMFCTRL!!'),'!!                                       00491700
*                 ' /* ?IWM4SRSC PARM LIST*/';                          00491800
*/*PL.L05  XVERSION FIXED(8) INPUT-----------------------------------*/ 00491900
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00492000
*                 '_XVERSION FIXED(8), '!!                              00492100
*                 '/* INPUT XVERSION*/';                                00492200
*/*PL.L08  XOPTIONS BIT(8) FIELD_LABEL-------------------------------*/ 00492300
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00492400
*                 '_XOPTIONS BIT(8), '!!                                00492500
*                 '/* FIELD_LABEL */';                                  00492600
*/*PL.L05  XPLISTLEN FIXED(16) BDY(BYTE) INPUT-----------------------*/ 00492700
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00492800
*                 '_XPLISTLEN FIXED(16) BDY(BYTE), '!!                  00492900
*                 '/* INPUT XPLISTLEN*/';                               00493000
*/*PL.L08  XWEIGHT FIXED(31) OUTPUT----------------------------------*/ 00493100
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00493200
*                 '_XWEIGHT FIXED(31), '!!                              00493300
*                 '/* '!!ZXWEIGHT!!                                     00493400
*                 ' XWEIGHT */';                                        00493500
*/*PL.L08  XSTOKEN BIT(64) INPUT-------------------------------------*/ 00493600
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00493700
*                 '_XSTOKEN BIT(64), '!!                                00493800
*                 '/* '!!ZXSTOKEN!!                                     00493900
*                 ' XSTOKEN */';                                        00494000
*/*PL.L08  XABNORM_COUNT FIXED(31) OUTPUT----------------------------*/ 00494100
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00494200
*                 '_XABNORM_COUNT FIXED(31), '!!                        00494300
*                 '/* '!!ZXABNORM_COUNT!!                               00494400
*                 ' XABNORM_COUNT */';                                  00494500
*/*PL.L08  XHEALTH FIXED(31) OUTPUT----------------------------------*/ 00494600
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00494700
*                 '_XHEALTH FIXED(31), '!!                              00494800
*                 '/* '!!ZXHEALTH!!                                     00494900
*                 ' XHEALTH */';                                        00495000
*/*PL.L08  XRSV0018 CHAR(24) RESERVED--------------------------------*/ 00495100
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00495200
*                 '_XRSV0018 CHAR(24), '!!                              00495300
*                 '/* RESERVED */';                                     00495400
*/*PL.LPVER03 -------------------------------------------------------*/ 00495500
*  IF XPLISTVER>=2                                                      00495600
*    THEN                                                               00495700
*      DO;                                                              00495800
*/*PL.L08  XCPUWEIGHT FIXED(31) OUTPUT-------------------------------*/ 00495900
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00496000
*                 '_XCPUWEIGHT FIXED(31), '!!                           00496100
*                 '/* '!!ZXCPUWEIGHT!!                                  00496200
*                 ' XCPUWEIGHT */';                                     00496300
*/*PL.LPVER04 -------------------------------------------------------*/ 00496400
*      END;                                                             00496500
*/*PL.LPVER03 -------------------------------------------------------*/ 00496600
*  IF XPLISTVER>=2                                                      00496700
*    THEN                                                               00496800
*      DO;                                                              00496900
*/*PL.L08  XZAAPWEIGHT FIXED(31) OUTPUT------------------------------*/ 00497000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00497100
*                 '_XZAAPWEIGHT FIXED(31), '!!                          00497200
*                 '/* '!!ZXZAAPWEIGHT!!                                 00497300
*                 ' XZAAPWEIGHT */';                                    00497400
*/*PL.LPVER04 -------------------------------------------------------*/ 00497500
*      END;                                                             00497600
*/*PL.LPVER03 -------------------------------------------------------*/ 00497700
*  IF XPLISTVER>=2                                                      00497800
*    THEN                                                               00497900
*      DO;                                                              00498000
*/*PL.L08  XZIIPWEIGHT FIXED(31) OUTPUT------------------------------*/ 00498100
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00498200
*                 '_XZIIPWEIGHT FIXED(31), '!!                          00498300
*                 '/* '!!ZXZIIPWEIGHT!!                                 00498400
*                 ' XZIIPWEIGHT */';                                    00498500
*/*PL.LPVER04 -------------------------------------------------------*/ 00498600
*      END;                                                             00498700
*/*PL.LPVER03 -------------------------------------------------------*/ 00498800
*  IF XPLISTVER>=2                                                      00498900
*    THEN                                                               00499000
*      DO;                                                              00499100
*/*PL.L08  XCPUPROPORTION FIXED(31) OUTPUT---------------------------*/ 00499200
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00499300
*                 '_XCPUPROPORTION FIXED(31), '!!                       00499400
*                 '/* '!!ZXCPUPROPORTION!!                              00499500
*                 ' XCPUPROPORTION */';                                 00499600
*/*PL.LPVER04 -------------------------------------------------------*/ 00499700
*      END;                                                             00499800
*/*PL.LPVER03 -------------------------------------------------------*/ 00499900
*  IF XPLISTVER>=2                                                      00500000
*    THEN                                                               00500100
*      DO;                                                              00500200
*/*PL.L08  XZAAPPROPORTION FIXED(31) OUTPUT--------------------------*/ 00500300
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00500400
*                 '_XZAAPPROPORTION FIXED(31), '!!                      00500500
*                 '/* '!!ZXZAAPPROPORTION!!                             00500600
*                 ' XZAAPPROPORTION */';                                00500700
*/*PL.LPVER04 -------------------------------------------------------*/ 00500800
*      END;                                                             00500900
*/*PL.LPVER03 -------------------------------------------------------*/ 00501000
*  IF XPLISTVER>=2                                                      00501100
*    THEN                                                               00501200
*      DO;                                                              00501300
*/*PL.L08  XZIIPPROPORTION FIXED(31) OUTPUT--------------------------*/ 00501400
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00501500
*                 '_XZIIPPROPORTION FIXED(31), '!!                      00501600
*                 '/* '!!ZXZIIPPROPORTION!!                             00501700
*                 ' XZIIPPROPORTION */';                                00501800
*/*PL.LPVER04 -------------------------------------------------------*/ 00501900
*      END;                                                             00502000
*/*PL.LPVER03 -------------------------------------------------------*/ 00502100
*  IF XPLISTVER>=3                                                      00502200
*    THEN                                                               00502300
*      DO;                                                              00502400
*/*PL.L08  XMAXSRVUNITS FIXED(31) OUTPUT-----------------------------*/ 00502500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00502600
*                 '_XMAXSRVUNITS FIXED(31), '!!                         00502700
*                 '/* '!!ZXMAXSRVUNITS!!                                00502800
*                 ' XMAXSRVUNITS */';                                   00502900
*/*PL.LPVER04 -------------------------------------------------------*/ 00503000
*      END;                                                             00503100
*/*PL.LPVER03 -------------------------------------------------------*/ 00503200
*  IF XPLISTVER>=4                                                      00503300
*    THEN                                                               00503400
*      DO;                                                              00503500
*/*PL.L08  XCOST_ZAAP_ON_CP FIXED(31) INPUT--------------------------*/ 00503600
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00503700
*                 '_XCOST_ZAAP_ON_CP FIXED(31), '!!                     00503800
*                 '/* '!!ZXCOST_ZAAP_ON_CP!!                            00503900
*                 ' XCOST_ZAAP_ON_CP */';                               00504000
*/*PL.LPVER04 -------------------------------------------------------*/ 00504100
*      END;                                                             00504200
*/*PL.LPVER03 -------------------------------------------------------*/ 00504300
*  IF XPLISTVER>=4                                                      00504400
*    THEN                                                               00504500
*      DO;                                                              00504600
*/*PL.L08  XCOST_ZIIP_ON_CP FIXED(31) INPUT--------------------------*/ 00504700
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00504800
*                 '_XCOST_ZIIP_ON_CP FIXED(31), '!!                     00504900
*                 '/* '!!ZXCOST_ZIIP_ON_CP!!                            00505000
*                 ' XCOST_ZIIP_ON_CP */';                               00505100
*/*PL.LPVER04 -------------------------------------------------------*/ 00505200
*      END;                                                             00505300
*/*PL.LPVER03 -------------------------------------------------------*/ 00505400
*  IF XPLISTVER>=4                                                      00505500
*    THEN                                                               00505600
*      DO;                                                              00505700
*/*PL.L08  XIL_WEIGHTING FIXED(31) INPUT-----------------------------*/ 00505800
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00505900
*                 '_XIL_WEIGHTING FIXED(31), '!!                        00506000
*                 '/* '!!ZXIL_WEIGHTING!!                               00506100
*                 ' XIL_WEIGHTING */';                                  00506200
*/*PL.LPVER04 -------------------------------------------------------*/ 00506300
*      END;                                                             00506400
*/*PL.LPVER03 -------------------------------------------------------*/ 00506500
*  IF XPLISTVER>=4                                                      00506600
*    THEN                                                               00506700
*      DO;                                                              00506800
*/*PL.L08  XMAXEQUIVUNITS FIXED(31) OUTPUT---------------------------*/ 00506900
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00507000
*                 '_XMAXEQUIVUNITS FIXED(31), '!!                       00507100
*                 '/* '!!ZXMAXEQUIVUNITS!!                              00507200
*                 ' XMAXEQUIVUNITS */';                                 00507300
*/*PL.LPVER04 -------------------------------------------------------*/ 00507400
*      END;                                                             00507500
*/*PL.LPVER03 -------------------------------------------------------*/ 00507600
*  IF XPLISTVER>=4                                                      00507700
*    THEN                                                               00507800
*      DO;                                                              00507900
*/*PL.L09  XEQUICPU_OPTIONS BIT(8) FIELD_LABEL-----------------------*/ 00508000
*        ZPRMNUM=ZPRMNUM+1;                                             00508100
*        ZPRM(ZPRMNUM)=ZPRMLINE!!' 2 #Z'!!ZNDX!!                        00508200
*            '_XEQUICPU_OPTIONS BIT(8), '!!                             00508300
*            '/* FIELD_LABEL */';                                       00508400
*        ZPRMLINE='';                                                   00508500
*/*PL.LPVER04 -------------------------------------------------------*/ 00508600
*      END;                                                             00508700
*/*PL.L11 CONSTANT TO ENSURE THAT LIST FORM IS LONG ENOUGH ----------*/ 00508800
*        ZPRMNUM=ZPRMNUM+1;                                             00508900
*        ZPRM(ZPRMNUM)=ZPRMLINE!!' 2 * CHAR(0);';                       00509000
*        IF XPLISTVER^=0                                                00509100
*           & XMF^='S'                                                  00509200
*          THEN                                                         00509300
*            DO;                                                        00509400
*              ZPRMNUM=ZPRMNUM+1;                                       00509500
*              ZPRM(ZPRMNUM)=                                           00509600
*               'DCL #Z'!!ZNDX!!'_LENCHECK FIXED(32) CONSTANT('!!       00509700
*               'LENGTH('!!XMFCTRL!!')-LENGTH(#Z'!!ZNDX!!'));'!!        00509800
*               '/* CONSTANT TO ENSURE THAT THE LIST FORM'!!            00509900
*               ' IS LONG ENOUGH */';                                   00510000
*            END;                                                       00510100
*/*PL.L12 PARAMETER LIST SIZE----------------------------------------*/ 00510200
*        ZPLLEN=48;                                                     00510300
*        IF XPLISTVER>=2                                                00510400
*          THEN                                                         00510500
*            ZPLLEN=72;                                                 00510600
*        IF XPLISTVER>=3                                                00510700
*          THEN                                                         00510800
*            ZPLLEN=76;                                                 00510900
*        IF XPLISTVER>=4                                                00511000
*          THEN                                                         00511100
*            ZPLLEN=93;                                                 00511200
*        IF ZPRMMAX<ZPLLEN                                              00511300
*           & XMF^='E'                                                  00511400
*          THEN                                                         00511500
*            ZPRMMAX=ZPLLEN;                                            00511600
*/*PL.L13 -----------------------------------------------------------*/ 00511700
*      END;                                                             00511800
*/*PI.L01 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00511900
*  IF XMF^='L'                                                          00512000
*    THEN                                                               00512100
*      DO;                                                              00512200
*        ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);               00512300
*/*PI.L03 CLEAR PARAMETER LIST --------------------------------------*/ 00512400
*            ANS('#Z'!!ZNDX!!'=''''B;'!!                                00512500
*                '/* CLEAR PARAMETER AREA */')                          00512600
*                NORESCAN COL(MACLMAR);                                 00512700
*/*PI.L05A XVERSION FIXED(8)-----------------------------------------*/ 00512800
*        IF XPLISTVER^=0                                                00512900
*          THEN                                                         00513000
*            ANS('#Z'!!ZNDX!!'_XVERSION='!!CHAR(XPLISTVER)!!'; '!!      00513100
*                '/* XVERSION FIXED(8) */')                             00513200
*                NORESCAN COL(MACLMAR);                                 00513300
*/*PI.L05C XPLISTLEN FIXED(16)---------------------------------------*/ 00513400
*        ANS('#Z'!!ZNDX!!'_XPLISTLEN=LENGTH(#Z'!!ZNDX!!');'!!           00513500
*            '/* XPLISTLEN FIXED(16) */')                               00513600
*            NORESCAN COL(MACLMAR);                                     00513700
*/*PI.L19 XSTOKEN NAME BIT(64)---------------------------------------*/ 00513800
*        IF ZXSTOKEN='INPUT' !                                          00513900
*           ZXSTOKEN='INOUT'                                            00514000
*          THEN                                                         00514100
*            IF (XSTOKEN(1:1)^='0' &                                    00514200
*               XSTOKEN(1:1)^='1')                                      00514300
*              THEN                                                     00514400
*                ANS('#Z'!!ZNDX!!'_XSTOKEN='!!                          00514500
*                    XSTOKEN!!';'!!                                     00514600
*                    '/* XSTOKEN BIT(64) */')                           00514700
*                    NORESCAN COL(MACLMAR);                             00514800
*              ELSE                                                     00514900
*                ANS('#Z'!!ZNDX!!'_XSTOKEN='!!                          00515000
*                    ''''!!XSTOKEN!!'''B;'!!                            00515100
*                    '/* XSTOKEN BIT(64) */')                           00515200
*                    NORESCAN COL(MACLMAR);                             00515300
*/*PI.LPVER01 -------------------------------------------------------*/ 00515400
*  IF XPLISTVER>=4                                                      00515500
*    THEN                                                               00515600
*      DO;                                                              00515700
*/*PI.L17 XCOST_ZAAP_ON_CP FIXED(31)---------------------------------*/ 00515800
*        IF ZXCOST_ZAAP_ON_CP='INPUT' !                                 00515900
*           ZXCOST_ZAAP_ON_CP='INOUT'                                   00516000
*          THEN                                                         00516100
*            ANS('#Z'!!ZNDX!!'_XCOST_ZAAP_ON_CP='!!                     00516200
*                XCOST_ZAAP_ON_CP!!';'!!                                00516300
*                '/* XCOST_ZAAP_ON_CP FIXED(31) */')                    00516400
*                NORESCAN COL(MACLMAR);                                 00516500
*/*PI.LPVER02 -------------------------------------------------------*/ 00516600
*      END;                                                             00516700
*/*PI.LPVER01 -------------------------------------------------------*/ 00516800
*  IF XPLISTVER>=4                                                      00516900
*    THEN                                                               00517000
*      DO;                                                              00517100
*/*PI.L17 XCOST_ZIIP_ON_CP FIXED(31)---------------------------------*/ 00517200
*        IF ZXCOST_ZIIP_ON_CP='INPUT' !                                 00517300
*           ZXCOST_ZIIP_ON_CP='INOUT'                                   00517400
*          THEN                                                         00517500
*            ANS('#Z'!!ZNDX!!'_XCOST_ZIIP_ON_CP='!!                     00517600
*                XCOST_ZIIP_ON_CP!!';'!!                                00517700
*                '/* XCOST_ZIIP_ON_CP FIXED(31) */')                    00517800
*                NORESCAN COL(MACLMAR);                                 00517900
*/*PI.LPVER02 -------------------------------------------------------*/ 00518000
*      END;                                                             00518100
*/*PI.LPVER01 -------------------------------------------------------*/ 00518200
*  IF XPLISTVER>=4                                                      00518300
*    THEN                                                               00518400
*      DO;                                                              00518500
*/*PI.L17 XIL_WEIGHTING FIXED(31)------------------------------------*/ 00518600
*        IF ZXIL_WEIGHTING='INPUT' !                                    00518700
*           ZXIL_WEIGHTING='INOUT'                                      00518800
*          THEN                                                         00518900
*            IF TRANSLATE(XIL_WEIGHTING)                                00519000
*                    ^='0'                                              00519100
*              THEN                                                     00519200
*                ANS('#Z'!!ZNDX!!'_XIL_WEIGHTING='!!                    00519300
*                    XIL_WEIGHTING!!';'!!                               00519400
*                    '/* XIL_WEIGHTING FIXED(31) */')                   00519500
*                    NORESCAN COL(MACLMAR);                             00519600
*/*PI.LPVER02 -------------------------------------------------------*/ 00519700
*      END;                                                             00519800
*/*PI.LPVER01 -------------------------------------------------------*/ 00519900
*  IF XPLISTVER>=4                                                      00520000
*    THEN                                                               00520100
*      DO;                                                              00520200
*/*PI.L06 XEQUICPU_OPTIONS BIT(8)------------------------------------*/ 00520300
*        ZW='';                                                         00520400
*        ZMS='';                                                        00520500
*/*PI.LPVER02 -------------------------------------------------------*/ 00520600
*      END;                                                             00520700
*/*PI.LPVER01 -------------------------------------------------------*/ 00520800
*  IF XPLISTVER>=4                                                      00520900
*    THEN                                                               00521000
*      DO;                                                              00521100
*/*PI.L07 XEQUICPU_OPTIONS BIT(8) 1XXXXXXX---------------------------*/ 00521200
*        IF XMETHOD='PROPORTIONAL'                                      00521300
*          THEN                                                         00521400
*            ZW=ZW!!'1';                                                00521500
*          ELSE                                                         00521600
*            ZW=ZW!!'0';                                                00521700
*/*PI.LPVER02 -------------------------------------------------------*/ 00521800
*      END;                                                             00521900
*/*PI.LPVER01 -------------------------------------------------------*/ 00522000
*  IF XPLISTVER>=4                                                      00522100
*    THEN                                                               00522200
*      DO;                                                              00522300
*/*PI.L07 XEQUICPU_OPTIONS BIT(8) X1XXXXXX---------------------------*/ 00522400
*        IF XMETHOD='EQUICPU'                                           00522500
*          THEN                                                         00522600
*            ZW=ZW!!'1000000';                                          00522700
*          ELSE                                                         00522800
*            ZW=ZW!!'0000000';                                          00522900
*/*PI.L09 XEQUICPU_OPTIONS BIT(8)------------------------------------*/ 00523000
*        IF INDEX(ZW,'1')^=0                                            00523100
*          THEN                                                         00523200
*            ANS('#Z'!!ZNDX!!'_XEQUICPU_OPTIONS='!!                     00523300
*                '#Z'!!ZNDX!!'_XEQUICPU_OPTIONS ! '!!                   00523400
*                ''''!!ZW!!'''B; '!!                                    00523500
*                '/* BIT(8) */')                                        00523600
*                NORESCAN COL(MACLMAR);                                 00523700
*/*PI.LPVER02 -------------------------------------------------------*/ 00523800
*      END;                                                             00523900
*/*PI.L31 INVOKE FUNCTION--------------------------------------------*/ 00524000
*              IF NUMBER(RSNCODE)>0                                     00524100
*                THEN                                                   00524200
*                  ANS('RFY GPR00F RSTD;') NORESCAN COL(MACLMAR);       00524300
*              IF NUMBER(RETCODE)>0                                     00524400
*                THEN                                                   00524500
*                  ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);       00524600
*              ANS('RFY GPR01P RSTD;') NORESCAN COL(MACLMAR);           00524700
*                    IF SYSAM64 = 'YES' THEN                            00524800
*              ANS('G64R01P=ADDR(#Z'!!ZNDX!!');'!!                      00524900
*                  '/* PARAMETER LIST */')                              00525000
*                  NORESCAN COL(MACLMAR);                               00525100
*                    ELSE                                               00525200
*              ANS('GPR01P=ADDR(#Z'!!ZNDX!!');'!!                       00525300
*                  '/* PARAMETER LIST */')                              00525400
*                  NORESCAN COL(MACLMAR);                               00525500
*              IF SYSASCE^='P'                                          00525600
*                THEN                                                   00525700
*                  ANS('SAR(GPR01P,ALET(#Z'!!ZNDX!!'));'!!              00525800
*                      '/* PARAMETER LIST AR */')                       00525900
*                      NORESCAN COL(MACLMAR);                           00526000
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00526100
       ANS('IF ^CVTH7720 THEN /* not supported prior to HBB7720 */')    00526200
          SKIP COL(5);                                                  00526300
       ANS('DO;             ') SKIP COL(5);                             00526400
       ANS('RFY (GPR00F,GPR15F) RSTD;') NORESCAN COL(MACLMAR);          00526500
       ANS('GPR00F=IwmRsnCodeBadVersion; /* Set reason code */')        00526600
          SKIP COL(7);                                                  00526700
       ANS('GPR15F=IwmRetCodeInvocError; /*Set error return code */')   00526800
          SKIP COL(7);                                                  00526900
       ANS('RFY (GPR00F,GPR15F) UNRSTD;') NORESCAN COL(MACLMAR);        00527000
       ANS('END; /* End for bad version  */') SKIP COL(5);              00527100
       ANS('ELSE /* Version is ok        */') SKIP COL(5);              00527200
       ANS('DO;             ') SKIP COL(5);                             00527300
         ANS('PC(XM@(96)!116);') SKIP COL(5);                           00527400
       ANS('END; /* End for HBB7730 present  */') SKIP COL(5);          00527500
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00527600
*              ANS('RFY GPR01P UNRSTD;') NORESCAN COL(MACLMAR);         00527700
*/*PO.L03 XWEIGHT FIXED(31)------------------------------------------*/ 00527800
*              IF ZXWEIGHT='OUTPUT' !                                   00527900
*                 ZXWEIGHT='INOUT'                                      00528000
*                THEN                                                   00528100
*                  ANS(XWEIGHT!!                                        00528200
*                      '=#Z'!!ZNDX!!'_XWEIGHT;'!!                       00528300
*                      '/* XWEIGHT FIXED(31) */')                       00528400
*                      NORESCAN COL(MACLMAR);                           00528500
*/*PO.L03 XABNORM_COUNT FIXED(31)------------------------------------*/ 00528600
*              IF ZXABNORM_COUNT='OUTPUT' !                             00528700
*                 ZXABNORM_COUNT='INOUT'                                00528800
*                THEN                                                   00528900
*                  ANS(XABNORM_COUNT!!                                  00529000
*                      '=#Z'!!ZNDX!!'_XABNORM_COUNT;'!!                 00529100
*                      '/* XABNORM_COUNT FIXED(31) */')                 00529200
*                      NORESCAN COL(MACLMAR);                           00529300
*/*PO.L03 XHEALTH FIXED(31)------------------------------------------*/ 00529400
*              IF ZXHEALTH='OUTPUT' !                                   00529500
*                 ZXHEALTH='INOUT'                                      00529600
*                THEN                                                   00529700
*                  ANS(XHEALTH!!                                        00529800
*                      '=#Z'!!ZNDX!!'_XHEALTH;'!!                       00529900
*                      '/* XHEALTH FIXED(31) */')                       00530000
*                      NORESCAN COL(MACLMAR);                           00530100
*/*PO.LPVER01 -------------------------------------------------------*/ 00530200
*  IF XPLISTVER >= 2                                                    00530300
*    THEN                                                               00530400
*      DO;                                                              00530500
*/*PO.L03 XCPUWEIGHT FIXED(31)---------------------------------------*/ 00530600
*              IF ZXCPUWEIGHT='OUTPUT' !                                00530700
*                 ZXCPUWEIGHT='INOUT'                                   00530800
*                THEN                                                   00530900
*                  ANS(XCPUWEIGHT!!                                     00531000
*                      '=#Z'!!ZNDX!!'_XCPUWEIGHT;'!!                    00531100
*                      '/* XCPUWEIGHT FIXED(31) */')                    00531200
*                      NORESCAN COL(MACLMAR);                           00531300
*/*PO.LPVER02 -------------------------------------------------------*/ 00531400
*      END;                                                             00531500
*/*PO.LPVER01 -------------------------------------------------------*/ 00531600
*  IF XPLISTVER >= 2                                                    00531700
*    THEN                                                               00531800
*      DO;                                                              00531900
*/*PO.L03 XZAAPWEIGHT FIXED(31)--------------------------------------*/ 00532000
*              IF ZXZAAPWEIGHT='OUTPUT' !                               00532100
*                 ZXZAAPWEIGHT='INOUT'                                  00532200
*                THEN                                                   00532300
*                  ANS(XZAAPWEIGHT!!                                    00532400
*                      '=#Z'!!ZNDX!!'_XZAAPWEIGHT;'!!                   00532500
*                      '/* XZAAPWEIGHT FIXED(31) */')                   00532600
*                      NORESCAN COL(MACLMAR);                           00532700
*/*PO.LPVER02 -------------------------------------------------------*/ 00532800
*      END;                                                             00532900
*/*PO.LPVER01 -------------------------------------------------------*/ 00533000
*  IF XPLISTVER >= 2                                                    00533100
*    THEN                                                               00533200
*      DO;                                                              00533300
*/*PO.L03 XZIIPWEIGHT FIXED(31)--------------------------------------*/ 00533400
*              IF ZXZIIPWEIGHT='OUTPUT' !                               00533500
*                 ZXZIIPWEIGHT='INOUT'                                  00533600
*                THEN                                                   00533700
*                  ANS(XZIIPWEIGHT!!                                    00533800
*                      '=#Z'!!ZNDX!!'_XZIIPWEIGHT;'!!                   00533900
*                      '/* XZIIPWEIGHT FIXED(31) */')                   00534000
*                      NORESCAN COL(MACLMAR);                           00534100
*/*PO.LPVER02 -------------------------------------------------------*/ 00534200
*      END;                                                             00534300
*/*PO.LPVER01 -------------------------------------------------------*/ 00534400
*  IF XPLISTVER >= 2                                                    00534500
*    THEN                                                               00534600
*      DO;                                                              00534700
*/*PO.L03 XCPUPROPORTION FIXED(31)-----------------------------------*/ 00534800
*              IF ZXCPUPROPORTION='OUTPUT' !                            00534900
*                 ZXCPUPROPORTION='INOUT'                               00535000
*                THEN                                                   00535100
*                  ANS(XCPUPROPORTION!!                                 00535200
*                      '=#Z'!!ZNDX!!'_XCPUPROPORTION;'!!                00535300
*                      '/* XCPUPROPORTION FIXED(31) */')                00535400
*                      NORESCAN COL(MACLMAR);                           00535500
*/*PO.LPVER02 -------------------------------------------------------*/ 00535600
*      END;                                                             00535700
*/*PO.LPVER01 -------------------------------------------------------*/ 00535800
*  IF XPLISTVER >= 2                                                    00535900
*    THEN                                                               00536000
*      DO;                                                              00536100
*/*PO.L03 XZAAPPROPORTION FIXED(31)----------------------------------*/ 00536200
*              IF ZXZAAPPROPORTION='OUTPUT' !                           00536300
*                 ZXZAAPPROPORTION='INOUT'                              00536400
*                THEN                                                   00536500
*                  ANS(XZAAPPROPORTION!!                                00536600
*                      '=#Z'!!ZNDX!!'_XZAAPPROPORTION;'!!               00536700
*                      '/* XZAAPPROPORTION FIXED(31) */')               00536800
*                      NORESCAN COL(MACLMAR);                           00536900
*/*PO.LPVER02 -------------------------------------------------------*/ 00537000
*      END;                                                             00537100
*/*PO.LPVER01 -------------------------------------------------------*/ 00537200
*  IF XPLISTVER >= 2                                                    00537300
*    THEN                                                               00537400
*      DO;                                                              00537500
*/*PO.L03 XZIIPPROPORTION FIXED(31)----------------------------------*/ 00537600
*              IF ZXZIIPPROPORTION='OUTPUT' !                           00537700
*                 ZXZIIPPROPORTION='INOUT'                              00537800
*                THEN                                                   00537900
*                  ANS(XZIIPPROPORTION!!                                00538000
*                      '=#Z'!!ZNDX!!'_XZIIPPROPORTION;'!!               00538100
*                      '/* XZIIPPROPORTION FIXED(31) */')               00538200
*                      NORESCAN COL(MACLMAR);                           00538300
*/*PO.LPVER02 -------------------------------------------------------*/ 00538400
*      END;                                                             00538500
*/*PO.LPVER01 -------------------------------------------------------*/ 00538600
*  IF XPLISTVER >= 3                                                    00538700
*    THEN                                                               00538800
*      DO;                                                              00538900
*/*PO.L03 XMAXSRVUNITS FIXED(31)-------------------------------------*/ 00539000
*              IF ZXMAXSRVUNITS='OUTPUT' !                              00539100
*                 ZXMAXSRVUNITS='INOUT'                                 00539200
*                THEN                                                   00539300
*                  ANS(XMAXSRVUNITS!!                                   00539400
*                      '=#Z'!!ZNDX!!'_XMAXSRVUNITS;'!!                  00539500
*                      '/* XMAXSRVUNITS FIXED(31) */')                  00539600
*                      NORESCAN COL(MACLMAR);                           00539700
*/*PO.LPVER02 -------------------------------------------------------*/ 00539800
*      END;                                                             00539900
*/*PO.LPVER01 -------------------------------------------------------*/ 00540000
*  IF XPLISTVER >= 4                                                    00540100
*    THEN                                                               00540200
*      DO;                                                              00540300
*/*PO.L03 XMAXEQUIVUNITS FIXED(31)-----------------------------------*/ 00540400
*              IF ZXMAXEQUIVUNITS='OUTPUT' !                            00540500
*                 ZXMAXEQUIVUNITS='INOUT'                               00540600
*                THEN                                                   00540700
*                  ANS(XMAXEQUIVUNITS!!                                 00540800
*                      '=#Z'!!ZNDX!!'_XMAXEQUIVUNITS;'!!                00540900
*                      '/* XMAXEQUIVUNITS FIXED(31) */')                00541000
*                      NORESCAN COL(MACLMAR);                           00541100
*/*PO.LPVER02 -------------------------------------------------------*/ 00541200
*      END;                                                             00541300
*/*PO.L08 XRETCODE RETURN CODE---------------------------------------*/ 00541400
*              IF NUMBER(RETCODE)>0                                     00541500
*                THEN                                                   00541600
*                    ANS(XRETCODE!!                                     00541700
*                     '=GPR15F; /* SET RETURN CODE */')                 00541800
*                      NORESCAN COL(MACLMAR);                           00541900
*/*PO.L09 XRSNCODE REASON CODE---------------------------------------*/ 00542000
*              IF NUMBER(RSNCODE)>0                                     00542100
*                THEN                                                   00542200
*                    ANS(XRSNCODE!!                                     00542300
*                     '=GPR00F; /* SET REASON CODE */')                 00542400
*                      NORESCAN COL(MACLMAR);                           00542500
*/*PO.L10 REMOVE REGISTER RESTRICTIONS-------------------------------*/ 00542600
*              IF NUMBER(RSNCODE)>0                                     00542700
*                THEN                                                   00542800
*              ANS('RFY GPR00F UNRSTD;') NORESCAN COL(MACLMAR);         00542900
*              IF NUMBER(RETCODE)>0                                     00543000
*                THEN                                                   00543100
*              ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);         00543200
*/*PO.L12 END OF PARAMETER LIST PROCESSING---------------------------*/ 00543300
*      END;                                                             00543400
*/*PO.L13 IWM4SRSC USAGE INDICATOR-----------------------------------*/ 00543500
*  ZIWM4SRSC='YES';                          /* SET IWM4SRSC USED */    00543600
*/*PO.L15 END OF EXECUTABLE IWM4SRSC-PLISTVER MACRO------------------*/ 00543700
*  IF XMF^='L'                                                          00543800
*    THEN                                                               00543900
*      ANS('END; /* IWM4SRSC-PLISTVER */')                              00544000
*          NORESCAN COL(MACLMAR);                                       00544100
*/*PO.L16 RESTORE PRINT CONTROLS-------------------------------------*/ 00544200
*  ANS(MACCONC!!'LIST POP NOECHO;') NORESCAN COL(MACLMAR);              00544300
*/*PO.L17 END OF IWM4SRSC MACRO--------------------------------------*/ 00544400
*  ANS(MACCONC!!'SPACE;') NORESCAN COL(MACLMAR);                        00544500
*  ANS(' ') NORESCAN COL(MACLMAR);                                      00544600
*/*******************************************************************/  00544700
*/*  PO.L18 END OF CODE TO BE BYPASSED WHEN ZMACRET ^= 0            */  00544800
*/*******************************************************************/  00544900
*      END;                                                             00545000
*/*******************************************************************/  00545100
*/*  MVS ONLY     -CHECK IF AMG PARM LISTS ARE PRESENT              */  00545200
*/*               -ROUND MAX AMG PARM LIST TO DOUBLEWORD MULTIPLES  */  00545300
*/*******************************************************************/  00545400
*  IF ZPRMNUM>0                   /* NUMBER OF AMG PARM LIST ENTRIES*/  00545500
*    THEN                                                               00545600
*      DO;                                                              00545700
*        ZPRMMAX=((ZPRMMAX+7)/8)*8; /* ROUND PARM LIST SIZE UP TO       00545800
*                                      DOUBLEWORD MULTIPLES        */   00545900
*/*******************************************************************/  00546000
*/*  MVS -GENERATE PARM LIST DCL TO OVERLAY ?EPILOG'S ILIST AREA    */  00546100
*/*******************************************************************/  00546200
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00546300
*          THEN                                                         00546400
*            DO;                                                        00546500
*              IF INDEX(EHALIST,',AMG,')=0 /* HAS DECLARE BEEN DONE?*/  00546600
*                THEN                                                   00546700
*                  DO;                                                  00546800
*                    ANS('?EPILOG                                       00546900
*                        STRING(''DCL #ZPLIST DEF(ILIST);'');');        00547000
*                    EHALIST=EHALIST!!',AMG,';                          00547100
*                  END;                                                 00547200
*            END;                                                       00547300
*/*******************************************************************/  00547400
*/*  MVS  -EXTRACT PARM LISTS FROM AMG GLOBAL MACRO ARRAYS          */  00547500
*/*******************************************************************/  00547600
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00547700
*          THEN                                                         00547800
*            DO;                                                        00547900
*              IF ZPRMMAX>EHAMAXLEN                                     00548000
*                THEN                                                   00548100
*                  EHAMAXLEN=ZPRMMAX; /* SET MAX PARM LIST SIZE     */  00548200
*            END;                                                       00548300
*        DO ZI=1 TO ZPRMNUM; /* EXTRACT AMG PARM LISTS               */ 00548400
*          ANS('?EPILOG STRING('''!!ZPRM(ZI)!!''');')                   00548500
*              COL(MACLMAR);                                            00548600
*        END;                                                           00548700
*      END;                                                             00548800
*/*-----------------------------------------------------------------*/  00548900
*/*  MVS  -ENSURE THAT GPRS NEEDED BY AMG MACROS WILL BE PROVIDED   */  00549000
*/*        BY ?EPILOG                                               */  00549100
*/*-----------------------------------------------------------------*/  00549200
*        IF INDEX(EHAREGS,'01P')=0                                      00549300
*          THEN                                                         00549400
*            EHAREGS=EHAREGS!!'01P'; /* GPR01P                      */  00549500
*        IF INDEX(EHAREGS,'00F')=0                                      00549600
*          & NUMBER(RSNCODE)>0                                          00549700
*          THEN                                                         00549800
*            EHAREGS=EHAREGS!!'00F'; /* GPR00F                      */  00549900
*        IF INDEX(EHAREGS,'15F')=0                                      00550000
*          THEN                                                         00550100
*            EHAREGS=EHAREGS!!'15F'; /* GPR15F                      */  00550200
*        IF SYSALVL > 1 THEN                                            00550300
*        DO;                                                            00550400
*          IF INDEX(EHAREGS64,'00F')=0 THEN                             00550500
*            EHAREGS64 = EHAREGS64 !! '00F';                            00550600
*          IF INDEX(EHAREGS64,'01P')=0 THEN                             00550700
*            EHAREGS64 = EHAREGS64 !! '01P';                            00550800
*          IF INDEX(EHAREGS64,'15F')=0 THEN                             00550900
*            EHAREGS64 = EHAREGS64 !! '15F';                            00551000
*        END;                                                           00551100
*  RETURN CODE(ZMACRET);                                                00551200
*%END IWM4SRSC;                                                         00551300
