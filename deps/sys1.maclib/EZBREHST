*%/*                                                                            
         MACRO                                                                  
         EZBREHST &DSECT=YES,&LIST=YES,&TITLE=YES,&HOSTENT=YES,        X        
               &ADRINFO=YES                                                     
         GBLB  &EZBREIRC_INCLUDED                                @L1A           
         GBLC  &EZBREADI_INCLUDED                                @N1A           
         GBLC  &EZBREHST_INCLUDED                                               
         GBLC  &ZCBPRINT                                                        
&EZBREHST_INCLUDED SETC 'YES'                                                   
&EZBREADI_INCLUDED SETC 'YES'                                    @N1A           
         AIF   ('&LIST' EQ 'NONE').P0                                           
         AIF   ('&TITLE' EQ 'NO').P5                                            
 TITLE   'EZBREHST  - TCPIP RESOLVER MAPPINGS                     '             
.P5      ANOP                                                                   
.P0      ANOP                                                                   
         AIF   ('&ZCBPRINT' EQ 'NO').P1                                         
         AIF   ('&LIST' EQ 'YES').P2                                            
.P1      ANOP                                                                   
         PUSH  PRINT                                                            
         PRINT OFF                                                              
.P2      ANOP                                                                   
         AIF   ('&HOSTENT' EQ 'NO').L0002                                       
         AIF   ('&DSECT' EQ 'YES').L0003                                        
         AIF   ('&HOSTENT' NE 'YES').L0002                                      
HOSTENT     DS    0D              Hostent structure              @L1C           
         AGO   .L0004                                                           
.L0003   ANOP                                                                   
HOSTENT     DSECT ,               Hostent structure              @L1C           
.L0004   ANOP                                                                   
H_NAME      DS    A               Official name of host          @L1C           
H_ALIASES   DS    A               Alias list address             @L1C           
H_ADDRTYPE  DS    F               Host address type              @L1C           
H_LENGTH    DS    F               Length of address              @L1C           
H_ADDR_LIST DS    A               List of addresses from         @L1C           
*                                   name server                  @L1A           
HOSTENT_LEN EQU   *-HOSTENT       Length of hostent structure    @L1C           
         AIF   ('&DSECT' EQ 'YES').L0003A                        @N2A           
         AIF   ('&HOSTENT' NE 'YES').L0002                       @N2A           
HOSTENT64   DS    0D              Hostent structure              @N2A           
         AGO   .L0004A                                           @N2A           
.L0003A  ANOP                                                    @N2A           
HOSTENT64   DSECT ,               Hostent structure              @N2A           
.L0004A  ANOP                                                    @N2A           
H64_NAME      DS    AD            Official name of host          @N2A           
H64_ALIASES   DS    AD            Alias list address             @N2A           
H64_ADDRTYPE  DS    F             Host address type              @N2A           
H64_LENGTH    DS    F             Length of address              @N2A           
H64_ADDR_LIST DS    AD            List of addresses from         @N2A           
*                                   name server                  @N2A           
HOSTENT64_LEN EQU   *-HOSTENT64   Length of hostent structure    @N2A           
.L0002   ANOP                                                                   
         AIF   ('&ADRINFO' EQ 'NO').L0005                                       
         AIF   ('&DSECT' EQ 'YES').L0006                                        
         AIF   ('&ADRINFO' NE 'YES').L0005                                      
ADDR_INFO   DS    0D              ADDRINFO STRUCTURE             @N1A           
         AGO   .L0007                                                           
.L0006   ANOP                                                                   
ADDR_INFO   DSECT ,               ADDRINFO STRUCTURE             @N1A           
.L0007   ANOP                                                                   
ai_flags     DS    F              Flags                          @N1A           
ai_family    DS    F              Protocol family                @N1A           
ai_socktype  DS    F              Socket type                    @N1A           
ai_protocol  DS    F              Protocol                       @N1A           
ai_addrlen   DS    F              Length of ai_addr value        @N1A           
             DS    CL4            pad to DWORD boundary          @N2A           
ai_canonname64 DS  0AD            Canonical name                 @E3A           
             DS    CL4            pad                            @N2A           
ai_canonname DS    A              Canonical name                 @N1A           
ai_addr64    DS    0AD            Binary address, sockaddr_in(6) @E3A           
             DS    CL4            pad                            @N2A           
ai_addr      DS    A              Binary address, sockaddr_in(6) @N1A           
ai_next64    DS    0AD            Next addrinfo structure        @E3A           
             DS    CL4            pad                            @N2A           
ai_next      DS    A              Next addrinfo structure        @N1A           
*                                                                @E3D           
addrinfo_len EQU   *-ADDR_INFO    Standard ADDR_INFO length  @N1A@H1C           
*                                                                @H1A           
ai_eflags    DS    F              Extended flags (mapped by                     
*                                   IPv6_ADDR_PREFERENCES_FLAGS) @H1A           
*                                                                @H1A           
ai_extended_len EQU *-ADDR_INFO   Extended ADDR_INFO length      @H1A           
*                                                                @H1A           
ai_extension_len EQU ai_extended_len-addrinfo_len  extension len @H1A           
*                                                                               
**********************************************************************          
* ai_flags mappings                                              @N1A*          
**********************************************************************          
ai_PASSIVE        EQU X'00000001'                                @N1A           
ai_CANONNAMEOK    EQU X'00000002'                                @N1A           
ai_NUMERICHOST    EQU X'00000004'                                @N1A           
ai_NUMERICSERV    EQU X'00000008'                                @N1A           
ai_V4MAPPED       EQU X'00000010'                                @N1A           
ai_ALL            EQU X'00000020'                                @N1A           
ai_ADDRCONFIG     EQU X'00000040'                                @N1A           
ai_EXTFLAGS       EQU X'00000080'                                @H1A           
*                                                                               
ai_ALLFLAGMASK    EQU X'FFFFFF00'                            @N1A@H1C           
*                                                                               
**********************************************************************          
* ai_eflags (EXTFLAGS) mappings are defined by                       *          
* IPv6_ADDR_PREFERENCES_FLAGS in ipnon/BPXYSOCK.macro            @H1A*          
**********************************************************************          
.L0005   ANOP                                                                   
*                                                                               
**********************************************************************          
* ni_flags mappings                                              @N1A*          
**********************************************************************          
NI_NOFQDN         EQU X'00000001'                                @N1A           
NI_NUMERICHOST    EQU X'00000002'                                @N1A           
NI_NAMEREQD       EQU X'00000004'                                @N1A           
NI_NUMERICSERV    EQU X'00000008'                                @N1A           
NI_DGRAM          EQU X'00000010'                                @N1A           
NI_NUMERICSCOPE   EQU X'00000020'                                @Y1A           
*                                                                               
.L000B   ANOP                                                                   
         AIF   ('&HOSTENT' EQ 'YES').L0008                                      
         AIF   ('&ADRINFO' NE 'YES').L0009                                      
.L0008   ANOP                                                                   
         AIF   (&EZBREIRC_INCLUDED).NOERRNO                      @L1A           
&EZBREIRC_INCLUDED SETB  1                                       @L1A           
**********************************************************************          
*                                                                    *          
* Error return codes                                                 *          
*                                                                @L1A*          
**********************************************************************          
HOST_NOT_FOUND     EQU   1                                       @L1A           
TRY_AGAIN          EQU   2                                       @L1A           
NO_RECOVERY        EQU   3                                       @L1A           
NO_DATA            EQU   4                                       @L1A           
NO_ADDRESS         EQU   4                                       @L1A           
EAI_NONAME         EQU   1                                       @N1A           
EAI_AGAIN          EQU   2                                       @N1A           
EAI_FAIL           EQU   3                                       @N1A           
EAI_OVERFLOW       EQU   4                                       @Y1A           
EAI_FAMILY         EQU   5                                       @N1A           
EAI_MEMORY         EQU   6                                       @N1A           
EAI_BADFLAGS       EQU   7                                       @N1A           
EAI_SERVICE        EQU   8                                       @N1A           
EAI_SOCKTYPE       EQU   9                                       @N1A           
EAI_SYSTEM         EQU   10                                      @N1A           
EAI_BADEXTFLAGS    EQU   11                                      @H1A           
SERVICE_NOT_FOUND  EQU   12                                      @N1A           
HOSTENT_NOT_FOUND  EQU   13                                      @N1A           
FILE_NOT_OPEN      EQU   14                                      @N1A           
FILE_NOT_CLOSED    EQU   15                                      @N1A           
**********************************************************************          
*                                                                    *          
* Error reason codes                                                 *          
*                                                                @L2A*          
**********************************************************************          
EZB_RSN_OK                 EQU   0                               @L2A           
EZB_RSN_NotUp              EQU   X'1000'                   4096  @L2A           
EZB_RSN_BadEnv             EQU   X'1001'                   4097  @L2A           
EZB_RSN_NoSpace            EQU   X'1002'                   4098  @L2A           
EZB_RSN_BadValue           EQU   X'1003'                   4099  @L2A           
EZB_RSN_NotFound           EQU   X'1004'                   4100  @L2A           
EZB_RSN_BadAnswer          EQU   X'1005'                   4101  @L2A           
EZB_RSN_BadParm            EQU   X'1006'                   4102  @L2A           
EZB_RSN_BadSrv             EQU   X'1007'                   4103  @L2A           
EZB_RSN_NoStorage          EQU   X'1008'                   4104  @L2A           
EZB_RSN_EintrRcv           EQU   X'1009'                   4105  @L2A           
EZB_RSN_NameIsAddr         EQU   X'100A'                   4106  @L2A           
EZB_RSN_NoOmvsAuth         EQU   X'100B'                   4107  @L2A           
EZB_RSN_NoLatches          EQU   X'100C'                   4108  @L3A           
EZB_RSN_NameLenErr         EQU   X'100D'                   4109  @L3A           
EZB_RSN_NestedAPI          EQU   X'100E'                   4110  @N1A           
EZB_RSN_ServLenErr         EQU   X'100F'                   4111  @N1A           
EZB_RSN_SocketLenErr       EQU   X'1010'                   4112  @N1A           
EZB_RSN_NoData             EQU   X'1011'                   4113  @N1A           
EZB_RSN_ServiceNotFound    EQU   X'1012'                   4114  @N1A           
EZB_RSN_PortNotFound       EQU   X'1013'                   4115  @N1A           
EZB_RSN_NoSocket           EQU   X'1014'                   4116  @N1A           
EZB_RSN_BadAddrinfo        EQU   X'1015'                   4117  @N1A           
EZB_RSN_InvalidSeq         EQU   X'1016'                   4118  @N1A           
EZB_RSN_BadProtocol        EQU   X'1017'                   4119  @N1A           
EZB_RSN_SockLookup         EQU   X'1018'                   4120  @N4A           
EZB_RSN_InvalidHostname    EQU   X'1019'                   4121  @Y1A           
EZB_RSN_ScopeNotPermitted  EQU   X'101A'                   4122  @Y1A           
EZB_RSN_UnresolvedScope    EQU   X'101B'                   4123  @Y1A           
EZB_RSN_HostnameBuffer     EQU   X'101C'                   4124  @Y1A           
EZB_RSN_ServicenameBuffer  EQU   X'101D'                   4125  @Y1A           
EZB_RSN_InvalidScopeValue  EQU   X'101E'                   4126  @Y1A           
EZB_RSN_BadGlobalTcpipData EQU   X'101F'                   4127  @M1A           
.NOERRNO ANOP                                                    @L1A           
.L0009   ANOP                                                                   
         AIF   ('&ZCBPRINT' EQ 'NO').P3                                         
         AIF   ('&LIST' EQ 'YES').P4                                            
.P3      ANOP                                                                   
         POP   PRINT                                                            
.P4      ANOP                                                                   
.P_EXIT  ANOP                                                                   
         MEND                                                                   
**/;                                                                            
*%Dcl EZBREHST_Include Fixed External;                                          
*%If EZBREHST_Include=0 %Then %Do;                                              
*%EZBREHST_Include=1;                                                           
*%Goto EZBREHST_Data;                                                           
*/********************************************************************/         
*/*                                                                  */         
*/* TITLE:              Resolver mappings and Service return codes   */         
*/*                                                                  */         
*/* Descriptive Name:   EZBREHST                                     */         
*/*                                                                  */         
*/* Component Name:     Resolver                                     */         
*/*                                                                  */         
*/* Copyright:  Licensed Materials - Property of IBM                 */         
*/*             5694-A01                                             */         
*/*             Copyright IBM Corp. 2001, 2011.                      */         
*/*                                                                  */         
*/* Status:             CSV1R13                                      */         
*/*                                                                  */         
*/* Function:           Define the Resolver hostent structure,       */         
*/*                     Resolver Addrinfo structure,             @N1A*/         
*/*                     and Resolver service return codes            */         
*/*                                                                  */         
*/* Part Type:          Macro                                        */         
*/*                                                                  */         
*/* System Build Information:                                        */         
*/*   Load Module:      N/A                                          */         
*/*   Dist Library:     'TCPIP.AEZAMAC1'                             */         
*/*   Location:         'SYS1.MACLIB'                                */         
*/*   Alias Name(s):    N/A                                          */         
*/*                                                                  */         
*/* Method of Access:                                                */         
*/*                                                                  */         
*/*   BAL  - DSECTs are produced if DSECT=YES is specified, and are  */         
*/*                 not produced if DSECT=NO is specified.           */         
*/*                                                                  */         
*/*          HOSTENT symbols and HOSTENT64 symbols are produced if   */         
*/*                  HOSTENT=YES is specified, and are not produced  */         
*/*                  HOSTENT=NO is specified.                        */         
*/*          USING on HOSTENT gives addressability to host entry     */         
*/*                symbols for AMODE31 callers.                      */         
*/*          USING on HOSTENT64 gives addressability to host entry   */         
*/*                symbols for AMODE64 callers.                      */         
*/*                                                                  */         
*/*          ADDRINFO symbols are produced if ADDRINFO=YES is        */         
*/*                  specified, and are not produced if              */         
*/*                  ADDRINFO=NO is specified                        */         
*/*          USING on ADDR_INFO gives addressability to              */         
*/*                addrinfo symbols.                                 */         
*/*                                                                  */         
*/*   BAL Listing - Specify LIST=YES to include symbols in listing,  */         
*/*                 and specify LIST=NO to suppress listing symbols. */         
*/*                                                                  */         
*/*   PL/X - Dcl hostent@ ptr(31)                                    */         
*/*          Rfy hostent based(hostent@)                             */         
*/*                                                                  */         
*/*          Dcl hostent64@ ptr(64)                                  */         
*/*          Rfy hostent64 based(hostent64@)                         */         
*/*                                                                  */         
*/*   PL/X Listing - To suppress listing of symbols:                 */         
*/*                                                                  */         
*/*                     @Push Print Noecho                           */         
*/*                     @Print Off Compile Assemble Noecho           */         
*/*                     %Include Syslib(EZBREHST)                    */         
*/*                     @Pop Print Noecho                            */         
*/*                                                                  */         
*/* CHANGE ACTIVITY:                                                 */         
*/*                                                                  */         
*/* Flag Reason   Release  Date   Origin    Description              */         
*/* ---- -------- -------- ------ --------  ------------------------ */         
*/* $L0= D312.22  CSV1R2   000601 JPWAJDA : Created                  */         
*/* $L1= MV22938  D312.22  010209 JPWAJDA : Define return code       */         
*/* $L2= MV22322  D312.22  010115 JPWAJDA : System integrity         */         
*/* $L3= MV23429  D312.22  010501 JPWAJDA : Fix res_init return codes*/         
*/* $N1= D314.11  CSV1R4   010511 GIERLACH: IPv6 Resolver changes    */         
*/* $N2= D314.39  CSV1R4   010802 JPWAJDA : 64 bit virtual support   */         
*/* $N3= MV24388  D314.11  011005 GIERLACH: Text corrections         */         
*/* $N4= MV24143  D314.11  011011 GIERLACH: Add new reason code      */         
*/* $R1= MV30011  D416     040223 JPWAJDA : Fix reason code          */         
*/*                                         descriptions             */         
*/* $Y1= R9SYSSCO CSV1R9   060511 GIERLACH: Scope info support       */         
*/* $E1= D141004  RABASE   070514 JPWAJDA : Fix hostent64 data       */         
*/* $E2= D141011  RABASE   070531 JPWAJDA : Add usage notes to prolog*/         
*/* $E3= RAFINAPT CSV1R10  071116 BKelsey : addr_info 64 bit labels  */         
*/*                                        (F140426,FIN APAR PK37642)*/         
*/* $F1= RBRESCAC CSV1R11  080710 Gierlach: Resolver Caching support */         
*/* $F2= D145039  RBRESCAC 080714 Gierlach: Use hard-coded equates   */         
*/* $H1= RCSTKADR CSV1R12  090430 BKelsey : RFC 5014                 */         
*/* $M1= RDRESNMI CSV1R13  100303 JPWAJDA : NMI Enhancements         */         
*/*                                                                  */         
*/********************************************************************/         
*%EZBREHST_Data:;                                                               
*/********************************************************************/         
*/*                                                                  */         
*/* Host Entry                                                       */         
*/*                                                                  */         
*/********************************************************************/         
*Dcl 1 hostent      Based,             /* Host entry                 */         
*     3 h_name      Ptr(31),           /* Official name of host      */         
*     3 h_aliases   Ptr(31),           /* Alias list address     @L1C*/         
*     3 h_addrtype  Fixed(32),         /* Host address type          */         
*     3 h_length    Fixed(31),         /* Length of address          */         
*     3 h_addr_list Ptr(31);           /* List of addresses from                
*                                         name server                */         
*Dcl 1 hostent64      Based,           /* Host entry             @N2A*/         
*     3 h64_name      Ptr(64),         /* Official name of host  @N2A*/         
*     3 h64_aliases   Ptr(64),         /* Alias list address     @N2A*/         
*     3 h64_addrtype  Fixed(32),       /* Host address type      @N2A*/         
*     3 h64_length    Fixed(31),       /* Length of address      @N2A*/         
*     3 h64_addr_list Ptr(64);         /* List of addresses from                
*                                         name server            @N2A*/         
*Dcl h_name_entry         Char(*) Based(h_name);                                
*Dcl h_aliases_array(*)   Ptr(31) Based(h_aliases);                             
*Dcl h64_aliases_array(*) Ptr(64) Based(h64_aliases);                           
*                                      /*                        @E1C*/         
*Dcl h_aliases_entry      Char(*) Based;                                        
*Dcl h_addr_list_array(*) Ptr(31) Based(h_addr_list);                           
*Dcl h64_addr_list_array(*) Ptr(64) Based(h64_addr_list);                       
*                                      /*                        @E1C*/         
*Dcl h_addr               Ptr(31) Based(Addr(h_addr_list_array(1)));            
*Dcl h64_addr             Ptr(64) Based(Addr(h64_addr_list_array(1)));          
*                                      /*                        @E1C*/         
*                                                                               
*/********************************************************************/         
*/*                                                                  */         
*/* Addrinfo data structure                                      @N1A*/         
*/*                                                                  */         
*/********************************************************************/         
*Dcl 1 Addr_info      Based,                                  /* @N1A*/         
*     2 ai_standard,                   /* Standard ai structure  @H1A*/         
*      3 ai_flags     Bit(32),         /* Flags                  @N1A*/         
*        5 *          Bit(24),         /* Reserved          @N1A @H1C*/         
*        5 ai_EXTFLAGS_bit     Bit(1), /* ai_eflags position     @H1A*/         
*        5 ai_ADDRCONFIG_bit   Bit(1), /* ai_ADDRCONFIG position @N1A*/         
*        5 ai_ALL_bit          Bit(1), /* ai_ALL position        @N1A*/         
*        5 ai_V4MAPPED_bit     Bit(1), /* ai_V4MAPPED position   @N1A*/         
*        5 ai_NUMERICSERV_bit  Bit(1), /* ai_NUMERICSERV spot    @N1A*/         
*        5 ai_NUMERICHOST_bit  Bit(1), /* ai_NUMERICHOST spot    @N1A*/         
*        5 ai_CANONNAMEOK_bit  Bit(1), /* ai_CANONNAMEOK spot    @N1A*/         
*        5 ai_PASSIVE_bit      Bit(1), /* ai_PASSIVE position    @N1A*/         
*      3 ai_family    Fixed(32),       /* Protocol family        @N1A*/         
*      3 ai_socktype  Fixed(32),       /* Socket type            @N1A*/         
*      3 ai_protocol  Fixed(32),       /* Protocol               @N1A*/         
*      3 ai_addrlen   Fixed(32),       /* Length ai_addr value   @N1A*/         
*      3 *            Char(4),         /* Reserved               @N2A*/         
*      3 ai_canonname64 Ptr(64) Bdy(Dword), /* Canonical name                   
*                                                           @N2A @E3C*/         
*        5 *            Ptr,           /* Reserved               @N2A*/         
*        5 ai_canonname Ptr,           /* Canonical name         @N1A*/         
*      3 ai_addr64    Ptr(64) Bdy(Dword), /* Binary address using               
*                                         sockaddr_in(6) struct                 
*                                                           @N2A @E3C*/         
*        5 *            Ptr,           /* Reserved               @N2A*/         
*        5 ai_addr      Ptr,           /* Binary address using                  
*                                         sockaddr_in(6) struct  @N1A*/         
*      3 ai_next64    Ptr(64) Bdy(Dword), /* Next addrinfo struct               
*                                                           @N2A @E3C*/         
*        5 *            Ptr,           /* Reserved               @N2A*/         
*        5 ai_next      Ptr,           /* Next ai struct    @N1A @H1C*/         
*     2 ai_extension,                  /* Addr_info extension    @H1A*/         
*      3 ai_eflags    Bit(32),         /* Extended flags (mapped by             
*                                         IPv6_ADDR_PREFERENCES_FLAGS)          
*                                                                @H1A*/         
*     2 *             Char(0);         /* End of Addr_info struc @H1A*/         
*                                                                               
*Dcl ai_canonname_entry   Char(*) Based(ai_canonname);                          
*Dcl ai_canonname_entry64   Char(*) Based(ai_canonname64); /*    @N2A*/         
*/********************************************************************/         
*/*                                                                  */         
*/* ai_flags mapping constants                                   @N1A*/         
*/*                                                                  */         
*/********************************************************************/         
*Dcl ai_PASSIVE     Bit(32) Constant('00000001'X), /* return address            
*                                      suitable for incoming connect            
*                                                                @N1A*/         
*    ai_CANONNAMEOK Bit(32) Constant('00000002'X), /* return                    
*                                      canonical form of the input              
*                                      nodename                  @N1A*/         
*    ai_NUMERICHOST Bit(32) Constant('00000004'X), /* node name was             
*                                      passed in numeric form    @N1A*/         
*    ai_NUMERICSERV Bit(32) Constant('00000008'X), /* service name was          
*                                      passed in numeric form    @N1A*/         
*    ai_V4MAPPED    Bit(32) Constant('00000010'X), /* IPv4 addresses            
*                                      can be mapped in IPv6 format             
*                                                                @N1A*/         
*    ai_ALL         Bit(32) Constant('00000020'X), /* return IPv6 and           
*                                      mapped IPv4 addresses     @N1A*/         
*    ai_ADDRCONFIG  Bit(32) Constant('00000040'X), /* return IPv6               
*                                      address IFF IPv6 source exists,          
*                                      and return IPv4 address IFF IPv4         
*                                      source exists        @N1A @H1C*/         
*    ai_EXTFLAGS    Bit(32) Constant('00000080'X); /* addr_info has             
*                                      an ai_eflags field        @H1A*/         
*                                                                               
*Dcl ai_ALLFLAGMASK Bit(32) Constant('FFFFFF00'X); /* Mapping for all           
*                                     invalid bit positions @N1A @H1C*/         
*/********************************************************************/         
*/*                                                                  */         
*/* ai_eflags mapping constants (extflags constants) are defined     */         
*/* by IPv6_ADDR_PREFERENCES_FLAGS in ipnon/BPXYSOCK.macro       @H1A*/         
*/*                                                                  */         
*/********************************************************************/         
*                                                                               
*Dcl h_addr_list_entry    Char(*) Based;                      /* @N1A*/         
*                                                                               
*/********************************************************************/         
*/* This mapping is used internally to get information parsed from   */         
*/* the DNS reply into a structure that can easily be copied into a  */         
*/* permanent cache entry. The reason for this intermediate mapping  */         
*/* is to shield the parsing logic from any 64-bit address issues    */         
*/* involving access to the permanent cache entry.               @F1A*/         
*/********************************************************************/         
*DCL 1 CacheDataEntry Based,           /* Temporary cache data mapping          
*                                         for parser logic       @F1A*/         
*       3 CacheTTL     Fixed(31),      /* TTL for the entry      @F1A*/         
*       3 CacheLinkLocalCnt Fixed(8),  /* Count of IPv6 link local              
*                                         addresses for this resource,          
*                                         required to process scope             
*                                         requests properly.     @F1A*/         
*       3 CacheIPv6Cnt Fixed(8),       /* Number of IPv6 addresses              
*                                         in array (equivalent to               
*                                         aiH_DestIPv6Cnt)       @F1A*/         
*       3 CacheIPv4Cnt Fixed(8),       /* Number of IPv4 addresses              
*                                         in array               @F1A*/         
*       3 *            Fixed(8),       /* Spacing                @F1A*/         
*       3 CacheHost    Char(Length(hostent)), /* Local "hostent"                
*                                         structure for use in the              
*                                         non-IPv6 API calls     @F1A*/         
*       3 CacheHostbuf Char(CH_BUFSIZ+1), /* Working buffer to hold             
*                                         aliases and IPv4 addresses            
*                                         (similar to hostbuf)   @F2C*/         
*       3 *            Char(1),        /* Spacing                @F1A*/         
*       3 CacheCanonNameLen Fixed(15), /* Length of Canonical name              
*                                         that was parsed        @F1A*/         
*       3 CacheHostbufFreePtr Ptr(31), /* Pointer into the hostbuf              
*                                         where new information can             
*                                         be stored              @F1A*/         
*       3 CacheAliases(CH_MAXALIASES) Ptr(31), /* Array of pointers             
*                                         into CacheHostbuf for the             
*                                         alias names (equivalent to            
*                                         host_aliases), pointed to             
*                                         by CacheHost.h_aliases @F2C*/         
*       3 CacheIPv4Addrs(CH_MAXADDRS+1) Ptr(31), /* Array of pointers           
*                                         into CacheHostbuf for the             
*                                         IPv4 addrs (equivalent to             
*                                         h_addr_ptrs), pointed to              
*                                         by CacheHost.h_addr_list              
*                                                                @F2C*/         
*       3 CacheIPv6Addrs(CH_MAXADDRS) Char(16); /* Array of IPv6                
*                                         addresses (equivalent to              
*                                         subset of aiH_DestIPEnt)              
*                                                                @F2C*/         
*                                                                               
*DCL CH_BUFSIZ Fixed Constant(512);    /* Buffer size            @F2A*/         
*DCL CH_MAXALIASES Fixed Constant(35); /* Maximum number of alias               
*                                         entries                @F2A*/         
*DCL CH_MAXADDRS Fixed Constant(35);   /* Maximum number of addresses           
*                                         we will return         @F2A*/         
*/********************************************************************/         
*/* ni_flags mappings                                            @N1A*/         
*/********************************************************************/         
*Dcl 1 NI_FLAGS Bit(32)   Based,       /* getnameinfo FLAGS structure*/         
*      3 NI_BYTE0,                     /* Byte 0                 @N1A*/         
*        5 *              Bit(8),                             /* @N1A*/         
*      3 NI_BYTE1,                     /* Byte 1                 @N1A*/         
*        5 *              Bit(8),                             /* @N1A*/         
*      3 NI_BYTE2,                     /* Byte 2                 @N1A*/         
*        5 *              Bit(8),                             /* @N1A*/         
*      3 NI_BYTE3,                     /* Byte 3                 @N1A*/         
*        5 *              Bit(2),                             /* @Y1C*/         
*        5 NI_NUMERICSCOPE Bit(1),     /* Numeric scope returned @Y1A*/         
*        5 NI_DGRAM       Bit(1),      /* Datagram service       @N1A*/         
*        5 NI_NUMERICSERV Bit(1),      /* Numeric service rtnd   @N1A*/         
*        5 NI_NAMEREQD    Bit(1),      /* Host name required     @N1A*/         
*        5 NI_NUMERICHOST Bit(1),      /* Numeric host returned  @N1A*/         
*        5 NI_NOFQDN      Bit(1);      /* Only nodename returned @N1A*/         
*                                                                               
*%Dcl EZBREIRC_Include Fixed External; /*                        @L1A*/         
*%If EZBREIRC_Include=0 %Then %Do;     /*                        @L1A*/         
*%EZBREIRC_Include=1;                  /*                        @L1A*/         
*/********************************************************************/         
*/*                                                                  */         
*/* Error return codes                                               */         
*/*                                                                  */         
*/* Note: These constants are also defined in EZBREIDF.  The two     */         
*/*       macros must be kept in synch with each other.              */         
*/*                                                              @L1A*/         
*/********************************************************************/         
*Dcl HOST_NOT_FOUND    Fixed(32) Constant(1);                                   
*                                      /*                        @L1A*/         
*Dcl TRY_AGAIN         Fixed(32) Constant(2);                                   
*                                      /*                        @L1A*/         
*Dcl NO_RECOVERY       Fixed(32) Constant(3);                                   
*                                      /*                        @L1A*/         
*Dcl NO_DATA           Fixed(32) Constant(4);                                   
*                                      /*                        @L1A*/         
*Dcl NO_ADDRESS        Fixed(32) Constant(4);                                   
*                                      /*                        @L1A*/         
*Dcl EAI_NONAME        Fixed(32) Constant(1);                                   
*                                      /*                        @N1A*/         
*Dcl EAI_AGAIN         Fixed(32) Constant(2);                                   
*                                      /*                        @N1A*/         
*Dcl EAI_FAIL          Fixed(32) Constant(3);                                   
*                                      /*                        @N1A*/         
*Dcl EAI_OVERFLOW      Fixed(32) Constant(4);                                   
*                                      /*                        @Y1A*/         
*Dcl EAI_FAMILY        Fixed(32) Constant(5);                                   
*                                      /*                        @N1A*/         
*Dcl EAI_MEMORY        Fixed(32) Constant(6);                                   
*                                      /*                        @N1A*/         
*Dcl EAI_BADFLAGS      Fixed(32) Constant(7);                                   
*                                      /*                        @N1A*/         
*Dcl EAI_SERVICE       Fixed(32) Constant(8);                                   
*                                      /*                        @N1A*/         
*Dcl EAI_SOCKTYPE      Fixed(32) Constant(9);                                   
*                                      /*                        @N1A*/         
*Dcl EAI_SYSTEM        Fixed(32) Constant(10);                                  
*                                      /*                        @N1A*/         
*Dcl EAI_BADEXTFLAGS   Fixed(32) Constant(11);                                  
*                                      /*                        @H1A*/         
*DCL SERVICE_NOT_FOUND Fixed(32) Constant(12);                                  
*                                      /*                        @N1A*/         
*DCL HOSTENT_NOT_FOUND Fixed(32) Constant(13);                                  
*                                      /*                        @N1A*/         
*DCL FILE_NOT_OPEN     Fixed(32) Constant(14);                                  
*                                      /*                        @N1A*/         
*DCL FILE_NOT_CLOSED   Fixed(32) Constant(15);                                  
*                                      /*                        @N1A*/         
*/********************************************************************/         
*/*                                                                  */         
*/* Error reason codes                                               */         
*/*                                                                  */         
*/* Note: These constants are also defined in EZBREIDF.  The two     */         
*/*       macros must be kept in synch with each other.              */         
*/*                                                                  */         
*/********************************************************************/         
*Dcl EZB_RSN_OK        Fixed(32) Constant(0);           /* 0         */         
*                                      /* Resolver service succeeded            
*                                                                @L2A*/         
*Dcl EZB_RSN_NotUp     Fixed(32) Constant('00001000'X); /* 4096      */         
*                                      /* Resolver service is not               
*                                         available              @L2A*/         
*Dcl EZB_RSN_BadEnv    Fixed(32) Constant('00001001'X); /* 4097      */         
*                                      /* Resolver service does not             
*                                         support SRB mode       @L2A*/         
*Dcl EZB_RSN_NoSpace   Fixed(32) Constant('00001002'X); /* 4098      */         
*                                      /* Resolver service output               
*                                         buffer is too small    @L2A*/         
*Dcl EZB_RSN_BadValue  Fixed(32) Constant('00001003'X); /* 4099      */         
*                                      /* Resolver service input                
*                                         parameter value is not                
*                                         valid                  @L2A*/         
*Dcl EZB_RSN_NotFound  Fixed(32) Constant('00001004'X); /* 4100      */         
*                                      /* Resolver service did not              
*                                         find the specified                    
*                                         host name              @L2A*/         
*Dcl EZB_RSN_BadAnswer Fixed(32) Constant('00001005'X); /* 4101      */         
*                                      /* Resolver service received             
*                                         a negative answer from the            
*                                         nameserver, or did not                
*                                         receive an answer from                
*                                         the nameserver         @R1C*/         
*Dcl EZB_RSN_BadParm   Fixed(32) Constant('00001006'X); /* 4102  @L2A*/         
*                                      /* Resolver service was                  
*                                         unable to access an input             
*                                         or output parameter    @L2A*/         
*Dcl EZB_RSN_BadSrv    Fixed(32) Constant('00001007'X); /* 4103  @L2A*/         
*                                      /* Resolver service requested            
*                                         is not supported       @L2A*/         
*Dcl EZB_RSN_NoStorage Fixed(32) Constant('00001008'X); /* 4104  @L2A*/         
*                                      /* Resolver service was                  
*                                         unable to obtain storage              
*                                                                @L2A*/         
*Dcl EZB_RSN_EintrRcv  Fixed(32) Constant('00001009'X); /* 4105  @L2A*/         
*                                      /* Resolver service was                  
*                                         interrupted            @L2A*/         
*Dcl EZB_RSN_NameIsAddr Fixed(32) Constant('0000100A'X);/* 4106  @L2A*/         
*                                      /* An IP address was passed to           
*                                         GetHostByName          @L2A*/         
*Dcl EZB_RSN_NoOmvsAuth Fixed(32) Constant('0000100B'X);/* 4107  @L2A*/         
*                                      /* Service invoker not                   
*                                         authorized to use USS  @L2A*/         
*Dcl EZB_RSN_NoLatches  Fixed(32) Constant('0000100C'X);/* 4108  @L3A*/         
*                                      /* Unable to obtain GRS                  
*                                         latch set              @L3A*/         
*Dcl EZB_RSN_NameLenErr Fixed(32) Constant('0000100D'X);/* 4109  @L3A*/         
*                                      /* Incorrect name length                 
*                                         passed                 @L3A*/         
*Dcl EZB_RSN_NestedAPI  Fixed(32) Constant('0000100E'X);/* 4110  @N1A*/         
*                                      /* Nested API passed      @N1A*/         
*Dcl EZB_RSN_ServLenErr Fixed(32) Constant('0000100F'X);/* 4111  @N1A*/         
*                                      /* Incorrect serv name length            
*                                         passed                 @N1A*/         
*Dcl EZB_RSN_SocketLenErr Fixed(32) Constant('00001010'X);/* 4112@N1A*/         
*                                      /* Incorrect socket len   @N1A*/         
*Dcl EZB_RSN_NoData  Fixed(32) Constant('00001011'X);/* 4113     @N1A*/         
*                                      /* No_Data error returned @N1A*/         
*Dcl EZB_RSN_ServiceNotFound Fixed(32) Constant('00001012'X);/* 4114 */         
*                                      /* Service not found      @N1A*/         
*Dcl EZB_RSN_PortNotFound Fixed(32) Constant('00001013'X);/* 4115@N1A*/         
*                                      /* Port not found         @N2C*/         
*Dcl EZB_RSN_NoSocket Fixed(32) Constant('00001014'X);/* 4116    @N1A*/         
*                                      /* No socket              @N1A*/         
*Dcl EZB_RSN_BadAddrinfo Fixed(32) Constant('00001015'X);/* 4117 @N1A*/         
*                                      /* Addrinfo returned to                  
*                                         Freeaddrinfo was not on the           
*                                         allocated chain        @N1A*/         
*Dcl EZB_RSN_InvalidSeq Fixed(32) Constant('00001016'X); /* 4118 @N1A*/         
*                                      /* Freeaddrinfo invoked without          
*                                         any addrinfos having been             
*                                         created                @N1A*/         
*Dcl EZB_RSN_BadProtocol Fixed(32) Constant('00001017'X);/* 4119 @N1A*/         
*                                      /* GetServByName invoked with            
*                                         invalid protocol       @N1A*/         
*Dcl EZB_RSN_SockLookup  Fixed(32) Constant('00001018'X);/* 4120 @N4A*/         
*                                      /* Input ai_socktype not allowed         
*                                         with non-null, non-numeric            
*                                         input Service value    @N4A*/         
*Dcl EZB_RSN_InvalidHostname Fixed(32) Constant('00001019'X); /* 4121           
*                                                                @Y1A*/         
*                                      /* Input hostname contained              
*                                         only scope information @Y1A*/         
*Dcl EZB_RSN_ScopeNotPermitted Fixed(32) Constant('0000101A'X); /*              
*                                         4122                   @Y1A*/         
*                                      /* Scope information was passed          
*                                         on an input IPv4 address to           
*                                         GetAddrinfo            @Y1A*/         
*Dcl EZB_RSN_UnresolvedScope Fixed(32) Constant('0000101B'X); /* 4123           
*                                                                @Y1A*/         
*                                      /* GetAddrinfo or GetNameInfo            
*                                         could not resolve the input           
*                                         scope information      @Y1A*/         
*Dcl EZB_RSN_HostnameBuffer Fixed(32) Constant('0000101C'X); /* 4124            
*                                                                @Y1A*/         
*                                      /* The hostname buffer passed            
*                                         on GetNameInfo was not large          
*                                         enough to hold the entire             
*                                         hostname               @Y1A*/         
*Dcl EZB_RSN_ServicenameBuffer Fixed(32) Constant('0000101D'X); /*              
*                                         4125                   @Y1A*/         
*                                      /* The service name buffer               
*                                         passed on GetNameInfo was not         
*                                         large enough to hold the              
*                                         entire service name    @Y1A*/         
*Dcl EZB_RSN_InvalidScopeValue Fixed(32) Constant('0000101E'X); /*              
*                                         4126                   @Y1A*/         
*                                      /* Scope information too long            
*                                         or out of permitted bounds            
*                                         on GetAddrinfo         @Y1A*/         
*Dcl EZB_RSN_BadGlobalTcpipData Fixed(32) Constant('0000101F'X); /*             
*                                         4127                   @M1A*/         
*                                      /* GLOBALTCPIPDATA file                  
*                                         not accessible         @M1A*/         
*%End;                                 /*                        @L1A*/         
*%End;                                                                          
