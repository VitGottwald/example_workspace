*%IEFPPSCN: MACRO KEYS(REQUEST,PPTINFO,PROGRAM,TOKEN,RETCODE,PLISTVER,  00000100
*                 MF);                                                  00000200
*/**** START OF SPECIFICATIONS **************************************** 00000300
*                                                                     * 00000400
*                                                                     * 00000500
*01* MACRO NAME:  IEFPPSCN                              -03/30/06-<0> * 00000600
*                                                                     * 00000700
*                                                                     * 00000800
*01* DESCRIPTIVE NAME:  Program Properties Table scan                 * 00000900
*                                                                     * 00001000
*01* PROPRIETARY STATEMENT:                                           * 00001100
*                                                                     * 00001200
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00001300
*     5694-A01 (C) COPYRIGHT IBM CORP. 1990, 2006                     * 00001400
*                                                                     * 00001500
* STATUS= HBB7730                                                     * 00001600
*                                                                     * 00001700
*                                                                     * 00001800
*                                                                     * 00001900
*01* FUNCTION:                                                        * 00002000
*                                                                     * 00002100
*      The IEFPPSCN macro will provide an interface to retrieve       * 00002200
*      information from the program properties table.  This interface * 00002300
*      is intended to provide a mechanism for the initiator           * 00002400
*      internally to retrieve information about a program and for     * 00002500
*      other products to report on the information in the table.      * 00002600
*                                                                     * 00002700
*01* EXTERNAL CLASSIFICATION:  PI                                     * 00002800
*                                                                     * 00002900
*01* SYNTAX:                                                          * 00003000
*                                                                     * 00003100
*Ýxlabel¨  IEFPPSCN     REQUEST=»RETRIEVE!NEXT!                       * 00003200
*                                ENDº                                 * 00003300
*                     Ý,PPTINFO=»xpptinfo!*º¨                         * 00003400
*                     Ý,PROGRAM=»xprogram!*º¨                         * 00003500
*                     Ý,TOKEN=»xtoken!0º¨                             * 00003600
*                     Ý,RETCODE=xretcode¨                             * 00003700
*                     Ý,PLISTVER=»xplistver!IMPLIED_VERSIONº¨         * 00003800
*                    ÐÝ,MF=S¨                                         * 00003900
*                    ÔÝ,MF=(L,xmfctrl»,xmfattr!0Dº)¨                  * 00004000
*                    ¿Ý,MF=(E,xmfctrl»,COMPLETEº)¨                    * 00004100
*                                                                     * 00004200
*                                                                     * 00004300
*      Where:                                                         * 00004400
*                                                                     * 00004500
*                                                                     * 00004600
*      Ýxlabel¨                                                       * 00004700
*          is an optional symbol, starting in column 1, that is the   * 00004800
*          name on the IEFPPSCN macro invocation.  The name must      * 00004900
*          conform to the rules for an ordinary assembler language    * 00005000
*          symbol.                                                    * 00005100
*          DEFAULT: No name.                                          * 00005200
*                                                                     * 00005300
*                                                                     * 00005400
*                                                                     * 00005500
*                                                                     * 00005600
*       REQUEST(»RETRIEVE!NEXT!ENDº)                                  * 00005700
*          is a required keyword input.  It indicates the type of     * 00005800
*          processing required:                                       * 00005900
*                                                                     * 00006000
*                                                                     * 00006100
*          REQUEST(RETRIEVE)                                          * 00006200
*              Retrieve the PPT table entry for the program specified * 00006300
*              in the PROGRAM field.  The PROGRAM and PPTINFO         * 00006400
*              keywords are required.  The TOKEN keyword should not   * 00006500
*              be specified.                                          * 00006600
*                                                                     * 00006700
*          REQUEST(NEXT)                                              * 00006800
*              Retrieve the next PPT table entry.  If this invocation * 00006900
*              is the first in a sequence, the TOKEN value must be    * 00007000
*              set to zero.  If it is not the first invocation in a   * 00007100
*              sequence, the TOKEN value must be the one returned     * 00007200
*              from the last invocation.  The PPTINFO and TOKEN       * 00007300
*              keywords are required.  The PROGRAM keyword should not * 00007400
*              be specified.                                          * 00007500
*                                                                     * 00007600
*          REQUEST(END)                                               * 00007700
*              Terminate the retrieval of PPT information.  This type * 00007800
*              of request should always be used to indicate to the    * 00007900
*              system that the caller's application has completed all * 00008000
*              of it's PPT processing.  The TOKEN keyword is          * 00008100
*              required.  The PROGRAM and PPTINFO keywords should not * 00008200
*              be specified.                                          * 00008300
*                                                                     * 00008400
*                                                                     * 00008500
*                                                                     * 00008600
*                                                                     * 00008700
*                                                                     * 00008800
*                                                                     * 00008900
*      ÝPPTINFO(»xpptinfo!*º)¨                                        * 00009000
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00009100
*          only) of an optional 16 character input/output area.  This * 00009200
*          is an area provided by the caller where the PPT entry is   * 00009300
*          placed.  This returned portion is mapped by IEFZB610       * 00009400
*          (PPTENTRY).  The caller must provide an area long enough   * 00009500
*          to contain the whole PPT entry.  This area is composed of  * 00009600
*          two contiguous parts, the first (2 bytes) is a length      * 00009700
*          field, and the second part is the PPT entry area.  Before  * 00009800
*          the service in invoked, the caller should set the length   * 00009900
*          part to the length of the PPT entry area (second part)     * 00010000
*          that has been provided.  Upon return, the length field     * 00010100
*          will be set to the length of the PPT entry stored.         * 00010200
*          DEFAULT: *  (The default value will set zero address in    * 00010300
*          the parameter list.)                                       * 00010400
*                                                                     * 00010500
*                                                                     * 00010600
*                                                                     * 00010700
*                                                                     * 00010800
*      ÝPROGRAM(»xprogram!*º)¨                                        * 00010900
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00011000
*          only) of an optional 8 character input field.  It contains * 00011100
*          the name of the program to be found by REQUEST=RETRIEVE.   * 00011200
*          DEFAULT: *  (The default value will set zero address in    * 00011300
*          the parameter list.)                                       * 00011400
*                                                                     * 00011500
*                                                                     * 00011600
*                                                                     * 00011700
*                                                                     * 00011800
*      ÝTOKEN(»xtoken!0º)¨                                            * 00011900
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00012000
*          only) of an optional fullword input/output.  This field is * 00012100
*          a token that is returned to the caller for REQUEST=NEXT    * 00012200
*          type calls and is expected to be provided as input to the  * 00012300
*          next call.  If this invocation is the first in a sequence, * 00012400
*          it must be set to zero.                                    * 00012500
*          DEFAULT: 0                                                 * 00012600
*                                                                     * 00012700
*                                                                     * 00012800
*                                                                     * 00012900
*                                                                     * 00013000
*      ÝRETCODE(xretcode)¨                                            * 00013100
*          is the name (RS-type) of an optional fullword output       * 00013200
*          variable (or register (2)-(12) ASM only) into which the    * 00013300
*          return code is to be copied from GPR 15.                   * 00013400
*                                                                     * 00013500
*                                                                     * 00013600
*                                                                     * 00013700
*                                                                     * 00013800
*      ÝPLISTVER(»xplistver!IMPLIED_VERSIONº)¨                        * 00013900
*          is an optional byte input decimal value in the "0-0" range * 00014000
*          that specifies the macro version.  PLISTVER is the only    * 00014100
*          key allowed on the list form of MF and determines which    * 00014200
*          parameter list is generated.  Note that MAX may be         * 00014300
*          specified instead of a number, and the parameter list will * 00014400
*          be of the largest size currently supported. This size may  * 00014500
*          grow from release to release (thus possibly affecting the  * 00014600
*          amount of storage needed by your program).  If your        * 00014700
*          program can tolerate this, IBM recommends that you always  * 00014800
*          specify MAX when creating the list form parameter list as  * 00014900
*          that will ensure that the list form parameter list is      * 00015000
*          always long enough to hold whatever parameters might be    * 00015100
*          specified on the execute form.                             * 00015200
*          DEFAULT: IMPLIED_VERSION.  When PLISTVER is omitted, the   * 00015300
*          default is the lowest version which allows all of the      * 00015400
*          parameters specified on the invocation to be processed.    * 00015500
*                                                                     * 00015600
*                                                                     * 00015700
*                                                                     * 00015800
*                                                                     * 00015900
*      ÝMF(»S!L!Eº)¨                                                  * 00016000
*          is an optional keyword input which specifies the macro     * 00016100
*          form.                                                      * 00016200
*          DEFAULT: S                                                 * 00016300
*                                                                     * 00016400
*                                                                     * 00016500
*          ÝMF(S)¨                                                    * 00016600
*              specifies the standard form of the macro.  The "S"     * 00016700
*              form generates code to put the parameters into the     * 00016800
*              parameter list and invoke the desired service.  Full   * 00016900
*              checking for required macro keys is done along with    * 00017000
*              supplying defaults for omitted optional parameters.    * 00017100
*              The ?EPILOG macro must be invoked at the end of the    * 00017200
*              module.                                                * 00017300
*                                                                     * 00017400
*              For assembly language code modules, the "S" form       * 00017500
*              generates code to put the parameters into an in-line   * 00017600
*              parameter list and invoke the desired service.  Full   * 00017700
*              checking for required macro keys is done along with    * 00017800
*              supplying defaults for omitted optional parameters.    * 00017900
*                                                                     * 00018000
*          ÝMF(L,xmfctrl»,xmfattr!BDY(DWORD)º)¨                       * 00018100
*              specifies the list form of the macro.  The "L" form    * 00018200
*              defines an area to be used for the parameter list.     * 00018300
*              Only the PLISTVER key may be specified on the          * 00018400
*              invocation.  All other macro parameters are flagged as * 00018500
*              errors.  If PLISTVER is not specified, the original    * 00018600
*              parameter list definition is used.                     * 00018700
*                                                                     * 00018800
*            ,xmfctrl                                                 * 00018900
*              is a required input.  It is the name of a storage area * 00019000
*              for the parameter list.                                * 00019100
*                                                                     * 00019200
*            »,xmfattr!BDY(DWORD)º                                    * 00019300
*              is an optional 60 character input string that varies   * 00019400
*              from 1 to 60 characters. Use it to force boundary      * 00019500
*              alignment of the parameter list. Use only 0F or 0D     * 00019600
*              (assembler-only).                                      * 00019700
*              DEFAULT: 0D for Assembler, BDY(DWORD) for PL/X, which  * 00019800
*              forces the parameter list to a doubleword boundary.    * 00019900
*                                                                     * 00020000
*          ÝMF(E,xmfctrl»,COMPLETEº)¨                                 * 00020100
*              specifies the execute form of the macro.  The "E" form * 00020200
*              generates code to put the parameters into the          * 00020300
*              parameter list specified by xmfctrl and provides full  * 00020400
*              syntax checking with default setting.                  * 00020500
*                                                                     * 00020600
*            ,xmfctrl                                                 * 00020700
*              is a required input.  It is the name (RS-type) (or     * 00020800
*              address in register (1)-(12) ASM only) of a storage    * 00020900
*              area for the parameter list.                           * 00021000
*                                                                     * 00021100
*            »,COMPLETEº                                              * 00021200
*              is an optional keyword input which specifies the       * 00021300
*              degree of macro parameter syntax checking.             * 00021400
*              DEFAULT: COMPLETE                                      * 00021500
*                                                                     * 00021600
*                                                                     * 00021700
*              COMPLETE                                               * 00021800
*                  Checking for required macro keys is done and       * 00021900
*                  defaults are supplied for omitted optional         * 00022000
*                  parameters.                                        * 00022100
*                                                                     * 00022200
*                                                                     * 00022300
*                                                                     * 00022400
*                                                                     * 00022500
*                                                                     * 00022600
*                                                                     * 00022700
*                                                                     * 00022800
*01* RETURN CODES:                                                    * 00022900
*                                                                     * 00023000
*                                                                     * 00023100
*       00        Program found.                                      * 00023200
*                                                                     * 00023300
*       04        End of PPT.                                         * 00023400
*                                                                     * 00023500
*       08        Program not found.                                  * 00023600
*                                                                     * 00023700
*       0C        TOKEN invalid.                                      * 00023800
*                                                                     * 00023900
*       10        Invalid request.                                    * 00024000
*                                                                     * 00024100
*       14        Unable to GETMAIN TOKEN                             * 00024200
*                                                                     * 00024300
*                                                                     * 00024400
*                                                                     * 00024500
*01* REASON CODES:  None.                                             * 00024600
*                                                                     * 00024700
*01* MODULE TYPE:  ASSEM-PL/X MACRO                                   * 00024800
*                                                                     * 00024900
*02*   PROCESSOR:  ASSEM-PL/X                                         * 00025000
*                                                                     * 00025100
*01* COMPONENT:  SC1B6                                                * 00025200
*                                                                     * 00025300
*01* DISTRIBUTION LIBRARY: AMACLIB                                    * 00025400
*                                                                     * 00025500
*01* MACRO USAGE NOTES:                                               * 00025600
*                                                                     * 00025700
*                                                                     * 00025800
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00025900
*        global macro variable.  Any value other than 'NO' will       * 00026000
*        result in the macro expansion being printed.  The default is * 00026100
*        'YES'.  The following examples illustrate how the ZPRINT     * 00026200
*        variable should be set.                                      * 00026300
*                                                                     * 00026400
*                    GBLC &ZPRINT                                     * 00026500
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00026600
*                                                                     * 00026700
*                                                                     * 00026800
*    2.  All   keys   currently   contained  in  the  IEFPPSCN  macro * 00026900
*        correspond  to  version  0.   If you specify PLISTVER, use a * 00027000
*        value of 0 or MAX.                                           * 00027100
*                                                                     * 00027200
*                                                                     * 00027300
*                                                                     * 00027400
****** END OF SPECIFICATIONS *****************************************/ 00027500
*/********************************************************************* 00027600
         MACRO                                                          00027700
&XLABEL  IEFPPSCN &REQUEST=,&PPTINFO=,&PROGRAM=,&TOKEN=,&RETCODE=,     *00027800
               &PLISTVER=,&MF=                                          00027900
.*                                                                      00028000
*              MACDATE -03/30/06-<0>                                    00028100
.*                                                                      00028200
.*******************************************************************    00028300
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00028400
.*******************************************************************    00028500
              GBLC  &ZPRINT     YES=PRINT NO=NO PRINT                   00028600
              GBLC  &ZTEST      YES=TEST NO=NO TEST                     00028700
              GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX             00028800
.*                                                                      00028900
              GBLC  &ZIEFPPSCN  YES=MACRO USED AT LEAST ONCE            00029000
.*******************************************************************    00029100
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00029200
.*******************************************************************    00029300
              LCLC  &ZMS        ERROR MESSAGE WORK AREA                 00029400
              LCLC  &ZCNDX      SYSNDX CHARACTERS                       00029500
              LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED              00029600
              LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR             00029700
              LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE             00029800
              LCLA  &ZAWRK      USED AS A WORK AREA                     00029900
              LCLA  &ZASIZ      USED FOR SIZE OF VALUE                  00030000
              LCLA  &ZN         NUMERIC WORK VARIABLE                   00030100
              LCLC  &ZC         CHARACTER WORK VARIABLE                 00030200
              LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE             00030300
              LCLA  &ZTLA       VALUE TOO LONG VARIABLE                 00030400
              LCLC  &ZMAC_G     "G" or null                             00030500
&ZMAC_G       SETC  ''                                                  00030600
              LCLC  &ZMAC_LR                                            00030700
&ZMAC_LR      SETC  'LR'                                                00030800
              LCLC  &ZMAC_L                                             00030900
&ZMAC_L       SETC  'L'                                                 00031000
              LCLC  &ZMAC_ST                                            00031100
&ZMAC_ST      SETC  'ST'                                                00031200
              LCLA  &ZMACRET    MACRO RETURN CODE                       00031300
&ZMACRET      SETA  0           ASSUME NO ERRORS                        00031400
.*                                                                      00031500
              LCLC  &ZCSYSLIST(255)             NONXKEY, POS ARRAY      00031600
              LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()              00031700
              LCLA  &ZPLLEN     PARAMETER LIST LENGTH                   00031800
              LCLC  &ZENDBASEPL                 End of base PL          00031900
              LCLA  &ZPLWORKA   PARAMETER LIST LENGTH                   00032000
.*******************************************************************    00032100
.***AB.04  MACRO VARIABLES FOR RANGES AND SETS OF ARGUMENTS             00032200
.*******************************************************************    00032300
              LCLA  &ZI         INDEX FOR ARRAY                         00032400
              LCLA  &ZJ         INDEX FOR PARMS                         00032500
              LCLA  &ZK         INDEX FOR PARSE                         00032600
              LCLA  &ZLO        LOW RANGE VALUE                         00032700
              LCLA  &ZHI        HIGH RANGE VALUE                        00032800
              LCLC  &ZW         WORK AREA FOR PARM                      00032900
.********************************************************************   00033000
.***AB.05  INVOKE MVS MACROS TO CONTROL CODE GENERATION                 00033100
.********************************************************************   00033200
              GBLC  &SYSSPLV    SP LEVEL 1,2,3 -SPLEVEL                 00033300
              GBLC  &SYSASCE    SYSTEM STATE P ANY AR-SYSSTATE          00033400
              GBLA  &SYSALVL    SYSSTATE ARCHLVL                        00033500
              GBLC  &SYSAM64    SYSSTATE AMODE64                        00033600
.*                                                                      00033700
              AIF   (K'&SYSASCE GT 0).ZSYS4     SYS STATE DEFINED       00033800
              AIF   (K'&SYSSPLV GT 0).ZSYS2     SP LEVEL DEFINED        00033900
              SPLEVEL  TEST                                             00034000
.ZSYS2        ANOP  ,                                                   00034100
              AIF   ('&SYSSPLV' EQ '1').ZSYS3   PRE SP 3.1              00034200
              AIF   ('&SYSSPLV' EQ '2').ZSYS3   PRE SP 3.1              00034300
              SYSSTATE TEST                                             00034400
              AGO   .ZSYS4                                              00034500
.ZSYS3        ANOP  ,                                                   00034600
&SYSASCE      SETC  'P'         ASSUME SYSSTATE PRIMARY                 00034700
.ZSYS4        ANOP  ,                                                   00034800
.*******************************************************************    00034900
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00035000
.*******************************************************************    00035100
              LCLC  &XREQUEST   ++ VALUE                                00035200
              LCLC  &XPPTINFO   ++ NAME                                 00035300
              LCLC  &XPROGRAM   ++ NAME                                 00035400
              LCLC  &XTOKEN     ++ NAME                                 00035500
              LCLC  &XRETCODE   ++ NAME                                 00035600
              LCLA  &XPLISTVER  ++ VALUE                                00035700
              LCLC  &XMF        ++ VALUE                                00035800
              LCLC  &XMFCTRL    ++ NAME                                 00035900
              LCLC  &XMFATTR    ++ VALUE                                00036000
              LCLC  &XMFSCK     ++ VALUE                                00036100
.*******************************************************************    00036200
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00036300
.*******************************************************************    00036400
              LCLC  &ZXREQUEST  ++ INPUT VALUE                          00036500
              LCLC  &ZXPPTINFO  ++ INOUT NAME                           00036600
              LCLC  &ZXPROGRAM  ++ INPUT NAME                           00036700
              LCLC  &ZXTOKEN    ++ INOUT NAME                           00036800
              LCLC  &ZXRETCODE  ++ OUTPUT NAME                          00036900
              LCLC  &ZXPLISTVER                 ++ INPUT VALUE          00037000
              LCLC  &ZXMF       ++ INPUT VALUE                          00037100
              LCLC  &ZXMFCTRL   ++ INPUT NAME                           00037200
              LCLC  &ZXMFATTR   ++ INPUT VALUE                          00037300
              LCLC  &ZXMFSCK    ++ INPUT VALUE                          00037400
.********************************************************************   00037500
.***AC.PLV01  PROCESS PLISTVER                                      *   00037600
.********************************************************************   00037700
&XPLISTVER      SETA  0                                                 00037800
                AIF   (K'&PLISTVER(1) LE 0).ZPLV0                       00037900
                AIF   ('&PLISTVER(1)' NE 'MAX').ZPLV0                   00038000
&XPLISTVER      SETA  0                                                 00038100
.ZPLV0          ANOP  ,                                                 00038200
.*                                                                      00038300
                AIF   (K'&PLISTVER(1) LE 0).ZPVCKE                      00038400
                AIF   ('&PLISTVER(1)' EQ 'IMPLIED_VERSION').ZPVCKE      00038500
                AIF   ('&PLISTVER(1)' EQ 'MAX').ZPVCKE                  00038600
.*-------------------------------------------------------------------   00038700
                AIF   (N'&PLISTVER LE 1).ZPVCK3  CK NUM                 00038800
&ZMS            SETC  '"PLISTVER='         *KPOSA* MNOTE                00038900
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00039000
&ZMS            SETC  '&ZMS "PLISTVER"'                                 00039100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00039200
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00039300
                AGO   .ZPVCK2                                           00039400
.ZPVCK3         ANOP  ,                                                 00039500
.*-------------------------------------------------------------------   00039600
                AIF   ('&PLISTVER'(1,1) NE '(').ZPVCK2                  00039700
&ZMS            SETC  '"PLISTVER='         *KGPRA* MNOTE                00039800
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00039900
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00040000
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00040100
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00040200
                AGO   .ZPVCKE                                           00040300
.ZPVCK2         ANOP  ,                                                 00040400
.*-------------------------------------------------------------------   00040500
&ZCVAL          SETC  '&PLISTVER(1)'                                    00040600
                AIF   ('&ZCVAL'(1,1) EQ '(').ZPVCKE  IN GPR             00040700
                AIF   (T'&ZCVAL NE 'N').ZPVCK6  NUMERIC ERR             00040800
&ZN             SETA   &PLISTVER(1)        CONVERT TO ARITHMETIC        00040900
                AIF   (&ZN LT 0).ZPVCK6    TOO LOW                      00041000
                AIF   (&ZN LE 0).ZPVCK4A   NOT HIGH                     00041100
.ZPVCK6         ANOP  ,                                                 00041200
&ZMS            SETC  '"PLISTVER='         *KRNGA* MNOTE                00041300
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00041400
&ZMS            SETC  '&ZMS THE RANGE IS "0-0"'                         00041500
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00041600
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00041700
&XPLISTVER      SETA  0                                                 00041800
                AGO   .ZPVCKE                                           00041900
.*-------------------------------------------------------------------   00042000
.ZPVCK4A        ANOP  ,                                                 00042100
                AIF   (&ZN GE &XPLISTVER).ZPVCK4                        00042200
&ZMS            SETC  'PLISTVER='          *KVALA* MNOTE                00042300
&ZMS            SETC  '&ZMS.&PLISTVER(1)'                               00042400
&ZMS            SETC  '&ZMS., BUT PLISTVER OF'                          00042500
&ZMS            SETC  '&ZMS &XPLISTVER'                                 00042600
                MNOTE 8,' &ZMS IS REQUIRED.'                            00042700
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00042800
                AGO   .ZPVCK5                                           00042900
.ZPVCK4         ANOP  ,                                                 00043000
&XPLISTVER      SETA  &PLISTVER(1)                                      00043100
.ZPVCK5         ANOP  ,                                                 00043200
.ZPVCKE         ANOP  ,                                                 00043300
.********************************************************************   00043400
.***AG.MF01 PROCESS MF MACRO FORMS                                      00043500
.********************************************************************   00043600
              ACTR  10000                                               00043700
.*------------------------------------------------------------------    00043800
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00043900
&XMF          SETC  ''          INITIALIZE XVARIABLE                    00044000
.*-------------------------------------------------------------------   00044100
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00044200
.ZG24         ANOP  ,                                                   00044300
&ZTLC         SETC 'S'                                                  00044400
              AIF   ('&MF(1)' NE '&ZTLC').ZG25                          00044500
&XMF          SETC  'S'         SET KEYWORD                             00044600
              AIF   (N'&MF LE 1).ZG24A          CK NUM                  00044700
&ZMS          SETC  '"MF='      *KPOSA* MNOTE                           00044800
&ZMS          SETC  '&ZMS.&MF"'                                         00044900
&ZMS          SETC  '&ZMS "MF"'                                         00045000
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00045100
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00045200
.ZG24A        ANOP  ,                                                   00045300
.*-------------------------------------------------------------------   00045400
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00045500
.ZG25         ANOP  ,                                                   00045600
&ZTLC         SETC 'L'                                                  00045700
              AIF   ('&MF(1)' NE '&ZTLC').ZG32                          00045800
&XMF          SETC  'L'         SET KEYWORD                             00045900
              AIF   (N'&MF LE 3).ZG25A          CK NUM                  00046000
&ZMS          SETC  '"MF='      *KPOSA* MNOTE                           00046100
&ZMS          SETC  '&ZMS.&MF"'                                         00046200
&ZMS          SETC  '&ZMS "MF"'                                         00046300
              MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'                00046400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00046500
.ZG25A        ANOP  ,                                                   00046600
.*-------------------------------------------------------------------   00046700
.***AG.KKCTL08 -MF(L) SPECIAL CHECK                                     00046800
              AIF   (N'&SYSLIST NE 0).ZG25B     POSITIONALS?            00046900
              AIF   ('&REQUEST' NE '').ZG25B    KEYS?                   00047000
              AIF   ('&PPTINFO' NE '').ZG25B    KEYS?                   00047100
              AIF   ('&PROGRAM' NE '').ZG25B    KEYS?                   00047200
              AIF   ('&TOKEN' NE '').ZG25B      KEYS?                   00047300
              AIF   ('&RETCODE' NE '').ZG25B    KEYS?                   00047400
              AGO    .ZG25C     INVOCATION OKAY                         00047500
.ZG25B        ANOP  ,                                                   00047600
&ZMS          SETC  'THE "L" FORM OF "MF"'      *MFLA* MNOTE            00047700
&ZMS          SETC  '&ZMS CAN ONLY HAVE'                                00047800
&ZMS          SETC  '&ZMS THE "PLISTVER" KEY'                           00047900
              MNOTE 8,' &ZMS SPECIFIED ON THE INVOCATION.'              00048000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00048100
.ZG25C        ANOP  ,                                                   00048200
.*-------------------------------------------------------------------   00048300
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00048400
&ZXMFCTRL     SETC  'INPUT'     SET IN/OUTPUT                           00048500
&XMFCTRL      SETC  '&MF(2,1)'  SET XVARIABLE                           00048600
              AIF   (N'&MF(2) GT 1).ZG27B       MULTI PARMS             00048700
&XMFCTRL      SETC  '&MF(2)'    SET XVARIABLE                           00048800
.ZG27B        AIF   (K'&MF(2) GT 0).ZG27C                               00048900
&ZXMFCTRL     SETC  ''          RESET IN/OUTPUT                         00049000
&ZMS          SETC  'WHEN "L" IS SPECIFIED'     *KRQDA*                 00049100
&ZMS          SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'                 00049200
              MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                        00049300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00049400
.ZG27C        ANOP  ,                                                   00049500
.*-------------------------------------------------------------------   00049600
.***AG.KCK01 NAME, OPT RQD INPUT, POS(2) -GPR NOT ALLOWED               00049700
              AIF   (K'&ZXMFCTRL LE 0).ZG27P    NOT I/O                 00049800
              AIF   ('&XMFCTRL'(1,1) NE '(').ZG27P                      00049900
&ZXMFCTRL     SETC  ''          RESET IN/OUTPUT                         00050000
&ZMS          SETC  '"MF='      *KGPRA* MNOTE                           00050100
&ZMS          SETC  '&ZMS.&MF"'                                         00050200
&ZMS          SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'           00050300
              MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 2.'                   00050400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00050500
.ZG27P        ANOP  ,                                                   00050600
.*-------------------------------------------------------------------   00050700
.***AG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE                      00050800
&ZXMFATTR     SETC  'INPUT'     SET IN/OUTPUT                           00050900
&XMFATTR      SETC  '0D'                                                00051000
              AIF   (K'&MF(3) LE 0).ZG30B       PARM                    00051100
&XMFATTR      SETC  '&MF(3,1)'  SET XVARIABLE                           00051200
              AIF   (N'&MF(3) GT 1).ZG30B       MULTI                   00051300
&XMFATTR      SETC  '&MF(3)'    SET XVARIABLE                           00051400
.ZG30B        ANOP  ,                                                   00051500
.*-------------------------------------------------------------------   00051600
.***AG.KCK01 VALUE, OPT INPUT, POS(3) -GPR NOT ALLOWED                  00051700
              AIF   (K'&ZXMFATTR LE 0).ZG30P    NOT I/O                 00051800
              AIF   ('&XMFATTR'(1,1) NE '(').ZG30P                      00051900
&ZXMFATTR     SETC  ''          RESET IN/OUTPUT                         00052000
&ZMS          SETC  '"MF='      *KGPRA* MNOTE                           00052100
&ZMS          SETC  '&ZMS.&MF"'                                         00052200
&ZMS          SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'           00052300
              MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 3.'                   00052400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00052500
.ZG30P        ANOP  ,                                                   00052600
.*-------------------------------------------------------------------   00052700
.***AG.KCK03 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH                 00052800
              AIF   (K'&ZXMFATTR LE 0).ZG30S    NOT I/O                 00052900
              AIF   (K'&XMFATTR LE 60).ZG30S    LNG OK                  00053000
&ZXMFATTR     SETC  ''          RESET IN/OUTPUT                         00053100
&ZMS          SETC  '"MF='      *KLNGA* MNOTE                           00053200
&ZMS          SETC  '&ZMS.&MF"'                                         00053300
&ZMS          SETC  '&ZMS ARGUMENT 3 EXCEEDS THE MAXIMUM'               00053400
              MNOTE 8,' &ZMS LENGTH OF 60 CHARACTERS.'                  00053500
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00053600
.ZG30S        ANOP  ,                                                   00053700
.*-------------------------------------------------------------------   00053800
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00053900
.ZG32         ANOP  ,                                                   00054000
&ZTLC         SETC 'E'                                                  00054100
              AIF   ('&MF(1)' NE '&ZTLC').ZG40                          00054200
&XMF          SETC  'E'         SET KEYWORD                             00054300
              AIF   (N'&MF LE 3).ZG32A          CK NUM                  00054400
&ZMS          SETC  '"MF='      *KPOSA* MNOTE                           00054500
&ZMS          SETC  '&ZMS.&MF"'                                         00054600
&ZMS          SETC  '&ZMS "MF"'                                         00054700
              MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'                00054800
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00054900
.ZG32A        ANOP  ,                                                   00055000
.*-------------------------------------------------------------------   00055100
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00055200
&ZXMFCTRL     SETC  'INPUT'     SET IN/OUTPUT                           00055300
&XMFCTRL      SETC  '&MF(2,1)'  SET XVARIABLE                           00055400
              AIF   (N'&MF(2) GT 1).ZG34B       MULTI PARMS             00055500
&XMFCTRL      SETC  '&MF(2)'    SET XVARIABLE                           00055600
.ZG34B        AIF   (K'&MF(2) GT 0).ZG34C                               00055700
&ZXMFCTRL     SETC  ''          RESET IN/OUTPUT                         00055800
&ZMS          SETC  'WHEN "E" IS SPECIFIED'     *KRQDA*                 00055900
&ZMS          SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'                 00056000
              MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                        00056100
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00056200
.ZG34C        ANOP  ,                                                   00056300
.*-------------------------------------------------------------------   00056400
.***AG.KCK02 NAME, OPT RQD INPUT, POS(2) -GPR OUT OF RANGE              00056500
              AIF   (K'&ZXMFCTRL LE 0).ZG34R    NOT I/O                 00056600
              AIF   ('&XMFCTRL'(1,1) NE '(').ZG34R                      00056700
&ZCGPR        SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)                          00056800
              AIF   ('&ZCGPR'(1,1) NE '0').ZG34P                        00056900
              AIF   (K'&ZCGPR GT 2).ZG34Q                               00057000
              AIF   ('&ZCGPR' EQ '0').ZG34Q                             00057100
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00057200
              AIF   (T'&ZCGPR NE 'N').ZG34Q     INVALID REG NAME        00057300
.ZG34P        ANOP  ,                                                   00057400
              AIF   (T'&ZCGPR NE 'N').ZG34R     NON NUMERIC             00057500
              AIF   ('&ZCGPR' LT '1').ZG34Q                             00057600
              AIF   ('&ZCGPR' LE '12').ZG34R                            00057700
.ZG34Q        ANOP  ,                                                   00057800
&ZMS          SETC  '"MF='      *KGPRA* MNOTE                           00057900
&ZMS          SETC  '&ZMS.&MF"'                                         00058000
&ZMS          SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'           00058100
              MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'                    00058200
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00058300
.ZG34R        ANOP  ,                                                   00058400
.*-------------------------------------------------------------------   00058500
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00058600
&XMFSCK       SETC  ''          INITIALIZE XVARIABLE                    00058700
.ZG38A   AIF   ('&MF(3)' NE 'COMPLETE').ZG39A                           00058800
&XMFSCK       SETC  'COMPLETE'  SET KEYWORD                             00058900
.*-------------------------------------------------------------------   00059000
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00059100
.ZG39A        AIF   (K'&XMFSCK GT 0).ZG39C      KEYWORD                 00059200
              AIF   (K'&MF(3) LE 0).ZG39B                               00059300
&ZMS          SETC  '"MF='      *KUKWA* MNOTE                           00059400
&ZMS          SETC  '&ZMS.&MF"'                                         00059500
&ZMS          SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '           00059600
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00059700
&ZMS          SETC  '&ZMS "COMPLETE".'                                  00059800
              MNOTE 8,' &ZMS '                                          00059900
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00060000
.ZG39B        ANOP  ,                                                   00060100
&XMFSCK       SETC  'COMPLETE'  SET DEFAULT KEYWORD                     00060200
.ZG39C        ANOP  ,                                                   00060300
&ZXMFSCK      SETC  'INPUT'     SET IN/OUTPUT                           00060400
.*------------------------------------------------------------------    00060500
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00060600
.ZG40         ANOP  ,                                                   00060700
&ZXMF         SETC  'INPUT'     SET IN/OUTPUT                           00060800
              AIF   (K'&XMF GT 0).ZG40E         VALID ARG               00060900
              AIF   (T'&MF EQ 'O').ZG40D        OMITTED                 00061000
&ZASYSLNDX    SETA  0                                                   00061100
.ZG40A        ANOP  ,           POSITIONAL MACRO KEY                    00061200
&ZASYSLNDX    SETA  &ZASYSLNDX+1                                        00061300
              AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG40C                    00061400
&ZTLC         SETC 'MF'                                                 00061500
              AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG40A           00061600
.ZG40B        ANOP  ,                                                   00061700
&ZXMF         SETC  ''          RESET IN/OUTPUT                         00061800
&ZMS          SETC  'THE "MF" KEY'              *KOPTA* MNOTE           00061900
&ZMS          SETC  '&ZMS MUST CONTAIN ONE'                             00062000
              MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                    00062100
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00062200
              AGO   .ZG40E                                              00062300
.ZG40C        ANOP  ,                                                   00062400
&ZXMF         SETC  ''          RESET IN/OUTPUT                         00062500
&ZMS          SETC  '"MF='      *KUKWA* MNOTE                           00062600
&ZMS          SETC  '&ZMS.&MF"'                                         00062700
&ZMS          SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '           00062800
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00062900
&ZMS          SETC  '&ZMS "S",'                                         00063000
&ZMS          SETC  '&ZMS "L",'                                         00063100
&ZMS          SETC  '&ZMS OR "E".'                                      00063200
              MNOTE 8,' &ZMS '                                          00063300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00063400
              AGO   .ZG40E                                              00063500
.ZG40D        ANOP  ,                                                   00063600
&XMF          SETC  'S'         SET DEFAULT KEYWORD                     00063700
&XMFSCK       SETC  'COMPLETE'  COMPLETE CHECKING                       00063800
.ZG40E        ANOP  ,                                                   00063900
.********************************************************************   00064000
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00064100
.********************************************************************   00064200
              ACTR  10000                                               00064300
.*-------------------------------------------------------------------   00064400
.***AG.MF03 MF=(SLE)                                                    00064500
              AIF   ('&XMF' EQ 'L').ZGMFX                               00064600
.*----------------------------------------------------------------***   00064700
.***AG.KKWRD01 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00064800
              AIF   (N'&REQUEST LE 1).ZG2A      CK NUM                  00064900
&ZMS          SETC  '"REQUEST='                 *KPOSA* MNOTE           00065000
&ZMS          SETC  '&ZMS.&REQUEST"'                                    00065100
&ZMS          SETC  '&ZMS "REQUEST"'                                    00065200
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00065300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00065400
.ZG2A         ANOP  ,                                                   00065500
.*-------------------------------------------------------------------   00065600
.***AG.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00065700
&XREQUEST     SETC  ''          INITIALIZE XVARIABLE                    00065800
.ZG3A   AIF   ('&REQUEST(1)' NE 'RETRIEVE').ZG4A                        00065900
&XREQUEST     SETC  'RETRIEVE'  SET KEYWORD                             00066000
.*-------------------------------------------------------------------   00066100
.***AG.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00066200
.ZG4A   AIF   ('&REQUEST(1)' NE 'NEXT').ZG5A                            00066300
&XREQUEST     SETC  'NEXT'      SET KEYWORD                             00066400
.*-------------------------------------------------------------------   00066500
.***AG.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00066600
.ZG5A   AIF   ('&REQUEST(1)' NE 'END').ZG6A                             00066700
&XREQUEST     SETC  'END'       SET KEYWORD                             00066800
.*-------------------------------------------------------------------   00066900
.***AG.KKWRD03 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00067000
.ZG6A         AIF   (K'&XREQUEST GT 0).ZG6C     KEYWORD                 00067100
              AIF   (K'&REQUEST(1) LE 0).ZG6B                           00067200
&ZMS          SETC  '"REQUEST='                 *KUKWA* MNOTE           00067300
&ZMS          SETC  '&ZMS.&REQUEST"'                                    00067400
&ZMS          SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '           00067500
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00067600
&ZMS          SETC  '&ZMS "RETRIEVE",'                                  00067700
&ZMS          SETC  '&ZMS "NEXT",'                                      00067800
&ZMS          SETC  '&ZMS OR "END".'                                    00067900
              MNOTE 8,' &ZMS '                                          00068000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00068100
.ZG6B         ANOP  ,                                                   00068200
&XREQUEST     SETC  'RETRIEVE'  SET DEFAULT KEYWORD                     00068300
.ZG6C         ANOP  ,                                                   00068400
&ZXREQUEST    SETC  'INPUT'     SET IN/OUTPUT                           00068500
.*-------------------------------------------------------------------   00068600
.***AG.KKWRD04 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00068700
              AIF   (K'&REQUEST(1) GT 0).ZG6D   VALID                   00068800
&ZXREQUEST    SETC  ''          RESET IN/OUTPUT                         00068900
&ZMS          SETC  'THE'                                               00069000
&ZMS          SETC  '&ZMS "REQUEST" KEY AND ITS'                        00069100
&ZMS          SETC  '&ZMS ARGUMENT ARE REQUIRED.'                       00069200
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00069300
&ZMS          SETC  '&ZMS "RETRIEVE",'                                  00069400
&ZMS          SETC  '&ZMS "NEXT",'                                      00069500
&ZMS          SETC  '&ZMS OR "END".'                                    00069600
              MNOTE 8,' &ZMS '                                          00069700
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00069800
.ZG6D         ANOP  ,                                                   00069900
.*----------------------------------------------------------------***   00070000
.***AG.KXVAR05 NAME, OPT INOUT, KEYS -XVARIABLE KEY                     00070100
              AIF   (N'&PPTINFO LE 1).ZG8A      CK NUM                  00070200
&ZMS          SETC  '"PPTINFO='                 *KPOSA* MNOTE           00070300
&ZMS          SETC  '&ZMS.&PPTINFO"'                                    00070400
&ZMS          SETC  '&ZMS "PPTINFO"'                                    00070500
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00070600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00070700
.ZG8A         ANOP  ,                                                   00070800
.*-------------------------------------------------------------------   00070900
.***AG.KXVAR13 NAME, OPT INOUT, KEYS -XVARIABLE                         00071000
&ZXPPTINFO    SETC  'INOUT'     SET IN/OUTPUT                           00071100
&XPPTINFO     SETC  '*'                                                 00071200
              AIF   (K'&PPTINFO(1) LE 0).ZG8B   PARM                    00071300
&XPPTINFO     SETC  '&PPTINFO(1)'               SET XVARIABLE           00071400
              AIF   (N'&PPTINFO GT 1).ZG8B      MULTI                   00071500
&XPPTINFO     SETC  '&PPTINFO'  SET XVARIABLE                           00071600
.ZG8B         ANOP  ,                                                   00071700
.*-------------------------------------------------------------------   00071800
.***AG.KCK02 NAME, OPT INOUT, KEYS -GPR OUT OF RANGE                    00071900
              AIF   (K'&ZXPPTINFO LE 0).ZG8R    NOT I/O                 00072000
         AIF   ('&XPPTINFO' EQ '*').ZG8R                                00072100
              AIF   ('&XPPTINFO'(1,1) NE '(').ZG8R                      00072200
&ZCGPR        SETC  '&XPPTINFO'(2,K'&XPPTINFO-2)                        00072300
              AIF   ('&ZCGPR'(1,1) NE '0').ZG8P                         00072400
              AIF   (K'&ZCGPR GT 2).ZG8Q                                00072500
              AIF   ('&ZCGPR' EQ '0').ZG8Q                              00072600
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00072700
              AIF   (T'&ZCGPR NE 'N').ZG8Q      INVALID REG NAME        00072800
.ZG8P         ANOP  ,                                                   00072900
              AIF   (T'&ZCGPR NE 'N').ZG8R      NON NUMERIC             00073000
              AIF   ('&ZCGPR' LT '2').ZG8Q                              00073100
              AIF   ('&ZCGPR' LE '12').ZG8R                             00073200
.ZG8Q         ANOP  ,                                                   00073300
&ZMS          SETC  '"PPTINFO='                 *KGPRA* MNOTE           00073400
&ZMS          SETC  '&ZMS.&PPTINFO"'                                    00073500
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00073600
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00073700
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00073800
.ZG8R         ANOP  ,                                                   00073900
.*----------------------------------------------------------------***   00074000
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00074100
              AIF   (N'&PROGRAM LE 1).ZG11A     CK NUM                  00074200
&ZMS          SETC  '"PROGRAM='                 *KPOSA* MNOTE           00074300
&ZMS          SETC  '&ZMS.&PROGRAM"'                                    00074400
&ZMS          SETC  '&ZMS "PROGRAM"'                                    00074500
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00074600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00074700
.ZG11A        ANOP  ,                                                   00074800
.*-------------------------------------------------------------------   00074900
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00075000
&ZXPROGRAM    SETC  'INPUT'     SET IN/OUTPUT                           00075100
&XPROGRAM     SETC  '*'                                                 00075200
              AIF   (K'&PROGRAM(1) LE 0).ZG11B  PARM                    00075300
&XPROGRAM     SETC  '&PROGRAM(1)'               SET XVARIABLE           00075400
              AIF   (N'&PROGRAM GT 1).ZG11B     MULTI                   00075500
&XPROGRAM     SETC  '&PROGRAM'  SET XVARIABLE                           00075600
.ZG11B        ANOP  ,                                                   00075700
.*-------------------------------------------------------------------   00075800
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00075900
              AIF   (K'&ZXPROGRAM LE 0).ZG11R   NOT I/O                 00076000
         AIF   ('&XPROGRAM' EQ '*').ZG11R                               00076100
              AIF   ('&XPROGRAM'(1,1) NE '(').ZG11R                     00076200
&ZCGPR        SETC  '&XPROGRAM'(2,K'&XPROGRAM-2)                        00076300
              AIF   ('&ZCGPR'(1,1) NE '0').ZG11P                        00076400
              AIF   (K'&ZCGPR GT 2).ZG11Q                               00076500
              AIF   ('&ZCGPR' EQ '0').ZG11Q                             00076600
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00076700
              AIF   (T'&ZCGPR NE 'N').ZG11Q     INVALID REG NAME        00076800
.ZG11P        ANOP  ,                                                   00076900
              AIF   (T'&ZCGPR NE 'N').ZG11R     NON NUMERIC             00077000
              AIF   ('&ZCGPR' LT '2').ZG11Q                             00077100
              AIF   ('&ZCGPR' LE '12').ZG11R                            00077200
.ZG11Q        ANOP  ,                                                   00077300
&ZMS          SETC  '"PROGRAM='                 *KGPRA* MNOTE           00077400
&ZMS          SETC  '&ZMS.&PROGRAM"'                                    00077500
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00077600
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00077700
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00077800
.ZG11R        ANOP  ,                                                   00077900
.*----------------------------------------------------------------***   00078000
.***AG.KXVAR05 NAME, OPT INOUT, KEYS -XVARIABLE KEY                     00078100
              AIF   (N'&TOKEN LE 1).ZG14A       CK NUM                  00078200
&ZMS          SETC  '"TOKEN='   *KPOSA* MNOTE                           00078300
&ZMS          SETC  '&ZMS.&TOKEN"'                                      00078400
&ZMS          SETC  '&ZMS "TOKEN"'                                      00078500
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00078600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00078700
.ZG14A        ANOP  ,                                                   00078800
.*-------------------------------------------------------------------   00078900
.***AG.KXVAR13 NAME, OPT INOUT, KEYS -XVARIABLE                         00079000
&ZXTOKEN      SETC  'INOUT'     SET IN/OUTPUT                           00079100
&XTOKEN       SETC  '0'                                                 00079200
              AIF   (K'&TOKEN(1) LE 0).ZG14B    PARM                    00079300
&XTOKEN       SETC  '&TOKEN(1)'                 SET XVARIABLE           00079400
              AIF   (N'&TOKEN GT 1).ZG14B       MULTI                   00079500
&XTOKEN       SETC  '&TOKEN'    SET XVARIABLE                           00079600
.ZG14B        ANOP  ,                                                   00079700
.*-------------------------------------------------------------------   00079800
.***AG.KCK02 NAME, OPT INOUT, KEYS -GPR OUT OF RANGE                    00079900
              AIF   (K'&ZXTOKEN LE 0).ZG14R     NOT I/O                 00080000
              AIF   ('&XTOKEN'(1,1) NE '(').ZG14R                       00080100
&ZCGPR        SETC  '&XTOKEN'(2,K'&XTOKEN-2)                            00080200
              AIF   ('&ZCGPR'(1,1) NE '0').ZG14P                        00080300
              AIF   (K'&ZCGPR GT 2).ZG14Q                               00080400
              AIF   ('&ZCGPR' EQ '0').ZG14Q                             00080500
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00080600
              AIF   (T'&ZCGPR NE 'N').ZG14Q     INVALID REG NAME        00080700
.ZG14P        ANOP  ,                                                   00080800
              AIF   (T'&ZCGPR NE 'N').ZG14R     NON NUMERIC             00080900
              AIF   ('&ZCGPR' LT '2').ZG14Q                             00081000
              AIF   ('&ZCGPR' LE '12').ZG14R                            00081100
.ZG14Q        ANOP  ,                                                   00081200
&ZMS          SETC  '"TOKEN='   *KGPRA* MNOTE                           00081300
&ZMS          SETC  '&ZMS.&TOKEN"'                                      00081400
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00081500
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00081600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00081700
.ZG14R        ANOP  ,                                                   00081800
.*----------------------------------------------------------------***   00081900
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00082000
              AIF   (N'&RETCODE LE 1).ZG17A     CK NUM                  00082100
&ZMS          SETC  '"RETCODE='                 *KPOSA* MNOTE           00082200
&ZMS          SETC  '&ZMS.&RETCODE"'                                    00082300
&ZMS          SETC  '&ZMS "RETCODE"'                                    00082400
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00082500
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00082600
.ZG17A        ANOP  ,                                                   00082700
.*-------------------------------------------------------------------   00082800
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00082900
              AIF   (K'&RETCODE(1) LE 0).ZG17C  NO PARM                 00083000
&ZXRETCODE    SETC  'OUTPUT'    SET OUTPUT                              00083100
&XRETCODE     SETC  '&RETCODE(1)'               SET XVARIABLE           00083200
              AIF   (N'&RETCODE GT 1).ZG17C                             00083300
&XRETCODE     SETC  '&RETCODE'  SET XVARIABLE                           00083400
.ZG17C        ANOP  ,                                                   00083500
.*-------------------------------------------------------------------   00083600
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00083700
              AIF   (K'&ZXRETCODE LE 0).ZG17R   NOT I/O                 00083800
              AIF   ('&XRETCODE'(1,1) NE '(').ZG17R                     00083900
&ZCGPR        SETC  '&XRETCODE'(2,K'&XRETCODE-2)                        00084000
              AIF   ('&ZCGPR'(1,1) NE '0').ZG17P                        00084100
              AIF   (K'&ZCGPR GT 2).ZG17Q                               00084200
              AIF   ('&ZCGPR' EQ '0').ZG17Q                             00084300
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00084400
              AIF   (T'&ZCGPR NE 'N').ZG17Q     INVALID REG NAME        00084500
.ZG17P        ANOP  ,                                                   00084600
              AIF   (T'&ZCGPR NE 'N').ZG17R     NON NUMERIC             00084700
              AIF   ('&ZCGPR' LT '2').ZG17Q                             00084800
              AIF   ('&ZCGPR' LE '12').ZG17R                            00084900
.ZG17Q        ANOP  ,                                                   00085000
&ZMS          SETC  '"RETCODE='                 *KGPRA* MNOTE           00085100
&ZMS          SETC  '&ZMS.&RETCODE"'                                    00085200
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00085300
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00085400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00085500
.ZG17R        ANOP  ,                                                   00085600
.******************************************************************     00085700
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00085800
.******************************************************************     00085900
              ACTR  10000                                               00086000
.*----------------------------------------------------------------***   00086100
.***AH.P02 EXTRA POSITIONALS                                            00086200
              AIF   (N'&SYSLIST LE 0).ZGLISTX   NO EXTRAS               00086300
              AIF   (N'&SYSLIST NE 2).ZGLISTX1  NOT NULL                00086400
              AIF   ('&SYSLIST(1)' NE '').ZGLISTX1  NOT NULL            00086500
              AIF   ('&SYSLIST(2)' EQ '').ZGLISTX  NOT NULL             00086600
.ZGLISTX1     ANOP  ,                                                   00086700
&ZCVAL        SETC  ''          ERROR FIELD                             00086800
&ZAWRK        SETA  0           POSITIONAL NUMBER                       00086900
.ZGLIST2      ANOP  ,                                                   00087000
&ZAWRK        SETA  &ZAWRK+1    NEXT POSITIONAL                         00087100
              AIF   (&ZAWRK GT N'&SYSLIST).ZGLIST3  DONE                00087200
&ZCVAL        SETC '&ZCVAL,&SYSLIST(&ZAWRK)'    EXTRA                   00087300
              AGO   .ZGLIST2                                            00087400
.*                                                                      00087500
.ZGLIST3      ANOP  ,                                                   00087600
&ZCVAL        SETC '&ZCVAL'(2,K'&ZCVAL-1)       STRIP COMMA             00087700
&ZMS          SETC  'POSITIONAL ARGUMENT(S),'   *PPOSA* MNOTE           00087800
&ZMS          SETC  '&ZMS "&ZCVAL"'                                     00087900
&ZMS          SETC  '&ZMS CANNOT BE USED.'                              00088000
&ZMS          SETC  '&ZMS NO POSITIONAL ARGUMENTS'                      00088100
              MNOTE 8,' &ZMS ARE ALLOWED.'                              00088200
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00088300
.ZGLISTX      ANOP  ,                                                   00088400
&ZASYSLNDX    SETA  0                                                   00088500
.*-------------------------------------------------------------------   00088600
.***AG.MF04 MF=(SLE)                                                    00088700
.ZGMFX        ANOP  ,           END OF FULL SYNTAX CHECK                00088800
.*******************************************************************    00088900
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       00089000
.*******************************************************************    00089100
              AIF   (&ZMACRET NE 0).ZLX2        ERROR DETECTED          00089200
.*******************************************************************    00089300
.***AE.01  START OF IEFPPSCN MACRO CODE                                 00089400
.*******************************************************************    00089500
              LCLC  &M0M0001                 NAME                       00089600
&M0M0001      SETC  '&XLABEL'                SET NAME                   00089700
              AIF   (K'&XLABEL NE 0).XLAB2                              00089800
&M0M0001      SETC  'M00M&SYSNDX'            DEFAULT NAME               00089900
.*                                                                      00090000
.XLAB2        ANOP  ,                                                   00090100
              AIF   ('&XMF' EQ 'L').XLAB3                               00090200
&M0M0001 DS    0H                             IEFPPSCN-0                00090300
.XLAB3        ANOP  ,                                                   00090400
.*******************************************************************    00090500
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              00090600
.*******************************************************************    00090700
              PUSH  PRINT                                               00090800
              AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON          00090900
              PRINT OFF         ++ PR01                                 00091000
              AGO   .ZPRNTXX                                            00091100
.ZPRINTX      PRINT ON                                                  00091200
.ZPRNTXX      ANOP  ,                                                   00091300
.********************************************************************   00091400
.***AL.L01 INTERNAL ARRAY TO PRODUCE FORMATTED CODE                     00091500
.********************************************************************   00091600
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       00091700
                      LCLA  &ZOPN1         INVOCATION INDEX             00091800
                      LCLC  &ZOPL(4095)    LABEL                        00091900
                      LCLC  &ZOPO(4095)    OPERATION                    00092000
                      LCLC  &ZOPV(4095)    VALUE                        00092100
                      LCLC  &ZOPD(4095)    DESCRIPTION                  00092200
.*                                                                      00092300
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     00092400
.******************************************************************     00092500
.***AL.L10 IEFPPSCN FMT=LIST MF=S!L PARAMETERS                          00092600
.******************************************************************     00092700
                      AIF   ('&XMF' EQ 'L').ZLMFSL2                     00092800
                      AIF   ('&XMF' NE 'S').ZLMFSLX                     00092900
&XMFCTRL              SETC  '#Z'.'&SYSNDX'.'A'                          00093000
&XMFATTR              SETC  '0D'                                        00093100
.*                                                                      00093200
&ZOPN                 SETA  &ZOPN+1                                     00093300
&ZOPL(&ZOPN)          SETC  ' '                                         00093400
                      AIF   (&SYSALVL NE 0).ZALVL6A                     00093500
&ZOPO(&ZOPN)          SETC  'B'                                         00093600
&ZOPV(&ZOPN)          SETC  '&XMFCTRL.S'                                00093700
                      AGO   .ZALVL6B                                    00093800
.ZALVL6A              ANOP                                              00093900
&ZOPO(&ZOPN)          SETC  'CNOP'                                      00094000
&ZOPV(&ZOPN)          SETC  '4,8'                                       00094100
&ZOPN                 SETA  &ZOPN+1                                     00094200
&ZOPL(&ZOPN)          SETC  ' '                                         00094300
&ZOPO(&ZOPN)          SETC  'BRAS'                                      00094400
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL.S'                              00094500
.ZALVL6B              ANOP                                              00094600
&ZOPD(&ZOPN)          SETC  '++ IEFPPSCN ARG PARMS'                     00094700
.*                                                                      00094800
&ZOPN                 SETA  &ZOPN+1                                     00094900
&ZOPL(&ZOPN)          SETC  ' '                                         00095000
&ZOPO(&ZOPN)          SETC  'SPACE'                                     00095100
&ZOPV(&ZOPN)          SETC  '1'                                         00095200
&ZOPD(&ZOPN)          SETC  ' '                                         00095300
.*                                                                      00095400
.ZLMFSL2              ANOP  ,                                           00095500
.*-------------------------------------------------------------------   00095600
.***AM.L00  IEFPPSCN FMT=LIST name                                      00095700
                      AIF   ('&XMF' NE 'L').ZLMFSL2M                    00095800
&ZOPN                 SETA &ZOPN+1                                      00095900
&ZOPL(&ZOPN)          SETC '&M0M0001'                                   00096000
&ZOPO(&ZOPN)          SETC 'EQU'                                        00096100
&ZOPV(&ZOPN)          SETC '&XMFCTRL'                                   00096200
&ZOPD(&ZOPN)          SETC '++ IEFPPSCN NAME'                           00096300
.ZLMFSL2M             ANOP  ,                                           00096400
.*-------------------------------------------------------------------   00096500
.***AM.L01  IEFPPSCN FMT=LIST PARAMETERS                                00096600
&ZOPN                 SETA &ZOPN+1                                      00096700
&ZOPL(&ZOPN)          SETC '&XMFCTRL'                                   00096800
&ZOPO(&ZOPN)          SETC 'DS'                                         00096900
&ZOPV(&ZOPN)          SETC '&XMFATTR'                                   00097000
&ZOPD(&ZOPN)          SETC '++ IEFPPSCN PARM LIST'                      00097100
.*-------------------------------------------------------------------   00097200
.***AM.L09  XPPSCID CL4                                                 00097300
&ZOPN                 SETA &ZOPN+1                                      00097400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPPSCID'                          00097500
&ZOPO(&ZOPN)          SETC 'DS'                                         00097600
&ZOPV(&ZOPN)          SETC 'CL4'                                        00097700
&ZOPD(&ZOPN)          SETC '++ CONSTANT  XPPSCID'                       00097800
.*-------------------------------------------------------------------   00097900
.***AM.L09  XPLISTLEN XL2                                               00098000
&ZOPN                 SETA &ZOPN+1                                      00098100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPLISTLEN'                        00098200
&ZOPO(&ZOPN)          SETC 'DS'                                         00098300
&ZOPV(&ZOPN)          SETC 'XL2'                                        00098400
&ZOPD(&ZOPN)          SETC '++ INPUT  XPLISTLEN'                        00098500
.*-------------------------------------------------------------------   00098600
.***AM.L02 XVERSION XL1                                                 00098700
&ZOPN                 SETA &ZOPN+1                                      00098800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XVERSION'                         00098900
&ZOPO(&ZOPN)          SETC 'DS'                                         00099000
&ZOPV(&ZOPN)          SETC 'XL1'                                        00099100
&ZOPD(&ZOPN)          SETC '++ INPUT XVERSION'                          00099200
.*-------------------------------------------------------------------   00099300
.***AM.L03 XPPTFLAG BL.8                                                00099400
&ZOPN                 SETA &ZOPN+1                                      00099500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPPTFLAG'                         00099600
&ZOPO(&ZOPN)          SETC 'DS'                                         00099700
&ZOPV(&ZOPN)          SETC 'BL.8'                                       00099800
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'                             00099900
.*                                                                      00100000
&ZOPN                 SETA  &ZOPN+1                                     00100100
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_RETRIEVE'               00100200
&ZOPO(&ZOPN)          SETC  'EQU'                                       00100300
&ZOPV(&ZOPN)          SETC  'B''10000000'''                             00100400
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00100500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).RETRIEVE'                     00100600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00100700
.*                                                                      00100800
&ZOPN                 SETA  &ZOPN+1                                     00100900
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_NEXT'                   00101000
&ZOPO(&ZOPN)          SETC  'EQU'                                       00101100
&ZOPV(&ZOPN)          SETC  'B''01000000'''                             00101200
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00101300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).NEXT'                         00101400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00101500
.*                                                                      00101600
&ZOPN                 SETA  &ZOPN+1                                     00101700
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_END'                    00101800
&ZOPO(&ZOPN)          SETC  'EQU'                                       00101900
&ZOPV(&ZOPN)          SETC  'B''00100000'''                             00102000
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00102100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).END'                          00102200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00102300
.*-------------------------------------------------------------------   00102400
.***AM.L09 ADDR XPROGRAM A                                              00102500
&ZOPN                 SETA &ZOPN+1                                      00102600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPROGRAM_ADDR'                    00102700
&ZOPO(&ZOPN)          SETC 'DS'                                         00102800
&ZOPV(&ZOPN)          SETC 'A'                                          00102900
&ZOPD(&ZOPN)          SETC '++ &ZXPROGRAM ADDR XPROGRAM'                00103000
.*-------------------------------------------------------------------   00103100
.***AM.L09 ADDR XTOKEN A                                                00103200
&ZOPN                 SETA &ZOPN+1                                      00103300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XTOKEN_ADDR'                      00103400
&ZOPO(&ZOPN)          SETC 'DS'                                         00103500
&ZOPV(&ZOPN)          SETC 'A'                                          00103600
&ZOPD(&ZOPN)          SETC '++ &ZXTOKEN ADDR XTOKEN'                    00103700
.*-------------------------------------------------------------------   00103800
.***AM.L09 ADDR XPPTINFO A                                              00103900
&ZOPN                 SETA &ZOPN+1                                      00104000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPPTINFO_ADDR'                    00104100
&ZOPO(&ZOPN)          SETC 'DS'                                         00104200
&ZOPV(&ZOPN)          SETC 'A'                                          00104300
&ZOPD(&ZOPN)          SETC '++ &ZXPPTINFO ADDR XPPTINFO'                00104400
.*-------------------------------------------------------------------   00104500
.***AM.L10 END OF IEFPPSCN LIST PARAMETERS                              00104600
&ZOPN                 SETA &ZOPN+1                                      00104700
&ZOPL(&ZOPN)          SETC '&XMFCTRL.L'                                 00104800
&ZOPO(&ZOPN)          SETC 'EQU'                                        00104900
&ZOPV(&ZOPN)          SETC '*-&XMFCTRL'                                 00105000
&ZOPD(&ZOPN)          SETC '++ LENGTH OF PLIST'                         00105100
.*                                                                      00105200
&ZOPN                 SETA &ZOPN+1                                      00105300
&ZOPL(&ZOPN)          SETC ' '                                          00105400
&ZOPO(&ZOPN)          SETC 'SPACE'                                      00105500
&ZOPV(&ZOPN)          SETC '1'                                          00105600
&ZOPD(&ZOPN)          SETC ' '                                          00105700
.*-------------------------------------------------------------------   00105800
.***AL.L12 IEFPPSCN FMT=LIST MF=S!L PARAMETERS                          00105900
                      AIF   ('&XMF' EQ 'L').ZMFLX  DONE IF MF=L         00106000
.*                                                                      00106100
&ZOPN                 SETA  &ZOPN+1                                     00106200
&ZOPL(&ZOPN)          SETC  '&XMFCTRL.S'                                00106300
&ZOPO(&ZOPN)          SETC  'DC'                                        00106400
&ZOPV(&ZOPN)          SETC  '0H''0'''                                   00106500
&ZOPD(&ZOPN)          SETC  '++ IEFPPSCN ARG PARMS'                     00106600
.*                                                                      00106700
.ZLMFSLX              ANOP  ,                                           00106800
.*-------------------------------------------------------------------   00106900
.***AL.L13 SET ZPLLEN TO ITS APPROPRIATE VALUE                          00107000
&ZPLLEN               SETA 20                                           00107100
.*                                                                      00107200
.******************************************************************     00107300
.***AI.L01 IEFPPSCN FMT=LIST FILL IN PARAMETER AREA                     00107400
.******************************************************************     00107500
                      ACTR  10000                                       00107600
&ZCVAL                SETC  'LA'           ASSUME XA MODE               00107700
                      AIF   ('&SYSASCE' EQ 'P').ZIMFXA  SYSSTATE PRI    00107800
&ZCVAL                SETC  'LAE'          XAX MODE                     00107900
.ZIMFXA               ANOP ,                                            00108000
.*                                                                      00108100
                      AIF   ('&XMFCTRL'(1,1) NE '(').ZIMFN2  NOT GPR    00108200
&ZCGPR                SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)  GET GPR         00108300
                      AIF   ('&ZCGPR' EQ 'GPR1').ZIMFNX                 00108400
                      AIF   ('&ZCGPR' EQ 'GPR01').ZIMFNX                00108500
                      AIF   ('&ZCGPR' EQ 'REG1').ZIMFNX                 00108600
                      AIF   ('&ZCGPR' EQ 'REG01').ZIMFNX                00108700
                      AIF   ('&ZCGPR' EQ 'R1').ZIMFNX                   00108800
                      AIF   ('&ZCGPR' EQ '1').ZIMFNX                    00108900
                      AIF   ('&ZCGPR' EQ '01').ZIMFNX                   00109000
&ZOPN                 SETA  &ZOPN+1                                     00109100
&ZOPL(&ZOPN)          SETC  ' '                                         00109200
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00109300
&ZOPV(&ZOPN)          SETC  '1,0(,&ZCGPR)'                              00109400
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00109500
                      AGO   .ZIMFNX                                     00109600
.*                                                                      00109700
.ZIMFN2               ANOP ,                                            00109800
                      AIF   (&SYSALVL EQ 0).ZIMFNX1                     00109900
                      AIF   ('&XMF' NE 'S').ZIMFNX1                     00110000
                      AIF   ('&ZCVAL' NE 'LAE').ZIMFNX                  00110100
&ZOPN                 SETA  &ZOPN+1                                     00110200
&ZOPL(&ZOPN)          SETC  ' '                                         00110300
&ZOPO(&ZOPN)          SETC  'LAE'                                       00110400
&ZOPV(&ZOPN)          SETC  '1,0(1,0)'                                  00110500
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00110600
                      AGO   .ZIMFNX                                     00110700
.ZIMFNX1              ANOP ,                                            00110800
&ZOPN                 SETA  &ZOPN+1                                     00110900
&ZOPL(&ZOPN)          SETC  ' '                                         00111000
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00111100
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL'                                00111200
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00111300
.ZIMFNX               ANOP ,                                            00111400
.********************************************************************   00111500
.***AI.L02 IEFPPSCN FMT=LIST INITIALIZE PARAMETER AREA                  00111600
.********************************************************************   00111700
.***AI.L03 MF=(SLE)                                                     00111800
                      AIF   ('&XMF' EQ 'L').ZIMFLX                      00111900
.*                                                                      00112000
&ZOPN                 SETA  &ZOPN+1                                     00112100
&ZOPL(&ZOPN)          SETC  ' '                                         00112200
&ZOPO(&ZOPN)          SETC  'XC'                                        00112300
&ZOPV(&ZOPN)          SETC  '0(&ZPLLEN,1),0(1)'                         00112400
&ZOPD(&ZOPN)          SETC  '++ INITIALIZE'                             00112500
.ZIMFLX               ANOP  ,                                           00112600
.*-------------------------------------------------------------------   00112700
.***AI.L60 XPPSCID CL4                                                  00112800
&ZOPN                 SETA  &ZOPN+1                                     00112900
&ZOPL(&ZOPN)          SETC  ' '                                         00113000
&ZOPO(&ZOPN)          SETC  'MVC'                                       00113100
&ZOPV(&ZOPN)          SETC  '0(4,1),=CL4''PPSC'''                       00113200
&ZOPD(&ZOPN)          SETC  '++ CL4 CONSTANT'                           00113300
.*-------------------------------------------------------------------   00113400
.***AI.L04 XPLISTLEN XL2                                                00113500
&ZOPN                 SETA  &ZOPN+1                                     00113600
&ZOPL(&ZOPN)          SETC  ' '                                         00113700
&ZOPO(&ZOPN)          SETC  'MVC'                                       00113800
&ZOPV(&ZOPN)          SETC  '4(2,1),=AL2(&ZPLLEN)'                      00113900
&ZOPD(&ZOPN)          SETC  '++ INPUT XPLISTLEN XL2'                    00114000
.*-------------------------------------------------------------------   00114100
.***AI.L05 XPPTFLAG BL1                                                 00114200
&ZW                   SETC  ''                                          00114300
&ZCLNG                SETC  ''             RESET BIT ON FLAG            00114400
.*-------------------------------------------------------------------   00114500
.***AI.L08 XPPTFLAG "RETRIEVE"                                          00114600
.***      BL1'1XXXXXXX'                                                 00114700
         AIF   ('&XREQUEST' NE 'RETRIEVE').ZI5A                         00114800
&ZW                   SETC  '&ZW.1'                                     00114900
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00115000
                      AGO   .ZI5C                                       00115100
.*                                                                      00115200
.ZI5A                 ANOP  ,                                           00115300
&ZW                   SETC  '&ZW.0'                                     00115400
.ZI5C                 ANOP  ,                                           00115500
.*-------------------------------------------------------------------   00115600
.***AI.L08 XPPTFLAG "NEXT"                                              00115700
.***      BL1'X1XXXXXX'                                                 00115800
         AIF   ('&XREQUEST' NE 'NEXT').ZI6A                             00115900
&ZW                   SETC  '&ZW.1'                                     00116000
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00116100
                      AGO   .ZI6C                                       00116200
.*                                                                      00116300
.ZI6A                 ANOP  ,                                           00116400
&ZW                   SETC  '&ZW.0'                                     00116500
.ZI6C                 ANOP  ,                                           00116600
.*-------------------------------------------------------------------   00116700
.***AI.L08 XPPTFLAG "END"                                               00116800
.***      BL1'XX1XXXXX'                                                 00116900
         AIF   ('&XREQUEST' NE 'END').ZI7A                              00117000
&ZW                   SETC  '&ZW.100000'                                00117100
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00117200
                      AGO   .ZI7C                                       00117300
.*                                                                      00117400
.ZI7A                 ANOP  ,                                           00117500
&ZW                   SETC  '&ZW.000000'                                00117600
.ZI7C                 ANOP  ,                                           00117700
.*-------------------------------------------------------------------   00117800
.***AI.L11 XPPTFLAG BL1                                                 00117900
                      AIF   ('&ZCLNG' NE 'YES').ZI7E  ALL ZERO BITS     00118000
&ZOPN                 SETA  &ZOPN+1                                     00118100
&ZOPL(&ZOPN)          SETC  ' '                                         00118200
&ZOPO(&ZOPN)          SETC  'OI'                                        00118300
&ZOPV(&ZOPN)          SETC  '7(1),B''&ZW'''                             00118400
&ZOPD(&ZOPN)          SETC  '++ INPUT BL1'                              00118500
.ZI7E                 ANOP  ,                                           00118600
.*-------------------------------------------------------------------   00118700
.***AI.L18 ADDR XPROGRAM A                                              00118800
         AIF   ('&XPROGRAM' NE '*').ZI8                                 00118900
&ZXPROGRAM            SETC  ''             RESET INPUT/OUTPUT           00119000
.ZI8                  ANOP  ,                                           00119100
.*-------------------------------------------------------------------   00119200
.***AI.L19 ADDR XPROGRAM A                                              00119300
                      AIF   ('&ZXPROGRAM' EQ '').ZI8H                   00119400
&ZCLNG                SETC  '&XPROGRAM'                                 00119500
&ZCGPR                SETC  '14'                                        00119600
         AIF   ('&XPROGRAM'(1,1) EQ '(').ZI8F  IN GPR                   00119700
.*                                                                      00119800
&ZOPN                 SETA  &ZOPN+1                                     00119900
&ZOPL(&ZOPN)          SETC  ' '                                         00120000
&ZOPO(&ZOPN)          SETC  'LA'                                        00120100
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             00120200
&ZOPD(&ZOPN)          SETC  '++ &ZXPROGRAM XPROGRAM'                    00120300
.*                                                                      00120400
                      AGO   .ZI8G                                       00120500
.*                                                                      00120600
.ZI8F                 ANOP  ,                                           00120700
&ZCGPR   SETC  '&XPROGRAM'(2,K'&XPROGRAM-2)                             00120800
.*                                                                      00120900
.ZI8G                 ANOP  ,                                           00121000
.*                                                                      00121100
&ZOPN                 SETA  &ZOPN+1                                     00121200
&ZOPL(&ZOPN)          SETC  ' '                                         00121300
&ZOPO(&ZOPN)          SETC  'ST'                                        00121400
&ZOPV(&ZOPN)          SETC  '&ZCGPR,8(,1)'                              00121500
&ZOPD(&ZOPN)          SETC  '++ &ZXPROGRAM XPROGRAM'                    00121600
.*                                                                      00121700
.ZI8H                 ANOP  ,                                           00121800
.*-------------------------------------------------------------------   00121900
.***AI.L19 ADDR XTOKEN A                                                00122000
                      AIF   ('&ZXTOKEN' EQ '').ZI9H                     00122100
&ZCLNG                SETC  '&XTOKEN'                                   00122200
&ZCGPR                SETC  '14'                                        00122300
         AIF   ('&XTOKEN'(1,1) EQ '(').ZI9F  IN GPR                     00122400
        AIF   ('&XTOKEN' EQ '0').ZI9H                                   00122500
.*                                                                      00122600
.*                                                                      00122700
&ZOPN                 SETA  &ZOPN+1                                     00122800
&ZOPL(&ZOPN)          SETC  ' '                                         00122900
&ZOPO(&ZOPN)          SETC  'LA'                                        00123000
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             00123100
&ZOPD(&ZOPN)          SETC  '++ &ZXTOKEN XTOKEN'                        00123200
.*                                                                      00123300
                      AGO   .ZI9G                                       00123400
.*                                                                      00123500
.ZI9F                 ANOP  ,                                           00123600
&ZCGPR   SETC  '&XTOKEN'(2,K'&XTOKEN-2)                                 00123700
.*                                                                      00123800
.ZI9G                 ANOP  ,                                           00123900
.*                                                                      00124000
&ZOPN                 SETA  &ZOPN+1                                     00124100
&ZOPL(&ZOPN)          SETC  ' '                                         00124200
&ZOPO(&ZOPN)          SETC  'ST'                                        00124300
&ZOPV(&ZOPN)          SETC  '&ZCGPR,12(,1)'                             00124400
&ZOPD(&ZOPN)          SETC  '++ &ZXTOKEN XTOKEN'                        00124500
.*                                                                      00124600
.ZI9H                 ANOP  ,                                           00124700
.*-------------------------------------------------------------------   00124800
.***AI.L18 ADDR XPPTINFO A                                              00124900
         AIF   ('&XPPTINFO' NE '*').ZI10                                00125000
&ZXPPTINFO            SETC  ''             RESET INPUT/OUTPUT           00125100
.ZI10                 ANOP  ,                                           00125200
.*-------------------------------------------------------------------   00125300
.***AI.L19 ADDR XPPTINFO A                                              00125400
                      AIF   ('&ZXPPTINFO' EQ '').ZI10H                  00125500
&ZCLNG                SETC  '&XPPTINFO'                                 00125600
&ZCGPR                SETC  '14'                                        00125700
         AIF   ('&XPPTINFO'(1,1) EQ '(').ZI10F  IN GPR                  00125800
.*                                                                      00125900
&ZOPN                 SETA  &ZOPN+1                                     00126000
&ZOPL(&ZOPN)          SETC  ' '                                         00126100
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00126200
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             00126300
&ZOPD(&ZOPN)          SETC  '++ &ZXPPTINFO XPPTINFO'                    00126400
.*                                                                      00126500
                      AGO   .ZI10G                                      00126600
.*                                                                      00126700
.ZI10F                ANOP  ,                                           00126800
&ZCGPR   SETC  '&XPPTINFO'(2,K'&XPPTINFO-2)                             00126900
.*                                                                      00127000
.ZI10G                ANOP  ,                                           00127100
.*                                                                      00127200
&ZOPN                 SETA  &ZOPN+1                                     00127300
&ZOPL(&ZOPN)          SETC  ' '                                         00127400
&ZOPO(&ZOPN)          SETC  'ST'                                        00127500
&ZOPV(&ZOPN)          SETC  '&ZCGPR,16(,1)'                             00127600
&ZOPD(&ZOPN)          SETC  '++ &ZXPPTINFO XPPTINFO'                    00127700
.*                                                                      00127800
.ZI10H                ANOP  ,                                           00127900
.*-------------------------------------------------------------------   00128000
&ZOPN1                SETA &ZOPN                                        00128100
.*******************************************************************    00128200
.***  PROCESS IEFPPSCN OUTPUT PARAMETERS                                00128300
.*******************************************************************    00128400
                      ACTR  10000                                       00128500
.*******************************************************************    00128600
.***AO.X02  RETURN CODE PROCESSING                                      00128700
.*******************************************************************    00128800
                      AIF   (N'&RETCODE LE 0).ZMRETX                    00128900
                      AIF   ('&XRETCODE'(1,1) EQ '(').ZMRET2            00129000
                      AIF   ('&XRETCODE' EQ 'GPR15').ZMRETX             00129100
                      AIF   ('&XRETCODE' EQ 'REG15').ZMRETX             00129200
                      AIF   ('&XRETCODE' EQ 'R15').ZMRETX               00129300
                      AIF   ('&XRETCODE' EQ '15').ZMRETX                00129400
&ZOPN                 SETA  &ZOPN+1                                     00129500
&ZOPL(&ZOPN)          SETC  ' '                                         00129600
&ZOPO(&ZOPN)          SETC  'ST'                                        00129700
&ZOPV(&ZOPN)          SETC  '15,&XRETCODE'                              00129800
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00129900
                      AGO   .ZMRETX                                     00130000
.*                                                                      00130100
.ZMRET2               ANOP  ,                                           00130200
&ZCGPR                SETC  '&XRETCODE'(2,K'&XRETCODE-2)                00130300
                      AIF   ('&ZCGPR' EQ 'GPR15').ZMRETX                00130400
                      AIF   ('&ZCGPR' EQ 'REG15').ZMRETX                00130500
                      AIF   ('&ZCGPR' EQ 'R15').ZMRETX                  00130600
                      AIF   ('&ZCGPR' EQ '15').ZMRETX                   00130700
&ZOPN                 SETA  &ZOPN+1                                     00130800
&ZOPL(&ZOPN)          SETC  ' '                                         00130900
&ZOPO(&ZOPN)          SETC  '&ZMAC_LR'                                  00131000
&ZOPV(&ZOPN)          SETC  '&ZCGPR,15'                                 00131100
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00131200
.ZMRETX               ANOP  ,                                           00131300
.*******************************************************************    00131400
.***AO.X04  LABEL FOR MF=L PROCESSING                                   00131500
.*******************************************************************    00131600
.ZMFLX                ANOP  ,              MF=L PROCESSING              00131700
.*******************************************************************    00131800
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               00131900
.*******************************************************************    00132000
                      ACTR  10000                                       00132100
.*                                                                      00132200
                      LCLA  &ZLC           COLUMN POSITION              00132300
                      LCLA  &ZOPX          LIST TABLE INDEX             00132400
                      LCLC  &ZLL           LABEL                        00132500
                      LCLC  &ZLOP          OPERATION                    00132600
                      LCLC  &ZLV           VALUE                        00132700
                      LCLC  &ZLD           DESCRIPTION                  00132800
.*                                                                      00132900
&ZOPX                 SETA  1                                           00133000
.ZL2                  AIF   (&ZOPX GT &ZOPN1).ZLX  B IF DONE            00133100
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00133200
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00133300
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00133400
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00133500
                      AIF   (K'&ZLD LE 0).ZL5                           00133600
&ZLC                  SETA  35             COMMENT COLUMN               00133700
                      AIF   ('&ZLD'(1,1) NE '*').ZL3                    00133800
&ZLC                  SETA  33             COMMMENT COLUMN              00133900
.ZL3                  AIF   (K'&ZLV GE &ZLC-16-1).ZL4                   00134000
&ZLV                  SETC  '&ZLV'.' '                                  00134100
                      AGO   .ZL3                                        00134200
.*                                                                      00134300
.ZL4                  ANOP  ,                                           00134400
&ZLV                  SETC  '&ZLV'.' '                                  00134500
.ZL5                  ANOP  ,                                           00134600
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00134700
.*                                                                      00134800
&ZLL     &ZLOP &ZLV                                                     00134900
.*                                                                      00135000
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00135100
                      AGO   .ZL2           CONTINUE LOOPING             00135200
.*                                                                      00135300
.ZLX                  ANOP  ,                                           00135400
                      AIF   ('&XMF' EQ 'L').ZLINKX  MF=L                00135500
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00135600
         L     15,16(0,0)               CVT address                     00135700
         L     15,CVTJESCT-CVT(,15)     JESCT address                   00135800
         L     15,JESCTEXT-JESCT(,15)   JESCT ext. address              00135900
         L     15,JESPPTSC-JESPEXT(,15) PPT scan rtn. address           00136000
         BASSM 14,15                    Call PPT scan routine           00136100
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00136200
.ZLINKX               ANOP  ,                                           00136300
.*******************************************************************    00136400
.***AP.X01  FORMAT GENERATED CODE                                       00136500
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            00136600
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00136700
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00136800
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00136900
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00137000
                      AIF   (K'&ZLD LE 0).ZL51                          00137100
&ZLC                  SETA  35             COMMENT COLUMN               00137200
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   00137300
&ZLC                  SETA  33             COMMENT COLUMN               00137400
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  00137500
&ZLV                  SETC  '&ZLV'.' '                                  00137600
                      AGO   .ZL31                                       00137700
.*                                                                      00137800
.ZL41                 ANOP  ,                                           00137900
&ZLV                  SETC  '&ZLV'.' '                                  00138000
.ZL51                 ANOP  ,                                           00138100
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00138200
.*                                                                      00138300
&ZLL     &ZLOP &ZLV                                                     00138400
.*                                                                      00138500
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00138600
                      AGO   .ZL21          CONTINUE LOOPING             00138700
.*                                                                      00138800
.ZLX1                 ANOP  ,                                           00138900
.*******************************************************************    00139000
.***AP.X02  END OF IEFPPSCN MACRO                                       00139100
&ZIEFPPSCN            SETC  'YES'          SET IEFPPSCN USED            00139200
         POP   PRINT                                                    00139300
*                                            IEFPPSCN-0                 00139400
         SPACE 1                                                        00139500
.ZLX2                 ANOP  ,                                           00139600
         MEND                                                           00139700
**********************************************************************/ 00139800
*/**** START OF SPECIFICATIONS **************************************** 00139900
*                                                                     * 00140000
*                                                                     * 00140100
*01* MACRO NAME:  IEFPPSCN                              -03/30/06-<0> * 00140200
*                                                                     * 00140300
*                                                                     * 00140400
*01* DESCRIPTIVE NAME:  Program Properties Table scan                 * 00140500
*                                                                     * 00140600
*01* PROPRIETARY STATEMENT:                                           * 00140700
*                                                                     * 00140800
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00140900
*     5694-A01 (C) COPYRIGHT IBM CORP. 1990, 2006                     * 00141000
*                                                                     * 00141100
* STATUS= HBB7730                                                     * 00141200
*                                                                     * 00141300
*                                                                     * 00141400
*                                                                     * 00141500
*01* FUNCTION:                                                        * 00141600
*       See the IEFPPSCN macro prologue for details.                  * 00141700
*                                                                     * 00141800
*01* INPUT:                                                           * 00141900
*                                                                     * 00142000
*            ?IEFPPSCN     REQUEST(»RETRIEVE!NEXT!                    * 00142100
*                                   ENDº)                             * 00142200
*                         ÝPPTINFO(»xpptinfo!*º)¨                     * 00142300
*                         ÝPROGRAM(»xprogram!*º)¨                     * 00142400
*                         ÝTOKEN(»xtoken!0º)¨                         * 00142500
*                         ÝRETCODE(xretcode)¨                         * 00142600
*                         ÝPLISTVER(»xplistver!IMPLIED_VERSIONº)¨     * 00142700
*                        ÐÝMF(S)¨                                     * 00142800
*                        ÔÝMF(L,xmfctrl»,xmfattr!BDY(DWORD)º)¨        * 00142900
*                        ¿ÝMF(E,xmfctrl»,COMPLETEº)¨                  * 00143000
*                                                                     * 00143100
****** END OF SPECIFICATIONS *****************************************/ 00143200
*/*PB.ECHO01 MACRO INVOCATION ECHO-----------------------------------*/ 00143300
*  ANS('@SPACE;') NORESCAN COL(MACLMAR);                                00143400
*  ANS('/* ? IEFPPSCN '!!MACLIST!!' ')                                  00143500
*      NORESCAN COL(MACLMAR+5);    /* START ECHO */                     00143600
*                                                                       00143700
*  DCL ZELO  FIXED;                                                     00143800
*  DCL ZECOL FIXED;                                                     00143900
*                                                                       00144000
*  ZELO=1;     /* STARTING COLUMN */                                    00144100
*  DO WHILE ZELO<=LENGTH(MACKEYS);  /* PARENTHSIS SCAN */               00144200
*    ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');                    00144300
*    IF ZECOL>0                                                         00144400
*      THEN                                                             00144500
*        DO;   /* PARENTHESIS FOUND */                                  00144600
*          ANS(MACKEYS(ZELO:ZELO+ZECOL-1)!!' ')                         00144700
*             NORESCAN COL(MACLMAR+5);                                  00144800
*          ZELO=ZELO+ZECOL;        /* NEXT PORTION */                   00144900
*        END;                                                           00145000
*      ELSE                                                             00145100
*        DO;   /* REMAINING KEYS */                                     00145200
*          ANS(MACKEYS(ZELO:LENGTH(MACKEYS)))                           00145300
*             NORESCAN COL(MACLMAR+5);                                  00145400
*          ZELO=LENGTH(MACKEYS)+1;                                      00145500
*        END;                                                           00145600
*  END;                                                                 00145700
*  ANS(' -03/30/06-0- */')                                              00145800
*      NORESCAN COL(MACLMAR+5);    /* END ECHO */                       00145900
*/********************************************************************/ 00146000
*/*PV.DCL01 MACRO DECLARES AND CODE GENERATION CONTROLS              */ 00146100
*/********************************************************************/ 00146200
*  DCL ZPRINT  EXTERNAL; DEACT ZPRINT; /* YES=PRINT, NO=NO PRINT     */ 00146300
*  DCL ZTEST   EXTERNAL; DEACT ZTEST;  /* YES=TEST, NO=NO TEST       */ 00146400
*  DCL ZSYSTEM EXTERNAL; DEACT ZSYSTEM;/* PCCODE10, MVS, SAK, VM     */ 00146500
*                                                                       00146600
*  DCL   ZIEFPPSCN CHAR EXTERNAL; /* YES=USED AT LEAST ONCE          */ 00146700
*  DEACT ZIEFPPSCN;                                                     00146800
*                                                                       00146900
*  DCL ZMACRET FIXED; DEACT ZMACRET;                                    00147000
*  ZMACRET=0;                   /* MACRO COMPILE RETURN CODE         */ 00147100
*                                                                       00147200
*  DCL ZMS CHAR;   DEACT ZMS;   /* ERROR MESSAGE                     */ 00147300
*  DCL ZCVAL CHAR; DEACT ZCVAL; /* ERROR MESSAGE WORK AREA           */ 00147400
*                                                                       00147500
*  DCL ZI FIXED;  DEACT ZI;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00147600
*  DCL ZJ FIXED;  DEACT ZJ;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00147700
*  DCL ZK FIXED;  DEACT ZK;     /* INDEX FOR RANGE COLON (:)         */ 00147800
*  DCL ZL FIXED;  DEACT ZL;     /* INDEX FOR RANGE VALUE CHECKING    */ 00147900
*  DCL ZLO FIXED; DEACT ZLO;    /* LOW RANGE VALUE                   */ 00148000
*  DCL ZHI FIXED; DEACT ZHI;    /* HIGH RANGE VALUE                  */ 00148100
*  DCL ZW CHAR;   DEACT ZW;     /* WORK AREA FOR RANGE VALUE SUBLIST */ 00148200
*  DCL ZN FIXED;  DEACT ZN;     /* NUMERIC WORK VARIABLE             */ 00148300
*  DCL ZC CHAR;   DEACT ZC;     /* CHARACTER WORK VARIABLE           */ 00148400
*  DCL ZMAXINVOCLEN FIXED; DEACT ZMAXINVOCLEN;  /* INVOCATION LENGTH */ 00148500
*  DCL ZPLLEN FIXED; DEACT ZPLLEN;        /* PARAMETER LIST LENGTH   */ 00148600
*                                                                       00148700
*  DCL ZPRMMAX FIXED;           /* MAXIMUM PARM LIST SIZE            */ 00148800
*  DCL ZPRMNUM FIXED;           /* PARAMETER ARRAY INDEX             */ 00148900
*  DCL ZPRM(100);               /* PARAMETER ENTRY                   */ 00149000
*  DCL EHAMAXLEN FIXED EXTERNAL;   /* MAX ILIST SIZE FOR PARM LISTS  */ 00149100
*  DCL EHAREGS CHARACTER EXTERNAL; /* REG DCLS                       */ 00149200
*  DCL EHAREGS64 CHARACTER EXTERNAL; /* REG DCLS                     */ 00149300
*  DCL EHALIST CHARACTER EXTERNAL; /* STANDARD PARM LIST GENERATION  */ 00149400
*/*******************************************************************/  00149500
*/*PV.XVAR01 DECLARE ALL MACRO PARAMETER VARIABLES                  */  00149600
*/*******************************************************************/  00149700
*  DCL XREQUEST;  DEACT XREQUEST;  /***PV.XVAR02 INPUT VALUE */         00149800
*  DCL ZXREQUEST; DEACT ZXREQUEST;  /***INPUT/OUTPUT CONTROL */         00149900
*  DCL XPPTINFO;  DEACT XPPTINFO;  /***PV.XVAR02 INOUT NAME */          00150000
*  DCL ZXPPTINFO; DEACT ZXPPTINFO;  /***INPUT/OUTPUT CONTROL */         00150100
*  DCL XPROGRAM;  DEACT XPROGRAM;  /***PV.XVAR02 INPUT NAME */          00150200
*  DCL ZXPROGRAM; DEACT ZXPROGRAM;  /***INPUT/OUTPUT CONTROL */         00150300
*  DCL XTOKEN;  DEACT XTOKEN;      /***PV.XVAR02 INOUT NAME */          00150400
*  DCL ZXTOKEN; DEACT ZXTOKEN;     /***INPUT/OUTPUT CONTROL */          00150500
*  DCL XRETCODE;  DEACT XRETCODE;  /***PV.XVAR02 OUTPUT NAME */         00150600
*  DCL ZXRETCODE; DEACT ZXRETCODE;  /***INPUT/OUTPUT CONTROL */         00150700
*  DCL XPLISTVER FIXED;  DEACT XPLISTVER;  /***PV.XVAR02 INPUT VALUE */ 00150800
*  DCL ZXPLISTVER; DEACT ZXPLISTVER;  /***INPUT/OUTPUT CONTROL */       00150900
*  DCL XMF;  DEACT XMF;            /***PV.XVAR02 INPUT VALUE */         00151000
*  DCL ZXMF; DEACT ZXMF;           /***INPUT/OUTPUT CONTROL */          00151100
*  DCL XMFCTRL;  DEACT XMFCTRL;    /***PV.XVAR02 INPUT NAME */          00151200
*  DCL ZXMFCTRL; DEACT ZXMFCTRL;   /***INPUT/OUTPUT CONTROL */          00151300
*  DCL XMFATTR;  DEACT XMFATTR;    /***PV.XVAR02 INPUT VALUE */         00151400
*  DCL ZXMFATTR; DEACT ZXMFATTR;   /***INPUT/OUTPUT CONTROL */          00151500
*  DCL XMFSCK;  DEACT XMFSCK;      /***PV.XVAR02 INPUT VALUE */         00151600
*  DCL ZXMFSCK; DEACT ZXMFSCK;     /***INPUT/OUTPUT CONTROL */          00151700
*/********************************************************************/ 00151800
*/***PC.PLV01  PROCESS PLISTVER                                      */ 00151900
*/********************************************************************/ 00152000
*  IF PLISTVER(1) = 'MAX' THEN                                          00152100
*    XPLISTVER=0;                                                       00152200
*  ELSE                                                                 00152300
*    XPLISTVER=0;                                                       00152400
*  IF PLISTVER^=''                                                      00152500
*     & PLISTVER(1)^='IMPLIED_VERSION'                                  00152600
*     & PLISTVER(1)^='MAX'                                              00152700
*    THEN                                                               00152800
*      DO;                                                              00152900
*                                                                       00153000
*        ZCVAL='';                           /* ERROR FLAG */           00153100
*        IF PLISTVER='PLISTVER' ! PLISTVER='()'  /*CHECK ENTRY*/        00153200
*          THEN                                                         00153300
*            DO;                                                        00153400
*              ZMS=' 8, THE "PLISTVER" KEY'!! /**KOPTP* MSG*/           00153500
*                  ' MUST CONTAIN ONE'!!                                00153600
*                  ' (OR MORE) ARGUMENT(S).';                           00153700
*              ANS MSG('?IEFPPSCN ---> '!!ZMS);                         00153800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00153900
*              ZMACRET=8;                    /* MACRO ERROR */          00154000
*              ZCVAL='NO_ARGUMENT';                                     00154100
*            END;                                                       00154200
*        IF NUMBER(PLISTVER)>1               /* CHECK POSITIONALS */    00154300
*          THEN                                                         00154400
*            DO;                                                        00154500
*              ZMS=' 8, "PLISTVER'!!         /**KPOSP* MSG*/            00154600
*                  PLISTVER!!                                           00154700
*                  '" "PLISTVER"'!!                                     00154800
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00154900
*              ANS MSG('?IEFPPSCN ---> '!!ZMS);                         00155000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00155100
*              ZMACRET=8;                    /* MACRO ERROR */          00155200
*            END;                                                       00155300
*                                                                       00155400
*        ZC=PLISTVER(1);                                                00155500
*        DO ZL=1 TO LENGTH(ZC);              /* MUST BE NUMBER */       00155600
*          IF ZC(ZL:ZL)<'0' !                /* MUST BE NUMERIC */      00155700
*             ZC(ZL:ZL)>'9'                  /* MUST BE NUMERIC */      00155800
*            THEN                                                       00155900
*              ZCVAL='NUMERIC';              /* NUMERIC ERROR */        00156000
*        END;                                                           00156100
*        IF ZCVAL=''                                                    00156200
*          THEN                                                         00156300
*            DO;                             /* CHECK RANGE LIMITS */   00156400
*            IF FIXED(PLISTVER(1))>=XPLISTVER                           00156500
*              THEN                                                     00156600
*                XPLISTVER=FIXED(PLISTVER(1));                          00156700
*              ELSE                                                     00156800
*                DO;                                                    00156900
*              ZMS=' 8, PLISTVER='!!         /**KVALP* MSG*/            00157000
*                    PLISTVER(1)!!                                      00157100
*                  ', BUT PLISTVER OF '!!                               00157200
*                    CHAR(XPLISTVER)!!                                  00157300
*                  ' IS REQUIRED.';                                     00157400
*              ANS MSG('?IEFPPSCN ---> '!!ZMS);                         00157500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00157600
*              ZMACRET=8;                    /* MACRO ERROR */          00157700
*                END;                                                   00157800
*              IF XPLISTVER<0 !              /* LOW LIMIT */            00157900
*                 XPLISTVER>0                /* HIGH LIMIT */           00158000
*                THEN                                                   00158100
*                  ZCVAL='RANGE';            /* RANGE ERROR */          00158200
*            END;                                                       00158300
*        IF ZCVAL^=''                                                   00158400
*          THEN                                                         00158500
*            DO;                             /* RANGE ERROR */          00158600
*              ZXPLISTVER='';                /* RESET IN/OUTPUT */      00158700
*              ZMS=' 8, "PLISTVER '!!        /**KRNGP* MSG*/            00158800
*                  PLISTVER!!                                           00158900
*                  '" THE RANGE IS "0-0"'!!                             00159000
*                  ' FOR ARGUMENT 1.';                                  00159100
*              ANS MSG('?IEFPPSCN ---> '!!ZMS);                         00159200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00159300
*              ZMACRET=8;                    /* MACRO ERROR */          00159400
*            END;                                                       00159500
*      END;                                                             00159600
*                                                                       00159700
*/********************************************************************/ 00159800
*/***PG.MF01  PROCESS MF MACRO FORMS                                 */ 00159900
*/********************************************************************/ 00160000
*/*PG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00160100
*  XMF='';                                                              00160200
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00160300
*  IF MF(1)='S'                              /* CHECK FOR KEYWORD */    00160400
*    THEN                                                               00160500
*      DO;                                                              00160600
*        XMF='S';                            /* SET XVARIABLE */        00160700
*        IF NUMBER(MF)>1                     /* CHECK POSITIONALS */    00160800
*          THEN                                                         00160900
*            DO;                                                        00161000
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00161100
*                  MF!!                                                 00161200
*                  '" "MF"'!!                                           00161300
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00161400
*              ANS MSG('?IEFPPSCN ---> '!!ZMS);                         00161500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00161600
*              ZMACRET=8;                    /* MACRO ERROR */          00161700
*            END;                                                       00161800
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00161900
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00162000
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00162100
*  IF MF(1)='L'                              /* CHECK FOR KEYWORD */    00162200
*    THEN                                                               00162300
*      DO;                                                              00162400
*        XMF='L';                            /* SET XVARIABLE */        00162500
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00162600
*          THEN                                                         00162700
*            DO;                                                        00162800
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00162900
*                  MF!!                                                 00163000
*                  '" "MF"'!!                                           00163100
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00163200
*              ANS MSG('?IEFPPSCN ---> '!!ZMS);                         00163300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00163400
*              ZMACRET=8;                    /* MACRO ERROR */          00163500
*            END;                                                       00163600
*/*PG.KKCTL10 -MF(L) SPECIAL CHECK-----------------------------------*/ 00163700
*        ZMAXINVOCLEN = LENGTH(MF) + 2;                                 00163800
*        IF PLISTVER ^= ''                                              00163900
*          THEN                                                         00164000
*            ZMAXINVOCLEN=ZMAXINVOCLEN + LENGTH(PLISTVER) + 8;          00164100
*        IF LENGTH(MACKEYS) > ZMAXINVOCLEN !                            00164200
*           MACLIST ^= ''                    /* CHECK FOR OTHER PARMS*/ 00164300
*          THEN                                                         00164400
*            DO;                                                        00164500
*              ZMS=' 8, THE "L" FORM OF "MF"'!! /**MFLP* MSG*/          00164600
*                  ' CAN ONLY HAVE'!!                                   00164700
*                  ' THE "PLISTVER" KEY'!!                              00164800
*                  ' SPECIFIED ON THE INVOCATION.';                     00164900
*              ANS MSG('?IEFPPSCN ---> '!!ZMS);                         00165000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00165100
*              ZMACRET=8;                    /* MACRO ERROR */          00165200
*            END;                                                       00165300
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00165400
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00165500
*  IF MF(2)=''                               /* CHECK FOR NULL */       00165600
*   THEN                                                                00165700
*    DO;                                     /* KEY IS REQUIRED */      00165800
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00165900
*        ZMS=' 8, WHEN "L" IS SPECIFIED'!!                              00166000
*            ' FOR THE "MF" KEY, POSITIONAL'!!                          00166100
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00166200
*        ANS MSG('?IEFPPSCN ---> '!!ZMS);                               00166300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00166400
*        ZMACRET=8;                          /* MACRO ERROR */          00166500
*    END;                                                               00166600
*  ELSE                                                                 00166700
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00166800
*/*PG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE--------------------*/ 00166900
*  ZXMFATTR='INPUT';                         /* SET IN/OUTPUT */        00167000
*  XMFATTR='BDY(DWORD)';                     /* SET DEFAULT */          00167100
*  IF MF(3)^=''                              /* CHECK FOR NULL */       00167200
*    THEN                                                               00167300
*      XMFATTR=MF(3);                        /* SET XVARIABLE */        00167400
*/*PG.KCK01 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH---------------*/ 00167500
*  IF ZXMFATTR^='' &                         /* NOT IN/OUTPUT */        00167600
*     LENGTH(XMFATTR)>60                                                00167700
*    THEN                                                               00167800
*      DO;                                                              00167900
*        ZXMFATTR='';                        /* RESET IN/OUTPUT */      00168000
*        ZMS=' 8, "MF'!!                     /**KLNGP* MSG*/            00168100
*            MF!!                                                       00168200
*            '" ARGUMENT 3 EXCEEDS THE MAXIMUM'!!                       00168300
*            ' LENGTH OF 60 CHARACTERS. ';                              00168400
*        ANS MSG('?IEFPPSCN ---> '!!ZMS);                               00168500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00168600
*        ZMACRET=8;                          /* MACRO ERROR */          00168700
*      END;                                                             00168800
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00168900
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00169000
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00169100
*  IF MF(1)='E'                              /* CHECK FOR KEYWORD */    00169200
*    THEN                                                               00169300
*      DO;                                                              00169400
*        XMF='E';                            /* SET XVARIABLE */        00169500
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00169600
*          THEN                                                         00169700
*            DO;                                                        00169800
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00169900
*                  MF!!                                                 00170000
*                  '" "MF"'!!                                           00170100
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00170200
*              ANS MSG('?IEFPPSCN ---> '!!ZMS);                         00170300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00170400
*              ZMACRET=8;                    /* MACRO ERROR */          00170500
*            END;                                                       00170600
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00170700
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00170800
*  IF MF(2)=''                               /* CHECK FOR NULL */       00170900
*   THEN                                                                00171000
*    DO;                                     /* KEY IS REQUIRED */      00171100
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00171200
*        ZMS=' 8, WHEN "E" IS SPECIFIED'!!                              00171300
*            ' FOR THE "MF" KEY, POSITIONAL'!!                          00171400
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00171500
*        ANS MSG('?IEFPPSCN ---> '!!ZMS);                               00171600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00171700
*        ZMACRET=8;                          /* MACRO ERROR */          00171800
*    END;                                                               00171900
*  ELSE                                                                 00172000
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00172100
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00172200
*  XMFSCK='';                                /* RESET XVARIABLE */      00172300
*  IF MF(3) = 'COMPLETE'                                                00172400
*    THEN                                                               00172500
*      XMFSCK = 'COMPLETE';                  /* SET XVARIABLE */        00172600
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00172700
*  ZXMFSCK='INPUT';                          /* SET IN/OUTPUT */        00172800
*  IF XMFSCK=''                              /* CHECK FOR KEYWORD */    00172900
*    THEN                                                               00173000
*      DO;                                   /* KEYWORD NOT ENTERED */  00173100
*        XMFSCK='COMPLETE';                  /* SET DEFAULT */          00173200
*        IF MF(3)^=''                                                   00173300
*          THEN                                                         00173400
*            DO;                                                        00173500
*              ZXMFSCK='';                   /* RESET IN/OUTPUT */      00173600
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/            00173700
*                  MF!!'"'!!                                            00173800
*                  ' ARGUMENT 3 IS AN UNKNOWN KEYWORD. '!!              00173900
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00174000
*                  ' "COMPLETE".';           /* VALID KEYWORD */        00174100
*              ANS MSG('?IEFPPSCN ---> '!!ZMS);                         00174200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00174300
*              ZMACRET=8;                    /* MACRO ERROR */          00174400
*            END;                                                       00174500
*      END;                                                             00174600
*/*PG.KKCTL05 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00174700
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00174800
*/*PG.KKCTL06 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00174900
*  IF MF='MF'                                                           00175000
*    ! MF='()'                               /*CHECK ENTRY*/            00175100
*     THEN                                                              00175200
*       DO;                                                             00175300
*              ZMS=' 8, THE "MF" KEY'!!      /**KOPTP* MSG*/            00175400
*                  ' MUST CONTAIN ONE'!!                                00175500
*                  ' (OR MORE) ARGUMENT(S).';                           00175600
*              ANS MSG('?IEFPPSCN ---> '!!ZMS);                         00175700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00175800
*              ZMACRET=8;                    /* MACRO ERROR */          00175900
*       END;                                                            00176000
*  ELSE                                                                 00176100
*    DO;                                                                00176200
*      ZXMF='INPUT';                         /* SET IN/OUTPUT */        00176300
*      IF XMF=''                             /* CHECK FOR KEYWORD */    00176400
*        THEN                                                           00176500
*          DO;                               /* KEYWORD NOT ENTERED */  00176600
*            XMF='S';                        /* SET DEFAULT */          00176700
*            XMFSCK='COMPLETE';              /* COMPLETE CHECKING */    00176800
*            IF MF(1)^=''                    /* CHECK FOR KEYWORD */    00176900
*              THEN                                                     00177000
*                DO;                                                    00177100
*                  ZXMF='';                  /* RESET IN/OUTPUT */      00177200
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/            00177300
*                  MF!!'"'!!                                            00177400
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00177500
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00177600
*                  ' "S",'!!                 /* VALID KEYWORD */        00177700
*                  ' "L",'!!                 /* VALID KEYWORD */        00177800
*                  ' OR "E".';               /* VALID KEYWORD */        00177900
*              ANS MSG('?IEFPPSCN ---> '!!ZMS);                         00178000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00178100
*              ZMACRET=8;                    /* MACRO ERROR */          00178200
*                END;                                                   00178300
*          END;                                                         00178400
*    END;                                                               00178500
*/********************************************************************/ 00178600
*/***PD.P01 FULL DEFAULT CHECKING                                    */ 00178700
*/********************************************************************/ 00178800
*  IF PLISTVER=''                                                       00178900
*     ! PLISTVER(1)='IMPLIED_VERSION'                                   00179000
*    THEN                                                               00179100
*      ZC='ON';                              /* DEFAULT FLAG ON */      00179200
*    ELSE                                                               00179300
*      ZC='OFF';                             /* DEFAULT FLAG OFF */     00179400
*/********************************************************************/ 00179500
*/***PD.P02 DEFAULT ECHO                                             */ 00179600
*/********************************************************************/ 00179700
*/*PD.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00179800
*  IF XMF^='L'                                                          00179900
*    THEN                                                               00180000
*      DO;                                   /* FULL SYNTAX CHECK */    00180100
*        ANS('/*DEFAULT(S): */')                                        00180200
*           NORESCAN COL(MACLMAR+5);                                    00180300
*/*PD.KXVAR01 NAME, OPT INOUT, KEYS -XVARIABLE-----------------------*/ 00180400
*  XPPTINFO='';                                                         00180500
*  IF PPTINFO(1)=''                                                     00180600
*    THEN                                                               00180700
*      DO;                                                              00180800
*        XPPTINFO='*';                       /* SET DEFAULT */          00180900
*        ZC='ON';                            /* DEFAULT FLAG ON */      00181000
*      END;                                                             00181100
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00181200
*  IF XPPTINFO^=''                                                      00181300
*    THEN DO;                                                           00181400
*      ANS('/* PPTINFO('!!                                              00181500
*          XPPTINFO!!                                                   00181600
*          ')*/')                                                       00181700
*          NORESCAN COL(MACLMAR+5);                                     00181800
*      XPPTINFO = '';                                                   00181900
*    END;                                                               00182000
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00182100
*  XPROGRAM='';                                                         00182200
*  IF PROGRAM(1)=''                                                     00182300
*    THEN                                                               00182400
*      DO;                                                              00182500
*        XPROGRAM='*';                       /* SET DEFAULT */          00182600
*        ZC='ON';                            /* DEFAULT FLAG ON */      00182700
*      END;                                                             00182800
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00182900
*  IF XPROGRAM^=''                                                      00183000
*    THEN DO;                                                           00183100
*      ANS('/* PROGRAM('!!                                              00183200
*          XPROGRAM!!                                                   00183300
*          ')*/')                                                       00183400
*          NORESCAN COL(MACLMAR+5);                                     00183500
*      XPROGRAM = '';                                                   00183600
*    END;                                                               00183700
*/*PD.KXVAR01 NAME, OPT INOUT, KEYS -XVARIABLE-----------------------*/ 00183800
*  XTOKEN='';                                                           00183900
*  IF TOKEN(1)=''                                                       00184000
*    THEN                                                               00184100
*      DO;                                                              00184200
*        XTOKEN='0';                         /* SET DEFAULT */          00184300
*        ZC='ON';                            /* DEFAULT FLAG ON */      00184400
*      END;                                                             00184500
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00184600
*  IF XTOKEN^=''                                                        00184700
*    THEN DO;                                                           00184800
*      ANS('/* TOKEN('!!                                                00184900
*          XTOKEN!!                                                     00185000
*          ')*/')                                                       00185100
*          NORESCAN COL(MACLMAR+5);                                     00185200
*      XTOKEN = '';                                                     00185300
*    END;                                                               00185400
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00185500
*  IF PLISTVER=''                                                       00185600
*    THEN DO;                                                           00185700
*      ANS('/* PLISTVER('!!                                             00185800
*          CHAR(XPLISTVER)!!                                            00185900
*          ')*/')                                                       00186000
*          NORESCAN COL(MACLMAR+5);                                     00186100
*    END;                                                               00186200
*  IF ZC='OFF'                               /*NO DEFAULTS TAKEN */     00186300
*    THEN                                                               00186400
*      ANS('/* NONE. */')                                               00186500
*         NORESCAN COL(MACLMAR+5);                                      00186600
*/*PD.P04 END DEFAULT ECHO ------------------------------------------*/ 00186700
*      END;                                                             00186800
*/********************************************************************/ 00186900
*/*PB.SYSL01 INVOKE SP LEVEL AND SYSTEM STATE MACROS                 */ 00187000
*/********************************************************************/ 00187100
*  DCL SYSSPLV CHAR EXTERNAL; DEACT SYSSPLV;/* SPLEVEL 1,2,3         */ 00187200
*  DCL SYSASCE CHAR EXTERNAL; DEACT SYSASCE;/* STATE ANY P AR */        00187300
*  DCL SYSAM64 CHAR EXTERNAL; DEACT SYSAM64;                            00187400
*  DCL SYSALVL FIXED EXTERNAL; DEACT SYSALVL;                           00187500
*                                                                       00187600
*  IF SYSASCE=''                                                        00187700
*    THEN                                                               00187800
*      DO;                                                              00187900
*        IF SYSSPLV=''                                                  00188000
*          THEN                                                         00188100
*            ANS('?SPLEVEL  (TEST);') COL(MACLMAR);                     00188200
*        IF SYSSPLV^='1' & SYSSPLV^='2'                                 00188300
*          THEN                                                         00188400
*            ANS('?SYSSTATE (TEST);') COL(MACLMAR);                     00188500
*          ELSE                                                         00188600
*            SYSASCE='P';                    /* SYSSTATE DEFAULT*/      00188700
*      END;                                                             00188800
*/********************************************************************/ 00188900
*/***PG.P01 FULL MACRO SYNTAX CHECKING                               */ 00189000
*/********************************************************************/ 00189100
*/*PG.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00189200
*  IF XMF^='L'                                                          00189300
*    THEN                                                               00189400
*      DO;                                   /* FULL SYNTAX CHECK */    00189500
*/*PG.P03 EXCESSIVE POSITIONAL ARGUMENTS-----------------------------*/ 00189600
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */    00189700
*    THEN                                                               00189800
*      DO;                                                              00189900
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'!! /**PPOSP* MSG*/            00190000
*            ' "'!!MACLIST!!'"'!!                                       00190100
*            ' CANNOT BE USED.'!!                                       00190200
*            ' NO POSITIONAL ARGUMENTS'!!                               00190300
*            ' ARE ALLOWED.';                                           00190400
*        ANS MSG('?IEFPPSCN ---> '!!ZMS);                               00190500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00190600
*        ZMACRET=8;                          /* MACRO ERROR */          00190700
*      END;                                                             00190800
*/*PG.KKWRD01 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00190900
*  IF NUMBER(REQUEST)>1                      /* CHECK POSITIONALS */    00191000
*    THEN                                                               00191100
*      DO;                                                              00191200
*        ZMS=' 8, "REQUEST'!!                /**KPOSP* MSG*/            00191300
*            REQUEST!!                                                  00191400
*            '" "REQUEST"'!!                                            00191500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00191600
*        ANS MSG('?IEFPPSCN ---> '!!ZMS);                               00191700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00191800
*        ZMACRET=8;                          /* MACRO ERROR */          00191900
*      END;                                                             00192000
*/*PG.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00192100
*  XREQUEST='';                              /* RESET XVARIABLE */      00192200
*  IF REQUEST(1) = 'RETRIEVE'                                           00192300
*    THEN                                                               00192400
*      XREQUEST = 'RETRIEVE';                /* SET XVARIABLE */        00192500
*/*PG.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00192600
*  IF REQUEST(1) = 'NEXT'                                               00192700
*    THEN                                                               00192800
*      XREQUEST = 'NEXT';                    /* SET XVARIABLE */        00192900
*/*PG.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00193000
*  IF REQUEST(1) = 'END'                                                00193100
*    THEN                                                               00193200
*      XREQUEST = 'END';                     /* SET XVARIABLE */        00193300
*/*PG.KKWRD03 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00193400
*  ZXREQUEST='INPUT';                        /* SET IN/OUTPUT */        00193500
*  IF XREQUEST=''                            /* CHECK FOR KEYWORD */    00193600
*    THEN                                                               00193700
*      DO;                                   /* KEYWORD NOT ENTERED */  00193800
*        XREQUEST='RETRIEVE';                /* SET DEFAULT */          00193900
*        IF REQUEST(1)^=''                                              00194000
*          THEN                                                         00194100
*            DO;                                                        00194200
*              ZXREQUEST='';                 /* RESET IN/OUTPUT */      00194300
*              ZMS=' 8, "REQUEST'!!          /**KUKWP* MSG*/            00194400
*                  REQUEST!!'"'!!                                       00194500
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00194600
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00194700
*                  ' "RETRIEVE",'!!          /* VALID KEYWORD */        00194800
*                  ' "NEXT",'!!              /* VALID KEYWORD */        00194900
*                  ' OR "END".';             /* VALID KEYWORD */        00195000
*              ANS MSG('?IEFPPSCN ---> '!!ZMS);                         00195100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00195200
*              ZMACRET=8;                    /* MACRO ERROR */          00195300
*            END;                                                       00195400
*      END;                                                             00195500
*/*PG.KKWRD04 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00195600
*  IF REQUEST(1)=''                          /* CHECK FOR KEYWORD */    00195700
*    THEN                                                               00195800
*      DO;                                   /* KEYWORD NOT ENTERED */  00195900
*        ZXREQUEST='';                       /* RESET IN/OUTPUT */      00196000
*        ZMS=' 8, THE'!!                     /**KRKWP* MSG*/            00196100
*            ' "REQUEST" KEY AND ITS'!!                                 00196200
*            ' ARGUMENT ARE REQUIRED.'!!                                00196300
*            ' VALID KEYWORD CHOICE(S) ARE:'!!                          00196400
*            ' "RETRIEVE",'!!                /* VALID KEYWORD */        00196500
*            ' "NEXT",'!!                    /* VALID KEYWORD */        00196600
*            ' OR "END".';                   /* VALID KEYWORD */        00196700
*        ANS MSG('?IEFPPSCN ---> '!!ZMS);                               00196800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00196900
*        ZMACRET=8;                          /* MACRO ERROR */          00197000
*      END;                                                             00197100
*/*PG.KXVAR01 NAME, OPT INOUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00197200
*  IF PPTINFO='PPTINFO' ! PPTINFO='()'       /*CHECK ENTRY*/            00197300
*    THEN                                                               00197400
*      DO;                                                              00197500
*        ZMS=' 8, THE "PPTINFO" KEY'!!       /**KOPTP* MSG*/            00197600
*            ' MUST CONTAIN ONE'!!                                      00197700
*            ' (OR MORE) ARGUMENT(S).';                                 00197800
*        ANS MSG('?IEFPPSCN ---> '!!ZMS);                               00197900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00198000
*        ZMACRET=8;                          /* MACRO ERROR */          00198100
*      END;                                                             00198200
*  IF NUMBER(PPTINFO)>1                      /* CHECK POSITIONALS */    00198300
*    THEN                                                               00198400
*      DO;                                                              00198500
*        ZMS=' 8, "PPTINFO'!!                /**KPOSP* MSG*/            00198600
*            PPTINFO!!                                                  00198700
*            '" "PPTINFO"'!!                                            00198800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00198900
*        ANS MSG('?IEFPPSCN ---> '!!ZMS);                               00199000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00199100
*        ZMACRET=8;                          /* MACRO ERROR */          00199200
*      END;                                                             00199300
*/*PG.KXVAR13 NAME, OPT INOUT, KEYS -XVARIABLE-----------------------*/ 00199400
*  ZXPPTINFO='INOUT';                        /* SET IN/OUTPUT */        00199500
*  XPPTINFO='*';                             /* SET DEFAULT */          00199600
*  IF PPTINFO(1)^=''                         /* CHECK FOR NULL */       00199700
*    THEN                                                               00199800
*      XPPTINFO=PPTINFO(1);                  /* SET XVARIABLE */        00199900
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00200000
*  IF PROGRAM='PROGRAM' ! PROGRAM='()'       /*CHECK ENTRY*/            00200100
*    THEN                                                               00200200
*      DO;                                                              00200300
*        ZMS=' 8, THE "PROGRAM" KEY'!!       /**KOPTP* MSG*/            00200400
*            ' MUST CONTAIN ONE'!!                                      00200500
*            ' (OR MORE) ARGUMENT(S).';                                 00200600
*        ANS MSG('?IEFPPSCN ---> '!!ZMS);                               00200700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00200800
*        ZMACRET=8;                          /* MACRO ERROR */          00200900
*      END;                                                             00201000
*  IF NUMBER(PROGRAM)>1                      /* CHECK POSITIONALS */    00201100
*    THEN                                                               00201200
*      DO;                                                              00201300
*        ZMS=' 8, "PROGRAM'!!                /**KPOSP* MSG*/            00201400
*            PROGRAM!!                                                  00201500
*            '" "PROGRAM"'!!                                            00201600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00201700
*        ANS MSG('?IEFPPSCN ---> '!!ZMS);                               00201800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00201900
*        ZMACRET=8;                          /* MACRO ERROR */          00202000
*      END;                                                             00202100
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00202200
*  ZXPROGRAM='INPUT';                        /* SET IN/OUTPUT */        00202300
*  XPROGRAM='*';                             /* SET DEFAULT */          00202400
*  IF PROGRAM(1)^=''                         /* CHECK FOR NULL */       00202500
*    THEN                                                               00202600
*      XPROGRAM=PROGRAM(1);                  /* SET XVARIABLE */        00202700
*/*PG.KXVAR01 NAME, OPT INOUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00202800
*  IF TOKEN='TOKEN' ! TOKEN='()'             /*CHECK ENTRY*/            00202900
*    THEN                                                               00203000
*      DO;                                                              00203100
*        ZMS=' 8, THE "TOKEN" KEY'!!         /**KOPTP* MSG*/            00203200
*            ' MUST CONTAIN ONE'!!                                      00203300
*            ' (OR MORE) ARGUMENT(S).';                                 00203400
*        ANS MSG('?IEFPPSCN ---> '!!ZMS);                               00203500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00203600
*        ZMACRET=8;                          /* MACRO ERROR */          00203700
*      END;                                                             00203800
*  IF NUMBER(TOKEN)>1                        /* CHECK POSITIONALS */    00203900
*    THEN                                                               00204000
*      DO;                                                              00204100
*        ZMS=' 8, "TOKEN'!!                  /**KPOSP* MSG*/            00204200
*            TOKEN!!                                                    00204300
*            '" "TOKEN"'!!                                              00204400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00204500
*        ANS MSG('?IEFPPSCN ---> '!!ZMS);                               00204600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00204700
*        ZMACRET=8;                          /* MACRO ERROR */          00204800
*      END;                                                             00204900
*/*PG.KXVAR13 NAME, OPT INOUT, KEYS -XVARIABLE-----------------------*/ 00205000
*  ZXTOKEN='INOUT';                          /* SET IN/OUTPUT */        00205100
*  XTOKEN='0';                               /* SET DEFAULT */          00205200
*  IF TOKEN(1)^=''                           /* CHECK FOR NULL */       00205300
*    THEN                                                               00205400
*      XTOKEN=TOKEN(1);                      /* SET XVARIABLE */        00205500
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00205600
*  IF RETCODE='RETCODE' ! RETCODE='()'       /*CHECK ENTRY*/            00205700
*    THEN                                                               00205800
*      DO;                                                              00205900
*        ZMS=' 8, THE "RETCODE" KEY'!!       /**KOPTP* MSG*/            00206000
*            ' MUST CONTAIN ONE'!!                                      00206100
*            ' (OR MORE) ARGUMENT(S).';                                 00206200
*        ANS MSG('?IEFPPSCN ---> '!!ZMS);                               00206300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00206400
*        ZMACRET=8;                          /* MACRO ERROR */          00206500
*      END;                                                             00206600
*  IF NUMBER(RETCODE)>1                      /* CHECK POSITIONALS */    00206700
*    THEN                                                               00206800
*      DO;                                                              00206900
*        ZMS=' 8, "RETCODE'!!                /**KPOSP* MSG*/            00207000
*            RETCODE!!                                                  00207100
*            '" "RETCODE"'!!                                            00207200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00207300
*        ANS MSG('?IEFPPSCN ---> '!!ZMS);                               00207400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00207500
*        ZMACRET=8;                          /* MACRO ERROR */          00207600
*      END;                                                             00207700
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00207800
*  IF RETCODE(1)^=''                         /* CHECK FOR NULL */       00207900
*    THEN                                                               00208000
*      DO;                                                              00208100
*        XRETCODE=RETCODE(1);                /* SET XVARIABLE */        00208200
*        ZXRETCODE='OUTPUT';                 /* SET OUTPUT */           00208300
*      END;                                                             00208400
*  ELSE                                                                 00208500
*    IF ZXRETCODE^=''                                                   00208600
*      THEN                                                             00208700
*        ZXRETCODE='';                       /* RESET OUTPUT */         00208800
*/*PG.P04 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00208900
*      END;                                  /* END COMPLETE CHECKING*/ 00209000
*/********************************************************************/ 00209100
*/***PE.MR01 GENERATE CODE IF ZMACRET=0                              */ 00209200
*/********************************************************************/ 00209300
*  IF ZMACRET = 0                                                       00209400
*    THEN                                                               00209500
*      DO;                                                              00209600
*/********************************************************************/ 00209700
*/***PE.PR01 PRINT CONTROLS, DEFAULT IS YES                          */ 00209800
*/********************************************************************/ 00209900
*  ANS(MACCONC!!'LIST PUSH;') NORESCAN COL(MACLMAR);                    00210000
*  IF ZPRINT='NO'                            /* PRINT IS OFF */         00210100
*    THEN                                                               00210200
*      ANS(MACCONC!!'LIST OFF;') NORESCAN COL(MACLMAR);                 00210300
*    ELSE                                                               00210400
*      ANS(MACCONC!!'LIST ON;')  NORESCAN COL(MACLMAR);                 00210500
*/********************************************************************/ 00210600
*/*PE.DO02 OUTER MACRO DO STATEMENT----------------------------------*/ 00210700
*  IF XMF^='L'                                                          00210800
*    THEN                                                               00210900
*      ANS('DO; /* IEFPPSCN-PLISTVER */')                               00211000
*          NORESCAN COL(MACLMAR);                                       00211100
*/*PL.LL01 ?IEFPPSCN MF=L PARAMETER LIST-----------------------------*/ 00211200
*  IF XMF='L'                                                           00211300
*    THEN                                                               00211400
*      DO;                                                              00211500
*        ANS('DCL 1 '!!XMFCTRL!!' '!!XMFATTR!!', '!!                    00211600
*            '/* ?IEFPPSCN PARM LIST*/')                                00211700
*            NORESCAN COL(MACLMAR);                                     00211800
*/*PL.LL13  XPPSCID CHAR(4) CONSTANT---------------------------------*/ 00211900
*        ANS('2 '!!XMFCTRL                                              00212000
*         !! '_XPPSCID CHAR(4), '                                       00212100
*         !! '/* '!!ZXPPSCID                                            00212200
*         !! ' XPPSCID */'                                              00212300
*            ) NORESCAN COL(MACLMAR+2);                                 00212400
*/*PL.LL02  XPLISTLEN FIXED(16) BDY(BYTE) INPUT----------------------*/ 00212500
*        ANS('2 '!!XMFCTRL!!                                            00212600
*            '_XPLISTLEN FIXED(16) BDY(BYTE), '!!                       00212700
*            '/* INPUT XPLISTLEN*/')                                    00212800
*            NORESCAN COL(MACLMAR+2);                                   00212900
*/*PL.LL02  XVERSION FIXED(8) INPUT----------------------------------*/ 00213000
*        ANS('2 '!!XMFCTRL!!                                            00213100
*            '_XVERSION FIXED(8), '!!                                   00213200
*            '/* INPUT XVERSION*/')                                     00213300
*            NORESCAN COL(MACLMAR+2);                                   00213400
*/*PL.LL04  XPPTFLAG BIT(8) FIELD_LABEL------------------------------*/ 00213500
*        ANS('2 '!!XMFCTRL!!                                            00213600
*            '_XPPTFLAG BIT(8), '!!                                     00213700
*            '/* FIELD_LABEL */')                                       00213800
*            NORESCAN COL(MACLMAR+2);                                   00213900
*/*PL.LL09 BIT 1XXXXXXX----------------------------------------------*/ 00214000
*          ANS('3 '!!XMFCTRL!!                                          00214100
*              '_XREQUEST_RETRIEVE BIT(1), '!!                          00214200
*              '/* BIT */')                                             00214300
*              NORESCAN COL(MACLMAR+2);                                 00214400
*/*PL.LL09 BIT X1XXXXXX----------------------------------------------*/ 00214500
*          ANS('3 '!!XMFCTRL!!                                          00214600
*              '_XREQUEST_NEXT BIT(1), '!!                              00214700
*              '/* BIT */')                                             00214800
*              NORESCAN COL(MACLMAR+2);                                 00214900
*/*PL.LL09 BIT XX1XXXXX----------------------------------------------*/ 00215000
*          ANS('3 '!!XMFCTRL!!                                          00215100
*              '_XREQUEST_END BIT(1), '!!                               00215200
*              '/* BIT */')                                             00215300
*              NORESCAN COL(MACLMAR+2);                                 00215400
*/*PL.LL10 RESERVED BIT----------------------------------------------*/ 00215500
*          ANS('3 '!!XMFCTRL!!                                          00215600
*              '_XPPTFLAG_RSVD1 BIT(5), '!!                             00215700
*              '/* BIT */')                                             00215800
*              NORESCAN COL(MACLMAR+2);                                 00215900
*/*PL.LL13 ADDR XPROGRAM PTR(31) INPUT ADDR--------------------------*/ 00216000
*        ANS('2 '!!XMFCTRL                                              00216100
*         !! '_XPROGRAM_ADDR PTR(31), '                                 00216200
*         !! '/* '!!ZXPROGRAM_ADDR                                      00216300
*         !! ' XPROGRAM_ADDR */'                                        00216400
*            ) NORESCAN COL(MACLMAR+2);                                 00216500
*/*PL.LL13 ADDR XTOKEN PTR(31) INOUT ADDR----------------------------*/ 00216600
*        ANS('2 '!!XMFCTRL                                              00216700
*         !! '_XTOKEN_ADDR PTR(31), '                                   00216800
*         !! '/* '!!ZXTOKEN_ADDR                                        00216900
*         !! ' XTOKEN_ADDR */'                                          00217000
*            ) NORESCAN COL(MACLMAR+2);                                 00217100
*/*PL.LL13 ADDR XPPTINFO PTR(31) INOUT ADDR--------------------------*/ 00217200
*        ANS('2 '!!XMFCTRL                                              00217300
*         !! '_XPPTINFO_ADDR PTR(31), '                                 00217400
*         !! '/* '!!ZXPPTINFO_ADDR                                      00217500
*         !! ' XPPTINFO_ADDR */'                                        00217600
*            ) NORESCAN COL(MACLMAR+2);                                 00217700
*/*PL.LL18 ----------------------------------------------------------*/ 00217800
*        ANS('2 * CHAR(0);')                                            00217900
*            NORESCAN COL(MACLMAR+2);                                   00218000
*/*PL.LL17 END OF MF=L PARAMETER LIST--------------------------------*/ 00218100
*      END;                                                             00218200
*/*PL.L01 MACRO WORK VARIABLES---------------------------------------*/ 00218300
*  DCL ZPRMLINE CHAR;          /* ZPRM ARRAY ENTRY ACCUMULATOR      */  00218400
*  DEACT ZPRMLINE;                                                      00218500
*  DCL ZNDX CHAR;              /* UNIQUE LIST STRUCTURE NAME        */  00218600
*  DEACT ZNDX;                                                          00218700
*  ZNDX=MACINDEX;              /* MACINDEX                          */  00218800
*  DCL XVERSION CHAR;                                                   00218900
*  DEACT XVERSION;                                                      00219000
*/*PL.L02 ?IEFPPSCN PARAMETER LIST-----------------------------------*/ 00219100
*  IF XMF^='L'                                                          00219200
*    THEN                                                               00219300
*      DO;                                                              00219400
*/*PL.L03 ?IEFPPSCN PARAMETER LIST-----------------------------------*/ 00219500
*        IF XMF='S'                                                     00219600
*          THEN                                                         00219700
*            XMFCTRL='#ZPLIST';                                         00219800
*/*PL.L04 ?IEFPPSCN PARAMETER LIST-----------------------------------*/ 00219900
*        ZPRMLINE='DCL 1 #Z'!!ZNDX!!' DEF('!!                           00220000
*                 XMFCTRL!!'),'!!                                       00220100
*                 ' /* ?IEFPPSCN PARM LIST*/';                          00220200
*/*PL.L08  XPPSCID CHAR(4) CONSTANT----------------------------------*/ 00220300
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00220400
*                 '_XPPSCID CHAR(4), '!!                                00220500
*                 '/* '!!ZXPPSCID!!                                     00220600
*                 ' XPPSCID */';                                        00220700
*/*PL.L05  XPLISTLEN FIXED(16) BDY(BYTE) INPUT-----------------------*/ 00220800
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00220900
*                 '_XPLISTLEN FIXED(16) BDY(BYTE), '!!                  00221000
*                 '/* INPUT XPLISTLEN*/';                               00221100
*/*PL.L05  XVERSION FIXED(8) INPUT-----------------------------------*/ 00221200
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00221300
*                 '_XVERSION FIXED(8), '!!                              00221400
*                 '/* INPUT XVERSION*/';                                00221500
*/*PL.L08  XPPTFLAG BIT(8) FIELD_LABEL-------------------------------*/ 00221600
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00221700
*                 '_XPPTFLAG BIT(8), '!!                                00221800
*                 '/* FIELD_LABEL */';                                  00221900
*/*PL.L08 ADDR XPROGRAM PTR(31) INPUT ADDR---------------------------*/ 00222000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00222100
*                 '_XPROGRAM_ADDR PTR(31), '!!                          00222200
*                 '/* '!!ZXPROGRAM_ADDR!!                               00222300
*                 ' XPROGRAM_ADDR */';                                  00222400
*/*PL.L08 ADDR XTOKEN PTR(31) INOUT ADDR-----------------------------*/ 00222500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00222600
*                 '_XTOKEN_ADDR PTR(31), '!!                            00222700
*                 '/* '!!ZXTOKEN_ADDR!!                                 00222800
*                 ' XTOKEN_ADDR */';                                    00222900
*/*PL.L08 ADDR XPPTINFO PTR(31) INOUT ADDR---------------------------*/ 00223000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00223100
*                 '_XPPTINFO_ADDR PTR(31), '!!                          00223200
*                 '/* '!!ZXPPTINFO_ADDR!!                               00223300
*                 ' XPPTINFO_ADDR */';                                  00223400
*/*PL.L11 CONSTANT TO ENSURE THAT LIST FORM IS LONG ENOUGH ----------*/ 00223500
*        ZPRMNUM=ZPRMNUM+1;                                             00223600
*        ZPRM(ZPRMNUM)=ZPRMLINE!!' 2 * CHAR(0);';                       00223700
*        IF XPLISTVER^=0                                                00223800
*           & XMF^='S'                                                  00223900
*          THEN                                                         00224000
*            DO;                                                        00224100
*              ZPRMNUM=ZPRMNUM+1;                                       00224200
*              ZPRM(ZPRMNUM)=                                           00224300
*               'DCL #Z'!!ZNDX!!'_LENCHECK FIXED(32) CONSTANT('!!       00224400
*               'LENGTH('!!XMFCTRL!!')-LENGTH(#Z'!!ZNDX!!'));'!!        00224500
*               '/* CONSTANT TO ENSURE THAT THE LIST FORM'!!            00224600
*               ' IS LONG ENOUGH */';                                   00224700
*            END;                                                       00224800
*/*PL.L12 PARAMETER LIST SIZE----------------------------------------*/ 00224900
*        ZPLLEN=20;                                                     00225000
*        IF ZPRMMAX<ZPLLEN                                              00225100
*           & XMF^='E'                                                  00225200
*          THEN                                                         00225300
*            ZPRMMAX=ZPLLEN;                                            00225400
*/*PL.L13 -----------------------------------------------------------*/ 00225500
*      END;                                                             00225600
*/*PI.L01 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00225700
*  IF XMF^='L'                                                          00225800
*    THEN                                                               00225900
*      DO;                                                              00226000
*/*PI.L03 CLEAR PARAMETER LIST --------------------------------------*/ 00226100
*            ANS('#Z'!!ZNDX!!'=''''B;'!!                                00226200
*                '/* CLEAR PARAMETER AREA */')                          00226300
*                NORESCAN COL(MACLMAR);                                 00226400
*/*PI.L28 XPPSCID  CHAR(4)-------------------------------------------*/ 00226500
*        ANS('#Z'!!ZNDX!!'_XPPSCID=''PPSC'';'!!                         00226600
*            '/* XPPSCID CHAR(4) CONSTANT */')                          00226700
*            NORESCAN COL(MACLMAR);                                     00226800
*/*PI.L05C XPLISTLEN FIXED(16)---------------------------------------*/ 00226900
*        ANS('#Z'!!ZNDX!!'_XPLISTLEN=LENGTH(#Z'!!ZNDX!!');'!!           00227000
*            '/* XPLISTLEN FIXED(16) */')                               00227100
*            NORESCAN COL(MACLMAR);                                     00227200
*/*PI.L06 XPPTFLAG BIT(8)--------------------------------------------*/ 00227300
*        ZW='';                                                         00227400
*        ZMS='';                                                        00227500
*/*PI.L07 XPPTFLAG BIT(8) 1XXXXXXX-----------------------------------*/ 00227600
*        IF XREQUEST='RETRIEVE'                                         00227700
*          THEN                                                         00227800
*            ZW=ZW!!'1';                                                00227900
*          ELSE                                                         00228000
*            ZW=ZW!!'0';                                                00228100
*/*PI.L07 XPPTFLAG BIT(8) X1XXXXXX-----------------------------------*/ 00228200
*        IF XREQUEST='NEXT'                                             00228300
*          THEN                                                         00228400
*            ZW=ZW!!'1';                                                00228500
*          ELSE                                                         00228600
*            ZW=ZW!!'0';                                                00228700
*/*PI.L07 XPPTFLAG BIT(8) XX1XXXXX-----------------------------------*/ 00228800
*        IF XREQUEST='END'                                              00228900
*          THEN                                                         00229000
*            ZW=ZW!!'100000';                                           00229100
*          ELSE                                                         00229200
*            ZW=ZW!!'000000';                                           00229300
*/*PI.L09 XPPTFLAG BIT(8)--------------------------------------------*/ 00229400
*        IF INDEX(ZW,'1')^=0                                            00229500
*          THEN                                                         00229600
*            ANS('#Z'!!ZNDX!!'_XPPTFLAG='!!                             00229700
*                '#Z'!!ZNDX!!'_XPPTFLAG ! '!!                           00229800
*                ''''!!ZW!!'''B; '!!                                    00229900
*                '/* BIT(8) */')                                        00230000
*                NORESCAN COL(MACLMAR);                                 00230100
*/*PI.L14 CHECK FOR * AS THE CHAR(8) ARGUMENT------------------------*/ 00230200
*        IF XPROGRAM='*'                                                00230300
*          THEN                                                         00230400
*            ZXPROGRAM='';                   /* RESET INPUT/INOUT */    00230500
*/*PI.L15 ADDR(XPROGRAM) CHAR(8)-------------------------------------*/ 00230600
*        IF ZXPROGRAM^=''                                               00230700
*          THEN                                                         00230800
*            ANS('#Z'!!ZNDX!!'_XPROGRAM_ADDR='!!                        00230900
*                'ADDR('!!XPROGRAM!!');'!!                              00231000
*                '/* ADDR XPROGRAM CHAR(8) */')                         00231100
*                NORESCAN COL(MACLMAR);                                 00231200
*/*PI.L15 ADDR(XTOKEN) FIXED(31)-------------------------------------*/ 00231300
*        IF ZXTOKEN^=''                                                 00231400
*          THEN                                                         00231500
*            IF XTOKEN^='0'                                             00231600
*              THEN                                                     00231700
*                ANS('#Z'!!ZNDX!!'_XTOKEN_ADDR='!!                      00231800
*                    'ADDR('!!XTOKEN!!');'!!                            00231900
*                    '/* ADDR XTOKEN FIXED(31) */')                     00232000
*                    NORESCAN COL(MACLMAR);                             00232100
*/*PI.L14 CHECK FOR * AS THE CHAR(16) ARGUMENT-----------------------*/ 00232200
*        IF XPPTINFO='*'                                                00232300
*          THEN                                                         00232400
*            ZXPPTINFO='';                   /* RESET INPUT/INOUT */    00232500
*/*PI.L15 ADDR(XPPTINFO) CHAR(16)------------------------------------*/ 00232600
*        IF ZXPPTINFO^=''                                               00232700
*          THEN                                                         00232800
*            ANS('#Z'!!ZNDX!!'_XPPTINFO_ADDR='!!                        00232900
*                'ADDR('!!XPPTINFO!!');'!!                              00233000
*                '/* ADDR XPPTINFO CHAR(16) */')                        00233100
*                NORESCAN COL(MACLMAR);                                 00233200
*/*PI.L31 INVOKE FUNCTION--------------------------------------------*/ 00233300
*              ANS('RFY GPR01P RSTD;') NORESCAN COL(MACLMAR);           00233400
*              ANS('GPR01P=ADDR(#Z'!!ZNDX!!');'!!                       00233500
*                  '/* PARAMETER LIST */')                              00233600
*                  NORESCAN COL(MACLMAR);                               00233700
*              IF SYSASCE^='P'                                          00233800
*                THEN                                                   00233900
*                  ANS('SAR(GPR01P,ALET(#Z'!!ZNDX!!'));'!!              00234000
*                      '/* PARAMETER LIST AR */')                       00234100
*                      NORESCAN COL(MACLMAR);                           00234200
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00234300
*  DECLARE EHARC FIXED EXTERNAL;                                        00234400
*  DECLARE IEFJESCT CHARACTER EXTERNAL;                                 00234500
*  DEACTIVATE IEFJESCT;                                                 00234600
*  EHARC = 0;                                                           00234700
*/* If the mapping macro IEFJESCT hasn't been included, issue        */ 00234800
*/* a message and set the 'error' flag.                              */ 00234900
*  IF IEFJESCT ^= 'IEFJESCT' THEN DO;                                   00235000
*                                                                       00235100
*    ERRTEXT = 'AHA0053 IEFPPSCN: MACRO IEFJESCT REQUIRED BUT WAS ' !!  00235200
*              'NOT FOUND BEFORE THIS INVOCATION';   /* Prime message   00235300
*                                                       area         */ 00235400
*    ANSWER MSG(ERRTEXT) NORESCAN;  /* Put out message               */ 00235500
*    COMNT6 = COMMENT(ERRTEXT);   /* Put message in comment form     */ 00235600
*    ANS(COMNT6) SKIP ;           /* Message for compile stage       */ 00235700
*                                                                       00235800
*    ERRTEXT = 'AHA0053 IEFPPSCN: INSERT OR MOVE THE INCLUDE ' !!       00235900
*              'OF IEFJESCT BEFORE THIS INVOCATION'; /* Prime message   00236000
*                                                         area       */ 00236100
*    ANSWER MSG(ERRTEXT) NORESCAN;  /* Put out message               */ 00236200
*    COMNT6 = COMMENT(ERRTEXT);   /* Put message in comment form     */ 00236300
*    ANS(COMNT6) SKIP ;           /* Message for compile stage       */ 00236400
*                                                                       00236500
*    EHARC = 4;                   /* Warning from macro phase        */ 00236600
*  END;                                                                 00236700
*     ANS('CALL PPTSCAN;') COL(MACLMAR); /* Call routine             */ 00236800
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00236900
*              ANS('RFY GPR01P UNRSTD;') NORESCAN COL(MACLMAR);         00237000
*              IF NUMBER(RETCODE)>0                                     00237100
*                THEN                                                   00237200
*                  ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);       00237300
*/*PO.L08 XRETCODE RETURN CODE---------------------------------------*/ 00237400
*              IF NUMBER(RETCODE)>0                                     00237500
*                THEN                                                   00237600
*                    ANS(XRETCODE!!                                     00237700
*                     '=GPR15F; /* SET RETURN CODE */')                 00237800
*                      NORESCAN COL(MACLMAR);                           00237900
*/*PO.L10 REMOVE REGISTER RESTRICTIONS-------------------------------*/ 00238000
*              IF NUMBER(RETCODE)>0                                     00238100
*                THEN                                                   00238200
*              ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);         00238300
*/*PO.L12 END OF PARAMETER LIST PROCESSING---------------------------*/ 00238400
*      END;                                                             00238500
*/*PO.L13 IEFPPSCN USAGE INDICATOR-----------------------------------*/ 00238600
*  ZIEFPPSCN='YES';                          /* SET IEFPPSCN USED */    00238700
*/*PO.L15 END OF EXECUTABLE IEFPPSCN-PLISTVER MACRO------------------*/ 00238800
*  IF XMF^='L'                                                          00238900
*    THEN                                                               00239000
*      ANS('END; /* IEFPPSCN-PLISTVER */')                              00239100
*          NORESCAN COL(MACLMAR);                                       00239200
*/*PO.L16 RESTORE PRINT CONTROLS-------------------------------------*/ 00239300
*  ANS(MACCONC!!'LIST POP;') NORESCAN COL(MACLMAR);                     00239400
*/*PO.L17 END OF IEFPPSCN MACRO--------------------------------------*/ 00239500
*  ANS(MACCONC!!'SPACE;') NORESCAN COL(MACLMAR);                        00239600
*  ANS(' ') NORESCAN COL(MACLMAR);                                      00239700
*/*******************************************************************/  00239800
*/*  PO.L18 END OF CODE TO BE BYPASSED WHEN ZMACRET ^= 0            */  00239900
*/*******************************************************************/  00240000
*      END;                                                             00240100
*/*******************************************************************/  00240200
*/*  MVS ONLY     -CHECK IF AMG PARM LISTS ARE PRESENT              */  00240300
*/*               -ROUND MAX AMG PARM LIST TO DOUBLEWORD MULTIPLES  */  00240400
*/*******************************************************************/  00240500
*  IF ZPRMNUM>0                   /* NUMBER OF AMG PARM LIST ENTRIES*/  00240600
*    THEN                                                               00240700
*      DO;                                                              00240800
*        ZPRMMAX=((ZPRMMAX+7)/8)*8; /* ROUND PARM LIST SIZE UP TO       00240900
*                                      DOUBLEWORD MULTIPLES        */   00241000
*/*******************************************************************/  00241100
*/*  MVS -GENERATE PARM LIST DCL TO OVERLAY ?EPILOG'S ILIST AREA    */  00241200
*/*******************************************************************/  00241300
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00241400
*          THEN                                                         00241500
*            DO;                                                        00241600
*              IF INDEX(EHALIST,',AMG,')=0 /* HAS DECLARE BEEN DONE?*/  00241700
*                THEN                                                   00241800
*                  DO;                                                  00241900
*                    ANS('?EPILOG                                       00242000
*                        STRING(''DCL #ZPLIST DEF(ILIST);'');');        00242100
*                    EHALIST=EHALIST!!',AMG,';                          00242200
*                  END;                                                 00242300
*            END;                                                       00242400
*/*******************************************************************/  00242500
*/*  MVS  -EXTRACT PARM LISTS FROM AMG GLOBAL MACRO ARRAYS          */  00242600
*/*******************************************************************/  00242700
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00242800
*          THEN                                                         00242900
*            DO;                                                        00243000
*              IF ZPRMMAX>EHAMAXLEN                                     00243100
*                THEN                                                   00243200
*                  EHAMAXLEN=ZPRMMAX; /* SET MAX PARM LIST SIZE     */  00243300
*            END;                                                       00243400
*        DO ZI=1 TO ZPRMNUM; /* EXTRACT AMG PARM LISTS               */ 00243500
*          ANS('?EPILOG STRING('''!!ZPRM(ZI)!!''');')                   00243600
*              COL(MACLMAR);                                            00243700
*        END;                                                           00243800
*      END;                                                             00243900
*/*-----------------------------------------------------------------*/  00244000
*/*  MVS  -ENSURE THAT GPRS NEEDED BY AMG MACROS WILL BE PROVIDED   */  00244100
*/*        BY ?EPILOG                                               */  00244200
*/*-----------------------------------------------------------------*/  00244300
*        IF INDEX(EHAREGS,'01P')=0                                      00244400
*          THEN                                                         00244500
*            EHAREGS=EHAREGS!!'01P'; /* GPR01P                      */  00244600
*        IF INDEX(EHAREGS,'15F')=0                                      00244700
*          THEN                                                         00244800
*            EHAREGS=EHAREGS!!'15F'; /* GPR15F                      */  00244900
*  RETURN CODE(ZMACRET);                                                00245000
*%END IEFPPSCN;                                                         00245100
