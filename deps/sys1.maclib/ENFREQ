* %/*                                                                   00010001
         MACRO                                                          00020001
&NAME    ENFREQ &ACTION=,&CODE=,&TYPE=,&QUAL=,&QMASK=,                 *00030001
               &EXIT=,&PARM=,&DTOKEN=,&STOKEN=,&FREEPRM=,&MF=,         *00040001
               &ESTBNME=,&EXITNME=,&RELATED=,&LISTENRS=,&DISABLE=,     *00050001
               &SRBEXIT=,&EOT=,&EOM=,&SPXITRET,&XSYS=,&PARMLEN=,       *00060001
               &BITQUAL=,&BITCOMPARE=,&PLISTVER=,&MASEXIT=,            *00070001
               &FLTRBLK=,&FLTRXIT=,&XCFFILTERGROUP=                @05C 00080001
.**** START OF SPECIFICATIONS ***************************************** 00090001
.*                                                                    * 00100001
.* MACRO  NAME - ENFREQ                                               * 00110001
.*                                                                    * 00120001
.* DESCRIPTION - MACRO FOR EVENT NOTIFICATION (ENF) REQUESTS          * 00130001
.*                                                                    * 00140001
.**01* PROPRIETARY STATEMENT=                                         * 00150001
.* **PROPRIETARY_STATEMENT********************************************* 00160001
.*                                                                    * 00170001
.*                                                                    * 00180001
.*  LICENSED MATERIALS - PROPERTY OF IBM                              * 00190001
.*  5650-ZOS COPYRIGHT IBM CORP. 1980, 2015                           * 00200001
.*                                                                    * 00210001
.*  STATUS= HBB77A0                                                   * 00220001
.*                                                                    * 00230001
.* **END_OF_PROPRIETARY_STATEMENT************************************** 00240001
.*                                                                    * 00250001
.* FUNCTION -                                                         * 00260001
.*      THE ENFREQ MACRO IS USED TO GENERATE THE EVENT                * 00270001
.*      PARAMETER LIST AND/OR INVOKE THE ENF SERVICE ROUTINE.         * 00280001
.*                                                                    * 00290001
.*01* EXTERNAL CLASSIFICATION:                                    @PBC* 00300001
.*02* GUPI: BASE                                                  @PBA* 00310001
.*02* NONE: FIELDS                                                @PBA* 00320001
.*          ACTION=SIGNAL                                         @PBA* 00330001
.*          ACTION=QUERY                                          @PBA* 00340001
.*          ACTION=REGISTER                                       @L7A* 00350001
.*          DISABLE                                               @PBA* 00360001
.*          FLTRXIT                                               @L7A* 00370001
.*          SPXITRET                                              @PBA* 00380001
.*          TYPE                                                  @PBA* 00390001
.*01* END OF EXTERNAL CLASSIFICATION:                             @L6A* 00400001
.*                                                                    * 00410001
.* OPERATION -                                                        * 00420001
.*      . VERIFY THE INPUT PARAMETERS SPECIFIED BY THE USER           * 00430001
.*                                                                    * 00440001
.*      . BUILD THE EVENT PARAMETER LIST (LIST AND NORMAL             * 00450001
.*        FORM)                                                       * 00460001
.*                                                                    * 00470001
.*      . GENERATE INSTRUCTIONS TO MODIFY THE EVENT PARAMETER         * 00480001
.*        LIST (NORMAL AND EXECUTE FORM)                              * 00490001
.*                                                                    * 00500001
.*      . GENERATE INSTRUCTION TO INVOKE THE ENF SERVICE              * 00510001
.*        ROUTINE (NORMAL AND EXECUTE FORM)                           * 00520001
.*                                                                    * 00530001
.* NOTES - N/A                                                        * 00540001
.*                                                                    * 00550001
.* DEPENDENCIES -                                                     * 00560001
.*       TO USE THE ENFREQ MACRO INSTRUCTION, THE CALLER MUST         * 00570001
.*            1. DECLARE STORAGE FOR A 4 BYTE POINTER ENFPTR          * 00580001
.*            2. INCLUDE THE IEFENFCT, AND IEFENFPM                   * 00590001
.*               MAPPING MACROS                                       * 00600001
.*                                                                    * 00610001
.* MODULE TYPE - MACRO                                                * 00620001
.*                                                                    * 00630001
.* ENTRY POINT - N/A                                                  * 00640001
.*                                                                    * 00650001
.* INPUT - THE FOLLOWING MAY BE SPECIFIED AS PARAMETERS TO ENFREQ     * 00660001
.*                                                                    * 00670001
.*        . &ACTION - Action requested for ENF processing             * 00680001
.*                     External types: LISTEN, DELETE             @L7C* 00690001
.*                     Internal types: SIGNAL, QUERY, REGISTER    @L7C* 00700001
.*                                                                    * 00710001
.*        . &BITCOMPARE - Comparison operator that determines how @L6A* 00720001
.*                     ENF is to interpret the bit-mapped         @L6A* 00730001
.*                     qualifier specified with the BITQUAL       @L6A* 00740001
.*                     parameter.                                 @L6A* 00750001
.*                     SUBSET => All '1's in listener's bit-      @L6A* 00760001
.*                       mapped qualifier must also be '1's in    @L6A* 00770001
.*                       signaller's bit-mapped qualifier         @L6A* 00780001
.*                     INTERSECT => At least 1 '1' in listener's  @L6A* 00790001
.*                       bit-mapped qualifier must be a '1' in    @L6A* 00800001
.*                       signaller's bit-mapped qualifier         @L6A* 00810001
.*                     EQUAL => Listener's and signaller's        @L6A* 00820001
.*                       bit-mapped qualifiers must match exactly @L6A* 00830001
.*                                                                    * 00840001
.*        . &BITQUAL - Bit-mapped qualifier that may be used to   @L6A* 00850001
.*                     more specifically identify the event of    @L6A* 00860001
.*                     interest.  The meaning of the bit-mapped   @L6A* 00870001
.*                     qualifier depends on the event code being  @L6A* 00880001
.*                     signalled.                                 @L6A* 00890001
.*                                                                    * 00900001
.*        . &CODE - The event code                                    * 00910001
.*                                                                    * 00920001
.*        . &DISABLE - Determines if ENF should disable the       @L4A* 00930001
.*                     listen exit if an error occurs while the   @L4A* 00940001
.*                     listen exit has control (valid             @L4A* 00950001
.*                     types: YES, NO)                            @L4A* 00960001
.*                                                                    * 00970001
.*        . &DTOKEN - Token for LISTEN and DELETE request             * 00980001
.*                                                                    * 00990001
.*        . &EOM - Request to delete LISTEN request when address  @L5A* 01000001
.*                 space terminates.  YES or NO are only valid    @L5A* 01010001
.*                 choices.                                       @L5A* 01020001
.*                                                                    * 01030001
.*        . &EOT - Request to delete LISTEN request when task     @L5A* 01040001
.*                 terminates. YES or NO are only valid choices.  @L5A* 01050001
.*                                                                    * 01060001
.*        . &ESTBNME - Name of module establishing LISTEN exit    @D1A* 01070001
.*                     this keyword is optional but required if   @D1A* 01080001
.*                     EXITNME is specified.                      @D1A* 01090001
.*                                                                    * 01100001
.*        . &EXIT - Address of signaller's or listener's              * 01110001
.*                  exit routine                                      * 01120001
.*                                                                    * 01130001
.*        . &EXITNME - Name of LISTEN exit routine                @D1A* 01140001
.*                     this keyword is optional but required if   @D1A* 01150001
.*                     ESTBNME is specified.                      @D1A* 01160001
.*                                                                    * 01170001
.*        . &FLTRBLK - Specifies the address of an ENF Listener   @L7A* 01180001
.*                     Filter block.  This can only be specified  @L7A* 01190001
.*                     for signal types that support it.  The     @L7A* 01200001
.*                     filter data is specific to the signal type @L7A* 01210001
.*                     and its mapping is owned by the signaler.  @L7A* 01220001
.*                     The storage can be released immediately    @L7A* 01230001
.*                     after completion of an ENFREQ invocation   @PKC* 01240001
.*                     of TYPE = SYNC.  This keyword is allowed   @PKC* 01250001
.*                     only for ACTION = LISTEN.                  @PKC* 01260001
.*                                                                    * 01270001
.*        . &FLTRXIT - Specifies the address of an ENF Signaler   @L7A* 01280001
.*                     exit supporting FLTRBLK.  This keyword is  @L7A* 01290001
.*                     allowed only for ACTION = REGISTER.        @L7A* 01300001
.*                                                                    * 01310001
.*        . &FREEPRM - FREEMAIN parameters used to free the           * 01320001
.*                     signaller's parameter list                     * 01330001
.*                     Format: FREEPRM=(subpool,length,key)       @L6A* 01340001
.*                                                                    * 01350001
.*        . &LISTENRS- Used by the caller to specify the name of  @L3A* 01360001
.*                     a variable into which ENF will return the  @L3A* 01370001
.*                     number of listeners for &CODE event.  This @L3A* 01380001
.*                     keyword is only allowed when &TYPE=SYNC.   @L3A* 01390001
.*                     The returned value includes the count of   @L3A* 01400001
.*                     listeners for an event that match the      @L3A* 01410001
.*                     &QMASK and &QUAL.                          @L3A* 01420001
.*                     This keyword is allowed only for           @D2A* 01430001
.*                     ACTION = QUERY.                            @D2A* 01440001
.*                                                                    * 01450001
.*        . &MASEXIT - Request that multiple address spaces are   @PFA* 01460001
.*                     allowed to use the same listen exit.  YES  @PFA* 01470001
.*                     or NO are the only valid choices.          @PFA* 01480001
.*                                                                    * 01490001
.*        . &PARM -  Address of signaller's, listener's, or       @PNC* 01500001
.*                   querier's parameter list                     @PNC* 01510001
.*                                                                    * 01520001
.*        . &PARMLEN - The length of the signaller's parameter    @L6A* 01530001
.*                     list, for sysplex-wide notification.       @L6A* 01540001
.*                     Either FREEPRM or PARMLEN is required for  @L6A* 01550001
.*                     cross-system signal requests if PARM is    @L6A* 01560001
.*                     specified, to define the length of the     @L6A* 01570001
.*                     parameters to be sent across the sysplex.  @L6A* 01580001
.*                                                                    * 01590001
.*        . &PLISTVER - Specifies the version of the parameter    @PAA* 01600001
.*                     list. Accepted values are 2,3,MAX.         @PAA* 01610001
.*                     The default is the highest level needed    @PAA* 01620001
.*                     by any of the parameters specified on the  @PAA* 01630001
.*                     macro invocation.  Specify MAX to get the  @PAA* 01640001
.*                     longest parameter list supported.  This    @PAA* 01650001
.*                     is especially applicable for MF=L to       @PAA* 01660001
.*                     ensure that the list form used is at       @PAA* 01670001
.*                     least as long as the execute form.         @PAA* 01680001
.*                                                                    * 01690001
.*                     The following parameters require version   @PAA* 01700001
.*                     3 or MAX:                                  @PAA* 01710001
.*                       BITQUAL, BITCOMPARE, XSYS, PARMLEN       @PAA* 01720001
.*                       MASEXIT, FLTRBLK, FLTRXIT                @L7C* 01730001
.*                     The following parameter is for             @05A* 01740001
.*                     IBM use only, and requires version 4:      @05A* 01750001
.*                       XCFFILTERGROUP  (IBM use only)           @05A* 01760001
.*                                                                @05A* 01770001
.*                     IBM use only: Prior to expanding the       @05A* 01780001
.*                                   parameter list, refer to     @05A* 01790001
.*                                   "Cautionary notes", in       @05A* 01800001
.*                                   IEFENFRP.                    @05A* 01810001
.*                                                                    * 01820001
.*        . &QMASK - Mask to determine which bytes in the             * 01830001
.*                   qualifier are to be used in comparing            * 01840001
.*                   qualifiers during SIGNAL processing.             * 01850001
.*                                                                    * 01860001
.*        . &QUAL - Qualifier (the meaning of the qualifier is        * 01870001
.*                  determined by the signallers/listeners of         * 01880001
.*                  a given event)                                    * 01890001
.*                                                                    * 01900001
.*        . &RELATED - Used by the caller to specify                  * 01910001
.*                     information used to self-document the          * 01920001
.*                     various ENFREQ requests                        * 01930001
.*                                                                    * 01940001
.*        . &SPXITRET- This area is not used by the caller.  It   @P5A* 01950001
.*                     was added so that the caller's parameter   @P5A* 01960001
.*                     list will remain consistent with ENF's     @P5A* 01970001
.*                     local copy of the parameter list.          @P5A* 01980001
.*                                                                    * 01990001
.*        . &SRBEXIT - Address of listener's exit routine that        * 02000001
.*                  will run as an SRB.                           @L5A* 02010001
.*                                                                    * 02020001
.*        . &STOKEN - Token for SIGNAL request                        * 02030001
.*                                                                    * 02040001
.*        . &TYPE - Requested ENF to process the request              * 02050001
.*                  synchronously(SYNC) or asynchronously(ASYNC)      * 02060001
.*                                                                    * 02070001
.*        . &XCFFILTERGROUP = Specifies an 8 character XCF group  @05A* 02080001
.*                            name (or a register in parentheses  @05A* 02090001
.*                            containing the address of an 8      @05A* 02100001
.*                            character group name) that will be  @05A* 02110001
.*                            used to determine the set of        @05A* 02120001
.*                            systems that to receive the ENF     @05A* 02130001
.*                            signal.  The signal will be sent    @05A* 02140001
.*                            only to systems where a member of   @05A* 02150001
.*                            the specified XCF group is active.  @05A* 02160001
.*                            Systems that do not have an active  @05A* 02170001
.*                            member of the XCF group will not    @05A* 02180001
.*                            receive the ENF signal.             @05A* 02190001
.*                                                                    * 02200001
.*        . &XSYS    - For signal requests: YES => listeners on   @L6A* 02210001
.*                     other systems in the sysplex are to be     @L6A* 02220001
.*                     notified, NO => only listeners on the      @L6A* 02230001
.*                     local system are to be notified.           @L6A* 02240001
.*                     For listen requests: YES => listener will  @L6A* 02250001
.*                     accept notifications originating on other  @L6A* 02260001
.*                     systems in the sysplex, NO => listener     @L6A* 02270001
.*                     will accept only notifications from the    @L6A* 02280001
.*                     local system.                              @L6A* 02290001
.*                                                                    * 02300001
.* OUTPUT - THE OUTPUT FROM THE ENFREQ MACRO IS AN EVENT              * 02310001
.*          PARAMETER LIST (FOR LIST AND NORMAL FORM) AND/OR          * 02320001
.*          INSTRUCTIONS TO MODIFY THE EVENT PARAMETER LIST           * 02330001
.*          AND INVOKE THE ENF SERVICE ROUTINE (IEFENFFX).            * 02340001
.*                                                                    * 02350001
.* EXIT,NORMAL                                                        * 02360001
.*   CONDITION - NO ERRORS DETECTED                                   * 02370001
.*   OUTPUT    - NO MNOTE ISSUED. SEVERITY CODE = 0.                  * 02380001
.*                                                                    * 02390001
.* EXIT,NORMAL                                                        * 02400001
.*   CONDITION - ERROR CONDITION DETECTED BY THE ENFREQ MACRO         * 02410001
.*   OUTPUT    - INFORMATION MNOTES WITH SEVERITY CODE 4              * 02420001
.*               ISSUED WHEN PARAMETER SPECIFIED IS                   * 02430001
.*               INCORRECT. THE SPECIFIED PARAMETER IS IGNORED        * 02440001
.*               AND THE DEFAULT VALUE FOR THAT PARAMETER             * 02450001
.*               IS ASSUMED.                                          * 02460001
.*                                                                    * 02470001
.* EXIT, ERROR                                                        * 02480001
.*   CONDITION - ERROR CONDITION DETECTED BY THE ENFREQ MACRO         * 02490001
.*   OUTPUT    - ERROR MNOTES WITH SEVERITY CODE 8 (SEE               * 02500001
.*               MESSAGES) ISSUED WHEN CERTAIN REQUIRED               * 02510001
.*               PARAMETER IS MISSING OR INCORRECTLY SPECIFIED.       * 02520001
.*               THE MACRO WILL ATTEMPT TO SCAN FOR ADDITIONAL        * 02530001
.*               ERRORS.                                              * 02540001
.*                                                                    * 02550001
.* EXIT, ERROR                                                        * 02560001
.*   CONDITION - SEVERE ERROR DETECTED BY THE ENFREQ MACRO            * 02570001
.*   OUTPUT    - ERROR MNOTES WITH SEVERITY CODE 12 (SEE              * 02580001
.*               MESSAGES) ISSUED WHEN CERTAIN REQUIRED               * 02590001
.*               PARAMETER IS MISSING OR INCORRECTLY SPECIFIED.       * 02600001
.*               THE MACRO EXPANSION WILL BE TERMINATED AS            * 02610001
.*               A RESULT OF THE ERROR.                               * 02620001
.*                                                                    * 02630001
.*                                                                    * 02640001
.* EXTERNAL REFERENCES - N/A                                          * 02650001
.*                                                                    * 02660001
.* TABLES - N/A                                                       * 02670001
.*                                                                    * 02680001
.* MACROS - IEFENFCT                                                  * 02690001
.*          IEFENFPM                                                  * 02700001
.*                                                                    * 02710001
.* MESSAGES - (MNOTES)                                                * 02720001
.*   - INFORMATIONAL MNOTES :                                         * 02730001
.*       MNOTE   04,'keyword NOT ALLOWED FOR action REQUEST - IGNORED'* 02740001
.*       MNOTE   04,'keyword NOT VALID WITH SRBEXIT'              @PFC* 02750001
.*       MNOTE   04,'EOM=NO EOT=YES IS NOT A VALID COMBINATION'   @P8C* 02760001
.*       MNOTE   04,'DTOKEN NOT ALLOWED IN LIST FORM - IGNORED'       * 02770001
.*       MNOTE   04,'LISTENRS NOT ALLOWED FOR LIST FORM - IGNORED'    * 02780001
.*                                                                @L3A* 02790001
.*       MNOTE   04,'LISTENRS NOT ALLOWED FOR TYPE=ASYNC - IGNORED    * 02800001
.*                                                                @L3A* 02810001
.*                                                                    * 02820001
.*   - ERROR MNOTES :                                                 * 02830001
.*       MNOTE   08,'BOTH ESTBNME AND EXITNME MUST BE SPECIFIED'  @D1A* 02840001
.*       MNOTE   08,'DTOKEN REQUIRED FOR DELETE REQUEST'              * 02850001
.*       MNOTE   08,'ACTION REQUIRED WITH DTOKEN - DTOKEN IGNORED'    * 02860001
.*                                                                @P2A* 02870001
.*       MNOTE   08,'INVALID EOT : EOT=eot'                       @L5A* 02880001
.*       MNOTE   08,'INVALID EOM : EOM=eom'                       @L5A* 02890001
.*       MNOTE   08,'keyword1 NOT ALLOWED WITH keyword2           @L6C* 02900001
.*       MNOTE   08,'EXIT OR SRBEXIT REQUIRED FOR LISTEN REQUEST' @L5A* 02910001
.*       MNOTE   08,'INVALID TYPE : TYPE=&TYPE IGNORED'               * 02920001
.*       MNOTE   08,'INVALID QMASK VALUE : &QMASK(&I) IGNORED'        * 02930001
.*       MNOTE   08,'DUPLICATE QMASK VALUE : &QMASK(&I)'              * 02940001
.*       MNOTE   08,'EXTRANEOUS QMASK INFO - QMASK=(ALL) ASSUMED'     * 02950001
.*       MNOTE   08,'EXTRANEOUS QMASK INFO - QMASK=(NONE) ASSUMED'    * 02960001
.*       MNOTE   08,'CODE PARAMETER REQUIRED'                         * 02970001
.*       MNOTE   08,'LENGTH REQUIRED IN FREEPRM - FREEPRM IGNORED'    * 02980001
.*       MNOTE   08,'SUBPOOL REQUIRED IN FREEPRM - FREEPRM IGNORED'   * 02990001
.*       MNOTE   08,'SUBPOOL AND LENGTH REQUIRED - FREEPRM IGNORED'   * 03000001
.*       MNOTE   08,'INVALID FREEPRM KEY VALUE - FREEPRM IGNORED'     * 03010001
.*       MNOTE   08,'keyword IN REGISTER NOT ALLOWED FOR LIST FORM'   * 03020001
.*       MNOTE   08,'keyword NOT ALLOWED FOR LIST FORM'           @L6C* 03030001
.*       MNOTE   08,'INVALID DISABLE : DISABLE=&DISABLE IGNORED'      * 03040001
.*       MNOTE   08,'ESTBNME AND EXITNME REQUIRED WITH DISABLE'   @L4A* 03050001
.*       MNOTE   08,'INVALID keyword: keyword=&KEYWORD'           @L6A* 03060001
.*       MNOTE   08,'MORE THAN x keyword VALUE(S) - keyword IGNORED'  * 03070001
.*       MNOTE   08,'FREEPRM OR PARMLEN REQUIRED FOR SIGNAL WHEN  @L6A* 03080001
.*                  XSYS=YES AND PARM SPECIFIED'                  @L6A* 03090001
.*       MNOTE   08,'XSYS=YES REQUIRED WITH PARMLEN'              @L6A* 03100001
.*       MNOTE   08,'BITQUAL MUST BE A HEX NUMERIC VALUE'         @L6A* 03110001
.*       MNOTE   08,'keyword1 REQUIRED WITH keyword2'             @PCC* 03120001
.*       MNOTE   08,'FREEPRM NOT ALLOWED WITH PARMLEN'            @PGA* 03130001
.*       MNOTE   08,'XSYS=YES REQUIRED WITH XCFFILTERGROUP'       @05A* 03140001
.*                                                                    * 03150001
.*   - Terminating MNOTES:                                            * 03160001
.*       MNOTE   12,'INVALID ACTION : ACTION=&ACTION-MACRO TERMINATED'* 03170001
.*       MNOTE   12,'INVALID MF PARAMETER : MF=&MF - MACRO TERMINATED'* 03180001
.*       MNOTE   12,'ACTION REQUIRED - MACRO TERMINATED'              * 03190001
.*       MNOTE   12,'ERROR IN ENFREQ MACRO - MACRO TERMINATED'        * 03200001
.*       MNOTE   12,'PLISTVER MUST BE 2, 3, 4, or MAX'            @05C* 03210001
.*       MNOTE   12,'PLISTVER=&PLISTVER BUT PLISTVER OF &VERS IS      * 03220001
.*                   REQUIRED'                                    @PAA* 03230001
.*                                                                    * 03240001
.*                                                                    * 03250001
.* CHANGE ACTIVITY - D0,P1,P2,P3,L1,D1,P4,L3,D2,P5,L4,P6,L5,P7,P8,    * 03260001
.*                   P9                                           @P9C* 03270001
.* The above section of the change activity is no longer updated. @L6A* 03280001
.*                                                                    * 03290001
.*   $D0= DCR#1   JBB1326  800604  PD42: IMPLICIT FLAG - NEW CODE     * 03300001
.*   $P1= PMM0114 JBB1326  800604  PD42: ADD KEYWORD RETCODE FOR      * 03310001
.*                                         ENFREQP                    * 03320001
.*   $P2= PMM0135 JBB1326  800604  PD42: CHECK FOR ACTION PARAMETER   * 03330001
.*                                         IF DTOKEN IS SPECIFIED IN  * 03340001
.*                                         EXECUTE FORM               * 03350001
.*   $P3= PMM0335 JBB1326  810420  PD42: CORRECT CHANGE ACTIVITY      * 03360001
.*                                         LINE FLAGS AND COPYRIGHT   * 03370001
.*   $L1= COEXWTO2 JBB2220 840813  PDD7: SUPPORT FOR JES3/MCS     @L1A* 03380001
.*                                       COEXISTENCE              @L1A* 03390001
.*   $D1= DCR1019  HBB3310 870918  PDT3: SERVICEABILITY           @D1A* 03400001
.*   $P4= PC41800  HBB3310 871130  PDT3: CORRECT ADDRESSABILITY   @P4A* 03410001
.*   $L3= CNITG    HBB4410 881229  PDT4: LISTENER COUNT           @L3A* 03420001
.*   $D2= DCR0227  HBB4410 891016  PDIB: QUERY FOR INFORMATION    @D2A* 03430001
.*   $P5= PEO3561  HBB4410 900209  PDIB: SPECIAL EXIT RETURN CODE @P5A* 03440001
.*   $L4= ENFEXT   HBB4430 911204  PDIB: DISABLE KEYWORD          @L4A* 03450001
.*   $P6= PKB2552  HBB4430 920617  PDIB: CHANGE DISTLIB           @P6A* 03460001
.*   $L5= ENFEN    HBB5510 921203  PDIB: ENF Enhancements         @L5A* 03470001
.*   $P7= PIG4001  HBB5510 921203  PDIB: ENF Enhancements         @P7A* 03480001
.*   $P8= PIG4000  HBB5510 921203  PDIB: ENF Enhancements         @P8A* 03490001
.*   $P9= PIG4029  HBB5510 930520  PDIB: ENF Enhancements         @P9A* 03500001
.*   $01= OW14561  HBB5520 950804  PDLS: ENF Keywords ESTBNME and @01A* 03510001
.*                                       EXITNME Corrections      @01A* 03520001
.*   $02= OW14325  HBB5510 950829  PDLS: Fix for CVT - PREFIX=YES @02A* 03530001
.*   $L6= GRS32    JBB6602 950921  PDBN: Sysplex-wide ENF         @L6A* 03540001
.*   $PA= PSD0835  JBB6602 960404  PDXB: Sysplex-wide ENF         @PAA* 03550001
.*   $PB= PSD0834  JBB6602 960404  PDBN: External classification  @PBA* 03560001
.*   $PC= PSD0495  JBB6602 960404  PDBN: MNOTE severity           @PCA* 03570001
.*   $PD= PSD0516  JBB6602 960404  PDBN: DISABLE flags            @PDA* 03580001
.*   $PE= PSD0584  JBB6602 960404  PDBN: PARMLEN=equated value    @PEA* 03590001
.*   $PF= PXD0510  HBB7703 991018  PDOH: FIN APAR OW39364         @PFA* 03600001
.*   $03= OW51465  HBB7703 011115  PDOO: Storage overlay or S0C4S @03A* 03610001
.*                                       when parm=ACTION=LISTEN,MF=L * 03620001
.*                                                                @03A* 03630001
.*   $04= OW52640  HBB7705 020115  PDOO: Assemble error           @04A* 03640001
.*                                       PE of OW51465            @04A* 03650001
.*   $PG= PYN0211  HBB7708 021031  PDOO: ENFREQ SIGNAL with SYNC  @PGA* 03660001
.*                                       and FREEPRM causes       @PGA* 03670001
.*                                       storage errors           @PGA* 03680001
.*   $PH= PYN0824  HBB7708 021231  PDOO: Compile errors with      @PHA* 03690001
.*                                       PYN0211                  @PHA* 03700001
.*   $L7= GRSELF51 HBB7760 080401  PDBC: FLTRBLK support          @L7A* 03710001
.*   $PI= ME14054  HBB7760 080718  PDBC: Fix prop and metadata        * 03720001
.*   $PJ= ME14228  HBB7760 080806  PDBC: Misc                     @PJA* 03730001
.*   $PK= ME14222  HBB7760 080828  PDBC: Comment update           @PKA* 03740001
.*   $PL= ME11177  HBB7760 080925  PDOO: Copy signaler's parameter    * 03750001
.*                                       list                     @PLA* 03760001
.*   $PM= ME14222  HBB7760 081202  PDOO: Remove ME11177           @PMA* 03770001
.*   $L8= ME17623  HBB7770 091026  PDXB: Remove need for CVTPTR   @L8A* 03780001
.*   $PN= ME21895  HBB7790 110616  PDH6: Allow PARM with QUERY    @PNA* 03790001
.*   $05= OA41921  HBB7780 131021  PDOO: High CPU for XSYS signal @05A* 03800001
.*   $06= OA45439  HBB7780 140618  PDOO: ENFPM length change          * 03810001
.*                                       PE of OA41921            @06A* 03820001
.*                                                                    * 03830001
.**** END OF SPECIFICATIONS ******************************************* 03840001
.* A 000000-999999                                                @D0A* 03850001
.* C LOCATION OF ENFRQ IS CHANGED TO SYS1.MACLIB FROM                 * 03860001
.*   SYS1.PVTMACS.                                                @L1A* 03870001
.* A ADDED ESTBNME AND EXITNME TO IDENTIFY WHO ESTABLISHED            * 03880001
.*   THE LISTEN EXIT AND THE NAME OF THE LISTEN EXIT.             @D1A* 03890001
.* A ADDED LISTENRS PARAMETER                                     @L3A* 03900001
.* A ADDED ACTION QUERY FOR INFORMATION                           @D2A* 03910001
.* A ADDED SPXITRET SPECIAL EXIT RETURN CODE                      @P5A* 03920001
.* A DISABLE KEYWORD                                              @L4A* 03930001
.* C CHANGE DISTLIB TO AMACLIB.                                   @P6A* 03940001
.* A Added SRBEXIT, EOT, EOM and allowed PARM on listen.          @L5A* 03950001
.* C Corrected assembler instructions generated for EOT=YES/          * 03960001
.*   EOM=NO and EOM=NO/SRBEXIT= error conditions                  @P7A* 03970001
.* C Corrected MNOTE for EOT=YES EOM=NO error condition           @P8A* 03980001
.* C Don't set EOT or EOM defaults on execute form of macro.      @P9A* 03990001
.* A Added register specified support for EXITNME and ESTBNME,    @01A* 04000001
.* C Corrected code to allow CVT with PREFIX=YES specified.       @02A* 04010001
.* C Defined XSYS, PARMLEN, BITQUAL, and BITCOMPARE keywords.     @L6A* 04020001
.* C Defined PLISTVER keyword to control size of generated            * 04030001
.*   parameter list for compatibility purposes.                   @PAA* 04040001
.* C Changed external classification to identify parameters that      * 04050001
.*   are not part of the intended interface.                      @PBA* 04060001
.* C Changed "keyword1 REQUIRED WITH keyword" MNOTEs from             * 04070001
.*   severity 4 to severity 8.                                    @PCA* 04080001
.* C Don't set flags ENFPDISA and ENFPDISO unless DISABLE             * 04090001
.*   explicitly specified.                                        @PDA* 04100001
.* C Don't try to permit equated value for PARMLEN, since it is       * 04110001
.*   not possible to recognize values defined as EQU x,len,C'F'.  @PEA* 04120001
.* A Defined MASEXIT keyword.  Used to allow multiple address         * 04130001
.*   spaces to use the same listen exit.                          @PFA* 04140001
.* C Added code to only query the MASEXIT parameter when the          * 04150001
.*   version is 3 or greater.  This is because when the version       * 04160001
.*   is 2 or less, the parameter is not generated by the macro.   @03A* 04170001
.* C Fixed syntax error from fix for OW51465.                     @04A* 04180001
.* C Added code to check that TYPE=SYNC is not specified with         * 04190001
.*   FREEPRM for SIGNAL requests.                                 @PGA* 04200001
.* D Removed the code from PYN0211 (chg. flag @PG) which restricts    * 04210001
.*   the use of TYPE=SYNC specified together with FREEPARM for        * 04220001
.*   SIGNAL requests. These parameters are actually compatible,       * 04230001
.*   and should not be flagged as an error when they are coded.       * 04240001
.*   together.                                                    @PHA* 04250001
.* A Defined FLTRBLK & FLTRXIT keywords, and ACTION = REGISTER    @L7A* 04260001
.* A Enforce FREEPRM must be specified on signal requests with    @PLA* 04270001
.*   PARM and ASYNC.                                              @PLA* 04280001
.* D Remove ME11177 code that enforces specifying FREEPRM with    @PMA* 04290001
.*   PARM and ASYNC. This is for compatibility with legacy        @PMA* 04300001
.*   code which is too troublesome to change at this point.       @PMA* 04310001
.* C Use 16 rather than CVTPTR                                    @L8C* 04320001
.* C Allow PARM with QUERY                                        @PNC* 04330001
.* C Define XCFFILTERGROUP keyword for ACTION = SIGNAL only.      @05A* 04340001
.* C Make PLISTVER=MAX equivalent to PLISTVER=3.                  @06A* 04350001
.*-------------------------------------------------------------------*  04360001
.*   DECLARATIONS FOR TEMPORARY VALUES FOR EVENT PARAMETER LIST      *  04370001
.*-------------------------------------------------------------------*  04380001
         LCLA    &LEN,&ACT             WORD 1 : LENGTH,ACTION           04390001
         LCLC    &CDE                  WORD 2 : CODE                    04400001
         LCLC    &MSK                  WORD 3 : QMASK                   04410001
         LCLA    &FLG                  WORD 3 : FLAGS                   04420001
         LCLC    &FREEKEY              WORD 3 : KEY FOR FREEPRM         04430001
         LCLC    &FREESP               WORD 3 : SUBPOOL FOR FREEPRM     04440001
         LCLC    &QUALIF               WORD 4 : QUALIFIER               04450001
         LCLC    &EXTADR               WORD 5 : EXIT ADDRESS            04460001
         LCLC    &PARMS                WORD 6 : SIGNAL or LISTEN parms  04470001
         LCLC    &TOK                  WORD 7 : TOKEN                   04480001
         LCLC    &FREELEN              WORD 8 : LENGTH FOR FREEPRM      04490001
         LCLA    &VERS,&RESV           WORD 9 : VERSION, RESERVED  @D1A 04500001
         LCLA    &IVERS                Specified or implied value      +04510001
                                         of PLISTVER               @PAA 04520001
         LCLA    &RTAD                 WORD 10: RETURN ADDRESS     @D1A 04530001
         LCLC    &ESTB                 WORD 11,12: ESTABLISHER     @D1A 04540001
         LCLC    &ENME                 WORD 13,14: LISTEN EXIT     @D1A 04550001
         LCLC    &LISTR                WORD 15 :LISTENR NUMBER     @L3A 04560001
         LCLC    &BQUAL                BITQUAL value               @L6A 04570001
         LCLA    &FLG2                 2nd flag word (ENFPFLG2)    @L6A 04580001
         LCLC    &XCFG                 XCFFILTERGROUP name         @05A 04590001
.*-------------------------------------------------------------------*  04600001
.*   DECLARATIONS FOR LOCAL VARIABLES                                *  04610001
.*-------------------------------------------------------------------*  04620001
         LCLB    &NORMAL,&LIST,&EXECUTE FORM OF MACRO CALL              04630001
         LCLC    &GNAME                LABEL GENERATED                  04640001
         LCLC    &REGC                 REGISTER IN CHARACTERS           04650001
         LCLA    &N,&I                 FOR PROCESSING QMASK             04660001
         LCLB    &QBYTE(4),&ERRMASK    FOR PROCESSING QMASK             04670001
         LCLC    &INX                  FOR PROCESSING QMASK             04680001
         LCLB    &DONECDE              CODE ALREADY BEEN PROCESSED      04690001
         LCLB    &DONEXIT              EXIT ALREADY BEEN PROCESSED      04700001
         LCLB    &DONEOM               EOM already coded          @L5A  04710001
         LCLB    &DONEOT               EOT already coded          @L5A  04720001
         LCLB    &DONEPRM              PARM ALREADY BEEN PROCESSED      04730001
         LCLB    &DONETYP              TYPE ALREADY BEEN PROCESSED      04740001
         LCLB    &DONEACT              ACTION ALREADY BEEN PROCESSED    04750001
         LCLB    &DONEMSK              QMASK ALREADY BEEN PROCESSED     04760001
         LCLB    &DONESP               FREEMAIN : SUBPOOL PROCESSED     04770001
         LCLB    &DONELEN              FREEMAIN : LENGTH PROCESSED      04780001
         LCLB    &DONEKEY              FREEMAIN : KEY PROCESSED         04790001
         LCLB    &DONEFFG              ENFPFREE FLAG HAS BEEN SET UP    04800001
         LCLB    &DONEFRP              FREEPRM PROCESSING COMPLETED     04810001
         LCLB    &DONEDIS              DISABLE ALREADY PROCESSED        04820001
         LCLB    &DONEXSYS             XSYS already processed      @L6A 04830001
         LCLB    &DONEPLEN             PARMLEN already processed   @L6A 04840001
         LCLB    &DONEBQUAL            BITQUAL already processed   @L6A 04850001
         LCLB    &DONEBCOMP            BITCOMPARE already              +04860001
                                         processed                 @L6A 04870001
         LCLB    &DONEMASE             MASEXIT already coded       @PFA 04880001
         LCLB    &DONFLTR              FLTRBLK already coded       @L7A 04890001
         LCLB    &DONFLTX              FLTRXIT already coded       @L7A 04900001
         LCLB    &IGNFLTB              FLTRBLK ignored             @PJA 04910001
         LCLB    &IGNFLTX              FLTRXIT ignored             @PJC 04920001
         LCLA    &MAXF                 MAXIMUM NUMBER OF FREEPRM ATTR   04930001
         LCLA    &MINF                 MINIMUM NUMBER OF FREEPRM ATTR   04940001
         LCLA    &MAXQMSK              MAXIMUM NUMBER OF QMASK VALUES   04950001
         LCLA    &NPARAMS,&MAXBR,&EXTRA FOR ACTR CALCULATION            04960001
         LCLB    &USING1               On if USING done            @PAA 04970001
         LCLB    &DONXCFG              XCFFILTERGROUP alrdy coded  @05A 04980001
         LCLB    &IGNXCFG              XCFFILTERGROUP ignored      @05A 04990001
.*-------------------------------------------------------------------*  05000001
.*   DECLARATIONS FOR DEBUGGING                                      *  05010001
.*-------------------------------------------------------------------*  05020001
         LCLB    &STOPLOP              DEBUG : PREVENT LOOPING          05030001
.*-------------------------------------------------------------------*  05040001
.* Determine required parameter list version                       @PAA 05050001
.*-------------------------------------------------------------------*  05060001
         AIF   ('&XCFFILTERGROUP' NE '').V4                        @05A 05070001
         AIF   ('&BITQUAL' NE '' OR '&BITCOMPARE' NE '').V3        @PAA 05080001
         AIF   ('&XSYS' NE '' OR '&PARMLEN' NE '').V3              @PAA 05090001
         AIF   ('&MASEXIT' NE '').V3                               @PFA 05100001
         AIF   ('&FLTRBLK' NE '').V3                               @L7A 05110001
         AIF   ('&FLTRXIT' NE '').V3                               @L7A 05120001
&VERS    SETA    2                     PARAMETER LIST VERSION      @PAA 05130001
         AGO   .ENDV                                               @PAA 05140001
.V3      ANOP                                                      @PAA 05150001
&VERS    SETA    3                     PARAMETER LIST VERSION      @PAM 05160001
         AGO   .ENDV                                               @05A 05170001
.V4      ANOP                                                      @05A 05180001
&VERS    SETA    4                     PARAMETER LIST VERSION      @05A 05190001
.ENDV    ANOP                                                      @PAA 05200001
.*-------------------------------------------------------------------*  05210001
.*   INITIALIZE LOCAL VARIABLES                                      *  05220001
.*-------------------------------------------------------------------*  05230001
&ACT     SETA    0                     INVALID ACTION                   05240001
&CDE     SETC    '0'                   INVALID CODE                     05250001
&FLG     SETA    X'00'                 DEFAULT VALUES FOR FLAGS         05260001
&FLG2    SETA    X'00'                 Default for 2nd flag byte   @L6A 05270001
&MSK     SETC    '00000000'            NOT SPECIFIED BY CALLER          05280001
&FREEKEY SETC    '0'                   NOT SPECIFIED BY CALLER          05290001
&FREESP  SETC    '0'                   NOT SPECIFIED BY CALLER          05300001
&QUALIF  SETC    '0'                   NOT SPECIFIED BY CALLER          05310001
&EXTADR  SETC    '0'                   NOT SPECIFIED BY CALLER          05320001
&PARMS   SETC    '0'                   NOT SPECIFIED BY CALLER          05330001
&TOK     SETC    '0'                   NOT SPECIFIED BY CALLER          05340001
&LISTR   SETC    '0'                   NOT SPECIFIED BY CALLER     @L3A 05350001
&FREELEN SETC    '0'                   NOT SPECIFIED BY CALLER          05360001
&RESV    SETA    0                     RESERVED FIELD              @D1C 05370001
&RTAD    SETA    0                     RETURN ADDRESS              @D1C 05380001
&ESTB    SETC    '''        '''        ESTABLISHER NAME            @D1C 05390001
&ENME    SETC    '''        '''        LISTEN EXIT NAME            @D1C 05400001
&BQUAL   SETC    '00'                  Default BITQUAL value       @L6A 05410001
&XCFG    SETC    '''        '''        XCFFILTERGROUP NAME         @05A 05420001
.*-------------------------------------------------------------------*  05430001
.*                                                                   *  05440001
.*       MINIMUM/MAXIMUM NUMBER OF VALUES ALLOWED IN FREEPRM AND     *  05450001
.*       QMASK                                                       *  05460001
.*-------------------------------------------------------------------*  05470001
&MAXF    SETA    3                     (SUBPOOL,LENGTH,KEY)             05480001
&MINF    SETA    2                     (SUBPOOL,LENGTH)                 05490001
&MAXQMSK SETA    4                     UP TO 4 QMASK VALUES ALLOWED     05500001
.*-------------------------------------------------------------------*  05510001
.*                                                                   *  05520001
.*       SET UP ACTR VALUE                                           *  05530001
.*                                                                   *  05540001
.*-------------------------------------------------------------------*  05550001
&NPARAMS SETA    20                    NUMBER OF MACRO PARAMETERS @L5C  05560001
&MAXBR   SETA    20                    MAX BRANCHES/PARAM (QMASK USED)  05570001
&EXTRA   SETA    100                   EXTRA BRANCHES                   05580001
         ACTR    &NPARAMS*&MAXBR+&EXTRA                                 05590001
.*-------------------------------------------------------------------*  05600001
.* Check the requested parameter list version.                    @PAA  05610001
.*-------------------------------------------------------------------*  05620001
         AIF     ('&PLISTVER' EQ '').NOPLVER                      @PAA  05630001
         AIF     ('&PLISTVER' EQ '2').OKPLVER                     @PAA  05640001
         AIF     ('&PLISTVER' EQ '3').OKPLVER                     @PAA  05650001
         AIF     ('&PLISTVER' EQ '4').OKPLVER                     @05A  05660001
         AIF     ('&PLISTVER' EQ 'MAX').OKPLVER                   @PAA  05670001
         MNOTE 12,'PLISTVER MUST BE 2, 3, 4, OR MAX'              @05C  05680001
         AGO     .ERREXIT                                         @PAA  05690001
.OKPLVER ANOP                                                     @PAA  05700001
.* Set PLISTVER MAX to 3...                                       @06C  05710001
&IVERS   SETA    3                                                @06C  05720001
         AIF     ('&PLISTVER' EQ 'MAX').SETPLVER                  @PAA  05730001
&IVERS   SETA    &PLISTVER                                        @PAA  05740001
.SETPLVER ANOP                                                    @PAA  05750001
         AIF     (&IVERS GE &VERS).OKPLVER2                       @PAA  05760001
  MNOTE 12,'PLISTVER=&PLISTVER BUT PLISTVER OF &VERS IS REQUIRED' @PAA  05770001
         AGO     .ERREXIT                                         @PAA  05780001
.OKPLVER2 ANOP                                                    @PAA  05790001
&VERS    SETA    &IVERS                                           @PAA  05800001
.NOPLVER ANOP                                                     @PAA  05810001
&LEN    SETA    64                                                @PAA  05820001
         AIF     ('&VERS' EQ '2').HAVELEN                         @PAA  05830001
&LEN    SETA    104                                               @PAA  05840001
         AIF     ('&VERS' EQ '3').HAVELEN                         @05A  05850001
         AIF     ('&VERS' EQ 'MAX').HAVELEN                       @06A  05860001
&LEN    SETA    128                                               @05A  05870001
.HAVELEN ANOP                                                     @PAA  05880001
.*-------------------------------------------------------------------*  05890001
.*       DETERMINE WHICH FORM OF THE MACRO IS REQUESTED              *  05900001
.*-------------------------------------------------------------------*  05910001
         AIF     ('&MF' EQ 'L').LISTFM MF=L SPECIFIED                   05920001
&GNAME   SETC    'IHB'.'&SYSNDX'       INITIALIZE LABEL                 05930001
         USING   ENFPM,1               MAP ENFPM OVER AREA              05940001
&USING1  SETB    1                     Remember USING set         @PAA  05950001
         AIF     ('&MF' EQ '').NORMFM  MF NOT SPECIFIED                 05960001
         AIF     (N'&MF NE 2).BADMF1   EXECUTE FORM HAS 2 PARMS         05970001
         AIF     ('&MF(1)' EQ 'E').EXECFM  MF=(E,LIST)                  05980001
.BADMF1  MNOTE   12,'INVALID MF PARAMETER : MF=&MF - MACRO TERMINATED'  05990001
         AGO     .ERREXIT                                               06000001
.*********************************************************************  06010001
.*                                                                   *  06020001
.*       BEGIN PROCESSING PARAMETERS FOR NORMAL FORM                 *  06030001
.*                                                                   *  06040001
.*********************************************************************  06050001
.NORMFM  ANOP                          BEGIN NORMAL FORM                06060001
&NORMAL  SETB    1                     NORMAL FORM REQUESTED            06070001
.*-------------------------------------------------------------------*  06080001
.*       THE FOLLOWING PARAMETERS WILL BE PUT INTO THE EVENT         *  06090001
.*       PARAMETER LIST IF SPECIFIED  (EXCEPT WHEN SPECIFIED         *  06100001
.*       IN REGISTER) :                                              *  06110001
.*             ACTION                                                *  06120001
.*             CODE                                                  *  06130001
.*             TYPE                                                  *  06140001
.*             EXIT                                                  *  06150001
.*             SRBEXIT                                           @L5A*  06160001
.*             EOT                                               @L5A*  06170001
.*             EOM                                               @L5A*  06180001
.*             PARM                                                  *  06190001
.*             QMASK                                                 *  06200001
.*             ENFPFREE FOR FREEPRM                                  *  06210001
.*             PARMLEN                                           @L6A*  06220001
.*             ESTBNME                                               *  06230001
.*             EXITNME                                               *  06240001
.*             DISABLE                                           @L4A*  06250001
.*             XSYS                                              @L6A*  06260001
.*             BITQUAL (if hex constant specified)               @L6A*  06270001
.*             BITCOMPARE                                        @L6A*  06280001
.*             MASEXIT                                           @PFA*  06290001
.*             FLTRBLK                                           @L7A*  06300001
.*             FLTRXIT                                           @L7A*  06310001
.*             XCFFILTERGROUP                                    @05A*  06320001
.*-------------------------------------------------------------------*  06330001
.*-------------------------------------------------------------------*  06340001
.*       PROCESS THE ACTION PARAMETER - NORMAL FORM                  *  06350001
.*-------------------------------------------------------------------*  06360001
         AIF     ('&ACTION' EQ 'SIGNAL').SIGACT0 ACTION=SIGNAL          06370001
         AIF     ('&ACTION' EQ 'DELETE').DELACT0 ACTION=DELETE          06380001
         AIF     ('&ACTION' EQ 'LISTEN').LISACT0 ACTION=LISTEN          06390001
         AIF     ('&ACTION' EQ 'QUERY').QRYACT0 ACTION=QUERY      @D2A  06400001
         AIF     ('&ACTION' EQ 'REGISTER').RGRACT0 ACTION=REGISTER      06410001
         AIF     ('&ACTION' EQ '').NOACT0        ACTION NOT SPECIFIED   06420001
         MNOTE   12,'INVALID ACTION : ACTION=&ACTION-MACRO TERMINATED'  06430001
         AGO     .ERREXIT                                               06440001
.NOACT0  ANOP                                                           06450001
         MNOTE   12,'ACTION REQUIRED - MACRO TERMINATED'                06460001
         AGO     .ERREXIT                                               06470001
.LISACT0 ANOP                                                           06480001
&ACT     SETA    X'02'                 SET ACTION CODE TO LISTEN        06490001
         AGO     .ENDACT0                                               06500001
.SIGACT0 ANOP                                                           06510001
&ACT     SETA    X'01'                 SET ACTION CODE TO SIGNAL        06520001
         AGO     .ENDACT0                                               06530001
.QRYACT0 ANOP                                                     @D2A  06540001
&ACT     SETA    X'04'                 SET ACTION CODE TO QUERY   @D2A  06550001
         AGO     .ENDACT0                                         @D2A  06560001
.RGRACT0 ANOP ,                                                   @L7A  06570001
&ACT     SETA    X'05'                 SET ACTION CODE TO DELETE  @L7A  06580001
         AGO     .ENDACT0                                         @L7A  06590001
.DELACT0 ANOP                                                           06600001
&ACT     SETA    X'03'                 SET ACTION CODE TO DELETE        06610001
.ENDACT0 ANOP                                                           06620001
&DONEACT SETB    1                     ACTION PROCESSING COMPLETED      06630001
.*-------------------------------------------------------------------*  06640001
.*       PROCESS THE CODE PARAMETER - NORMAL FORM (NOT REGISTER)     *  06650001
.*-------------------------------------------------------------------*  06660001
         AIF     ('&CODE' NE '').CHCODE MUST SPECIFY EVENT CODE         06670001
         MNOTE   08,'CODE PARAMETER REQUIRED'                           06680001
         AGO     .DONECDE                                               06690001
.CHCODE  ANOP                                                           06700001
         AIF     ('&CODE'(1,1) EQ '(').ENDCDE0  SKIP : CODE IN REG      06710001
&CDE     SETC    '&CODE'               SAVE FOR EVENT PARM LIST         06720001
.DONECDE ANOP                                                           06730001
&DONECDE SETB    1                     NO NEED TO GENERATE CODE         06740001
.ENDCDE0 ANOP                                                           06750001
.*-------------------------------------------------------------------*  06760001
.*       PROCESS THE TYPE PARAMETER - NORMAL FORM                    *  06770001
.*-------------------------------------------------------------------*  06780001
         AIF     ('&TYPE' EQ '').SYNC0        USE DEFAULT = SYNC        06790001
         AIF     ('&TYPE' EQ 'ASYNC').ASYNC0  TYPE=ASYNC                06800001
         AIF     ('&TYPE' NE 'SYNC').BADSYN0  EXPECT TYPE=SYNC          06810001
.SYNC0   ANOP                                                           06820001
&FLG     SETA    X'00'+&FLG            SYNCHRONOUS CALLER               06830001
         AGO     .ENDTYPE                                               06840001
.ASYNC0  ANOP                                                           06850001
&FLG     SETA    X'80'+&FLG            ASYNCHRONOUS CALLER              06860001
         AGO     .ENDTYPE                                               06870001
.BADSYN0 MNOTE   08,'INVALID TYPE : TYPE=&TYPE IGNORED'                 06880001
         AGO     .SYNC0                USE DEFAULT : TYPE=SYNC          06890001
.ENDTYPE ANOP                                                           06900001
&DONETYP SETB    1                     TYPE PROCESSING COMPLETED        06910001
.*-------------------------------------------------------------------*  06920001
.*       Process the EOT parameter - Normal Form                     *  06930001
.*-------------------------------------------------------------------*  06940001
.*                                                                 @L5A 06950001
.* If EOT was not coded and the action was not listen goto end     @L5A 06960001
         AIF ('&EOT' EQ '' AND '&ACTION' NE 'LISTEN').END_EOT      @L5A 06970001
.*                                                                 @L5A 06980001
.* If EOT was not coded and the action is listen use default       @L5A 06990001
         AIF ('&EOT' EQ '' AND '&ACTION' EQ 'LISTEN').SET_EOT_DEF  @L5A 07000001
.*                                                                 @L5A 07010001
.* If EOT is yes then goto set it to yes                           @L5A 07020001
         AIF ('&EOT' EQ 'YES').SET_EOT_YES                         @L5A 07030001
.*                                                                 @L5A 07040001
.* If EOT is not equal to no then it must be invalid               @L5A 07050001
         AIF ('&EOT' NE 'NO').INVALID_EOT                          @L5A 07060001
.*                                                                 @L5A 07070001
.* Set EOT to no                                                   @L5A 07080001
.SET_EOT_NO  ANOP                                                  @L5A 07090001
.* If the action is not listen and not null goto action error      @P9C 07100001
         AIF ('&ACTION' NE 'LISTEN' AND                                X07110001
               '&ACTION' NE '').EOT_ERROR_ACTION                   @P9C 07120001
.*                                                                 @L5A 07130001
.* Set EOT to the default value no                                 @L5A 07140001
.SET_EOT_DEF  ANOP                                                 @L5A 07150001
&FLG     SETA    X'00'+&FLG                                        @L5A 07160001
         AGO     .DONE_EOT                                         @L5A 07170001
.*                                                                 @L5A 07180001
.* Set EOT to yes                                                  @L5A 07190001
.SET_EOT_YES  ANOP                                                 @L5A 07200001
.* If the action is not listen and not null goto action error      @P9C 07210001
         AIF ('&ACTION' NE 'LISTEN' AND                                X07220001
               '&ACTION' NE '').EOT_ERROR_ACTION                   @P9C 07230001
.* Set EOT to yes                                                  @L5A 07240001
&FLG     SETA    X'04'+&FLG                                        @L5A 07250001
         AGO     .DONE_EOT                                         @L5A 07260001
.*                                                                 @L5A 07270001
.* EOT was coded with an action other than listen so issue error   @L5A 07280001
.EOT_ERROR_ACTION ANOP                                             @L5A 07290001
         MNOTE   04,'EOT NOT ALLOWED FOR &ACTION REQUEST'          @L5A 07300001
         AGO     .DONE_EOT                                         @L5A 07310001
.*                                                                 @L5A 07320001
.* EOT value was not valid so issue error                          @L5A 07330001
.INVALID_EOT ANOP                                                  @L5A 07340001
         MNOTE   08,'INVALID EOT: EOT=&EOT'                        @L5A 07350001
         AGO     .DONE_EOT                                         @L5A 07360001
.*                                                                 @L5A 07370001
.* EOT processing is complete set done bit so that EOT processing  @L5A 07380001
.* will be skipped under the execute/register form                 @L5A 07390001
.DONE_EOT ANOP                                                     @L5A 07400001
&DONEOT  SETB    1                                                 @L5A 07410001
.*                                                                 @L5A 07420001
.END_EOT ANOP                                                      @L5A 07430001
.*-------------------------------------------------------------------*  07440001
.*       Process the EOM parameter - Normal Form                     *  07450001
.*-------------------------------------------------------------------*  07460001
.*                                                                 @L5A 07470001
.* If EOM was not coded and the action was not listen goto end     @L5A 07480001
         AIF ('&EOM' EQ '' AND '&ACTION' NE 'LISTEN').END_EOM      @L5A 07490001
.*                                                                 @L5A 07500001
.* If EOM was not coded and the action was listen use default      @L5A 07510001
         AIF ('&EOM' EQ '' AND '&ACTION' EQ 'LISTEN').SET_EOM_DEF  @L5A 07520001
.*                                                                 @L5A 07530001
.* If EOM is yes then goto set yes                                 @L5A 07540001
         AIF ('&EOM' EQ 'YES').SET_EOM_YES                         @L5A 07550001
.*                                                                 @L5A 07560001
.* If EOM is not no then it is invalid                             @L5A 07570001
         AIF ('&EOM' NE 'NO').INVALID_EOM                          @L5A 07580001
.*                                                                 @L5A 07590001
.* Set EOM to no                                                   @L5A 07600001
.SET_EOM_NO  ANOP                                                  @L5A 07610001
.*                                                                 @L5A 07620001
.* If the action is not listen and not null goto action error      @P9C 07630001
         AIF ('&ACTION' NE 'LISTEN' AND                                X07640001
               '&ACTION' NE '').EOM_ERROR_ACTION                   @P9C 07650001
.*                                                                 @L5A 07660001
.* Set the default EOM value depending on other parameters         @L5A 07670001
.SET_EOM_DEF  ANOP                                                 @L5A 07680001
.*                                                                 @L5A 07690001
.* If SRBEXIT was coded or EOT=YES was coded the default is YES    @L5A 07700001
         AIF ('&SRBEXIT' NE '' OR '&EOT' EQ 'YES').SET_EOM_YES     @L5A 07710001
.*                                                                 @L5A 07720001
.* Set the default to NO                                           @L5A 07730001
&FLG     SETA    X'00'+&FLG                                        @L5A 07740001
         AGO     .DONE_EOM                                         @L5A 07750001
.*                                                                 @L5A 07760001
.* Set the default to YES                                          @L5A 07770001
.SET_EOM_YES  ANOP                                                 @L5A 07780001
.*                                                                 @L5A 07790001
.* If the action is not listen and not null goto action error      @P9C 07800001
         AIF ('&ACTION' NE 'LISTEN' AND                                X07810001
               '&ACTION' NE '').EOM_ERROR_ACTION                   @P9C 07820001
.*                                                                 @L5A 07830001
.* Set EOM to YES                                                  @L5A 07840001
&FLG     SETA    X'02'+&FLG                                        @L5A 07850001
         AGO     .DONE_EOM                                         @L5A 07860001
.*                                                                 @L5A 07870001
.* EOM is not valid with the specified ACTION                      @L5A 07880001
.EOM_ERROR_ACTION ANOP                                             @L5A 07890001
         MNOTE   04,'EOM NOT ALLOWED FOR &ACTION REQUEST'          @L5A 07900001
         AGO     .DONE_EOM                                         @L5A 07910001
.*                                                                 @L5A 07920001
.* EOM value is not YES or NO                                      @L5A 07930001
.INVALID_EOM ANOP                                                  @L5A 07940001
         MNOTE   08,'INVALID EOM : EOM=&EOM'                       @L5A 07950001
         AGO     .DONE_EOM                                         @L5A 07960001
.*                                                                 @L5A 07970001
.* EOT processing is complete set done bit so that EOT processing  @L5A 07980001
.* will be skipped under the execute/register form                 @L5A 07990001
.DONE_EOM ANOP                                                     @L5A 08000001
&DONEOM  SETB    1                                                 @L5A 08010001
.*                                                                 @L5A 08020001
.* Check for combinations of EOT, EOM and SRBEXIT                  @L5A 08030001
.*                                                                 @L5A 08040001
.* Check for EOT=YES and EOM=NO                                    @L5A 08050001
         AIF ('&EOT' EQ 'YES' AND '&EOM' EQ 'NO').EOT_EOM_ERROR    @L5A 08060001
         AGO     .CHECK_EOM_SRBEXIT                                @L5A 08070001
.*                                                                 @L5A 08080001
.CHECK_EOM_SRBEXIT ANOP                                            @L5A 08090001
.*                                                                 @L5A 08100001
.* Check if SRBEXIT was specified with EOM=NO                      @L5A 08110001
         AIF ('&SRBEXIT' NE '' AND '&EOM' EQ 'NO').SRBEXIT_EOM_ERR @L5A 08120001
         AGO     .END_EOM                                          @L5A 08130001
.*                                                                 @L5A 08140001
.* When SRBEXIT is specified EOM=NO is not valid                   @L5A 08150001
.SRBEXIT_EOM_ERR ANOP                                              @L5A 08160001
         MNOTE   04,'EOM=NO NOT VALID WITH SRBEXIT'                @L5A 08170001
         AGO     .END_EOM                                          @L5A 08180001
.*                                                                 @L5A 08190001
.* It is not valid to specify EOM=YES and EOT=NO                   @L5A 08200001
.EOT_EOM_ERROR ANOP                                                @L5A 08210001
         MNOTE   04,'EOM=NO EOT=YES IS NOT A VALID COMBINATION'    @P8C 08220001
         AGO     .END_EOM                                          @L5A 08230001
.END_EOM ANOP                                                      @L5A 08240001
.*-------------------------------------------------------------------*  08250001
.*       Process the EXIT and SRBEXIT parameter - Normal Form        *  08260001
.*-------------------------------------------------------------------*  08270001
.*                                                                 @L5A 08280001
.* If EXIT is null and SRBEXIT is null process null exit           @L5A 08290001
         AIF     ('&EXIT' EQ '' AND '&SRBEXIT' EQ '').NULL_EXIT    @L5A 08300001
.*                                                                 @L5A 08310001
.* If EXIT is not null and SRBEXIT is not null it is an error      @L5A 08320001
         AIF     ('&EXIT' NE '' AND '&SRBEXIT' NE '').ERROR_BOTH   @L5A 08330001
.*                                                                 @L5A 08340001
.* If EXIT is not null then process the EXIT parameter             @L5A 08350001
         AIF     ('&EXIT' NE '').PROCESS_EXIT                      @L5A 08360001
.*                                                                 @L5A 08370001
.* SRBEXIT was coded                                               @L5A 08380001
.PROCESS_SRBEXIT ANOP                                              @L5A 08390001
.*                                                                 @L5A 08400001
.* If the action is not LISTEN then issue error message            @L5A 08410001
         AIF     ('&ACTION' NE 'LISTEN').BAD_SRBEXIT               @L5A 08420001
.*                                                                 @L5A 08430001
.* Check if SRBEXIT was specified in a register                    @L5A 08440001
         AIF     ('&SRBEXIT'(1,1) EQ '(').END_EXIT                 @L5A 08450001
.*                                                                 @L5A 08460001
.* Set the exit value                                              @L5A 08470001
&EXTADR  SETC    '&SRBEXIT'                                        @L5A 08480001
&FLG     SETA    X'01'+&FLG                                        @L5A 08490001
         AGO     .DONE_EXIT                                        @L5A 08500001
.*                                                                 @L5A 08510001
.* Exit was coded                                                  @L5A 08520001
.PROCESS_EXIT ANOP                                                 @L5A 08530001
.*                                                                 @L5A 08540001
.* If the action is DELETE, QUERY, or REGISTER then issue message  @L7C 08550001
         AIF     ('&ACTION' EQ 'DELETE').BAD_EXIT                  @L5A 08560001
         AIF     ('&ACTION' EQ 'QUERY').BAD_EXIT                   @L5A 08570001
         AIF     ('&ACTION' EQ 'REGISTER').BAD_EXIT                @L7A 08580001
.*                                                                 @L5A 08590001
.* Check if EXIT was specified in a register                       @L5A 08600001
         AIF     ('&EXIT'(1,1) EQ '(').END_EXIT                    @L5A 08610001
.*                                                                 @L5A 08620001
.* Set the exit value                                              @L5A 08630001
&EXTADR  SETC    '&EXIT'                                           @L5A 08640001
         AGO     .DONE_EXIT                                        @L5A 08650001
.*                                                                 @L5A 08660001
.* Both EXIT and SRBEXIT were coded                                @L5A 08670001
.ERROR_BOTH ANOP                                                   @L5A 08680001
         MNOTE   08,'EXIT NOT ALLOWED WITH SRBEXIT'                @L6C 08690001
         AGO     .DONE_EXIT                                        @L5A 08700001
.*                                                                 @L5A 08710001
.* No exit was coded                                               @L5A 08720001
.NULL_EXIT ANOP                                                    @L5A 08730001
.*                                                                 @L5A 08740001
.* If the action is not listen then done                           @L5A 08750001
         AIF     ('&ACTION' NE 'LISTEN').DONE_EXIT                 @L5A 08760001
.*                                                                 @L5A 08770001
.* Else EXIT or SRBEXIT is required for LISTEN                     @L5A 08780001
         MNOTE   08,'EXIT OR SRBEXIT REQUIRED FOR LISTEN REQUEST'  @L5A 08790001
         AGO     .DONE_EXIT                                        @L5A 08800001
.*                                                                 @L5A 08810001
.* EXIT was specified with action DELETE, QUERY, or REGISTER       @L7C 08820001
.BAD_EXIT ANOP                                                     @L5A 08830001
         MNOTE   04,'EXIT NOT ALLOWED FOR &ACTION REQUEST'         @L5A 08840001
         AGO     .DONE_EXIT                                        @L5A 08850001
.*                                                                 @L5A 08860001
.* SRBEXIT was specified with action not equal to LISTEN           @L5A 08870001
.BAD_SRBEXIT ANOP                                                  @L5A 08880001
         MNOTE   04,'SRBEXIT NOT ALLOWED FOR &ACTION REQUEST'      @L5A 08890001
         AGO     .DONE_EXIT                                        @L5A 08900001
.*                                                                 @L5A 08910001
.* SRBEXIT processing is complete set done bit on so SRBEXIT       @L5A 08920001
.* processing will be skipped under execute/register form          @L5A 08930001
.DONE_EXIT ANOP                                                    @L5A 08940001
&DONEXIT SETB    1                                                 @L5A 08950001
.END_EXIT ANOP                                                     @L5A 08960001
.*-------------------------------------------------------------------*  08970001
.*       Process the FLTRBLK parameter - Normal Form                 *  08980001
.*-------------------------------------------------------------------*  08990001
.*                                                                 @L7A 09000001
.* If FLTRBLK is null, skip FLTRBLK processing                     @L7A 09010001
         AIF     ('&FLTRBLK' EQ '').DONE_FLTR                      @L7A 09020001
.PROCESS_FLTRBLK ANOP ,                                            @L7A 09030001
.* If the action is not LISTEN then issue error message            @L7A 09040001
         AIF     ('&ACTION' NE 'LISTEN').BAD_FLTR                  @L7A 09050001
.*                                                                 @L7A 09060001
.* Check if more than one FLTRBLK specified                        @L7A 09070001
         AIF   (N'&FLTRBLK GT 1).FLTR_TOO_MANY_PARMS  >1 parm      @L7A 09080001
.*                                                                 @L7A 09090001
.* Check if FLTRBLK was specified in a register                    @L7A 09100001
         AIF     ('&FLTRBLK'(1,1) EQ '(').END_FLTR                 @L7A 09110001
.*                                                                 @L7A 09120001
.* Set the filter value                                            @L7A 09130001
&FLTADR  SETC    '&FLTRBLK'                                        @L7A 09140001
         AGO     .DONE_FLTR                                        @L7A 09150001
.*                                                                 @L7A 09160001
.* FLTRBLK was specified with action DELETE, QUERY, or REGISTER    @L7A 09170001
.BAD_FLTR ANOP ,                                                   @L7A 09180001
    MNOTE   04,'FLTRBLK NOT ALLOWED FOR &ACTION REQUEST - IGNORED' @L7A 09190001
&IGNFLTB SETB 1                                                    @PJC 09200001
         AGO     .DONE_FLTR                                        @L7A 09210001
.*                                                                 @L7A 09220001
.FLTR_TOO_MANY_PARMS ANOP ,                                        @L7A 09230001
         MNOTE 08,'MORE THAN 1 FLTRBLK VALUE - FLTRBLK IGNORED'    @L7A 09240001
&IGNFLTB SETB 1                                                    @PJC 09250001
.*                                                                 @L7A 09260001
.* FLTRBLK processing is complete set done bit on so FLTRBLK       @L7A 09270001
.* processing will be skipped under execute/register form          @L7A 09280001
.DONE_FLTR ANOP ,                                                  @L7A 09290001
&DONFLTR SETB    1                                                 @L7A 09300001
.END_FLTR ANOP ,                                                   @L7A 09310001
.*-------------------------------------------------------------------*  09320001
.*       Process the FLTRXIT parameter - Normal Form                 *  09330001
.*-------------------------------------------------------------------*  09340001
.*                                                                 @L7A 09350001
.* If FLTRXIT is null, skip FLTRXIT processing                     @L7A 09360001
         AIF     ('&FLTRXIT' EQ '').NULL_FLTX                      @L7A 09370001
.PROCESS_FLTRXIT ANOP ,                                            @L7A 09380001
.* If the action is not REGISTER then issue error message          @L7A 09390001
         AIF     ('&ACTION' NE 'REGISTER').BAD_FLTX                @L7A 09400001
.*                                                                 @L7A 09410001
.* Check if more than one FLTRXIT specified                        @L7A 09420001
         AIF   (N'&FLTRXIT GT 1).FLTX_TOO_MANY_PARMS  >1 parm      @L7A 09430001
.*                                                                 @L7A 09440001
.* Check if FLTRXIT was specified in a register                    @L7A 09450001
         AIF     ('&FLTRXIT'(1,1) EQ '(').END_FLTX                 @L7A 09460001
.*                                                                 @L7A 09470001
.* Set the filter value                                            @L7A 09480001
&FLXADR  SETC    '&FLTRXIT'                                        @L7A 09490001
         AGO     .DONE_FLTX                                        @L7A 09500001
.*                                                                 @L7A 09510001
.* FLTRXIT was specified with action LISTEN, DELETE, or QUERY      @L7A 09520001
.BAD_FLTX ANOP ,                                                   @L7A 09530001
    MNOTE   04,'FLTRXIT NOT ALLOWED FOR &ACTION REQUEST - IGNORED' @L7A 09540001
&IGNFLTX SETB 1                                                    @PJC 09550001
         AGO     .DONE_FLTX                                        @L7A 09560001
.*                                                                 @L7A 09570001
.FLTX_TOO_MANY_PARMS ANOP ,                                        @L7A 09580001
         MNOTE 08,'MORE THAN 1 FLTRXIT VALUE - FLTRXIT IGNORED'    @L7A 09590001
&IGNFLTX SETB 1                                                    @PJC 09600001
         AGO     .DONE_FLTX                                        @L7A 09610001
.*                                                                 @L7A 09620001
.* No exit was coded                                               @L7A 09630001
.NULL_FLTX ANOP ,                                                  @L7A 09640001
.*                                                                 @L7A 09650001
.* If the action is not REGISTER then skip required message        @L7A 09660001
         AIF     ('&ACTION' NE 'REGISTER').DONE_FLTX               @L7A 09670001
.*                                                                 @L7A 09680001
.* Else FLTRXIT required for REGISTER                              @L7A 09690001
         MNOTE   08,'FLTRXIT REQUIRED FOR REGISTER REQUEST'        @L7A 09700001
.*                                                                 @L7A 09710001
.* FLTRXIT processing is complete set done bit on so FLTRXIT       @L7A 09720001
.* processing will be skipped under execute/register form          @L7A 09730001
.DONE_FLTX ANOP ,                                                  @L7A 09740001
&DONFLTX SETB    1                                                 @L7A 09750001
.END_FLTX ANOP ,                                                   @L7A 09760001
.*--------------------------------------------------------------------* 09770001
.*       Process the MASEXIT parameter - Normal Form              @PFA* 09780001
.*--------------------------------------------------------------------* 09790001
.* If version is less than 3 go to end                             @03A 09800001
         AIF ('&VERS' LT '3').END_MASE                             @04C 09810001
.*                                                                 @03A 09820001
.* If MASEXIT was not coded and ACTION was not LISTEN, goto end    @PFA 09830001
         AIF ('&MASEXIT' EQ '' AND '&ACTION' NE 'LISTEN').END_MASE @PFA 09840001
.*                                                                 @PFA 09850001
.* If MASEXIT was not coded and ACTION is LISTEN, use default      @PFA 09860001
         AIF ('&MASEXIT' EQ '' AND                                     +09870001
               '&ACTION' EQ 'LISTEN').SET_MASE_DEF                 @PFA 09880001
.*                                                                 @PFA 09890001
.* If MASEXIT is YES, then goto set it to yes                      @PFA 09900001
         AIF ('&MASEXIT' EQ 'YES').SET_MASE_YES                    @PFA 09910001
.*                                                                 @PFA 09920001
.* If MASEXIT is not equal to NO, then it must be invalid          @PFA 09930001
         AIF ('&MASEXIT' NE 'NO').INVALID_MASE                     @PFA 09940001
.*                                                                 @PFA 09950001
.* Set MASEXIT to NO                                               @PFA 09960001
.SET_MASE_NO ANOP                                                  @PFA 09970001
.*                                                                 @PFA 09980001
.* If the ACTION is not LISTEN and not null, goto action error     @PFA 09990001
         AIF ('&ACTION' NE 'LISTEN' AND                                +10000001
               '&ACTION' NE '').MASE_ERROR_ACTION                  @PFA 10010001
.*                                                                 @PFA 10020001
.* Check if SRBEXIT was specified                                  @PFA 10030001
         AIF ('&SRBEXIT' NE '').SRBEXIT_MASE_ERR                   @PFA 10040001
.*                                                                 @PFA 10050001
.* Set MASEXIT to the default value NO                             @PFA 10060001
.SET_MASE_DEF ANOP                                                 @PFA 10070001
&FLG2    SETA    X'00'+&FLG2                                       @PFA 10080001
         AGO     .DONE_MASE                                        @PFA 10090001
.*                                                                 @PFA 10100001
.* Set MASEXIT to YES                                              @PFA 10110001
.SET_MASE_YES ANOP                                                 @PFA 10120001
.* If the ACTION is not LISTEN and not null, goto action error     @PFA 10130001
         AIF ('&ACTION' NE 'LISTEN' AND                                +10140001
               '&ACTION' NE '').MASE_ERROR_ACTION                  @PFA 10150001
.* Check if SRBEXIT was specified                                  @PFA 10160001
         AIF ('&SRBEXIT' NE '').SRBEXIT_MASE_ERR                   @PFA 10170001
.*                                                                 @PFA 10180001
.* Set MASEXIT to YES                                              @PFA 10190001
&FLG2    SETA    X'10'+&FLG2                                       @PFA 10200001
         AGO     .DONE_MASE                                        @PFA 10210001
.*                                                                 @PFA 10220001
.* MASEXIT was coded with ACTION other than listen, so issue error @PFA 10230001
.MASE_ERROR_ACTION ANOP                                            @PFA 10240001
         MNOTE   04,'MASEXIT NOT ALLOWED FOR &ACTION REQUEST'      @PFA 10250001
         AGO     .DONE_MASE                                        @PFA 10260001
.*                                                                 @PFA 10270001
.* MASEXIT value was not valid, so issue error                     @PFA 10280001
.INVALID_MASE ANOP                                                 @PFA 10290001
         MNOTE   08,'INVALID MASEXIT: MASEXIT=&MASEXIT'            @PFA 10300001
         AGO     .DONE_MASE                                        @PFA 10310001
.*                                                                 @PFA 10320001
.* When SRBEXIT is specified, MASEXIT is not allowed               @PFA 10330001
.SRBEXIT_MASE_ERR ANOP                                             @PFA 10340001
         MNOTE   04,'MASEXIT NOT VALID WITH SRBEXIT'               @PFA 10350001
         AGO     .DONE_MASE                                        @PFA 10360001
.*                                                                 @PFA 10370001
.* MASEXIT processing is complete, set done bit so that MASEXIT    @PFA 10380001
.* processing will be skipped under the execute/register form      @PFA 10390001
.DONE_MASE ANOP                                                    @PFA 10400001
&DONEMASE SETB   1                                                 @PFA 10410001
.*                                                                 @PFA 10420001
.END_MASE ANOP                                                     @PFA 10430001
.*-------------------------------------------------------------------*  10440001
.*       PROCESS THE PARM PARAMETER - NORMAL FORM (NOT REGISTER)     *  10450001
.*-------------------------------------------------------------------*  10460001
         AIF     ('&PARM' EQ '').DONEPRM                                10470001
         AIF     ('&ACTION' EQ '' OR '&ACTION' EQ 'SIGNAL' OR          X10480001
               '&ACTION' EQ 'LISTEN' OR                                X10490001
               '&ACTION' EQ 'QUERY').SETPRM0                      @PNC  10500001
         MNOTE   04,'PARM NOT ALLOWED FOR &ACTION REQUEST - IGNORED'    10510001
         AGO     .DONEPRM                                               10520001
.SETPRM0 ANOP                                                           10530001
         AIF     ('&PARM'(1,1) EQ '(').ENDPRM0                          10540001
&PARMS   SETC    '&PARM'               SAVE USER PARM LIST              10550001
.DONEPRM ANOP                                                           10560001
&DONEPRM SETB    1                     NO NEED TO GENERATE CODE         10570001
.ENDPRM0 ANOP                                                           10580001
.*-------------------------------------------------------------------*  10590001
.*       PROCESS THE DISABLE PARAMETER - NORMAL FORM             @L4A*  10600001
.*-------------------------------------------------------------------*  10610001
         AIF     ('&DISABLE' EQ '').ENDDIS0  Don't set flags     @PDC   10620001
         AIF     ('&ACTION' EQ 'LISTEN').CONTDI0 LISTEN CODED    @L4A   10630001
         MNOTE   04,'DISABLE NOT ALLOWED FOR &ACTION REQUEST - IGNORED' 10640001
         AGO     .ENDDIS0                      IGNORE DISABLE    @L4A   10650001
.CONTDI0 AIF     ('&ESTBNME' NE '' AND '&EXITNME' NE '').DISN1   @L4A   10660001
         MNOTE   08,'ESTBNME AND EXITNME REQUIRED WITH DISABLE'  @L4A   10670001
.DISN1   ANOP                                                    @L4A   10680001
         AIF     ('&DISABLE' EQ 'YES').DISY0  DISABLE = YES      @L4A   10690001
         AIF     ('&DISABLE' NE 'NO').BADDIS0 EXPECT DISABLE=NO  @L4A   10700001
.DISN0   ANOP                                                    @L4A   10710001
&FLG     SETA    X'20'+&FLG            DISABLE = NO AND ALLOWED  @L4A   10720001
         AGO     .ENDDIS0                                        @L4A   10730001
.DISDEF  ANOP                                                    @L4A   10740001
         AIF     ('&ACTION' NE 'LISTEN').ENDDIS0 LISTEN CODED    @L4A   10750001
.DISY0   ANOP                                                    @L4A   10760001
&FLG     SETA    X'60'+&FLG            DISABLE = YES AND ALLOWED @L4A   10770001
         AGO     .ENDDIS0                                        @L4A   10780001
.BADDIS0 MNOTE   08,'INVALID DISABLE : DISABLE=&DISABLE IGNORED' @L4A   10790001
         AGO     .DISY0                USE DEFAULT : DISABLE=YES @L4A   10800001
.ENDDIS0 ANOP                                                    @L4A   10810001
&DONEDIS SETB    1                         DISABLE COMPLETED     @L4A   10820001
.*-------------------------------------------------------------------*  10830001
.*       PROCESS THE ESTBNME AND EXITNME PARAMETERS - NORMAL FORM    *  10840001
.*-------------------------------------------------------------------*  10850001
         AIF     ('&ESTBNME' EQ '' AND '&EXITNME' EQ '').ENDE0    @D1A  10860001
         AIF     ('&ESTBNME' NE '' AND '&EXITNME' NE '').SETEE0   @D1A  10870001
         MNOTE   08,'BOTH ESTBNME AND EXITNME MUST BE SPECIFIED'  @D1A  10880001
         AGO     .ENDE0                                           @D1A  10890001
.SETEE0  ANOP                                                     @D1A  10900001
&ESTB    SETC    '&ESTBNME'            SAVE ESTABLISHER NAME      @D1A  10910001
&ENME    SETC    '&EXITNME'            SAVE LISTEN EXIT NAME      @D1A  10920001
.ENDE0   ANOP                                                     @D1A  10930001
.*-------------------------------------------------------------------*  10940001
.*       PROCESS THE QMASK PARAMETER - NORMAL FORM                   *  10950001
.*-------------------------------------------------------------------*  10960001
         AIF     ('&QMASK' EQ '').ENDQMK0 QMASK NOT SPECIFIED           10970001
         AGO     .GETMASK              GET QMASK                        10980001
.INITMSK ANOP                          QMASK SHOULD BE INITIALIZED      10990001
.ENDQMK0 ANOP                                                           11000001
&DONEMSK SETB    1                     QMASK PROCESSING COMPLETED       11010001
.*-------------------------------------------------------------------*  11020001
.*    Process the PARMLEN parameter - normal form (not register)   @L6A 11030001
.*-------------------------------------------------------------------*  11040001
         AIF   ('&PARMLEN' EQ '').DONE_PLEN  PARMLEN not coded     @L6A 11050001
         AIF   (N'&PARMLEN GT 1).PLEN_TOO_MANY_PARMS  >1 parameter @L6A 11060001
.*                                                                      11070001
.* If the action is not SIGNAL or null, issue an MNOTE.            @L6A 11080001
.* (An appropriate error message for null action is issued         @L6A 11090001
.* elsewhere.)                                                     @L6A 11100001
         AIF   ('&ACTION' NE 'SIGNAL' AND                              +11110001
               '&ACTION' NE '').PLEN_ERROR_ACTION  Wrong action    @L6A 11120001
         AIF   ('&PARM' EQ '').PLEN_NO_PARM  Need PARM w/PARMLEN   @L6A 11130001
.* If a relocatable PARMLEN value is provided, get the value       @L6A 11140001
.* later, after the parameter list is defined                      @L6A 11150001
         AIF   ('&PARMLEN'(1,1) EQ '(').END_PLEN  PARMLEN in reg   @L6A 11160001
         AIF   (T'&PARMLEN(1) NE 'N').END_PLEN  Non-numeric value -    +11170001
                                         defer processing          @PEC 11180001
.*                                                                      11190001
&FREELEN SETC  '&PARMLEN(1)'           Remember PARMLEN value      @L6A 11200001
         AGO   .DONE_PLEN                                               11210001
.*                                                                      11220001
.PLEN_NO_PARM  ANOP                    PARMLEN without PARM        @L6A 11230001
         MNOTE 08,'PARM REQUIRED WITH PARMLEN'                     @PCC 11240001
         AGO   .DONE_PLEN                                          @L6A 11250001
.*                                                                      11260001
.PLEN_ERROR_ACTION ANOP                PARMLEN with wrong action   @L6A 11270001
         MNOTE 04,'PARMLEN NOT ALLOWED FOR &ACTION REQUEST - IGNORED'  +11280001
                                                                   @L6A 11290001
         AGO   .DONE_PLEN                                          @L6A 11300001
.*                                                                      11310001
.PLEN_TOO_MANY_PARMS ANOP              Too many parameters         @L6A 11320001
         MNOTE 08,'MORE THAN 1 PARMLEN VALUE - PARMLEN IGNORED'    @L6A 11330001
.*                                                                      11340001
.DONE_PLEN ANOP                                                    @L6A 11350001
&DONEPLEN SETB    1                    Remember done with PARMLEN  @L6A 11360001
.*                                                                      11370001
.END_PLEN ANOP                                                     @L6A 11380001
.*-------------------------------------------------------------------*  11390001
.*       PROCESS THE FREEPRM PARAMETER - NORMAL FORM (SET ENFPFREE)  *  11400001
.*-------------------------------------------------------------------*  11410001
         AIF     ('&FREEPRM' EQ '').ENDFPN                              11420001
         AIF     ('&ACTION' NE 'SIGNAL').BADFPM0                        11430001
         AIF     ('&PARMLEN' NE '').FREEPRM_AND_PARMLEN            @L6A 11440001
         AIF     ('&PARM' NE '').FREEPRO PROCESS FREEPRM AS IN LIST     11450001
.*                                     FORM. RETURN POINT = ENDFRPN     11460001
         MNOTE   08,'PARM REQUIRED WITH FREEPRM'                   @PCC 11470001
         AGO     .ENDFPN                                                11480001
.FREEPRM_AND_PARMLEN  ANOP             Both FREEPRM and PARMLEN    @L6A 11490001
         MNOTE   08,'FREEPRM NOT ALLOWED WITH PARMLEN'             @L6A 11500001
         AGO     .ENDFPN                                                11510001
.BADFPM0 MNOTE   04,'FREEPRM NOT ALLOWED FOR &ACTION REQUEST- IGNORED'  11520001
.ENDFPN  ANOP                                                           11530001
&DONEFRP SETB    1                     ENFPFREE PROCESSING COMPLETED    11540001
.ENDFRPN ANOP                          END OF FREEPRM PROCESSING        11550001
.*-------------------------------------------------------------------*  11560001
.*       Process the XSYS parameter - normal form (set ENFPXSYS)   @L6A 11570001
.*-------------------------------------------------------------------*  11580001
.*                                                                      11590001
.* If XSYS was not coded, it defaults to NO (ENFPXSYS off)         @L6A 11600001
         AIF   ('&XSYS' EQ '').END_XSYS                            @L6A 11610001
.*                                                                      11620001
.* If more than one parameter, issue MNOTE                         @L6A 11630001
         AIF   (N'&XSYS GT 1).XSYS_TOO_MANY_PARMS                  @L6A 11640001
.*                                                                      11650001
.* If the action is not LISTEN, SIGNAL, or null, issue MNOTE.      @L6A 11660001
.* (An appropriate error message for null action is issued         @L6A 11670001
.* elsewhere.)                                                     @L6A 11680001
         AIF   ('&ACTION' NE 'LISTEN' AND                              +11690001
               '&ACTION' NE 'SIGNAL' AND                               +11700001
               '&ACTION' NE '').XSYS_ERROR_ACTION                  @L6A 11710001
.*                                                                      11720001
.* If XSYS is YES, set the flag appropriately.  If it is NO, no    @L6A 11730001
.* action is required.  If it's anything else, issue an MNOTE.     @L6A 11740001
         AIF   ('&XSYS' EQ 'YES').SET_XSYS_YES                     @L6A 11750001
         AIF   ('&XSYS' NE 'NO').INVALID_XSYS                      @L6A 11760001
         AGO   .DONE_XSYS                                          @L6A 11770001
.*                                                                      11780001
.SET_XSYS_YES ANOP                     Set XSYS to yes             @L6A 11790001
&FLG     SETA  X'10'+&FLG                                          @L6A 11800001
         AGO   .DONE_XSYS                                          @L6A 11810001
.*                                                                      11820001
.INVALID_XSYS ANOP                     XSYS value not valid        @L6A 11830001
         MNOTE 08,'INVALID XSYS: XSYS=&XSYS'                       @L6A 11840001
         AGO   .DONE_XSYS                                          @L6A 11850001
.*                                                                      11860001
.XSYS_ERROR_ACTION ANOP                XSYS w/inappropriate action @L6A 11870001
         MNOTE 04,'XSYS NOT ALLOWED FOR &ACTION REQUEST - IGNORED'     +11880001
                                                                   @L6A 11890001
         AGO   .DONE_XSYS                                          @L6A 11900001
.*                                                                      11910001
.XSYS_TOO_MANY_PARMS ANOP              Too many parameters         @L6A 11920001
         MNOTE 08,'MORE THAN 1 XSYS VALUE - XSYS IGNORED'          @L6A 11930001
.*                                                                      11940001
.* XSYS processing is complete.  Set bit so that XSYS processing   @L6A 11950001
.* will be skipped under the execute/register form                 @L6A 11960001
.DONE_XSYS ANOP                                                    @L6A 11970001
&DONEXSYS SETB    1                                                @L6A 11980001
.*                                                                      11990001
.END_XSYS ANOP                                                     @L6A 12000001
.*-------------------------------------------------------------------*  12010001
.*       Process the XCFFILTERGROUP parameter - Normal Form      @05A*  12020001
.*-------------------------------------------------------------------*  12030001
.*                                                                 @05A 12040001
.* If XCFFILTERGROUP is null, skip XCFFILTERGROUP processing       @05A 12050001
         AIF     ('&XCFFILTERGROUP' EQ '').DONE_XCFG               @05A 12060001
.PROCESS_XCFGROUP ANOP ,                                           @05A 12070001
.* If the action is not SIGNAL then issue error message            @05A 12080001
         AIF     ('&ACTION' NE 'SIGNAL').XCFG_NOSIG                @05A 12090001
.* If XSYS is not YES, then issue error message                    @05A 12100001
         AIF   ('&XSYS' NE 'YES').XCFG_NOXSYS                      @05A 12110001
.* If more than one XCFFILTERGROUP specified the issue error       @05A 12120001
.* message                                                         @05A 12130001
         AIF   (N'&XCFFILTERGROUP GT 1).XCFG_TOO_MANY_PARMS        @05A 12140001
.*                                                                 @05A 12150001
.* XCFFILTERGROUP is good....                                      @05A 12160001
.*                                                                 @05A 12170001
.* If XCFFILTERGROUP was specified in a register, go to END_XCFG,  @05A 12180001
.* which bypasses setting DONXCFG                                  @05A 12190001
         AIF     ('&XCFFILTERGROUP'(1,1) EQ '(').END_XCFG          @05A 12200001
.*                                                                 @05A 12210001
.* Set the XCF group value and indicate done processing            @05A 12220001
.* XCFFILTERGROUP                                                  @05A 12230001
&XCFGADR SETC    '&XCFFILTERGROUP'                                 @05A 12240001
         AGO     .END_XCFG                                         @05A 12250001
.*                                                                 @05A 12260001
.* Issue error messages as detected above...                       @05A 12270001
.*                                                                 @05A 12280001
.* XCFFILTERGROUP was specified with action other than SIGNAL...   @05A 12290001
.XCFG_NOSIG ANOP ,                                                 @05A 12300001
   MNOTE  04,'XCFFILTERGROUP NOT ALLOWED FOR &ACTION REQUEST - IGNORED' 12310001
&IGNXCFG SETB 1                                                    @05A 12320001
         AGO     .DONE_XCFG                                        @05A 12330001
.*                                                                 @05A 12340001
.* XCFFILTERGROUP was specified but XSYS is not YES...             @05A 12350001
.XCFG_NOXSYS ANOP                                                  @05A 12360001
    MNOTE 08,'XSYS=YES REQUIRED WITH XCFFILTERGROUP'               @05A 12370001
&IGNXCFG SETB 1                                                    @05A 12380001
         AGO     .DONE_XCFG                                        @05A 12390001
.*                                                                 @05A 12400001
.* More than 1 XCFFILTERGROUP arguments was specified...           @05A 12410001
.XCFG_TOO_MANY_PARMS ANOP ,                                        @05A 12420001
   MNOTE 08,'MORE THAN 1 XCFFILTERGROUP VALUE - XCFFILTERGROUP IGNORED'+12430001
                                                                   @05A 12440001
&IGNXCFG SETB 1                                                    @05A 12450001
         AGO     .DONE_XCFG                                        @05A 12460001
.*                                                                 @05A 12470001
.* XCFFILTERGROUP processing is complete set done bit on so        @05A 12480001
.* XCFFILTERGROUP                                                  @05A 12490001
.* processing will be skipped under execute/register form          @05A 12500001
.DONE_XCFG ANOP ,                                                  @05A 12510001
&DONXCFG SETB    1                                                 @05A 12520001
.*                                                                 @05A 12530001
.END_XCFG ANOP ,                                                   @05A 12540001
.*--------------------------------------------------------------------* 12550001
.*       Process the BITQUAL parameter - normal form               @L6A 12560001
.*                                                                      12570001
.* If BITQUAL is specified as a hex number (X'xxx'), it is placed  @L6A 12580001
.* in the inline parameter list.  If it is specified as anything   @L6A 12590001
.* else, processing is deferred to the section that handles the    @L6A 12600001
.* execute form.                                                   @L6A 12610001
.*--------------------------------------------------------------------* 12620001
         AIF   ('&BITQUAL' EQ '').END_BITQUAL  No BITQUAL          @L6A 12630001
         AIF   (N'&BITQUAL GT 1).BITQUAL_TOO_MANY_PARMS   Too many     +12640001
                                         parameters                @L6A 12650001
.* If the action is DELETE, issue an MNOTE.  (A null action will   @L6A 12660001
.* be flagged as an error elsewhere.)                              @L6A 12670001
         AIF   ('&ACTION' EQ 'DELETE').BITQUAL_ERROR_ACTION        @L6A 12680001
         AIF   ('&ACTION' EQ 'REGISTER').BITQUAL_ERROR_ACTION      @L7A 12690001
         AIF   ('&BITQUAL'(1,2) NE 'X''' AND                           +12700001
               '&BITQUAL'(1,2) NE 'x''').END_BITQUAL  BITQUAL not      +12710001
                                         hex number                @PAC 12720001
&BQUAL   SETC  '&BITQUAL'(3,K'&BITQUAL-3)  Capture BITQUAL value   @L6A 12730001
         AGO   .DONE_BITQUAL                                       @L6A 12740001
.*                                                                      12750001
.BITQUAL_ERROR_ACTION ANOP             BITQUAL with wrong action   @L6A 12760001
         MNOTE  04,'BITQUAL NOT ALLOWED FOR &ACTION REQUEST - IGNORED' +12770001
                                                                   @L6A 12780001
         AGO    .DONE_BITQUAL                                      @L6A 12790001
.*                                                                      12800001
.BITQUAL_TOO_MANY_PARMS ANOP           Too many parameters         @L6A 12810001
         MNOTE  08,'MORE THAN 1 BITQUAL VALUE - BITQUAL IGNORED'   @L6A 12820001
.*                                                                      12830001
.DONE_BITQUAL ANOP                     BITQUAL processing done     @L6A 12840001
&DONEBQUAL SETB 1                      Done with BITQUAL           @L6A 12850001
.*                                                                      12860001
.END_BITQUAL ANOP                                                       12870001
.*-------------------------------------------------------------------*  12880001
.*  Process the BITCOMPARE parameter - normal form (set ENFPBCMP)  @L6A 12890001
.*-------------------------------------------------------------------*  12900001
.*                                                                      12910001
.* If BITCOMPARE was not coded, it defaults to SUBSET (ENFPBCMP    @L6A 12920001
.* = B'000')                                                       @L6A 12930001
         AIF   ('&BITCOMPARE' EQ '').END_BITCOMPARE                @L6A 12940001
.*                                                                      12950001
         AIF   (N'&BITCOMPARE GT 1).BITCOMPARE_TOO_MANY_PARMS      @L6A 12960001
.*                                                                      12970001
         AIF   ('&ACTION' NE 'LISTEN').BITCOMPARE_ERROR_ACTION     @L6A 12980001
.*                                                                      12990001
         AIF   ('&BITCOMPARE' EQ 'SUBSET').SET_SUBSET              @L6A 13000001
         AIF   ('&BITCOMPARE' EQ 'INTERSECT').SET_INTERSECT        @L6A 13010001
         AIF   ('&BITCOMPARE' EQ 'EQUAL').SET_EQUAL                @L6A 13020001
         MNOTE 08,'INVALID BITCOMPARE: BITCOMPARE=&BITCOMPARE'     @L6A 13030001
         AGO   .DONE_BITCOMPARE                                    @L6A 13040001
.*                                                                      13050001
.SET_SUBSET  ANOP                      Set BITCOMPARE to SUBSET    @L6A 13060001
&FLG2    SETA  B'00000000'+&FLG2                                   @L6A 13070001
         AGO   .DONE_BITCOMPARE                                    @L6A 13080001
.SET_INTERSECT ANOP                    Set BITCOMPARE to INTERSECT @L6A 13090001
&FLG2    SETA  B'00100000'+&FLG2                                   @L6A 13100001
         AGO   .DONE_BITCOMPARE                                    @L6A 13110001
.SET_EQUAL  ANOP                       Set BITCOMPARE to EQUAL     @L6A 13120001
&FLG2    SETA  B'01000000'+&FLG2                                   @L6A 13130001
         AGO   .DONE_BITCOMPARE                                    @L6A 13140001
.*                                                                      13150001
.BITCOMPARE_ERROR_ACTION ANOP          BITCOMPARE w/inappropriate      +13160001
                                         action                    @L6A 13170001
         MNOTE 04,'BITCOMPARE NOT ALLOWED FOR &ACTION REQUEST - IGNORED+13180001
               '                                                   @L6A 13190001
         AGO   .DONE_BITCOMPARE                                    @L6A 13200001
.*                                                                      13210001
.BITCOMPARE_TOO_MANY_PARMS ANOP        Too many parameters         @L6A 13220001
         MNOTE 08,'MORE THAN 1 BITCOMPARE VALUE - BITCOMPARE IGNORED'  +13230001
                                                                   @L6A 13240001
         AGO   .DONE_BITCOMPARE                                    @L6A 13250001
.*                                                                      13260001
.* BITCOMPARE processing is complete. Set bit so that BITCOMPARE   @L6A 13270001
.* processing will be skipped under the execute/register form      @L6A 13280001
.DONE_BITCOMPARE ANOP                                              @L6A 13290001
&DONEBCOMP SETB 1                                                  @L6A 13300001
.*                                                                      13310001
.END_BITCOMPARE ANOP                                               @L6A 13320001
.*--------------------------------------------------------------------* 13330001
.* Check additional parameter combinations for normal form         @L6A 13340001
.*--------------------------------------------------------------------* 13350001
.*--------------------------------------------------------------------* 13360001
.* Ensure FREEPRM or PARMLEN coded for a cross-system signal       @L6A 13370001
.* request with parameters                                         @L6A 13380001
.*--------------------------------------------------------------------* 13390001
         AIF   ('&ACTION' NE 'SIGNAL' OR                               +13400001
               '&PARM' EQ '' OR                                        +13410001
               '&XSYS' NE 'YES').LENGTH_NOT_REQD Length not needed @L6A 13420001
         AIF   ('&FREEPRM' NE '' OR                                    +13430001
               '&PARMLEN' NE '').GOT_LENGTH  Length provided       @L6A 13440001
        MNOTE 08,'FREEPRM OR PARMLEN REQUIRED FOR SIGNAL WHEN XSYS=YES +13450001
               AND PARM SPECIFIED'                                 @PAC 13460001
.LENGTH_NOT_REQD  ANOP                                             @L6A 13470001
.GOT_LENGTH  ANOP                                                  @L6A 13480001
.*--------------------------------------------------------------------* 13490001
.* Ensure PARMLEN coded only for a cross-system signal request     @L6A 13500001
.*--------------------------------------------------------------------* 13510001
         AIF   ('&PARMLEN' EQ '' OR                                    +13520001
               '&ACTION' NE 'SIGNAL').NOXSYSMSG  PARMLEN not coded or  +13530001
                                         incorrect action (already     +13540001
                                         caught)                   @L6A 13550001
         AIF   ('&XSYS' EQ 'YES').NOXSYSMSG   Cross-system signal  @L6A 13560001
         MNOTE 08,'XSYS=YES REQUIRED WITH PARMLEN'                 @PAC 13570001
.NOXSYSMSG  ANOP                                                   @L6A 13580001
.*-------------------------------------------------------------------*  13590001
.*    END PARAMETER LIST PROCESSING (NOT REGISTER) FOR NORMAL FORM   *  13600001
.*                                                                   *  13610001
.*-------------------------------------------------------------------*  13620001
         CNOP    0,4                   ALIGN ON HALFWORD BOUNDARY       13630001
&NAME    BAL     1,&GNAME.A            BRANCH AROUND PARM LIST          13640001
         AGO     .GENLIST              GO GENERATE PARM LIST            13650001
.*********************************************************************  13660001
.*                                                                   *  13670001
.*       MF=L SPECIFIED : BEGIN PARAMETER PROCESSING FOR LIST FORM   *  13680001
.*                                                                   *  13690001
.*********************************************************************  13700001
.LISTFM  ANOP                          BEGIN LIST FORM                  13710001
&LIST    SETB    1                     LIST FORM REQUESTED              13720001
.*-------------------------------------------------------------------*  13730001
.*       PROCESS THE ACTION  PARAMETER - LIST FORM                   *  13740001
.*-------------------------------------------------------------------*  13750001
         AIF     ('&ACTION' EQ '').ENDACTN   ACTION NOT SPECIFIED       13760001
         AIF     ('&ACTION' EQ 'SIGNAL').SIGNAL                         13770001
         AIF     ('&ACTION' EQ 'DELETE').DELETE                         13780001
         AIF     ('&ACTION' EQ 'LISTEN').LISTEN                         13790001
         AIF     ('&ACTION' EQ 'QUERY').QUERY                     @D2A  13800001
         AIF     ('&ACTION' EQ 'REGISTER').REGISTER               @L7A  13810001
         MNOTE   12,'INVALID ACTION : ACTION=&ACTION-MACRO TERMINATED'  13820001
         AGO     .ERREXIT                                               13830001
.SIGNAL  ANOP                                                           13840001
&ACT     SETA    X'01'                 ACTION=SIGNAL (ENFPSIG)          13850001
         AGO     .ENDACTN                                               13860001
.LISTEN  ANOP                                                           13870001
&ACT     SETA    X'02'                 ACTION=LISTEN (ENFPLIS)          13880001
         AGO     .ENDACTN                                               13890001
.DELETE  ANOP                                                           13900001
&ACT     SETA    X'03'                 ACTION=DELETE (ENFPDEL)          13910001
         AGO     .ENDACTN                                         @D2A  13920001
.QUERY   ANOP                          ACTION=QUERY  (ENFPQRY)    @D2A  13930001
&ACT     SETA    X'04'                                            @D2A  13940001
         AGO     .ENDACTN                                         @L7A  13950001
.REGISTER ANOP ,                       ACTION=REGISTER (ENFPRGR)  @L7A  13960001
&ACT     SETA    X'05'                                            @L7A  13970001
.ENDACTN ANOP                                                           13980001
.*-------------------------------------------------------------------*  13990001
.*       PROCESS THE CODE PARAMETER - LIST FORM                      *  14000001
.*-------------------------------------------------------------------*  14010001
         AIF     ('&CODE' EQ '').CDEEND CODE NOT SPECIFIED              14020001
&CDE     SETC    '&CODE'               SAVE EVENT CODE                  14030001
.CDEEND  ANOP                                                           14040001
.*-------------------------------------------------------------------*  14050001
.*       PROCESS THE DTOKEN PARAMETER - LIST FORM                    *  14060001
.*-------------------------------------------------------------------*  14070001
         AIF     ('&DTOKEN' EQ '').ENDDTOK  DTOKEN NOT SPECIFIED        14080001
         MNOTE   04,'DTOKEN NOT ALLOWED IN LIST FORM - IGNORED'         14090001
.ENDDTOK ANOP                                                           14100001
.*-------------------------------------------------------------------*  14110001
.*       PROCESS THE STOKEN PARAMETER - LIST FORM                    *  14120001
.*-------------------------------------------------------------------*  14130001
         AIF     ('&STOKEN' EQ '').ENDSTOK  STOKEN NOT SPECIFIED        14140001
         AIF     ('&ACTION' NE '' AND '&ACTION' NE 'SIGNAL').BADSTK1    14150001
&TOK     SETC    '&STOKEN'              SAVE STOKEN FOR LATER           14160001
         AGO     .ENDSTOK                                               14170001
.BADSTK1 MNOTE   04,'STOKEN NOT ALLOWED FOR &ACTION REQUEST - IGNORED'  14180001
.ENDSTOK ANOP                                                           14190001
.*-------------------------------------------------------------------*  14200001
.*       PROCESS THE TYPE PARAMETER - LIST FORM                      *  14210001
.*-------------------------------------------------------------------*  14220001
         AIF     ('&TYPE' EQ '').ENDSYN TYPE NOT SPECIFIED              14230001
         AIF     ('&TYPE' EQ 'ASYNC').ASYN   TYPE=ASYNC SPECIFIED       14240001
         AIF     ('&TYPE' NE 'SYNC').BADSYN1 TYPE=SYNC  SPECIFIED       14250001
&FLG     SETA    X'00'+&FLG            SYNCHRONOUS CALLER               14260001
         AGO     .ENDSYN                                                14270001
.ASYN    ANOP                                                           14280001
&FLG     SETA    X'80'+&FLG            ASYNCHRONOUS CALLER(ENFPASN)     14290001
         AGO     .ENDSYN                                                14300001
.BADSYN1 MNOTE   08,'INVALID TYPE : TYPE=&TYPE IGNORED'                 14310001
.ENDSYN  ANOP                                                           14320001
.*-------------------------------------------------------------------*  14330001
.*       PROCESS THE QUAL   PARAMETER  - LIST FORM                   *  14340001
.*-------------------------------------------------------------------*  14350001
         AIF     ('&QUAL' EQ '').ENDQUL  QUALIFIER NOT SPECIFIED        14360001
         AIF     ('&ACTION' EQ 'DELETE').BADQUL1                        14370001
         AIF     ('&ACTION' EQ 'REGISTER').BADQUL1                @L7A  14380001
&QUALIF  SETC    '&QUAL'               SAVE QUALIFER FOR LATER          14390001
         AGO     .ENDQUL                                                14400001
.BADQUL1 MNOTE   04,'QUAL NOT ALLOWED FOR &ACTION REQUEST - IGNORED'    14410001
.ENDQUL  ANOP                                                           14420001
.*-------------------------------------------------------------------*  14430001
.*       PROCESS THE QMASK PARAMETER - (ALL FORMS)                   *  14440001
.*-------------------------------------------------------------------*  14450001
.GETMASK ANOP                          GENERATE QMASK                   14460001
&ERRMASK SETB    1                     INITIALIZE ERRMASK               14470001
         AIF     ('&QMASK' EQ '').ENDQMSK QMASK NOT SPECIFIED           14480001
         AIF     ('&ACTION' NE 'LISTEN').BADMASK                        14490001
.BEGINSL ANOP                          BEGIN PROCESS SUBLIST            14500001
&N       SETA    N'&QMASK              NUMBER OF ENTRIES                14510001
         AIF     (&N GT &MAXQMSK).BADMSK2 ALLOW UP TO &MAXQMSK VALUES   14520001
&I       SETA    1                                                      14530001
.LOOP    AIF     (&I GT &N).ENDLOOP    ALL ENTRIES PROCESSED            14540001
         AIF     ('&QMASK(&I)' EQ 'ALL').ALL  QMASK=(ALL)               14550001
         AIF     ('&QMASK(&I)' EQ 'NONE').NOQMASK QMASK=(NONE)          14560001
         AIF     (K'&QMASK(&I) NE 5).BADMSK BYTEX EXPECTED              14570001
         AIF     ('&QMASK(&I)'(1,4) NE 'BYTE').BADMSK                   14580001
&INX     SETC    '&QMASK(&I)'(5,1)     EXTRACT LAST DIGIT               14590001
         AIF     (('&INX' LT '1') OR ('&INX' GT '4')).BADMSK            14600001
         AIF     (&QBYTE(&INX) NE 0).DUPMSK                             14610001
&QBYTE(&INX) SETB 1                    SET CORRESPONDING QBYTE          14620001
.NEXT    ANOP                                                           14630001
&I       SETA    &I+1                  INCREMENT COUNTER                14640001
         AGO     .LOOP                 PROCESS ANOTHER ENTRY            14650001
.BADMSK  ANOP                                                           14660001
         MNOTE   08,'INVALID QMASK VALUE : &QMASK(&I) IGNORED'          14670001
         AGO     .NEXT                 SKIP THIS BYTE                   14680001
.DUPMSK  ANOP                                                           14690001
         MNOTE   08,'DUPLICATE QMASK VALUE : &QMASK(&I)'                14700001
         AGO     .NEXT                                                  14710001
.BADMASK ANOP                                                           14720001
         AIF     ('&ACTION' EQ '' AND (NOT &NORMAL)).BEGINSL            14730001
.*                                     MAY SPECIFY IN LIST OR           14740001
.*                                     EXECUTE FORM                     14750001
         MNOTE   04,'QMASK NOT ALLOWED FOR &ACTION REQUEST - IGNORED'   14760001
         AGO     .ENDQMSK              IGNORE THE QMASK                 14770001
.BADMSK2 ANOP                                                           14780001
         MNOTE   08,'MORE THAN &MAXQMSK QMASK VALUES - QMASK IGNORED'   14790001
         AGO     .ENDQMSK                                               14800001
.NOQMASK ANOP                                                           14810001
         AIF     (&N EQ 1).SETNOQM                                      14820001
         MNOTE   08,'EXTRANEOUS QMASK INFO - QMASK=(NONE) ASSUMED'      14830001
.SETNOQM ANOP                                                           14840001
&MSK     SETC    '00000000'            RESET MSK TO ZERO                14850001
         AGO     .RETMSK                                                14860001
.ALL     ANOP                                                           14870001
         AIF     (&N EQ 1).SETALL                                       14880001
         MNOTE   08,'EXTRANEOUS QMASK INFO - QMASK=(ALL) ASSUMED'       14890001
.SETALL  ANOP                                                           14900001
&MSK     SETC    '00001111'            SET MSK TO ALL BYTES             14910001
         AGO     .RETMSK                                                14920001
.ENDLOOP ANOP                                                           14930001
&MSK     SETC    '0000'.'&QBYTE(1)'.'&QBYTE(2)'.'&QBYTE(3)'.'&QBYTE(4)' 14940001
.RETMSK  ANOP                                                           14950001
&ERRMASK SETB    0                     NO ERROR FOUND                   14960001
.ENDQMSK ANOP                                                           14970001
.*                                                                      14980001
         AIF     (&EXECUTE).MVQMASK    RETURN TO EXECUTE FORM           14990001
         AIF     (&NORMAL).INITMSK     RETURN TO NORMAL FORM            15000001
.*-------------------------------------------------------------------*  15010001
.*       Process the EOT parameter - List Form                       *  15020001
.*-------------------------------------------------------------------*  15030001
.*                                                                 @L5A 15040001
.* If EOT is null and action is not LISTEN then we are done        @L5A 15050001
      AIF ('&EOT' EQ '' AND '&ACTION' NE 'LISTEN').END_EOT_MFL     @L5A 15060001
.*                                                                 @L5A 15070001
.* If EOT is null and action is LISTEN then set EOT to default     @L5A 15080001
      AIF ('&EOT' EQ '' AND '&ACTION' EQ 'LISTEN').SET_EOT_DEF_MFL @L5A 15090001
.*                                                                 @L5A 15100001
.* If EOT is yes then set EOT to yes                               @L5A 15110001
      AIF ('&EOT' EQ 'YES').SET_EOT_YES_MFL                        @L5A 15120001
.*                                                                 @L5A 15130001
.* If EOT is not no then it is invalid                             @L5A 15140001
      AIF ('&EOT' NE 'NO').INVALID_EOT_MFL                         @L5A 15150001
.*                                                                 @L5A 15160001
.* Set EOT to no                                                   @L5A 15170001
.SET_EOT_NO_MFL  ANOP                                              @L5A 15180001
.*                                                                 @L5A 15190001
.* If the action is not listen and not null goto action error      @P9C 15200001
         AIF ('&ACTION' NE 'LISTEN' AND                                X15210001
               '&ACTION' NE '').EOT_ERROR_ACTION_MFL               @P9C 15220001
.*                                                                 @L5A 15230001
.* Set the default EOT value                                       @L5A 15240001
.SET_EOT_DEF_MFL  ANOP                                             @L5A 15250001
.*                                                                 @L5A 15260001
.* Set EOT to no                                                   @L5A 15270001
&FLG     SETA    X'00'+&FLG                                        @L5A 15280001
         AGO     .END_EOT_MFL                                      @L5A 15290001
.*                                                                 @L5A 15300001
.* Set EOT to yes                                                  @L5A 15310001
.SET_EOT_YES_MFL  ANOP                                             @L5A 15320001
.*                                                                 @L5A 15330001
.* If the action is not listen and not null goto action error      @P9C 15340001
         AIF ('&ACTION' NE 'LISTEN' AND                                X15350001
               '&ACTION' NE '').EOT_ERROR_ACTION_MFL               @P9C 15360001
.*                                                                 @L5A 15370001
.* Set EOT to yes                                                  @L5A 15380001
&FLG     SETA    X'04'+&FLG                                        @L5A 15390001
         AGO     .END_EOT_MFL                                      @L5A 15400001
.*                                                                 @L5A 15410001
.* EOT was specified with an action other than LISTEN              @L5A 15420001
.EOT_ERROR_ACTION_MFL ANOP                                         @L5A 15430001
.*                                                                 @L5A 15440001
.* Issue error message                                             @L5A 15450001
         MNOTE   04,'EOT NOT ALLOWED FOR &ACTION REQUEST'          @L5A 15460001
         AGO     .END_EOT_MFL                                      @L5A 15470001
.*                                                                 @L5A 15480001
.* The EOT value was not yes or no                                 @L5A 15490001
.INVALID_EOT_MFL ANOP                                              @L5A 15500001
.*                                                                 @L5A 15510001
.* Issue error message                                             @L5A 15520001
         MNOTE   08,'INVALID EOT: EOT=&EOT'                        @L5A 15530001
         AGO     .END_EOT_MFL                                      @L5A 15540001
.END_EOT_MFL ANOP                                                  @L5A 15550001
.*-------------------------------------------------------------------*  15560001
.*       Process the EOM parameter - List Form                       *  15570001
.*-------------------------------------------------------------------*  15580001
.*                                                                 @L5A 15590001
.* If EOM is null and action is not LISTEN or null then done       @P9C 15600001
      AIF ('&EOM' EQ '' AND '&ACTION' NE 'LISTEN' AND                  X15610001
               '&ACTION' NE '').END_EOM_MFL                        @P9C 15620001
.*                                                                 @L5A 15630001
.* If EOM is null and action is LISTEN or null set the default     @P9C 15640001
      AIF ('&EOM' EQ '' AND ('&ACTION' EQ 'LISTEN' OR                  X15650001
               '&ACTION' EQ '')).SET_EOM_DEF_MFL                   @P9C 15660001
.*                                                                 @L5A 15670001
.* If EOM is yes then set EOM to yes                               @L5A 15680001
      AIF ('&EOM' EQ 'YES').SET_EOM_YES_MFL                        @L5A 15690001
.*                                                                 @L5A 15700001
.* If EOM is not no then it is invalid                             @L5A 15710001
      AIF ('&EOM' NE 'NO').INVALID_EOM_MFL                         @L5A 15720001
.*                                                                 @L5A 15730001
.* Set EOM to no                                                   @L5A 15740001
.SET_EOM_NO_MFL  ANOP                                              @L5A 15750001
.*                                                                 @L5A 15760001
.* If the action is not listen and not null goto action error      @P9C 15770001
         AIF ('&ACTION' NE 'LISTEN' AND                                X15780001
               '&ACTION' NE '').EOM_ERROR_ACTION_MFL               @P9C 15790001
.*                                                                 @L5A 15800001
.* Set EOM to the default no value                                 @L5A 15810001
.SET_EOM_DEF_MFL  ANOP                                             @L5A 15820001
.*                                                                 @L5A 15830001
.* If SRBEXIT was coded or EOT=YES then set EOM to yes             @L5A 15840001
         AIF ('&SRBEXIT' NE '' OR '&EOT' EQ 'YES').SET_EOM_YES_MFL @L5A 15850001
.*                                                                 @L5A 15860001
.* Set EOM to no                                                   @L5A 15870001
&FLG     SETA    X'00'+&FLG                                        @L5A 15880001
         AGO     .DONE_EOM_MFL                                     @L5A 15890001
.*                                                                 @L5A 15900001
.* Set EOM to yes                                                  @L5A 15910001
.SET_EOM_YES_MFL  ANOP                                             @L5A 15920001
.*                                                                 @L5A 15930001
.* If the action is not listen and not null goto action error      @P9C 15940001
         AIF ('&ACTION' NE 'LISTEN' AND                                X15950001
               '&ACTION' NE '').EOM_ERROR_ACTION_MFL               @P9C 15960001
.*                                                                 @L5A 15970001
.* Set EOM to yes                                                  @L5A 15980001
&FLG     SETA    X'02'+&FLG                                        @L5A 15990001
         AGO     .DONE_EOM_MFL                                     @L5A 16000001
.*                                                                 @L5A 16010001
.* Issue error message ACTION not valid with EOM                   @L5A 16020001
.EOM_ERROR_ACTION_MFL ANOP                                         @L5A 16030001
         MNOTE   04,'EOM NOT ALLOWED FOR &ACTION REQUEST'          @L5A 16040001
         AGO     .DONE_EOM_MFL                                     @L5A 16050001
.*                                                                 @L5A 16060001
.* Issue error message EOM value is not yes or no                  @L5A 16070001
.INVALID_EOM_MFL ANOP                                              @L5A 16080001
         MNOTE   08,'INVALID EOM : EOM=&EOM'                       @L5A 16090001
         AGO     .END_EOM_MFL                                      @L5A 16100001
.*                                                                 @L5A 16110001
.* Done with EOM processing now check combinations                 @L5A 16120001
.DONE_EOM_MFL ANOP                                                 @L5A 16130001
.*                                                                 @L5A 16140001
.* EOT=YES and EOM=NO is not valid                                 @L5A 16150001
       AIF ('&EOT' EQ 'YES' AND '&EOM' EQ 'NO').EOT_EOM_ERROR_MFL  @P7C 16160001
       AGO     .CHECK_EOM_SRBEXIT_MFL                              @L5A 16170001
.*                                                                 @L5A 16180001
.* Check if SRBEXIT was coded with EOM=YES                         @L5A 16190001
.CHECK_EOM_SRBEXIT_MFL ANOP                                        @L5A 16200001
.*                                                                 @L5A 16210001
.* SRBEXIT and EOM=YES is not valid                                @L5A 16220001
     AIF ('&SRBEXIT' NE '' AND '&EOM' EQ 'NO').SRBEXIT_EOM_ERR_MFL @P7C 16230001
     AGO     .END_EOM_MFL                                          @L5A 16240001
.*                                                                 @L5A 16250001
.* Issue error message                                             @L5A 16260001
.SRBEXIT_EOM_ERR_MFL ANOP                                          @L5A 16270001
         MNOTE   04,'EOM=NO NOT VALID WITH SRBEXIT'                @L5A 16280001
         AGO     .END_EOM_MFL                                      @L5A 16290001
.*                                                                 @L5A 16300001
.* Issue error message                                             @L5A 16310001
.EOT_EOM_ERROR_MFL ANOP                                            @L5A 16320001
         MNOTE   04,'EOM=NO EOT=YES IS NOT A VALID COMBINATION'    @P7C 16330001
         AGO     .END_EOM_MFL                                      @L5A 16340001
.END_EOM_MFL ANOP                                                  @L5A 16350001
.*-------------------------------------------------------------------*  16360001
.*       Process the EXIT and SRBEXIT parameter - List Form          *  16370001
.*-------------------------------------------------------------------*  16380001
.*                                                                 @L5A 16390001
.* If EXIT is null and SRBEXIT is null then we are done            @L5A 16400001
         AIF   ('&EXIT' EQ '' AND '&SRBEXIT' EQ '').END_EXIT_MFL   @L5A 16410001
.*                                                                 @L5A 16420001
.* If EXIT is not null and SRBEXIT is not null then both are coded @L5A 16430001
         AIF   ('&EXIT' NE '' AND '&SRBEXIT' NE '').ERROR_BOTH_MFL @L5A 16440001
.*                                                                 @L5A 16450001
.* If EXIT is not null then process EXIT                           @L5A 16460001
         AIF   ('&EXIT' NE '').PROCESS_EXIT_MFL                    @L5A 16470001
.*                                                                 @L5A 16480001
.* Process SRBEXIT                                                 @L5A 16490001
.PROCESS_SRBEXIT_MFL ANOP                                          @L5A 16500001
.*                                                                 @L5A 16510001
.* If action is not LISTEN then there is an error                  @L5A 16520001
         AIF     ('&ACTION' NE 'LISTEN').BAD_SRBEXIT_MFL           @L5A 16530001
.*                                                                 @L5A 16540001
.* Set the exit address                                            @L5A 16550001
&EXTADR  SETC    '&SRBEXIT'                                        @L5A 16560001
&FLG     SETA    X'01'+&FLG                                        @L5A 16570001
         AGO     .END_EXIT_MFL                                     @L5A 16580001
.PROCESS_EXIT_MFL ANOP                                             @L5A 16590001
.*                                                                 @L5A 16600001
.* If action is DELETE, QUERY, or REGISTER then there is an error  @L7C 16610001
         AIF     ('&ACTION' EQ 'DELETE').BAD_EXIT_MFL              @L5A 16620001
         AIF     ('&ACTION' EQ 'QUERY').BAD_EXIT_MFL               @L5A 16630001
         AIF     ('&ACTION' EQ 'REGISTER').BAD_EXIT_MFL            @L7A 16640001
.*                                                                 @L5A 16650001
.* Set the exit address                                            @L5A 16660001
&EXTADR  SETC    '&EXIT'                                           @L5A 16670001
         AGO     .END_EXIT_MFL                                     @L5A 16680001
.*                                                                 @L5A 16690001
.* Both EXIT and SRBEXIT were coded issue error                    @L5A 16700001
.ERROR_BOTH_MFL ANOP                                               @L5A 16710001
         MNOTE   08,'EXIT NOT ALLOWED WITH SRBEXIT'                @L6C 16720001
         AGO     .END_EXIT_MFL                                     @L5A 16730001
.*                                                                 @L5A 16740001
.* EXIT was specified with DELETE or QUERY                         @L5A 16750001
.BAD_EXIT_MFL ANOP                                                 @L5A 16760001
         MNOTE   04,'EXIT NOT ALLOWED FOR &ACTION REQUEST'         @L5A 16770001
         AGO     .END_EXIT_MFL                                     @L5A 16780001
.*                                                                 @L5A 16790001
.* SRBEXIT was specified with action different than LISTEN         @L5A 16800001
.BAD_SRBEXIT_MFL ANOP                                              @L5A 16810001
         MNOTE   04,'SRBEXIT NOT ALLOWED FOR &ACTION REQUEST'      @L5A 16820001
         AGO     .END_EXIT_MFL                                     @L5A 16830001
.END_EXIT_MFL ANOP                                                 @L5A 16840001
.*-------------------------------------------------------------------*  16850001
.*       Process the FLTRBLK parameter - List Form                   *  16860001
.*-------------------------------------------------------------------*  16870001
.*                                                                 @L7A 16880001
.* If FLTRBLK is null, skip FLTRBLK processing                     @L7A 16890001
         AIF     ('&FLTRBLK' EQ '').END_FLTR_MFL                   @L7A 16900001
.PROCESS_FLTRBLKL ANOP ,                                           @L7A 16910001
.* If the action is not LISTEN then issue error message            @L7A 16920001
         AIF     ('&ACTION' NE 'LISTEN').BAD_FLTR_MFL              @L7A 16930001
.*                                                                 @L7A 16940001
.* Check if more than one FLTRBLK specified                        @L7A 16950001
         AIF   (N'&FLTRBLK GT 1).FLTR_TOO_MANY_PARMS_MFL >1 parm   @L7A 16960001
.*                                                                 @L7A 16970001
.* Check if FLTRBLK was specified in a register                    @L7A 16980001
         AIF     ('&FLTRBLK'(1,1) EQ '(').END_FLTR_MFL             @L7A 16990001
.*                                                                 @L7A 17000001
.* Set the filter value                                            @L7A 17010001
&FLTADR  SETC    '&FLTRBLK'                                        @L7A 17020001
         AGO     .END_FLTR_MFL                                     @L7A 17030001
.*                                                                 @L7A 17040001
.* FLTRBLK was specified with action DELETE or QUERY               @L7A 17050001
.BAD_FLTR_MFL ANOP ,                                               @L7A 17060001
    MNOTE   04,'FLTRBLK NOT ALLOWED FOR &ACTION REQUEST - IGNORED' @L7A 17070001
&IGNFLTB SETB 1                                                    @PJC 17080001
         AGO     .END_FLTR_MFL                                     @L7A 17090001
.*                                                                 @L7A 17100001
.FLTR_TOO_MANY_PARMS_MFL ANOP ,                                    @L7A 17110001
         MNOTE 08,'MORE THAN 1 FLTRBLK VALUE - FLTRBLK IGNORED'    @L7A 17120001
&IGNFLTB SETB 1                                                    @PJC 17130001
.*                                                                 @L7A 17140001
.*                                                                 @L7A 17150001
.END_FLTR_MFL ANOP ,                                               @L7A 17160001
.*-------------------------------------------------------------------*  17170001
.*       Process the FLTRXIT parameter - List Form                   *  17180001
.*-------------------------------------------------------------------*  17190001
.*                                                                 @L7A 17200001
.* If FLTRXIT is null, skip FLTRXIT processing                     @L7A 17210001
         AIF     ('&FLTRXIT' EQ '').END_FLTX_MFL                   @L7A 17220001
.PROCESS_FLTRXITL ANOP ,                                           @L7A 17230001
.* If the action is not REGISTER then issue error message          @L7A 17240001
         AIF     ('&ACTION' NE 'REGISTER').BAD_FLTX_MFL            @L7A 17250001
.*                                                                 @L7A 17260001
.* Check if more than one FLTRBLK specified                        @L7A 17270001
         AIF   (N'&FLTRXIT GT 1).FLTX_TOO_MANY_PARMS_MFL >1 parm   @L7A 17280001
.*                                                                 @L7A 17290001
.* Check if FLTRXIT was specified in a register                    @L7A 17300001
         AIF     ('&FLTRXIT'(1,1) EQ '(').END_FLTX_MFL             @L7A 17310001
.*                                                                 @L7A 17320001
.* Set the filter value                                            @L7A 17330001
&FLXADR  SETC    '&FLTRXIT'                                        @L7A 17340001
         AGO     .END_FLTX_MFL                                     @L7A 17350001
.*                                                                 @L7A 17360001
.* FLTRXIT was specified with action LISTEN, DELETE, or QUERY      @L7A 17370001
.BAD_FLTX_MFL ANOP ,                                               @L7A 17380001
    MNOTE   04,'FLTRXIT NOT ALLOWED FOR &ACTION REQUEST - IGNORED' @L7A 17390001
&IGNFLTX SETB 1                                                    @PJC 17400001
         AGO     .END_FLTX_MFL                                     @L7A 17410001
.*                                                                 @L7A 17420001
.FLTX_TOO_MANY_PARMS_MFL ANOP ,                                    @L7A 17430001
         MNOTE 08,'MORE THAN 1 FLTRXIT VALUE - FLTRXIT IGNORED'    @L7A 17440001
&IGNFLTX SETB 1                                                    @PJC 17450001
.*                                                                 @L7A 17460001
.END_FLTX_MFL ANOP ,                                               @L7A 17470001
.*--------------------------------------------------------------------* 17480001
.*       Process the MASEXIT parameter - List Form                @PFA* 17490001
.*--------------------------------------------------------------------* 17500001
.* If version is less than 3 go to end                             @03A 17510001
         AIF ('&VERS' LT '3').END_MASE_MFL                         @04C 17520001
.*                                                                 @03A 17530001
.* If MASEXIT was not coded and ACTION was not LISTEN, goto end    @PFA 17540001
         AIF ('&MASEXIT' EQ '' AND                                     +17550001
               '&ACTION' NE 'LISTEN').END_MASE_MFL                 @PFA 17560001
.*                                                                 @PFA 17570001
.* If MASEXIT was not coded and ACTION is LISTEN, use default      @PFA 17580001
         AIF ('&MASEXIT' EQ '' AND                                     +17590001
               '&ACTION' EQ 'LISTEN').SET_MASE_DEF_MFL             @PFA 17600001
.*                                                                 @PFA 17610001
.* If MASEXIT is YES, then goto set it to yes                      @PFA 17620001
         AIF ('&MASEXIT' EQ 'YES').SET_MASE_YES_MFL                @PFA 17630001
.*                                                                 @PFA 17640001
.* If MASEXIT is not equal to NO, then it must be invalid          @PFA 17650001
         AIF ('&MASEXIT' NE 'NO').INVALID_MASE_MFL                 @PFA 17660001
.*                                                                 @PFA 17670001
.* Set MASEXIT to NO                                               @PFA 17680001
.SET_MASE_NO_MFL ANOP                                              @PFA 17690001
.*                                                                 @PFA 17700001
.* If the ACTION is not LISTEN and not null, goto action error     @PFA 17710001
         AIF ('&ACTION' NE 'LISTEN' AND                                +17720001
               '&ACTION' NE '').MASE_ERROR_ACTION_MFL              @PFA 17730001
.*                                                                 @PFA 17740001
.* Check if SRBEXIT was specified                                  @PFA 17750001
         AIF ('&SRBEXIT' NE '').SRBEXIT_MASE_ERR_MFL               @PFA 17760001
.*                                                                 @PFA 17770001
.* Set MASEXIT to the default value NO                             @PFA 17780001
.SET_MASE_DEF_MFL ANOP                                             @PFA 17790001
&FLG2    SETA    X'00'+&FLG2                                       @PFA 17800001
         AGO     .END_MASE_MFL                                     @PFA 17810001
.*                                                                 @PFA 17820001
.* Set MASEXIT to YES                                              @PFA 17830001
.SET_MASE_YES_MFL ANOP                                             @PFA 17840001
.* If the ACTION is not LISTEN and not null, goto action error     @PFA 17850001
         AIF ('&ACTION' NE 'LISTEN' AND                                +17860001
               '&ACTION' NE '').MASE_ERROR_ACTION_MFL              @PFA 17870001
.* Check if SRBEXIT was specified                                  @PFA 17880001
         AIF ('&SRBEXIT' NE '').SRBEXIT_MASE_ERR_MFL               @PFA 17890001
.*                                                                 @PFA 17900001
.* Set MASEXIT to YES                                              @PFA 17910001
&FLG2    SETA    X'10'+&FLG2                                       @PFA 17920001
         AGO     .END_MASE_MFL                                     @PFA 17930001
.*                                                                 @PFA 17940001
.* MASEXIT was coded with ACTION other than listen, so issue error @PFA 17950001
.MASE_ERROR_ACTION_MFL ANOP                                        @PFA 17960001
         MNOTE   04,'MASEXIT NOT ALLOWED FOR &ACTION REQUEST'      @PFA 17970001
         AGO     .END_MASE_MFL                                     @PFA 17980001
.*                                                                 @PFA 17990001
.* MASEXIT value was not valid, so issue error                     @PFA 18000001
.INVALID_MASE_MFL ANOP                                             @PFA 18010001
         MNOTE   08,'INVALID MASEXIT: MASEXIT=&MASEXIT'            @PFA 18020001
         AGO     .END_MASE_MFL                                     @PFA 18030001
.*                                                                 @PFA 18040001
.* When SRBEXIT is specified, MASEXIT is not allowed               @PFA 18050001
.SRBEXIT_MASE_ERR_MFL ANOP                                         @PFA 18060001
         MNOTE   04,'MASEXIT NOT VALID WITH SRBEXIT'               @PFA 18070001
         AGO     .END_MASE_MFL                                     @PFA 18080001
.*                                                                 @PFA 18090001
.END_MASE_MFL ANOP                                                 @PFA 18100001
.*-------------------------------------------------------------------*  18110001
.*    Process the PARMLEN parameter - list form                    @L6A 18120001
.*-------------------------------------------------------------------*  18130001
         AIF   ('&PARMLEN' EQ '').DONE_PLEN_MFL  PARMLEN not coded @L6A 18140001
         AIF   (N'&PARMLEN GT 1).PLEN_TOO_MANY_PARMS_MFL  >1 parm  @L6A 18150001
.*                                                                      18160001
.* If the action is not SIGNAL or null, issue an MNOTE.            @L6A 18170001
.* (A null action is acceptable since it may be specified          @L6A 18180001
.* on the MF=E invocation.)                                        @L6A 18190001
         AIF   ('&ACTION' NE 'SIGNAL' AND                              +18200001
               '&ACTION' NE '').PLEN_ERROR_ACTION_MFL Wrong action @L6A 18210001
         AIF   ('&PARMLEN'(1,1) EQ '(').PLEN_IN_REG  Value in          +18220001
                                         register                  @L6A 18230001
.*                                                                      18240001
&FREELEN SETC  '&PARMLEN(1)'           Remember PARMLEN value      @L6A 18250001
         AGO   .DONE_PLEN_MFL                                      @L6A 18260001
.*                                                                      18270001
.PLEN_IN_REG  MNOTE  08,'PARMLEN IN REGISTER NOT ALLOWED FOR LIST FORM'+18280001
                                                                   @L6A 18290001
         AGO   .DONE_PLEN_MFL                                      @L6A 18300001
.*                                                                      18310001
.PLEN_ERROR_ACTION_MFL ANOP            PARMLEN with wrong action   @L6A 18320001
         MNOTE 04,'PARMLEN NOT ALLOWED FOR &ACTION REQUEST - IGNORED'  +18330001
                                                                   @L6A 18340001
         AGO   .DONE_PLEN_MFL                                      @L6A 18350001
.*                                                                      18360001
.PLEN_TOO_MANY_PARMS_MFL ANOP          Too many parameters         @L6A 18370001
         MNOTE 08,'MORE THAN 1 PARMLEN VALUE - PARMLEN IGNORED'    @L6A 18380001
.*                                                                      18390001
.DONE_PLEN_MFL ANOP                                                @L6A 18400001
&DONEPLEN SETB    1                    Remember done with PARMLEN  @L6A 18410001
.*                                                                      18420001
.END_PLEN_MFL ANOP                                                 @L6A 18430001
.*-------------------------------------------------------------------*  18440001
.*       PROCESS THE FREEPRM PARAMETER - LIST & NORMAL (NO REG) FORM *  18450001
.*-------------------------------------------------------------------*  18460001
         AIF     ('&FREEPRM' EQ '').DONEFRP                             18470001
         AIF     ('&ACTION' NE '' AND '&ACTION' NE 'SIGNAL').BADFPM1    18480001
         AIF     ('&PARMLEN' NE '').FREEPRM_AND_PARMLEN_MFL        @L6A 18490001
.FREEPRO ANOP                                                           18500001
&N       SETA    N'&FREEPRM            NO OF FREEPRM VALUES SPECIFIED   18510001
         AIF     (&N GT &MAXF).BADFRV0      TOO MANY FREEPRM VALUES     18520001
         AIF     (&N GE &MINF).SPPROC       CORRECT NO OF VALUES        18530001
         MNOTE   08,'SUBPOOL AND LENGTH REQUIRED - FREEPRM IGNORED'     18540001
         AGO     .DONEFRP                                               18550001
.BADFRV0 ANOP                                                           18560001
         MNOTE   08,'MORE THAN &MAXF FREEPRM VALUES - FREEPRM IGNORED'  18570001
         AGO     .DONEFRP                                               18580001
.FREEPRM_AND_PARMLEN_MFL ANOP          Both FREEPRM and PARMLEN    @L6A 18590001
         MNOTE   08,'FREEPRM NOT ALLOWED WITH PARMLEN'             @L6A 18600001
         AGO     .DONEFRP                                               18610001
.BADFPM1 MNOTE   04,'FREEPRM NOT ALLOWED FOR &ACTION REQUEST- IGNORED'  18620001
         AGO     .DONEFRP                                               18630001
.*  -------------------------------------------   *                     18640001
.*       SUBPOOL = &FREEPRM(1)                    *                     18650001
.*  -------------------------------------------   *                     18660001
.SPPROC  ANOP                          BEGIN SUBPOOL PROCESSING         18670001
         AIF     ('&FREEPRM(1)' EQ '').MISSP0  MISSING SUBPOOL NUMBER   18680001
         AIF     ('&FREEPRM(1)'(1,1) NE '(').SETFRSP                    18690001
         AIF     (&NORMAL).ENDSP       SUBPOOL VALUE IN REGISTER        18700001
         MNOTE   08,'SUBPOOL IN REGISTER NOT ALLOWED FOR LIST FORM'     18710001
         AGO     .DONEFRP                                               18720001
.MISSP0  ANOP                                                           18730001
         MNOTE   08,'SUBPOOL REQUIRED IN FREEPRM - FREEPRM IGNORED'     18740001
         AGO     .DONEFRP                                               18750001
.SETFRSP ANOP                          SAVE SUBPOOL VALUE               18760001
&FREESP  SETC    '&FREEPRM(1)'                                          18770001
&DONESP  SETB    1                     NO NEED TO GENERATE CODE         18780001
.ENDSP   ANOP                          END OF SUBPOOL PROCESSING        18790001
.*  -------------------------------------------   *                     18800001
.*       LENGTH = &FREEPRM(2)                     *                     18810001
.*  -------------------------------------------   *                     18820001
         AIF     ('&FREEPRM(2)' EQ '').MISLEN0                          18830001
         AIF     ('&FREEPRM(2)'(1,1) NE '(').SETFLEN                    18840001
         AIF     (&NORMAL).ENDFLEN     GENERATE CODE LATER ON           18850001
         MNOTE   08,'LENGTH IN REGISTER NOT ALLOWED FOR LIST FORM'      18860001
         AGO     .DONEFRP                                               18870001
.MISLEN0 ANOP                                                           18880001
         MNOTE   08,'LENGTH REQUIRED IN FREEPRM - FREEPRM IGNORED'      18890001
         AGO     .DONEFRP                                               18900001
.SETFLEN ANOP                          SAVE LENGTH VALUE                18910001
&FREELEN SETC    '&FREEPRM(2)'                                          18920001
&DONELEN SETB    1                     NO NEED TO GENERATE CODE         18930001
.ENDFLEN ANOP                          END OF LENGTH PROCESSING         18940001
.*  -------------------------------------------   *                     18950001
.*       KEY = &FREEPRM(3)                        *                     18960001
.*  -------------------------------------------   *                     18970001
         AIF     (&N NE 3).DEFKEY0     KEY NOT SPECIFIED                18980001
         AIF     ('&FREEPRM(3)' EQ '').DEFKEY0                          18990001
         AIF     ('&FREEPRM(3)'(1,1) NE '(').SETFKEY                    19000001
         AIF     (&NORMAL).ENDFKEY     KEY VALUE IN REGISTER            19010001
         MNOTE   08,'KEY IN REGISTER NOT ALLOWED FOR LIST FORM'         19020001
         AGO     .DONEFRP                                               19030001
.SETFKEY ANOP                                                           19040001
         AIF     (T'&FREEPRM(3) NE 'N').GOODKEY   EQUATED VALUE         19050001
         AIF     (&FREEPRM(3) LE 15).GOODKEY      KEY = 0 TO 15         19060001
         MNOTE   08,'INVALID FREEPRM KEY VALUE - FREEPRM IGNORED'       19070001
&FREELEN SETC    '0'                   RESET LENGTH VALUE TO 0          19080001
&FREESP  SETC    '0'                   RESET SUBPOOL VALUE TO 0         19090001
         AGO     .DONEFRP                                               19100001
.DEFKEY0 ANOP                                                           19110001
&FREEKEY SETC    '0'                   DEFAULT TO KEY 0                 19120001
         AGO     .SETDKEY                                               19130001
.GOODKEY ANOP                                                           19140001
&FREEKEY SETC    '&FREEPRM(3)'         SAVE KEY VALUE FOR EPL           19150001
.SETDKEY ANOP                          KEY IN EPL                       19160001
&DONEKEY SETB    1                     KEY ATTRIBUTE PROCESSED          19170001
.ENDFKEY ANOP                          COMPLETE KEY PROCESSING          19180001
.*  -------------------------------------------   *                     19190001
.*       SET ENFPFREE                             *                     19200001
.*  -------------------------------------------   *                     19210001
&FLG     SETA    &FLG+X'08'            FLAG (ENFPFREE) TO FREEMAIN      19220001
&DONEFFG SETB    1                     ENFPFREE IS SET UP               19230001
.*                                                                      19240001
         AIF     (NOT (&DONEKEY AND &DONESP AND &DONELEN)).ENDFREE      19250001
.DONEFRP ANOP                                                           19260001
&DONEFRP SETB    1                     NO NEED TO GENERATE CODE         19270001
.ENDFREE ANOP                                                           19280001
         AIF     (&NORMAL).ENDFRPN     RETURN TO NORMAL FORM            19290001
.*-------------------------------------------------------------------*  19300001
.*       PROCESS THE PARM PARAMETER - LIST FORM                      *  19310001
.*-------------------------------------------------------------------*  19320001
         AIF     ('&PARM' EQ '').ENDPRM                                 19330001
         AIF     ('&ACTION' NE '' AND '&ACTION' NE 'SIGNAL' AND        X19340001
               '&ACTION' NE 'LISTEN' AND                               X19350001
               '&ACTION' NE 'QUERY').BADPRM1                      @PNC  19360001
&PARMS   SETC    '&PARM'                                                19370001
         AGO     .ENDPRM                                                19380001
.BADPRM1 MNOTE   04,'PARM NOT ALLOWED FOR &ACTION REQUEST - IGNORED'    19390001
.ENDPRM  ANOP                                                           19400001
.*-------------------------------------------------------------------*  19410001
.*       PROCESS THE ESTBNME AND EXITNME PARAMETERS - LIST FORM      *  19420001
.*-------------------------------------------------------------------*  19430001
         AIF     ('&ESTBNME' EQ '').EST1 ESTBNME NOT SPECIFIED    @D1A  19440001
         MNOTE   08,'ESTBNME NOT ALLOWED FOR LIST FORM'           @D1A  19450001
.EST1    AIF     ('&EXITNME' EQ '').DONEE1 EXITNME NOT SPECIFIED  @D1A  19460001
         MNOTE   08,'EXITNME NOT ALLOWED FOR LIST FORM'           @D1A  19470001
.DONEE1  ANOP                                                     @D1A  19480001
.*-------------------------------------------------------------------*  19490001
.*       PROCESS THE DISABLE PARAMETER - LIST FORM                @L4A  19500001
.*-------------------------------------------------------------------*  19510001
         AIF     ('&DISABLE' EQ '').DONED1 DISABLE NOT SPECIFIED  @L4A  19520001
         MNOTE   08,'DISABLE NOT ALLOWED FOR LIST FORM'           @L4A  19530001
.DONED1  ANOP                                                     @L4A  19540001
.*-------------------------------------------------------------------*  19550001
.*       PROCESS THE LISTENRS PARAMETER - LIST FORM                  *  19560001
.*-------------------------------------------------------------------*  19570001
         AIF     ('&LISTENRS' EQ '').ENDLISL LISTENRS NOT CODED    @L3A 19580001
         MNOTE   04,'LISTENRS NOT ALLOWED FOR LIST FORM - IGNORED' @L3A 19590001
.ENDLISL ANOP                                                      @L3A 19600001
.*-------------------------------------------------------------------*  19610001
.*       Process the XSYS parameter - List Form                    @L6A 19620001
.*-------------------------------------------------------------------*  19630001
.*                                                                      19640001
.* If XSYS was not coded, it defaults to NO (ENFPXSYS off)         @L6A 19650001
         AIF ('&XSYS' EQ '').END_XSYS_MFL                          @L6A 19660001
.*                                                                      19670001
.* If more than one parameter, issue MNOTE                         @L6A 19680001
         AIF (N'&XSYS GT 1).XSYS_TOO_MANY_PARMS_MFL                @L6A 19690001
.*                                                                      19700001
.* If the action is not LISTEN, SIGNAL, or null, issue MNOTE.      @L6A 19710001
.* (A null action is acceptable since it may be specified          @L6A 19720001
.* on the MF=E invocation.)                                        @L6A 19730001
         AIF ('&ACTION' NE 'LISTEN' AND                                +19740001
               '&ACTION' NE 'SIGNAL' AND                               +19750001
               '&ACTION' NE '').XSYS_ERROR_ACTION_MFL              @L6A 19760001
.*                                                                      19770001
.* If XSYS is YES, set the flag appropriately.  If it is NO, no    @L6A 19780001
.* action is required.  If it's anything else, issue an MNOTE.     @L6A 19790001
         AIF ('&XSYS' EQ 'YES').SET_XSYS_YES_MFL                   @L6A 19800001
         AIF ('&XSYS' NE 'NO').INVALID_XSYS_MFL                    @L6A 19810001
         AGO     .END_XSYS_MFL                                     @L6A 19820001
.*                                                                      19830001
.SET_XSYS_YES_MFL ANOP                 Set XSYS to YES             @L6A 19840001
&FLG     SETA    X'10'+&FLG                                        @L6A 19850001
         AGO     .END_XSYS_MFL                                     @L6A 19860001
.*                                                                      19870001
.INVALID_XSYS_MFL ANOP                 XSYS value not valid        @L6A 19880001
         MNOTE   08,'INVALID XSYS: XSYS=&XSYS'                     @L6A 19890001
         AGO     .END_XSYS_MFL                                     @L6A 19900001
.*                                                                      19910001
.XSYS_ERROR_ACTION_MFL ANOP            XSYS w/inappropriate action @L6A 19920001
         MNOTE   04,'XSYS NOT ALLOWED FOR &ACTION REQUEST - IGNORED'   +19930001
                                                                   @L6A 19940001
         AGO     .END_XSYS_MFL                                     @L6A 19950001
.*                                                                      19960001
.XSYS_TOO_MANY_PARMS_MFL ANOP          Too many parameters         @L6A 19970001
         MNOTE   08,'MORE THAN 1 XSYS VALUE - XSYS IGNORED'        @L6A 19980001
.*                                                                      19990001
.END_XSYS_MFL ANOP                                                 @L6A 20000001
.*-------------------------------------------------------------------*  20010001
.*       Process the XCFFILTERGROUP parameter - List Form        @05A*  20020001
.*-------------------------------------------------------------------*  20030001
.*                                                                 @05A 20040001
.* If version is less than 4 go to end                             @05A 20050001
         AIF ('&VERS' LT '4').END_XCFG_MFL                         @05A 20060001
.* If XCFFILTERGROUP is null, skip XCFFILTERGROUP processing       @05A 20070001
         AIF     ('&XCFFILTERGROUP' EQ '').END_XCFG_MFL            @05A 20080001
         MNOTE   08,'XCFFILTERGROUP NOT ALLOWED FOR LIST FORM'     @05A 20090001
.*                                                                 @05A 20100001
.END_XCFG_MFL ANOP ,                                               @05A 20110001
.*--------------------------------------------------------------------* 20120001
.*       PROCESS THE BITQUAL PARAMETER  - LIST FORM                @L6A 20130001
.*                                                                      20140001
.* If BITQUAL is specified on the list form, it must be a hex      @L6A 20150001
.* literal value.  Equates cannot be accepted, because there is    @L6A 20160001
.* no way to specify 32-byte absolute values in a format that can  @L6A 20170001
.* be placed in an in-line parameter list.                         @L6A 20180001
.*--------------------------------------------------------------------* 20190001
         AIF   ('&BITQUAL' EQ '').END_BITQUAL_MFL  No BITQUAL      @L6A 20200001
         AIF   (N'&BITQUAL GT 1).BITQUAL_TOO_MANY_PARMS_MFL   Too      +20210001
                                         many parameters           @L6A 20220001
.* If the action is DELETE, issue an MNOTE.  (A null action is     @L6A 20230001
.* acceptable since it may be specified on the MF=E invocation.)   @L6A 20240001
.* Action = REGISTER is not applicable either.                     @L7A 20250001
         AIF   ('&ACTION' EQ 'DELETE').BITQUAL_ERROR_ACTION_MFL    @L6A 20260001
         AIF   ('&ACTION' EQ 'REGISTER').BITQUAL_ERROR_ACTION_MFL  @L7A 20270001
         AIF   ('&BITQUAL'(1,2) NE 'X''' AND                           +20280001
               '&BITQUAL'(1,2) NE 'x''').BITQUAL_NOT_HEX_MFL       @PAC 20290001
&BQUAL   SETC  '&BITQUAL'(3,K'&BITQUAL-3)  Capture BITQUAL value   @L6A 20300001
         AGO   .END_BITQUAL_MFL                                    @L6A 20310001
.*                                                                      20320001
.BITQUAL_NOT_HEX_MFL  ANOP             Invalid BITQUAL value       @L6A 20330001
         MNOTE 08,'BITQUAL MUST BE A HEX NUMERIC VALUE'            @L6A 20340001
         AGO   .END_BITQUAL_MFL                                    @L6A 20350001
.*                                                                      20360001
.BITQUAL_ERROR_ACTION_MFL ANOP         BITQUAL with wrong action   @L6A 20370001
         MNOTE  04,'BITQUAL NOT ALLOWED FOR &ACTION REQUEST - IGNORED' +20380001
                                                                   @L6A 20390001
         AGO    .END_BITQUAL_MFL                                   @L6A 20400001
.*                                                                      20410001
.BITQUAL_TOO_MANY_PARMS_MFL ANOP       Too many parameters         @L6A 20420001
         MNOTE  08,'MORE THAN 1 BITQUAL VALUE - BITQUAL IGNORED'   @L6A 20430001
.*                                                                      20440001
.END_BITQUAL_MFL ANOP                                              @L6A 20450001
.*--------------------------------------------------------------------* 20460001
.*  Process the BITCOMPARE parameter - list form (set ENFPBCMP)    @L6A 20470001
.*--------------------------------------------------------------------* 20480001
.*                                                                      20490001
.* If BITCOMPARE was not coded, it defaults to SUBSET (ENFPBCMP    @L6A 20500001
.* = B'000')                                                       @L6A 20510001
         AIF   ('&BITCOMPARE' EQ '').END_BITCOMPARE_MFL            @L6A 20520001
.*                                                                      20530001
         AIF   (N'&BITCOMPARE GT 1).BITCOMPARE_TOO_MANY_PARMS_MFL  @L6A 20540001
.*                                                                      20550001
.* If the action is anything but LISTEN or not specified, issue an @L6A 20560001
.* MNOTE.  (A null action is acceptable since it may be specified  @L6A 20570001
.* on the MF=E invocation.)                                        @L6A 20580001
         AIF   ('&ACTION' NE 'LISTEN' AND                              +20590001
               '&ACTION' NE '').BITCOMPARE_ERROR_ACTION_MFL        @L6A 20600001
.*                                                                      20610001
         AIF   ('&BITCOMPARE' EQ 'SUBSET').SET_SUBSET_MFL          @L6A 20620001
         AIF   ('&BITCOMPARE' EQ 'INTERSECT').SET_INTERSECT_MFL    @L6A 20630001
         AIF   ('&BITCOMPARE' EQ 'EQUAL').SET_EQUAL_MFL            @L6A 20640001
         MNOTE 08,'INVALID BITCOMPARE: BITCOMPARE=&BITCOMPARE'     @L6A 20650001
         AGO   .END_BITCOMPARE_MFL                                 @L6A 20660001
.*                                                                      20670001
.SET_SUBSET_MFL ANOP                   Set BITCOMPARE to SUBSET    @L6A 20680001
&FLG2    SETA  B'00000000'+&FLG2                                   @L6A 20690001
         AGO   .END_BITCOMPARE_MFL                                 @L6A 20700001
.SET_INTERSECT_MFL ANOP                Set BITCOMPARE to INTERSECT @L6A 20710001
&FLG2    SETA  B'00100000'+&FLG2                                   @L6A 20720001
         AGO   .END_BITCOMPARE_MFL                                 @L6A 20730001
.SET_EQUAL_MFL ANOP                    Set BITCOMPARE to EQUAL     @L6A 20740001
&FLG2    SETA  B'01000000'+&FLG2                                   @L6A 20750001
         AGO   .END_BITCOMPARE_MFL                                 @L6A 20760001
.*                                                                      20770001
.BITCOMPARE_ERROR_ACTION_MFL ANOP      BITCOMPARE w/inappropriate      +20780001
                                         action                    @L6A 20790001
         MNOTE 04,'BITCOMPARE NOT ALLOWED FOR &ACTION REQUEST - IGNORED+20800001
               '                                                   @L6A 20810001
         AGO   .END_BITCOMPARE_MFL                                 @L6A 20820001
.*                                                                      20830001
.BITCOMPARE_TOO_MANY_PARMS_MFL ANOP    Too many parameters         @L6A 20840001
         MNOTE 08,'MORE THAN 1 BITCOMPARE VALUE - BITCOMPARE IGNORED'  +20850001
                                                                   @L6A 20860001
.*                                                                      20870001
.END_BITCOMPARE_MFL ANOP                                           @L6A 20880001
.*********************************************************************  20890001
.*                                                                   *  20900001
.*       GENERATE PARAMETER LIST                                     *  20910001
.*                                                                   *  20920001
.*********************************************************************  20930001
.GENLIST ANOP                                                           20940001
         AIF     (&STOPLOP).ENFBUG * DEBUG : BUG IN ENF                 20950001
&STOPLOP SETB    1                 * DEBUG : SHOULD DO THIS ONLY ONCE   20960001
         AIF     (&NORMAL).EPLIST                                       20970001
&NAME    DS      0F                    START OF ENF PARAMETER LIST      20980001
.EPLIST  ANOP                          EVENT PARAMETER LIST             20990001
         DC      AL2(&LEN)             LENGTH OF ENF PARAMETER LIST     21000001
         DC      AL2(&ACT)             REQUESTED ENF ACTION             21010001
         DC      AL4(&CDE)             EVENT CODE                       21020001
         DC      AL1(&FLG)             FLAG FIELD                       21030001
         DC      AL1(B'&MSK')          MASK FOR COMPARING QUALIFIERS    21040001
         DC      AL1(&FREEKEY*16)      KEY FOR FREEPRM                  21050001
         DC      AL1(&FREESP)          SUBPOOL FOR FREEPRM              21060001
         DC      AL4(&QUALIF)          QUALIFIER                        21070001
         DC      AL4(&EXTADR)          EXIT ROUTINE ADDRESS             21080001
         DC      AL4(&PARMS)           Address of caller's parameters   21090001
         DC      AL4(&TOK)             TOKEN                            21100001
         DC      AL4(&FREELEN)         Length of caller's parameters    21110001
         DC      AL2(&VERS)            VERSION OF PARM LIST       @D1A  21120001
         DC      AL2(&RESV)            RESERVED FIELD             @D1A  21130001
         DC      AL4(&RTAD)            RETURN ADDRESS             @D1A  21140001
         DC      CL8'        '         ESTABLISHER NAME           @D1A  21150001
         DC      CL8'        '         LISTEN EXIT NAME           @D1A  21160001
         DC      AL4(&LISTR)           LISTENER NUMBER (RETURNED) @L3A  21170001
         DC      CL4'    '             SPECIAL EXIT RETURN CODE   @P5A  21180001
         AIF     (&VERS LT 3).ENDV1                               @PAA  21190001
         DC      XL32'&BQUAL'          Bit-mapped qualifier       @L6A  21200001
         DC      AL1(&FLG2)            Flag byte                  @L6A  21210001
         DC      XL3'00'               Reserved                   @L7C  21220001
.* If FLTRBLK to be ignored...                                    @PJC  21230001
         AIF     (&IGNFLTB).NOFLTRB_PL                            @PJC  21240001
.* If FLTRBLK is not null, use it                                 @L7A  21250001
         AIF     ('&FLTRBLK' EQ '').NOFLTRB_PL                    @L7A  21260001
         DC      AL4(&FLTRBLK)         FLTRBLK ADDRESS            @L7A  21270001
         AGO     .ENDV3                                           @05C  21280001
.NOFLTRB_PL ANOP ,                                                @L7A  21290001
.* If FLTRXIT to be ignored...                                    @PJC  21300001
         AIF     (&IGNFLTX).NOFLTR_PL                             @PJC  21310001
.* If FLTRXIT is not null, use it                                 @L7A  21320001
         AIF     ('&FLTRXIT' EQ '').NOFLTR_PL                     @L7A  21330001
         DC      AL4(&FLTRXIT)         FLTRXIT ADDRESS            @PJA  21340001
         AGO     .ENDV3                Skip FLTRXIT usage         @05C  21350001
.*                                                                @L7A  21360001
.* No (relevant) FLTRBLK/FLTRXIT specification                    @L7A  21370001
.NOFLTR_PL ANOP ,                                                 @L7A  21380001
         DC      AL4(0)                Reserved                   @L7A  21390001
.ENDV3   ANOP ,                                                   @05A  21400001
         AIF     (&VERS LT 4).ENDV1                               @05A  21410001
         DC      CL8'        '         XCFFILTERGROUP name        @05A  21420001
         DC      XL16'00'              Reserved                   @06A  21430001
.ENDV1   ANOP ,                                                   @PAA  21440001
         AIF     (&LIST).NORMEND       LIST FORM PROCESSING COMPLETED   21450001
&GNAME.A DS      0H                    END OF ENF PARAMETER LIST        21460001
         AGO     .PARMCHK              CHECK THE OTHER PARAMETERS       21470001
.*                                     FOR NORMAL FORM                  21480001
.*********************************************************************  21490001
.*                                                                   *  21500001
.*       MF = (E,PARMLIST) SPECIFIED : PARAMETER PROCESSING FOR      *  21510001
.*                                     EXECUTE FORM                  *  21520001
.*                                                                   *  21530001
.*********************************************************************  21540001
.EXECFM  ANOP                          BEGIN EXECUTE FORM               21550001
&EXECUTE SETB    1                     EXECUTE FORM REQUESTED           21560001
         AIF     ('&NAME' EQ '').SKIPLB NO LABEL SPECIFIED              21570001
&NAME    DS      0H                                                     21580001
.SKIPLB  ANOP                                                           21590001
         AIF     ('&MF(2)' EQ '(1)').ENDLDPM    ADDR IN REG 1           21600001
         AIF     ('&MF(2)'(1,1) EQ '(').LOADREG ADDR IN REGISTER        21610001
         AIF     (T'&MF(2) EQ 'N').BADMF1                               21620001
         LA      1,&MF(2)              LOAD ADDR OF PARM LIST           21630001
         AGO     .ENDLDPM                                               21640001
.LOADREG ANOP                                                           21650001
&REGC    SETC    '&MF(2)'(2,K'&MF(2)-2) EXTRACT REG FROM SUBLIST        21660001
         LR      1,&REGC               MOVE ADDR INTO REG 1             21670001
.ENDLDPM ANOP                          PARM ADDR NOW IN REG 1           21680001
.********************************************************************** 21690001
.*                                                                    * 21700001
.*       CODE GENERATION FOR EXECUTE FORM OR NORMAL FORM (WHEN        * 21710001
.*       PARAMETERS ARE SPECIFIED IN REGISTERS, AND FOR STOKEN,       * 21720001
.*       DTOKEN, QUAL, BITQUAL, AND FREEPRM PARAMETER PROCESSING) @L6C* 21730001
.*                                                                    * 21740001
.********************************************************************** 21750001
.PARMCHK ANOP                                                           21760001
.*-------------------------------------------------------------------*  21770001
.*       PROCESS THE ACTION PARAMETER - EXECUTE FORM                 *  21780001
.*-------------------------------------------------------------------*  21790001
         AIF     (&DONEACT).ENDACT     ACTION IN PARM LIST ALREADY      21800001
         AIF     ('&ACTION' EQ '').ENDACT        ACTION NOT SPECIFIED   21810001
         AIF     ('&ACTION' EQ 'SIGNAL').SIGACT  ACTION=SIGNAL          21820001
         AIF     ('&ACTION' EQ 'DELETE').DELACT  ACTION=DELETE          21830001
         AIF     ('&ACTION' EQ 'LISTEN').LISACT  ACTION=LISTEN          21840001
         AIF     ('&ACTION' EQ 'QUERY').QRYACT   ACTION=QUERY     @D2A  21850001
         AIF     ('&ACTION' EQ 'REGISTER').RGRACT ACTION=REGISTER @L7A  21860001
         MNOTE   12,'INVALID ACTION : ACTION=&ACTION-MACRO TERMINATED'  21870001
         AGO     .ERREXIT                                               21880001
.LISACT  ANOP                                                           21890001
         MVI     ENFPACT2,ENFPLIS      SET ACTION CODE TO LISTEN        21900001
         AGO     .ENDACT                                                21910001
.SIGACT  ANOP                                                           21920001
         MVI     ENFPACT2,ENFPSIG      SET ACTION CODE TO SIGNAL        21930001
         AGO     .ENDACT                                                21940001
.QRYACT  ANOP                                                     @D2A  21950001
         MVI     ENFPACT2,ENFPQRY      SET ACTION CODE TO QUERY   @D2A  21960001
         AGO     .ENDACT                                          @D2A  21970001
.RGRACT  ANOP                                                     @D2A  21980001
         MVI     ENFPACT2,ENFPRGR      SET ACTION CODE TO REGISTER@L7A  21990001
         AGO     .ENDACT                                          @D2A  22000001
.DELACT  ANOP                                                           22010001
         MVI     ENFPACT2,ENFPDEL      SET ACTION CODE TO DELETE        22020001
.ENDACT  ANOP                                                           22030001
.*-------------------------------------------------------------------*  22040001
.*       PROCESS THE CODE PARAMETER - NORMAL(REG) OR EXECUTE FORM    *  22050001
.*-------------------------------------------------------------------*  22060001
         AIF     (&DONECDE).ENDCODE    ALREADY DONE EARLIER             22070001
         AIF     ('&CODE' EQ '').ENDCODE                                22080001
         AIF     ('&CODE'(1,1) EQ '(').SETCDER  CODE IN REGISTER        22090001
         LA      14,&CODE              EVENT CODE INTO REG 14           22100001
         ST      14,ENFPCODE           STORE INTO ENF PARM LIST         22110001
         AGO     .ENDCODE                                               22120001
.LDADR   ANOP                                                           22130001
&REGC    SETC    '&CODE'(3,K'&CODE-4)  EXTRACT REGISTER NUMBER          22140001
         MVC     ENFPCODE,0(&REGC)     MOVE EVENT CODE FROM REG         22150001
         AGO     .ENDCODE                                               22160001
.SETCDER ANOP                                                           22170001
         AIF     ('&CODE'(1,2) EQ '((').LDADR  ADDR OF CODE IN REG      22180001
&REGC    SETC    '&CODE(1)'            SAVE REGISTER NUMBER             22190001
         ST      &REGC,ENFPCODE        MOVE EVENT CODE FROM REG         22200001
.ENDCODE ANOP                                                           22210001
.*-------------------------------------------------------------------*  22220001
.*       PROCESS THE DTOKEN PARAMETER - NORMAL OR EXECUTE FORM       *  22230001
.*-------------------------------------------------------------------*  22240001
         AIF     ('&DTOKEN' NE '').DTOKN DTOKEN IS SPECIFIED            22250001
         AIF     (&EXECUTE).ENDDTKN    DTOKEN SPECIFIED IN LIST FORM    22260001
         AIF     ('&ACTION' NE 'DELETE').ENDDTKN                        22270001
         MNOTE   08,'DTOKEN REQUIRED FOR DELETE REQUEST'                22280001
         AGO     .ENDDTKN                                               22290001
.DTOKN   ANOP                                                           22300001
         AIF     ('&ACTION' EQ '').MISACTD ACTION NOT SPECIFIED    @P2A 22310001
         AIF     ('&ACTION' EQ 'SIGNAL').BADDTK2                        22320001
         AIF     ('&ACTION' EQ 'QUERY').BADDTK2                    @D2A 22330001
         AIF     ('&ACTION' EQ 'REGISTER').BADDTK2                 @L7A 22340001
         AIF     ('&ACTION' EQ 'LISTEN').ENDDTKN RESTORE DTOKEN AFTER   22350001
.*                                               RETURN FROM ENF        22360001
         AIF     ('&DTOKEN'(1,1) EQ '(').SETTKNR DTOKEN IN REG          22370001
         MVC     ENFPTOK,&DTOKEN       DTOKEN                           22380001
         AGO     .ENDDTKN                                               22390001
.BADDTK2 MNOTE   04,'DTOKEN NOT ALLOWED FOR &ACTION REQUEST - IGNORED'  22400001
.*                                                                 @D2C 22410001
         AGO     .ENDDTKN                                               22420001
.MISACTD MNOTE   08,'ACTION REQUIRED WITH DTOKEN - DTOKEN IGNORED' @P2A 22430001
         AGO     .ENDDTKN                                          @P2A 22440001
.SETTKNR ANOP                                                           22450001
&REGC    SETC    '&DTOKEN(1)'          EXTRACT REGISTER NUMBER          22460001
         ST      &REGC,ENFPTOK         MOVE DTOKEN FROM REG             22470001
.ENDDTKN ANOP                                                           22480001
.*-------------------------------------------------------------------*  22490001
.*       PROCESS THE STOKEN PARAMETER - NORMAL OR EXECUTE FORM       *  22500001
.*-------------------------------------------------------------------*  22510001
         AIF     ('&STOKEN' EQ '').ENDSTKN                              22520001
         AIF     ('&ACTION' NE '' AND '&ACTION' NE 'SIGNAL').BADSTK2    22530001
         AIF     ('&STOKEN'(1,1) EQ '(').STOKR                          22540001
         MVC     ENFPTOK,&STOKEN       STOKEN                           22550001
         AGO     .ENDSTKN                                               22560001
.BADSTK2 ANOP                                                           22570001
         MNOTE   04,'STOKEN NOT ALLOWED FOR &ACTION REQUEST - IGNORED'  22580001
         AGO     .ENDSTKN                                               22590001
.STOKR   ANOP                                                           22600001
&REGC    SETC    '&STOKEN(1)'          EXTRACT REG NUMBER               22610001
         ST      &REGC,ENFPTOK         STORE STOKEN FROM REG            22620001
.ENDSTKN ANOP                                                           22630001
.*-------------------------------------------------------------------*  22640001
.*       PROCESS THE TYPE PARAMETER - EXECUTE FORM                   *  22650001
.*-------------------------------------------------------------------*  22660001
         AIF     (&DONETYP).ENDSYNC   TYPE IN PARM LIST ALREADY         22670001
         AIF     ('&TYPE' EQ '').ENDSYNC      TYPE NOT SPECIFIED        22680001
         AIF     ('&TYPE' EQ 'ASYNC').ASYNC   TYPE=ASYNC                22690001
         AIF     ('&TYPE' NE 'SYNC').BADSYN2  EXPECT TYPE=SYNC          22700001
         NI      ENFPFLG,255-ENFPASN   SYNCHRONOUS CALLER               22710001
         AGO     .ENDSYNC                                               22720001
.ASYNC   OI      ENFPFLG,ENFPASN       ASYNCHRONOUS CALLER              22730001
         AGO     .ENDSYNC                                               22740001
.BADSYN2 MNOTE   08,'INVALID TYPE : TYPE=&TYPE IGNORED'                 22750001
.ENDSYNC ANOP                                                           22760001
.*-------------------------------------------------------------------*  22770001
.*       PROCESS THE QUAL PARAMETER -  NORMAL OR EXECUTE FORM        *  22780001
.*-------------------------------------------------------------------*  22790001
         AIF     ('&QUAL' EQ '').ENDQUAL                                22800001
         AIF     ('&ACTION' EQ 'DELETE').BADQUL2                        22810001
         AIF     ('&ACTION' EQ 'REGISTER').BADQUL2                @L7A  22820001
         AIF     ('&QUAL'(1,1) EQ '(').SETQULR  QUALIFIER IN REG        22830001
         MVC     ENFPQUAL,&QUAL        QUALIFIER                        22840001
         AGO     .ENDQUAL                                               22850001
.SETQULR ANOP                                                           22860001
&REGC    SETC    '&QUAL(1)'            GET REGISTER NUMBER              22870001
         ST      &REGC,ENFPQUAL        MOVE QUALIFIER FROM REG          22880001
         AGO     .ENDQUAL                                               22890001
.BADQUL2 MNOTE   04,'QUAL NOT ALLOWED FOR &ACTION REQUEST - IGNORED'    22900001
.ENDQUAL ANOP                                                           22910001
.*-------------------------------------------------------------------*  22920001
.*       PROCESS THE QMASK PARAMETER - EXECUTE FORM                  *  22930001
.*-------------------------------------------------------------------*  22940001
         AIF     (&DONEMSK).ENDQMK     ALREADY PUT IN PARM LIST         22950001
         AIF     ('&QMASK' EQ '').ENDQMK  QMASK NOT SPECIFIED           22960001
         AGO     .GETMASK              GET QMASK                        22970001
.MVQMASK ANOP                                                           22980001
         AIF     (&ERRMASK).ENDQMK     ERROR : DONT GENERATE CODE       22990001
         MVI     ENFPQMSK,B'&MSK'      SET UP QMASK                     23000001
.ENDQMK  ANOP                                                           23010001
.*-------------------------------------------------------------------*  23020001
.*       Process the EOT parameter - Execute Form                    *  23030001
.*-------------------------------------------------------------------*  23040001
.*                                                                 @L5A 23050001
.* If EOT was already processed on the normal form or              @L5A 23060001
.*    EOT was not coded then done                                  @P9A 23070001
      AIF (&DONEOT OR '&EOT' EQ '').END_EOT_MFE                    @P9A 23080001
.*                                                                 @P9D 23090001
.* If EOT is yes then goto set EOT to yes                          @L5A 23100001
      AIF ('&EOT' EQ 'YES').SET_EOT_YES_MFE                        @L5A 23110001
.*                                                                 @L5A 23120001
.* If EOT is not no then it is invalid                             @L5A 23130001
      AIF ('&EOT' NE 'NO').INVALID_EOT_MFE                         @L5A 23140001
.*                                                                 @L5A 23150001
.* Set EOT to no                                                   @L5A 23160001
.SET_EOT_NO_MFE  ANOP                                              @L5A 23170001
.*                                                                 @L5A 23180001
.* If the action is not listen and not null goto action error      @P9C 23190001
         AIF ('&ACTION' NE 'LISTEN' AND                                X23200001
               '&ACTION' NE '').EOT_ERROR_ACTION_MFE               @P9C 23210001
.*                                                                 @P9D 23220001
.* Set EOT to no                                                   @L5A 23230001
         NI      ENFPFLG,255-ENFPEOT   Set EOT to no               @P7C 23240001
         AGO     .END_EOT_MFE                                      @L5A 23250001
.*                                                                 @L5A 23260001
.* Set EOT to yes                                                  @L5A 23270001
.SET_EOT_YES_MFE  ANOP                                             @L5A 23280001
.*                                                                 @L5A 23290001
.* If the action is not listen and not null goto action error      @P9C 23300001
         AIF ('&ACTION' NE 'LISTEN' AND                                X23310001
               '&ACTION' NE '').EOT_ERROR_ACTION_MFE               @P9C 23320001
.*                                                                 @L5A 23330001
.* Set EOT to yes                                                  @L5A 23340001
         OI      ENFPFLG,ENFPEOT       Set EOT to yes              @P7C 23350001
         AGO     .END_EOT_MFE                                      @L5A 23360001
.*                                                                 @L5A 23370001
.* EOT was specified with an action other than listen              @L5A 23380001
.EOT_ERROR_ACTION_MFE ANOP                                         @L5A 23390001
         MNOTE   04,'EOT NOT ALLOWED FOR &ACTION REQUEST'          @L5A 23400001
         AGO     .END_EOT_MFE                                      @L5A 23410001
.*                                                                 @L5A 23420001
.* EOT value was not yes or no                                     @L5A 23430001
.INVALID_EOT_MFE ANOP                                              @L5A 23440001
         MNOTE   08,'INVALID EOT: EOT=&EOT'                        @L5A 23450001
         AGO     .END_EOT_MFE                                      @L5A 23460001
.END_EOT_MFE ANOP                                                  @L5A 23470001
.*-------------------------------------------------------------------*  23480001
.*       Process the EOM parameter - Execute Form                    *  23490001
.*-------------------------------------------------------------------*  23500001
.*                                                                 @L5A 23510001
.* If EOM was already processed on the normal form then done       @L5A 23520001
      AIF (&DONEOM).END_EOM_MFE                                    @L5A 23530001
.*                                                                 @L5A 23540001
.* If EOM is null and action is not listen and action is no null   @P9C 23550001
      AIF ('&EOM' EQ '' AND '&ACTION' NE 'LISTEN' AND                  X23560001
               '&ACTION' NE '').END_EOM_MFE                        @P9C 23570001
.*                                                                 @L5A 23580001
.* If EOM is null and the action is listen or null set default     @P9C 23590001
      AIF ('&EOM' EQ '' AND ('&ACTION' EQ 'LISTEN' OR                  X23600001
               '&ACTION' EQ '')).SET_EOM_DEF_MFE                   @P9C 23610001
.*                                                                 @L5A 23620001
.* If EOM is yes then set EOM to yes                               @L5A 23630001
      AIF ('&EOM' EQ 'YES').SET_EOM_YES_MFE                        @L5A 23640001
.*                                                                 @L5A 23650001
.* If EOM is not no then it is invalid                             @L5A 23660001
      AIF ('&EOM' NE 'NO').INVALID_EOM_MFE                         @L5A 23670001
.*                                                                 @L5A 23680001
.* Set EOM to no                                                   @L5A 23690001
.SET_EOM_NO_MFE  ANOP                                              @L5A 23700001
.*                                                                 @L5A 23710001
.* If the action is not listen and not null goto action error      @P9C 23720001
         AIF ('&ACTION' NE 'LISTEN' AND                                X23730001
               '&ACTION' NE '').EOM_ERROR_ACTION_MFE               @P9C 23740001
.*                                                                 @L5A 23750001
.* Set the default EOM value                                       @L5A 23760001
.SET_EOM_DEF_MFE  ANOP                                             @L5A 23770001
.*                                                                 @L5A 23780001
.* If SRBEXIT was coded or EOT=YES was coded EOM defaults to yes   @L5A 23790001
         AIF ('&SRBEXIT' NE '' OR '&EOT' EQ 'YES').SET_EOM_YES_MFE @L5A 23800001
.* If EOM is null then don't set the default                       @P9A 23810001
         AIF ('&EOM' EQ '').DONE_EOM_MFE                           @P9A 23820001
.*                                                                 @L5A 23830001
.* Set EOM to no                                                   @L5A 23840001
         NI      ENFPFLG,255-ENFPEOM   Set EOM to no               @P7C 23850001
         AGO     .DONE_EOM_MFE                                     @L5A 23860001
.*                                                                 @L5A 23870001
.* Set EOM to yes                                                  @L5A 23880001
.SET_EOM_YES_MFE  ANOP                                             @L5A 23890001
.*                                                                 @L5A 23900001
.* If the action is not listen and not null goto action error      @P9C 23910001
         AIF ('&ACTION' NE 'LISTEN' AND                                X23920001
               '&ACTION' NE '').EOM_ERROR_ACTION_MFE               @P9C 23930001
.*                                                                 @L5A 23940001
.* Set EOM to yes                                                  @L5A 23950001
         OI      ENFPFLG,ENFPEOM       Set EOM to yes              @P7C 23960001
         AGO     .DONE_EOM_MFE                                     @L5A 23970001
.*                                                                 @L5A 23980001
.* The action specified with EOM is not allowed                    @L5A 23990001
.EOM_ERROR_ACTION_MFE ANOP                                         @L5A 24000001
         MNOTE   04,'EOM NOT ALLOWED FOR &ACTION REQUEST'          @L5A 24010001
         AGO     .END_EOM_MFE                                      @L5A 24020001
.*                                                                 @L5A 24030001
.* The EOM value was not yes or no                                 @L5A 24040001
.INVALID_EOM_MFE ANOP                                              @L5A 24050001
         MNOTE   08,'INVALID EOM : EOM=&EOM'                       @L5A 24060001
         AGO     .DONE_EOM_MFE                                     @L5A 24070001
.*                                                                 @L5A 24080001
.* EOM processing is done                                          @L5A 24090001
.DONE_EOM_MFE ANOP                                                 @L5A 24100001
.*                                                                 @L5A 24110001
.* Check the EOM, EOT and SRBEXIT combinations                     @L5A 24120001
.*                                                                 @L5A 24130001
.* EOT=YES and EOM=NO is not valid                                 @L5A 24140001
      AIF ('&EOT' EQ 'YES' AND '&EOM' EQ 'NO').EOT_EOM_ERROR_MFE   @L5A 24150001
      AGO     .CHECK_EOM_SRBEXIT_MFE                               @L5A 24160001
.CHECK_EOM_SRBEXIT_MFE ANOP                                        @L5A 24170001
.*                                                                 @L5A 24180001
.* EOM=NO is not allowed with SRBEXIT                              @L5A 24190001
     AIF ('&SRBEXIT' NE '' AND '&EOM' EQ 'NO').SRBEXIT_EOM_ERR_MFE @L5A 24200001
     AGO     .END_EOM_MFE                                          @L5A 24210001
.*                                                                 @L5A 24220001
.* Issue error message                                             @L5A 24230001
.SRBEXIT_EOM_ERR_MFE ANOP                                          @L5A 24240001
         MNOTE   04,'EOM=NO NOT VALID WITH SRBEXIT'                @L5A 24250001
         AGO     .END_EOM_MFE                                      @L5A 24260001
.*                                                                 @L5A 24270001
.* Issue error message                                             @L5A 24280001
.EOT_EOM_ERROR_MFE ANOP                                            @L5A 24290001
         MNOTE   04,'EOM=NO EOT=YES IS NOT A VALID COMBINATION'    @P8C 24300001
         AGO     .END_EOM_MFE                                      @L5A 24310001
.END_EOM_MFE ANOP                                                  @L5A 24320001
.*-------------------------------------------------------------------*  24330001
.*       Process the EXIT and SRBEXIT parameter - Execute Form       *  24340001
.*-------------------------------------------------------------------*  24350001
.*                                                                 @L5A 24360001
.* If SRBEXIT was already processed on the normal form then done   @L5A 24370001
         AIF   (&DONEXIT).END_EXIT_MFE                             @L5A 24380001
.*                                                                 @L5A 24390001
.* If EXIT equals null and SRBEXIT equals null then done           @L5A 24400001
         AIF   ('&EXIT' EQ '' AND '&SRBEXIT' EQ '').END_EXIT_MFE   @L5A 24410001
.*                                                                 @L5A 24420001
.* If EXIT is not null and SRBEXIT is not null then error          @L5A 24430001
         AIF   ('&EXIT' NE '' AND '&SRBEXIT' NE '').ERROR_BOTH_MFE @L5A 24440001
.*                                                                 @L5A 24450001
.* If EXIT is not null then process EXIT                           @L5A 24460001
         AIF   ('&EXIT' NE '').PROCESS_EXIT_MFE                    @L5A 24470001
.*                                                                 @L5A 24480001
.* Process the SRBEXIT keyword                                     @L5A 24490001
.PROCESS_SRBEXIT_MFE ANOP                                          @L5A 24500001
.*                                                                 @L5A 24510001
.* If ACTION is not equal to LISTEN then error                     @L5A 24520001
         AIF     ('&ACTION' NE 'LISTEN').BAD_SRBEXIT_MFE           @L5A 24530001
.*                                                                 @L5A 24540001
.* Set bit indicating SRBEXIT was specified                        @L5A 24550001
         OI      ENFPFLG,ENFPSRBE      Indicate SRBEXIT coded      @P7C 24560001
.*                                                                 @L5A 24570001
.* If SRBEXIT is in a register then                                @L5A 24580001
         AIF     ('&SRBEXIT'(1,1) EQ '(').REG_SRBEXIT_MFE          @L5A 24590001
.*                                                                 @L5A 24600001
.* Get SRBEXIT address                                             @L5A 24610001
         LA      15,&SRBEXIT           Get exit address            @P7C 24620001
         ST      15,ENFPEADR           Store address               @P7C 24630001
         AGO     .END_EXIT_MFE                                     @L5A 24640001
.*                                                                 @L5A 24650001
.* SRBEXIT address is specified in a register                      @L5A 24660001
.REG_SRBEXIT_MFE ANOP                                              @L5A 24670001
.*                                                                 @L5A 24680001
.* Get SRBEXIT address                                             @L5A 24690001
&REGC    SETC    '&SRBEXIT(1)'                                     @L5A 24700001
         ST      &REGC,ENFPEADR        Store address               @P7C 24710001
         AGO     .END_EXIT_MFE                                     @L5A 24720001
.*                                                                 @L5A 24730001
.* Process the EXIT keyword                                        @L5A 24740001
.PROCESS_EXIT_MFE ANOP                                             @L5A 24750001
.*                                                                 @L5A 24760001
.* If action is DELETE, QUERY, or REGISTER then issue error        @L7C 24770001
         AIF     ('&ACTION' EQ 'DELETE').BAD_EXIT_MFE              @L5A 24780001
         AIF     ('&ACTION' EQ 'QUERY').BAD_EXIT_MFE               @L5A 24790001
         AIF     ('&ACTION' EQ 'REGISTER').BAD_EXIT_MFE            @L7A 24800001
.*                                                                 @L5A 24810001
.* If EXIT is in a register                                        @L5A 24820001
         AIF     ('&EXIT'(1,1) EQ '(').REG_EXIT_MFE                @L5A 24830001
.*                                                                 @L5A 24840001
.* Set exit address                                                @L5A 24850001
         LA      15,&EXIT              Get exit address            @P7C 24860001
         ST      15,ENFPEADR           Store address               @P7C 24870001
         AGO     .END_EXIT_MFE                                     @L5A 24880001
.*                                                                 @L5A 24890001
.* Exit is in a register                                           @L5A 24900001
.REG_EXIT_MFE ANOP                                                 @L5A 24910001
.*                                                                 @L5A 24920001
.* Set exit address                                                @L5A 24930001
&REGC    SETC    '&EXIT(1)'                                        @L5A 24940001
         ST      &REGC,ENFPEADR        Store address               @P7C 24950001
         AGO     .END_EXIT_MFE                                     @L5A 24960001
.*                                                                 @L5A 24970001
.* Exit was specified with delete or query                         @L5A 24980001
.BAD_EXIT_MFE ANOP                                                 @L5A 24990001
         MNOTE   04,'EXIT NOT ALLOWED FOR &ACTION REQUEST'         @L5A 25000001
         AGO     .END_EXIT_MFE                                     @L5A 25010001
.*                                                                 @L5A 25020001
.* Exit and srbexit were both specified                            @L5A 25030001
.ERROR_BOTH_MFE ANOP                                               @L5A 25040001
         MNOTE   08,'EXIT NOT ALLOWED WITH SRBEXIT'                @L6A 25050001
         AGO     .END_EXIT_MFE                                     @L5A 25060001
.*                                                                 @L5A 25070001
.* SRBEXIT was specified with action other than listen             @L5A 25080001
.BAD_SRBEXIT_MFE ANOP                                              @L5A 25090001
         MNOTE   04,'SRBEXIT NOT ALLOWED FOR &ACTION REQUEST'      @L5A 25100001
         AGO     .END_EXIT_MFE                                     @L5A 25110001
.END_EXIT_MFE ANOP                                                 @L5A 25120001
.*-------------------------------------------------------------------*  25130001
.*       Process the FLTRBLK parameter - Execute Form                *  25140001
.*-------------------------------------------------------------------*  25150001
.*                                                                 @L7A 25160001
.* If FLTRBLK was already processed on the normal form then done   @L7A 25170001
         AIF   (&DONFLTR).END_FLTR_MFE                             @L7A 25180001
.* If FLTRBLK is null, skip FLTRBLK processing                     @L7A 25190001
         AIF     ('&FLTRBLK' EQ '').END_FLTR_MFE                   @L7A 25200001
.PROCESS_FLTRBLKE ANOP ,                                           @L7A 25210001
.* If the action is not LISTEN then issue error message            @L7A 25220001
         AIF     ('&ACTION' NE 'LISTEN').BAD_FLTR_MFE              @L7A 25230001
.*                                                                 @L5A 25240001
.* Check if more than one FLTRBLK specified                        @L7A 25250001
         AIF   (N'&FLTRBLK GT 1).FLTR_TOO_MANY_PARMS_MFE >1 parm   @L7A 25260001
.*                                                                 @L5A 25270001
.* If FLTRBLK is in a register then                                @L7A 25280001
         AIF     ('&FLTRBLK'(1,1) EQ '(').REG_FLTR_MFE             @L7A 25290001
.*                                                                 @L7A 25300001
.* Get FLTRBLK address                                             @L7A 25310001
         LA      15,&FLTRBLK           Get FLTRBLK address         @PJC 25320001
         ST      15,ENFPFLTR           Store address               @L7A 25330001
         AGO     .END_FLTR_MFE                                     @L7A 25340001
.*                                                                 @L7A 25350001
.* FLTRBLK address is specified in a register                      @L7A 25360001
.REG_FLTR_MFE ANOP ,                                               @L7A 25370001
.*                                                                 @L7A 25380001
.* Get FLTRBLK address                                             @L7A 25390001
&REGC    SETC    '&FLTRBLK(1)'                                     @L7A 25400001
         ST      &REGC,ENFPFLTR        Store address               @L7A 25410001
         AGO     .END_FLTR_MFE                                     @L7A 25420001
.*                                                                 @L7A 25430001
.* FLTRBLK was specified with action DELETE or QUERY               @L7A 25440001
.BAD_FLTR_MFE ANOP ,                                               @L7A 25450001
    MNOTE   04,'FLTRBLK NOT ALLOWED FOR &ACTION REQUEST - IGNORED' @L7A 25460001
         AGO     .END_FLTR_MFE                                     @L7A 25470001
.*                                                                 @L7A 25480001
.FLTR_TOO_MANY_PARMS_MFE ANOP ,                                    @L7A 25490001
         MNOTE 08,'MORE THAN 1 FLTRBLK VALUE - FLTRBLK IGNORED'    @L7A 25500001
&IGNFLTB SETB 1                                                    @PJC 25510001
.*                                                                 @L7A 25520001
.END_FLTR_MFE ANOP ,                                               @L7A 25530001
.*-------------------------------------------------------------------*  25540001
.*       Process the FLTRXIT parameter - Execute Form                *  25550001
.*-------------------------------------------------------------------*  25560001
.*                                                                 @L7A 25570001
.* If FLTRXIT was already processed on the normal form then done   @L7A 25580001
         AIF   (&DONFLTX).END_FLTX_MFE                             @L7A 25590001
.* If FLTRXIT is null, skip FLTRXIT processing                     @L7A 25600001
         AIF     ('&FLTRXIT' EQ '').END_FLTX_MFE                   @L7A 25610001
.PROCESS_FLTRXITE ANOP ,                                           @L7A 25620001
.* If the action is not REGISTER then issue error message          @L7A 25630001
         AIF     ('&ACTION' NE 'REGISTER').BAD_FLTX_MFE            @L7A 25640001
.*                                                                 @L5A 25650001
.* Check if more than one FLTRXIT specified                        @L7A 25660001
         AIF   (N'&FLTRXIT GT 1).FLTX_TOO_MANY_PARMS_MFE >1 parm   @L7A 25670001
.*                                                                 @L5A 25680001
.* If FLTRXIT is in a register then                                @L7A 25690001
         AIF     ('&FLTRXIT'(1,1) EQ '(').REG_FLTX_MFE             @L7A 25700001
.*                                                                 @L7A 25710001
.* Get FLTRXIT address                                             @L7A 25720001
         LA      15,&FLTRXIT           Get FLTRXIT address         @PJC 25730001
         ST      15,ENFPFLTR           Store address               @PJA 25740001
         AGO     .END_FLTX_MFE                                     @L7A 25750001
.*                                                                 @L7A 25760001
.* FLTRXIT address is specified in a register                      @L7A 25770001
.REG_FLTX_MFE ANOP ,                                               @L7A 25780001
.*                                                                 @L7A 25790001
.* Get FLTRXIT address                                             @L7A 25800001
&REGC    SETC    '&FLTRXIT(1)'                                     @L7A 25810001
         ST      &REGC,ENFPFLTR        Store address               @PJA 25820001
         AGO     .END_FLTX_MFE                                     @L7A 25830001
.*                                                                 @L7A 25840001
.* FLTRXIT was specified with action LISTEN, DELETE, or QUERY      @L7A 25850001
.BAD_FLTX_MFE ANOP ,                                               @L7A 25860001
    MNOTE   04,'FLTRXIT NOT ALLOWED FOR &ACTION REQUEST - IGNORED' @L7A 25870001
         AGO     .END_FLTX_MFE                                     @L7A 25880001
.*                                                                 @L7A 25890001
.FLTX_TOO_MANY_PARMS_MFE ANOP ,                                    @L7A 25900001
         MNOTE 08,'MORE THAN 1 FLTRXIT VALUE - FLTRXIT IGNORED'    @L7A 25910001
.*                                                                 @L7A 25920001
.END_FLTX_MFE ANOP ,                                               @L7A 25930001
.*--------------------------------------------------------------------* 25940001
.*       Process the MASEXIT parameter - Execute Form             @PFA* 25950001
.*--------------------------------------------------------------------* 25960001
.* If version is less than 3 go to end                             @03A 25970001
         AIF ('&VERS' LT '3').END_MASE_MFE                         @04C 25980001
.*                                                                 @03A 25990001
.* If MASEXIT was already processed on the Normal form, then done  @PFA 26000001
         AIF (&DONEMASE).END_MASE_MFE                              @PFA 26010001
.*                                                                 @PFA 26020001
.* If MASEXIT was not coded and ACTION was not LISTEN, goto end    @PFA 26030001
         AIF ('&MASEXIT' EQ '' AND                                     +26040001
               '&ACTION' NE 'LISTEN').END_MASE_MFE                 @PFA 26050001
.*                                                                 @PFA 26060001
.* If MASEXIT was not coded and ACTION is LISTEN, use default      @PFA 26070001
         AIF ('&MASEXIT' EQ '' AND                                     +26080001
               '&ACTION' EQ 'LISTEN').SET_MASE_DEF_MFE             @PFA 26090001
.*                                                                 @PFA 26100001
.* If MASEXIT is YES, then goto set it to yes                      @PFA 26110001
         AIF ('&MASEXIT' EQ 'YES').SET_MASE_YES_MFE                @PFA 26120001
.*                                                                 @PFA 26130001
.* If MASEXIT is not equal to NO, then it must be invalid          @PFA 26140001
         AIF ('&MASEXIT' NE 'NO').INVALID_MASE_MFE                 @PFA 26150001
.*                                                                 @PFA 26160001
.* Set MASEXIT to NO                                               @PFA 26170001
.SET_MASE_NO_MFE ANOP                                              @PFA 26180001
.*                                                                 @PFA 26190001
.* If the ACTION is not LISTEN and not null, goto action error     @PFA 26200001
         AIF ('&ACTION' NE 'LISTEN' AND                                +26210001
               '&ACTION' NE '').MASE_ERROR_ACTION_MFE              @PFA 26220001
.*                                                                 @PFA 26230001
.* Check if SRBEXIT was specified                                  @PFA 26240001
         AIF ('&SRBEXIT' NE '').SRBEXIT_MASE_ERR_MFE               @PFA 26250001
.*                                                                 @PFA 26260001
.* Set MASEXIT to the default value NO                             @PFA 26270001
.SET_MASE_DEF_MFE ANOP                                             @PFA 26280001
         NI      ENFPFLG2,255-ENFPMASE                             @PFA 26290001
         AGO     .END_MASE_MFE                                     @PFA 26300001
.*                                                                 @PFA 26310001
.* Set MASEXIT to YES                                              @PFA 26320001
.SET_MASE_YES_MFE ANOP                                             @PFA 26330001
.* If the ACTION is not LISTEN and not null, goto action error     @PFA 26340001
         AIF ('&ACTION' NE 'LISTEN' AND                                +26350001
               '&ACTION' NE '').MASE_ERROR_ACTION_MFE              @PFA 26360001
.* Check if SRBEXIT was specified                                  @PFA 26370001
         AIF ('&SRBEXIT' NE '').SRBEXIT_MASE_ERR_MFE               @PFA 26380001
.*                                                                 @PFA 26390001
.* Set MASEXIT to YES                                              @PFA 26400001
         OI      ENFPFLG2,ENFPMASE                                 @PFA 26410001
         AGO     .END_MASE_MFE                                     @PFA 26420001
.*                                                                 @PFA 26430001
.* MASEXIT was coded with ACTION other than listen, so issue error @PFA 26440001
.MASE_ERROR_ACTION_MFE ANOP                                        @PFA 26450001
         MNOTE   04,'MASEXIT NOT ALLOWED FOR &ACTION REQUEST'      @PFA 26460001
         AGO     .END_MASE_MFE                                     @PFA 26470001
.*                                                                 @PFA 26480001
.* MASEXIT value was not valid, so issue error                     @PFA 26490001
.INVALID_MASE_MFE ANOP                                             @PFA 26500001
         MNOTE   08,'INVALID MASEXIT: MASEXIT=&MASEXIT'            @PFA 26510001
         AGO     .END_MASE_MFE                                     @PFA 26520001
.*                                                                 @PFA 26530001
.* When SRBEXIT is specified, MASEXIT is not allowed               @PFA 26540001
.SRBEXIT_MASE_ERR_MFE ANOP                                         @PFA 26550001
         MNOTE   04,'MASEXIT NOT VALID WITH SRBEXIT'               @PFA 26560001
         AGO     .END_MASE_MFE                                     @PFA 26570001
.*                                                                 @PFA 26580001
.END_MASE_MFE ANOP                                                 @PFA 26590001
.*-------------------------------------------------------------------*  26600001
.*    Process the PARMLEN parameter - execute form                 @L6A 26610001
.*-------------------------------------------------------------------*  26620001
         AIF (&DONEPLEN).END_PLEN_MFE  PARMLEN already processed   @L6A 26630001
         AIF ('&PARMLEN' EQ '').END_PLEN_MFE   PARMLEN not coded   @L6A 26640001
         AIF (N'&PARMLEN GT 1).PLEN_TOO_MANY_PARMS_MFE    >1 parm  @L6A 26650001
.*                                                                      26660001
.* If the action is not SIGNAL or null, issue an MNOTE.            @L6A 26670001
.* (A null action is acceptable since it may be specified          @L6A 26680001
.* on the MF=L invocation.)                                        @L6A 26690001
         AIF   ('&ACTION' NE 'SIGNAL' AND                              +26700001
               '&ACTION' NE '').PLEN_ERROR_ACTION_MFE Wrong action @L6A 26710001
.* Set parameter length value from register, storage, or constant, @L6A 26720001
.* as appropriate                                                  @L6A 26730001
         AIF   ('&PARMLEN'(1,1) EQ '(').REGPLEN  If in register    @L6A 26740001
         AIF   (T'&PARMLEN EQ 'N').NUMPLEN  Numeric value          @L6A 26750001
.*                                                                 @PED 26760001
         MVC     ENFPFLEN(L'ENFPFLEN),&PARMLEN  Move length value  @L6A 26770001
         AGO   .END_PLEN_MFE                                       @L6A 26780001
.*                                                                5@PED 26790001
.NUMPLEN ANOP                          Length value is numerical   @L6A 26800001
         MVC     ENFPFLEN,=F'&PARMLEN' Move length value           @L6A 26810001
         AGO   .END_PLEN_MFE                                       @L6A 26820001
.REGPLEN ANOP                          Handle register value       @L6A 26830001
&REGC    SETC  '&PARMLEN'(2,K'&PARMLEN-2)  Value inside parens     @L6A 26840001
         ST      &REGC,ENFPFLEN        Save length value                26850001
         AGO   .END_PLEN_MFE                                       @L6A 26860001
.*                                                                      26870001
.PLEN_ERROR_ACTION_MFE ANOP            PARMLEN with wrong action   @L6A 26880001
         MNOTE 04,'PARMLEN NOT ALLOWED FOR &ACTION REQUEST - IGNORED'  +26890001
                                                                   @L6A 26900001
         AGO   .END_PLEN_MFE                                       @L6A 26910001
.*                                                                      26920001
.PLEN_TOO_MANY_PARMS_MFE ANOP          Too many parameters         @L6A 26930001
         MNOTE 08,'MORE THAN 1 PARMLEN VALUE - PARMLEN IGNORED'    @L6A 26940001
.*                                                                      26950001
.END_PLEN_MFE ANOP                                                 @L6A 26960001
.*-------------------------------------------------------------------*  26970001
.*       PROCESS THE FREEPRM PARAMETER - NORMAL (REG) & EXECUTE FORM *  26980001
.*-------------------------------------------------------------------*  26990001
         AIF     (&DONEFRP).ENDFRPE    FREEPRM ALREADY PROCESSED        27000001
         AIF     ('&FREEPRM' EQ '').ENDFRPE NOT SPECIFIED IN EXEC FORM  27010001
         AIF     ('&ACTION' NE '' AND '&ACTION' NE 'SIGNAL').BADFPM2    27020001
         AIF     ('&PARMLEN' NE '').FREEPRM_AND_PARMLEN_MFE        @L6A 27030001
&N       SETA    N'&FREEPRM            NO OF FREEPRM VALUES SPECIFIED   27040001
         AIF     (&N GT &MAXF).BADFRV1      TOO MANY FREEPRM VALUES     27050001
         AIF     (&N GE &MINF).SPPROC1      CORRECT NO OF VALUES        27060001
         MNOTE   08,'SUBPOOL AND LENGTH REQUIRED - FREEPRM IGNORED'     27070001
         AGO     .ENDFRPE                                               27080001
.BADFRV1 ANOP                                                           27090001
         MNOTE   08,'MORE THAN &MAXF FREEPRM VALUES - FREEPRM IGNORED'  27100001
         AGO     .ENDFRPE                                               27110001
.FREEPRM_AND_PARMLEN_MFE ANOP          Both FREEPRM and PARMLEN    @L6A 27120001
         MNOTE   08,'FREEPRM NOT ALLOWED WITH PARMLEN'             @L6A 27130001
         AGO     .ENDFRPE                                               27140001
.BADFPM2 MNOTE   04,'FREEPRM NOT ALLOWED FOR &ACTION REQUEST- IGNORED'  27150001
         AGO     .ENDFRPE                                               27160001
.*  -------------------------------------------   *                     27170001
.*       SUBPOOL = &FREEPRM(1)                    *                     27180001
.*  -------------------------------------------   *                     27190001
.SPPROC1 ANOP                          BEGIN SUBPOOL PROCESSING         27200001
         AIF     (&DONESP).ENDSP1                                       27210001
         AIF     ('&FREEPRM(1)' EQ '').MISSP1                           27220001
         AIF     ('&FREEPRM(1)'(1,1) NE '(').SETFRS1                    27230001
&REGC    SETC    '&FREEPRM(1)'(2,K'&FREEPRM(1)-2)                       27240001
         STC     &REGC,ENFPFSPL        SAVE SUBPOOL NUMBER              27250001
         AGO     .ENDSP1                                                27260001
.MISSP1  ANOP                                                           27270001
         MNOTE   08,'SUBPOOL REQUIRED IN FREEPRM - FREEPRM IGNORED'     27280001
         AGO     .ENDFRPE                                               27290001
.SETFRS1 ANOP                          SAVE SUBPOOL VALUE               27300001
         LA      15,&FREEPRM(1)        GET SUBPOOL NUMBER               27310001
         STC     15,ENFPFSPL           SAVE SUBPOOL NUMBER              27320001
.ENDSP1  ANOP                          END OF SUBPOOL PROCESSING        27330001
.*  -------------------------------------------   *                     27340001
.*       LENGTH = &FREEPRM(2)                     *                     27350001
.*  -------------------------------------------   *                     27360001
         AIF     (&DONELEN).ENDFLN1                                     27370001
         AIF     ('&FREEPRM(2)' EQ '').MISLEN1                          27380001
         AIF     ('&FREEPRM(2)'(1,1) NE '(').SETFLN1                    27390001
&REGC    SETC    '&FREEPRM(2)'(2,K'&FREEPRM(2)-2)                       27400001
         ST      &REGC,ENFPFLEN        SAVE LENGTH VALUE                27410001
         AGO     .ENDFLN1                                               27420001
.MISLEN1 ANOP                                                           27430001
         MNOTE   08,'LENGTH REQUIRED IN FREEPRM - FREEPRM IGNORED'      27440001
         AGO     .ENDFRPE                                               27450001
.SETFLN1 ANOP                          SAVE LENGTH VALUE                27460001
         AIF     (T'&FREEPRM(2) EQ 'N').NUMLEN  Numeric value           27470001
         B       &GNAME.C              BRANCH AROUND LENGTH VALUE       27480001
&GNAME.B DC      A(&FREEPRM(2))        DEFINE LENGTH VALUE              27490001
&GNAME.C MVC     ENFPFLEN,&GNAME.B     MOVE LENGTH VALUE                27500001
         AGO     .ENDFLN1                                               27510001
.NUMLEN  ANOP                          LENGTH VALUE IS A CONSTANT       27520001
         AIF     (&FREEPRM(2) LT 4096).MVABSL                           27530001
         MVC     ENFPFLEN,=F'&FREEPRM(2)' MOVE LENGTH VALUE             27540001
         AGO     .ENDFLN1                                               27550001
.MVABSL  ANOP                                                           27560001
         LA      15,&FREEPRM(2)        LOAD LENGTH VALUE                27570001
         ST      15,ENFPFLEN           SAVE LENGTH VALUE                27580001
.ENDFLN1 ANOP                          END OF LENGTH VALUE PROCESSING   27590001
.*  -------------------------------------------   *                     27600001
.*       KEY = &FREEPRM(3)                        *                     27610001
.*  -------------------------------------------   *                     27620001
         AIF     (&DONEKEY).ENDFKY1                                     27630001
         AIF     (&N NE 3).DEFKEY1     KEY NOT SPECIFIED                27640001
         AIF     ('&FREEPRM(3)' EQ '').DEFKEY1                          27650001
         AIF     ('&FREEPRM(3)'(1,1) NE '(').SETFKY1                    27660001
&REGC    SETC    '&FREEPRM(3)'(2,K'&FREEPRM(3)-2)                       27670001
         STC     &REGC,ENFPFKEY        SAVE KEY NUMBER                  27680001
         AGO     .ENDFKY1                                               27690001
.SETFKY1 ANOP                                                           27700001
         AIF     (T'&FREEPRM(3) NE 'N').GOODKY1 EQUATED VALUE           27710001
         AIF     (&FREEPRM(3) LE 15).GOODKY1     KEY= 0 TO 15           27720001
         MNOTE   08,'INVALID KEY VALUE &FREEPRM(3), FREEPRM IGNORED'    27730001
         AGO     .ENDFRPE                                               27740001
.DEFKEY1 ANOP                                                           27750001
         MVI     ENFPFKEY,X'00'        DEFAULT TO KEY 0                 27760001
         AGO     .ENDFKY1                                               27770001
.GOODKY1 ANOP                                                           27780001
         LA      15,&FREEPRM(3)        LOAD STORAGE KEY                 27790001
         SLL     15,4(0)               LOAD STORAGE KEY                 27800001
         STC     15,ENFPFKEY           SAVE STORAGE KEY FOR FREEMAIN    27810001
.ENDFKY1 ANOP                          COMPLETE KEY PROCESSING          27820001
.*  -------------------------------------------   *                     27830001
.*       SET ENFPFREE                             *                     27840001
.*  -------------------------------------------   *                     27850001
         AIF     (&DONEFFG).ENDFRPE    ENFPFREE ALREADY SET UP          27860001
         OI      ENFPFLG,ENFPFREE      FREE SIGNAL PARAM LIST           27870001
.*                                                                      27880001
.ENDFRPE ANOP                                                           27890001
.*-------------------------------------------------------------------*  27900001
.*       PROCESS THE PARM PARAMETER - NORMAL(REG) OR EXECUTE FORM    *  27910001
.*-------------------------------------------------------------------*  27920001
         AIF     (&DONEPRM).ENDPARM   PARM ALREADY IN PARM LIST         27930001
         AIF     ('&PARM' EQ '').ENDPARM                                27940001
         AIF     ('&ACTION' EQ '' OR '&ACTION' EQ 'SIGNAL' OR          X27950001
               '&ACTION' EQ 'LISTEN' OR                                X27960001
               '&ACTION' EQ 'QUERY').SETPARM                     @PNC   27970001
.BADPRM2 MNOTE   04,'PARM NOT ALLOWED FOR &ACTION REQUEST - IGNORED'    27980001
         AGO     .ENDPARM                                               27990001
.SETPARM ANOP                                                           28000001
         AIF     ('&PARM'(1,1) EQ '(').SETPRMR                          28010001
         LA      15,&PARM              GET PTR TO USER PARM LIST        28020001
         ST      15,ENFPSPRM           SAVE PTR TO USER PARM LIST       28030001
         AGO     .ENDPARM                                               28040001
.SETPRMR ANOP                                                           28050001
&REGC    SETC    '&PARM(1)'                                             28060001
         ST      &REGC,ENFPSPRM        PUT PARM INTO ENF PARM LIST      28070001
.ENDPARM ANOP                                                           28080001
.*-------------------------------------------------------------------*  28090001
.*       PROCESS THE DISABLE PARAMETER -  EXECUTE FORM           @L4A*  28100001
.*-------------------------------------------------------------------*  28110001
         AIF     (&DONEDIS).ENDDIS2   DISABLE ALREADY CODED       @L4A  28120001
         AIF     ('&DISABLE' EQ '').ENDDIS2  Not specified        @PDC  28130001
         AIF     ('&ACTION' EQ 'LISTEN').CONTDI2 LISTEN CODED     @L4A  28140001
         MNOTE   04,'DISABLE NOT ALLOWED FOR &ACTION REQUEST - IGNORED' 28150001
         AGO     .ENDDIS2                      IGNORE DISABLE     @L4A  28160001
.CONTDI2 AIF     ('&ESTBNME' NE '' AND '&EXITNME' NE '').DIS2     @L4A  28170001
         MNOTE   08,'ESTBNME AND EXITNME REQUIRED WITH DISABLE'   @L4A  28180001
.DIS2    ANOP                                                     @L4A  28190001
         AIF     ('&DISABLE' EQ 'YES').DISY2   DISABLE=YES        @L4A  28200001
         AIF     ('&DISABLE' NE 'NO').BADDIS2  EXPECT DISABLE=NO  @L4A  28210001
         NI      ENFPFLG,255-ENFPDISA  SET DISABLE=NO             @L4A  28220001
         OI      ENFPFLG,ENFPDISO      DISABLE OPERATIONAL        @L4A  28230001
         AGO     .ENDDIS2                                         @L4A  28240001
.DISDEF2 ANOP                                                     @L4A  28250001
         AIF     ('&ACTION' NE 'LISTEN').ENDDIS2 LISTEN CODED     @L4A  28260001
.DISY2   OI      ENFPFLG,ENFPDISA      SET DISABLE=YES            @L4A  28270001
         OI      ENFPFLG,ENFPDISO      DISABLE OPERATIONAL        @L4A  28280001
         AGO     .ENDDIS2                                         @L4A  28290001
.BADDIS2 MNOTE   08,'INVALID DISABLE : DISABLE=&DISABLE IGNORED'  @L4A  28300001
.ENDDIS2  ANOP                                                    @L4A  28310001
.*-------------------------------------------------------------------*  28320001
.*       PROCESS THE ESTBNME AND EXITNME PARAMETERS - EXECUTE FORM   *  28330001
.*-------------------------------------------------------------------*  28340001
         AIF     ('&ESTBNME' EQ '' AND '&EXITNME' EQ '').ENDE2    @D1A  28350001
         AIF     ('&ESTBNME' NE '' AND '&EXITNME' NE '').SETEE2   @D1A  28360001
         MNOTE   08,'BOTH ESTBNME AND EXITNME MUST BE SPECIFIED'  @D1A  28370001
         AGO     .ENDE2                                           @D1A  28380001
.SETEE2  ANOP                                                     @D1A  28390001
         AIF     ('&ESTBNME'(1,1) EQ '(').SETBNME - IN A REG.     @01A  28400001
         MVC     ENFPLNME(8),&ESTBNME  STORE ESTABLISHER NAME     @D1A  28410001
         AGO     .ENDBNM2                                         @01A  28420001
.SETBNME ANOP                                                     @01A  28430001
&ESTB    SETC    '&ESTBNME(1)'         GET REGISTER               @01A  28440001
         MVC     ENFPLNME(8),0(&ESTB)  STORE ESTABLISHER NAME     @01A  28450001
.ENDBNM2 ANOP                                                     @01A  28460001
         AIF     ('&EXITNME'(1,1) EQ '(').SETTNME - IN A REG.     @01A  28470001
         MVC     ENFPXNME(8),&EXITNME  STORE LISTEN EXIT NAME     @D1A  28480001
         AGO     .ENDE2                                           @01A  28490001
.SETTNME ANOP                                                     @01A  28500001
&ENME    SETC    '&EXITNME(1)'         GET REGISTER               @01A  28510001
         MVC     ENFPXNME(8),0(&ENME)  STORE EXIT NAME            @01A  28520001
.ENDE2   ANOP                                                     @D1A  28530001
.*--------------------------------------------------------------------* 28540001
.*       Process the XSYS parameter - execute form                 @L6A 28550001
.*--------------------------------------------------------------------* 28560001
.*                                                                      28570001
.* If XSYS was already processed on the normal form or             @L6A 28580001
.*    XSYS was not coded then done                                 @L6A 28590001
         AIF (&DONEXSYS OR '&XSYS' EQ '').END_XSYS_MFE             @L6A 28600001
.*                                                                      28610001
.* If more than one parameter, issue MNOTE                         @L6A 28620001
         AIF (N'&XSYS GT 1).XSYS_TOO_MANY_PARMS_MFE                @L6A 28630001
.*                                                                      28640001
.* If the action is not LISTEN, SIGNAL, or null, issue MNOTE.      @L6A 28650001
.* (A null action is acceptable since it may have been specified   @L6A 28660001
.* on the MF=L invocation.)                                        @L6A 28670001
         AIF ('&ACTION' NE 'LISTEN' AND                                +28680001
               '&ACTION' NE 'SIGNAL' AND                               +28690001
               '&ACTION' NE '').XSYS_ERROR_ACTION_MFE              @L6A 28700001
.*                                                                      28710001
.* If XSYS is YES or NO, set the flag appropriately.  If it's      @L6A 28720001
.* anything else, issue an MNOTE.                                  @L6A 28730001
         AIF ('&XSYS' EQ 'YES').SET_XSYS_YES_MFE                   @L6A 28740001
         AIF ('&XSYS' EQ 'NO').SET_XSYS_NO_MFE                     @L6A 28750001
         AGO     .INVALID_XSYS_MFE                                 @L6A 28760001
.*                                                                      28770001
.SET_XSYS_YES_MFE ANOP                 Set XSYS to YES             @L6A 28780001
         OI      ENFPFLG,ENFPXSYS      Cross-system request       @L6A  28790001
         AGO     .END_XSYS_MFE                                     @L6A 28800001
.*                                                                      28810001
.SET_XSYS_NO_MFE ANOP                  Set XSYS to NO              @L6A 28820001
         NI      ENFPFLG,255-ENFPXSYS  Non-cross-system request   @L6A  28830001
         AGO     .END_XSYS_MFE                                     @L6A 28840001
.*                                                                      28850001
.INVALID_XSYS_MFE ANOP                 XSYS value not valid        @L6A 28860001
         MNOTE   08,'INVALID XSYS: XSYS=&XSYS'                     @L6A 28870001
         AGO     .END_XSYS_MFE                                     @L6A 28880001
.*                                                                      28890001
.XSYS_ERROR_ACTION_MFE ANOP            XSYS w/inappropriate action @L6A 28900001
         MNOTE   04,'XSYS NOT ALLOWED FOR &ACTION REQUEST - IGNORED'   +28910001
                                                                   @L6A 28920001
         AGO     .END_XSYS_MFE                                     @L6A 28930001
.*                                                                      28940001
.XSYS_TOO_MANY_PARMS_MFE ANOP          Too many parameters         @L6A 28950001
         MNOTE   08,'MORE THAN 1 XSYS VALUE - XSYS IGNORED'        @L6A 28960001
.*                                                                      28970001
.END_XSYS_MFE ANOP                                                 @L6A 28980001
.*--------------------------------------------------------------------* 28990001
.*       Process the BITQUAL parameter - normal or execute form    @L6A 29000001
.*--------------------------------------------------------------------* 29010001
         AIF   (&DONEBQUAL OR '&BITQUAL' EQ '').END_BITQUAL_MFNE       +29020001
                                       BITQUAL processed or not        +29030001
                                         coded                     @L6A 29040001
         AIF   (N'&BITQUAL GT 1).BITQUAL_TOO_MANY_PARMS_MFNE  Too      +29050001
                                         many parameters           @L6A 29060001
.*                                                                      29070001
.* If the action is DELETE, issue an MNOTE.  (A null action is     @L6A 29080001
.* acceptable since it may have been specified on the MF=L         @L6A 29090001
.* invocation.)                                                    @L6A 29100001
         AIF   ('&ACTION' EQ 'DELETE').BITQUAL_ERROR_ACTION_MFNE   @L6A 29110001
.*                                                                      29120001
.* Set bit-mapped qualifier from register, numeral, or storage, as @L6A 29130001
.* appropriate                                                     @L6A 29140001
         AIF   ('&BITQUAL'(1,1) EQ '(').REGBQUAL  If in register   @L6A 29150001
         AIF   ('&BITQUAL'(1,2) EQ 'X''' OR                            +29160001
               '&BITQUAL'(1,2) EQ 'x''').HEXBQUAL Hex number       @PAC 29170001
         AIF   (T'&BITQUAL EQ 'N').NUMBQUAL  Numeric value         @L6A 29180001
         MVC     ENFPBMQ(L'ENFPBMQ),&BITQUAL  Move BITQUAL value  @L6A  29190001
         AGO   .END_BITQUAL_MFNE                                   @L6A 29200001
.NUMBQUAL ANOP                         Handle numeric value        @L6A 29210001
         MNOTE 08,'BITQUAL MUST BE A HEX NUMERIC VALUE'            @L6A 29220001
         AGO   .END_BITQUAL_MFNE                                   @L6A 29230001
.HEXBQUAL ANOP                         Handle hex number           @L6A 29240001
&BQUAL   SETC  '&BITQUAL'(3,K'&BITQUAL-3)  Capture BITQUAL value   @L6A 29250001
         MVC     ENFPBMQ,=XL32'&BQUAL'    Move numeric value      @L6A  29260001
         AGO   .END_BITQUAL_MFNE                                   @L6A 29270001
.REGBQUAL ANOP                         Handle register value       @L6A 29280001
&REGC    SETC  '&BITQUAL'(2,K'&BITQUAL-2)  Value inside parens     @L6A 29290001
         MVC     ENFPBMQ(L'ENFPBMQ),0(&REGC)  Move BITQUAL value  @L6A  29300001
         AGO   .END_BITQUAL_MFNE                                   @L6A 29310001
.*                                                                      29320001
.BITQUAL_ERROR_ACTION_MFNE ANOP        BITQUAL with wrong action   @L6A 29330001
         MNOTE  04,'BITQUAL NOT ALLOWED FOR &ACTION REQUEST - IGNORED' +29340001
                                                                   @L6A 29350001
         AGO    .END_BITQUAL_MFNE                                  @L6A 29360001
.*                                                                      29370001
.BITQUAL_TOO_MANY_PARMS_MFNE ANOP      Too many parameters         @L6A 29380001
         MNOTE  08,'MORE THAN 1 BITQUAL VALUE - BITQUAL IGNORED'   @L6A 29390001
.*                                                                      29400001
.END_BITQUAL_MFNE ANOP                                             @L6A 29410001
.*--------------------------------------------------------------------* 29420001
.*  Process the BITCOMPARE parameter - execute form                @L6A 29430001
.*--------------------------------------------------------------------* 29440001
.*                                                                      29450001
.* If BITCOMPARE was not coded, it defaults to SUBSET (ENFPBCMP    @L6A 29460001
.* = B'000')                                                       @L6A 29470001
         AIF   (&DONEBCOMP OR '&BITCOMPARE' EQ '').END_BITCOMPARE_MFE  +29480001
                                                                   @L6A 29490001
         AIF   (N'&BITCOMPARE GT 1).BITCOMPARE_TOO_MANY_PARMS_MFE  @L6A 29500001
.*                                                                      29510001
.* If the action is anything but LISTEN or not specified, issue an @L6A 29520001
.* MNOTE.  (A null action is acceptable since it may be specified  @L6A 29530001
.* on the MF=L invocation.)                                        @L6A 29540001
         AIF   ('&ACTION' NE 'LISTEN' AND                              +29550001
               '&ACTION' NE '').BITCOMPARE_ERROR_ACTION_MFE        @L6A 29560001
.*                                                                      29570001
         AIF   ('&BITCOMPARE' EQ 'SUBSET').SET_SUBSET_MFE          @L6A 29580001
         AIF   ('&BITCOMPARE' EQ 'INTERSECT').SET_INTERSECT_MFE    @L6A 29590001
         AIF   ('&BITCOMPARE' EQ 'EQUAL').SET_EQUAL_MFE            @L6A 29600001
         MNOTE 08,'INVALID BITCOMPARE: BITCOMPARE=&BITCOMPARE'     @L6A 29610001
         AGO   .END_BITCOMPARE_MFE                                 @L6A 29620001
.*                                                                      29630001
.SET_SUBSET_MFE ANOP                Set BITCOMPARE to SUBSET       @L6A 29640001
         NI      ENFPFLG2,ENFPBQMK     Clear 3 high-order bits    @L6A  29650001
         AGO   .END_BITCOMPARE_MFE                                 @L6A 29660001
.SET_INTERSECT_MFE ANOP             Set BITCOMPARE to INTERSECT    @L6A 29670001
         NI      ENFPFLG2,ENFPBQMK     Clear 3 high-order bits    @L6A  29680001
         OI      ENFPFLG2,ENFPBQIN     BITCOMPARE=INTERSECT       @L6A  29690001
         AGO   .END_BITCOMPARE_MFE                                 @L6A 29700001
.SET_EQUAL_MFE ANOP                 Set BITCOMPARE to EQUAL        @L6A 29710001
         NI      ENFPFLG2,ENFPBQMK     Clear 3 high-order bits    @L6A  29720001
         OI      ENFPFLG2,ENFPBQEQ     BITCOMPARE=EQUAL           @L6A  29730001
         AGO   .END_BITCOMPARE_MFE                                 @L6A 29740001
.*                                                                      29750001
.BITCOMPARE_ERROR_ACTION_MFE ANOP      BITCOMPARE w/inappropriate      +29760001
                                         action                    @L6A 29770001
         MNOTE 04,'BITCOMPARE NOT ALLOWED FOR &ACTION REQUEST - IGNORED+29780001
               '                                                   @L6A 29790001
         AGO   .END_BITCOMPARE_MFE                                 @L6A 29800001
.*                                                                      29810001
.BITCOMPARE_TOO_MANY_PARMS_MFE ANOP    Too many parameters         @L6A 29820001
         MNOTE 08,'MORE THAN 1 BITCOMPARE VALUE - BITCOMPARE IGNORED'  +29830001
                                                                   @L6A 29840001
.*                                                                      29850001
.END_BITCOMPARE_MFE ANOP                                           @L6A 29860001
.*-------------------------------------------------------------------*  29870001
.*       Process the XCFFILTERGROUP parameter - Execute Form     @05A*  29880001
.*-------------------------------------------------------------------*  29890001
.*                                                                 @05A 29900001
.* If version is less than 4 go to end                             @05A 29910001
         AIF ('&VERS' LT '4').END_XCFG_MFE                         @05A 29920001
.* If XCFFILTERGROUP was already processed on the normal form      @05A 29930001
.* then done                                                       @05A 29940001
         AIF   (&DONXCFG).END_XCFG_MFE                             @05A 29950001
.* If XCFFILTERGROUP is null, skip XCFFILTERGROUP processing       @05A 29960001
         AIF     ('&XCFFILTERGROUP' EQ '').END_XCFG_MFE            @05A 29970001
.PROCESS_XCFGROUPE ANOP ,                                          @05A 29980001
.* If the action is not SIGNAL then issue error message            @05A 29990001
         AIF   ('&ACTION' NE 'SIGNAL').XCFG_NOSIG_MFE              @05A 30000001
.*                                                                 @05A 30010001
.* If the XSYS is not YES, then issue error message                @05A 30020001
         AIF   ('&XSYS' NE 'YES').XCFG_NOXSYS_MFE                  @05A 30030001
.*                                                                 @05A 30040001
.* If more than on XCFFILTERGROUP specified, then issue error      @05A 30050001
.* message                                                         @05A 30060001
         AIF   (N'&XCFFILTERGROUP GT 1).XCFG_TOO_MANY_PARMS_MFE    @05A 30070001
.*                                                                 @05A 30080001
.* XCFFILTERGROUP is good...                                       @05A 30090001
.*                                                                 @05A 30100001
.* Store XCF Group  into parameter list...                         @05A 30110001
.SETXCFG ANOP    Check if parameter is a register...               @05A 30120001
         AIF     ('&XCFFILTERGROUP'(1,1) EQ '(').REGXCFG           @05A 30130001
.* Parameter is not in a register, store the value itself...       @05A 30140001
         MVC     ENFPXCFG(8),&XCFFILTERGROUP STORE XCFFILTERGROUP  @05A 30150001
         AGO    .END_XCFG_MFE                                      @05A 30160001
.REGXCFG ANOP   Parameter is in a register, handle it...           @05A 30170001
&ESTB    SETC    '&XCFFILTERGROUP(1)'        GET REGISTER          @05A 30180001
         MVC     ENFPXCFG(8),0(&ESTB)  STORE XCFFILTERGROUP        @05A 30190001
         AGO    .END_XCFG_MFE                                      @05A 30200001
.*                                                                 @05A 30210001
.* Issue error messages as detected above...                       @05A 30220001
.*                                                                 @05A 30230001
.* XCFFILTERGROUP was specified but ACTION was not SIGNAL...       @05A 30240001
.XCFG_NOSIG_MFE ANOP                                               @05A 30250001
       MNOTE   04,'XCFFILTERGROUP NOT ALLOWED FOR &ACTION REQUEST' @05A 30260001
         AGO    .END_XCFG_MFE                                      @05A 30270001
.* XCFFILTERGROUP was specified but XSYS is not YES...             @05A 30280001
.XCFG_NOXSYS_MFE ANOP                                              @05A 30290001
    MNOTE 08,'XSYS=YES REQUIRED WITH XCFFILTERGROUP'               @05A 30300001
         AGO    .END_XCFG_MFE                                      @05A 30310001
.* XCFFILTERGROUP has too many parameters...                       @05A 30320001
.XCFG_TOO_MANY_PARMS_MFE ANOP          Too many parameters         @05A 30330001
  MNOTE   08,'MORE THAN 1 XCFFILTERGROUP VALUE - XCFFILTEGROUP IGNORED'+30340001
                                                                   @05A 30350001
.*                                                                 @05A 30360001
.END_XCFG_MFE ANOP ,                                               @05A 30370001
.*--------------------------------------------------------------------* 30380001
.*  Process the PLISTVER parameter - execute form                  @PAA 30390001
.*--------------------------------------------------------------------* 30400001
         AIF     ('&PLISTVER' EQ '').END_PLISTVER_MFE              @PAA 30410001
         AIF     ('&MF' EQ '').END_PLISTVER_MFE                    @PAA 30420001
         MVC     ENFPVERS,=H'&VERS'    Move parameter list version @PAA 30430001
         MVC     ENFPLEN,=H'&LEN'      Move parameter list length  @PAA 30440001
.END_PLISTVER_MFE ANOP                                             @PAA 30450001
.*-------------------------------------------------------------------*  30460001
.*       ALL SPECIFIED PARAMETERS ARE PROCESSED. CALL IEFENFFX       *  30470001
.*-------------------------------------------------------------------*  30480001
.*                                                              5@P4D   30490001
.STVERS  ST      1,ENFPTR              STORE ADDR OF PARM LIST          30500001
         LA      1,ENFPTR              LOAD ADDR OF ENFPTR              30510001
         L       15,16(0,0)            GET ADDRESS OF CVT        @L8C   30520001
         L       15,X'C0'(0,15)        GET ADDRESS OF ENFCT      @02C   30530001
.*                                                              2@02D   30540001
         USING   ENFCT,15              ADDRESSIBILITY TO ENFCT          30550001
         L       15,ENFCFMOD           ADDRESS OF ENFFX                 30560001
         DROP    15                    RELEASE ENFCT BASE REGISTER      30570001
         BALR    14,15                 INVOKE IEFENFFX                  30580001
.*------------------------------------------------------------------*   30590001
.*       RETURN TOKEN TO LISTENER - NORMAL OR EXECUTE FORM          *   30600001
.*------------------------------------------------------------------*   30610001
         AIF     ('&ACTION' NE 'LISTEN').NRSSTKN                        30620001
         AIF     ('&DTOKEN' EQ '').NRSSTKN                              30630001
         AIF     ('&DTOKEN'(1,1) EQ '(').RSTTOKR                        30640001
         AIF     ('&TYPE' EQ 'ASYNC').NRSSTKN                           30650001
         L       1,ENFPTR              RESTORE POINTER TO EPL           30660001
         MVC     &DTOKEN.(4),ENFPTOK   SAVE TOKEN FOR DELETE            30670001
         AGO     .NRSSTKN                                               30680001
.RSTTOKR ANOP                                                           30690001
&REGC    SETC    '&DTOKEN(1)'          GET REG NUMBER                   30700001
         L       1,ENFPTR              RESTORE POINTER TO EPL           30710001
         L       &REGC,ENFPTOK         RETURN TOKEN IN REG              30720001
.NRSSTKN ANOP                          END OF RESTORING DTOKEN          30730001
.*------------------------------------------------------------------*   30740001
.*       RETURN LISTENR COUNT - NORMAL(REG) OR EXECUTE FORM         *   30750001
.*------------------------------------------------------------------*   30760001
         AIF     ('&LISTENRS' EQ '').ENDLISE                      @L3A  30770001
         AIF     ('&TYPE' EQ 'ASYNC').ERRLSE1                     @L3A  30780001
         AGO     .SETLSE                                          @L3A  30790001
.ERRLSE1 MNOTE   04,'LISTENRS NOT ALLOWED WITH TYPE=ASYNC'        @L3A  30800001
         AGO     .ENDLISE                                         @L3A  30810001
.SETLSE  ANOP                                                     @L3A  30820001
         AIF     ('&ACTION' NE 'QUERY').ERRLSE2                   @D2A  30830001
         AGO     .SETLSE2                                         @D2A  30840001
.ERRLSE2 MNOTE   04,'LISTENRS NOT ALLOWED FOR &ACTION REQUEST -'  @D2A  30850001
         AGO     .ENDLISE                                         @D2A  30860001
.SETLSE2 ANOP                                                     @D2A  30870001
         AIF     ('&LISTENRS'(1,1) EQ '(').SETLSER                @L3A  30880001
         L       1,ENFPTR              RESTORE POINTER TO EPL     @L3A  30890001
         L       1,ENFPLSNM            GET LISTENRS VALUE         @L3A  30900001
         ST      1,&LISTENRS           SAVE LISTENER VALUE IN VAR @L3A  30910001
         AGO     .ENDLISE                                         @L3A  30920001
.SETLSER ANOP                                                     @L3A  30930001
&REGC    SETC    '&LISTENRS(1)'                                   @L3A  30940001
         L       1,ENFPTR              RESTORE POINTER TO EPL     @L3A  30950001
         L       &REGC,ENFPLSNM        SAVE LISTENER VALUE IN REG @L3A  30960001
.ENDLISE ANOP                                                     @L3A  30970001
         AGO     .END                  NORMAL TERMINATION         @L3A  30980001
.*------------------------------------------------------------------*   30990001
.*       ABNORMAL TERMINATION                                       *   31000001
.*------------------------------------------------------------------*   31010001
.ENFBUG  ANOP                                                           31020001
         MNOTE   12,'ERROR IN ENFREQ MACRO - MACRO TERMINATED'          31030001
.ERREXIT ANOP                                                           31040001
.*------------------------------------------------------------------*   31050001
.*       NORMAL TERMINATION                                         *   31060001
.*------------------------------------------------------------------*   31070001
.END     ANOP                                                           31080001
         AIF     (NOT &USING1).NORMEND NO USING DONE               @PAC 31090001
         DROP    1                     RELEASE BASE REGISTER            31100001
.NORMEND ANOP                          NORMAL TERMINATION (LIST FORM)   31110001
         MEND                                                           31120001
* */ ENFREQ : MACRO                                                     31130001
*          KEYS(ACTION,CODE,TYPE,QUAL,QMASK,EXIT,PARM,ESTBNME,EXITNME,  31140001
*         LISTENRS,DTOKEN,STOKEN,FREEPRM,MF,RELATED,DISABLE,            31150001
*         RETCODE,SRBEXIT,EOT,EOM,XSYS,PARMLEN,BITQUAL,                 31160001
*         BITCOMPARE,PLISTVER,MASEXIT,FLTRBLK,FLTRXIT,                  31170001
*         XCFFILTERGROUP);                                    /* @05C*/ 31180001
*             ANS('?'!!MACLABEL!!'ENFREQP '!!MACLIST!!MACKEYS!!';');    31190001
*   %END ENFREQ;                                                        31200001
