*                                                                       00001000
* %DCL IXCYSRVR_INCLUDED CHAR EXT;                                      00002000
* %DEACTIVATE IXCYSRVR_INCLUDED;                                        00003000
* %IF IXCYSRVR_INCLUDED = '' %THEN                                      00004000
* %DO;                                                                  00005000
*/* Macro made bi-lingual on 18014. CBGEN compile date 15295         */ 00006000
*% /*                                                                   00007000
         MACRO                                                          00008000
         IXCYSRVR &DSECT=YES,&LIST=YES,&TITLE=YES,                     *00009000
               &IXCYSRVR_TCRITERIA=COND,&IXCYSRVR_TFEATURES=COND,      *00010000
               &IXCYSRVR_TNAME=COND,&IXCYSRVR_TANSAREA=COND,           *00011000
               &IXCYSRVR_TSENDDESCRIPTOR=COND,                         *00012000
               &IXCYSRVR_TREQUESTINFO=COND,                            *00013000
               &IXCYSRVR_TRESPONSEINFO=COND,                           *00014000
               &IXCYSRVR_TTARGETDESCRIPTOR=COND,                       *00015000
               &IXCYSRVR_TRESPONSEDESCRIPTOR=COND,                     *00016000
               &IXCYSRVR_TMSGDESCRIPTOR=COND,&IXCYSRVR_TSXPL=COND,     *00017000
               &IXCYSRVR_TINITSERVER=COND,&IXCYSRVR_TGETWORKAREA=COND, *00018000
               &IXCYSRVR_TSIZEARRAY=COND,&IXCYSRVR_TREQUEST=COND,      *00019000
               &IXCYSRVR_TRESPCODE=COND,&IXCYSRVR_TDATADESCRIPTOR=COND,*00020000
               &IXCYSRVR_TWORKAREADESCRIPTOR=COND,&IXCYSRVR_TDDT=COND, *00021000
               &IXCYSRVR_TSRVRINFOAA=COND,&IXCYSRVR_TSRVRINFOHR=COND,  *00022000
               &IXCYSRVR_TSRVRINFODR=COND,&IXCYSRVR_TSRVRINFOWI=COND,  *00023000
               &IXCYSRVR_TSRVRINFOIR=COND,&IXCYSRVR_TSRVRINFODD=COND    00024000
         GBLC  &IXCYSRVR_INCLUDED                                       00025000
         GBLC  &ZCBPRINT                                                00026000
&IXCYSRVR_INCLUDED SETC 'YES'                                           00027000
         AIF   ('&LIST' EQ 'NONE').P0                                   00028000
         AIF   ('&TITLE' EQ 'NO').P5                                    00029000
 TITLE   'IXCYSRVR  - XCF Client/Server Mappings                     '  00030000
.P5      ANOP                                                           00031000
**/ IXCYSRVR_1:;                                                        00032000
*/* START OF SPECIFICATIONS ******************************************* 00033000
*                                                                       00034000
*01* PROPRIETARY STATEMENT =                                            00035000
*                                                                       00036000
*    Licensed Materials - Property of IBM                               00037000
*    5650-ZOS                                                           00038000
*    COPYRIGHT IBM CORP. 2011, 2013                                     00039000
*                                                                       00040000
*    US Government Users Restricted Rights - Use, duplication or        00041000
*    disclosure restricted by GSA ADP Schedule Contract with            00042000
*    IBM Corp.                                                          00043000
*                                                                       00044000
*01* STATUS = HBB7790                                                   00045000
*                                                                       00046000
*01* END OF PROPRIETARY STATEMENT                                       00047000
*                                                                       00048000
*01* EXTERNAL CLASSIFICATION: GUPI                                      00049000
*01* END OF EXTERNAL CLASSIFICATION:                                    00050000
*                                                                       00051000
*01* DESCRIPTIVE NAME:  XCF Client/Server Mappings                      00052000
*02*  ACRONYM:  none                                                    00053000
*                                                                       00054000
*01* MACRO NAME:  IXCYSRVR                                              00055000
*                                                                       00056000
*01* DSECT NAME:                                                        00057000
*    ixcysrvr_tFeatures                                                 00058000
*    ixcysrvr_tRequestInfo                                              00059000
*    ixcysrvr_tCriteria                                                 00060000
*    ixcysrvr_tResponseInfo                                             00061000
*    ixcysrvr_tName                                                     00062000
*    ixcysrvr_tAnsArea                                                  00063000
*    ixcysrvr_tTargetDescriptor                                         00064000
*    ixcysrvr_tResponseDescriptor                                       00065000
*    ixcysrvr_tMsgDescriptor                                            00066000
*    ixcysrvr_tInitServer                                               00067000
*    ixcysrvr_tRequest                                                  00068000
*    ixcysrvr_tGetWorkArea                                              00069000
*    ixcysrvr_tSizeArray                                                00070000
*    ixcysrvr_tResponse                                                 00071000
*    ixcysrvr_tRespCode                                                 00072000
*    ixcysrvr_tSendDescriptor                                           00073000
*    ixcysrvr_tDataDescriptor                                           00074000
*    ixcysrvr_tWorkAreaDescriptor                                       00075000
*    ixcysrvr_tDDT                                                      00076000
*    ixcysrvr_tSrvrInfoAA                                               00077000
*    ixcysrvr_tSrvrInfoHR                                               00078000
*    ixcysrvr_tSrvrInfoDR                                               00079000
*    ixcysrvr_tSrvrInfoWI                                               00080000
*    ixcysrvr_tSrvrInfoIR                                               00081000
*    ixcysrvr_tSrvrInfoDD                                               00082000
*                                                                       00083000
*01* COMPONENT:  Cross System Coupling Facility (SCXCF)                 00084000
*                                                                       00085000
*01* EYE-CATCHER:  NONE                                                 00086000
*                                                                       00087000
*01* STORAGE ATTRIBUTES:                                                00088000
*02*  SUBPOOL:  User-supplied                                           00089000
*02*  KEY:  Key User-supplied                                           00090000
*02*  RESIDENCY:  User-supplied                                         00091000
*                                                                       00092000
*01* SIZE:                                                              00093000
*            IXCYSRVR_TCRITERIA           -- X'0014' bytes              00094000
*            IXCYSRVR_TFEATURES           -- X'0008' bytes              00095000
*            IXCYSRVR_TNAME               -- X'0020' bytes              00096000
*            IXCYSRVR_TANSAREA            -- X'0020' bytes              00097000
*            IXCYSRVR_TSENDDESCRIPTOR     -- X'0114' bytes              00098000
*            IXCYSRVR_TREQUESTINFO        -- X'0040' bytes              00099000
*            IXCYSRVR_TRESPONSEINFO       -- X'0014' bytes              00100000
*            IXCYSRVR_TTARGETDESCRIPTOR   -- X'007C' bytes              00101000
*            IXCYSRVR_TRESPONSEDESCRIPTOR -- X'0130' bytes              00102000
*            IXCYSRVR_TMSGDESCRIPTOR      -- X'0110' bytes              00103000
*            IXCYSRVR_TSXPL               -- X'0100' bytes              00104000
*            IXCYSRVR_TINITSERVER         -- X'0040' bytes              00105000
*            IXCYSRVR_TGETWORKAREA        -- X'0010' bytes              00106000
*            IXCYSRVR_TSIZEARRAY          -- X'0004' bytes              00107000
*            IXCYSRVR_TREQUEST            -- X'0150' bytes              00108000
*            IXCYSRVR_TRESPCODE           -- X'0002' bytes              00109000
*            IXCYSRVR_TDATADESCRIPTOR     -- X'0010' bytes              00110000
*            IXCYSRVR_TWORKAREADESCRIPTOR -- X'0020' bytes              00111000
*            IXCYSRVR_TDDT                -- X'0010' bytes              00112000
*            IXCYSRVR_TSRVRINFOAA         -- X'0018' bytes              00113000
*            IXCYSRVR_TSRVRINFOHR         -- X'000C' bytes              00114000
*            IXCYSRVR_TSRVRINFODR         -- X'0050' bytes              00115000
*            IXCYSRVR_TSRVRINFOWI         -- X'0030' bytes              00116000
*            IXCYSRVR_TSRVRINFOIR         -- X'0230' bytes              00117000
*            IXCYSRVR_TSRVRINFODD         -- X'0020' bytes              00118000
*                                                                       00119000
*                                                                       00120000
*01* CREATED BY:                                                        00121000
*     User                                                              00122000
*                                                                       00123000
*01* POINTED TO BY:                                                     00124000
*                                                                       00125000
*01* SERIALIZATION:                                                     00126000
*     None required                                                     00127000
*                                                                       00128000
*01* FUNCTION:                                                          00129000
*02* IXCYSRVR maps the data related to the XCF Client/Server            00130000
*      interfaces (IXCSRVR, IXCSEND, IXCRECV, IXCREQ).                  00131000
*                                                                       00132000
*01* METHOD OF ACCESS:                                                  00133000
*02*  ASM: IXCYSRVR                                                     00134000
*02*  PL/AS:                                                            00135000
*                                                                       00136000
*01* DELETED BY:  User                                                  00137000
*                                                                       00138000
*01* FREQUENCY:                                                         00139000
*                                                                       00140000
*01* DEPENDENCIES:  None.                                               00141000
*                                                                       00142000
*01* DISTRIBUTION LIBRARY:  AMACLIB                                     00143000
*                                                                       00144000
*01* CHANGE ACTIVITY:                                                   00145000
*   $L0=XCFSRVR ,HBB7780,100215,PD00BJ: XCF Client/Server support       00146000
*   $L1=XCFSRVR ,HBB7780,100630,PD00C9: XCF Client/Server support       00147000
*   $P1=ME21339  HBB7780,110330 PD00C9: Assembler simplification        00148000
*                                       (TRSQ APAR OA36283)             00149000
*      =ME22781  HBB7790 110120 PD00C9: Ship for CBGEN metadata updates 00150000
*                                                                       00151000
** END OF SPECIFICATIONS *********************************************/ 00152000
*% /*                                                                   00153000
.P0      ANOP                                                           00154000
         AIF   ('&ZCBPRINT' EQ 'NO').P1                                 00155000
         AIF   ('&LIST' EQ 'YES').P2                                    00156000
.P1      ANOP                                                           00157000
         PUSH  PRINT                                                    00158000
         PRINT OFF                                                      00159000
.P2      ANOP                                                           00160000
         AIF   ('&IXCYSRVR_TCRITERIA' EQ 'NO').L0002                    00161000
         AIF   ('&DSECT' EQ 'YES').L0003                                00162000
         AIF   ('&IXCYSRVR_TCRITERIA' NE 'YES').L0002                   00163000
.L0003   ANOP                                                           00164000
*                                                                       00165000
* ********************************************************************  00166000
* *                                                                  *  00167000
* *  Server Selection (routing) Criteria                             *  00168000
* *                                                                  *  00169000
* *    Summary:                                                      *  00170000
* *      Maps routing criteria used by XCF to select a server that   *  00171000
* *      is suitable for processing a request.                       *  00172000
* *                                                                  *  00173000
* *    Usage:                                                        *  00174000
* *      - Code the CRITERIA keyword when invoking IXCSEND to send   *  00175000
* *        a client request to a server for processing.  The data    *  00176000
* *        area indicated by CRITERIA is mapped by                   *  00177000
* *        ixcysrvr_tCriteria.                                       *  00178000
* *      - When a request is presented to a server, the following    *  00179000
* *        fields in the Server Exit Parameter List will contain a   *  00180000
* *        copy of the routing criteria specified by the client      *  00181000
* *        (with the CRITERIA keyword) that sent the request:        *  00182000
* *          o SXPLRQ_MinLevel - minimum acceptable server level     *  00183000
* *          o SXPLRQ_MaxLevel - maximum acceptable server level     *  00184000
* *          o SXPLRQ_Features - required features                   *  00185000
* *                                                                  *  00186000
* *    Explanation:                                                  *  00187000
* *      When sending a request to a server for processing, a client *  00188000
* *      can specify criteria that describe the attributes of a      *  00189000
* *      suitable server.  If the target server is identified by     *  00190000
* *      name, XCF uses these criteria to determine which instances  *  00191000
* *      of the server are suitable for processing the request.  If  *  00192000
* *      the target server is identified by ServerID, the sender is  *  00193000
* *      responsible for determining suitability of the server.      *  00194000
* *      Regardless of how the target server is selected, the        *  00195000
* *      routing criteria is presented to the server exit routine    *  00196000
* *      that is called to process the request.  The server exit     *  00197000
* *      may or may not alter its processing of the request based    *  00198000
* *      on the routing criteria specified by the client.            *  00199000
* *                                                                  *  00200000
* *      The routing criteria specified by the client indicates the  *  00201000
* *      range of server levels that are suitable for the request,   *  00202000
* *      as well as the set of features that the server must         *  00203000
* *      support.  When a server instance is started, it indicates   *  00204000
* *      the range of server levels and features that it supports.   *  00205000
* *      A server is deemed to be suitable for the client request if *  00206000
* *      the server supports any one of the server levels specified  *  00207000
* *      by the client, as well as all of the specified features.    *  00208000
* *                                                                  *  00209000
* *      Note that the server can indicate the range of client       *  00210000
* *      levels that it supports.  So even if the server appears to  *  00211000
* *      be suitable based on the client criteria, the server may    *  00212000
* *      deem the client to be unsuitable if the client is not       *  00213000
* *      running with an appropriate client level.                   *  00214000
* *                                                                  *  00215000
* ********************************************************************  00216000
*                                                                       00217000
*                                                                       00218000
         AIF   ('&DSECT' EQ 'YES').L0004                                00219000
IXCYSRVR_TCRITERIA DS 0F Server selection criteria                      00220000
         AGO   .L0005                                                   00221000
.L0004   ANOP                                                           00222000
IXCYSRVR_TCRITERIA DSECT   Server selection criteria                    00223000
.L0005   ANOP                                                           00224000
SC_VERSION DS  X         Version of data within this mapping.          *00225000
                         Initially zero. May be nonzero in the future  *00226000
                         to indicate presence of new or changed        *00227000
                         information.                                   00228000
SC_RSVD1 DS    CL3       reserved, must be zero                         00229000
SC_MINSERVERLEVEL DS F   Min required server level                      00230000
SC_MAXSERVERLEVEL DS F   Max required server level                      00231000
SC_FEATURES DS CL8       Features required of the target server.       *00232000
                         Mapped by ixcysrvr_tFeatures                   00233000
IXCYSRVR_KCRITERIA_VERSION0 EQU 0                                       00234000
IXCYSRVR_KSC_VERSION0 EQU 0                                             00235000
IXCYSRVR_TCRITERIA_LEN EQU *-IXCYSRVR_TCRITERIA                         00236000
.L0002   ANOP                                                           00237000
         AIF   ('&IXCYSRVR_TFEATURES' EQ 'NO').L0006                    00238000
         AIF   ('&DSECT' EQ 'YES').L0007                                00239000
         AIF   ('&IXCYSRVR_TFEATURES' NE 'YES').L0006                   00240000
.L0007   ANOP                                                           00241000
*                                                                       00242000
* ********************************************************************  00243000
* *                                                                  *  00244000
* *  Server Features                                                 *  00245000
* *                                                                  *  00246000
* *    Summary:                                                      *  00247000
* *      Indicates the set of "features" that are either supported   *  00248000
* *      by a server, or must be supported by a server in order to   *  00249000
* *      process a request.                                          *  00250000
* *                                                                  *  00251000
* *    Usage:                                                        *  00252000
* *      - Code the FEATURES keyword when invoking IXCSRVR to start  *  00253000
* *        a server instance.  The FEATURES indicate the set of      *  00254000
* *        features supported by the server.                         *  00255000
* *      - Code the CRITERIA keyword when invoking IXCSEND to send   *  00256000
* *        a client request to a server for processing.  Within      *  00257000
* *        the CRITERIA, which is mapped by ixcysrvr_tCriteria,      *  00258000
* *        the field sc_Features indicates the features that the     *  00259000
* *        target server must support in order to process the        *  00260000
* *        request.                                                  *  00261000
* *      - When a request is presented to a server, the field        *  00262000
* *        SXPLRQ_Features in the Server Exit Parameter List         *  00263000
* *        indicates the set of features specified by the client     *  00264000
* *        (with the CRITERIA keyword) that sent the request.        *  00265000
* *                                                                  *  00266000
* *    Explanation:                                                  *  00267000
* *      Different levels of client code and server code could be    *  00268000
* *      running in the sysplex.  A server might need to support     *  00269000
* *      some particular "feature" in order to process a client      *  00270000
* *      request.  A "feature" is whatever the client and server     *  00271000
* *      deem it to be, but typically one thinks of a feature as a   *  00272000
* *      function or service, or perhaps the ability to support a    *  00273000
* *      particular protocol, or the ability to interpret new        *  00274000
* *      parameters or produce new results (as compared to a server  *  00275000
* *      that does not have the feature).                            *  00276000
* *                                                                  *  00277000
* *      When a server is defined, it can specify a "feature string" *  00278000
* *      to indicate the features it supports.  When a client sends  *  00279000
* *      a request, it can similarly provide a feature string to     *  00280000
* *      indicate what features are required to process the request. *  00281000
* *                                                                  *  00282000
* *                                                                  *  00283000
* *      A "feature string" consists of a one byte "feature level"   *  00284000
* *      and 56 "feature flags".  XCF assumes that a server          *  00285000
* *      specifies a feature string per the following rules:         *  00286000
* *                                                                  *  00287000
* *        1. At a given feature level, a server sets the i'th       *  00288000
* *           feature flag ON ('1'B) to indicate that it supports    *  00289000
* *           the feature.  It is up to the server to define the     *  00290000
* *           interpretation of the feature flags for its clients.   *  00291000
* *        2. If a server supports feature level N > 0, then it      *  00292000
* *           supports all the features supported by level M < N.    *  00293000
* *        3. Feature level xFF (255) is reserved for future XCF     *  00294000
* *           use.                                                   *  00295000
* *                                                                  *  00296000
* *        Note: With these rules, a server can support up to 14280  *  00297000
* *        features.  However, rule 2 in effect implies that it is   *  00298000
* *        not possible to "retract" a feature once it is offered.   *  00299000
* *                                                                  *  00300000
* *        It may be appropriate to reset the features to all zero   *  00301000
* *        when changing to a new server level.                      *  00302000
* *                                                                  *  00303000
* *      If a client specifies a nonzero feature string when sending *  00304000
* *      a request, XCF assumes the feature string represents the    *  00305000
* *      minimum level of functionality that a server must support   *  00306000
* *      in order to process the request.  Given a set of suitable   *  00307000
* *      candidate servers (based on range of server levels and      *  00308000
* *      client levels), XCF chooses a server that supports all of   *  00309000
* *      the features requested by the client.                       *  00310000
* *                                                                  *  00311000
* ********************************************************************  00312000
*                                                                       00313000
*                                                                       00314000
         AIF   ('&DSECT' EQ 'YES').L0008                                00315000
IXCYSRVR_TFEATURES DS 0X                                                00316000
         AGO   .L0009                                                   00317000
.L0008   ANOP                                                           00318000
IXCYSRVR_TFEATURES DSECT                                                00319000
.L0009   ANOP                                                           00320000
SF_LEVEL DS    X         Feature level                                  00321000
SF_FEATURES DS BL7       Feature flags                                  00322000
IXCYSRVR_KMAXFEATURESLEVEL EQU 254 maximum valid value for sf_level     00323000
IXCYSRVR_TFEATURES_LEN EQU *-IXCYSRVR_TFEATURES                         00324000
.L0006   ANOP                                                           00325000
         AIF   ('&IXCYSRVR_TNAME' EQ 'NO').L000A                        00326000
         AIF   ('&DSECT' EQ 'YES').L000B                                00327000
         AIF   ('&IXCYSRVR_TNAME' NE 'YES').L000A                       00328000
.L000B   ANOP                                                           00329000
*                                                                       00330000
* ********************************************************************  00331000
* *                                                                  *  00332000
* *  Client/Server Names                                             *  00333000
* *                                                                  *  00334000
* *    Summary                                                       *  00335000
* *      Client/Server names have a structured format.  The first    *  00336000
* *      section must be non-blank.  It is intended to be unique to  *  00337000
* *      the application, subsystem, or component.  For example,     *  00338000
* *      section one of a server name used by IBM software would     *  00339000
* *      begin with the component prefix or the characters "SYS".    *  00340000
* *                                                                  *  00341000
* *    Usage                                                         *  00342000
* *      - When invoking IXCSEND to send a request to a server, code *  00343000
* *        SENDER to indicate the name of the client.  Code SERVER   *  00344000
* *        to indicate the name of the target server.                *  00345000
* *      - When invoking IXCSEND to send a response to a client      *  00346000
* *        request, code SENDER to indicate the name of the server.  *  00347000
* *      - When a client request is presented to a server for        *  00348000
* *        processing, the md_SenderName field within the            *  00349000
* *        SXPLRQ_MsgDesc field of the Server Exit Parameter List    *  00350000
* *        contains the name of the client (from IXCSEND SENDER).    *  00351000
* *      - After successfully invoking IXCRECV to receive the        *  00352000
* *        response sent by a server, the ms_SenderName field within *  00353000
* *        the rd_MsgDesc field of the response descriptor within    *  00354000
* *        the answer area (ANSAREA) contains the name of the        *  00355000
* *        server (from IXCSEND SENDER).                             *  00356000
* *                                                                  *  00357000
* *    Explanation                                                   *  00358000
* *      Client/Server names have a structured format.  The first    *  00359000
* *      section must be specified and is intended to provide        *  00360000
* *      uniqueness so that different client/server applications     *  00361000
* *      are segregated from one another.  Most software running     *  00362000
* *      on this platform has a 3 or 4 character "prefix" that       *  00363000
* *      is unique to that particular application, subsystem, or     *  00364000
* *      component.  Use of that prefix in the sn_Section1 of the    *  00365000
* *      name will help avoid confusion and interference between     *  00366000
* *      different applications.  It will also help installations    *  00367000
* *      and service personnel identify the relevant owner of the    *  00368000
* *      software.                                                   *  00369000
* *                                                                  *  00370000
* *      Since there is no "registration" required to exploit the    *  00371000
* *      XCF Client/Server send service, the name specified by the   *  00372000
* *      SENDER keyword when invoking IXCSEND to send a message is   *  00373000
* *      the chief means of associating the message to a particular  *  00374000
* *      exploiter.  As suggested above, one would likely specify    *  00375000
* *      the client name when sending a request to a server, and     *  00376000
* *      specify the server name when sending a response.  However,  *  00377000
* *      subject to the needs of the expoiter, there is no specific  *  00378000
* *      requirement that this convention to be followed.  XCF       *  00379000
* *      simply transports the sender name along with the message    *  00380000
* *      and presents a copy of the specified name to its target.    *  00381000
* *      The sender name may also appear in various externals        *  00382000
* *      such as operator display commands.                          *  00383000
* *                                                                  *  00384000
* *      All sections of the name must be left justified, and        *  00385000
* *      appended on the right with EBCDIC blanks as needed.  Any    *  00386000
* *      section but the first can be completely blank.  The         *  00387000
* *      structure of the name is intended to make it easy to        *  00388000
* *      include things like a job name without having to replace    *  00389000
* *      trailing blanks with some substitute character.  If there   *  00390000
* *      is no compelling need to structure the name into sections,  *  00391000
* *      one can construct a name from the permitted characters as a *  00392000
* *      single left justified 32 byte string (with no imbedded      *  00393000
* *      blanks) and appended on the right with blanks.  However,    *  00394000
* *      note that when XCF externalizes the name in human readable  *  00395000
* *      form (such as an operator display), it will generally break *  00396000
* *      the name down into the four sections.                       *  00397000
* *                                                                  *  00398000
* *      Names can consist of the characters A-Z, a-z, 0-9, #,$,@,   *  00399000
* *      and _ (underscore).  Names are case sensitive.              *  00400000
* *                                                                  *  00401000
* *                                                                  *  00402000
* ********************************************************************  00403000
*                                                                       00404000
*                                                                       00405000
         AIF   ('&DSECT' EQ 'YES').L000C                                00406000
IXCYSRVR_TNAME DS 0X                                                    00407000
         AGO   .L000D                                                   00408000
.L000C   ANOP                                                           00409000
IXCYSRVR_TNAME DSECT                                                    00410000
.L000D   ANOP                                                           00411000
SN_SECTION1 DS CL8       Application specific name                      00412000
SN_SECTION2 DS CL8                                                      00413000
SN_SECTION3 DS CL8                                                      00414000
SN_SECTION4 DS CL8                                                      00415000
IXCYSRVR_TNAME_LEN EQU *-IXCYSRVR_TNAME                                 00416000
.L000A   ANOP                                                           00417000
         AIF   ('&IXCYSRVR_TANSAREA' EQ 'NO').L000E                     00418000
         AIF   ('&DSECT' EQ 'YES').L000F                                00419000
         AIF   ('&IXCYSRVR_TANSAREA' NE 'YES').L000E                    00420000
.L000F   ANOP                                                           00421000
*                                                                       00422000
* ********************************************************************  00423000
* *                                                                  *  00424000
* *  IXCRECV RECEIVE=RESPONSES                                       *  00425000
* *                                                                  *  00426000
* *  Summary                                                         *  00427000
* *    After invoking IXCSEND to send a request to a server for      *  00428000
* *    processing, the sender or its agent (ie, the "client")        *  00429000
* *    invokes IXCRECV RECEIVE=RESPONSES to receive the results      *  00430000
* *    of that request.                                              *  00431000
* *                                                                  *  00432000
* *    Assuming the request and its results are still available,     *  00433000
* *    the IXCRECV service will store the results into two different *  00434000
* *    output areas.  The answer area (ANSAREA) contains metadata    *  00435000
* *    to describe the results.  The data area (DATAREA or DATADESC) *  00436000
* *    contains the text of the message that was received from       *  00437000
* *    the responding server(s).                                     *  00438000
* *                                                                  *  00439000
* *  Usage                                                           *  00440000
* *    - Invoke IXCRECV RECEIVE=RESPONSES with NODATA to obtain      *  00441000
* *      the metadata that describes the results of an IXCSEND       *  00442000
* *      request that specified EXPECTREPLY=NO (for which the        *  00443000
* *      servers do not send any responses).                         *  00444000
* *    - Invoke IXCRECV RECEIVE=RESPONSES with NODATA to obtain      *  00445000
* *      the metadata that describes the results.  One would do this *  00446000
* *      to get information about the responses.  For example, one   *  00447000
* *      might use this information to determine the size of the     *  00448000
* *      data area(s) needed to receive the response messages, after *  00449000
* *      which one might then invoke IXCRECV again to get those      *  00450000
* *      responses.                                                  *  00451000
* *    - Invoke IXCRECV RECEIVE=RESPONSES with DATAAREA to store     *  00452000
* *      the text of the server response(s) in one contiguous        *  00453000
* *      storage area.  Note that metadata describing the results    *  00454000
* *      and the location of the text of the response message(s) are *  00455000
* *      returned in the answer area.  The indicated data area would *  00456000
* *      need to be large enough to hold all of the responses from   *  00457000
* *      all of the servers whose replies were received.             *  00458000
* *    - Invoke IXCRECV RECEIVE=RESPONSES with DATADESC to receive   *  00459000
* *      the text of the server responses into multiple              *  00460000
* *      discontiguous storage area.  Each such storage area will    *  00461000
* *      contain the text of one response from one particular        *  00462000
* *      server.  Note that metadata describing the results and the  *  00463000
* *      location of the text of each response message is returned   *  00464000
* *      in the answer area.                                         *  00465000
* *                                                                  *  00466000
* *  Explanation                                                     *  00467000
* *    The answer area is the storage into which XCF stores metadata *  00468000
* *    that describes the results of an IXCSEND request that was     *  00469000
* *    accepted by XCF (and whose HOLDTIME has not yet expired).  At *  00470000
* *    offset zero in the answer area is the answer area header      *  00471000
* *    (mapped by ixcysrvr_tAnsArea) that describes the content of   *  00472000
* *    the answer area.  Using this information, one can locate the  *  00473000
* *    "send descriptor" (mapped by ixcysrvr_tSendDescriptor) that   *  00474000
* *    provides information about the IXCSEND request whose results  *  00475000
* *    are being received, the "target descriptor" (mapped by        *  00476000
* *    ixcysrvr_tTargetDescriptor) for each target that provides     *  00477000
* *    information about where the request was sent, and if          *  00478000
* *    applicable, a "response descriptor" (mapped by                *  00479000
* *    ixcysrvr_tResponseDescriptor) for each of the possible        *  00480000
* *    responses that provides information about what if any         *  00481000
* *    response was received from the target server.                 *  00482000
* *                                                                  *  00483000
* *    The data area(s) will contain the text of the response        *  00484000
* *    messages sent by the target servers in reply to the request.  *  00485000
* *    The DATAAREA keyword names a single contiguous data area that *  00486000
* *    must be large enough to contain all the response messages.    *  00487000
* *    If the DATADESC keyword is used, the receiver is providing    *  00488000
* *    multiple storage areas for XCF to store the response          *  00489000
* *    messages.  Each such storage area must be large enough to     *  00490000
* *    hold the relevant response message.                           *  00491000
* *                                                                  *  00492000
* *    The data area(s) are only applicable to requests for which    *  00493000
* *    the servers are expected to reply (IXCSEND EXPECTREPLY=YES).  *  00494000
* *    In such cases, the answer area will contain a response        *  00495000
* *    descriptor for each target.  Within the response descriptor,  *  00496000
* *    the rd_RespArrived flag indicates whether there is a response *  00497000
* *    message available.  If so, the rd_MsgDesc field within that   *  00498000
* *    response descriptor provides further information about the    *  00499000
* *    response message.  In particular, the message descriptor      *  00500000
* *    contains a "data descriptor" that indicates where XCF stored  *  00501000
* *    the text of the corresponding response message.               *  00502000
* *                                                                  *  00503000
* *                                                                  *  00504000
* ********************************************************************  00505000
* ********************************************************************  00506000
* *                                                                  *  00507000
* *  Answer Area (IXCRECV ANSAREA)                                   *  00508000
* *                                                                  *  00509000
* *  Summary                                                         *  00510000
* *    ixcysrvr_tAnsArea maps the data returned by XCF in the        *  00511000
* *    answer area provided by the invoker of the IXCRECV service.   *  00512000
* *    The header starts ot affset zero in the storage area          *  00513000
* *    named by the ANSAREA keyword of the IXCRECV macro.  Use this  *  00514000
* *    information to locate the send, target, and response          *  00515000
* *    descriptors that provide the information of interest.         *  00516000
* *                                                                  *  00517000
* *  Usage                                                           *  00518000
* *    - Invoke IXCRECV RECEIVE=RESPONSES with an ANSAREA that is    *  00519000
* *      large enough to hold the answer area header but too small   *  00520000
* *      for the send, target, and response descriptors.  The        *  00521000
* *      receive service will store this header in the answer area   *  00522000
* *      and return with a return and reason code indicating that    *  00523000
* *      the answer area is too small.  The aa_AnsAreaSize field     *  00524000
* *      will indicate how much storage is needed to contain the     *  00525000
* *      entire answer area (with all of the relevant descriptors).  *  00526000
* *                                                                  *  00527000
* *    - Invoke IXCRECV RECEIVE=RESPONSES with an ANSAREA that is    *  00528000
* *      large enough to hold the answer area header and all of the  *  00529000
* *      send, target, and response descriptors.  Assume there are   *  00530000
* *      responses to be received, but the data area(s) provided (if *  00531000
* *      any) are too small to receive all of the response messages. *  00532000
* *      The receive service will store this header in the answer    *  00533000
* *      area and return with a return and reason code indicating    *  00534000
* *      that the data area(s) are not adequate.  The aa_AnsDataSize *  00535000
* *      field will indicate how much storage is needed to contain   *  00536000
* *      all of the response messages.  If there is more than one    *  00537000
* *      response message, the response descriptor has data to       *  00538000
* *      indicate the size of its particular response message.       *  00539000
* *                                                                  *  00540000
* *  Explanation                                                     *  00541000
* *    The answer area provides the information needed to locate     *  00542000
* *    the various descriptors that provide information about the    *  00543000
* *    request and its results.                                      *  00544000
* *                                                                  *  00545000
* *    If the storage area for the answer area is too small for the  *  00546000
* *    answer area header, the IXCRECV request is rejected.          *  00547000
* *                                                                  *  00548000
* *    If the storage area for the answer area is large enough for   *  00549000
* *    the answer area header, but too small for all the available   *  00550000
* *    metadata, the IXCRECV request completes with a warning return *  00551000
* *    code.  Within the answer area header, aa_AnsAreaSize          *  00552000
* *    indicates how much storage is needed to hold all the          *  00553000
* *    metadata.  The user is expected to obtain enough storage for  *  00554000
* *    the entire answer area and then reinvoke IXCRECV to get all   *  00555000
* *    the metadata.                                                 *  00556000
* *                                                                  *  00557000
* *                                                                  *  00558000
* ********************************************************************  00559000
*                                                                       00560000
*                                                                       00561000
         AIF   ('&DSECT' EQ 'YES').L0010                                00562000
IXCYSRVR_TANSAREA DS 0D  Header for AnsArea returned by IXCRECV         00563000
         AGO   .L0011                                                   00564000
.L0010   ANOP                                                           00565000
IXCYSRVR_TANSAREA DSECT   Header for AnsArea returned by IXCRECV        00566000
.L0011   ANOP                                                           00567000
AA_VERSION DS  X         Version of data within this mapping.          *00568000
                         Initially zero. May be nonzero in the future  *00569000
                         to indicate presence of new or changed        *00570000
                         information.                                   00571000
AA_STATUS DS   0B        Flags describing status of the message         00572000
AA_COMPLETED EQU X'80'   Indicates whether message is considered to be *00573000
                         complete. Note that this flag is not mutually *00574000
                         exclusive with the Send/RespPending flags     *00575000
                         since completion may have been forced or the  *00576000
                         request may have timed out.                    00577000
AA_SUCCESSFUL EQU X'40'  Indicates whether the message completed       *00578000
                         successfully: message sent to all targets,    *00579000
                         and if a reply/acknowledgement is expected,   *00580000
                         all targets responded. Does not imply         *00581000
                         anything about what the response says. The    *00582000
                         response could indicate that a failure        *00583000
                         occurred.                                      00584000
AA_SENDPENDING EQU X'20' The message has not been sent to one or more  *00585000
                         targets                                        00586000
AA_RESPPENDING EQU X'10' Expected response(s)/ acknowledgement(s) not  *00587000
                         yet received.                                  00588000
AA_TIMEDOUT EQU X'08'    ON if the message did not complete within the *00589000
                         time-out period (RESPTIME timeout).            00590000
AA_CANCELLED EQU X'04'   ON if the request was cancelled before normal *00591000
                         completion occurred (IXCMSGC COMPLETION)       00592000
         ORG   AA_STATUS+1                                              00593000
         DS    CL2       Reserved                                       00594000
AA_ANSAREASIZE DS F      Number of bytes needed (or set) in AnsArea     00595000
AA_DATAAREASIZE DS F     Number of bytes needed (or set) in            *00596000
                         DataArea(s)                                    00597000
AA_OFFSETSENDDESC DS F   Relative to the start of the AnsArea, the     *00598000
                         offset at which send descriptor for the       *00599000
                         outgoing message can be found. Mapped by      *00600000
                         ixcysrvr_tSendDescriptor.                      00601000
AA_#DESC DS    F         Number of target descriptor entries or        *00602000
                         target/response descriptor entries returned   *00603000
                         in AnsArea.                                    00604000
AA_LENDESC DS  F         Size in bytes of one target descriptor entry  *00605000
                         or one target/response descriptor entry.      *00606000
                         Given the address of any one such descriptor, *00607000
                         add this value to the address to locate the   *00608000
                         next descriptor.                               00609000
AA_OFFSETTARGDESC DS F   Relative to the start of the AnsArea, the     *00610000
                         offset at which the first target descriptor   *00611000
                         can be found. Valid for use if nonzero.        00612000
AA_OFFSETRESPDESC DS F   Relative to the start of the AnsArea, the     *00613000
                         offset at which the first response descriptor *00614000
                         can be found. Valid for use if nonzero.        00615000
IXCYSRVR_KAA_VERSION0 EQU 0                                             00616000
IXCYSRVR_TANSAREA_LEN EQU *-IXCYSRVR_TANSAREA                           00617000
.L000E   ANOP                                                           00618000
         AIF   ('&IXCYSRVR_TSENDDESCRIPTOR' EQ 'NO').L0012              00619000
         AIF   ('&DSECT' EQ 'YES').L0013                                00620000
         AIF   ('&IXCYSRVR_TSENDDESCRIPTOR' NE 'YES').L0012             00621000
.L0013   ANOP                                                           00622000
*                                                                       00623000
* ********************************************************************  00624000
* *                                                                  *  00625000
* *  Send Descriptor                                                 *  00626000
* *                                                                  *  00627000
* *  Summary                                                         *  00628000
* *    ixcysrvr_tSendDescriptor maps metadata in the answer area     *  00629000
* *    returned by IXCRECV.  This record provides information about  *  00630000
* *    the message that was sent via an IXCSEND request.             *  00631000
* *                                                                  *  00632000
* *  Usage                                                           *  00633000
* *    Invoke IXCRECV RECEIVE=RESPONSES with an ANSAREA that is      *  00634000
* *    large enough to hold all the available metadata.  Within the  *  00635000
* *    answer area header, aa_OffsetSendDesc indicates the offset    *  00636000
* *    within the answer area where the send descriptor was placed.  *  00637000
* *                                                                  *  00638000
* *  Explanation                                                     *  00639000
* *    The send descriptor provides information about the original   *  00640000
* *    IXCSEND request whose results are being obtained with the     *  00641000
* *    IXCRECV macro.  There is one send descriptor record.  It      *  00642000
* *    describes the message that was sent.  Much of the information *  00643000
* *    is a copy of the parameters specified on the IXCSEND macro.   *  00644000
* *    Status information is also provided.                          *  00645000
* *                                                                  *  00646000
* ********************************************************************  00647000
*                                                                       00648000
*                                                                       00649000
         AIF   ('&DSECT' EQ 'YES').L0014                                00650000
IXCYSRVR_TSENDDESCRIPTOR DS 0D Metadata describing a message send       00651000
         AGO   .L0015                                                   00652000
.L0014   ANOP                                                           00653000
IXCYSRVR_TSENDDESCRIPTOR DSECT   Metadata describing a message send     00654000
.L0015   ANOP                                                           00655000
SD_VERSION DS  X         Version of data within this mapping.          *00656000
                         Initially zero. May be nonzero in the future  *00657000
                         to indicate presence of new or changed        *00658000
                         information.                                   00659000
         DS    CL3       Reserved                                       00660000
SD_ATTRIBUTES DS 0BL4    Message attributes                             00661000
SD_FLAGS0 DS   0B        Flags describing message characteristics       00662000
SD_EXPECTREPLY EQU X'80' ON if the originator expects the target(s) to *00663000
                         send a response message.                       00664000
         ORG   SD_FLAGS0+1                                              00665000
SD_FLAGS1 DS   0B        Flags describing status of the message         00666000
SD_COMPLETED EQU X'80'   Indicates whether message is considered to be *00667000
                         complete. Note that this flag is not mutually *00668000
                         exclusive with the Send/RespPending flags     *00669000
                         since completion may have been forced or the  *00670000
                         request may have timed out.                    00671000
SD_SUCCESSFUL EQU X'40'  Indicates whether the message completed       *00672000
                         successfully: message sent to all targets,    *00673000
                         and if a reply/acknowledgement is expected,   *00674000
                         all targets responded. Does not imply         *00675000
                         anything about what the response says. The    *00676000
                         response could indicate that a failure        *00677000
                         occurred.                                      00678000
SD_SENDPENDING EQU X'20' The message has not been sent to one or more  *00679000
                         targets                                        00680000
SD_RESPPENDING EQU X'10' Expected response(s)/ acknowledgement(s) not  *00681000
                         yet received.                                  00682000
SD_TIMEDOUT EQU X'08'    ON if the message did not complete within the *00683000
                         time-out period (RESPTIME timeout).            00684000
SD_CANCELLED EQU X'04'   ON if the request was cancelled before normal *00685000
                         completion occurred (IXCMSGC COMPLETION)       00686000
         ORG   SD_FLAGS1+1                                              00687000
SD_MSGTYPE DS  X         Code to indicate type of message: Server      *00688000
                         Request Response message See constants        *00689000
                         ixcysrvr_kMsgType...                           00690000
SD_FLAGS3 DS   B         Flags byte 3 reserved                          00691000
SD_SENDTIME DS F         SENDTIME timeout value                         00692000
SD_RESPTIME DS F         RESPTIME timeout value, valid for use if      *00693000
                         sd_ExpectReply is ON.                          00694000
SD_HOLDTIME DS F         HOLDTIME timeout value                         00695000
         DS    CL4       reserved                                       00696000
SD_ETODWHENREQUESTED DS CL16 Extended TOD when XCF accepted the        *00697000
                         original send request for the message.         00698000
SD_ETODWHENCOMPLETED DS CL16 Extended TOD when XCF deemed the message  *00699000
                         to have completed. Valid for use if           *00700000
                         sd_Completed is ON. Zero if unknown            00701000
SD_#TARGETS DS F         Number of targets for message                  00702000
SD_#REPLIESPENDING DS F  Number of targets from which replies are      *00703000
                         still expected. Zero implies that all results *00704000
                         have been determined.                          00705000
SD_#REPLIESAVAILABLE DS F Number of replies that contain response data *00706000
                         currently available for gathering.             00707000
SD_MSGID DS    CL16      MSGID provided by sender when request was     *00708000
                         sent via IXCSEND.                              00709000
SD_MSGCNTL DS  CL64      Message control data (MSGCNTL) provided when  *00710000
                         request was sent via IXCSEND                   00711000
SD_SENDER DS   CL32      Name of sender (SENDER) provided when request *00712000
                         was sent via IXCSEND. Mapped by               *00713000
                         ixcysrvr_tName                                 00714000
SD_SENDERID DS CL16      Sender ID (SENDERID) provided when request    *00715000
                         was sent via IXCSEND, zero if none             00716000
SD_USERDATA DS CL16      Copy of user data (USERDATA) provided when    *00717000
                         request was sent via IXCSEND                   00718000
SD_MSGINFO DS  0CL64     Additional information about the message.     *00719000
                         Content depends on type of message, as        *00720000
                         indicated by sd_MsgType.                       00721000
         ORG   SD_MSGINFO                                               00722000
SD_REQUESTINFO DS CL64   Server Request. Mapped by                     *00723000
                         ixcysrvr_tRequestInfo                          00724000
         ORG   SD_MSGINFO                                               00725000
SD_RESPONSEINFO DS CL20  Response message. Mapped by                   *00726000
                         ixcysrvr_tResponseInfo                         00727000
         ORG   SD_MSGINFO+64                                            00728000
IXCYSRVR_KSD_VERSION0 EQU 0                                             00729000
IXCYSRVR_TSENDDESCRIPTOR_LEN EQU *-IXCYSRVR_TSENDDESCRIPTOR             00730000
.L0012   ANOP                                                           00731000
         AIF   ('&IXCYSRVR_TREQUESTINFO' EQ 'NO').L0016                 00732000
         AIF   ('&DSECT' EQ 'YES').L0017                                00733000
         AIF   ('&IXCYSRVR_TREQUESTINFO' NE 'YES').L0016                00734000
.L0017   ANOP                                                           00735000
*                                                                       00736000
* ********************************************************************  00737000
* *                                                                  *  00738000
* *  Request Info                                                    *  00739000
* *                                                                  *  00740000
* *    Summary:                                                      *  00741000
* *      Maps metadata that describes a request that was sent to a   *  00742000
* *      server by a client.                                         *  00743000
* *                                                                  *  00744000
* *    Usage:                                                        *  00745000
* *      - Code IXCRECV RECEIVE=RESPONSES to obtain the results of   *  00746000
* *        a client request that was sent to a server.  The answer   *  00747000
* *        area (ANSAREA) returned by the service routine will       *  00748000
* *        contain a "send descriptor" (mapped by                    *  00749000
* *        ixcysrvr_tSendDescriptor) that provides metadata that     *  00750000
* *        describes the client request.  The field sd_RequestInfo   *  00751000
* *        within the send descriptor contains the "request info"    *  00752000
* *        for the original client request.                          *  00753000
* *                                                                  *  00754000
* *    Explanation:                                                  *  00755000
* *      The request info includes the function, description,        *  00756000
* *      and routing criteria specified by the client that sent the  *  00757000
* *      request (IXCSEND SENDTO=SERVER).                            *  00758000
* *                                                                  *  00759000
* *                                                                  *  00760000
* ********************************************************************  00761000
*                                                                       00762000
*                                                                       00763000
         AIF   ('&DSECT' EQ 'YES').L0018                                00764000
IXCYSRVR_TREQUESTINFO DS 0F                                             00765000
         AGO   .L0019                                                   00766000
.L0018   ANOP                                                           00767000
IXCYSRVR_TREQUESTINFO DSECT                                             00768000
.L0019   ANOP                                                           00769000
RQI_VERSION DS X         Version of data within this mapping.          *00770000
                         Initially zero. May be nonzero in the future  *00771000
                         to indicate presence of new or changed        *00772000
                         information.                                   00773000
         DS    CL3       Reserved                                       00774000
RQI_FUNCTION DS CL8      Copy of IXCSEND FUNCTION                       00775000
RQI_DESCRIPTION DS CL32  Copy of IXCSEND DESCRIPTION                    00776000
RQI_CLIENTLEVEL DS F     Copy of IXCSEND CLIENTLEVEL                    00777000
RQI_MINSERVERLEVEL DS F  Minimum server level requested by client.     *00778000
                         From IXCSEND CRITERIA, copy of                *00779000
                         sc_MinServerLevel.                             00780000
RQI_MAXSERVERLEVEL DS F  Maximum server level requested by client.     *00781000
                         From IXCSEND CRITERIA, copy of                *00782000
                         sc_MaxServerLevel.                             00783000
RQI_FEATURES DS CL8      Features requested by client. From IXCSEND    *00784000
                         CRITERIA, copy of sc_Features. Mapped by      *00785000
                         ixcysrvr_tFeatures                             00786000
IXCYSRVR_KRQI_VERSION0 EQU 0                                            00787000
IXCYSRVR_TREQUESTINFO_LEN EQU *-IXCYSRVR_TREQUESTINFO                   00788000
.L0016   ANOP                                                           00789000
         AIF   ('&IXCYSRVR_TRESPONSEINFO' EQ 'NO').L001A                00790000
         AIF   ('&DSECT' EQ 'YES').L001B                                00791000
         AIF   ('&IXCYSRVR_TRESPONSEINFO' NE 'YES').L001A               00792000
.L001B   ANOP                                                           00793000
*                                                                       00794000
* ********************************************************************  00795000
* *                                                                  *  00796000
* *  Response Info                                                   *  00797000
* *                                                                  *  00798000
* *    Summary:                                                      *  00799000
* *      Maps metadata that describes a response that was sent to a  *  00800000
* *      client by a server.                                         *  00801000
* *                                                                  *  00802000
* *    Usage:                                                        *  00803000
* *      - Code IXCRECV RECEIVE=RESPONSES to obtain the results of   *  00804000
* *        a server response that was sent to a client.  The answer  *  00805000
* *        area (ANSAREA) returned by the service routine will       *  00806000
* *        contain a "send descriptor" (mapped by                    *  00807000
* *        ixcysrvr_tSendDescriptor) that provides metadata that     *  00808000
* *        describes the server response.  The field sd_ResponseInfo *  00809000
* *        within the send descriptor contains the "response info"   *  00810000
* *        for the server response.                                  *  00811000
* *                                                                  *  00812000
* *    Explanation:                                                  *  00813000
* *      The response info includes the return and reason code from  *  00814000
* *      the server, the level of data supplied by the server and    *  00815000
* *      the maximum level of data that could have been supplied.    *  00816000
* *      This information is a copy of values specified by the       *  00817000
* *      server (or its agent) when invoking IXCSEND                 *  00818000
* *      SENDTO=ORIGINATOR to send its response back to the client   *  00819000
* *      that sent the request.                                      *  00820000
* *                                                                  *  00821000
* *                                                                  *  00822000
* ********************************************************************  00823000
*                                                                       00824000
*                                                                       00825000
         AIF   ('&DSECT' EQ 'YES').L001C                                00826000
IXCYSRVR_TRESPONSEINFO DS 0F                                            00827000
         AGO   .L001D                                                   00828000
.L001C   ANOP                                                           00829000
IXCYSRVR_TRESPONSEINFO DSECT                                            00830000
.L001D   ANOP                                                           00831000
RPI_VERSION DS X         Version of data within this mapping.          *00832000
                         Initially zero. May be nonzero in the future  *00833000
                         to indicate presence of new or changed        *00834000
                         information.                                   00835000
         DS    CL3       reserved, must be zero                         00836000
RPI_RESPRETCODE DS F     Response return code                           00837000
RPI_RESPRSNCODE DS F     Response reason code                           00838000
RPI_SUPPLIEDLEVEL DS F   response level supplied                        00839000
RPI_SUPPORTSLEVEL DS F   max response level supported                   00840000
IXCYSRVR_KRPI_VERSION0 EQU 0                                            00841000
IXCYSRVR_TRESPONSEINFO_LEN EQU *-IXCYSRVR_TRESPONSEINFO                 00842000
.L001A   ANOP                                                           00843000
         AIF   ('&IXCYSRVR_TTARGETDESCRIPTOR' EQ 'NO').L001E            00844000
         AIF   ('&DSECT' EQ 'YES').L001F                                00845000
         AIF   ('&IXCYSRVR_TTARGETDESCRIPTOR' NE 'YES').L001E           00846000
.L001F   ANOP                                                           00847000
*                                                                       00848000
* ********************************************************************  00849000
* *                                                                  *  00850000
* *  Target Descriptor                                               *  00851000
* *                                                                  *  00852000
* *  Summary                                                         *  00853000
* *    ixcysrvr_tTargetDescriptor maps metadata in the answer area   *  00854000
* *    returned by IXCRECV.  This record provides information about  *  00855000
* *    one of the targets of an IXCSEND request.                     *  00856000
* *                                                                  *  00857000
* *                                                                  *  00858000
* *  Usage                                                           *  00859000
* *    Invoke IXCRECV RECEIVE=RESPONSES with an ANSAREA that is      *  00860000
* *    large enough to hold all the available metadata.  Within the  *  00861000
* *    answer area header, aa_#Desc indicates the number of target   *  00862000
* *    descriptors returned in the answer area and the field         *  00863000
* *    aa_OffsetTargDesc indicates the offset within the answer      *  00864000
* *    area where the first such target descriptor was placed.       *  00865000
* *                                                                  *  00866000
* *    If aa_#Desc is nonzero, the first target descriptor can be    *  00867000
* *    located using the following logic:                            *  00868000
* *                                                                  *  00869000
* *          tdPtr = addr(AnsArea) + aa_OffsetTargDesc               *  00870000
* *                                                                  *  00871000
* *    If aa_#Desc is greater than 1, subsequent target descriptors  *  00872000
* *    can be located using the following logic, where tdPtr         *  00873000
* *    contains the address of an existing target descriptor:        *  00874000
* *                                                                  *  00875000
* *          tdPtr = tdPtr + aa_LenDesc                              *  00876000
* *                                                                  *  00877000
* *  Explanation                                                     *  00878000
* *    The target descriptor provides information about one          *  00879000
* *    particular target for an IXCSEND request.  It indicates       *  00880000
* *    where the message was to be sent and the status of the        *  00881000
* *    send.                                                         *  00882000
* *                                                                  *  00883000
* *    For an IXCSEND request with SENDTO=SERVER where the target    *  00884000
* *    server(s) are identified by server name and system(s),        *  00885000
* *    there will be one target descriptor per valid target system.  *  00886000
* *                                                                  *  00887000
* *    For an IXCSEND request with SENDTO=SERVER where the target    *  00888000
* *    server is identified by a ServerID, there will be one target  *  00889000
* *    descriptor.                                                   *  00890000
* *                                                                  *  00891000
* *    For an IXCSEND request with SENDTO=ORIGINATOR, there will be  *  00892000
* *    one target descriptor.                                        *  00893000
* *                                                                  *  00894000
* *    The response code (td_RespCode) summarizes the status of the  *  00895000
* *    message as best as XCF can determine.                         *  00896000
* *                                                                  *  00897000
* *                                                                  *  00898000
* ********************************************************************  00899000
*                                                                       00900000
*                                                                       00901000
         AIF   ('&DSECT' EQ 'YES').L0020                                00902000
IXCYSRVR_TTARGETDESCRIPTOR DS 0D Metadata describing the target for a  *00903000
                         message                                        00904000
         AGO   .L0021                                                   00905000
.L0020   ANOP                                                           00906000
IXCYSRVR_TTARGETDESCRIPTOR DSECT   Metadata describing the target for  *00907000
                         a message                                      00908000
.L0021   ANOP                                                           00909000
TD_VERSION DS  X         Version of data within this mapping.          *00910000
                         Initially zero. May be nonzero in the future  *00911000
                         to indicate presence of new or changed        *00912000
                         information.                                   00913000
         DS    CL3       Reserved                                       00914000
TD_STATUS DS   0CL4      State of this message with respect to sender   00915000
TD_SENDPENDING EQU X'80' ON if the send of the message is pending      *00916000
                         (eligible to be sent, and either the send has *00917000
                         not been initiated or if initiated, has not   *00918000
                         finished being sent).                          00919000
TD_SENDCOMPLETE EQU X'40' ON if the send of the message was initiated  *00920000
                         and finished.                                  00921000
TD_RESPEXPECTED EQU X'20' ON if XCF expects (or expected) a            *00922000
                         response/acknowledgment from the target. OFF  *00923000
                         if XCF does not expect any such response (as  *00924000
                         might be the case if the message was never    *00925000
                         sent to the target or the target system       *00926000
                         failed).                                       00927000
TD_EXPECTREPLY EQU X'10' ON if EXPECTREPLY=YES was specified on the    *00928000
                         IXCSEND invocation used to send the message   *00929000
                         to this target. OFF if EXPECTREPLY=NO         *00930000
                         applies.                                       00931000
         ORG   TD_STATUS+4                                              00932000
TD_TARGINDEX DS F        Index of this target                           00933000
TD_SENDRETCODE DS F      Return code for the IXCSEND to this target     00934000
TD_SENDRSNCODE DS F      Reason code for the IXCSEND to this target     00935000
TD_RESPCODE DS CL2       Response code. Mapped by ixcysrvr_tRespCode.  *00936000
                         If td_ExpectReply is ON, has same value as    *00937000
                         rd_RespCode.                                   00938000
         DS    CL1       Reserved                                       00939000
TD_SENDTOCODE DS X       identifies the type of data described in      *00940000
                         td_TargetInfo: (1) Server Name (2) Server ID  *00941000
                         (3) Response Token                             00942000
TD_TARGETINFO DS 0CL64   identifies target, content depends on         *00943000
                         td_SendToCode                                  00944000
         ORG   TD_TARGETINFO                                            00945000
TD_SERVERNAME DS CL32    Name of server to which message was sent.     *00946000
                         Valid when td_SendToCode equals               *00947000
                         ixcysrvr_kSendTo_ServerName. Mapped by        *00948000
                         ixcysrvr_tName.                                00949000
         ORG   TD_TARGETINFO                                            00950000
TD_SERVERID DS CL16      Server ID that uniquely identifies the target *00951000
                         server instance to which the message was      *00952000
                         sent. Valid when td_SendToCode equals         *00953000
                         ixcysrvr_kSendTo_ServerID                      00954000
         ORG   TD_TARGETINFO                                            00955000
TD_RESPTOKEN DS CL64     Response Token identifying the originator to  *00956000
                         which this (response) message was sent. Valid *00957000
                         when td_SendToCode equals                     *00958000
                         ixcysrvr_kSendTo_RespToken                     00959000
TD_SYSNAME DS  CL8       Name of system to which message was sent       00960000
TD_SYSID DS    0F        XCF System ID of system to which message was  *00961000
                         sent                                           00962000
TD_SYSNUM DS   X         XCF slot number of system                      00963000
         ORG   TD_SYSID+4                                               00964000
         DS    CL16      Reserved                                       00965000
TD_SENDRCDIAG1 DS F      XCF diagnostic information. Valid when        *00966000
                         RespCode_RC1 is set to ixcysrvr_RC1_NotSent    00967000
TD_SENDRSNDIAG1 DS F     XCF diagnostic information. Valid when        *00968000
                         RespCode_RC1 is set to ixcysrvr_RC1_NotSent    00969000
IXCYSRVR_KTD_VERSION0 EQU 0                                             00970000
IXCYSRVR_KSENDTO_SERVERNAME EQU 1 Target server name is described in   *00971000
                         td_TargetInfo                                  00972000
IXCYSRVR_KSENDTO_SERVERID EQU 2 Target server ID is described in       *00973000
                         td_TargetInfo                                  00974000
IXCYSRVR_KSENDTO_RESPTOKEN EQU 3 Target response token is described in *00975000
                         td_TargetInfo                                  00976000
IXCYSRVR_TTARGETDESCRIPTOR_LEN EQU *-IXCYSRVR_TTARGETDESCRIPTOR         00977000
.L001E   ANOP                                                           00978000
         AIF   ('&IXCYSRVR_TRESPONSEDESCRIPTOR' EQ 'NO').L0022          00979000
         AIF   ('&DSECT' EQ 'YES').L0023                                00980000
         AIF   ('&IXCYSRVR_TRESPONSEDESCRIPTOR' NE 'YES').L0022         00981000
.L0023   ANOP                                                           00982000
*                                                                       00983000
* ********************************************************************  00984000
* *                                                                  *  00985000
* *  Response Descriptor                                             *  00986000
* *                                                                  *  00987000
* *                                                                  *  00988000
* *  Summary                                                         *  00989000
* *    ixcysrvr_tResponseDescriptor maps metadata in the answer area *  00990000
* *    returned by IXCRECV.  This record provides information about  *  00991000
* *    one of the responses or acknowledgments that is expected in   *  00992000
* *    reply to an IXCSEND request that specified EXPECTREPLY=YES.   *  00993000
* *                                                                  *  00994000
* *                                                                  *  00995000
* *  Usage                                                           *  00996000
* *    Invoke IXCRECV RECEIVE=RESPONSES with an ANSAREA that is      *  00997000
* *    large enough to hold all the available metadata.  Within the  *  00998000
* *    answer area header, aa_#Desc indicates the number of response *  00999000
* *    descriptors returned in the answer area and the field         *  01000000
* *    aa_OffsetRespDesc indicates the offset within the answer      *  01001000
* *    area where the first such response descriptor was placed.     *  01002000
* *                                                                  *  01003000
* *    If aa_#Desc is nonzero, the first response descriptor can be  *  01004000
* *    located using the following logic:                            *  01005000
* *                                                                  *  01006000
* *          rdPtr = addr(AnsArea) + aa_OffsetRespDesc               *  01007000
* *                                                                  *  01008000
* *    If aa_#Desc is greater than 1, subsequent response            *  01009000
* *    descriptors can be located using the following logic, where   *  01010000
* *    rdPtr contains the address of an existing response            *  01011000
* *    descriptor:                                                   *  01012000
* *                                                                  *  01013000
* *          rdPtr = rdPtr + aa_LenDesc                              *  01014000
* *                                                                  *  01015000
* *  Explanation                                                     *  01016000
* *    The response descriptor provides information about the        *  01017000
* *    response that may have been received from one particular      *  01018000
* *    target for an IXCSEND SENDTO=SERVER request.  It provides the *  01019000
* *    status of the response, and as applicable, the response       *  01020000
* *    received from the target server (or its agent).  The target   *  01021000
* *    sends a response by invoking IXCSEND SENDTO=ORIGINATOR.       *  01022000
* *                                                                  *  01023000
* *    There will be one response descriptor for each of the targets *  01024000
* *    of the message.  Each response descriptor is in one to one    *  01025000
* *    correspondence with a target descriptor.  If one establishes  *  01026000
* *    addressability to the first target descriptor and the first   *  01027000
* *    response descriptor, one will have located a corresponding    *  01028000
* *    pair.  If there is more than one such pair of descriptors,    *  01029000
* *    then establishing addressability to successive records as     *  01030000
* *    described above will locate the next pair of corresponding    *  01031000
* *    records.  The rd_index and td_index fields will have the same *  01032000
* *    value in records that correspond to each other.               *  01033000
* *                                                                  *  01034000
* *    Note that the presence of a response descriptor does not      *  01035000
* *    necessarily imply that a response was received, and even if   *  01036000
* *    received, whether it is still available for processing.       *  01037000
* *    The data in the response descriptor must be examined to make  *  01038000
* *    that determination.  In particular, rd_RespArrived must be    *  01039000
* *    ON for it to be the case that a reply was received            *  01040000
* *    from the target server, and md_MsgAvailable (within the       *  01041000
* *    message descriptr rd_MsgDesc) must be ON for the reply data   *  01042000
* *    to be avaialable.                                             *  01043000
* *                                                                  *  01044000
* *    The response code (rd_RespCode) summarizes the status of the  *  01045000
* *    message as best as XCF can determine.  It is valid for use    *  01046000
* *    whether or not a response and its content is available.       *  01047000
* *                                                                  *  01048000
* *                                                                  *  01049000
* ********************************************************************  01050000
*                                                                       01051000
*                                                                       01052000
         AIF   ('&DSECT' EQ 'YES').L0024                                01053000
IXCYSRVR_TRESPONSEDESCRIPTOR DS 0D Metadata describing this response    01054000
         AGO   .L0025                                                   01055000
.L0024   ANOP                                                           01056000
IXCYSRVR_TRESPONSEDESCRIPTOR DSECT   Metadata describing this response  01057000
.L0025   ANOP                                                           01058000
RD_VERSION DS  X         Version of data within this mapping.          *01059000
                         Initially zero. May be nonzero in the future  *01060000
                         to indicate presence of new or changed        *01061000
                         information.                                   01062000
         DS    CL3       Reserved                                       01063000
RD_STATUS DS   0CL4      State of this response with respect to        *01064000
                         receiver                                       01065000
RD_RESPEXPECTED EQU X'80' ON if XCF expects (or expected) a            *01066000
                         response/acknowledgment from the target. OFF  *01067000
                         if XCF does not expect any such response (as  *01068000
                         might be the case if the message was never    *01069000
                         sent to the target or the target system       *01070000
                         failed).                                       01071000
RD_RESPARRIVED EQU X'40' ON if the reply from the server or its agent  *01072000
                         arrived, in which case other fields in the    *01073000
                         response descriptor are valid for use.         01074000
         ORG   RD_STATUS+4                                              01075000
RD_RESPCODE DS CL2       Response code. Mapped by ixcysrvr_tRespCode    01076000
         DS    CL2       Reserved                                       01077000
RD_RESPINDEX DS F        Index associated with this particular         *01078000
                         response.                                      01079000
RD_MSGDESC DS  CL272     Metadata describing the response message      *01080000
                         provided by the sender of the response. Valid *01081000
                         for use if rd_RespArrived is ON. Mapped by    *01082000
                         ixcysrvr_tMsgDescriptor                        01083000
*                                                                       01084000
*   The following fields are valid for use if rd_RespArrived is ON      01085000
*                                                                       01086000
*                                                                       01087000
RD_RESPRETCODE DS F      Return code provided by the responder.         01088000
RD_RESPRSNCODE DS F      Reason code provided by the responder.         01089000
RD_SUPPLIEDLEVEL DS F    Response level that responder used when       *01090000
                         formatting the response data.                  01091000
RD_SUPPORTSLEVEL DS F    Maximum response level that the responder can *01092000
                         provide when formatting the response data for *01093000
                         the subject message.                           01094000
IXCYSRVR_KRD_VERSION0 EQU 0                                             01095000
IXCYSRVR_TRESPONSEDESCRIPTOR_LEN EQU *-IXCYSRVR_TRESPONSEDESCRIPTOR     01096000
.L0022   ANOP                                                           01097000
         AIF   ('&IXCYSRVR_TMSGDESCRIPTOR' EQ 'NO').L0026               01098000
         AIF   ('&DSECT' EQ 'YES').L0027                                01099000
         AIF   ('&IXCYSRVR_TMSGDESCRIPTOR' NE 'YES').L0026              01100000
.L0027   ANOP                                                           01101000
*                                                                       01102000
* ********************************************************************  01103000
* *                                                                  *  01104000
* *  Message Descriptor                                              *  01105000
* *                                                                  *  01106000
* *  Summary                                                         *  01107000
* *    ixcysrvr_tMsgDescriptor maps metadata that describes a        *  01108000
* *    message.  It could describe a request that was sent to a      *  01109000
* *    server for processing, or it could describe a response        *  01110000
* *    that was received from the server or its agent.               *  01111000
* *                                                                  *  01112000
* *  Usage                                                           *  01113000
* *    - An IXCSEND SENDTO=SERVER request will be presented to a     *  01114000
* *      target server instance.  Within the Server Exit Parameter   *  01115000
* *      List (SXPL), the SXPLRQ_MsgDesc field contains a message    *  01116000
* *      descriptor that describes the server request message        *  01117000
* *                                                                  *  01118000
* *    - Invoke IXCRECV RECEIVE=RESPONSES with an ANSAREA that is    *  01119000
* *      large enough to hold all the available metadata for a       *  01120000
* *      server request that was sent by IXCSEND SENDTO=SERVER       *  01121000
* *      with EXPECTREPLY=YES.  For each response descriptor with    *  01122000
* *      the rd_RespArrived flag ON, the rd_MsgDesc field contains   *  01123000
* *      a message descriptor that describes the server response     *  01124000
* *      message.  The response was sent by an invocation of         *  01125000
* *      IXCSEND SENDTO=ORIGINATOR.                                  *  01126000
* *                                                                  *  01127000
* *                                                                  *  01128000
* *  Explanation                                                     *  01129000
* *      A message descriptor describes a message sent using the     *  01130000
* *      IXCSEND macro.  It is presented to the target of the        *  01131000
* *      message.  Depending on who is to process the message, the   *  01132000
* *      message descriptor could appear in the parameter list       *  01133000
* *      presented to a server exit routine, or it could appear in   *  01134000
* *      the answer area of an IXCRECV request that was invoked to   *  01135000
* *      obtain the results of a server request.                     *  01136000
* *                                                                  *  01137000
* *      A message descriptor contains a copy of the data specified  *  01138000
* *      via the IXCSEND keywords MSGID, MSGCNTL, SENDER, SENDERID,  *  01139000
* *      RESPTIME, HOLDTIME, and RESPONSELEVEL when the message was  *  01140000
* *      sent.  It also contains information such as the name of the *  01141000
* *      system that sent the message as well as timestamps to       *  01142000
* *      indicate when the message was sent and when it arrived.     *  01143000
* *                                                                  *  01144000
* *      The md_MsgAvailable flag indicates whether the data         *  01145000
* *      descriptor in the md_DataDesc is valid for use.  If so,     *  01146000
* *      the data descriptor can be used to locate the storage that  *  01147000
* *      contains the message.  The message is a copy of the data    *  01148000
* *      that was sent via the IXCSEND macro using the keyword       *  01149000
* *      MSGDATA or MSGDESC.                                         *  01150000
* *                                                                  *  01151000
* *      If the md_ExepectReply flag is ON, the sender specified     *  01152000
* *      EXPECTREPLY=YES on the IXCSEND invocation that sent the     *  01153000
* *      message.  If so, the target or its agent is expected to     *  01154000
* *      invoke IXCSEND SENDTO=ORIGINATOR to send the reply.         *  01155000
* *      The md_RespToken contains the token to be passed via the    *  01156000
* *      IXCSEND RESPTOKEN keyword when sending the reply.  This     *  01157000
* *      token allows XCF to locate the originating message to which *  01158000
* *      the response is to be bound.                                *  01159000
* *                                                                  *  01160000
* ********************************************************************  01161000
*                                                                       01162000
*                                                                       01163000
         AIF   ('&DSECT' EQ 'YES').L0028                                01164000
IXCYSRVR_TMSGDESCRIPTOR DS 0D Metadata describing a message.            01165000
         AGO   .L0029                                                   01166000
.L0028   ANOP                                                           01167000
IXCYSRVR_TMSGDESCRIPTOR DSECT   Metadata describing a message.          01168000
.L0029   ANOP                                                           01169000
MD_VERSION DS  X         Version of data within this mapping.          *01170000
                         Initially zero. May be nonzero in the future  *01171000
                         to indicate presence of new or changed        *01172000
                         information.                                   01173000
         DS    CL1       Reserved                                       01174000
         DS    H         Reserved                                       01175000
MD_ATTRIBUTES DS 0CL4    Describes characteristics of the message or   *01176000
                         its delivery.                                  01177000
MD_MSGTYPE DS  X         Code to indicate type of message: Server      *01178000
                         Request Response message See constants        *01179000
                         ixcysrvr_kMsgType...                           01180000
MD_MSGFLAGS DS 0B        Message description flags                      01181000
MD_MSGAVAILABLE EQU X'80' ON if md_DataDesc can be used to access the  *01182000
                         message data (or a data descriptor table if   *01183000
                         applicable).                                   01184000
MD_EXPECTREPLY EQU X'20' ON if sender is expecting a response to this  *01185000
                         message                                        01186000
         ORG   MD_MSGFLAGS+1                                            01187000
         DS    CL2       Reserved (zero)                                01188000
MD_MSGID DS    CL16      Copy of MSGID provided by sender when IXCSEND *01189000
                         was invoked to send this message.              01190000
MD_MSGCNTL DS  CL64      Message control data provided by sender       *01191000
                         (IXCSEND MSGCNTL)                              01192000
MD_DATADESC DS CL16      Indicates where to find the text of the       *01193000
                         message. Valid for use if the md_MsgAvailable *01194000
                         flag is ON. This field is mapped by           *01195000
                         ixcysrvr_tDataDescriptor. As a special case   *01196000
                         for a message descriptor that is contained    *01197000
                         within a response descriptor (rd_MsgDesc),    *01198000
                         the dd_DataSize field within md_DataDesc is   *01199000
                         valid for use if rd_RespArrived is ON.         01200000
MD_SENDERNAME DS CL32    Name of sender, corresponds to IXCSEND SENDER *01201000
                         specification.                                 01202000
MD_SENDERID DS CL16      Sender ID, zero if none. Corresponds to       *01203000
                         IXCSEND SENDERID specification.                01204000
MD_SYSNAME DS  CL8       Name of system on which sender resides.        01205000
MD_SYSID DS    0F        XCF System ID of system on which sender       *01206000
                         resides.                                       01207000
MD_SYSNUM DS   X         XCF slot number of system                      01208000
         ORG   MD_SYSID+4                                               01209000
MD_ETODWHENSENT DS CL16  Extended TOD when this message was sent.       01210000
MD_ETODWHENARRIVED DS CL16 Extended TOD when this message arrived on   *01211000
                         local system. Set to zero if the information  *01212000
                         is not available.                              01213000
MD_RESPTOKEN DS CL64     RESPTOKEN to be used when invoking IXCSEND to *01214000
                         send a response to this message. Valid if     *01215000
                         md_ExpectReply is ON                           01216000
MD_RESPTIME DS F         Amount of time sender is allowing for the     *01217000
                         expected response to arrive. This value       *01218000
                         corresponds to the RESPTIME specification     *01219000
                         from the IXCSEND invocation.                   01220000
MD_HOLDTIME DS F         Amount of time that response will be          *01221000
                         available to sender after its message         *01222000
                         completes. This value corresponds to the      *01223000
                         HOLDTIME specification from the IXCSEND       *01224000
                         invocation.                                    01225000
MD_RESPONSELEVEL DS F    Response level requested by sender.           *01226000
                         Corresponds to IXCSEND RESPONSELEVEL          *01227000
                         specification.                                 01228000
IXCYSRVR_KMD_VERSION0 EQU 0                                             01229000
IXCYSRVR_KMSGTYPE_SERVERREQUEST EQU 1 IXCSEND SENDTO=SERVER             01230000
IXCYSRVR_KMSGTYPE_RESPONSE EQU 2 IXCSEND SENDTO=ORIGINATOR              01231000
IXCYSRVR_TMSGDESCRIPTOR_LEN EQU *-IXCYSRVR_TMSGDESCRIPTOR               01232000
.L0026   ANOP                                                           01233000
         AIF   ('&IXCYSRVR_TSXPL' EQ 'NO').L002A                        01234000
         AIF   ('&DSECT' EQ 'YES').L002B                                01235000
         AIF   ('&IXCYSRVR_TSXPL' NE 'YES').L002A                       01236000
.L002B   ANOP                                                           01237000
*                                                                       01238000
* ********************************************************************  01239000
* *                                                                  *  01240000
* * Server Exit Parameter List (SXPL)                                *  01241000
* *                                                                  *  01242000
* *  Summary                                                         *  01243000
* *    ixcysrvr_tSXPL maps the parameter list that is passed to a    *  01244000
* *    server exit routine.                                          *  01245000
* *                                                                  *  01246000
* *  Usage                                                           *  01247000
* *    Invoke IXCSRVR REQTYPE=START from some task to start a        *  01248000
* *    server.  The SERVEREXIT keyword indicates the address of the  *  01249000
* *    routine that is to be called to process server requests.      *  01250000
* *    XCF will pass an SXPL to the server exit when it calls the    *  01251000
* *    exit to perform some particular function.                     *  01252000
* *                                                                  *  01253000
* *    The SXPL contains the parameters to be processed by the       *  01254000
* *    server exit routine when called by XCF to perform some        *  01255000
* *    function.  The SXPL_ServerCode indicates what function the    *  01256000
* *    server exit is to perform, which could be any of the          *  01257000
* *    following:                                                    *  01258000
* *      ixcysrvr_kSC_InitServer - the server exit should perform    *  01259000
* *                                such initialization as it may     *  01260000
* *                                need                              *  01261000
* *      ixcysrvr_kSC_GetWorkArea- the server exit is to obtain      *  01262000
* *                                storage for XCF to use            *  01263000
* *      ixcysrvr_kSC_Request    - the server exit is to process     *  01264000
* *                                a client request that was sent    *  01265000
* *                                with IXCSEND SENDTO=SERVER        *  01266000
* *                                                                  *  01267000
* *  Explanation                                                     *  01268000
* *    The SXPL contains the parameters to be processed by the       *  01269000
* *    server exit routine when called by XCF to perform some        *  01270000
* *    function.  The base portion of the SXPL contains parameters   *  01271000
* *    that are common to all functions.  For example, the server    *  01272000
* *    code indicates what function the server exit is to            *  01273000
* *    perform.  The name and ID of the server are also provided.    *  01274000
* *                                                                  *  01275000
* *    Depending on the function (SXPL_ServerCode), additional       *  01276000
* *    function specific parameters may be provided as well.         *  01277000
* *    The SXPL_ParameterOffset field can be used to locate these    *  01278000
* *    parameters.                                                   *  01279000
* *                                                                  *  01280000
* *    These additional parameters are correlated to the server      *  01281000
* *    code as follows:                                              *  01282000
* *                                                                  *  01283000
* *      Server Code               Additional parameters mapped by:  *  01284000
* *      ------------------------  --------------------------------  *  01285000
* *      ixcysrvr_kSC_InitServer   ixcysrvr_tInitServer              *  01286000
* *      ixcysrvr_kSC_GetWorkArea  ixcysrvr_tGetWorkArea             *  01287000
* *      ixcysrvr_kSC_Request      ixcysrvr_tRequest                 *  01288000
* *                                                                  *  01289000
* *    Some fields in the base SXPL can be updated by the server     *  01290000
* *    exit routine.  Modifications to these output fields may or    *  01291000
* *    may not be valid depending on the server code.  The following *  01292000
* *    table indicates the server codes for which updates to the     *  01293000
* *    indicated output field are valid.  Note that updates to       *  01294000
* *    reserved fields in the SXPL are never permitted.  If an       *  01295000
* *    invalid update is made, XCF will stop the offending server    *  01296000
* *    instance.                                                     *  01297000
* *                               Updates Valid ?                    *  01298000
* *      Output field      Initialize GetWorkArea Request            *  01299000
* *      ----------------  ---------- ----------- -------            *  01300000
* *      SXPL_StopCode          yes        yes      yes              *  01301000
* *      SXPL_State             yes        yes      yes              *  01302000
* *      SXPL_WAD               yes        yes      yes              *  01303000
* *      SXPL_RespBind          no         no       yes              *  01304000
* *      SXPL_RefusalCode       no         yes      yes              *  01305000
* *      SXPL_ResultCode        no         no       yes              *  01306000
* *                                                                  *  01307000
* *                                                                  *  01308000
* ********************************************************************  01309000
*                                                                       01310000
*                                                                       01311000
         AIF   ('&DSECT' EQ 'YES').L002C                                01312000
IXCYSRVR_TSXPL DS 0D     SXPL Header                                    01313000
         AGO   .L002D                                                   01314000
.L002C   ANOP                                                           01315000
IXCYSRVR_TSXPL DSECT     SXPL Header                                    01316000
.L002D   ANOP                                                           01317000
SXPL_EYECATCHER DS CL4   'SXPL'                                         01318000
SXPL_VERSION DS X        SXPL version. This field is set to indicate   *01319000
                         the presence of additional data within this   *01320000
                         header. It is intended for use by (future)    *01321000
                         exploiters that need to determine whether the *01322000
                         new fields of interest to them are valid for  *01323000
                         use.                                           01324000
SXPL_LEVEL DS  X         Similar to SXPL_Version, except that this     *01325000
                         field indicates the presence of additional    *01326000
                         data within the request specific parameters   *01327000
                         located via SXPL_ParameterOffset.              01328000
SXPL_SERVERCODE DS X     Server code. Indicates what function XCF is   *01329000
                         asking the server to perform and thus how to  *01330000
                         map the parameters that are being passed. See *01331000
                         constants below.                               01332000
SXPL_FLAGS DS  0CL1                                                     01333000
SXPL_STOPPENDING EQU X'80' ON if the server is to be stopped, but is   *01334000
                         being allowed to finish pending work.          01335000
         ORG   SXPL_FLAGS+1                                             01336000
SXPL_STOPCODE DS F       An output field to be set by the server exit  *01337000
                         routine if it wants to terminate the server.  *01338000
                         Initially zero on entry to the server exit    *01339000
                         routine. If this field is nonzero on return   *01340000
                         from the exit, XCF stops running the server   *01341000
                         loop and returns to the the IXCSRVR           *01342000
                         REQTYPE=START invoker with a return and       *01343000
                         reason code determined by this value.          01344000
SXPL_LENGTH DS F         Length in bytes of SXPL, including any        *01345000
                         parameters unique to the server code.          01346000
SXPL_USERDATA DS CL16    Copy of USERDATA specified by the IXCSRVR     *01347000
                         invocation that started the server.            01348000
SXPL_SERVERNAME DS CL32  Name of the server being called. Mapped by    *01349000
                         ixcysrvr_tName                                 01350000
SXPL_SERVERID DS CL16    Token that identifies the server              *01351000
                         instantiation being called                     01352000
SXPL_INFO DS   CL64      Copy of INFO specified by the IXCSRVR         *01353000
                         invocation that started the server. This data *01354000
                         is static for the life of the server.          01355000
SXPL_STATE DS  CL64      Server state. This field can be dynamically   *01356000
                         updated by the server exit. On entry to       *01357000
                         server exit, a copy of the server state last  *01358000
                         observed by XCF (initially zero). If this     *01359000
                         field is updated by the server exit, XCF will *01360000
                         record the new server state upon return from  *01361000
                         the exit. The server state last recorded by   *01362000
                         XCF is made available to outside parties that *01363000
                         send a suitable query (IXCREQ) to the XCF     *01364000
                         server.                                        01365000
SXPL_WAD DS    CL32      The work area descriptor indicates storage    *01366000
                         location(s) provided by the user that XCF can *01367000
                         use for a work area. For example, a work area *01368000
                         might hold the content of a server request    *01369000
                         message sent by a client. The server exit can *01370000
                         leave this data intact, or update it to       *01371000
                         provide a new work area for the next request, *01372000
                         or update it to withdraw the work area        *01373000
                         entirely. Regardless, the updated descriptor  *01374000
                         determines the work area (if any) that XCF is  01375000
*                        to use for processing the next server work    *01376000
                         item. Mapped by ixcysrvr_tWorkAreaDescriptor   01377000
SXPL_PARAMETEROFFSET DS F Offset at which the parameters for the       *01378000
                         indicated server code can be found. Offset is *01379000
                         relative to the beginning of the SXPL.         01380000
SXPL_RESPBIND DS X       An output field to be set by the server to    *01381000
                         change the response bind for a request. On    *01382000
                         entry to the server exit, contains a value    *01383000
                         corresponding to the RESPBIND specification   *01384000
                         from the IXCSRVR invocation that started the  *01385000
                         server. When called to process a server       *01386000
                         request (ixcysrvr_kSC_Request), the server    *01387000
                         exit can update this field to indicate that   *01388000
                         the particular request presented to the       *01389000
                         server should have a different RESPBIND        01390000
*                        specification. The response bind (whether     *01391000
                         changed or not) does not become effective     *01392000
                         until XCF completes its back end processing   *01393000
                         for the request after the server exit         *01394000
                         successfully returns. For failures prior to   *01395000
                         that point, the request is deemed to have     *01396000
                         failed during delivery.                        01397000
SXPL_REFUSALCODE DS X    An output field to be set by the server exit  *01398000
                         routine if it wants to refuse a request.      *01399000
                         Initially zero on entry to the server exit    *01400000
                         routine. If this field is nonzero on return   *01401000
                         from the exit, XCF will acknowledge the       *01402000
                         associated request (if any) with a primary    *01403000
                         response code of ixcysrvr_RC1_Refused. The    *01404000
                         secondary response code will be this refusal  *01405000
                         code. XCF assumes the server will not be      *01406000
                         sending its own response. Updates are valid    01407000
*                        when the server exit is called with the       *01408000
                         following server codes:                       *01409000
                         ixcysrvr_kSC_GetWorkArea ixcysrvr_kSC_Request  01410000
SXPL_RESULTCODE DS X     An output field to be set by the server exit  *01411000
                         routine if it wants to have XCF acknowledge   *01412000
                         the request. Initially zero on entry to the   *01413000
                         server exit routine. If this field is nonzero *01414000
                         on return from the exit, XCF will acknowledge *01415000
                         the associated request with a primary         *01416000
                         response code of ixcysrvr_RC1_Delivered. The  *01417000
                         secondary response code will be this result   *01418000
                         code. XCF assumes that the server will not be *01419000
                         sending its own response. Updates are valid    01420000
*                        when the server exit is called with the       *01421000
                         following server codes: ixcysrvr_kSC_Request   01422000
         DS    CL1       reserved                                       01423000
SXPL_TRACETHREAD DS F    Token that can be used to identify the XCF    *01424000
                         thread associated with this call to the       *01425000
                         server exit. Intended for use with problem    *01426000
                         diagnosis. Can be used to identify XCF        *01427000
                         component traces that may be relevant.         01428000
         DS    CL4       reserved                                       01429000
IXCYSRVR_KSXPLEYECATCHER EQU C'SXPL'                                    01430000
IXCYSRVR_KSXPL_VERSION0 EQU 0 initial version                           01431000
IXCYSRVR_KSXPL_LEVEL0 EQU 0 initial level                               01432000
*                                                                       01433000
*  ------------------------------------------------------------------   01434000
*     Server Codes                                                      01435000
*                                                                       01436000
*     All servers are are expected to process the following codes:      01437000
*       o InitServer  - first call made to the server exit              01438000
*       o GetWorkArea - obtain a work area for XCF to use               01439000
*                                                                       01440000
*     The following server codes are used only as the result of some    01441000
*     explicit action on the part of the exploiter.  The server is      01442000
*     expected to process whatever codes apply.                         01443000
*       o Request       - process a client request message              01444000
*                                                                       01445000
*  ------------------------------------------------------------------   01446000
*                                                                       01447000
*                                                                       01448000
IXCYSRVR_KSC_INITSERVER EQU 1 initialize server                         01449000
IXCYSRVR_KSC_GETWORKAREA EQU 2 XCF wants storage                        01450000
IXCYSRVR_KSC_REQUEST EQU 3 process request sent by IXCSEND             *01451000
                         SENDTO=SERVER                                  01452000
*                                                                       01453000
*  ------------------------------------------------------------------   01454000
*     Server Stop Codes                                                 01455000
*                                                                       01456000
*       The server exit can set SXPL_StopCode to have XCF exit the      01457000
*       server stub loop and return to the invoker of the IXCSRVR       01458000
*       REQTYPE=START that started the server instance.  On entry to    01459000
*       the server exit routine, SXPL_StopCode =                        01460000
*       ixcysrvr_kStopCodeContinue.  If the server is to continue       01461000
*       processing work, the exit need not update the "stop code".      01462000
*                                                                       01463000
*       If the server is to stop processing work, it should set an      01464000
*       acceptable stop code prior to normal return to XCF.             01465000
*       XCF then returns to the invoker of the IXCSRVR REQTYPE=START    01466000
*       request, translating the stop code into the return and          01467000
*       reason code indicated below.                                    01468000
*                                                                       01469000
*                                          IXCSRVR REQTYPE=START        01470000
*         SXPL_StopCode upon return      RC     Reason Code             01471000
*         -----------------------------  -- ---------------------       01472000
*         ixcysrvr_kStopCodeFinished     0  n/a                         01473000
*         ixcysrvr_kStopCodeFailure      4  ixcsrvrRsnExitFailure       01474000
*     (1) ixcysrvr_kStopCodeContinue     4  ixcsrvrRsnStopped           01475000
*     (2) <any other nonzero value>      8  ixcsrvrRsnSxplStopCode      01476000
*                                                                       01477000
*                                                                       01478000
*    Notes:                                                             01479000
*                                                                       01480000
*     (1) The IXCSRVR REQTYPE=START service routine returns with        01481000
*         return code 4 and reason code ixcsrvrRsnStopped if XCF        01482000
*         stops the server as the result of an IXCSRVR REQTYPE=STOP     01483000
*         request.  If the server instance was aware of the stop at     01484000
*         all, it did not set the SXPL_StopCode to a nonzero value.     01485000
*         It may well be that the XCF server stub code exited the       01486000
*         server loop without calling the server exit, in which case    01487000
*         the server exit had no opportunity to set the stop code.      01488000
*                                                                       01489000
*     (2) Any other nonzero value is invalid and deemed to be a         01490000
*         violation of the interface.                                   01491000
*                                                                       01492000
*  ------------------------------------------------------------------   01493000
*                                                                       01494000
*                                                                       01495000
IXCYSRVR_KSTOPCODECONTINUE EQU 0 continue running the server loop       01496000
IXCYSRVR_KSTOPCODEFINISHED EQU 1 The server exit finished and is       *01497000
                         stopping normally.                             01498000
IXCYSRVR_KSTOPCODEFAILURE EQU 2 The server exit is stopping due to a   *01499000
                         failure.                                       01500000
*                                                                       01501000
*  ------------------------------------------------------------------   01502000
*     RESPBIND Code                                                     01503000
*                                                                       01504000
*       The server exit can set SXPL_RespBind to indicate what          01505000
*       recovery bind XCF should establish for the request being        01506000
*       processed by the server.  This specification determines the     01507000
*       circumstances for which XCF will cancel the response message    01508000
*       that is expected to be sent in reply to the request.            01509000
*       Canceling a response implies that the originator of the         01510000
*       request that is waiting for the response need not wait for      01511000
*       its timeout value to expire to discover that no response was    01512000
*       sent.  If the entity specified by the RESPBIND terminates       01513000
*       without sending a response, XCF will inform the originator      01514000
*       that the reply is no longer expected.                           01515000
*                                                                       01516000
*       XCF sets the response bind after the server exit returns        01517000
*       from processing the request.  Thus for the response bind to     01518000
*       become effective, XCF must complete its back end processing     01519000
*       for the request.  If a failure should occur before XCF can      01520000
*       set the response bind, the request may be acknowledged with     01521000
*       a response code indicating that a failure occurred while the    01522000
*       request was being processed.  So in cases where the failure     01523000
*       occurs after the server exit successfully arranged for its      01524000
*       agent to send the expected response but before XCF can set      01525000
*       the response bind, the XCF acknowledgment may race with the     01526000
*       response to be sent by agent.  If the XCF acknowledgment        01527000
*       wins the race, the response by the agent will be discarded.     01528000
*                                                                       01529000
*  ------------------------------------------------------------------   01530000
*                                                                       01531000
*                                                                       01532000
IXCYSRVR_KRESPBIND_INSTANCE EQU 1 instance of server that processed    *01533000
                         request stops or terminates                    01534000
IXCYSRVR_KRESPBIND_ADDRSPACE EQU 2 address space containing the server *01535000
                         instance that processed the request           *01536000
                         terminates                                     01537000
IXCYSRVR_KRESPBIND_SYSTEM EQU 3 system containing the server instance  *01538000
                         that processed the request terminates          01539000
IXCYSRVR_TSXPL_LEN EQU *-IXCYSRVR_TSXPL                                 01540000
.L002A   ANOP                                                           01541000
         AIF   ('&IXCYSRVR_TINITSERVER' EQ 'NO').L002E                  01542000
         AIF   ('&DSECT' EQ 'YES').L002F                                01543000
         AIF   ('&IXCYSRVR_TINITSERVER' NE 'YES').L002E                 01544000
.L002F   ANOP                                                           01545000
*                                                                       01546000
* ********************************************************************  01547000
* *                                                                  *  01548000
* * Server Exit Parameter List (SXPL) Function Specific Parameters   *  01549000
* * when SXPL_ServerCode = ixcysrvr_kSC_InitServer                   *  01550000
* *                                                                  *  01551000
* *  Summary                                                         *  01552000
* *    ixcysrvr_tInitServer maps the function specific parameters    *  01553000
* *    passed to a server exit routine when the server code is       *  01554000
* *    ixcysrvr_kSC_InitServer.                                      *  01555000
* *                                                                  *  01556000
* *  Usage                                                           *  01557000
* *    Invoke IXCSRVR REQTYPE=SERVER to start a server instance.     *  01558000
* *    The first call to the server exit routine will be an          *  01559000
* *    "initialize server" request.  The server exit routine will    *  01560000
* *    perform whatever initialization is deemed appropriate.        *  01561000
* *                                                                  *  01562000
* *  Explanation                                                     *  01563000
* *    When a server exit routine is called to initialize itself,    *  01564000
* *    SXPL_ParameterOffset indicates the offset within the SXPL at  *  01565000
* *    which storage mapped by ixcysrvr_tInitServer is located.      *  01566000
* *    These parameters reflect the keyword values specified on the  *  01567000
* *    IXCSRVR REQTYPE=START request that started the server         *  01568000
* *    instance.                                                     *  01569000
* *                                                                  *  01570000
* *    Initialization may or may not be necessary depending on the   *  01571000
* *    application.  For example, it may be simpler to have the      *  01572000
* *    invoker of IXCSRVER REQTYPE=START do the initialization and   *  01573000
* *    then use the USERDATA keyword to pass the location of a       *  01574000
* *    control structure to the server exit (via SXPL_UserData).     *  01575000
* *                                                                  *  01576000
* *    The initialization might, for example, update SXPL_WAD to     *  01577000
* *    provide a work area for XCF to use when delivering requests   *  01578000
* *    to the server on subsequent calls.  In cases where the        *  01579000
* *    clint/server implementation is such that the request messages *  01580000
* *    are of a known size, providing a work area at initialization  *  01581000
* *    could imply that the server exit would never need to process  *  01582000
* *    a "get work area" request.                                    *  01583000
* *                                                                  *  01584000
* *    Note that XCF does not call the server exit routine to        *  01585000
* *    perform a "shut down" or "termination" request.  XCF expects  *  01586000
* *    the invoker of the IXCSRVR REQTYPE=START request to provide   *  01587000
* *    for any needed recovery of resources that may have been       *  01588000
* *    acquired by the server exit routine.  In cases where such     *  01589000
* *    recovery is needed, the IXCSEND keyword USERDATA could be     *  01590000
* *    used to locate a control structure where the server exit      *  01591000
* *    would record the resources for which it is responsible.       *  01592000
* *    When XCF stops the server, the code that started the server   *  01593000
* *    (or its recovery) would examine the control structure to      *  01594000
* *    determine the set of resources that need to be cleaned up.    *  01595000
* *                                                                  *  01596000
* *                                                                  *  01597000
* ********************************************************************  01598000
*                                                                       01599000
*                                                                       01600000
         AIF   ('&DSECT' EQ 'YES').L0030                                01601000
IXCYSRVR_TINITSERVER DS 0D parameters for server initialization         01602000
         AGO   .L0031                                                   01603000
.L0030   ANOP                                                           01604000
IXCYSRVR_TINITSERVER DSECT   parameters for server initialization       01605000
.L0031   ANOP                                                           01606000
SXPLIS_DESCRIPTION DS CL32 IXCSRVR DESCRIPTION                          01607000
SXPLIS_MINSERVERLEVEL DS F IXCSRVR MINLEVEL                             01608000
SXPLIS_MAXSERVERLEVEL DS F IXCSRVR MAXLEVEL                             01609000
SXPLIS_MINCLIENTLEVEL DS F IXCSRVR MINCLIENT                            01610000
SXPLIS_MAXCLIENTLEVEL DS F IXCSRVR MAXCLIENT                            01611000
SXPLIS_FEATURES DS CL8   Server FEATURES specified on the IXCSRVR      *01612000
                         START request. Mapped by ixcysrvr_tFeatures    01613000
SXPLIS_FDI DS  F         IXCSRVR FDI                                    01614000
SXPLIS_RESPBIND DS F     IXCSRVR RESPBIND                               01615000
IXCYSRVR_TINITSERVER_LEN EQU *-IXCYSRVR_TINITSERVER                     01616000
.L002E   ANOP                                                           01617000
         AIF   ('&IXCYSRVR_TGETWORKAREA' EQ 'NO').L0032                 01618000
         AIF   ('&DSECT' EQ 'YES').L0033                                01619000
         AIF   ('&IXCYSRVR_TGETWORKAREA' NE 'YES').L0032                01620000
.L0033   ANOP                                                           01621000
*                                                                       01622000
* ********************************************************************  01623000
* *                                                                  *  01624000
* * Server Exit Parameter List (SXPL) Function Specific Parameters   *  01625000
* * when SXPL_ServerCode = ixcysrvr_kSC_GetWorkArea                  *  01626000
* *                                                                  *  01627000
* *  Summary                                                         *  01628000
* *    ixcysrvr_tGetWorkArea maps the function specific parameters   *  01629000
* *    passed to a server exit routine when the server code is       *  01630000
* *    ixcysrvr_kSC_GetWorkArea.                                     *  01631000
* *                                                                  *  01632000
* *  Usage                                                           *  01633000
* *    When XCF needs a new work area, it calls the server exit      *  01634000
* *    routine to process a "get work area" request.  The server     *  01635000
* *    exit routine is expected to obtain the requested storage,     *  01636000
* *    update the SXPL_WAD to indicate the location and size of the  *  01637000
* *    storage provided, and return to XCF.                          *  01638000
* *                                                                  *  01639000
* *                                                                  *  01640000
* *  Explanation                                                     *  01641000
* *    When a server exit routine is called to get a work area for   *  01642000
* *    XCF to use, SXPL_ParameterOffset indicates the offset within  *  01643000
* *    the SXPL at which storage mapped by ixcysrvr_tGetWorkArea is  *  01644000
* *    located.                                                      *  01645000
* *                                                                  *  01646000
* *    When a client invokes IXCSEND SENDTO=SERVER to send a request *  01647000
* *    to a server, XCF puts a copy of the request message in a      *  01648000
* *    server provided work area, and then calls the server to       *  01649000
* *    process the request.  If the current work area is not large   *  01650000
* *    enough to hold the content of the request message, XCF first  *  01651000
* *    calls the server exit to get a work area of sufficient size.  *  01652000
* *    The SXPLGW_TotalSize field indicates how much storage is      *  01653000
* *    needed.  The server exit is expected to obtain the requested  *  01654000
* *    storage and update the SXPL_WAD field to describe the storage *  01655000
* *    that XCF is to use.                                           *  01656000
* *                                                                  *  01657000
* *    Upon return from the server exit, XCF inspects the refusal    *  01658000
* *    code (SXPL_RefusalCode) set by the server exit routine.  If   *  01659000
* *    nonzero, XCF sends an acknowledgment (as needed) to the       *  01660000
* *    originator of the request to indicate that the target refused *  01661000
* *    the request.  The request is discarded and will not be        *  01662000
* *    presented to the server.  The work area provided, if any,     *  01663000
* *    will not be used for the request that was refused, but could  *  01664000
* *    potentially be used for a subsequent request.                 *  01665000
* *                                                                  *  01666000
* *                                                                  *  01667000
* *    If the request is not refused, XCF inspects the SXPL_WAD to   *  01668000
* *    verify that the work area it describes is available for use   *  01669000
* *    and large enough to hold the message.  If not, XCF sends an   *  01670000
* *    acknowledgment (as needed) to the originator of the request   *  01671000
* *    to indicate that the request was not delivered because the    *  01672000
* *    target failed to provide a work area.  The request is         *  01673000
* *    discarded and will not be presented to the server.  The work  *  01674000
* *    area provided, if any, will not be used for the request that  *  01675000
* *    was refused, but could potentially be used for a subsequent   *  01676000
* *    request.                                                      *  01677000
* *                                                                  *  01678000
* *    If the work area is not accessible, XCF sends an              *  01679000
* *    acknowledgment (as needed) to the originator of the request   *  01680000
* *    to indicate that the request was not delivered due to a       *  01681000
* *    server error.  XCF also stops the server.                     *  01682000
* *                                                                  *  01683000
* *    If the provided work area is available for use, large enough  *  01684000
* *    to hold the request message and accessible, XCF copies the    *  01685000
* *    messaage into the work area and calls the server exit to      *  01686000
* *    process the request.                                          *  01687000
* *                                                                  *  01688000
* *                                                                  *  01689000
* *    The SXPL_WAD is mapped by ixcysrvr_tWorkAreaDescriptor.  To   *  01690000
* *    provide a work area, the server exit must set the             *  01691000
* *    WAD_Available flag to indicate that the work area described   *  01692000
* *    by WAD_DataDesc is available for use by XCF.  Set the         *  01693000
* *    WAD_StgKey field to specify the storage key that XCF should   *  01694000
* *    use when storing into the indicated work area.  Within the    *  01695000
* *    WAD_DataDesc field, one must indicate the size, ALET, and     *  01696000
* *    address of a contiguous storage area to be used as the work   *  01697000
* *    area.                                                         *  01698000
* *                                                                  *  01699000
* *                                                                  *  01700000
* ********************************************************************  01701000
*                                                                       01702000
*                                                                       01703000
         AIF   ('&DSECT' EQ 'YES').L0034                                01704000
IXCYSRVR_TGETWORKAREA DS 0D                                             01705000
         AGO   .L0035                                                   01706000
.L0034   ANOP                                                           01707000
IXCYSRVR_TGETWORKAREA DSECT                                             01708000
.L0035   ANOP                                                           01709000
SXPLGW_REQUIREMENTS DS 0CL4                                             01710000
SXPLGW_MUSTBECONTIGUOUS EQU X'80' ON if one contiguous storage area of *01711000
                         the indicated total size is required to       *01712000
                         process the pending request. OFF implies that *01713000
                         multiple distinct work areas can also be      *01714000
                         used. Even if the flag is ON, the server can  *01715000
                         provide a data descriptor table that defines  *01716000
                         multiple data areas, however the first entry  *01717000
                         in the table must describe a contiguous       *01718000
                         storage area of the indicated total size.      01719000
         DS    BL.031    Reserved.                                      01720000
         ORG   SXPLGW_REQUIREMENTS+4                                    01721000
SXPLGW_TOTALSIZE DS F    Total number of bytes of storage required for *01722000
                         the new work area(s)                           01723000
         DS    CL8       Reserved                                       01724000
IXCYSRVR_TGETWORKAREA_LEN EQU *-IXCYSRVR_TGETWORKAREA                   01725000
.L0032   ANOP                                                           01726000
         AIF   ('&IXCYSRVR_TSIZEARRAY' EQ 'NO').L0036                   01727000
         AIF   ('&DSECT' EQ 'YES').L0037                                01728000
         AIF   ('&IXCYSRVR_TSIZEARRAY' NE 'YES').L0036                  01729000
IXCYSRVR_TSIZEARRAY DS 0F                                               01730000
         AGO   .L0038                                                   01731000
.L0037   ANOP                                                           01732000
IXCYSRVR_TSIZEARRAY DSECT                                               01733000
.L0038   ANOP                                                           01734000
SA_SIZE  DS    F                                                        01735000
IXCYSRVR_TSIZEARRAY_LEN EQU *-IXCYSRVR_TSIZEARRAY                       01736000
.L0036   ANOP                                                           01737000
         AIF   ('&IXCYSRVR_TREQUEST' EQ 'NO').L0039                     01738000
         AIF   ('&DSECT' EQ 'YES').L003A                                01739000
         AIF   ('&IXCYSRVR_TREQUEST' NE 'YES').L0039                    01740000
.L003A   ANOP                                                           01741000
*                                                                       01742000
* ********************************************************************  01743000
* *                                                                  *  01744000
* * Server Exit Parameter List (SXPL) Function Specific Parameters   *  01745000
* * when SXPL_ServerCode = ixcysrvr_kSC_Request                      *  01746000
* *                                                                  *  01747000
* *  Summary                                                         *  01748000
* *    ixcysrvr_tRequest maps the function specific parameters       *  01749000
* *    passed to a server exit routine when the server code is       *  01750000
* *    ixcysrvr_kSC_Request.                                         *  01751000
* *                                                                  *  01752000
* *  Usage                                                           *  01753000
* *    Invoke IXCSRVR REQTYPE=SERVER to start a server instance.     *  01754000
* *    When a client invokes IXCSEND SENDTO=SERVER to send a request *  01755000
* *    to the server, XCF puts a copy of the request message in a    *  01756000
* *    server provided work area, and then calls the server to       *  01757000
* *    process the request.  These parameters provide information    *  01758000
* *    about the request.                                            *  01759000
* *                                                                  *  01760000
* *  Explanation                                                     *  01761000
* *    When a server exit routine is called to process a client      *  01762000
* *    request, SXPL_ParameterOffset indicates the offset within     *  01763000
* *    the SXPL at which storage mapped by ixcysrvr_tRequest is      *  01764000
* *    located.  These parameters reflect the keyword values         *  01765000
* *    specified on the IXCSEND SENDTO=SERVER invocation used by the *  01766000
* *    client to send the request message to the server, namely:     *  01767000
* *      o FUNCTION                                                  *  01768000
* *      o DESCRIPTION                                               *  01769000
* *      o CLIENTLEVEL                                               *  01770000
* *      o Server selection criteria extracted from CRITERIA         *  01771000
* *                                                                  *  01772000
* *    The message descriptor (SXPLRQ_MsgDesc) contains a copy of    *  01773000
* *    the IXCSEND MSGID and MSGCNTL keyword values specified by the *  01774000
* *    client.  If the client provided actual message content (via   *  01775000
* *    MSGDATA or MSGDESC keywords with a nonzero MSGLEN), the       *  01776000
* *    message descriptor will indicate that the message content is  *  01777000
* *    available.  If so, the data descriptor field (md_DataDesc)    *  01778000
* *    within the message descriptor indicates where XCF put a copy  *  01779000
* *    of the client message data.                                   *  01780000
* *                                                                  *  01781000
* *    The message descriptor also contains copies of other IXCSEND  *  01782000
* *    keyword values (SENDER, SENDERID, RESPTIME, HOLDTIME), as     *  01783000
* *    well as other metadata (such as ETODs indicating when the     *  01784000
* *    message was sent and when it arrived, and which system in the *  01785000
* *    sysplex sent the message).                                    *  01786000
* *                                                                  *  01787000
* *    If the client expects a reply, the md_ExpectReply flag will   *  01788000
* *    be set to so indicate and a copy of the RESPONSELEVEL keyword *  01789000
* *    value will be provided as well.  If a reply is expected, the  *  01790000
* *    server (or its agent) should formulate an appropriate reply   *  01791000
* *    and send the response by invoking IXCSEND SENDTO=ORIGINATOR.  *  01792000
* *    The md_RespToken field in the message descriptor contains the *  01793000
* *    token to be specified for the RESPTOKEN keyword when sending  *  01794000
* *    the reply.  Note that XCF will reuse the storage containing   *  01795000
* *    the SXPL for a subsequent request.  So if the reply is not    *  01796000
* *    sent before the server exit routine gives up control, it must *  01797000
* *    take pains to preserve a copy of the md_RespToken value in    *  01798000
* *    some other storage area for later use when sending the reply. *  01799000
* *                                                                  *  01800000
* *    Note that if the client targeted the server by its server ID, *  01801000
* *    XCF did not apply any of the server selection criteria that   *  01802000
* *    may have been specified on the IXCSEND request.  The server   *  01803000
* *    exit routine may need to inspect these criteria to determine  *  01804000
* *    whether and/or how to process the request.                    *  01805000
* *                                                                  *  01806000
* *                                                                  *  01807000
* *    For some servers, it may be possible to provide one work area *  01808000
* *    for XCF to use over and over for each new client request.     *  01809000
* *    This case might apply, for example, to a server whose request *  01810000
* *    messages are of a known size and whose requests are processed *  01811000
* *    synchronously by the server exit routine.  If so, one might   *  01812000
* *    provide a work area when the server exit is called to         *  01813000
* *    initialize itself, and then never need to process a "get work *  01814000
* *    areaa" request.                                               *  01815000
* *                                                                  *  01816000
* *    For some servers, a new work area must be provided for each   *  01817000
* *    client request to be processed.  This case might apply, for   *  01818000
* *    example, to a server that arranges for asynchronous           *  01819000
* *    processing of the request by some other work unit.  If the    *  01820000
* *    server exit leaves the work area available to XCF when it     *  01821000
* *    returns, the work area could be overlaid with the content of  *  01822000
* *    the next request message to be presented to the server exit,  *  01823000
* *    which in turn could corrupt the content of the work area as   *  01824000
* *    seen by the asynchronous work unit that is processing the     *  01825000
* *    previous request.  To preserve the integrity of the work area *  01826000
* *    for the asynchronous work unit, the server exit would need to *  01827000
* *    update the SXPL_WAD to either indicate that the work area is  *  01828000
* *    no longer available to XCF or to provide a new work area.     *  01829000
* *    Alternatively, the server exit could arrange for the          *  01830000
* *    asynchronous work unit to process a copy of the data in the   *  01831000
* *    work area, in which case the work area could be left          *  01832000
* *    intact for XCF to use with the next request.                  *  01833000
* *                                                                  *  01834000
* ********************************************************************  01835000
*                                                                       01836000
*                                                                       01837000
         AIF   ('&DSECT' EQ 'YES').L003B                                01838000
IXCYSRVR_TREQUEST DS 0D  parameters to describe a request that was     *01839000
                         sent to the server                             01840000
         AGO   .L003C                                                   01841000
.L003B   ANOP                                                           01842000
IXCYSRVR_TREQUEST DSECT   parameters to describe a request that was    *01843000
                         sent to the server                             01844000
.L003C   ANOP                                                           01845000
SXPLRQ_FUNCTION DS CL8   Function server is to perform for the sender. *01846000
                         Copy of FUNCTION from IXCSEND.                 01847000
SXPLRQ_DESCRIPTION DS CL32 Copy of DESCRIPTION from IXCSEND invocation *01848000
                         used by client to send the request             01849000
SXPLRQ_CLIENTLEVEL DS F  Level of client that sent the request. Copy   *01850000
                         of CLIENTLEVEL from IXCSEND.                   01851000
SXPLRQ_MINLEVEL DS F     Minimum server level specified by sender.     *01852000
                         Copy of sc_MinServerLevel value from IXCSEND  *01853000
                         CRITERIA.                                      01854000
SXPLRQ_MAXLEVEL DS F     Maximum server level specified by sender.     *01855000
                         Copy of sc_MaxServerLevel value from IXCSEND  *01856000
                         CRITERIA.                                      01857000
         DS    CL4       Reserved                                       01858000
SXPLRQ_FEATURES DS CL8   Features that the sender required the server  *01859000
                         to support. Mapped by ixcysrvr_tFeatures.     *01860000
                         Copy of sc_Features value from IXCSEND        *01861000
                         CRITERIA.                                      01862000
SXPLRQ_MSGDESC DS CL272  Metadata describing the message provided by   *01863000
                         the sender of the request. In particular, if  *01864000
                         the md_MsgAvailable flag is ON, the data      *01865000
                         descriptor (md_DataDesc) indicates where to   *01866000
                         find the text of the client request message.  *01867000
                         Mapped by ixcysrvr_tMsgDescriptor              01868000
IXCYSRVR_TREQUEST_LEN EQU *-IXCYSRVR_TREQUEST                           01869000
.L0039   ANOP                                                           01870000
         AIF   ('&IXCYSRVR_TRESPCODE' EQ 'NO').L003D                    01871000
         AIF   ('&DSECT' EQ 'YES').L003E                                01872000
         AIF   ('&IXCYSRVR_TRESPCODE' NE 'YES').L003D                   01873000
.L003E   ANOP                                                           01874000
*                                                                       01875000
* ********************************************************************  01876000
* *                                                                  *  01877000
* *  Response Codes                                                  *  01878000
* *                                                                  *  01879000
* *  Summary                                                         *  01880000
* *    A response code provides status information about the         *  01881000
* *    delivery of a client request.                                 *  01882000
* *                                                                  *  01883000
* *  Usage                                                           *  01884000
* *    Invoke IXCSEND SENDTO=SERVER to send a request to a server    *  01885000
* *    for processing.  If EXPECTREPLY=YES or a nonzero HOLDTIME     *  01886000
* *    value is specified, XCF will provide a response code for      *  01887000
* *    the request.  Invoke IXCRECV to obtain the request results.   *  01888000
* *    The metadata provided in the answer area (ANSAREA) will       *  01889000
* *    include the response code (td_RespCode, and rd_RespCode if    *  01890000
* *    applicable).                                                  *  01891000
* *                                                                  *  01892000
* *                                                                  *  01893000
* *  Explanation                                                     *  01894000
* *    The IXCSEND service is used to send a message, which may or   *  01895000
* *    may not expect a response.  The "response code" provided by   *  01896000
* *    the IXCRECV service is intended to provide information about  *  01897000
* *    the status of the message, and as applicable, its response.   *  01898000
* *    In some cases, the status is certain.  In others, the status  *  01899000
* *    is in doubt.  For example, if a message times out before a    *  01900000
* *    response is received, it may not be certain whether the       *  01901000
* *    target received, processed, or replied to the message.  The   *  01902000
* *    particulars could have implications with respect to how the   *  01903000
* *    sender should proceed.  Generally it is these "in doubt"      *  01904000
* *    cases that cause the most consternation as one cannot know    *  01905000
* *    what actually happened.                                       *  01906000
* *                                                                  *  01907000
* *    A response code contains two values.  The "primary response   *  01908000
* *    code" indicates what happened to the message and the          *  01909000
* *    "secondary response code" provides additional details.        *  01910000
* *                                                                  *  01911000
* *    Note that we have ommitted the "ixcysrvr_" prefix from the    *  01912000
* *    relevant response code constant names in the tables below.    *  01913000
* *                                                                  *  01914000
* *    Unless noted otherwise, the secondary response codes whose    *  01915000
* *    name contains "RC2_Send" are detected by the sending system,  *  01916000
* *    and those containing "RC2_Recv" are detected by the target    *  01917000
* *    system.                                                       *  01918000
* *                                                                     01919000
*                                                                       01920000
*   Primary.Secondary  Explanation                                      01921000
*   -----------------  ------------------------------------------------ 01922000
* o RC1_NotSent        Message was not sent to target.  Thus the        01923000
*                      target never processed the message and cannot    01924000
*                      possibly respond.  The secondary response code   01925000
*                      explains why the message was not sent.           01926000
*                                                                       01927000
*     .RC2_SendNoResources                                              01928000
*                      The sending system was unable to obtain the      01929000
*                      resources needed to process the message.  For    01930000
*                      example, the system is out of storage.           01931000
*     .RC2_SendFailure                                                  01932000
*                      The attempt to send the message to the target    01933000
*                      failed.                                          01934000
*     .RC2_SendTargetNotExist                                           01935000
*                      The target does not exist.  For example, the     01936000
*                      system on which the target resides is no longer  01937000
*                      active in the sysplex.                           01938000
*     .RC2_SendTargetDownLevel                                          01939000
*                      The target is not capable of processing the      01940000
*                      request.  For example, the target system does    01941000
*                      not support XCF Client/Server interfaces.        01942000
*     .RC2_SendTimedOut                                                 01943000
*                      The SENDTIME timeout value specified on the      01944000
*                      IXCSEND request expired before the message could 01945000
*                      be sent.                                         01946000
*     .RC2_SendCancelled                                                01947000
*                      The message was cancelled before it could be     01948000
*                      sent.  For example, the XCF Message Control      01949000
*                      Service (IXCMSGC) was invoked to force           01950000
*                      completion of the message (REQUEST=COMPLETION).  01951000
*     .RC2_SendReleased                                                 01952000
*                      The message was cancelled before it could be     01953000
*                      sent.  For example, the XCF Message Control      01954000
*                      Service (IXCMSGC) was invoked to force           01955000
*                      termination of the send (REQUEST=RELEASEMSG).    01956000
*                                                                       01957000
*                                                                       01958000
*   Primary.Secondary  Explanation                                      01959000
*   -----------------  ------------------------------------------------ 01960000
* o RC1_InProgress     The message was sent to the target.              01961000
*                                                                       01962000
*     .RC2_Unknown     XCF does not have any further information about  01963000
*                      about the message.  It may or may not have been  01964000
*                      delivered to the target.  If delivered to the    01965000
*                      target, the message may or may not have been     01966000
*                      processed successfully.  If processed, the       01967000
*                      target may or may not have sent a response.      01968000
*                      If a response was in fact sent, it has not       01969000
*                      been received by the sending system.             01970000
*                                                                       01971000
*                                                                       01972000
*   Primary.Secondary  Explanation                                      01973000
*   -----------------  ------------------------------------------------ 01974000
* o RC1_NoReceiver     There is no receiver for the message.  The       01975000
*                      system to which the message was sent indicates   01976000
*                      that the intended target was not found.          01977000
*                                                                       01978000
*     .RC2_RecvTargetNotExist                                           01979000
*                      The intended target does not exist.              01980000
*                      For example, no instances of the indicated       01981000
*                      server are defined on the target system.         01982000
*     .RC2_RecvTargetNotSuitable                                        01983000
*                      The intended target exists, but none of the      01984000
*                      defined instances are suitable receivers for     01985000
*                      the message.  For example, one or more           01986000
*                      instances of the indicated server exist on the   01987000
*                      target system, but none of them match the        01988000
*                      server selection criteria specified on the       01989000
*                      IXCSEND invocation (CLIENTLEVEL and CRITERIA).   01990000
*     .RC2_RecvTargetTerminated                                         01991000
*                      The intended target terminated before the        01992000
*                      message could be processed.  For example, a      01993000
*                      suitable instance of the indicated server        01994000
*                      existed on the target system when the message    01995000
*                      arrived, but all such instances terminated       01996000
*                      before the message could be processed.  Also     01997000
*                      includes the case where all the suitable         01998000
*                      instances have stop requests pending and are     01999000
*                      thus not eligible to process newly arriving      02000000
*                      requests.  So this code implies that a new       02001000
*                      server instance would need to be started in      02002000
*                      order for new requests to be processed, but it   02003000
*                      does not necessarily imply that there are no     02004000
*                      suitable server instances running.               02005000
*                                                                       02006000
*                                                                       02007000
*                                                                       02008000
*   Primary.Secondary  Explanation                                      02009000
*   -----------------  ------------------------------------------------ 02010000
* o RC1_NotDelivered   Message was not delivered to the target.         02011000
*                      Suitable targets exist, but the message was      02012000
*                      neither presented to nor processed by any of     02013000
*                      them.                                            02014000
*                                                                       02015000
*     .RC2_RecvNoResources                                              02016000
*                      The target system was unable to obtain the       02017000
*                      resources needed to process the message.  For    02018000
*                      example, the system is out of storage.           02019000
*     .RC2_RecvXcfError                                                 02020000
*                      An internal XCF error occurred.                  02021000
*     .RC2_RecvTargetNoWorkArea                                         02022000
*                      In preparation for presenting the message to     02023000
*                      the target, XCF asked the target to provide      02024000
*                      storage for a work area.  The target did not     02025000
*                      provide an acceptable work area.                 02026000
*                                                                       02027000
*     .RC2_RecvTargetError                                              02028000
*                      In preparation for presenting the message to     02029000
*                      the target, the target violated XCF interfaces   02030000
*                      and protocols.  For example, the target failed   02031000
*                      to provide accessible storage areas or           02032000
*                      otherwise violated the rules of engagement.      02033000
*     .RC2_RecvTargetTerminated                                         02034000
*                      While preparing to present the message to the    02035000
*                      target, the target instance failed               02036000
*                      before the message could be processed.           02037000
*                                                                       02038000
*                                                                       02039000
*   Primary.Secondary  Explanation                                      02040000
*   -----------------  ------------------------------------------------ 02041000
* o RC1_Delivered      The message was successfully delivered to the    02042000
*                      target.  The message may or may not have been    02043000
*                      processed correctly by the target.  If a         02044000
*                      response is expected, the response may or may    02045000
*                      not have been sent.  If a response was sent, it  02046000
*                      has not arrived.                                 02047000
*                                                                       02048000
*     .RC2_OK (=0)                                                      02049000
*                      The target server instance successfully returned 02050000
*                      to XCF when called to process the request.       02051000
*                      If a response was sent, it has not arrived.      02052000
*                                                                       02053000
*     .RC2 (user)      Any nonzero value is a secondary response code   02054000
*                      defined by the user.  It is a copy of the        02055000
*                      delivery code (SXPL_ResultCode) that was set     02056000
*                      by the target that received the message.         02057000
*                                                                       02058000
*                                                                       02059000
*                                                                       02060000
*   Primary.Secondary  Explanation                                      02061000
*   -----------------  ------------------------------------------------ 02062000
* o RC1_Refused        The target refused the message by setting        02063000
*                      a nonzero "refusal code".                        02064000
*                                                                       02065000
*                      When the target is a server, the server exit     02066000
*                      might have refused the request when called by    02067000
*                      XCF to get a work area (the request was not      02068000
*                      delivered) or it might have refused the          02069000
*                      request when called to actually process the      02070000
*                      request (so the request was delivered).  If the  02071000
*                      distinction between delivered and not            02072000
*                      delivered matters to the originator, then it     02073000
*                      is up to the server exit to set refusal codes    02074000
*                      that allow such distinctions to be made.         02075000
*                                                                       02076000
*     .RC2 (user)      The secondary response code is user defined      02077000
*                      and contains a copy of the refusal code          02078000
*                      (SXPL_RefusalCode) that was set by the target    02079000
*                      that received the message.                       02080000
*                                                                       02081000
*                                                                       02082000
*   Primary.Secondary  Explanation                                      02083000
*   -----------------  ------------------------------------------------ 02084000
* o RC1_Failed         A failure occurred.  The message may or may not  02085000
*                      have been processed correctly prior to the       02086000
*                      failure.  If the target or its agent did in      02087000
*                      fact send a response, the response was           02088000
*                      discarded by XCF.                                02089000
*                                                                       02090000
*     .RC2_RecvTargetTerminated                                         02091000
*                      The message was presented to the target.         02092000
*                      The target failed while processing the message.  02093000
*     .RC2_RecvTargetError                                              02094000
*                      The message was presented to the target.  While  02095000
*                      processing the request, the target violated XCF  02096000
*                      interfaces and protocols.  For example, the      02097000
*                      target set both sxpl_ResultCode and              02098000
*                      sxpl_RefusalCode to nonzero values.              02099000
*                                                                       02100000
*     .RC2_RecvXcfError                                                 02101000
*                      The message was presented to the target.         02102000
*                      An internal XCF error occurred.                  02103000
*     .RC2_RecvResponderTerminated                                      02104000
*                      The message was successfully delivered to the    02105000
*                      target.  The entity responsible for sending the  02106000
*                      response terminated.  In cases where the target  02107000
*                      system fails, this condition may be detected     02108000
*                      by the send side.                                02109000
*     .RC2_SendTargetNotExist                                           02110000
*                      The message was sent, but the target system      02111000
*                      terminated before XCF could determine the state  02112000
*                      of the message.  It may or may not have been     02113000
*                      presented to the target.                         02114000
*                                                                       02115000
*                                                                       02116000
*   Primary.Secondary  Explanation                                      02117000
*   -----------------  ------------------------------------------------ 02118000
* o RC1_Replied        Response received from target.                   02119000
*                                                                       02120000
*     .RC2_OK          The message was successfully delivered to the    02121000
*                      target.  The target or its agent sent a reply    02122000
*                      that was successfully received by the local      02123000
*                      system.                                          02124000
*                                                                       02125000
*                      Note that the target may or may not have failed  02126000
*                      after sending the reply.  Thus if the target     02127000
*                      sends a reply and continues to perform request   02128000
*                      related processing, receipt of the reply         02129000
*                      message will not necessarily imply that the      02130000
*                      request was processed successfully.              02131000
*                                                                       02132000
*                                                                    *  02133000
* ********************************************************************  02134000
*                                                                       02135000
*                                                                       02136000
         AIF   ('&DSECT' EQ 'YES').L003F                                02137000
IXCYSRVR_TRESPCODE DS 0X                                                02138000
         AGO   .L0040                                                   02139000
.L003F   ANOP                                                           02140000
IXCYSRVR_TRESPCODE DSECT                                                02141000
.L0040   ANOP                                                           02142000
RESPCODE_RC1 DS X        primary response code                          02143000
RESPCODE_RC2 DS X        secondary explanation of the response code     02144000
IXCYSRVR_RC1_UNKNOWN EQU 0                                              02145000
IXCYSRVR_RC1_NOTSENT EQU 1                                              02146000
IXCYSRVR_RC1_INPROGRESS EQU 2                                           02147000
IXCYSRVR_RC1_NORECEIVER EQU 3                                           02148000
IXCYSRVR_RC1_NOTDELIVERED EQU 4                                         02149000
IXCYSRVR_RC1_DELIVERED EQU 5                                            02150000
IXCYSRVR_RC1_REFUSED EQU 6                                              02151000
IXCYSRVR_RC1_FAILED EQU 7                                               02152000
IXCYSRVR_RC1_REPLIED EQU 8                                              02153000
IXCYSRVR_RC2_UNKNOWN EQU 0 unknown or not applicable                    02154000
IXCYSRVR_RC2_OK EQU 0                                                   02155000
IXCYSRVR_RC2_RECVTARGETOK EQU 0                                         02156000
IXCYSRVR_RC2_SENDNORESOURCES EQU 2                                      02157000
IXCYSRVR_RC2_SENDFAILURE EQU 3                                          02158000
IXCYSRVR_RC2_SENDTARGETNOTEXIST EQU 4                                   02159000
IXCYSRVR_RC2_SENDTARGETDOWNLEVEL EQU 5                                  02160000
IXCYSRVR_RC2_RECVTARGETNOTEXIST EQU 6                                   02161000
IXCYSRVR_RC2_RECVTARGETNOTSUITABLE EQU 7                                02162000
IXCYSRVR_RC2_RECVNORESOURCES EQU 8                                      02163000
IXCYSRVR_RC2_RECVXCFERROR EQU 9                                         02164000
IXCYSRVR_RC2_RECVTARGETNOWORKAREA EQU 10                                02165000
IXCYSRVR_RC2_RECVRESPONDERTERMINATED EQU 11                             02166000
IXCYSRVR_RC2_RECVTARGETERROR EQU 12                                     02167000
IXCYSRVR_RC2_RECVTARGETTERMINATED EQU 13                                02168000
IXCYSRVR_RC2_SENDTIMEDOUT EQU 14                                        02169000
IXCYSRVR_RC2_SENDCANCELLED EQU 15                                       02170000
IXCYSRVR_RC2_SENDRELEASED EQU 16                                        02171000
IXCYSRVR_TRESPCODE_LEN EQU *-IXCYSRVR_TRESPCODE                         02172000
.L003D   ANOP                                                           02173000
         AIF   ('&IXCYSRVR_TDATADESCRIPTOR' EQ 'NO').L0041              02174000
         AIF   ('&DSECT' EQ 'YES').L0042                                02175000
         AIF   ('&IXCYSRVR_TDATADESCRIPTOR' NE 'YES').L0041             02176000
.L0042   ANOP                                                           02177000
*                                                                       02178000
* ********************************************************************  02179000
* *                                                                  *  02180000
* *  Data Descriptor                                                 *  02181000
* *                                                                  *  02182000
* *  Summary                                                         *  02183000
* *    A data descriptor describes a contiguous storage area.        *  02184000
* *                                                                  *  02185000
* *                                                                  *  02186000
* *  Usage                                                           *  02187000
* *    - When a server exit routine is called to process a client    *  02188000
* *      request message for which the sender provided message data, *  02189000
* *      the data descriptor (md_DataDesc) within the message        *  02190000
* *      descriptor (SXPLRQ_MsgDesc) indicates the location of the   *  02191000
* *      message data.                                               *  02192000
* *    - To provide a work area for XCF to use, a server exit        *  02193000
* *      routine sets the data descriptor (wad_DataDesc) in the      *  02194000
* *      Server Exit Parameter List (SXPL_WAD).                      *  02195000
* *    - Issue IXCRECV to obtain the results of an IXCSEND           *  02196000
* *      SENDTO=SERVER request that specified EXPECTREPLY=YES.  In   *  02197000
* *      the answer area (ANSAREA) returned by IXCRECV, there will   *  02198000
* *      be a response descriptor (mapped by                         *  02199000
* *      ixcysrvr_tResponseDescriptor) for each valid target.  If a  *  02200000
* *      target sent a reply with message data, the data descriptor  *  02201000
* *      (md_DataDesc) within the message descriptor (rd_MsgDesc) of *  02202000
* *      the response descriptor for that target indicates the       *  02203000
* *      location in the data area (DATAAREA) where the message data *  02204000
* *      can be found.                                               *  02205000
* *                                                                  *  02206000
* *  Explanation                                                     *  02207000
* *    A data descriptor describes a contiguous storage area.        *  02208000
* *    The descriptor contains the address, ALET, and size of the    *  02209000
* *    storage area (expressed as number of bytes).                  *  02210000
* *                                                                  *  02211000
* *    In cases where the user is describing storage for XCF to use, *  02212000
* *    the ALET should either be hexadecimal zero (for storage that  *  02213000
* *    resides in the primary address space of the user) or it must  *  02214000
* *    resolve to a public entry on the dispatchable unit access     *  02215000
* *    list (DU-AL), or be for a common area data space.             *  02216000
* *                                                                  *  02217000
* *                                                                  *  02218000
* *                                                                  *  02219000
* ********************************************************************  02220000
*                                                                       02221000
*                                                                       02222000
         AIF   ('&DSECT' EQ 'YES').L0043                                02223000
IXCYSRVR_TDATADESCRIPTOR DS 0D Describes one contiguous block of       *02224000
                         virtual storage.                               02225000
         AGO   .L0044                                                   02226000
.L0043   ANOP                                                           02227000
IXCYSRVR_TDATADESCRIPTOR DSECT   Describes one contiguous block of     *02228000
                         virtual storage.                               02229000
.L0044   ANOP                                                           02230000
DD_DATASIZE DS F         Size in bytes of storage area                  02231000
DD_DATAALET DS F         ALET used to access storage                    02232000
DD_DATAADDR DS AD        Address of storage area                        02233000
IXCYSRVR_TDATADESCRIPTOR_LEN EQU *-IXCYSRVR_TDATADESCRIPTOR             02234000
.L0041   ANOP                                                           02235000
         AIF   ('&IXCYSRVR_TWORKAREADESCRIPTOR' EQ 'NO').L0045          02236000
         AIF   ('&DSECT' EQ 'YES').L0046                                02237000
         AIF   ('&IXCYSRVR_TWORKAREADESCRIPTOR' NE 'YES').L0045         02238000
.L0046   ANOP                                                           02239000
*                                                                       02240000
* ********************************************************************  02241000
* *                                                                  *  02242000
* *  Work Area Descriptor                                            *  02243000
* *                                                                  *  02244000
* *  Summary                                                         *  02245000
* *    A work area descriptor describes a "work area" that a server  *  02246000
* *    exit routine provides to XCF.  A work area is a contiguous    *  02247000
* *    storage area that XCF may use to store data that is to be     *  02248000
* *    processed by a server exit routine.                           *  02249000
* *                                                                  *  02250000
* *  Usage                                                           *  02251000
* *    - XCF calls a server exit routine to initialize itself.  On   *  02252000
* *      entry to the server exit, the SXPL_WAD is zero.  The server *  02253000
* *      exit routine obtains storage for a work area and updates    *  02254000
* *      the work area descriptor in the Server Exit Parameter List  *  02255000
* *      (SXPL_WAD) to provide a work area for XCF to use when       *  02256000
* *      delivering the next subsequent requests.                    *  02257000
* *                                                                  *  02258000
* *    - A clent invokes IXCSEND SENDTO=SERVER to send a request to  *  02259000
* *      the server.  XCF inspects the work area descriptor provided *  02260000
* *      by the server exit routine when it last returned to XCF.    *  02261000
* *      The work area is not big enough to contain the text of the  *  02262000
* *      client request message.  XCF calls the server exit routine  *  02263000
* *      to process a "get work area" request.  On entry to the      *  02264000
* *      server exit, the SXPL_WAD contains a copy of the work area  *  02265000
* *      descriptor that was last provided by the server exit.  The  *  02266000
* *      server exit disposes of the work described by SXPL_WAD,     *  02267000
* *      obtains a new work area of the size requested by XCF (per   *  02268000
* *      SXPLGW_TotalSize), updates the SXPL_WAD to describe the     *  02269000
* *      new work area, and returns to XCF.  XCF puts a copy of the  *  02270000
* *      client request in the work area, updates the SXPLRQ_MsgDesc *  02271000
* *      to indicate where the message data resides, and calls the   *  02272000
* *      server exit routine to process the message.  On entry to    *  02273000
* *      the server exit, SXPL_WAD contains a copy of the work area  *  02274000
* *      descriptor that was returned by server from                 *  02275000
* *      the "get work area" request.                                *  02276000
* *                                                                  *  02277000
* *    - A clent invokes IXCSEND SENDTO=SERVER to send a request to  *  02278000
* *      the server.  XCF inspects the work area descriptor provided *  02279000
* *      by the server exit routine when it last returned to XCF.    *  02280000
* *      The work area is big enough to contain the text of the      *  02281000
* *      client request message.  XCF puts a copy of the             *  02282000
* *      client request in the work area, updates the SXPLRQ_MsgDesc *  02283000
* *      to indicate where the message data resides, and calls the   *  02284000
* *      server exit routine to process the message.  On entry to    *  02285000
* *      the server exit, SXPL_WAD contains a copy of the work area  *  02286000
* *      descriptor that was provided by the server when it last     *  02287000
* *      returned to XCF.  The server exit processes the message.    *  02288000
* *      If XCF can continue to use the same work area for a         *  02289000
* *      subsequent request, the server exit leaves SXPL_WAD         *  02290000
* *      unchanged.  If XCF should not use the work area, the        *  02291000
* *      server exit updates the SXPL_WAD to either indicate that    *  02292000
* *      the work area is no longer available for use by XCF (resets *  02293000
* *      the WAD_Available flag) or updates the SXPL_WAD to describe *  02294000
* *      a new work area.  The server exit then returns to XCF.      *  02295000
* *                                                                  *  02296000
* *                                                                  *  02297000
* *    - XCF calls a server exit routine to perform some function.   *  02298000
* *      The server exit routine updates the work area descriptor in *  02299000
* *      the Server Exit Parameter List (SXPL_WAD) to provide (or    *  02300000
* *      retract) a work area for XCF to use (or not use) for        *  02301000
* *      subsequent requests.                                        *  02302000
* *                                                                  *  02303000
* *                                                                  *  02304000
* *  Explanation                                                     *  02305000
* *    A work area descriptor describes a "work area" that a server  *  02306000
* *    exit routine provides to XCF.  The "work area descriptor"     *  02307000
* *    contains a data descriptor (wad_DataDesc) that indicates the  *  02308000
* *    location and size of the work area.  The work area descriptor *  02309000
* *    also specifies the storage protect key (wad_StgKey) that XCF  *  02310000
* *    should use when storing into the work area.                   *  02311000
* *                                                                  *  02312000
* *                                                                  *  02313000
* *    Within the Server Exit Parameter List, the field SXPL_WAD     *  02314000
* *    contains the work area descriptor for the work area provided  *  02315000
* *    to XCF by the server exit.  The server exit routine updates   *  02316000
* *    the SXPL_WAD as appropriate each time it is called.  It can   *  02317000
* *    leave the SXPL_WAD unchanged to allow XCF to use the same     *  02318000
* *    work area for subsequent requests.  It can set the            *  02319000
* *    wad_Available flag to zero to indicate that XCF is not to use *  02320000
* *    the work area.  Updating the data descriptor (wad_DataDesc)   *  02321000
* *    to set the size of the work area (dd_DataSize) to zero is     *  02322000
* *    another way to indicate that no work area is available to     *  02323000
* *    XCF.  The server exit could also obtain a different work area *  02324000
* *    and then update the SXPL_WAD to describe the new storage      *  02325000
* *    area.  Note that the WAD_Available flag must be ON ('1'B) if  *  02326000
* *    XCF is to make use of the work area.                          *  02327000
* *                                                                  *  02328000
* *                                                                  *  02329000
* *    On entry to the server exit routine, SXPL_WAD contains a copy *  02330000
* *    of the descriptor that was specified when the server exit     *  02331000
* *    routine most recently returned to XCF.                        *  02332000
* *                                                                  *  02333000
* *    When calling the server exit routine to process a client      *  02334000
* *    request, XCF will have stored a copy of the message data (if  *  02335000
* *    any) in the work area designated by SXPL_WAD.  Note that the  *  02336000
* *    message data will be stored at offset 0 in the work area.     *  02337000
* *    Thus if the server requires that the message data be on a     *  02338000
* *    certain storage boundary (e.g., doubleword), it must ensure   *  02339000
* *    that the work area resides on that boundary.  Note that the   *  02340000
* *    server exit should use the size value (dd_dataSize) in the    *  02341000
* *    message descriptor (SXPLRQ_MsgDesc) to determine how much     *  02342000
* *    message data was actually stored in the work area.            *  02343000
* *                                                                  *  02344000
* *    The work area itself could be larger than the message data    *  02345000
* *    content, either because the server exit provided a larger     *  02346000
* *    work area than requested by XCF, or because XCF needed a work *  02347000
* *    area larger than the actual message data content.  If bytes   *  02348000
* *    in the work area beyond the message data content need to be   *  02349000
* *    set to a known state, the server exit must perform such       *  02350000
* *    initialization after it is called to process the request      *  02351000
* *    message.  XCF may have altered storage in the "white space"   *  02352000
* *    as part of preparing the request for delivery.                *  02353000
* *                                                                  *  02354000
* *                                                                  *  02355000
* *    Note that if WAD_Available is ON ('1'B), updates to reserved  *  02356000
* *    fields in the SXPL_WAD are not permitted.  If an invalid      *  02357000
* *    update is made, XCF will stop the offending server instance.  *  02358000
* *                                                                  *  02359000
* *                                                                  *  02360000
* ********************************************************************  02361000
*                                                                       02362000
*                                                                       02363000
         AIF   ('&DSECT' EQ 'YES').L0047                                02364000
IXCYSRVR_TWORKAREADESCRIPTOR DS 0D                                      02365000
         AGO   .L0048                                                   02366000
.L0047   ANOP                                                           02367000
IXCYSRVR_TWORKAREADESCRIPTOR DSECT                                      02368000
.L0048   ANOP                                                           02369000
WAD_CONTROLS DS 0CL4     Reserved                                       02370000
WAD_FLAGS DS   0CL1                                                     02371000
WAD_AVAILABLE EQU X'80'  ON if the data in this work area descriptor   *02372000
                         is valid for use (content can be used to      *02373000
                         locate work areas, if any). OFF implies that  *02374000
                         this work area descriptor is not to be used   *02375000
                         (no work area provided).                       02376000
         ORG   WAD_FLAGS+1                                              02377000
WAD_STGKEY DS  X         Storage key to be used when storing into the  *02378000
                         work area(s). The high order nibble contains  *02379000
                         the storage key, the low order nibble is      *02380000
                         ignored. For example, set 'kkkk' in the       *02381000
                         binary bit string 'kkkkxxxx'B to correspond   *02382000
                         to the desired storage key.                    02383000
         DS    H         Reserved.                                      02384000
         DS    CL12      Reserved                                       02385000
WAD_DATADESC DS CL16     Data descriptor indicating the storage        *02386000
                         location to be used as a work area. Mapped by *02387000
                         ixcysrvr_tDataDescriptor.                      02388000
IXCYSRVR_TWORKAREADESCRIPTOR_LEN EQU *-IXCYSRVR_TWORKAREADESCRIPTOR     02389000
.L0045   ANOP                                                           02390000
         AIF   ('&IXCYSRVR_TDDT' EQ 'NO').L0049                         02391000
         AIF   ('&DSECT' EQ 'YES').L004A                                02392000
         AIF   ('&IXCYSRVR_TDDT' NE 'YES').L0049                        02393000
.L004A   ANOP                                                           02394000
*                                                                       02395000
* ********************************************************************  02396000
* *                                                                  *  02397000
* *  Data Descriptor Table                                           *  02398000
* *                                                                  *  02399000
* *  Summary                                                         *  02400000
* *    A data descriptor table is an array of data descriptors.      *  02401000
* *                                                                  *  02402000
* *  Usage                                                           *  02403000
* *    Issue IXCRECV with DATADESC to obtain the results of an       *  02404000
* *    IXCSEND SENDTO=SERVER request that specified EXPECTREPLY=YES. *  02405000
* *    If LENDDENTRY equals 16, ixcysrvr_tDDT can be used to map     *  02406000
* *    data descriptor table specified by the DATADESC keyword.      *  02407000
* *    Each data descriptor in the table describes a contiguous      *  02408000
* *    storage location where the message data sent by a target      *  02409000
* *    server will be stored.                                        *  02410000
* *                                                                  *  02411000
* *                                                                  *  02412000
* *  Explanation                                                     *  02413000
* *    A data descriptor table is an array of data descriptors.      *  02414000
* *    Each entry in the array is a data descriptor (mapped by       *  02415000
* *    ixcysrvr_tDataDescriptor) that indicates the location and     *  02416000
* *    size of a contiguous storage area.                            *  02417000
* *                                                                  *  02418000
* *    This mapping can be used when creating an array that contains *  02419000
* *    only data descriptor entries (so each array entry is the size *  02420000
* *    of one data descriptor, which is to say 16 bytes).            *  02421000
* *                                                                  *  02422000
* *    Note that the IXCRECV service allows the array indicated by   *  02423000
* *    DATADESC to have entries longer than 16 bytes.  However, in   *  02424000
* *    such cases, the exploiter would have to define its own        *  02425000
* *    mapping for the table.                                        *  02426000
* *                                                                  *  02427000
* *                                                                  *  02428000
* ********************************************************************  02429000
*                                                                       02430000
*                                                                       02431000
         AIF   ('&DSECT' EQ 'YES').L004B                                02432000
IXCYSRVR_TDDT DS 0D      Data descriptor table. Used to describe       *02433000
                         multiple data areas. Each entry in the table  *02434000
                         contains a data descriptor for one contiguous *02435000
                         block of virtual storage.                      02436000
         AGO   .L004C                                                   02437000
.L004B   ANOP                                                           02438000
IXCYSRVR_TDDT DSECT      Data descriptor table. Used to describe       *02439000
                         multiple data areas. Each entry in the table  *02440000
                         contains a data descriptor for one contiguous *02441000
                         block of virtual storage.                      02442000
.L004C   ANOP                                                           02443000
DDT_ENTRY DS   CL16      Array of data descriptors, one for each data  *02444000
                         area. Mapped by ixcysrvr_tDataDescriptor.      02445000
IXCYSRVR_TDDT_LEN EQU *-IXCYSRVR_TDDT                                   02446000
.L0049   ANOP                                                           02447000
         AIF   ('&IXCYSRVR_TSRVRINFOAA' EQ 'NO').L004D                  02448000
         AIF   ('&DSECT' EQ 'YES').L004E                                02449000
         AIF   ('&IXCYSRVR_TSRVRINFOAA' NE 'YES').L004D                 02450000
.L004E   ANOP                                                           02451000
*                                                                       02452000
* ********************************************************************  02453000
* *                                                                  *  02454000
* * The following mappings explain the response data returned by     *  02455000
* * an IXCREQ REQUEST=SERVERINFO request in the DATAAREA of an       *  02456000
* * IXCRECV service call.  Data returned by an IXCREQ                *  02457000
* * REQUEST=SERVERINFO request is available via an IXCRECV service   *  02458000
* * call. See IXCREQ for information on using the IXCREQ service     *  02459000
* * to request services of the XCF Server.                           *  02460000
* *                                                                  *  02461000
* *                                                                  *  02462000
* *  See the ixcysrvr_tResponseDescriptor for details on             *  02463000
* *  addressing the response data from a target system.              *  02464000
* *                                                                  *  02465000
* *  *----------------------*  <- Address of the IXCRECV data area   *  02466000
* *  ! ixcysrvr_tSrvrInfoAA !     described by an rd_MsgDesc for     *  02467000
* *  *----------------------*     a response received from a         *  02468000
* *             ..                target system's XCF Server         *  02469000
* *             ..                                                   *  02470000
* *             ..                                                   *  02471000
* *  *----------------------*  <- Address of an SrvrInfoHR that      *  02472000
* *  ! ixcysrvr_tSrvrInfoHR !     defines a table of SrvrInfoDR      *  02473000
* *  *----------------------*     records                            *  02474000
* *             ..                                                   *  02475000
* *             ..                Address of SrvrInfoAA +            *  02476000
* *             ..                srvrIaa_OffsetHR                   *  02477000
* *             ..                                                   *  02478000
* *  *----------------------*  <- Address of first SrvrInfoDR in     *  02479000
* *  ! ixcysrvr_tSrvrInfoDR !     the table of SrvrInfoDR records    *  02480000
* *  *----------------------*                                        *  02481000
* *             ..                Address of SrvrInfoAA +            *  02482000
* *             ..                srvrIhr_OffsetHR field of an       *  02483000
* *             ..                SrvrInfoHR of srvrIhr_Type         *  02484000
* *             ..                SrvrInfoHR_kType_DR                *  02485000
* *             ..                                                   *  02486000
* *  *----------------------*  <- Address of an SrvrInfoHR that      *  02487000
* *  ! ixcysrvr_tSrvrInfoHR !     defines a table of SrvrInfoWIs     *  02488000
* *  *----------------------*     or SrvrInfoIRs for a server.       *  02489000
* *                               srvrIdr_#HeaderDataRecs defines    *  02490000
* *             ..                the number of SrvrInfoHR records   *  02491000
* *             ..                that can be found beginning at     *  02492000
* *                               offset srvrIdr_OffsetHR from       *  02493000
* *             ..                the start of the SrvrInfoAA record *  02494000
* *                                                                  *  02495000
* *             ..                Address of SrvrInfoAA +            *  02496000
* *             ..                srvrIdr_OffsetHR                   *  02497000
* *                                                                  *  02498000
* *  *----------------------*  <- Address of first SrvrInfoWI in     *  02499000
* *  ! ixcysrvr_tSrvrInfoWI !     the table of SrvrInfoWI records    *  02500000
* *  *----------------------*                                        *  02501000
* *                               Address of SrvrInfoAA +            *  02502000
* *             ..                srvrIhr_OffsetHR for data record   *  02503000
* *             ..                type SrvrInfoHR_kType_WI           *  02504000
* *                                                                  *  02505000
* *  *----------------------*  <- Next entry in the SrvrInfoWI table *  02506000
* *  ! ixcysrvr_tSrvrInfoWI !     is located by adding the address   *  02507000
* *  *----------------------*     of the first SrvrInfoWI table      *  02508000
* *                               entry + srvrIhr_Length for data    *  02509000
* *             ..                record type SrvrInfoHR_kType_WI    *  02510000
* *             ..                                                   *  02511000
* *                                                                  *  02512000
* *  *----------------------*  <- Address of second SrvrInfoDR       *  02513000
* *  ! ixcysrvr_tSrvrInfoDR !     is located by adding the           *  02514000
* *  *----------------------*     address of the first SrvrInfoDR +  *  02515000
* *                               srvrIhr_DataLen from the           *  02516000
* *                               SrvrInfoHR that defines the        *  02517000
* *                               table of SrvrInfoDR records        *  02518000
* *                                                                  *  02519000
* *                                                                  *  02520000
* *   An ixcysrvr_tSrvrInfoAA type record is returned for each       *  02521000
* *   successful IXCREQ SERVERINFO request from a target system. The *  02522000
* *   content of the remaining response data is determined by the    *  02523000
* *   request.                                                       *  02524000
* *                                                                  *  02525000
* *                                                                  *  02526000
* *   Data returned in DATAAREA for IXCREQ requests that:            *  02527000
* *                                                                  *  02528000
* *     - Specify INFOTYPE=SUMMARY or default to INFOTYPE=SUMMARY    *  02529000
* *                                                                  *  02530000
* *   Returns an ixcysrvr_tSrvrInfoAA type record and an             *  02531000
* *   ixcysrvr_tSrvrInfoHR type record that describes a table of     *  02532000
* *   ixcysrvr_tSrvrInfoDR records. The table will contain a         *  02533000
* *   ixcysrvr_tSrvrInfoDR record for each server defined on the     *  02534000
* *   target system. srvrIhr_#Records within the                     *  02535000
* *   ixcysrvr_tSrvrInfoHR record describing the table of            *  02536000
* *   ixcysrvr_tSrvrInfoDR records contains the number of            *  02537000
* *   ixcysrvr_tSrvrInfoDR records present in the response data.     *  02538000
* *                                                                  *  02539000
* *                                                                  *  02540000
* *   Data returned in DATAAREA for IXCREQ requests that:            *  02541000
* *                                                                  *  02542000
* *     - Specify INFOTYPE=SUMMARY, SERVER=xServer                   *  02543000
* *                                                                  *  02544000
* *   Returns an ixcysrvr_tSrvrInfoAA type record and an             *  02545000
* *   ixcysrvr_tSrvrInfoHR type record that describes a table of     *  02546000
* *   ixcysrvr_tSrvrInfoDR records. The table will contain a         *  02547000
* *   ixcysrvr_tSrvrInfoDR record for each server defined on the     *  02548000
* *   target system that matches the supplied xServer name pattern.  *  02549000
* *   srvrIhr_#Records within the ixcysrvr_tSrvrInfoHR record        *  02550000
* *   describing the table of ixcysrvr_tSrvrInfoDR records           *  02551000
* *   contains the number of ixcysrvr_tSrvrInfoDR records            *  02552000
* *   present in the response data.                                  *  02553000
* *                                                                  *  02554000
* *                                                                  *  02555000
* *   Data returned in DATAAREA for IXCREQ requests that:            *  02556000
* *                                                                  *  02557000
* *     - Specify INFOTYPE=SUMMARY, SERVERID=xServerID               *  02558000
* *                                                                  *  02559000
* *   Returns an ixcysrvr_tSrvrInfoAA type record and an             *  02560000
* *   ixcysrvr_tSrvrInfoHR type record that describes one (1)        *  02561000
* *   ixcysrvr_tSrvrInfoDR record for the specified xServerID        *  02562000
* *   in the response data.                                          *  02563000
* *                                                                  *  02564000
* *                                                                  *  02565000
* *   Data returned in DATAAREA for IXCREQ requests that:            *  02566000
* *                                                                  *  02567000
* *     - Specify INFOTYPE=WORK                                      *  02568000
* *                                                                  *  02569000
* *     - Returns the same set of records as an INFOTYPE=SUMMARY     *  02570000
* *       request to report on server definition information.        *  02571000
* *                                                                  *  02572000
* *       Note: when the SERVER or SERVERID keywords are provided,   *  02573000
* *       the returned information is limited to only the            *  02574000
* *       selected servers matching the specified Server Name        *  02575000
* *       pattern or the specific Server ID.                         *  02576000
* *                                                                  *  02577000
* *       Additonally, the following data record types are           *  02578000
* *       returned in the DATAAREA for INFOTYPE=WORK:                *  02579000
* *                                                                  *  02580000
* *     - an ixcysrvr_tSrvrInfoHR type record that describes a       *  02581000
* *       table of ixcysrvr_tSrvrInfoWI records. The                 *  02582000
* *       srvrIhr_Type field will contain the SrvrInfoHR_kType_WI    *  02583000
* *       constant value                                             *  02584000
* *                                                                  *  02585000
* *     - a ixcysrvr_tSrvrInfoWI record for the first and last       *  02586000
* *       server request on the server message queue and for each    *  02587000
* *       server request on the server message queue that is being   *  02588000
* *       processed by a server exit. If no server requests are      *  02589000
* *       currently on the server request queue, then the            *  02590000
* *       srvrIhr_#Records field of the ixcysrvr_tSrvrInfoHR type    *  02591000
* *       record describing a table of ixcysrvr_tSrvrInfoWI type     *  02592000
* *       records would be zero (0) indicating that no work items    *  02593000
* *       were found for the server.                                 *  02594000
* *                                                                  *  02595000
* *   Data returned in DATAAREA for IXCREQ requests that:            *  02596000
* *                                                                  *  02597000
* *     - Specify INFOTYPE=INSTANCE                                  *  02598000
* *                                                                  *  02599000
* *     - Returns the same set of records as an INFOTYPE=SUMMARY     *  02600000
* *       request to report on server definition information.        *  02601000
* *                                                                  *  02602000
* *       Note: when the SERVER or SERVERID keywords are provided,   *  02603000
* *       the returned information is limited to only the            *  02604000
* *       selected servers matching the specified Server Name        *  02605000
* *       pattern or the specific Server ID.                         *  02606000
* *                                                                  *  02607000
* *       Additonally, the following data record types are           *  02608000
* *       returned in the DATAAREA for INFOTYPE=INSTANCE:            *  02609000
* *                                                                  *  02610000
* *     - an ixcysrvr_tSrvrInfoHR type record that describes a       *  02611000
* *       table of ixcysrvr_tSrvrInfoIR records. The                 *  02612000
* *       srvrIhr_Type field will contain the SrvrInfoHR_kType_IR    *  02613000
* *       constant value                                             *  02614000
* *                                                                  *  02615000
* *     - a ixcysrvr_tSrvrInfoIR record for each instance of a       *  02616000
* *       a selected server on the target system.                    *  02617000
* *                                                                  *  02618000
* *                                                                  *  02619000
* ********************************************************************  02620000
* ********************************************************************  02621000
* *                                                                  *  02622000
* *        Answer Area record for IXCREQ REQUEST=SERVERINFO requests *  02623000
* *                                                                  *  02624000
* *        Server Info Answer Area returned by an IXCREQ             *  02625000
* *        REQUEST=SERVERINFO request. One Server Info Answer        *  02626000
* *        Area is returned from a target server for an              *  02627000
* *        IXCREQ REQUEST=SERVERINFO starting at offset zero (0)     *  02628000
* *        of the storage location described by the rd_MsgDesc in    *  02629000
* *        the response descriptor record returned by IXCRECV.       *  02630000
* *                                                                  *  02631000
* ********************************************************************  02632000
*                                                                       02633000
*                                                                       02634000
         AIF   ('&DSECT' EQ 'YES').L004F                                02635000
IXCYSRVR_TSRVRINFOAA DS 0D Answer Area for response data returned by   *02636000
                         an IXCREQ SERVERINFO request in an IXCRECV    *02637000
                         DATAAREA                                       02638000
         AGO   .L0050                                                   02639000
.L004F   ANOP                                                           02640000
IXCYSRVR_TSRVRINFOAA DSECT   Answer Area for response data returned by *02641000
                         an IXCREQ SERVERINFO request in an IXCRECV    *02642000
                         DATAAREA                                       02643000
.L0050   ANOP                                                           02644000
SRVRIAA_VERSION DS X     Version of this SrvrInfoAA mapping             02645000
         DS    CL1       Reserved.                                      02646000
SRVRIAA_AALEN DS H       Length of this SrvrInfoAA mapping              02647000
SRVRIAA_RESPLEVEL DS F   Response level of SERVERINFO response data    *02648000
                         supplied by the target system                  02649000
SRVRIAA_DATAAREASIZE DS F Total number of bytes of response data       *02650000
                         returned for the SERVERINFO request from the  *02651000
                         target described by the corresponding target  *02652000
                         descriptor record. This value includes the    *02653000
                         SrvrInfoAA record                              02654000
SRVRIAA_LENGTHHR DS F    Length in bytes of a SrvrInfoHR record in the *02655000
                         response area                                  02656000
SRVRIAA_#HEADERRECS DS F Number of SrvrInfoHR records that can be      *02657000
                         found beginning at offset srvrIaa_OffsetHR    *02658000
                         from the start of the SrvrInfoAA record. The  *02659000
                         SrvrInfoHR records found will describe the    *02660000
                         following record types: - SrvrInfoHR_kType_DR  02661000
SRVRIAA_OFFSETHR DS F    Offset from the start of the SrvrInfoAA       *02662000
                         record at which the first SrvrInfoHR record   *02663000
                         can be found. Valid only when                 *02664000
                         srvrIaa_#HeaderRecs is not zero (0).           02665000
IXCYSRVR_KSRVRIAA_VERSION0 EQU 0                                        02666000
*                                                                       02667000
* ********************************************************************  02668000
* *                                                                  *  02669000
* *  XCF Server Task                                                 *  02670000
* *                                                                  *  02671000
* *    XCF has implemented a server that can process requests that   *  02672000
* *    are formulated by the IXCREQ macro.  One invokes the IXCREQ   *  02673000
* *    macro to create the message content for a request, then       *  02674000
* *    invokes IXCSEND to send that message (request) to the XCF     *  02675000
* *    server.  The XCF server will process the request and send the *  02676000
* *    results back.  The client would then invoke IXCRECV to obtain *  02677000
* *    the results.                                                  *  02678000
* *                                                                  *  02679000
* *    See the IXCREQ macro for additional information, including    *  02680000
* *    the supported requests.                                       *  02681000
* *                                                                  *  02682000
* *    The XCF Server Name can be defined as follows:                *  02683000
* *                                                                  *  02684000
* * IXCYSRVR_XCFSERVERNAME DC CL32'SYSXCF  IXCREQ                  ' *  02685000
* *                                                                  *  02686000
* ********************************************************************  02687000
* ********************************************************************  02688000
* * The following declares will generate EQU statements in assembler *  02689000
* * to allow the use of equates to define constants or construct     *  02690000
* * variables that can be used when sending a server request to      *  02691000
* * the XCF Server. For example, one can use literal notation and    *  02692000
* * concatenate the EQUs together and assign a character string      *  02693000
* * representing the XCF Server or Server function to local storage  *  02694000
* *                                                                  *  02695000
* *      MVC   ServFunc,=A(IXCYSRVR_SFunc1,ixcysrvr_SFunc2)          *  02696000
* *                                                                  *  02697000
* *      Results: ServFunc contains C'SRVRINFO'                      *  02698000
* *                                                                  *  02699000
* * ServFunc DS CL8                                                  *  02700000
* * IXCYSRVR_SFUNC1 EQU C'SRVR'                                      *  02701000
* * IXCYSRVR_SFUNC2 EQU C'INFO'                                      *  02702000
* *                                                                  *  02703000
* **************************************************************        02704000
*                                                                       02705000
*                                                                       02706000
IXCYSRVR_SNAME1 EQU C'SYSX' XCF Server Name                             02707000
IXCYSRVR_SNAME2 EQU C'CF  '                                             02708000
IXCYSRVR_SNAME3 EQU C'IXCR'                                             02709000
IXCYSRVR_SNAME4 EQU C'EQ  '                                             02710000
IXCYSRVR_SFUNC1 EQU C'SRVR' SRVRINFO Function                           02711000
IXCYSRVR_SFUNC2 EQU C'INFO'                                             02712000
IXCYSRVR_TSRVRINFOAA_LEN EQU *-IXCYSRVR_TSRVRINFOAA                     02713000
.L004D   ANOP                                                           02714000
         AIF   ('&IXCYSRVR_TSRVRINFOHR' EQ 'NO').L0051                  02715000
         AIF   ('&DSECT' EQ 'YES').L0052                                02716000
         AIF   ('&IXCYSRVR_TSRVRINFOHR' NE 'YES').L0051                 02717000
.L0052   ANOP                                                           02718000
*                                                                       02719000
*   The following two declares are only for PL/X. Generation of         02720000
*   DC statements is not supported by CBGEN.                            02721000
*                                                                       02722000
*                                                                       02723000
         AIF   ('&DSECT' EQ 'YES').L0053                                02724000
IXCYSRVR_TSRVRINFOHR DS 0F Mapping for header records that describe    *02725000
                         record types returned by an IXCREQ SERVERINFO *02726000
                         request in an IXCRECV DATAAREA                 02727000
         AGO   .L0054                                                   02728000
.L0053   ANOP                                                           02729000
IXCYSRVR_TSRVRINFOHR DSECT   Mapping for header records that describe  *02730000
                         record types returned by an IXCREQ SERVERINFO *02731000
                         request in an IXCRECV DATAAREA                 02732000
.L0054   ANOP                                                           02733000
SRVRIHR_TYPE DS X        Type of data record                            02734000
SRVRIHR_LEVEL DS X       Level of the data record type                  02735000
SRVRIHR_LENGTH DS H      Length in bytes of the data record type        02736000
SRVRIHR_#RECORDS DS F    Number of data records of srvrIhr_Type that   *02737000
                         are included in the response area returned by *02738000
                         the target XCF Server                          02739000
SRVRIHR_OFFSETHR DS F    Offset from the start of the SrvrInfoAA       *02740000
                         record where the first data record of type    *02741000
                         srvrIhr_Type can be found. Valid when         *02742000
                         srvrIhr_#Records is not zero (0).              02743000
SRVRINFOHR_KTYPE_DR EQU 1 Definition record                             02744000
SRVRINFOHR_KTYPE_WI EQU 2 Work Item record                              02745000
SRVRINFOHR_KTYPE_IR EQU 3 Instance record                               02746000
IXCYSRVR_KSRVRIHR_LEVEL0 EQU 0                                          02747000
IXCYSRVR_TSRVRINFOHR_LEN EQU *-IXCYSRVR_TSRVRINFOHR                     02748000
.L0051   ANOP                                                           02749000
         AIF   ('&IXCYSRVR_TSRVRINFODR' EQ 'NO').L0055                  02750000
         AIF   ('&DSECT' EQ 'YES').L0056                                02751000
         AIF   ('&IXCYSRVR_TSRVRINFODR' NE 'YES').L0055                 02752000
.L0056   ANOP                                                           02753000
*                                                                       02754000
* ********************************************************************  02755000
* *                                                                  *  02756000
* *        Server Definition Record returned by an IXCREQ            *  02757000
* *        REQUEST=SERVERINFO request. One Server Data Record        *  02758000
* *        is returned for each server found on the target system    *  02759000
* *                                                                  *  02760000
* *   Examples:                                                      *  02761000
* *                                                                  *  02762000
* *        First SrvrInfoDR is located as follows:                   *  02763000
* *          hrPtr = addr(SrvrInfoAA) + srvrIaa_OffsetHR of a        *  02764000
* *          SrvrInfoHR record with srvrIhr_Type of                  *  02765000
* *          SrvrInfoHR_kType_DR                                     *  02766000
* *                                                                  *  02767000
* *          drPtr = addr(SrvrInfoAA) + hrPtr -> srvrIhr_OffsetHR    *  02768000
* *                                                                  *  02769000
* *        Subsequent SrvrInfoDRs are located as follows:            *  02770000
* *          drPtr = drPtr + hrPtr -> srvrIhr_Length of an           *  02771000
* *          SrvrInfoHR record with a srvrIhr_Type of                *  02772000
* *          SrvrInfoHR_kType_DR                                     *  02773000
* *                                                                  *  02774000
* ********************************************************************  02775000
*                                                                       02776000
*                                                                       02777000
         AIF   ('&DSECT' EQ 'YES').L0057                                02778000
IXCYSRVR_TSRVRINFODR DS 0D Server Definition Record                     02779000
         AGO   .L0058                                                   02780000
.L0057   ANOP                                                           02781000
IXCYSRVR_TSRVRINFODR DSECT   Server Definition Record                   02782000
.L0058   ANOP                                                           02783000
SRVRIDR_DATALEN DS F     Total number of bytes of data returned for    *02784000
                         this server definition. Add this length to    *02785000
                         the address of the current SrvrInfoDR to      *02786000
                         locate the next SrvrInfoDR in the response    *02787000
                         data                                           02788000
SRVRIDR_SERVERNAME DS CL32 Name of a Server on the target system.      *02789000
                         Mapped by ixcysrvr_tName                       02790000
SRVRIDR_#REQUESTSPROCESSED DS F Cumulative count of requests processed *02791000
                         by the server since the server was defined.    02792000
SRVRIDR_#REQUESTSPENDING DS F Count of server requests waiting to be   *02793000
                         bound to a server instance for processing      02794000
SRVRIDR_#REQUESTSWORKING DS F Count of server requests currently being *02795000
                         worked on by server exits for the server       02796000
SRVRIDR_#SRVRINSTANCES DS F the total number of server instances for   *02797000
                         this server that are defined on the target    *02798000
                         system. Valid for all INFOTYPEs                02799000
SRVRIDR_#HEADERDATARECS DS F Number of SrvrInfoHR records that can be  *02800000
                         found beginning at offset srvrIdr_OffsetHR    *02801000
                         from the start of the SrvrInfoAA record. The  *02802000
                         SrvrInfoHR records found will describe the    *02803000
                         following record types: - SrvrInfoHR_kType_WI *02804000
                         - SrvrInfoHR_kType_IR                          02805000
SRVRIDR_OFFSETHR DS F    Offset from the start of the SrvrInfoAA       *02806000
                         record at which the first SrvrInfoHR record   *02807000
                         can be found. Valid when                      *02808000
                         srvrIdr_#HeaderDataRecs is not zero (0).       02809000
SRVRIDR_ETODWHENCOLLECTED DS CL16 16 byte extended TOD that denotes    *02810000
                         the time of day that the data for this server *02811000
                         was collected on the target system             02812000
SRVRIDR_FLAGS DS 0CL2    Server Flags                                   02813000
SRVRIDR_WISTALLED EQU X'80' '1'B, a work item associated with the      *02814000
                         server definition appears to be stalled in    *02815000
                         its processing                                 02816000
SRVRIDR_IRSTALLED EQU X'40' '1'B, an instance associated with the      *02817000
                         server definition appears to be stalled in    *02818000
                         its processing                                 02819000
SRVRIDR_SS_IMPACT EQU X'20' '1', at least one of the defined server    *02820000
                         instances for this server appears to be       *02821000
                         contributing to sympathy sickness in the      *02822000
                         sysplex                                        02823000
         ORG   SRVRIDR_FLAGS+2                                          02824000
         DS    CL2       Unused (zeros)                                 02825000
IXCYSRVR_TSRVRINFODR_LEN EQU *-IXCYSRVR_TSRVRINFODR                     02826000
.L0055   ANOP                                                           02827000
         AIF   ('&IXCYSRVR_TSRVRINFOWI' EQ 'NO').L0059                  02828000
         AIF   ('&DSECT' EQ 'YES').L005A                                02829000
         AIF   ('&IXCYSRVR_TSRVRINFOWI' NE 'YES').L0059                 02830000
.L005A   ANOP                                                           02831000
*                                                                       02832000
* ********************************************************************  02833000
* *                                                                  *  02834000
* *     Server Work Item (WI) record.  Information returned on a     *  02835000
* *     REQUEST=SERVERINFO, INFOTYPE=WORK request. A Server Work     *  02836000
* *     Item record is returned for the first and last server        *  02837000
* *     request on the server message queue and for each server      *  02838000
* *     request on the server message queue that is being processed  *  02839000
* *     by a server instance server exit.                            *  02840000
* *                                                                  *  02841000
* *     The first SrvrInfoWI record is the oldest server work item   *  02842000
* *     on the server message queue. The last SrvrInfoWI record is   *  02843000
* *     the most recently received server work item for the server.  *  02844000
* *     All SrvrInfoWI records in between the first and last         *  02845000
* *     SrvrInfoWI records represent server requests currently       *  02846000
* *     being processed by server instance server exits. The first   *  02847000
* *     and last SrvrInfoWI records may represent work items         *  02848000
* *     currently being processed or pending processing.             *  02849000
* *                                                                  *  02850000
* *                                                                  *  02851000
* *   Examples:                                                      *  02852000
* *                                                                  *  02853000
* *        First SrvrInfoWI is located as follows:                   *  02854000
* *          hrPtr = addr(SrvrInfoAA) + srvrIdr_OffsetHR to locate   *  02855000
* *          a SrvrInfoHR record with srvrIhr_Type of                *  02856000
* *          SrvrInfoHR_kType_WI                                     *  02857000
* *                                                                  *  02858000
* *          wiPtr = addr(SrvrInfoAA) + hrPtr -> srvrIhr_OffsetHR    *  02859000
* *                                                                  *  02860000
* *        Subsequent SrvrInfoWIs are located as follows:            *  02861000
* *          wiPtr = wiPtr + hrPtr -> srvrIhr_Length of an           *  02862000
* *          SrvrInfoHR record with a srvrIhr_Type of                *  02863000
* *          SrvrInfoHR_kType_WI                                     *  02864000
* *                                                                  *  02865000
* *        Last SrvrInfoWI can be located directly as follows:       *  02866000
* *          wiPtr = wiPtr + hrPtr -> srvrIhr_Length *               *  02867000
* *                   (hrPtr -> srvrIhr_#Records - 1)                *  02868000
* *                                                                  *  02869000
* ********************************************************************  02870000
*                                                                       02871000
*                                                                       02872000
         AIF   ('&DSECT' EQ 'YES').L005B                                02873000
IXCYSRVR_TSRVRINFOWI DS 0D Server Work Item information returned by an *02874000
                         IXCREQ SERVERINFO request in an IXCRECV       *02875000
                         DATAAREA                                       02876000
         AGO   .L005C                                                   02877000
.L005B   ANOP                                                           02878000
IXCYSRVR_TSRVRINFOWI DSECT   Server Work Item information returned by  *02879000
                         an IXCREQ SERVERINFO request in an IXCRECV    *02880000
                         DATAAREA                                       02881000
.L005C   ANOP                                                           02882000
SRVRIWI_WORKITEMSEQ# DS F Sequence number of the server work item on   *02883000
                         the server message queue                       02884000
SRVRIWI_WORKITEMTOKEN DS A 4 byte token of the the server work item on *02885000
                         the server message queue                       02886000
SRVRIWI_WORKITEMETOD DS CL16 16 byte extended TOD of the server work   *02887000
                         item on the server message queue. This is the *02888000
                         TOD that the request was received by the      *02889000
                         target system                                  02890000
SRVRIWI_SERVERID DS CL16 If nonzero, the SERVER ID of the server       *02891000
                         instance that is either supposed to process   *02892000
                         the request (as might be the case when the    *02893000
                         request is targeted to a specific server      *02894000
                         instance), or has been selected to process    *02895000
                         the request. If zero, the request has not yet *02896000
                         been assigned to a server instance for        *02897000
                         processing.                                    02898000
SRVRIWI_WORKITEMTYPE DS F Type of server work item.                     02899000
SRVRIWI_WORKITEMSTATE DS X State of the server work item on the server *02900000
                         message queue. See constants for possible     *02901000
                         values                                         02902000
SRVRIWI_STATUSFLAGS DS 0CL1                                             02903000
SRVRIWI_WORKITEMSTALLED EQU X'80' '1'B if the work item appears to be  *02904000
                         stalled                                        02905000
         ORG   SRVRIWI_STATUSFLAGS+1                                    02906000
         DS    CL2                                                      02907000
IXCYSRVR_TSRVRINFOWI_LEN EQU *-IXCYSRVR_TSRVRINFOWI                     02908000
.L0059   ANOP                                                           02909000
         AIF   ('&IXCYSRVR_TSRVRINFOIR' EQ 'NO').L005D                  02910000
         AIF   ('&DSECT' EQ 'YES').L005E                                02911000
         AIF   ('&IXCYSRVR_TSRVRINFOIR' NE 'YES').L005D                 02912000
.L005E   ANOP                                                           02913000
*                                                                       02914000
* ********************************************************************  02915000
* *                                                                  *  02916000
* *        Server Instance Record (IR). Information returned on a    *  02917000
* *        REQUEST=SERVERINFO, INFOTYPE=INSTANCE request. A Server   *  02918000
* *        instance record is returned for each "instance" of the    *  02919000
* *        server found on the target system.                        *  02920000
* *                                                                  *  02921000
* *        First SrvrInfoIR is located as follows:                   *  02922000
* *                                                                  *  02923000
* *        - hrPtr = addr(SrvrInfoAA) + srvrIdr_OffsetHR to locate   *  02924000
* *          a SrvrInfoHR record with srvrIhr_Type of                *  02925000
* *          SrvrInfoHR_kType_IR                                     *  02926000
* *                                                                  *  02927000
* *        - irPtr = addr(SrvrInfoAA) + hrPtr -> srvrIhr_OffsetHR    *  02928000
* *                                                                  *  02929000
* *        Subsequent SrvrInfoIRs are located as follows:            *  02930000
* *                                                                  *  02931000
* *        - irPtr = irPtr + hrPtr -> srvrIhr_Length of an           *  02932000
* *          SrvrInfoHR record with a srvrIhr_Type of                *  02933000
* *          SrvrInfoHR_kType_IR                                     *  02934000
* *                                                                  *  02935000
* ********************************************************************  02936000
*                                                                       02937000
*                                                                       02938000
         AIF   ('&DSECT' EQ 'YES').L005F                                02939000
IXCYSRVR_TSRVRINFOIR DS 0D Server Instance information returned by an  *02940000
                         IXCREQ SERVERINFO request in an IXCRECV       *02941000
                         DATAAREA                                       02942000
         AGO   .L0060                                                   02943000
.L005F   ANOP                                                           02944000
IXCYSRVR_TSRVRINFOIR DSECT   Server Instance information returned by   *02945000
                         an IXCREQ SERVERINFO request in an IXCRECV    *02946000
                         DATAAREA                                       02947000
.L0060   ANOP                                                           02948000
SRVRIIR_SERVERDESC DS CL32 Server Description provided on the IXCSRVR  *02949000
                         START                                          02950000
SRVRIIR_SERVERID DS CL16 Server ID that uniquely identifies a server   *02951000
                         instance                                       02952000
SRVRIIR_JOBNAME DS CL8   Job name under which server instance task is  *02953000
                         running                                        02954000
SRVRIIR_MINSERVERLEVEL DS F MINLEVEL as specified on the IXCSRVR START *02955000
                         for this server instance                       02956000
SRVRIIR_MAXSERVERLEVEL DS F MAXLEVEL as specified on the IXCSRVR START *02957000
                         for this server instance                       02958000
SRVRIIR_MINCLIENTLEVEL DS F MINCLIENT as specified on the IXCSRVR      *02959000
                         START for this server instance                 02960000
SRVRIIR_MAXCLIENTLEVEL DS F MAXCLIENT as specified on the IXCSRVR      *02961000
                         START for this server instance                 02962000
SRVRIIR_FEATURES DS CL8  Features as identified on IXCSRVR START for   *02963000
                         this server instance. Mapped by               *02964000
                         ixcysrvr_tFeatures                             02965000
SRVRIIR_EXIT@ DS A       Address of the server exit routine             02966000
SRVRIIR_INFO DS CL64     Server "INFO". Static data specified when     *02967000
                         server was started.                            02968000
SRVRIIR_FDI DS F         Server FDI as specified on the IXCSRVR START   02969000
SRVRIIR_RESPBIND DS F    Type of response recovery bind in affect for  *02970000
                         this server. See ixcysrvr_kRespBind*          *02971000
                         constants                                      02972000
SRVRIIR_RESPSTOKEN DS CL8 STOKEN of address space responsible for      *02973000
                         sending responses on behalf of this server    *02974000
                         instance. Applies if srvrIir_RespBind         *02975000
                         contains ixcysrvr_kRespBind_AddrSpace          02976000
SRVRIIR_SERVERASID DS H  ASID of the task that instantiated this       *02977000
                         server instance                                02978000
         DS    CL2       Reserved                                       02979000
SRVRIIR_TTOKEN DS CL16   TTOKEN that identifies the task that          *02980000
                         instantiates this server instance              02981000
SRVRIIR_TCB@ DS A        TCB address that identifies the task that     *02982000
                         instantiates this server instance              02983000
SRVRIIR_#REQUESTS DS F   Number of requests presented to this server   *02984000
                         instance                                       02985000
SRVRIIR_ETODWHENSTARTED DS CL16 16 byte extended TOD when this server  *02986000
                         was instantiated                               02987000
SRVRIIR_ETODWHENIDLE DS CL16 16 byte extended TOD when this server     *02988000
                         last entered an idle state waiting for more   *02989000
                         work                                           02990000
SRVRIIR_ETODWHENNOTIFIED DS CL16 16 byte extended TOD when the server  *02991000
                         instance was last notified that work items    *02992000
                         were available for processsing                 02993000
SRVRIIR_ETODWHENFINDWORK DS CL16 16 byte extended TOD when the server  *02994000
                         instance last began seaching for new work to  *02995000
                         process                                        02996000
SRVRIIR_ETODWHENGOTWORK DS CL16 16 byte extended TOD when a request    *02997000
                         was last bound to this server instance for    *02998000
                         processing                                     02999000
SRVRIIR_ETODWHENSTOPACCEPTED DS CL16 16 byte extended TOD when a stop  *03000000
                         request was first accepted for this server     03001000
SRVRIIR_USERSTATE DS CL64 Server "state" as reported by the server     *03002000
                         exit via the SXPL                              03003000
SRVRIIR_INFODATA DS CL64 Server defined static information provided on *03004000
                         the INFO keyword of the IXCSRVR START request *03005000
                         for the server instance                        03006000
SRVRIIR_CURRENTWORKITEM DS 0CL140 Information in this section valid    *03007000
                         when srvrIir_WorkItemToken is non zero.        03008000
SRVRIIR_WORKITEMTYPE DS F Type of work item being processed.            03009000
SRVRIIR_MSGID DS CL16    16 byte MSGID provided by the sender when     *03010000
                         IXCSEND was invoked to send this message.      03011000
SRVRIIR_FUNCTION DS CL8  8 byte FUNCTION provided by the sender when   *03012000
                         IXCSEND was invoked to send the request        03013000
SRVRIIR_WORKITEMDESC DS CL32 32 byte DESCRIPTION provided by the       *03014000
                         sender when IXCSEND was invoked to send the   *03015000
                         request                                        03016000
SRVRIIR_ETODWHENARRIVED DS CL16 16 byte extended TOD when the item the *03017000
                         server exit is working on arrived              03018000
SRVRIIR_ETODWHENEXITCALLED DS CL16 16 byte extended TOD when XCF last  *03019000
                         called server exit routine                     03020000
SRVRIIR_ETODWHENEXITRETURNED DS CL16 16 byte extended when server exit *03021000
                         last returned to XCF                           03022000
SRVRIIR_WORKITEMSEQ# DS F Sequence number of the current server        *03023000
                         request being worked on by the server         *03024000
                         instance                                       03025000
SRVRIIR_WORKITEMTOKEN DS A 4 byte token that represents the current    *03026000
                         server request being worked on by the server  *03027000
                         instance                                       03028000
SRVRIIR_CLIENTLEVEL DS F Level of the client that sent the request as  *03029000
                         specified on the IXCSEND request               03030000
SRVRIIR_REQUESTCRITERIA DS CL20                                         03031000
*                                                                       03032000
*                                      the range of server levels and   03033000
*                                      set of features that the         03034000
*                                      server must support to process   03035000
*                                      this request as specified on     03036000
*                                      the IXCSEND request. Mapped by   03037000
*                                      ixcysrvr_tCriteria               03038000
*                                                                       03039000
SRVRIIR_STATUS DS 0CL4   Server instance status information from an    *03040000
                         XCF system management perspective              03041000
SRVRIIR_STATUSCODE DS X  Server instance status from an XCF            *03042000
                         perspective. See ixcysrvr_kIrxxxx constants   *03043000
                         for possible values                            03044000
SRVRIIR_STATUSFLAGS DS 0CL1                                             03045000
SRVRIIR_STOPNORMALLY EQU X'80' '1'B if the server is finishing pending *03046000
                         work before shutting down. '0'B if the server *03047000
                         is stopping immediately without processing    *03048000
                         queued work. This field is valid only when    *03049000
                         srvrIir_ETodWhenStopAccepted is non-zero       03050000
SRVRIIR_STALLED EQU X'40' '1'B if the server instance appears to be    *03051000
                         stalled                                        03052000
SRVRIIR_SS_IMPACT EQU X'20' '1'B if the server instance appears to be  *03053000
                         contributing to sympathy sickness in the      *03054000
                         sysplex                                        03055000
         ORG   SRVRIIR_STATUSFLAGS+1                                    03056000
         DS    CL1       Unused (zero)                                  03057000
SRVRIIR_WHYSTOP DS X     Internal XCF information identifying why a    *03058000
                         server instance stopped. This field is valid  *03059000
                         only when srvrIir_ETodWhenStopAccepted is     *03060000
                         non-zero                                       03061000
IXCYSRVR_KIRSTARTING EQU 1 The server instance is in the process of    *03062000
                         starting and initializing.                     03063000
IXCYSRVR_KIRPREPARING EQU 2 The server instance is preparing to        *03064000
                         process a newly assigned work item             03065000
IXCYSRVR_KIRWORKING EQU 3 The server instance is working on a request   03066000
IXCYSRVR_KIRCOMPLETING EQU 4 The server instance is completing work     03067000
IXCYSRVR_KIRIDLE EQU 5   The server instance is waiting for work to be *03068000
                         assigned to the instance                       03069000
IXCYSRVR_KIRNOTIFIED EQU 6 The server instance has been notified that  *03070000
                         pending work is available to be processed      03071000
IXCYSRVR_KIRFINDWORK EQU 7 The server instance is searching for a new  *03072000
                         request to process                             03073000
IXCYSRVR_KIRSTOPPING EQU 8 The server instance is marked to be         *03074000
                         stopped.                                       03075000
IXCYSRVR_KIRUNKNOWNWORK EQU 254 The status of the server instance is   *03076000
                         unknown because the server instance is        *03077000
                         processing work that is not recognized by XCF  03078000
IXCYSRVR_KIRUNKNOWN EQU 255 The status of the server instance is       *03079000
                         unknown                                        03080000
IXCYSRVR_KREQUEST EQU 1  The work item is a client request for a       *03081000
                         server                                         03082000
IXCYSRVR_KWIPENDING EQU 1 The work item is pending processing.          03083000
IXCYSRVR_KWIPREPARING EQU 2 The work item is assigned to a server      *03084000
                         instance but the server exit has not been     *03085000
                         presented with the work item yet               03086000
IXCYSRVR_KWIWORKING EQU 3 The work item is assigned to a server        *03087000
                         instance and being worked on                   03088000
IXCYSRVR_KWICOMPLETING EQU 4 The work item is assigned to a server     *03089000
                         instance, the server exit completed           *03090000
                         processing the request, XCF is performing     *03091000
                         completion processing for the work item        03092000
*                                                                       03093000
*  ?Asaxmac Assert(ixcysrvr_kIrPreparing,EQ,ixcysrvr_kWiPreparing)      03094000
*                                                                       03095000
*                                      ?Asaxmac Assert(ixcysrvr_kIrPr   03096000
*                                      eparing,EQ,ixcysrvr_kWiPrepari   03097000
*                                      ng)                              03098000
*                                                                       03099000
ASSERT_EQ1_1 EQU 0                                                      03100000
ASSERT_EQ2_1 EQU 0                                                      03101000
*                                                                       03102000
*  ?Asaxmac Assert(ixcysrvr_kIrWorking,EQ,ixcysrvr_kWiWorking)          03103000
*                                                                       03104000
*                                      ?Asaxmac Assert(ixcysrvr_kIrWo   03105000
*                                      rking,EQ,ixcysrvr_kWiWorking)    03106000
*                                                                       03107000
ASSERT_EQ1_2 EQU 0                                                      03108000
ASSERT_EQ2_2 EQU 0                                                      03109000
*                                                                       03110000
*  ?Asaxmac Assert(ixcysrvr_kIrCompleting,EQ,ixcysrvr_kWiCompleting)    03111000
*                                                                       03112000
*                                      ?Asaxmac Assert(ixcysrvr_kIrCo   03113000
*                                      mpleting,EQ,ixcysrvr_kWiComple   03114000
*                                      ting)                            03115000
*                                                                       03116000
ASSERT_EQ1_3 EQU 0                                                      03117000
ASSERT_EQ2_3 EQU 0                                                      03118000
IXCYSRVR_TSRVRINFOIR_LEN EQU *-IXCYSRVR_TSRVRINFOIR                     03119000
.L005D   ANOP                                                           03120000
         AIF   ('&IXCYSRVR_TSRVRINFODD' EQ 'NO').L0061                  03121000
         AIF   ('&DSECT' EQ 'YES').L0062                                03122000
         AIF   ('&IXCYSRVR_TSRVRINFODD' NE 'YES').L0061                 03123000
.L0062   ANOP                                                           03124000
*                                                                       03125000
* ********************************************************************  03126000
* *                                                                  *  03127000
* *  IXCREQ Diagnostic Area Mapping                                  *  03128000
* *                                                                  *  03129000
* *  See IXCREQ Return/Reason Code documentation to determine        *  03130000
* *  whether DIAG information is returned for a particular non-zero  *  03131000
* *  return and reason code. When DIAG information is returned, it   *  03132000
* *  is returned in the IXCRECV DATAAREA.  No Server Definition      *  03133000
* *  data is returned in the IXCRECV DATAAREA when DIAG information  *  03134000
* *  is returned.                                                    *  03135000
* *                                                                  *  03136000
* *  Returned DIAG data is mapped by the ixcysrvr_tSrvrInfoDD        *  03137000
* *  mapping starting at offset zero (0) of the storage location     *  03138000
* *  described by the rd_MsgDesc in the response descriptor record   *  03139000
* *  returned by IXCRECV.                                            *  03140000
* *                                                                  *  03141000
* ********************************************************************  03142000
*                                                                       03143000
*                                                                       03144000
         AIF   ('&DSECT' EQ 'YES').L0063                                03145000
IXCYSRVR_TSRVRINFODD DS 0D IXCREQ Diagnostic information returned by   *03146000
                         an IXCREQ request in an IXCRECV DATAAREA       03147000
         AGO   .L0064                                                   03148000
.L0063   ANOP                                                           03149000
IXCYSRVR_TSRVRINFODD DSECT   IXCREQ Diagnostic information returned by *03150000
                         an IXCREQ request in an IXCRECV DATAAREA       03151000
.L0064   ANOP                                                           03152000
SRVRIDD_DIAG0 DS F       Reserved                                       03153000
SRVRIDD_DIAGRC DS F      IXCREQ Return code that the DIAG information  *03154000
                         is for. Same as rd_RespRetcode from the       *03155000
                         ixcysrvr_tResponseDescriptor record for the   *03156000
                         server that sent the response                  03157000
SRVRIDD_DIAGRSN DS F     IXCREQ Reason code that the DIAG information  *03158000
                         is for. Same as rd_RespRsncode from the       *03159000
                         ixcysrvr_tResponseDescriptor record for the   *03160000
                         server that sent the response                  03161000
SRVRIDD_DIAG1 DS F       Contents depends on the value of              *03162000
                         srvrIdd_DiagRc and srvrIdd_DiagRsn             03163000
SRVRIDD_DIAG2 DS F       Contents depends on the value of              *03164000
                         srvrIdd_DiagRc and srvrIdd_DiagRsn             03165000
SRVRIDD_DIAG3 DS F       Contents depends on the value of              *03166000
                         srvrIdd_DiagRc and srvrIdd_DiagRsn             03167000
SRVRIDD_DIAG4 DS F       Contents depends on the value of              *03168000
                         srvrIdd_DiagRc and srvrIdd_DiagRsn             03169000
         DS    F         Reserved                                       03170000
IXCYSRVR_TSRVRINFODD_LEN EQU *-IXCYSRVR_TSRVRINFODD                     03171000
.L0061   ANOP                                                           03172000
         AIF   ('&ZCBPRINT' EQ 'NO').P3                                 03173000
         AIF   ('&LIST' EQ 'YES').P4                                    03174000
.P3      ANOP                                                           03175000
         POP   PRINT                                                    03176000
.P4      ANOP                                                           03177000
.P_EXIT  ANOP                                                           03178000
         MEND                                                           03179000
**/ IXCYSRVR_2:;                                                        03180000
* %IXCYSRVR_INCLUDED = 'YES';                                           03181000
* %DCL ZCBPRINT CHAR EXT;                                               03182000
* %DEACTIVATE ZCBPRINT;                                                 03183000
* %DCL IXCYSRVR_LIST CHAR EXT;                                          03184000
* %DEACTIVATE IXCYSRVR_LIST;                                            03185000
* %IF IXCYSRVR_LIST ^= 'NO' &                                           03186000
*    ZCBPRINT ^= 'NO' %THEN                                             03187000
*   %GOTO IXCYSRVR_3;                                                   03188000
*   @LIST PUSH NOECHO;                                                  03189000
*   @LIST NOASSEMBLE NOECHO;                                            03190000
*   @LIST OFF C NOECHO;                                                 03191000
* %IXCYSRVR_3:;                                                         03192000
*/* Start of PL/X Source                                             */ 03193000
*                                                                       03194000
*%If CbGenNoIsa = 'YES' %Then                                           03195000
*  %Do;                                                                 03196000
*    %isafeatures = 'Char(Size(ixcysrvr_tFeatures)) ';                  03197000
*    %isacriteria = 'Char(Size(ixcysrvr_tCriteria)) ';                  03198000
*    %isaname     = 'Char(Size(ixcysrvr_tName)) ';                      03199000
*    %isawad      = 'Char(Size(ixcysrvr_tWorkAreaDescriptor)) ';        03200000
*    %isadatadesc = 'Char(Size(ixcysrvr_tDataDescriptor)) ';            03201000
*    %isamsgdesc  = 'Char(Size(ixcysrvr_tMsgDescriptor)) ';             03202000
*    %isarespcode = 'Char(Size(ixcysrvr_tRespCode)) ';                  03203000
*    %isarespinfo = 'Char(Size(ixcysrvr_tResponseInfo)) ';              03204000
*    %isareqinfo =  'Char(Size(ixcysrvr_tRequestInfo)) ';               03205000
*  %End;                            /*                               */ 03206000
*%Else                              /*                               */ 03207000
*  %Do;                             /*                               */ 03208000
*    %isafeatures = 'IsA(ixcysrvr_tFeatures) ';                         03209000
*    %isacriteria = 'IsA(ixcysrvr_tCriteria) ';                         03210000
*    %isaname     = 'IsA(ixcysrvr_tName) ';                             03211000
*    %isawad      = 'IsA(ixcysrvr_tWorkAreaDescriptor) ';               03212000
*    %isadatadesc = 'IsA(ixcysrvr_tDataDescriptor) ';                   03213000
*    %isamsgdesc =  'IsA(ixcysrvr_tMsgDescriptor) ';                    03214000
*    %isarespcode = 'IsA(ixcysrvr_tRespCode) ';                         03215000
*    %isarespinfo = 'Isa(ixcysrvr_tResponseInfo) ';                     03216000
*    %isareqinfo =  'IsA(ixcysrvr_tRequestInfo) ';                      03217000
*  %End;                            /*                               */ 03218000
*                                                                       03219000
*                                                                       03220000
*/********************************************************************/ 03221000
*/*                                                                  */ 03222000
*/*  Server Selection (routing) Criteria                             */ 03223000
*/*                                                                  */ 03224000
*/*    Summary:                                                      */ 03225000
*/*      Maps routing criteria used by XCF to select a server that   */ 03226000
*/*      is suitable for processing a request.                       */ 03227000
*/*                                                                  */ 03228000
*/*    Usage:                                                        */ 03229000
*/*      - Code the CRITERIA keyword when invoking IXCSEND to send   */ 03230000
*/*        a client request to a server for processing.  The data    */ 03231000
*/*        area indicated by CRITERIA is mapped by                   */ 03232000
*/*        ixcysrvr_tCriteria.                                       */ 03233000
*/*      - When a request is presented to a server, the following    */ 03234000
*/*        fields in the Server Exit Parameter List will contain a   */ 03235000
*/*        copy of the routing criteria specified by the client      */ 03236000
*/*        (with the CRITERIA keyword) that sent the request:        */ 03237000
*/*          o SXPLRQ_MinLevel - minimum acceptable server level     */ 03238000
*/*          o SXPLRQ_MaxLevel - maximum acceptable server level     */ 03239000
*/*          o SXPLRQ_Features - required features                   */ 03240000
*/*                                                                  */ 03241000
*/*    Explanation:                                                  */ 03242000
*/*      When sending a request to a server for processing, a client */ 03243000
*/*      can specify criteria that describe the attributes of a      */ 03244000
*/*      suitable server.  If the target server is identified by     */ 03245000
*/*      name, XCF uses these criteria to determine which instances  */ 03246000
*/*      of the server are suitable for processing the request.  If  */ 03247000
*/*      the target server is identified by ServerID, the sender is  */ 03248000
*/*      responsible for determining suitability of the server.      */ 03249000
*/*      Regardless of how the target server is selected, the        */ 03250000
*/*      routing criteria is presented to the server exit routine    */ 03251000
*/*      that is called to process the request.  The server exit     */ 03252000
*/*      may or may not alter its processing of the request based    */ 03253000
*/*      on the routing criteria specified by the client.            */ 03254000
*/*                                                                  */ 03255000
*/*      The routing criteria specified by the client indicates the  */ 03256000
*/*      range of server levels that are suitable for the request,   */ 03257000
*/*      as well as the set of features that the server must         */ 03258000
*/*      support.  When a server instance is started, it indicates   */ 03259000
*/*      the range of server levels and features that it supports.   */ 03260000
*/*      A server is deemed to be suitable for the client request if */ 03261000
*/*      the server supports any one of the server levels specified  */ 03262000
*/*      by the client, as well as all of the specified features.    */ 03263000
*/*                                                                  */ 03264000
*/*      Note that the server can indicate the range of client       */ 03265000
*/*      levels that it supports.  So even if the server appears to  */ 03266000
*/*      be suitable based on the client criteria, the server may    */ 03267000
*/*      deem the client to be unsuitable if the client is not       */ 03268000
*/*      running with an appropriate client level.                   */ 03269000
*/*                                                                  */ 03270000
*/********************************************************************/ 03271000
*                                                                       03272000
*Declare                                                                03273000
*  1 ixcysrvr_tCriteria  TYPE,      /* Server selection criteria     */ 03274000
*    3 sc_Version fixed(8),         /* Version of data within this      03275000
*                                      mapping.  Initially zero.  May   03276000
*                                      be nonzero in the future to      03277000
*                                      indicate presence of new or      03278000
*                                      changed information.          */ 03279000
*    3 sc_rsvd1 char(3),            /* reserved, must be zero        */ 03280000
*    3 sc_MinServerLevel fixed(32), /* Min required server level     */ 03281000
*    3 sc_MaxServerLevel fixed(32), /* Max required server level     */ 03282000
*    3 sc_Features isafeatures,     /* Features required of the target  03283000
*                                      server. Mapped by                03284000
*                                      ixcysrvr_tFeatures            */ 03285000
*    3 * char(0);                                                       03286000
*                                                                       03287000
* Declare                           /* values for sc_version         */ 03288000
*   ixcysrvr_kCriteria_Version0 constant(0),                            03289000
*   ixcysrvr_kSC_Version0 constant(0);                                  03290000
*                                                                       03291000
*/********************************************************************/ 03292000
*/*                                                                  */ 03293000
*/*  Server Features                                                 */ 03294000
*/*                                                                  */ 03295000
*/*    Summary:                                                      */ 03296000
*/*      Indicates the set of "features" that are either supported   */ 03297000
*/*      by a server, or must be supported by a server in order to   */ 03298000
*/*      process a request.                                          */ 03299000
*/*                                                                  */ 03300000
*/*    Usage:                                                        */ 03301000
*/*      - Code the FEATURES keyword when invoking IXCSRVR to start  */ 03302000
*/*        a server instance.  The FEATURES indicate the set of      */ 03303000
*/*        features supported by the server.                         */ 03304000
*/*      - Code the CRITERIA keyword when invoking IXCSEND to send   */ 03305000
*/*        a client request to a server for processing.  Within      */ 03306000
*/*        the CRITERIA, which is mapped by ixcysrvr_tCriteria,      */ 03307000
*/*        the field sc_Features indicates the features that the     */ 03308000
*/*        target server must support in order to process the        */ 03309000
*/*        request.                                                  */ 03310000
*/*      - When a request is presented to a server, the field        */ 03311000
*/*        SXPLRQ_Features in the Server Exit Parameter List         */ 03312000
*/*        indicates the set of features specified by the client     */ 03313000
*/*        (with the CRITERIA keyword) that sent the request.        */ 03314000
*/*                                                                  */ 03315000
*/*    Explanation:                                                  */ 03316000
*/*      Different levels of client code and server code could be    */ 03317000
*/*      running in the sysplex.  A server might need to support     */ 03318000
*/*      some particular "feature" in order to process a client      */ 03319000
*/*      request.  A "feature" is whatever the client and server     */ 03320000
*/*      deem it to be, but typically one thinks of a feature as a   */ 03321000
*/*      function or service, or perhaps the ability to support a    */ 03322000
*/*      particular protocol, or the ability to interpret new        */ 03323000
*/*      parameters or produce new results (as compared to a server  */ 03324000
*/*      that does not have the feature).                            */ 03325000
*/*                                                                  */ 03326000
*/*      When a server is defined, it can specify a "feature string" */ 03327000
*/*      to indicate the features it supports.  When a client sends  */ 03328000
*/*      a request, it can similarly provide a feature string to     */ 03329000
*/*      indicate what features are required to process the request. */ 03330000
*/*                                                                  */ 03331000
*/*                                                                  */ 03332000
*/*      A "feature string" consists of a one byte "feature level"   */ 03333000
*/*      and 56 "feature flags".  XCF assumes that a server          */ 03334000
*/*      specifies a feature string per the following rules:         */ 03335000
*/*                                                                  */ 03336000
*/*        1. At a given feature level, a server sets the i'th       */ 03337000
*/*           feature flag ON ('1'B) to indicate that it supports    */ 03338000
*/*           the feature.  It is up to the server to define the     */ 03339000
*/*           interpretation of the feature flags for its clients.   */ 03340000
*/*        2. If a server supports feature level N > 0, then it      */ 03341000
*/*           supports all the features supported by level M < N.    */ 03342000
*/*        3. Feature level xFF (255) is reserved for future XCF     */ 03343000
*/*           use.                                                   */ 03344000
*/*                                                                  */ 03345000
*/*        Note: With these rules, a server can support up to 14280  */ 03346000
*/*        features.  However, rule 2 in effect implies that it is   */ 03347000
*/*        not possible to "retract" a feature once it is offered.   */ 03348000
*/*                                                                  */ 03349000
*/*        It may be appropriate to reset the features to all zero   */ 03350000
*/*        when changing to a new server level.                      */ 03351000
*/*                                                                  */ 03352000
*/*      If a client specifies a nonzero feature string when sending */ 03353000
*/*      a request, XCF assumes the feature string represents the    */ 03354000
*/*      minimum level of functionality that a server must support   */ 03355000
*/*      in order to process the request.  Given a set of suitable   */ 03356000
*/*      candidate servers (based on range of server levels and      */ 03357000
*/*      client levels), XCF chooses a server that supports all of   */ 03358000
*/*      the features requested by the client.                       */ 03359000
*/*                                                                  */ 03360000
*/********************************************************************/ 03361000
*                                                                       03362000
*DECLARE                                                                03363000
*  1 ixcysrvr_tFeatures TYPE char(8),                                   03364000
*    3 sf_Level fixed(8),           /* Feature level                 */ 03365000
*    3 sf_Features bit(56),         /* Feature flags                 */ 03366000
*    3 * char(0);                                                       03367000
*                                                                       03368000
* Declare                                                               03369000
*   ixcysrvr_kMaxFeaturesLevel constant(254); /* maximum valid          03370000
*                                      value for sf_level            */ 03371000
*                                                                       03372000
*/********************************************************************/ 03373000
*/*                                                                  */ 03374000
*/*  Client/Server Names                                             */ 03375000
*/*                                                                  */ 03376000
*/*    Summary                                                       */ 03377000
*/*      Client/Server names have a structured format.  The first    */ 03378000
*/*      section must be non-blank.  It is intended to be unique to  */ 03379000
*/*      the application, subsystem, or component.  For example,     */ 03380000
*/*      section one of a server name used by IBM software would     */ 03381000
*/*      begin with the component prefix or the characters "SYS".    */ 03382000
*/*                                                                  */ 03383000
*/*    Usage                                                         */ 03384000
*/*      - When invoking IXCSEND to send a request to a server, code */ 03385000
*/*        SENDER to indicate the name of the client.  Code SERVER   */ 03386000
*/*        to indicate the name of the target server.                */ 03387000
*/*      - When invoking IXCSEND to send a response to a client      */ 03388000
*/*        request, code SENDER to indicate the name of the server.  */ 03389000
*/*      - When a client request is presented to a server for        */ 03390000
*/*        processing, the md_SenderName field within the            */ 03391000
*/*        SXPLRQ_MsgDesc field of the Server Exit Parameter List    */ 03392000
*/*        contains the name of the client (from IXCSEND SENDER).    */ 03393000
*/*      - After successfully invoking IXCRECV to receive the        */ 03394000
*/*        response sent by a server, the ms_SenderName field within */ 03395000
*/*        the rd_MsgDesc field of the response descriptor within    */ 03396000
*/*        the answer area (ANSAREA) contains the name of the        */ 03397000
*/*        server (from IXCSEND SENDER).                             */ 03398000
*/*                                                                  */ 03399000
*/*    Explanation                                                   */ 03400000
*/*      Client/Server names have a structured format.  The first    */ 03401000
*/*      section must be specified and is intended to provide        */ 03402000
*/*      uniqueness so that different client/server applications     */ 03403000
*/*      are segregated from one another.  Most software running     */ 03404000
*/*      on this platform has a 3 or 4 character "prefix" that       */ 03405000
*/*      is unique to that particular application, subsystem, or     */ 03406000
*/*      component.  Use of that prefix in the sn_Section1 of the    */ 03407000
*/*      name will help avoid confusion and interference between     */ 03408000
*/*      different applications.  It will also help installations    */ 03409000
*/*      and service personnel identify the relevant owner of the    */ 03410000
*/*      software.                                                   */ 03411000
*/*                                                                  */ 03412000
*/*      Since there is no "registration" required to exploit the    */ 03413000
*/*      XCF Client/Server send service, the name specified by the   */ 03414000
*/*      SENDER keyword when invoking IXCSEND to send a message is   */ 03415000
*/*      the chief means of associating the message to a particular  */ 03416000
*/*      exploiter.  As suggested above, one would likely specify    */ 03417000
*/*      the client name when sending a request to a server, and     */ 03418000
*/*      specify the server name when sending a response.  However,  */ 03419000
*/*      subject to the needs of the expoiter, there is no specific  */ 03420000
*/*      requirement that this convention to be followed.  XCF       */ 03421000
*/*      simply transports the sender name along with the message    */ 03422000
*/*      and presents a copy of the specified name to its target.    */ 03423000
*/*      The sender name may also appear in various externals        */ 03424000
*/*      such as operator display commands.                          */ 03425000
*/*                                                                  */ 03426000
*/*      All sections of the name must be left justified, and        */ 03427000
*/*      appended on the right with EBCDIC blanks as needed.  Any    */ 03428000
*/*      section but the first can be completely blank.  The         */ 03429000
*/*      structure of the name is intended to make it easy to        */ 03430000
*/*      include things like a job name without having to replace    */ 03431000
*/*      trailing blanks with some substitute character.  If there   */ 03432000
*/*      is no compelling need to structure the name into sections,  */ 03433000
*/*      one can construct a name from the permitted characters as a */ 03434000
*/*      single left justified 32 byte string (with no imbedded      */ 03435000
*/*      blanks) and appended on the right with blanks.  However,    */ 03436000
*/*      note that when XCF externalizes the name in human readable  */ 03437000
*/*      form (such as an operator display), it will generally break */ 03438000
*/*      the name down into the four sections.                       */ 03439000
*/*                                                                  */ 03440000
*/*      Names can consist of the characters A-Z, a-z, 0-9, #,$,@,   */ 03441000
*/*      and _ (underscore).  Names are case sensitive.              */ 03442000
*/*                                                                  */ 03443000
*/*                                                                  */ 03444000
*/********************************************************************/ 03445000
*                                                                       03446000
*DECLARE                            /* name mapping                  */ 03447000
*  1 ixcysrvr_tName TYPE char(32),                                      03448000
*    3 sn_Section1 char(8),         /* Application specific name     */ 03449000
*    3 sn_Section2 char(8),         /*                               */ 03450000
*    3 sn_Section3 char(8),         /*                               */ 03451000
*    3 sn_Section4 char(8),         /*                               */ 03452000
*    3 * char(0);                                                       03453000
*                                                                       03454000
*/********************************************************************/ 03455000
*/*                                                                  */ 03456000
*/*  IXCRECV RECEIVE=RESPONSES                                       */ 03457000
*/*                                                                  */ 03458000
*/*  Summary                                                         */ 03459000
*/*    After invoking IXCSEND to send a request to a server for      */ 03460000
*/*    processing, the sender or its agent (ie, the "client")        */ 03461000
*/*    invokes IXCRECV RECEIVE=RESPONSES to receive the results      */ 03462000
*/*    of that request.                                              */ 03463000
*/*                                                                  */ 03464000
*/*    Assuming the request and its results are still available,     */ 03465000
*/*    the IXCRECV service will store the results into two different */ 03466000
*/*    output areas.  The answer area (ANSAREA) contains metadata    */ 03467000
*/*    to describe the results.  The data area (DATAREA or DATADESC) */ 03468000
*/*    contains the text of the message that was received from       */ 03469000
*/*    the responding server(s).                                     */ 03470000
*/*                                                                  */ 03471000
*/*  Usage                                                           */ 03472000
*/*    - Invoke IXCRECV RECEIVE=RESPONSES with NODATA to obtain      */ 03473000
*/*      the metadata that describes the results of an IXCSEND       */ 03474000
*/*      request that specified EXPECTREPLY=NO (for which the        */ 03475000
*/*      servers do not send any responses).                         */ 03476000
*/*    - Invoke IXCRECV RECEIVE=RESPONSES with NODATA to obtain      */ 03477000
*/*      the metadata that describes the results.  One would do this */ 03478000
*/*      to get information about the responses.  For example, one   */ 03479000
*/*      might use this information to determine the size of the     */ 03480000
*/*      data area(s) needed to receive the response messages, after */ 03481000
*/*      which one might then invoke IXCRECV again to get those      */ 03482000
*/*      responses.                                                  */ 03483000
*/*    - Invoke IXCRECV RECEIVE=RESPONSES with DATAAREA to store     */ 03484000
*/*      the text of the server response(s) in one contiguous        */ 03485000
*/*      storage area.  Note that metadata describing the results    */ 03486000
*/*      and the location of the text of the response message(s) are */ 03487000
*/*      returned in the answer area.  The indicated data area would */ 03488000
*/*      need to be large enough to hold all of the responses from   */ 03489000
*/*      all of the servers whose replies were received.             */ 03490000
*/*    - Invoke IXCRECV RECEIVE=RESPONSES with DATADESC to receive   */ 03491000
*/*      the text of the server responses into multiple              */ 03492000
*/*      discontiguous storage area.  Each such storage area will    */ 03493000
*/*      contain the text of one response from one particular        */ 03494000
*/*      server.  Note that metadata describing the results and the  */ 03495000
*/*      location of the text of each response message is returned   */ 03496000
*/*      in the answer area.                                         */ 03497000
*/*                                                                  */ 03498000
*/*  Explanation                                                     */ 03499000
*/*    The answer area is the storage into which XCF stores metadata */ 03500000
*/*    that describes the results of an IXCSEND request that was     */ 03501000
*/*    accepted by XCF (and whose HOLDTIME has not yet expired).  At */ 03502000
*/*    offset zero in the answer area is the answer area header      */ 03503000
*/*    (mapped by ixcysrvr_tAnsArea) that describes the content of   */ 03504000
*/*    the answer area.  Using this information, one can locate the  */ 03505000
*/*    "send descriptor" (mapped by ixcysrvr_tSendDescriptor) that   */ 03506000
*/*    provides information about the IXCSEND request whose results  */ 03507000
*/*    are being received, the "target descriptor" (mapped by        */ 03508000
*/*    ixcysrvr_tTargetDescriptor) for each target that provides     */ 03509000
*/*    information about where the request was sent, and if          */ 03510000
*/*    applicable, a "response descriptor" (mapped by                */ 03511000
*/*    ixcysrvr_tResponseDescriptor) for each of the possible        */ 03512000
*/*    responses that provides information about what if any         */ 03513000
*/*    response was received from the target server.                 */ 03514000
*/*                                                                  */ 03515000
*/*    The data area(s) will contain the text of the response        */ 03516000
*/*    messages sent by the target servers in reply to the request.  */ 03517000
*/*    The DATAAREA keyword names a single contiguous data area that */ 03518000
*/*    must be large enough to contain all the response messages.    */ 03519000
*/*    If the DATADESC keyword is used, the receiver is providing    */ 03520000
*/*    multiple storage areas for XCF to store the response          */ 03521000
*/*    messages.  Each such storage area must be large enough to     */ 03522000
*/*    hold the relevant response message.                           */ 03523000
*/*                                                                  */ 03524000
*/*    The data area(s) are only applicable to requests for which    */ 03525000
*/*    the servers are expected to reply (IXCSEND EXPECTREPLY=YES).  */ 03526000
*/*    In such cases, the answer area will contain a response        */ 03527000
*/*    descriptor for each target.  Within the response descriptor,  */ 03528000
*/*    the rd_RespArrived flag indicates whether there is a response */ 03529000
*/*    message available.  If so, the rd_MsgDesc field within that   */ 03530000
*/*    response descriptor provides further information about the    */ 03531000
*/*    response message.  In particular, the message descriptor      */ 03532000
*/*    contains a "data descriptor" that indicates where XCF stored  */ 03533000
*/*    the text of the corresponding response message.               */ 03534000
*/*                                                                  */ 03535000
*/*                                                                  */ 03536000
*/********************************************************************/ 03537000
*                                                                       03538000
*/********************************************************************/ 03539000
*/*                                                                  */ 03540000
*/*  Answer Area (IXCRECV ANSAREA)                                   */ 03541000
*/*                                                                  */ 03542000
*/*  Summary                                                         */ 03543000
*/*    ixcysrvr_tAnsArea maps the data returned by XCF in the        */ 03544000
*/*    answer area provided by the invoker of the IXCRECV service.   */ 03545000
*/*    The header starts ot affset zero in the storage area          */ 03546000
*/*    named by the ANSAREA keyword of the IXCRECV macro.  Use this  */ 03547000
*/*    information to locate the send, target, and response          */ 03548000
*/*    descriptors that provide the information of interest.         */ 03549000
*/*                                                                  */ 03550000
*/*  Usage                                                           */ 03551000
*/*    - Invoke IXCRECV RECEIVE=RESPONSES with an ANSAREA that is    */ 03552000
*/*      large enough to hold the answer area header but too small   */ 03553000
*/*      for the send, target, and response descriptors.  The        */ 03554000
*/*      receive service will store this header in the answer area   */ 03555000
*/*      and return with a return and reason code indicating that    */ 03556000
*/*      the answer area is too small.  The aa_AnsAreaSize field     */ 03557000
*/*      will indicate how much storage is needed to contain the     */ 03558000
*/*      entire answer area (with all of the relevant descriptors).  */ 03559000
*/*                                                                  */ 03560000
*/*    - Invoke IXCRECV RECEIVE=RESPONSES with an ANSAREA that is    */ 03561000
*/*      large enough to hold the answer area header and all of the  */ 03562000
*/*      send, target, and response descriptors.  Assume there are   */ 03563000
*/*      responses to be received, but the data area(s) provided (if */ 03564000
*/*      any) are too small to receive all of the response messages. */ 03565000
*/*      The receive service will store this header in the answer    */ 03566000
*/*      area and return with a return and reason code indicating    */ 03567000
*/*      that the data area(s) are not adequate.  The aa_AnsDataSize */ 03568000
*/*      field will indicate how much storage is needed to contain   */ 03569000
*/*      all of the response messages.  If there is more than one    */ 03570000
*/*      response message, the response descriptor has data to       */ 03571000
*/*      indicate the size of its particular response message.       */ 03572000
*/*                                                                  */ 03573000
*/*  Explanation                                                     */ 03574000
*/*    The answer area provides the information needed to locate     */ 03575000
*/*    the various descriptors that provide information about the    */ 03576000
*/*    request and its results.                                      */ 03577000
*/*                                                                  */ 03578000
*/*    If the storage area for the answer area is too small for the  */ 03579000
*/*    answer area header, the IXCRECV request is rejected.          */ 03580000
*/*                                                                  */ 03581000
*/*    If the storage area for the answer area is large enough for   */ 03582000
*/*    the answer area header, but too small for all the available   */ 03583000
*/*    metadata, the IXCRECV request completes with a warning return */ 03584000
*/*    code.  Within the answer area header, aa_AnsAreaSize          */ 03585000
*/*    indicates how much storage is needed to hold all the          */ 03586000
*/*    metadata.  The user is expected to obtain enough storage for  */ 03587000
*/*    the entire answer area and then reinvoke IXCRECV to get all   */ 03588000
*/*    the metadata.                                                 */ 03589000
*/*                                                                  */ 03590000
*/*                                                                  */ 03591000
*/********************************************************************/ 03592000
*                                                                       03593000
*   DECLARE                                                             03594000
*     1 ixcysrvr_tAnsArea TYPE bdy(dword), /* Header for AnsArea        03595000
*                                      returned by IXCRECV           */ 03596000
*       3 aa_Version fixed(8),      /* Version of data within this      03597000
*                                      mapping.  Initially zero.  May   03598000
*                                      be nonzero in the future to      03599000
*                                      indicate presence of new or      03600000
*                                      changed information.          */ 03601000
*       3 aa_Status bit(8),         /* Flags describing status of the   03602000
*                                      message                       */ 03603000
*         5 aa_Completed bit(1),    /* Indicates whether message is     03604000
*                                      considered to be complete.       03605000
*                                      Note that this flag is not       03606000
*                                      mutually exclusive with the      03607000
*                                      Send/RespPending flags since     03608000
*                                      completion may have been forced  03609000
*                                      or the request may have timed    03610000
*                                      out.                          */ 03611000
*         5 aa_Successful BIT(1),   /* Indicates whether the message    03612000
*                                      completed successfully:          03613000
*                                      message sent to all targets,     03614000
*                                      and if a reply/acknowledgement   03615000
*                                      is expected, all targets         03616000
*                                      responded.  Does not imply       03617000
*                                      anything about what the          03618000
*                                      response says.  The response     03619000
*                                      could indicate that a failure    03620000
*                                      occurred.                     */ 03621000
*         5 aa_SendPending BIT(1),  /* The message has not been sent    03622000
*                                      to one or more targets        */ 03623000
*         5 aa_RespPending BIT(1),  /* Expected response(s)/            03624000
*                                      acknowledgement(s) not yet       03625000
*                                      received.                     */ 03626000
*         5 aa_TimedOut bit(1),     /* ON if the message did not        03627000
*                                      complete within the time-out     03628000
*                                      period (RESPTIME timeout).    */ 03629000
*         5 aa_Cancelled bit(1),    /* ON if the request was cancelled  03630000
*                                      before normal completion         03631000
*                                      occurred (IXCMSGC COMPLETION) */ 03632000
*         5 * bit(2),               /* reserved                      */ 03633000
*       3 * char(2),                /* Reserved                      */ 03634000
*       3 aa_AnsAreaSize fixed(32), /* Number of bytes needed (or set)  03635000
*                                      in AnsArea                    */ 03636000
*       3 aa_DataAreaSize fixed(32), /* Number of bytes needed (or set) 03637000
*                                      in DataArea(s)                */ 03638000
*       3 aa_OffsetSendDesc fixed,  /* Relative to the start of         03639000
*                                      the AnsArea, the offset at       03640000
*                                      which send descriptor for the    03641000
*                                      outgoing message can be found.   03642000
*                                      Mapped by                        03643000
*                                      ixcysrvr_tSendDescriptor.     */ 03644000
*       3 aa_#Desc fixed,           /* Number of target descriptor      03645000
*                                      entries or target/response       03646000
*                                      descriptor entries returned in   03647000
*                                      AnsArea.                      */ 03648000
*       3 aa_LenDesc fixed,         /* Size in bytes of one target      03649000
*                                      descriptor entry or one          03650000
*                                      target/response descriptor       03651000
*                                      entry.  Given the address of     03652000
*                                      any one such descriptor, add     03653000
*                                      this value to the address to     03654000
*                                      locate the next descriptor.   */ 03655000
*       3 aa_OffsetTargDesc fixed,  /* Relative to the start of         03656000
*                                      the AnsArea, the offset at       03657000
*                                      which the first target           03658000
*                                      descriptor can be found.  Valid  03659000
*                                      for use if nonzero.           */ 03660000
*       3 aa_OffsetRespDesc fixed,  /* Relative to the start of         03661000
*                                      the AnsArea, the offset at       03662000
*                                      which the first response         03663000
*                                      descriptor can be found.  Valid  03664000
*                                      for use if nonzero.           */ 03665000
*       3 * char(0);                                                    03666000
*                                                                       03667000
*Declare                            /* values for aa_Version         */ 03668000
*  ixcysrvr_kAA_Version0 constant(0);                                   03669000
*                                                                       03670000
*/********************************************************************/ 03671000
*/*                                                                  */ 03672000
*/*  Send Descriptor                                                 */ 03673000
*/*                                                                  */ 03674000
*/*  Summary                                                         */ 03675000
*/*    ixcysrvr_tSendDescriptor maps metadata in the answer area     */ 03676000
*/*    returned by IXCRECV.  This record provides information about  */ 03677000
*/*    the message that was sent via an IXCSEND request.             */ 03678000
*/*                                                                  */ 03679000
*/*  Usage                                                           */ 03680000
*/*    Invoke IXCRECV RECEIVE=RESPONSES with an ANSAREA that is      */ 03681000
*/*    large enough to hold all the available metadata.  Within the  */ 03682000
*/*    answer area header, aa_OffsetSendDesc indicates the offset    */ 03683000
*/*    within the answer area where the send descriptor was placed.  */ 03684000
*/*                                                                  */ 03685000
*/*  Explanation                                                     */ 03686000
*/*    The send descriptor provides information about the original   */ 03687000
*/*    IXCSEND request whose results are being obtained with the     */ 03688000
*/*    IXCRECV macro.  There is one send descriptor record.  It      */ 03689000
*/*    describes the message that was sent.  Much of the information */ 03690000
*/*    is a copy of the parameters specified on the IXCSEND macro.   */ 03691000
*/*    Status information is also provided.                          */ 03692000
*/*                                                                  */ 03693000
*/********************************************************************/ 03694000
*                                                                       03695000
*   DECLARE                                                             03696000
*     1 ixcysrvr_tSendDescriptor TYPE bdy(dword), /* Metadata           03697000
*                                      describing a message send     */ 03698000
*       3 sd_Version fixed(8),      /* Version of data within this      03699000
*                                      mapping.  Initially zero.  May   03700000
*                                      be nonzero in the future to      03701000
*                                      indicate presence of new or      03702000
*                                      changed information.          */ 03703000
*       3 * char(3),                /* Reserved                      */ 03704000
*       3 sd_Attributes  bit(32),   /* Message attributes            */ 03705000
*        5 sd_Flags0 bit(8),        /* Flags describing message         03706000
*                                      characteristics               */ 03707000
*         7 sd_ExpectReply bit(1),  /* ON if the originator expects     03708000
*                                      the target(s) to send a          03709000
*                                      response message.             */ 03710000
*         7 * bit(7),               /* reserved                      */ 03711000
*        5 sd_Flags1 bit(8),        /* Flags describing status of the   03712000
*                                      message                       */ 03713000
*         7 sd_Completed bit(1),    /* Indicates whether message is     03714000
*                                      considered to be complete.       03715000
*                                      Note that this flag is not       03716000
*                                      mutually exclusive with the      03717000
*                                      Send/RespPending flags since     03718000
*                                      completion may have been forced  03719000
*                                      or the request may have timed    03720000
*                                      out.                          */ 03721000
*         7 sd_Successful BIT(1),   /* Indicates whether the message    03722000
*                                      completed successfully:          03723000
*                                      message sent to all targets,     03724000
*                                      and if a reply/acknowledgement   03725000
*                                      is expected, all targets         03726000
*                                      responded.  Does not imply       03727000
*                                      anything about what the          03728000
*                                      response says.  The response     03729000
*                                      could indicate that a failure    03730000
*                                      occurred.                     */ 03731000
*         7 sd_SendPending BIT(1),  /* The message has not been sent    03732000
*                                      to one or more targets        */ 03733000
*         7 sd_RespPending BIT(1),  /* Expected response(s)/            03734000
*                                      acknowledgement(s) not yet       03735000
*                                      received.                     */ 03736000
*         7 sd_TimedOut bit(1),     /* ON if the message did not        03737000
*                                      complete within the time-out     03738000
*                                      period (RESPTIME timeout).    */ 03739000
*         7 sd_Cancelled bit(1),    /* ON if the request was cancelled  03740000
*                                      before normal completion         03741000
*                                      occurred (IXCMSGC COMPLETION) */ 03742000
*         7 * bit(2),               /* reserved                      */ 03743000
*        5 sd_MsgType fixed(8),     /* Code to indicate type of         03744000
*                                      message:                         03745000
*                                        Server Request                 03746000
*                                        Response message               03747000
*                                      See constants                    03748000
*                                      ixcysrvr_kMsgType...          */ 03749000
*        5 sd_Flags3 bit(8),        /* Flags byte 3 reserved         */ 03750000
*                                                                       03751000
*       3 sd_SendTime fixed,        /* SENDTIME timeout value        */ 03752000
*       3 sd_RespTime fixed,        /* RESPTIME timeout value, valid    03753000
*                                      for use if sd_ExpectReply is     03754000
*                                      ON.                           */ 03755000
*       3 sd_HoldTime fixed,        /* HOLDTIME timeout value        */ 03756000
*       3 * char(4),                /* reserved                      */ 03757000
*       3 sd_ETodWhenRequested char(16), /* Extended TOD when XCF       03758000
*                                      accepted the original send       03759000
*                                      request for the message.      */ 03760000
*       3 sd_ETodWhenCompleted char(16), /* Extended TOD when XCF       03761000
*                                      deemed the message to have       03762000
*                                      completed.  Valid for use if     03763000
*                                      sd_Completed is ON.  Zero if     03764000
*                                      unknown                       */ 03765000
*                                                                       03766000
*       3 sd_#Targets        fixed, /* Number of targets for message */ 03767000
*       3 sd_#RepliesPending fixed, /* Number of targets from which     03768000
*                                      replies are still expected.      03769000
*                                      Zero implies that all results    03770000
*                                      have been determined.         */ 03771000
*       3 sd_#RepliesAvailable fixed, /* Number of replies that         03772000
*                                      contain response data            03773000
*                                      currently available for          03774000
*                                      gathering.                    */ 03775000
*       3 sd_MsgID char(16),        /* MSGID provided by sender when    03776000
*                                      request was sent via IXCSEND. */ 03777000
*       3 sd_MsgCntl char(64),      /* Message control data (MSGCNTL)   03778000
*                                      provided when request was sent   03779000
*                                      via IXCSEND                   */ 03780000
*       3 sd_Sender isaname,        /* Name of sender (SENDER)          03781000
*                                      provided when request was sent   03782000
*                                      via IXCSEND.                     03783000
*                                      Mapped by ixcysrvr_tName      */ 03784000
*       3 sd_SenderID char(16),     /* Sender ID (SENDERID) provided    03785000
*                                      when request was sent via        03786000
*                                      IXCSEND, zero if none         */ 03787000
*       3 sd_UserData char(16),     /* Copy of user data (USERDATA)     03788000
*                                      provided when request was sent   03789000
*                                      via IXCSEND                   */ 03790000
*       3 sd_MsgInfo UNION bdy(word), /* Additional information about   03791000
*                                      the message.  Content depends    03792000
*                                      on type of message, as           03793000
*                                      indicated by sd_MsgType.      */ 03794000
*         5 sd_RequestInfo isareqinfo,    /* Server Request. Mapped     03795000
*                                      by ixcysrvr_tRequestInfo      */ 03796000
*         5 sd_ResponseInfo isarespinfo,  /* Response message. Mapped   03797000
*                                      by ixcysrvr_tResponseInfo     */ 03798000
*       3 * char(0);                                                    03799000
*                                                                       03800000
*Declare                            /* values for sd_Version         */ 03801000
*  ixcysrvr_kSD_Version0 constant(0);                                   03802000
*                                                                       03803000
*/********************************************************************/ 03804000
*/*                                                                  */ 03805000
*/*  Request Info                                                    */ 03806000
*/*                                                                  */ 03807000
*/*    Summary:                                                      */ 03808000
*/*      Maps metadata that describes a request that was sent to a   */ 03809000
*/*      server by a client.                                         */ 03810000
*/*                                                                  */ 03811000
*/*    Usage:                                                        */ 03812000
*/*      - Code IXCRECV RECEIVE=RESPONSES to obtain the results of   */ 03813000
*/*        a client request that was sent to a server.  The answer   */ 03814000
*/*        area (ANSAREA) returned by the service routine will       */ 03815000
*/*        contain a "send descriptor" (mapped by                    */ 03816000
*/*        ixcysrvr_tSendDescriptor) that provides metadata that     */ 03817000
*/*        describes the client request.  The field sd_RequestInfo   */ 03818000
*/*        within the send descriptor contains the "request info"    */ 03819000
*/*        for the original client request.                          */ 03820000
*/*                                                                  */ 03821000
*/*    Explanation:                                                  */ 03822000
*/*      The request info includes the function, description,        */ 03823000
*/*      and routing criteria specified by the client that sent the  */ 03824000
*/*      request (IXCSEND SENDTO=SERVER).                            */ 03825000
*/*                                                                  */ 03826000
*/*                                                                  */ 03827000
*/********************************************************************/ 03828000
*                                                                       03829000
*Declare                                                                03830000
*  1 ixcysrvr_tRequestInfo TYPE,                                        03831000
*    3 rqi_Version fixed(8),        /* Version of data within this      03832000
*                                      mapping.  Initially zero.  May   03833000
*                                      be nonzero in the future to      03834000
*                                      indicate presence of new or      03835000
*                                      changed information.          */ 03836000
*    3 * char(3),                   /* Reserved                      */ 03837000
*    3 rqi_Function char(8),        /* Copy of IXCSEND FUNCTION      */ 03838000
*    3 rqi_Description char(32),    /* Copy of IXCSEND DESCRIPTION   */ 03839000
*    3 rqi_ClientLevel    fixed(32), /* Copy of IXCSEND CLIENTLEVEL  */ 03840000
*    3 rqi_MinServerLevel fixed(32), /* Minimum server level requested  03841000
*                                      by client.  From IXCSEND         03842000
*                                      CRITERIA, copy of                03843000
*                                      sc_MinServerLevel. */            03844000
*    3 rqi_MaxServerLevel fixed(32), /* Maximum server level requested  03845000
*                                      by client.  From IXCSEND         03846000
*                                      CRITERIA, copy of                03847000
*                                      sc_MaxServerLevel. */            03848000
*    3 rqi_Features isafeatures,    /* Features requested by client.    03849000
*                                      From IXCSEND CRITERIA, copy of   03850000
*                                      sc_Features.                     03851000
*                                      Mapped by ixcysrvr_tFeatures  */ 03852000
*    3 * char(0);                                                       03853000
*                                                                       03854000
*Declare                            /* values for rqi_Version        */ 03855000
*  ixcysrvr_kRQI_Version0 constant(0);                                  03856000
*                                                                       03857000
*/********************************************************************/ 03858000
*/*                                                                  */ 03859000
*/*  Response Info                                                   */ 03860000
*/*                                                                  */ 03861000
*/*    Summary:                                                      */ 03862000
*/*      Maps metadata that describes a response that was sent to a  */ 03863000
*/*      client by a server.                                         */ 03864000
*/*                                                                  */ 03865000
*/*    Usage:                                                        */ 03866000
*/*      - Code IXCRECV RECEIVE=RESPONSES to obtain the results of   */ 03867000
*/*        a server response that was sent to a client.  The answer  */ 03868000
*/*        area (ANSAREA) returned by the service routine will       */ 03869000
*/*        contain a "send descriptor" (mapped by                    */ 03870000
*/*        ixcysrvr_tSendDescriptor) that provides metadata that     */ 03871000
*/*        describes the server response.  The field sd_ResponseInfo */ 03872000
*/*        within the send descriptor contains the "response info"   */ 03873000
*/*        for the server response.                                  */ 03874000
*/*                                                                  */ 03875000
*/*    Explanation:                                                  */ 03876000
*/*      The response info includes the return and reason code from  */ 03877000
*/*      the server, the level of data supplied by the server and    */ 03878000
*/*      the maximum level of data that could have been supplied.    */ 03879000
*/*      This information is a copy of values specified by the       */ 03880000
*/*      server (or its agent) when invoking IXCSEND                 */ 03881000
*/*      SENDTO=ORIGINATOR to send its response back to the client   */ 03882000
*/*      that sent the request.                                      */ 03883000
*/*                                                                  */ 03884000
*/*                                                                  */ 03885000
*/********************************************************************/ 03886000
*                                                                       03887000
*Declare                                                                03888000
*  1 ixcysrvr_tResponseInfo TYPE,                                       03889000
*    3 rpi_Version fixed(8),        /* Version of data within this      03890000
*                                      mapping.  Initially zero.  May   03891000
*                                      be nonzero in the future to      03892000
*                                      indicate presence of new or      03893000
*                                      changed information.          */ 03894000
*    3 * char(3),                   /* reserved, must be zero        */ 03895000
*    3 rpi_RespRetcode fixed,       /* Response return code          */ 03896000
*    3 rpi_RespRsncode fixed,       /* Response reason code          */ 03897000
*    3 rpi_SuppliedLevel fixed,     /* response level supplied       */ 03898000
*    3 rpi_SupportsLevel fixed,     /* max response level supported  */ 03899000
*    3 * char(0);                                                       03900000
*                                                                       03901000
*Declare                            /* values for rpi_Version        */ 03902000
*  ixcysrvr_kRPI_Version0 constant(0);                                  03903000
*                                                                       03904000
*                                                                       03905000
*/********************************************************************/ 03906000
*/*                                                                  */ 03907000
*/*  Target Descriptor                                               */ 03908000
*/*                                                                  */ 03909000
*/*  Summary                                                         */ 03910000
*/*    ixcysrvr_tTargetDescriptor maps metadata in the answer area   */ 03911000
*/*    returned by IXCRECV.  This record provides information about  */ 03912000
*/*    one of the targets of an IXCSEND request.                     */ 03913000
*/*                                                                  */ 03914000
*/*                                                                  */ 03915000
*/*  Usage                                                           */ 03916000
*/*    Invoke IXCRECV RECEIVE=RESPONSES with an ANSAREA that is      */ 03917000
*/*    large enough to hold all the available metadata.  Within the  */ 03918000
*/*    answer area header, aa_#Desc indicates the number of target   */ 03919000
*/*    descriptors returned in the answer area and the field         */ 03920000
*/*    aa_OffsetTargDesc indicates the offset within the answer      */ 03921000
*/*    area where the first such target descriptor was placed.       */ 03922000
*/*                                                                  */ 03923000
*/*    If aa_#Desc is nonzero, the first target descriptor can be    */ 03924000
*/*    located using the following logic:                            */ 03925000
*/*                                                                  */ 03926000
*/*          tdPtr = addr(AnsArea) + aa_OffsetTargDesc               */ 03927000
*/*                                                                  */ 03928000
*/*    If aa_#Desc is greater than 1, subsequent target descriptors  */ 03929000
*/*    can be located using the following logic, where tdPtr         */ 03930000
*/*    contains the address of an existing target descriptor:        */ 03931000
*/*                                                                  */ 03932000
*/*          tdPtr = tdPtr + aa_LenDesc                              */ 03933000
*/*                                                                  */ 03934000
*/*  Explanation                                                     */ 03935000
*/*    The target descriptor provides information about one          */ 03936000
*/*    particular target for an IXCSEND request.  It indicates       */ 03937000
*/*    where the message was to be sent and the status of the        */ 03938000
*/*    send.                                                         */ 03939000
*/*                                                                  */ 03940000
*/*    For an IXCSEND request with SENDTO=SERVER where the target    */ 03941000
*/*    server(s) are identified by server name and system(s),        */ 03942000
*/*    there will be one target descriptor per valid target system.  */ 03943000
*/*                                                                  */ 03944000
*/*    For an IXCSEND request with SENDTO=SERVER where the target    */ 03945000
*/*    server is identified by a ServerID, there will be one target  */ 03946000
*/*    descriptor.                                                   */ 03947000
*/*                                                                  */ 03948000
*/*    For an IXCSEND request with SENDTO=ORIGINATOR, there will be  */ 03949000
*/*    one target descriptor.                                        */ 03950000
*/*                                                                  */ 03951000
*/*    The response code (td_RespCode) summarizes the status of the  */ 03952000
*/*    message as best as XCF can determine.                         */ 03953000
*/*                                                                  */ 03954000
*/*                                                                  */ 03955000
*/********************************************************************/ 03956000
*                                                                       03957000
*   DECLARE                                                             03958000
*     1 ixcysrvr_tTargetDescriptor TYPE bdy(dword), /* Metadata         03959000
*                                      describing the target for a      03960000
*                                      message                       */ 03961000
*       3 td_Version fixed(8),      /* Version of data within this      03962000
*                                      mapping.  Initially zero.  May   03963000
*                                      be nonzero in the future to      03964000
*                                      indicate presence of new or      03965000
*                                      changed information.          */ 03966000
*       3 * char(3),                /* Reserved                      */ 03967000
*       3 td_Status char(4),        /* State of this message with       03968000
*                                      respect to sender             */ 03969000
*         5 td_SendPending   bit,   /* ON if the send of the message    03970000
*                                      is pending (eligible to be       03971000
*                                      sent, and either the send        03972000
*                                      has not been initiated or if     03973000
*                                      initiated, has not finished      03974000
*                                      being sent).                  */ 03975000
*         5 td_SendComplete  bit,   /* ON if the send of the message    03976000
*                                      was initiated and finished.   */ 03977000
*         5 td_RespExpected  bit,   /* ON if XCF expects (or expected)  03978000
*                                      a response/acknowledgment from   03979000
*                                      the target.  OFF if XCF does not 03980000
*                                      expect any such response (as     03981000
*                                      might be the case if the message 03982000
*                                      was never sent to the target or  03983000
*                                      the target system failed).    */ 03984000
*         5 td_ExpectReply   bit,   /* ON if EXPECTREPLY=YES was        03985000
*                                      specified on the IXCSEND         03986000
*                                      invocation used to send the      03987000
*                                      message to this target.  OFF     03988000
*                                      if EXPECTREPLY=NO applies.    */ 03989000
*       3 td_TargIndex fixed,       /* Index of this target          */ 03990000
*       3 td_SendRetcode fixed,     /* Return code for the IXCSEND      03991000
*                                      to this target                */ 03992000
*       3 td_SendRsncode fixed,     /* Reason code for the IXCSEND to   03993000
*                                      this target                   */ 03994000
*       3 td_RespCode isarespcode,  /* Response code.  Mapped by        03995000
*                                      ixcysrvr_tRespCode.  If          03996000
*                                      td_ExpectReply is ON, has same   03997000
*                                      value as rd_RespCode.         */ 03998000
*       3 * char(1),                /* Reserved                      */ 03999000
*       3 td_SendToCode fixed(8),   /* identifies the type of data      04000000
*                                      described in td_TargetInfo:      04001000
*                                        (1) Server Name                04002000
*                                        (2) Server ID                  04003000
*                                        (3) Response Token          */ 04004000
*       3 td_TargetInfo UNION char(64), /* identifies target, content   04005000
*                                      depends on td_SendToCode      */ 04006000
*         5 td_ServerName isaname,  /* Name of server to which          04007000
*                                      message was sent. Valid when     04008000
*                                      td_SendToCode equals             04009000
*                                      ixcysrvr_kSendTo_ServerName.     04010000
*                                      Mapped by ixcysrvr_tName.     */ 04011000
*         5 td_ServerID char(16),   /* Server ID that uniquely          04012000
*                                      identifies the target server     04013000
*                                      instance to which the message    04014000
*                                      was sent. Valid when             04015000
*                                      td_SendToCode equals             04016000
*                                      ixcysrvr_kSendTo_ServerID     */ 04017000
*         5 td_RespToken char(64),  /* Response Token identifying the   04018000
*                                      originator to which this         04019000
*                                      (response) message was sent.     04020000
*                                      Valid when td_SendToCode equals  04021000
*                                      ixcysrvr_kSendTo_RespToken    */ 04022000
*       3 td_SysName char(8),       /* Name of system to which message  04023000
*                                      was sent                      */ 04024000
*       3 td_SysID fixed(32),       /* XCF System ID of system to       04025000
*                                      which message was sent        */ 04026000
*         5 td_SysNum fixed(8),     /* XCF slot number of system     */ 04027000
*                                                                       04028000
*       3 *               char(16), /* Reserved                      */ 04029000
*       3 td_SendRcDiag1  fixed,    /* XCF diagnostic information.      04030000
*                                      Valid when RespCode_RC1 is set   04031000
*                                      to ixcysrvr_RC1_NotSent       */ 04032000
*       3 td_SendRsnDiag1 fixed,    /* XCF diagnostic information.      04033000
*                                      Valid when RespCode_RC1 is set   04034000
*                                      to ixcysrvr_RC1_NotSent       */ 04035000
*       3 * char(0);                                                    04036000
*                                                                       04037000
*Declare                            /* values for td_Version         */ 04038000
*  ixcysrvr_kTD_Version0 constant(0);                                   04039000
*                                                                       04040000
*Declare                            /* values for td_SendToCode      */ 04041000
*  ixcysrvr_kSendTo_ServerName constant(1), /* Target server name is    04042000
*                                      described in td_TargetInfo    */ 04043000
*  ixcysrvr_kSendTo_ServerID   constant(2), /* Target server ID is      04044000
*                                      described in td_TargetInfo    */ 04045000
*  ixcysrvr_kSendTo_RespToken  constant(3); /* Target response token is 04046000
*                                      described in td_TargetInfo    */ 04047000
*                                                                       04048000
*                                                                       04049000
*/********************************************************************/ 04050000
*/*                                                                  */ 04051000
*/*  Response Descriptor                                             */ 04052000
*/*                                                                  */ 04053000
*/*                                                                  */ 04054000
*/*  Summary                                                         */ 04055000
*/*    ixcysrvr_tResponseDescriptor maps metadata in the answer area */ 04056000
*/*    returned by IXCRECV.  This record provides information about  */ 04057000
*/*    one of the responses or acknowledgments that is expected in   */ 04058000
*/*    reply to an IXCSEND request that specified EXPECTREPLY=YES.   */ 04059000
*/*                                                                  */ 04060000
*/*                                                                  */ 04061000
*/*  Usage                                                           */ 04062000
*/*    Invoke IXCRECV RECEIVE=RESPONSES with an ANSAREA that is      */ 04063000
*/*    large enough to hold all the available metadata.  Within the  */ 04064000
*/*    answer area header, aa_#Desc indicates the number of response */ 04065000
*/*    descriptors returned in the answer area and the field         */ 04066000
*/*    aa_OffsetRespDesc indicates the offset within the answer      */ 04067000
*/*    area where the first such response descriptor was placed.     */ 04068000
*/*                                                                  */ 04069000
*/*    If aa_#Desc is nonzero, the first response descriptor can be  */ 04070000
*/*    located using the following logic:                            */ 04071000
*/*                                                                  */ 04072000
*/*          rdPtr = addr(AnsArea) + aa_OffsetRespDesc               */ 04073000
*/*                                                                  */ 04074000
*/*    If aa_#Desc is greater than 1, subsequent response            */ 04075000
*/*    descriptors can be located using the following logic, where   */ 04076000
*/*    rdPtr contains the address of an existing response            */ 04077000
*/*    descriptor:                                                   */ 04078000
*/*                                                                  */ 04079000
*/*          rdPtr = rdPtr + aa_LenDesc                              */ 04080000
*/*                                                                  */ 04081000
*/*  Explanation                                                     */ 04082000
*/*    The response descriptor provides information about the        */ 04083000
*/*    response that may have been received from one particular      */ 04084000
*/*    target for an IXCSEND SENDTO=SERVER request.  It provides the */ 04085000
*/*    status of the response, and as applicable, the response       */ 04086000
*/*    received from the target server (or its agent).  The target   */ 04087000
*/*    sends a response by invoking IXCSEND SENDTO=ORIGINATOR.       */ 04088000
*/*                                                                  */ 04089000
*/*    There will be one response descriptor for each of the targets */ 04090000
*/*    of the message.  Each response descriptor is in one to one    */ 04091000
*/*    correspondence with a target descriptor.  If one establishes  */ 04092000
*/*    addressability to the first target descriptor and the first   */ 04093000
*/*    response descriptor, one will have located a corresponding    */ 04094000
*/*    pair.  If there is more than one such pair of descriptors,    */ 04095000
*/*    then establishing addressability to successive records as     */ 04096000
*/*    described above will locate the next pair of corresponding    */ 04097000
*/*    records.  The rd_index and td_index fields will have the same */ 04098000
*/*    value in records that correspond to each other.               */ 04099000
*/*                                                                  */ 04100000
*/*    Note that the presence of a response descriptor does not      */ 04101000
*/*    necessarily imply that a response was received, and even if   */ 04102000
*/*    received, whether it is still available for processing.       */ 04103000
*/*    The data in the response descriptor must be examined to make  */ 04104000
*/*    that determination.  In particular, rd_RespArrived must be    */ 04105000
*/*    ON for it to be the case that a reply was received            */ 04106000
*/*    from the target server, and md_MsgAvailable (within the       */ 04107000
*/*    message descriptr rd_MsgDesc) must be ON for the reply data   */ 04108000
*/*    to be avaialable.                                             */ 04109000
*/*                                                                  */ 04110000
*/*    The response code (rd_RespCode) summarizes the status of the  */ 04111000
*/*    message as best as XCF can determine.  It is valid for use    */ 04112000
*/*    whether or not a response and its content is available.       */ 04113000
*/*                                                                  */ 04114000
*/*                                                                  */ 04115000
*/********************************************************************/ 04116000
*                                                                       04117000
*   DECLARE                                                             04118000
*     1 ixcysrvr_tResponseDescriptor TYPE bdy(dword), /* Metadata       04119000
*                                      describing this response      */ 04120000
*       3 rd_Version fixed(8),      /* Version of data within this      04121000
*                                      mapping.  Initially zero.  May   04122000
*                                      be nonzero in the future to      04123000
*                                      indicate presence of new or      04124000
*                                      changed information.          */ 04125000
*       3 * char(3),                /* Reserved                      */ 04126000
*       3 rd_Status char(4),        /* State of this response with      04127000
*                                      respect to receiver           */ 04128000
*         5 rd_RespExpected  bit,   /* ON if XCF expects (or expected)  04129000
*                                      a response/acknowledgment from   04130000
*                                      the target.  OFF if XCF does not 04131000
*                                      expect any such response (as     04132000
*                                      might be the case if the message 04133000
*                                      was never sent to the target or  04134000
*                                      the target system failed).    */ 04135000
*         5 rd_RespArrived   bit,   /* ON if the reply from the server  04136000
*                                      or its agent arrived, in which   04137000
*                                      case other fields in the         04138000
*                                      response descriptor are valid    04139000
*                                      for use.                      */ 04140000
*                                                                       04141000
*       3 rd_RespCode isarespcode,  /* Response code. Mapped by         04142000
*                                      ixcysrvr_tRespCode            */ 04143000
*       3 * char(2),                /* Reserved                      */ 04144000
*       3 rd_RespIndex fixed,       /* Index associated with this       04145000
*                                      particular response.          */ 04146000
*       3 rd_MsgDesc isamsgdesc,    /* Metadata describing              04147000
*                                      the response message provided    04148000
*                                      by the sender of the response.   04149000
*                                      Valid for use if rd_RespArrived  04150000
*                                      is ON. Mapped by                 04151000
*                                      ixcysrvr_tMsgDescriptor       */ 04152000
*/* The following fields are valid for use if rd_RespArrived is ON   */ 04153000
*       3 rd_RespRetcode fixed(32), /* Return code provided by the      04154000
*                                      responder.                    */ 04155000
*       3 rd_RespRsncode fixed(32), /* Reason code provided by the      04156000
*                                      responder.                    */ 04157000
*       3 rd_SuppliedLevel fixed,   /* Response level that responder    04158000
*                                      used when formatting             04159000
*                                      the response data.            */ 04160000
*       3 rd_SupportsLevel fixed,   /* Maximum response                 04161000
*                                      level that the responder can     04162000
*                                      provide when formatting the      04163000
*                                      response data for the subject    04164000
*                                      message.                      */ 04165000
*       3 * char(0);                                                    04166000
*                                                                       04167000
*Declare                            /* values for rd_Version         */ 04168000
*  ixcysrvr_kRD_Version0 constant(0);                                   04169000
*                                                                       04170000
*/********************************************************************/ 04171000
*/*                                                                  */ 04172000
*/*  Message Descriptor                                              */ 04173000
*/*                                                                  */ 04174000
*/*  Summary                                                         */ 04175000
*/*    ixcysrvr_tMsgDescriptor maps metadata that describes a        */ 04176000
*/*    message.  It could describe a request that was sent to a      */ 04177000
*/*    server for processing, or it could describe a response        */ 04178000
*/*    that was received from the server or its agent.               */ 04179000
*/*                                                                  */ 04180000
*/*  Usage                                                           */ 04181000
*/*    - An IXCSEND SENDTO=SERVER request will be presented to a     */ 04182000
*/*      target server instance.  Within the Server Exit Parameter   */ 04183000
*/*      List (SXPL), the SXPLRQ_MsgDesc field contains a message    */ 04184000
*/*      descriptor that describes the server request message        */ 04185000
*/*                                                                  */ 04186000
*/*    - Invoke IXCRECV RECEIVE=RESPONSES with an ANSAREA that is    */ 04187000
*/*      large enough to hold all the available metadata for a       */ 04188000
*/*      server request that was sent by IXCSEND SENDTO=SERVER       */ 04189000
*/*      with EXPECTREPLY=YES.  For each response descriptor with    */ 04190000
*/*      the rd_RespArrived flag ON, the rd_MsgDesc field contains   */ 04191000
*/*      a message descriptor that describes the server response     */ 04192000
*/*      message.  The response was sent by an invocation of         */ 04193000
*/*      IXCSEND SENDTO=ORIGINATOR.                                  */ 04194000
*/*                                                                  */ 04195000
*/*                                                                  */ 04196000
*/*  Explanation                                                     */ 04197000
*/*      A message descriptor describes a message sent using the     */ 04198000
*/*      IXCSEND macro.  It is presented to the target of the        */ 04199000
*/*      message.  Depending on who is to process the message, the   */ 04200000
*/*      message descriptor could appear in the parameter list       */ 04201000
*/*      presented to a server exit routine, or it could appear in   */ 04202000
*/*      the answer area of an IXCRECV request that was invoked to   */ 04203000
*/*      obtain the results of a server request.                     */ 04204000
*/*                                                                  */ 04205000
*/*      A message descriptor contains a copy of the data specified  */ 04206000
*/*      via the IXCSEND keywords MSGID, MSGCNTL, SENDER, SENDERID,  */ 04207000
*/*      RESPTIME, HOLDTIME, and RESPONSELEVEL when the message was  */ 04208000
*/*      sent.  It also contains information such as the name of the */ 04209000
*/*      system that sent the message as well as timestamps to       */ 04210000
*/*      indicate when the message was sent and when it arrived.     */ 04211000
*/*                                                                  */ 04212000
*/*      The md_MsgAvailable flag indicates whether the data         */ 04213000
*/*      descriptor in the md_DataDesc is valid for use.  If so,     */ 04214000
*/*      the data descriptor can be used to locate the storage that  */ 04215000
*/*      contains the message.  The message is a copy of the data    */ 04216000
*/*      that was sent via the IXCSEND macro using the keyword       */ 04217000
*/*      MSGDATA or MSGDESC.                                         */ 04218000
*/*                                                                  */ 04219000
*/*      If the md_ExepectReply flag is ON, the sender specified     */ 04220000
*/*      EXPECTREPLY=YES on the IXCSEND invocation that sent the     */ 04221000
*/*      message.  If so, the target or its agent is expected to     */ 04222000
*/*      invoke IXCSEND SENDTO=ORIGINATOR to send the reply.         */ 04223000
*/*      The md_RespToken contains the token to be passed via the    */ 04224000
*/*      IXCSEND RESPTOKEN keyword when sending the reply.  This     */ 04225000
*/*      token allows XCF to locate the originating message to which */ 04226000
*/*      the response is to be bound.                                */ 04227000
*/*                                                                  */ 04228000
*/********************************************************************/ 04229000
*                                                                       04230000
*   DECLARE                                                             04231000
*     1 ixcysrvr_tMsgDescriptor TYPE bdy(dword), /* Metadata            04232000
*                                      describing a message.         */ 04233000
*       3 md_Version fixed(8),      /* Version of data within this      04234000
*                                      mapping.  Initially zero.  May   04235000
*                                      be nonzero in the future to      04236000
*                                      indicate presence of new or      04237000
*                                      changed information.          */ 04238000
*       3 * char(1),                /* Reserved                      */ 04239000
*       3 *          fixed(16),     /* Reserved                      */ 04240000
*       3 md_Attributes char(4),    /* Describes characteristics of     04241000
*                                      the message or its delivery.  */ 04242000
*         5 md_MsgType fixed(8),    /* Code to indicate type of         04243000
*                                      message:                         04244000
*                                        Server Request                 04245000
*                                        Response message               04246000
*                                      See constants                    04247000
*                                      ixcysrvr_kMsgType...          */ 04248000
*         5 md_MsgFlags bit(8),     /* Message description flags     */ 04249000
*           7 md_MsgAvailable bit,  /* ON if md_DataDesc can be used    04250000
*                                      to access the message data       04251000
*                                      (or a data descriptor table if   04252000
*                                      applicable).                  */ 04253000
*           7 *              bit,   /* Reserved                      */ 04254000
*           7 md_ExpectReply bit,   /* ON if sender is expecting a      04255000
*                                      response to this message      */ 04256000
*           7 * bit(5),             /* Reserved (zero)               */ 04257000
*         5 * char(2),              /* Reserved (zero)               */ 04258000
*                                                                       04259000
*       3 md_MsgID char(16),        /* Copy of MSGID provided by        04260000
*                                      sender when IXCSEND was invoked  04261000
*                                      to send this message.         */ 04262000
*       3 md_MsgCntl char(64),      /* Message control data provided    04263000
*                                      by sender (IXCSEND MSGCNTL)   */ 04264000
*       3 md_DataDesc isadatadesc,  /* Indicates where to find the      04265000
*                                      text of the message.  Valid for  04266000
*                                      use if the md_MsgAvailable flag  04267000
*                                      is ON.  This field is mapped by  04268000
*                                      ixcysrvr_tDataDescriptor.        04269000
*                                                                       04270000
*                                      As a special case for a message  04271000
*                                      descriptor that is contained     04272000
*                                      within a response descriptor     04273000
*                                      (rd_MsgDesc), the dd_DataSize    04274000
*                                      field within md_DataDesc is      04275000
*                                      valid for use if rd_RespArrived  04276000
*                                      is ON.                        */ 04277000
*       3 md_SenderName char(32),   /* Name of sender, corresponds to   04278000
*                                      IXCSEND SENDER specification. */ 04279000
*       3 md_SenderID char(16),     /* Sender ID, zero if none.         04280000
*                                      Corresponds to IXCSEND SENDERID  04281000
*                                      specification.                */ 04282000
*       3 md_SysName char(8),       /* Name of system on which sender   04283000
*                                      resides.                      */ 04284000
*       3 md_SysID fixed(32),       /* XCF System ID of system on       04285000
*                                      which sender resides.         */ 04286000
*         5 md_SysNum fixed(8),     /* XCF slot number of system     */ 04287000
*       3 md_ETodWhenSent char(16), /* Extended TOD when this message   04288000
*                                      was sent.                     */ 04289000
*       3 md_ETodWhenArrived char(16), /* Extended TOD when this        04290000
*                                      message arrived on local         04291000
*                                      system.  Set to zero if the      04292000
*                                      information is not available. */ 04293000
*       3 md_RespToken char(64),    /* RESPTOKEN to be used when        04294000
*                                      invoking IXCSEND to send         04295000
*                                      a response to this message.      04296000
*                                      Valid if md_ExpectReply is ON */ 04297000
*       3 md_RespTime fixed,        /* Amount of time sender is         04298000
*                                      allowing for the expected        04299000
*                                      response to arrive. This value   04300000
*                                      corresponds to the RESPTIME      04301000
*                                      specification from the IXCSEND   04302000
*                                      invocation.                   */ 04303000
*       3 md_HoldTime fixed,        /* Amount of time that response     04304000
*                                      will be available to sender      04305000
*                                      after its message completes.     04306000
*                                      This value corresponds to the    04307000
*                                      HOLDTIME specification from      04308000
*                                      the IXCSEND invocation.       */ 04309000
*       3 md_ResponseLevel fixed,   /* Response level requested by      04310000
*                                      sender.  Corresponds to IXCSEND  04311000
*                                      RESPONSELEVEL specification.  */ 04312000
*       3 * char(0);                                                    04313000
*                                                                       04314000
*Declare                            /* values for md_Version         */ 04315000
*  ixcysrvr_kMD_Version0 constant(0); /*                             */ 04316000
*                                                                       04317000
*Declare                            /* values for md_MsgType and        04318000
*                                      sd_MsgType                    */ 04319000
*  ixcysrvr_kMsgType_ServerRequest  constant(1), /* IXCSEND             04320000
*                                      SENDTO=SERVER                 */ 04321000
*  ixcysrvr_kMsgType_Response       constant(2); /* IXCSEND             04322000
*                                      SENDTO=ORIGINATOR             */ 04323000
*                                                                       04324000
*                                                                       04325000
*/********************************************************************/ 04326000
*/*                                                                  */ 04327000
*/* Server Exit Parameter List (SXPL)                                */ 04328000
*/*                                                                  */ 04329000
*/*  Summary                                                         */ 04330000
*/*    ixcysrvr_tSXPL maps the parameter list that is passed to a    */ 04331000
*/*    server exit routine.                                          */ 04332000
*/*                                                                  */ 04333000
*/*  Usage                                                           */ 04334000
*/*    Invoke IXCSRVR REQTYPE=START from some task to start a        */ 04335000
*/*    server.  The SERVEREXIT keyword indicates the address of the  */ 04336000
*/*    routine that is to be called to process server requests.      */ 04337000
*/*    XCF will pass an SXPL to the server exit when it calls the    */ 04338000
*/*    exit to perform some particular function.                     */ 04339000
*/*                                                                  */ 04340000
*/*    The SXPL contains the parameters to be processed by the       */ 04341000
*/*    server exit routine when called by XCF to perform some        */ 04342000
*/*    function.  The SXPL_ServerCode indicates what function the    */ 04343000
*/*    server exit is to perform, which could be any of the          */ 04344000
*/*    following:                                                    */ 04345000
*/*      ixcysrvr_kSC_InitServer - the server exit should perform    */ 04346000
*/*                                such initialization as it may     */ 04347000
*/*                                need                              */ 04348000
*/*      ixcysrvr_kSC_GetWorkArea- the server exit is to obtain      */ 04349000
*/*                                storage for XCF to use            */ 04350000
*/*      ixcysrvr_kSC_Request    - the server exit is to process     */ 04351000
*/*                                a client request that was sent    */ 04352000
*/*                                with IXCSEND SENDTO=SERVER        */ 04353000
*/*                                                                  */ 04354000
*/*  Explanation                                                     */ 04355000
*/*    The SXPL contains the parameters to be processed by the       */ 04356000
*/*    server exit routine when called by XCF to perform some        */ 04357000
*/*    function.  The base portion of the SXPL contains parameters   */ 04358000
*/*    that are common to all functions.  For example, the server    */ 04359000
*/*    code indicates what function the server exit is to            */ 04360000
*/*    perform.  The name and ID of the server are also provided.    */ 04361000
*/*                                                                  */ 04362000
*/*    Depending on the function (SXPL_ServerCode), additional       */ 04363000
*/*    function specific parameters may be provided as well.         */ 04364000
*/*    The SXPL_ParameterOffset field can be used to locate these    */ 04365000
*/*    parameters.                                                   */ 04366000
*/*                                                                  */ 04367000
*/*    These additional parameters are correlated to the server      */ 04368000
*/*    code as follows:                                              */ 04369000
*/*                                                                  */ 04370000
*/*      Server Code               Additional parameters mapped by:  */ 04371000
*/*      ------------------------  --------------------------------  */ 04372000
*/*      ixcysrvr_kSC_InitServer   ixcysrvr_tInitServer              */ 04373000
*/*      ixcysrvr_kSC_GetWorkArea  ixcysrvr_tGetWorkArea             */ 04374000
*/*      ixcysrvr_kSC_Request      ixcysrvr_tRequest                 */ 04375000
*/*                                                                  */ 04376000
*/*    Some fields in the base SXPL can be updated by the server     */ 04377000
*/*    exit routine.  Modifications to these output fields may or    */ 04378000
*/*    may not be valid depending on the server code.  The following */ 04379000
*/*    table indicates the server codes for which updates to the     */ 04380000
*/*    indicated output field are valid.  Note that updates to       */ 04381000
*/*    reserved fields in the SXPL are never permitted.  If an       */ 04382000
*/*    invalid update is made, XCF will stop the offending server    */ 04383000
*/*    instance.                                                     */ 04384000
*/*                               Updates Valid ?                    */ 04385000
*/*      Output field      Initialize GetWorkArea Request            */ 04386000
*/*      ----------------  ---------- ----------- -------            */ 04387000
*/*      SXPL_StopCode          yes        yes      yes              */ 04388000
*/*      SXPL_State             yes        yes      yes              */ 04389000
*/*      SXPL_WAD               yes        yes      yes              */ 04390000
*/*      SXPL_RespBind          no         no       yes              */ 04391000
*/*      SXPL_RefusalCode       no         yes      yes              */ 04392000
*/*      SXPL_ResultCode        no         no       yes              */ 04393000
*/*                                                                  */ 04394000
*/*                                                                  */ 04395000
*/********************************************************************/ 04396000
*                                                                       04397000
*Declare 1 ixcysrvr_tSXPL TYPE bdy(dword), /* SXPL Header            */ 04398000
*  3 SXPL_EyeCatcher char(4),       /* 'SXPL'                        */ 04399000
*  3 SXPL_Version fixed(8),         /* SXPL version.  This field is     04400000
*                                      set to indicate the presence of  04401000
*                                      additional data within this      04402000
*                                      header.  It is intended for use  04403000
*                                      by (future) exploiters that      04404000
*                                      need to determine whether the    04405000
*                                      new fields of interest to them   04406000
*                                      are valid for use.            */ 04407000
*  3 SXPL_Level fixed(8),           /* Similar to SXPL_Version, except  04408000
*                                      that this field indicates the    04409000
*                                      presence of additional data      04410000
*                                      within the request specific      04411000
*                                      parameters located via           04412000
*                                      SXPL_ParameterOffset.         */ 04413000
*  3 SXPL_ServerCode fixed(8),      /* Server code.  Indicates what     04414000
*                                      function XCF is asking the       04415000
*                                      server to perform and thus       04416000
*                                      how to map the parameters that   04417000
*                                      are being passed.  See           04418000
*                                      constants below.              */ 04419000
*  3 SXPL_Flags char(1),                                                04420000
*    5 SXPL_StopPending bit,        /* ON if the server is to be        04421000
*                                      stopped, but is being allowed    04422000
*                                      to finish pending work.       */ 04423000
*    5 * bit(7),                    /* Reserved                      */ 04424000
*  3 SXPL_StopCode fixed,           /* An output field to be set by     04425000
*                                      the server exit routine if it    04426000
*                                      wants to terminate the server.   04427000
*                                      Initially zero on entry to the   04428000
*                                      server exit routine.  If this    04429000
*                                      field is nonzero on return from  04430000
*                                      the exit, XCF stops running the  04431000
*                                      server loop and returns to the   04432000
*                                      the IXCSRVR REQTYPE=START        04433000
*                                      invoker with a return and        04434000
*                                      reason code determined by this   04435000
*                                      value.                        */ 04436000
*  3 SXPL_Length  fixed,            /* Length in bytes of SXPL,         04437000
*                                      including any parameters unique  04438000
*                                      to the server code.           */ 04439000
*  3 SXPL_UserData char(16),        /* Copy of USERDATA specified by    04440000
*                                      the IXCSRVR invocation that      04441000
*                                      started the server.           */ 04442000
*  3 SXPL_ServerName isaname,       /* Name of the server               04443000
*                                      being called.                    04444000
*                                      Mapped by ixcysrvr_tName      */ 04445000
*  3 SXPL_ServerID char(16),        /* Token that identifies the        04446000
*                                      server instantiation being       04447000
*                                      called                        */ 04448000
*  3 SXPL_Info char(64),            /* Copy of INFO specified by        04449000
*                                      the IXCSRVR invocation that      04450000
*                                      started the server.  This data   04451000
*                                      is static for the life of the    04452000
*                                      server.                       */ 04453000
*  3 SXPL_State char(64),           /* Server state.  This field can    04454000
*                                      be dynamically updated by the    04455000
*                                      server exit.  On entry to        04456000
*                                      server exit, a copy of the       04457000
*                                      server state last observed by    04458000
*                                      XCF (initially zero).  If this   04459000
*                                      field is updated by the server   04460000
*                                      exit, XCF will record the new    04461000
*                                      server state upon return from    04462000
*                                      the exit.  The server state      04463000
*                                      last recorded by XCF is made     04464000
*                                      available to outside parties     04465000
*                                      that send a suitable query       04466000
*                                      (IXCREQ) to the XCF server.   */ 04467000
*                                                                       04468000
*  3 SXPL_WAD isawad,               /* The work area descriptor         04469000
*                                      indicates storage location(s)    04470000
*                                      provided by the user that XCF    04471000
*                                      can use for a work area.  For    04472000
*                                      example, a work area might hold  04473000
*                                      the content of a server request  04474000
*                                      message sent by a client.  The   04475000
*                                      server exit can leave this data  04476000
*                                      intact, or update it to provide  04477000
*                                      a new work area for the next     04478000
*                                      request, or update it to         04479000
*                                      withdraw the work area entirely. 04480000
*                                      Regardless, the updated          04481000
*                                      descriptor determines the work   04482000
*                                      area (if any) that XCF is to     04483000
*                                      use for processing the next      04484000
*                                      server work item. Mapped by      04485000
*                                      ixcysrvr_tWorkAreaDescriptor  */ 04486000
*                                                                       04487000
*  3 SXPL_ParameterOffset fixed,    /* Offset at which the parameters   04488000
*                                      for the indicated server code    04489000
*                                      can be found.  Offset is         04490000
*                                      relative to the beginning of     04491000
*                                      the SXPL.                     */ 04492000
*  3 SXPL_RespBind fixed(8),        /* An output field to be set by     04493000
*                                      the server to change the         04494000
*                                      response bind for a request.     04495000
*                                      On entry to the server exit,     04496000
*                                      contains a value corresponding   04497000
*                                      to the RESPBIND specification    04498000
*                                      from the IXCSRVR invocation      04499000
*                                      that started the server.  When   04500000
*                                      called to process a server       04501000
*                                      request (ixcysrvr_kSC_Request),  04502000
*                                      the server exit can update this  04503000
*                                      field to indicate that the       04504000
*                                      particular request presented to  04505000
*                                      the server should have a         04506000
*                                      different RESPBIND               04507000
*                                      specification.  The response     04508000
*                                      bind (whether changed or not)    04509000
*                                      does not become effective until  04510000
*                                      XCF completes its back end       04511000
*                                      processing for the request       04512000
*                                      after the server exit            04513000
*                                      successfully returns.  For       04514000
*                                      failures prior to that point,    04515000
*                                      the request is deemed to have    04516000
*                                      failed during delivery.       */ 04517000
*  3 SXPL_RefusalCode fixed(8),     /* An output field to be set by     04518000
*                                      the server exit routine if it    04519000
*                                      wants to refuse a request.       04520000
*                                      Initially zero on entry to the   04521000
*                                      server exit routine.  If this    04522000
*                                      field is nonzero on return from  04523000
*                                      the exit, XCF will acknowledge   04524000
*                                      the associated request (if any)  04525000
*                                      with a primary response code of  04526000
*                                      ixcysrvr_RC1_Refused.  The       04527000
*                                      secondary response code will be  04528000
*                                      this refusal code.  XCF assumes  04529000
*                                      the server will not be sending   04530000
*                                      its own response.                04531000
*                                                                       04532000
*                                      Updates are valid when the       04533000
*                                      server exit is called with the   04534000
*                                      following server codes:          04535000
*                                        ixcysrvr_kSC_GetWorkArea       04536000
*                                        ixcysrvr_kSC_Request        */ 04537000
*  3 SXPL_ResultCode fixed(8),      /* An output field to be set by     04538000
*                                      the server exit routine if it    04539000
*                                      wants to have XCF acknowledge    04540000
*                                      the request.                     04541000
*                                      Initially zero on entry to the   04542000
*                                      server exit routine.  If this    04543000
*                                      field is nonzero on return from  04544000
*                                      the exit, XCF will acknowledge   04545000
*                                      the associated request           04546000
*                                      with a primary response code of  04547000
*                                      ixcysrvr_RC1_Delivered.  The     04548000
*                                      secondary response code will be  04549000
*                                      this result code.  XCF assumes   04550000
*                                      that the server will not be      04551000
*                                      sending its own response.        04552000
*                                                                       04553000
*                                      Updates are valid when the       04554000
*                                      server exit is called with the   04555000
*                                      following server codes:          04556000
*                                        ixcysrvr_kSC_Request        */ 04557000
*  3 * char(1),                     /* reserved                      */ 04558000
*  3 SXPL_TraceThread Fixed(32),    /* Token that can be used to        04559000
*                                      identify the XCF thread          04560000
*                                      associated with this call to     04561000
*                                      the server exit.  Intended for   04562000
*                                      use with problem diagnosis.      04563000
*                                      Can be used to identify XCF      04564000
*                                      component traces that may be     04565000
*                                      relevant.                     */ 04566000
*  3 * char(4),                     /* reserved                      */ 04567000
*  3 * char(0);                                                         04568000
*                                                                       04569000
*Declare                                                                04570000
*  ixcysrvr_kSxplEyecatcher char(4) constant('SXPL');                   04571000
*                                                                       04572000
*Declare                            /* values for SXPL_Version       */ 04573000
*  ixcysrvr_kSXPL_Version0 fixed   constant(0); /* initial version   */ 04574000
*                                                                       04575000
*Declare                            /* values for SXPL_Level         */ 04576000
*  ixcysrvr_kSXPL_Level0 fixed   constant(0); /* initial level       */ 04577000
*                                                                       04578000
*                                                                       04579000
*/*------------------------------------------------------------------*/ 04580000
*/*   Server Codes                                                   */ 04581000
*/*                                                                  */ 04582000
*/*   All servers are are expected to process the following codes:   */ 04583000
*/*     o InitServer  - first call made to the server exit           */ 04584000
*/*     o GetWorkArea - obtain a work area for XCF to use            */ 04585000
*/*                                                                  */ 04586000
*/*   The following server codes are used only as the result of some */ 04587000
*/*   explicit action on the part of the exploiter.  The server is   */ 04588000
*/*   expected to process whatever codes apply.                      */ 04589000
*/*     o Request       - process a client request message           */ 04590000
*/*                                                                  */ 04591000
*/*------------------------------------------------------------------*/ 04592000
*Declare                            /* SXPL_ServerCode values        */ 04593000
*  ixcysrvr_kSC_InitServer       constant(1), /* initialize server   */ 04594000
*  ixcysrvr_kSC_GetWorkArea      constant(2), /* XCF wants storage   */ 04595000
*  ixcysrvr_kSC_Request          constant(3); /* process request sent   04596000
*                                      by IXCSEND SENDTO=SERVER      */ 04597000
*                                                                       04598000
*/*------------------------------------------------------------------*/ 04599000
*/*   Server Stop Codes                                              */ 04600000
*/*                                                                  */ 04601000
*/*     The server exit can set SXPL_StopCode to have XCF exit the   */ 04602000
*/*     server stub loop and return to the invoker of the IXCSRVR    */ 04603000
*/*     REQTYPE=START that started the server instance.  On entry to */ 04604000
*/*     the server exit routine, SXPL_StopCode =                     */ 04605000
*/*     ixcysrvr_kStopCodeContinue.  If the server is to continue    */ 04606000
*/*     processing work, the exit need not update the "stop code".   */ 04607000
*/*                                                                  */ 04608000
*/*     If the server is to stop processing work, it should set an   */ 04609000
*/*     acceptable stop code prior to normal return to XCF.          */ 04610000
*/*     XCF then returns to the invoker of the IXCSRVR REQTYPE=START */ 04611000
*/*     request, translating the stop code into the return and       */ 04612000
*/*     reason code indicated below.                                 */ 04613000
*/*                                                                  */ 04614000
*/*                                        IXCSRVR REQTYPE=START     */ 04615000
*/*       SXPL_StopCode upon return      RC     Reason Code          */ 04616000
*/*       -----------------------------  -- ---------------------    */ 04617000
*/*       ixcysrvr_kStopCodeFinished     0  n/a                      */ 04618000
*/*       ixcysrvr_kStopCodeFailure      4  ixcsrvrRsnExitFailure    */ 04619000
*/*   (1) ixcysrvr_kStopCodeContinue     4  ixcsrvrRsnStopped        */ 04620000
*/*   (2) <any other nonzero value>      8  ixcsrvrRsnSxplStopCode   */ 04621000
*/*                                                                  */ 04622000
*/*                                                                  */ 04623000
*/*  Notes:                                                          */ 04624000
*/*                                                                  */ 04625000
*/*   (1) The IXCSRVR REQTYPE=START service routine returns with     */ 04626000
*/*       return code 4 and reason code ixcsrvrRsnStopped if XCF     */ 04627000
*/*       stops the server as the result of an IXCSRVR REQTYPE=STOP  */ 04628000
*/*       request.  If the server instance was aware of the stop at  */ 04629000
*/*       all, it did not set the SXPL_StopCode to a nonzero value.  */ 04630000
*/*       It may well be that the XCF server stub code exited the    */ 04631000
*/*       server loop without calling the server exit, in which case */ 04632000
*/*       the server exit had no opportunity to set the stop code.   */ 04633000
*/*                                                                  */ 04634000
*/*   (2) Any other nonzero value is invalid and deemed to be a      */ 04635000
*/*       violation of the interface.                                */ 04636000
*/*                                                                  */ 04637000
*/*------------------------------------------------------------------*/ 04638000
*                                                                       04639000
*Declare                            /* SXPL_StopCode values          */ 04640000
*  ixcysrvr_kStopCodeContinue    constant(0), /* continue running the   04641000
*                                      server loop                   */ 04642000
*  ixcysrvr_kStopCodeFinished    constant(1), /* The server exit        04643000
*                                      finished and is stopping         04644000
*                                      normally.                     */ 04645000
*  ixcysrvr_kStopCodeFailure     constant(2); /* The server exit        04646000
*                                      is stopping due to a failure. */ 04647000
*                                                                       04648000
*/*------------------------------------------------------------------*/ 04649000
*/*   RESPBIND Code                                                  */ 04650000
*/*                                                                  */ 04651000
*/*     The server exit can set SXPL_RespBind to indicate what       */ 04652000
*/*     recovery bind XCF should establish for the request being     */ 04653000
*/*     processed by the server.  This specification determines the  */ 04654000
*/*     circumstances for which XCF will cancel the response message */ 04655000
*/*     that is expected to be sent in reply to the request.         */ 04656000
*/*     Canceling a response implies that the originator of the      */ 04657000
*/*     request that is waiting for the response need not wait for   */ 04658000
*/*     its timeout value to expire to discover that no response was */ 04659000
*/*     sent.  If the entity specified by the RESPBIND terminates    */ 04660000
*/*     without sending a response, XCF will inform the originator   */ 04661000
*/*     that the reply is no longer expected.                        */ 04662000
*/*                                                                  */ 04663000
*/*     XCF sets the response bind after the server exit returns     */ 04664000
*/*     from processing the request.  Thus for the response bind to  */ 04665000
*/*     become effective, XCF must complete its back end processing  */ 04666000
*/*     for the request.  If a failure should occur before XCF can   */ 04667000
*/*     set the response bind, the request may be acknowledged with  */ 04668000
*/*     a response code indicating that a failure occurred while the */ 04669000
*/*     request was being processed.  So in cases where the failure  */ 04670000
*/*     occurs after the server exit successfully arranged for its   */ 04671000
*/*     agent to send the expected response but before XCF can set   */ 04672000
*/*     the response bind, the XCF acknowledgment may race with the  */ 04673000
*/*     response to be sent by agent.  If the XCF acknowledgment     */ 04674000
*/*     wins the race, the response by the agent will be discarded.  */ 04675000
*/*                                                                  */ 04676000
*/*------------------------------------------------------------------*/ 04677000
*                                                                       04678000
*Declare                            /* Values for SXPL_RespBind.        04679000
*                                      Cancel expected response if:  */ 04680000
*  ixcysrvr_kRespBind_Instance fixed(8) constant(1), /* instance of     04681000
*                                      server that processed request    04682000
*                                      stops or terminates           */ 04683000
*  ixcysrvr_kRespBind_AddrSpace fixed(8) constant(2), /* address space  04684000
*                                      containing the server instance   04685000
*                                      that processed the request       04686000
*                                      terminates                    */ 04687000
*  ixcysrvr_kRespBind_System   fixed(8) constant(3); /* system          04688000
*                                      containing the server instance   04689000
*                                      that processed the request       04690000
*                                      terminates                    */ 04691000
*                                                                       04692000
*                                                                       04693000
*/********************************************************************/ 04694000
*/*                                                                  */ 04695000
*/* Server Exit Parameter List (SXPL) Function Specific Parameters   */ 04696000
*/* when SXPL_ServerCode = ixcysrvr_kSC_InitServer                   */ 04697000
*/*                                                                  */ 04698000
*/*  Summary                                                         */ 04699000
*/*    ixcysrvr_tInitServer maps the function specific parameters    */ 04700000
*/*    passed to a server exit routine when the server code is       */ 04701000
*/*    ixcysrvr_kSC_InitServer.                                      */ 04702000
*/*                                                                  */ 04703000
*/*  Usage                                                           */ 04704000
*/*    Invoke IXCSRVR REQTYPE=SERVER to start a server instance.     */ 04705000
*/*    The first call to the server exit routine will be an          */ 04706000
*/*    "initialize server" request.  The server exit routine will    */ 04707000
*/*    perform whatever initialization is deemed appropriate.        */ 04708000
*/*                                                                  */ 04709000
*/*  Explanation                                                     */ 04710000
*/*    When a server exit routine is called to initialize itself,    */ 04711000
*/*    SXPL_ParameterOffset indicates the offset within the SXPL at  */ 04712000
*/*    which storage mapped by ixcysrvr_tInitServer is located.      */ 04713000
*/*    These parameters reflect the keyword values specified on the  */ 04714000
*/*    IXCSRVR REQTYPE=START request that started the server         */ 04715000
*/*    instance.                                                     */ 04716000
*/*                                                                  */ 04717000
*/*    Initialization may or may not be necessary depending on the   */ 04718000
*/*    application.  For example, it may be simpler to have the      */ 04719000
*/*    invoker of IXCSRVER REQTYPE=START do the initialization and   */ 04720000
*/*    then use the USERDATA keyword to pass the location of a       */ 04721000
*/*    control structure to the server exit (via SXPL_UserData).     */ 04722000
*/*                                                                  */ 04723000
*/*    The initialization might, for example, update SXPL_WAD to     */ 04724000
*/*    provide a work area for XCF to use when delivering requests   */ 04725000
*/*    to the server on subsequent calls.  In cases where the        */ 04726000
*/*    clint/server implementation is such that the request messages */ 04727000
*/*    are of a known size, providing a work area at initialization  */ 04728000
*/*    could imply that the server exit would never need to process  */ 04729000
*/*    a "get work area" request.                                    */ 04730000
*/*                                                                  */ 04731000
*/*    Note that XCF does not call the server exit routine to        */ 04732000
*/*    perform a "shut down" or "termination" request.  XCF expects  */ 04733000
*/*    the invoker of the IXCSRVR REQTYPE=START request to provide   */ 04734000
*/*    for any needed recovery of resources that may have been       */ 04735000
*/*    acquired by the server exit routine.  In cases where such     */ 04736000
*/*    recovery is needed, the IXCSEND keyword USERDATA could be     */ 04737000
*/*    used to locate a control structure where the server exit      */ 04738000
*/*    would record the resources for which it is responsible.       */ 04739000
*/*    When XCF stops the server, the code that started the server   */ 04740000
*/*    (or its recovery) would examine the control structure to      */ 04741000
*/*    determine the set of resources that need to be cleaned up.    */ 04742000
*/*                                                                  */ 04743000
*/*                                                                  */ 04744000
*/********************************************************************/ 04745000
*                                                                       04746000
*Declare                                                                04747000
*  1 ixcysrvr_tInitServer TYPE bdy(dword), /* parameters for server     04748000
*                                      initialization                */ 04749000
*    3 SXPLIS_Description    char(32), /* IXCSRVR DESCRIPTION        */ 04750000
*    3 SXPLIS_MinServerLevel fixed(32), /* IXCSRVR MINLEVEL          */ 04751000
*    3 SXPLIS_MaxServerLevel fixed(32), /* IXCSRVR MAXLEVEL          */ 04752000
*    3 SXPLIS_MinClientLevel fixed(32), /* IXCSRVR MINCLIENT         */ 04753000
*    3 SXPLIS_MaxClientLevel fixed(32), /* IXCSRVR MAXCLIENT         */ 04754000
*    3 SXPLIS_Features isafeatures, /* Server FEATURES specified on     04755000
*                                      the IXCSRVR START request.       04756000
*                                      Mapped by ixcysrvr_tFeatures  */ 04757000
*    3 SXPLIS_FDI fixed,            /* IXCSRVR FDI                   */ 04758000
*    3 SXPLIS_RespBind fixed,       /* IXCSRVR RESPBIND              */ 04759000
*    3 * char(0);                                                       04760000
*                                                                       04761000
*                                                                       04762000
*/********************************************************************/ 04763000
*/*                                                                  */ 04764000
*/* Server Exit Parameter List (SXPL) Function Specific Parameters   */ 04765000
*/* when SXPL_ServerCode = ixcysrvr_kSC_GetWorkArea                  */ 04766000
*/*                                                                  */ 04767000
*/*  Summary                                                         */ 04768000
*/*    ixcysrvr_tGetWorkArea maps the function specific parameters   */ 04769000
*/*    passed to a server exit routine when the server code is       */ 04770000
*/*    ixcysrvr_kSC_GetWorkArea.                                     */ 04771000
*/*                                                                  */ 04772000
*/*  Usage                                                           */ 04773000
*/*    When XCF needs a new work area, it calls the server exit      */ 04774000
*/*    routine to process a "get work area" request.  The server     */ 04775000
*/*    exit routine is expected to obtain the requested storage,     */ 04776000
*/*    update the SXPL_WAD to indicate the location and size of the  */ 04777000
*/*    storage provided, and return to XCF.                          */ 04778000
*/*                                                                  */ 04779000
*/*                                                                  */ 04780000
*/*  Explanation                                                     */ 04781000
*/*    When a server exit routine is called to get a work area for   */ 04782000
*/*    XCF to use, SXPL_ParameterOffset indicates the offset within  */ 04783000
*/*    the SXPL at which storage mapped by ixcysrvr_tGetWorkArea is  */ 04784000
*/*    located.                                                      */ 04785000
*/*                                                                  */ 04786000
*/*    When a client invokes IXCSEND SENDTO=SERVER to send a request */ 04787000
*/*    to a server, XCF puts a copy of the request message in a      */ 04788000
*/*    server provided work area, and then calls the server to       */ 04789000
*/*    process the request.  If the current work area is not large   */ 04790000
*/*    enough to hold the content of the request message, XCF first  */ 04791000
*/*    calls the server exit to get a work area of sufficient size.  */ 04792000
*/*    The SXPLGW_TotalSize field indicates how much storage is      */ 04793000
*/*    needed.  The server exit is expected to obtain the requested  */ 04794000
*/*    storage and update the SXPL_WAD field to describe the storage */ 04795000
*/*    that XCF is to use.                                           */ 04796000
*/*                                                                  */ 04797000
*/*    Upon return from the server exit, XCF inspects the refusal    */ 04798000
*/*    code (SXPL_RefusalCode) set by the server exit routine.  If   */ 04799000
*/*    nonzero, XCF sends an acknowledgment (as needed) to the       */ 04800000
*/*    originator of the request to indicate that the target refused */ 04801000
*/*    the request.  The request is discarded and will not be        */ 04802000
*/*    presented to the server.  The work area provided, if any,     */ 04803000
*/*    will not be used for the request that was refused, but could  */ 04804000
*/*    potentially be used for a subsequent request.                 */ 04805000
*/*                                                                  */ 04806000
*/*                                                                  */ 04807000
*/*    If the request is not refused, XCF inspects the SXPL_WAD to   */ 04808000
*/*    verify that the work area it describes is available for use   */ 04809000
*/*    and large enough to hold the message.  If not, XCF sends an   */ 04810000
*/*    acknowledgment (as needed) to the originator of the request   */ 04811000
*/*    to indicate that the request was not delivered because the    */ 04812000
*/*    target failed to provide a work area.  The request is         */ 04813000
*/*    discarded and will not be presented to the server.  The work  */ 04814000
*/*    area provided, if any, will not be used for the request that  */ 04815000
*/*    was refused, but could potentially be used for a subsequent   */ 04816000
*/*    request.                                                      */ 04817000
*/*                                                                  */ 04818000
*/*    If the work area is not accessible, XCF sends an              */ 04819000
*/*    acknowledgment (as needed) to the originator of the request   */ 04820000
*/*    to indicate that the request was not delivered due to a       */ 04821000
*/*    server error.  XCF also stops the server.                     */ 04822000
*/*                                                                  */ 04823000
*/*    If the provided work area is available for use, large enough  */ 04824000
*/*    to hold the request message and accessible, XCF copies the    */ 04825000
*/*    messaage into the work area and calls the server exit to      */ 04826000
*/*    process the request.                                          */ 04827000
*/*                                                                  */ 04828000
*/*                                                                  */ 04829000
*/*    The SXPL_WAD is mapped by ixcysrvr_tWorkAreaDescriptor.  To   */ 04830000
*/*    provide a work area, the server exit must set the             */ 04831000
*/*    WAD_Available flag to indicate that the work area described   */ 04832000
*/*    by WAD_DataDesc is available for use by XCF.  Set the         */ 04833000
*/*    WAD_StgKey field to specify the storage key that XCF should   */ 04834000
*/*    use when storing into the indicated work area.  Within the    */ 04835000
*/*    WAD_DataDesc field, one must indicate the size, ALET, and     */ 04836000
*/*    address of a contiguous storage area to be used as the work   */ 04837000
*/*    area.                                                         */ 04838000
*/*                                                                  */ 04839000
*/*                                                                  */ 04840000
*/********************************************************************/ 04841000
*                                                                       04842000
*Declare                            /* get work area parameters      */ 04843000
*  1 ixcysrvr_tGetWorkArea TYPE bdy(dword),                             04844000
*    3 SXPLGW_Requirements char(4),                                     04845000
*      5 SXPLGW_MustBeContiguous bit, /* ON if one contiguous storage   04846000
*                                      area of the indicated total      04847000
*                                      size is required to process the  04848000
*                                      pending request.  OFF implies    04849000
*                                      that multiple distinct work      04850000
*                                      areas can also be used.  Even    04851000
*                                      if the flag is ON, the server    04852000
*                                      can provide a data descriptor    04853000
*                                      table that defines multiple      04854000
*                                      data areas, however the first    04855000
*                                      entry in the table must          04856000
*                                      describe a contiguous storage    04857000
*                                      area of the indicated total      04858000
*                                      size.                         */ 04859000
*      5 * bit(31),                 /* Reserved.                     */ 04860000
*    3 SXPLGW_TotalSize fixed,      /* Total number of bytes of         04861000
*                                      storage required for the new     04862000
*                                      work area(s)                  */ 04863000
*    3 * char(8),                   /* Reserved                      */ 04864000
*    3 * char(0);                                                       04865000
*                                                                       04866000
*Declare                                                                04867000
*  1 ixcysrvr_tSizeArray TYPE bdy(word),                                04868000
*    3 sa_Size(*) fixed;                                                04869000
*                                                                       04870000
*                                                                       04871000
*/********************************************************************/ 04872000
*/*                                                                  */ 04873000
*/* Server Exit Parameter List (SXPL) Function Specific Parameters   */ 04874000
*/* when SXPL_ServerCode = ixcysrvr_kSC_Request                      */ 04875000
*/*                                                                  */ 04876000
*/*  Summary                                                         */ 04877000
*/*    ixcysrvr_tRequest maps the function specific parameters       */ 04878000
*/*    passed to a server exit routine when the server code is       */ 04879000
*/*    ixcysrvr_kSC_Request.                                         */ 04880000
*/*                                                                  */ 04881000
*/*  Usage                                                           */ 04882000
*/*    Invoke IXCSRVR REQTYPE=SERVER to start a server instance.     */ 04883000
*/*    When a client invokes IXCSEND SENDTO=SERVER to send a request */ 04884000
*/*    to the server, XCF puts a copy of the request message in a    */ 04885000
*/*    server provided work area, and then calls the server to       */ 04886000
*/*    process the request.  These parameters provide information    */ 04887000
*/*    about the request.                                            */ 04888000
*/*                                                                  */ 04889000
*/*  Explanation                                                     */ 04890000
*/*    When a server exit routine is called to process a client      */ 04891000
*/*    request, SXPL_ParameterOffset indicates the offset within     */ 04892000
*/*    the SXPL at which storage mapped by ixcysrvr_tRequest is      */ 04893000
*/*    located.  These parameters reflect the keyword values         */ 04894000
*/*    specified on the IXCSEND SENDTO=SERVER invocation used by the */ 04895000
*/*    client to send the request message to the server, namely:     */ 04896000
*/*      o FUNCTION                                                  */ 04897000
*/*      o DESCRIPTION                                               */ 04898000
*/*      o CLIENTLEVEL                                               */ 04899000
*/*      o Server selection criteria extracted from CRITERIA         */ 04900000
*/*                                                                  */ 04901000
*/*    The message descriptor (SXPLRQ_MsgDesc) contains a copy of    */ 04902000
*/*    the IXCSEND MSGID and MSGCNTL keyword values specified by the */ 04903000
*/*    client.  If the client provided actual message content (via   */ 04904000
*/*    MSGDATA or MSGDESC keywords with a nonzero MSGLEN), the       */ 04905000
*/*    message descriptor will indicate that the message content is  */ 04906000
*/*    available.  If so, the data descriptor field (md_DataDesc)    */ 04907000
*/*    within the message descriptor indicates where XCF put a copy  */ 04908000
*/*    of the client message data.                                   */ 04909000
*/*                                                                  */ 04910000
*/*    The message descriptor also contains copies of other IXCSEND  */ 04911000
*/*    keyword values (SENDER, SENDERID, RESPTIME, HOLDTIME), as     */ 04912000
*/*    well as other metadata (such as ETODs indicating when the     */ 04913000
*/*    message was sent and when it arrived, and which system in the */ 04914000
*/*    sysplex sent the message).                                    */ 04915000
*/*                                                                  */ 04916000
*/*    If the client expects a reply, the md_ExpectReply flag will   */ 04917000
*/*    be set to so indicate and a copy of the RESPONSELEVEL keyword */ 04918000
*/*    value will be provided as well.  If a reply is expected, the  */ 04919000
*/*    server (or its agent) should formulate an appropriate reply   */ 04920000
*/*    and send the response by invoking IXCSEND SENDTO=ORIGINATOR.  */ 04921000
*/*    The md_RespToken field in the message descriptor contains the */ 04922000
*/*    token to be specified for the RESPTOKEN keyword when sending  */ 04923000
*/*    the reply.  Note that XCF will reuse the storage containing   */ 04924000
*/*    the SXPL for a subsequent request.  So if the reply is not    */ 04925000
*/*    sent before the server exit routine gives up control, it must */ 04926000
*/*    take pains to preserve a copy of the md_RespToken value in    */ 04927000
*/*    some other storage area for later use when sending the reply. */ 04928000
*/*                                                                  */ 04929000
*/*    Note that if the client targeted the server by its server ID, */ 04930000
*/*    XCF did not apply any of the server selection criteria that   */ 04931000
*/*    may have been specified on the IXCSEND request.  The server   */ 04932000
*/*    exit routine may need to inspect these criteria to determine  */ 04933000
*/*    whether and/or how to process the request.                    */ 04934000
*/*                                                                  */ 04935000
*/*                                                                  */ 04936000
*/*    For some servers, it may be possible to provide one work area */ 04937000
*/*    for XCF to use over and over for each new client request.     */ 04938000
*/*    This case might apply, for example, to a server whose request */ 04939000
*/*    messages are of a known size and whose requests are processed */ 04940000
*/*    synchronously by the server exit routine.  If so, one might   */ 04941000
*/*    provide a work area when the server exit is called to         */ 04942000
*/*    initialize itself, and then never need to process a "get work */ 04943000
*/*    areaa" request.                                               */ 04944000
*/*                                                                  */ 04945000
*/*    For some servers, a new work area must be provided for each   */ 04946000
*/*    client request to be processed.  This case might apply, for   */ 04947000
*/*    example, to a server that arranges for asynchronous           */ 04948000
*/*    processing of the request by some other work unit.  If the    */ 04949000
*/*    server exit leaves the work area available to XCF when it     */ 04950000
*/*    returns, the work area could be overlaid with the content of  */ 04951000
*/*    the next request message to be presented to the server exit,  */ 04952000
*/*    which in turn could corrupt the content of the work area as   */ 04953000
*/*    seen by the asynchronous work unit that is processing the     */ 04954000
*/*    previous request.  To preserve the integrity of the work area */ 04955000
*/*    for the asynchronous work unit, the server exit would need to */ 04956000
*/*    update the SXPL_WAD to either indicate that the work area is  */ 04957000
*/*    no longer available to XCF or to provide a new work area.     */ 04958000
*/*    Alternatively, the server exit could arrange for the          */ 04959000
*/*    asynchronous work unit to process a copy of the data in the   */ 04960000
*/*    work area, in which case the work area could be left          */ 04961000
*/*    intact for XCF to use with the next request.                  */ 04962000
*/*                                                                  */ 04963000
*/********************************************************************/ 04964000
*                                                                       04965000
*Declare                                                                04966000
*  1 ixcysrvr_tRequest TYPE bdy(dword), /* parameters to describe a     04967000
*                                      request that was sent to the     04968000
*                                      server                        */ 04969000
*    3 SXPLRQ_Function char(8),     /* Function server is to perform    04970000
*                                      for the sender.  Copy of         04971000
*                                      FUNCTION from IXCSEND.        */ 04972000
*    3 SXPLRQ_Description char(32), /* Copy of DESCRIPTION from         04973000
*                                      IXCSEND invocation used by       04974000
*                                      client to send the request    */ 04975000
*    3 SXPLRQ_ClientLevel fixed(32), /* Level of client that sent the   04976000
*                                      request.  Copy of CLIENTLEVEL    04977000
*                                      from IXCSEND.                 */ 04978000
*    3 SXPLRQ_MinLevel fixed(32),   /* Minimum server level specified   04979000
*                                      by sender.  Copy of              04980000
*                                      sc_MinServerLevel value from     04981000
*                                      IXCSEND CRITERIA.             */ 04982000
*    3 SXPLRQ_MaxLevel fixed(32),   /* Maximum server level specified   04983000
*                                      by sender.  Copy of              04984000
*                                      sc_MaxServerLevel value from     04985000
*                                      IXCSEND CRITERIA.             */ 04986000
*    3 * char(4),                   /* Reserved                      */ 04987000
*    3 SXPLRQ_Features isafeatures, /* Features that the sender         04988000
*                                      required the server to support.  04989000
*                                      Mapped by ixcysrvr_tFeatures.    04990000
*                                      Copy of sc_Features value from   04991000
*                                      IXCSEND CRITERIA.             */ 04992000
*    3 SXPLRQ_MsgDesc isamsgdesc,   /* Metadata describing the message  04993000
*                                      provided by the sender of the    04994000
*                                      request.  In particular, if the  04995000
*                                      md_MsgAvailable flag is ON, the  04996000
*                                      data descriptor (md_DataDesc)    04997000
*                                      indicates where to find the      04998000
*                                      text of the client request       04999000
*                                      message.  Mapped by              05000000
*                                      ixcysrvr_tMsgDescriptor       */ 05001000
*    3 * char(0);                                                       05002000
*                                                                       05003000
*                                                                       05004000
*/********************************************************************/ 05005000
*/*                                                                  */ 05006000
*/*  Response Codes                                                  */ 05007000
*/*                                                                  */ 05008000
*/*  Summary                                                         */ 05009000
*/*    A response code provides status information about the         */ 05010000
*/*    delivery of a client request.                                 */ 05011000
*/*                                                                  */ 05012000
*/*  Usage                                                           */ 05013000
*/*    Invoke IXCSEND SENDTO=SERVER to send a request to a server    */ 05014000
*/*    for processing.  If EXPECTREPLY=YES or a nonzero HOLDTIME     */ 05015000
*/*    value is specified, XCF will provide a response code for      */ 05016000
*/*    the request.  Invoke IXCRECV to obtain the request results.   */ 05017000
*/*    The metadata provided in the answer area (ANSAREA) will       */ 05018000
*/*    include the response code (td_RespCode, and rd_RespCode if    */ 05019000
*/*    applicable).                                                  */ 05020000
*/*                                                                  */ 05021000
*/*                                                                  */ 05022000
*/*  Explanation                                                     */ 05023000
*/*    The IXCSEND service is used to send a message, which may or   */ 05024000
*/*    may not expect a response.  The "response code" provided by   */ 05025000
*/*    the IXCRECV service is intended to provide information about  */ 05026000
*/*    the status of the message, and as applicable, its response.   */ 05027000
*/*    In some cases, the status is certain.  In others, the status  */ 05028000
*/*    is in doubt.  For example, if a message times out before a    */ 05029000
*/*    response is received, it may not be certain whether the       */ 05030000
*/*    target received, processed, or replied to the message.  The   */ 05031000
*/*    particulars could have implications with respect to how the   */ 05032000
*/*    sender should proceed.  Generally it is these "in doubt"      */ 05033000
*/*    cases that cause the most consternation as one cannot know    */ 05034000
*/*    what actually happened.                                       */ 05035000
*/*                                                                  */ 05036000
*/*    A response code contains two values.  The "primary response   */ 05037000
*/*    code" indicates what happened to the message and the          */ 05038000
*/*    "secondary response code" provides additional details.        */ 05039000
*/*                                                                  */ 05040000
*/*    Note that we have ommitted the "ixcysrvr_" prefix from the    */ 05041000
*/*    relevant response code constant names in the tables below.    */ 05042000
*/*                                                                  */ 05043000
*/*    Unless noted otherwise, the secondary response codes whose    */ 05044000
*/*    name contains "RC2_Send" are detected by the sending system,  */ 05045000
*/*    and those containing "RC2_Recv" are detected by the target    */ 05046000
*/*    system.                                                       */ 05047000
*/*                                                                     05048000
*                                                                       05049000
*   Primary.Secondary  Explanation                                      05050000
*   -----------------  ------------------------------------------------ 05051000
* o RC1_NotSent        Message was not sent to target.  Thus the        05052000
*                      target never processed the message and cannot    05053000
*                      possibly respond.  The secondary response code   05054000
*                      explains why the message was not sent.           05055000
*                                                                       05056000
*     .RC2_SendNoResources                                              05057000
*                      The sending system was unable to obtain the      05058000
*                      resources needed to process the message.  For    05059000
*                      example, the system is out of storage.           05060000
*     .RC2_SendFailure                                                  05061000
*                      The attempt to send the message to the target    05062000
*                      failed.                                          05063000
*     .RC2_SendTargetNotExist                                           05064000
*                      The target does not exist.  For example, the     05065000
*                      system on which the target resides is no longer  05066000
*                      active in the sysplex.                           05067000
*     .RC2_SendTargetDownLevel                                          05068000
*                      The target is not capable of processing the      05069000
*                      request.  For example, the target system does    05070000
*                      not support XCF Client/Server interfaces.        05071000
*     .RC2_SendTimedOut                                                 05072000
*                      The SENDTIME timeout value specified on the      05073000
*                      IXCSEND request expired before the message could 05074000
*                      be sent.                                         05075000
*     .RC2_SendCancelled                                                05076000
*                      The message was cancelled before it could be     05077000
*                      sent.  For example, the XCF Message Control      05078000
*                      Service (IXCMSGC) was invoked to force           05079000
*                      completion of the message (REQUEST=COMPLETION).  05080000
*     .RC2_SendReleased                                                 05081000
*                      The message was cancelled before it could be     05082000
*                      sent.  For example, the XCF Message Control      05083000
*                      Service (IXCMSGC) was invoked to force           05084000
*                      termination of the send (REQUEST=RELEASEMSG).    05085000
*                                                                       05086000
*                                                                       05087000
*   Primary.Secondary  Explanation                                      05088000
*   -----------------  ------------------------------------------------ 05089000
* o RC1_InProgress     The message was sent to the target.              05090000
*                                                                       05091000
*     .RC2_Unknown     XCF does not have any further information about  05092000
*                      about the message.  It may or may not have been  05093000
*                      delivered to the target.  If delivered to the    05094000
*                      target, the message may or may not have been     05095000
*                      processed successfully.  If processed, the       05096000
*                      target may or may not have sent a response.      05097000
*                      If a response was in fact sent, it has not       05098000
*                      been received by the sending system.             05099000
*                                                                       05100000
*                                                                       05101000
*   Primary.Secondary  Explanation                                      05102000
*   -----------------  ------------------------------------------------ 05103000
* o RC1_NoReceiver     There is no receiver for the message.  The       05104000
*                      system to which the message was sent indicates   05105000
*                      that the intended target was not found.          05106000
*                                                                       05107000
*     .RC2_RecvTargetNotExist                                           05108000
*                      The intended target does not exist.              05109000
*                      For example, no instances of the indicated       05110000
*                      server are defined on the target system.         05111000
*     .RC2_RecvTargetNotSuitable                                        05112000
*                      The intended target exists, but none of the      05113000
*                      defined instances are suitable receivers for     05114000
*                      the message.  For example, one or more           05115000
*                      instances of the indicated server exist on the   05116000
*                      target system, but none of them match the        05117000
*                      server selection criteria specified on the       05118000
*                      IXCSEND invocation (CLIENTLEVEL and CRITERIA).   05119000
*     .RC2_RecvTargetTerminated                                         05120000
*                      The intended target terminated before the        05121000
*                      message could be processed.  For example, a      05122000
*                      suitable instance of the indicated server        05123000
*                      existed on the target system when the message    05124000
*                      arrived, but all such instances terminated       05125000
*                      before the message could be processed.  Also     05126000
*                      includes the case where all the suitable         05127000
*                      instances have stop requests pending and are     05128000
*                      thus not eligible to process newly arriving      05129000
*                      requests.  So this code implies that a new       05130000
*                      server instance would need to be started in      05131000
*                      order for new requests to be processed, but it   05132000
*                      does not necessarily imply that there are no     05133000
*                      suitable server instances running.               05134000
*                                                                       05135000
*                                                                       05136000
*                                                                       05137000
*   Primary.Secondary  Explanation                                      05138000
*   -----------------  ------------------------------------------------ 05139000
* o RC1_NotDelivered   Message was not delivered to the target.         05140000
*                      Suitable targets exist, but the message was      05141000
*                      neither presented to nor processed by any of     05142000
*                      them.                                            05143000
*                                                                       05144000
*     .RC2_RecvNoResources                                              05145000
*                      The target system was unable to obtain the       05146000
*                      resources needed to process the message.  For    05147000
*                      example, the system is out of storage.           05148000
*     .RC2_RecvXcfError                                                 05149000
*                      An internal XCF error occurred.                  05150000
*     .RC2_RecvTargetNoWorkArea                                         05151000
*                      In preparation for presenting the message to     05152000
*                      the target, XCF asked the target to provide      05153000
*                      storage for a work area.  The target did not     05154000
*                      provide an acceptable work area.                 05155000
*                                                                       05156000
*     .RC2_RecvTargetError                                              05157000
*                      In preparation for presenting the message to     05158000
*                      the target, the target violated XCF interfaces   05159000
*                      and protocols.  For example, the target failed   05160000
*                      to provide accessible storage areas or           05161000
*                      otherwise violated the rules of engagement.      05162000
*     .RC2_RecvTargetTerminated                                         05163000
*                      While preparing to present the message to the    05164000
*                      target, the target instance failed               05165000
*                      before the message could be processed.           05166000
*                                                                       05167000
*                                                                       05168000
*   Primary.Secondary  Explanation                                      05169000
*   -----------------  ------------------------------------------------ 05170000
* o RC1_Delivered      The message was successfully delivered to the    05171000
*                      target.  The message may or may not have been    05172000
*                      processed correctly by the target.  If a         05173000
*                      response is expected, the response may or may    05174000
*                      not have been sent.  If a response was sent, it  05175000
*                      has not arrived.                                 05176000
*                                                                       05177000
*     .RC2_OK (=0)                                                      05178000
*                      The target server instance successfully returned 05179000
*                      to XCF when called to process the request.       05180000
*                      If a response was sent, it has not arrived.      05181000
*                                                                       05182000
*     .RC2 (user)      Any nonzero value is a secondary response code   05183000
*                      defined by the user.  It is a copy of the        05184000
*                      delivery code (SXPL_ResultCode) that was set     05185000
*                      by the target that received the message.         05186000
*                                                                       05187000
*                                                                       05188000
*                                                                       05189000
*   Primary.Secondary  Explanation                                      05190000
*   -----------------  ------------------------------------------------ 05191000
* o RC1_Refused        The target refused the message by setting        05192000
*                      a nonzero "refusal code".                        05193000
*                                                                       05194000
*                      When the target is a server, the server exit     05195000
*                      might have refused the request when called by    05196000
*                      XCF to get a work area (the request was not      05197000
*                      delivered) or it might have refused the          05198000
*                      request when called to actually process the      05199000
*                      request (so the request was delivered).  If the  05200000
*                      distinction between delivered and not            05201000
*                      delivered matters to the originator, then it     05202000
*                      is up to the server exit to set refusal codes    05203000
*                      that allow such distinctions to be made.         05204000
*                                                                       05205000
*     .RC2 (user)      The secondary response code is user defined      05206000
*                      and contains a copy of the refusal code          05207000
*                      (SXPL_RefusalCode) that was set by the target    05208000
*                      that received the message.                       05209000
*                                                                       05210000
*                                                                       05211000
*   Primary.Secondary  Explanation                                      05212000
*   -----------------  ------------------------------------------------ 05213000
* o RC1_Failed         A failure occurred.  The message may or may not  05214000
*                      have been processed correctly prior to the       05215000
*                      failure.  If the target or its agent did in      05216000
*                      fact send a response, the response was           05217000
*                      discarded by XCF.                                05218000
*                                                                       05219000
*     .RC2_RecvTargetTerminated                                         05220000
*                      The message was presented to the target.         05221000
*                      The target failed while processing the message.  05222000
*     .RC2_RecvTargetError                                              05223000
*                      The message was presented to the target.  While  05224000
*                      processing the request, the target violated XCF  05225000
*                      interfaces and protocols.  For example, the      05226000
*                      target set both sxpl_ResultCode and              05227000
*                      sxpl_RefusalCode to nonzero values.              05228000
*                                                                       05229000
*     .RC2_RecvXcfError                                                 05230000
*                      The message was presented to the target.         05231000
*                      An internal XCF error occurred.                  05232000
*     .RC2_RecvResponderTerminated                                      05233000
*                      The message was successfully delivered to the    05234000
*                      target.  The entity responsible for sending the  05235000
*                      response terminated.  In cases where the target  05236000
*                      system fails, this condition may be detected     05237000
*                      by the send side.                                05238000
*     .RC2_SendTargetNotExist                                           05239000
*                      The message was sent, but the target system      05240000
*                      terminated before XCF could determine the state  05241000
*                      of the message.  It may or may not have been     05242000
*                      presented to the target.                         05243000
*                                                                       05244000
*                                                                       05245000
*   Primary.Secondary  Explanation                                      05246000
*   -----------------  ------------------------------------------------ 05247000
* o RC1_Replied        Response received from target.                   05248000
*                                                                       05249000
*     .RC2_OK          The message was successfully delivered to the    05250000
*                      target.  The target or its agent sent a reply    05251000
*                      that was successfully received by the local      05252000
*                      system.                                          05253000
*                                                                       05254000
*                      Note that the target may or may not have failed  05255000
*                      after sending the reply.  Thus if the target     05256000
*                      sends a reply and continues to perform request   05257000
*                      related processing, receipt of the reply         05258000
*                      message will not necessarily imply that the      05259000
*                      request was processed successfully.              05260000
*                                                                       05261000
*                                                                    */ 05262000
*/********************************************************************/ 05263000
*                                                                       05264000
*Declare                                                                05265000
*  1 ixcysrvr_tRespCode TYPE char(2),                                   05266000
*    3 RespCode_RC1 fixed(8),       /* primary response code         */ 05267000
*    3 RespCode_RC2 fixed(8);       /* secondary explanation of the     05268000
*                                      response code                 */ 05269000
*                                                                       05270000
*Declare                            /* Primary response codes        */ 05271000
*   ixcysrvr_RC1_Unknown                 fixed constant( 0)             05272000
*  ,ixcysrvr_RC1_NotSent                 fixed constant( 1)             05273000
*  ,ixcysrvr_RC1_InProgress              fixed constant( 2)             05274000
*  ,ixcysrvr_RC1_NoReceiver              fixed constant( 3)             05275000
*  ,ixcysrvr_RC1_NotDelivered            fixed constant( 4)             05276000
*  ,ixcysrvr_RC1_Delivered               fixed constant( 5)             05277000
*  ,ixcysrvr_RC1_Refused                 fixed constant( 6)             05278000
*  ,ixcysrvr_RC1_Failed                  fixed constant( 7)             05279000
*  ,ixcysrvr_RC1_Replied                 fixed constant( 8)             05280000
*  ;                                                                    05281000
*Declare                            /* Secondary response codes.     */ 05282000
*                                                                       05283000
*  ixcysrvr_RC2_Unknown                  fixed constant(  0) /* unknown 05284000
*                                      or not applicable             */ 05285000
*                                                                       05286000
* ,ixcysrvr_RC2_OK                       fixed constant(  0)  /* @L1A*/ 05287000
* ,ixcysrvr_RC2_RecvTargetOK             fixed constant(  0)  /* @L1A*/ 05288000
*                                                                       05289000
* ,ixcysrvr_RC2_SendNoResources          fixed constant(  2)            05290000
* ,ixcysrvr_RC2_SendFailure              fixed constant(  3)            05291000
* ,ixcysrvr_RC2_SendTargetNotExist       fixed constant(  4)            05292000
* ,ixcysrvr_RC2_SendTargetDownLevel      fixed constant(  5)            05293000
*                                                                       05294000
* ,ixcysrvr_RC2_RecvTargetNotExist       fixed constant(  6)            05295000
* ,ixcysrvr_RC2_RecvTargetNotSuitable    fixed constant(  7)            05296000
* ,ixcysrvr_RC2_RecvNoResources          fixed constant(  8)            05297000
* ,ixcysrvr_RC2_RecvXcfError             fixed constant(  9)            05298000
* ,ixcysrvr_RC2_RecvTargetNoWorkArea     fixed constant(0Ax)            05299000
* ,ixcysrvr_RC2_RecvResponderTerminated  fixed constant(0Bx)            05300000
* ,ixcysrvr_RC2_RecvTargetError          fixed constant(0Cx)            05301000
* ,ixcysrvr_RC2_RecvTargetTerminated     fixed constant(0Dx)            05302000
*                                                                       05303000
* ,ixcysrvr_RC2_SendTimedOut             fixed constant(0Ex)            05304000
* ,ixcysrvr_RC2_SendCancelled            fixed constant(0Fx)            05305000
* ,ixcysrvr_RC2_SendReleased             fixed constant(10x)  /* @L1A*/ 05306000
* ;                                                                     05307000
*                                                                       05308000
*                                                                       05309000
*/********************************************************************/ 05310000
*/*                                                                  */ 05311000
*/*  Data Descriptor                                                 */ 05312000
*/*                                                                  */ 05313000
*/*  Summary                                                         */ 05314000
*/*    A data descriptor describes a contiguous storage area.        */ 05315000
*/*                                                                  */ 05316000
*/*                                                                  */ 05317000
*/*  Usage                                                           */ 05318000
*/*    - When a server exit routine is called to process a client    */ 05319000
*/*      request message for which the sender provided message data, */ 05320000
*/*      the data descriptor (md_DataDesc) within the message        */ 05321000
*/*      descriptor (SXPLRQ_MsgDesc) indicates the location of the   */ 05322000
*/*      message data.                                               */ 05323000
*/*    - To provide a work area for XCF to use, a server exit        */ 05324000
*/*      routine sets the data descriptor (wad_DataDesc) in the      */ 05325000
*/*      Server Exit Parameter List (SXPL_WAD).                      */ 05326000
*/*    - Issue IXCRECV to obtain the results of an IXCSEND           */ 05327000
*/*      SENDTO=SERVER request that specified EXPECTREPLY=YES.  In   */ 05328000
*/*      the answer area (ANSAREA) returned by IXCRECV, there will   */ 05329000
*/*      be a response descriptor (mapped by                         */ 05330000
*/*      ixcysrvr_tResponseDescriptor) for each valid target.  If a  */ 05331000
*/*      target sent a reply with message data, the data descriptor  */ 05332000
*/*      (md_DataDesc) within the message descriptor (rd_MsgDesc) of */ 05333000
*/*      the response descriptor for that target indicates the       */ 05334000
*/*      location in the data area (DATAAREA) where the message data */ 05335000
*/*      can be found.                                               */ 05336000
*/*                                                                  */ 05337000
*/*  Explanation                                                     */ 05338000
*/*    A data descriptor describes a contiguous storage area.        */ 05339000
*/*    The descriptor contains the address, ALET, and size of the    */ 05340000
*/*    storage area (expressed as number of bytes).                  */ 05341000
*/*                                                                  */ 05342000
*/*    In cases where the user is describing storage for XCF to use, */ 05343000
*/*    the ALET should either be hexadecimal zero (for storage that  */ 05344000
*/*    resides in the primary address space of the user) or it must  */ 05345000
*/*    resolve to a public entry on the dispatchable unit access     */ 05346000
*/*    list (DU-AL), or be for a common area data space.             */ 05347000
*/*                                                                  */ 05348000
*/*                                                                  */ 05349000
*/*                                                                  */ 05350000
*/********************************************************************/ 05351000
*                                                                       05352000
*DECLARE                                                                05353000
*  1 ixcysrvr_tDataDescriptor TYPE char(16) bdy(dword), /* Describes    05354000
*                                      one contiguous block of virtual  05355000
*                                      storage.                      */ 05356000
*    3 dd_DataSize fixed(32),       /* Size in bytes of storage area */ 05357000
*    3 dd_DataAlet fixed(32),       /* ALET used to access storage   */ 05358000
*    3 dd_DataAddr ptr(64);         /* Address of storage area       */ 05359000
*                                                                       05360000
*/********************************************************************/ 05361000
*/*                                                                  */ 05362000
*/*  Work Area Descriptor                                            */ 05363000
*/*                                                                  */ 05364000
*/*  Summary                                                         */ 05365000
*/*    A work area descriptor describes a "work area" that a server  */ 05366000
*/*    exit routine provides to XCF.  A work area is a contiguous    */ 05367000
*/*    storage area that XCF may use to store data that is to be     */ 05368000
*/*    processed by a server exit routine.                           */ 05369000
*/*                                                                  */ 05370000
*/*  Usage                                                           */ 05371000
*/*    - XCF calls a server exit routine to initialize itself.  On   */ 05372000
*/*      entry to the server exit, the SXPL_WAD is zero.  The server */ 05373000
*/*      exit routine obtains storage for a work area and updates    */ 05374000
*/*      the work area descriptor in the Server Exit Parameter List  */ 05375000
*/*      (SXPL_WAD) to provide a work area for XCF to use when       */ 05376000
*/*      delivering the next subsequent requests.                    */ 05377000
*/*                                                                  */ 05378000
*/*    - A clent invokes IXCSEND SENDTO=SERVER to send a request to  */ 05379000
*/*      the server.  XCF inspects the work area descriptor provided */ 05380000
*/*      by the server exit routine when it last returned to XCF.    */ 05381000
*/*      The work area is not big enough to contain the text of the  */ 05382000
*/*      client request message.  XCF calls the server exit routine  */ 05383000
*/*      to process a "get work area" request.  On entry to the      */ 05384000
*/*      server exit, the SXPL_WAD contains a copy of the work area  */ 05385000
*/*      descriptor that was last provided by the server exit.  The  */ 05386000
*/*      server exit disposes of the work described by SXPL_WAD,     */ 05387000
*/*      obtains a new work area of the size requested by XCF (per   */ 05388000
*/*      SXPLGW_TotalSize), updates the SXPL_WAD to describe the     */ 05389000
*/*      new work area, and returns to XCF.  XCF puts a copy of the  */ 05390000
*/*      client request in the work area, updates the SXPLRQ_MsgDesc */ 05391000
*/*      to indicate where the message data resides, and calls the   */ 05392000
*/*      server exit routine to process the message.  On entry to    */ 05393000
*/*      the server exit, SXPL_WAD contains a copy of the work area  */ 05394000
*/*      descriptor that was returned by server from                 */ 05395000
*/*      the "get work area" request.                                */ 05396000
*/*                                                                  */ 05397000
*/*    - A clent invokes IXCSEND SENDTO=SERVER to send a request to  */ 05398000
*/*      the server.  XCF inspects the work area descriptor provided */ 05399000
*/*      by the server exit routine when it last returned to XCF.    */ 05400000
*/*      The work area is big enough to contain the text of the      */ 05401000
*/*      client request message.  XCF puts a copy of the             */ 05402000
*/*      client request in the work area, updates the SXPLRQ_MsgDesc */ 05403000
*/*      to indicate where the message data resides, and calls the   */ 05404000
*/*      server exit routine to process the message.  On entry to    */ 05405000
*/*      the server exit, SXPL_WAD contains a copy of the work area  */ 05406000
*/*      descriptor that was provided by the server when it last     */ 05407000
*/*      returned to XCF.  The server exit processes the message.    */ 05408000
*/*      If XCF can continue to use the same work area for a         */ 05409000
*/*      subsequent request, the server exit leaves SXPL_WAD         */ 05410000
*/*      unchanged.  If XCF should not use the work area, the        */ 05411000
*/*      server exit updates the SXPL_WAD to either indicate that    */ 05412000
*/*      the work area is no longer available for use by XCF (resets */ 05413000
*/*      the WAD_Available flag) or updates the SXPL_WAD to describe */ 05414000
*/*      a new work area.  The server exit then returns to XCF.      */ 05415000
*/*                                                                  */ 05416000
*/*                                                                  */ 05417000
*/*    - XCF calls a server exit routine to perform some function.   */ 05418000
*/*      The server exit routine updates the work area descriptor in */ 05419000
*/*      the Server Exit Parameter List (SXPL_WAD) to provide (or    */ 05420000
*/*      retract) a work area for XCF to use (or not use) for        */ 05421000
*/*      subsequent requests.                                        */ 05422000
*/*                                                                  */ 05423000
*/*                                                                  */ 05424000
*/*  Explanation                                                     */ 05425000
*/*    A work area descriptor describes a "work area" that a server  */ 05426000
*/*    exit routine provides to XCF.  The "work area descriptor"     */ 05427000
*/*    contains a data descriptor (wad_DataDesc) that indicates the  */ 05428000
*/*    location and size of the work area.  The work area descriptor */ 05429000
*/*    also specifies the storage protect key (wad_StgKey) that XCF  */ 05430000
*/*    should use when storing into the work area.                   */ 05431000
*/*                                                                  */ 05432000
*/*                                                                  */ 05433000
*/*    Within the Server Exit Parameter List, the field SXPL_WAD     */ 05434000
*/*    contains the work area descriptor for the work area provided  */ 05435000
*/*    to XCF by the server exit.  The server exit routine updates   */ 05436000
*/*    the SXPL_WAD as appropriate each time it is called.  It can   */ 05437000
*/*    leave the SXPL_WAD unchanged to allow XCF to use the same     */ 05438000
*/*    work area for subsequent requests.  It can set the            */ 05439000
*/*    wad_Available flag to zero to indicate that XCF is not to use */ 05440000
*/*    the work area.  Updating the data descriptor (wad_DataDesc)   */ 05441000
*/*    to set the size of the work area (dd_DataSize) to zero is     */ 05442000
*/*    another way to indicate that no work area is available to     */ 05443000
*/*    XCF.  The server exit could also obtain a different work area */ 05444000
*/*    and then update the SXPL_WAD to describe the new storage      */ 05445000
*/*    area.  Note that the WAD_Available flag must be ON ('1'B) if  */ 05446000
*/*    XCF is to make use of the work area.                          */ 05447000
*/*                                                                  */ 05448000
*/*                                                                  */ 05449000
*/*    On entry to the server exit routine, SXPL_WAD contains a copy */ 05450000
*/*    of the descriptor that was specified when the server exit     */ 05451000
*/*    routine most recently returned to XCF.                        */ 05452000
*/*                                                                  */ 05453000
*/*    When calling the server exit routine to process a client      */ 05454000
*/*    request, XCF will have stored a copy of the message data (if  */ 05455000
*/*    any) in the work area designated by SXPL_WAD.  Note that the  */ 05456000
*/*    message data will be stored at offset 0 in the work area.     */ 05457000
*/*    Thus if the server requires that the message data be on a     */ 05458000
*/*    certain storage boundary (e.g., doubleword), it must ensure   */ 05459000
*/*    that the work area resides on that boundary.  Note that the   */ 05460000
*/*    server exit should use the size value (dd_dataSize) in the    */ 05461000
*/*    message descriptor (SXPLRQ_MsgDesc) to determine how much     */ 05462000
*/*    message data was actually stored in the work area.            */ 05463000
*/*                                                                  */ 05464000
*/*    The work area itself could be larger than the message data    */ 05465000
*/*    content, either because the server exit provided a larger     */ 05466000
*/*    work area than requested by XCF, or because XCF needed a work */ 05467000
*/*    area larger than the actual message data content.  If bytes   */ 05468000
*/*    in the work area beyond the message data content need to be   */ 05469000
*/*    set to a known state, the server exit must perform such       */ 05470000
*/*    initialization after it is called to process the request      */ 05471000
*/*    message.  XCF may have altered storage in the "white space"   */ 05472000
*/*    as part of preparing the request for delivery.                */ 05473000
*/*                                                                  */ 05474000
*/*                                                                  */ 05475000
*/*    Note that if WAD_Available is ON ('1'B), updates to reserved  */ 05476000
*/*    fields in the SXPL_WAD are not permitted.  If an invalid      */ 05477000
*/*    update is made, XCF will stop the offending server instance.  */ 05478000
*/*                                                                  */ 05479000
*/*                                                                  */ 05480000
*/********************************************************************/ 05481000
*                                                                       05482000
*                                                                       05483000
*Declare                                                                05484000
*  1 ixcysrvr_tWorkAreaDescriptor TYPE bdy(dword),                      05485000
*    3 WAD_Controls char(4) bdy(word), /* Reserved                   */ 05486000
*      5 WAD_Flags char(1),                                             05487000
*        7 WAD_Available bit,       /* ON if the data in this work      05488000
*                                      area descriptor is valid for     05489000
*                                      use (content can be used to      05490000
*                                      locate work areas, if any).      05491000
*                                      OFF implies that this work area  05492000
*                                      descriptor is not to be used     05493000
*                                      (no work area provided).      */ 05494000
*        7 * bit(7),                /* Reserved                      */ 05495000
*      5 WAD_StgKey fixed(8),       /* Storage key to be used when      05496000
*                                      storing into the work area(s).   05497000
*                                      The high order nibble contains   05498000
*                                      the storage key, the low order   05499000
*                                      nibble is ignored.  For          05500000
*                                      example, set 'kkkk' in the       05501000
*                                      binary bit string 'kkkkxxxx'B    05502000
*                                      to correspond to the desired     05503000
*                                      storage key.                  */ 05504000
*      5 * fixed(16),               /* Reserved.                     */ 05505000
*    3 * char(12),                  /* Reserved                      */ 05506000
*    3 WAD_DataDesc isadatadesc,    /* Data descriptor indicating       05507000
*                                      the storage location to be       05508000
*                                      used as a work area.  Mapped     05509000
*                                      by ixcysrvr_tDataDescriptor.  */ 05510000
*    3 * char(0);                                                       05511000
*                                                                       05512000
*/********************************************************************/ 05513000
*/*                                                                  */ 05514000
*/*  Data Descriptor Table                                           */ 05515000
*/*                                                                  */ 05516000
*/*  Summary                                                         */ 05517000
*/*    A data descriptor table is an array of data descriptors.      */ 05518000
*/*                                                                  */ 05519000
*/*  Usage                                                           */ 05520000
*/*    Issue IXCRECV with DATADESC to obtain the results of an       */ 05521000
*/*    IXCSEND SENDTO=SERVER request that specified EXPECTREPLY=YES. */ 05522000
*/*    If LENDDENTRY equals 16, ixcysrvr_tDDT can be used to map     */ 05523000
*/*    data descriptor table specified by the DATADESC keyword.      */ 05524000
*/*    Each data descriptor in the table describes a contiguous      */ 05525000
*/*    storage location where the message data sent by a target      */ 05526000
*/*    server will be stored.                                        */ 05527000
*/*                                                                  */ 05528000
*/*                                                                  */ 05529000
*/*  Explanation                                                     */ 05530000
*/*    A data descriptor table is an array of data descriptors.      */ 05531000
*/*    Each entry in the array is a data descriptor (mapped by       */ 05532000
*/*    ixcysrvr_tDataDescriptor) that indicates the location and     */ 05533000
*/*    size of a contiguous storage area.                            */ 05534000
*/*                                                                  */ 05535000
*/*    This mapping can be used when creating an array that contains */ 05536000
*/*    only data descriptor entries (so each array entry is the size */ 05537000
*/*    of one data descriptor, which is to say 16 bytes).            */ 05538000
*/*                                                                  */ 05539000
*/*    Note that the IXCRECV service allows the array indicated by   */ 05540000
*/*    DATADESC to have entries longer than 16 bytes.  However, in   */ 05541000
*/*    such cases, the exploiter would have to define its own        */ 05542000
*/*    mapping for the table.                                        */ 05543000
*/*                                                                  */ 05544000
*/*                                                                  */ 05545000
*/********************************************************************/ 05546000
*                                                                       05547000
*Declare                                                                05548000
*  1 ixcysrvr_tDDT TYPE bdy(dword), /* Data descriptor table.   Used    05549000
*                                      to describe multiple data        05550000
*                                      areas.  Each entry in the table  05551000
*                                      contains a data descriptor for   05552000
*                                      one contiguous block of virtual  05553000
*                                      storage.                      */ 05554000
*    3 ddt_Entry(*) isadatadesc;    /* Array of data descriptors, one   05555000
*                                      for each data area.  Mapped by   05556000
*                                      ixcysrvr_tDataDescriptor.     */ 05557000
*                                                                       05558000
*@eject;                                                                05559000
*/********************************************************************/ 05560000
*/*                                                                  */ 05561000
*/* The following mappings explain the response data returned by     */ 05562000
*/* an IXCREQ REQUEST=SERVERINFO request in the DATAAREA of an       */ 05563000
*/* IXCRECV service call.  Data returned by an IXCREQ                */ 05564000
*/* REQUEST=SERVERINFO request is available via an IXCRECV service   */ 05565000
*/* call. See IXCREQ for information on using the IXCREQ service     */ 05566000
*/* to request services of the XCF Server.                           */ 05567000
*/*                                                                  */ 05568000
*/*                                                                  */ 05569000
*/*  See the ixcysrvr_tResponseDescriptor for details on             */ 05570000
*/*  addressing the response data from a target system.              */ 05571000
*/*                                                                  */ 05572000
*/*  *----------------------*  <- Address of the IXCRECV data area   */ 05573000
*/*  ! ixcysrvr_tSrvrInfoAA !     described by an rd_MsgDesc for     */ 05574000
*/*  *----------------------*     a response received from a         */ 05575000
*/*             ..                target system's XCF Server         */ 05576000
*/*             ..                                                   */ 05577000
*/*             ..                                                   */ 05578000
*/*  *----------------------*  <- Address of an SrvrInfoHR that      */ 05579000
*/*  ! ixcysrvr_tSrvrInfoHR !     defines a table of SrvrInfoDR      */ 05580000
*/*  *----------------------*     records                            */ 05581000
*/*             ..                                                   */ 05582000
*/*             ..                Address of SrvrInfoAA +            */ 05583000
*/*             ..                srvrIaa_OffsetHR                   */ 05584000
*/*             ..                                                   */ 05585000
*/*  *----------------------*  <- Address of first SrvrInfoDR in     */ 05586000
*/*  ! ixcysrvr_tSrvrInfoDR !     the table of SrvrInfoDR records    */ 05587000
*/*  *----------------------*                                        */ 05588000
*/*             ..                Address of SrvrInfoAA +            */ 05589000
*/*             ..                srvrIhr_OffsetHR field of an       */ 05590000
*/*             ..                SrvrInfoHR of srvrIhr_Type         */ 05591000
*/*             ..                SrvrInfoHR_kType_DR                */ 05592000
*/*             ..                                                   */ 05593000
*/*  *----------------------*  <- Address of an SrvrInfoHR that      */ 05594000
*/*  ! ixcysrvr_tSrvrInfoHR !     defines a table of SrvrInfoWIs     */ 05595000
*/*  *----------------------*     or SrvrInfoIRs for a server.       */ 05596000
*/*                               srvrIdr_#HeaderDataRecs defines    */ 05597000
*/*             ..                the number of SrvrInfoHR records   */ 05598000
*/*             ..                that can be found beginning at     */ 05599000
*/*                               offset srvrIdr_OffsetHR from       */ 05600000
*/*             ..                the start of the SrvrInfoAA record */ 05601000
*/*                                                                  */ 05602000
*/*             ..                Address of SrvrInfoAA +            */ 05603000
*/*             ..                srvrIdr_OffsetHR                   */ 05604000
*/*                                                                  */ 05605000
*/*  *----------------------*  <- Address of first SrvrInfoWI in     */ 05606000
*/*  ! ixcysrvr_tSrvrInfoWI !     the table of SrvrInfoWI records    */ 05607000
*/*  *----------------------*                                        */ 05608000
*/*                               Address of SrvrInfoAA +            */ 05609000
*/*             ..                srvrIhr_OffsetHR for data record   */ 05610000
*/*             ..                type SrvrInfoHR_kType_WI           */ 05611000
*/*                                                                  */ 05612000
*/*  *----------------------*  <- Next entry in the SrvrInfoWI table */ 05613000
*/*  ! ixcysrvr_tSrvrInfoWI !     is located by adding the address   */ 05614000
*/*  *----------------------*     of the first SrvrInfoWI table      */ 05615000
*/*                               entry + srvrIhr_Length for data    */ 05616000
*/*             ..                record type SrvrInfoHR_kType_WI    */ 05617000
*/*             ..                                                   */ 05618000
*/*                                                                  */ 05619000
*/*  *----------------------*  <- Address of second SrvrInfoDR       */ 05620000
*/*  ! ixcysrvr_tSrvrInfoDR !     is located by adding the           */ 05621000
*/*  *----------------------*     address of the first SrvrInfoDR +  */ 05622000
*/*                               srvrIhr_DataLen from the           */ 05623000
*/*                               SrvrInfoHR that defines the        */ 05624000
*/*                               table of SrvrInfoDR records        */ 05625000
*/*                                                                  */ 05626000
*/*                                                                  */ 05627000
*/*   An ixcysrvr_tSrvrInfoAA type record is returned for each       */ 05628000
*/*   successful IXCREQ SERVERINFO request from a target system. The */ 05629000
*/*   content of the remaining response data is determined by the    */ 05630000
*/*   request.                                                       */ 05631000
*/*                                                                  */ 05632000
*/*                                                                  */ 05633000
*/*   Data returned in DATAAREA for IXCREQ requests that:            */ 05634000
*/*                                                                  */ 05635000
*/*     - Specify INFOTYPE=SUMMARY or default to INFOTYPE=SUMMARY    */ 05636000
*/*                                                                  */ 05637000
*/*   Returns an ixcysrvr_tSrvrInfoAA type record and an             */ 05638000
*/*   ixcysrvr_tSrvrInfoHR type record that describes a table of     */ 05639000
*/*   ixcysrvr_tSrvrInfoDR records. The table will contain a         */ 05640000
*/*   ixcysrvr_tSrvrInfoDR record for each server defined on the     */ 05641000
*/*   target system. srvrIhr_#Records within the                     */ 05642000
*/*   ixcysrvr_tSrvrInfoHR record describing the table of            */ 05643000
*/*   ixcysrvr_tSrvrInfoDR records contains the number of            */ 05644000
*/*   ixcysrvr_tSrvrInfoDR records present in the response data.     */ 05645000
*/*                                                                  */ 05646000
*/*                                                                  */ 05647000
*/*   Data returned in DATAAREA for IXCREQ requests that:            */ 05648000
*/*                                                                  */ 05649000
*/*     - Specify INFOTYPE=SUMMARY, SERVER=xServer                   */ 05650000
*/*                                                                  */ 05651000
*/*   Returns an ixcysrvr_tSrvrInfoAA type record and an             */ 05652000
*/*   ixcysrvr_tSrvrInfoHR type record that describes a table of     */ 05653000
*/*   ixcysrvr_tSrvrInfoDR records. The table will contain a         */ 05654000
*/*   ixcysrvr_tSrvrInfoDR record for each server defined on the     */ 05655000
*/*   target system that matches the supplied xServer name pattern.  */ 05656000
*/*   srvrIhr_#Records within the ixcysrvr_tSrvrInfoHR record        */ 05657000
*/*   describing the table of ixcysrvr_tSrvrInfoDR records           */ 05658000
*/*   contains the number of ixcysrvr_tSrvrInfoDR records            */ 05659000
*/*   present in the response data.                                  */ 05660000
*/*                                                                  */ 05661000
*/*                                                                  */ 05662000
*/*   Data returned in DATAAREA for IXCREQ requests that:            */ 05663000
*/*                                                                  */ 05664000
*/*     - Specify INFOTYPE=SUMMARY, SERVERID=xServerID               */ 05665000
*/*                                                                  */ 05666000
*/*   Returns an ixcysrvr_tSrvrInfoAA type record and an             */ 05667000
*/*   ixcysrvr_tSrvrInfoHR type record that describes one (1)        */ 05668000
*/*   ixcysrvr_tSrvrInfoDR record for the specified xServerID        */ 05669000
*/*   in the response data.                                          */ 05670000
*/*                                                                  */ 05671000
*/*                                                                  */ 05672000
*/*   Data returned in DATAAREA for IXCREQ requests that:            */ 05673000
*/*                                                                  */ 05674000
*/*     - Specify INFOTYPE=WORK                                      */ 05675000
*/*                                                                  */ 05676000
*/*     - Returns the same set of records as an INFOTYPE=SUMMARY     */ 05677000
*/*       request to report on server definition information.        */ 05678000
*/*                                                                  */ 05679000
*/*       Note: when the SERVER or SERVERID keywords are provided,   */ 05680000
*/*       the returned information is limited to only the            */ 05681000
*/*       selected servers matching the specified Server Name        */ 05682000
*/*       pattern or the specific Server ID.                         */ 05683000
*/*                                                                  */ 05684000
*/*       Additonally, the following data record types are           */ 05685000
*/*       returned in the DATAAREA for INFOTYPE=WORK:                */ 05686000
*/*                                                                  */ 05687000
*/*     - an ixcysrvr_tSrvrInfoHR type record that describes a       */ 05688000
*/*       table of ixcysrvr_tSrvrInfoWI records. The                 */ 05689000
*/*       srvrIhr_Type field will contain the SrvrInfoHR_kType_WI    */ 05690000
*/*       constant value                                             */ 05691000
*/*                                                                  */ 05692000
*/*     - a ixcysrvr_tSrvrInfoWI record for the first and last       */ 05693000
*/*       server request on the server message queue and for each    */ 05694000
*/*       server request on the server message queue that is being   */ 05695000
*/*       processed by a server exit. If no server requests are      */ 05696000
*/*       currently on the server request queue, then the            */ 05697000
*/*       srvrIhr_#Records field of the ixcysrvr_tSrvrInfoHR type    */ 05698000
*/*       record describing a table of ixcysrvr_tSrvrInfoWI type     */ 05699000
*/*       records would be zero (0) indicating that no work items    */ 05700000
*/*       were found for the server.                                 */ 05701000
*/*                                                                  */ 05702000
*/*   Data returned in DATAAREA for IXCREQ requests that:            */ 05703000
*/*                                                                  */ 05704000
*/*     - Specify INFOTYPE=INSTANCE                                  */ 05705000
*/*                                                                  */ 05706000
*/*     - Returns the same set of records as an INFOTYPE=SUMMARY     */ 05707000
*/*       request to report on server definition information.        */ 05708000
*/*                                                                  */ 05709000
*/*       Note: when the SERVER or SERVERID keywords are provided,   */ 05710000
*/*       the returned information is limited to only the            */ 05711000
*/*       selected servers matching the specified Server Name        */ 05712000
*/*       pattern or the specific Server ID.                         */ 05713000
*/*                                                                  */ 05714000
*/*       Additonally, the following data record types are           */ 05715000
*/*       returned in the DATAAREA for INFOTYPE=INSTANCE:            */ 05716000
*/*                                                                  */ 05717000
*/*     - an ixcysrvr_tSrvrInfoHR type record that describes a       */ 05718000
*/*       table of ixcysrvr_tSrvrInfoIR records. The                 */ 05719000
*/*       srvrIhr_Type field will contain the SrvrInfoHR_kType_IR    */ 05720000
*/*       constant value                                             */ 05721000
*/*                                                                  */ 05722000
*/*     - a ixcysrvr_tSrvrInfoIR record for each instance of a       */ 05723000
*/*       a selected server on the target system.                    */ 05724000
*/*                                                                  */ 05725000
*/*                                                                  */ 05726000
*/********************************************************************/ 05727000
*                                                                       05728000
*/********************************************************************/ 05729000
*/*                                                                  */ 05730000
*/*        Answer Area record for IXCREQ REQUEST=SERVERINFO requests */ 05731000
*/*                                                                  */ 05732000
*/*        Server Info Answer Area returned by an IXCREQ             */ 05733000
*/*        REQUEST=SERVERINFO request. One Server Info Answer        */ 05734000
*/*        Area is returned from a target server for an              */ 05735000
*/*        IXCREQ REQUEST=SERVERINFO starting at offset zero (0)     */ 05736000
*/*        of the storage location described by the rd_MsgDesc in    */ 05737000
*/*        the response descriptor record returned by IXCRECV.       */ 05738000
*/*                                                                  */ 05739000
*/********************************************************************/ 05740000
*                                                                       05741000
*   Declare                                                             05742000
*     1 ixcysrvr_tSrvrInfoAA                                            05743000
*         Type Bdy(Dword),          /* Answer Area for response data    05744000
*                                      returned by an IXCREQ SERVERINFO 05745000
*                                      request in an IXCRECV            05746000
*                                      DATAAREA                      */ 05747000
*       3 srvrIaa_Version Fixed(8), /* Version of this SrvrInfoAA       05748000
*                                      mapping                       */ 05749000
*       3 * Char(1),                /* Reserved.                     */ 05750000
*       3 srvrIaa_AAlen Fixed(16),  /* Length of this SrvrInfoAA        05751000
*                                      mapping                       */ 05752000
*       3 srvrIaa_Resplevel Fixed(32),                                  05753000
*                                   /* Response level of SERVERINFO     05754000
*                                      response data supplied by the    05755000
*                                      target system                 */ 05756000
*       3 srvrIaa_DataAreaSize Fixed(32),                               05757000
*                                   /* Total number of bytes of         05758000
*                                      response data returned for the   05759000
*                                      SERVERINFO request from the      05760000
*                                      target described by the          05761000
*                                      corresponding target descriptor  05762000
*                                      record. This value includes      05763000
*                                      the SrvrInfoAA record         */ 05764000
*       3 srvrIaa_LengthHR  Fixed(32),                                  05765000
*                                   /* Length in bytes of a SrvrInfoHR  05766000
*                                      record in the response area   */ 05767000
*       3 srvrIaa_#HeaderRecs Fixed(32),                                05768000
*                                   /* Number of SrvrInfoHR records     05769000
*                                      that can be found beginning at   05770000
*                                      offset srvrIaa_OffsetHR from     05771000
*                                      the start of the SrvrInfoAA      05772000
*                                      record. The SrvrInfoHR records   05773000
*                                      found will describe the          05774000
*                                      following record types:          05775000
*                                                                       05776000
*                                       - SrvrInfoHR_kType_DR        */ 05777000
*       3 srvrIaa_OffsetHR Fixed(31),                                   05778000
*                                   /* Offset from the                  05779000
*                                      start of the SrvrInfoAA record   05780000
*                                      at which the first SrvrInfoHR    05781000
*                                      record can be found. Valid only  05782000
*                                      when srvrIaa_#HeaderRecs is not  05783000
*                                      zero (0).                     */ 05784000
*       3 * char(0);                                                    05785000
*                                                                       05786000
* Declare                           /* values for srvriaa_Version    */ 05787000
*   ixcysrvr_kSrvrIaa_Version0 constant(0);                             05788000
*                                                                       05789000
*/********************************************************************/ 05790000
*/*                                                                  */ 05791000
*/*  XCF Server Task                                                 */ 05792000
*/*                                                                  */ 05793000
*/*    XCF has implemented a server that can process requests that   */ 05794000
*/*    are formulated by the IXCREQ macro.  One invokes the IXCREQ   */ 05795000
*/*    macro to create the message content for a request, then       */ 05796000
*/*    invokes IXCSEND to send that message (request) to the XCF     */ 05797000
*/*    server.  The XCF server will process the request and send the */ 05798000
*/*    results back.  The client would then invoke IXCRECV to obtain */ 05799000
*/*    the results.                                                  */ 05800000
*/*                                                                  */ 05801000
*/*    See the IXCREQ macro for additional information, including    */ 05802000
*/*    the supported requests.                                       */ 05803000
*/*                                                                  */ 05804000
*/*    The XCF Server Name can be defined as follows:                */ 05805000
*/*                                                                  */ 05806000
*/* IXCYSRVR_XCFSERVERNAME DC CL32'SYSXCF  IXCREQ                  ' */ 05807000
*/*                                                                  */ 05808000
*/********************************************************************/ 05809000
*                                                                       05810000
*/********************************************************************/ 05811000
*/* The following declares will generate EQU statements in assembler */ 05812000
*/* to allow the use of equates to define constants or construct     */ 05813000
*/* variables that can be used when sending a server request to      */ 05814000
*/* the XCF Server. For example, one can use literal notation and    */ 05815000
*/* concatenate the EQUs together and assign a character string      */ 05816000
*/* representing the XCF Server or Server function to local storage  */ 05817000
*/*                                                                  */ 05818000
*/*      MVC   ServFunc,=A(IXCYSRVR_SFunc1,ixcysrvr_SFunc2)          */ 05819000
*/*                                                                  */ 05820000
*/*      Results: ServFunc contains C'SRVRINFO'                      */ 05821000
*/*                                                                  */ 05822000
*/* ServFunc DS CL8                                                  */ 05823000
*/* IXCYSRVR_SFUNC1 EQU C'SRVR'                                      */ 05824000
*/* IXCYSRVR_SFUNC2 EQU C'INFO'                                      */ 05825000
*/*                                                                  */ 05826000
*/************************************************************** @P1A*/ 05827000
*Dcl ixcysrvr_SName1 Char(4) Constant('SYSX'),  /* XCF Server Name   */ 05828000
*    ixcysrvr_SName2 Char(4) Constant('CF  '),                          05829000
*    ixcysrvr_SName3 Char(4) Constant('IXCR'),                          05830000
*    ixcysrvr_SName4 Char(4) Constant('EQ  ');                /* @P1A*/ 05831000
*                                                                       05832000
*Dcl ixcysrvr_SFunc1 Char(4) Constant('SRVR'),  /* SRVRINFO Function */ 05833000
*    ixcysrvr_SFunc2 Char(4) Constant('INFO');                /* @P1A*/ 05834000
*                                                                       05835000
*                                                                       05836000
*/* The following two declares are only for PL/X. Generation of      */ 05837000
*/* DC statements is not supported by CBGEN.                         */ 05838000
*                                                                       05839000
*                                                                       05840000
*DECLARE ixcysrvr_XcfServerName     /* Name of XCF server for IXCREQ    05841000
*                                      requests                      */ 05842000
*        Char(Size(ixcysrvr_tName))                                     05843000
*        Constant('SYSXCF  '  !! ] sn_section1                          05844000
*                 'IXCREQ  '  !! ] sn_section2                          05845000
*                 '        '  !! ] sn_section3                          05846000
*                 '        ');   ] sn_section4                          05847000
*                                                                       05848000
*Declare ixcysrvr_kServerInfoIxcReq                                     05849000
*         Char(Size(srvrIir_Function)) Constant('SRVRINFO')             05850000
* ;                                 /* Required FUNCTION value for      05851000
*                                      an IXCREQ REQUEST=SERVERINFO     05852000
*                                      request being sent to the        05853000
*                                      XCF Server Task.              */ 05854000
*                                                                       05855000
*                                                                       05856000
*/********************************************************************/ 05857000
*/*                                                                  */ 05858000
*/*   Header record returned for IXCREQ REQUEST=SERVERINFO requests  */ 05859000
*/*   that describes a table of data record types in the response    */ 05860000
*/*   data.  One or more ixcysrvr_tSrvrInfoHR type records begin at  */ 05861000
*/*   offsets srvrIaa_OffsetHR or srvrIdr_OffsetHR.                  */ 05862000
*/*                                                                  */ 05863000
*/*   Examples:                                                      */ 05864000
*/*                                                                  */ 05865000
*/*      SrvrInfoHR record for srvrIhr_Type of SrvrInfoHR_kType_DR   */ 05866000
*/*      located from srvrIaa_OffsetHR:                              */ 05867000
*/*                                                                  */ 05868000
*/*        hrPtr = addr(SrvrInfoAA) + srvrIaa_OffsetHR               */ 05869000
*/*                                                                  */ 05870000
*/*      SrvrInfoHR record for srvrIhr_Type of SrvrInfoHR_kType_WR   */ 05871000
*/*      or SrvrInfoHR_kType_IR located from srvrIdr_OffsetHR:       */ 05872000
*/*                                                                  */ 05873000
*/*        hrPtr = addr(SrvrInfoAA) + srvrIdr_OffsetHR               */ 05874000
*/*                                                                  */ 05875000
*/*      Subsequent SrvrInfoHRs are located as follows:              */ 05876000
*/*                                                                  */ 05877000
*/*        hrPtr = hrPtr + srvrIaa_LengthHR                          */ 05878000
*/*                                                                  */ 05879000
*/********************************************************************/ 05880000
*   Declare                                                             05881000
*     1 ixcysrvr_tSrvrInfoHR                                            05882000
*         Type Bdy(Word),            /* Mapping for header records that 05883000
*                                       describe record types returned  05884000
*                                       by an IXCREQ SERVERINFO         05885000
*                                       request in an IXCRECV           05886000
*                                       DATAAREA                     */ 05887000
*       3 srvrIhr_Type    Fixed(8),  /* Type of data record          */ 05888000
*       3 srvrIhr_Level   Fixed(8),  /* Level of the data record        05889000
*                                       type                         */ 05890000
*       3 srvrIhr_Length  Fixed(16), /* Length in bytes of the data     05891000
*                                       record type                  */ 05892000
*       3 srvrIhr_#Records Fixed(32),                                   05893000
*                                    /* Number of data records of       05894000
*                                       srvrIhr_Type that are included  05895000
*                                       in the response area returned   05896000
*                                       by the target XCF Server     */ 05897000
*       3 srvrIhr_OffsetHR Fixed(31),                                   05898000
*                                    /* Offset from the start of the    05899000
*                                       SrvrInfoAA record where the     05900000
*                                       first data record of type       05901000
*                                       srvrIhr_Type can be found.      05902000
*                                       Valid when srvrIhr_#Records     05903000
*                                       is not zero (0).             */ 05904000
*                                                                       05905000
*       3 * char(0);                                                    05906000
*                                                                       05907000
*   Declare                 /* srvrIhr_Type values                   */ 05908000
*     SrvrInfoHR_kType_DR Fixed(8) Constant(1), /* Definition record */ 05909000
*     SrvrInfoHR_kType_WI Fixed(8) Constant(2), /* Work Item  record */ 05910000
*     SrvrInfoHR_kType_IR Fixed(8) Constant(3); /* Instance   record */ 05911000
*                                                                       05912000
* Declare                           /* values for srvrihr_Level      */ 05913000
*   ixcysrvr_kSrvrIhr_Level0 constant(0);                               05914000
*                                                                       05915000
*/********************************************************************/ 05916000
*/*                                                                  */ 05917000
*/*        Server Definition Record returned by an IXCREQ            */ 05918000
*/*        REQUEST=SERVERINFO request. One Server Data Record        */ 05919000
*/*        is returned for each server found on the target system    */ 05920000
*/*                                                                  */ 05921000
*/*   Examples:                                                      */ 05922000
*/*                                                                  */ 05923000
*/*        First SrvrInfoDR is located as follows:                   */ 05924000
*/*          hrPtr = addr(SrvrInfoAA) + srvrIaa_OffsetHR of a        */ 05925000
*/*          SrvrInfoHR record with srvrIhr_Type of                  */ 05926000
*/*          SrvrInfoHR_kType_DR                                     */ 05927000
*/*                                                                  */ 05928000
*/*          drPtr = addr(SrvrInfoAA) + hrPtr -> srvrIhr_OffsetHR    */ 05929000
*/*                                                                  */ 05930000
*/*        Subsequent SrvrInfoDRs are located as follows:            */ 05931000
*/*          drPtr = drPtr + hrPtr -> srvrIhr_Length of an           */ 05932000
*/*          SrvrInfoHR record with a srvrIhr_Type of                */ 05933000
*/*          SrvrInfoHR_kType_DR                                     */ 05934000
*/*                                                                  */ 05935000
*/********************************************************************/ 05936000
*   Declare                                                             05937000
*     1 ixcysrvr_tSrvrInfoDR                                            05938000
*         Type Bdy(Dword),            /* Server Definition Record    */ 05939000
*       3 srvrIdr_DataLen Fixed(32),  /* Total number of bytes          05940000
*                                        of data returned for this      05941000
*                                        server definition. Add this    05942000
*                                        length to the address of the   05943000
*                                        current SrvrInfoDR to locate   05944000
*                                        the next SrvrInfoDR in the     05945000
*                                        response data               */ 05946000
*       3 srvrIdr_ServerName isaname, /* Name of a Server on the        05947000
*                                        target system.                 05948000
*                                        Mapped by ixcysrvr_tName    */ 05949000
*       3 srvrIdr_#RequestsProcessed Fixed(32),                         05950000
*                                     /* Cumulative count of requests   05951000
*                                        processed by the server        05952000
*                                        since the server was           05953000
*                                        defined.                    */ 05954000
*       3 srvrIdr_#RequestsPending  Fixed(32),                          05955000
*                                     /* Count of server requests       05956000
*                                        waiting to be bound to a       05957000
*                                        server instance for            05958000
*                                        processing                  */ 05959000
*       3 srvrIdr_#RequestsWorking  Fixed(32),                          05960000
*                                     /* Count of server requests       05961000
*                                        currently being worked on by   05962000
*                                        server exits for the server */ 05963000
*       3 srvrIdr_#SrvrInstances Fixed(32),                             05964000
*                                     /* the total number of server     05965000
*                                        instances for this server      05966000
*                                        that are defined on the        05967000
*                                        target system. Valid for all   05968000
*                                        INFOTYPEs                   */ 05969000
*       3 srvrIdr_#HeaderDataRecs Fixed(32),                            05970000
*                                     /* Number of SrvrInfoHR records   05971000
*                                        that can be found beginning at 05972000
*                                        offset srvrIdr_OffsetHR from   05973000
*                                        the start of the SrvrInfoAA    05974000
*                                        record. The SrvrInfoHR records 05975000
*                                        found will describe the        05976000
*                                        following record types:        05977000
*                                                                       05978000
*                                       - SrvrInfoHR_kType_WI           05979000
*                                       - SrvrInfoHR_kType_IR        */ 05980000
*       3 srvrIdr_OffsetHR Fixed(31), /* Offset from the start of the   05981000
*                                        SrvrInfoAA record at which     05982000
*                                        the first SrvrInfoHR record    05983000
*                                        can be found. Valid when       05984000
*                                        srvrIdr_#HeaderDataRecs is     05985000
*                                        not zero (0).               */ 05986000
*       3 srvrIdr_ETodWhenCollected Char(16),                           05987000
*                                     /* 16 byte extended TOD           05988000
*                                        that denotes the time of day   05989000
*                                        that the data for this server  05990000
*                                        was collected on the target    05991000
*                                        system                      */ 05992000
*       3 srvrIdr_Flags Char(2),      /* Server Flags                */ 05993000
*         5 srvrIdr_wiStalled Bit(1), /* '1'B, a work item associated   05994000
*                                        with the server definition     05995000
*                                        appears to be stalled in its   05996000
*                                        processing                  */ 05997000
*         5 srvrIdr_irStalled Bit(1), /* '1'B, an instance associated   05998000
*                                        with the server definition     05999000
*                                        appears to be stalled in its   06000000
*                                        processing                  */ 06001000
*         5 srvrIdr_SS_Impact Bit(1), /* '1', at least one of the       06002000
*                                        defined server instances for   06003000
*                                        this server appears to be      06004000
*                                        contributing to sympathy       06005000
*                                        sickness in the sysplex     */ 06006000
*                                                                       06007000
*       3 * Char(2),                  /* Unused (zeros)              */ 06008000
*                                                                       06009000
*       3 * Char(0);                                                    06010000
*                                                                       06011000
*                                                                       06012000
*/********************************************************************/ 06013000
*/*                                                                  */ 06014000
*/*     Server Work Item (WI) record.  Information returned on a     */ 06015000
*/*     REQUEST=SERVERINFO, INFOTYPE=WORK request. A Server Work     */ 06016000
*/*     Item record is returned for the first and last server        */ 06017000
*/*     request on the server message queue and for each server      */ 06018000
*/*     request on the server message queue that is being processed  */ 06019000
*/*     by a server instance server exit.                            */ 06020000
*/*                                                                  */ 06021000
*/*     The first SrvrInfoWI record is the oldest server work item   */ 06022000
*/*     on the server message queue. The last SrvrInfoWI record is   */ 06023000
*/*     the most recently received server work item for the server.  */ 06024000
*/*     All SrvrInfoWI records in between the first and last         */ 06025000
*/*     SrvrInfoWI records represent server requests currently       */ 06026000
*/*     being processed by server instance server exits. The first   */ 06027000
*/*     and last SrvrInfoWI records may represent work items         */ 06028000
*/*     currently being processed or pending processing.             */ 06029000
*/*                                                                  */ 06030000
*/*                                                                  */ 06031000
*/*   Examples:                                                      */ 06032000
*/*                                                                  */ 06033000
*/*        First SrvrInfoWI is located as follows:                   */ 06034000
*/*          hrPtr = addr(SrvrInfoAA) + srvrIdr_OffsetHR to locate   */ 06035000
*/*          a SrvrInfoHR record with srvrIhr_Type of                */ 06036000
*/*          SrvrInfoHR_kType_WI                                     */ 06037000
*/*                                                                  */ 06038000
*/*          wiPtr = addr(SrvrInfoAA) + hrPtr -> srvrIhr_OffsetHR    */ 06039000
*/*                                                                  */ 06040000
*/*        Subsequent SrvrInfoWIs are located as follows:            */ 06041000
*/*          wiPtr = wiPtr + hrPtr -> srvrIhr_Length of an           */ 06042000
*/*          SrvrInfoHR record with a srvrIhr_Type of                */ 06043000
*/*          SrvrInfoHR_kType_WI                                     */ 06044000
*/*                                                                  */ 06045000
*/*        Last SrvrInfoWI can be located directly as follows:       */ 06046000
*/*          wiPtr = wiPtr + hrPtr -> srvrIhr_Length *               */ 06047000
*/*                   (hrPtr -> srvrIhr_#Records - 1)                */ 06048000
*/*                                                                  */ 06049000
*/********************************************************************/ 06050000
*   Declare                                                             06051000
*     1 ixcysrvr_tSrvrInfoWI                                            06052000
*         Type Bdy(Dword),          /* Server Work Item                 06053000
*                                      information returned by an       06054000
*                                      IXCREQ SERVERINFO request in     06055000
*                                      an IXCRECV DATAAREA           */ 06056000
*       3 srvrIwi_WorkItemSeq# fixed(32), /* Sequence number of         06057000
*                                      the server work item on          06058000
*                                      the server message queue      */ 06059000
*       3 srvrIwi_WorkItemToken Ptr(31), /* 4 byte token of the         06060000
*                                      the server work item on          06061000
*                                      the server message queue      */ 06062000
*       3 srvrIwi_WorkItemETOD Char(16), /* 16 byte extended TOD        06063000
*                                      of the server work item on       06064000
*                                      the server message queue. This   06065000
*                                      is the TOD that the request      06066000
*                                      was received by the target       06067000
*                                      system                        */ 06068000
*       3 srvrIwi_ServerID Char(16),   /* If nonzero, the SERVER ID     06069000
*                                      of the server instance           06070000
*                                      that is either supposed to       06071000
*                                      process the request (as might    06072000
*                                      be the case when the request is  06073000
*                                      targeted to a specific server    06074000
*                                      instance), or has been selected  06075000
*                                      to process the request.  If      06076000
*                                      zero, the request has not yet    06077000
*                                      been assigned to a server        06078000
*                                      instance for processing.      */ 06079000
*       3 srvrIwi_WorkItemType fixed(32), /* Type of server work        06080000
*                                      item.                         */ 06081000
*       3 srvrIwi_WorkItemState fixed(8),  /* State of the server       06082000
*                                      work item on the server          06083000
*                                      message queue.  See constants    06084000
*                                      for possible values           */ 06085000
*       3 srvrIwi_StatusFlags Char(1),                                  06086000
*         5 srvrIwi_WorkItemStalled Bit,  /* '1'B if the work item      06087000
*                                      appears to be stalled         */ 06088000
*         5 * bit(7),               /* Unused (zero)                 */ 06089000
*       3 * Char(2),                                                    06090000
*       3 * Char(0);                                                    06091000
*                                                                       06092000
*                                                                       06093000
*/********************************************************************/ 06094000
*/*                                                                  */ 06095000
*/*        Server Instance Record (IR). Information returned on a    */ 06096000
*/*        REQUEST=SERVERINFO, INFOTYPE=INSTANCE request. A Server   */ 06097000
*/*        instance record is returned for each "instance" of the    */ 06098000
*/*        server found on the target system.                        */ 06099000
*/*                                                                  */ 06100000
*/*        First SrvrInfoIR is located as follows:                   */ 06101000
*/*                                                                  */ 06102000
*/*        - hrPtr = addr(SrvrInfoAA) + srvrIdr_OffsetHR to locate   */ 06103000
*/*          a SrvrInfoHR record with srvrIhr_Type of                */ 06104000
*/*          SrvrInfoHR_kType_IR                                     */ 06105000
*/*                                                                  */ 06106000
*/*        - irPtr = addr(SrvrInfoAA) + hrPtr -> srvrIhr_OffsetHR    */ 06107000
*/*                                                                  */ 06108000
*/*        Subsequent SrvrInfoIRs are located as follows:            */ 06109000
*/*                                                                  */ 06110000
*/*        - irPtr = irPtr + hrPtr -> srvrIhr_Length of an           */ 06111000
*/*          SrvrInfoHR record with a srvrIhr_Type of                */ 06112000
*/*          SrvrInfoHR_kType_IR                                     */ 06113000
*/*                                                                  */ 06114000
*/********************************************************************/ 06115000
*   Declare                                                             06116000
*     1 ixcysrvr_tSrvrInfoIR                                            06117000
*         Type Bdy(Dword),          /* Server Instance information      06118000
*                                      returned by an IXCREQ SERVERINFO 06119000
*                                      request in an IXCRECV            06120000
*                                      DATAAREA                      */ 06121000
*       3 srvrIir_ServerDesc Char(32), /* Server Description provided   06122000
*                                      on the IXCSRVR START          */ 06123000
*       3 srvrIir_ServerID char(16),   /* Server ID that uniquely       06124000
*                                      identifies a server instance  */ 06125000
*       3 srvrIir_JobName Char(8),     /* Job name under which server   06126000
*                                      instance task is running      */ 06127000
*       3 srvrIir_MinServerLevel Fixed(32), /* MINLEVEL as specified    06128000
*                                      on the IXCSRVR START for this    06129000
*                                      server instance               */ 06130000
*       3 srvrIir_MaxServerLevel Fixed(32), /* MAXLEVEL as specified    06131000
*                                      on the IXCSRVR START for this    06132000
*                                      server instance               */ 06133000
*       3 srvrIir_MinClientLevel Fixed(32), /* MINCLIENT as specified   06134000
*                                      on the IXCSRVR START for this    06135000
*                                      server instance               */ 06136000
*       3 srvrIir_MaxClientLevel Fixed(32), /* MAXCLIENT as specified   06137000
*                                      on the IXCSRVR START for this    06138000
*                                      server instance               */ 06139000
*       3 srvrIir_Features isafeatures,                                 06140000
*                                   /* Features as identified on        06141000
*                                      IXCSRVR START for this server    06142000
*                                      instance.                        06143000
*                                      Mapped by ixcysrvr_tFeatures  */ 06144000
*       3 srvrIir_Exit@ Ptr(31),    /* Address of the server exit       06145000
*                                      routine                       */ 06146000
*       3 srvrIir_INFO char(64),    /* Server "INFO". Static data       06147000
*                                      specified when server was        06148000
*                                      started.                      */ 06149000
*       3 srvrIir_FDI Fixed,        /* Server FDI as specified on the   06150000
*                                      IXCSRVR START                 */ 06151000
*       3 srvrIir_RespBind Fixed,   /* Type of response recovery bind   06152000
*                                      in affect for this server. See   06153000
*                                      ixcysrvr_kRespBind* constants */ 06154000
*       3 srvrIir_RespStoken char(8),  /* STOKEN of address space       06155000
*                                      responsible for sending          06156000
*                                      responses on behalf of this      06157000
*                                      server instance. Applies if      06158000
*                                      srvrIir_RespBind contains        06159000
*                                      ixcysrvr_kRespBind_AddrSpace  */ 06160000
*       3 srvrIir_ServerASID Fixed(16),  /* ASID of the task that       06161000
*                                      instantiated this server         06162000
*                                      instance                      */ 06163000
*       3 * Char(2),                /* Reserved                      */ 06164000
*       3 srvrIir_Ttoken Char(16),  /* TTOKEN that identifies the task  06165000
*                                      that instantiates this server    06166000
*                                      instance                      */ 06167000
*       3 srvrIir_Tcb@   Ptr(31),   /* TCB address that identifies the  06168000
*                                      task that instantiates this      06169000
*                                      server instance               */ 06170000
*       3 srvrIir_#Requests fixed(32), /* Number of requests presented  06171000
*                                      to this server instance       */ 06172000
*       3 srvrIir_ETodWhenStarted Char(16), /* 16 byte extended TOD     06173000
*                                      when this server was             06174000
*                                      instantiated                  */ 06175000
*       3 srvrIir_ETodWhenIdle Char(16), /* 16 byte extended TOD        06176000
*                                      when this server last entered    06177000
*                                      an idle state waiting for        06178000
*                                      more work                     */ 06179000
*       3 srvrIir_ETodWhenNotified Char(16), /* 16 byte extended        06180000
*                                      TOD when the server instance     06181000
*                                      was last notified that work      06182000
*                                      items were available for         06183000
*                                      processsing                   */ 06184000
*       3 srvrIir_ETodWhenFindWork Char(16), /* 16 byte extended        06185000
*                                      TOD when the server instance     06186000
*                                      last began seaching for new      06187000
*                                      work to process               */ 06188000
*       3 srvrIir_ETodWhenGotWork Char(16), /* 16 byte extended TOD     06189000
*                                      when a request was last bound    06190000
*                                      to this server instance for      06191000
*                                      processing                    */ 06192000
*       3 srvrIir_ETodWhenStopAccepted Char(16), /* 16 byte extended    06193000
*                                      TOD when a stop request was      06194000
*                                      first accepted for this          06195000
*                                      server                        */ 06196000
*       3 srvrIir_UserState char(64),  /* Server "state" as reported by 06197000
*                                      the server exit via the SXPL  */ 06198000
*       3 srvrIir_InfoData  char(64),  /* Server defined static         06199000
*                                      information provided on the      06200000
*                                      INFO keyword of the IXCSRVR      06201000
*                                      START request for the server     06202000
*                                      instance                      */ 06203000
*       3 srvrIir_CurrentWorkItem,     /* Information in this section   06204000
*                                      valid when srvrIir_WorkItemToken 06205000
*                                      is non zero.                  */ 06206000
*         5 srvrIir_WorkItemType fixed(32), /* Type of work item being  06207000
*                                      processed.                    */ 06208000
*         5 srvrIir_MsgID char(16),    /* 16 byte MSGID provided by the 06209000
*                                      sender when IXCSEND was invoked  06210000
*                                      to send this message.         */ 06211000
*         5 srvrIir_Function Char(8),  /* 8 byte FUNCTION provided by   06212000
*                                      the sender when IXCSEND was      06213000
*                                      invoked to send the request   */ 06214000
*         5 srvrIir_WorkItemDesc Char(32), /* 32 byte DESCRIPTION       06215000
*                                      provided by the sender when      06216000
*                                      IXCSEND was invoked to send the  06217000
*                                      request                       */ 06218000
*         5 srvrIir_ETodWhenArrived Char(16), /* 16 byte extended TOD   06219000
*                                      when the item the server exit    06220000
*                                      is working on arrived         */ 06221000
*         5 srvrIir_ETodWhenExitCalled Char(16),  /* 16 byte extended   06222000
*                                      TOD when XCF last called server  06223000
*                                      exit routine                  */ 06224000
*         5 srvrIir_ETodWhenExitReturned Char(16), /* 16 byte extended  06225000
*                                      when server exit last returned   06226000
*                                      to XCF                        */ 06227000
*         5 srvrIir_WorkItemSeq# fixed(32), /* Sequence number of       06228000
*                                      the current server               06229000
*                                      request being worked on by       06230000
*                                      the server instance           */ 06231000
*         5 srvrIir_WorkItemToken Ptr(31), /* 4 byte token that         06232000
*                                      represents the current server    06233000
*                                      request being worked on by       06234000
*                                      the server instance           */ 06235000
*         5 srvrIir_ClientLevel Fixed(32),   /* Level of the client     06236000
*                                      that sent the request            06237000
*                                      as specified on the IXCSEND      06238000
*                                      request                      */  06239000
*         5 srvrIir_RequestCriteria isacriteria,                        06240000
*                                   /* the range of server levels and   06241000
*                                      set of features that the server  06242000
*                                      must support to process this     06243000
*                                      request as specified on the      06244000
*                                      IXCSEND request.                 06245000
*                                      Mapped by ixcysrvr_tCriteria  */ 06246000
*       3 srvrIir_Status char(4),   /* Server instance status           06247000
*                                      information from an XCF          06248000
*                                      system management perspective */ 06249000
*         5 srvrIir_StatusCode fixed(8),                                06250000
*                                   /* Server instance status           06251000
*                                      from an XCF perspective. See     06252000
*                                      ixcysrvr_kIrxxxx                 06253000
*                                      constants for possible values */ 06254000
*         5 srvrIir_StatusFlags char(1),                                06255000
*           7 srvrIir_StopNormally Bit(1),                              06256000
*                                   /* '1'B if the server is            06257000
*                                      finishing pending work before    06258000
*                                      shutting down.                   06259000
*                                      '0'B if the server is stopping   06260000
*                                      immediately without processing   06261000
*                                      queued work.                     06262000
*                                      This field is valid only when    06263000
*                                      srvrIir_ETodWhenStopAccepted     06264000
*                                      is non-zero                   */ 06265000
*           7 srvrIir_Stalled Bit(1),                                   06266000
*                                   /* '1'B if the server instance      06267000
*                                      appears to be stalled     */     06268000
*           7 srvrIir_SS_Impact Bit(1),                                 06269000
*                                   /* '1'B if the server instance      06270000
*                                      appears to be contributing to    06271000
*                                      sympathy sickness in the         06272000
*                                      sysplex                       */ 06273000
*           7 * bit(5),             /* Unused (zero)                 */ 06274000
*         5 * char(1),              /* Unused (zero)                 */ 06275000
*         5 srvrIir_WhyStop fixed(8),  /* Internal XCF information      06276000
*                                      identifying why a server         06277000
*                                      instance stopped.                06278000
*                                      This field is valid only when    06279000
*                                      srvrIir_ETodWhenStopAccepted     06280000
*                                      is non-zero                   */ 06281000
*       3 * Char(0);                                                    06282000
*                                                                       06283000
*   Declare                        /* srvrIir_StatusCode constants   */ 06284000
*     ixcysrvr_kIrStarting   constant(1),  /* The server instance is    06285000
*                                     in the process of starting and    06286000
*                                     initializing.                  */ 06287000
*     ixcysrvr_kIrPreparing  constant(2),  /* The server instance is    06288000
*                                     preparing to process a newly      06289000
*                                     assigned work item             */ 06290000
*     ixcysrvr_kIrWorking    constant(3),  /* The server instance is    06291000
*                                     working on a request           */ 06292000
*     ixcysrvr_kIrCompleting constant(4),  /* The server instance is    06293000
*                                     completing work                */ 06294000
*     ixcysrvr_kIrIdle       constant(5),  /* The server instance is    06295000
*                                     waiting for work to be assigned   06296000
*                                     to the instance                */ 06297000
*     ixcysrvr_kIrNotified   constant(6),  /* The server instance has   06298000
*                                     been notified that pending work   06299000
*                                     is available to be processed   */ 06300000
*     ixcysrvr_kIrFindWork   constant(7),  /* The server instance is    06301000
*                                     searching for a new request to    06302000
*                                     process                        */ 06303000
*     ixcysrvr_kIrStopping   constant(8),  /* The server instance is    06304000
*                                      marked to be stopped.         */ 06305000
*     ixcysrvr_kIrUnknownWork constant('FE'x), /* The status of the     06306000
*                                      server instance is unknown       06307000
*                                      because the server instance is   06308000
*                                      processing work that is not      06309000
*                                      recognized by XCF             */ 06310000
*     ixcysrvr_kIrUnknown    constant('FF'x); /* The status of the      06311000
*                                      server instance is unknown    */ 06312000
*                                                                       06313000
*   Declare                        /* WorkItemType constants for        06314000
*                                     srvrIir_WorkItemType and          06315000
*                                     srvrIwi_WorkItemType           */ 06316000
*     ixcysrvr_kRequest      constant(1);  /* The work item is a        06317000
*                                     client request for a server    */ 06318000
*                                                                       06319000
*   Declare                        /* WorkItemState constants for       06320000
*                                     srvrIwi_WorkItemState          */ 06321000
*     ixcysrvr_kWiPending    constant(1),  /* The work item is          06322000
*                                     pending processing.            */ 06323000
*     ixcysrvr_kWiPreparing  constant(2),  /* The work item is          06324000
*                                     assigned to a server instance     06325000
*                                     but the server exit has not       06326000
*                                     been presented with the work      06327000
*                                     item yet                       */ 06328000
*     ixcysrvr_kWiWorking    constant(3),  /* The work item is          06329000
*                                     assigned to a server instance     06330000
*                                     and being worked on            */ 06331000
*     ixcysrvr_kWiCompleting constant(4);  /* The work item is          06332000
*                                     assigned to a server instance,    06333000
*                                     the server exit completed         06334000
*                                     processing the request, XCF is    06335000
*                                     performing completion processing  06336000
*                                     for the work item              */ 06337000
*                                                                       06338000
*                                                                       06339000
*  ?Asaxmac Assert(ixcysrvr_kIrPreparing,EQ,ixcysrvr_kWiPreparing);     06340000
*  ?Asaxmac Assert(ixcysrvr_kIrWorking,EQ,ixcysrvr_kWiWorking);         06341000
*  ?Asaxmac Assert(ixcysrvr_kIrCompleting,EQ,ixcysrvr_kWiCompleting);   06342000
*                                                                       06343000
*/********************************************************************/ 06344000
*/*                                                                  */ 06345000
*/*  IXCREQ Diagnostic Area Mapping                                  */ 06346000
*/*                                                                  */ 06347000
*/*  See IXCREQ Return/Reason Code documentation to determine        */ 06348000
*/*  whether DIAG information is returned for a particular non-zero  */ 06349000
*/*  return and reason code. When DIAG information is returned, it   */ 06350000
*/*  is returned in the IXCRECV DATAAREA.  No Server Definition      */ 06351000
*/*  data is returned in the IXCRECV DATAAREA when DIAG information  */ 06352000
*/*  is returned.                                                    */ 06353000
*/*                                                                  */ 06354000
*/*  Returned DIAG data is mapped by the ixcysrvr_tSrvrInfoDD        */ 06355000
*/*  mapping starting at offset zero (0) of the storage location     */ 06356000
*/*  described by the rd_MsgDesc in the response descriptor record   */ 06357000
*/*  returned by IXCRECV.                                            */ 06358000
*/*                                                                  */ 06359000
*/********************************************************************/ 06360000
*   Declare                                                             06361000
*     1 ixcysrvr_tSrvrInfoDD                                            06362000
*         Type Bdy(Dword),           /* IXCREQ Diagnostic information   06363000
*                                       returned by an IXCREQ request   06364000
*                                       in an IXCRECV DATAAREA       */ 06365000
*       3 srvrIdd_Diag0   Fixed(32), /* Reserved                     */ 06366000
*       3 srvrIdd_DiagRc  Fixed(32), /* IXCREQ Return code that the     06367000
*                                       DIAG information is for. Same   06368000
*                                       as rd_RespRetcode from the      06369000
*                                       ixcysrvr_tResponseDescriptor    06370000
*                                       record for the server that sent 06371000
*                                       the response                 */ 06372000
*       3 srvrIdd_DiagRsn Fixed(32), /* IXCREQ Reason code that the     06373000
*                                       DIAG information is for. Same   06374000
*                                       as rd_RespRsncode from the      06375000
*                                       ixcysrvr_tResponseDescriptor    06376000
*                                       record for the server that sent 06377000
*                                       the response                 */ 06378000
*       3 srvrIdd_Diag1   Fixed(32), /* Contents depends on the         06379000
*                                       value of srvrIdd_DiagRc and     06380000
*                                       srvrIdd_DiagRsn              */ 06381000
*       3 srvrIdd_Diag2   Fixed(32), /* Contents depends on the         06382000
*                                       value of srvrIdd_DiagRc and     06383000
*                                       srvrIdd_DiagRsn              */ 06384000
*       3 srvrIdd_Diag3   Fixed(32), /* Contents depends on the         06385000
*                                       value of srvrIdd_DiagRc and     06386000
*                                       srvrIdd_DiagRsn              */ 06387000
*       3 srvrIdd_Diag4   Fixed(32), /* Contents depends on the         06388000
*                                       value of srvrIdd_DiagRc and     06389000
*                                       srvrIdd_DiagRsn              */ 06390000
*       3 *               Fixed(32); /* Reserved                     */ 06391000
*                                                                       06392000
*                                                                       06393000
* @Logic;                                                               06394000
* #PRAGMA TOOL=CBGEN.                                                   06395000
* #FIRSTDSECTCOND.                                                      06396000
* #DELETE.IXCYSRVR_XCFSERVERNAME                                        06397000
* #DELETE.IXCYSRVR_KSERVERINFOIXCREQ                                    06398000
* #LINE.%CbGenNoIsa = 'YES';                                            06399000
* #LINE.%Include Syslib(ixcysrvr);                                      06400000
* #EPRAGMA.                                                             06401000
* @EndLogic;                                                            06402000
*/* End of PL/X Source                                               */ 06403000
* %IF IXCYSRVR_LIST ^= 'NO' &                                           06404000
*    ZCBPRINT ^= 'NO' %THEN                                             06405000
*   %GOTO IXCYSRVR_4;                                                   06406000
*   @LIST POP NOECHO;                                                   06407000
* %IXCYSRVR_4:;                                                         06408000
* %END;                                                                 06409000
