*%ERBPRO: MACRO KEYS(               /* Header for general mapping    */         
*             TYPE,                 /* Invoking SMF record type      */         
*             ATTRIBUT,             /* Attributes of the structure              
*                                      produced by this macro (the              
*                                      boundary attribute is appended           
*                                      to it)                        */         
*             SUBSTR);              /* SUBSTR(YES) generates the                
*                                      substructure only         @N1A*/         
*/*      Bilingual Mapping macro                                                
         MACRO                                                                  
         ERBPRO &R                                                              
*                                                                               
**/  BLOCKANSWER SKIP COLUMN(2);                                                
*'/* START OF SPECIFICATIONS ****************************************/'         
*'/*                                                                */'         
*'/*01* PROPRIETARY STATEMENT=                                      */'         
*'/*       Licensed Materials - Property of IBM                 @61A*/'         
*'/*       "Restricted Materials of IBM"                        @61A*/'         
*'/*       Copyright IBM Corp. 1977, 2022                   @OA63190*/'         
*'/*                                                                */'         
*'/*       Status: z/OS V2R5 Data Gatherer (HRG77D0)                */'         
*'/*                                                                */'         
*'/*01* DESCRIPTIVE_NAME: General mapping of RMF Product Section    */'         
*'/*02*  ACRONYM:  PRO                                              */'         
*'/*                                                                */'         
*'/*01* MACRO-NAME:  ERBPRO                                         */'         
*'/*                                                                */'         
*'/*01* DSECT NAME:  SMFnnPRO, if record type specified             */'         
*'/*                 RMFPRO  , if record type omitted               */'         
*'/*                                                                */'         
*'/*01* COMPONENT:  zOS Data Gatherer (27401)                       */'         
*'/*                                                                */'         
*'/*01* EYE-CATCHER:  N/A                                           */'         
*'/*02*  OFFSET:  N/A                                               */'         
*'/*02*  LENGTH:  N/A                                               */'         
*'/*                                                                */'         
*'/*01* STORAGE ATTRIBUTES:                                         */'         
*'/*02*  SUBPOOL:    same as SMF record mapping                     */'         
*'/*02*  KEY:        same as SMF record mapping                     */'         
*'/*02*  RESIDENCY:  same as SMF record mapping                     */'         
*'/*02*  MAIN STORAGE:      N/A                                     */'         
*'/*02*  AUXILIARY STORAGE: N/A                                     */'         
*'/*02*  VIRTUAL STORAGE:   N/A                                     */'         
*'/*                                                                */'         
*'/*01* SIZE: 104 bytes - common section                        @C1C*/'         
*'/*         + 16 bytes - split/reassembly control (static)     @C1C*/'         
*'/*         +  4 bytes * SMFHDR extension triplet -            @C1C*/'         
*'/*                      - split/reassembly (variable)         @C1C*/'         
*'/*                                                                */'         
*'/*01* CREATED BY: N/A                                             */'         
*'/*                                                                */'         
*'/*01* POINTED TO BY: N/A                                          */'         
*'/*                                                                */'         
*'/*01* SERIALIZATION:                                              */'         
*'/*     Not provided                                               */'         
*'/*                                                                */'         
*'/*01* FUNCTION:                                                   */'         
*'/*02*  This macro maps the RMF product section of RMFs            */'         
*'/*     SMF records depending on the macro call.                   */'         
*'/*     It is called by macro ERBSMF                               */'         
*'/*                           ERBSMF70                             */'         
*'/*                              :                                 */'         
*'/*                           ERBSMF79                             */'         
*'/*     NOTE:                                                      */'         
*'/*      When this data section is build in a NON-RMF environment, */'         
*'/*      all data are zero except:                             @G1A*/'         
*'/*         SMF74PRD = product name, e.g. CRR instead of RMF   @G1A*/'         
*'/*         SMF74IST = time (0hhmmssF),                        @G1A*/'         
*'/*                    time when the record is processed       @G1A*/'         
*'/*         SMF74DAT = date (0cyydddF),                        @G1A*/'         
*'/*                    date when the record is processed       @G1A*/'         
*'/*         SMF74SRL = SMF record level change number          @G1A*/'         
*'/*         SMF74IET = 8 TOKEN, 8 bytes TOD value              @G1A*/'         
*'/*                    TOD value when the record is processed  @G1A*/'         
*'/*                                                                */'         
*'/*01* METHOD OF ACCESS:                                           */'         
*'/*02*  ASM:                                                       */'         
*'/*      - ERBPRO                                                  */'         
*'/*      - ERBPRO 70                                               */'         
*'/*            :                                                   */'         
*'/*      - ERBPRO 79                                               */'         
*'/*                                                                */'         
*'/*02*  PL/X:                                                      */'         
*'/*      .question mark.ERBPRO ATTRIBUT(attributes)                */'         
*'/*      .question mark.ERBPRO TYPE(70) ATTRIBUT(attributes)       */'         
*'/*      :                                                         */'         
*'/*      .question mark.ERBPRO TYPE(79) ATTRIBUT(attributes)       */'         
*'/*                                                                */'         
*'/*      where attributes are any acceptable PL/X attributes       */'         
*'/*      for structure declarations.                               */'         
*'/*                                                                */'         
*'/*01* MODULE-TYPE: Bilingual mapping macro                        */'         
*'/*                                                                */'         
*'/*01* DELETED BY: N/A                                             */'         
*'/*                                                                */'         
*'/*01* FREQUENCY:  N/A                                             */'         
*'/*                                                                */'         
*'/*01* DEPENDENCIES: None                                          */'         
*'/*                                                                */'         
*'/*01* DISTRIBUTION LIBRARY: AGRBMAC1                      @OA63190*/'         
*'/*                                                                */'         
*'/*01* CHANGE ACTIVITY:                                            */'         
*'/* $N1=PP,HRM3102,,NEL: RMF 3.1 POST PROCESSOR ENHANCEMENTS       */'         
*'/* $O1=4381SP,JRM3212,,SHR: 4381 - SUPPORT                    @O1A*/'         
*'/* $O2=SOLVSP,JRM3212,,SHR: SOFTWARE LEVEL SUPPORT            @O2A*/'         
*'/* $P1=3090,HRM3302,,HEN: 3090 - SUPPORT                      @P1A*/'         
*'/* $P2=ES,HRM3302,,CIH: SP2.2 EXTENDED STORE                  @P2A*/'         
*'/* $Q1=MISC,HRM3402,,WEY: CSA FIXED FRAMES COUNT INTERFACE    @Q1A*/'         
*'/* $X0=OY11330,HRM4410,,WRC: PR/SM support                    @X0A*/'         
*'/* SMF Record Change Level Support                        @YA28449*/'         
*'/* $Z1=SERIAL,HRM4420,,WRC: Serial & switch                   @Z1A*/'         
*'/* $B1=SYNC,HRM4430,,GBO: Synchronize Measurements            @B1A*/'         
*'/* $C1=WLM,HRM4440,,HKH: WLM Support                          @C1A*/'         
*'/* $C2=SPLIT,HRM4440,,SCD: Split/Reassembly                   @C2A*/'         
*'/* $E1=CVT,HRM5530,,SUW: Report new product type OS/390 and       */'         
*'/*         software level. Will be added with APAR OW15873        */'         
*'/*         (OS/390 Release 1).                                @E1A*/'         
*'/* $G1=CACHE,HRM6606,,THE: 256 device support                 @G1A*/'         
*'/* $I1=BIT64,HRM7703,,GUB: 64 Bit real support                @I1A*/'         
*'/* $J1=MISC,HRM7705,,GUB: Comment changes for zSeries         @J1A*/'         
*'/* FDL: Prepares for up to 65535 devices                  @WA55906*/'         
*'/* $K1=MISC,HRM7708,,GUB: Allign and update comments          @K1A*/'         
*'/* $K2=IFA,OA05731,,WLR: IFA support                          @K2A*/'         
*'/* GUB: System Utility Processor (SUP) support            @OA13499*/'         
*'/* $11=LPS,HRM7740,,WLR: New function                         @11A*/'         
*'/* $21=COMM,HRM7750,,WLR: 64-bit Common Memory support        @21A*/'         
*'/* $22=ICN,HRM7750,,GUB: Dynamic CPU addition                 @22A*/'         
*'/* $61=R790,HRM7790,,MWe: explicit copyright for ext. macro   @61A*/'         
*'/* $71=R7A0,HRM77A0,,MWe: change description of &Y&R.MFV      @71A*/'         
*'/* $81=2GB,OA48913,,JBa: Report on 2GB frame usage            @81A*/'         
*'/* $91=ZCBP,OA54915,,GUB: zCBP support, PL/X part reworked    @91A*/'         
*'/* $92=ZCBP,OA56461,,JKu: zCBP fencing                        @92A*/'         
*'/* $93=BOOT,OA56683,,JDO: Fast boot support                   @93A*/'         
*'/* $A02=SRB2,OA59321,,UMu: System recovery boost stage 2     @A02A*/'         
*'/* JDO: SMF data conversion                               @OA60212*/'         
*'/* UMu: zDG support for Wazi                              @OA63190*/'         
*'/* JKu: Update field description for REST services        @OA62081*/'         
*'/*                                                                */'         
*'/* END OF SPECIFICATIONS ******************************************/'         
*    ENDANSWER;                     /*                                          
         LCLC  &X                                                               
         LCLC  &Y                                                               
&X       SETC  T'&R                                                             
         AIF   ('&X' EQ 'O').GNRL                                               
         AIF   (&R LT 70).ERROR                                                 
         AIF   (&R GT 79).ERROR                                                 
&Y       SETC  'SMF'                                                            
         AGO   .ASSEM                                                           
.GNRL    ANOP                                                                   
&Y       SETC  'RMF'                                                            
         AGO   .ASSEM                                                           
         SPACE 3                                                                
.ERROR   MNOTE 4,'&R INVALID RECORD TYPE SPECIFIED'                             
.CONTB   ANOP                                                                   
         MEXIT                                                                  
.ASSEM   ANOP                                                                   
&Y&R.PRO DSECT                                                                  
&Y&R.MFV DS    CL2      RMF version number in PACKED decimal 'nnnF'             
*                       format                                     @71C         
&Y&R.PRD DS    CL8      PRODUCT NAME                                            
&Y&R.IST DS    PL4      TOD MONITOR INTERVAL START: 0HHMMSSF                    
&Y&R.DAT DS    PL4      DATE MONITOR INTERVAL START: 00YYDDDF                   
&Y&R.INT DS    PL4      DURATION OF MONITOR INTERVAL: MMSSTTTF                  
*                                                                               
&Y&R.MFL DS    BL2      RESERVED                                   @J1C         
&Y&R.SAM DS    BL4      Number of RMF samples                                   
&Y&R.RV2 DS    BL2      RESERVED                                                
&Y&R.FLA DS    BL2      Flags                                                   
&Y&R.CNV EQU   X'80'    DATA CONVERT.FROM VER.2                                 
&Y&R.ISS EQU   X'40'    INVALID SAMPLES TO BE SKIPPED              @Q1A         
&Y&R.M3R EQU   X'20'    Record was written by RMF Monitor III      @B1A         
&Y&R.ISM EQU   X'10'    Interval was written under SMF control     @B1A         
&Y&R.RCL EQU   X'08'    SMF record converted to lower service level.            
*                       Bit is set by SMF record retrieval service              
*                       GRBSMFR.                               @OA60212         
&Y&R.RCH EQU   X'04'    SMF record converted to higher release or               
*                       service level. Bit is set by SMF record                 
*                       retrieval service GRBSMFR.             @OA60212         
&Y&R.AltVM EQU X'02'    Running under an alternate virtual machine              
*                       environment                            @OA63190         
&Y&R.CBP EQU   X'0080'  Reserved for future use                    @92C         
&Y&R.IIP EQU   X'0040'  zIIP boost was active                      @93A         
*                       during entire interval                     @93A         
&Y&R.EED EQU   X'0020'  Speed boost was active during              @93A         
*                       entire interval                            @93A         
&Y&R.BOO EQU   X'0007'  Boost class is set at end of interval,    @A02C         
*                       valid only when zIIP boost and/or Speed   @A02A         
*                       boost is active                           @A02A         
&Y&R.BRP EQU   X'0003'  Boost class: 011 Recovery Process         @A02A         
&Y&R.BSH EQU   X'0002'  Boost class: 010 Shutdown                  @93A         
&Y&R.BIP EQU   X'0001'  Boost class: 001 IPL                       @93A         
&Y&R.RLS DS    CL4      RESERVED                                   @J1C         
&Y&R.CYC DS    PL4      CYCLE IN PACKED DECIMAL 000TTTTF                        
&Y&R.MVS DS    CL8      MVS software level (consists of an acronym @J1C         
*                       and the version, release, and modification @J1C         
*                       level - ZVvvrrmm).                         @J1C         
&Y&R.IML DS    XL1      Indicates the type of processor complex    @J1C         
*                       on which data measurements were taken      @J1C         
*                       X'03' = 9672, zSeries                  @OA13499         
&Y&R.PRF DS    BL1      Processor flags                            @P2A         
&Y&R.QES EQU   X'80'    System has expanded storage                @P2A         
&Y&R.CNE EQU   X'40'    Equipped with ESCON Channel                @Z1A         
&Y&R.DRC EQU   X'20'    ESCON Director in configuration            @Z1A         
&Y&R.EME EQU   X'10'    System in z/ARCH mode                      @I1A         
&Y&R.PRX EQU   X'08'    Reserved for future use                    @92C         
&Y&R.PRI EQU   X'08'    At least one zAAP is currently installed   @92C         
&Y&R.PRP EQU   X'04'    At least one zIIP is currently installed   @22C         
&Y&R.PED EQU   X'02'    Enhanced DAT facility 1 available          @81C         
&Y&R.PE2 EQU   X'01'    Enhanced DAT facility 2 available          @81A         
&Y&R.PTN DS    BL1      PR/SM PARTITION NUMBER                     @Z1C         
&Y&R.SRL DS    BL1      SMF record level                       @YA28449         
&Y&R.IET DS    CL8      Interval expiration time token             @B1A         
&Y&R.LGO DS    CL8      Offset GMT to local time                   @C1A         
&Y&R.RAO DS    BL4      Offset to reassembly area relative to      @C2A         
*                       start of RMF product section               @C2A         
&Y&R.RAL DS    BL2      Length of reassembly area. Length depends  @C2A         
*                       on the record type/subtype but is fix for  @C2A         
*                       a specific type/subtype                    @C2A         
&Y&R.RAN DS    BL2      Number of reassembly area. This field is   @C2A         
*                       used to indicate whether SMF record is     @C2A         
*                       broken. If 0, record is not broken. If 1,  @C2A         
*                       record is broken. Offset and length are    @C2A         
*                       only valid if SMFxxRAN is 1. Reassembly    @C2A         
*                       area is only present in broken records.    @C2A         
&Y&R.OIL DS    BL2      Original interval length                   @C2A         
*                       (as defined in the session option or by    @C2A         
*                        SMF)                                      @C2A         
&Y&R.SYN DS    BL2      SYNC value in seconds                      @C2A         
&Y&R.GIE DS    CL8      Projected gathering interval end           @C2A         
*                       (STCK format) GMT time                     @C2A         
&Y&R.XNM DS    CL8      Sysplex name                               @C1A         
*                       (as defined in ECVTSPLX)                   @C1A         
&Y&R.SNM DS    CL8      System name for current system             @C1A         
*                       (as defined in CVTSNAME)                   @C1A         
&Y&R.RHD DSECT                                                                  
&Y&R.RBR DS    BL2      Total number of broken records build from  @C2A         
*                       the original large record                  @C2A         
&Y&R.RSQ DS    BL2      Sequence number of this broken record.     @C2A         
*                       Every broken record build from the same    @C2A         
*                       large record must have a unique sequence   @C2A         
*                       number. Broken records with sequence       @C2A         
*                       numbers from 1 to SMFxxRBR must exist      @C2A         
&Y&R.RIO DS    BL4      Offset to first reassembly information     @C2A         
*                       block relative to start of reassembly      @C2A         
*                       area header                                @C2A         
&Y&R.RIL DS    BL2      Length of reassembly information block     @C2A         
&Y&R.RIN DS    BL2      Number of reassembly information blocks    @C2A         
*                       (same as SMFxxTRN in header section)       @C2A         
         DS    BL4      Reserved                                   @C2A         
&Y&R.RBL DSECT                                                                  
&Y&R.RNN DS    BL2      Total number of sections in the original   @C2A         
*                       large record. This field contains          @C2A         
*                       information of how many sections of a      @C2A         
*                       specific type were contained in the        @C2A         
*                       original SMF record. This field is a copy  @C2A         
*                       of the number field of the triplet in the  @C2A         
*                       original (non broken) record               @C2A         
&Y&R.RPP DS    BL2      Position of the first of one or more       @C2A         
*                       consecutive section(s) described by this   @C2A         
*                       block as in the original record. Values in @C2A         
*                       the range of 1 to SMFxxRNN are valid for   @C2A         
*                       correct processing. A value of 0 will skip @C2A         
*                       processing of this information block. This @C2A         
*                       field provides information where the       @C2A         
*                       sections that are part of this broken      @C2A         
*                       record were placed in the original record  @C2A         
*                       before the split took place. The actual    @C2A         
*                       number of consecutive sections contained   @C2A         
*                       in this record is available from the       @C2A         
*                       actual triplet in the header extension     @C2A         
         MEND                                                                   
**/                                                                             
*    DCL KEY1 CHAR;                 /* KEYWORD 1 PRINTED IN COMMENT  */         
*    DCL KEY2 CHAR;                 /* KEYWORD 2 PRINTED IN COMMENT  */         
*    DCL KEY3 CHAR;                 /* KEYWORD 3 PRINTED IN COM. @N1A*/         
*    /* ANSWER BACK A COPY OF INVOKING STATEMENT                     */         
*    IF TYPE='' THEN DO;            /* IF NO RECORD TYPE WERE INPUT,            
*                                      DO NOT PRINT KEYWORD          */         
*       KEY1 = '';                  /* KEYWORD 1 IS BLANKS           */         
*       PF = 'RMF';                 /* Prefix of field name          */         
*    END;                                                                       
*    ELSE DO;                                                                   
*       KEY1 = 'TYPE';                                                          
*       PF = 'SMF' !! TYPE(2:3);    /* Prefix of field name          */         
*    END;                                                                       
*                                                                               
*    IF ATTRIBUT = ''               /* IF NO STRUCTURE ATTRIBUTES WERE          
*                                      INPUT, DO NOT PRINT KEY WORD  */         
*    THEN KEY2 = '';                /* KEYWORD 2 IS BLANKS           */         
*    ELSE KEY2 = 'ATTRIBUT';        /* PRINT KEYWORD NAME            */         
*                                                                               
*    IF SUBSTR = ''                 /* IF NO SUBSTRUCTURE        @N1A*/         
*    THEN KEY3 = '';                /* KEYWORD 3 IS BLANKS       @N1A*/         
*    ELSE KEY3='SUBSTR';            /* PRINT KEYWORD NAME        @N1A*/         
*                                                                               
*    ANS(Comment('?'!!MACLABEL!!MACNAME!!' '!!MACLIST!!KEY1!!TYPE!!             
*                ' '!!KEY2!!ATTRIBUT!!' '!!KEY3!!SUBSTR)) Skip;                 
*                                                                               
*    IF SUBSTR = '(YES)'            /* IF SUBSTRUCTURE REQUESTED @N1A*/         
*    THEN GOTO NOHDR;               /* SKIP HDR DECLARE          @N1A*/         
*                                                                               
*    ANS('DCL 1 '!!PF!!'PRO '!!ATTRIBUT(1)!!' BDY(WORD),') COL(MACCOL);         
*                                                                               
*    NOHDR:                                                                     
*    ANS('3 '!!PF!!'MFV CHAR(2),')     COL(MACCOL);                             
*    ANS(Comment('RMF version number in packed decimal format: nnnF'))          
*                                      COL(37);                                 
*    ANS('3 '!!PF!!'PRD CHAR(8),')     COL(MACCOL);                             
*    ANS(Comment('Product name'))      COL(37);                                 
*    ANS('3 '!!PF!!'IST CHAR(4),')     COL(MACCOL);                             
*    ANS(Comment('TOD monitor interval start: 0HHMMSSF')) COL(37);              
*    ANS('3 '!!PF!!'DAT CHAR(4),')     COL(MACCOL);                             
*    ANS(Comment('Date monitor interval start: 00YYDDDF')) COL(37);             
*    ANS('3 '!!PF!!'INT CHAR(4),')     COL(MACCOL);                             
*    ANS(Comment('Duration of monitor interval: MMSSTTTF')) COL(37);            
*    ANS('3 '!!PF!!'MFL CHAR(2),')     COL(MACCOL);                             
*    ANS(Comment('Reserved'))          COL(37);                                 
*    ANS('3 '!!PF!!'SAM FIXED(32),')   COL(MACCOL);                             
*    ANS(Comment('Number of samples')) COL(37);                                 
*    ANS('3 '!!PF!!'RV2 FIXED(15),')   COL(MACCOL);                             
*    ANS(Comment('Reserved'))          COL(37);                                 
*    ANS('3 '!!PF!!'FLA BIT(16),')     COL(MACCOL);                             
*    ANS(Comment('Flags'))             COL(37);                                 
*    ANS('5 '!!PF!!'CNV BIT(1),')      COL(MACCOL+2);                           
*    ANS(Comment('Data converted from version 2')) COL(37);                     
*    ANS('5 '!!PF!!'ISS BIT(1),')      COL(MACCOL+2);                           
*    ANS(Comment('Invalid samples to be skipped')) COL(37);                     
*    ANS('5 '!!PF!!'M3R BIT(1),')      COL(MACCOL+2);                           
*    ANS(Comment('Record was written by RMF Monitor III')) COL(37);             
*    ANS('5 '!!PF!!'ISM BIT(1),')      COL(MACCOL+2);                           
*    ANS(Comment('Interval was under SMF control')) COL(37);                    
*    ANS('5 '!!PF!!'RCL BIT(1),')      COL(MACCOL+2);     /* @OA60212*/         
*    ANS(Comment('SMF record converted to lower service level. '                
*            !!  'Bit is set by SMF record retrieval service GRBSMFR. '         
*            !!  '@OA60212')) COL(37);                    /* @OA60212*/         
*    ANS('5 '!!PF!!'RCH BIT(1),')      COL(MACCOL+2);     /* @OA60212*/         
*    ANS(Comment('SMF record converted to higher release or '                   
*            !!  'service level. Bit is set by SMF record retrieval '           
*            !!  'service GRBSMFR. @OA60212')) COL(37);   /* @OA60212*/         
*    ANS('5 '!!PF!!'AltVM BIT(1),')    COL(MACCOL+2);     /* @OA63190*/         
*    ANS(Comment('Running under an alternate virtual machine '                  
*            !!   'environment @OA63190')) COL(37);       /* @OA63190*/         
*    ANS('5  *          BIT(1),')      COL(MACCOL+2);     /* @OA63190*/         
*    ANS(Comment('Reserved'))          COL(37);               /* @91A*/         
*    ANS('5 '!!PF!!'CBP BIT(1),')      COL(MACCOL+2);         /* @91A*/         
*    ANS(Comment('Reserved for future use @92C')) COL(37);    /* @92C*/         
*    ANS('5 '!!PF!!'IIP BIT(1),')      COL(MACCOL+2);         /* @93A*/         
*    ANS(Comment('zIIP boost was active '                                       
*            !!  'during entire interval @93A')) COL(37);     /* @93A*/         
*    ANS('5 '!!PF!!'EED BIT(1),')      COL(MACCOL+2);         /* @93A*/         
*    ANS(Comment('Speed boost was active during '                               
*            !!  'entire interval @93A')) COL(37);            /* @93A*/         
*    ANS('5  *          BIT(2),')      COL(MACCOL+2);         /* @93A*/         
*    ANS(Comment('Reserved'))          COL(37);               /* @93A*/         
*    ANS('5 '!!PF!!'BOO BIT(3),')      COL(MACCOL+2);         /* @93A*/         
*    ANS(Comment('Boost class is set at end of interval, valid only '           
*            !!  'when zIIP boost and/or Speed boost is active: '               
*            !!  '001 IPL, '                                                    
*            !!  '010 Shutdown, '                                               
*            !!  '011 Recovery Process @A02C')) COL(37);  /* @OA62081*/         
*    ANS('3 '!!PF!!'RLS CHAR(4),')     COL(MACCOL);                             
*    ANS(Comment('Reserved @J1C'))     COL(37);                                 
*    ANS('3 '!!PF!!'CYC CHAR(4),')     COL(MACCOL);                             
*    ANS(Comment('Sampling cycle length 000TTTTF')) COL(37);                    
*    ANS('3 '!!PF!!'MVS CHAR(8),')     COL(MACCOL);                             
*    ANS(Comment('MVS software level (consists of an acronym '                  
*            !!  'and the version, release, and modification '                  
*            !!  'level - ZVvvrrmm) @J1C')) COL(37);                            
*    ANS('3 '!!PF!!'IML CHAR(1),')     COL(MACCOL);                             
*    ANS(Comment('Indicates the type of processor complex on '                  
*            !!  'which data measurements were taken. '                         
*            !!  'X''03'' = 9672, zSeries')) COL(37);                           
*    ANS('3 '!!PF!!'PRF BIT(8),')      COL(MACCOL);                             
*    ANS(Comment('Processor flags'))   COL(37);                                 
*    ANS('5 '!!PF!!'QES BIT(1),')      COL(MACCOL+2);                           
*    ANS(Comment('System has expanded storage')) COL(37);                       
*    ANS('5 '!!PF!!'CNE BIT(1),')      COL(MACCOL+2);                           
*    ANS(Comment('Equipped with ESCON channel')) COL(37);                       
*    ANS('5 '!!PF!!'DRC BIT(1),')      COL(MACCOL+2);                           
*    ANS(Comment('ESCON Director in configuration')) COL(37);                   
*    ANS('5 '!!PF!!'EME BIT(1),')      COL(MACCOL+2);                           
*    ANS(Comment('System in z/ARCH mode @I1A')) COL(37);                        
*    ANS('5 '!!PF!!'PRX BIT(1),')      COL(MACCOL+2);                           
*    ANS(Comment('Reserved for future use @92C')) COL(37);    /* @92C*/         
*    ANS('7 '!!PF!!'PRI BIT(1),')      COL(MACCOL+4);                           
*    ANS(Comment('At least one zAAP is currently installed @92C'))              
*                                      COL(37);               /* @92C*/         
*    ANS('5 '!!PF!!'PRP BIT(1),')      COL(MACCOL+2);                           
*    ANS(Comment('At least one zIIP is currently installed @22C'))              
*                                      COL(37);                                 
*    ANS('5 '!!PF!!'PED BIT(1),')      COL(MACCOL+2);                           
*    ANS(Comment('Enhanced DAT facility 1 @81C')) COL(37);                      
*    ANS('5 '!!PF!!'PE2 BIT(1),')      COL(MACCOL+2);                           
*    ANS(Comment('Enhanced DAT facility 2 @81A')) COL(37);                      
*    ANS('3 '!!PF!!'PTN CHAR(1),')     COL(MACCOL);                             
*    ANS(Comment('PR/SM partition number')) COL(37);                            
*    ANS('3 '!!PF!!'SRL FIXED(8),')    COL(MACCOL);                             
*    ANS(Comment('SMF record level'))  COL(37);                                 
*    ANS('3 '!!PF!!'IET CHAR(8),')     COL(MACCOL);                             
*    ANS(Comment('Interval expiration time token')) COL(37);                    
*    ANS('3 '!!PF!!'LGO CHAR(8),')     COL(MACCOL);                             
*    ANS(Comment('Offset GMT to local time')) COL(37);                          
*    ANS('3 '!!PF!!'RAO FIXED(31),')   COL(MACCOL);                             
*    ANS(Comment('Offset to reassembly area relative to start of RMF '          
*            !!  'product section'))   COL(37);                                 
*    ANS('3 '!!PF!!'RAL FIXED(15),')   COL(MACCOL);                             
*    ANS(Comment('Length of reassembly area. Area consists of '                 
*            !!  'a fixed header and a variable number of '                     
*            !!  'information blocks. Length depends on the '                   
*            !!  'record type/subtype, but is fixed for a '                     
*            !!  'specific type/subtype')) COL(37);                             
*    ANS('3 '!!PF!!'RAN FIXED(15),')   COL(MACCOL);                             
*    ANS(Comment('Number of reassembly area. This field is used '               
*            !!  'to indicate whether SMF record is broken. If 0, '             
*            !!  'record is not broken. If 1, record is broken. '               
*            !!  'Offset and length are only valid if SMFxxRAN '                
*            !!  'is 1. Reassembly area is only present in broken '             
*            !!  'records.'))          COL(37);                                 
*    ANS('3 '!!PF!!'OIL FIXED(15),')   COL(MACCOL);                             
*    ANS(Comment('Original interval length as defined in the '                  
*            !!  'session or by SMF (in seconds)'))  COL(37);                   
*                                                         /* @OA62081*/         
*    ANS('3 '!!PF!!'SYN FIXED(15),')   COL(MACCOL);                             
*    ANS(Comment('SYNC value in seconds')) COL(37);                             
*    ANS('3 '!!PF!!'GIE CHAR(8),')     COL(MACCOL);                             
*    ANS(Comment('Projected gathering interval end GMT time '                   
*            !!  '(STCK format)'))     COL(37);                                 
*    ANS('3 '!!PF!!'XNM CHAR(8),')     COL(MACCOL);                             
*    ANS(Comment('Sysplex name as defined in ECVTSPLX')) COL(37);               
*    ANS('3 '!!PF!!'SNM CHAR(8)')      COL(MACCOL);                             
*    ANS(Comment('System name for current system as defined '                   
*            !!  'in CVTSNAME'))       COL(37);                                 
*                                                                               
*    IF  SUBSTR(1) ^= 'YES' THEN DO;/* SKIP declares             @C2A*/         
*                                                                               
*      ANS(';') SKIP;               /* End of previous structure @C2A*/         
*      ANS('DCL 1 '!!PF!!'RHD Based(Addr('!!PF!!'PRO)+'!!PF!!'RAO),')           
*                                      COL(MACCOL);                             
*      ANS('3 '!!PF!!'RBR FIXED(15),') COL(MACCOL);                             
*      ANS(Comment('Total number of broken records built from '                 
*              !!  'the original large record')) COL(37);                       
*      ANS('3 '!!PF!!'RSQ FIXED(15),') COL(MACCOL);                             
*      ANS(Comment('Sequence number of this broken record. Every '              
*              !!  'broken record built from the same large '                   
*              !!  'record must have a unique sequence number. '                
*              !!  'Broken records with sequence numbers from 1 '               
*              !!  'to SMFxxRBR must exist.')) COL(37);                         
*      ANS('3 '!!PF!!'RIO FIXED(31),') COL(MACCOL);                             
*      ANS(Comment('Offset to first reassembly information block '              
*              !!  'relative to start of reassembly area header'))              
*                                      COL(37);                                 
*      ANS('3 '!!PF!!'RIL FIXED(15),') COL(MACCOL);                             
*      ANS(Comment('Length of reassembly information block')) COL(37);          
*      ANS('3 '!!PF!!'RIN FIXED(15),') COL(MACCOL);                             
*      ANS(Comment('Number of reassembly information blocks ' !!                
*                  '(same as SMFxxTRN in heder section)')) COL(37);             
*      ANS('3 * FIXED(31);')           COL(MACCOL);                             
*      ANS(Comment('Reserved'))        COL(37);                                 
*                                                                               
*      ANS('DCL 1 '!!PF!!'RBL Based(Addr('!!PF!!'RHD)+'!!PF!!'RIO),')           
*                                      COL(MACCOL);                             
*      ANS('3 '!!PF!!'RNN FIXED(16),') COL(MACCOL);                             
*      ANS(Comment('Total number of sections in the original large '            
*              !!  'record. This field contains information how many '          
*              !!  'sections of a specific type were contained in the '         
*              !!  'original SMF record. This field is a copy of the '          
*              !!  'number field of the triplet in the original non-'           
*              !!  'broken record @WA55906')) COL(37);                          
*      ANS('3 '!!PF!!'RPP FIXED(16);') COL(MACCOL);                             
*      ANS(Comment('Position of the 1st of one or more consecutive '            
*              !!  'sections described by this block as in the '                
*              !!  'original record. Values in the range of 1 to '              
*              !!  'SMFxxRNN are valid for correct processing. '                
*              !!  'A value of 0 will skip processing of this '                 
*              !!  'information block. This field provides '                    
*              !!  'information where the sections that are part of '           
*              !!  'this broken record were placed in the original'             
*              !!  'record before the split took place. The actual '            
*              !!  'number of consecutive sections contained in '               
*              !!  'this record is available from the actual '                  
*              !!  'triplet in the header extension')) COL(37);                 
*    END;                                                     /* @C2A*/         
*    ELSE ANS(',') SKIP;            /* Continue structure        @C2C*/         
*/************** END OF PL/AS PART ***********************************/         
*%END;                                                                          
