         MACRO                                                          00050000
&NAME    NIL   &BYTE,&MASK,&REF=,&WREGS=(0,1,2)                         00100000
.*             AND IMMEDIATE LOCKED                                     00150000
.*             04/26/72, LEVEL=1                                        00200000
.*                                                                      00204500
.*01* PROPRIETARY STATEMENT:                                            00209000
.*                                                                      00213500
.*     LICENSED MATERIALS - PROPERTY OF IBM                             00218000
.*     5694-A01 COPYRIGHT IBM CORP. 1977, 2008                          00222500
.*                                                                      00227000
.* STATUS= HBB7750                                                      00231500
.*                                                                      00236000
.*01* EXTERNAL CLASSIFICATION: PI                                       00240500
.*01* END OF EXTERNAL CLASSIFICATION:                                   00245000
.*                                                                      00250000
.*       This macro is used in a multiprocessing environment to    @L2A 00300000
.*       provide a lock on a word containing the byte which is the @L2A 00350000
.*       target of an NI instruction.                              @L2A 00400000
.*                                                                      00450000
.*       &BYTE      Symbol naming the byte to which the and        @L2A 00500000
.*                  immediate function is to be applied.           @L2A 00550000
.*                                                                 @L2A 00560000
.*       &MASK      A one-byte self-defining term or symbol        @L2A 00600000
.*                  equated to such a term which specifies a mask  @L2A 00610000
.*                  as in immediate operand of NI instruction.     @L2A 00650000
.*                                                                 @L2A 00700000
.*       &REF       Label of a full word in storage. address of    @L2A 00750000
.*                  ref label must be less than or equal to that   @L2A 00800000
.*                  of byte (first operand).  Label must be        @L2A 00850000
.*                  addressable when the macro is issued, and      @L2A 00900000
.*                  USING must have been @ issued on a full-word   @L2A 00950000
.*                  label.                                         @L2A 00960000
.*                                                                 @L2A 00970000
.* NOTE  &BYTE, &MASK AND &REF must be specified on macro call.    @L2A 01000000
.*       &WREGS     Decimal numbers or symbols equated to decimal  @L2A 01050000
.*                  numbers of three or four work registers to be  @L2A 01100000
.*                  used by this macro.  Registers 0, 1 and 2 are  @L2A 01106000
.*                  defaults.  There is no default for the fourth  @L2A 01113000
.*                  register.                                      @L2A 01120000
.*                                                                 @L2A 01127000
.*                  If work registers (WREGS) are provided they    @L2A 01134000
.*                  must follow these rules:                       @L2A 01141000
.*                                                                 @L2A 01150000
.*                  o The second work register must not be 0       @L2A 01200000
.*                    because it is used in an execute             @L2A 01204000
.*                    instruction.                                 @L2A 01208000
.*                                                                 @L2A 01212000
.*                  o The first three work registers must be       @L2A 01216000
.*                    unique.  The first work register cannot be   @L2A 01220000
.*                    equal to the second or third work            @L2A 01224000
.*                    registers.  The second work register         @L2A 01228000
.*                    cannot be equal to the third work            @L2A 01232000
.*                    register.                                    @L2A 01236000
.*                                                                 @L2A 01240000
.*                  o A fourth register, if provided is used to    @L2A 01250000
.*                    set a local base. The fourth register must   @L2A 01251000
.*                    not be equal to the second or third          @L2A 01254000
.*                    register.  The fourth register cannot have a @L2A 01257000
.*                    value of zero.                               @L2A 01260000
.*                                                                 @L2A 01263000
.*        When control returns to the caller, the GPRs are         @L2A 01266000
.*        unchanged except for the three work registers that are   @L2A 01269000
.*        used by the system. If WREGS is not specified,           @L2A 01272000
.*        these will be registers 0-2.  If a fourth work register  @L2A 01275000
.*        is specified, it will also be used by the system.        @L2A 01278000
.*                                                                 @L2A 01281000
.*        WREGS(1) is used to contain the "old" byte; WREGS(2) is  @L2A 01284000
.*        used to contain the "updated" byte; and WREGS(3) is      @L2A 01287000
.*        used to contain the mask.                                @L2A 01290000
.*                                                                 @L2A 01293000
.* CHANGE-ACTIVITY =                                               @L2A 01294000
.* $L2=ME11173 HBB7750 070915 PDJK_1: improve error checking            01295002
.*                                                                      01296000
         LCLC  &XREGS(3)      FOR WREGS VALUES                          01300000
         LCLC  &X(4)          Also for WREGS values                @L2A 01304000
         LCLC  &LABEL         Manage label                         @L2A 01308000
         GBLC  &SYSASCE       ASCENV                               @L2A 01312000
         GBLA  &SYSALVL       ARCH LEVEL                           @L1A 01316600
         SYSSTATE TEST                                             @L1A 01333200
         AIF   (N'&WREGS LE 4).NIL05                               @L2A 01335000
         MNOTE 0,'Fifth and later registers for WREGS ignored'     @L2A 01340000
.NIL05   AIF   ('&BYTE' NE '').NIL10    BRANCH IF BYTE SPECIFIED   @L2A 01350000
         IHBERMAC 1006,BYTE   BYTE REQUIRED BUT NOT SPECIFIED           01400000
         MEXIT                                                          01450000
.NIL10   AIF   ('&MASK' NE '').NIL20    BRANCH IF MASK SPECIFIED        01500000
         IHBERMAC 1006,MASK   MASK REQUIRED BUT NOT SPECIFIED           01550000
         MEXIT                                                          01600000
.NIL20   AIF   ('&REF' NE '').NIL30     BRANCH IF REF SPECIFIED         01650000
         IHBERMAC 1006,REF    REF REQUIRED BUT NOT SPECIFIED            01700000
         MEXIT                                                          01750000
.NIL30   AIF   ('&WREGS(1)' NE '').NIL35 BRANCH IF FIRST REG SPECIFIED  01800000
&XREGS(1) SETC '0'            USE REGISTER 0 AS DEFAULT                 01850000
         AGO   .NIL40                                                   01900000
.NIL35   ANOP                                                           01950000
&XREGS(1) SETC '&WREGS(1)'                                              02000000
.NIL40   AIF   ('&WREGS(2)' NE '').NIL45 BRANCH IF SECOND REG SPECIFIED 02050000
&XREGS(2) SETC '1'            USE REGISTER 1 AS DEFAULT                 02100000
         AGO   .NIL50                                                   02150000
.NIL45   ANOP                                                           02200000
&XREGS(2) SETC '&WREGS(2)'                                              02250000
.NIL50   AIF   ('&WREGS(3)' NE '').NIL55 BRANCH IF THIRD REG SPECIFIED  02300000
&XREGS(3) SETC '2'            USE REGISTER 2 AS DEFAULT                 02350000
         AGO   .NIL60                                                   02400000
.NIL55   ANOP                                                           02450000
&XREGS(3) SETC '&WREGS(3)'                                              02500000
.NIL60   ANOP  ,              ALL OPERANDS SPECIFIED                    02550000
&X(1)    SETC  '&XREGS(1)'                                         @L2A 02552000
&X(2)    SETC  '&XREGS(2)'                                         @L2A 02560000
&X(3)    SETC  '&XREGS(3)'                                         @L2A 02575000
         AIF   ('&WREGS(4)' EQ '').NIL65                           @L2A 02576000
&X(4)    SETC  '&WREGS(4)'                                         @L2A 02584000
.NIL65   ANOP                                                      @L2A 02600000
.*                                                                 @L2A 02610000
.****************************************************************  @L2A 02620000
.*                                                              *  @L2A 02630000
.*       Verify proper register usage                           *  @L2A 02640000
.*                                                              *  @L2A 02650000
.****************************************************************  @L2A 02660000
.*                                                                 @L2A 02670000
         PUSH  PRINT,NOPRINT                                       @L2A 02680000
         PRINT NOGEN,NOPRINT                                       @L2A 02690000
         AIF   ('&X(2)' NE '0').VER0100                            @L2A 02700000
         MNOTE 8,'WREGS specification error - second register specifiedC02704000
                for WREGS has a value of zero'                     @L2A 02712000
         AGO   .VER0200                                            @L2A 02720000
.*                                                                 @L2A 02728000
.VER0100 ANOP                                                      @L2A 02736000
 DC 0S(&X(2)-1) If error, WREGS(2) is zero                         @L2A 02750000
.*                                                                 @L2A 02752000
.VER0200 AIF   ('&X(2)' NE '&X(3)').VER0300                        @L2A 02760000
         MNOTE 8,'WREGS specification error - second WREGS (&X(2)) cannC02768000
               ot have a value equal to the third WREGS (&X(3))'   @L2A 02776000
         AGO   .VER0400                                            @L2A 02784000
.*                                                                 @L2A 02800000
.VER0300 ANOP                                                      @L2A 02808000
 DC 0S(((&X(2))-(&X(3)))/((&X(2))-(&X(3)))-1) If err, WREGS(2)=WREGS(3) 02817000
*                If you get an assembly error on this statement,   @L2AC02826000
                   the second register specified for WREGS has the @L2AC02835000
                   same value as the third register specified      @L2AC02850000
                   for WREGS (not allowed)                         @L2A 02856000
.*                                                                 @L2A 02864000
.VER0400 ANOP                                                      @L2A 02872000
         AIF   ('&X(2)' NE '&X(1)').VER0500                        @L2A 02880000
         MNOTE 8,'WREGS specification error - second WREGS (&X(2)) cannC02888000
               ot have a value equal to the first WREGS (&X(1))'   @L2A 02900000
         AGO   .VER0600                                            @L2A 02907000
.*                                                                 @L2A 02916000
.VER0500 ANOP                                                      @L2A 02925000
 DC 0S(((&X(2))-(&X(1)))/((&X(2))-(&X(1)))-1) If err, WREGS(2)=WREGS(1) 02934000
*                If you get an assembly error on this statement,   @L2AC02950000
                   the second register specified for WREGS has the @L2AC02952000
                   same value as the first register specified      @L2AC02960000
                   for WREGS (not allowed)                         @L2A 02968000
.*                                                                 @L2A 02976000
.VER0600 ANOP                                                           02984000
         AIF   ('&X(3)' NE '&X(1)').VER0700                        @L2A 03000000
         MNOTE 8,'WREGS specification error - third WREGS (&X(3)) cannoC03006000
               t have a value equal to the first WREGS (&X(1))'    @L2A 03015000
         AGO   .VER0800                                            @L2A 03024000
.*                                                                 @L2A 03033000
.VER0700 ANOP                                                      @L2A 03050000
 DC 0S(((&X(3))-(&X(1)))/((&X(3))-(&X(1)))-1) If err, WREGS(3)=WREGS(1) 03060000
*                If you get an assembly error on this statement,   @L2AC03070000
                   the third register specified for WREGS has the  @L2AC03080000
                   same value as the first register specified      @L2AC03090000
                   for WREGS (not allowed)                         @L2A 03100000
.*                                                                 @L2A 03110000
.VER0800 AIF   ('&X(4)' EQ '').VER2000                             @L2A 03120000
         AIF   ('&X(4)' NE '0').VER0900                            @L2A 03130000
         MNOTE 8,'WREGS specification error - fourth register specifiedC03140000
                for WREGS has a value of zero'                     @L2A 03150000
         AGO   .VER2000                                            @L2A 03160000
.*                                                                 @L2A 03170000
.VER0900 ANOP                                                      @L2A 03180000
 DC 0S(&X(4)-1) If error, WREGS(4) is zero                         @L2A 03190000
.*                                                                 @L2A 03200000
         AIF   ('&X(4)' NE '&X(2)' AND '&X(4)' NE '&X(3)').VER1000 @L2A 03210000
         MNOTE 8,'WREGS specification error - fourth WREGS (&X(4)) cannC03220000
               ot have a value equal to the value of the second WREGS (C03230000
               &X(2)) or the value of the third WREGS (&X(3))'     @L2A 03240000
         AGO   .VER2000                                            @L2A 03250000
.*                                                                 @L2A 03260000
.VER1000 ANOP                                                      @L2A 03270000
 DC 0S(((&X(2))-(&X(4)))/((&X(2))-(&X(4)))-1) If err, WREGS(2)=WREGS(4) 03280000
*                If you get an assembly error on this statement,   @L2AC03290000
                   the second WREGS register (&X(2)) has the same  @L2AC03300000
                   value as the fourth WREGS register (&X(4))      @L2AC03310000
                   which is not allowed                            @L2A 03320000
 DC 0S(((&X(3))-(&X(4)))/((&X(3))-(&X(4)))-1) If err, WREGS(3)=WREGS(4) 03330000
*                If you get an assembly error on this statement,   @L2AC03340000
                   the third WREGS register (&X(3)) has the same   @L2AC03350000
                   value as the fourth WREGS register (&X(4))      @L2AC03360000
                   which is not allowed                            @L2A 03370000
.*                                                                 @L2A 03380000
.VER2000 POP   PRINT,NOPRINT                                       @L2A 03390000
.*                                                                 @L2A 03400000
&LABEL   SETC  '&NAME'                                             @L2A 03410000
&BY      SETC  'BY&SYSNDX'                                         @L2A 03420000
&IC      SETC  'IC&SYSNDX'                                         @L2A 03430000
&LA      SETC  'LA&SYSNDX'                                         @L2A 03440000
&LR      SETC  'LR&SYSNDX'                                         @L2A 03450000
         AIF   ('&WREGS(4)' NE '').RELB                            @L2A 03460000
&LABEL   J     &LA                Branch to LA instruction         @L2A 03470000
&LABEL   SETC  ''                                                  @L2A 03480000
         AGO   .RELC                                               @L2A 03500000
.*                                                                 @L2A 03550000
.****************************************************************  @L2A 03575000
.*       Support 4th WREGS                                      *  @L2A 03600000
.****************************************************************  @L2A 03601400
.*                                                                 @L2A 03602800
.RELB    AIF   ('&SYSASCE' EQ 'P').RELB200                         @L2A 03605600
&LABEL   LAE   &WREGS(4),0         Ensure AR zero                  @L2A 03607000
&LABEL   SETC  ''                                                  @L2A 03608400
.RELB200 ANOP                                                      @L2A 03608800
&LABEL   JAS   &WREGS(4),&LA       Branch to LA instruction        @L2A 03609200
         PUSH  USING                                                    03609800
         DROP  ,                                                        03611200
         USING *,&WREGS(4)                                              03612600
.*                                                                 @L2A 03612800
.****************************************************************  @L2A 03613000
.*       Common path (4th WREGS or not)                         *  @L2A 03613200
.****************************************************************  @L2A 03613400
.*                                                                 @L2A 03613600
.RELC    ANOP                                                      @L2A 03613800
&BY      DC    2AL1(&MASK)         Half word of mask bytes         @L2A 03614000
&IC      ICM   &XREGS(3),0,&BY     Insert mask byte in register    @L2A 03615400
&LA      LA    &XREGS(2),1(0,0)    Load one in register for use    @L2A-03616801
                                   in setting up mask register     @L2A 03618200
         LNR   &XREGS(3),&XREGS(2) Set register to all ones        @L2A 03619600
         SLL   &XREGS(2),3-((&BYTE-&REF)-(((&BYTE-&REF)/4)*4))(0)  @L2A-03621001
                                   Shift the one to proper         @L2A-03622401
                                   position for 4-bit mask for     @L2A-03623801
                                   ICM instruction                 @L2A 03625200
         EX    &XREGS(2),&IC       Execute ICM instruction to put  @L2A-03626601
                                   mask byte in proper position in @L2A-03628001
                                   register with all ones          @L2A 03629400
         AIF   ('&WREGS(4)' EQ '').RELD                            @L2A 03630800
         POP   USING                                                    03632200
.RELD    L     &XREGS(1),&REF+(((&BYTE-&REF)/4)*4)                 @L2A-03632401
                                   Load word containing byte to    @L2A-03632701
                                   be set                          @L2A 03633000
&LR      LR    &XREGS(2),&XREGS(1) Load word containing byte to    @L2A-03633601
                                   be set                          @L2A 03635000
         NR    &XREGS(2),&XREGS(3) And mask into byte in register. @L2A-03637801
                                   Use compare and swap to store   @L2A-03639201
                                   updated register in storage if  @L2A-03640601
                                   storage word was not modified   @L2A 03642000
         CS    &XREGS(1),&XREGS(2),&REF+(((&BYTE-&REF)/4)*4)            03644800
         JNE   &LR                 Do again from LR if word was    @L2A-03644901
                                   modified                        @L2A 03646200
         MEND                                                           03650000
