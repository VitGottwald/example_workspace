*%IEEQEMCS: MACRO KEYS(REQUEST,STATUS,BKLG_NUM,CN,SYS,KEY,AUTH,ATTR,    00000100
*                 DOM,BUFPTR,BUFSIZE,CONSCNT,TOKEN,RECSIZE,RETCODE,     00000200
*                 RSNCODE,PLISTVER,MF);                                 00000300
*/**** START OF SPECIFICATIONS **************************************** 00000400
*                                                                     * 00000500
*                                                                     * 00000600
*01* MACRO NAME:  IEEQEMCS                              -04/28/07-<1> * 00000700
*                                                                     * 00000800
*                                                                     * 00000900
*01* DESCRIPTIVE NAME:  Query EMCS Console                            * 00001000
*                                                                     * 00001100
*01* PROPRIETARY STATEMENT:                                           * 00001200
*                                                                     * 00001300
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00001400
*     5694-A01 COPYRIGHT IBM CORP. 1999, 2006                         * 00001500
*                                                                     * 00001600
* STATUS= HBB7730                                                     * 00001700
*                                                                     * 00001800
*                                                                     * 00001900
*                                                                     * 00002000
*01* FUNCTION:                                                        * 00002100
*                                                                     * 00002200
*      This macro returns the state of any EMCS consoles in the       * 00002300
*      system.                                                        * 00002400
*                                                                     * 00002500
*01* EXTERNAL CLASSIFICATION:  PI                                     * 00002600
*                                                                     * 00002700
*01* END OF EXTERNAL CLASSIFICATION:                                  * 00002800
*                                                                     * 00002900
*01* ENVIRONMENT:                                                     * 00003000
*                                                                     * 00003100
*                                                                     * 00003200
*      Minimum authorization: Supervisor state.  System PSW key.      * 00003300
*                                                                     * 00003400
*      Dispatchable unit mode: Task mode.                             * 00003500
*                                                                     * 00003600
*      Cross Memory Mode: Any PASN, any HASN, any SASN.               * 00003700
*                                                                     * 00003800
*      AMODE:            31-bit.                                      * 00003900
*                                                                     * 00004000
*      ASC mode:         Primary.                                     * 00004100
*                                                                     * 00004200
*      Interrupt status: Enabled for I/O and external interrupts.     * 00004300
*                                                                     * 00004400
*      Locks:            No locks held.                               * 00004500
*                                                                     * 00004600
*      Control parameters: Control parameters must be in the primary  * 00004700
*                        address space.                               * 00004800
*                                                                     * 00004900
*                                                                     * 00005000
*                                                                     * 00005100
*01* PROGRAMMING REQUIREMENTS:                                        * 00005200
*                                                                     * 00005300
*    The calling program may include mapping macro IEEZB887 which can * 00005400
*    be used to map the information which is returned in the buffer   * 00005500
*    addressed by BUFPTR.                                             * 00005600
*                                                                     * 00005700
*    The calling program may also optionally include macro IEEZB888   * 00005800
*    which contains the declarations for the reason and return codes  * 00005900
*    used by IEEQEMCS.                                                * 00006000
*                                                                     * 00006100
*01* RESTRICTIONS:                                                    * 00006200
*                                                                     * 00006300
*    None.                                                            * 00006400
*                                                                     * 00006500
*01* INPUT REGISTER INFORMATION:                                      * 00006600
*                                                                     * 00006700
*    Before issuing the IEEQEMCS macro, the caller does not have to   * 00006800
*    place any information into any register unless using it in       * 00006900
*    register notation for a particular parameter, or using it as a   * 00007000
*    base register.                                                   * 00007100
*                                                                     * 00007200
*01* OUTPUT REGISTER INFORMATION:                                     * 00007300
*                                                                     * 00007400
*     When control returns to the caller, the GPRs contain:           * 00007500
*                                                                     * 00007600
*                                                                     * 00007700
*    REGISTER  CONTENTS                                               * 00007800
*                                                                     * 00007900
*    0         Reason code                                            * 00008000
*                                                                     * 00008100
*    1         Used as a work register by the system                  * 00008200
*                                                                     * 00008300
*    2-13      Unchanged                                              * 00008400
*                                                                     * 00008500
*    14        Used as a work register by the system                  * 00008600
*                                                                     * 00008700
*    15        Return code                                            * 00008800
*                                                                     * 00008900
*                                                                     * 00009000
*                                                                     * 00009100
*     When control returns to the caller, the ARs contain:            * 00009200
*                                                                     * 00009300
*                                                                     * 00009400
*    REGISTER  CONTENTS                                               * 00009500
*                                                                     * 00009600
*    0-1       Used as work registers by the system                   * 00009700
*                                                                     * 00009800
*    2-13      Unchanged                                              * 00009900
*                                                                     * 00010000
*    14-15     Used as work registers by the system                   * 00010100
*                                                                     * 00010200
*                                                                     * 00010300
*                                                                     * 00010400
*    Some callers depend on register contents remaining the same      * 00010500
*    before and after issuing a service.  If the system changes the   * 00010600
*    contents of registers on which the caller depends, the caller    * 00010700
*    must save them before issuing the service, and restore them      * 00010800
*    after the system returns control.                                * 00010900
*                                                                     * 00011000
*01* PERFORMANCE IMPLICATIONS:                                        * 00011100
*                                                                     * 00011200
*    If REQUEST=FULL is specified, the service must read the          * 00011300
*    dataspace of each console being reported on.  Depending on the   * 00011400
*    number of consoles, this can degrade performance of the service. * 00011500
*                                                                     * 00011600
*01* SYNTAX:                                                          * 00011700
*                                                                     * 00011800
*Ýxlabel¨  IEEQEMCS   Ý REQUEST=»COUNT!SUMMARY!INFO!FULLº¨            * 00011900
*                     Ý,STATUS=»ACTIVE!INACTIVE!ALL!BACKLOG!ERRº¨     * 00012000
*                     Ý,BKLG_NUM=»xbklg_num!10º¨                      * 00012100
*                     Ý,CN=»xcn!ANY_CONSº¨                            * 00012200
*                     Ý,SYS=»xsys!ANY_SYSº¨                           * 00012300
*                     Ý,KEY=»xkey!ANY_KEYº¨                           * 00012400
*                     Ý,AUTH=»ANY!MASTER!SYS!IO!CONS!ALL!INFO!        * 00012500
*                             SYSONLY!IOONLY!CONSONLY!ALLONLY!        * 00012600
*                             INFOONLYº¨                              * 00012700
*                     Ý,ATTR=»ANY!YES!ROUT!HC!AUTO!AUTON!MN!NONE!     * 00012800
*                             INTIDS!UNKNIDSº¨                        * 00012900
*                     Ý,DOM=»ANY!YES!NORMAL!ALL!NONEº¨                * 00013000
*                     Ý,BUFPTR=»xbufptr!0º                            * 00013100
*                          ,BUFSIZE=xbufsize¨                         * 00013200
*                     Ý,CONSCNT=»xconscnt!0º¨                         * 00013300
*                     Ý,TOKEN=»xtoken!0º                              * 00013400
*                          ,RECSIZE=xrecsize¨                         * 00013500
*                     Ý,RETCODE=xretcode¨                             * 00013600
*                     Ý,RSNCODE=xrsncode¨                             * 00013700
*                     Ý,PLISTVER=»xplistver!IMPLIED_VERSIONº¨         * 00013800
*                    Ð ,MF=(E,xmfctrl»,COMPLETE!NOCHECKº)             * 00013900
*                    Ô ,MF=(L,xmfctrl»,xmfattr!0Dº)                   * 00014000
*                    ¿ ,MF=(M,xmfctrl»,COMPLETE!NOCHECKº)             * 00014100
*                                                                     * 00014200
*                                                                     * 00014300
*      Where:                                                         * 00014400
*                                                                     * 00014500
*                                                                     * 00014600
*      Ýxlabel¨                                                       * 00014700
*          is an optional symbol, starting in column 1, that is the   * 00014800
*          name on the IEEQEMCS macro invocation.  The name must      * 00014900
*          conform to the rules for an ordinary assembler language    * 00015000
*          symbol.                                                    * 00015100
*          DEFAULT: No name.                                          * 00015200
*                                                                     * 00015300
*                                                                     * 00015400
*                                                                     * 00015500
*                                                                     * 00015600
*      ÝREQUEST(»COUNT!SUMMARY!INFO!FULLº)¨                           * 00015700
*          is an optional keyword input that indicates the type of    * 00015800
*          information request.                                       * 00015900
*          DEFAULT: COUNT                                             * 00016000
*                                                                     * 00016100
*                                                                     * 00016200
*          REQUEST(COUNT)                                             * 00016300
*              Return only the number of EMCS consoles meeting the    * 00016400
*              search criteria.                                       * 00016500
*                                                                     * 00016600
*          REQUEST(SUMMARY)                                           * 00016700
*              Return the number and names of the consoles that meet  * 00016800
*              the search criteria.                                   * 00016900
*                                                                     * 00017000
*          REQUEST(INFO)                                              * 00017100
*              Return the number, names, and console data             * 00017200
*              information, but no message dataspace statistics for   * 00017300
*              the consoles meeting the search criteria.              * 00017400
*                                                                     * 00017500
*          REQUEST(FULL)                                              * 00017600
*              Return the number, names, console data information,    * 00017700
*              and message dataspace statistics for the consoles      * 00017800
*              meeting the search criteria.                           * 00017900
*                                                                     * 00018000
*                                                                     * 00018100
*                                                                     * 00018200
*                                                                     * 00018300
*                                                                     * 00018400
*                                                                     * 00018500
*      ÝSTATUS(»ACTIVE!INACTIVE!ALL!BACKLOG!ERRº)¨                    * 00018600
*          is an optional keyword input that indicates the status of  * 00018700
*          the EMCS consoles to be returned.                          * 00018800
*          DEFAULT: ACTIVE                                            * 00018900
*                                                                     * 00019000
*                                                                     * 00019100
*          STATUS(ACTIVE)                                             * 00019200
*              Return only active consoles.                           * 00019300
*                                                                     * 00019400
*          STATUS(INACTIVE)                                           * 00019500
*              Return only inactive consoles.                         * 00019600
*                                                                     * 00019700
*          STATUS(ALL)                                                * 00019800
*              Return both active and inactive consoles.              * 00019900
*                                                                     * 00020000
*          STATUS(BACKLOG)                                            * 00020100
*              Return consoles with un-retrieved messages.  The       * 00020200
*              minimum number of unretrieved messages a console must  * 00020300
*              have to be returned can be specified with the BKLG_NUM * 00020400
*              keyword.                                               * 00020500
*                                                                     * 00020600
*          STATUS(ERR)                                                * 00020700
*              Return only EMCS consoles in an error condition.       * 00020800
*                                                                     * 00020900
*                                                                     * 00021000
*                                                                     * 00021100
*                                                                     * 00021200
*                                                                     * 00021300
*                                                                     * 00021400
*      ÝBKLG_NUM(»xbklg_num!10º)¨                                     * 00021500
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00021600
*          only) of an optional fullword input that indicates the     * 00021700
*          minimum number of un-retrieved messages a console must     * 00021800
*          have for it to be returned on a STATUS(BACKLOG) call.      * 00021900
*          DEFAULT: 10                                                * 00022000
*                                                                     * 00022100
*                                                                     * 00022200
*                                                                     * 00022300
*                                                                     * 00022400
*      ÝCN(»xcn!ANY_CONSº)¨                                           * 00022500
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00022600
*          only) of an optional 8 character input that indicates a    * 00022700
*          console name to search for.  The name may be wildcarded.   * 00022800
*          DEFAULT: ANY_CONS                                          * 00022900
*                                                                     * 00023000
*                                                                     * 00023100
*                                                                     * 00023200
*                                                                     * 00023300
*      ÝSYS(»xsys!ANY_SYSº)¨                                          * 00023400
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00023500
*          only) of an optional 8 character input that indicates the  * 00023600
*          system name where the console was last activated.  This    * 00023700
*          may be wildcarded.                                         * 00023800
*          DEFAULT: ANY_SYS                                           * 00023900
*                                                                     * 00024000
*                                                                     * 00024100
*                                                                     * 00024200
*                                                                     * 00024300
*      ÝKEY(»xkey!ANY_KEYº)¨                                          * 00024400
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00024500
*          only) of an optional 8 character input that indicates the  * 00024600
*          KEY that was used to activate the console.  It may be      * 00024700
*          wildcarded.                                                * 00024800
*          DEFAULT: ANY_KEY                                           * 00024900
*                                                                     * 00025000
*                                                                     * 00025100
*                                                                     * 00025200
*                                                                     * 00025300
*      ÝAUTH(»ANY!MASTER!SYS!IO!CONS!ALL!INFO!SYSONLY!IOONLY!CONSONLY * 00025400
*          !ALLONLY!INFOONLYº)¨                                       * 00025500
*          is an optional keyword input that indicates console        * 00025600
*          command authority.                                         * 00025700
*          DEFAULT: ANY                                               * 00025800
*                                                                     * 00025900
*                                                                     * 00026000
*          AUTH(ANY)                                                  * 00026100
*              Return consoles with any authority.                    * 00026200
*                                                                     * 00026300
*          AUTH(MASTER)                                               * 00026400
*              Return consoles with MASTER authority only.            * 00026500
*                                                                     * 00026600
*          AUTH(SYS)                                                  * 00026700
*              Return consoles with SYS authority or MASTER           * 00026800
*              authority.                                             * 00026900
*                                                                     * 00027000
*          AUTH(IO)                                                   * 00027100
*              Return consoles with IO authority or MASTER authority. * 00027200
*                                                                     * 00027300
*          AUTH(CONS)                                                 * 00027400
*              Return consoles with CONS authority or MASTER          * 00027500
*              authority.                                             * 00027600
*                                                                     * 00027700
*          AUTH(ALL)                                                  * 00027800
*              Return consoles with IO, SYS, and CONS authority, or   * 00027900
*              MASTER authority.                                      * 00028000
*                                                                     * 00028100
*          AUTH(INFO)                                                 * 00028200
*              Return consoles with INFO, IO, SYS, CONS, or MASTER    * 00028300
*              authority.                                             * 00028400
*                                                                     * 00028500
*          AUTH(SYSONLY)                                              * 00028600
*              Return consoles with SYS authority only.               * 00028700
*                                                                     * 00028800
*          AUTH(IOONLY)                                               * 00028900
*              Return consoles with IO authority only.                * 00029000
*                                                                     * 00029100
*          AUTH(CONSONLY)                                             * 00029200
*              Return consoles with CONS authority only.              * 00029300
*                                                                     * 00029400
*          AUTH(ALLONLY)                                              * 00029500
*              Return consoles with IO, SYS, and CONS authority only. * 00029600
*                                                                     * 00029700
*          AUTH(INFOONLY)                                             * 00029800
*              Return consoles with INFO authority only.              * 00029900
*                                                                     * 00030000
*                                                                     * 00030100
*                                                                     * 00030200
*                                                                     * 00030300
*                                                                     * 00030400
*                                                                     * 00030500
*      ÝATTR(»ANY!YES!ROUT!HC!AUTO!AUTON!MN!NONE!INTIDS!UNKNIDSº)¨    * 00030600
*          is an optional keyword input that indicates routing        * 00030700
*          attributes of the console.                                 * 00030800
*          DEFAULT: ANY                                               * 00030900
*                                                                     * 00031000
*                                                                     * 00031100
*          ATTR(ANY)                                                  * 00031200
*              Return consoles regardless of routing attributes.      * 00031300
*                                                                     * 00031400
*          ATTR(YES)                                                  * 00031500
*              Return consoles that are receiving some type of        * 00031600
*              undelivered messages.                                  * 00031700
*                                                                     * 00031800
*          ATTR(ROUT)                                                 * 00031900
*              Return consoles receiving any routing codes.           * 00032000
*                                                                     * 00032100
*          ATTR(HC)                                                   * 00032200
*              Return consoles receiving the hardcopy message set.    * 00032300
*                                                                     * 00032400
*          ATTR(AUTO)                                                 * 00032500
*              Return consoles receiving AUTO(YES) messages.          * 00032600
*                                                                     * 00032700
*          ATTR(AUTON)                                                * 00032800
*              Return consoles not receiving AUTO(YES) messages.      * 00032900
*                                                                     * 00033000
*          ATTR(MN)                                                   * 00033100
*              Return consoles receiving any type of MONITOR          * 00033200
*              messages.                                              * 00033300
*                                                                     * 00033400
*          ATTR(NONE)                                                 * 00033500
*              Return consoles with no routing attributes.            * 00033600
*                                                                     * 00033700
*          ATTR(INTIDS)                                               * 00033800
*              Return consoles receiving messages directed to console * 00033900
*              ID zero.                                               * 00034000
*                                                                     * 00034100
*          ATTR(UNKNIDS)                                              * 00034200
*              Return consoles receiving messages directed to unknown * 00034300
*              console IDs.                                           * 00034400
*                                                                     * 00034500
*                                                                     * 00034600
*                                                                     * 00034700
*                                                                     * 00034800
*                                                                     * 00034900
*                                                                     * 00035000
*      ÝDOM(»ANY!YES!NORMAL!ALL!NONEº)¨                               * 00035100
*          is an optional keyword input that indicates the DOM        * 00035200
*          attribute of the consoles.                                 * 00035300
*          DEFAULT: ANY                                               * 00035400
*                                                                     * 00035500
*                                                                     * 00035600
*          DOM(ANY)                                                   * 00035700
*              Return consoles regardless of their DOM attribute.     * 00035800
*                                                                     * 00035900
*          DOM(YES)                                                   * 00036000
*              Return consoles that are receiving DOMs (either        * 00036100
*              DOM(NORMAL) or DOM(NONE) consoles).                    * 00036200
*                                                                     * 00036300
*          DOM(NORMAL)                                                * 00036400
*              Return consoles that are DOM(NORMAL) only.             * 00036500
*                                                                     * 00036600
*          DOM(ALL)                                                   * 00036700
*              Return consoles that are DOM(ALL) only.                * 00036800
*                                                                     * 00036900
*          DOM(NONE)                                                  * 00037000
*              Return consoles that are DOM(NONE) only.               * 00037100
*                                                                     * 00037200
*                                                                     * 00037300
*                                                                     * 00037400
*                                                                     * 00037500
*                                                                     * 00037600
*                                                                     * 00037700
*      ÝBUFPTR(»xbufptr!0º)                                           * 00037800
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00037900
*          only) of an optional pointer input that contains the       * 00038000
*          address of the storage that the console display will be    * 00038100
*          returned in.  This field is only valid for a SUMMARY,      * 00038200
*          INFO, or FULL request.                                     * 00038300
*          DEFAULT: 0                                                 * 00038400
*                                                                     * 00038500
*                                                                     * 00038600
*          BUFSIZE(xbufsize)¨                                         * 00038700
*              is the name (RS-type) (or address in register (2)-(12) * 00038800
*              ASM only) of a required fullword input that contains   * 00038900
*              the size of the output storage buffer.  This field is  * 00039000
*              only valid when BUFPTR is specified.                   * 00039100
*              DEFAULT: 0                                             * 00039200
*                                                                     * 00039300
*                                                                     * 00039400
*                                                                     * 00039500
*                                                                     * 00039600
*                                                                     * 00039700
*                                                                     * 00039800
*      ÝCONSCNT(»xconscnt!0º)¨                                        * 00039900
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00040000
*          only) of an optional pointer input that contains the       * 00040100
*          address of a 4-byte output area that will contain the      * 00040200
*          number of consoles meeting the specified criteria.  The    * 00040300
*          output area is only filled in for a COUNT request.         * 00040400
*          DEFAULT: 0                                                 * 00040500
*                                                                     * 00040600
*                                                                     * 00040700
*                                                                     * 00040800
*                                                                     * 00040900
*      ÝTOKEN(»xtoken!0º)                                             * 00041000
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00041100
*          only) of an optional pointer input that contains the       * 00041200
*          address of a 8-byte token used to return additional EMCS   * 00041300
*          console information on subsequent calls.                   * 00041400
*          DEFAULT: 0                                                 * 00041500
*                                                                     * 00041600
*                                                                     * 00041700
*          RECSIZE(xrecsize)¨                                         * 00041800
*              is the name (RS-type) (or address in register (2)-(12) * 00041900
*              ASM only) of a required pointer input that contains    * 00042000
*              the address of a 4-byte output area that will contain  * 00042100
*              the recommended size of the output storage buffer if   * 00042200
*              BUFSIZE is insufficient.  This size represents only    * 00042300
*              enough storage to store information about the one      * 00042400
*              console represented by the TOKEN at the time of this   * 00042500
*              call to IEEQEMCS.  The output area will only be filled * 00042600
*              in when return code = IEEQE_RC_NOSTOR.                 * 00042700
*                                                                     * 00042800
*                                                                     * 00042900
*                                                                     * 00043000
*                                                                     * 00043100
*                                                                     * 00043200
*                                                                     * 00043300
*      ÝRETCODE(xretcode)¨                                            * 00043400
*          is the name (RS-type) of an optional fullword output       * 00043500
*          variable (or register (2)-(12) ASM only) into which the    * 00043600
*          return code is to be copied from GPR 15.                   * 00043700
*                                                                     * 00043800
*                                                                     * 00043900
*                                                                     * 00044000
*                                                                     * 00044100
*      ÝRSNCODE(xrsncode)¨                                            * 00044200
*          is the name (RS-type) of an optional fullword output       * 00044300
*          variable (or register (2)-(12) ASM only) into which the    * 00044400
*          reason code is to be copied from GPR 0.                    * 00044500
*                                                                     * 00044600
*                                                                     * 00044700
*                                                                     * 00044800
*                                                                     * 00044900
*      ÝPLISTVER(»xplistver!IMPLIED_VERSIONº)¨                        * 00045000
*          is an optional byte input decimal value in the "1-1" range * 00045100
*          that specifies the macro version.  PLISTVER is the only    * 00045200
*          key allowed on the list form of MF and determines which    * 00045300
*          parameter list is generated.  Note that MAX may be         * 00045400
*          specified instead of a number, and the parameter list will * 00045500
*          be of the largest size currently supported. This size may  * 00045600
*          grow from release to release (thus possibly affecting the  * 00045700
*          amount of storage needed by your program).  If your        * 00045800
*          program can tolerate this, IBM recommends that you always  * 00045900
*          specify MAX when creating the list form parameter list as  * 00046000
*          that will ensure that the list form parameter list is      * 00046100
*          always long enough to hold whatever parameters might be    * 00046200
*          specified on the execute form.                             * 00046300
*          DEFAULT: IMPLIED_VERSION.  When PLISTVER is omitted, the   * 00046400
*          default is the lowest version which allows all of the      * 00046500
*          parameters specified on the invocation to be processed.    * 00046600
*                                                                     * 00046700
*                                                                     * 00046800
*                                                                     * 00046900
*                                                                     * 00047000
*       MF(»E!L!Mº)                                                   * 00047100
*          is a required keyword input which specifies the macro      * 00047200
*          form.                                                      * 00047300
*                                                                     * 00047400
*                                                                     * 00047500
*           MF(E,xmfctrl»,COMPLETE!NOCHECKº)                          * 00047600
*              specifies the execute form of the macro.  The "E" form * 00047700
*              generates code to put the parameters into the          * 00047800
*              parameter list specified by xmfctrl and invoke the     * 00047900
*              desired service.                                       * 00048000
*                                                                     * 00048100
*            ,xmfctrl                                                 * 00048200
*              is a required input.  It is the name (RS-type) (or     * 00048300
*              address in register (1)-(12) ASM only) of a storage    * 00048400
*              area for the parameter list.                           * 00048500
*                                                                     * 00048600
*            »,COMPLETE!NOCHECKº                                      * 00048700
*              is an optional keyword input which specifies the       * 00048800
*              degree of macro parameter syntax checking.             * 00048900
*              DEFAULT: COMPLETE                                      * 00049000
*                                                                     * 00049100
*                                                                     * 00049200
*              COMPLETE                                               * 00049300
*                  Checking for required macro keys is done and       * 00049400
*                  defaults are supplied for omitted optional         * 00049500
*                  parameters.  (See Macro Usage Note 2).             * 00049600
*                                                                     * 00049700
*              NOCHECK                                                * 00049800
*                  Checking for required macro keys is not done nor   * 00049900
*                  are defaults supplied for omitted optional         * 00050000
*                  parameters.                                        * 00050100
*                                                                     * 00050200
*                                                                     * 00050300
*                                                                     * 00050400
*           MF(L,xmfctrl»,xmfattr!BDY(DWORD)º)                        * 00050500
*              specifies the list form of the macro.  The "L" form    * 00050600
*              defines an area to be used for the parameter list.     * 00050700
*              Only the PLISTVER key may be specified on the          * 00050800
*              invocation.  All other macro parameters are flagged as * 00050900
*              errors.  If PLISTVER is not specified, the original    * 00051000
*              parameter list definition is used.                     * 00051100
*                                                                     * 00051200
*            ,xmfctrl                                                 * 00051300
*              is a required input.  It is the name of a storage area * 00051400
*              for the parameter list.                                * 00051500
*                                                                     * 00051600
*            »,xmfattr!BDY(DWORD)º                                    * 00051700
*              is an optional 60 character input string that varies   * 00051800
*              from 1 to 60 characters. Use it to force boundary      * 00051900
*              alignment of the parameter list. Use only 0F or 0D     * 00052000
*              (assembler-only).                                      * 00052100
*              DEFAULT: 0D for Assembler, BDY(DWORD) for PL/X, which  * 00052200
*              forces the parameter list to a doubleword boundary.    * 00052300
*                                                                     * 00052400
*           MF(M,xmfctrl»,COMPLETE!NOCHECKº)                          * 00052500
*              specifies the modify form of the macro.  The "M" form  * 00052600
*              generates code to put the parameters into the          * 00052700
*              parameter list specified by xmfctrl.                   * 00052800
*                                                                     * 00052900
*            ,xmfctrl                                                 * 00053000
*              is a required input.  It is the name (RS-type) (or     * 00053100
*              address in register (1)-(12) ASM only) of a storage    * 00053200
*              area for the parameter list.                           * 00053300
*                                                                     * 00053400
*            »,COMPLETE!NOCHECKº                                      * 00053500
*              is an optional keyword input which specifies the       * 00053600
*              degree of macro parameter syntax checking.             * 00053700
*              DEFAULT: COMPLETE                                      * 00053800
*                                                                     * 00053900
*                                                                     * 00054000
*              COMPLETE                                               * 00054100
*                  Checking for required macro keys is done and       * 00054200
*                  defaults are supplied for omitted optional         * 00054300
*                  parameters.  (See Macro Usage Note 2).             * 00054400
*                                                                     * 00054500
*              NOCHECK                                                * 00054600
*                  Checking for required macro keys is not done nor   * 00054700
*                  are defaults supplied for omitted optional         * 00054800
*                  parameters.                                        * 00054900
*                                                                     * 00055000
*                                                                     * 00055100
*                                                                     * 00055200
*                                                                     * 00055300
*                                                                     * 00055400
*                                                                     * 00055500
*                                                                     * 00055600
*01* RETURN CODES:                                                    * 00055700
*                                                                     * 00055800
*                                                                     * 00055900
*            0    Name: IEEQE_RC_OK                                   * 00056000
*                                                                     * 00056100
*                 Meaning:  EMCS consoles have been found.  In the    * 00056200
*                 case of a REQUEST type of SUMMARY, INFO, or FULL,   * 00056300
*                 the output buffer was sufficient to hold all of the * 00056400
*                 information for the consoles meeting the search     * 00056500
*                 criteria.                                           * 00056600
*                                                                     * 00056700
*                 Action:  None required.                             * 00056800
*                                                                     * 00056900
*            4    Name: IEEQE_RC_NOCONS                               * 00057000
*                                                                     * 00057100
*                 Meaning:  No EMCS consoles meet the specified       * 00057200
*                 filters.                                            * 00057300
*                                                                     * 00057400
*                 Action:  None required.                             * 00057500
*                                                                     * 00057600
*            8    Name: IEEQE_RC_NOSTOR                               * 00057700
*                                                                     * 00057800
*                 Meaning:  Insufficient return buffer storage to     * 00057900
*                 complete the query operation.                       * 00058000
*                                                                     * 00058100
*                 Action:  Refer to the action provided with the      * 00058200
*                 specific reason code.                               * 00058300
*                                                                     * 00058400
*                                                                     * 00058500
*                 HEX REASON  MEANING/ACTION                          * 00058600
*                 CODE                                                * 00058700
*                                                                     * 00058800
*                 4           Name: IEEQE_RS_TOKSZCONS                * 00058900
*                                                                     * 00059000
*                             Meaning: A token and recommended buffer * 00059100
*                             size have been returned in TOKEN and    * 00059200
*                             RECSIZE.  Also, some console            * 00059300
*                             information has been returned in the    * 00059400
*                             output buffer.                          * 00059500
*                                                                     * 00059600
*                             Action: After processing the            * 00059700
*                             information returned in the console     * 00059800
*                             buffer, issue IEEQEMCS again with the   * 00059900
*                             token that was returned by this call to * 00060000
*                             IEEQEMCS so that more console           * 00060100
*                             information may be returned.            * 00060200
*                                                                     * 00060300
*                 8           Name: IEEQE_RS_TOKSZNOCONS              * 00060400
*                                                                     * 00060500
*                             Meaning: A token and recommended buffer * 00060600
*                             size have been returned in TOKEN and    * 00060700
*                             RECSIZE.  The output buffer is too      * 00060800
*                             small to return any EMCS consoles.      * 00060900
*                                                                     * 00061000
*                             Action: Allocate a new buffer that is   * 00061100
*                             at least the size returned in RECSIZE,  * 00061200
*                             and issue IEEQEMCS again with the new   * 00061300
*                             buffer and the token returned on the    * 00061400
*                             previous IEEQEMCS call.  The            * 00061500
*                             recommended buffer size returned in     * 00061600
*                             RECSIZE is sufficient to hold only one  * 00061700
*                             console.  It may be necessary to obtain * 00061800
*                             a buffer larger than that to hold all   * 00061900
*                             of the consoles returned by IEEQEMCS.   * 00062000
*                                                                     * 00062100
*                 12          Name: IEEQE_RS_NOTOKSZRET               * 00062200
*                                                                     * 00062300
*                             Meaning: TOKEN and RECSIZE parameters   * 00062400
*                             were not coded on the macro invocation, * 00062500
*                             so IEEQEMCS could not return a          * 00062600
*                             recommended buffer size to the caller.  * 00062700
*                             The buffer size specified by BUFSIZE    * 00062800
*                             was not sufficient to hold all of the   * 00062900
*                             consoles returned by IEEQEMCS.          * 00063000
*                                                                     * 00063100
*                             Action:  Issue IEEQEMCS again with the  * 00063200
*                             TOKEN and RECSIZE parameters.           * 00063300
*                                                                     * 00063400
*                                                                     * 00063500
*                                                                     * 00063600
*            12   Name: IEEQE_RC_INVTOK                               * 00063700
*                                                                     * 00063800
*                 Meaning:  Invalid token in parameter list.          * 00063900
*                                                                     * 00064000
*                 Action:  Issue IEEQEMCS again with a correct token  * 00064100
*                 or a token of zeros.                                * 00064200
*                                                                     * 00064300
*            16   Name: IEEQE_RC_INVPL                                * 00064400
*                                                                     * 00064500
*                 Meaning:  Invalid parameter list.                   * 00064600
*                                                                     * 00064700
*                 Action:  Refer to the action provided with the      * 00064800
*                 specific reason code.                               * 00064900
*                                                                     * 00065000
*                                                                     * 00065100
*                 HEX REASON  MEANING/ACTION                          * 00065200
*                 CODE                                                * 00065300
*                                                                     * 00065400
*                 4           Name: IEEQE_RS_INVACRN                  * 00065500
*                                                                     * 00065600
*                             Meaning:  The acronym in the parameter  * 00065700
*                             list was invalid.                       * 00065800
*                                                                     * 00065900
*                             Action:  Correct the acronym in the     * 00066000
*                             parameter list and issue IEEQEMCS       * 00066100
*                             again.                                  * 00066200
*                                                                     * 00066300
*                 8           Name: IEEQE_RS_INVADDR                  * 00066400
*                                                                     * 00066500
*                             Meaning:  An output address is invalid. * 00066600
*                             An ABEND occured while trying to access * 00066700
*                             storage at an address specified in the  * 00066800
*                             parameter list, possibly because that   * 00066900
*                             storage is not accessible by the        * 00067000
*                             caller, or the storage does not exist.  * 00067100
*                                                                     * 00067200
*                             Action:  Correct the invalid address in * 00067300
*                             the parameter list and issue IEEQEMCS   * 00067400
*                             again.                                  * 00067500
*                                                                     * 00067600
*                 12          Name: IEEQE_RS_INVBUFSIZEADDR           * 00067700
*                                                                     * 00067800
*                             Meaning:  The length of the buffer in   * 00067900
*                             the parameter list was invalid.         * 00068000
*                                                                     * 00068100
*                             Action:  Correct the buffer length in   * 00068200
*                             the parameter list and issue IEEQEMCS   * 00068300
*                             again.                                  * 00068400
*                                                                     * 00068500
*                 16          Name: IEEQE_RS_INVLGTH                  * 00068600
*                                                                     * 00068700
*                             Meaning:  The length of the parameter   * 00068800
*                             list is invalid.                        * 00068900
*                                                                     * 00069000
*                             Action:  Correct the length in the      * 00069100
*                             parameter list and issue IEEQEMCS       * 00069200
*                             again.                                  * 00069300
*                                                                     * 00069400
*                 20          Name: IEEQE_RS_INVVERS                  * 00069500
*                                                                     * 00069600
*                             Meaning:  The version specified in the  * 00069700
*                             parameter list is invalid.              * 00069800
*                                                                     * 00069900
*                             Action:  Correct the version in the     * 00070000
*                             parameter list and issue IEEQEMCS       * 00070100
*                             again.                                  * 00070200
*                                                                     * 00070300
*                 24          Name: IEEQE_RS_INVFUNC                  * 00070400
*                                                                     * 00070500
*                             Meaning:  The REQUEST type specified in * 00070600
*                             the parameter list is not a valid       * 00070700
*                             REQUEST type.                           * 00070800
*                                                                     * 00070900
*                             Action:  Correct the REQUEST type in    * 00071000
*                             the parameter list and issue IEEQEMCS   * 00071100
*                             again.                                  * 00071200
*                                                                     * 00071300
*                 28          Name: IEEQE_RS_INVSTAT                  * 00071400
*                                                                     * 00071500
*                             Meaning:  The STATUS specified in the   * 00071600
*                             parameter list is not a valid STATUS    * 00071700
*                             type.                                   * 00071800
*                                                                     * 00071900
*                             Action:  Correct the STATUS in the      * 00072000
*                             parameter list and issue IEEQEMCS       * 00072100
*                             again.                                  * 00072200
*                                                                     * 00072300
*                 32          Name: IEEQE_RS_INVAUTH                  * 00072400
*                                                                     * 00072500
*                             Meaning:  The command authority         * 00072600
*                             specified in the parameter list is not  * 00072700
*                             a valid command authority type.         * 00072800
*                                                                     * 00072900
*                             Action:  Correct the AUTH in the        * 00073000
*                             parameter list and issue IEEQEMCS       * 00073100
*                             again.                                  * 00073200
*                                                                     * 00073300
*                 36          Name: IEEQE_RS_INVDOM                   * 00073400
*                                                                     * 00073500
*                             Meaning:  The DOM attribute specified   * 00073600
*                             in the parameter list is not a valid    * 00073700
*                             DOM attribute type.                     * 00073800
*                                                                     * 00073900
*                             Action:  Correct the DOM in the         * 00074000
*                             parameter list and issue IEEQEMCS       * 00074100
*                             again.                                  * 00074200
*                                                                     * 00074300
*                 40          Name: IEEQE_RS_INCONSIST                * 00074400
*                                                                     * 00074500
*                             Meaning:  A set of parameters specified * 00074600
*                             in the parameter list conflict with     * 00074700
*                             each other.                             * 00074800
*                                                                     * 00074900
*                             Action:  Correct the parameter list to  * 00075000
*                             not have conflicting parameters and     * 00075100
*                             issue IEEQEMCS again.                   * 00075200
*                                                                     * 00075300
*                 44          Name: IEEQE_RS_INVATTR                  * 00075400
*                                                                     * 00075500
*                             Meaning:  The routing attributes        * 00075600
*                             specified in the parameter list are not * 00075700
*                             valid routing attribute types.          * 00075800
*                                                                     * 00075900
*                             Action:  Correct the ATTR field in the  * 00076000
*                             parameter list and issue IEEQEMCS       * 00076100
*                             again.                                  * 00076200
*                                                                     * 00076300
*                                                                     * 00076400
*                                                                     * 00076500
*       64        Name: IEEQE_RC_SYSERR                               * 00076600
*                                                                     * 00076700
*                 Meaning:  System Error.  This return code is for    * 00076800
*                 IBM diagnostic purposes only.                       * 00076900
*                                                                     * 00077000
*                 Action:  Record the return and reason codes and     * 00077100
*                 supply it to the appropriate IBM support personnel. * 00077200
*                                                                     * 00077300
*                                                                     * 00077400
*                 HEX REASON  MEANING/ACTION                          * 00077500
*                 CODE                                                * 00077600
*                                                                     * 00077700
*                 04          Name: IEEQE_RS_SYSABEND                 * 00077800
*                                                                     * 00077900
*                             Meaning:  An ABEND occurred during      * 00078000
*                             processing.   This reason code is for   * 00078100
*                             IBM diagnostic purposes only.           * 00078200
*                                                                     * 00078300
*                             Action:  Record the return and reason   * 00078400
*                             codes and supply it to the appropriate  * 00078500
*                             IBM support personnel.                  * 00078600
*                                                                     * 00078700
*                 08          Name: IEEQE_RS_SYSERR                   * 00078800
*                                                                     * 00078900
*                             Meaning:  An error occurred during      * 00079000
*                             processing.   This reason code is for   * 00079100
*                             IBM diagnostic purposes only.           * 00079200
*                                                                     * 00079300
*                             Action:  Record the return and reason   * 00079400
*                             codes and supply it to the appropriate  * 00079500
*                             IBM support personnel.                  * 00079600
*                                                                     * 00079700
*                                                                     * 00079800
*                                                                     * 00079900
*                                                                     * 00080000
*                                                                     * 00080100
*01* REASON CODES:                                                    * 00080200
*                                                                     * 00080300
*01* MODULE TYPE:  ASSEM-PL/X MACRO                                   * 00080400
*                                                                     * 00080500
*02*   PROCESSOR:  ASSEM-PL/X                                         * 00080600
*                                                                     * 00080700
*01* COMPONENT:  SC1CK                                                * 00080800
*                                                                     * 00080900
*01* DISTRIBUTION LIBRARY: AMACLIB                                    * 00081000
*                                                                     * 00081100
*01* ABEND CODES:  None.                                              * 00081200
*                                                                     * 00081300
*01* EXAMPLES:                                                        * 00081400
*                                                                     * 00081500
*    Example                                                          * 00081600
*                                                                     * 00081700
*    Operation: This example requests FULL information about all      * 00081800
*    consoles on system SYS01 that are in an error condition.         * 00081900
*              .                                                      * 00082000
*              .                                                      * 00082100
*              .                                                      * 00082200
*    *         Initialize BUFSIZE and TOKEN                           * 00082300
*              L     REG9,INITSIZE                                    * 00082400
*              ST    REG9,BUFSIZE                                     * 00082500
*              MVC   TOKEN,INITTOKEN                                  * 00082600
*    *         Get storage for output buffer                          * 00082700
*              STORAGE OBTAIN,LENGTH=BUFSIZE,ADDR=BUFPTR,COND=NO,LOC= * 00082800
*    ANY                                                              * 00082900
*    *         Issue IEEQEMCS                                         * 00083000
*    DOQEMCS   EQU   *                                                * 00083100
*              IEEQEMCS REQUEST=FULL,        Full info                * 00083200
*           X                                                         * 00083300
*                   STATUS=ALL,              Active or inactive conso * 00083400
*    les    X                                                         * 00083500
*                   TOKEN=TOKENPTR,          Token                    * 00083600
*           X                                                         * 00083700
*                   BUFPTR=BUFPTR,           Buffer address           * 00083800
*           X                                                         * 00083900
*                   BUFSIZE=BUFSIZE,         Buffer size              * 00084000
*           X                                                         * 00084100
*                   RECSIZE=RECSZPTR,        Recommended size         * 00084200
*           X                                                         * 00084300
*                   RETCODE=RETCODE,         Return code              * 00084400
*           X                                                         * 00084500
*                   RSNCODE=RSNCODE,         Reason code              * 00084600
*           X                                                         * 00084700
*                   MF=(E,PLIST,COMPLETE)                             * 00084800
*    *         Check return and reason codes from IEEQEMCS            * 00084900
*              LA  REG14,IEEQE_RC_OK       Check if all consoles have * 00085000
*     been                                                            * 00085100
*              C   REG14,RETCODE             returned                 * 00085200
*              BE  ALLOK                   All consoles have been ret * 00085300
*    urned,                                                           * 00085400
*                                            so process them          * 00085500
*              LA  REG14,IEEQE_RC_NOCONS   Check if no consoles have  * 00085600
*    been                                                             * 00085700
*              C   REG14,RETCODE             returned                 * 00085800
*              BE  DONE                    No consoles met the filter * 00085900
*    , so   X                                                         * 00086000
*                                            exit                     * 00086100
*              LA  REG14,IEEQE_RC_NOSTOR   Check if the storage buffe * 00086200
*    r could                                                          * 00086300
*              C   REG14,RETCODE             not hold all the console * 00086400
*    s                                                                * 00086500
*              BNE ERROR                   No, there was some kind of * 00086600
*     error                                                           * 00086700
*              LA  REG14,IEEQE_RS_TOKSZCONS                           * 00086800
*              C   REG14,RSNCODE                                      * 00086900
*              BE  SOMEOK                  The buffer was too small t * 00087000
*    o hold X                                                         * 00087100
*                                          all the consoles meeting t * 00087200
*    his    X                                                         * 00087300
*                                          filter, but IEEQEMCS put a * 00087400
*    s many X                                                         * 00087500
*                                          consoles as possible in th * 00087600
*    e      X                                                         * 00087700
*                                          buffer.  Process the conso * 00087800
*    les,   X                                                         * 00087900
*                                          and call IEEQEMCS again.   * 00088000
*              LA  REG14,IEEQE_RS_TOKSZNOCONS                         * 00088100
*              C   REG14,RSNCODE                                      * 00088200
*              BE  GETMORE                 The buffer was too small f * 00088300
*    or     X                                                         * 00088400
*                                          even one console.  Free th * 00088500
*    e      X                                                         * 00088600
*                                          buffer, get more storage,  * 00088700
*    and    X                                                         * 00088800
*                                          call IEEQEMCS again.       * 00088900
*              .                                                      * 00089000
*              .                                                      * 00089100
*              .                                                      * 00089200
*    ALLOK     EQU *                                                  * 00089300
*    *         Call PROCCONS to process the output buffer.            * 00089400
*              LA   REG15,PROCCONS                                    * 00089500
*              BALR REG14,REG15                                       * 00089600
*    *         There are no more consoles to process, so exit         * 00089700
*              XR   REG15,REG15            Zero return code           * 00089800
*              B    DONE                                              * 00089900
*    SOMEOK    EQU *                                                  * 00090000
*    *         Call PROCCONS to process the consoles returned in      * 00090100
*    *         the output buffer.                                     * 00090200
*              LA   REG15,PROCCONS                                    * 00090300
*              BALR REG14,REG15                                       * 00090400
*    *         There is more console information to be retrieved, so  * 00090500
*    *         loop back to DOQEMCS.                                  * 00090600
*              B    DOQEMCS                                           * 00090700
*    PROCCONS  EQU  *                                                 * 00090800
*    *         Process consoles, and return to caller.                * 00090900
*              ST   REG14,RETADDR                                     * 00091000
*              L    HDRREG,BUFPTR          Load pointer to buffer in  * 00091100
*    R2                                                               * 00091200
*              USING ECDM_HDR,HDRREG       This should be the ECDM he * 00091300
*    ader   X                                                         * 00091400
*                                          pointer                    * 00091500
*              L    SUMMREG,ECDM_HDR_SIZE  Load the size of the heade * 00091600
*    r                                                                * 00091700
*              AR   SUMMREG,HDRREG         Find the address of the su * 00091800
*    mmary  X                                                         * 00091900
*                                          block                      * 00092000
*              LH   REG15,ECDM_NENT        Load number of entries     * 00092100
*              ST   REG15,NUMCONS                                     * 00092200
*              USING ECDM_SUMM,SUMMREG                                * 00092300
*              USING ECDM_INFO,INFOREG                                * 00092400
*              USING ECDM_DSP,DSPREG                                  * 00092500
*              USING ECDM_MSCP,MSCPREG                                * 00092600
*    CONSLOOP  LTR  REG15,REG15            Is the number of entries z * 00092700
*    ero?                                                             * 00092800
*              BZ   CONSDONE               Yes, exit loop             * 00092900
*              L    REG8,ECDM_SUMM_SIZE    Put size of summ block in  * 00093000
*    R10                                                              * 00093100
*              L    ENDREG,ECDM_SUMM_CONS_SIZE Put size of all blocks * 00093200
*     for   X                                                         * 00093300
*                                              this console in R11    * 00093400
*              AR   REG8,SUMMREG           Get address of end of the  * 00093500
*           X                                                         * 00093600
*                                          summary block in R8 (work  * 00093700
*    reg)                                                             * 00093800
*              AR   ENDREG,SUMMREG         Get address of the end of  * 00093900
*    the    X                                                         * 00094000
*                                          console block in R11       * 00094100
*    BLKLOOP   LR   REG9,REG8              Copy work addr into R9     * 00094200
*              SR   REG9,ENDREG            Are we at the end of the b * 00094300
*    lock?                                                            * 00094400
*              BZ   DOCONS                 Yes, do the actual console * 00094500
*           X                                                         * 00094600
*                                          processing                 * 00094700
*              LA   REG9,ECDM_TYPE_INFO    Load the type of block in  * 00094800
*    R9                                                               * 00094900
*              CH   REG9,0(REG8)           Is this an info block?     * 00095000
*              BE   INFOBLK                Yes, branch to info block  * 00095100
*              LA   REG9,ECDM_TYPE_DSP     Load the type of block in  * 00095200
*    R9                                                               * 00095300
*              CH   REG9,0(REG8)           Is this a DSP block?       * 00095400
*              BE   DSPBLK                 Yes, branch to dataspace b * 00095500
*    lock                                                             * 00095600
*              LA   REG9,ECDM_TYPE_MSCP    Load the type of block in  * 00095700
*    R9                                                               * 00095800
*              CH   REG9,0(REG8)           Is this an MSCOPE block?   * 00095900
*              BE   MSCPBLK                Yes, branch to MSCOPE bloc * 00096000
*    k                                                                * 00096100
*              B    ERROR                  There was a bad type, so e * 00096200
*    xit                                                              * 00096300
*    INFOBLK   LR   INFOREG,REG8           Load INFO block addr into  * 00096400
*    R4                                                               * 00096500
*              A    REG8,ECDM_INFO_SIZE    Increment size of block    * 00096600
*              B    BLKLOOP                Find next block            * 00096700
*    DSPBLK    LR   DSPREG,REG8            Load DSP block addr into R * 00096800
*    5                                                                * 00096900
*              A    REG8,ECDM_DSP_SIZE     Increment size of block    * 00097000
*              B    BLKLOOP                Find next block            * 00097100
*    MSCPBLK   LR   MSCPREG,REG8           Load MSCP block addr into  * 00097200
*    R6                                                               * 00097300
*              A    REG8,ECDM_MSCP_SIZE    Increment size of block    * 00097400
*              B    BLKLOOP                Find next block            * 00097500
*    DOCONS    EQU  *                      Console processing         * 00097600
*    *         At this point, do any processing on this individual    * 00097700
*    *         console that is necessary.                             * 00097800
*              .                                                      * 00097900
*              .                                                      * 00098000
*              .                                                      * 00098100
*    *         Now, decrement the console count, and process the      * 00098200
*    *         next console in the buffer (if there is one).          * 00098300
*              L    REG15,NUMCONS                                     * 00098400
*              BCTR REG15,0                Decrement console count    * 00098500
*              ST   REG15,NUMCONS                                     * 00098600
*              LR   SUMMREG,REG8           Get address of next block  * 00098700
*    in R3                                                            * 00098800
*              B    CONSLOOP               process next block         * 00098900
*    CONSDONE  L    REG14,RETADDR                                     * 00099000
*              BR   REG14                                             * 00099100
*              .                                                      * 00099200
*              .                                                      * 00099300
*              .                                                      * 00099400
*    GETMORE   EQU  *                                                 * 00099500
*    *         There was not enough storage to complete the request,  * 00099600
*    so                                                               * 00099700
*    *         get some more.                                         * 00099800
*    *         First delete the old storage                           * 00099900
*              STORAGE RELEASE,LENGTH=BUFSIZE,ADDR=BUFPTR             * 00100000
*    *         Now, since IEEQEMCS returned a recommended storage     * 00100100
*    *         size, move that amount into BUFSIZE, and obtain the    * 00100200
*    *         storage buffer.                                        * 00100300
*              MVC   BUFSIZE,RECSZ                                    * 00100400
*              STORAGE OBTAIN,LENGTH=BUFSIZE,ADDR=BUFPTR,COND=NO,LOC= * 00100500
*    ANY                                                              * 00100600
*    *         Loop to issue IEEQEMCS again                           * 00100700
*              B     DOQEMCS                                          * 00100800
*              .                                                      * 00100900
*              .                                                      * 00101000
*              .                                                      * 00101100
*    ERROR     EQU   *                                                * 00101200
*    *         Do any error handling here                             * 00101300
*              .                                                      * 00101400
*              .                                                      * 00101500
*              .                                                      * 00101600
*    DONE      EQU   *                                                * 00101700
*    *         IEEQEMCS found no more consoles, so release the output * 00101800
*    *         buffer.                                                * 00101900
*              STORAGE RELEASE,LENGTH=BUFSIZE,ADDR=BUFPTR             * 00102000
*    *         Now, continue on with other processing, etc.           * 00102100
*              .                                                      * 00102200
*              .                                                      * 00102300
*              .                                                      * 00102400
*    *         Declare constants and variables                        * 00102500
*    BUFSIZE   DS    F                                                * 00102600
*    BUFPTR    DS    F                                                * 00102700
*    TOKENPTR  DS    F                                                * 00102800
*    RECSZPTR  DS    F                                                * 00102900
*    TOKEN     DS    CL8                                              * 00103000
*    RECSZ     DS    F                                                * 00103100
*    RETCODE   DS    F                                                * 00103200
*    RSNCODE   DS    F                                                * 00103300
*    NUMCONS   DS    F                                                * 00103400
*    RETADDR   DS    F                                                * 00103500
*    INITSIZE  DC    XL4'300'                                         * 00103600
*    INITTOKEN DC    XL8'0'                                           * 00103700
*    *         IEEQEMCS parameter list                                * 00103800
*              DS    0F                                               * 00103900
*              IEEQEMCS MF=(L,PLIST)                                  * 00104000
*    *         IEEQEMCS return code equates                           * 00104100
*              IEEZB888                                               * 00104200
*    *         Include mapping of ECDM blocks                         * 00104300
*              IEEZB887                                               * 00104400
*              END                                                    * 00104500
*                                                                     * 00104600
*01* MACRO USAGE NOTES:                                               * 00104700
*                                                                     * 00104800
*                                                                     * 00104900
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00105000
*        global macro variable.  Any value other than 'NO' will       * 00105100
*        result in the macro expansion being printed.  The default is * 00105200
*        'YES'.  The following examples illustrate how the ZPRINT     * 00105300
*        variable should be set.                                      * 00105400
*                                                                     * 00105500
*                    GBLC &ZPRINT                                     * 00105600
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00105700
*                                                                     * 00105800
*                                                                     * 00105900
*    2.  When using the NOCHECK option in conjunction with the Modify * 00106000
*        and/or  Execute  forms,  be  sure  that  it is preceded by a * 00106100
*        Modify   or  Execute  form  invocation  which  specifies  or * 00106200
*        defaults  to  the  COMPLETE  option.   This insures that the * 00106300
*        parameter  list  is  initialized completely.   The parameter * 00106400
*        list  field which identifies the version number of the macro * 00106500
*        is only set when the Standard form or the Complete option of * 00106600
*        the  Execute/Modify  form  is  used,  or  when  PLISTVER  is * 00106700
*        explicitly  specified.  Be sure that the resulting parameter * 00106800
*        list version number covers all the keys that you use.        * 00106900
*                                                                     * 00107000
*                                                                     * 00107100
*    3.  All   keys   currently   contained  in  the  IEEQEMCS  macro * 00107200
*        correspond  to  version  1.   If you specify PLISTVER, use a * 00107300
*        value of 1 or MAX.                                           * 00107400
*                                                                     * 00107500
*                                                                     * 00107600
*                                                                     * 00107700
*                                                                     * 00107800
*01* CHANGE ACTIVITY:                                                 * 00107900
*                                                                     * 00108000
*   Flag LineItem  FMID    Date   ID    Comment                       * 00108100
*                                                                     * 00108200
*    $L0=DEMCS    JBB6607 980430 PDTA:  DISPLAY EMCS                  * 00108300
*    $P1=PWA0180  JBB6607 980630 PDHD:  Allow any cross memory mode   * 00108400
*    $P2=PXD1290  HBB7703 000218 PDKP:  Recompile to fix AMG bug in   * 00108500
*                                         MF=M form                   * 00108600
*    $L1=CSTAR    HBB7707 021130 PDTA:  Remove UD keywords from macro * 00108700
*    $L2=CNZ2A    HBB7730 040702 PDSS:  MC/Switch Elimination         * 00108800
*    $L3=CNZ2A    HBB7730 040702 PDHD:  Routing Attributes            * 00108900
****** END OF SPECIFICATIONS *****************************************/ 00109000
*/********************************************************************* 00109100
         MACRO                                                          00109200
&XLABEL  IEEQEMCS &REQUEST=,&STATUS=,&BKLG_NUM=,&CN=,&SYS=,&KEY=,      *00109300
               &AUTH=,&ATTR=,&DOM=,&BUFPTR=,&BUFSIZE=,&CONSCNT=,       *00109400
               &TOKEN=,&RECSIZE=,&RETCODE=,&RSNCODE=,&PLISTVER=,&MF=    00109500
.*                                                                      00109600
*              MACDATE -04/28/07-<1>                                    00109700
.*                                                                      00109800
.*******************************************************************    00109900
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00110000
.*******************************************************************    00110100
              GBLC  &ZPRINT     YES=PRINT NO=NO PRINT                   00110200
              GBLC  &ZTEST      YES=TEST NO=NO TEST                     00110300
              GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX             00110400
.*                                                                      00110500
              GBLC  &ZIEEQEMCS  YES=MACRO USED AT LEAST ONCE            00110600
.*******************************************************************    00110700
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00110800
.*******************************************************************    00110900
              LCLC  &ZMS        ERROR MESSAGE WORK AREA                 00111000
              LCLC  &ZCNDX      SYSNDX CHARACTERS                       00111100
              LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED              00111200
              LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR             00111300
              LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE             00111400
              LCLA  &ZAWRK      USED AS A WORK AREA                     00111500
              LCLA  &ZASIZ      USED FOR SIZE OF VALUE                  00111600
              LCLA  &ZN         NUMERIC WORK VARIABLE                   00111700
              LCLC  &ZC         CHARACTER WORK VARIABLE                 00111800
              LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE             00111900
              LCLA  &ZTLA       VALUE TOO LONG VARIABLE                 00112000
              LCLC  &ZMAC_G     "G" or null                             00112100
&ZMAC_G       SETC  ''                                                  00112200
              LCLC  &ZMAC_LR                                            00112300
&ZMAC_LR      SETC  'LR'                                                00112400
              LCLC  &ZMAC_L                                             00112500
&ZMAC_L       SETC  'L'                                                 00112600
              LCLC  &ZMAC_ST                                            00112700
&ZMAC_ST      SETC  'ST'                                                00112800
              LCLA  &ZMACRET    MACRO RETURN CODE                       00112900
&ZMACRET      SETA  0           ASSUME NO ERRORS                        00113000
.*                                                                      00113100
              LCLC  &ZCSYSLIST(255)             NONXKEY, POS ARRAY      00113200
              LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()              00113300
              LCLA  &ZPLLEN     PARAMETER LIST LENGTH                   00113400
              LCLC  &ZENDBASEPL                 End of base PL          00113500
              LCLA  &ZPLWORKA   PARAMETER LIST LENGTH                   00113600
.*******************************************************************    00113700
.***AB.04  MACRO VARIABLES FOR RANGES AND SETS OF ARGUMENTS             00113800
.*******************************************************************    00113900
              LCLA  &ZI         INDEX FOR ARRAY                         00114000
              LCLA  &ZJ         INDEX FOR PARMS                         00114100
              LCLA  &ZK         INDEX FOR PARSE                         00114200
              LCLA  &ZLO        LOW RANGE VALUE                         00114300
              LCLA  &ZHI        HIGH RANGE VALUE                        00114400
              LCLC  &ZW         WORK AREA FOR PARM                      00114500
.********************************************************************   00114600
.***AB.05  INVOKE MVS MACROS TO CONTROL CODE GENERATION                 00114700
.********************************************************************   00114800
              GBLC  &SYSSPLV    SP LEVEL 1,2,3 -SPLEVEL                 00114900
              GBLC  &SYSASCE    SYSTEM STATE P ANY AR-SYSSTATE          00115000
              GBLA  &SYSALVL    SYSSTATE ARCHLVL                        00115100
              GBLC  &SYSAM64    SYSSTATE AMODE64                        00115200
.*                                                                      00115300
              AIF   (K'&SYSASCE GT 0).ZSYS4     SYS STATE DEFINED       00115400
              AIF   (K'&SYSSPLV GT 0).ZSYS2     SP LEVEL DEFINED        00115500
              SPLEVEL  TEST                                             00115600
.ZSYS2        ANOP  ,                                                   00115700
              AIF   ('&SYSSPLV' EQ '1').ZSYS3   PRE SP 3.1              00115800
              AIF   ('&SYSSPLV' EQ '2').ZSYS3   PRE SP 3.1              00115900
              SYSSTATE TEST                                             00116000
              AGO   .ZSYS4                                              00116100
.ZSYS3        ANOP  ,                                                   00116200
&SYSASCE      SETC  'P'         ASSUME SYSSTATE PRIMARY                 00116300
.ZSYS4        ANOP  ,                                                   00116400
.*******************************************************************    00116500
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00116600
.*******************************************************************    00116700
              LCLC  &XREQUEST   ++ VALUE                                00116800
              LCLC  &XSTATUS    ++ VALUE                                00116900
              LCLC  &XBKLG_NUM  ++ NAME                                 00117000
              LCLC  &XCN        ++ NAME                                 00117100
              LCLC  &XSYS       ++ NAME                                 00117200
              LCLC  &XKEY       ++ NAME                                 00117300
              LCLC  &XAUTH      ++ VALUE                                00117400
              LCLC  &XATTR      ++ VALUE                                00117500
              LCLC  &XDOM       ++ VALUE                                00117600
              LCLC  &XBUFPTR    ++ NAME                                 00117700
              LCLC  &XBUFSIZE   ++ NAME                                 00117800
              LCLC  &XCONSCNT   ++ NAME                                 00117900
              LCLC  &XTOKEN     ++ NAME                                 00118000
              LCLC  &XRECSIZE   ++ NAME                                 00118100
              LCLC  &XRETCODE   ++ NAME                                 00118200
              LCLC  &XRSNCODE   ++ NAME                                 00118300
              LCLA  &XPLISTVER  ++ VALUE                                00118400
              LCLC  &XMF        ++ VALUE                                00118500
              LCLC  &XMFCTRL    ++ NAME                                 00118600
              LCLC  &XMFSCK     ++ VALUE                                00118700
              LCLC  &XMFATTR    ++ VALUE                                00118800
.*******************************************************************    00118900
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00119000
.*******************************************************************    00119100
              LCLC  &ZXREQUEST  ++ INPUT VALUE                          00119200
              LCLC  &ZXSTATUS   ++ INPUT VALUE                          00119300
              LCLC  &ZXBKLG_NUM                 ++ INPUT NAME           00119400
              LCLC  &ZXCN       ++ INPUT NAME                           00119500
              LCLC  &ZXSYS      ++ INPUT NAME                           00119600
              LCLC  &ZXKEY      ++ INPUT NAME                           00119700
              LCLC  &ZXAUTH     ++ INPUT VALUE                          00119800
              LCLC  &ZXATTR     ++ INPUT VALUE                          00119900
              LCLC  &ZXDOM      ++ INPUT VALUE                          00120000
              LCLC  &ZXBUFPTR   ++ INPUT NAME                           00120100
              LCLC  &ZXBUFSIZE  ++ INPUT NAME                           00120200
              LCLC  &ZXCONSCNT  ++ INPUT NAME                           00120300
              LCLC  &ZXTOKEN    ++ INPUT NAME                           00120400
              LCLC  &ZXRECSIZE  ++ INPUT NAME                           00120500
              LCLC  &ZXRETCODE  ++ OUTPUT NAME                          00120600
              LCLC  &ZXRSNCODE  ++ OUTPUT NAME                          00120700
              LCLC  &ZXPLISTVER                 ++ INPUT VALUE          00120800
              LCLC  &ZXMF       ++ INPUT VALUE                          00120900
              LCLC  &ZXMFCTRL   ++ INPUT NAME                           00121000
              LCLC  &ZXMFSCK    ++ INPUT VALUE                          00121100
              LCLC  &ZXMFATTR   ++ INPUT VALUE                          00121200
.********************************************************************   00121300
.***AC.PLV01  PROCESS PLISTVER                                      *   00121400
.********************************************************************   00121500
&XPLISTVER      SETA  1                                                 00121600
                AIF   (K'&PLISTVER(1) LE 0).ZPLV0                       00121700
                AIF   ('&PLISTVER(1)' NE 'MAX').ZPLV0                   00121800
&XPLISTVER      SETA  1                                                 00121900
.ZPLV0          ANOP  ,                                                 00122000
.*                                                                      00122100
                AIF   (K'&PLISTVER(1) LE 0).ZPVCKE                      00122200
                AIF   ('&PLISTVER(1)' EQ 'IMPLIED_VERSION').ZPVCKE      00122300
                AIF   ('&PLISTVER(1)' EQ 'MAX').ZPVCKE                  00122400
.*-------------------------------------------------------------------   00122500
                AIF   (N'&PLISTVER LE 1).ZPVCK3  CK NUM                 00122600
&ZMS            SETC  '"PLISTVER='                                      00122700
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00122800
&ZMS            SETC  '&ZMS "PLISTVER"'                                 00122900
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00123000
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00123100
                AGO   .ZPVCK2                                           00123200
.ZPVCK3         ANOP  ,                                                 00123300
.*-------------------------------------------------------------------   00123400
                AIF   ('&PLISTVER'(1,1) NE '(').ZPVCK2                  00123500
&ZMS            SETC  '"PLISTVER='                                      00123600
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00123700
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00123800
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00123900
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00124000
                AGO   .ZPVCKE                                           00124100
.ZPVCK2         ANOP  ,                                                 00124200
.*-------------------------------------------------------------------   00124300
&ZCVAL          SETC  '&PLISTVER(1)'                                    00124400
                AIF   ('&ZCVAL'(1,1) EQ '(').ZPVCKE  IN GPR             00124500
                AIF   (T'&ZCVAL NE 'N').ZPVCK6  NUMERIC ERR             00124600
&ZN             SETA   &PLISTVER(1)        CONVERT TO ARITHMETIC        00124700
                AIF   (&ZN LT 1).ZPVCK6    TOO LOW                      00124800
                AIF   (&ZN LE 1).ZPVCK4A   NOT HIGH                     00124900
.ZPVCK6         ANOP  ,                                                 00125000
&ZMS            SETC  '"PLISTVER='                                      00125100
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00125200
&ZMS            SETC  '&ZMS THE RANGE IS "1-1"'                         00125300
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00125400
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00125500
&XPLISTVER      SETA  1                                                 00125600
                AGO   .ZPVCKE                                           00125700
.*-------------------------------------------------------------------   00125800
.ZPVCK4A        ANOP  ,                                                 00125900
                AIF   (&ZN GE &XPLISTVER).ZPVCK4                        00126000
&ZMS            SETC  'PLISTVER='                                       00126100
&ZMS            SETC  '&ZMS.&PLISTVER(1)'                               00126200
&ZMS            SETC  '&ZMS., BUT PLISTVER OF'                          00126300
&ZMS            SETC  '&ZMS &XPLISTVER'                                 00126400
                MNOTE 8,' &ZMS IS REQUIRED.'                            00126500
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00126600
                AGO   .ZPVCK5                                           00126700
.ZPVCK4         ANOP  ,                                                 00126800
&XPLISTVER      SETA  &PLISTVER(1)                                      00126900
.ZPVCK5         ANOP  ,                                                 00127000
.ZPVCKE         ANOP  ,                                                 00127100
.********************************************************************   00127200
.***AG.MF01 PROCESS MF MACRO FORMS                                      00127300
.********************************************************************   00127400
              ACTR  10000                                               00127500
.*------------------------------------------------------------------    00127600
.***AG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00127700
&XMF          SETC  ''          INITIALIZE XVARIABLE                    00127800
.*-------------------------------------------------------------------   00127900
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00128000
.ZG90         ANOP  ,                                                   00128100
&ZTLC         SETC 'E'                                                  00128200
              AIF   ('&MF(1)' NE '&ZTLC').ZG99                          00128300
&XMF          SETC  'E'         SET KEYWORD                             00128400
              AIF   (N'&MF LE 3).ZG90A          CK NUM                  00128500
&ZMS          SETC  '"MF='                                              00128600
&ZMS          SETC  '&ZMS.&MF"'                                         00128700
&ZMS          SETC  '&ZMS "MF"'                                         00128800
              MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'                00128900
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00129000
.ZG90A        ANOP  ,                                                   00129100
.*-------------------------------------------------------------------   00129200
.***AG.KXVAR06 NAME, RQD INPUT, POS(2) -XVARIABLE                       00129300
&ZXMFCTRL     SETC  'INPUT'     SET IN/OUTPUT                           00129400
&XMFCTRL      SETC  '&MF(2,1)'  SET XVARIABLE                           00129500
              AIF   (N'&MF(2) GT 1).ZG92B       MULTI PARMS             00129600
&XMFCTRL      SETC  '&MF(2)'    SET XVARIABLE                           00129700
.ZG92B        AIF   (K'&MF(2) GT 0).ZG92C                               00129800
&ZXMFCTRL     SETC  ''          RESET IN/OUTPUT                         00129900
&ZMS          SETC  ' '                                                 00130000
&ZMS          SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'                 00130100
              MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                        00130200
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00130300
.ZG92C        ANOP  ,                                                   00130400
.*-------------------------------------------------------------------   00130500
.***AG.KCK02 NAME, RQD INPUT, POS(2) -GPR OUT OF RANGE                  00130600
              AIF   (K'&ZXMFCTRL LE 0).ZG92R    NOT I/O                 00130700
              AIF   ('&XMFCTRL'(1,1) NE '(').ZG92R                      00130800
&ZCGPR        SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)                          00130900
              AIF   ('&ZCGPR'(1,1) NE '0').ZG92P                        00131000
              AIF   (K'&ZCGPR GT 2).ZG92Q                               00131100
              AIF   ('&ZCGPR' EQ '0').ZG92Q                             00131200
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00131300
              AIF   (T'&ZCGPR NE 'N').ZG92Q     INVALID REG NAME        00131400
.ZG92P        ANOP  ,                                                   00131500
              AIF   (T'&ZCGPR NE 'N').ZG92R     NON NUMERIC             00131600
              AIF   ('&ZCGPR' LT '1').ZG92Q                             00131700
              AIF   ('&ZCGPR' LE '12').ZG92R                            00131800
.ZG92Q        ANOP  ,                                                   00131900
&ZMS          SETC  '"MF='                                              00132000
&ZMS          SETC  '&ZMS.&MF"'                                         00132100
&ZMS          SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'           00132200
              MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'                    00132300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00132400
.ZG92R        ANOP  ,                                                   00132500
.*-------------------------------------------------------------------   00132600
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00132700
&XMFSCK       SETC  ''          INITIALIZE XVARIABLE                    00132800
.ZG96A   AIF   ('&MF(3)' NE 'COMPLETE').ZG97A                           00132900
&XMFSCK       SETC  'COMPLETE'  SET KEYWORD                             00133000
.*-------------------------------------------------------------------   00133100
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00133200
.ZG97A   AIF   ('&MF(3)' NE 'NOCHECK').ZG98A                            00133300
&XMFSCK       SETC  'NOCHECK'   SET KEYWORD                             00133400
.*-------------------------------------------------------------------   00133500
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00133600
.ZG98A        AIF   (K'&XMFSCK GT 0).ZG98C      KEYWORD                 00133700
              AIF   (K'&MF(3) LE 0).ZG98B                               00133800
&ZMS          SETC  '"MF='                                              00133900
&ZMS          SETC  '&ZMS.&MF"'                                         00134000
&ZMS          SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '           00134100
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00134200
&ZMS          SETC  '&ZMS "COMPLETE"'                                   00134300
&ZMS          SETC  '&ZMS OR "NOCHECK".'                                00134400
              MNOTE 8,' &ZMS '                                          00134500
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00134600
.ZG98B        ANOP  ,                                                   00134700
&XMFSCK       SETC  'COMPLETE'  SET DEFAULT KEYWORD                     00134800
.ZG98C        ANOP  ,                                                   00134900
&ZXMFSCK      SETC  'INPUT'     SET IN/OUTPUT                           00135000
.*-------------------------------------------------------------------   00135100
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00135200
.ZG99         ANOP  ,                                                   00135300
&ZTLC         SETC 'L'                                                  00135400
              AIF   ('&MF(1)' NE '&ZTLC').ZG106                         00135500
&XMF          SETC  'L'         SET KEYWORD                             00135600
              AIF   (N'&MF LE 3).ZG99A          CK NUM                  00135700
&ZMS          SETC  '"MF='                                              00135800
&ZMS          SETC  '&ZMS.&MF"'                                         00135900
&ZMS          SETC  '&ZMS "MF"'                                         00136000
              MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'                00136100
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00136200
.ZG99A        ANOP  ,                                                   00136300
.*-------------------------------------------------------------------   00136400
.***AG.KKCTL08 -MF(L) SPECIAL CHECK                                     00136500
              AIF   (N'&SYSLIST NE 0).ZG99B     POSITIONALS?            00136600
              AIF   ('&REQUEST' NE '').ZG99B    KEYS?                   00136700
              AIF   ('&STATUS' NE '').ZG99B     KEYS?                   00136800
              AIF   ('&BKLG_NUM' NE '').ZG99B   KEYS?                   00136900
              AIF   ('&CN' NE '').ZG99B         KEYS?                   00137000
              AIF   ('&SYS' NE '').ZG99B        KEYS?                   00137100
              AIF   ('&KEY' NE '').ZG99B        KEYS?                   00137200
              AIF   ('&AUTH' NE '').ZG99B       KEYS?                   00137300
              AIF   ('&ATTR' NE '').ZG99B       KEYS?                   00137400
              AIF   ('&DOM' NE '').ZG99B        KEYS?                   00137500
              AIF   ('&BUFPTR' NE '').ZG99B     KEYS?                   00137600
              AIF   ('&BUFSIZE' NE '').ZG99B    KEYS?                   00137700
              AIF   ('&CONSCNT' NE '').ZG99B    KEYS?                   00137800
              AIF   ('&TOKEN' NE '').ZG99B      KEYS?                   00137900
              AIF   ('&RECSIZE' NE '').ZG99B    KEYS?                   00138000
              AIF   ('&RETCODE' NE '').ZG99B    KEYS?                   00138100
              AIF   ('&RSNCODE' NE '').ZG99B    KEYS?                   00138200
              AGO    .ZG99C     INVOCATION OKAY                         00138300
.ZG99B        ANOP  ,                                                   00138400
&ZMS          SETC  'THE "L" FORM OF "MF"'                              00138500
&ZMS          SETC  '&ZMS CAN ONLY HAVE'                                00138600
&ZMS          SETC  '&ZMS THE "PLISTVER" KEY'                           00138700
              MNOTE 8,' &ZMS SPECIFIED ON THE INVOCATION.'              00138800
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00138900
.ZG99C        ANOP  ,                                                   00139000
.*-------------------------------------------------------------------   00139100
.***AG.KXVAR06 NAME, RQD INPUT, POS(2) -XVARIABLE                       00139200
&ZXMFCTRL     SETC  'INPUT'     SET IN/OUTPUT                           00139300
&XMFCTRL      SETC  '&MF(2,1)'  SET XVARIABLE                           00139400
              AIF   (N'&MF(2) GT 1).ZG101B      MULTI PARMS             00139500
&XMFCTRL      SETC  '&MF(2)'    SET XVARIABLE                           00139600
.ZG101B       AIF   (K'&MF(2) GT 0).ZG101C                              00139700
&ZXMFCTRL     SETC  ''          RESET IN/OUTPUT                         00139800
&ZMS          SETC  ' '                                                 00139900
&ZMS          SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'                 00140000
              MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                        00140100
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00140200
.ZG101C       ANOP  ,                                                   00140300
.*-------------------------------------------------------------------   00140400
.***AG.KCK01 NAME, RQD INPUT, POS(2) -GPR NOT ALLOWED                   00140500
              AIF   (K'&ZXMFCTRL LE 0).ZG101P   NOT I/O                 00140600
              AIF   ('&XMFCTRL'(1,1) NE '(').ZG101P                     00140700
&ZXMFCTRL     SETC  ''          RESET IN/OUTPUT                         00140800
&ZMS          SETC  '"MF='                                              00140900
&ZMS          SETC  '&ZMS.&MF"'                                         00141000
&ZMS          SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'           00141100
              MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 2.'                   00141200
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00141300
.ZG101P       ANOP  ,                                                   00141400
.*-------------------------------------------------------------------   00141500
.***AG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE                      00141600
&ZXMFATTR     SETC  'INPUT'     SET IN/OUTPUT                           00141700
&XMFATTR      SETC  '0D'                                                00141800
              AIF   (K'&MF(3) LE 0).ZG104B      PARM                    00141900
&XMFATTR      SETC  '&MF(3,1)'  SET XVARIABLE                           00142000
              AIF   (N'&MF(3) GT 1).ZG104B      MULTI                   00142100
&XMFATTR      SETC  '&MF(3)'    SET XVARIABLE                           00142200
.ZG104B       ANOP  ,                                                   00142300
.*-------------------------------------------------------------------   00142400
.***AG.KCK01 VALUE, OPT INPUT, POS(3) -GPR NOT ALLOWED                  00142500
              AIF   (K'&ZXMFATTR LE 0).ZG104P   NOT I/O                 00142600
              AIF   ('&XMFATTR'(1,1) NE '(').ZG104P                     00142700
&ZXMFATTR     SETC  ''          RESET IN/OUTPUT                         00142800
&ZMS          SETC  '"MF='                                              00142900
&ZMS          SETC  '&ZMS.&MF"'                                         00143000
&ZMS          SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'           00143100
              MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 3.'                   00143200
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00143300
.ZG104P       ANOP  ,                                                   00143400
.*-------------------------------------------------------------------   00143500
.***AG.KCK03 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH                 00143600
              AIF   (K'&ZXMFATTR LE 0).ZG104S   NOT I/O                 00143700
              AIF   (K'&XMFATTR LE 60).ZG104S   LNG OK                  00143800
&ZXMFATTR     SETC  ''          RESET IN/OUTPUT                         00143900
&ZMS          SETC  '"MF='                                              00144000
&ZMS          SETC  '&ZMS.&MF"'                                         00144100
&ZMS          SETC  '&ZMS ARGUMENT 3 EXCEEDS THE MAXIMUM'               00144200
              MNOTE 8,' &ZMS LENGTH OF 60 CHARACTERS.'                  00144300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00144400
.ZG104S       ANOP  ,                                                   00144500
.*-------------------------------------------------------------------   00144600
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00144700
.ZG106        ANOP  ,                                                   00144800
&ZTLC         SETC 'M'                                                  00144900
              AIF   ('&MF(1)' NE '&ZTLC').ZG115                         00145000
&XMF          SETC  'M'         SET KEYWORD                             00145100
              AIF   (N'&MF LE 3).ZG106A         CK NUM                  00145200
&ZMS          SETC  '"MF='                                              00145300
&ZMS          SETC  '&ZMS.&MF"'                                         00145400
&ZMS          SETC  '&ZMS "MF"'                                         00145500
              MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'                00145600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00145700
.ZG106A       ANOP  ,                                                   00145800
.*-------------------------------------------------------------------   00145900
.***AG.KXVAR06 NAME, RQD INPUT, POS(2) -XVARIABLE                       00146000
&ZXMFCTRL     SETC  'INPUT'     SET IN/OUTPUT                           00146100
&XMFCTRL      SETC  '&MF(2,1)'  SET XVARIABLE                           00146200
              AIF   (N'&MF(2) GT 1).ZG108B      MULTI PARMS             00146300
&XMFCTRL      SETC  '&MF(2)'    SET XVARIABLE                           00146400
.ZG108B       AIF   (K'&MF(2) GT 0).ZG108C                              00146500
&ZXMFCTRL     SETC  ''          RESET IN/OUTPUT                         00146600
&ZMS          SETC  ' '                                                 00146700
&ZMS          SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'                 00146800
              MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                        00146900
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00147000
.ZG108C       ANOP  ,                                                   00147100
.*-------------------------------------------------------------------   00147200
.***AG.KCK02 NAME, RQD INPUT, POS(2) -GPR OUT OF RANGE                  00147300
              AIF   (K'&ZXMFCTRL LE 0).ZG108R   NOT I/O                 00147400
              AIF   ('&XMFCTRL'(1,1) NE '(').ZG108R                     00147500
&ZCGPR        SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)                          00147600
              AIF   ('&ZCGPR'(1,1) NE '0').ZG108P                       00147700
              AIF   (K'&ZCGPR GT 2).ZG108Q                              00147800
              AIF   ('&ZCGPR' EQ '0').ZG108Q                            00147900
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00148000
              AIF   (T'&ZCGPR NE 'N').ZG108Q    INVALID REG NAME        00148100
.ZG108P       ANOP  ,                                                   00148200
              AIF   (T'&ZCGPR NE 'N').ZG108R    NON NUMERIC             00148300
              AIF   ('&ZCGPR' LT '1').ZG108Q                            00148400
              AIF   ('&ZCGPR' LE '12').ZG108R                           00148500
.ZG108Q       ANOP  ,                                                   00148600
&ZMS          SETC  '"MF='                                              00148700
&ZMS          SETC  '&ZMS.&MF"'                                         00148800
&ZMS          SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'           00148900
              MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'                    00149000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00149100
.ZG108R       ANOP  ,                                                   00149200
.*-------------------------------------------------------------------   00149300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00149400
&XMFSCK       SETC  ''          INITIALIZE XVARIABLE                    00149500
.ZG112A   AIF   ('&MF(3)' NE 'COMPLETE').ZG113A                         00149600
&XMFSCK       SETC  'COMPLETE'  SET KEYWORD                             00149700
.*-------------------------------------------------------------------   00149800
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00149900
.ZG113A   AIF   ('&MF(3)' NE 'NOCHECK').ZG114A                          00150000
&XMFSCK       SETC  'NOCHECK'   SET KEYWORD                             00150100
.*-------------------------------------------------------------------   00150200
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00150300
.ZG114A       AIF   (K'&XMFSCK GT 0).ZG114C     KEYWORD                 00150400
              AIF   (K'&MF(3) LE 0).ZG114B                              00150500
&ZMS          SETC  '"MF='                                              00150600
&ZMS          SETC  '&ZMS.&MF"'                                         00150700
&ZMS          SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '           00150800
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00150900
&ZMS          SETC  '&ZMS "COMPLETE"'                                   00151000
&ZMS          SETC  '&ZMS OR "NOCHECK".'                                00151100
              MNOTE 8,' &ZMS '                                          00151200
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00151300
.ZG114B       ANOP  ,                                                   00151400
&XMFSCK       SETC  'COMPLETE'  SET DEFAULT KEYWORD                     00151500
.ZG114C       ANOP  ,                                                   00151600
&ZXMFSCK      SETC  'INPUT'     SET IN/OUTPUT                           00151700
.*------------------------------------------------------------------    00151800
.***AG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00151900
.ZG115        ANOP  ,                                                   00152000
&ZXMF         SETC  'INPUT'     SET IN/OUTPUT                           00152100
              AIF   (K'&XMF GT 0).ZG115E        VALID ARG               00152200
              AIF   (T'&MF EQ 'O').ZG115D       OMITTED                 00152300
&ZASYSLNDX    SETA  0                                                   00152400
.ZG115A       ANOP  ,           POSITIONAL MACRO KEY                    00152500
&ZASYSLNDX    SETA  &ZASYSLNDX+1                                        00152600
              AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG115C                   00152700
&ZTLC         SETC 'MF'                                                 00152800
              AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG115A          00152900
.ZG115B       ANOP  ,                                                   00153000
&ZXMF         SETC  ''          RESET IN/OUTPUT                         00153100
&ZMS          SETC  'THE "MF" KEY'                                      00153200
&ZMS          SETC  '&ZMS MUST CONTAIN ONE'                             00153300
              MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                    00153400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00153500
              AGO   .ZG115E                                             00153600
.ZG115C       ANOP  ,                                                   00153700
&ZXMF         SETC  ''          RESET IN/OUTPUT                         00153800
&ZMS          SETC  '"MF='                                              00153900
&ZMS          SETC  '&ZMS.&MF"'                                         00154000
&ZMS          SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '           00154100
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00154200
&ZMS          SETC  '&ZMS "E",'                                         00154300
&ZMS          SETC  '&ZMS "L",'                                         00154400
&ZMS          SETC  '&ZMS OR "M".'                                      00154500
              MNOTE 8,' &ZMS '                                          00154600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00154700
              AGO   .ZG115E                                             00154800
.ZG115D       ANOP  ,                                                   00154900
&XMF          SETC  'E'         SET DEFAULT KEYWORD                     00155000
.ZG115E       ANOP  ,                                                   00155100
.*------------------------------------------------------------------    00155200
.***AG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00155300
              AIF   (K'&MF(1) GT 0).ZG115F      PARM                    00155400
&XMF          SETC  ''          ENSURE NULL KEYWORD                     00155500
&ZXMF         SETC  ''          RESET IN/OUTPUT                         00155600
&ZMS          SETC  'THE'                                               00155700
&ZMS          SETC  '&ZMS "MF" KEY AND ITS'                             00155800
&ZMS          SETC  '&ZMS ARGUMENT ARE REQUIRED.'                       00155900
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00156000
&ZMS          SETC  '&ZMS "E",'                                         00156100
&ZMS          SETC  '&ZMS "L",'                                         00156200
&ZMS          SETC  '&ZMS OR "M".'                                      00156300
              MNOTE 8,' &ZMS '                                          00156400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00156500
.ZG115F       ANOP  ,                                                   00156600
.********************************************************************   00156700
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00156800
.********************************************************************   00156900
              ACTR  10000                                               00157000
.*-------------------------------------------------------------------   00157100
.***AG.MF03 MF=(LME)                                                    00157200
              AIF   ('&XMF' EQ 'L').ZGMFX                               00157300
              AIF   ('&XMFSCK' NE 'COMPLETE').ZGMFX                     00157400
.*----------------------------------------------------------------***   00157500
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00157600
              AIF   (N'&REQUEST LE 1).ZG2A      CK NUM                  00157700
&ZMS          SETC  '"REQUEST='                                         00157800
&ZMS          SETC  '&ZMS.&REQUEST"'                                    00157900
&ZMS          SETC  '&ZMS "REQUEST"'                                    00158000
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00158100
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00158200
.ZG2A         ANOP  ,                                                   00158300
.*-------------------------------------------------------------------   00158400
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00158500
&XREQUEST     SETC  ''          INITIALIZE XVARIABLE                    00158600
.ZG3A   AIF   ('&REQUEST(1)' NE 'COUNT').ZG4A                           00158700
&XREQUEST     SETC  'COUNT'     SET KEYWORD                             00158800
.*-------------------------------------------------------------------   00158900
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00159000
.ZG4A   AIF   ('&REQUEST(1)' NE 'SUMMARY').ZG5A                         00159100
&XREQUEST     SETC  'SUMMARY'   SET KEYWORD                             00159200
.*-------------------------------------------------------------------   00159300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00159400
.ZG5A   AIF   ('&REQUEST(1)' NE 'INFO').ZG6A                            00159500
&XREQUEST     SETC  'INFO'      SET KEYWORD                             00159600
.*-------------------------------------------------------------------   00159700
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00159800
.ZG6A   AIF   ('&REQUEST(1)' NE 'FULL').ZG7A                            00159900
&XREQUEST     SETC  'FULL'      SET KEYWORD                             00160000
.*-------------------------------------------------------------------   00160100
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00160200
.ZG7A         AIF   (K'&XREQUEST GT 0).ZG7C     KEYWORD                 00160300
              AIF   (K'&REQUEST(1) LE 0).ZG7B                           00160400
&ZMS          SETC  '"REQUEST='                                         00160500
&ZMS          SETC  '&ZMS.&REQUEST"'                                    00160600
&ZMS          SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '           00160700
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00160800
&ZMS          SETC  '&ZMS "COUNT",'                                     00160900
&ZMS          SETC  '&ZMS "SUMMARY",'                                   00161000
&ZMS          SETC  '&ZMS "INFO",'                                      00161100
&ZMS          SETC  '&ZMS OR "FULL".'                                   00161200
              MNOTE 8,' &ZMS '                                          00161300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00161400
.ZG7B         ANOP  ,                                                   00161500
&XREQUEST     SETC  'COUNT'     SET DEFAULT KEYWORD                     00161600
.ZG7C         ANOP  ,                                                   00161700
&ZXREQUEST    SETC  'INPUT'     SET IN/OUTPUT                           00161800
.*----------------------------------------------------------------***   00161900
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00162000
              AIF   (N'&STATUS LE 1).ZG9A       CK NUM                  00162100
&ZMS          SETC  '"STATUS='                                          00162200
&ZMS          SETC  '&ZMS.&STATUS"'                                     00162300
&ZMS          SETC  '&ZMS "STATUS"'                                     00162400
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00162500
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00162600
.ZG9A         ANOP  ,                                                   00162700
.*-------------------------------------------------------------------   00162800
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00162900
&XSTATUS      SETC  ''          INITIALIZE XVARIABLE                    00163000
.ZG10A   AIF   ('&STATUS(1)' NE 'ACTIVE').ZG11A                         00163100
&XSTATUS      SETC  'ACTIVE'    SET KEYWORD                             00163200
.*-------------------------------------------------------------------   00163300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00163400
.ZG11A   AIF   ('&STATUS(1)' NE 'INACTIVE').ZG12A                       00163500
&XSTATUS      SETC  'INACTIVE'  SET KEYWORD                             00163600
.*-------------------------------------------------------------------   00163700
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00163800
.ZG12A   AIF   ('&STATUS(1)' NE 'ALL').ZG13A                            00163900
&XSTATUS      SETC  'ALL'       SET KEYWORD                             00164000
.*-------------------------------------------------------------------   00164100
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00164200
.ZG13A   AIF   ('&STATUS(1)' NE 'BACKLOG').ZG14A                        00164300
&XSTATUS      SETC  'BACKLOG'   SET KEYWORD                             00164400
.*-------------------------------------------------------------------   00164500
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00164600
.ZG14A   AIF   ('&STATUS(1)' NE 'ERR').ZG15A                            00164700
&XSTATUS      SETC  'ERR'       SET KEYWORD                             00164800
.*-------------------------------------------------------------------   00164900
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00165000
.ZG15A        AIF   (K'&XSTATUS GT 0).ZG15C     KEYWORD                 00165100
              AIF   (K'&STATUS(1) LE 0).ZG15B                           00165200
&ZMS          SETC  '"STATUS='                                          00165300
&ZMS          SETC  '&ZMS.&STATUS"'                                     00165400
&ZMS          SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '           00165500
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00165600
&ZMS          SETC  '&ZMS "ACTIVE",'                                    00165700
&ZMS          SETC  '&ZMS "INACTIVE",'                                  00165800
&ZMS          SETC  '&ZMS "ALL",'                                       00165900
&ZMS          SETC  '&ZMS "BACKLOG",'                                   00166000
&ZMS          SETC  '&ZMS OR "ERR".'                                    00166100
              MNOTE 8,' &ZMS '                                          00166200
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00166300
.ZG15B        ANOP  ,                                                   00166400
&XSTATUS      SETC  'ACTIVE'    SET DEFAULT KEYWORD                     00166500
.ZG15C        ANOP  ,                                                   00166600
&ZXSTATUS     SETC  'INPUT'     SET IN/OUTPUT                           00166700
.*----------------------------------------------------------------***   00166800
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00166900
              AIF   (N'&BKLG_NUM LE 1).ZG17A    CK NUM                  00167000
&ZMS          SETC  '"BKLG_NUM='                                        00167100
&ZMS          SETC  '&ZMS.&BKLG_NUM"'                                   00167200
&ZMS          SETC  '&ZMS "BKLG_NUM"'                                   00167300
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00167400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00167500
.ZG17A        ANOP  ,                                                   00167600
.*-------------------------------------------------------------------   00167700
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00167800
&ZXBKLG_NUM   SETC  'INPUT'     SET IN/OUTPUT                           00167900
&XBKLG_NUM    SETC  '10'                                                00168000
              AIF   (K'&BKLG_NUM(1) LE 0).ZG17B  PARM                   00168100
&XBKLG_NUM    SETC  '&BKLG_NUM(1)'              SET XVARIABLE           00168200
              AIF   (N'&BKLG_NUM GT 1).ZG17B    MULTI                   00168300
&XBKLG_NUM    SETC  '&BKLG_NUM'                 SET XVARIABLE           00168400
.ZG17B        ANOP  ,                                                   00168500
.*-------------------------------------------------------------------   00168600
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00168700
              AIF   (K'&ZXBKLG_NUM LE 0).ZG17R  NOT I/O                 00168800
              AIF   ('&XBKLG_NUM'(1,1) NE '(').ZG17R                    00168900
&ZCGPR        SETC  '&XBKLG_NUM'(2,K'&XBKLG_NUM-2)                      00169000
              AIF   ('&ZCGPR'(1,1) NE '0').ZG17P                        00169100
              AIF   (K'&ZCGPR GT 2).ZG17Q                               00169200
              AIF   ('&ZCGPR' EQ '0').ZG17Q                             00169300
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00169400
              AIF   (T'&ZCGPR NE 'N').ZG17Q     INVALID REG NAME        00169500
.ZG17P        ANOP  ,                                                   00169600
              AIF   (T'&ZCGPR NE 'N').ZG17R     NON NUMERIC             00169700
              AIF   ('&ZCGPR' LT '2').ZG17Q                             00169800
              AIF   ('&ZCGPR' LE '12').ZG17R                            00169900
.ZG17Q        ANOP  ,                                                   00170000
&ZMS          SETC  '"BKLG_NUM='                                        00170100
&ZMS          SETC  '&ZMS.&BKLG_NUM"'                                   00170200
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00170300
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00170400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00170500
.ZG17R        ANOP  ,                                                   00170600
.*----------------------------------------------------------------***   00170700
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00170800
              AIF   (N'&CN LE 1).ZG20A          CK NUM                  00170900
&ZMS          SETC  '"CN='                                              00171000
&ZMS          SETC  '&ZMS.&CN"'                                         00171100
&ZMS          SETC  '&ZMS "CN"'                                         00171200
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00171300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00171400
.ZG20A        ANOP  ,                                                   00171500
.*-------------------------------------------------------------------   00171600
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00171700
&ZXCN         SETC  'INPUT'     SET IN/OUTPUT                           00171800
&XCN          SETC  'ANY_CONS'                                          00171900
              AIF   (K'&CN(1) LE 0).ZG20B       PARM                    00172000
&XCN          SETC  '&CN(1)'    SET XVARIABLE                           00172100
              AIF   (N'&CN GT 1).ZG20B          MULTI                   00172200
&XCN          SETC  '&CN'       SET XVARIABLE                           00172300
.ZG20B        ANOP  ,                                                   00172400
.*-------------------------------------------------------------------   00172500
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00172600
              AIF   (K'&ZXCN LE 0).ZG20R        NOT I/O                 00172700
         AIF   ('&XCN' EQ 'ANY_CONS').ZG20R                             00172800
              AIF   ('&XCN'(1,1) NE '(').ZG20R                          00172900
&ZCGPR        SETC  '&XCN'(2,K'&XCN-2)                                  00173000
              AIF   ('&ZCGPR'(1,1) NE '0').ZG20P                        00173100
              AIF   (K'&ZCGPR GT 2).ZG20Q                               00173200
              AIF   ('&ZCGPR' EQ '0').ZG20Q                             00173300
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00173400
              AIF   (T'&ZCGPR NE 'N').ZG20Q     INVALID REG NAME        00173500
.ZG20P        ANOP  ,                                                   00173600
              AIF   (T'&ZCGPR NE 'N').ZG20R     NON NUMERIC             00173700
              AIF   ('&ZCGPR' LT '2').ZG20Q                             00173800
              AIF   ('&ZCGPR' LE '12').ZG20R                            00173900
.ZG20Q        ANOP  ,                                                   00174000
&ZMS          SETC  '"CN='                                              00174100
&ZMS          SETC  '&ZMS.&CN"'                                         00174200
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00174300
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00174400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00174500
.ZG20R        ANOP  ,                                                   00174600
.*----------------------------------------------------------------***   00174700
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00174800
              AIF   (N'&SYS LE 1).ZG23A         CK NUM                  00174900
&ZMS          SETC  '"SYS='                                             00175000
&ZMS          SETC  '&ZMS.&SYS"'                                        00175100
&ZMS          SETC  '&ZMS "SYS"'                                        00175200
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00175300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00175400
.ZG23A        ANOP  ,                                                   00175500
.*-------------------------------------------------------------------   00175600
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00175700
&ZXSYS        SETC  'INPUT'     SET IN/OUTPUT                           00175800
&XSYS         SETC  'ANY_SYS'                                           00175900
              AIF   (K'&SYS(1) LE 0).ZG23B      PARM                    00176000
&XSYS         SETC  '&SYS(1)'   SET XVARIABLE                           00176100
              AIF   (N'&SYS GT 1).ZG23B         MULTI                   00176200
&XSYS         SETC  '&SYS'      SET XVARIABLE                           00176300
.ZG23B        ANOP  ,                                                   00176400
.*-------------------------------------------------------------------   00176500
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00176600
              AIF   (K'&ZXSYS LE 0).ZG23R       NOT I/O                 00176700
         AIF   ('&XSYS' EQ 'ANY_SYS').ZG23R                             00176800
              AIF   ('&XSYS'(1,1) NE '(').ZG23R                         00176900
&ZCGPR        SETC  '&XSYS'(2,K'&XSYS-2)                                00177000
              AIF   ('&ZCGPR'(1,1) NE '0').ZG23P                        00177100
              AIF   (K'&ZCGPR GT 2).ZG23Q                               00177200
              AIF   ('&ZCGPR' EQ '0').ZG23Q                             00177300
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00177400
              AIF   (T'&ZCGPR NE 'N').ZG23Q     INVALID REG NAME        00177500
.ZG23P        ANOP  ,                                                   00177600
              AIF   (T'&ZCGPR NE 'N').ZG23R     NON NUMERIC             00177700
              AIF   ('&ZCGPR' LT '2').ZG23Q                             00177800
              AIF   ('&ZCGPR' LE '12').ZG23R                            00177900
.ZG23Q        ANOP  ,                                                   00178000
&ZMS          SETC  '"SYS='                                             00178100
&ZMS          SETC  '&ZMS.&SYS"'                                        00178200
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00178300
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00178400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00178500
.ZG23R        ANOP  ,                                                   00178600
.*----------------------------------------------------------------***   00178700
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00178800
              AIF   (N'&KEY LE 1).ZG26A         CK NUM                  00178900
&ZMS          SETC  '"KEY='                                             00179000
&ZMS          SETC  '&ZMS.&KEY"'                                        00179100
&ZMS          SETC  '&ZMS "KEY"'                                        00179200
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00179300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00179400
.ZG26A        ANOP  ,                                                   00179500
.*-------------------------------------------------------------------   00179600
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00179700
&ZXKEY        SETC  'INPUT'     SET IN/OUTPUT                           00179800
&XKEY         SETC  'ANY_KEY'                                           00179900
              AIF   (K'&KEY(1) LE 0).ZG26B      PARM                    00180000
&XKEY         SETC  '&KEY(1)'   SET XVARIABLE                           00180100
              AIF   (N'&KEY GT 1).ZG26B         MULTI                   00180200
&XKEY         SETC  '&KEY'      SET XVARIABLE                           00180300
.ZG26B        ANOP  ,                                                   00180400
.*-------------------------------------------------------------------   00180500
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00180600
              AIF   (K'&ZXKEY LE 0).ZG26R       NOT I/O                 00180700
         AIF   ('&XKEY' EQ 'ANY_KEY').ZG26R                             00180800
              AIF   ('&XKEY'(1,1) NE '(').ZG26R                         00180900
&ZCGPR        SETC  '&XKEY'(2,K'&XKEY-2)                                00181000
              AIF   ('&ZCGPR'(1,1) NE '0').ZG26P                        00181100
              AIF   (K'&ZCGPR GT 2).ZG26Q                               00181200
              AIF   ('&ZCGPR' EQ '0').ZG26Q                             00181300
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00181400
              AIF   (T'&ZCGPR NE 'N').ZG26Q     INVALID REG NAME        00181500
.ZG26P        ANOP  ,                                                   00181600
              AIF   (T'&ZCGPR NE 'N').ZG26R     NON NUMERIC             00181700
              AIF   ('&ZCGPR' LT '2').ZG26Q                             00181800
              AIF   ('&ZCGPR' LE '12').ZG26R                            00181900
.ZG26Q        ANOP  ,                                                   00182000
&ZMS          SETC  '"KEY='                                             00182100
&ZMS          SETC  '&ZMS.&KEY"'                                        00182200
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00182300
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00182400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00182500
.ZG26R        ANOP  ,                                                   00182600
.*----------------------------------------------------------------***   00182700
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00182800
              AIF   (N'&AUTH LE 1).ZG29A        CK NUM                  00182900
&ZMS          SETC  '"AUTH='                                            00183000
&ZMS          SETC  '&ZMS.&AUTH"'                                       00183100
&ZMS          SETC  '&ZMS "AUTH"'                                       00183200
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00183300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00183400
.ZG29A        ANOP  ,                                                   00183500
.*-------------------------------------------------------------------   00183600
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00183700
&XAUTH        SETC  ''          INITIALIZE XVARIABLE                    00183800
.ZG30A   AIF   ('&AUTH(1)' NE 'ANY').ZG31A                              00183900
&XAUTH        SETC  'ANY'       SET KEYWORD                             00184000
.*-------------------------------------------------------------------   00184100
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00184200
.ZG31A   AIF   ('&AUTH(1)' NE 'MASTER').ZG32A                           00184300
&XAUTH        SETC  'MASTER'    SET KEYWORD                             00184400
.*-------------------------------------------------------------------   00184500
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00184600
.ZG32A   AIF   ('&AUTH(1)' NE 'SYS').ZG33A                              00184700
&XAUTH        SETC  'SYS'       SET KEYWORD                             00184800
.*-------------------------------------------------------------------   00184900
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00185000
.ZG33A   AIF   ('&AUTH(1)' NE 'IO').ZG34A                               00185100
&XAUTH        SETC  'IO'        SET KEYWORD                             00185200
.*-------------------------------------------------------------------   00185300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00185400
.ZG34A   AIF   ('&AUTH(1)' NE 'CONS').ZG35A                             00185500
&XAUTH        SETC  'CONS'      SET KEYWORD                             00185600
.*-------------------------------------------------------------------   00185700
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00185800
.ZG35A   AIF   ('&AUTH(1)' NE 'ALL').ZG36A                              00185900
&XAUTH        SETC  'ALL'       SET KEYWORD                             00186000
.*-------------------------------------------------------------------   00186100
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00186200
.ZG36A   AIF   ('&AUTH(1)' NE 'INFO').ZG37A                             00186300
&XAUTH        SETC  'INFO'      SET KEYWORD                             00186400
.*-------------------------------------------------------------------   00186500
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00186600
.ZG37A   AIF   ('&AUTH(1)' NE 'SYSONLY').ZG38A                          00186700
&XAUTH        SETC  'SYSONLY'   SET KEYWORD                             00186800
.*-------------------------------------------------------------------   00186900
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00187000
.ZG38A   AIF   ('&AUTH(1)' NE 'IOONLY').ZG39A                           00187100
&XAUTH        SETC  'IOONLY'    SET KEYWORD                             00187200
.*-------------------------------------------------------------------   00187300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00187400
.ZG39A   AIF   ('&AUTH(1)' NE 'CONSONLY').ZG40A                         00187500
&XAUTH        SETC  'CONSONLY'  SET KEYWORD                             00187600
.*-------------------------------------------------------------------   00187700
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00187800
.ZG40A   AIF   ('&AUTH(1)' NE 'ALLONLY').ZG41A                          00187900
&XAUTH        SETC  'ALLONLY'   SET KEYWORD                             00188000
.*-------------------------------------------------------------------   00188100
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00188200
.ZG41A   AIF   ('&AUTH(1)' NE 'INFOONLY').ZG42A                         00188300
&XAUTH        SETC  'INFOONLY'  SET KEYWORD                             00188400
.*-------------------------------------------------------------------   00188500
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00188600
.ZG42A        AIF   (K'&XAUTH GT 0).ZG42C       KEYWORD                 00188700
              AIF   (K'&AUTH(1) LE 0).ZG42B                             00188800
&ZMS          SETC  '"AUTH='                                            00188900
&ZMS          SETC  '&ZMS.&AUTH"'                                       00189000
&ZMS          SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '           00189100
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00189200
&ZMS          SETC  '&ZMS "ANY",'                                       00189300
&ZMS          SETC  '&ZMS "MASTER",'                                    00189400
&ZMS          SETC  '&ZMS "SYS",'                                       00189500
&ZMS          SETC  '&ZMS "IO",'                                        00189600
&ZMS          SETC  '&ZMS "CONS",'                                      00189700
&ZMS          SETC  '&ZMS "ALL",'                                       00189800
&ZMS          SETC  '&ZMS "INFO",'                                      00189900
&ZMS          SETC  '&ZMS "SYSONLY",'                                   00190000
&ZMS          SETC  '&ZMS "IOONLY",'                                    00190100
&ZMS          SETC  '&ZMS "CONSONLY",'                                  00190200
&ZMS          SETC  '&ZMS "ALLONLY",'                                   00190300
&ZMS          SETC  '&ZMS OR "INFOONLY".'                               00190400
              MNOTE 8,' &ZMS '                                          00190500
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00190600
.ZG42B        ANOP  ,                                                   00190700
&XAUTH        SETC  'ANY'       SET DEFAULT KEYWORD                     00190800
.ZG42C        ANOP  ,                                                   00190900
&ZXAUTH       SETC  'INPUT'     SET IN/OUTPUT                           00191000
.*----------------------------------------------------------------***   00191100
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00191200
              AIF   (N'&ATTR LE 1).ZG44A        CK NUM                  00191300
&ZMS          SETC  '"ATTR='                                            00191400
&ZMS          SETC  '&ZMS.&ATTR"'                                       00191500
&ZMS          SETC  '&ZMS "ATTR"'                                       00191600
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00191700
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00191800
.ZG44A        ANOP  ,                                                   00191900
.*-------------------------------------------------------------------   00192000
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00192100
&XATTR        SETC  ''          INITIALIZE XVARIABLE                    00192200
.ZG45A   AIF   ('&ATTR(1)' NE 'ANY').ZG46A                              00192300
&XATTR        SETC  'ANY'       SET KEYWORD                             00192400
.*-------------------------------------------------------------------   00192500
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00192600
.ZG46A   AIF   ('&ATTR(1)' NE 'YES').ZG47A                              00192700
&XATTR        SETC  'YES'       SET KEYWORD                             00192800
.*-------------------------------------------------------------------   00192900
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00193000
.ZG47A   AIF   ('&ATTR(1)' NE 'ROUT').ZG48A                             00193100
&XATTR        SETC  'ROUT'      SET KEYWORD                             00193200
.*-------------------------------------------------------------------   00193300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00193400
.ZG48A   AIF   ('&ATTR(1)' NE 'HC').ZG49A                               00193500
&XATTR        SETC  'HC'        SET KEYWORD                             00193600
.*-------------------------------------------------------------------   00193700
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00193800
.ZG49A   AIF   ('&ATTR(1)' NE 'AUTO').ZG50A                             00193900
&XATTR        SETC  'AUTO'      SET KEYWORD                             00194000
.*-------------------------------------------------------------------   00194100
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00194200
.ZG50A   AIF   ('&ATTR(1)' NE 'AUTON').ZG51A                            00194300
&XATTR        SETC  'AUTON'     SET KEYWORD                             00194400
.*-------------------------------------------------------------------   00194500
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00194600
.ZG51A   AIF   ('&ATTR(1)' NE 'MN').ZG52A                               00194700
&XATTR        SETC  'MN'        SET KEYWORD                             00194800
.*-------------------------------------------------------------------   00194900
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00195000
.ZG52A   AIF   ('&ATTR(1)' NE 'NONE').ZG53A                             00195100
&XATTR        SETC  'NONE'      SET KEYWORD                             00195200
.*-------------------------------------------------------------------   00195300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00195400
.ZG53A   AIF   ('&ATTR(1)' NE 'INTIDS').ZG54A                           00195500
&XATTR        SETC  'INTIDS'    SET KEYWORD                             00195600
.*-------------------------------------------------------------------   00195700
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00195800
.ZG54A   AIF   ('&ATTR(1)' NE 'UNKNIDS').ZG55A                          00195900
&XATTR        SETC  'UNKNIDS'   SET KEYWORD                             00196000
.*-------------------------------------------------------------------   00196100
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00196200
.ZG55A        AIF   (K'&XATTR GT 0).ZG55C       KEYWORD                 00196300
              AIF   (K'&ATTR(1) LE 0).ZG55B                             00196400
&ZMS          SETC  '"ATTR='                                            00196500
&ZMS          SETC  '&ZMS.&ATTR"'                                       00196600
&ZMS          SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '           00196700
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00196800
&ZMS          SETC  '&ZMS "ANY",'                                       00196900
&ZMS          SETC  '&ZMS "YES",'                                       00197000
&ZMS          SETC  '&ZMS "ROUT",'                                      00197100
&ZMS          SETC  '&ZMS "HC",'                                        00197200
&ZMS          SETC  '&ZMS "AUTO",'                                      00197300
&ZMS          SETC  '&ZMS "AUTON",'                                     00197400
&ZMS          SETC  '&ZMS "MN",'                                        00197500
&ZMS          SETC  '&ZMS "NONE",'                                      00197600
&ZMS          SETC  '&ZMS "INTIDS",'                                    00197700
&ZMS          SETC  '&ZMS OR "UNKNIDS".'                                00197800
              MNOTE 8,' &ZMS '                                          00197900
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00198000
.ZG55B        ANOP  ,                                                   00198100
&XATTR        SETC  'ANY'       SET DEFAULT KEYWORD                     00198200
.ZG55C        ANOP  ,                                                   00198300
&ZXATTR       SETC  'INPUT'     SET IN/OUTPUT                           00198400
.*----------------------------------------------------------------***   00198500
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00198600
              AIF   (N'&DOM LE 1).ZG57A         CK NUM                  00198700
&ZMS          SETC  '"DOM='                                             00198800
&ZMS          SETC  '&ZMS.&DOM"'                                        00198900
&ZMS          SETC  '&ZMS "DOM"'                                        00199000
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00199100
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00199200
.ZG57A        ANOP  ,                                                   00199300
.*-------------------------------------------------------------------   00199400
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00199500
&XDOM         SETC  ''          INITIALIZE XVARIABLE                    00199600
.ZG58A   AIF   ('&DOM(1)' NE 'ANY').ZG59A                               00199700
&XDOM         SETC  'ANY'       SET KEYWORD                             00199800
.*-------------------------------------------------------------------   00199900
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00200000
.ZG59A   AIF   ('&DOM(1)' NE 'YES').ZG60A                               00200100
&XDOM         SETC  'YES'       SET KEYWORD                             00200200
.*-------------------------------------------------------------------   00200300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00200400
.ZG60A   AIF   ('&DOM(1)' NE 'NORMAL').ZG61A                            00200500
&XDOM         SETC  'NORMAL'    SET KEYWORD                             00200600
.*-------------------------------------------------------------------   00200700
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00200800
.ZG61A   AIF   ('&DOM(1)' NE 'ALL').ZG62A                               00200900
&XDOM         SETC  'ALL'       SET KEYWORD                             00201000
.*-------------------------------------------------------------------   00201100
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00201200
.ZG62A   AIF   ('&DOM(1)' NE 'NONE').ZG63A                              00201300
&XDOM         SETC  'NONE'      SET KEYWORD                             00201400
.*-------------------------------------------------------------------   00201500
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00201600
.ZG63A        AIF   (K'&XDOM GT 0).ZG63C        KEYWORD                 00201700
              AIF   (K'&DOM(1) LE 0).ZG63B                              00201800
&ZMS          SETC  '"DOM='                                             00201900
&ZMS          SETC  '&ZMS.&DOM"'                                        00202000
&ZMS          SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '           00202100
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00202200
&ZMS          SETC  '&ZMS "ANY",'                                       00202300
&ZMS          SETC  '&ZMS "YES",'                                       00202400
&ZMS          SETC  '&ZMS "NORMAL",'                                    00202500
&ZMS          SETC  '&ZMS "ALL",'                                       00202600
&ZMS          SETC  '&ZMS OR "NONE".'                                   00202700
              MNOTE 8,' &ZMS '                                          00202800
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00202900
.ZG63B        ANOP  ,                                                   00203000
&XDOM         SETC  'ANY'       SET DEFAULT KEYWORD                     00203100
.ZG63C        ANOP  ,                                                   00203200
&ZXDOM        SETC  'INPUT'     SET IN/OUTPUT                           00203300
.*----------------------------------------------------------------***   00203400
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00203500
              AIF   (N'&BUFPTR LE 1).ZG65A      CK NUM                  00203600
&ZMS          SETC  '"BUFPTR='                                          00203700
&ZMS          SETC  '&ZMS.&BUFPTR"'                                     00203800
&ZMS          SETC  '&ZMS "BUFPTR"'                                     00203900
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00204000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00204100
.ZG65A        ANOP  ,                                                   00204200
.*-------------------------------------------------------------------   00204300
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00204400
&ZXBUFPTR     SETC  'INPUT'     SET IN/OUTPUT                           00204500
&XBUFPTR      SETC  '0'                                                 00204600
              AIF   (K'&BUFPTR(1) LE 0).ZG65B   PARM                    00204700
&XBUFPTR      SETC  '&BUFPTR(1)'                SET XVARIABLE           00204800
              AIF   (N'&BUFPTR GT 1).ZG65B      MULTI                   00204900
&XBUFPTR      SETC  '&BUFPTR'   SET XVARIABLE                           00205000
.ZG65B        ANOP  ,                                                   00205100
.*-------------------------------------------------------------------   00205200
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00205300
              AIF   (K'&ZXBUFPTR LE 0).ZG65R    NOT I/O                 00205400
              AIF   ('&XBUFPTR'(1,1) NE '(').ZG65R                      00205500
&ZCGPR        SETC  '&XBUFPTR'(2,K'&XBUFPTR-2)                          00205600
              AIF   ('&ZCGPR'(1,1) NE '0').ZG65P                        00205700
              AIF   (K'&ZCGPR GT 2).ZG65Q                               00205800
              AIF   ('&ZCGPR' EQ '0').ZG65Q                             00205900
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00206000
              AIF   (T'&ZCGPR NE 'N').ZG65Q     INVALID REG NAME        00206100
.ZG65P        ANOP  ,                                                   00206200
              AIF   (T'&ZCGPR NE 'N').ZG65R     NON NUMERIC             00206300
              AIF   ('&ZCGPR' LT '2').ZG65Q                             00206400
              AIF   ('&ZCGPR' LE '12').ZG65R                            00206500
.ZG65Q        ANOP  ,                                                   00206600
&ZMS          SETC  '"BUFPTR='                                          00206700
&ZMS          SETC  '&ZMS.&BUFPTR"'                                     00206800
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00206900
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00207000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00207100
.ZG65R        ANOP  ,                                                   00207200
.*----------------------------------------------------------------***   00207300
.***AG.KXVAR05 NAME, OPT RQD INPUT, KEYS -XVARIABLE KEY                 00207400
              AIF   (N'&BUFSIZE LE 1).ZG67A     CK NUM                  00207500
&ZMS          SETC  '"BUFSIZE='                                         00207600
&ZMS          SETC  '&ZMS.&BUFSIZE"'                                    00207700
&ZMS          SETC  '&ZMS "BUFSIZE"'                                    00207800
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00207900
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00208000
.ZG67A        ANOP  ,                                                   00208100
.*-------------------------------------------------------------------   00208200
.***AG.KXVAR09 NAME, OPT RQD INPUT, KEYS -XVARIABLE                     00208300
&ZXBUFSIZE    SETC  'INPUT'     SET IN/OUTPUT                           00208400
&XBUFSIZE     SETC  '&BUFSIZE(1)'               SET XVARIABLE           00208500
              AIF   (N'&BUFSIZE GT 1).ZG67B     MULTI PARMS             00208600
&XBUFSIZE     SETC  '&BUFSIZE'  SET XVARIABLE                           00208700
.ZG67B        AIF   (K'&BUFPTR(1) GT 0).ZG67C   KEY                     00208800
              AIF   (K'&BUFSIZE(1) LE 0).ZG67D  PARM                    00208900
&ZMS          SETC  '"BUFSIZE'                                          00209000
&ZMS          SETC  '&ZMS.=&BUFSIZE"'                                   00209100
&ZMS          SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                     00209200
&ZMS          SETC  '&ZMS '                                             00209300
&ZMS          SETC  '&ZMS "BUFPTR"'                                     00209400
              MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                        00209500
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00209600
              AGO   .ZG67E                                              00209700
.*                                                                      00209800
.ZG67C        AIF   (K'&BUFSIZE(1) GT 0).ZG67E  PARM                    00209900
&ZXBUFSIZE    SETC  ''          RESET IN/OUTPUT                         00210000
&ZMS          SETC  ' '                                                 00210100
&ZMS          SETC  '&ZMS "BUFSIZE" KEY AND ITS'                        00210200
              MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                    00210300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00210400
.ZG67D        ANOP  ,                                                   00210500
&XBUFSIZE     SETC  '0'         SET DEFAULT                             00210600
.ZG67E        ANOP  ,                                                   00210700
.*-------------------------------------------------------------------   00210800
.***AG.KCK02 NAME, OPT RQD INPUT, KEYS -GPR OUT OF RANGE                00210900
              AIF   (K'&ZXBUFSIZE LE 0).ZG67R   NOT I/O                 00211000
              AIF   ('&XBUFSIZE'(1,1) NE '(').ZG67R                     00211100
&ZCGPR        SETC  '&XBUFSIZE'(2,K'&XBUFSIZE-2)                        00211200
              AIF   ('&ZCGPR'(1,1) NE '0').ZG67P                        00211300
              AIF   (K'&ZCGPR GT 2).ZG67Q                               00211400
              AIF   ('&ZCGPR' EQ '0').ZG67Q                             00211500
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00211600
              AIF   (T'&ZCGPR NE 'N').ZG67Q     INVALID REG NAME        00211700
.ZG67P        ANOP  ,                                                   00211800
              AIF   (T'&ZCGPR NE 'N').ZG67R     NON NUMERIC             00211900
              AIF   ('&ZCGPR' LT '2').ZG67Q                             00212000
              AIF   ('&ZCGPR' LE '12').ZG67R                            00212100
.ZG67Q        ANOP  ,                                                   00212200
&ZMS          SETC  '"BUFSIZE='                                         00212300
&ZMS          SETC  '&ZMS.&BUFSIZE"'                                    00212400
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00212500
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00212600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00212700
.ZG67R        ANOP  ,                                                   00212800
.*----------------------------------------------------------------***   00212900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00213000
              AIF   (N'&CONSCNT LE 1).ZG71A     CK NUM                  00213100
&ZMS          SETC  '"CONSCNT='                                         00213200
&ZMS          SETC  '&ZMS.&CONSCNT"'                                    00213300
&ZMS          SETC  '&ZMS "CONSCNT"'                                    00213400
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00213500
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00213600
.ZG71A        ANOP  ,                                                   00213700
.*-------------------------------------------------------------------   00213800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00213900
&ZXCONSCNT    SETC  'INPUT'     SET IN/OUTPUT                           00214000
&XCONSCNT     SETC  '0'                                                 00214100
              AIF   (K'&CONSCNT(1) LE 0).ZG71B  PARM                    00214200
&XCONSCNT     SETC  '&CONSCNT(1)'               SET XVARIABLE           00214300
              AIF   (N'&CONSCNT GT 1).ZG71B     MULTI                   00214400
&XCONSCNT     SETC  '&CONSCNT'  SET XVARIABLE                           00214500
.ZG71B        ANOP  ,                                                   00214600
.*-------------------------------------------------------------------   00214700
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00214800
              AIF   (K'&ZXCONSCNT LE 0).ZG71R   NOT I/O                 00214900
              AIF   ('&XCONSCNT'(1,1) NE '(').ZG71R                     00215000
&ZCGPR        SETC  '&XCONSCNT'(2,K'&XCONSCNT-2)                        00215100
              AIF   ('&ZCGPR'(1,1) NE '0').ZG71P                        00215200
              AIF   (K'&ZCGPR GT 2).ZG71Q                               00215300
              AIF   ('&ZCGPR' EQ '0').ZG71Q                             00215400
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00215500
              AIF   (T'&ZCGPR NE 'N').ZG71Q     INVALID REG NAME        00215600
.ZG71P        ANOP  ,                                                   00215700
              AIF   (T'&ZCGPR NE 'N').ZG71R     NON NUMERIC             00215800
              AIF   ('&ZCGPR' LT '2').ZG71Q                             00215900
              AIF   ('&ZCGPR' LE '12').ZG71R                            00216000
.ZG71Q        ANOP  ,                                                   00216100
&ZMS          SETC  '"CONSCNT='                                         00216200
&ZMS          SETC  '&ZMS.&CONSCNT"'                                    00216300
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00216400
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00216500
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00216600
.ZG71R        ANOP  ,                                                   00216700
.*----------------------------------------------------------------***   00216800
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00216900
              AIF   (N'&TOKEN LE 1).ZG74A       CK NUM                  00217000
&ZMS          SETC  '"TOKEN='                                           00217100
&ZMS          SETC  '&ZMS.&TOKEN"'                                      00217200
&ZMS          SETC  '&ZMS "TOKEN"'                                      00217300
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00217400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00217500
.ZG74A        ANOP  ,                                                   00217600
.*-------------------------------------------------------------------   00217700
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00217800
&ZXTOKEN      SETC  'INPUT'     SET IN/OUTPUT                           00217900
&XTOKEN       SETC  '0'                                                 00218000
              AIF   (K'&TOKEN(1) LE 0).ZG74B    PARM                    00218100
&XTOKEN       SETC  '&TOKEN(1)'                 SET XVARIABLE           00218200
              AIF   (N'&TOKEN GT 1).ZG74B       MULTI                   00218300
&XTOKEN       SETC  '&TOKEN'    SET XVARIABLE                           00218400
.ZG74B        ANOP  ,                                                   00218500
.*-------------------------------------------------------------------   00218600
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00218700
              AIF   (K'&ZXTOKEN LE 0).ZG74R     NOT I/O                 00218800
              AIF   ('&XTOKEN'(1,1) NE '(').ZG74R                       00218900
&ZCGPR        SETC  '&XTOKEN'(2,K'&XTOKEN-2)                            00219000
              AIF   ('&ZCGPR'(1,1) NE '0').ZG74P                        00219100
              AIF   (K'&ZCGPR GT 2).ZG74Q                               00219200
              AIF   ('&ZCGPR' EQ '0').ZG74Q                             00219300
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00219400
              AIF   (T'&ZCGPR NE 'N').ZG74Q     INVALID REG NAME        00219500
.ZG74P        ANOP  ,                                                   00219600
              AIF   (T'&ZCGPR NE 'N').ZG74R     NON NUMERIC             00219700
              AIF   ('&ZCGPR' LT '2').ZG74Q                             00219800
              AIF   ('&ZCGPR' LE '12').ZG74R                            00219900
.ZG74Q        ANOP  ,                                                   00220000
&ZMS          SETC  '"TOKEN='                                           00220100
&ZMS          SETC  '&ZMS.&TOKEN"'                                      00220200
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00220300
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00220400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00220500
.ZG74R        ANOP  ,                                                   00220600
.*----------------------------------------------------------------***   00220700
.***AG.KXVAR05 NAME, OPT RQD INPUT, KEYS -XVARIABLE KEY                 00220800
              AIF   (N'&RECSIZE LE 1).ZG76A     CK NUM                  00220900
&ZMS          SETC  '"RECSIZE='                                         00221000
&ZMS          SETC  '&ZMS.&RECSIZE"'                                    00221100
&ZMS          SETC  '&ZMS "RECSIZE"'                                    00221200
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00221300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00221400
.ZG76A        ANOP  ,                                                   00221500
.*-------------------------------------------------------------------   00221600
.***AG.KXVAR09 NAME, OPT RQD INPUT, KEYS -XVARIABLE                     00221700
&ZXRECSIZE    SETC  'INPUT'     SET IN/OUTPUT                           00221800
&XRECSIZE     SETC  '&RECSIZE(1)'               SET XVARIABLE           00221900
              AIF   (N'&RECSIZE GT 1).ZG76B     MULTI PARMS             00222000
&XRECSIZE     SETC  '&RECSIZE'  SET XVARIABLE                           00222100
.ZG76B        AIF   (K'&TOKEN(1) GT 0).ZG76C    KEY                     00222200
              AIF   (K'&RECSIZE(1) LE 0).ZG76D  PARM                    00222300
&ZMS          SETC  '"RECSIZE'                                          00222400
&ZMS          SETC  '&ZMS.=&RECSIZE"'                                   00222500
&ZMS          SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                     00222600
&ZMS          SETC  '&ZMS '                                             00222700
&ZMS          SETC  '&ZMS "TOKEN"'                                      00222800
              MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                        00222900
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00223000
              AGO   .ZG76E                                              00223100
.*                                                                      00223200
.ZG76C        AIF   (K'&RECSIZE(1) GT 0).ZG76E  PARM                    00223300
&ZXRECSIZE    SETC  ''          RESET IN/OUTPUT                         00223400
&ZMS          SETC  ' '                                                 00223500
&ZMS          SETC  '&ZMS "RECSIZE" KEY AND ITS'                        00223600
              MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                    00223700
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00223800
.ZG76D        ANOP  ,                                                   00223900
&XRECSIZE     SETC  '0'         SET DEFAULT                             00224000
.ZG76E        ANOP  ,                                                   00224100
.*-------------------------------------------------------------------   00224200
.***AG.KCK02 NAME, OPT RQD INPUT, KEYS -GPR OUT OF RANGE                00224300
              AIF   (K'&ZXRECSIZE LE 0).ZG76R   NOT I/O                 00224400
              AIF   ('&XRECSIZE'(1,1) NE '(').ZG76R                     00224500
&ZCGPR        SETC  '&XRECSIZE'(2,K'&XRECSIZE-2)                        00224600
              AIF   ('&ZCGPR'(1,1) NE '0').ZG76P                        00224700
              AIF   (K'&ZCGPR GT 2).ZG76Q                               00224800
              AIF   ('&ZCGPR' EQ '0').ZG76Q                             00224900
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00225000
              AIF   (T'&ZCGPR NE 'N').ZG76Q     INVALID REG NAME        00225100
.ZG76P        ANOP  ,                                                   00225200
              AIF   (T'&ZCGPR NE 'N').ZG76R     NON NUMERIC             00225300
              AIF   ('&ZCGPR' LT '2').ZG76Q                             00225400
              AIF   ('&ZCGPR' LE '12').ZG76R                            00225500
.ZG76Q        ANOP  ,                                                   00225600
&ZMS          SETC  '"RECSIZE='                                         00225700
&ZMS          SETC  '&ZMS.&RECSIZE"'                                    00225800
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00225900
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00226000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00226100
.ZG76R        ANOP  ,                                                   00226200
.*----------------------------------------------------------------***   00226300
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00226400
              AIF   (N'&RETCODE LE 1).ZG80A     CK NUM                  00226500
&ZMS          SETC  '"RETCODE='                                         00226600
&ZMS          SETC  '&ZMS.&RETCODE"'                                    00226700
&ZMS          SETC  '&ZMS "RETCODE"'                                    00226800
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00226900
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00227000
.ZG80A        ANOP  ,                                                   00227100
.*-------------------------------------------------------------------   00227200
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00227300
              AIF   (K'&RETCODE(1) LE 0).ZG80C  NO PARM                 00227400
&ZXRETCODE    SETC  'OUTPUT'    SET OUTPUT                              00227500
&XRETCODE     SETC  '&RETCODE(1)'               SET XVARIABLE           00227600
              AIF   (N'&RETCODE GT 1).ZG80C                             00227700
&XRETCODE     SETC  '&RETCODE'  SET XVARIABLE                           00227800
.ZG80C        ANOP  ,                                                   00227900
.*-------------------------------------------------------------------   00228000
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00228100
              AIF   (K'&ZXRETCODE LE 0).ZG80R   NOT I/O                 00228200
              AIF   ('&XRETCODE'(1,1) NE '(').ZG80R                     00228300
&ZCGPR        SETC  '&XRETCODE'(2,K'&XRETCODE-2)                        00228400
              AIF   ('&ZCGPR'(1,1) NE '0').ZG80P                        00228500
              AIF   (K'&ZCGPR GT 2).ZG80Q                               00228600
              AIF   ('&ZCGPR' EQ '0').ZG80Q                             00228700
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00228800
              AIF   (T'&ZCGPR NE 'N').ZG80Q     INVALID REG NAME        00228900
.ZG80P        ANOP  ,                                                   00229000
              AIF   (T'&ZCGPR NE 'N').ZG80R     NON NUMERIC             00229100
              AIF   ('&ZCGPR' LT '2').ZG80Q                             00229200
              AIF   ('&ZCGPR' LE '12').ZG80R                            00229300
.ZG80Q        ANOP  ,                                                   00229400
&ZMS          SETC  '"RETCODE='                                         00229500
&ZMS          SETC  '&ZMS.&RETCODE"'                                    00229600
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00229700
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00229800
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00229900
.ZG80R        ANOP  ,                                                   00230000
.*----------------------------------------------------------------***   00230100
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00230200
              AIF   (N'&RSNCODE LE 1).ZG83A     CK NUM                  00230300
&ZMS          SETC  '"RSNCODE='                                         00230400
&ZMS          SETC  '&ZMS.&RSNCODE"'                                    00230500
&ZMS          SETC  '&ZMS "RSNCODE"'                                    00230600
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00230700
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00230800
.ZG83A        ANOP  ,                                                   00230900
.*-------------------------------------------------------------------   00231000
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00231100
              AIF   (K'&RSNCODE(1) LE 0).ZG83C  NO PARM                 00231200
&ZXRSNCODE    SETC  'OUTPUT'    SET OUTPUT                              00231300
&XRSNCODE     SETC  '&RSNCODE(1)'               SET XVARIABLE           00231400
              AIF   (N'&RSNCODE GT 1).ZG83C                             00231500
&XRSNCODE     SETC  '&RSNCODE'  SET XVARIABLE                           00231600
.ZG83C        ANOP  ,                                                   00231700
.*-------------------------------------------------------------------   00231800
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00231900
              AIF   (K'&ZXRSNCODE LE 0).ZG83R   NOT I/O                 00232000
              AIF   ('&XRSNCODE'(1,1) NE '(').ZG83R                     00232100
&ZCGPR        SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                        00232200
              AIF   ('&ZCGPR'(1,1) NE '0').ZG83P                        00232300
              AIF   (K'&ZCGPR GT 2).ZG83Q                               00232400
              AIF   ('&ZCGPR' EQ '0').ZG83Q                             00232500
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00232600
              AIF   (T'&ZCGPR NE 'N').ZG83Q     INVALID REG NAME        00232700
.ZG83P        ANOP  ,                                                   00232800
              AIF   (T'&ZCGPR NE 'N').ZG83R     NON NUMERIC             00232900
              AIF   ('&ZCGPR' LT '2').ZG83Q                             00233000
              AIF   ('&ZCGPR' LE '12').ZG83R                            00233100
.ZG83Q        ANOP  ,                                                   00233200
&ZMS          SETC  '"RSNCODE='                                         00233300
&ZMS          SETC  '&ZMS.&RSNCODE"'                                    00233400
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00233500
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00233600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00233700
.ZG83R        ANOP  ,                                                   00233800
.******************************************************************     00233900
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00234000
.******************************************************************     00234100
              ACTR  10000                                               00234200
.*----------------------------------------------------------------***   00234300
.***AH.P02 EXTRA POSITIONALS                                            00234400
              AIF   (N'&SYSLIST LE 0).ZGLISTX   NO EXTRAS               00234500
              AIF   (N'&SYSLIST NE 2).ZGLISTX1  NOT NULL                00234600
              AIF   ('&SYSLIST(1)' NE '').ZGLISTX1  NOT NULL            00234700
              AIF   ('&SYSLIST(2)' EQ '').ZGLISTX  NOT NULL             00234800
.ZGLISTX1     ANOP  ,                                                   00234900
&ZCVAL        SETC  ''          ERROR FIELD                             00235000
&ZAWRK        SETA  0           POSITIONAL NUMBER                       00235100
.ZGLIST2      ANOP  ,                                                   00235200
&ZAWRK        SETA  &ZAWRK+1    NEXT POSITIONAL                         00235300
              AIF   (&ZAWRK GT N'&SYSLIST).ZGLIST3  DONE                00235400
&ZCVAL        SETC '&ZCVAL,&SYSLIST(&ZAWRK)'    EXTRA                   00235500
              AGO   .ZGLIST2                                            00235600
.*                                                                      00235700
.ZGLIST3      ANOP  ,                                                   00235800
&ZCVAL        SETC '&ZCVAL'(2,K'&ZCVAL-1)       STRIP COMMA             00235900
&ZMS          SETC  'POSITIONAL ARGUMENT(S),'                           00236000
&ZMS          SETC  '&ZMS "&ZCVAL"'                                     00236100
&ZMS          SETC  '&ZMS CANNOT BE USED.'                              00236200
&ZMS          SETC  '&ZMS NO POSITIONAL ARGUMENTS'                      00236300
              MNOTE 8,' &ZMS ARE ALLOWED.'                              00236400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00236500
.ZGLISTX      ANOP  ,                                                   00236600
&ZASYSLNDX    SETA  0                                                   00236700
.*-------------------------------------------------------------------   00236800
.***AG.MF04 MF=(LME)                                                    00236900
.ZGMFX        ANOP  ,           END OF FULL SYNTAX CHECK                00237000
.********************************************************************   00237100
.***AE.MF01   PARTIAL MACRO SYNTAX CHECKING                             00237200
.********************************************************************   00237300
              ACTR  10000                                               00237400
.*-------------------------------------------------------------------   00237500
.***AE.MF01 MF=(LME)                                                    00237600
              AIF   ('&XMF' EQ 'L').ZEMFX                               00237700
              AIF   ('&XMFSCK' NE 'NOCHECK').ZEMFX                      00237800
.********************************************************************   00237900
.***AE.KC00 INITIALIZE KEYWORD CONTROL VARIABLES                        00238000
.********************************************************************   00238100
&XREQUEST     SETC  ''          INITIALIZE XVARIABLE                    00238200
&XSTATUS      SETC  ''          INITIALIZE XVARIABLE                    00238300
&XAUTH        SETC  ''          INITIALIZE XVARIABLE                    00238400
&XATTR        SETC  ''          INITIALIZE XVARIABLE                    00238500
&XDOM         SETC  ''          INITIALIZE XVARIABLE                    00238600
.*----------------------------------------------------------------***   00238700
.***AE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00238800
              AIF   (N'&REQUEST LE 1).ZE2A      CK NUM                  00238900
&ZMS          SETC  '"REQUEST='                                         00239000
&ZMS          SETC  '&ZMS.&REQUEST"'                                    00239100
&ZMS          SETC  '&ZMS "REQUEST"'                                    00239200
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00239300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00239400
.ZE2A         ANOP  ,                                                   00239500
.*-------------------------------------------------------------------   00239600
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00239700
.ZE3A   AIF   ('&REQUEST(1)' NE 'COUNT').ZE4A                           00239800
&XREQUEST     SETC  'COUNT'     SET KEYWORD                             00239900
.*-------------------------------------------------------------------   00240000
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00240100
.ZE4A   AIF   ('&REQUEST(1)' NE 'SUMMARY').ZE5A                         00240200
&XREQUEST     SETC  'SUMMARY'   SET KEYWORD                             00240300
.*-------------------------------------------------------------------   00240400
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00240500
.ZE5A   AIF   ('&REQUEST(1)' NE 'INFO').ZE6A                            00240600
&XREQUEST     SETC  'INFO'      SET KEYWORD                             00240700
.*-------------------------------------------------------------------   00240800
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00240900
.ZE6A   AIF   ('&REQUEST(1)' NE 'FULL').ZE7A                            00241000
&XREQUEST     SETC  'FULL'      SET KEYWORD                             00241100
.*-------------------------------------------------------------------   00241200
.***AE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00241300
.ZE7A         AIF   (K'&XREQUEST GT 0).ZE7B                             00241400
              AIF   (K'&REQUEST(1) LE 0).ZE7C                           00241500
&ZMS          SETC  '"REQUEST='                                         00241600
&ZMS          SETC  '&ZMS.&REQUEST"'                                    00241700
&ZMS          SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '           00241800
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00241900
&ZMS          SETC  '&ZMS "COUNT",'                                     00242000
&ZMS          SETC  '&ZMS "SUMMARY",'                                   00242100
&ZMS          SETC  '&ZMS "INFO",'                                      00242200
&ZMS          SETC  '&ZMS OR "FULL".'                                   00242300
              MNOTE 8,' &ZMS '                                          00242400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00242500
              AGO   .ZE7C                                               00242600
.*                                                                      00242700
.ZE7B         ANOP  ,                                                   00242800
&ZXREQUEST    SETC  'INPUT'     SET IN/OUTPUT                           00242900
.ZE7C         ANOP  ,                                                   00243000
.*----------------------------------------------------------------***   00243100
.***AE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00243200
              AIF   (N'&STATUS LE 1).ZE9A       CK NUM                  00243300
&ZMS          SETC  '"STATUS='                                          00243400
&ZMS          SETC  '&ZMS.&STATUS"'                                     00243500
&ZMS          SETC  '&ZMS "STATUS"'                                     00243600
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00243700
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00243800
.ZE9A         ANOP  ,                                                   00243900
.*-------------------------------------------------------------------   00244000
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00244100
.ZE10A   AIF   ('&STATUS(1)' NE 'ACTIVE').ZE11A                         00244200
&XSTATUS      SETC  'ACTIVE'    SET KEYWORD                             00244300
.*-------------------------------------------------------------------   00244400
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00244500
.ZE11A   AIF   ('&STATUS(1)' NE 'INACTIVE').ZE12A                       00244600
&XSTATUS      SETC  'INACTIVE'  SET KEYWORD                             00244700
.*-------------------------------------------------------------------   00244800
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00244900
.ZE12A   AIF   ('&STATUS(1)' NE 'ALL').ZE13A                            00245000
&XSTATUS      SETC  'ALL'       SET KEYWORD                             00245100
.*-------------------------------------------------------------------   00245200
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00245300
.ZE13A   AIF   ('&STATUS(1)' NE 'BACKLOG').ZE14A                        00245400
&XSTATUS      SETC  'BACKLOG'   SET KEYWORD                             00245500
.*-------------------------------------------------------------------   00245600
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00245700
.ZE14A   AIF   ('&STATUS(1)' NE 'ERR').ZE15A                            00245800
&XSTATUS      SETC  'ERR'       SET KEYWORD                             00245900
.*-------------------------------------------------------------------   00246000
.***AE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00246100
.ZE15A        AIF   (K'&XSTATUS GT 0).ZE15B                             00246200
              AIF   (K'&STATUS(1) LE 0).ZE15C                           00246300
&ZMS          SETC  '"STATUS='                                          00246400
&ZMS          SETC  '&ZMS.&STATUS"'                                     00246500
&ZMS          SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '           00246600
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00246700
&ZMS          SETC  '&ZMS "ACTIVE",'                                    00246800
&ZMS          SETC  '&ZMS "INACTIVE",'                                  00246900
&ZMS          SETC  '&ZMS "ALL",'                                       00247000
&ZMS          SETC  '&ZMS "BACKLOG",'                                   00247100
&ZMS          SETC  '&ZMS OR "ERR".'                                    00247200
              MNOTE 8,' &ZMS '                                          00247300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00247400
              AGO   .ZE15C                                              00247500
.*                                                                      00247600
.ZE15B        ANOP  ,                                                   00247700
&ZXSTATUS     SETC  'INPUT'     SET IN/OUTPUT                           00247800
.ZE15C        ANOP  ,                                                   00247900
.*----------------------------------------------------------------***   00248000
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          00248100
              AIF   (N'&BKLG_NUM LE 1).ZE17A    CK NUM                  00248200
&ZMS          SETC  '"BKLG_NUM='                                        00248300
&ZMS          SETC  '&ZMS.&BKLG_NUM"'                                   00248400
&ZMS          SETC  '&ZMS "BKLG_NUM"'                                   00248500
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00248600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00248700
.ZE17A        ANOP  ,                                                   00248800
.*-------------------------------------------------------------------   00248900
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     00249000
              AIF   (K'&BKLG_NUM(1) LE 0).ZE17B NO PRM                  00249100
&ZXBKLG_NUM   SETC  'INPUT'     SET IN/OUTPUT                           00249200
&XBKLG_NUM    SETC  '&BKLG_NUM(1)'              SET XVARIABLE           00249300
              AIF   (N'&BKLG_NUM GT 1).ZE17B                            00249400
.*            ANOP              MULTIPLE PARMS                          00249500
&XBKLG_NUM    SETC  '&BKLG_NUM'                 SET XVARIABLE           00249600
.ZE17B        ANOP  ,                                                   00249700
.*-------------------------------------------------------------------   00249800
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00249900
              AIF   (K'&ZXBKLG_NUM LE 0).ZE17R  NOT I/O                 00250000
              AIF   ('&XBKLG_NUM'(1,1) NE '(').ZE17R                    00250100
&ZCGPR        SETC  '&XBKLG_NUM'(2,K'&XBKLG_NUM-2)                      00250200
              AIF   ('&ZCGPR'(1,1) NE '0').ZE17P                        00250300
              AIF   (K'&ZCGPR GT 2).ZE17Q                               00250400
              AIF   ('&ZCGPR' EQ '0').ZE17Q                             00250500
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00250600
              AIF   (T'&ZCGPR NE 'N').ZE17Q     INVALID REG NAME        00250700
.ZE17P        ANOP  ,                                                   00250800
              AIF   (T'&ZCGPR NE 'N').ZE17R     NON NUMERIC             00250900
              AIF   ('&ZCGPR' LT '2').ZE17Q                             00251000
              AIF   ('&ZCGPR' LE '12').ZE17R                            00251100
.ZE17Q        ANOP  ,                                                   00251200
&ZMS          SETC  '"BKLG_NUM='                                        00251300
&ZMS          SETC  '&ZMS.&BKLG_NUM"'                                   00251400
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00251500
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00251600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00251700
.ZE17R        ANOP  ,                                                   00251800
.*----------------------------------------------------------------***   00251900
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          00252000
              AIF   (N'&CN LE 1).ZE20A          CK NUM                  00252100
&ZMS          SETC  '"CN='                                              00252200
&ZMS          SETC  '&ZMS.&CN"'                                         00252300
&ZMS          SETC  '&ZMS "CN"'                                         00252400
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00252500
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00252600
.ZE20A        ANOP  ,                                                   00252700
.*-------------------------------------------------------------------   00252800
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     00252900
              AIF   (K'&CN(1) LE 0).ZE20B       NO PRM                  00253000
&ZXCN         SETC  'INPUT'     SET IN/OUTPUT                           00253100
&XCN          SETC  '&CN(1)'    SET XVARIABLE                           00253200
              AIF   (N'&CN GT 1).ZE20B                                  00253300
.*            ANOP              MULTIPLE PARMS                          00253400
&XCN          SETC  '&CN'       SET XVARIABLE                           00253500
.ZE20B        ANOP  ,                                                   00253600
.*-------------------------------------------------------------------   00253700
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00253800
              AIF   (K'&ZXCN LE 0).ZE20R        NOT I/O                 00253900
              AIF   ('&XCN'(1,1) NE '(').ZE20R                          00254000
&ZCGPR        SETC  '&XCN'(2,K'&XCN-2)                                  00254100
              AIF   ('&ZCGPR'(1,1) NE '0').ZE20P                        00254200
              AIF   (K'&ZCGPR GT 2).ZE20Q                               00254300
              AIF   ('&ZCGPR' EQ '0').ZE20Q                             00254400
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00254500
              AIF   (T'&ZCGPR NE 'N').ZE20Q     INVALID REG NAME        00254600
.ZE20P        ANOP  ,                                                   00254700
              AIF   (T'&ZCGPR NE 'N').ZE20R     NON NUMERIC             00254800
              AIF   ('&ZCGPR' LT '2').ZE20Q                             00254900
              AIF   ('&ZCGPR' LE '12').ZE20R                            00255000
.ZE20Q        ANOP  ,                                                   00255100
&ZMS          SETC  '"CN='                                              00255200
&ZMS          SETC  '&ZMS.&CN"'                                         00255300
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00255400
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00255500
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00255600
.ZE20R        ANOP  ,                                                   00255700
.*----------------------------------------------------------------***   00255800
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          00255900
              AIF   (N'&SYS LE 1).ZE23A         CK NUM                  00256000
&ZMS          SETC  '"SYS='                                             00256100
&ZMS          SETC  '&ZMS.&SYS"'                                        00256200
&ZMS          SETC  '&ZMS "SYS"'                                        00256300
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00256400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00256500
.ZE23A        ANOP  ,                                                   00256600
.*-------------------------------------------------------------------   00256700
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     00256800
              AIF   (K'&SYS(1) LE 0).ZE23B      NO PRM                  00256900
&ZXSYS        SETC  'INPUT'     SET IN/OUTPUT                           00257000
&XSYS         SETC  '&SYS(1)'   SET XVARIABLE                           00257100
              AIF   (N'&SYS GT 1).ZE23B                                 00257200
.*            ANOP              MULTIPLE PARMS                          00257300
&XSYS         SETC  '&SYS'      SET XVARIABLE                           00257400
.ZE23B        ANOP  ,                                                   00257500
.*-------------------------------------------------------------------   00257600
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00257700
              AIF   (K'&ZXSYS LE 0).ZE23R       NOT I/O                 00257800
              AIF   ('&XSYS'(1,1) NE '(').ZE23R                         00257900
&ZCGPR        SETC  '&XSYS'(2,K'&XSYS-2)                                00258000
              AIF   ('&ZCGPR'(1,1) NE '0').ZE23P                        00258100
              AIF   (K'&ZCGPR GT 2).ZE23Q                               00258200
              AIF   ('&ZCGPR' EQ '0').ZE23Q                             00258300
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00258400
              AIF   (T'&ZCGPR NE 'N').ZE23Q     INVALID REG NAME        00258500
.ZE23P        ANOP  ,                                                   00258600
              AIF   (T'&ZCGPR NE 'N').ZE23R     NON NUMERIC             00258700
              AIF   ('&ZCGPR' LT '2').ZE23Q                             00258800
              AIF   ('&ZCGPR' LE '12').ZE23R                            00258900
.ZE23Q        ANOP  ,                                                   00259000
&ZMS          SETC  '"SYS='                                             00259100
&ZMS          SETC  '&ZMS.&SYS"'                                        00259200
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00259300
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00259400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00259500
.ZE23R        ANOP  ,                                                   00259600
.*----------------------------------------------------------------***   00259700
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          00259800
              AIF   (N'&KEY LE 1).ZE26A         CK NUM                  00259900
&ZMS          SETC  '"KEY='                                             00260000
&ZMS          SETC  '&ZMS.&KEY"'                                        00260100
&ZMS          SETC  '&ZMS "KEY"'                                        00260200
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00260300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00260400
.ZE26A        ANOP  ,                                                   00260500
.*-------------------------------------------------------------------   00260600
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     00260700
              AIF   (K'&KEY(1) LE 0).ZE26B      NO PRM                  00260800
&ZXKEY        SETC  'INPUT'     SET IN/OUTPUT                           00260900
&XKEY         SETC  '&KEY(1)'   SET XVARIABLE                           00261000
              AIF   (N'&KEY GT 1).ZE26B                                 00261100
.*            ANOP              MULTIPLE PARMS                          00261200
&XKEY         SETC  '&KEY'      SET XVARIABLE                           00261300
.ZE26B        ANOP  ,                                                   00261400
.*-------------------------------------------------------------------   00261500
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00261600
              AIF   (K'&ZXKEY LE 0).ZE26R       NOT I/O                 00261700
              AIF   ('&XKEY'(1,1) NE '(').ZE26R                         00261800
&ZCGPR        SETC  '&XKEY'(2,K'&XKEY-2)                                00261900
              AIF   ('&ZCGPR'(1,1) NE '0').ZE26P                        00262000
              AIF   (K'&ZCGPR GT 2).ZE26Q                               00262100
              AIF   ('&ZCGPR' EQ '0').ZE26Q                             00262200
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00262300
              AIF   (T'&ZCGPR NE 'N').ZE26Q     INVALID REG NAME        00262400
.ZE26P        ANOP  ,                                                   00262500
              AIF   (T'&ZCGPR NE 'N').ZE26R     NON NUMERIC             00262600
              AIF   ('&ZCGPR' LT '2').ZE26Q                             00262700
              AIF   ('&ZCGPR' LE '12').ZE26R                            00262800
.ZE26Q        ANOP  ,                                                   00262900
&ZMS          SETC  '"KEY='                                             00263000
&ZMS          SETC  '&ZMS.&KEY"'                                        00263100
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00263200
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00263300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00263400
.ZE26R        ANOP  ,                                                   00263500
.*----------------------------------------------------------------***   00263600
.***AE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00263700
              AIF   (N'&AUTH LE 1).ZE29A        CK NUM                  00263800
&ZMS          SETC  '"AUTH='                                            00263900
&ZMS          SETC  '&ZMS.&AUTH"'                                       00264000
&ZMS          SETC  '&ZMS "AUTH"'                                       00264100
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00264200
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00264300
.ZE29A        ANOP  ,                                                   00264400
.*-------------------------------------------------------------------   00264500
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00264600
.ZE30A   AIF   ('&AUTH(1)' NE 'ANY').ZE31A                              00264700
&XAUTH        SETC  'ANY'       SET KEYWORD                             00264800
.*-------------------------------------------------------------------   00264900
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00265000
.ZE31A   AIF   ('&AUTH(1)' NE 'MASTER').ZE32A                           00265100
&XAUTH        SETC  'MASTER'    SET KEYWORD                             00265200
.*-------------------------------------------------------------------   00265300
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00265400
.ZE32A   AIF   ('&AUTH(1)' NE 'SYS').ZE33A                              00265500
&XAUTH        SETC  'SYS'       SET KEYWORD                             00265600
.*-------------------------------------------------------------------   00265700
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00265800
.ZE33A   AIF   ('&AUTH(1)' NE 'IO').ZE34A                               00265900
&XAUTH        SETC  'IO'        SET KEYWORD                             00266000
.*-------------------------------------------------------------------   00266100
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00266200
.ZE34A   AIF   ('&AUTH(1)' NE 'CONS').ZE35A                             00266300
&XAUTH        SETC  'CONS'      SET KEYWORD                             00266400
.*-------------------------------------------------------------------   00266500
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00266600
.ZE35A   AIF   ('&AUTH(1)' NE 'ALL').ZE36A                              00266700
&XAUTH        SETC  'ALL'       SET KEYWORD                             00266800
.*-------------------------------------------------------------------   00266900
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00267000
.ZE36A   AIF   ('&AUTH(1)' NE 'INFO').ZE37A                             00267100
&XAUTH        SETC  'INFO'      SET KEYWORD                             00267200
.*-------------------------------------------------------------------   00267300
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00267400
.ZE37A   AIF   ('&AUTH(1)' NE 'SYSONLY').ZE38A                          00267500
&XAUTH        SETC  'SYSONLY'   SET KEYWORD                             00267600
.*-------------------------------------------------------------------   00267700
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00267800
.ZE38A   AIF   ('&AUTH(1)' NE 'IOONLY').ZE39A                           00267900
&XAUTH        SETC  'IOONLY'    SET KEYWORD                             00268000
.*-------------------------------------------------------------------   00268100
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00268200
.ZE39A   AIF   ('&AUTH(1)' NE 'CONSONLY').ZE40A                         00268300
&XAUTH        SETC  'CONSONLY'  SET KEYWORD                             00268400
.*-------------------------------------------------------------------   00268500
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00268600
.ZE40A   AIF   ('&AUTH(1)' NE 'ALLONLY').ZE41A                          00268700
&XAUTH        SETC  'ALLONLY'   SET KEYWORD                             00268800
.*-------------------------------------------------------------------   00268900
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00269000
.ZE41A   AIF   ('&AUTH(1)' NE 'INFOONLY').ZE42A                         00269100
&XAUTH        SETC  'INFOONLY'  SET KEYWORD                             00269200
.*-------------------------------------------------------------------   00269300
.***AE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00269400
.ZE42A        AIF   (K'&XAUTH GT 0).ZE42B                               00269500
              AIF   (K'&AUTH(1) LE 0).ZE42C                             00269600
&ZMS          SETC  '"AUTH='                                            00269700
&ZMS          SETC  '&ZMS.&AUTH"'                                       00269800
&ZMS          SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '           00269900
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00270000
&ZMS          SETC  '&ZMS "ANY",'                                       00270100
&ZMS          SETC  '&ZMS "MASTER",'                                    00270200
&ZMS          SETC  '&ZMS "SYS",'                                       00270300
&ZMS          SETC  '&ZMS "IO",'                                        00270400
&ZMS          SETC  '&ZMS "CONS",'                                      00270500
&ZMS          SETC  '&ZMS "ALL",'                                       00270600
&ZMS          SETC  '&ZMS "INFO",'                                      00270700
&ZMS          SETC  '&ZMS "SYSONLY",'                                   00270800
&ZMS          SETC  '&ZMS "IOONLY",'                                    00270900
&ZMS          SETC  '&ZMS "CONSONLY",'                                  00271000
&ZMS          SETC  '&ZMS "ALLONLY",'                                   00271100
&ZMS          SETC  '&ZMS OR "INFOONLY".'                               00271200
              MNOTE 8,' &ZMS '                                          00271300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00271400
              AGO   .ZE42C                                              00271500
.*                                                                      00271600
.ZE42B        ANOP  ,                                                   00271700
&ZXAUTH       SETC  'INPUT'     SET IN/OUTPUT                           00271800
.ZE42C        ANOP  ,                                                   00271900
.*----------------------------------------------------------------***   00272000
.***AE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00272100
              AIF   (N'&ATTR LE 1).ZE44A        CK NUM                  00272200
&ZMS          SETC  '"ATTR='                                            00272300
&ZMS          SETC  '&ZMS.&ATTR"'                                       00272400
&ZMS          SETC  '&ZMS "ATTR"'                                       00272500
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00272600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00272700
.ZE44A        ANOP  ,                                                   00272800
.*-------------------------------------------------------------------   00272900
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00273000
.ZE45A   AIF   ('&ATTR(1)' NE 'ANY').ZE46A                              00273100
&XATTR        SETC  'ANY'       SET KEYWORD                             00273200
.*-------------------------------------------------------------------   00273300
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00273400
.ZE46A   AIF   ('&ATTR(1)' NE 'YES').ZE47A                              00273500
&XATTR        SETC  'YES'       SET KEYWORD                             00273600
.*-------------------------------------------------------------------   00273700
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00273800
.ZE47A   AIF   ('&ATTR(1)' NE 'ROUT').ZE48A                             00273900
&XATTR        SETC  'ROUT'      SET KEYWORD                             00274000
.*-------------------------------------------------------------------   00274100
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00274200
.ZE48A   AIF   ('&ATTR(1)' NE 'HC').ZE49A                               00274300
&XATTR        SETC  'HC'        SET KEYWORD                             00274400
.*-------------------------------------------------------------------   00274500
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00274600
.ZE49A   AIF   ('&ATTR(1)' NE 'AUTO').ZE50A                             00274700
&XATTR        SETC  'AUTO'      SET KEYWORD                             00274800
.*-------------------------------------------------------------------   00274900
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00275000
.ZE50A   AIF   ('&ATTR(1)' NE 'AUTON').ZE51A                            00275100
&XATTR        SETC  'AUTON'     SET KEYWORD                             00275200
.*-------------------------------------------------------------------   00275300
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00275400
.ZE51A   AIF   ('&ATTR(1)' NE 'MN').ZE52A                               00275500
&XATTR        SETC  'MN'        SET KEYWORD                             00275600
.*-------------------------------------------------------------------   00275700
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00275800
.ZE52A   AIF   ('&ATTR(1)' NE 'NONE').ZE53A                             00275900
&XATTR        SETC  'NONE'      SET KEYWORD                             00276000
.*-------------------------------------------------------------------   00276100
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00276200
.ZE53A   AIF   ('&ATTR(1)' NE 'INTIDS').ZE54A                           00276300
&XATTR        SETC  'INTIDS'    SET KEYWORD                             00276400
.*-------------------------------------------------------------------   00276500
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00276600
.ZE54A   AIF   ('&ATTR(1)' NE 'UNKNIDS').ZE55A                          00276700
&XATTR        SETC  'UNKNIDS'   SET KEYWORD                             00276800
.*-------------------------------------------------------------------   00276900
.***AE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00277000
.ZE55A        AIF   (K'&XATTR GT 0).ZE55B                               00277100
              AIF   (K'&ATTR(1) LE 0).ZE55C                             00277200
&ZMS          SETC  '"ATTR='                                            00277300
&ZMS          SETC  '&ZMS.&ATTR"'                                       00277400
&ZMS          SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '           00277500
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00277600
&ZMS          SETC  '&ZMS "ANY",'                                       00277700
&ZMS          SETC  '&ZMS "YES",'                                       00277800
&ZMS          SETC  '&ZMS "ROUT",'                                      00277900
&ZMS          SETC  '&ZMS "HC",'                                        00278000
&ZMS          SETC  '&ZMS "AUTO",'                                      00278100
&ZMS          SETC  '&ZMS "AUTON",'                                     00278200
&ZMS          SETC  '&ZMS "MN",'                                        00278300
&ZMS          SETC  '&ZMS "NONE",'                                      00278400
&ZMS          SETC  '&ZMS "INTIDS",'                                    00278500
&ZMS          SETC  '&ZMS OR "UNKNIDS".'                                00278600
              MNOTE 8,' &ZMS '                                          00278700
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00278800
              AGO   .ZE55C                                              00278900
.*                                                                      00279000
.ZE55B        ANOP  ,                                                   00279100
&ZXATTR       SETC  'INPUT'     SET IN/OUTPUT                           00279200
.ZE55C        ANOP  ,                                                   00279300
.*----------------------------------------------------------------***   00279400
.***AE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00279500
              AIF   (N'&DOM LE 1).ZE57A         CK NUM                  00279600
&ZMS          SETC  '"DOM='                                             00279700
&ZMS          SETC  '&ZMS.&DOM"'                                        00279800
&ZMS          SETC  '&ZMS "DOM"'                                        00279900
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00280000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00280100
.ZE57A        ANOP  ,                                                   00280200
.*-------------------------------------------------------------------   00280300
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00280400
.ZE58A   AIF   ('&DOM(1)' NE 'ANY').ZE59A                               00280500
&XDOM         SETC  'ANY'       SET KEYWORD                             00280600
.*-------------------------------------------------------------------   00280700
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00280800
.ZE59A   AIF   ('&DOM(1)' NE 'YES').ZE60A                               00280900
&XDOM         SETC  'YES'       SET KEYWORD                             00281000
.*-------------------------------------------------------------------   00281100
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00281200
.ZE60A   AIF   ('&DOM(1)' NE 'NORMAL').ZE61A                            00281300
&XDOM         SETC  'NORMAL'    SET KEYWORD                             00281400
.*-------------------------------------------------------------------   00281500
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00281600
.ZE61A   AIF   ('&DOM(1)' NE 'ALL').ZE62A                               00281700
&XDOM         SETC  'ALL'       SET KEYWORD                             00281800
.*-------------------------------------------------------------------   00281900
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00282000
.ZE62A   AIF   ('&DOM(1)' NE 'NONE').ZE63A                              00282100
&XDOM         SETC  'NONE'      SET KEYWORD                             00282200
.*-------------------------------------------------------------------   00282300
.***AE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00282400
.ZE63A        AIF   (K'&XDOM GT 0).ZE63B                                00282500
              AIF   (K'&DOM(1) LE 0).ZE63C                              00282600
&ZMS          SETC  '"DOM='                                             00282700
&ZMS          SETC  '&ZMS.&DOM"'                                        00282800
&ZMS          SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '           00282900
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00283000
&ZMS          SETC  '&ZMS "ANY",'                                       00283100
&ZMS          SETC  '&ZMS "YES",'                                       00283200
&ZMS          SETC  '&ZMS "NORMAL",'                                    00283300
&ZMS          SETC  '&ZMS "ALL",'                                       00283400
&ZMS          SETC  '&ZMS OR "NONE".'                                   00283500
              MNOTE 8,' &ZMS '                                          00283600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00283700
              AGO   .ZE63C                                              00283800
.*                                                                      00283900
.ZE63B        ANOP  ,                                                   00284000
&ZXDOM        SETC  'INPUT'     SET IN/OUTPUT                           00284100
.ZE63C        ANOP  ,                                                   00284200
.*----------------------------------------------------------------***   00284300
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          00284400
              AIF   (N'&BUFPTR LE 1).ZE65A      CK NUM                  00284500
&ZMS          SETC  '"BUFPTR='                                          00284600
&ZMS          SETC  '&ZMS.&BUFPTR"'                                     00284700
&ZMS          SETC  '&ZMS "BUFPTR"'                                     00284800
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00284900
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00285000
.ZE65A        ANOP  ,                                                   00285100
.*-------------------------------------------------------------------   00285200
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     00285300
              AIF   (K'&BUFPTR(1) LE 0).ZE65B   NO PRM                  00285400
&ZXBUFPTR     SETC  'INPUT'     SET IN/OUTPUT                           00285500
&XBUFPTR      SETC  '&BUFPTR(1)'                SET XVARIABLE           00285600
              AIF   (N'&BUFPTR GT 1).ZE65B                              00285700
.*            ANOP              MULTIPLE PARMS                          00285800
&XBUFPTR      SETC  '&BUFPTR'   SET XVARIABLE                           00285900
.ZE65B        ANOP  ,                                                   00286000
.*-------------------------------------------------------------------   00286100
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00286200
              AIF   (K'&ZXBUFPTR LE 0).ZE65R    NOT I/O                 00286300
              AIF   ('&XBUFPTR'(1,1) NE '(').ZE65R                      00286400
&ZCGPR        SETC  '&XBUFPTR'(2,K'&XBUFPTR-2)                          00286500
              AIF   ('&ZCGPR'(1,1) NE '0').ZE65P                        00286600
              AIF   (K'&ZCGPR GT 2).ZE65Q                               00286700
              AIF   ('&ZCGPR' EQ '0').ZE65Q                             00286800
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00286900
              AIF   (T'&ZCGPR NE 'N').ZE65Q     INVALID REG NAME        00287000
.ZE65P        ANOP  ,                                                   00287100
              AIF   (T'&ZCGPR NE 'N').ZE65R     NON NUMERIC             00287200
              AIF   ('&ZCGPR' LT '2').ZE65Q                             00287300
              AIF   ('&ZCGPR' LE '12').ZE65R                            00287400
.ZE65Q        ANOP  ,                                                   00287500
&ZMS          SETC  '"BUFPTR='                                          00287600
&ZMS          SETC  '&ZMS.&BUFPTR"'                                     00287700
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00287800
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00287900
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00288000
.ZE65R        ANOP  ,                                                   00288100
.*----------------------------------------------------------------***   00288200
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY                          00288300
              AIF   (N'&BUFSIZE LE 1).ZE67A     CK NUM                  00288400
&ZMS          SETC  '"BUFSIZE='                                         00288500
&ZMS          SETC  '&ZMS.&BUFSIZE"'                                    00288600
&ZMS          SETC  '&ZMS "BUFSIZE"'                                    00288700
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00288800
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00288900
.ZE67A        ANOP  ,                                                   00289000
.*-------------------------------------------------------------------   00289100
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT                     00289200
              AIF   (K'&BUFSIZE(1) LE 0).ZE67B  NO PRM                  00289300
&ZXBUFSIZE    SETC  'INPUT'     SET IN/OUTPUT                           00289400
&XBUFSIZE     SETC  '&BUFSIZE(1)'               SET XVARIABLE           00289500
              AIF   (N'&BUFSIZE GT 1).ZE67B                             00289600
.*            ANOP              MULTIPLE PARMS                          00289700
&XBUFSIZE     SETC  '&BUFSIZE'  SET XVARIABLE                           00289800
.ZE67B        ANOP  ,                                                   00289900
.*-------------------------------------------------------------------   00290000
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00290100
              AIF   (K'&ZXBUFSIZE LE 0).ZE67R   NOT I/O                 00290200
              AIF   ('&XBUFSIZE'(1,1) NE '(').ZE67R                     00290300
&ZCGPR        SETC  '&XBUFSIZE'(2,K'&XBUFSIZE-2)                        00290400
              AIF   ('&ZCGPR'(1,1) NE '0').ZE67P                        00290500
              AIF   (K'&ZCGPR GT 2).ZE67Q                               00290600
              AIF   ('&ZCGPR' EQ '0').ZE67Q                             00290700
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00290800
              AIF   (T'&ZCGPR NE 'N').ZE67Q     INVALID REG NAME        00290900
.ZE67P        ANOP  ,                                                   00291000
              AIF   (T'&ZCGPR NE 'N').ZE67R     NON NUMERIC             00291100
              AIF   ('&ZCGPR' LT '2').ZE67Q                             00291200
              AIF   ('&ZCGPR' LE '12').ZE67R                            00291300
.ZE67Q        ANOP  ,                                                   00291400
&ZMS          SETC  '"BUFSIZE='                                         00291500
&ZMS          SETC  '&ZMS.&BUFSIZE"'                                    00291600
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00291700
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00291800
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00291900
.ZE67R        ANOP  ,                                                   00292000
.*----------------------------------------------------------------***   00292100
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          00292200
              AIF   (N'&CONSCNT LE 1).ZE71A     CK NUM                  00292300
&ZMS          SETC  '"CONSCNT='                                         00292400
&ZMS          SETC  '&ZMS.&CONSCNT"'                                    00292500
&ZMS          SETC  '&ZMS "CONSCNT"'                                    00292600
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00292700
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00292800
.ZE71A        ANOP  ,                                                   00292900
.*-------------------------------------------------------------------   00293000
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     00293100
              AIF   (K'&CONSCNT(1) LE 0).ZE71B  NO PRM                  00293200
&ZXCONSCNT    SETC  'INPUT'     SET IN/OUTPUT                           00293300
&XCONSCNT     SETC  '&CONSCNT(1)'               SET XVARIABLE           00293400
              AIF   (N'&CONSCNT GT 1).ZE71B                             00293500
.*            ANOP              MULTIPLE PARMS                          00293600
&XCONSCNT     SETC  '&CONSCNT'  SET XVARIABLE                           00293700
.ZE71B        ANOP  ,                                                   00293800
.*-------------------------------------------------------------------   00293900
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00294000
              AIF   (K'&ZXCONSCNT LE 0).ZE71R   NOT I/O                 00294100
              AIF   ('&XCONSCNT'(1,1) NE '(').ZE71R                     00294200
&ZCGPR        SETC  '&XCONSCNT'(2,K'&XCONSCNT-2)                        00294300
              AIF   ('&ZCGPR'(1,1) NE '0').ZE71P                        00294400
              AIF   (K'&ZCGPR GT 2).ZE71Q                               00294500
              AIF   ('&ZCGPR' EQ '0').ZE71Q                             00294600
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00294700
              AIF   (T'&ZCGPR NE 'N').ZE71Q     INVALID REG NAME        00294800
.ZE71P        ANOP  ,                                                   00294900
              AIF   (T'&ZCGPR NE 'N').ZE71R     NON NUMERIC             00295000
              AIF   ('&ZCGPR' LT '2').ZE71Q                             00295100
              AIF   ('&ZCGPR' LE '12').ZE71R                            00295200
.ZE71Q        ANOP  ,                                                   00295300
&ZMS          SETC  '"CONSCNT='                                         00295400
&ZMS          SETC  '&ZMS.&CONSCNT"'                                    00295500
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00295600
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00295700
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00295800
.ZE71R        ANOP  ,                                                   00295900
.*----------------------------------------------------------------***   00296000
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          00296100
              AIF   (N'&TOKEN LE 1).ZE74A       CK NUM                  00296200
&ZMS          SETC  '"TOKEN='                                           00296300
&ZMS          SETC  '&ZMS.&TOKEN"'                                      00296400
&ZMS          SETC  '&ZMS "TOKEN"'                                      00296500
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00296600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00296700
.ZE74A        ANOP  ,                                                   00296800
.*-------------------------------------------------------------------   00296900
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     00297000
              AIF   (K'&TOKEN(1) LE 0).ZE74B    NO PRM                  00297100
&ZXTOKEN      SETC  'INPUT'     SET IN/OUTPUT                           00297200
&XTOKEN       SETC  '&TOKEN(1)'                 SET XVARIABLE           00297300
              AIF   (N'&TOKEN GT 1).ZE74B                               00297400
.*            ANOP              MULTIPLE PARMS                          00297500
&XTOKEN       SETC  '&TOKEN'    SET XVARIABLE                           00297600
.ZE74B        ANOP  ,                                                   00297700
.*-------------------------------------------------------------------   00297800
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00297900
              AIF   (K'&ZXTOKEN LE 0).ZE74R     NOT I/O                 00298000
              AIF   ('&XTOKEN'(1,1) NE '(').ZE74R                       00298100
&ZCGPR        SETC  '&XTOKEN'(2,K'&XTOKEN-2)                            00298200
              AIF   ('&ZCGPR'(1,1) NE '0').ZE74P                        00298300
              AIF   (K'&ZCGPR GT 2).ZE74Q                               00298400
              AIF   ('&ZCGPR' EQ '0').ZE74Q                             00298500
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00298600
              AIF   (T'&ZCGPR NE 'N').ZE74Q     INVALID REG NAME        00298700
.ZE74P        ANOP  ,                                                   00298800
              AIF   (T'&ZCGPR NE 'N').ZE74R     NON NUMERIC             00298900
              AIF   ('&ZCGPR' LT '2').ZE74Q                             00299000
              AIF   ('&ZCGPR' LE '12').ZE74R                            00299100
.ZE74Q        ANOP  ,                                                   00299200
&ZMS          SETC  '"TOKEN='                                           00299300
&ZMS          SETC  '&ZMS.&TOKEN"'                                      00299400
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00299500
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00299600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00299700
.ZE74R        ANOP  ,                                                   00299800
.*----------------------------------------------------------------***   00299900
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY                          00300000
              AIF   (N'&RECSIZE LE 1).ZE76A     CK NUM                  00300100
&ZMS          SETC  '"RECSIZE='                                         00300200
&ZMS          SETC  '&ZMS.&RECSIZE"'                                    00300300
&ZMS          SETC  '&ZMS "RECSIZE"'                                    00300400
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00300500
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00300600
.ZE76A        ANOP  ,                                                   00300700
.*-------------------------------------------------------------------   00300800
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT                     00300900
              AIF   (K'&RECSIZE(1) LE 0).ZE76B  NO PRM                  00301000
&ZXRECSIZE    SETC  'INPUT'     SET IN/OUTPUT                           00301100
&XRECSIZE     SETC  '&RECSIZE(1)'               SET XVARIABLE           00301200
              AIF   (N'&RECSIZE GT 1).ZE76B                             00301300
.*            ANOP              MULTIPLE PARMS                          00301400
&XRECSIZE     SETC  '&RECSIZE'  SET XVARIABLE                           00301500
.ZE76B        ANOP  ,                                                   00301600
.*-------------------------------------------------------------------   00301700
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00301800
              AIF   (K'&ZXRECSIZE LE 0).ZE76R   NOT I/O                 00301900
              AIF   ('&XRECSIZE'(1,1) NE '(').ZE76R                     00302000
&ZCGPR        SETC  '&XRECSIZE'(2,K'&XRECSIZE-2)                        00302100
              AIF   ('&ZCGPR'(1,1) NE '0').ZE76P                        00302200
              AIF   (K'&ZCGPR GT 2).ZE76Q                               00302300
              AIF   ('&ZCGPR' EQ '0').ZE76Q                             00302400
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00302500
              AIF   (T'&ZCGPR NE 'N').ZE76Q     INVALID REG NAME        00302600
.ZE76P        ANOP  ,                                                   00302700
              AIF   (T'&ZCGPR NE 'N').ZE76R     NON NUMERIC             00302800
              AIF   ('&ZCGPR' LT '2').ZE76Q                             00302900
              AIF   ('&ZCGPR' LE '12').ZE76R                            00303000
.ZE76Q        ANOP  ,                                                   00303100
&ZMS          SETC  '"RECSIZE='                                         00303200
&ZMS          SETC  '&ZMS.&RECSIZE"'                                    00303300
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00303400
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00303500
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00303600
.ZE76R        ANOP  ,                                                   00303700
.*----------------------------------------------------------------***   00303800
.***AE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVAR KEY                         00303900
              AIF   (N'&RETCODE LE 1).ZE80A     CK NUM                  00304000
&ZMS          SETC  '"RETCODE='                                         00304100
&ZMS          SETC  '&ZMS.&RETCODE"'                                    00304200
&ZMS          SETC  '&ZMS "RETCODE"'                                    00304300
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00304400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00304500
.ZE80A        ANOP  ,                                                   00304600
.*-------------------------------------------------------------------   00304700
.***AE.KXVAR04 NAME, OPT OUTPUT, KEYS -XVAR ARGUMENT                    00304800
              AIF   (K'&RETCODE(1) LE 0).ZE80B  NO PRM                  00304900
&ZXRETCODE    SETC  'OUTPUT'    SET IN/OUTPUT                           00305000
&XRETCODE     SETC  '&RETCODE(1)'               SET XVARIABLE           00305100
              AIF   (N'&RETCODE GT 1).ZE80B                             00305200
.*            ANOP              MULTIPLE PARMS                          00305300
&XRETCODE     SETC  '&RETCODE'  SET XVARIABLE                           00305400
.ZE80B        ANOP  ,                                                   00305500
.*-------------------------------------------------------------------   00305600
.***AE.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00305700
              AIF   (K'&ZXRETCODE LE 0).ZE80R   NOT I/O                 00305800
              AIF   ('&XRETCODE'(1,1) NE '(').ZE80R                     00305900
&ZCGPR        SETC  '&XRETCODE'(2,K'&XRETCODE-2)                        00306000
              AIF   ('&ZCGPR'(1,1) NE '0').ZE80P                        00306100
              AIF   (K'&ZCGPR GT 2).ZE80Q                               00306200
              AIF   ('&ZCGPR' EQ '0').ZE80Q                             00306300
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00306400
              AIF   (T'&ZCGPR NE 'N').ZE80Q     INVALID REG NAME        00306500
.ZE80P        ANOP  ,                                                   00306600
              AIF   (T'&ZCGPR NE 'N').ZE80R     NON NUMERIC             00306700
              AIF   ('&ZCGPR' LT '2').ZE80Q                             00306800
              AIF   ('&ZCGPR' LE '12').ZE80R                            00306900
.ZE80Q        ANOP  ,                                                   00307000
&ZMS          SETC  '"RETCODE='                                         00307100
&ZMS          SETC  '&ZMS.&RETCODE"'                                    00307200
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00307300
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00307400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00307500
.ZE80R        ANOP  ,                                                   00307600
.*----------------------------------------------------------------***   00307700
.***AE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVAR KEY                         00307800
              AIF   (N'&RSNCODE LE 1).ZE83A     CK NUM                  00307900
&ZMS          SETC  '"RSNCODE='                                         00308000
&ZMS          SETC  '&ZMS.&RSNCODE"'                                    00308100
&ZMS          SETC  '&ZMS "RSNCODE"'                                    00308200
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00308300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00308400
.ZE83A        ANOP  ,                                                   00308500
.*-------------------------------------------------------------------   00308600
.***AE.KXVAR04 NAME, OPT OUTPUT, KEYS -XVAR ARGUMENT                    00308700
              AIF   (K'&RSNCODE(1) LE 0).ZE83B  NO PRM                  00308800
&ZXRSNCODE    SETC  'OUTPUT'    SET IN/OUTPUT                           00308900
&XRSNCODE     SETC  '&RSNCODE(1)'               SET XVARIABLE           00309000
              AIF   (N'&RSNCODE GT 1).ZE83B                             00309100
.*            ANOP              MULTIPLE PARMS                          00309200
&XRSNCODE     SETC  '&RSNCODE'  SET XVARIABLE                           00309300
.ZE83B        ANOP  ,                                                   00309400
.*-------------------------------------------------------------------   00309500
.***AE.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00309600
              AIF   (K'&ZXRSNCODE LE 0).ZE83R   NOT I/O                 00309700
              AIF   ('&XRSNCODE'(1,1) NE '(').ZE83R                     00309800
&ZCGPR        SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                        00309900
              AIF   ('&ZCGPR'(1,1) NE '0').ZE83P                        00310000
              AIF   (K'&ZCGPR GT 2).ZE83Q                               00310100
              AIF   ('&ZCGPR' EQ '0').ZE83Q                             00310200
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00310300
              AIF   (T'&ZCGPR NE 'N').ZE83Q     INVALID REG NAME        00310400
.ZE83P        ANOP  ,                                                   00310500
              AIF   (T'&ZCGPR NE 'N').ZE83R     NON NUMERIC             00310600
              AIF   ('&ZCGPR' LT '2').ZE83Q                             00310700
              AIF   ('&ZCGPR' LE '12').ZE83R                            00310800
.ZE83Q        ANOP  ,                                                   00310900
&ZMS          SETC  '"RSNCODE='                                         00311000
&ZMS          SETC  '&ZMS.&RSNCODE"'                                    00311100
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00311200
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00311300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00311400
.ZE83R        ANOP  ,                                                   00311500
.******************************************************************     00311600
.***AF.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00311700
.******************************************************************     00311800
              ACTR  10000                                               00311900
.*----------------------------------------------------------------***   00312000
.***AF.P02 EXTRA POSITIONALS                                            00312100
              AIF   (N'&SYSLIST LE 0).ZELISTX   NO EXTRAS               00312200
&ZCVAL        SETC  ''          ERROR FIELD                             00312300
&ZAWRK        SETA  0           POSITIONAL NUMBER                       00312400
.ZELIST2      ANOP  ,                                                   00312500
&ZAWRK        SETA  &ZAWRK+1    NEXT POSITIONAL                         00312600
              AIF   (&ZAWRK GT N'&SYSLIST).ZELIST3  DONE                00312700
&ZCVAL        SETC '&ZCVAL,&SYSLIST(&ZAWRK)'    EXTRA                   00312800
              AGO   .ZELIST2                                            00312900
.*                                                                      00313000
.ZELIST3      ANOP  ,                                                   00313100
&ZCVAL        SETC '&ZCVAL'(2,K'&ZCVAL-1)       STRIP COMMA             00313200
&ZMS          SETC  'POSITIONAL ARGUMENT(S),'                           00313300
&ZMS          SETC  '&ZMS "&ZCVAL"'                                     00313400
&ZMS          SETC  '&ZMS CANNOT BE USED.'                              00313500
&ZMS          SETC  '&ZMS NO POSITIONAL ARGUMENTS'                      00313600
              MNOTE 8,' &ZMS ARE ALLOWED.'                              00313700
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00313800
.ZELISTX      ANOP  ,                                                   00313900
&ZASYSLNDX    SETA  0                                                   00314000
.*-------------------------------------------------------------------   00314100
.***AE.MF02 MF=(LME)                                                    00314200
.ZEMFX        ANOP  ,           END OF PARTIAL SYNTAX CHECK             00314300
.*******************************************************************    00314400
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       00314500
.*******************************************************************    00314600
              AIF   (&ZMACRET NE 0).ZLX2        ERROR DETECTED          00314700
.*******************************************************************    00314800
.***AE.01  START OF IEEQEMCS MACRO CODE                                 00314900
.*******************************************************************    00315000
              LCLC  &M0M0001                 NAME                       00315100
&M0M0001      SETC  '&XLABEL'                SET NAME                   00315200
              AIF   (K'&XLABEL NE 0).XLAB2                              00315300
&M0M0001      SETC  'M00M&SYSNDX'            DEFAULT NAME               00315400
.*                                                                      00315500
.XLAB2        ANOP  ,                                                   00315600
              AIF   ('&XMF' EQ 'L').XLAB3                               00315700
&M0M0001 DS    0H                             IEEQEMCS-1                00315800
.XLAB3        ANOP  ,                                                   00315900
.*******************************************************************    00316000
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              00316100
.*******************************************************************    00316200
              PUSH  PRINT                                               00316300
              AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON          00316400
              PRINT OFF         ++ PR01                                 00316500
              AGO   .ZPRNTXX                                            00316600
.ZPRINTX      PRINT ON                                                  00316700
.ZPRNTXX      ANOP  ,                                                   00316800
.********************************************************************   00316900
.***AL.L01 INTERNAL ARRAY TO PRODUCE FORMATTED CODE                     00317000
.********************************************************************   00317100
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       00317200
                      LCLA  &ZOPN1         INVOCATION INDEX             00317300
                      LCLC  &ZOPL(4095)    LABEL                        00317400
                      LCLC  &ZOPO(4095)    OPERATION                    00317500
                      LCLC  &ZOPV(4095)    VALUE                        00317600
                      LCLC  &ZOPD(4095)    DESCRIPTION                  00317700
.*                                                                      00317800
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     00317900
.******************************************************************     00318000
.***AL.L08 IEEQEMCS FMT=LIST MF=L PARAMETER AREA                        00318100
.******************************************************************     00318200
                      AIF   ('&XMF' NE 'L').ZLMFLX  NOT MF=LIST         00318300
.*-------------------------------------------------------------------   00318400
.***AM.L00  IEEQEMCS FMT=LIST name                                      00318500
                      AIF   ('&XMF' NE 'L').ZLMFSL2M                    00318600
&ZOPN                 SETA &ZOPN+1                                      00318700
&ZOPL(&ZOPN)          SETC '&M0M0001'                                   00318800
&ZOPO(&ZOPN)          SETC 'EQU'                                        00318900
&ZOPV(&ZOPN)          SETC '&XMFCTRL'                                   00319000
&ZOPD(&ZOPN)          SETC '++ IEEQEMCS NAME'                           00319100
.ZLMFSL2M             ANOP  ,                                           00319200
.*-------------------------------------------------------------------   00319300
.***AM.L01  IEEQEMCS FMT=LIST PARAMETERS                                00319400
&ZOPN                 SETA &ZOPN+1                                      00319500
&ZOPL(&ZOPN)          SETC '&XMFCTRL'                                   00319600
&ZOPO(&ZOPN)          SETC 'DS'                                         00319700
&ZOPV(&ZOPN)          SETC '&XMFATTR'                                   00319800
&ZOPD(&ZOPN)          SETC '++ IEEQEMCS PARM LIST'                      00319900
.*-------------------------------------------------------------------   00320000
.***AM.L09  XQEPLACRN CL4                                               00320100
&ZOPN                 SETA &ZOPN+1                                      00320200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XQEPLACRN'                        00320300
&ZOPO(&ZOPN)          SETC 'DS'                                         00320400
&ZOPV(&ZOPN)          SETC 'CL4'                                        00320500
&ZOPD(&ZOPN)          SETC '++ CONSTANT '                               00320600
.*-------------------------------------------------------------------   00320700
.***AM.L09  XPLISTLEN XL2                                               00320800
&ZOPN                 SETA &ZOPN+1                                      00320900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPLISTLEN'                        00321000
&ZOPO(&ZOPN)          SETC 'DS'                                         00321100
&ZOPV(&ZOPN)          SETC 'XL2'                                        00321200
&ZOPD(&ZOPN)          SETC '++ INPUT '                                  00321300
.*-------------------------------------------------------------------   00321400
.***AM.L02 XVERSION XL1                                                 00321500
&ZOPN                 SETA &ZOPN+1                                      00321600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XVERSION'                         00321700
&ZOPO(&ZOPN)          SETC 'DS'                                         00321800
&ZOPV(&ZOPN)          SETC 'XL1'                                        00321900
&ZOPD(&ZOPN)          SETC '++ INPUT XVERSION'                          00322000
.*-------------------------------------------------------------------   00322100
.***AM.L05 XREQUEST XL1                                                 00322200
&ZOPN                 SETA &ZOPN+1                                      00322300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XREQUEST'                         00322400
&ZOPO(&ZOPN)          SETC 'DS'                                         00322500
&ZOPV(&ZOPN)          SETC 'XL1'                                        00322600
&ZOPD(&ZOPN)          SETC '++ &ZXREQUEST XREQUEST'                     00322700
.*                                                                      00322800
&ZOPN                 SETA  &ZOPN+1                                     00322900
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._COUNT'                           00323000
&ZOPO(&ZOPN)          SETC  'EQU'                                       00323100
&ZOPV(&ZOPN)          SETC  '1'                                         00323200
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00323300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).COUNT'                        00323400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00323500
.*                                                                      00323600
&ZOPN                 SETA  &ZOPN+1                                     00323700
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._SUMMARY'                         00323800
&ZOPO(&ZOPN)          SETC  'EQU'                                       00323900
&ZOPV(&ZOPN)          SETC  '2'                                         00324000
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00324100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).SUMMARY'                      00324200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00324300
.*                                                                      00324400
&ZOPN                 SETA  &ZOPN+1                                     00324500
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._INFO'                            00324600
&ZOPO(&ZOPN)          SETC  'EQU'                                       00324700
&ZOPV(&ZOPN)          SETC  '3'                                         00324800
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00324900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).INFO'                         00325000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00325100
.*                                                                      00325200
&ZOPN                 SETA  &ZOPN+1                                     00325300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._FULL'                            00325400
&ZOPO(&ZOPN)          SETC  'EQU'                                       00325500
&ZOPV(&ZOPN)          SETC  '4'                                         00325600
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00325700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).FULL'                         00325800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00325900
.*-------------------------------------------------------------------   00326000
.***AM.L03 XSTATUS BL.8                                                 00326100
&ZOPN                 SETA &ZOPN+1                                      00326200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSTATUS'                          00326300
&ZOPO(&ZOPN)          SETC 'DS'                                         00326400
&ZOPV(&ZOPN)          SETC 'BL.8'                                       00326500
&ZOPD(&ZOPN)          SETC '++ INPUT'                                   00326600
.*                                                                      00326700
&ZOPN                 SETA  &ZOPN+1                                     00326800
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._ST_ACTIVE'                       00326900
&ZOPO(&ZOPN)          SETC  'EQU'                                       00327000
&ZOPV(&ZOPN)          SETC  'B''10000000'''                             00327100
&ZOPD(&ZOPN)          SETC  '++ XSTATUS.'                               00327200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ACTIVE'                       00327300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00327400
.*                                                                      00327500
&ZOPN                 SETA  &ZOPN+1                                     00327600
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._ST_INACTIVE'                     00327700
&ZOPO(&ZOPN)          SETC  'EQU'                                       00327800
&ZOPV(&ZOPN)          SETC  'B''01000000'''                             00327900
&ZOPD(&ZOPN)          SETC  '++ XSTATUS.'                               00328000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).INACTIVE'                     00328100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00328200
.*                                                                      00328300
&ZOPN                 SETA  &ZOPN+1                                     00328400
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._ST_ALL'                          00328500
&ZOPO(&ZOPN)          SETC  'EQU'                                       00328600
&ZOPV(&ZOPN)          SETC  'B''00100000'''                             00328700
&ZOPD(&ZOPN)          SETC  '++ XSTATUS.'                               00328800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ALL'                          00328900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00329000
.*                                                                      00329100
&ZOPN                 SETA  &ZOPN+1                                     00329200
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._ST_BACKLOG'                      00329300
&ZOPO(&ZOPN)          SETC  'EQU'                                       00329400
&ZOPV(&ZOPN)          SETC  'B''00010000'''                             00329500
&ZOPD(&ZOPN)          SETC  '++ XSTATUS.'                               00329600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).BACKLOG'                      00329700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00329800
.*                                                                      00329900
&ZOPN                 SETA  &ZOPN+1                                     00330000
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._ST_ERR'                          00330100
&ZOPO(&ZOPN)          SETC  'EQU'                                       00330200
&ZOPV(&ZOPN)          SETC  'B''00001000'''                             00330300
&ZOPD(&ZOPN)          SETC  '++ XSTATUS.'                               00330400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ERR'                          00330500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00330600
.*-------------------------------------------------------------------   00330700
.***AM.L03 XFLAG1 BL.8                                                  00330800
&ZOPN                 SETA &ZOPN+1                                      00330900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XFLAG1'                           00331000
&ZOPO(&ZOPN)          SETC 'DS'                                         00331100
&ZOPV(&ZOPN)          SETC 'BL.8'                                       00331200
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'                             00331300
.*                                                                      00331400
&ZOPN                 SETA  &ZOPN+1                                     00331500
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_CN'                      00331600
&ZOPO(&ZOPN)          SETC  'EQU'                                       00331700
&ZOPV(&ZOPN)          SETC  'B''10000000'''                             00331800
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               00331900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).CN'                           00332000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00332100
.*                                                                      00332200
&ZOPN                 SETA  &ZOPN+1                                     00332300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_SYS'                     00332400
&ZOPO(&ZOPN)          SETC  'EQU'                                       00332500
&ZOPV(&ZOPN)          SETC  'B''01000000'''                             00332600
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               00332700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).SYS'                          00332800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00332900
.*                                                                      00333000
&ZOPN                 SETA  &ZOPN+1                                     00333100
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_KEY'                     00333200
&ZOPO(&ZOPN)          SETC  'EQU'                                       00333300
&ZOPV(&ZOPN)          SETC  'B''00100000'''                             00333400
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               00333500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).KEY'                          00333600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00333700
.*-------------------------------------------------------------------   00333800
.***AM.L09  XRSV0001 CL2                                                00333900
&ZOPN                 SETA &ZOPN+1                                      00334000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0001'                         00334100
&ZOPO(&ZOPN)          SETC 'DS'                                         00334200
&ZOPV(&ZOPN)          SETC 'CL2'                                        00334300
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00334400
.*-------------------------------------------------------------------   00334500
.***AM.L09  XBKLG_NUM F                                                 00334600
&ZOPN                 SETA &ZOPN+1                                      00334700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XBKLG_NUM'                        00334800
&ZOPO(&ZOPN)          SETC 'DS'                                         00334900
&ZOPV(&ZOPN)          SETC 'F'                                          00335000
&ZOPD(&ZOPN)          SETC '++ &ZXBKLG_NUM '                            00335100
.*-------------------------------------------------------------------   00335200
.***AM.L09  XCN CL8                                                     00335300
&ZOPN                 SETA &ZOPN+1                                      00335400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCN'                              00335500
&ZOPO(&ZOPN)          SETC 'DS'                                         00335600
&ZOPV(&ZOPN)          SETC 'CL8'                                        00335700
&ZOPD(&ZOPN)          SETC '++ &ZXCN '                                  00335800
.*-------------------------------------------------------------------   00335900
.***AM.L09  XSYS CL8                                                    00336000
&ZOPN                 SETA &ZOPN+1                                      00336100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSYS'                             00336200
&ZOPO(&ZOPN)          SETC 'DS'                                         00336300
&ZOPV(&ZOPN)          SETC 'CL8'                                        00336400
&ZOPD(&ZOPN)          SETC '++ &ZXSYS '                                 00336500
.*-------------------------------------------------------------------   00336600
.***AM.L09  XKEY CL8                                                    00336700
&ZOPN                 SETA &ZOPN+1                                      00336800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XKEY'                             00336900
&ZOPO(&ZOPN)          SETC 'DS'                                         00337000
&ZOPV(&ZOPN)          SETC 'CL8'                                        00337100
&ZOPD(&ZOPN)          SETC '++ &ZXKEY '                                 00337200
.*-------------------------------------------------------------------   00337300
.***AM.L03 XAUTH BL.16                                                  00337400
&ZOPN                 SETA &ZOPN+1                                      00337500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XAUTH'                            00337600
&ZOPO(&ZOPN)          SETC 'DS'                                         00337700
&ZOPV(&ZOPN)          SETC 'BL.16'                                      00337800
&ZOPD(&ZOPN)          SETC '++ INPUT'                                   00337900
.*                                                                      00338000
&ZOPN                 SETA  &ZOPN+1                                     00338100
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._AUTH_ANY'                        00338200
&ZOPO(&ZOPN)          SETC  'EQU'                                       00338300
&ZOPV(&ZOPN)          SETC  'B''1000000000000000'''                     00338400
&ZOPD(&ZOPN)          SETC  '++ XAUTH.'                                 00338500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ANY'                          00338600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00338700
.*                                                                      00338800
&ZOPN                 SETA  &ZOPN+1                                     00338900
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._AUTH_MASTER'                     00339000
&ZOPO(&ZOPN)          SETC  'EQU'                                       00339100
&ZOPV(&ZOPN)          SETC  'B''0100000000000000'''                     00339200
&ZOPD(&ZOPN)          SETC  '++ XAUTH.'                                 00339300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).MASTER'                       00339400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00339500
.*                                                                      00339600
&ZOPN                 SETA  &ZOPN+1                                     00339700
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._AUTH_SYS'                        00339800
&ZOPO(&ZOPN)          SETC  'EQU'                                       00339900
&ZOPV(&ZOPN)          SETC  'B''0010000000000000'''                     00340000
&ZOPD(&ZOPN)          SETC  '++ XAUTH.'                                 00340100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).SYS'                          00340200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00340300
.*                                                                      00340400
&ZOPN                 SETA  &ZOPN+1                                     00340500
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._AUTH_IO'                         00340600
&ZOPO(&ZOPN)          SETC  'EQU'                                       00340700
&ZOPV(&ZOPN)          SETC  'B''0001000000000000'''                     00340800
&ZOPD(&ZOPN)          SETC  '++ XAUTH.'                                 00340900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).IO'                           00341000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00341100
.*                                                                      00341200
&ZOPN                 SETA  &ZOPN+1                                     00341300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._AUTH_CONS'                       00341400
&ZOPO(&ZOPN)          SETC  'EQU'                                       00341500
&ZOPV(&ZOPN)          SETC  'B''0000100000000000'''                     00341600
&ZOPD(&ZOPN)          SETC  '++ XAUTH.'                                 00341700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).CONS'                         00341800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00341900
.*                                                                      00342000
&ZOPN                 SETA  &ZOPN+1                                     00342100
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._AUTH_INFO'                       00342200
&ZOPO(&ZOPN)          SETC  'EQU'                                       00342300
&ZOPV(&ZOPN)          SETC  'B''0000010000000000'''                     00342400
&ZOPD(&ZOPN)          SETC  '++ XAUTH.'                                 00342500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).INFO'                         00342600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00342700
.*                                                                      00342800
&ZOPN                 SETA  &ZOPN+1                                     00342900
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._AUTH_ALL'                        00343000
&ZOPO(&ZOPN)          SETC  'EQU'                                       00343100
&ZOPV(&ZOPN)          SETC  'B''0000001000000000'''                     00343200
&ZOPD(&ZOPN)          SETC  '++ XAUTH.'                                 00343300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ALL'                          00343400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00343500
.*                                                                      00343600
&ZOPN                 SETA  &ZOPN+1                                     00343700
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._AUTH_SYSONLY'                    00343800
&ZOPO(&ZOPN)          SETC  'EQU'                                       00343900
&ZOPV(&ZOPN)          SETC  'B''0000000100000000'''                     00344000
&ZOPD(&ZOPN)          SETC  '++ XAUTH.'                                 00344100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).SYSONLY'                      00344200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00344300
.*                                                                      00344400
&ZOPN                 SETA  &ZOPN+1                                     00344500
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._AUTH_IOONLY'                     00344600
&ZOPO(&ZOPN)          SETC  'EQU'                                       00344700
&ZOPV(&ZOPN)          SETC  'B''0000000010000000'''                     00344800
&ZOPD(&ZOPN)          SETC  '++ XAUTH.'                                 00344900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).IOONLY'                       00345000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00345100
.*                                                                      00345200
&ZOPN                 SETA  &ZOPN+1                                     00345300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._AUTH_CONSONLY'                   00345400
&ZOPO(&ZOPN)          SETC  'EQU'                                       00345500
&ZOPV(&ZOPN)          SETC  'B''0000000001000000'''                     00345600
&ZOPD(&ZOPN)          SETC  '++ XAUTH.'                                 00345700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).CONSONLY'                     00345800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00345900
.*                                                                      00346000
&ZOPN                 SETA  &ZOPN+1                                     00346100
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._AUTH_INFOONLY'                   00346200
&ZOPO(&ZOPN)          SETC  'EQU'                                       00346300
&ZOPV(&ZOPN)          SETC  'B''0000000000100000'''                     00346400
&ZOPD(&ZOPN)          SETC  '++ XAUTH.'                                 00346500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).INFOONLY'                     00346600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00346700
.*                                                                      00346800
&ZOPN                 SETA  &ZOPN+1                                     00346900
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._AUTH_ALLONLY'                    00347000
&ZOPO(&ZOPN)          SETC  'EQU'                                       00347100
&ZOPV(&ZOPN)          SETC  'B''0000000000010000'''                     00347200
&ZOPD(&ZOPN)          SETC  '++ XAUTH.'                                 00347300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ALLONLY'                      00347400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00347500
.*-------------------------------------------------------------------   00347600
.***AM.L03 XATTR BL.16                                                  00347700
&ZOPN                 SETA &ZOPN+1                                      00347800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XATTR'                            00347900
&ZOPO(&ZOPN)          SETC 'DS'                                         00348000
&ZOPV(&ZOPN)          SETC 'BL.16'                                      00348100
&ZOPD(&ZOPN)          SETC '++ INPUT'                                   00348200
.*                                                                      00348300
&ZOPN                 SETA  &ZOPN+1                                     00348400
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._ATTR_ANY'                        00348500
&ZOPO(&ZOPN)          SETC  'EQU'                                       00348600
&ZOPV(&ZOPN)          SETC  'B''1000000000000000'''                     00348700
&ZOPD(&ZOPN)          SETC  '++ XATTR.'                                 00348800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ANY'                          00348900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00349000
.*                                                                      00349100
&ZOPN                 SETA  &ZOPN+1                                     00349200
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._ATTR_ROUT'                       00349300
&ZOPO(&ZOPN)          SETC  'EQU'                                       00349400
&ZOPV(&ZOPN)          SETC  'B''0100000000000000'''                     00349500
&ZOPD(&ZOPN)          SETC  '++ XATTR.'                                 00349600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ROUT'                         00349700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00349800
.*                                                                      00349900
&ZOPN                 SETA  &ZOPN+1                                     00350000
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._ATTR_HC'                         00350100
&ZOPO(&ZOPN)          SETC  'EQU'                                       00350200
&ZOPV(&ZOPN)          SETC  'B''0000100000000000'''                     00350300
&ZOPD(&ZOPN)          SETC  '++ XATTR.'                                 00350400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).HC'                           00350500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00350600
.*                                                                      00350700
&ZOPN                 SETA  &ZOPN+1                                     00350800
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._ATTR_AUTO'                       00350900
&ZOPO(&ZOPN)          SETC  'EQU'                                       00351000
&ZOPV(&ZOPN)          SETC  'B''0000010000000000'''                     00351100
&ZOPD(&ZOPN)          SETC  '++ XATTR.'                                 00351200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).AUTO'                         00351300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00351400
.*                                                                      00351500
&ZOPN                 SETA  &ZOPN+1                                     00351600
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._ATTR_AUTON'                      00351700
&ZOPO(&ZOPN)          SETC  'EQU'                                       00351800
&ZOPV(&ZOPN)          SETC  'B''0000001000000000'''                     00351900
&ZOPD(&ZOPN)          SETC  '++ XATTR.'                                 00352000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).AUTON'                        00352100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00352200
.*                                                                      00352300
&ZOPN                 SETA  &ZOPN+1                                     00352400
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._ATTR_MN'                         00352500
&ZOPO(&ZOPN)          SETC  'EQU'                                       00352600
&ZOPV(&ZOPN)          SETC  'B''0000000100000000'''                     00352700
&ZOPD(&ZOPN)          SETC  '++ XATTR.'                                 00352800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).MN'                           00352900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00353000
.*                                                                      00353100
&ZOPN                 SETA  &ZOPN+1                                     00353200
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._ATTR_NONE'                       00353300
&ZOPO(&ZOPN)          SETC  'EQU'                                       00353400
&ZOPV(&ZOPN)          SETC  'B''0000000010000000'''                     00353500
&ZOPD(&ZOPN)          SETC  '++ XATTR.'                                 00353600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).NONE'                         00353700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00353800
.*                                                                      00353900
&ZOPN                 SETA  &ZOPN+1                                     00354000
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._ATTR_YES'                        00354100
&ZOPO(&ZOPN)          SETC  'EQU'                                       00354200
&ZOPV(&ZOPN)          SETC  'B''0000000001000000'''                     00354300
&ZOPD(&ZOPN)          SETC  '++ XATTR.'                                 00354400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).YES'                          00354500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00354600
.*                                                                      00354700
&ZOPN                 SETA  &ZOPN+1                                     00354800
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._ATTR_INTIDS'                     00354900
&ZOPO(&ZOPN)          SETC  'EQU'                                       00355000
&ZOPV(&ZOPN)          SETC  'B''0000000000100000'''                     00355100
&ZOPD(&ZOPN)          SETC  '++ XATTR.'                                 00355200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).INTIDS'                       00355300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00355400
.*                                                                      00355500
&ZOPN                 SETA  &ZOPN+1                                     00355600
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._ATTR_UNKNIDS'                    00355700
&ZOPO(&ZOPN)          SETC  'EQU'                                       00355800
&ZOPV(&ZOPN)          SETC  'B''0000000000010000'''                     00355900
&ZOPD(&ZOPN)          SETC  '++ XATTR.'                                 00356000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).UNKNIDS'                      00356100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00356200
.*-------------------------------------------------------------------   00356300
.***AM.L03 XDOM BL.8                                                    00356400
&ZOPN                 SETA &ZOPN+1                                      00356500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XDOM'                             00356600
&ZOPO(&ZOPN)          SETC 'DS'                                         00356700
&ZOPV(&ZOPN)          SETC 'BL.8'                                       00356800
&ZOPD(&ZOPN)          SETC '++ INPUT'                                   00356900
.*                                                                      00357000
&ZOPN                 SETA  &ZOPN+1                                     00357100
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._DOM_ANY'                         00357200
&ZOPO(&ZOPN)          SETC  'EQU'                                       00357300
&ZOPV(&ZOPN)          SETC  'B''10000000'''                             00357400
&ZOPD(&ZOPN)          SETC  '++ XDOM.'                                  00357500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ANY'                          00357600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00357700
.*                                                                      00357800
&ZOPN                 SETA  &ZOPN+1                                     00357900
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._DOM_NORM'                        00358000
&ZOPO(&ZOPN)          SETC  'EQU'                                       00358100
&ZOPV(&ZOPN)          SETC  'B''01000000'''                             00358200
&ZOPD(&ZOPN)          SETC  '++ XDOM.'                                  00358300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).NORMAL'                       00358400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00358500
.*                                                                      00358600
&ZOPN                 SETA  &ZOPN+1                                     00358700
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._DOM_ALL'                         00358800
&ZOPO(&ZOPN)          SETC  'EQU'                                       00358900
&ZOPV(&ZOPN)          SETC  'B''00100000'''                             00359000
&ZOPD(&ZOPN)          SETC  '++ XDOM.'                                  00359100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ALL'                          00359200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00359300
.*                                                                      00359400
&ZOPN                 SETA  &ZOPN+1                                     00359500
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._DOM_NONE'                        00359600
&ZOPO(&ZOPN)          SETC  'EQU'                                       00359700
&ZOPV(&ZOPN)          SETC  'B''00010000'''                             00359800
&ZOPD(&ZOPN)          SETC  '++ XDOM.'                                  00359900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).NONE'                         00360000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00360100
.*                                                                      00360200
&ZOPN                 SETA  &ZOPN+1                                     00360300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._DOM_YES'                         00360400
&ZOPO(&ZOPN)          SETC  'EQU'                                       00360500
&ZOPV(&ZOPN)          SETC  'B''00001000'''                             00360600
&ZOPD(&ZOPN)          SETC  '++ XDOM.'                                  00360700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).YES'                          00360800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00360900
.*-------------------------------------------------------------------   00361000
.***AM.L09  XRSV0002 CL3                                                00361100
&ZOPN                 SETA &ZOPN+1                                      00361200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0002'                         00361300
&ZOPO(&ZOPN)          SETC 'DS'                                         00361400
&ZOPV(&ZOPN)          SETC 'CL3'                                        00361500
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00361600
.*-------------------------------------------------------------------   00361700
.***AM.L09  XBUFPTR A                                                   00361800
&ZOPN                 SETA &ZOPN+1                                      00361900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XBUFPTR'                          00362000
&ZOPO(&ZOPN)          SETC 'DS'                                         00362100
&ZOPV(&ZOPN)          SETC 'A'                                          00362200
&ZOPD(&ZOPN)          SETC '++ &ZXBUFPTR '                              00362300
.*-------------------------------------------------------------------   00362400
.***AM.L09  XBUFSIZE F                                                  00362500
&ZOPN                 SETA &ZOPN+1                                      00362600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XBUFSIZE'                         00362700
&ZOPO(&ZOPN)          SETC 'DS'                                         00362800
&ZOPV(&ZOPN)          SETC 'F'                                          00362900
&ZOPD(&ZOPN)          SETC '++ &ZXBUFSIZE '                             00363000
.*-------------------------------------------------------------------   00363100
.***AM.L09  XRECSIZE A                                                  00363200
&ZOPN                 SETA &ZOPN+1                                      00363300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRECSIZE'                         00363400
&ZOPO(&ZOPN)          SETC 'DS'                                         00363500
&ZOPV(&ZOPN)          SETC 'A'                                          00363600
&ZOPD(&ZOPN)          SETC '++ &ZXRECSIZE '                             00363700
.*-------------------------------------------------------------------   00363800
.***AM.L09  XCONSCNT A                                                  00363900
&ZOPN                 SETA &ZOPN+1                                      00364000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCONSCNT'                         00364100
&ZOPO(&ZOPN)          SETC 'DS'                                         00364200
&ZOPV(&ZOPN)          SETC 'A'                                          00364300
&ZOPD(&ZOPN)          SETC '++ &ZXCONSCNT '                             00364400
.*-------------------------------------------------------------------   00364500
.***AM.L09  XTOKEN A                                                    00364600
&ZOPN                 SETA &ZOPN+1                                      00364700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XTOKEN'                           00364800
&ZOPO(&ZOPN)          SETC 'DS'                                         00364900
&ZOPV(&ZOPN)          SETC 'A'                                          00365000
&ZOPD(&ZOPN)          SETC '++ &ZXTOKEN '                               00365100
.*-------------------------------------------------------------------   00365200
.***AM.L10 END OF IEEQEMCS LIST PARAMETERS                              00365300
&ZOPN                 SETA &ZOPN+1                                      00365400
&ZOPL(&ZOPN)          SETC '&XMFCTRL.L'                                 00365500
&ZOPO(&ZOPN)          SETC 'EQU'                                        00365600
&ZOPV(&ZOPN)          SETC '*-&XMFCTRL'                                 00365700
&ZOPD(&ZOPN)          SETC '++ LENGTH OF PLIST'                         00365800
.*                                                                      00365900
&ZOPN                 SETA &ZOPN+1                                      00366000
&ZOPL(&ZOPN)          SETC ' '                                          00366100
&ZOPO(&ZOPN)          SETC 'SPACE'                                      00366200
&ZOPV(&ZOPN)          SETC '1'                                          00366300
&ZOPD(&ZOPN)          SETC ' '                                          00366400
.*-------------------------------------------------------------------   00366500
.***AL.L09 IEEQEMCS FMT=LIST MF=L PARAMETER AREA DEFINED                00366600
                      AGO   .ZMFLX         EXIT, MF=L DONE              00366700
.*                                                                      00366800
.ZLMFLX               ANOP  ,                                           00366900
.*-------------------------------------------------------------------   00367000
.***AL.L13 SET ZPLLEN TO ITS APPROPRIATE VALUE                          00367100
&ZPLLEN               SETA 68                                           00367200
.*                                                                      00367300
.******************************************************************     00367400
.***AI.L01 IEEQEMCS FMT=LIST FILL IN PARAMETER AREA                     00367500
.******************************************************************     00367600
                      ACTR  10000                                       00367700
&ZCVAL                SETC  'LA'           ASSUME XA MODE               00367800
                      AIF   ('&SYSASCE' EQ 'P').ZIMFXA  SYSSTATE PRI    00367900
&ZCVAL                SETC  'LAE'          XAX MODE                     00368000
.ZIMFXA               ANOP ,                                            00368100
.*                                                                      00368200
                      AIF   ('&XMFCTRL'(1,1) NE '(').ZIMFN2  NOT GPR    00368300
&ZCGPR                SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)  GET GPR         00368400
                      AIF   ('&ZCGPR' EQ 'GPR1').ZIMFNX                 00368500
                      AIF   ('&ZCGPR' EQ 'GPR01').ZIMFNX                00368600
                      AIF   ('&ZCGPR' EQ 'REG1').ZIMFNX                 00368700
                      AIF   ('&ZCGPR' EQ 'REG01').ZIMFNX                00368800
                      AIF   ('&ZCGPR' EQ 'R1').ZIMFNX                   00368900
                      AIF   ('&ZCGPR' EQ '1').ZIMFNX                    00369000
                      AIF   ('&ZCGPR' EQ '01').ZIMFNX                   00369100
&ZOPN                 SETA  &ZOPN+1                                     00369200
&ZOPL(&ZOPN)          SETC  ' '                                         00369300
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00369400
&ZOPV(&ZOPN)          SETC  '1,0(,&ZCGPR)'                              00369500
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00369600
                      AGO   .ZIMFNX                                     00369700
.*                                                                      00369800
.ZIMFN2               ANOP ,                                            00369900
                      AIF   (&SYSALVL EQ 0).ZIMFNX1                     00370000
                      AIF   ('&XMF' NE 'S').ZIMFNX1                     00370100
                      AIF   ('&ZCVAL' NE 'LAE').ZIMFNX                  00370200
&ZOPN                 SETA  &ZOPN+1                                     00370300
&ZOPL(&ZOPN)          SETC  ' '                                         00370400
&ZOPO(&ZOPN)          SETC  'LAE'                                       00370500
&ZOPV(&ZOPN)          SETC  '1,0(1,0)'                                  00370600
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00370700
                      AGO   .ZIMFNX                                     00370800
.ZIMFNX1              ANOP ,                                            00370900
&ZOPN                 SETA  &ZOPN+1                                     00371000
&ZOPL(&ZOPN)          SETC  ' '                                         00371100
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00371200
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL'                                00371300
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00371400
.ZIMFNX               ANOP ,                                            00371500
.********************************************************************   00371600
.***AI.L02 IEEQEMCS FMT=LIST INITIALIZE PARAMETER AREA                  00371700
.********************************************************************   00371800
.***AI.L03 MF=(LME)                                                     00371900
                      AIF   ('&XMF' EQ 'L').ZIMFLX                      00372000
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZIMFLX            00372100
.*                                                                      00372200
&ZOPN                 SETA  &ZOPN+1                                     00372300
&ZOPL(&ZOPN)          SETC  ' '                                         00372400
&ZOPO(&ZOPN)          SETC  'XC'                                        00372500
&ZOPV(&ZOPN)          SETC  '0(&ZPLLEN,1),0(1)'                         00372600
&ZOPD(&ZOPN)          SETC  '++ INITIALIZE'                             00372700
.ZIMFLX               ANOP  ,                                           00372800
.*-------------------------------------------------------------------   00372900
.***AI.L60 XQEPLACRN CL4                                                00373000
&ZOPN                 SETA  &ZOPN+1                                     00373100
&ZOPL(&ZOPN)          SETC  ' '                                         00373200
&ZOPO(&ZOPN)          SETC  'MVC'                                       00373300
&ZOPV(&ZOPN)          SETC  '0(4,1),=CL4''QEPL'''                       00373400
&ZOPD(&ZOPN)          SETC  '++ CL4 CONSTANT'                           00373500
.*-------------------------------------------------------------------   00373600
.***AI.L04 XPLISTLEN XL2                                                00373700
&ZOPN                 SETA  &ZOPN+1                                     00373800
&ZOPL(&ZOPN)          SETC  ' '                                         00373900
&ZOPO(&ZOPN)          SETC  'MVC'                                       00374000
&ZOPV(&ZOPN)          SETC  '4(2,1),=AL2(&ZPLLEN)'                      00374100
&ZOPD(&ZOPN)          SETC  '++ INPUT XPLISTLEN XL2'                    00374200
.*-------------------------------------------------------------------   00374300
.***AI.L04B XVERSION XL1                                                00374400
                      AIF   (&XPLISTVER EQ 0).ZIMFVX                    00374500
                      AIF   ('&XMFSCK' EQ 'COMPLETE').ZIMFVY            00374600
.ZIMFVX               ANOP  ,                                           00374700
                      AIF   ('&PLISTVER' EQ '').ZIMFVZ                  00374800
                      AIF   ('&XMFSCK' EQ 'COMPLETE').ZIMFVZ            00374900
.ZIMFVY               ANOP  ,                                           00375000
&ZOPN                 SETA  &ZOPN+1                                     00375100
&ZOPL(&ZOPN)          SETC  ' '                                         00375200
&ZOPO(&ZOPN)          SETC  'MVI'                                       00375300
&ZOPV(&ZOPN)          SETC  '6(1),&XPLISTVER'                           00375400
&ZOPD(&ZOPN)          SETC  '++ INPUT XVERSION XL1'                     00375500
.ZIMFVZ               ANOP  ,                                           00375600
.*-------------------------------------------------------------------   00375700
.***AI.L07 XREQUEST AL1                                                 00375800
&ZW                   SETC  ''                                          00375900
.*-------------------------------------------------------------------   00376000
.***AI.L15 XREQUEST "COUNT" AL1                                         00376100
         AIF   ('&XREQUEST' NE 'COUNT').ZI5A                            00376200
&ZW                   SETC  '1'                                         00376300
.ZI5A                 ANOP  ,                                           00376400
.*-------------------------------------------------------------------   00376500
.***AI.L15 XREQUEST "SUMMARY" AL1                                       00376600
         AIF   ('&XREQUEST' NE 'SUMMARY').ZI6A                          00376700
&ZW                   SETC  '2'                                         00376800
.ZI6A                 ANOP  ,                                           00376900
.*-------------------------------------------------------------------   00377000
.***AI.L15 XREQUEST "INFO" AL1                                          00377100
         AIF   ('&XREQUEST' NE 'INFO').ZI7A                             00377200
&ZW                   SETC  '3'                                         00377300
.ZI7A                 ANOP  ,                                           00377400
.*-------------------------------------------------------------------   00377500
.***AI.L15 XREQUEST "FULL" AL1                                          00377600
         AIF   ('&XREQUEST' NE 'FULL').ZI8A                             00377700
&ZW                   SETC  '4'                                         00377800
.ZI8A                 ANOP  ,                                           00377900
.*-------------------------------------------------------------------   00378000
.***AI.L17 XREQUEST AL1                                                 00378100
                      AIF   ('&ZW' NE '0').ZI8C                         00378200
                      AIF   ('&XMFSCK' EQ 'COMPLETE').ZI8B              00378300
.ZI8C                 ANOP  ,                                           00378400
                      AIF   ('&ZW' EQ '').ZI8B                          00378500
.*                                                                      00378600
&ZOPN                 SETA  &ZOPN+1                                     00378700
&ZOPL(&ZOPN)          SETC  ' '                                         00378800
&ZOPO(&ZOPN)          SETC  'MVI'                                       00378900
&ZOPV(&ZOPN)          SETC  '7(1),&ZW'                                  00379000
&ZOPD(&ZOPN)          SETC  '++ &ZXREQUEST XREQUEST'                    00379100
.ZI8B                 ANOP  ,                                           00379200
.*-------------------------------------------------------------------   00379300
.***AI.L05 XSTATUS BL1                                                  00379400
&ZW                   SETC  ''                                          00379500
&ZCLNG                SETC  ''             RESET BIT ON FLAG            00379600
&ZMS                  SETC  ''                                          00379700
&ZC                   SETC  ''                                          00379800
.*-------------------------------------------------------------------   00379900
.***AI.L08 XSTATUS "ACTIVE"                                             00380000
.***      BL1'1XXXXXXX'                                                 00380100
         AIF   ('&XSTATUS' NE 'ACTIVE').ZI10A                           00380200
&ZW                   SETC  '&ZW.1'                                     00380300
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00380400
&ZMS                  SETC  '&ZMS.1'                                    00380500
                      AGO   .ZI10C                                      00380600
.*                                                                      00380700
.ZI10A                ANOP  ,                                           00380800
&ZW                   SETC  '&ZW.0'                                     00380900
         AIF   ('&ZXSTATUS' EQ '').ZI10B                                00381000
&ZMS                  SETC  '&ZMS.0'                                    00381100
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00381200
                      AGO   .ZI10C                                      00381300
.*                                                                      00381400
.ZI10B                ANOP  ,                                           00381500
&ZMS                  SETC  '&ZMS.1'                                    00381600
.ZI10C                ANOP  ,                                           00381700
.*-------------------------------------------------------------------   00381800
.***AI.L08 XSTATUS "INACTIVE"                                           00381900
.***      BL1'X1XXXXXX'                                                 00382000
         AIF   ('&XSTATUS' NE 'INACTIVE').ZI11A                         00382100
&ZW                   SETC  '&ZW.1'                                     00382200
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00382300
&ZMS                  SETC  '&ZMS.1'                                    00382400
                      AGO   .ZI11C                                      00382500
.*                                                                      00382600
.ZI11A                ANOP  ,                                           00382700
&ZW                   SETC  '&ZW.0'                                     00382800
         AIF   ('&ZXSTATUS' EQ '').ZI11B                                00382900
&ZMS                  SETC  '&ZMS.0'                                    00383000
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00383100
                      AGO   .ZI11C                                      00383200
.*                                                                      00383300
.ZI11B                ANOP  ,                                           00383400
&ZMS                  SETC  '&ZMS.1'                                    00383500
.ZI11C                ANOP  ,                                           00383600
.*-------------------------------------------------------------------   00383700
.***AI.L08 XSTATUS "ALL"                                                00383800
.***      BL1'XX1XXXXX'                                                 00383900
         AIF   ('&XSTATUS' NE 'ALL').ZI12A                              00384000
&ZW                   SETC  '&ZW.1'                                     00384100
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00384200
&ZMS                  SETC  '&ZMS.1'                                    00384300
                      AGO   .ZI12C                                      00384400
.*                                                                      00384500
.ZI12A                ANOP  ,                                           00384600
&ZW                   SETC  '&ZW.0'                                     00384700
         AIF   ('&ZXSTATUS' EQ '').ZI12B                                00384800
&ZMS                  SETC  '&ZMS.0'                                    00384900
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00385000
                      AGO   .ZI12C                                      00385100
.*                                                                      00385200
.ZI12B                ANOP  ,                                           00385300
&ZMS                  SETC  '&ZMS.1'                                    00385400
.ZI12C                ANOP  ,                                           00385500
.*-------------------------------------------------------------------   00385600
.***AI.L08 XSTATUS "BACKLOG"                                            00385700
.***      BL1'XXX1XXXX'                                                 00385800
         AIF   ('&XSTATUS' NE 'BACKLOG').ZI13A                          00385900
&ZW                   SETC  '&ZW.1'                                     00386000
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00386100
&ZMS                  SETC  '&ZMS.1'                                    00386200
                      AGO   .ZI13C                                      00386300
.*                                                                      00386400
.ZI13A                ANOP  ,                                           00386500
&ZW                   SETC  '&ZW.0'                                     00386600
         AIF   ('&ZXSTATUS' EQ '').ZI13B                                00386700
&ZMS                  SETC  '&ZMS.0'                                    00386800
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00386900
                      AGO   .ZI13C                                      00387000
.*                                                                      00387100
.ZI13B                ANOP  ,                                           00387200
&ZMS                  SETC  '&ZMS.1'                                    00387300
.ZI13C                ANOP  ,                                           00387400
.*-------------------------------------------------------------------   00387500
.***AI.L08 XSTATUS "ERR"                                                00387600
.***      BL1'XXXX1XXX'                                                 00387700
         AIF   ('&XSTATUS' NE 'ERR').ZI14A                              00387800
&ZW                   SETC  '&ZW.1000'                                  00387900
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00388000
&ZMS                  SETC  '&ZMS.1111'                                 00388100
                      AGO   .ZI14C                                      00388200
.*                                                                      00388300
.ZI14A                ANOP  ,                                           00388400
&ZW                   SETC  '&ZW.0000'                                  00388500
         AIF   ('&ZXSTATUS' EQ '').ZI14B                                00388600
&ZMS                  SETC  '&ZMS.0111'                                 00388700
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00388800
                      AGO   .ZI14C                                      00388900
.*                                                                      00389000
.ZI14B                ANOP  ,                                           00389100
&ZMS                  SETC  '&ZMS.1111'                                 00389200
.ZI14C                ANOP  ,                                           00389300
.*-------------------------------------------------------------------   00389400
.***AI.L11 XSTATUS BL1                                                  00389500
                      AIF   ('&XMFSCK' NE 'NOCHECK').ZI14D              00389600
                      AIF   ('&ZC' NE 'YES').ZI14D                      00389700
&ZOPN                 SETA  &ZOPN+1                                     00389800
&ZOPL(&ZOPN)          SETC  ' '                                         00389900
&ZOPO(&ZOPN)          SETC  'NI'                                        00390000
&ZOPV(&ZOPN)          SETC  '8(1),B''&ZMS'''                            00390100
&ZOPD(&ZOPN)          SETC  '++ INPUT BL1'                              00390200
.ZI14D                ANOP  ,                                           00390300
                      AIF   ('&ZCLNG' NE 'YES').ZI14E  ALL ZERO BITS    00390400
&ZOPN                 SETA  &ZOPN+1                                     00390500
&ZOPL(&ZOPN)          SETC  ' '                                         00390600
&ZOPO(&ZOPN)          SETC  'OI'                                        00390700
&ZOPV(&ZOPN)          SETC  '8(1),B''&ZW'''                             00390800
&ZOPD(&ZOPN)          SETC  '++ INPUT BL1'                              00390900
.ZI14E                ANOP  ,                                           00391000
.*-------------------------------------------------------------------   00391100
.***AI.L05 XFLAG1 BL1                                                   00391200
&ZW                   SETC  ''                                          00391300
&ZCLNG                SETC  ''             RESET BIT ON FLAG            00391400
&ZMS                  SETC  ''                                          00391500
&ZC                   SETC  ''                                          00391600
.*-------------------------------------------------------------------   00391700
.***AI.L08 XFLAG1 "CN"                                                  00391800
.***      BL1'1XXXXXXX'                                                 00391900
         AIF   ('&CN' EQ '').ZI16A                                      00392000
         AIF   ('&CN' EQ 'ANY_CONS').ZI16A                              00392100
&ZW                   SETC  '&ZW.1'                                     00392200
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00392300
&ZMS                  SETC  '&ZMS.0'                                    00392400
                      AGO   .ZI16C                                      00392500
.*                                                                      00392600
.ZI16A                ANOP  ,                                           00392700
&ZW                   SETC  '&ZW.0'                                     00392800
&ZMS                  SETC  '&ZMS.1'                                    00392900
.ZI16C                ANOP  ,                                           00393000
.*-------------------------------------------------------------------   00393100
.***AI.L08 XFLAG1 "SYS"                                                 00393200
.***      BL1'X1XXXXXX'                                                 00393300
         AIF   ('&SYS' EQ '').ZI17A                                     00393400
         AIF   ('&SYS' EQ 'ANY_SYS').ZI17A                              00393500
&ZW                   SETC  '&ZW.1'                                     00393600
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00393700
&ZMS                  SETC  '&ZMS.0'                                    00393800
                      AGO   .ZI17C                                      00393900
.*                                                                      00394000
.ZI17A                ANOP  ,                                           00394100
&ZW                   SETC  '&ZW.0'                                     00394200
&ZMS                  SETC  '&ZMS.1'                                    00394300
.ZI17C                ANOP  ,                                           00394400
.*-------------------------------------------------------------------   00394500
.***AI.L08 XFLAG1 "KEY"                                                 00394600
.***      BL1'XX1XXXXX'                                                 00394700
         AIF   ('&KEY' EQ '').ZI18A                                     00394800
         AIF   ('&KEY' EQ 'ANY_KEY').ZI18A                              00394900
&ZW                   SETC  '&ZW.100000'                                00395000
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00395100
&ZMS                  SETC  '&ZMS.011111'                               00395200
                      AGO   .ZI18C                                      00395300
.*                                                                      00395400
.ZI18A                ANOP  ,                                           00395500
&ZW                   SETC  '&ZW.000000'                                00395600
&ZMS                  SETC  '&ZMS.111111'                               00395700
.ZI18C                ANOP  ,                                           00395800
.*-------------------------------------------------------------------   00395900
.***AI.L11 XFLAG1 BL1                                                   00396000
                      AIF   ('&XMFSCK' NE 'NOCHECK').ZI18D              00396100
                      AIF   ('&ZC' NE 'YES').ZI18D                      00396200
&ZOPN                 SETA  &ZOPN+1                                     00396300
&ZOPL(&ZOPN)          SETC  ' '                                         00396400
&ZOPO(&ZOPN)          SETC  'NI'                                        00396500
&ZOPV(&ZOPN)          SETC  '9(1),B''&ZMS'''                            00396600
&ZOPD(&ZOPN)          SETC  '++ INPUT BL1'                              00396700
.ZI18D                ANOP  ,                                           00396800
                      AIF   ('&ZCLNG' NE 'YES').ZI18E  ALL ZERO BITS    00396900
&ZOPN                 SETA  &ZOPN+1                                     00397000
&ZOPL(&ZOPN)          SETC  ' '                                         00397100
&ZOPO(&ZOPN)          SETC  'OI'                                        00397200
&ZOPV(&ZOPN)          SETC  '9(1),B''&ZW'''                             00397300
&ZOPD(&ZOPN)          SETC  '++ INPUT BL1'                              00397400
.ZI18E                ANOP  ,                                           00397500
.*-------------------------------------------------------------------   00397600
.***AI.L25  XBKLG_NUM F                                                 00397700
                      AIF   ('&ZXBKLG_NUM' EQ '').ZI20E                 00397800
                      AIF   ('&ZXBKLG_NUM' EQ 'OUTPUT').ZI20E           00397900
&ZCGPR                SETC  '&XBKLG_NUM'                                00398000
.*                                                                      00398100
                      AIF   ('&XBKLG_NUM'(1,1) NE '(').ZI20B            00398200
&ZCGPR   SETC  '0('.'&XBKLG_NUM'(2,K'&XBKLG_NUM-2).')'                  00398300
                      AGO   .ZI20D                                      00398400
.ZI20B                ANOP  ,                                           00398500
.*                                                                      00398600
&ZC                   SETC  '&XBKLG_NUM'(1,1)                           00398700
                      AIF   (T'&ZC NE 'N').ZI20D                        00398800
&ZC                   SETC  '&XBKLG_NUM'                                00398900
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI20D               00399000
&ZCGPR                SETC  '=FL4''&XBKLG_NUM'''                        00399100
.*                                                                      00399200
.ZI20D                ANOP  ,                                           00399300
.*                                                                      00399400
&ZOPN                 SETA  &ZOPN+1                                     00399500
&ZOPL(&ZOPN)          SETC  ' '                                         00399600
&ZOPO(&ZOPN)          SETC  'MVC'                                       00399700
&ZOPV(&ZOPN)          SETC  '12(4,1),&ZCGPR'                            00399800
&ZOPD(&ZOPN)          SETC  '++ &ZXBKLG_NUM XBKLG_NUM'                  00399900
.*                                                                      00400000
.ZI20E                ANOP  ,                                           00400100
.*-------------------------------------------------------------------   00400200
.***AI.L18  XCN CL8                                                     00400300
         AIF   ('&XCN' NE 'ANY_CONS').ZI21                              00400400
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZI21  CK *        00400500
&ZXCN                 SETC  ''             RESET INPUT/OUTPUT           00400600
.ZI21                 ANOP  ,                                           00400700
.*-------------------------------------------------------------------   00400800
.***AI.L25  XCN CL8                                                     00400900
                      AIF   ('&ZXCN' EQ '').ZI21E                       00401000
                      AIF   ('&ZXCN' EQ 'OUTPUT').ZI21E                 00401100
&ZCGPR                SETC  '&XCN'                                      00401200
         AIF   ('&XCN' NE 'ANY_CONS').ZI21A                             00401300
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI21E                          00401400
.*                                                                      00401500
&ZCGPR                SETC  '=XL8''00'''                                00401600
.ZI21A                ANOP  ,                                           00401700
.*                                                                      00401800
                      AIF   ('&XCN'(1,1) NE '(').ZI21B                  00401900
&ZCGPR   SETC  '0('.'&XCN'(2,K'&XCN-2).')'                              00402000
.ZI21B                ANOP  ,                                           00402100
.*                                                                      00402200
&ZOPN                 SETA  &ZOPN+1                                     00402300
&ZOPL(&ZOPN)          SETC  ' '                                         00402400
&ZOPO(&ZOPN)          SETC  'MVC'                                       00402500
&ZOPV(&ZOPN)          SETC  '16(8,1),&ZCGPR'                            00402600
&ZOPD(&ZOPN)          SETC  '++ &ZXCN XCN'                              00402700
.*                                                                      00402800
.ZI21E                ANOP  ,                                           00402900
.*-------------------------------------------------------------------   00403000
.***AI.L18  XSYS CL8                                                    00403100
         AIF   ('&XSYS' NE 'ANY_SYS').ZI22                              00403200
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZI22  CK *        00403300
&ZXSYS                SETC  ''             RESET INPUT/OUTPUT           00403400
.ZI22                 ANOP  ,                                           00403500
.*-------------------------------------------------------------------   00403600
.***AI.L25  XSYS CL8                                                    00403700
                      AIF   ('&ZXSYS' EQ '').ZI22E                      00403800
                      AIF   ('&ZXSYS' EQ 'OUTPUT').ZI22E                00403900
&ZCGPR                SETC  '&XSYS'                                     00404000
         AIF   ('&XSYS' NE 'ANY_SYS').ZI22A                             00404100
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI22E                          00404200
.*                                                                      00404300
&ZCGPR                SETC  '=XL8''00'''                                00404400
.ZI22A                ANOP  ,                                           00404500
.*                                                                      00404600
                      AIF   ('&XSYS'(1,1) NE '(').ZI22B                 00404700
&ZCGPR   SETC  '0('.'&XSYS'(2,K'&XSYS-2).')'                            00404800
.ZI22B                ANOP  ,                                           00404900
.*                                                                      00405000
&ZOPN                 SETA  &ZOPN+1                                     00405100
&ZOPL(&ZOPN)          SETC  ' '                                         00405200
&ZOPO(&ZOPN)          SETC  'MVC'                                       00405300
&ZOPV(&ZOPN)          SETC  '24(8,1),&ZCGPR'                            00405400
&ZOPD(&ZOPN)          SETC  '++ &ZXSYS XSYS'                            00405500
.*                                                                      00405600
.ZI22E                ANOP  ,                                           00405700
.*-------------------------------------------------------------------   00405800
.***AI.L18  XKEY CL8                                                    00405900
         AIF   ('&XKEY' NE 'ANY_KEY').ZI23                              00406000
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZI23  CK *        00406100
&ZXKEY                SETC  ''             RESET INPUT/OUTPUT           00406200
.ZI23                 ANOP  ,                                           00406300
.*-------------------------------------------------------------------   00406400
.***AI.L25  XKEY CL8                                                    00406500
                      AIF   ('&ZXKEY' EQ '').ZI23E                      00406600
                      AIF   ('&ZXKEY' EQ 'OUTPUT').ZI23E                00406700
&ZCGPR                SETC  '&XKEY'                                     00406800
         AIF   ('&XKEY' NE 'ANY_KEY').ZI23A                             00406900
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI23E                          00407000
.*                                                                      00407100
&ZCGPR                SETC  '=XL8''00'''                                00407200
.ZI23A                ANOP  ,                                           00407300
.*                                                                      00407400
                      AIF   ('&XKEY'(1,1) NE '(').ZI23B                 00407500
&ZCGPR   SETC  '0('.'&XKEY'(2,K'&XKEY-2).')'                            00407600
.ZI23B                ANOP  ,                                           00407700
.*                                                                      00407800
&ZOPN                 SETA  &ZOPN+1                                     00407900
&ZOPL(&ZOPN)          SETC  ' '                                         00408000
&ZOPO(&ZOPN)          SETC  'MVC'                                       00408100
&ZOPV(&ZOPN)          SETC  '32(8,1),&ZCGPR'                            00408200
&ZOPD(&ZOPN)          SETC  '++ &ZXKEY XKEY'                            00408300
.*                                                                      00408400
.ZI23E                ANOP  ,                                           00408500
.*-------------------------------------------------------------------   00408600
.***AI.L05 XAUTH BL2                                                    00408700
&ZW                   SETC  ''                                          00408800
&ZCLNG                SETC  ''             RESET BIT ON FLAG            00408900
&ZMS                  SETC  ''                                          00409000
&ZC                   SETC  ''                                          00409100
.*-------------------------------------------------------------------   00409200
.***AI.L08 XAUTH "ANY"                                                  00409300
.***      BL2'1XXXXXXXXXXXXXXX'                                         00409400
         AIF   ('&XAUTH' NE 'ANY').ZI25A                                00409500
&ZW                   SETC  '&ZW.1'                                     00409600
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00409700
&ZMS                  SETC  '&ZMS.1'                                    00409800
                      AGO   .ZI25C                                      00409900
.*                                                                      00410000
.ZI25A                ANOP  ,                                           00410100
&ZW                   SETC  '&ZW.0'                                     00410200
         AIF   ('&ZXAUTH' EQ '').ZI25B                                  00410300
&ZMS                  SETC  '&ZMS.0'                                    00410400
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00410500
                      AGO   .ZI25C                                      00410600
.*                                                                      00410700
.ZI25B                ANOP  ,                                           00410800
&ZMS                  SETC  '&ZMS.1'                                    00410900
.ZI25C                ANOP  ,                                           00411000
.*-------------------------------------------------------------------   00411100
.***AI.L08 XAUTH "MASTER"                                               00411200
.***      BL2'X1XXXXXXXXXXXXXX'                                         00411300
         AIF   ('&XAUTH' NE 'MASTER').ZI26A                             00411400
&ZW                   SETC  '&ZW.1'                                     00411500
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00411600
&ZMS                  SETC  '&ZMS.1'                                    00411700
                      AGO   .ZI26C                                      00411800
.*                                                                      00411900
.ZI26A                ANOP  ,                                           00412000
&ZW                   SETC  '&ZW.0'                                     00412100
         AIF   ('&ZXAUTH' EQ '').ZI26B                                  00412200
&ZMS                  SETC  '&ZMS.0'                                    00412300
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00412400
                      AGO   .ZI26C                                      00412500
.*                                                                      00412600
.ZI26B                ANOP  ,                                           00412700
&ZMS                  SETC  '&ZMS.1'                                    00412800
.ZI26C                ANOP  ,                                           00412900
.*-------------------------------------------------------------------   00413000
.***AI.L08 XAUTH "SYS"                                                  00413100
.***      BL2'XX1XXXXXXXXXXXXX'                                         00413200
         AIF   ('&XAUTH' NE 'SYS').ZI27A                                00413300
&ZW                   SETC  '&ZW.1'                                     00413400
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00413500
&ZMS                  SETC  '&ZMS.1'                                    00413600
                      AGO   .ZI27C                                      00413700
.*                                                                      00413800
.ZI27A                ANOP  ,                                           00413900
&ZW                   SETC  '&ZW.0'                                     00414000
         AIF   ('&ZXAUTH' EQ '').ZI27B                                  00414100
&ZMS                  SETC  '&ZMS.0'                                    00414200
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00414300
                      AGO   .ZI27C                                      00414400
.*                                                                      00414500
.ZI27B                ANOP  ,                                           00414600
&ZMS                  SETC  '&ZMS.1'                                    00414700
.ZI27C                ANOP  ,                                           00414800
.*-------------------------------------------------------------------   00414900
.***AI.L08 XAUTH "IO"                                                   00415000
.***      BL2'XXX1XXXXXXXXXXXX'                                         00415100
         AIF   ('&XAUTH' NE 'IO').ZI28A                                 00415200
&ZW                   SETC  '&ZW.1'                                     00415300
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00415400
&ZMS                  SETC  '&ZMS.1'                                    00415500
                      AGO   .ZI28C                                      00415600
.*                                                                      00415700
.ZI28A                ANOP  ,                                           00415800
&ZW                   SETC  '&ZW.0'                                     00415900
         AIF   ('&ZXAUTH' EQ '').ZI28B                                  00416000
&ZMS                  SETC  '&ZMS.0'                                    00416100
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00416200
                      AGO   .ZI28C                                      00416300
.*                                                                      00416400
.ZI28B                ANOP  ,                                           00416500
&ZMS                  SETC  '&ZMS.1'                                    00416600
.ZI28C                ANOP  ,                                           00416700
.*-------------------------------------------------------------------   00416800
.***AI.L08 XAUTH "CONS"                                                 00416900
.***      BL2'XXXX1XXXXXXXXXXX'                                         00417000
         AIF   ('&XAUTH' NE 'CONS').ZI29A                               00417100
&ZW                   SETC  '&ZW.1'                                     00417200
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00417300
&ZMS                  SETC  '&ZMS.1'                                    00417400
                      AGO   .ZI29C                                      00417500
.*                                                                      00417600
.ZI29A                ANOP  ,                                           00417700
&ZW                   SETC  '&ZW.0'                                     00417800
         AIF   ('&ZXAUTH' EQ '').ZI29B                                  00417900
&ZMS                  SETC  '&ZMS.0'                                    00418000
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00418100
                      AGO   .ZI29C                                      00418200
.*                                                                      00418300
.ZI29B                ANOP  ,                                           00418400
&ZMS                  SETC  '&ZMS.1'                                    00418500
.ZI29C                ANOP  ,                                           00418600
.*-------------------------------------------------------------------   00418700
.***AI.L08 XAUTH "INFO"                                                 00418800
.***      BL2'XXXXX1XXXXXXXXXX'                                         00418900
         AIF   ('&XAUTH' NE 'INFO').ZI30A                               00419000
&ZW                   SETC  '&ZW.1'                                     00419100
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00419200
&ZMS                  SETC  '&ZMS.1'                                    00419300
                      AGO   .ZI30C                                      00419400
.*                                                                      00419500
.ZI30A                ANOP  ,                                           00419600
&ZW                   SETC  '&ZW.0'                                     00419700
         AIF   ('&ZXAUTH' EQ '').ZI30B                                  00419800
&ZMS                  SETC  '&ZMS.0'                                    00419900
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00420000
                      AGO   .ZI30C                                      00420100
.*                                                                      00420200
.ZI30B                ANOP  ,                                           00420300
&ZMS                  SETC  '&ZMS.1'                                    00420400
.ZI30C                ANOP  ,                                           00420500
.*-------------------------------------------------------------------   00420600
.***AI.L08 XAUTH "ALL"                                                  00420700
.***      BL2'XXXXXX1XXXXXXXXX'                                         00420800
         AIF   ('&XAUTH' NE 'ALL').ZI31A                                00420900
&ZW                   SETC  '&ZW.1'                                     00421000
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00421100
&ZMS                  SETC  '&ZMS.1'                                    00421200
                      AGO   .ZI31C                                      00421300
.*                                                                      00421400
.ZI31A                ANOP  ,                                           00421500
&ZW                   SETC  '&ZW.0'                                     00421600
         AIF   ('&ZXAUTH' EQ '').ZI31B                                  00421700
&ZMS                  SETC  '&ZMS.0'                                    00421800
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00421900
                      AGO   .ZI31C                                      00422000
.*                                                                      00422100
.ZI31B                ANOP  ,                                           00422200
&ZMS                  SETC  '&ZMS.1'                                    00422300
.ZI31C                ANOP  ,                                           00422400
.*-------------------------------------------------------------------   00422500
.***AI.L08 XAUTH "SYSONLY"                                              00422600
.***      BL2'XXXXXXX1XXXXXXXX'                                         00422700
         AIF   ('&XAUTH' NE 'SYSONLY').ZI32A                            00422800
&ZW                   SETC  '&ZW.1'                                     00422900
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00423000
&ZMS                  SETC  '&ZMS.1'                                    00423100
                      AGO   .ZI32C                                      00423200
.*                                                                      00423300
.ZI32A                ANOP  ,                                           00423400
&ZW                   SETC  '&ZW.0'                                     00423500
         AIF   ('&ZXAUTH' EQ '').ZI32B                                  00423600
&ZMS                  SETC  '&ZMS.0'                                    00423700
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00423800
                      AGO   .ZI32C                                      00423900
.*                                                                      00424000
.ZI32B                ANOP  ,                                           00424100
&ZMS                  SETC  '&ZMS.1'                                    00424200
.ZI32C                ANOP  ,                                           00424300
.*-------------------------------------------------------------------   00424400
.***AI.L08 XAUTH "IOONLY"                                               00424500
.***      BL2'XXXXXXXX1XXXXXXX'                                         00424600
         AIF   ('&XAUTH' NE 'IOONLY').ZI33A                             00424700
&ZW                   SETC  '&ZW.1'                                     00424800
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00424900
&ZMS                  SETC  '&ZMS.1'                                    00425000
                      AGO   .ZI33C                                      00425100
.*                                                                      00425200
.ZI33A                ANOP  ,                                           00425300
&ZW                   SETC  '&ZW.0'                                     00425400
         AIF   ('&ZXAUTH' EQ '').ZI33B                                  00425500
&ZMS                  SETC  '&ZMS.0'                                    00425600
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00425700
                      AGO   .ZI33C                                      00425800
.*                                                                      00425900
.ZI33B                ANOP  ,                                           00426000
&ZMS                  SETC  '&ZMS.1'                                    00426100
.ZI33C                ANOP  ,                                           00426200
.*-------------------------------------------------------------------   00426300
.***AI.L08 XAUTH "CONSONLY"                                             00426400
.***      BL2'XXXXXXXXX1XXXXXX'                                         00426500
         AIF   ('&XAUTH' NE 'CONSONLY').ZI34A                           00426600
&ZW                   SETC  '&ZW.1'                                     00426700
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00426800
&ZMS                  SETC  '&ZMS.1'                                    00426900
                      AGO   .ZI34C                                      00427000
.*                                                                      00427100
.ZI34A                ANOP  ,                                           00427200
&ZW                   SETC  '&ZW.0'                                     00427300
         AIF   ('&ZXAUTH' EQ '').ZI34B                                  00427400
&ZMS                  SETC  '&ZMS.0'                                    00427500
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00427600
                      AGO   .ZI34C                                      00427700
.*                                                                      00427800
.ZI34B                ANOP  ,                                           00427900
&ZMS                  SETC  '&ZMS.1'                                    00428000
.ZI34C                ANOP  ,                                           00428100
.*-------------------------------------------------------------------   00428200
.***AI.L08 XAUTH "INFOONLY"                                             00428300
.***      BL2'XXXXXXXXXX1XXXXX'                                         00428400
         AIF   ('&XAUTH' NE 'INFOONLY').ZI35A                           00428500
&ZW                   SETC  '&ZW.1'                                     00428600
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00428700
&ZMS                  SETC  '&ZMS.1'                                    00428800
                      AGO   .ZI35C                                      00428900
.*                                                                      00429000
.ZI35A                ANOP  ,                                           00429100
&ZW                   SETC  '&ZW.0'                                     00429200
         AIF   ('&ZXAUTH' EQ '').ZI35B                                  00429300
&ZMS                  SETC  '&ZMS.0'                                    00429400
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00429500
                      AGO   .ZI35C                                      00429600
.*                                                                      00429700
.ZI35B                ANOP  ,                                           00429800
&ZMS                  SETC  '&ZMS.1'                                    00429900
.ZI35C                ANOP  ,                                           00430000
.*-------------------------------------------------------------------   00430100
.***AI.L08 XAUTH "ALLONLY"                                              00430200
.***      BL2'XXXXXXXXXXX1XXXX'                                         00430300
         AIF   ('&XAUTH' NE 'ALLONLY').ZI36A                            00430400
&ZW                   SETC  '&ZW.10000'                                 00430500
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00430600
&ZMS                  SETC  '&ZMS.11111'                                00430700
                      AGO   .ZI36C                                      00430800
.*                                                                      00430900
.ZI36A                ANOP  ,                                           00431000
&ZW                   SETC  '&ZW.00000'                                 00431100
         AIF   ('&ZXAUTH' EQ '').ZI36B                                  00431200
&ZMS                  SETC  '&ZMS.01111'                                00431300
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00431400
                      AGO   .ZI36C                                      00431500
.*                                                                      00431600
.ZI36B                ANOP  ,                                           00431700
&ZMS                  SETC  '&ZMS.11111'                                00431800
.ZI36C                ANOP  ,                                           00431900
.*-------------------------------------------------------------------   00432000
.***AI.L10 XAUTH BL2                                                    00432100
                      AIF   ('&XMFSCK' NE 'NOCHECK').ZI36D              00432200
                      AIF   ('&ZC' NE 'YES').ZI36D                      00432300
&ZOPN                 SETA  &ZOPN+1                                     00432400
&ZOPL(&ZOPN)          SETC  ' '                                         00432500
&ZOPO(&ZOPN)          SETC  'NC'                                        00432600
&ZOPV(&ZOPN)          SETC  '40(2,1),=BL2''&ZMS'''                      00432700
&ZOPD(&ZOPN)          SETC  '++ INPUT BL2'                              00432800
.ZI36D                ANOP  ,                                           00432900
                      AIF   ('&ZCLNG' NE 'YES').ZI36E  ALL ZERO BITS    00433000
&ZOPN                 SETA  &ZOPN+1                                     00433100
&ZOPL(&ZOPN)          SETC  ' '                                         00433200
&ZOPO(&ZOPN)          SETC  'OC'                                        00433300
&ZOPV(&ZOPN)          SETC  '40(2,1),=BL2''&ZW'''                       00433400
&ZOPD(&ZOPN)          SETC  '++ INPUT BL2'                              00433500
.ZI36E                ANOP  ,                                           00433600
.*-------------------------------------------------------------------   00433700
.***AI.L05 XATTR BL2                                                    00433800
&ZW                   SETC  ''                                          00433900
&ZCLNG                SETC  ''             RESET BIT ON FLAG            00434000
&ZMS                  SETC  ''                                          00434100
&ZC                   SETC  ''                                          00434200
.*-------------------------------------------------------------------   00434300
.***AI.L08 XATTR "ANY"                                                  00434400
.***      BL2'1XXXXXXXXXXXXXXX'                                         00434500
         AIF   ('&XATTR' NE 'ANY').ZI38A                                00434600
&ZW                   SETC  '&ZW.1'                                     00434700
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00434800
&ZMS                  SETC  '&ZMS.1'                                    00434900
                      AGO   .ZI38C                                      00435000
.*                                                                      00435100
.ZI38A                ANOP  ,                                           00435200
&ZW                   SETC  '&ZW.0'                                     00435300
         AIF   ('&ZXATTR' EQ '').ZI38B                                  00435400
&ZMS                  SETC  '&ZMS.0'                                    00435500
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00435600
                      AGO   .ZI38C                                      00435700
.*                                                                      00435800
.ZI38B                ANOP  ,                                           00435900
&ZMS                  SETC  '&ZMS.1'                                    00436000
.ZI38C                ANOP  ,                                           00436100
.*-------------------------------------------------------------------   00436200
.***AI.L08 XATTR "ROUT"                                                 00436300
.***      BL2'X1XXXXXXXXXXXXXX'                                         00436400
         AIF   ('&XATTR' NE 'ROUT').ZI39A                               00436500
&ZW                   SETC  '&ZW.1'                                     00436600
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00436700
&ZMS                  SETC  '&ZMS.1'                                    00436800
                      AGO   .ZI39C                                      00436900
.*                                                                      00437000
.ZI39A                ANOP  ,                                           00437100
&ZW                   SETC  '&ZW.0'                                     00437200
         AIF   ('&ZXATTR' EQ '').ZI39B                                  00437300
&ZMS                  SETC  '&ZMS.0'                                    00437400
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00437500
                      AGO   .ZI39C                                      00437600
.*                                                                      00437700
.ZI39B                ANOP  ,                                           00437800
&ZMS                  SETC  '&ZMS.1'                                    00437900
.ZI39C                ANOP  ,                                           00438000
.*-------------------------------------------------------------------   00438100
.***AI.L08 XATTR "HC"                                                   00438200
.***      BL2'XXXX1XXXXXXXXXXX'                                         00438300
         AIF   ('&XATTR' NE 'HC').ZI40A                                 00438400
&ZW                   SETC  '&ZW.001'                                   00438500
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00438600
&ZMS                  SETC  '&ZMS.111'                                  00438700
                      AGO   .ZI40C                                      00438800
.*                                                                      00438900
.ZI40A                ANOP  ,                                           00439000
&ZW                   SETC  '&ZW.000'                                   00439100
         AIF   ('&ZXATTR' EQ '').ZI40B                                  00439200
&ZMS                  SETC  '&ZMS.110'                                  00439300
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00439400
                      AGO   .ZI40C                                      00439500
.*                                                                      00439600
.ZI40B                ANOP  ,                                           00439700
&ZMS                  SETC  '&ZMS.111'                                  00439800
.ZI40C                ANOP  ,                                           00439900
.*-------------------------------------------------------------------   00440000
.***AI.L08 XATTR "AUTO"                                                 00440100
.***      BL2'XXXXX1XXXXXXXXXX'                                         00440200
         AIF   ('&XATTR' NE 'AUTO').ZI41A                               00440300
&ZW                   SETC  '&ZW.1'                                     00440400
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00440500
&ZMS                  SETC  '&ZMS.1'                                    00440600
                      AGO   .ZI41C                                      00440700
.*                                                                      00440800
.ZI41A                ANOP  ,                                           00440900
&ZW                   SETC  '&ZW.0'                                     00441000
         AIF   ('&ZXATTR' EQ '').ZI41B                                  00441100
&ZMS                  SETC  '&ZMS.0'                                    00441200
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00441300
                      AGO   .ZI41C                                      00441400
.*                                                                      00441500
.ZI41B                ANOP  ,                                           00441600
&ZMS                  SETC  '&ZMS.1'                                    00441700
.ZI41C                ANOP  ,                                           00441800
.*-------------------------------------------------------------------   00441900
.***AI.L08 XATTR "AUTON"                                                00442000
.***      BL2'XXXXXX1XXXXXXXXX'                                         00442100
         AIF   ('&XATTR' NE 'AUTON').ZI42A                              00442200
&ZW                   SETC  '&ZW.1'                                     00442300
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00442400
&ZMS                  SETC  '&ZMS.1'                                    00442500
                      AGO   .ZI42C                                      00442600
.*                                                                      00442700
.ZI42A                ANOP  ,                                           00442800
&ZW                   SETC  '&ZW.0'                                     00442900
         AIF   ('&ZXATTR' EQ '').ZI42B                                  00443000
&ZMS                  SETC  '&ZMS.0'                                    00443100
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00443200
                      AGO   .ZI42C                                      00443300
.*                                                                      00443400
.ZI42B                ANOP  ,                                           00443500
&ZMS                  SETC  '&ZMS.1'                                    00443600
.ZI42C                ANOP  ,                                           00443700
.*-------------------------------------------------------------------   00443800
.***AI.L08 XATTR "MN"                                                   00443900
.***      BL2'XXXXXXX1XXXXXXXX'                                         00444000
         AIF   ('&XATTR' NE 'MN').ZI43A                                 00444100
&ZW                   SETC  '&ZW.1'                                     00444200
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00444300
&ZMS                  SETC  '&ZMS.1'                                    00444400
                      AGO   .ZI43C                                      00444500
.*                                                                      00444600
.ZI43A                ANOP  ,                                           00444700
&ZW                   SETC  '&ZW.0'                                     00444800
         AIF   ('&ZXATTR' EQ '').ZI43B                                  00444900
&ZMS                  SETC  '&ZMS.0'                                    00445000
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00445100
                      AGO   .ZI43C                                      00445200
.*                                                                      00445300
.ZI43B                ANOP  ,                                           00445400
&ZMS                  SETC  '&ZMS.1'                                    00445500
.ZI43C                ANOP  ,                                           00445600
.*-------------------------------------------------------------------   00445700
.***AI.L08 XATTR "NONE"                                                 00445800
.***      BL2'XXXXXXXX1XXXXXXX'                                         00445900
         AIF   ('&XATTR' NE 'NONE').ZI44A                               00446000
&ZW                   SETC  '&ZW.1'                                     00446100
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00446200
&ZMS                  SETC  '&ZMS.1'                                    00446300
                      AGO   .ZI44C                                      00446400
.*                                                                      00446500
.ZI44A                ANOP  ,                                           00446600
&ZW                   SETC  '&ZW.0'                                     00446700
         AIF   ('&ZXATTR' EQ '').ZI44B                                  00446800
&ZMS                  SETC  '&ZMS.0'                                    00446900
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00447000
                      AGO   .ZI44C                                      00447100
.*                                                                      00447200
.ZI44B                ANOP  ,                                           00447300
&ZMS                  SETC  '&ZMS.1'                                    00447400
.ZI44C                ANOP  ,                                           00447500
.*-------------------------------------------------------------------   00447600
.***AI.L08 XATTR "YES"                                                  00447700
.***      BL2'XXXXXXXXX1XXXXXX'                                         00447800
         AIF   ('&XATTR' NE 'YES').ZI45A                                00447900
&ZW                   SETC  '&ZW.1'                                     00448000
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00448100
&ZMS                  SETC  '&ZMS.1'                                    00448200
                      AGO   .ZI45C                                      00448300
.*                                                                      00448400
.ZI45A                ANOP  ,                                           00448500
&ZW                   SETC  '&ZW.0'                                     00448600
         AIF   ('&ZXATTR' EQ '').ZI45B                                  00448700
&ZMS                  SETC  '&ZMS.0'                                    00448800
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00448900
                      AGO   .ZI45C                                      00449000
.*                                                                      00449100
.ZI45B                ANOP  ,                                           00449200
&ZMS                  SETC  '&ZMS.1'                                    00449300
.ZI45C                ANOP  ,                                           00449400
.*-------------------------------------------------------------------   00449500
.***AI.L08 XATTR "INTIDS"                                               00449600
.***      BL2'XXXXXXXXXX1XXXXX'                                         00449700
         AIF   ('&XATTR' NE 'INTIDS').ZI46A                             00449800
&ZW                   SETC  '&ZW.1'                                     00449900
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00450000
&ZMS                  SETC  '&ZMS.1'                                    00450100
                      AGO   .ZI46C                                      00450200
.*                                                                      00450300
.ZI46A                ANOP  ,                                           00450400
&ZW                   SETC  '&ZW.0'                                     00450500
         AIF   ('&ZXATTR' EQ '').ZI46B                                  00450600
&ZMS                  SETC  '&ZMS.0'                                    00450700
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00450800
                      AGO   .ZI46C                                      00450900
.*                                                                      00451000
.ZI46B                ANOP  ,                                           00451100
&ZMS                  SETC  '&ZMS.1'                                    00451200
.ZI46C                ANOP  ,                                           00451300
.*-------------------------------------------------------------------   00451400
.***AI.L08 XATTR "UNKNIDS"                                              00451500
.***      BL2'XXXXXXXXXXX1XXXX'                                         00451600
         AIF   ('&XATTR' NE 'UNKNIDS').ZI47A                            00451700
&ZW                   SETC  '&ZW.10000'                                 00451800
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00451900
&ZMS                  SETC  '&ZMS.11111'                                00452000
                      AGO   .ZI47C                                      00452100
.*                                                                      00452200
.ZI47A                ANOP  ,                                           00452300
&ZW                   SETC  '&ZW.00000'                                 00452400
         AIF   ('&ZXATTR' EQ '').ZI47B                                  00452500
&ZMS                  SETC  '&ZMS.01111'                                00452600
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00452700
                      AGO   .ZI47C                                      00452800
.*                                                                      00452900
.ZI47B                ANOP  ,                                           00453000
&ZMS                  SETC  '&ZMS.11111'                                00453100
.ZI47C                ANOP  ,                                           00453200
.*-------------------------------------------------------------------   00453300
.***AI.L10 XATTR BL2                                                    00453400
                      AIF   ('&XMFSCK' NE 'NOCHECK').ZI47D              00453500
                      AIF   ('&ZC' NE 'YES').ZI47D                      00453600
&ZOPN                 SETA  &ZOPN+1                                     00453700
&ZOPL(&ZOPN)          SETC  ' '                                         00453800
&ZOPO(&ZOPN)          SETC  'NC'                                        00453900
&ZOPV(&ZOPN)          SETC  '42(2,1),=BL2''&ZMS'''                      00454000
&ZOPD(&ZOPN)          SETC  '++ INPUT BL2'                              00454100
.ZI47D                ANOP  ,                                           00454200
                      AIF   ('&ZCLNG' NE 'YES').ZI47E  ALL ZERO BITS    00454300
&ZOPN                 SETA  &ZOPN+1                                     00454400
&ZOPL(&ZOPN)          SETC  ' '                                         00454500
&ZOPO(&ZOPN)          SETC  'OC'                                        00454600
&ZOPV(&ZOPN)          SETC  '42(2,1),=BL2''&ZW'''                       00454700
&ZOPD(&ZOPN)          SETC  '++ INPUT BL2'                              00454800
.ZI47E                ANOP  ,                                           00454900
.*-------------------------------------------------------------------   00455000
.***AI.L05 XDOM BL1                                                     00455100
&ZW                   SETC  ''                                          00455200
&ZCLNG                SETC  ''             RESET BIT ON FLAG            00455300
&ZMS                  SETC  ''                                          00455400
&ZC                   SETC  ''                                          00455500
.*-------------------------------------------------------------------   00455600
.***AI.L08 XDOM "ANY"                                                   00455700
.***      BL1'1XXXXXXX'                                                 00455800
         AIF   ('&XDOM' NE 'ANY').ZI49A                                 00455900
&ZW                   SETC  '&ZW.1'                                     00456000
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00456100
&ZMS                  SETC  '&ZMS.1'                                    00456200
                      AGO   .ZI49C                                      00456300
.*                                                                      00456400
.ZI49A                ANOP  ,                                           00456500
&ZW                   SETC  '&ZW.0'                                     00456600
         AIF   ('&ZXDOM' EQ '').ZI49B                                   00456700
&ZMS                  SETC  '&ZMS.0'                                    00456800
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00456900
                      AGO   .ZI49C                                      00457000
.*                                                                      00457100
.ZI49B                ANOP  ,                                           00457200
&ZMS                  SETC  '&ZMS.1'                                    00457300
.ZI49C                ANOP  ,                                           00457400
.*-------------------------------------------------------------------   00457500
.***AI.L08 XDOM "NORMAL"                                                00457600
.***      BL1'X1XXXXXX'                                                 00457700
         AIF   ('&XDOM' NE 'NORMAL').ZI50A                              00457800
&ZW                   SETC  '&ZW.1'                                     00457900
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00458000
&ZMS                  SETC  '&ZMS.1'                                    00458100
                      AGO   .ZI50C                                      00458200
.*                                                                      00458300
.ZI50A                ANOP  ,                                           00458400
&ZW                   SETC  '&ZW.0'                                     00458500
         AIF   ('&ZXDOM' EQ '').ZI50B                                   00458600
&ZMS                  SETC  '&ZMS.0'                                    00458700
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00458800
                      AGO   .ZI50C                                      00458900
.*                                                                      00459000
.ZI50B                ANOP  ,                                           00459100
&ZMS                  SETC  '&ZMS.1'                                    00459200
.ZI50C                ANOP  ,                                           00459300
.*-------------------------------------------------------------------   00459400
.***AI.L08 XDOM "ALL"                                                   00459500
.***      BL1'XX1XXXXX'                                                 00459600
         AIF   ('&XDOM' NE 'ALL').ZI51A                                 00459700
&ZW                   SETC  '&ZW.1'                                     00459800
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00459900
&ZMS                  SETC  '&ZMS.1'                                    00460000
                      AGO   .ZI51C                                      00460100
.*                                                                      00460200
.ZI51A                ANOP  ,                                           00460300
&ZW                   SETC  '&ZW.0'                                     00460400
         AIF   ('&ZXDOM' EQ '').ZI51B                                   00460500
&ZMS                  SETC  '&ZMS.0'                                    00460600
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00460700
                      AGO   .ZI51C                                      00460800
.*                                                                      00460900
.ZI51B                ANOP  ,                                           00461000
&ZMS                  SETC  '&ZMS.1'                                    00461100
.ZI51C                ANOP  ,                                           00461200
.*-------------------------------------------------------------------   00461300
.***AI.L08 XDOM "NONE"                                                  00461400
.***      BL1'XXX1XXXX'                                                 00461500
         AIF   ('&XDOM' NE 'NONE').ZI52A                                00461600
&ZW                   SETC  '&ZW.1'                                     00461700
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00461800
&ZMS                  SETC  '&ZMS.1'                                    00461900
                      AGO   .ZI52C                                      00462000
.*                                                                      00462100
.ZI52A                ANOP  ,                                           00462200
&ZW                   SETC  '&ZW.0'                                     00462300
         AIF   ('&ZXDOM' EQ '').ZI52B                                   00462400
&ZMS                  SETC  '&ZMS.0'                                    00462500
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00462600
                      AGO   .ZI52C                                      00462700
.*                                                                      00462800
.ZI52B                ANOP  ,                                           00462900
&ZMS                  SETC  '&ZMS.1'                                    00463000
.ZI52C                ANOP  ,                                           00463100
.*-------------------------------------------------------------------   00463200
.***AI.L08 XDOM "YES"                                                   00463300
.***      BL1'XXXX1XXX'                                                 00463400
         AIF   ('&XDOM' NE 'YES').ZI53A                                 00463500
&ZW                   SETC  '&ZW.1000'                                  00463600
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00463700
&ZMS                  SETC  '&ZMS.1111'                                 00463800
                      AGO   .ZI53C                                      00463900
.*                                                                      00464000
.ZI53A                ANOP  ,                                           00464100
&ZW                   SETC  '&ZW.0000'                                  00464200
         AIF   ('&ZXDOM' EQ '').ZI53B                                   00464300
&ZMS                  SETC  '&ZMS.0111'                                 00464400
&ZC                   SETC  'YES'          SET BIT OFF FLAG             00464500
                      AGO   .ZI53C                                      00464600
.*                                                                      00464700
.ZI53B                ANOP  ,                                           00464800
&ZMS                  SETC  '&ZMS.1111'                                 00464900
.ZI53C                ANOP  ,                                           00465000
.*-------------------------------------------------------------------   00465100
.***AI.L11 XDOM BL1                                                     00465200
                      AIF   ('&XMFSCK' NE 'NOCHECK').ZI53D              00465300
                      AIF   ('&ZC' NE 'YES').ZI53D                      00465400
&ZOPN                 SETA  &ZOPN+1                                     00465500
&ZOPL(&ZOPN)          SETC  ' '                                         00465600
&ZOPO(&ZOPN)          SETC  'NI'                                        00465700
&ZOPV(&ZOPN)          SETC  '44(1),B''&ZMS'''                           00465800
&ZOPD(&ZOPN)          SETC  '++ INPUT BL1'                              00465900
.ZI53D                ANOP  ,                                           00466000
                      AIF   ('&ZCLNG' NE 'YES').ZI53E  ALL ZERO BITS    00466100
&ZOPN                 SETA  &ZOPN+1                                     00466200
&ZOPL(&ZOPN)          SETC  ' '                                         00466300
&ZOPO(&ZOPN)          SETC  'OI'                                        00466400
&ZOPV(&ZOPN)          SETC  '44(1),B''&ZW'''                            00466500
&ZOPD(&ZOPN)          SETC  '++ INPUT BL1'                              00466600
.ZI53E                ANOP  ,                                           00466700
.*-------------------------------------------------------------------   00466800
.***AI.L25  XBUFPTR AL4                                                 00466900
                      AIF   ('&ZXBUFPTR' EQ '').ZI55E                   00467000
                      AIF   ('&ZXBUFPTR' EQ 'OUTPUT').ZI55E             00467100
&ZCGPR                SETC  '&XBUFPTR'                                  00467200
         AIF   ('&XBUFPTR' NE '0').ZI55A                                00467300
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI55E                          00467400
.*                                                                      00467500
&ZCGPR                SETC  '=XL4''00'''                                00467600
.ZI55A                ANOP  ,                                           00467700
.*                                                                      00467800
                      AIF   ('&XBUFPTR'(1,1) NE '(').ZI55B              00467900
&ZCGPR   SETC  '0('.'&XBUFPTR'(2,K'&XBUFPTR-2).')'                      00468000
                      AGO   .ZI55D                                      00468100
.ZI55B                ANOP  ,                                           00468200
.*                                                                      00468300
&ZC                   SETC  '&XBUFPTR'(1,1)                             00468400
                      AIF   (T'&ZC NE 'N').ZI55D                        00468500
&ZC                   SETC  '&XBUFPTR'                                  00468600
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI55D               00468700
&ZCGPR                SETC  '=AL4(&XBUFPTR)'                            00468800
.*                                                                      00468900
.ZI55D                ANOP  ,                                           00469000
.*                                                                      00469100
&ZOPN                 SETA  &ZOPN+1                                     00469200
&ZOPL(&ZOPN)          SETC  ' '                                         00469300
&ZOPO(&ZOPN)          SETC  'MVC'                                       00469400
&ZOPV(&ZOPN)          SETC  '48(4,1),&ZCGPR'                            00469500
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFPTR XBUFPTR'                      00469600
.*                                                                      00469700
.ZI55E                ANOP  ,                                           00469800
.*-------------------------------------------------------------------   00469900
.***AI.L25  XBUFSIZE F                                                  00470000
                      AIF   ('&ZXBUFSIZE' EQ '').ZI56E                  00470100
                      AIF   ('&ZXBUFSIZE' EQ 'OUTPUT').ZI56E            00470200
&ZCGPR                SETC  '&XBUFSIZE'                                 00470300
         AIF   ('&XBUFSIZE' NE '0').ZI56A                               00470400
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI56E                          00470500
.*                                                                      00470600
&ZCGPR                SETC  '=XL4''00'''                                00470700
.ZI56A                ANOP  ,                                           00470800
.*                                                                      00470900
                      AIF   ('&XBUFSIZE'(1,1) NE '(').ZI56B             00471000
&ZCGPR   SETC  '0('.'&XBUFSIZE'(2,K'&XBUFSIZE-2).')'                    00471100
                      AGO   .ZI56D                                      00471200
.ZI56B                ANOP  ,                                           00471300
.*                                                                      00471400
&ZC                   SETC  '&XBUFSIZE'(1,1)                            00471500
                      AIF   (T'&ZC NE 'N').ZI56D                        00471600
&ZC                   SETC  '&XBUFSIZE'                                 00471700
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI56D               00471800
&ZCGPR                SETC  '=FL4''&XBUFSIZE'''                         00471900
.*                                                                      00472000
.ZI56D                ANOP  ,                                           00472100
.*                                                                      00472200
&ZOPN                 SETA  &ZOPN+1                                     00472300
&ZOPL(&ZOPN)          SETC  ' '                                         00472400
&ZOPO(&ZOPN)          SETC  'MVC'                                       00472500
&ZOPV(&ZOPN)          SETC  '52(4,1),&ZCGPR'                            00472600
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFSIZE XBUFSIZE'                    00472700
.*                                                                      00472800
.ZI56E                ANOP  ,                                           00472900
.*-------------------------------------------------------------------   00473000
.***AI.L25  XRECSIZE AL4                                                00473100
                      AIF   ('&ZXRECSIZE' EQ '').ZI57E                  00473200
                      AIF   ('&ZXRECSIZE' EQ 'OUTPUT').ZI57E            00473300
&ZCGPR                SETC  '&XRECSIZE'                                 00473400
.*                                                                      00473500
                      AIF   ('&XRECSIZE'(1,1) NE '(').ZI57B             00473600
&ZCGPR   SETC  '0('.'&XRECSIZE'(2,K'&XRECSIZE-2).')'                    00473700
                      AGO   .ZI57D                                      00473800
.ZI57B                ANOP  ,                                           00473900
.*                                                                      00474000
&ZC                   SETC  '&XRECSIZE'(1,1)                            00474100
                      AIF   (T'&ZC NE 'N').ZI57D                        00474200
&ZC                   SETC  '&XRECSIZE'                                 00474300
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI57D               00474400
&ZCGPR                SETC  '=AL4(&XRECSIZE)'                           00474500
.*                                                                      00474600
.ZI57D                ANOP  ,                                           00474700
.*                                                                      00474800
&ZOPN                 SETA  &ZOPN+1                                     00474900
&ZOPL(&ZOPN)          SETC  ' '                                         00475000
&ZOPO(&ZOPN)          SETC  'MVC'                                       00475100
&ZOPV(&ZOPN)          SETC  '56(4,1),&ZCGPR'                            00475200
&ZOPD(&ZOPN)          SETC  '++ &ZXRECSIZE XRECSIZE'                    00475300
.*                                                                      00475400
.ZI57E                ANOP  ,                                           00475500
.*-------------------------------------------------------------------   00475600
.***AI.L25  XCONSCNT AL4                                                00475700
                      AIF   ('&ZXCONSCNT' EQ '').ZI58E                  00475800
                      AIF   ('&ZXCONSCNT' EQ 'OUTPUT').ZI58E            00475900
&ZCGPR                SETC  '&XCONSCNT'                                 00476000
         AIF   ('&XCONSCNT' NE '0').ZI58A                               00476100
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI58E                          00476200
.*                                                                      00476300
&ZCGPR                SETC  '=XL4''00'''                                00476400
.ZI58A                ANOP  ,                                           00476500
.*                                                                      00476600
                      AIF   ('&XCONSCNT'(1,1) NE '(').ZI58B             00476700
&ZCGPR   SETC  '0('.'&XCONSCNT'(2,K'&XCONSCNT-2).')'                    00476800
                      AGO   .ZI58D                                      00476900
.ZI58B                ANOP  ,                                           00477000
.*                                                                      00477100
&ZC                   SETC  '&XCONSCNT'(1,1)                            00477200
                      AIF   (T'&ZC NE 'N').ZI58D                        00477300
&ZC                   SETC  '&XCONSCNT'                                 00477400
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI58D               00477500
&ZCGPR                SETC  '=AL4(&XCONSCNT)'                           00477600
.*                                                                      00477700
.ZI58D                ANOP  ,                                           00477800
.*                                                                      00477900
&ZOPN                 SETA  &ZOPN+1                                     00478000
&ZOPL(&ZOPN)          SETC  ' '                                         00478100
&ZOPO(&ZOPN)          SETC  'MVC'                                       00478200
&ZOPV(&ZOPN)          SETC  '60(4,1),&ZCGPR'                            00478300
&ZOPD(&ZOPN)          SETC  '++ &ZXCONSCNT XCONSCNT'                    00478400
.*                                                                      00478500
.ZI58E                ANOP  ,                                           00478600
.*-------------------------------------------------------------------   00478700
.***AI.L25  XTOKEN AL4                                                  00478800
                      AIF   ('&ZXTOKEN' EQ '').ZI59E                    00478900
                      AIF   ('&ZXTOKEN' EQ 'OUTPUT').ZI59E              00479000
&ZCGPR                SETC  '&XTOKEN'                                   00479100
         AIF   ('&XTOKEN' NE '0').ZI59A                                 00479200
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI59E                          00479300
.*                                                                      00479400
&ZCGPR                SETC  '=XL4''00'''                                00479500
.ZI59A                ANOP  ,                                           00479600
.*                                                                      00479700
                      AIF   ('&XTOKEN'(1,1) NE '(').ZI59B               00479800
&ZCGPR   SETC  '0('.'&XTOKEN'(2,K'&XTOKEN-2).')'                        00479900
                      AGO   .ZI59D                                      00480000
.ZI59B                ANOP  ,                                           00480100
.*                                                                      00480200
&ZC                   SETC  '&XTOKEN'(1,1)                              00480300
                      AIF   (T'&ZC NE 'N').ZI59D                        00480400
&ZC                   SETC  '&XTOKEN'                                   00480500
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI59D               00480600
&ZCGPR                SETC  '=AL4(&XTOKEN)'                             00480700
.*                                                                      00480800
.ZI59D                ANOP  ,                                           00480900
.*                                                                      00481000
&ZOPN                 SETA  &ZOPN+1                                     00481100
&ZOPL(&ZOPN)          SETC  ' '                                         00481200
&ZOPO(&ZOPN)          SETC  'MVC'                                       00481300
&ZOPV(&ZOPN)          SETC  '64(4,1),&ZCGPR'                            00481400
&ZOPD(&ZOPN)          SETC  '++ &ZXTOKEN XTOKEN'                        00481500
.*                                                                      00481600
.ZI59E                ANOP  ,                                           00481700
.*-------------------------------------------------------------------   00481800
&ZOPN1                SETA &ZOPN                                        00481900
.*-------------------------------------------------------------------   00482000
.***AI.C00 MF=M CHECK TO BYPASS INVOCATION                              00482100
                      AIF   ('&XMF' EQ 'M').ZMFLX  DONE IF MF=M         00482200
.*******************************************************************    00482300
.***  PROCESS IEEQEMCS OUTPUT PARAMETERS                                00482400
.*******************************************************************    00482500
                      ACTR  10000                                       00482600
.*******************************************************************    00482700
.***AO.X02  RETURN CODE PROCESSING                                      00482800
.*******************************************************************    00482900
                      AIF   (N'&RETCODE LE 0).ZMRETX                    00483000
                      AIF   ('&XRETCODE'(1,1) EQ '(').ZMRET2            00483100
                      AIF   ('&XRETCODE' EQ 'GPR15').ZMRETX             00483200
                      AIF   ('&XRETCODE' EQ 'REG15').ZMRETX             00483300
                      AIF   ('&XRETCODE' EQ 'R15').ZMRETX               00483400
                      AIF   ('&XRETCODE' EQ '15').ZMRETX                00483500
&ZOPN                 SETA  &ZOPN+1                                     00483600
&ZOPL(&ZOPN)          SETC  ' '                                         00483700
&ZOPO(&ZOPN)          SETC  'ST'                                        00483800
&ZOPV(&ZOPN)          SETC  '15,&XRETCODE'                              00483900
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00484000
                      AGO   .ZMRETX                                     00484100
.*                                                                      00484200
.ZMRET2               ANOP  ,                                           00484300
&ZCGPR                SETC  '&XRETCODE'(2,K'&XRETCODE-2)                00484400
                      AIF   ('&ZCGPR' EQ 'GPR15').ZMRETX                00484500
                      AIF   ('&ZCGPR' EQ 'REG15').ZMRETX                00484600
                      AIF   ('&ZCGPR' EQ 'R15').ZMRETX                  00484700
                      AIF   ('&ZCGPR' EQ '15').ZMRETX                   00484800
&ZOPN                 SETA  &ZOPN+1                                     00484900
&ZOPL(&ZOPN)          SETC  ' '                                         00485000
&ZOPO(&ZOPN)          SETC  '&ZMAC_LR'                                  00485100
&ZOPV(&ZOPN)          SETC  '&ZCGPR,15'                                 00485200
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00485300
.ZMRETX               ANOP  ,                                           00485400
.*******************************************************************    00485500
.***AO.X03  REASON CODE PROCESSING                                      00485600
.*******************************************************************    00485700
                      AIF   (N'&RSNCODE LE 0).ZMRSNX                    00485800
                      AIF   ('&XRSNCODE'(1,1) EQ '(').ZMRSN2            00485900
                      AIF   ('&XRSNCODE' EQ 'GPR0').ZMRSNX              00486000
                      AIF   ('&XRSNCODE' EQ 'GPR00').ZMRSNX             00486100
                      AIF   ('&XRSNCODE' EQ 'REG0').ZMRSNX              00486200
                      AIF   ('&XRSNCODE' EQ 'REG00').ZMRSNX             00486300
                      AIF   ('&XRSNCODE' EQ 'R0').ZMRSNX                00486400
                      AIF   ('&XRSNCODE' EQ '0').ZMRSNX                 00486500
                      AIF   ('&XRSNCODE' EQ '00').ZMRSNX                00486600
&ZOPN                 SETA  &ZOPN+1                                     00486700
&ZOPL(&ZOPN)          SETC  ' '                                         00486800
&ZOPO(&ZOPN)          SETC  'ST'                                        00486900
&ZOPV(&ZOPN)          SETC  '0,&XRSNCODE'                               00487000
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00487100
                      AGO   .ZMRSNX                                     00487200
.*                                                                      00487300
.ZMRSN2               ANOP  ,                                           00487400
&ZCGPR                SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                00487500
                      AIF   ('&ZCGPR' EQ 'GPR0').ZMRSNX                 00487600
                      AIF   ('&ZCGPR' EQ 'GPR00').ZMRSNX                00487700
                      AIF   ('&ZCGPR' EQ 'REG0').ZMRSNX                 00487800
                      AIF   ('&ZCGPR' EQ 'REG00').ZMRSNX                00487900
                      AIF   ('&ZCGPR' EQ 'R0').ZMRSNX                   00488000
                      AIF   ('&ZCGPR' EQ '0').ZMRSNX                    00488100
                      AIF   ('&ZCGPR' EQ '00').ZMRSNX                   00488200
&ZOPN                 SETA  &ZOPN+1                                     00488300
&ZOPL(&ZOPN)          SETC  ' '                                         00488400
&ZOPO(&ZOPN)          SETC  '&ZMAC_LR'                                  00488500
&ZOPV(&ZOPN)          SETC  '&ZCGPR,0'                                  00488600
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00488700
.ZMRSNX               ANOP  ,                                           00488800
.*******************************************************************    00488900
.***AO.X04  LABEL FOR MF=L PROCESSING                                   00489000
.*******************************************************************    00489100
.ZMFLX                ANOP  ,              MF=L PROCESSING              00489200
.*******************************************************************    00489300
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               00489400
.*******************************************************************    00489500
                      ACTR  10000                                       00489600
.*                                                                      00489700
                      LCLA  &ZLC           COLUMN POSITION              00489800
                      LCLA  &ZOPX          LIST TABLE INDEX             00489900
                      LCLC  &ZLL           LABEL                        00490000
                      LCLC  &ZLOP          OPERATION                    00490100
                      LCLC  &ZLV           VALUE                        00490200
                      LCLC  &ZLD           DESCRIPTION                  00490300
.*                                                                      00490400
&ZOPX                 SETA  1                                           00490500
.ZL2                  AIF   (&ZOPX GT &ZOPN1).ZLX  B IF DONE            00490600
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00490700
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00490800
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00490900
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00491000
                      AIF   (K'&ZLD LE 0).ZL5                           00491100
&ZLC                  SETA  35             COMMENT COLUMN               00491200
                      AIF   ('&ZLD'(1,1) NE '*').ZL3                    00491300
&ZLC                  SETA  33             COMMMENT COLUMN              00491400
.ZL3                  AIF   (K'&ZLV GE &ZLC-16-1).ZL4                   00491500
&ZLV                  SETC  '&ZLV'.' '                                  00491600
                      AGO   .ZL3                                        00491700
.*                                                                      00491800
.ZL4                  ANOP  ,                                           00491900
&ZLV                  SETC  '&ZLV'.' '                                  00492000
.ZL5                  ANOP  ,                                           00492100
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00492200
.*                                                                      00492300
&ZLL     &ZLOP &ZLV                                                     00492400
.*                                                                      00492500
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00492600
                      AGO   .ZL2           CONTINUE LOOPING             00492700
.*                                                                      00492800
.ZLX                  ANOP  ,                                           00492900
                      AIF   ('&XMF' EQ 'L').ZLINKX  MF=L                00493000
                      AIF   ('&XMF' EQ 'M').ZLINKX  MF=M                00493100
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00493200
.*-----------BAL invocation code-------------                           00493300
.********************************************************************** 00493400
.*                                                                    * 00493500
.*  Invoke PC for Query EMCS Consoles Interface Routine               * 00493600
.*                                                                    * 00493700
.********************************************************************** 00493800
         L     15,16(0,0)         GET ADDRESS OF CVT FROM PSA           00493900
         L     15,772(,15)        GET ADDRESS OF SFT FROM CVT           00494000
         LA    14,20(0,0)         GET IEEQEMCS INDEX IN LINKAGE TABLE   00494100
         AL    14,100(,15)        POINT REG14 TO IEEQEMCS ETD ENTRY     00494200
         PC    0(14)              PC TO IEEQEMCS SERVICE                00494300
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00494400
.ZLINKX               ANOP  ,                                           00494500
.*******************************************************************    00494600
.***AP.X01  FORMAT GENERATED CODE                                       00494700
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            00494800
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00494900
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00495000
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00495100
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00495200
                      AIF   (K'&ZLD LE 0).ZL51                          00495300
&ZLC                  SETA  35             COMMENT COLUMN               00495400
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   00495500
&ZLC                  SETA  33             COMMENT COLUMN               00495600
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  00495700
&ZLV                  SETC  '&ZLV'.' '                                  00495800
                      AGO   .ZL31                                       00495900
.*                                                                      00496000
.ZL41                 ANOP  ,                                           00496100
&ZLV                  SETC  '&ZLV'.' '                                  00496200
.ZL51                 ANOP  ,                                           00496300
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00496400
.*                                                                      00496500
&ZLL     &ZLOP &ZLV                                                     00496600
.*                                                                      00496700
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00496800
                      AGO   .ZL21          CONTINUE LOOPING             00496900
.*                                                                      00497000
.ZLX1                 ANOP  ,                                           00497100
.*******************************************************************    00497200
.***AP.X02  END OF IEEQEMCS MACRO                                       00497300
&ZIEEQEMCS            SETC  'YES'          SET IEEQEMCS USED            00497400
         POP   PRINT                                                    00497500
*                                            IEEQEMCS-1                 00497600
         SPACE 1                                                        00497700
.ZLX2                 ANOP  ,                                           00497800
         MEND                                                           00497900
**********************************************************************/ 00498000
*/**** START OF SPECIFICATIONS **************************************** 00498100
*                                                                     * 00498200
*                                                                     * 00498300
*01* MACRO NAME:  IEEQEMCS                              -04/28/07-<1> * 00498400
*                                                                     * 00498500
*                                                                     * 00498600
*01* DESCRIPTIVE NAME:  Query EMCS Console                            * 00498700
*                                                                     * 00498800
*01* PROPRIETARY STATEMENT:                                           * 00498900
*                                                                     * 00499000
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00499100
*     5694-A01 COPYRIGHT IBM CORP. 1999, 2006                         * 00499200
*                                                                     * 00499300
* STATUS= HBB7730                                                     * 00499400
*                                                                     * 00499500
*                                                                     * 00499600
*                                                                     * 00499700
*01* FUNCTION:                                                        * 00499800
*       See the IEEQEMCS macro prologue for details.                  * 00499900
*                                                                     * 00500000
*01* INPUT:                                                           * 00500100
*                                                                     * 00500200
*            ?IEEQEMCS    ÝREQUEST(»COUNT!SUMMARY!INFO!FULLº)¨        * 00500300
*                         ÝSTATUS(»ACTIVE!INACTIVE!ALL!BACKLOG!ERRº)¨ * 00500400
*                         ÝBKLG_NUM(»xbklg_num!10º)¨                  * 00500500
*                         ÝCN(»xcn!ANY_CONSº)¨                        * 00500600
*                         ÝSYS(»xsys!ANY_SYSº)¨                       * 00500700
*                         ÝKEY(»xkey!ANY_KEYº)¨                       * 00500800
*                         ÝAUTH(»ANY!MASTER!SYS!IO!CONS!ALL!INFO!     * 00500900
*                                SYSONLY!IOONLY!CONSONLY!ALLONLY!     * 00501000
*                                INFOONLYº)¨                          * 00501100
*                         ÝATTR(»ANY!YES!ROUT!HC!AUTO!AUTON!MN!NONE!  * 00501200
*                                INTIDS!UNKNIDSº)¨                    * 00501300
*                         ÝDOM(»ANY!YES!NORMAL!ALL!NONEº)¨            * 00501400
*                         ÝBUFPTR(»xbufptr!0º)                        * 00501500
*                              BUFSIZE(xbufsize)¨                     * 00501600
*                         ÝCONSCNT(»xconscnt!0º)¨                     * 00501700
*                         ÝTOKEN(»xtoken!0º)                          * 00501800
*                              RECSIZE(xrecsize)¨                     * 00501900
*                         ÝRETCODE(xretcode)¨                         * 00502000
*                         ÝRSNCODE(xrsncode)¨                         * 00502100
*                         ÝPLISTVER(»xplistver!IMPLIED_VERSIONº)¨     * 00502200
*                        Ð MF(E,xmfctrl»,COMPLETE!NOCHECKº)           * 00502300
*                        Ô MF(L,xmfctrl»,xmfattr!BDY(DWORD)º)         * 00502400
*                        ¿ MF(M,xmfctrl»,COMPLETE!NOCHECKº)           * 00502500
*                                                                     * 00502600
****** END OF SPECIFICATIONS *****************************************/ 00502700
*/*PB.ECHO01 MACRO INVOCATION ECHO-----------------------------------*/ 00502800
*  ANS('@SPACE;') NORESCAN COL(MACLMAR);                                00502900
*  ANS('/* ? IEEQEMCS '!!MACLIST!!' ')                                  00503000
*      NORESCAN COL(MACLMAR+5);    /* START ECHO */                     00503100
*                                                                       00503200
*  DCL ZELO  FIXED;                                                     00503300
*  DCL ZECOL FIXED;                                                     00503400
*                                                                       00503500
*  ZELO=1;     /* STARTING COLUMN */                                    00503600
*  DO WHILE ZELO<=LENGTH(MACKEYS);  /* PARENTHSIS SCAN */               00503700
*    ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');                    00503800
*    IF ZECOL>0                                                         00503900
*      THEN                                                             00504000
*        DO;   /* PARENTHESIS FOUND */                                  00504100
*          ANS(MACKEYS(ZELO:ZELO+ZECOL-1)!!' ')                         00504200
*             NORESCAN COL(MACLMAR+5);                                  00504300
*          ZELO=ZELO+ZECOL;        /* NEXT PORTION */                   00504400
*        END;                                                           00504500
*      ELSE                                                             00504600
*        DO;   /* REMAINING KEYS */                                     00504700
*          ANS(MACKEYS(ZELO:LENGTH(MACKEYS)))                           00504800
*             NORESCAN COL(MACLMAR+5);                                  00504900
*          ZELO=LENGTH(MACKEYS)+1;                                      00505000
*        END;                                                           00505100
*  END;                                                                 00505200
*  ANS(' -04/28/07-1- */')                                              00505300
*      NORESCAN COL(MACLMAR+5);    /* END ECHO */                       00505400
*/********************************************************************/ 00505500
*/*PV.DCL01 MACRO DECLARES AND CODE GENERATION CONTROLS              */ 00505600
*/********************************************************************/ 00505700
*  DCL ZPRINT  EXTERNAL; DEACT ZPRINT; /* YES=PRINT, NO=NO PRINT     */ 00505800
*  DCL ZTEST   EXTERNAL; DEACT ZTEST;  /* YES=TEST, NO=NO TEST       */ 00505900
*  DCL ZSYSTEM EXTERNAL; DEACT ZSYSTEM;/* PCCODE10, MVS, SAK, VM     */ 00506000
*                                                                       00506100
*  DCL   ZIEEQEMCS CHAR EXTERNAL; /* YES=USED AT LEAST ONCE          */ 00506200
*  DEACT ZIEEQEMCS;                                                     00506300
*                                                                       00506400
*  DCL ZMACRET FIXED; DEACT ZMACRET;                                    00506500
*  ZMACRET=0;                   /* MACRO COMPILE RETURN CODE         */ 00506600
*                                                                       00506700
*  DCL ZMS CHAR;   DEACT ZMS;   /* ERROR MESSAGE                     */ 00506800
*  DCL ZCVAL CHAR; DEACT ZCVAL; /* ERROR MESSAGE WORK AREA           */ 00506900
*                                                                       00507000
*  DCL ZI FIXED;  DEACT ZI;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00507100
*  DCL ZJ FIXED;  DEACT ZJ;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00507200
*  DCL ZK FIXED;  DEACT ZK;     /* INDEX FOR RANGE COLON (:)         */ 00507300
*  DCL ZL FIXED;  DEACT ZL;     /* INDEX FOR RANGE VALUE CHECKING    */ 00507400
*  DCL ZLO FIXED; DEACT ZLO;    /* LOW RANGE VALUE                   */ 00507500
*  DCL ZHI FIXED; DEACT ZHI;    /* HIGH RANGE VALUE                  */ 00507600
*  DCL ZW CHAR;   DEACT ZW;     /* WORK AREA FOR RANGE VALUE SUBLIST */ 00507700
*  DCL ZN FIXED;  DEACT ZN;     /* NUMERIC WORK VARIABLE             */ 00507800
*  DCL ZC CHAR;   DEACT ZC;     /* CHARACTER WORK VARIABLE           */ 00507900
*  DCL ZMAXINVOCLEN FIXED; DEACT ZMAXINVOCLEN;  /* INVOCATION LENGTH */ 00508000
*  DCL ZPLLEN FIXED; DEACT ZPLLEN;        /* PARAMETER LIST LENGTH   */ 00508100
*                                                                       00508200
*  DCL ZPRMMAX FIXED;           /* MAXIMUM PARM LIST SIZE            */ 00508300
*  DCL ZPRMNUM FIXED;           /* PARAMETER ARRAY INDEX             */ 00508400
*  DCL ZPRM(100);               /* PARAMETER ENTRY                   */ 00508500
*  DCL EHAMAXLEN FIXED EXTERNAL;   /* MAX ILIST SIZE FOR PARM LISTS  */ 00508600
*  DCL EHAREGS CHARACTER EXTERNAL; /* REG DCLS                       */ 00508700
*  DCL EHAREGS64 CHARACTER EXTERNAL; /* REG DCLS                     */ 00508800
*  DCL EHALIST CHARACTER EXTERNAL; /* STANDARD PARM LIST GENERATION  */ 00508900
*/*******************************************************************/  00509000
*/*PV.XVAR01 DECLARE ALL MACRO PARAMETER VARIABLES                  */  00509100
*/*******************************************************************/  00509200
*  DCL XREQUEST;  DEACT XREQUEST;  /***PV.XVAR02 INPUT VALUE */         00509300
*  DCL ZXREQUEST; DEACT ZXREQUEST;  /***INPUT/OUTPUT CONTROL */         00509400
*  DCL XSTATUS;  DEACT XSTATUS;    /***PV.XVAR02 INPUT VALUE */         00509500
*  DCL ZXSTATUS; DEACT ZXSTATUS;   /***INPUT/OUTPUT CONTROL */          00509600
*  DCL XBKLG_NUM;  DEACT XBKLG_NUM;  /***PV.XVAR02 INPUT NAME */        00509700
*  DCL ZXBKLG_NUM; DEACT ZXBKLG_NUM;  /***INPUT/OUTPUT CONTROL */       00509800
*  DCL XCN;  DEACT XCN;            /***PV.XVAR02 INPUT NAME */          00509900
*  DCL ZXCN; DEACT ZXCN;           /***INPUT/OUTPUT CONTROL */          00510000
*  DCL XSYS;  DEACT XSYS;          /***PV.XVAR02 INPUT NAME */          00510100
*  DCL ZXSYS; DEACT ZXSYS;         /***INPUT/OUTPUT CONTROL */          00510200
*  DCL XKEY;  DEACT XKEY;          /***PV.XVAR02 INPUT NAME */          00510300
*  DCL ZXKEY; DEACT ZXKEY;         /***INPUT/OUTPUT CONTROL */          00510400
*  DCL XAUTH;  DEACT XAUTH;        /***PV.XVAR02 INPUT VALUE */         00510500
*  DCL ZXAUTH; DEACT ZXAUTH;       /***INPUT/OUTPUT CONTROL */          00510600
*  DCL XATTR;  DEACT XATTR;        /***PV.XVAR02 INPUT VALUE */         00510700
*  DCL ZXATTR; DEACT ZXATTR;       /***INPUT/OUTPUT CONTROL */          00510800
*  DCL XDOM;  DEACT XDOM;          /***PV.XVAR02 INPUT VALUE */         00510900
*  DCL ZXDOM; DEACT ZXDOM;         /***INPUT/OUTPUT CONTROL */          00511000
*  DCL XBUFPTR;  DEACT XBUFPTR;    /***PV.XVAR02 INPUT NAME */          00511100
*  DCL ZXBUFPTR; DEACT ZXBUFPTR;   /***INPUT/OUTPUT CONTROL */          00511200
*  DCL XBUFSIZE;  DEACT XBUFSIZE;  /***PV.XVAR02 INPUT NAME */          00511300
*  DCL ZXBUFSIZE; DEACT ZXBUFSIZE;  /***INPUT/OUTPUT CONTROL */         00511400
*  DCL XCONSCNT;  DEACT XCONSCNT;  /***PV.XVAR02 INPUT NAME */          00511500
*  DCL ZXCONSCNT; DEACT ZXCONSCNT;  /***INPUT/OUTPUT CONTROL */         00511600
*  DCL XTOKEN;  DEACT XTOKEN;      /***PV.XVAR02 INPUT NAME */          00511700
*  DCL ZXTOKEN; DEACT ZXTOKEN;     /***INPUT/OUTPUT CONTROL */          00511800
*  DCL XRECSIZE;  DEACT XRECSIZE;  /***PV.XVAR02 INPUT NAME */          00511900
*  DCL ZXRECSIZE; DEACT ZXRECSIZE;  /***INPUT/OUTPUT CONTROL */         00512000
*  DCL XRETCODE;  DEACT XRETCODE;  /***PV.XVAR02 OUTPUT NAME */         00512100
*  DCL ZXRETCODE; DEACT ZXRETCODE;  /***INPUT/OUTPUT CONTROL */         00512200
*  DCL XRSNCODE;  DEACT XRSNCODE;  /***PV.XVAR02 OUTPUT NAME */         00512300
*  DCL ZXRSNCODE; DEACT ZXRSNCODE;  /***INPUT/OUTPUT CONTROL */         00512400
*  DCL XPLISTVER FIXED;  DEACT XPLISTVER;  /***PV.XVAR02 INPUT VALUE */ 00512500
*  DCL ZXPLISTVER; DEACT ZXPLISTVER;  /***INPUT/OUTPUT CONTROL */       00512600
*  DCL XMF;  DEACT XMF;            /***PV.XVAR02 INPUT VALUE */         00512700
*  DCL ZXMF; DEACT ZXMF;           /***INPUT/OUTPUT CONTROL */          00512800
*  DCL XMFCTRL;  DEACT XMFCTRL;    /***PV.XVAR02 INPUT NAME */          00512900
*  DCL ZXMFCTRL; DEACT ZXMFCTRL;   /***INPUT/OUTPUT CONTROL */          00513000
*  DCL XMFSCK;  DEACT XMFSCK;      /***PV.XVAR02 INPUT VALUE */         00513100
*  DCL ZXMFSCK; DEACT ZXMFSCK;     /***INPUT/OUTPUT CONTROL */          00513200
*  DCL XMFATTR;  DEACT XMFATTR;    /***PV.XVAR02 INPUT VALUE */         00513300
*  DCL ZXMFATTR; DEACT ZXMFATTR;   /***INPUT/OUTPUT CONTROL */          00513400
*/********************************************************************/ 00513500
*/***PC.PLV01  PROCESS PLISTVER                                      */ 00513600
*/********************************************************************/ 00513700
*  IF PLISTVER(1) = 'MAX' THEN                                          00513800
*    XPLISTVER=1;                                                       00513900
*  ELSE                                                                 00514000
*    XPLISTVER=1;                                                       00514100
*  IF PLISTVER^=''                                                      00514200
*     & PLISTVER(1)^='IMPLIED_VERSION'                                  00514300
*     & PLISTVER(1)^='MAX'                                              00514400
*    THEN                                                               00514500
*      DO;                                                              00514600
*                                                                       00514700
*        ZCVAL='';                           /* ERROR FLAG */           00514800
*        IF PLISTVER='PLISTVER' ! PLISTVER='()'  /*CHECK ENTRY*/        00514900
*          THEN                                                         00515000
*            DO;                                                        00515100
*              ZMS=' 8, THE "PLISTVER" KEY'!! /**KOPTP* MSG*/           00515200
*                  ' MUST CONTAIN ONE'!!                                00515300
*                  ' (OR MORE) ARGUMENT(S).';                           00515400
*              ANS MSG('?IEEQEMCS ---> '!!ZMS);                         00515500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00515600
*              ZMACRET=8;                    /* MACRO ERROR */          00515700
*              ZCVAL='NO_ARGUMENT';                                     00515800
*            END;                                                       00515900
*        IF NUMBER(PLISTVER)>1               /* CHECK POSITIONALS */    00516000
*          THEN                                                         00516100
*            DO;                                                        00516200
*              ZMS=' 8, "PLISTVER'!!         /**KPOSP* MSG*/            00516300
*                  PLISTVER!!                                           00516400
*                  '" "PLISTVER"'!!                                     00516500
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00516600
*              ANS MSG('?IEEQEMCS ---> '!!ZMS);                         00516700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00516800
*              ZMACRET=8;                    /* MACRO ERROR */          00516900
*            END;                                                       00517000
*                                                                       00517100
*        ZC=PLISTVER(1);                                                00517200
*        DO ZL=1 TO LENGTH(ZC);              /* MUST BE NUMBER */       00517300
*          IF ZC(ZL:ZL)<'0' !                /* MUST BE NUMERIC */      00517400
*             ZC(ZL:ZL)>'9'                  /* MUST BE NUMERIC */      00517500
*            THEN                                                       00517600
*              ZCVAL='NUMERIC';              /* NUMERIC ERROR */        00517700
*        END;                                                           00517800
*        IF ZCVAL=''                                                    00517900
*          THEN                                                         00518000
*            DO;                             /* CHECK RANGE LIMITS */   00518100
*            IF FIXED(PLISTVER(1))>=XPLISTVER                           00518200
*              THEN                                                     00518300
*                XPLISTVER=FIXED(PLISTVER(1));                          00518400
*              ELSE                                                     00518500
*                DO;                                                    00518600
*              ZMS=' 8, PLISTVER='!!         /**KVALP* MSG*/            00518700
*                    PLISTVER(1)!!                                      00518800
*                  ', BUT PLISTVER OF '!!                               00518900
*                    CHAR(XPLISTVER)!!                                  00519000
*                  ' IS REQUIRED.';                                     00519100
*              ANS MSG('?IEEQEMCS ---> '!!ZMS);                         00519200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00519300
*              ZMACRET=8;                    /* MACRO ERROR */          00519400
*                END;                                                   00519500
*              IF XPLISTVER<1 !              /* LOW LIMIT */            00519600
*                 XPLISTVER>1                /* HIGH LIMIT */           00519700
*                THEN                                                   00519800
*                  ZCVAL='RANGE';            /* RANGE ERROR */          00519900
*            END;                                                       00520000
*        IF ZCVAL^=''                                                   00520100
*          THEN                                                         00520200
*            DO;                             /* RANGE ERROR */          00520300
*              ZXPLISTVER='';                /* RESET IN/OUTPUT */      00520400
*              ZMS=' 8, "PLISTVER '!!        /**KRNGP* MSG*/            00520500
*                  PLISTVER!!                                           00520600
*                  '" THE RANGE IS "1-1"'!!                             00520700
*                  ' FOR ARGUMENT 1.';                                  00520800
*              ANS MSG('?IEEQEMCS ---> '!!ZMS);                         00520900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00521000
*              ZMACRET=8;                    /* MACRO ERROR */          00521100
*            END;                                                       00521200
*      END;                                                             00521300
*                                                                       00521400
*/********************************************************************/ 00521500
*/***PG.MF01  PROCESS MF MACRO FORMS                                 */ 00521600
*/********************************************************************/ 00521700
*/*PG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00521800
*  XMF='';                                                              00521900
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00522000
*  IF MF(1)='E'                              /* CHECK FOR KEYWORD */    00522100
*    THEN                                                               00522200
*      DO;                                                              00522300
*        XMF='E';                            /* SET XVARIABLE */        00522400
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00522500
*          THEN                                                         00522600
*            DO;                                                        00522700
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00522800
*                  MF!!                                                 00522900
*                  '" "MF"'!!                                           00523000
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00523100
*              ANS MSG('?IEEQEMCS ---> '!!ZMS);                         00523200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00523300
*              ZMACRET=8;                    /* MACRO ERROR */          00523400
*            END;                                                       00523500
*/*PG.KXVAR03 NAME, RQD INPUT, POS(2) -XVARIABLE---------------------*/ 00523600
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00523700
*  IF MF(2)=''                               /* CHECK FOR NULL */       00523800
*   THEN                                                                00523900
*    DO;                                     /* KEY IS REQUIRED */      00524000
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00524100
*        ZMS=' 8,  '!!                                                  00524200
*            ' FOR THE "MF" KEY, POSITIONAL'!!                          00524300
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00524400
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00524500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00524600
*        ZMACRET=8;                          /* MACRO ERROR */          00524700
*    END;                                                               00524800
*  ELSE                                                                 00524900
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00525000
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00525100
*  XMFSCK='';                                /* RESET XVARIABLE */      00525200
*  IF MF(3) = 'COMPLETE'                                                00525300
*    THEN                                                               00525400
*      XMFSCK = 'COMPLETE';                  /* SET XVARIABLE */        00525500
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00525600
*  IF MF(3) = 'NOCHECK'                                                 00525700
*    THEN                                                               00525800
*      XMFSCK = 'NOCHECK';                   /* SET XVARIABLE */        00525900
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00526000
*  ZXMFSCK='INPUT';                          /* SET IN/OUTPUT */        00526100
*  IF XMFSCK=''                              /* CHECK FOR KEYWORD */    00526200
*    THEN                                                               00526300
*      DO;                                   /* KEYWORD NOT ENTERED */  00526400
*        XMFSCK='COMPLETE';                  /* SET DEFAULT */          00526500
*        IF MF(3)^=''                                                   00526600
*          THEN                                                         00526700
*            DO;                                                        00526800
*              ZXMFSCK='';                   /* RESET IN/OUTPUT */      00526900
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/            00527000
*                  MF!!'"'!!                                            00527100
*                  ' ARGUMENT 3 IS AN UNKNOWN KEYWORD. '!!              00527200
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00527300
*                  ' "COMPLETE"'!!           /* VALID KEYWORD */        00527400
*                  ' OR "NOCHECK".';         /* VALID KEYWORD */        00527500
*              ANS MSG('?IEEQEMCS ---> '!!ZMS);                         00527600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00527700
*              ZMACRET=8;                    /* MACRO ERROR */          00527800
*            END;                                                       00527900
*      END;                                                             00528000
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00528100
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00528200
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00528300
*  IF MF(1)='L'                              /* CHECK FOR KEYWORD */    00528400
*    THEN                                                               00528500
*      DO;                                                              00528600
*        XMF='L';                            /* SET XVARIABLE */        00528700
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00528800
*          THEN                                                         00528900
*            DO;                                                        00529000
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00529100
*                  MF!!                                                 00529200
*                  '" "MF"'!!                                           00529300
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00529400
*              ANS MSG('?IEEQEMCS ---> '!!ZMS);                         00529500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00529600
*              ZMACRET=8;                    /* MACRO ERROR */          00529700
*            END;                                                       00529800
*/*PG.KKCTL10 -MF(L) SPECIAL CHECK-----------------------------------*/ 00529900
*        ZMAXINVOCLEN = LENGTH(MF) + 2;                                 00530000
*        IF PLISTVER ^= ''                                              00530100
*          THEN                                                         00530200
*            ZMAXINVOCLEN=ZMAXINVOCLEN + LENGTH(PLISTVER) + 8;          00530300
*        IF LENGTH(MACKEYS) > ZMAXINVOCLEN !                            00530400
*           MACLIST ^= ''                    /* CHECK FOR OTHER PARMS*/ 00530500
*          THEN                                                         00530600
*            DO;                                                        00530700
*              ZMS=' 8, THE "L" FORM OF "MF"'!! /**MFLP* MSG*/          00530800
*                  ' CAN ONLY HAVE'!!                                   00530900
*                  ' THE "PLISTVER" KEY'!!                              00531000
*                  ' SPECIFIED ON THE INVOCATION.';                     00531100
*              ANS MSG('?IEEQEMCS ---> '!!ZMS);                         00531200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00531300
*              ZMACRET=8;                    /* MACRO ERROR */          00531400
*            END;                                                       00531500
*/*PG.KXVAR03 NAME, RQD INPUT, POS(2) -XVARIABLE---------------------*/ 00531600
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00531700
*  IF MF(2)=''                               /* CHECK FOR NULL */       00531800
*   THEN                                                                00531900
*    DO;                                     /* KEY IS REQUIRED */      00532000
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00532100
*        ZMS=' 8,  '!!                                                  00532200
*            ' FOR THE "MF" KEY, POSITIONAL'!!                          00532300
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00532400
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00532500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00532600
*        ZMACRET=8;                          /* MACRO ERROR */          00532700
*    END;                                                               00532800
*  ELSE                                                                 00532900
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00533000
*/*PG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE--------------------*/ 00533100
*  ZXMFATTR='INPUT';                         /* SET IN/OUTPUT */        00533200
*  XMFATTR='BDY(DWORD)';                     /* SET DEFAULT */          00533300
*  IF MF(3)^=''                              /* CHECK FOR NULL */       00533400
*    THEN                                                               00533500
*      XMFATTR=MF(3);                        /* SET XVARIABLE */        00533600
*/*PG.KCK01 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH---------------*/ 00533700
*  IF ZXMFATTR^='' &                         /* NOT IN/OUTPUT */        00533800
*     LENGTH(XMFATTR)>60                                                00533900
*    THEN                                                               00534000
*      DO;                                                              00534100
*        ZXMFATTR='';                        /* RESET IN/OUTPUT */      00534200
*        ZMS=' 8, "MF'!!                     /**KLNGP* MSG*/            00534300
*            MF!!                                                       00534400
*            '" ARGUMENT 3 EXCEEDS THE MAXIMUM'!!                       00534500
*            ' LENGTH OF 60 CHARACTERS. ';                              00534600
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00534700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00534800
*        ZMACRET=8;                          /* MACRO ERROR */          00534900
*      END;                                                             00535000
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00535100
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00535200
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00535300
*  IF MF(1)='M'                              /* CHECK FOR KEYWORD */    00535400
*    THEN                                                               00535500
*      DO;                                                              00535600
*        XMF='M';                            /* SET XVARIABLE */        00535700
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00535800
*          THEN                                                         00535900
*            DO;                                                        00536000
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00536100
*                  MF!!                                                 00536200
*                  '" "MF"'!!                                           00536300
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00536400
*              ANS MSG('?IEEQEMCS ---> '!!ZMS);                         00536500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00536600
*              ZMACRET=8;                    /* MACRO ERROR */          00536700
*            END;                                                       00536800
*/*PG.KXVAR03 NAME, RQD INPUT, POS(2) -XVARIABLE---------------------*/ 00536900
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00537000
*  IF MF(2)=''                               /* CHECK FOR NULL */       00537100
*   THEN                                                                00537200
*    DO;                                     /* KEY IS REQUIRED */      00537300
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00537400
*        ZMS=' 8,  '!!                                                  00537500
*            ' FOR THE "MF" KEY, POSITIONAL'!!                          00537600
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00537700
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00537800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00537900
*        ZMACRET=8;                          /* MACRO ERROR */          00538000
*    END;                                                               00538100
*  ELSE                                                                 00538200
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00538300
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00538400
*  XMFSCK='';                                /* RESET XVARIABLE */      00538500
*  IF MF(3) = 'COMPLETE'                                                00538600
*    THEN                                                               00538700
*      XMFSCK = 'COMPLETE';                  /* SET XVARIABLE */        00538800
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00538900
*  IF MF(3) = 'NOCHECK'                                                 00539000
*    THEN                                                               00539100
*      XMFSCK = 'NOCHECK';                   /* SET XVARIABLE */        00539200
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00539300
*  ZXMFSCK='INPUT';                          /* SET IN/OUTPUT */        00539400
*  IF XMFSCK=''                              /* CHECK FOR KEYWORD */    00539500
*    THEN                                                               00539600
*      DO;                                   /* KEYWORD NOT ENTERED */  00539700
*        XMFSCK='COMPLETE';                  /* SET DEFAULT */          00539800
*        IF MF(3)^=''                                                   00539900
*          THEN                                                         00540000
*            DO;                                                        00540100
*              ZXMFSCK='';                   /* RESET IN/OUTPUT */      00540200
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/            00540300
*                  MF!!'"'!!                                            00540400
*                  ' ARGUMENT 3 IS AN UNKNOWN KEYWORD. '!!              00540500
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00540600
*                  ' "COMPLETE"'!!           /* VALID KEYWORD */        00540700
*                  ' OR "NOCHECK".';         /* VALID KEYWORD */        00540800
*              ANS MSG('?IEEQEMCS ---> '!!ZMS);                         00540900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00541000
*              ZMACRET=8;                    /* MACRO ERROR */          00541100
*            END;                                                       00541200
*      END;                                                             00541300
*/*PG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00541400
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00541500
*/*PG.KKCTL06 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00541600
*  IF MF='MF'                                                           00541700
*    ! MF='()'                               /*CHECK ENTRY*/            00541800
*     THEN                                                              00541900
*       DO;                                                             00542000
*              ZMS=' 8, THE "MF" KEY'!!      /**KOPTP* MSG*/            00542100
*                  ' MUST CONTAIN ONE'!!                                00542200
*                  ' (OR MORE) ARGUMENT(S).';                           00542300
*              ANS MSG('?IEEQEMCS ---> '!!ZMS);                         00542400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00542500
*              ZMACRET=8;                    /* MACRO ERROR */          00542600
*       END;                                                            00542700
*  ELSE                                                                 00542800
*    DO;                                                                00542900
*      ZXMF='INPUT';                         /* SET IN/OUTPUT */        00543000
*      IF XMF=''                             /* CHECK FOR KEYWORD */    00543100
*        THEN                                                           00543200
*          DO;                               /* KEYWORD NOT ENTERED */  00543300
*            XMF='E';                        /* SET DEFAULT */          00543400
*            IF MF(1)^=''                    /* CHECK FOR KEYWORD */    00543500
*              THEN                                                     00543600
*                DO;                                                    00543700
*                  ZXMF='';                  /* RESET IN/OUTPUT */      00543800
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/            00543900
*                  MF!!'"'!!                                            00544000
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00544100
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00544200
*                  ' "E",'!!                 /* VALID KEYWORD */        00544300
*                  ' "L",'!!                 /* VALID KEYWORD */        00544400
*                  ' OR "M".';               /* VALID KEYWORD */        00544500
*              ANS MSG('?IEEQEMCS ---> '!!ZMS);                         00544600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00544700
*              ZMACRET=8;                    /* MACRO ERROR */          00544800
*                END;                                                   00544900
*          END;                                                         00545000
*    END;                                                               00545100
*/*PG.KKCTL07 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00545200
*  IF MF(1)=''                               /* CHECK FOR KEYWORD */    00545300
*    THEN                                                               00545400
*      DO;                                                              00545500
*        ZXMF='';                            /* RESET IN/OUTPUT */      00545600
*        ZMS=' 8, THE'!!                     /**KRKWP* MSG*/            00545700
*            ' "MF" KEY AND ITS'!!                                      00545800
*            ' ARGUMENT ARE REQUIRED.'!!                                00545900
*            ' VALID KEYWORD CHOICE(S) ARE:'!!                          00546000
*            ' "E",'!!                       /* VALID KEYWORD */        00546100
*            ' "L",'!!                       /* VALID KEYWORD */        00546200
*            ' OR "M".';                     /* VALID KEYWORD */        00546300
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00546400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00546500
*        ZMACRET=8;                          /* MACRO ERROR */          00546600
*      END;                                                             00546700
*/********************************************************************/ 00546800
*/***PD.P01 FULL DEFAULT CHECKING                                    */ 00546900
*/********************************************************************/ 00547000
*  IF PLISTVER=''                                                       00547100
*     ! PLISTVER(1)='IMPLIED_VERSION'                                   00547200
*    THEN                                                               00547300
*      ZC='ON';                              /* DEFAULT FLAG ON */      00547400
*    ELSE                                                               00547500
*      ZC='OFF';                             /* DEFAULT FLAG OFF */     00547600
*/********************************************************************/ 00547700
*/***PD.P02 DEFAULT ECHO                                             */ 00547800
*/********************************************************************/ 00547900
*/*PD.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00548000
*  IF XMF^='L'                                                          00548100
*     & XMFSCK='COMPLETE'                                               00548200
*    THEN                                                               00548300
*      DO;                                   /* FULL SYNTAX CHECK */    00548400
*        ANS('/*DEFAULT(S): */')                                        00548500
*           NORESCAN COL(MACLMAR+5);                                    00548600
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00548700
*  XREQUEST='COUNT';                         /* RESET XVARIABLE */      00548800
*  IF REQUEST(1)=''                                                     00548900
*    THEN                                                               00549000
*        ZC='ON';                            /* DEFAULT FLAG ON */      00549100
*  IF REQUEST(1)='COUNT'                                                00549200
*    THEN                                                               00549300
*        XREQUEST='';                        /* SET XVARIABLE */        00549400
*  IF REQUEST(1)='SUMMARY'                                              00549500
*    THEN                                                               00549600
*        XREQUEST='';                        /* SET XVARIABLE */        00549700
*  IF REQUEST(1)='INFO'                                                 00549800
*    THEN                                                               00549900
*        XREQUEST='';                        /* SET XVARIABLE */        00550000
*  IF REQUEST(1)='FULL'                                                 00550100
*    THEN                                                               00550200
*        XREQUEST='';                        /* SET XVARIABLE */        00550300
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00550400
*  IF XREQUEST^=''                                                      00550500
*    THEN DO;                                                           00550600
*      ANS('/* REQUEST('!!                                              00550700
*          XREQUEST!!                                                   00550800
*          ')*/')                                                       00550900
*          NORESCAN COL(MACLMAR+5);                                     00551000
*      XREQUEST = '';                                                   00551100
*    END;                                                               00551200
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00551300
*  XSTATUS='ACTIVE';                         /* RESET XVARIABLE */      00551400
*  IF STATUS(1)=''                                                      00551500
*    THEN                                                               00551600
*        ZC='ON';                            /* DEFAULT FLAG ON */      00551700
*  IF STATUS(1)='ACTIVE'                                                00551800
*    THEN                                                               00551900
*        XSTATUS='';                         /* SET XVARIABLE */        00552000
*  IF STATUS(1)='INACTIVE'                                              00552100
*    THEN                                                               00552200
*        XSTATUS='';                         /* SET XVARIABLE */        00552300
*  IF STATUS(1)='ALL'                                                   00552400
*    THEN                                                               00552500
*        XSTATUS='';                         /* SET XVARIABLE */        00552600
*  IF STATUS(1)='BACKLOG'                                               00552700
*    THEN                                                               00552800
*        XSTATUS='';                         /* SET XVARIABLE */        00552900
*  IF STATUS(1)='ERR'                                                   00553000
*    THEN                                                               00553100
*        XSTATUS='';                         /* SET XVARIABLE */        00553200
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00553300
*  IF XSTATUS^=''                                                       00553400
*    THEN DO;                                                           00553500
*      ANS('/* STATUS('!!                                               00553600
*          XSTATUS!!                                                    00553700
*          ')*/')                                                       00553800
*          NORESCAN COL(MACLMAR+5);                                     00553900
*      XSTATUS = '';                                                    00554000
*    END;                                                               00554100
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00554200
*  XBKLG_NUM='';                                                        00554300
*  IF BKLG_NUM(1)=''                                                    00554400
*    THEN                                                               00554500
*      DO;                                                              00554600
*        XBKLG_NUM='10';                     /* SET DEFAULT */          00554700
*        ZC='ON';                            /* DEFAULT FLAG ON */      00554800
*      END;                                                             00554900
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00555000
*  IF XBKLG_NUM^=''                                                     00555100
*    THEN DO;                                                           00555200
*      ANS('/* BKLG_NUM('!!                                             00555300
*          XBKLG_NUM!!                                                  00555400
*          ')*/')                                                       00555500
*          NORESCAN COL(MACLMAR+5);                                     00555600
*      XBKLG_NUM = '';                                                  00555700
*    END;                                                               00555800
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00555900
*  XCN='';                                                              00556000
*  IF CN(1)=''                                                          00556100
*    THEN                                                               00556200
*      DO;                                                              00556300
*        XCN='ANY_CONS';                     /* SET DEFAULT */          00556400
*        ZC='ON';                            /* DEFAULT FLAG ON */      00556500
*      END;                                                             00556600
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00556700
*  IF XCN^=''                                                           00556800
*    THEN DO;                                                           00556900
*      ANS('/* CN('!!                                                   00557000
*          XCN!!                                                        00557100
*          ')*/')                                                       00557200
*          NORESCAN COL(MACLMAR+5);                                     00557300
*      XCN = '';                                                        00557400
*    END;                                                               00557500
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00557600
*  XSYS='';                                                             00557700
*  IF SYS(1)=''                                                         00557800
*    THEN                                                               00557900
*      DO;                                                              00558000
*        XSYS='ANY_SYS';                     /* SET DEFAULT */          00558100
*        ZC='ON';                            /* DEFAULT FLAG ON */      00558200
*      END;                                                             00558300
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00558400
*  IF XSYS^=''                                                          00558500
*    THEN DO;                                                           00558600
*      ANS('/* SYS('!!                                                  00558700
*          XSYS!!                                                       00558800
*          ')*/')                                                       00558900
*          NORESCAN COL(MACLMAR+5);                                     00559000
*      XSYS = '';                                                       00559100
*    END;                                                               00559200
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00559300
*  XKEY='';                                                             00559400
*  IF KEY(1)=''                                                         00559500
*    THEN                                                               00559600
*      DO;                                                              00559700
*        XKEY='ANY_KEY';                     /* SET DEFAULT */          00559800
*        ZC='ON';                            /* DEFAULT FLAG ON */      00559900
*      END;                                                             00560000
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00560100
*  IF XKEY^=''                                                          00560200
*    THEN DO;                                                           00560300
*      ANS('/* KEY('!!                                                  00560400
*          XKEY!!                                                       00560500
*          ')*/')                                                       00560600
*          NORESCAN COL(MACLMAR+5);                                     00560700
*      XKEY = '';                                                       00560800
*    END;                                                               00560900
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00561000
*  XAUTH='ANY';                              /* RESET XVARIABLE */      00561100
*  IF AUTH(1)=''                                                        00561200
*    THEN                                                               00561300
*        ZC='ON';                            /* DEFAULT FLAG ON */      00561400
*  IF AUTH(1)='ANY'                                                     00561500
*    THEN                                                               00561600
*        XAUTH='';                           /* SET XVARIABLE */        00561700
*  IF AUTH(1)='MASTER'                                                  00561800
*    THEN                                                               00561900
*        XAUTH='';                           /* SET XVARIABLE */        00562000
*  IF AUTH(1)='SYS'                                                     00562100
*    THEN                                                               00562200
*        XAUTH='';                           /* SET XVARIABLE */        00562300
*  IF AUTH(1)='IO'                                                      00562400
*    THEN                                                               00562500
*        XAUTH='';                           /* SET XVARIABLE */        00562600
*  IF AUTH(1)='CONS'                                                    00562700
*    THEN                                                               00562800
*        XAUTH='';                           /* SET XVARIABLE */        00562900
*  IF AUTH(1)='ALL'                                                     00563000
*    THEN                                                               00563100
*        XAUTH='';                           /* SET XVARIABLE */        00563200
*  IF AUTH(1)='INFO'                                                    00563300
*    THEN                                                               00563400
*        XAUTH='';                           /* SET XVARIABLE */        00563500
*  IF AUTH(1)='SYSONLY'                                                 00563600
*    THEN                                                               00563700
*        XAUTH='';                           /* SET XVARIABLE */        00563800
*  IF AUTH(1)='IOONLY'                                                  00563900
*    THEN                                                               00564000
*        XAUTH='';                           /* SET XVARIABLE */        00564100
*  IF AUTH(1)='CONSONLY'                                                00564200
*    THEN                                                               00564300
*        XAUTH='';                           /* SET XVARIABLE */        00564400
*  IF AUTH(1)='ALLONLY'                                                 00564500
*    THEN                                                               00564600
*        XAUTH='';                           /* SET XVARIABLE */        00564700
*  IF AUTH(1)='INFOONLY'                                                00564800
*    THEN                                                               00564900
*        XAUTH='';                           /* SET XVARIABLE */        00565000
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00565100
*  IF XAUTH^=''                                                         00565200
*    THEN DO;                                                           00565300
*      ANS('/* AUTH('!!                                                 00565400
*          XAUTH!!                                                      00565500
*          ')*/')                                                       00565600
*          NORESCAN COL(MACLMAR+5);                                     00565700
*      XAUTH = '';                                                      00565800
*    END;                                                               00565900
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00566000
*  XATTR='ANY';                              /* RESET XVARIABLE */      00566100
*  IF ATTR(1)=''                                                        00566200
*    THEN                                                               00566300
*        ZC='ON';                            /* DEFAULT FLAG ON */      00566400
*  IF ATTR(1)='ANY'                                                     00566500
*    THEN                                                               00566600
*        XATTR='';                           /* SET XVARIABLE */        00566700
*  IF ATTR(1)='YES'                                                     00566800
*    THEN                                                               00566900
*        XATTR='';                           /* SET XVARIABLE */        00567000
*  IF ATTR(1)='ROUT'                                                    00567100
*    THEN                                                               00567200
*        XATTR='';                           /* SET XVARIABLE */        00567300
*  IF ATTR(1)='HC'                                                      00567400
*    THEN                                                               00567500
*        XATTR='';                           /* SET XVARIABLE */        00567600
*  IF ATTR(1)='AUTO'                                                    00567700
*    THEN                                                               00567800
*        XATTR='';                           /* SET XVARIABLE */        00567900
*  IF ATTR(1)='AUTON'                                                   00568000
*    THEN                                                               00568100
*        XATTR='';                           /* SET XVARIABLE */        00568200
*  IF ATTR(1)='MN'                                                      00568300
*    THEN                                                               00568400
*        XATTR='';                           /* SET XVARIABLE */        00568500
*  IF ATTR(1)='NONE'                                                    00568600
*    THEN                                                               00568700
*        XATTR='';                           /* SET XVARIABLE */        00568800
*  IF ATTR(1)='INTIDS'                                                  00568900
*    THEN                                                               00569000
*        XATTR='';                           /* SET XVARIABLE */        00569100
*  IF ATTR(1)='UNKNIDS'                                                 00569200
*    THEN                                                               00569300
*        XATTR='';                           /* SET XVARIABLE */        00569400
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00569500
*  IF XATTR^=''                                                         00569600
*    THEN DO;                                                           00569700
*      ANS('/* ATTR('!!                                                 00569800
*          XATTR!!                                                      00569900
*          ')*/')                                                       00570000
*          NORESCAN COL(MACLMAR+5);                                     00570100
*      XATTR = '';                                                      00570200
*    END;                                                               00570300
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00570400
*  XDOM='ANY';                               /* RESET XVARIABLE */      00570500
*  IF DOM(1)=''                                                         00570600
*    THEN                                                               00570700
*        ZC='ON';                            /* DEFAULT FLAG ON */      00570800
*  IF DOM(1)='ANY'                                                      00570900
*    THEN                                                               00571000
*        XDOM='';                            /* SET XVARIABLE */        00571100
*  IF DOM(1)='YES'                                                      00571200
*    THEN                                                               00571300
*        XDOM='';                            /* SET XVARIABLE */        00571400
*  IF DOM(1)='NORMAL'                                                   00571500
*    THEN                                                               00571600
*        XDOM='';                            /* SET XVARIABLE */        00571700
*  IF DOM(1)='ALL'                                                      00571800
*    THEN                                                               00571900
*        XDOM='';                            /* SET XVARIABLE */        00572000
*  IF DOM(1)='NONE'                                                     00572100
*    THEN                                                               00572200
*        XDOM='';                            /* SET XVARIABLE */        00572300
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00572400
*  IF XDOM^=''                                                          00572500
*    THEN DO;                                                           00572600
*      ANS('/* DOM('!!                                                  00572700
*          XDOM!!                                                       00572800
*          ')*/')                                                       00572900
*          NORESCAN COL(MACLMAR+5);                                     00573000
*      XDOM = '';                                                       00573100
*    END;                                                               00573200
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00573300
*  XBUFPTR='';                                                          00573400
*  IF BUFPTR(1)=''                                                      00573500
*    THEN                                                               00573600
*      DO;                                                              00573700
*        XBUFPTR='0';                        /* SET DEFAULT */          00573800
*        ZC='ON';                            /* DEFAULT FLAG ON */      00573900
*      END;                                                             00574000
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00574100
*  IF XBUFPTR^=''                                                       00574200
*    THEN DO;                                                           00574300
*      ANS('/* BUFPTR('!!                                               00574400
*          XBUFPTR!!                                                    00574500
*          ')*/')                                                       00574600
*          NORESCAN COL(MACLMAR+5);                                     00574700
*      XBUFPTR = '';                                                    00574800
*    END;                                                               00574900
*/*PD.KXVAR01 NAME, OPT RQD INPUT, KEYS -XVARIABLE-------------------*/ 00575000
*  XBUFSIZE='';                                                         00575100
*  IF BUFSIZE(1)=''                                                     00575200
*    THEN                                                               00575300
*      DO;                                                              00575400
*        XBUFSIZE='0';                       /* SET DEFAULT */          00575500
*        ZC='ON';                            /* DEFAULT FLAG ON */      00575600
*      END;                                                             00575700
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00575800
*  IF XBUFSIZE^=''                                                      00575900
*    THEN DO;                                                           00576000
*      ANS('/* BUFSIZE('!!                                              00576100
*          XBUFSIZE!!                                                   00576200
*          ')*/')                                                       00576300
*          NORESCAN COL(MACLMAR+5);                                     00576400
*      XBUFSIZE = '';                                                   00576500
*    END;                                                               00576600
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00576700
*  XCONSCNT='';                                                         00576800
*  IF CONSCNT(1)=''                                                     00576900
*    THEN                                                               00577000
*      DO;                                                              00577100
*        XCONSCNT='0';                       /* SET DEFAULT */          00577200
*        ZC='ON';                            /* DEFAULT FLAG ON */      00577300
*      END;                                                             00577400
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00577500
*  IF XCONSCNT^=''                                                      00577600
*    THEN DO;                                                           00577700
*      ANS('/* CONSCNT('!!                                              00577800
*          XCONSCNT!!                                                   00577900
*          ')*/')                                                       00578000
*          NORESCAN COL(MACLMAR+5);                                     00578100
*      XCONSCNT = '';                                                   00578200
*    END;                                                               00578300
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00578400
*  XTOKEN='';                                                           00578500
*  IF TOKEN(1)=''                                                       00578600
*    THEN                                                               00578700
*      DO;                                                              00578800
*        XTOKEN='0';                         /* SET DEFAULT */          00578900
*        ZC='ON';                            /* DEFAULT FLAG ON */      00579000
*      END;                                                             00579100
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00579200
*  IF XTOKEN^=''                                                        00579300
*    THEN DO;                                                           00579400
*      ANS('/* TOKEN('!!                                                00579500
*          XTOKEN!!                                                     00579600
*          ')*/')                                                       00579700
*          NORESCAN COL(MACLMAR+5);                                     00579800
*      XTOKEN = '';                                                     00579900
*    END;                                                               00580000
*/*PD.KXVAR01 NAME, OPT RQD INPUT, KEYS -XVARIABLE-------------------*/ 00580100
*  XRECSIZE='';                                                         00580200
*  IF RECSIZE(1)=''                                                     00580300
*    THEN                                                               00580400
*      DO;                                                              00580500
*        XRECSIZE='0';                       /* SET DEFAULT */          00580600
*        ZC='ON';                            /* DEFAULT FLAG ON */      00580700
*      END;                                                             00580800
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00580900
*  IF XRECSIZE^=''                                                      00581000
*    THEN DO;                                                           00581100
*      ANS('/* RECSIZE('!!                                              00581200
*          XRECSIZE!!                                                   00581300
*          ')*/')                                                       00581400
*          NORESCAN COL(MACLMAR+5);                                     00581500
*      XRECSIZE = '';                                                   00581600
*    END;                                                               00581700
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00581800
*  IF PLISTVER=''                                                       00581900
*    THEN DO;                                                           00582000
*      ANS('/* PLISTVER('!!                                             00582100
*          CHAR(XPLISTVER)!!                                            00582200
*          ')*/')                                                       00582300
*          NORESCAN COL(MACLMAR+5);                                     00582400
*    END;                                                               00582500
*  IF ZC='OFF'                               /*NO DEFAULTS TAKEN */     00582600
*    THEN                                                               00582700
*      ANS('/* NONE. */')                                               00582800
*         NORESCAN COL(MACLMAR+5);                                      00582900
*/*PD.P04 END DEFAULT ECHO ------------------------------------------*/ 00583000
*      END;                                                             00583100
*/********************************************************************/ 00583200
*/*PB.SYSL01 INVOKE SP LEVEL AND SYSTEM STATE MACROS                 */ 00583300
*/********************************************************************/ 00583400
*  DCL SYSSPLV CHAR EXTERNAL; DEACT SYSSPLV;/* SPLEVEL 1,2,3         */ 00583500
*  DCL SYSASCE CHAR EXTERNAL; DEACT SYSASCE;/* STATE ANY P AR */        00583600
*  DCL SYSAM64 CHAR EXTERNAL; DEACT SYSAM64;                            00583700
*  DCL SYSALVL FIXED EXTERNAL; DEACT SYSALVL;                           00583800
*                                                                       00583900
*  IF SYSASCE=''                                                        00584000
*    THEN                                                               00584100
*      DO;                                                              00584200
*        IF SYSSPLV=''                                                  00584300
*          THEN                                                         00584400
*            ANS('?SPLEVEL  (TEST);') COL(MACLMAR);                     00584500
*        IF SYSSPLV^='1' & SYSSPLV^='2'                                 00584600
*          THEN                                                         00584700
*            ANS('?SYSSTATE (TEST);') COL(MACLMAR);                     00584800
*          ELSE                                                         00584900
*            SYSASCE='P';                    /* SYSSTATE DEFAULT*/      00585000
*      END;                                                             00585100
*/********************************************************************/ 00585200
*/***PG.P01 FULL MACRO SYNTAX CHECKING                               */ 00585300
*/********************************************************************/ 00585400
*/*PG.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00585500
*  IF XMF^='L'                                                          00585600
*     & XMFSCK='COMPLETE'                                               00585700
*    THEN                                                               00585800
*      DO;                                   /* FULL SYNTAX CHECK */    00585900
*/*PG.P03 EXCESSIVE POSITIONAL ARGUMENTS-----------------------------*/ 00586000
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */    00586100
*    THEN                                                               00586200
*      DO;                                                              00586300
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'!! /**PPOSP* MSG*/            00586400
*            ' "'!!MACLIST!!'"'!!                                       00586500
*            ' CANNOT BE USED.'!!                                       00586600
*            ' NO POSITIONAL ARGUMENTS'!!                               00586700
*            ' ARE ALLOWED.';                                           00586800
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00586900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00587000
*        ZMACRET=8;                          /* MACRO ERROR */          00587100
*      END;                                                             00587200
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00587300
*  IF REQUEST='REQUEST'                      /* CHECK ENTRY */          00587400
*    THEN                                                               00587500
*      DO;                                                              00587600
*        ZMS=' 8, THE "REQUEST" KEY'!!       /**KOPTP* MSG*/            00587700
*            ' MUST CONTAIN ONE'!!                                      00587800
*            ' (OR MORE) ARGUMENT(S).';                                 00587900
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00588000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00588100
*        ZMACRET=8;                          /* MACRO ERROR */          00588200
*      END;                                                             00588300
*  IF NUMBER(REQUEST)>1                      /* CHECK POSITIONALS */    00588400
*    THEN                                                               00588500
*      DO;                                                              00588600
*        ZMS=' 8, "REQUEST'!!                /**KPOSP* MSG*/            00588700
*            REQUEST!!                                                  00588800
*            '" "REQUEST"'!!                                            00588900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00589000
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00589100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00589200
*        ZMACRET=8;                          /* MACRO ERROR */          00589300
*      END;                                                             00589400
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00589500
*  XREQUEST='';                              /* RESET XVARIABLE */      00589600
*  IF REQUEST(1) = 'COUNT'                                              00589700
*    THEN                                                               00589800
*      XREQUEST = 'COUNT';                   /* SET XVARIABLE */        00589900
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00590000
*  IF REQUEST(1) = 'SUMMARY'                                            00590100
*    THEN                                                               00590200
*      XREQUEST = 'SUMMARY';                 /* SET XVARIABLE */        00590300
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00590400
*  IF REQUEST(1) = 'INFO'                                               00590500
*    THEN                                                               00590600
*      XREQUEST = 'INFO';                    /* SET XVARIABLE */        00590700
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00590800
*  IF REQUEST(1) = 'FULL'                                               00590900
*    THEN                                                               00591000
*      XREQUEST = 'FULL';                    /* SET XVARIABLE */        00591100
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00591200
*  ZXREQUEST='INPUT';                        /* SET IN/OUTPUT */        00591300
*  IF XREQUEST=''                            /* CHECK FOR KEYWORD */    00591400
*    THEN                                                               00591500
*      DO;                                   /* KEYWORD NOT ENTERED */  00591600
*        XREQUEST='COUNT';                   /* SET DEFAULT */          00591700
*        IF REQUEST(1)^=''                                              00591800
*          THEN                                                         00591900
*            DO;                                                        00592000
*              ZXREQUEST='';                 /* RESET IN/OUTPUT */      00592100
*              ZMS=' 8, "REQUEST'!!          /**KUKWP* MSG*/            00592200
*                  REQUEST!!'"'!!                                       00592300
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00592400
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00592500
*                  ' "COUNT",'!!             /* VALID KEYWORD */        00592600
*                  ' "SUMMARY",'!!           /* VALID KEYWORD */        00592700
*                  ' "INFO",'!!              /* VALID KEYWORD */        00592800
*                  ' OR "FULL".';            /* VALID KEYWORD */        00592900
*              ANS MSG('?IEEQEMCS ---> '!!ZMS);                         00593000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00593100
*              ZMACRET=8;                    /* MACRO ERROR */          00593200
*            END;                                                       00593300
*      END;                                                             00593400
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00593500
*  IF STATUS='STATUS'                        /* CHECK ENTRY */          00593600
*    THEN                                                               00593700
*      DO;                                                              00593800
*        ZMS=' 8, THE "STATUS" KEY'!!        /**KOPTP* MSG*/            00593900
*            ' MUST CONTAIN ONE'!!                                      00594000
*            ' (OR MORE) ARGUMENT(S).';                                 00594100
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00594200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00594300
*        ZMACRET=8;                          /* MACRO ERROR */          00594400
*      END;                                                             00594500
*  IF NUMBER(STATUS)>1                       /* CHECK POSITIONALS */    00594600
*    THEN                                                               00594700
*      DO;                                                              00594800
*        ZMS=' 8, "STATUS'!!                 /**KPOSP* MSG*/            00594900
*            STATUS!!                                                   00595000
*            '" "STATUS"'!!                                             00595100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00595200
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00595300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00595400
*        ZMACRET=8;                          /* MACRO ERROR */          00595500
*      END;                                                             00595600
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00595700
*  XSTATUS='';                               /* RESET XVARIABLE */      00595800
*  IF STATUS(1) = 'ACTIVE'                                              00595900
*    THEN                                                               00596000
*      XSTATUS = 'ACTIVE';                   /* SET XVARIABLE */        00596100
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00596200
*  IF STATUS(1) = 'INACTIVE'                                            00596300
*    THEN                                                               00596400
*      XSTATUS = 'INACTIVE';                 /* SET XVARIABLE */        00596500
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00596600
*  IF STATUS(1) = 'ALL'                                                 00596700
*    THEN                                                               00596800
*      XSTATUS = 'ALL';                      /* SET XVARIABLE */        00596900
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00597000
*  IF STATUS(1) = 'BACKLOG'                                             00597100
*    THEN                                                               00597200
*      XSTATUS = 'BACKLOG';                  /* SET XVARIABLE */        00597300
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00597400
*  IF STATUS(1) = 'ERR'                                                 00597500
*    THEN                                                               00597600
*      XSTATUS = 'ERR';                      /* SET XVARIABLE */        00597700
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00597800
*  ZXSTATUS='INPUT';                         /* SET IN/OUTPUT */        00597900
*  IF XSTATUS=''                             /* CHECK FOR KEYWORD */    00598000
*    THEN                                                               00598100
*      DO;                                   /* KEYWORD NOT ENTERED */  00598200
*        XSTATUS='ACTIVE';                   /* SET DEFAULT */          00598300
*        IF STATUS(1)^=''                                               00598400
*          THEN                                                         00598500
*            DO;                                                        00598600
*              ZXSTATUS='';                  /* RESET IN/OUTPUT */      00598700
*              ZMS=' 8, "STATUS'!!           /**KUKWP* MSG*/            00598800
*                  STATUS!!'"'!!                                        00598900
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00599000
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00599100
*                  ' "ACTIVE",'!!            /* VALID KEYWORD */        00599200
*                  ' "INACTIVE",'!!          /* VALID KEYWORD */        00599300
*                  ' "ALL",'!!               /* VALID KEYWORD */        00599400
*                  ' "BACKLOG",'!!           /* VALID KEYWORD */        00599500
*                  ' OR "ERR".';             /* VALID KEYWORD */        00599600
*              ANS MSG('?IEEQEMCS ---> '!!ZMS);                         00599700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00599800
*              ZMACRET=8;                    /* MACRO ERROR */          00599900
*            END;                                                       00600000
*      END;                                                             00600100
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00600200
*  IF BKLG_NUM='BKLG_NUM' ! BKLG_NUM='()'    /*CHECK ENTRY*/            00600300
*    THEN                                                               00600400
*      DO;                                                              00600500
*        ZMS=' 8, THE "BKLG_NUM" KEY'!!      /**KOPTP* MSG*/            00600600
*            ' MUST CONTAIN ONE'!!                                      00600700
*            ' (OR MORE) ARGUMENT(S).';                                 00600800
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00600900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00601000
*        ZMACRET=8;                          /* MACRO ERROR */          00601100
*      END;                                                             00601200
*  IF NUMBER(BKLG_NUM)>1                     /* CHECK POSITIONALS */    00601300
*    THEN                                                               00601400
*      DO;                                                              00601500
*        ZMS=' 8, "BKLG_NUM'!!               /**KPOSP* MSG*/            00601600
*            BKLG_NUM!!                                                 00601700
*            '" "BKLG_NUM"'!!                                           00601800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00601900
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00602000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00602100
*        ZMACRET=8;                          /* MACRO ERROR */          00602200
*      END;                                                             00602300
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00602400
*  ZXBKLG_NUM='INPUT';                       /* SET IN/OUTPUT */        00602500
*  XBKLG_NUM='10';                           /* SET DEFAULT */          00602600
*  IF BKLG_NUM(1)^=''                        /* CHECK FOR NULL */       00602700
*    THEN                                                               00602800
*      XBKLG_NUM=BKLG_NUM(1);                /* SET XVARIABLE */        00602900
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00603000
*  IF CN='CN' ! CN='()'                      /*CHECK ENTRY*/            00603100
*    THEN                                                               00603200
*      DO;                                                              00603300
*        ZMS=' 8, THE "CN" KEY'!!            /**KOPTP* MSG*/            00603400
*            ' MUST CONTAIN ONE'!!                                      00603500
*            ' (OR MORE) ARGUMENT(S).';                                 00603600
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00603700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00603800
*        ZMACRET=8;                          /* MACRO ERROR */          00603900
*      END;                                                             00604000
*  IF NUMBER(CN)>1                           /* CHECK POSITIONALS */    00604100
*    THEN                                                               00604200
*      DO;                                                              00604300
*        ZMS=' 8, "CN'!!                     /**KPOSP* MSG*/            00604400
*            CN!!                                                       00604500
*            '" "CN"'!!                                                 00604600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00604700
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00604800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00604900
*        ZMACRET=8;                          /* MACRO ERROR */          00605000
*      END;                                                             00605100
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00605200
*  ZXCN='INPUT';                             /* SET IN/OUTPUT */        00605300
*  XCN='ANY_CONS';                           /* SET DEFAULT */          00605400
*  IF CN(1)^=''                              /* CHECK FOR NULL */       00605500
*    THEN                                                               00605600
*      XCN=CN(1);                            /* SET XVARIABLE */        00605700
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00605800
*  IF SYS='SYS' ! SYS='()'                   /*CHECK ENTRY*/            00605900
*    THEN                                                               00606000
*      DO;                                                              00606100
*        ZMS=' 8, THE "SYS" KEY'!!           /**KOPTP* MSG*/            00606200
*            ' MUST CONTAIN ONE'!!                                      00606300
*            ' (OR MORE) ARGUMENT(S).';                                 00606400
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00606500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00606600
*        ZMACRET=8;                          /* MACRO ERROR */          00606700
*      END;                                                             00606800
*  IF NUMBER(SYS)>1                          /* CHECK POSITIONALS */    00606900
*    THEN                                                               00607000
*      DO;                                                              00607100
*        ZMS=' 8, "SYS'!!                    /**KPOSP* MSG*/            00607200
*            SYS!!                                                      00607300
*            '" "SYS"'!!                                                00607400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00607500
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00607600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00607700
*        ZMACRET=8;                          /* MACRO ERROR */          00607800
*      END;                                                             00607900
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00608000
*  ZXSYS='INPUT';                            /* SET IN/OUTPUT */        00608100
*  XSYS='ANY_SYS';                           /* SET DEFAULT */          00608200
*  IF SYS(1)^=''                             /* CHECK FOR NULL */       00608300
*    THEN                                                               00608400
*      XSYS=SYS(1);                          /* SET XVARIABLE */        00608500
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00608600
*  IF KEY='KEY' ! KEY='()'                   /*CHECK ENTRY*/            00608700
*    THEN                                                               00608800
*      DO;                                                              00608900
*        ZMS=' 8, THE "KEY" KEY'!!           /**KOPTP* MSG*/            00609000
*            ' MUST CONTAIN ONE'!!                                      00609100
*            ' (OR MORE) ARGUMENT(S).';                                 00609200
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00609300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00609400
*        ZMACRET=8;                          /* MACRO ERROR */          00609500
*      END;                                                             00609600
*  IF NUMBER(KEY)>1                          /* CHECK POSITIONALS */    00609700
*    THEN                                                               00609800
*      DO;                                                              00609900
*        ZMS=' 8, "KEY'!!                    /**KPOSP* MSG*/            00610000
*            KEY!!                                                      00610100
*            '" "KEY"'!!                                                00610200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00610300
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00610400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00610500
*        ZMACRET=8;                          /* MACRO ERROR */          00610600
*      END;                                                             00610700
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00610800
*  ZXKEY='INPUT';                            /* SET IN/OUTPUT */        00610900
*  XKEY='ANY_KEY';                           /* SET DEFAULT */          00611000
*  IF KEY(1)^=''                             /* CHECK FOR NULL */       00611100
*    THEN                                                               00611200
*      XKEY=KEY(1);                          /* SET XVARIABLE */        00611300
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00611400
*  IF AUTH='AUTH'                            /* CHECK ENTRY */          00611500
*    THEN                                                               00611600
*      DO;                                                              00611700
*        ZMS=' 8, THE "AUTH" KEY'!!          /**KOPTP* MSG*/            00611800
*            ' MUST CONTAIN ONE'!!                                      00611900
*            ' (OR MORE) ARGUMENT(S).';                                 00612000
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00612100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00612200
*        ZMACRET=8;                          /* MACRO ERROR */          00612300
*      END;                                                             00612400
*  IF NUMBER(AUTH)>1                         /* CHECK POSITIONALS */    00612500
*    THEN                                                               00612600
*      DO;                                                              00612700
*        ZMS=' 8, "AUTH'!!                   /**KPOSP* MSG*/            00612800
*            AUTH!!                                                     00612900
*            '" "AUTH"'!!                                               00613000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00613100
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00613200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00613300
*        ZMACRET=8;                          /* MACRO ERROR */          00613400
*      END;                                                             00613500
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00613600
*  XAUTH='';                                 /* RESET XVARIABLE */      00613700
*  IF AUTH(1) = 'ANY'                                                   00613800
*    THEN                                                               00613900
*      XAUTH = 'ANY';                        /* SET XVARIABLE */        00614000
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00614100
*  IF AUTH(1) = 'MASTER'                                                00614200
*    THEN                                                               00614300
*      XAUTH = 'MASTER';                     /* SET XVARIABLE */        00614400
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00614500
*  IF AUTH(1) = 'SYS'                                                   00614600
*    THEN                                                               00614700
*      XAUTH = 'SYS';                        /* SET XVARIABLE */        00614800
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00614900
*  IF AUTH(1) = 'IO'                                                    00615000
*    THEN                                                               00615100
*      XAUTH = 'IO';                         /* SET XVARIABLE */        00615200
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00615300
*  IF AUTH(1) = 'CONS'                                                  00615400
*    THEN                                                               00615500
*      XAUTH = 'CONS';                       /* SET XVARIABLE */        00615600
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00615700
*  IF AUTH(1) = 'ALL'                                                   00615800
*    THEN                                                               00615900
*      XAUTH = 'ALL';                        /* SET XVARIABLE */        00616000
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00616100
*  IF AUTH(1) = 'INFO'                                                  00616200
*    THEN                                                               00616300
*      XAUTH = 'INFO';                       /* SET XVARIABLE */        00616400
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00616500
*  IF AUTH(1) = 'SYSONLY'                                               00616600
*    THEN                                                               00616700
*      XAUTH = 'SYSONLY';                    /* SET XVARIABLE */        00616800
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00616900
*  IF AUTH(1) = 'IOONLY'                                                00617000
*    THEN                                                               00617100
*      XAUTH = 'IOONLY';                     /* SET XVARIABLE */        00617200
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00617300
*  IF AUTH(1) = 'CONSONLY'                                              00617400
*    THEN                                                               00617500
*      XAUTH = 'CONSONLY';                   /* SET XVARIABLE */        00617600
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00617700
*  IF AUTH(1) = 'ALLONLY'                                               00617800
*    THEN                                                               00617900
*      XAUTH = 'ALLONLY';                    /* SET XVARIABLE */        00618000
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00618100
*  IF AUTH(1) = 'INFOONLY'                                              00618200
*    THEN                                                               00618300
*      XAUTH = 'INFOONLY';                   /* SET XVARIABLE */        00618400
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00618500
*  ZXAUTH='INPUT';                           /* SET IN/OUTPUT */        00618600
*  IF XAUTH=''                               /* CHECK FOR KEYWORD */    00618700
*    THEN                                                               00618800
*      DO;                                   /* KEYWORD NOT ENTERED */  00618900
*        XAUTH='ANY';                        /* SET DEFAULT */          00619000
*        IF AUTH(1)^=''                                                 00619100
*          THEN                                                         00619200
*            DO;                                                        00619300
*              ZXAUTH='';                    /* RESET IN/OUTPUT */      00619400
*              ZMS=' 8, "AUTH'!!             /**KUKWP* MSG*/            00619500
*                  AUTH!!'"'!!                                          00619600
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00619700
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00619800
*                  ' "ANY",'!!               /* VALID KEYWORD */        00619900
*                  ' "MASTER",'!!            /* VALID KEYWORD */        00620000
*                  ' "SYS",'!!               /* VALID KEYWORD */        00620100
*                  ' "IO",'!!                /* VALID KEYWORD */        00620200
*                  ' "CONS",'!!              /* VALID KEYWORD */        00620300
*                  ' "ALL",'!!               /* VALID KEYWORD */        00620400
*                  ' "INFO",'!!              /* VALID KEYWORD */        00620500
*                  ' "SYSONLY",'!!           /* VALID KEYWORD */        00620600
*                  ' "IOONLY",'!!            /* VALID KEYWORD */        00620700
*                  ' "CONSONLY",'!!          /* VALID KEYWORD */        00620800
*                  ' "ALLONLY",'!!           /* VALID KEYWORD */        00620900
*                  ' OR "INFOONLY".';        /* VALID KEYWORD */        00621000
*              ANS MSG('?IEEQEMCS ---> '!!ZMS);                         00621100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00621200
*              ZMACRET=8;                    /* MACRO ERROR */          00621300
*            END;                                                       00621400
*      END;                                                             00621500
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00621600
*  IF ATTR='ATTR'                            /* CHECK ENTRY */          00621700
*    THEN                                                               00621800
*      DO;                                                              00621900
*        ZMS=' 8, THE "ATTR" KEY'!!          /**KOPTP* MSG*/            00622000
*            ' MUST CONTAIN ONE'!!                                      00622100
*            ' (OR MORE) ARGUMENT(S).';                                 00622200
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00622300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00622400
*        ZMACRET=8;                          /* MACRO ERROR */          00622500
*      END;                                                             00622600
*  IF NUMBER(ATTR)>1                         /* CHECK POSITIONALS */    00622700
*    THEN                                                               00622800
*      DO;                                                              00622900
*        ZMS=' 8, "ATTR'!!                   /**KPOSP* MSG*/            00623000
*            ATTR!!                                                     00623100
*            '" "ATTR"'!!                                               00623200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00623300
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00623400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00623500
*        ZMACRET=8;                          /* MACRO ERROR */          00623600
*      END;                                                             00623700
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00623800
*  XATTR='';                                 /* RESET XVARIABLE */      00623900
*  IF ATTR(1) = 'ANY'                                                   00624000
*    THEN                                                               00624100
*      XATTR = 'ANY';                        /* SET XVARIABLE */        00624200
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00624300
*  IF ATTR(1) = 'YES'                                                   00624400
*    THEN                                                               00624500
*      XATTR = 'YES';                        /* SET XVARIABLE */        00624600
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00624700
*  IF ATTR(1) = 'ROUT'                                                  00624800
*    THEN                                                               00624900
*      XATTR = 'ROUT';                       /* SET XVARIABLE */        00625000
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00625100
*  IF ATTR(1) = 'HC'                                                    00625200
*    THEN                                                               00625300
*      XATTR = 'HC';                         /* SET XVARIABLE */        00625400
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00625500
*  IF ATTR(1) = 'AUTO'                                                  00625600
*    THEN                                                               00625700
*      XATTR = 'AUTO';                       /* SET XVARIABLE */        00625800
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00625900
*  IF ATTR(1) = 'AUTON'                                                 00626000
*    THEN                                                               00626100
*      XATTR = 'AUTON';                      /* SET XVARIABLE */        00626200
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00626300
*  IF ATTR(1) = 'MN'                                                    00626400
*    THEN                                                               00626500
*      XATTR = 'MN';                         /* SET XVARIABLE */        00626600
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00626700
*  IF ATTR(1) = 'NONE'                                                  00626800
*    THEN                                                               00626900
*      XATTR = 'NONE';                       /* SET XVARIABLE */        00627000
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00627100
*  IF ATTR(1) = 'INTIDS'                                                00627200
*    THEN                                                               00627300
*      XATTR = 'INTIDS';                     /* SET XVARIABLE */        00627400
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00627500
*  IF ATTR(1) = 'UNKNIDS'                                               00627600
*    THEN                                                               00627700
*      XATTR = 'UNKNIDS';                    /* SET XVARIABLE */        00627800
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00627900
*  ZXATTR='INPUT';                           /* SET IN/OUTPUT */        00628000
*  IF XATTR=''                               /* CHECK FOR KEYWORD */    00628100
*    THEN                                                               00628200
*      DO;                                   /* KEYWORD NOT ENTERED */  00628300
*        XATTR='ANY';                        /* SET DEFAULT */          00628400
*        IF ATTR(1)^=''                                                 00628500
*          THEN                                                         00628600
*            DO;                                                        00628700
*              ZXATTR='';                    /* RESET IN/OUTPUT */      00628800
*              ZMS=' 8, "ATTR'!!             /**KUKWP* MSG*/            00628900
*                  ATTR!!'"'!!                                          00629000
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00629100
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00629200
*                  ' "ANY",'!!               /* VALID KEYWORD */        00629300
*                  ' "YES",'!!               /* VALID KEYWORD */        00629400
*                  ' "ROUT",'!!              /* VALID KEYWORD */        00629500
*                  ' "HC",'!!                /* VALID KEYWORD */        00629600
*                  ' "AUTO",'!!              /* VALID KEYWORD */        00629700
*                  ' "AUTON",'!!             /* VALID KEYWORD */        00629800
*                  ' "MN",'!!                /* VALID KEYWORD */        00629900
*                  ' "NONE",'!!              /* VALID KEYWORD */        00630000
*                  ' "INTIDS",'!!            /* VALID KEYWORD */        00630100
*                  ' OR "UNKNIDS".';         /* VALID KEYWORD */        00630200
*              ANS MSG('?IEEQEMCS ---> '!!ZMS);                         00630300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00630400
*              ZMACRET=8;                    /* MACRO ERROR */          00630500
*            END;                                                       00630600
*      END;                                                             00630700
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00630800
*  IF DOM='DOM'                              /* CHECK ENTRY */          00630900
*    THEN                                                               00631000
*      DO;                                                              00631100
*        ZMS=' 8, THE "DOM" KEY'!!           /**KOPTP* MSG*/            00631200
*            ' MUST CONTAIN ONE'!!                                      00631300
*            ' (OR MORE) ARGUMENT(S).';                                 00631400
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00631500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00631600
*        ZMACRET=8;                          /* MACRO ERROR */          00631700
*      END;                                                             00631800
*  IF NUMBER(DOM)>1                          /* CHECK POSITIONALS */    00631900
*    THEN                                                               00632000
*      DO;                                                              00632100
*        ZMS=' 8, "DOM'!!                    /**KPOSP* MSG*/            00632200
*            DOM!!                                                      00632300
*            '" "DOM"'!!                                                00632400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00632500
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00632600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00632700
*        ZMACRET=8;                          /* MACRO ERROR */          00632800
*      END;                                                             00632900
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00633000
*  XDOM='';                                  /* RESET XVARIABLE */      00633100
*  IF DOM(1) = 'ANY'                                                    00633200
*    THEN                                                               00633300
*      XDOM = 'ANY';                         /* SET XVARIABLE */        00633400
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00633500
*  IF DOM(1) = 'YES'                                                    00633600
*    THEN                                                               00633700
*      XDOM = 'YES';                         /* SET XVARIABLE */        00633800
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00633900
*  IF DOM(1) = 'NORMAL'                                                 00634000
*    THEN                                                               00634100
*      XDOM = 'NORMAL';                      /* SET XVARIABLE */        00634200
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00634300
*  IF DOM(1) = 'ALL'                                                    00634400
*    THEN                                                               00634500
*      XDOM = 'ALL';                         /* SET XVARIABLE */        00634600
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00634700
*  IF DOM(1) = 'NONE'                                                   00634800
*    THEN                                                               00634900
*      XDOM = 'NONE';                        /* SET XVARIABLE */        00635000
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00635100
*  ZXDOM='INPUT';                            /* SET IN/OUTPUT */        00635200
*  IF XDOM=''                                /* CHECK FOR KEYWORD */    00635300
*    THEN                                                               00635400
*      DO;                                   /* KEYWORD NOT ENTERED */  00635500
*        XDOM='ANY';                         /* SET DEFAULT */          00635600
*        IF DOM(1)^=''                                                  00635700
*          THEN                                                         00635800
*            DO;                                                        00635900
*              ZXDOM='';                     /* RESET IN/OUTPUT */      00636000
*              ZMS=' 8, "DOM'!!              /**KUKWP* MSG*/            00636100
*                  DOM!!'"'!!                                           00636200
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00636300
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00636400
*                  ' "ANY",'!!               /* VALID KEYWORD */        00636500
*                  ' "YES",'!!               /* VALID KEYWORD */        00636600
*                  ' "NORMAL",'!!            /* VALID KEYWORD */        00636700
*                  ' "ALL",'!!               /* VALID KEYWORD */        00636800
*                  ' OR "NONE".';            /* VALID KEYWORD */        00636900
*              ANS MSG('?IEEQEMCS ---> '!!ZMS);                         00637000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00637100
*              ZMACRET=8;                    /* MACRO ERROR */          00637200
*            END;                                                       00637300
*      END;                                                             00637400
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00637500
*  IF BUFPTR='BUFPTR' ! BUFPTR='()'          /*CHECK ENTRY*/            00637600
*    THEN                                                               00637700
*      DO;                                                              00637800
*        ZMS=' 8, THE "BUFPTR" KEY'!!        /**KOPTP* MSG*/            00637900
*            ' MUST CONTAIN ONE'!!                                      00638000
*            ' (OR MORE) ARGUMENT(S).';                                 00638100
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00638200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00638300
*        ZMACRET=8;                          /* MACRO ERROR */          00638400
*      END;                                                             00638500
*  IF NUMBER(BUFPTR)>1                       /* CHECK POSITIONALS */    00638600
*    THEN                                                               00638700
*      DO;                                                              00638800
*        ZMS=' 8, "BUFPTR'!!                 /**KPOSP* MSG*/            00638900
*            BUFPTR!!                                                   00639000
*            '" "BUFPTR"'!!                                             00639100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00639200
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00639300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00639400
*        ZMACRET=8;                          /* MACRO ERROR */          00639500
*      END;                                                             00639600
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00639700
*  ZXBUFPTR='INPUT';                         /* SET IN/OUTPUT */        00639800
*  XBUFPTR='0';                              /* SET DEFAULT */          00639900
*  IF BUFPTR(1)^=''                          /* CHECK FOR NULL */       00640000
*    THEN                                                               00640100
*      XBUFPTR=BUFPTR(1);                    /* SET XVARIABLE */        00640200
*/*PG.KXVAR01 NAME, OPT RQD INPUT, KEYS -EXCESSIVE ARGUMENTS---------*/ 00640300
*  IF NUMBER(BUFSIZE)>1                      /* CHECK POSITIONALS */    00640400
*    THEN                                                               00640500
*      DO;                                                              00640600
*        ZMS=' 8, "BUFSIZE'!!                /**KPOSP* MSG*/            00640700
*            BUFSIZE!!                                                  00640800
*            '" "BUFSIZE"'!!                                            00640900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00641000
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00641100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00641200
*        ZMACRET=8;                          /* MACRO ERROR */          00641300
*      END;                                                             00641400
*/*PG.KXVAR07 NAME, OPT RQD INPUT, KEYS -XVARIABLE-------------------*/ 00641500
*  ZXBUFSIZE='INPUT';                        /* SET IN/OUTPUT*/         00641600
*  XBUFSIZE=BUFSIZE(1);                      /* SET XVARIABLE */        00641700
*  IF BUFPTR(1)=''                           /* CHECK KEY */            00641800
*    THEN                                                               00641900
*      DO;                                                              00642000
*        IF BUFSIZE(1)=''                    /* CHECK PARM */           00642100
*          THEN                                                         00642200
*            XBUFSIZE='0';                   /* SET DEFAULT */          00642300
*          ELSE                                                         00642400
*            DO;                                                        00642500
*            ZMS=' 8, "BUFSIZE'!!            /**KDEPP* MSG*/            00642600
*                BUFSIZE!!'"'!!                                         00642700
*                ' CAN ONLY BE SPECIFIED IF'!!                          00642800
*                ' '!!                                                  00642900
*                ' "BUFPTR"'!!                                          00643000
*                ' IS ALSO SPECIFIED.';                                 00643100
*            ANS MSG('?IEEQEMCS ---> '!!ZMS);                           00643200
*            ANS(COMMENT(ZMS)) COL(MACLMAR);                            00643300
*            ZMACRET=8;                      /* MACRO ERROR */          00643400
*            END;                                                       00643500
*      END;                                                             00643600
*    ELSE                                                               00643700
*      IF BUFSIZE(1)=''                      /* CHECK PARM */           00643800
*        THEN                                                           00643900
*          DO;                                                          00644000
*            ZXBUFSIZE='';                   /* RESET IN/OUTPUT*/       00644100
*            ZMS=' 8,  '!!                                              00644200
*                ' "BUFSIZE" KEY AND ITS'!!                             00644300
*                ' ARGUMENT ARE REQUIRED.';  /**KRQDP* MSG*/            00644400
*            ANS MSG('?IEEQEMCS ---> '!!ZMS);                           00644500
*            ANS(COMMENT(ZMS)) COL(MACLMAR);                            00644600
*            ZMACRET=8;                      /* MACRO ERROR */          00644700
*          END;                                                         00644800
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00644900
*  IF CONSCNT='CONSCNT' ! CONSCNT='()'       /*CHECK ENTRY*/            00645000
*    THEN                                                               00645100
*      DO;                                                              00645200
*        ZMS=' 8, THE "CONSCNT" KEY'!!       /**KOPTP* MSG*/            00645300
*            ' MUST CONTAIN ONE'!!                                      00645400
*            ' (OR MORE) ARGUMENT(S).';                                 00645500
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00645600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00645700
*        ZMACRET=8;                          /* MACRO ERROR */          00645800
*      END;                                                             00645900
*  IF NUMBER(CONSCNT)>1                      /* CHECK POSITIONALS */    00646000
*    THEN                                                               00646100
*      DO;                                                              00646200
*        ZMS=' 8, "CONSCNT'!!                /**KPOSP* MSG*/            00646300
*            CONSCNT!!                                                  00646400
*            '" "CONSCNT"'!!                                            00646500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00646600
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00646700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00646800
*        ZMACRET=8;                          /* MACRO ERROR */          00646900
*      END;                                                             00647000
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00647100
*  ZXCONSCNT='INPUT';                        /* SET IN/OUTPUT */        00647200
*  XCONSCNT='0';                             /* SET DEFAULT */          00647300
*  IF CONSCNT(1)^=''                         /* CHECK FOR NULL */       00647400
*    THEN                                                               00647500
*      XCONSCNT=CONSCNT(1);                  /* SET XVARIABLE */        00647600
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00647700
*  IF TOKEN='TOKEN' ! TOKEN='()'             /*CHECK ENTRY*/            00647800
*    THEN                                                               00647900
*      DO;                                                              00648000
*        ZMS=' 8, THE "TOKEN" KEY'!!         /**KOPTP* MSG*/            00648100
*            ' MUST CONTAIN ONE'!!                                      00648200
*            ' (OR MORE) ARGUMENT(S).';                                 00648300
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00648400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00648500
*        ZMACRET=8;                          /* MACRO ERROR */          00648600
*      END;                                                             00648700
*  IF NUMBER(TOKEN)>1                        /* CHECK POSITIONALS */    00648800
*    THEN                                                               00648900
*      DO;                                                              00649000
*        ZMS=' 8, "TOKEN'!!                  /**KPOSP* MSG*/            00649100
*            TOKEN!!                                                    00649200
*            '" "TOKEN"'!!                                              00649300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00649400
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00649500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00649600
*        ZMACRET=8;                          /* MACRO ERROR */          00649700
*      END;                                                             00649800
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00649900
*  ZXTOKEN='INPUT';                          /* SET IN/OUTPUT */        00650000
*  XTOKEN='0';                               /* SET DEFAULT */          00650100
*  IF TOKEN(1)^=''                           /* CHECK FOR NULL */       00650200
*    THEN                                                               00650300
*      XTOKEN=TOKEN(1);                      /* SET XVARIABLE */        00650400
*/*PG.KXVAR01 NAME, OPT RQD INPUT, KEYS -EXCESSIVE ARGUMENTS---------*/ 00650500
*  IF NUMBER(RECSIZE)>1                      /* CHECK POSITIONALS */    00650600
*    THEN                                                               00650700
*      DO;                                                              00650800
*        ZMS=' 8, "RECSIZE'!!                /**KPOSP* MSG*/            00650900
*            RECSIZE!!                                                  00651000
*            '" "RECSIZE"'!!                                            00651100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00651200
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00651300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00651400
*        ZMACRET=8;                          /* MACRO ERROR */          00651500
*      END;                                                             00651600
*/*PG.KXVAR07 NAME, OPT RQD INPUT, KEYS -XVARIABLE-------------------*/ 00651700
*  ZXRECSIZE='INPUT';                        /* SET IN/OUTPUT*/         00651800
*  XRECSIZE=RECSIZE(1);                      /* SET XVARIABLE */        00651900
*  IF TOKEN(1)=''                            /* CHECK KEY */            00652000
*    THEN                                                               00652100
*      DO;                                                              00652200
*        IF RECSIZE(1)=''                    /* CHECK PARM */           00652300
*          THEN                                                         00652400
*            ZXRECSIZE='';                   /* RESET IN/OUTPUT*/       00652500
*          ELSE                                                         00652600
*            DO;                                                        00652700
*            ZMS=' 8, "RECSIZE'!!            /**KDEPP* MSG*/            00652800
*                RECSIZE!!'"'!!                                         00652900
*                ' CAN ONLY BE SPECIFIED IF'!!                          00653000
*                ' '!!                                                  00653100
*                ' "TOKEN"'!!                                           00653200
*                ' IS ALSO SPECIFIED.';                                 00653300
*            ANS MSG('?IEEQEMCS ---> '!!ZMS);                           00653400
*            ANS(COMMENT(ZMS)) COL(MACLMAR);                            00653500
*            ZMACRET=8;                      /* MACRO ERROR */          00653600
*            END;                                                       00653700
*      END;                                                             00653800
*    ELSE                                                               00653900
*      IF RECSIZE(1)=''                      /* CHECK PARM */           00654000
*        THEN                                                           00654100
*          DO;                                                          00654200
*            ZXRECSIZE='';                   /* RESET IN/OUTPUT*/       00654300
*            ZMS=' 8,  '!!                                              00654400
*                ' "RECSIZE" KEY AND ITS'!!                             00654500
*                ' ARGUMENT ARE REQUIRED.';  /**KRQDP* MSG*/            00654600
*            ANS MSG('?IEEQEMCS ---> '!!ZMS);                           00654700
*            ANS(COMMENT(ZMS)) COL(MACLMAR);                            00654800
*            ZMACRET=8;                      /* MACRO ERROR */          00654900
*          END;                                                         00655000
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00655100
*  IF RETCODE='RETCODE' ! RETCODE='()'       /*CHECK ENTRY*/            00655200
*    THEN                                                               00655300
*      DO;                                                              00655400
*        ZMS=' 8, THE "RETCODE" KEY'!!       /**KOPTP* MSG*/            00655500
*            ' MUST CONTAIN ONE'!!                                      00655600
*            ' (OR MORE) ARGUMENT(S).';                                 00655700
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00655800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00655900
*        ZMACRET=8;                          /* MACRO ERROR */          00656000
*      END;                                                             00656100
*  IF NUMBER(RETCODE)>1                      /* CHECK POSITIONALS */    00656200
*    THEN                                                               00656300
*      DO;                                                              00656400
*        ZMS=' 8, "RETCODE'!!                /**KPOSP* MSG*/            00656500
*            RETCODE!!                                                  00656600
*            '" "RETCODE"'!!                                            00656700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00656800
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00656900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00657000
*        ZMACRET=8;                          /* MACRO ERROR */          00657100
*      END;                                                             00657200
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00657300
*  IF RETCODE(1)^=''                         /* CHECK FOR NULL */       00657400
*    THEN                                                               00657500
*      DO;                                                              00657600
*        XRETCODE=RETCODE(1);                /* SET XVARIABLE */        00657700
*        ZXRETCODE='OUTPUT';                 /* SET OUTPUT */           00657800
*      END;                                                             00657900
*  ELSE                                                                 00658000
*    IF ZXRETCODE^=''                                                   00658100
*      THEN                                                             00658200
*        ZXRETCODE='';                       /* RESET OUTPUT */         00658300
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00658400
*  IF RSNCODE='RSNCODE' ! RSNCODE='()'       /*CHECK ENTRY*/            00658500
*    THEN                                                               00658600
*      DO;                                                              00658700
*        ZMS=' 8, THE "RSNCODE" KEY'!!       /**KOPTP* MSG*/            00658800
*            ' MUST CONTAIN ONE'!!                                      00658900
*            ' (OR MORE) ARGUMENT(S).';                                 00659000
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00659100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00659200
*        ZMACRET=8;                          /* MACRO ERROR */          00659300
*      END;                                                             00659400
*  IF NUMBER(RSNCODE)>1                      /* CHECK POSITIONALS */    00659500
*    THEN                                                               00659600
*      DO;                                                              00659700
*        ZMS=' 8, "RSNCODE'!!                /**KPOSP* MSG*/            00659800
*            RSNCODE!!                                                  00659900
*            '" "RSNCODE"'!!                                            00660000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00660100
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00660200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00660300
*        ZMACRET=8;                          /* MACRO ERROR */          00660400
*      END;                                                             00660500
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00660600
*  IF RSNCODE(1)^=''                         /* CHECK FOR NULL */       00660700
*    THEN                                                               00660800
*      DO;                                                              00660900
*        XRSNCODE=RSNCODE(1);                /* SET XVARIABLE */        00661000
*        ZXRSNCODE='OUTPUT';                 /* SET OUTPUT */           00661100
*      END;                                                             00661200
*  ELSE                                                                 00661300
*    IF ZXRSNCODE^=''                                                   00661400
*      THEN                                                             00661500
*        ZXRSNCODE='';                       /* RESET OUTPUT */         00661600
*/*PG.P04 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00661700
*      END;                                  /* END COMPLETE CHECKING*/ 00661800
*/********************************************************************/ 00661900
*/***PE.MF00 PARTIAL MACRO SYNTAX CHECKING                           */ 00662000
*/********************************************************************/ 00662100
*/*PE.MF01 XMF^='L' & XMFSCK='NOCHECK' ------------------------------*/ 00662200
*  IF XMF^='L' & XMFSCK='NOCHECK'                                       00662300
*    THEN                                                               00662400
*      DO;                                   /* PARTIAL SYNTAX CHECK */ 00662500
*/*PE.KC00 INITIALIZE KEYWORD CONTROL VARIABLES----------------------*/ 00662600
*  XREQUEST='';                        /*ejb rmp93*/                    00662700
*  XSTATUS='';                        /*ejb rmp93*/                     00662800
*  XAUTH='';                        /*ejb rmp93*/                       00662900
*  XATTR='';                        /*ejb rmp93*/                       00663000
*  XDOM='';                        /*ejb rmp93*/                        00663100
*/*PE.P01 EXCESSIVE POSITIONALS--------------------------------------*/ 00663200
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */    00663300
*    THEN                                                               00663400
*      DO;                                                              00663500
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'!! /**PPOSP* MSG*/            00663600
*            ' "'!!MACLIST!!'"'!!                                       00663700
*            ' CANNOT BE USED.'!!                                       00663800
*            ' NO POSITIONAL ARGUMENTS'!!                               00663900
*            ' ARE ALLOWED.';                                           00664000
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00664100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00664200
*        ZMACRET=8;                          /* MACRO ERROR */          00664300
*      END;                                                             00664400
*/*PE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00664500
*  IF REQUEST='REQUEST'                      /* CHECK ENTRY */          00664600
*    THEN                                                               00664700
*      DO;                                                              00664800
*        ZMS=' 8, THE "REQUEST" KEY'!!       /**KOPTP* MSG*/            00664900
*            ' MUST CONTAIN ONE'!!                                      00665000
*            ' (OR MORE) ARGUMENT(S).';                                 00665100
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00665200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00665300
*        ZMACRET=8;                          /* MACRO ERROR */          00665400
*      END;                                                             00665500
*  IF NUMBER(REQUEST)>1                      /* CHECK POSITIONALS */    00665600
*    THEN                                                               00665700
*      DO;                                                              00665800
*        ZMS=' 8, "REQUEST'!!                /**KPOSP* MSG*/            00665900
*            REQUEST!!                                                  00666000
*            '" "REQUEST"'!!                                            00666100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00666200
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00666300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00666400
*        ZMACRET=8;                          /* MACRO ERROR */          00666500
*      END;                                                             00666600
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00666700
*  IF REQUEST(1) = 'COUNT'                                              00666800
*    THEN                                                               00666900
*      XREQUEST = 'COUNT';                   /* SET XVARIABLE */        00667000
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00667100
*  IF REQUEST(1) = 'SUMMARY'                                            00667200
*    THEN                                                               00667300
*      XREQUEST = 'SUMMARY';                 /* SET XVARIABLE */        00667400
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00667500
*  IF REQUEST(1) = 'INFO'                                               00667600
*    THEN                                                               00667700
*      XREQUEST = 'INFO';                    /* SET XVARIABLE */        00667800
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00667900
*  IF REQUEST(1) = 'FULL'                                               00668000
*    THEN                                                               00668100
*      XREQUEST = 'FULL';                    /* SET XVARIABLE */        00668200
*/*PE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00668300
*  IF XREQUEST^=''                           /* CHECK FOR KEYWORD */    00668400
*    THEN                                                               00668500
*      ZXREQUEST='INPUT';                    /* SET IN/OUTPUT */        00668600
*    ELSE                                                               00668700
*      DO;                                   /* KEYWORD NOT ENTERED */  00668800
*        IF REQUEST(1)^=''                                              00668900
*          THEN                                                         00669000
*            DO;                                                        00669100
*              ZMS=' 8, "REQUEST'!!          /**KUKWP* MSG*/            00669200
*                  REQUEST!!'"'!!                                       00669300
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00669400
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00669500
*                  ' "COUNT",'!!             /* VALID KEYWORD */        00669600
*                  ' "SUMMARY",'!!           /* VALID KEYWORD */        00669700
*                  ' "INFO",'!!              /* VALID KEYWORD */        00669800
*                  ' OR "FULL".';            /* VALID KEYWORD */        00669900
*              ANS MSG('?IEEQEMCS ---> '!!ZMS);                         00670000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00670100
*              ZMACRET=8;                    /* MACRO ERROR */          00670200
*            END;                                                       00670300
*      END;                                                             00670400
*/*PE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00670500
*  IF STATUS='STATUS'                        /* CHECK ENTRY */          00670600
*    THEN                                                               00670700
*      DO;                                                              00670800
*        ZMS=' 8, THE "STATUS" KEY'!!        /**KOPTP* MSG*/            00670900
*            ' MUST CONTAIN ONE'!!                                      00671000
*            ' (OR MORE) ARGUMENT(S).';                                 00671100
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00671200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00671300
*        ZMACRET=8;                          /* MACRO ERROR */          00671400
*      END;                                                             00671500
*  IF NUMBER(STATUS)>1                       /* CHECK POSITIONALS */    00671600
*    THEN                                                               00671700
*      DO;                                                              00671800
*        ZMS=' 8, "STATUS'!!                 /**KPOSP* MSG*/            00671900
*            STATUS!!                                                   00672000
*            '" "STATUS"'!!                                             00672100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00672200
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00672300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00672400
*        ZMACRET=8;                          /* MACRO ERROR */          00672500
*      END;                                                             00672600
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00672700
*  IF STATUS(1) = 'ACTIVE'                                              00672800
*    THEN                                                               00672900
*      XSTATUS = 'ACTIVE';                   /* SET XVARIABLE */        00673000
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00673100
*  IF STATUS(1) = 'INACTIVE'                                            00673200
*    THEN                                                               00673300
*      XSTATUS = 'INACTIVE';                 /* SET XVARIABLE */        00673400
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00673500
*  IF STATUS(1) = 'ALL'                                                 00673600
*    THEN                                                               00673700
*      XSTATUS = 'ALL';                      /* SET XVARIABLE */        00673800
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00673900
*  IF STATUS(1) = 'BACKLOG'                                             00674000
*    THEN                                                               00674100
*      XSTATUS = 'BACKLOG';                  /* SET XVARIABLE */        00674200
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00674300
*  IF STATUS(1) = 'ERR'                                                 00674400
*    THEN                                                               00674500
*      XSTATUS = 'ERR';                      /* SET XVARIABLE */        00674600
*/*PE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00674700
*  IF XSTATUS^=''                            /* CHECK FOR KEYWORD */    00674800
*    THEN                                                               00674900
*      ZXSTATUS='INPUT';                     /* SET IN/OUTPUT */        00675000
*    ELSE                                                               00675100
*      DO;                                   /* KEYWORD NOT ENTERED */  00675200
*        IF STATUS(1)^=''                                               00675300
*          THEN                                                         00675400
*            DO;                                                        00675500
*              ZMS=' 8, "STATUS'!!           /**KUKWP* MSG*/            00675600
*                  STATUS!!'"'!!                                        00675700
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00675800
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00675900
*                  ' "ACTIVE",'!!            /* VALID KEYWORD */        00676000
*                  ' "INACTIVE",'!!          /* VALID KEYWORD */        00676100
*                  ' "ALL",'!!               /* VALID KEYWORD */        00676200
*                  ' "BACKLOG",'!!           /* VALID KEYWORD */        00676300
*                  ' OR "ERR".';             /* VALID KEYWORD */        00676400
*              ANS MSG('?IEEQEMCS ---> '!!ZMS);                         00676500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00676600
*              ZMACRET=8;                    /* MACRO ERROR */          00676700
*            END;                                                       00676800
*      END;                                                             00676900
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00677000
*  IF BKLG_NUM='BKLG_NUM'                    /* CHECK ENTRY */          00677100
*    THEN                                                               00677200
*      DO;                                                              00677300
*        ZMS=' 8, THE "BKLG_NUM" KEY'!!      /**KOPTP* MSG*/            00677400
*            ' MUST CONTAIN ONE'!!                                      00677500
*            ' (OR MORE) ARGUMENT(S).';                                 00677600
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00677700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00677800
*        ZMACRET=8;                          /* MACRO ERROR */          00677900
*      END;                                                             00678000
*  IF NUMBER(BKLG_NUM)>1                     /* CHECK POSITIONALS */    00678100
*    THEN                                                               00678200
*      DO;                                                              00678300
*        ZMS=' 8, "BKLG_NUM'!!               /**KPOSP* MSG*/            00678400
*            BKLG_NUM!!                                                 00678500
*            '" "BKLG_NUM"'!!                                           00678600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00678700
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00678800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00678900
*        ZMACRET=8;                          /* MACRO ERROR */          00679000
*      END;                                                             00679100
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00679200
*  IF BKLG_NUM(1)^=''                        /* CHECK FOR NULL */       00679300
*    THEN                                                               00679400
*      DO;                                                              00679500
*        XBKLG_NUM=BKLG_NUM(1);              /* SET XVARIABLE */        00679600
*        ZXBKLG_NUM='INPUT';                 /* SET IN/OUTPUT */        00679700
*      END;                                                             00679800
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00679900
*  IF CN='CN'                                /* CHECK ENTRY */          00680000
*    THEN                                                               00680100
*      DO;                                                              00680200
*        ZMS=' 8, THE "CN" KEY'!!            /**KOPTP* MSG*/            00680300
*            ' MUST CONTAIN ONE'!!                                      00680400
*            ' (OR MORE) ARGUMENT(S).';                                 00680500
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00680600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00680700
*        ZMACRET=8;                          /* MACRO ERROR */          00680800
*      END;                                                             00680900
*  IF NUMBER(CN)>1                           /* CHECK POSITIONALS */    00681000
*    THEN                                                               00681100
*      DO;                                                              00681200
*        ZMS=' 8, "CN'!!                     /**KPOSP* MSG*/            00681300
*            CN!!                                                       00681400
*            '" "CN"'!!                                                 00681500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00681600
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00681700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00681800
*        ZMACRET=8;                          /* MACRO ERROR */          00681900
*      END;                                                             00682000
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00682100
*  IF CN(1)^=''                              /* CHECK FOR NULL */       00682200
*    THEN                                                               00682300
*      DO;                                                              00682400
*        XCN=CN(1);                          /* SET XVARIABLE */        00682500
*        ZXCN='INPUT';                       /* SET IN/OUTPUT */        00682600
*      END;                                                             00682700
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00682800
*  IF SYS='SYS'                              /* CHECK ENTRY */          00682900
*    THEN                                                               00683000
*      DO;                                                              00683100
*        ZMS=' 8, THE "SYS" KEY'!!           /**KOPTP* MSG*/            00683200
*            ' MUST CONTAIN ONE'!!                                      00683300
*            ' (OR MORE) ARGUMENT(S).';                                 00683400
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00683500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00683600
*        ZMACRET=8;                          /* MACRO ERROR */          00683700
*      END;                                                             00683800
*  IF NUMBER(SYS)>1                          /* CHECK POSITIONALS */    00683900
*    THEN                                                               00684000
*      DO;                                                              00684100
*        ZMS=' 8, "SYS'!!                    /**KPOSP* MSG*/            00684200
*            SYS!!                                                      00684300
*            '" "SYS"'!!                                                00684400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00684500
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00684600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00684700
*        ZMACRET=8;                          /* MACRO ERROR */          00684800
*      END;                                                             00684900
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00685000
*  IF SYS(1)^=''                             /* CHECK FOR NULL */       00685100
*    THEN                                                               00685200
*      DO;                                                              00685300
*        XSYS=SYS(1);                        /* SET XVARIABLE */        00685400
*        ZXSYS='INPUT';                      /* SET IN/OUTPUT */        00685500
*      END;                                                             00685600
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00685700
*  IF KEY='KEY'                              /* CHECK ENTRY */          00685800
*    THEN                                                               00685900
*      DO;                                                              00686000
*        ZMS=' 8, THE "KEY" KEY'!!           /**KOPTP* MSG*/            00686100
*            ' MUST CONTAIN ONE'!!                                      00686200
*            ' (OR MORE) ARGUMENT(S).';                                 00686300
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00686400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00686500
*        ZMACRET=8;                          /* MACRO ERROR */          00686600
*      END;                                                             00686700
*  IF NUMBER(KEY)>1                          /* CHECK POSITIONALS */    00686800
*    THEN                                                               00686900
*      DO;                                                              00687000
*        ZMS=' 8, "KEY'!!                    /**KPOSP* MSG*/            00687100
*            KEY!!                                                      00687200
*            '" "KEY"'!!                                                00687300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00687400
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00687500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00687600
*        ZMACRET=8;                          /* MACRO ERROR */          00687700
*      END;                                                             00687800
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00687900
*  IF KEY(1)^=''                             /* CHECK FOR NULL */       00688000
*    THEN                                                               00688100
*      DO;                                                              00688200
*        XKEY=KEY(1);                        /* SET XVARIABLE */        00688300
*        ZXKEY='INPUT';                      /* SET IN/OUTPUT */        00688400
*      END;                                                             00688500
*/*PE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00688600
*  IF AUTH='AUTH'                            /* CHECK ENTRY */          00688700
*    THEN                                                               00688800
*      DO;                                                              00688900
*        ZMS=' 8, THE "AUTH" KEY'!!          /**KOPTP* MSG*/            00689000
*            ' MUST CONTAIN ONE'!!                                      00689100
*            ' (OR MORE) ARGUMENT(S).';                                 00689200
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00689300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00689400
*        ZMACRET=8;                          /* MACRO ERROR */          00689500
*      END;                                                             00689600
*  IF NUMBER(AUTH)>1                         /* CHECK POSITIONALS */    00689700
*    THEN                                                               00689800
*      DO;                                                              00689900
*        ZMS=' 8, "AUTH'!!                   /**KPOSP* MSG*/            00690000
*            AUTH!!                                                     00690100
*            '" "AUTH"'!!                                               00690200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00690300
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00690400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00690500
*        ZMACRET=8;                          /* MACRO ERROR */          00690600
*      END;                                                             00690700
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00690800
*  IF AUTH(1) = 'ANY'                                                   00690900
*    THEN                                                               00691000
*      XAUTH = 'ANY';                        /* SET XVARIABLE */        00691100
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00691200
*  IF AUTH(1) = 'MASTER'                                                00691300
*    THEN                                                               00691400
*      XAUTH = 'MASTER';                     /* SET XVARIABLE */        00691500
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00691600
*  IF AUTH(1) = 'SYS'                                                   00691700
*    THEN                                                               00691800
*      XAUTH = 'SYS';                        /* SET XVARIABLE */        00691900
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00692000
*  IF AUTH(1) = 'IO'                                                    00692100
*    THEN                                                               00692200
*      XAUTH = 'IO';                         /* SET XVARIABLE */        00692300
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00692400
*  IF AUTH(1) = 'CONS'                                                  00692500
*    THEN                                                               00692600
*      XAUTH = 'CONS';                       /* SET XVARIABLE */        00692700
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00692800
*  IF AUTH(1) = 'ALL'                                                   00692900
*    THEN                                                               00693000
*      XAUTH = 'ALL';                        /* SET XVARIABLE */        00693100
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00693200
*  IF AUTH(1) = 'INFO'                                                  00693300
*    THEN                                                               00693400
*      XAUTH = 'INFO';                       /* SET XVARIABLE */        00693500
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00693600
*  IF AUTH(1) = 'SYSONLY'                                               00693700
*    THEN                                                               00693800
*      XAUTH = 'SYSONLY';                    /* SET XVARIABLE */        00693900
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00694000
*  IF AUTH(1) = 'IOONLY'                                                00694100
*    THEN                                                               00694200
*      XAUTH = 'IOONLY';                     /* SET XVARIABLE */        00694300
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00694400
*  IF AUTH(1) = 'CONSONLY'                                              00694500
*    THEN                                                               00694600
*      XAUTH = 'CONSONLY';                   /* SET XVARIABLE */        00694700
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00694800
*  IF AUTH(1) = 'ALLONLY'                                               00694900
*    THEN                                                               00695000
*      XAUTH = 'ALLONLY';                    /* SET XVARIABLE */        00695100
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00695200
*  IF AUTH(1) = 'INFOONLY'                                              00695300
*    THEN                                                               00695400
*      XAUTH = 'INFOONLY';                   /* SET XVARIABLE */        00695500
*/*PE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00695600
*  IF XAUTH^=''                              /* CHECK FOR KEYWORD */    00695700
*    THEN                                                               00695800
*      ZXAUTH='INPUT';                       /* SET IN/OUTPUT */        00695900
*    ELSE                                                               00696000
*      DO;                                   /* KEYWORD NOT ENTERED */  00696100
*        IF AUTH(1)^=''                                                 00696200
*          THEN                                                         00696300
*            DO;                                                        00696400
*              ZMS=' 8, "AUTH'!!             /**KUKWP* MSG*/            00696500
*                  AUTH!!'"'!!                                          00696600
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00696700
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00696800
*                  ' "ANY",'!!               /* VALID KEYWORD */        00696900
*                  ' "MASTER",'!!            /* VALID KEYWORD */        00697000
*                  ' "SYS",'!!               /* VALID KEYWORD */        00697100
*                  ' "IO",'!!                /* VALID KEYWORD */        00697200
*                  ' "CONS",'!!              /* VALID KEYWORD */        00697300
*                  ' "ALL",'!!               /* VALID KEYWORD */        00697400
*                  ' "INFO",'!!              /* VALID KEYWORD */        00697500
*                  ' "SYSONLY",'!!           /* VALID KEYWORD */        00697600
*                  ' "IOONLY",'!!            /* VALID KEYWORD */        00697700
*                  ' "CONSONLY",'!!          /* VALID KEYWORD */        00697800
*                  ' "ALLONLY",'!!           /* VALID KEYWORD */        00697900
*                  ' OR "INFOONLY".';        /* VALID KEYWORD */        00698000
*              ANS MSG('?IEEQEMCS ---> '!!ZMS);                         00698100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00698200
*              ZMACRET=8;                    /* MACRO ERROR */          00698300
*            END;                                                       00698400
*      END;                                                             00698500
*/*PE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00698600
*  IF ATTR='ATTR'                            /* CHECK ENTRY */          00698700
*    THEN                                                               00698800
*      DO;                                                              00698900
*        ZMS=' 8, THE "ATTR" KEY'!!          /**KOPTP* MSG*/            00699000
*            ' MUST CONTAIN ONE'!!                                      00699100
*            ' (OR MORE) ARGUMENT(S).';                                 00699200
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00699300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00699400
*        ZMACRET=8;                          /* MACRO ERROR */          00699500
*      END;                                                             00699600
*  IF NUMBER(ATTR)>1                         /* CHECK POSITIONALS */    00699700
*    THEN                                                               00699800
*      DO;                                                              00699900
*        ZMS=' 8, "ATTR'!!                   /**KPOSP* MSG*/            00700000
*            ATTR!!                                                     00700100
*            '" "ATTR"'!!                                               00700200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00700300
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00700400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00700500
*        ZMACRET=8;                          /* MACRO ERROR */          00700600
*      END;                                                             00700700
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00700800
*  IF ATTR(1) = 'ANY'                                                   00700900
*    THEN                                                               00701000
*      XATTR = 'ANY';                        /* SET XVARIABLE */        00701100
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00701200
*  IF ATTR(1) = 'YES'                                                   00701300
*    THEN                                                               00701400
*      XATTR = 'YES';                        /* SET XVARIABLE */        00701500
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00701600
*  IF ATTR(1) = 'ROUT'                                                  00701700
*    THEN                                                               00701800
*      XATTR = 'ROUT';                       /* SET XVARIABLE */        00701900
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00702000
*  IF ATTR(1) = 'HC'                                                    00702100
*    THEN                                                               00702200
*      XATTR = 'HC';                         /* SET XVARIABLE */        00702300
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00702400
*  IF ATTR(1) = 'AUTO'                                                  00702500
*    THEN                                                               00702600
*      XATTR = 'AUTO';                       /* SET XVARIABLE */        00702700
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00702800
*  IF ATTR(1) = 'AUTON'                                                 00702900
*    THEN                                                               00703000
*      XATTR = 'AUTON';                      /* SET XVARIABLE */        00703100
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00703200
*  IF ATTR(1) = 'MN'                                                    00703300
*    THEN                                                               00703400
*      XATTR = 'MN';                         /* SET XVARIABLE */        00703500
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00703600
*  IF ATTR(1) = 'NONE'                                                  00703700
*    THEN                                                               00703800
*      XATTR = 'NONE';                       /* SET XVARIABLE */        00703900
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00704000
*  IF ATTR(1) = 'INTIDS'                                                00704100
*    THEN                                                               00704200
*      XATTR = 'INTIDS';                     /* SET XVARIABLE */        00704300
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00704400
*  IF ATTR(1) = 'UNKNIDS'                                               00704500
*    THEN                                                               00704600
*      XATTR = 'UNKNIDS';                    /* SET XVARIABLE */        00704700
*/*PE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00704800
*  IF XATTR^=''                              /* CHECK FOR KEYWORD */    00704900
*    THEN                                                               00705000
*      ZXATTR='INPUT';                       /* SET IN/OUTPUT */        00705100
*    ELSE                                                               00705200
*      DO;                                   /* KEYWORD NOT ENTERED */  00705300
*        IF ATTR(1)^=''                                                 00705400
*          THEN                                                         00705500
*            DO;                                                        00705600
*              ZMS=' 8, "ATTR'!!             /**KUKWP* MSG*/            00705700
*                  ATTR!!'"'!!                                          00705800
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00705900
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00706000
*                  ' "ANY",'!!               /* VALID KEYWORD */        00706100
*                  ' "YES",'!!               /* VALID KEYWORD */        00706200
*                  ' "ROUT",'!!              /* VALID KEYWORD */        00706300
*                  ' "HC",'!!                /* VALID KEYWORD */        00706400
*                  ' "AUTO",'!!              /* VALID KEYWORD */        00706500
*                  ' "AUTON",'!!             /* VALID KEYWORD */        00706600
*                  ' "MN",'!!                /* VALID KEYWORD */        00706700
*                  ' "NONE",'!!              /* VALID KEYWORD */        00706800
*                  ' "INTIDS",'!!            /* VALID KEYWORD */        00706900
*                  ' OR "UNKNIDS".';         /* VALID KEYWORD */        00707000
*              ANS MSG('?IEEQEMCS ---> '!!ZMS);                         00707100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00707200
*              ZMACRET=8;                    /* MACRO ERROR */          00707300
*            END;                                                       00707400
*      END;                                                             00707500
*/*PE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00707600
*  IF DOM='DOM'                              /* CHECK ENTRY */          00707700
*    THEN                                                               00707800
*      DO;                                                              00707900
*        ZMS=' 8, THE "DOM" KEY'!!           /**KOPTP* MSG*/            00708000
*            ' MUST CONTAIN ONE'!!                                      00708100
*            ' (OR MORE) ARGUMENT(S).';                                 00708200
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00708300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00708400
*        ZMACRET=8;                          /* MACRO ERROR */          00708500
*      END;                                                             00708600
*  IF NUMBER(DOM)>1                          /* CHECK POSITIONALS */    00708700
*    THEN                                                               00708800
*      DO;                                                              00708900
*        ZMS=' 8, "DOM'!!                    /**KPOSP* MSG*/            00709000
*            DOM!!                                                      00709100
*            '" "DOM"'!!                                                00709200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00709300
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00709400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00709500
*        ZMACRET=8;                          /* MACRO ERROR */          00709600
*      END;                                                             00709700
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00709800
*  IF DOM(1) = 'ANY'                                                    00709900
*    THEN                                                               00710000
*      XDOM = 'ANY';                         /* SET XVARIABLE */        00710100
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00710200
*  IF DOM(1) = 'YES'                                                    00710300
*    THEN                                                               00710400
*      XDOM = 'YES';                         /* SET XVARIABLE */        00710500
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00710600
*  IF DOM(1) = 'NORMAL'                                                 00710700
*    THEN                                                               00710800
*      XDOM = 'NORMAL';                      /* SET XVARIABLE */        00710900
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00711000
*  IF DOM(1) = 'ALL'                                                    00711100
*    THEN                                                               00711200
*      XDOM = 'ALL';                         /* SET XVARIABLE */        00711300
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00711400
*  IF DOM(1) = 'NONE'                                                   00711500
*    THEN                                                               00711600
*      XDOM = 'NONE';                        /* SET XVARIABLE */        00711700
*/*PE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00711800
*  IF XDOM^=''                               /* CHECK FOR KEYWORD */    00711900
*    THEN                                                               00712000
*      ZXDOM='INPUT';                        /* SET IN/OUTPUT */        00712100
*    ELSE                                                               00712200
*      DO;                                   /* KEYWORD NOT ENTERED */  00712300
*        IF DOM(1)^=''                                                  00712400
*          THEN                                                         00712500
*            DO;                                                        00712600
*              ZMS=' 8, "DOM'!!              /**KUKWP* MSG*/            00712700
*                  DOM!!'"'!!                                           00712800
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00712900
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00713000
*                  ' "ANY",'!!               /* VALID KEYWORD */        00713100
*                  ' "YES",'!!               /* VALID KEYWORD */        00713200
*                  ' "NORMAL",'!!            /* VALID KEYWORD */        00713300
*                  ' "ALL",'!!               /* VALID KEYWORD */        00713400
*                  ' OR "NONE".';            /* VALID KEYWORD */        00713500
*              ANS MSG('?IEEQEMCS ---> '!!ZMS);                         00713600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00713700
*              ZMACRET=8;                    /* MACRO ERROR */          00713800
*            END;                                                       00713900
*      END;                                                             00714000
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00714100
*  IF BUFPTR='BUFPTR'                        /* CHECK ENTRY */          00714200
*    THEN                                                               00714300
*      DO;                                                              00714400
*        ZMS=' 8, THE "BUFPTR" KEY'!!        /**KOPTP* MSG*/            00714500
*            ' MUST CONTAIN ONE'!!                                      00714600
*            ' (OR MORE) ARGUMENT(S).';                                 00714700
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00714800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00714900
*        ZMACRET=8;                          /* MACRO ERROR */          00715000
*      END;                                                             00715100
*  IF NUMBER(BUFPTR)>1                       /* CHECK POSITIONALS */    00715200
*    THEN                                                               00715300
*      DO;                                                              00715400
*        ZMS=' 8, "BUFPTR'!!                 /**KPOSP* MSG*/            00715500
*            BUFPTR!!                                                   00715600
*            '" "BUFPTR"'!!                                             00715700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00715800
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00715900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00716000
*        ZMACRET=8;                          /* MACRO ERROR */          00716100
*      END;                                                             00716200
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00716300
*  IF BUFPTR(1)^=''                          /* CHECK FOR NULL */       00716400
*    THEN                                                               00716500
*      DO;                                                              00716600
*        XBUFPTR=BUFPTR(1);                  /* SET XVARIABLE */        00716700
*        ZXBUFPTR='INPUT';                   /* SET IN/OUTPUT */        00716800
*      END;                                                             00716900
*/*PE.KXVAR01 NAME, OPT RQD INPUT, KEYS -EXCESSIVE ARGUMENTS---------*/ 00717000
*  IF NUMBER(BUFSIZE)>1                      /* CHECK POSITIONALS */    00717100
*    THEN                                                               00717200
*      DO;                                                              00717300
*        ZMS=' 8, "BUFSIZE'!!                /**KPOSP* MSG*/            00717400
*            BUFSIZE!!                                                  00717500
*            '" "BUFSIZE"'!!                                            00717600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00717700
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00717800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00717900
*        ZMACRET=8;                          /* MACRO ERROR */          00718000
*      END;                                                             00718100
*/*PE.KXVAR03 NAME, OPT RQD INPUT, KEYS -XVARIABLE-------------------*/ 00718200
*  IF BUFSIZE(1)^=''                         /* CHECK FOR NULL */       00718300
*    THEN                                                               00718400
*      DO;                                                              00718500
*        XBUFSIZE=BUFSIZE(1);                /* SET XVARIABLE */        00718600
*        ZXBUFSIZE='INPUT';                  /* SET IN/OUTPUT */        00718700
*      END;                                                             00718800
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00718900
*  IF CONSCNT='CONSCNT'                      /* CHECK ENTRY */          00719000
*    THEN                                                               00719100
*      DO;                                                              00719200
*        ZMS=' 8, THE "CONSCNT" KEY'!!       /**KOPTP* MSG*/            00719300
*            ' MUST CONTAIN ONE'!!                                      00719400
*            ' (OR MORE) ARGUMENT(S).';                                 00719500
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00719600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00719700
*        ZMACRET=8;                          /* MACRO ERROR */          00719800
*      END;                                                             00719900
*  IF NUMBER(CONSCNT)>1                      /* CHECK POSITIONALS */    00720000
*    THEN                                                               00720100
*      DO;                                                              00720200
*        ZMS=' 8, "CONSCNT'!!                /**KPOSP* MSG*/            00720300
*            CONSCNT!!                                                  00720400
*            '" "CONSCNT"'!!                                            00720500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00720600
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00720700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00720800
*        ZMACRET=8;                          /* MACRO ERROR */          00720900
*      END;                                                             00721000
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00721100
*  IF CONSCNT(1)^=''                         /* CHECK FOR NULL */       00721200
*    THEN                                                               00721300
*      DO;                                                              00721400
*        XCONSCNT=CONSCNT(1);                /* SET XVARIABLE */        00721500
*        ZXCONSCNT='INPUT';                  /* SET IN/OUTPUT */        00721600
*      END;                                                             00721700
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00721800
*  IF TOKEN='TOKEN'                          /* CHECK ENTRY */          00721900
*    THEN                                                               00722000
*      DO;                                                              00722100
*        ZMS=' 8, THE "TOKEN" KEY'!!         /**KOPTP* MSG*/            00722200
*            ' MUST CONTAIN ONE'!!                                      00722300
*            ' (OR MORE) ARGUMENT(S).';                                 00722400
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00722500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00722600
*        ZMACRET=8;                          /* MACRO ERROR */          00722700
*      END;                                                             00722800
*  IF NUMBER(TOKEN)>1                        /* CHECK POSITIONALS */    00722900
*    THEN                                                               00723000
*      DO;                                                              00723100
*        ZMS=' 8, "TOKEN'!!                  /**KPOSP* MSG*/            00723200
*            TOKEN!!                                                    00723300
*            '" "TOKEN"'!!                                              00723400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00723500
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00723600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00723700
*        ZMACRET=8;                          /* MACRO ERROR */          00723800
*      END;                                                             00723900
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00724000
*  IF TOKEN(1)^=''                           /* CHECK FOR NULL */       00724100
*    THEN                                                               00724200
*      DO;                                                              00724300
*        XTOKEN=TOKEN(1);                    /* SET XVARIABLE */        00724400
*        ZXTOKEN='INPUT';                    /* SET IN/OUTPUT */        00724500
*      END;                                                             00724600
*/*PE.KXVAR01 NAME, OPT RQD INPUT, KEYS -EXCESSIVE ARGUMENTS---------*/ 00724700
*  IF NUMBER(RECSIZE)>1                      /* CHECK POSITIONALS */    00724800
*    THEN                                                               00724900
*      DO;                                                              00725000
*        ZMS=' 8, "RECSIZE'!!                /**KPOSP* MSG*/            00725100
*            RECSIZE!!                                                  00725200
*            '" "RECSIZE"'!!                                            00725300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00725400
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00725500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00725600
*        ZMACRET=8;                          /* MACRO ERROR */          00725700
*      END;                                                             00725800
*/*PE.KXVAR03 NAME, OPT RQD INPUT, KEYS -XVARIABLE-------------------*/ 00725900
*  IF RECSIZE(1)^=''                         /* CHECK FOR NULL */       00726000
*    THEN                                                               00726100
*      DO;                                                              00726200
*        XRECSIZE=RECSIZE(1);                /* SET XVARIABLE */        00726300
*        ZXRECSIZE='INPUT';                  /* SET IN/OUTPUT */        00726400
*      END;                                                             00726500
*/*PE.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00726600
*  IF RETCODE='RETCODE'                      /* CHECK ENTRY */          00726700
*    THEN                                                               00726800
*      DO;                                                              00726900
*        ZMS=' 8, THE "RETCODE" KEY'!!       /**KOPTP* MSG*/            00727000
*            ' MUST CONTAIN ONE'!!                                      00727100
*            ' (OR MORE) ARGUMENT(S).';                                 00727200
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00727300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00727400
*        ZMACRET=8;                          /* MACRO ERROR */          00727500
*      END;                                                             00727600
*  IF NUMBER(RETCODE)>1                      /* CHECK POSITIONALS */    00727700
*    THEN                                                               00727800
*      DO;                                                              00727900
*        ZMS=' 8, "RETCODE'!!                /**KPOSP* MSG*/            00728000
*            RETCODE!!                                                  00728100
*            '" "RETCODE"'!!                                            00728200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00728300
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00728400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00728500
*        ZMACRET=8;                          /* MACRO ERROR */          00728600
*      END;                                                             00728700
*/*PE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00728800
*  IF RETCODE(1)^=''                         /* CHECK FOR NULL */       00728900
*    THEN                                                               00729000
*      DO;                                                              00729100
*        XRETCODE=RETCODE(1);                /* SET XVARIABLE */        00729200
*        ZXRETCODE='OUTPUT';                 /* SET IN/OUTPUT */        00729300
*      END;                                                             00729400
*/*PE.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00729500
*  IF RSNCODE='RSNCODE'                      /* CHECK ENTRY */          00729600
*    THEN                                                               00729700
*      DO;                                                              00729800
*        ZMS=' 8, THE "RSNCODE" KEY'!!       /**KOPTP* MSG*/            00729900
*            ' MUST CONTAIN ONE'!!                                      00730000
*            ' (OR MORE) ARGUMENT(S).';                                 00730100
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00730200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00730300
*        ZMACRET=8;                          /* MACRO ERROR */          00730400
*      END;                                                             00730500
*  IF NUMBER(RSNCODE)>1                      /* CHECK POSITIONALS */    00730600
*    THEN                                                               00730700
*      DO;                                                              00730800
*        ZMS=' 8, "RSNCODE'!!                /**KPOSP* MSG*/            00730900
*            RSNCODE!!                                                  00731000
*            '" "RSNCODE"'!!                                            00731100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00731200
*        ANS MSG('?IEEQEMCS ---> '!!ZMS);                               00731300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00731400
*        ZMACRET=8;                          /* MACRO ERROR */          00731500
*      END;                                                             00731600
*/*PE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00731700
*  IF RSNCODE(1)^=''                         /* CHECK FOR NULL */       00731800
*    THEN                                                               00731900
*      DO;                                                              00732000
*        XRSNCODE=RSNCODE(1);                /* SET XVARIABLE */        00732100
*        ZXRSNCODE='OUTPUT';                 /* SET IN/OUTPUT */        00732200
*      END;                                                             00732300
*/*PE.MF02 XMF^='L' & XMFSCK='NOCHECK' ------------------------------*/ 00732400
*      END;                                  /* END PARTIAL CHECK */    00732500
*/********************************************************************/ 00732600
*/***PE.MR01 GENERATE CODE IF ZMACRET=0                              */ 00732700
*/********************************************************************/ 00732800
*  IF ZMACRET = 0                                                       00732900
*    THEN                                                               00733000
*      DO;                                                              00733100
*/********************************************************************/ 00733200
*/***PE.PR01 PRINT CONTROLS, DEFAULT IS YES                          */ 00733300
*/********************************************************************/ 00733400
*  ANS(MACCONC!!'LIST PUSH;') NORESCAN COL(MACLMAR);                    00733500
*  IF ZPRINT='NO'                            /* PRINT IS OFF */         00733600
*    THEN                                                               00733700
*      ANS(MACCONC!!'LIST OFF;') NORESCAN COL(MACLMAR);                 00733800
*    ELSE                                                               00733900
*      ANS(MACCONC!!'LIST ON;')  NORESCAN COL(MACLMAR);                 00734000
*/********************************************************************/ 00734100
*/*PE.DO02 OUTER MACRO DO STATEMENT----------------------------------*/ 00734200
*  IF XMF^='L'                                                          00734300
*    THEN                                                               00734400
*      ANS('DO; /* IEEQEMCS-PLISTVER */')                               00734500
*          NORESCAN COL(MACLMAR);                                       00734600
*/*PL.LL01 ?IEEQEMCS MF=L PARAMETER LIST-----------------------------*/ 00734700
*  IF XMF='L'                                                           00734800
*    THEN                                                               00734900
*      DO;                                                              00735000
*        ANS('DCL 1 '!!XMFCTRL!!' '!!XMFATTR!!', '!!                    00735100
*            '/* ?IEEQEMCS PARM LIST*/')                                00735200
*            NORESCAN COL(MACLMAR);                                     00735300
*/*PL.LL13  XQEPLACRN CHAR(4) CONSTANT-------------------------------*/ 00735400
*        ANS('2 '!!XMFCTRL                                              00735500
*         !! '_XQEPLACRN CHAR(4), '                                     00735600
*         !! '/* '!!ZXQEPLACRN                                          00735700
*         !! ' XQEPLACRN */'                                            00735800
*            ) NORESCAN COL(MACLMAR+2);                                 00735900
*/*PL.LL02  XPLISTLEN FIXED(16) BDY(BYTE) INPUT----------------------*/ 00736000
*        ANS('2 '!!XMFCTRL!!                                            00736100
*            '_XPLISTLEN FIXED(16) BDY(BYTE), '!!                       00736200
*            '/* INPUT XPLISTLEN*/')                                    00736300
*            NORESCAN COL(MACLMAR+2);                                   00736400
*/*PL.LL02  XVERSION FIXED(8) INPUT----------------------------------*/ 00736500
*        ANS('2 '!!XMFCTRL!!                                            00736600
*            '_XVERSION FIXED(8), '!!                                   00736700
*            '/* INPUT XVERSION*/')                                     00736800
*            NORESCAN COL(MACLMAR+2);                                   00736900
*/*PL.LL04  XREQUEST FIXED(8) INPUT----------------------------------*/ 00737000
*        ANS('2 '!!XMFCTRL!!                                            00737100
*            '_XREQUEST FIXED(8), '!!                                   00737200
*            '/* '!!ZXREQUEST!!                                         00737300
*            ' XREQUEST */')                                            00737400
*            NORESCAN COL(MACLMAR+2);                                   00737500
*/*PL.LL04  XSTATUS BIT(8) INPUT-------------------------------------*/ 00737600
*        ANS('2 '!!XMFCTRL!!                                            00737700
*            '_XSTATUS BIT(8), '!!                                      00737800
*            '/* '!!ZXSTATUS!!                                          00737900
*            ' XSTATUS */')                                             00738000
*            NORESCAN COL(MACLMAR+2);                                   00738100
*/*PL.LL09 BIT 1XXXXXXX----------------------------------------------*/ 00738200
*          ANS('3 '!!XMFCTRL!!                                          00738300
*              '_ST_ACTIVE BIT(1), '!!                                  00738400
*              '/* BIT */')                                             00738500
*              NORESCAN COL(MACLMAR+2);                                 00738600
*/*PL.LL09 BIT X1XXXXXX----------------------------------------------*/ 00738700
*          ANS('3 '!!XMFCTRL!!                                          00738800
*              '_ST_INACTIVE BIT(1), '!!                                00738900
*              '/* BIT */')                                             00739000
*              NORESCAN COL(MACLMAR+2);                                 00739100
*/*PL.LL09 BIT XX1XXXXX----------------------------------------------*/ 00739200
*          ANS('3 '!!XMFCTRL!!                                          00739300
*              '_ST_ALL BIT(1), '!!                                     00739400
*              '/* BIT */')                                             00739500
*              NORESCAN COL(MACLMAR+2);                                 00739600
*/*PL.LL09 BIT XXX1XXXX----------------------------------------------*/ 00739700
*          ANS('3 '!!XMFCTRL!!                                          00739800
*              '_ST_BACKLOG BIT(1), '!!                                 00739900
*              '/* BIT */')                                             00740000
*              NORESCAN COL(MACLMAR+2);                                 00740100
*/*PL.LL09 BIT XXXX1XXX----------------------------------------------*/ 00740200
*          ANS('3 '!!XMFCTRL!!                                          00740300
*              '_ST_ERR BIT(1), '!!                                     00740400
*              '/* BIT */')                                             00740500
*              NORESCAN COL(MACLMAR+2);                                 00740600
*/*PL.LL10 RESERVED BIT----------------------------------------------*/ 00740700
*          ANS('3 '!!XMFCTRL!!                                          00740800
*              '__RSVD1 BIT(3), '!!                                     00740900
*              '/* BIT */')                                             00741000
*              NORESCAN COL(MACLMAR+2);                                 00741100
*/*PL.LL04  XFLAG1 BIT(8) FIELD_LABEL--------------------------------*/ 00741200
*        ANS('2 '!!XMFCTRL!!                                            00741300
*            '_XFLAG1 BIT(8), '!!                                       00741400
*            '/* FIELD_LABEL */')                                       00741500
*            NORESCAN COL(MACLMAR+2);                                   00741600
*/*PL.LL09 BIT 1XXXXXXX----------------------------------------------*/ 00741700
*          ANS('3 '!!XMFCTRL!!                                          00741800
*              '_KEYUSED_CN BIT(1), '!!                                 00741900
*              '/* BIT */')                                             00742000
*              NORESCAN COL(MACLMAR+2);                                 00742100
*/*PL.LL09 BIT X1XXXXXX----------------------------------------------*/ 00742200
*          ANS('3 '!!XMFCTRL!!                                          00742300
*              '_KEYUSED_SYS BIT(1), '!!                                00742400
*              '/* BIT */')                                             00742500
*              NORESCAN COL(MACLMAR+2);                                 00742600
*/*PL.LL09 BIT XX1XXXXX----------------------------------------------*/ 00742700
*          ANS('3 '!!XMFCTRL!!                                          00742800
*              '_KEYUSED_KEY BIT(1), '!!                                00742900
*              '/* BIT */')                                             00743000
*              NORESCAN COL(MACLMAR+2);                                 00743100
*/*PL.LL10 RESERVED BIT----------------------------------------------*/ 00743200
*          ANS('3 '!!XMFCTRL!!                                          00743300
*              '_XFLAG1_RSVD1 BIT(5), '!!                               00743400
*              '/* BIT */')                                             00743500
*              NORESCAN COL(MACLMAR+2);                                 00743600
*/*PL.LL13  XRSV0001 CHAR(2) RESERVED--------------------------------*/ 00743700
*        ANS('2 '!!XMFCTRL                                              00743800
*         !! '_XRSV0001 CHAR(2), '                                      00743900
*         !! '/* RESERVED */'                                           00744000
*            ) NORESCAN COL(MACLMAR+2);                                 00744100
*/*PL.LL13  XBKLG_NUM FIXED(31) INPUT--------------------------------*/ 00744200
*        ANS('2 '!!XMFCTRL                                              00744300
*         !! '_XBKLG_NUM FIXED(31), '                                   00744400
*         !! '/* '!!ZXBKLG_NUM                                          00744500
*         !! ' XBKLG_NUM */'                                            00744600
*            ) NORESCAN COL(MACLMAR+2);                                 00744700
*/*PL.LL13  XCN CHAR(8) INPUT----------------------------------------*/ 00744800
*        ANS('2 '!!XMFCTRL                                              00744900
*         !! '_XCN CHAR(8), '                                           00745000
*         !! '/* '!!ZXCN                                                00745100
*         !! ' XCN */'                                                  00745200
*            ) NORESCAN COL(MACLMAR+2);                                 00745300
*/*PL.LL13  XSYS CHAR(8) INPUT---------------------------------------*/ 00745400
*        ANS('2 '!!XMFCTRL                                              00745500
*         !! '_XSYS CHAR(8), '                                          00745600
*         !! '/* '!!ZXSYS                                               00745700
*         !! ' XSYS */'                                                 00745800
*            ) NORESCAN COL(MACLMAR+2);                                 00745900
*/*PL.LL13  XKEY CHAR(8) INPUT---------------------------------------*/ 00746000
*        ANS('2 '!!XMFCTRL                                              00746100
*         !! '_XKEY CHAR(8), '                                          00746200
*         !! '/* '!!ZXKEY                                               00746300
*         !! ' XKEY */'                                                 00746400
*            ) NORESCAN COL(MACLMAR+2);                                 00746500
*/*PL.LL04  XAUTH BIT(16) INPUT--------------------------------------*/ 00746600
*        ANS('2 '!!XMFCTRL!!                                            00746700
*            '_XAUTH BIT(16), '!!                                       00746800
*            '/* '!!ZXAUTH!!                                            00746900
*            ' XAUTH */')                                               00747000
*            NORESCAN COL(MACLMAR+2);                                   00747100
*/*PL.LL09 BIT 1XXXXXXXXXXXXXXX--------------------------------------*/ 00747200
*          ANS('3 '!!XMFCTRL!!                                          00747300
*              '_AUTH_ANY BIT(1), '!!                                   00747400
*              '/* BIT */')                                             00747500
*              NORESCAN COL(MACLMAR+2);                                 00747600
*/*PL.LL09 BIT X1XXXXXXXXXXXXXX--------------------------------------*/ 00747700
*          ANS('3 '!!XMFCTRL!!                                          00747800
*              '_AUTH_MASTER BIT(1), '!!                                00747900
*              '/* BIT */')                                             00748000
*              NORESCAN COL(MACLMAR+2);                                 00748100
*/*PL.LL09 BIT XX1XXXXXXXXXXXXX--------------------------------------*/ 00748200
*          ANS('3 '!!XMFCTRL!!                                          00748300
*              '_AUTH_SYS BIT(1), '!!                                   00748400
*              '/* BIT */')                                             00748500
*              NORESCAN COL(MACLMAR+2);                                 00748600
*/*PL.LL09 BIT XXX1XXXXXXXXXXXX--------------------------------------*/ 00748700
*          ANS('3 '!!XMFCTRL!!                                          00748800
*              '_AUTH_IO BIT(1), '!!                                    00748900
*              '/* BIT */')                                             00749000
*              NORESCAN COL(MACLMAR+2);                                 00749100
*/*PL.LL09 BIT XXXX1XXXXXXXXXXX--------------------------------------*/ 00749200
*          ANS('3 '!!XMFCTRL!!                                          00749300
*              '_AUTH_CONS BIT(1), '!!                                  00749400
*              '/* BIT */')                                             00749500
*              NORESCAN COL(MACLMAR+2);                                 00749600
*/*PL.LL09 BIT XXXXX1XXXXXXXXXX--------------------------------------*/ 00749700
*          ANS('3 '!!XMFCTRL!!                                          00749800
*              '_AUTH_INFO BIT(1), '!!                                  00749900
*              '/* BIT */')                                             00750000
*              NORESCAN COL(MACLMAR+2);                                 00750100
*/*PL.LL09 BIT XXXXXX1XXXXXXXXX--------------------------------------*/ 00750200
*          ANS('3 '!!XMFCTRL!!                                          00750300
*              '_AUTH_ALL BIT(1), '!!                                   00750400
*              '/* BIT */')                                             00750500
*              NORESCAN COL(MACLMAR+2);                                 00750600
*/*PL.LL09 BIT XXXXXXX1XXXXXXXX--------------------------------------*/ 00750700
*          ANS('3 '!!XMFCTRL!!                                          00750800
*              '_AUTH_SYSONLY BIT(1), '!!                               00750900
*              '/* BIT */')                                             00751000
*              NORESCAN COL(MACLMAR+2);                                 00751100
*/*PL.LL09 BIT XXXXXXXX1XXXXXXX--------------------------------------*/ 00751200
*          ANS('3 '!!XMFCTRL!!                                          00751300
*              '_AUTH_IOONLY BIT(1), '!!                                00751400
*              '/* BIT */')                                             00751500
*              NORESCAN COL(MACLMAR+2);                                 00751600
*/*PL.LL09 BIT XXXXXXXXX1XXXXXX--------------------------------------*/ 00751700
*          ANS('3 '!!XMFCTRL!!                                          00751800
*              '_AUTH_CONSONLY BIT(1), '!!                              00751900
*              '/* BIT */')                                             00752000
*              NORESCAN COL(MACLMAR+2);                                 00752100
*/*PL.LL09 BIT XXXXXXXXXX1XXXXX--------------------------------------*/ 00752200
*          ANS('3 '!!XMFCTRL!!                                          00752300
*              '_AUTH_INFOONLY BIT(1), '!!                              00752400
*              '/* BIT */')                                             00752500
*              NORESCAN COL(MACLMAR+2);                                 00752600
*/*PL.LL09 BIT XXXXXXXXXXX1XXXX--------------------------------------*/ 00752700
*          ANS('3 '!!XMFCTRL!!                                          00752800
*              '_AUTH_ALLONLY BIT(1), '!!                               00752900
*              '/* BIT */')                                             00753000
*              NORESCAN COL(MACLMAR+2);                                 00753100
*/*PL.LL10 RESERVED BIT----------------------------------------------*/ 00753200
*          ANS('3 '!!XMFCTRL!!                                          00753300
*              '_XFLAG1_RSVD1 BIT(4), '!!                               00753400
*              '/* BIT */')                                             00753500
*              NORESCAN COL(MACLMAR+2);                                 00753600
*/*PL.LL04  XATTR BIT(16) INPUT--------------------------------------*/ 00753700
*        ANS('2 '!!XMFCTRL!!                                            00753800
*            '_XATTR BIT(16), '!!                                       00753900
*            '/* '!!ZXATTR!!                                            00754000
*            ' XATTR */')                                               00754100
*            NORESCAN COL(MACLMAR+2);                                   00754200
*/*PL.LL09 BIT 1XXXXXXXXXXXXXXX--------------------------------------*/ 00754300
*          ANS('3 '!!XMFCTRL!!                                          00754400
*              '_ATTR_ANY BIT(1), '!!                                   00754500
*              '/* BIT */')                                             00754600
*              NORESCAN COL(MACLMAR+2);                                 00754700
*/*PL.LL09 BIT X1XXXXXXXXXXXXXX--------------------------------------*/ 00754800
*          ANS('3 '!!XMFCTRL!!                                          00754900
*              '_ATTR_ROUT BIT(1), '!!                                  00755000
*              '/* BIT */')                                             00755100
*              NORESCAN COL(MACLMAR+2);                                 00755200
*/*PL.LL06 RESERVED BIT----------------------------------------------*/ 00755300
*          ANS('3 '!!XMFCTRL!!                                          00755400
*              '_XFLAG1_RSVD1 BIT(2), '!!                               00755500
*              '/* BIT */')                                             00755600
*              NORESCAN COL(MACLMAR+2);                                 00755700
*/*PL.LL09 BIT XXXX1XXXXXXXXXXX--------------------------------------*/ 00755800
*          ANS('3 '!!XMFCTRL!!                                          00755900
*              '_ATTR_HC BIT(1), '!!                                    00756000
*              '/* BIT */')                                             00756100
*              NORESCAN COL(MACLMAR+2);                                 00756200
*/*PL.LL09 BIT XXXXX1XXXXXXXXXX--------------------------------------*/ 00756300
*          ANS('3 '!!XMFCTRL!!                                          00756400
*              '_ATTR_AUTO BIT(1), '!!                                  00756500
*              '/* BIT */')                                             00756600
*              NORESCAN COL(MACLMAR+2);                                 00756700
*/*PL.LL09 BIT XXXXXX1XXXXXXXXX--------------------------------------*/ 00756800
*          ANS('3 '!!XMFCTRL!!                                          00756900
*              '_ATTR_AUTON BIT(1), '!!                                 00757000
*              '/* BIT */')                                             00757100
*              NORESCAN COL(MACLMAR+2);                                 00757200
*/*PL.LL09 BIT XXXXXXX1XXXXXXXX--------------------------------------*/ 00757300
*          ANS('3 '!!XMFCTRL!!                                          00757400
*              '_ATTR_MN BIT(1), '!!                                    00757500
*              '/* BIT */')                                             00757600
*              NORESCAN COL(MACLMAR+2);                                 00757700
*/*PL.LL09 BIT XXXXXXXX1XXXXXXX--------------------------------------*/ 00757800
*          ANS('3 '!!XMFCTRL!!                                          00757900
*              '_ATTR_NONE BIT(1), '!!                                  00758000
*              '/* BIT */')                                             00758100
*              NORESCAN COL(MACLMAR+2);                                 00758200
*/*PL.LL09 BIT XXXXXXXXX1XXXXXX--------------------------------------*/ 00758300
*          ANS('3 '!!XMFCTRL!!                                          00758400
*              '_ATTR_YES BIT(1), '!!                                   00758500
*              '/* BIT */')                                             00758600
*              NORESCAN COL(MACLMAR+2);                                 00758700
*/*PL.LL09 BIT XXXXXXXXXX1XXXXX--------------------------------------*/ 00758800
*          ANS('3 '!!XMFCTRL!!                                          00758900
*              '_ATTR_INTIDS BIT(1), '!!                                00759000
*              '/* BIT */')                                             00759100
*              NORESCAN COL(MACLMAR+2);                                 00759200
*/*PL.LL09 BIT XXXXXXXXXXX1XXXX--------------------------------------*/ 00759300
*          ANS('3 '!!XMFCTRL!!                                          00759400
*              '_ATTR_UNKNIDS BIT(1), '!!                               00759500
*              '/* BIT */')                                             00759600
*              NORESCAN COL(MACLMAR+2);                                 00759700
*/*PL.LL10 RESERVED BIT----------------------------------------------*/ 00759800
*          ANS('3 '!!XMFCTRL!!                                          00759900
*              '_XFLAG1_RSVD2 BIT(4), '!!                               00760000
*              '/* BIT */')                                             00760100
*              NORESCAN COL(MACLMAR+2);                                 00760200
*/*PL.LL04  XDOM BIT(8) INPUT----------------------------------------*/ 00760300
*        ANS('2 '!!XMFCTRL!!                                            00760400
*            '_XDOM BIT(8), '!!                                         00760500
*            '/* '!!ZXDOM!!                                             00760600
*            ' XDOM */')                                                00760700
*            NORESCAN COL(MACLMAR+2);                                   00760800
*/*PL.LL09 BIT 1XXXXXXX----------------------------------------------*/ 00760900
*          ANS('3 '!!XMFCTRL!!                                          00761000
*              '_DOM_ANY BIT(1), '!!                                    00761100
*              '/* BIT */')                                             00761200
*              NORESCAN COL(MACLMAR+2);                                 00761300
*/*PL.LL09 BIT X1XXXXXX----------------------------------------------*/ 00761400
*          ANS('3 '!!XMFCTRL!!                                          00761500
*              '_DOM_NORM BIT(1), '!!                                   00761600
*              '/* BIT */')                                             00761700
*              NORESCAN COL(MACLMAR+2);                                 00761800
*/*PL.LL09 BIT XX1XXXXX----------------------------------------------*/ 00761900
*          ANS('3 '!!XMFCTRL!!                                          00762000
*              '_DOM_ALL BIT(1), '!!                                    00762100
*              '/* BIT */')                                             00762200
*              NORESCAN COL(MACLMAR+2);                                 00762300
*/*PL.LL09 BIT XXX1XXXX----------------------------------------------*/ 00762400
*          ANS('3 '!!XMFCTRL!!                                          00762500
*              '_DOM_NONE BIT(1), '!!                                   00762600
*              '/* BIT */')                                             00762700
*              NORESCAN COL(MACLMAR+2);                                 00762800
*/*PL.LL09 BIT XXXX1XXX----------------------------------------------*/ 00762900
*          ANS('3 '!!XMFCTRL!!                                          00763000
*              '_DOM_YES BIT(1), '!!                                    00763100
*              '/* BIT */')                                             00763200
*              NORESCAN COL(MACLMAR+2);                                 00763300
*/*PL.LL10 RESERVED BIT----------------------------------------------*/ 00763400
*          ANS('3 '!!XMFCTRL!!                                          00763500
*              '_XFLAG1_RSVD1 BIT(3), '!!                               00763600
*              '/* BIT */')                                             00763700
*              NORESCAN COL(MACLMAR+2);                                 00763800
*/*PL.LL13  XRSV0002 CHAR(3) RESERVED--------------------------------*/ 00763900
*        ANS('2 '!!XMFCTRL                                              00764000
*         !! '_XRSV0002 CHAR(3), '                                      00764100
*         !! '/* RESERVED */'                                           00764200
*            ) NORESCAN COL(MACLMAR+2);                                 00764300
*/*PL.LL13  XBUFPTR PTR(31) INPUT------------------------------------*/ 00764400
*        ANS('2 '!!XMFCTRL                                              00764500
*         !! '_XBUFPTR PTR(31), '                                       00764600
*         !! '/* '!!ZXBUFPTR                                            00764700
*         !! ' XBUFPTR */'                                              00764800
*            ) NORESCAN COL(MACLMAR+2);                                 00764900
*/*PL.LL13  XBUFSIZE FIXED(31) INPUT---------------------------------*/ 00765000
*        ANS('2 '!!XMFCTRL                                              00765100
*         !! '_XBUFSIZE FIXED(31), '                                    00765200
*         !! '/* '!!ZXBUFSIZE                                           00765300
*         !! ' XBUFSIZE */'                                             00765400
*            ) NORESCAN COL(MACLMAR+2);                                 00765500
*/*PL.LL13  XRECSIZE PTR(31) INPUT-----------------------------------*/ 00765600
*        ANS('2 '!!XMFCTRL                                              00765700
*         !! '_XRECSIZE PTR(31), '                                      00765800
*         !! '/* '!!ZXRECSIZE                                           00765900
*         !! ' XRECSIZE */'                                             00766000
*            ) NORESCAN COL(MACLMAR+2);                                 00766100
*/*PL.LL13  XCONSCNT PTR(31) INPUT-----------------------------------*/ 00766200
*        ANS('2 '!!XMFCTRL                                              00766300
*         !! '_XCONSCNT PTR(31), '                                      00766400
*         !! '/* '!!ZXCONSCNT                                           00766500
*         !! ' XCONSCNT */'                                             00766600
*            ) NORESCAN COL(MACLMAR+2);                                 00766700
*/*PL.LL13  XTOKEN PTR(31) INPUT-------------------------------------*/ 00766800
*        ANS('2 '!!XMFCTRL                                              00766900
*         !! '_XTOKEN PTR(31), '                                        00767000
*         !! '/* '!!ZXTOKEN                                             00767100
*         !! ' XTOKEN */'                                               00767200
*            ) NORESCAN COL(MACLMAR+2);                                 00767300
*/*PL.LL18 ----------------------------------------------------------*/ 00767400
*        ANS('2 * CHAR(0);')                                            00767500
*            NORESCAN COL(MACLMAR+2);                                   00767600
*/*PL.LL15 XREQUEST.COUNT--------------------------------------------*/ 00767700
*        ANS('DCL '!!XMFCTRL!!                                          00767800
*            '_COUNT FIXED(8) '!!                                       00767900
*            'CONSTANT(1); '!!                                          00768000
*            '/* XREQUEST */')                                          00768100
*            NORESCAN COL(MACLMAR+2);                                   00768200
*/*PL.LL15 XREQUEST.SUMMARY------------------------------------------*/ 00768300
*        ANS('DCL '!!XMFCTRL!!                                          00768400
*            '_SUMMARY FIXED(8) '!!                                     00768500
*            'CONSTANT(2); '!!                                          00768600
*            '/* XREQUEST */')                                          00768700
*            NORESCAN COL(MACLMAR+2);                                   00768800
*/*PL.LL15 XREQUEST.INFO---------------------------------------------*/ 00768900
*        ANS('DCL '!!XMFCTRL!!                                          00769000
*            '_INFO FIXED(8) '!!                                        00769100
*            'CONSTANT(3); '!!                                          00769200
*            '/* XREQUEST */')                                          00769300
*            NORESCAN COL(MACLMAR+2);                                   00769400
*/*PL.LL15 XREQUEST.FULL---------------------------------------------*/ 00769500
*        ANS('DCL '!!XMFCTRL!!                                          00769600
*            '_FULL FIXED(8) '!!                                        00769700
*            'CONSTANT(4); '!!                                          00769800
*            '/* XREQUEST */')                                          00769900
*            NORESCAN COL(MACLMAR+2);                                   00770000
*/*PL.LL17 END OF MF=L PARAMETER LIST--------------------------------*/ 00770100
*      END;                                                             00770200
*/*PL.L01 MACRO WORK VARIABLES---------------------------------------*/ 00770300
*  DCL ZPRMLINE CHAR;          /* ZPRM ARRAY ENTRY ACCUMULATOR      */  00770400
*  DEACT ZPRMLINE;                                                      00770500
*  DCL ZNDX CHAR;              /* UNIQUE LIST STRUCTURE NAME        */  00770600
*  DEACT ZNDX;                                                          00770700
*  ZNDX=MACINDEX;              /* MACINDEX                          */  00770800
*  DCL XVERSION CHAR;                                                   00770900
*  DEACT XVERSION;                                                      00771000
*/*PL.L02 ?IEEQEMCS PARAMETER LIST-----------------------------------*/ 00771100
*  IF XMF^='L'                                                          00771200
*    THEN                                                               00771300
*      DO;                                                              00771400
*/*PL.L04 ?IEEQEMCS PARAMETER LIST-----------------------------------*/ 00771500
*        ZPRMLINE='DCL 1 #Z'!!ZNDX!!' DEF('!!                           00771600
*                 XMFCTRL!!'),'!!                                       00771700
*                 ' /* ?IEEQEMCS PARM LIST*/';                          00771800
*/*PL.L08  XQEPLACRN CHAR(4) CONSTANT--------------------------------*/ 00771900
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00772000
*                 '_XQEPLACRN CHAR(4), '!!                              00772100
*                 '/* '!!ZXQEPLACRN!!                                   00772200
*                 ' XQEPLACRN */';                                      00772300
*/*PL.L05  XPLISTLEN FIXED(16) BDY(BYTE) INPUT-----------------------*/ 00772400
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00772500
*                 '_XPLISTLEN FIXED(16) BDY(BYTE), '!!                  00772600
*                 '/* INPUT XPLISTLEN*/';                               00772700
*/*PL.L05  XVERSION FIXED(8) INPUT-----------------------------------*/ 00772800
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00772900
*                 '_XVERSION FIXED(8), '!!                              00773000
*                 '/* INPUT XVERSION*/';                                00773100
*/*PL.L08  XREQUEST FIXED(8) INPUT-----------------------------------*/ 00773200
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00773300
*                 '_XREQUEST FIXED(8), '!!                              00773400
*                 '/* '!!ZXREQUEST!!                                    00773500
*                 ' XREQUEST */';                                       00773600
*/*PL.L08  XSTATUS BIT(8) INPUT--------------------------------------*/ 00773700
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00773800
*                 '_XSTATUS BIT(8), '!!                                 00773900
*                 '/* '!!ZXSTATUS!!                                     00774000
*                 ' XSTATUS */';                                        00774100
*/*PL.L08  XFLAG1 BIT(8) FIELD_LABEL---------------------------------*/ 00774200
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00774300
*                 '_XFLAG1 BIT(8), '!!                                  00774400
*                 '/* FIELD_LABEL */';                                  00774500
*/*PL.L08  XRSV0001 CHAR(2) RESERVED---------------------------------*/ 00774600
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00774700
*                 '_XRSV0001 CHAR(2), '!!                               00774800
*                 '/* RESERVED */';                                     00774900
*/*PL.L08  XBKLG_NUM FIXED(31) INPUT---------------------------------*/ 00775000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00775100
*                 '_XBKLG_NUM FIXED(31), '!!                            00775200
*                 '/* '!!ZXBKLG_NUM!!                                   00775300
*                 ' XBKLG_NUM */';                                      00775400
*/*PL.L08  XCN CHAR(8) INPUT-----------------------------------------*/ 00775500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00775600
*                 '_XCN CHAR(8), '!!                                    00775700
*                 '/* '!!ZXCN!!                                         00775800
*                 ' XCN */';                                            00775900
*/*PL.L08  XSYS CHAR(8) INPUT----------------------------------------*/ 00776000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00776100
*                 '_XSYS CHAR(8), '!!                                   00776200
*                 '/* '!!ZXSYS!!                                        00776300
*                 ' XSYS */';                                           00776400
*/*PL.L08  XKEY CHAR(8) INPUT----------------------------------------*/ 00776500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00776600
*                 '_XKEY CHAR(8), '!!                                   00776700
*                 '/* '!!ZXKEY!!                                        00776800
*                 ' XKEY */';                                           00776900
*/*PL.L08  XAUTH BIT(16) INPUT---------------------------------------*/ 00777000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00777100
*                 '_XAUTH BIT(16), '!!                                  00777200
*                 '/* '!!ZXAUTH!!                                       00777300
*                 ' XAUTH */';                                          00777400
*/*PL.L08  XATTR BIT(16) INPUT---------------------------------------*/ 00777500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00777600
*                 '_XATTR BIT(16), '!!                                  00777700
*                 '/* '!!ZXATTR!!                                       00777800
*                 ' XATTR */';                                          00777900
*/*PL.L08  XDOM BIT(8) INPUT-----------------------------------------*/ 00778000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00778100
*                 '_XDOM BIT(8), '!!                                    00778200
*                 '/* '!!ZXDOM!!                                        00778300
*                 ' XDOM */';                                           00778400
*/*PL.L08  XRSV0002 CHAR(3) RESERVED---------------------------------*/ 00778500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00778600
*                 '_XRSV0002 CHAR(3), '!!                               00778700
*                 '/* RESERVED */';                                     00778800
*/*PL.L08  XBUFPTR PTR(31) INPUT-------------------------------------*/ 00778900
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00779000
*                 '_XBUFPTR PTR(31), '!!                                00779100
*                 '/* '!!ZXBUFPTR!!                                     00779200
*                 ' XBUFPTR */';                                        00779300
*/*PL.L08  XBUFSIZE FIXED(31) INPUT----------------------------------*/ 00779400
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00779500
*                 '_XBUFSIZE FIXED(31), '!!                             00779600
*                 '/* '!!ZXBUFSIZE!!                                    00779700
*                 ' XBUFSIZE */';                                       00779800
*/*PL.L08  XRECSIZE PTR(31) INPUT------------------------------------*/ 00779900
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00780000
*                 '_XRECSIZE PTR(31), '!!                               00780100
*                 '/* '!!ZXRECSIZE!!                                    00780200
*                 ' XRECSIZE */';                                       00780300
*/*PL.L08  XCONSCNT PTR(31) INPUT------------------------------------*/ 00780400
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00780500
*                 '_XCONSCNT PTR(31), '!!                               00780600
*                 '/* '!!ZXCONSCNT!!                                    00780700
*                 ' XCONSCNT */';                                       00780800
*/*PL.L08  XTOKEN PTR(31) INPUT--------------------------------------*/ 00780900
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00781000
*                 '_XTOKEN PTR(31), '!!                                 00781100
*                 '/* '!!ZXTOKEN!!                                      00781200
*                 ' XTOKEN */';                                         00781300
*/*PL.L11 CONSTANT TO ENSURE THAT LIST FORM IS LONG ENOUGH ----------*/ 00781400
*        ZPRMNUM=ZPRMNUM+1;                                             00781500
*        ZPRM(ZPRMNUM)=ZPRMLINE!!' 2 * CHAR(0);';                       00781600
*        IF XPLISTVER^=1                                                00781700
*          THEN                                                         00781800
*            DO;                                                        00781900
*              ZPRMNUM=ZPRMNUM+1;                                       00782000
*              ZPRM(ZPRMNUM)=                                           00782100
*               'DCL #Z'!!ZNDX!!'_LENCHECK FIXED(32) CONSTANT('!!       00782200
*               'LENGTH('!!XMFCTRL!!')-LENGTH(#Z'!!ZNDX!!'));'!!        00782300
*               '/* CONSTANT TO ENSURE THAT THE LIST FORM'!!            00782400
*               ' IS LONG ENOUGH */';                                   00782500
*            END;                                                       00782600
*/*PL.L12 PARAMETER LIST SIZE----------------------------------------*/ 00782700
*        ZPLLEN=68;                                                     00782800
*        IF ZPRMMAX<ZPLLEN                                              00782900
*           & XMF^='E'                                                  00783000
*           & XMF^='M'                                                  00783100
*          THEN                                                         00783200
*            ZPRMMAX=ZPLLEN;                                            00783300
*/*PL.L13 -----------------------------------------------------------*/ 00783400
*      END;                                                             00783500
*/*PI.L01 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00783600
*  IF XMF^='L'                                                          00783700
*    THEN                                                               00783800
*      DO;                                                              00783900
*/*PI.L03 CLEAR PARAMETER LIST --------------------------------------*/ 00784000
*  IF XMFSCK='COMPLETE'                                                 00784100
*    THEN                                                               00784200
*            ANS('#Z'!!ZNDX!!'=''''B;'!!                                00784300
*                '/* CLEAR PARAMETER AREA */')                          00784400
*                NORESCAN COL(MACLMAR);                                 00784500
*/*PI.L28 XQEPLACRN  CHAR(4)-----------------------------------------*/ 00784600
*        ANS('#Z'!!ZNDX!!'_XQEPLACRN=''QEPL'';'!!                       00784700
*            '/* XQEPLACRN CHAR(4) CONSTANT */')                        00784800
*            NORESCAN COL(MACLMAR);                                     00784900
*/*PI.L05C XPLISTLEN FIXED(16)---------------------------------------*/ 00785000
*        ANS('#Z'!!ZNDX!!'_XPLISTLEN=LENGTH(#Z'!!ZNDX!!');'!!           00785100
*            '/* XPLISTLEN FIXED(16) */')                               00785200
*            NORESCAN COL(MACLMAR);                                     00785300
*/*PI.L05B XVERSION FIXED(8)-----------------------------------------*/ 00785400
*        IF (XPLISTVER^=0 &                                             00785500
*            XMFSCK='COMPLETE')!                                        00785600
*           (PLISTVER^='' &                                             00785700
*            XMFSCK^='COMPLETE')                                        00785800
*          THEN                                                         00785900
*            ANS('#Z'!!ZNDX!!'_XVERSION='!!CHAR(XPLISTVER)!!'; '!!      00786000
*                '/* XVERSION FIXED(8) */')                             00786100
*                NORESCAN COL(MACLMAR);                                 00786200
*/*PI.L06 XREQUEST FIXED(8)------------------------------------------*/ 00786300
*        ZW='';                                                         00786400
*        ZMS='';                                                        00786500
*/*PI.L12 XREQUEST FIXED(8)------------------------------------------*/ 00786600
*        IF XREQUEST='COUNT'                                            00786700
*          THEN                                                         00786800
*            ZW='1';                                                    00786900
*/*PI.L12 XREQUEST FIXED(8)------------------------------------------*/ 00787000
*        IF XREQUEST='SUMMARY'                                          00787100
*          THEN                                                         00787200
*            ZW='2';                                                    00787300
*/*PI.L12 XREQUEST FIXED(8)------------------------------------------*/ 00787400
*        IF XREQUEST='INFO'                                             00787500
*          THEN                                                         00787600
*            ZW='3';                                                    00787700
*/*PI.L12 XREQUEST FIXED(8)------------------------------------------*/ 00787800
*        IF XREQUEST='FULL'                                             00787900
*          THEN                                                         00788000
*            ZW='4';                                                    00788100
*/*PI.L13 XREQUEST FIXED(8)------------------------------------------*/ 00788200
*        IF ZW^=''                                                      00788300
*          & (ZW^='0' ! XMFSCK^='COMPLETE')                             00788400
*          THEN                                                         00788500
*            ANS('#Z'!!ZNDX!!'_XREQUEST='!!                             00788600
*                ZW!!'; '!!                                             00788700
*                '/* XREQUEST FIXED(8) */')                             00788800
*                NORESCAN COL(MACLMAR);                                 00788900
*/*PI.L06 XSTATUS BIT(8)---------------------------------------------*/ 00789000
*        ZW='';                                                         00789100
*        ZMS='';                                                        00789200
*/*PI.L07 XSTATUS BIT(8) 1XXXXXXX------------------------------------*/ 00789300
*        IF XSTATUS='ACTIVE'                                            00789400
*          THEN                                                         00789500
*            DO;                                                        00789600
*              ZW=ZW!!'1';                                              00789700
*              ZMS=ZMS!!'1';                                            00789800
*            END;                                                       00789900
*          ELSE                                                         00790000
*            DO;                                                        00790100
*              ZW=ZW!!'0';                                              00790200
*              IF ZXSTATUS^=''                                          00790300
*                THEN                                                   00790400
*                  ZMS=ZMS!!'0';                                        00790500
*                ELSE                                                   00790600
*                  ZMS=ZMS!!'1';                                        00790700
*            END;                                                       00790800
*/*PI.L07 XSTATUS BIT(8) X1XXXXXX------------------------------------*/ 00790900
*        IF XSTATUS='INACTIVE'                                          00791000
*          THEN                                                         00791100
*            DO;                                                        00791200
*              ZW=ZW!!'1';                                              00791300
*              ZMS=ZMS!!'1';                                            00791400
*            END;                                                       00791500
*          ELSE                                                         00791600
*            DO;                                                        00791700
*              ZW=ZW!!'0';                                              00791800
*              IF ZXSTATUS^=''                                          00791900
*                THEN                                                   00792000
*                  ZMS=ZMS!!'0';                                        00792100
*                ELSE                                                   00792200
*                  ZMS=ZMS!!'1';                                        00792300
*            END;                                                       00792400
*/*PI.L07 XSTATUS BIT(8) XX1XXXXX------------------------------------*/ 00792500
*        IF XSTATUS='ALL'                                               00792600
*          THEN                                                         00792700
*            DO;                                                        00792800
*              ZW=ZW!!'1';                                              00792900
*              ZMS=ZMS!!'1';                                            00793000
*            END;                                                       00793100
*          ELSE                                                         00793200
*            DO;                                                        00793300
*              ZW=ZW!!'0';                                              00793400
*              IF ZXSTATUS^=''                                          00793500
*                THEN                                                   00793600
*                  ZMS=ZMS!!'0';                                        00793700
*                ELSE                                                   00793800
*                  ZMS=ZMS!!'1';                                        00793900
*            END;                                                       00794000
*/*PI.L07 XSTATUS BIT(8) XXX1XXXX------------------------------------*/ 00794100
*        IF XSTATUS='BACKLOG'                                           00794200
*          THEN                                                         00794300
*            DO;                                                        00794400
*              ZW=ZW!!'1';                                              00794500
*              ZMS=ZMS!!'1';                                            00794600
*            END;                                                       00794700
*          ELSE                                                         00794800
*            DO;                                                        00794900
*              ZW=ZW!!'0';                                              00795000
*              IF ZXSTATUS^=''                                          00795100
*                THEN                                                   00795200
*                  ZMS=ZMS!!'0';                                        00795300
*                ELSE                                                   00795400
*                  ZMS=ZMS!!'1';                                        00795500
*            END;                                                       00795600
*/*PI.L07 XSTATUS BIT(8) XXXX1XXX------------------------------------*/ 00795700
*        IF XSTATUS='ERR'                                               00795800
*          THEN                                                         00795900
*            DO;                                                        00796000
*              ZW=ZW!!'1000';                                           00796100
*              ZMS=ZMS!!'1111';                                         00796200
*            END;                                                       00796300
*          ELSE                                                         00796400
*            DO;                                                        00796500
*              ZW=ZW!!'0000';                                           00796600
*              IF ZXSTATUS^=''                                          00796700
*                THEN                                                   00796800
*                  ZMS=ZMS!!'0111';                                     00796900
*                ELSE                                                   00797000
*                  ZMS=ZMS!!'1111';                                     00797100
*            END;                                                       00797200
*/*PI.L09 XSTATUS BIT(8)---------------------------------------------*/ 00797300
*        IF XMFSCK='NOCHECK'                                            00797400
*          THEN                                                         00797500
*            IF INDEX(ZMS,'0')^=0                                       00797600
*              THEN                                                     00797700
*                ANS('#Z'!!ZNDX!!'_XSTATUS='!!                          00797800
*                    '#Z'!!ZNDX!!'_XSTATUS & '!!                        00797900
*                    ''''!!ZMS!!'''B; '!!                               00798000
*                    '/* BIT(8) */')                                    00798100
*                    NORESCAN COL(MACLMAR);                             00798200
*        IF INDEX(ZW,'1')^=0                                            00798300
*          THEN                                                         00798400
*            ANS('#Z'!!ZNDX!!'_XSTATUS='!!                              00798500
*                '#Z'!!ZNDX!!'_XSTATUS ! '!!                            00798600
*                ''''!!ZW!!'''B; '!!                                    00798700
*                '/* BIT(8) */')                                        00798800
*                NORESCAN COL(MACLMAR);                                 00798900
*/*PI.L06 XFLAG1 BIT(8)----------------------------------------------*/ 00799000
*        ZW='';                                                         00799100
*        ZMS='';                                                        00799200
*/*PI.L07 XFLAG1 BIT(8) 1XXXXXXX-------------------------------------*/ 00799300
*        IF CN^=''                                                      00799400
*          & XCN^='ANY_CONS'                                            00799500
*          THEN                                                         00799600
*            DO;                                                        00799700
*              ZW=ZW!!'1';                                              00799800
*              ZMS=ZMS!!'0';                                            00799900
*            END;                                                       00800000
*          ELSE                                                         00800100
*            DO;                                                        00800200
*              ZW=ZW!!'0';                                              00800300
*              ZMS=ZMS!!'1';                                            00800400
*            END;                                                       00800500
*/*PI.L07 XFLAG1 BIT(8) X1XXXXXX-------------------------------------*/ 00800600
*        IF SYS^=''                                                     00800700
*          & XSYS^='ANY_SYS'                                            00800800
*          THEN                                                         00800900
*            DO;                                                        00801000
*              ZW=ZW!!'1';                                              00801100
*              ZMS=ZMS!!'0';                                            00801200
*            END;                                                       00801300
*          ELSE                                                         00801400
*            DO;                                                        00801500
*              ZW=ZW!!'0';                                              00801600
*              ZMS=ZMS!!'1';                                            00801700
*            END;                                                       00801800
*/*PI.L07 XFLAG1 BIT(8) XX1XXXXX-------------------------------------*/ 00801900
*        IF KEY^=''                                                     00802000
*          & XKEY^='ANY_KEY'                                            00802100
*          THEN                                                         00802200
*            DO;                                                        00802300
*              ZW=ZW!!'100000';                                         00802400
*              ZMS=ZMS!!'011111';                                       00802500
*            END;                                                       00802600
*          ELSE                                                         00802700
*            DO;                                                        00802800
*              ZW=ZW!!'000000';                                         00802900
*              ZMS=ZMS!!'111111';                                       00803000
*            END;                                                       00803100
*/*PI.L09 XFLAG1 BIT(8)----------------------------------------------*/ 00803200
*        IF XMFSCK='NOCHECK'                                            00803300
*          THEN                                                         00803400
*            IF INDEX(ZMS,'0')^=0                                       00803500
*              THEN                                                     00803600
*                ANS('#Z'!!ZNDX!!'_XFLAG1='!!                           00803700
*                    '#Z'!!ZNDX!!'_XFLAG1 & '!!                         00803800
*                    ''''!!ZMS!!'''B; '!!                               00803900
*                    '/* BIT(8) */')                                    00804000
*                    NORESCAN COL(MACLMAR);                             00804100
*        IF INDEX(ZW,'1')^=0                                            00804200
*          THEN                                                         00804300
*            ANS('#Z'!!ZNDX!!'_XFLAG1='!!                               00804400
*                '#Z'!!ZNDX!!'_XFLAG1 ! '!!                             00804500
*                ''''!!ZW!!'''B; '!!                                    00804600
*                '/* BIT(8) */')                                        00804700
*                NORESCAN COL(MACLMAR);                                 00804800
*/*PI.L17 XBKLG_NUM FIXED(31)----------------------------------------*/ 00804900
*        IF ZXBKLG_NUM='INPUT' !                                        00805000
*           ZXBKLG_NUM='INOUT'                                          00805100
*          THEN                                                         00805200
*            ANS('#Z'!!ZNDX!!'_XBKLG_NUM='!!                            00805300
*                XBKLG_NUM!!';'!!                                       00805400
*                '/* XBKLG_NUM FIXED(31) */')                           00805500
*                NORESCAN COL(MACLMAR);                                 00805600
*/*PI.L14 CHECK FOR * AS THE CHAR(8) ARGUMENT------------------------*/ 00805700
*        IF XCN='ANY_CONS'                                              00805800
*           & XMFSCK='COMPLETE'                                         00805900
*          THEN                                                         00806000
*            ZXCN='';                        /* RESET INPUT/INOUT */    00806100
*/*PI.L21 XCN NAME CHAR(8)-------------------------------------------*/ 00806200
*        IF ZXCN='INPUT' !                                              00806300
*           ZXCN='INOUT'                                                00806400
*          THEN                                                         00806500
*            DO;                                                        00806600
*            IF (XCN='ANY_CONS' & XMFSCK^='COMPLETE')                   00806700
*              THEN                                                     00806800
*                ANS('#Z'!!ZNDX!!'_XCN=''''B;'!!                        00806900
*                    '/* XCN CHAR(8) */')                               00807000
*                    NORESCAN COL(MACLMAR);                             00807100
*            IF XCN^='ANY_CONS'                                         00807200
*              THEN                                                     00807300
*                ANS('#Z'!!ZNDX!!'_XCN='!!                              00807400
*                    XCN!!';'!!                                         00807500
*                    '/* XCN CHAR(8) */')                               00807600
*                    NORESCAN COL(MACLMAR);                             00807700
*            END;                                                       00807800
*/*PI.L14 CHECK FOR * AS THE CHAR(8) ARGUMENT------------------------*/ 00807900
*        IF XSYS='ANY_SYS'                                              00808000
*           & XMFSCK='COMPLETE'                                         00808100
*          THEN                                                         00808200
*            ZXSYS='';                       /* RESET INPUT/INOUT */    00808300
*/*PI.L21 XSYS NAME CHAR(8)------------------------------------------*/ 00808400
*        IF ZXSYS='INPUT' !                                             00808500
*           ZXSYS='INOUT'                                               00808600
*          THEN                                                         00808700
*            DO;                                                        00808800
*            IF (XSYS='ANY_SYS' & XMFSCK^='COMPLETE')                   00808900
*              THEN                                                     00809000
*                ANS('#Z'!!ZNDX!!'_XSYS=''''B;'!!                       00809100
*                    '/* XSYS CHAR(8) */')                              00809200
*                    NORESCAN COL(MACLMAR);                             00809300
*            IF XSYS^='ANY_SYS'                                         00809400
*              THEN                                                     00809500
*                ANS('#Z'!!ZNDX!!'_XSYS='!!                             00809600
*                    XSYS!!';'!!                                        00809700
*                    '/* XSYS CHAR(8) */')                              00809800
*                    NORESCAN COL(MACLMAR);                             00809900
*            END;                                                       00810000
*/*PI.L14 CHECK FOR * AS THE CHAR(8) ARGUMENT------------------------*/ 00810100
*        IF XKEY='ANY_KEY'                                              00810200
*           & XMFSCK='COMPLETE'                                         00810300
*          THEN                                                         00810400
*            ZXKEY='';                       /* RESET INPUT/INOUT */    00810500
*/*PI.L21 XKEY NAME CHAR(8)------------------------------------------*/ 00810600
*        IF ZXKEY='INPUT' !                                             00810700
*           ZXKEY='INOUT'                                               00810800
*          THEN                                                         00810900
*            DO;                                                        00811000
*            IF (XKEY='ANY_KEY' & XMFSCK^='COMPLETE')                   00811100
*              THEN                                                     00811200
*                ANS('#Z'!!ZNDX!!'_XKEY=''''B;'!!                       00811300
*                    '/* XKEY CHAR(8) */')                              00811400
*                    NORESCAN COL(MACLMAR);                             00811500
*            IF XKEY^='ANY_KEY'                                         00811600
*              THEN                                                     00811700
*                ANS('#Z'!!ZNDX!!'_XKEY='!!                             00811800
*                    XKEY!!';'!!                                        00811900
*                    '/* XKEY CHAR(8) */')                              00812000
*                    NORESCAN COL(MACLMAR);                             00812100
*            END;                                                       00812200
*/*PI.L06 XAUTH BIT(16)----------------------------------------------*/ 00812300
*        ZW='';                                                         00812400
*        ZMS='';                                                        00812500
*/*PI.L07 XAUTH BIT(16) 1XXXXXXXXXXXXXXX-----------------------------*/ 00812600
*        IF XAUTH='ANY'                                                 00812700
*          THEN                                                         00812800
*            DO;                                                        00812900
*              ZW=ZW!!'1';                                              00813000
*              ZMS=ZMS!!'1';                                            00813100
*            END;                                                       00813200
*          ELSE                                                         00813300
*            DO;                                                        00813400
*              ZW=ZW!!'0';                                              00813500
*              IF ZXAUTH^=''                                            00813600
*                THEN                                                   00813700
*                  ZMS=ZMS!!'0';                                        00813800
*                ELSE                                                   00813900
*                  ZMS=ZMS!!'1';                                        00814000
*            END;                                                       00814100
*/*PI.L07 XAUTH BIT(16) X1XXXXXXXXXXXXXX-----------------------------*/ 00814200
*        IF XAUTH='MASTER'                                              00814300
*          THEN                                                         00814400
*            DO;                                                        00814500
*              ZW=ZW!!'1';                                              00814600
*              ZMS=ZMS!!'1';                                            00814700
*            END;                                                       00814800
*          ELSE                                                         00814900
*            DO;                                                        00815000
*              ZW=ZW!!'0';                                              00815100
*              IF ZXAUTH^=''                                            00815200
*                THEN                                                   00815300
*                  ZMS=ZMS!!'0';                                        00815400
*                ELSE                                                   00815500
*                  ZMS=ZMS!!'1';                                        00815600
*            END;                                                       00815700
*/*PI.L07 XAUTH BIT(16) XX1XXXXXXXXXXXXX-----------------------------*/ 00815800
*        IF XAUTH='SYS'                                                 00815900
*          THEN                                                         00816000
*            DO;                                                        00816100
*              ZW=ZW!!'1';                                              00816200
*              ZMS=ZMS!!'1';                                            00816300
*            END;                                                       00816400
*          ELSE                                                         00816500
*            DO;                                                        00816600
*              ZW=ZW!!'0';                                              00816700
*              IF ZXAUTH^=''                                            00816800
*                THEN                                                   00816900
*                  ZMS=ZMS!!'0';                                        00817000
*                ELSE                                                   00817100
*                  ZMS=ZMS!!'1';                                        00817200
*            END;                                                       00817300
*/*PI.L07 XAUTH BIT(16) XXX1XXXXXXXXXXXX-----------------------------*/ 00817400
*        IF XAUTH='IO'                                                  00817500
*          THEN                                                         00817600
*            DO;                                                        00817700
*              ZW=ZW!!'1';                                              00817800
*              ZMS=ZMS!!'1';                                            00817900
*            END;                                                       00818000
*          ELSE                                                         00818100
*            DO;                                                        00818200
*              ZW=ZW!!'0';                                              00818300
*              IF ZXAUTH^=''                                            00818400
*                THEN                                                   00818500
*                  ZMS=ZMS!!'0';                                        00818600
*                ELSE                                                   00818700
*                  ZMS=ZMS!!'1';                                        00818800
*            END;                                                       00818900
*/*PI.L07 XAUTH BIT(16) XXXX1XXXXXXXXXXX-----------------------------*/ 00819000
*        IF XAUTH='CONS'                                                00819100
*          THEN                                                         00819200
*            DO;                                                        00819300
*              ZW=ZW!!'1';                                              00819400
*              ZMS=ZMS!!'1';                                            00819500
*            END;                                                       00819600
*          ELSE                                                         00819700
*            DO;                                                        00819800
*              ZW=ZW!!'0';                                              00819900
*              IF ZXAUTH^=''                                            00820000
*                THEN                                                   00820100
*                  ZMS=ZMS!!'0';                                        00820200
*                ELSE                                                   00820300
*                  ZMS=ZMS!!'1';                                        00820400
*            END;                                                       00820500
*/*PI.L07 XAUTH BIT(16) XXXXX1XXXXXXXXXX-----------------------------*/ 00820600
*        IF XAUTH='INFO'                                                00820700
*          THEN                                                         00820800
*            DO;                                                        00820900
*              ZW=ZW!!'1';                                              00821000
*              ZMS=ZMS!!'1';                                            00821100
*            END;                                                       00821200
*          ELSE                                                         00821300
*            DO;                                                        00821400
*              ZW=ZW!!'0';                                              00821500
*              IF ZXAUTH^=''                                            00821600
*                THEN                                                   00821700
*                  ZMS=ZMS!!'0';                                        00821800
*                ELSE                                                   00821900
*                  ZMS=ZMS!!'1';                                        00822000
*            END;                                                       00822100
*/*PI.L07 XAUTH BIT(16) XXXXXX1XXXXXXXXX-----------------------------*/ 00822200
*        IF XAUTH='ALL'                                                 00822300
*          THEN                                                         00822400
*            DO;                                                        00822500
*              ZW=ZW!!'1';                                              00822600
*              ZMS=ZMS!!'1';                                            00822700
*            END;                                                       00822800
*          ELSE                                                         00822900
*            DO;                                                        00823000
*              ZW=ZW!!'0';                                              00823100
*              IF ZXAUTH^=''                                            00823200
*                THEN                                                   00823300
*                  ZMS=ZMS!!'0';                                        00823400
*                ELSE                                                   00823500
*                  ZMS=ZMS!!'1';                                        00823600
*            END;                                                       00823700
*/*PI.L07 XAUTH BIT(16) XXXXXXX1XXXXXXXX-----------------------------*/ 00823800
*        IF XAUTH='SYSONLY'                                             00823900
*          THEN                                                         00824000
*            DO;                                                        00824100
*              ZW=ZW!!'1';                                              00824200
*              ZMS=ZMS!!'1';                                            00824300
*            END;                                                       00824400
*          ELSE                                                         00824500
*            DO;                                                        00824600
*              ZW=ZW!!'0';                                              00824700
*              IF ZXAUTH^=''                                            00824800
*                THEN                                                   00824900
*                  ZMS=ZMS!!'0';                                        00825000
*                ELSE                                                   00825100
*                  ZMS=ZMS!!'1';                                        00825200
*            END;                                                       00825300
*/*PI.L07 XAUTH BIT(16) XXXXXXXX1XXXXXXX-----------------------------*/ 00825400
*        IF XAUTH='IOONLY'                                              00825500
*          THEN                                                         00825600
*            DO;                                                        00825700
*              ZW=ZW!!'1';                                              00825800
*              ZMS=ZMS!!'1';                                            00825900
*            END;                                                       00826000
*          ELSE                                                         00826100
*            DO;                                                        00826200
*              ZW=ZW!!'0';                                              00826300
*              IF ZXAUTH^=''                                            00826400
*                THEN                                                   00826500
*                  ZMS=ZMS!!'0';                                        00826600
*                ELSE                                                   00826700
*                  ZMS=ZMS!!'1';                                        00826800
*            END;                                                       00826900
*/*PI.L07 XAUTH BIT(16) XXXXXXXXX1XXXXXX-----------------------------*/ 00827000
*        IF XAUTH='CONSONLY'                                            00827100
*          THEN                                                         00827200
*            DO;                                                        00827300
*              ZW=ZW!!'1';                                              00827400
*              ZMS=ZMS!!'1';                                            00827500
*            END;                                                       00827600
*          ELSE                                                         00827700
*            DO;                                                        00827800
*              ZW=ZW!!'0';                                              00827900
*              IF ZXAUTH^=''                                            00828000
*                THEN                                                   00828100
*                  ZMS=ZMS!!'0';                                        00828200
*                ELSE                                                   00828300
*                  ZMS=ZMS!!'1';                                        00828400
*            END;                                                       00828500
*/*PI.L07 XAUTH BIT(16) XXXXXXXXXX1XXXXX-----------------------------*/ 00828600
*        IF XAUTH='INFOONLY'                                            00828700
*          THEN                                                         00828800
*            DO;                                                        00828900
*              ZW=ZW!!'1';                                              00829000
*              ZMS=ZMS!!'1';                                            00829100
*            END;                                                       00829200
*          ELSE                                                         00829300
*            DO;                                                        00829400
*              ZW=ZW!!'0';                                              00829500
*              IF ZXAUTH^=''                                            00829600
*                THEN                                                   00829700
*                  ZMS=ZMS!!'0';                                        00829800
*                ELSE                                                   00829900
*                  ZMS=ZMS!!'1';                                        00830000
*            END;                                                       00830100
*/*PI.L07 XAUTH BIT(16) XXXXXXXXXXX1XXXX-----------------------------*/ 00830200
*        IF XAUTH='ALLONLY'                                             00830300
*          THEN                                                         00830400
*            DO;                                                        00830500
*              ZW=ZW!!'10000';                                          00830600
*              ZMS=ZMS!!'11111';                                        00830700
*            END;                                                       00830800
*          ELSE                                                         00830900
*            DO;                                                        00831000
*              ZW=ZW!!'00000';                                          00831100
*              IF ZXAUTH^=''                                            00831200
*                THEN                                                   00831300
*                  ZMS=ZMS!!'01111';                                    00831400
*                ELSE                                                   00831500
*                  ZMS=ZMS!!'11111';                                    00831600
*            END;                                                       00831700
*/*PI.L09 XAUTH BIT(16)----------------------------------------------*/ 00831800
*        IF XMFSCK='NOCHECK'                                            00831900
*          THEN                                                         00832000
*            IF INDEX(ZMS,'0')^=0                                       00832100
*              THEN                                                     00832200
*                ANS('#Z'!!ZNDX!!'_XAUTH='!!                            00832300
*                    '#Z'!!ZNDX!!'_XAUTH & '!!                          00832400
*                    ''''!!ZMS!!'''B; '!!                               00832500
*                    '/* BIT(16) */')                                   00832600
*                    NORESCAN COL(MACLMAR);                             00832700
*        IF INDEX(ZW,'1')^=0                                            00832800
*          THEN                                                         00832900
*            ANS('#Z'!!ZNDX!!'_XAUTH='!!                                00833000
*                '#Z'!!ZNDX!!'_XAUTH ! '!!                              00833100
*                ''''!!ZW!!'''B; '!!                                    00833200
*                '/* BIT(16) */')                                       00833300
*                NORESCAN COL(MACLMAR);                                 00833400
*/*PI.L06 XATTR BIT(16)----------------------------------------------*/ 00833500
*        ZW='';                                                         00833600
*        ZMS='';                                                        00833700
*/*PI.L07 XATTR BIT(16) 1XXXXXXXXXXXXXXX-----------------------------*/ 00833800
*        IF XATTR='ANY'                                                 00833900
*          THEN                                                         00834000
*            DO;                                                        00834100
*              ZW=ZW!!'1';                                              00834200
*              ZMS=ZMS!!'1';                                            00834300
*            END;                                                       00834400
*          ELSE                                                         00834500
*            DO;                                                        00834600
*              ZW=ZW!!'0';                                              00834700
*              IF ZXATTR^=''                                            00834800
*                THEN                                                   00834900
*                  ZMS=ZMS!!'0';                                        00835000
*                ELSE                                                   00835100
*                  ZMS=ZMS!!'1';                                        00835200
*            END;                                                       00835300
*/*PI.L07 XATTR BIT(16) X1XXXXXXXXXXXXXX-----------------------------*/ 00835400
*        IF XATTR='ROUT'                                                00835500
*          THEN                                                         00835600
*            DO;                                                        00835700
*              ZW=ZW!!'1';                                              00835800
*              ZMS=ZMS!!'1';                                            00835900
*            END;                                                       00836000
*          ELSE                                                         00836100
*            DO;                                                        00836200
*              ZW=ZW!!'0';                                              00836300
*              IF ZXATTR^=''                                            00836400
*                THEN                                                   00836500
*                  ZMS=ZMS!!'0';                                        00836600
*                ELSE                                                   00836700
*                  ZMS=ZMS!!'1';                                        00836800
*            END;                                                       00836900
*/*PI.L07 XATTR BIT(16) XXXX1XXXXXXXXXXX-----------------------------*/ 00837000
*        IF XATTR='HC'                                                  00837100
*          THEN                                                         00837200
*            DO;                                                        00837300
*              ZW=ZW!!'001';                                            00837400
*              ZMS=ZMS!!'111';                                          00837500
*            END;                                                       00837600
*          ELSE                                                         00837700
*            DO;                                                        00837800
*              ZW=ZW!!'000';                                            00837900
*              IF ZXATTR^=''                                            00838000
*                THEN                                                   00838100
*                  ZMS=ZMS!!'110';                                      00838200
*                ELSE                                                   00838300
*                  ZMS=ZMS!!'111';                                      00838400
*            END;                                                       00838500
*/*PI.L07 XATTR BIT(16) XXXXX1XXXXXXXXXX-----------------------------*/ 00838600
*        IF XATTR='AUTO'                                                00838700
*          THEN                                                         00838800
*            DO;                                                        00838900
*              ZW=ZW!!'1';                                              00839000
*              ZMS=ZMS!!'1';                                            00839100
*            END;                                                       00839200
*          ELSE                                                         00839300
*            DO;                                                        00839400
*              ZW=ZW!!'0';                                              00839500
*              IF ZXATTR^=''                                            00839600
*                THEN                                                   00839700
*                  ZMS=ZMS!!'0';                                        00839800
*                ELSE                                                   00839900
*                  ZMS=ZMS!!'1';                                        00840000
*            END;                                                       00840100
*/*PI.L07 XATTR BIT(16) XXXXXX1XXXXXXXXX-----------------------------*/ 00840200
*        IF XATTR='AUTON'                                               00840300
*          THEN                                                         00840400
*            DO;                                                        00840500
*              ZW=ZW!!'1';                                              00840600
*              ZMS=ZMS!!'1';                                            00840700
*            END;                                                       00840800
*          ELSE                                                         00840900
*            DO;                                                        00841000
*              ZW=ZW!!'0';                                              00841100
*              IF ZXATTR^=''                                            00841200
*                THEN                                                   00841300
*                  ZMS=ZMS!!'0';                                        00841400
*                ELSE                                                   00841500
*                  ZMS=ZMS!!'1';                                        00841600
*            END;                                                       00841700
*/*PI.L07 XATTR BIT(16) XXXXXXX1XXXXXXXX-----------------------------*/ 00841800
*        IF XATTR='MN'                                                  00841900
*          THEN                                                         00842000
*            DO;                                                        00842100
*              ZW=ZW!!'1';                                              00842200
*              ZMS=ZMS!!'1';                                            00842300
*            END;                                                       00842400
*          ELSE                                                         00842500
*            DO;                                                        00842600
*              ZW=ZW!!'0';                                              00842700
*              IF ZXATTR^=''                                            00842800
*                THEN                                                   00842900
*                  ZMS=ZMS!!'0';                                        00843000
*                ELSE                                                   00843100
*                  ZMS=ZMS!!'1';                                        00843200
*            END;                                                       00843300
*/*PI.L07 XATTR BIT(16) XXXXXXXX1XXXXXXX-----------------------------*/ 00843400
*        IF XATTR='NONE'                                                00843500
*          THEN                                                         00843600
*            DO;                                                        00843700
*              ZW=ZW!!'1';                                              00843800
*              ZMS=ZMS!!'1';                                            00843900
*            END;                                                       00844000
*          ELSE                                                         00844100
*            DO;                                                        00844200
*              ZW=ZW!!'0';                                              00844300
*              IF ZXATTR^=''                                            00844400
*                THEN                                                   00844500
*                  ZMS=ZMS!!'0';                                        00844600
*                ELSE                                                   00844700
*                  ZMS=ZMS!!'1';                                        00844800
*            END;                                                       00844900
*/*PI.L07 XATTR BIT(16) XXXXXXXXX1XXXXXX-----------------------------*/ 00845000
*        IF XATTR='YES'                                                 00845100
*          THEN                                                         00845200
*            DO;                                                        00845300
*              ZW=ZW!!'1';                                              00845400
*              ZMS=ZMS!!'1';                                            00845500
*            END;                                                       00845600
*          ELSE                                                         00845700
*            DO;                                                        00845800
*              ZW=ZW!!'0';                                              00845900
*              IF ZXATTR^=''                                            00846000
*                THEN                                                   00846100
*                  ZMS=ZMS!!'0';                                        00846200
*                ELSE                                                   00846300
*                  ZMS=ZMS!!'1';                                        00846400
*            END;                                                       00846500
*/*PI.L07 XATTR BIT(16) XXXXXXXXXX1XXXXX-----------------------------*/ 00846600
*        IF XATTR='INTIDS'                                              00846700
*          THEN                                                         00846800
*            DO;                                                        00846900
*              ZW=ZW!!'1';                                              00847000
*              ZMS=ZMS!!'1';                                            00847100
*            END;                                                       00847200
*          ELSE                                                         00847300
*            DO;                                                        00847400
*              ZW=ZW!!'0';                                              00847500
*              IF ZXATTR^=''                                            00847600
*                THEN                                                   00847700
*                  ZMS=ZMS!!'0';                                        00847800
*                ELSE                                                   00847900
*                  ZMS=ZMS!!'1';                                        00848000
*            END;                                                       00848100
*/*PI.L07 XATTR BIT(16) XXXXXXXXXXX1XXXX-----------------------------*/ 00848200
*        IF XATTR='UNKNIDS'                                             00848300
*          THEN                                                         00848400
*            DO;                                                        00848500
*              ZW=ZW!!'10000';                                          00848600
*              ZMS=ZMS!!'11111';                                        00848700
*            END;                                                       00848800
*          ELSE                                                         00848900
*            DO;                                                        00849000
*              ZW=ZW!!'00000';                                          00849100
*              IF ZXATTR^=''                                            00849200
*                THEN                                                   00849300
*                  ZMS=ZMS!!'01111';                                    00849400
*                ELSE                                                   00849500
*                  ZMS=ZMS!!'11111';                                    00849600
*            END;                                                       00849700
*/*PI.L09 XATTR BIT(16)----------------------------------------------*/ 00849800
*        IF XMFSCK='NOCHECK'                                            00849900
*          THEN                                                         00850000
*            IF INDEX(ZMS,'0')^=0                                       00850100
*              THEN                                                     00850200
*                ANS('#Z'!!ZNDX!!'_XATTR='!!                            00850300
*                    '#Z'!!ZNDX!!'_XATTR & '!!                          00850400
*                    ''''!!ZMS!!'''B; '!!                               00850500
*                    '/* BIT(16) */')                                   00850600
*                    NORESCAN COL(MACLMAR);                             00850700
*        IF INDEX(ZW,'1')^=0                                            00850800
*          THEN                                                         00850900
*            ANS('#Z'!!ZNDX!!'_XATTR='!!                                00851000
*                '#Z'!!ZNDX!!'_XATTR ! '!!                              00851100
*                ''''!!ZW!!'''B; '!!                                    00851200
*                '/* BIT(16) */')                                       00851300
*                NORESCAN COL(MACLMAR);                                 00851400
*/*PI.L06 XDOM BIT(8)------------------------------------------------*/ 00851500
*        ZW='';                                                         00851600
*        ZMS='';                                                        00851700
*/*PI.L07 XDOM BIT(8) 1XXXXXXX---------------------------------------*/ 00851800
*        IF XDOM='ANY'                                                  00851900
*          THEN                                                         00852000
*            DO;                                                        00852100
*              ZW=ZW!!'1';                                              00852200
*              ZMS=ZMS!!'1';                                            00852300
*            END;                                                       00852400
*          ELSE                                                         00852500
*            DO;                                                        00852600
*              ZW=ZW!!'0';                                              00852700
*              IF ZXDOM^=''                                             00852800
*                THEN                                                   00852900
*                  ZMS=ZMS!!'0';                                        00853000
*                ELSE                                                   00853100
*                  ZMS=ZMS!!'1';                                        00853200
*            END;                                                       00853300
*/*PI.L07 XDOM BIT(8) X1XXXXXX---------------------------------------*/ 00853400
*        IF XDOM='NORMAL'                                               00853500
*          THEN                                                         00853600
*            DO;                                                        00853700
*              ZW=ZW!!'1';                                              00853800
*              ZMS=ZMS!!'1';                                            00853900
*            END;                                                       00854000
*          ELSE                                                         00854100
*            DO;                                                        00854200
*              ZW=ZW!!'0';                                              00854300
*              IF ZXDOM^=''                                             00854400
*                THEN                                                   00854500
*                  ZMS=ZMS!!'0';                                        00854600
*                ELSE                                                   00854700
*                  ZMS=ZMS!!'1';                                        00854800
*            END;                                                       00854900
*/*PI.L07 XDOM BIT(8) XX1XXXXX---------------------------------------*/ 00855000
*        IF XDOM='ALL'                                                  00855100
*          THEN                                                         00855200
*            DO;                                                        00855300
*              ZW=ZW!!'1';                                              00855400
*              ZMS=ZMS!!'1';                                            00855500
*            END;                                                       00855600
*          ELSE                                                         00855700
*            DO;                                                        00855800
*              ZW=ZW!!'0';                                              00855900
*              IF ZXDOM^=''                                             00856000
*                THEN                                                   00856100
*                  ZMS=ZMS!!'0';                                        00856200
*                ELSE                                                   00856300
*                  ZMS=ZMS!!'1';                                        00856400
*            END;                                                       00856500
*/*PI.L07 XDOM BIT(8) XXX1XXXX---------------------------------------*/ 00856600
*        IF XDOM='NONE'                                                 00856700
*          THEN                                                         00856800
*            DO;                                                        00856900
*              ZW=ZW!!'1';                                              00857000
*              ZMS=ZMS!!'1';                                            00857100
*            END;                                                       00857200
*          ELSE                                                         00857300
*            DO;                                                        00857400
*              ZW=ZW!!'0';                                              00857500
*              IF ZXDOM^=''                                             00857600
*                THEN                                                   00857700
*                  ZMS=ZMS!!'0';                                        00857800
*                ELSE                                                   00857900
*                  ZMS=ZMS!!'1';                                        00858000
*            END;                                                       00858100
*/*PI.L07 XDOM BIT(8) XXXX1XXX---------------------------------------*/ 00858200
*        IF XDOM='YES'                                                  00858300
*          THEN                                                         00858400
*            DO;                                                        00858500
*              ZW=ZW!!'1000';                                           00858600
*              ZMS=ZMS!!'1111';                                         00858700
*            END;                                                       00858800
*          ELSE                                                         00858900
*            DO;                                                        00859000
*              ZW=ZW!!'0000';                                           00859100
*              IF ZXDOM^=''                                             00859200
*                THEN                                                   00859300
*                  ZMS=ZMS!!'0111';                                     00859400
*                ELSE                                                   00859500
*                  ZMS=ZMS!!'1111';                                     00859600
*            END;                                                       00859700
*/*PI.L09 XDOM BIT(8)------------------------------------------------*/ 00859800
*        IF XMFSCK='NOCHECK'                                            00859900
*          THEN                                                         00860000
*            IF INDEX(ZMS,'0')^=0                                       00860100
*              THEN                                                     00860200
*                ANS('#Z'!!ZNDX!!'_XDOM='!!                             00860300
*                    '#Z'!!ZNDX!!'_XDOM & '!!                           00860400
*                    ''''!!ZMS!!'''B; '!!                               00860500
*                    '/* BIT(8) */')                                    00860600
*                    NORESCAN COL(MACLMAR);                             00860700
*        IF INDEX(ZW,'1')^=0                                            00860800
*          THEN                                                         00860900
*            ANS('#Z'!!ZNDX!!'_XDOM='!!                                 00861000
*                '#Z'!!ZNDX!!'_XDOM ! '!!                               00861100
*                ''''!!ZW!!'''B; '!!                                    00861200
*                '/* BIT(8) */')                                        00861300
*                NORESCAN COL(MACLMAR);                                 00861400
*/*PI.L17 XBUFPTR PTR(31)--------------------------------------------*/ 00861500
*        IF ZXBUFPTR='INPUT' !                                          00861600
*           ZXBUFPTR='INOUT'                                            00861700
*          THEN                                                         00861800
*            DO;                                                        00861900
*            IF (XBUFPTR='0' & XMFSCK^='COMPLETE')                      00862000
*              THEN                                                     00862100
*                ANS('#Z'!!ZNDX!!'_XBUFPTR=0;'!!                        00862200
*                    '/* XBUFPTR PTR(31) */')                           00862300
*                    NORESCAN COL(MACLMAR);                             00862400
*            IF XBUFPTR^='0'                                            00862500
*              THEN                                                     00862600
*                ANS('#Z'!!ZNDX!!'_XBUFPTR='!!                          00862700
*                    XBUFPTR!!';'!!                                     00862800
*                    '/* XBUFPTR PTR(31) */')                           00862900
*                    NORESCAN COL(MACLMAR);                             00863000
*            END;                                                       00863100
*/*PI.L17 XBUFSIZE FIXED(31)-----------------------------------------*/ 00863200
*        IF ZXBUFSIZE='INPUT' !                                         00863300
*           ZXBUFSIZE='INOUT'                                           00863400
*          THEN                                                         00863500
*            DO;                                                        00863600
*            IF (XBUFSIZE='0' & XMFSCK^='COMPLETE')                     00863700
*              THEN                                                     00863800
*                ANS('#Z'!!ZNDX!!'_XBUFSIZE=0;'!!                       00863900
*                    '/* XBUFSIZE FIXED(31) */')                        00864000
*                    NORESCAN COL(MACLMAR);                             00864100
*            IF XBUFSIZE^='0'                                           00864200
*              THEN                                                     00864300
*                ANS('#Z'!!ZNDX!!'_XBUFSIZE='!!                         00864400
*                    XBUFSIZE!!';'!!                                    00864500
*                    '/* XBUFSIZE FIXED(31) */')                        00864600
*                    NORESCAN COL(MACLMAR);                             00864700
*            END;                                                       00864800
*/*PI.L17 XRECSIZE PTR(31)-------------------------------------------*/ 00864900
*        IF ZXRECSIZE='INPUT' !                                         00865000
*           ZXRECSIZE='INOUT'                                           00865100
*          THEN                                                         00865200
*            ANS('#Z'!!ZNDX!!'_XRECSIZE='!!                             00865300
*                XRECSIZE!!';'!!                                        00865400
*                '/* XRECSIZE PTR(31) */')                              00865500
*                NORESCAN COL(MACLMAR);                                 00865600
*/*PI.L17 XCONSCNT PTR(31)-------------------------------------------*/ 00865700
*        IF ZXCONSCNT='INPUT' !                                         00865800
*           ZXCONSCNT='INOUT'                                           00865900
*          THEN                                                         00866000
*            DO;                                                        00866100
*            IF (XCONSCNT='0' & XMFSCK^='COMPLETE')                     00866200
*              THEN                                                     00866300
*                ANS('#Z'!!ZNDX!!'_XCONSCNT=0;'!!                       00866400
*                    '/* XCONSCNT PTR(31) */')                          00866500
*                    NORESCAN COL(MACLMAR);                             00866600
*            IF XCONSCNT^='0'                                           00866700
*              THEN                                                     00866800
*                ANS('#Z'!!ZNDX!!'_XCONSCNT='!!                         00866900
*                    XCONSCNT!!';'!!                                    00867000
*                    '/* XCONSCNT PTR(31) */')                          00867100
*                    NORESCAN COL(MACLMAR);                             00867200
*            END;                                                       00867300
*/*PI.L17 XTOKEN PTR(31)---------------------------------------------*/ 00867400
*        IF ZXTOKEN='INPUT' !                                           00867500
*           ZXTOKEN='INOUT'                                             00867600
*          THEN                                                         00867700
*            DO;                                                        00867800
*            IF (XTOKEN='0' & XMFSCK^='COMPLETE')                       00867900
*              THEN                                                     00868000
*                ANS('#Z'!!ZNDX!!'_XTOKEN=0;'!!                         00868100
*                    '/* XTOKEN PTR(31) */')                            00868200
*                    NORESCAN COL(MACLMAR);                             00868300
*            IF XTOKEN^='0'                                             00868400
*              THEN                                                     00868500
*                ANS('#Z'!!ZNDX!!'_XTOKEN='!!                           00868600
*                    XTOKEN!!';'!!                                      00868700
*                    '/* XTOKEN PTR(31) */')                            00868800
*                    NORESCAN COL(MACLMAR);                             00868900
*            END;                                                       00869000
*/*PI.L29 NOT MF=M MACRO FORM----------------------------------------*/ 00869100
*        IF XMF^='M'                                                    00869200
*          THEN                                                         00869300
*            DO;                                                        00869400
*/*PI.L31 INVOKE FUNCTION--------------------------------------------*/ 00869500
*              IF NUMBER(RSNCODE)>0                                     00869600
*                THEN                                                   00869700
*                  ANS('RFY GPR00F RSTD;') NORESCAN COL(MACLMAR);       00869800
*              ANS('RFY GPR01P RSTD;') NORESCAN COL(MACLMAR);           00869900
*              ANS('GPR01P=ADDR(#Z'!!ZNDX!!');'!!                       00870000
*                  '/* PARAMETER LIST */')                              00870100
*                  NORESCAN COL(MACLMAR);                               00870200
*              IF SYSASCE^='P'                                          00870300
*                THEN                                                   00870400
*                  ANS('SAR(GPR01P,ALET(#Z'!!ZNDX!!'));'!!              00870500
*                      '/* PARAMETER LIST AR */')                       00870600
*                      NORESCAN COL(MACLMAR);                           00870700
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00870800
 /********************************************************************/ 00870900
 /*                                                                  */ 00871000
 /* Define external macro variables                                  */ 00871100
 /*                                                                  */ 00871200
 /********************************************************************/ 00871300
       DECLARE EHAMAPS CHAR EXTERNAL; /* Declare EHAMAPS            */  00871400
       IF INDEX(EHAMAPS,'XM@')=0 THEN /* Was XM@ used before        */  00871500
         EHAMAPS = EHAMAPS !! 'XM@';  /* No, add it to list         */  00871600
       IF INDEX(EHAREGS,'15F')=0 THEN /* Was 15F used before        */  00871700
         EHAREGS = EHAREGS !! '15F';  /* No, add it to list         */  00871800
 /********************************************************************/ 00871900
 /*                                                                  */ 00872000
 /* Invoke PC for Query EMCS Consoles Interface Routine              */ 00872100
 /*                                                                  */ 00872200
 /********************************************************************/ 00872300
       ANS NORESCAN                                                     00872400
         ('RFY GPR15F RSTD;          /* RESTRICT REGISTER 15   */');    00872500
       ANS NORESCAN                                                     00872600
         ('GPR15F = XM@(26) + 20;    /* GET IEEQEMCS PC NUMBER */');    00872700
       ANS NORESCAN                                                     00872800
         ('PC(GPR15F);               /* PC TO IEEQEMCS ROUTINE */');    00872900
       ANS NORESCAN                                                     00873000
         ('RFY GPR15F UNRSTD;        /* UNRESTRICT REGISTER 15 */');    00873100
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00873200
*              ANS('RFY GPR01P UNRSTD;') NORESCAN COL(MACLMAR);         00873300
*              IF NUMBER(RETCODE)>0                                     00873400
*                THEN                                                   00873500
*                  ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);       00873600
*/*PO.L08 XRETCODE RETURN CODE---------------------------------------*/ 00873700
*              IF NUMBER(RETCODE)>0                                     00873800
*                THEN                                                   00873900
*                    ANS(XRETCODE!!                                     00874000
*                     '=GPR15F; /* SET RETURN CODE */')                 00874100
*                      NORESCAN COL(MACLMAR);                           00874200
*/*PO.L09 XRSNCODE REASON CODE---------------------------------------*/ 00874300
*              IF NUMBER(RSNCODE)>0                                     00874400
*                THEN                                                   00874500
*                    ANS(XRSNCODE!!                                     00874600
*                     '=GPR00F; /* SET REASON CODE */')                 00874700
*                      NORESCAN COL(MACLMAR);                           00874800
*/*PO.L10 REMOVE REGISTER RESTRICTIONS-------------------------------*/ 00874900
*              IF NUMBER(RSNCODE)>0                                     00875000
*                THEN                                                   00875100
*              ANS('RFY GPR00F UNRSTD;') NORESCAN COL(MACLMAR);         00875200
*              IF NUMBER(RETCODE)>0                                     00875300
*                THEN                                                   00875400
*              ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);         00875500
*/*PO.L11 END OF FUNCTION INVOCATION---------------------------------*/ 00875600
*            END;                                                       00875700
*/*PO.L12 END OF PARAMETER LIST PROCESSING---------------------------*/ 00875800
*      END;                                                             00875900
*/*PO.L13 IEEQEMCS USAGE INDICATOR-----------------------------------*/ 00876000
*  ZIEEQEMCS='YES';                          /* SET IEEQEMCS USED */    00876100
*/*PO.L15 END OF EXECUTABLE IEEQEMCS-PLISTVER MACRO------------------*/ 00876200
*  IF XMF^='L'                                                          00876300
*    THEN                                                               00876400
*      ANS('END; /* IEEQEMCS-PLISTVER */')                              00876500
*          NORESCAN COL(MACLMAR);                                       00876600
*/*PO.L16 RESTORE PRINT CONTROLS-------------------------------------*/ 00876700
*  ANS(MACCONC!!'LIST POP;') NORESCAN COL(MACLMAR);                     00876800
*/*PO.L17 END OF IEEQEMCS MACRO--------------------------------------*/ 00876900
*  ANS(MACCONC!!'SPACE;') NORESCAN COL(MACLMAR);                        00877000
*  ANS(' ') NORESCAN COL(MACLMAR);                                      00877100
*/*******************************************************************/  00877200
*/*  PO.L18 END OF CODE TO BE BYPASSED WHEN ZMACRET ^= 0            */  00877300
*/*******************************************************************/  00877400
*      END;                                                             00877500
*/*******************************************************************/  00877600
*/*  MVS ONLY     -CHECK IF AMG PARM LISTS ARE PRESENT              */  00877700
*/*               -ROUND MAX AMG PARM LIST TO DOUBLEWORD MULTIPLES  */  00877800
*/*******************************************************************/  00877900
*  IF ZPRMNUM>0                   /* NUMBER OF AMG PARM LIST ENTRIES*/  00878000
*    THEN                                                               00878100
*      DO;                                                              00878200
*        ZPRMMAX=((ZPRMMAX+7)/8)*8; /* ROUND PARM LIST SIZE UP TO       00878300
*                                      DOUBLEWORD MULTIPLES        */   00878400
*/*******************************************************************/  00878500
*/*  MVS -GENERATE PARM LIST DCL TO OVERLAY ?EPILOG'S ILIST AREA    */  00878600
*/*******************************************************************/  00878700
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00878800
*          THEN                                                         00878900
*            DO;                                                        00879000
*              IF INDEX(EHALIST,',AMG,')=0 /* HAS DECLARE BEEN DONE?*/  00879100
*                THEN                                                   00879200
*                  DO;                                                  00879300
*                    ANS('?EPILOG                                       00879400
*                        STRING(''DCL #ZPLIST DEF(ILIST);'');');        00879500
*                    EHALIST=EHALIST!!',AMG,';                          00879600
*                  END;                                                 00879700
*            END;                                                       00879800
*/*******************************************************************/  00879900
*/*  MVS  -EXTRACT PARM LISTS FROM AMG GLOBAL MACRO ARRAYS          */  00880000
*/*******************************************************************/  00880100
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00880200
*          THEN                                                         00880300
*            DO;                                                        00880400
*              IF ZPRMMAX>EHAMAXLEN                                     00880500
*                THEN                                                   00880600
*                  EHAMAXLEN=ZPRMMAX; /* SET MAX PARM LIST SIZE     */  00880700
*            END;                                                       00880800
*        DO ZI=1 TO ZPRMNUM; /* EXTRACT AMG PARM LISTS               */ 00880900
*          ANS('?EPILOG STRING('''!!ZPRM(ZI)!!''');')                   00881000
*              COL(MACLMAR);                                            00881100
*        END;                                                           00881200
*      END;                                                             00881300
*/*-----------------------------------------------------------------*/  00881400
*/*  MVS  -ENSURE THAT GPRS NEEDED BY AMG MACROS WILL BE PROVIDED   */  00881500
*/*        BY ?EPILOG                                               */  00881600
*/*-----------------------------------------------------------------*/  00881700
*        IF INDEX(EHAREGS,'01P')=0                                      00881800
*          THEN                                                         00881900
*            EHAREGS=EHAREGS!!'01P'; /* GPR01P                      */  00882000
*        IF INDEX(EHAREGS,'00F')=0                                      00882100
*          & NUMBER(RSNCODE)>0                                          00882200
*          THEN                                                         00882300
*            EHAREGS=EHAREGS!!'00F'; /* GPR00F                      */  00882400
*        IF INDEX(EHAREGS,'15F')=0                                      00882500
*          THEN                                                         00882600
*            EHAREGS=EHAREGS!!'15F'; /* GPR15F                      */  00882700
*  RETURN CODE(ZMACRET);                                                00882800
*%END IEEQEMCS;                                                         00882900
