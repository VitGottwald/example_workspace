*                                                                       00001000
* %DCL CSVRTAA_INCLUDED CHAR EXT;                                       00002000
* %DEACTIVATE CSVRTAA_INCLUDED;                                         00003000
* %IF CSVRTAA_INCLUDED = '' %THEN                                       00004000
* %DO;                                                                  00005000
*/* Macro made bi-lingual on 09321. CBGEN compile date 09235         */ 00006000
*% /*                                                                   00007000
         MACRO                                                          00008000
         CSVRTAA &DSECT=YES,&LIST=YES,&TITLE=YES,&RTAAHDR=YES,         *00009000
               &RTAAPH=COND,&RTAADS=COND,&RTAAMO=COND,&RTAALO=COND,    *00010000
               &RTAALPH=COND,&RTAALU=COND,&RTAAPL=COND,&RTLSXTL=COND,  *00011000
               &RTLSXTLE=COND                                           00012000
         GBLC  &CSVRTAA_INCLUDED                                        00013000
         GBLC  &ZCBPRINT                                                00014000
&CSVRTAA_INCLUDED SETC 'YES'                                            00015000
         AIF   ('&LIST' EQ 'NONE').P0                                   00016000
         AIF   ('&TITLE' EQ 'NO').P5                                    00017000
 TITLE   'CSVRTAA  - RTLS Answer Area                               '   00018000
.P5      ANOP                                                           00019000
**/ CSVRTAA_1:;                                                         00020000
*/* START OF SPECIFICATIONS ******************************************* 00021000
*                                                                       00022000
*  **PROPRIETARY_STATEMENT********************************************  00023000
***01* PROPRIETARY STATEMENT=                                        *  00024000
*                                                                    *  00025000
*                                                                    *  00026000
*   LICENSED MATERIALS - PROPERTY OF IBM                             *  00027000
*   5694-A01 COPYRIGHT IBM CORP. 1997,2010                           *  00028000
*                                                                    *  00029000
*   STATUS= HBB7770                                                  *  00030000
*                                                                    *  00031000
*  **END_OF_PROPRIETARY_STATEMENT*************************************  00032000
*                                                                       00033000
*01* DESCRIPTIVE NAME:  RTLS Answer Area                                00034000
*02*  ACRONYM:  RTAA                                                    00035000
*                                                                       00036000
*01* MACRO NAME:  CSVRTAA                                               00037000
*                                                                       00038000
*01* EXTERNAL CLASSIFICATION: GUPI                                      00039000
*01* END OF EXTERNAL CLASSIFICATION:                                    00040000
*                                                                       00041000
*01* DSECT NAME:                                                        00042000
*     RTAAHDR                                                           00043000
*     RTAAPH                                                            00044000
*     RTAADS                                                            00045000
*     RTAAMO                                                            00046000
*     RTAALO                                                            00047000
*     RTAALPH                                                           00048000
*     RTAALU                                                            00049000
*     RTAAPL                                                            00050000
*     RTLSXTL                                                           00051000
*     RTLSXTLE                                                          00052000
*                                                                       00053000
*01* COMPONENT:  Contents Supervision (SC1CJ)                           00054000
*                                                                       00055000
*01* EYE-CATCHER:  NONE                                                 00056000
*                                                                       00057000
*01* STORAGE ATTRIBUTES:                                                00058000
*02*  SUBPOOL:  Caller-supplied                                         00059000
*02*  KEY:  Caller-supplied                                             00060000
*02*  RESIDENCY:  Caller-supplied                                       00061000
*                                                                       00062000
*01* SIZE:  Variable                                                    00063000
*                RTAAHDR  -- X'0038' bytes                              00064000
*                RTAAPH   -- X'0048' bytes                              00065000
*                RTAADS   -- X'0038' bytes                              00066000
*                RTAAMO   -- X'0024' bytes                              00067000
*                RTAALO   -- X'0050' bytes                              00068000
*                RTAALPH  -- X'0014' bytes                              00069000
*                RTAALU   -- X'0010' bytes                              00070000
*                RTAAPL   -- X'001C' bytes                              00071000
*                RTLSXTL  -- X'0088' bytes                              00072000
*                RTLSXTLE -- X'0008' bytes                              00073000
*                                                                       00074000
*01* CONTROL BLOCK CHANGES:                                             00075000
*02*  CSVRTAA                                                           00076000
*02*   OS/390 R4                                                        00077000
*03*    New                                                             00078000
*03*    Migration Considerations: NONE                                  00079000
*01* END CONTROL BLOCK CHANGES                                          00080000
*                                                                       00081000
*01* CREATED BY:                                                        00082000
*     Caller and passed as parameter on ANSAREA keyword                 00083000
*      on CSVRTLS LIST                                                  00084000
*                                                                       00085000
*01* POINTED TO BY:                                                     00086000
*     CSVRTLS parameter list                                            00087000
*                                                                       00088000
*01* SERIALIZATION:                                                     00089000
*     None required                                                     00090000
*                                                                       00091000
*01* FUNCTION:                                                          00092000
*02* Maps the data returned by the CSVRTLS macro, LIST request.         00093000
*                                                                       00094000
*02* The returned information consists of a header (RTAAHDR)            00095000
*    which indicates how many physical entries (RTAAPH)                 00096000
*    and logical entries (RTAALO) follow.                               00097000
*                                                                       00098000
*02* RTAAHFIRSTPHADDR is a pointer to the first RTAAPH, and each        00099000
*    RTAAPH points to the next (RTAAPHNEXTADDR). The count provided in  00100000
*    header field RTAAHNumPH should be used to determine the number of  00101000
*    exit entries to examine.                                           00102000
*                                                                       00103000
*02* Each RTAAPH indicates how many data set entries (RTAADS),          00104000
*    module entries (RTAAMO), and logical entries (RTAAPL)              00105000
*    are associated with it.                                            00106000
*                                                                       00107000
*    RTAAPHFIRSTDSADDR is a pointer to the first RTAADS, and each       00108000
*    RTAADS points to the next (RTAADSNEXTADDR). The                    00109000
*    count provided in RTAAPHNumDS should be used                       00110000
*    to determine the number of data set entries to examine.            00111000
*                                                                       00112000
*    RTAAPHFIRSTMOADDR is a pointer to the first RTAAMO, and each       00113000
*    RTAAMO points to the next (RTAAMONEXTADDR). The                    00114000
*    count provided in RTAAPHNumMO should be used                       00115000
*    to determine the number of module entries to examine.              00116000
*                                                                       00117000
*    RTAAPHFIRSTPLADDR is a pointer to the first RTAAPL, and each       00118000
*    RTAAPL points to the next (RTAAPLNEXTADDR). The                    00119000
*    count provided in RTAAPHNumPL should be used                       00120000
*    to determine the number of module entries to examine.              00121000
*                                                                       00122000
*02* Each RTAALO indicates how many physical entries (RTAALPH),         00123000
*    module entries (RTAAMO),                                           00124000
*    and user entries (RTAALU) are associated with it.                  00125000
*                                                                       00126000
*    RTAALOFIRSTLPHADDR is a pointer to the first RTAALPH, and each     00127000
*    RTAALPH points to the next (RTAALPHNEXTADDR). The                  00128000
*    count provided in RTAALONumLPH should be used                      00129000
*    to determine the number of LPH entries to examine.                 00130000
*                                                                       00131000
*    RTAALOFIRSTMOADDR is a pointer to the first RTAAMO, and each       00132000
*    RTAAMO points to the next (RTAAMONEXTADDR). The                    00133000
*    count provided in RTAALONumMO should be used                       00134000
*    to determine the number of module entries to examine.              00135000
*                                                                       00136000
*    RTAALOFIRSTLUADDR is a pointer to the first RTAALU, and each       00137000
*    RTAALU points to the next (RTAALUNEXTADDR). The                    00138000
*    count provided in RTAALONumLU should be used                       00139000
*    to determine the number of user entries to examine.                00140000
*                                                                       00141000
*03* RTLSXTL maps the extent list returned by the outXTLST parameter    00142000
*    of the CSVRTLS REQUEST=LOAD function. RTLSXTLE maps an entry       00143000
*    within that extent list                                            00144000
*                                                                       00145000
*01* METHOD OF ACCESS:                                                  00146000
*02*  ASM:                                                              00147000
*      CSVRTAA                                                          00148000
*           DSECT=YES!NO  -- Request DSECT definition                   00149000
*           RTAAHDR=YES!NO!COND -- Request Header record mapping        00150000
*                            USING on RTAAHDR                           00151000
*           RTAAPH=YES!NO!COND -- Request physical data set mapping     00152000
*                            USING on RTAAPH                            00153000
*           RTAADS=YES!NO!COND -- Request data set record mapping       00154000
*                            USING on RTAADS                            00155000
*           RTAAMO=YES!NO!COND -- Request module record mapping         00156000
*                            USING on RTAAMO                            00157000
*           RTAALO=YES!NO!COND -- Request logical data set mapping      00158000
*                            USING on RTAALO                            00159000
*           RTAALPH=YES!NO!COND -- Request LPH mapping                  00160000
*                            USING on RTAALPH                           00161000
*           RTAALU=YES!NO!COND -- Request LU mapping                    00162000
*                            USING on RTAALU                            00163000
*           RTAAPL=YES!NO!COND -- Request PL mapping                    00164000
*                            USING on RTAAPL                            00165000
*           RTLSXTL=YES!NO!COND -- Request outXTLST mapping             00166000
*                            USING on RTLSXTL                           00167000
*           RTLSXTLE=YES!NO!COND -- Request outXTLST mapping            00168000
*                            USING on RTLSXTLE                          00169000
*     Default: DSECT=YES,RTAAHDR=YES,RTAAPH=COND,RTAADS=COND,           00170000
*                        RTAAMO=COND,RTAALO=COND,RTAALPH=COND,          00171000
*                        RTAALU=COND,RTAAPL=COND,                       00172000
*                        RTLSXTL=COND,RTLSXTLE=COND                     00173000
*     Notes: name=YES  => expand                                        00174000
*            name=NO   => do not expand                                 00175000
*            name=COND => expand only if DSECT=YES                      00176000
*                                                                       00177000
*02*  PL/AS:                                                            00178000
*      %INCLUDE SYSLIB(CSVRTAA)                                         00179000
*                                                                       00180000
*01* DELETED BY:  Caller                                                00181000
*                                                                       00182000
*01* FREQUENCY:  Created for response to CSVRTLS LIST                   00183000
*                                                                       00184000
*01* DEPENDENCIES:  None                                                00185000
*                                                                       00186000
*01* DISTRIBUTION LIBRARY:  AMACLIB                                     00187000
*                                                                       00188000
*01* CHANGE ACTIVITY:                                                   00189000
*   $L0=RTLS_CBG ,JBB6604,960425,PD00XB: RTLS                           00190000
*   $L1=RTLS_CSV ,JBB6604,960425,PD00XB: RTLS                           00191000
*   $L2=OWxxxxxx ,HBB6606,971201,PD00XB: Return DCB and Library ID      00192000
*                                                                       00193000
* END OF SPECIFICATIONS *********************************************/  00194000
*% /*                                                                   00195000
.P0      ANOP                                                           00196000
         AIF   ('&ZCBPRINT' EQ 'NO').P1                                 00197000
         AIF   ('&LIST' EQ 'YES').P2                                    00198000
.P1      ANOP                                                           00199000
         PUSH  PRINT                                                    00200000
         PRINT OFF                                                      00201000
.P2      ANOP                                                           00202000
         AIF   ('&RTAAHDR' EQ 'NO').L0002                               00203000
         AIF   ('&DSECT' EQ 'YES').L0003                                00204000
         AIF   ('&RTAAHDR' NE 'YES').L0002                              00205000
RTAAHDR  DS    0F        Header section                                 00206000
         AGO   .L0004                                                   00207000
.L0003   ANOP                                                           00208000
RTAAHDR  DSECT           Header section                                 00209000
.L0004   ANOP                                                           00210000
RTAAHNUMPH DS  F         Number of RTAAPH entries which follow          00211000
RTAAHNUMLO DS  F         Number of RTAALO entries which follow          00212000
RTAAHNUMPHREM DS F       Number of RTAAPH entries which were not       *00213000
                         returned because of insufficient space         00214000
RTAAHNUMLOREM DS F       Number of RTAALO entries which were not       *00215000
                         returned because of insufficient space         00216000
RTAAHTLEN DS   F         Total length of answer area needed to contain *00217000
                         all the requested information. This includes  *00218000
                         the area for the records that were returned   *00219000
                         on this call.                                  00220000
RTAAHFIRSTPHADDR DS A    Address of first RTAAPH                        00221000
RTAAHFIRSTLOADDR DS A    Address of first RTAALO                        00222000
RTAAHMAXBELOW DS F       Limitation (in bytes) of below-16M common for *00223000
                         modules                                        00224000
RTAAHBELOWUSED DS F      Number of bytes used of below-16M common for  *00225000
                         modules                                        00226000
RTAAHMAXABOVE DS F       Limitation (in bytes) of above-16M common for *00227000
                         modules. 0 indicates that there is no limit    00228000
RTAAHABOVEUSED DS F      Number of bytes used of below-16M common for  *00229000
                         modules                                        00230000
RTAAHFLAGS DS  B         Flags                                          00231000
*  Bit definitions:                                                     00232000
RTAAHNOABOVE16M EQU X'80' An attempt was made to get storage           *00233000
                         above-16M. The system was unable to comply    *00234000
                         and the storage was obtained below 16M. No    *00235000
                         subsequent caching of modules will be done.    00236000
RTAAHCACHEBELOWISFULL EQU X'40'                                         00237000
RTAAHCACHEABOVEISFULL EQU X'20'                                         00238000
         DS    CL3       Reserved                                       00239000
RTAAHFULLCACHELIMIT DS F Limit of number of times the RTLS cache could *00240000
                         not meet the needs for the module being       *00241000
                         loaded before the cache is actually marked as *00242000
                         being full.                                    00243000
RTAAHFULLCACHECOUNT DS F Number of times that the RTLS cache limit     *00244000
                         could not meet the needs for the module being *00245000
                         loaded.                                        00246000
*                                                                       00247000
*    *****************************************************************  00248000
*    *                                                               *  00249000
*    * Return Code Information It is guaranteed that no reason code  *  00250000
*    * will be reused (i.e., the same reason code will not be used   *  00251000
*    * for more than one return code). Also note carefully that bits *  00252000
*    * 0-15 of the reason code may contain component-diagnostic data *  00253000
*    * and must not be assumed to be 0.                              *  00254000
*    *                                                               *  00255000
*    *****************************************************************  00256000
*                                                                       00257000
*                                                                       00258000
CSVRTLSRSNCODEMASK EQU X'0000FFFF' Use this mask to isolate the non    *00259000
                         component-diagnostic portion of the reason    *00260000
                         code.                                          00261000
*                                                                       00262000
*   CSVRTLS Return and Reason Code definitions                          00263000
*                                                                       00264000
*                                                                       00265000
CSVRTLSRC_OK EQU X'00000000' Meaning: CSVRTLS request successful.      *00266000
                         Action: None required.                         00267000
CSVRTLSRC_WARN EQU X'00000004' Meaning: Warning Action: Refer to       *00268000
                         action provided with the reason code.          00269000
CSVRTLSRSNLISTNOMATCHES EQU X'00000401' Meaning: For LIST request, no  *00270000
                         matching logical and/or physical libraries    *00271000
                         matches the request. Action: Make sure that   *00272000
                         you specified the proper library name.         00273000
CSVRTLSRSNALIASESEXIST EQU X'00000402' Meaning: For DISCONNECT         *00274000
                         request, there are outstanding alias entries  *00275000
                         to modules loaded for this library. An        *00276000
                         ATTACH(X), LINK(X), or XCTL(X) was issued     *00277000
                         using the name of a module loaded by RTLS for *00278000
                         this library. Action: Avoid using DISCONNECT  *00279000
                         when there are such alias entries. If you     *00280000
                         cancel the jobstep, the system will perform   *00281000
                         the cleanup and disconnect on your behalf.     00282000
CSVRTLSRSNNOTALLDATARETURNED EQU X'00000403' Meaning: For LIST         *00283000
                         request, not all data was returned because    *00284000
                         the answer area is not big enough. Answer     *00285000
                         area field RTAAHTLEN indicates how much space *00286000
                         is currently required. Action: Allocate a     *00287000
                         larger area and request the function again.    00288000
CSVRTLSRC_INVPARM EQU X'00000008' Meaning: CSVRTLS request specifies   *00289000
                         invalid parameters. Action: Refer to action   *00290000
                         provided with the reason code.                 00291000
CSVRTLSRSNBADPARMLIST EQU X'00000801' Meaning: Unable to access        *00292000
                         parameter list. Action: Check for possible    *00293000
                         storage overlay.                               00294000
CSVRTLSRSNNOTAUTHORIZED EQU X'00000804' Meaning: For CONNECT or LOAD - *00295000
                         not authorized. For CONNECT, the customer has *00296000
                         requested that security checking be done. You *00297000
                         do not have read access to RACF FACILITY      *00298000
                         class resource CSVRTLS.LIBRARY.libra          *00299000
                         ry.version. For LOAD, the customer has        *00300000
                         restricted access to the program that you are *00301000
                         attempting to access. You do not have access  *00302000
                         to that program. Action: Request this         *00303000
                         function only when you have the proper         00304000
*                        authority. For LOAD, refer to the             *00305000
                         documenation for completion code 306 reason   *00306000
                         code 30 in the system codes publication, and  *00307000
                         the documentation for message CSV205I in the  *00308000
                         system messages publication, for further      *00309000
                         information. While the completion code and    *00310000
                         message are not produced, the information     *00311000
                         pertaining to them does apply to this         *00312000
                         situation.                                     00313000
CSVRTLSRSNBADANSAREAALET EQU X'00000806' Meaning: Bad answer area      *00314000
                         ALET. Action: Make sure that the ALET         *00315000
                         associated with the answer area is valid. The *00316000
                         access register might not have been set up    *00317000
                         correctly.                                     00318000
CSVRTLSRSNBADANSAREA EQU X'00000807' Meaning: Error accessing answer   *00319000
                         area. Action: Make sure that the provided     *00320000
                         answer area is valid.                          00321000
CSVRTLSRSNBADANSLEN EQU X'00000808' Meaning: LIST - AnsLen is less     *00322000
                         than size of the header area. Action: Provide *00323000
                         a larger answer area (as indicated by the     *00324000
                         ANSLEN keyword).                               00325000
CSVRTLSRSNBADREQUESTTYPE EQU X'00000809' Meaning: Request type is not  *00326000
                         valid. Action: Check for possible storage     *00327000
                         overlay of the parameter list.                 00328000
CSVRTLSRSNBADESTAEX EQU X'0000080A' Meaning: Unable to establish       *00329000
                         ESTAEX. "xxxx" contains ESTAE(X) return code. *00330000
                         Action: Refer to documentation for ESTAEX     *00331000
                         return code "xxxx".                            00332000
CSVRTLSRSNRESERVEDNOT0 EQU X'0000080B' Meaning: Reserved field not 0.  *00333000
                         Action: Check for possible storage overlay of *00334000
                         the parameter list.                            00335000
CSVRTLSRSNBADOUTXTLSTALET EQU X'0000080C' Meaning: Bad Outxtlst ALET.  *00336000
                         Action: Make sure that the ALET of the        *00337000
                         OUTXTLST area is valid. The access register   *00338000
                         might not have been set up correctly.          00339000
CSVRTLSRSNBADPARMLISTALET EQU X'0000080D' Meaning: Bad parmlist ALET.  *00340000
                         Action: Make sure that the ALET of the        *00341000
                         parameter list is valid. The access register  *00342000
                         might not have been set up correctly.          00343000
CSVRTLSRSNBADVERSION EQU X'0000080E' Meaning: Bad version number.      *00344000
                         Action: Check for possible storage overlay of *00345000
                         the parameter list.                            00346000
CSVRTLSRSNLIBRARYNOTFOUND EQU X'00000810' Meaning: For CONNECT or LIST *00347000
                         request, the requested library is not defined *00348000
                         to RTLS. Action: Make sure that you specified *00349000
                         the correct library name.                      00350000
CSVRTLSRSNBADLISTTYPE EQU X'00000811' Meaning: For LIST, the ListType  *00351000
                         value is incorrect. Action: Check for         *00352000
                         possible storage overlay of the parameter     *00353000
                         list.                                          00354000
CSVRTLSRSNBADCONTOKEN EQU X'0000082C' Meaning: For LOAD, DELETE, or    *00355000
                         DISCONNECT the input contoken does not        *00356000
                         represent a valid connection. Action: Make    *00357000
                         sure that you specified the connect token     *00358000
                         that was returned by the CONNECT request.      00359000
CSVRTLSRSNMODULENOTLOADED EQU X'0000082D' Meaning: For LOAD, the       *00360000
                         module could not be loaded. A valid copy of   *00361000
                         the module was not located within the logical *00362000
                         library represented by the connect token. If  *00363000
                         you are authorized, the only copy might have  *00364000
                         been within an unauthorized library. There    *00365000
                         might not have been enough storage available  *00366000
                         to satisfy the request to load the module.    *00367000
                         Action: Make sure that you specified the      *00368000
                         correct connect token and correct module       00369000
*                        name. If you are authorized, make sure that   *00370000
                         the library containing the module is          *00371000
                         authorized. When the field designated by the  *00372000
                         OUTEPA parameter is non-zero, it contains     *00373000
                         additional diagnostic information. That       *00374000
                         information is in the format 000cccrr where   *00375000
                         ccc represents a system completion code, and  *00376000
                         rr the reason code associated with that       *00377000
                         completion code. See the system codes         *00378000
                         publication, for further information.          00379000
CSVRTLSRSNMODADDRNOTVALID EQU X'0000082E' Meaning: For DELETE, the     *00380000
                         provided address does not represent a module  *00381000
                         previously loaded by the LOAD request.        *00382000
                         Action: Make sure that you specified the      *00383000
                         correct connect token and correct module      *00384000
                         address.                                       00385000
CSVRTLSRSNBADTCBADDR EQU X'0000082F' Meaning: The provided TCBADDR     *00386000
                         parameter does not specify a task that either *00387000
                         is the current task or an ancestor task. The  *00388000
                         oldest task allowed is the connecting task.   *00389000
                         Alternately, the caller was not authorized.   *00390000
                         Action: Make sure that you specified the      *00391000
                         correct TCBADDR and that you are authorized.   00392000
CSVRTLSRSNBADTASK EQU X'00000830' Meaning: The task issuing a LOAD or  *00393000
                         DELETE request is neither the connecting task *00394000
                         nor a subtask of that task. The task issuing  *00395000
                         a DISCONNECT request is not the connecting    *00396000
                         task. Action: Make sure that you use the      *00397000
                         LOAD, DELETE, and DISCONNECT requests only    *00398000
                         from a proper task.                            00399000
CSVRTLSRSNBADOUTXTLST EQU X'00000831' Meaning: Unable to access the    *00400000
                         OutXtlst area. Action: Check that you         *00401000
                         provided a valid area.                         00402000
CSVRTLSRSNBADOUTXTLSTCONTENTS EQU X'00000832' Meaning: The             *00403000
                         RtlsXtlNumEntriesProvided field had an        *00404000
                         incorrect value. Action: Fill in the          *00405000
                         RtlsXtlNumEntriesProvided area using equate   *00406000
                         symbol RtlsXtlMaxNumEntries prior to invoking *00407000
                         the macro.                                     00408000
CSVRTLSRC_ENV EQU X'0000000C' Meaning: Environmental error Action:     *00409000
                         Refer to action provided with the reason      *00410000
                         code.                                          00411000
CSVRTLSRSNNOSTORAGE EQU X'00000C01' Meaning: No storage is available   *00412000
                         to complete the request. Action: Contact your *00413000
                         system programmer. There might be a common    *00414000
                         storage shortage.                              00415000
CSVRTLSRSNTOOMANYCONNECTIONS EQU X'00000C02' Meaning: The limit of 32  *00416000
                         connections from an address space by          *00417000
                         unauthorized callers been reached. Action:    *00418000
                         Restructure your program so that it requests  *00419000
                         fewer connections.                             00420000
CSVRTLSRSNLOADDELETEINPROCESS EQU X'00000C03' Meaning: For the         *00421000
                         disconnect request, at least one load or      *00422000
                         delete request is still in process. Action:   *00423000
                         Avoid requesting a disconnect when there are  *00424000
                         loads or delete requests still being done. If *00425000
                         the load or delete is being done from a       *00426000
                         subtask, your program could wait for that     *00427000
                         subtask to complete before issuing the        *00428000
                         disconnect request.                            00429000
CSVRTLSRSNTASKINRTLS EQU X'00000C04' Meaning: The issuing task is      *00430000
                         currently processing an RTLS request. Another *00431000
                         request during this time is not allowed.      *00432000
                         Action: Avoid issuing an RTLS request from a  *00433000
                         program running as an interrupt request block *00434000
                         (IRB) when the interrupted program is         *00435000
                         processing an RTLS request. Bit STCBINRT in   *00436000
                         the STCB data area will be on if the          *00437000
                         interrupted program is in this state.          00438000
CSVRTLSRSNNOTAVAILABLE EQU X'00000CFF' Meaning: CSVRTLS has been       *00439000
                         withdrawn as of z/OS 1.12. Action: Change     *00440000
                         your program not to use CSVRTLS.               00441000
CSVRTLSRC_COMPERROR EQU X'00000010' Meaning: Unexpected failure.       *00442000
                         Action: Refer to action provided with the     *00443000
                         reason code.                                   00444000
CSVRTLSRSNCOMPERROR EQU X'00001001' Meaning: Unexpected failure. The   *00445000
                         state of the request is unpredictable.        *00446000
                         Action: Contact your system programmer.        00447000
RTAAHDR_LEN EQU *-RTAAHDR                                               00448000
.L0002   ANOP                                                           00449000
         AIF   ('&RTAAPH' EQ 'NO').L0005                                00450000
         AIF   ('&DSECT' EQ 'YES').L0006                                00451000
         AIF   ('&RTAAPH' NE 'YES').L0005                               00452000
.L0006   ANOP                                                           00453000
*                                                                       00454000
*   End of CSVRTLS Return and Reason Code definitions                   00455000
*                                                                       00456000
*                                                                       00457000
         AIF   ('&DSECT' EQ 'YES').L0007                                00458000
RTAAPH   DS    0F        RTAAPH Record data format                      00459000
         AGO   .L0008                                                   00460000
.L0007   ANOP                                                           00461000
RTAAPH   DSECT           RTAAPH Record data format                      00462000
.L0008   ANOP                                                           00463000
RTAAPHNEXTADDR DS A      Address of next RTAAPH. RTAAHNumPH must be    *00464000
                         used to determine how far along this chain to *00465000
                         go.                                            00466000
RTAAPHFIRSTDSADDR DS A   Address of first RTAADS for this RTAAPH        00467000
RTAAPHFIRSTMOADDR DS A   Address of first RTAAMO for this RTAAPH        00468000
RTAAPHFIRSTPLADDR DS A   Address of first RTAAPL for this RTAAPH        00469000
RTAAPHNAME DS  CL8       Name of physical data set                      00470000
RTAAPHSEQNUM DS F        Sequence number                                00471000
RTAAPHDCBADDR DS A       This is the address of the DCB, in common     *00472000
                         storage, associated with the physical         *00473000
                         library.                                       00474000
         ORG   RTAAPHDCBADDR                                            00475000
RTAAPHDCB@ DS  A         This is the address of the DCB, in common     *00476000
                         storage, associated with the physical         *00477000
                         library.                                       00478000
RTAAPHNUMDS DS F         Number of RTAADS entries associated with this *00479000
                         physical data set                              00480000
RTAAPHNUMMO DS F         Number of RTAAMO entries associated with this *00481000
                         physical data set                              00482000
RTAAPHNUMPL DS F         Number of RTAAPL entries associated with this *00483000
                         physical data set                              00484000
RTAAPHFLAGS DS B         Flags                                          00485000
*  Bit definitions:                                                     00486000
RTAAPHDELETEPENDING EQU X'80'                                           00487000
RTAAPHCACHEBELOWISFULL EQU X'40'                                        00488000
RTAAPHCACHEABOVEISFULL EQU X'20'                                        00489000
         DS    CL3       Reserved                                       00490000
RTAAPHMAXBELOW DS F      Limitation (in bytes) of below-16M common for *00491000
                         modules                                        00492000
RTAAPHBELOWUSED DS F     Number of bytes used of below-16M common for  *00493000
                         modules                                        00494000
RTAAPHMAXABOVE DS F      Limitation (in bytes) of above-16M common for *00495000
                         modules. 0 indicates that there is no limit    00496000
RTAAPHABOVEUSED DS F     Number of bytes used of below-16M common for  *00497000
                         modules                                        00498000
RTAAPHFULLCACHELIMIT DS F Limit of number of times the physical        *00499000
                         library cache limit could not meet the needs  *00500000
                         for the module being loaded, before the cache *00501000
                         is actually marked as being full.              00502000
RTAAPHFULLCACHECOUNT DS F Number of times that the physical library    *00503000
                         cache limit could not meet the needs for the  *00504000
                         module being loaded.                           00505000
RTAAPH_LEN EQU *-RTAAPH                                                 00506000
.L0005   ANOP                                                           00507000
         AIF   ('&RTAADS' EQ 'NO').L0009                                00508000
         AIF   ('&DSECT' EQ 'YES').L000A                                00509000
         AIF   ('&RTAADS' NE 'YES').L0009                               00510000
RTAADS   DS    0F        RTAADS Record data format                      00511000
         AGO   .L000B                                                   00512000
.L000A   ANOP                                                           00513000
RTAADS   DSECT           RTAADS Record data format                      00514000
.L000B   ANOP                                                           00515000
RTAADSNEXTADDR DS A      Address of next RTAADS. RTAAPHNumDS must be   *00516000
                         used to determine how far along this chain to *00517000
                         go.                                            00518000
         DS    CL2       UNUSED                                         00519000
RTAADSVOLSER DS CL6      Volume ID. Represents status as of last       *00520000
                         allocation                                     00521000
RTAADSNAME DS  CL44      Data set name.                                 00522000
RTAADS_LEN EQU *-RTAADS                                                 00523000
.L0009   ANOP                                                           00524000
         AIF   ('&RTAAMO' EQ 'NO').L000C                                00525000
         AIF   ('&DSECT' EQ 'YES').L000D                                00526000
         AIF   ('&RTAAMO' NE 'YES').L000C                               00527000
RTAAMO   DS    0F        RTAAMO Record data format                      00528000
         AGO   .L000E                                                   00529000
.L000D   ANOP                                                           00530000
RTAAMO   DSECT           RTAAMO Record data format                      00531000
.L000E   ANOP                                                           00532000
RTAAMONEXTADDR DS A      Address of next RTAAMO. RTAAPHNumMO must be   *00533000
                         used to determine how far along this chain to *00534000
                         go.                                            00535000
RTAAMOFLAGS DS B         Flags                                          00536000
*  Bit definitions:                                                     00537000
RTAAMOPRELOADREQUESTED EQU X'80'                                        00538000
RTAAMOPRELOADSUCCESSFUL EQU X'40'                                       00539000
         DS    CL3       UNUSED                                         00540000
RTAAMOEPADDR DS A        Entry-point address                            00541000
RTAAMOLOADPTADDR1 DS A   Load point                                     00542000
RTAAMOLENGTH1 DS F       Length                                         00543000
RTAAMOLOADPTADDR2 DS A   Load point 2 (may be 0)                        00544000
RTAAMOLENGTH2 DS F       Length (may be 0)                              00545000
RTAAMONAME DS  CL8       Module name                                    00546000
RTAAMO_LEN EQU *-RTAAMO                                                 00547000
.L000C   ANOP                                                           00548000
         AIF   ('&RTAALO' EQ 'NO').L000F                                00549000
         AIF   ('&DSECT' EQ 'YES').L0010                                00550000
         AIF   ('&RTAALO' NE 'YES').L000F                               00551000
RTAALO   DS    0F        RTAALO Record data format                      00552000
         AGO   .L0011                                                   00553000
.L0010   ANOP                                                           00554000
RTAALO   DSECT           RTAALO Record data format                      00555000
.L0011   ANOP                                                           00556000
RTAALONEXTADDR DS A      Address of next RTAALO. RTAAHNumLO must be    *00557000
                         used to determine how far along this chain to *00558000
                         go.                                            00559000
RTAALOFIRSTLPHADDR DS A  Address of first RTAALPH for this RTAALO       00560000
RTAALOFIRSTMOADDR DS A   Address of first RTAAMO for this RTAALO        00561000
RTAALOFIRSTLUADDR DS A   Address of first RTAALU for this RTAALO        00562000
RTAALONAME DS  CL8       Name of logical data set                       00563000
RTAALOVERSION DS CL8     Version name                                   00564000
RTAALOSEQNUM DS F        Sequence number                                00565000
         DS    CL4       UNUSED                                         00566000
RTAALONUMLPH DS F        Number of RTAALPH entries associated with     *00567000
                         this logical data set                          00568000
RTAALONUMMO DS F         Number of RTAAMO entries associated with this *00569000
                         logical data set                               00570000
RTAALONUMLU DS F         Number of RTAALU entries associated with this *00571000
                         logical data set                               00572000
RTAALOFLAGS DS B         Flags                                          00573000
*  Bit definitions:                                                     00574000
RTAALODELETEPENDING EQU X'80'                                           00575000
RTAALODEFAULT EQU X'40'                                                 00576000
RTAALOSECCHECK DS X      See equates beginning with RtaaloSecCheck for *00577000
                         values                                         00578000
RTAALOLIBRARYID DS H     This is the internal ID that identifies the   *00579000
                         logical library                                00580000
         DS    CL8       Reserved                                       00581000
RTAALONUMREQUESTS DS F   Number of times that the logical library was  *00582000
                         used successfully to load a module. This is   *00583000
                         the total of the following two fields plus    *00584000
                         those cases where neither the cache nor       *00585000
                         LleJPQ was used                                00586000
RTAALONUMREQUESTSFROMCACHE DS F Number of times that the logical       *00587000
                         library cache was used to load a module.       00588000
RTAALONUMREQUESTSFROMCSV DS F Number of times that the contents        *00589000
                         supervisor blocks were used to locate a       *00590000
                         previously fetched copy of the module (hence  *00591000
                         avoiding a new fetch)                          00592000
RTAALONUMREQUESTSFROMLLA DS F Number of times that the LLA located the *00593000
                         copy to use                                    00594000
RTAALOSECCHECKYES EQU 1                                                 00595000
RTAALOSECCHECKNO EQU 2                                                  00596000
RTAALO_LEN EQU *-RTAALO                                                 00597000
.L000F   ANOP                                                           00598000
         AIF   ('&RTAALPH' EQ 'NO').L0012                               00599000
         AIF   ('&DSECT' EQ 'YES').L0013                                00600000
         AIF   ('&RTAALPH' NE 'YES').L0012                              00601000
RTAALPH  DS    0F        RTAALPH Record data format                     00602000
         AGO   .L0014                                                   00603000
.L0013   ANOP                                                           00604000
RTAALPH  DSECT           RTAALPH Record data format                     00605000
.L0014   ANOP                                                           00606000
RTAALPHNEXTADDR DS A     Address of next RTAALPH. RTAALONumLPH must be *00607000
                         used to determine how far along this chain to *00608000
                         go.                                            00609000
RTAALPHNAME DS CL8       Physical data set name                         00610000
RTAALPHSEQNUM DS F       Sequence number                                00611000
         DS    CL4       Reserved                                       00612000
RTAALPH_LEN EQU *-RTAALPH                                               00613000
.L0012   ANOP                                                           00614000
         AIF   ('&RTAALU' EQ 'NO').L0015                                00615000
         AIF   ('&DSECT' EQ 'YES').L0016                                00616000
         AIF   ('&RTAALU' NE 'YES').L0015                               00617000
RTAALU   DS    0F        RTAALU Record data format                      00618000
         AGO   .L0017                                                   00619000
.L0016   ANOP                                                           00620000
RTAALU   DSECT           RTAALU Record data format                      00621000
.L0017   ANOP                                                           00622000
RTAALUNEXTADDR DS A      Address of next RTAALU. RTAALONumLU must be   *00623000
                         used to determine how far along this chain to *00624000
                         go.                                            00625000
RTAALUASID DS  H         ASID                                           00626000
         DS    CL2       Unused                                         00627000
RTAALUJOBNAME DS CL8     Jobname                                        00628000
RTAALU_LEN EQU *-RTAALU                                                 00629000
.L0015   ANOP                                                           00630000
         AIF   ('&RTAAPL' EQ 'NO').L0018                                00631000
         AIF   ('&DSECT' EQ 'YES').L0019                                00632000
         AIF   ('&RTAAPL' NE 'YES').L0018                               00633000
RTAAPL   DS    0F        RTAAPL Record data format                      00634000
         AGO   .L001A                                                   00635000
.L0019   ANOP                                                           00636000
RTAAPL   DSECT           RTAAPL Record data format                      00637000
.L001A   ANOP                                                           00638000
RTAAPLNEXTADDR DS A      Address of next RTAAPL. RTAAPHNumPL must be   *00639000
                         used to determine how far along this chain to *00640000
                         go.                                            00641000
RTAAPLNAME DS  CL8       Logical name                                   00642000
RTAAPLVERSION DS CL8     Version                                        00643000
RTAAPLSEQNUM DS F        Sequence number                                00644000
         DS    CL4       Reserved                                       00645000
RTAAPL_LEN EQU *-RTAAPL                                                 00646000
.L0018   ANOP                                                           00647000
         AIF   ('&RTLSXTL' EQ 'NO').L001B                               00648000
         AIF   ('&DSECT' EQ 'YES').L001C                                00649000
         AIF   ('&RTLSXTL' NE 'YES').L001B                              00650000
RTLSXTL  DS    0F        Extent-list format                             00651000
         AGO   .L001D                                                   00652000
.L001C   ANOP                                                           00653000
RTLSXTL  DSECT           Extent-list format                             00654000
.L001D   ANOP                                                           00655000
RTLSXTLNUMENTRIESPROVIDED DS F This should be initialized to           *00656000
                         RtlsXtlMaxNumEntries (16) prior to calling    *00657000
                         CSVRTLS REQUEST=LOAD.                          00658000
RTLSXTLNUMENTRIES DS F   The number of entries that follow.             00659000
RTLSXTLENTRIES DS CL128  Entries area. Entries are contigous. Each is  *00660000
                         mapped by RTLSXTLE                             00661000
RTLSXTLMAXNUMENTRIES EQU 16                                             00662000
RTLSXTL_LEN EQU *-RTLSXTL                                               00663000
.L001B   ANOP                                                           00664000
         AIF   ('&RTLSXTLE' EQ 'NO').L001E                              00665000
         AIF   ('&DSECT' EQ 'YES').L001F                                00666000
         AIF   ('&RTLSXTLE' NE 'YES').L001E                             00667000
RTLSXTLE DS    0F        Extent-list entry format                       00668000
         AGO   .L0020                                                   00669000
.L001F   ANOP                                                           00670000
RTLSXTLE DSECT           Extent-list entry format                       00671000
.L0020   ANOP                                                           00672000
RTLSXTLELOADPTADDR DS A  Segment load point address                     00673000
RTLSXTLELENGTH DS F      Segment length                                 00674000
RTLSXTLE_LEN EQU *-RTLSXTLE                                             00675000
.L001E   ANOP                                                           00676000
         AIF   ('&ZCBPRINT' EQ 'NO').P3                                 00677000
         AIF   ('&LIST' EQ 'YES').P4                                    00678000
.P3      ANOP                                                           00679000
         POP   PRINT                                                    00680000
.P4      ANOP                                                           00681000
.P_EXIT  ANOP                                                           00682000
         MEND                                                           00683000
**/ CSVRTAA_2:;                                                         00684000
* %CSVRTAA_INCLUDED = 'YES';                                            00685000
* %DCL ZCBPRINT CHAR EXT;                                               00686000
* %DEACTIVATE ZCBPRINT;                                                 00687000
* %DCL CSVRTAA_LIST CHAR EXT;                                           00688000
* %DEACTIVATE CSVRTAA_LIST;                                             00689000
* %IF CSVRTAA_LIST ^= 'NO' &                                            00690000
*    ZCBPRINT ^= 'NO' %THEN                                             00691000
*   %GOTO CSVRTAA_3;                                                    00692000
*   @LIST PUSH NOECHO;                                                  00693000
*   @LIST NOASSEMBLE NOECHO;                                            00694000
*   @LIST OFF C NOECHO;                                                 00695000
* %CSVRTAA_3:;                                                          00696000
*/* Start of PL/X Source                                             */ 00697000
*DCL 1 RTAAHDR TYPE,       /* Header section                     @L1A*/ 00698000
*     2 RTAAHNumPH FIXED(31),/* Number of RTAAPH entries which follow   00699000
*                                                                @L1A*/ 00700000
*     2 RTAAHNumLO FIXED(31),/* Number of RTAALO entries which follow   00701000
*                                                                @L1A*/ 00702000
*     2 RTAAHNumPHREM FIXED(31),/* Number of RTAAPH                     00703000
*                             entries which were not returned because   00704000
*                             of insufficient space              @L1A*/ 00705000
*     2 RTAAHNumLOREM FIXED(31),/* Number of RTAALO                     00706000
*                             entries which were not returned because   00707000
*                             of insufficient space              @L1A*/ 00708000
*     2 RTAAHTLEN FIXED(31),/* Total length of answer area needed to    00709000
*                             contain all the requested information.    00710000
*                             This includes the area for the records    00711000
*                             that were returned on this call.   @L1A*/ 00712000
*     2 RTAAHFIRSTPHADDR PTR(31), /* Address of first RTAAPH     @L1A*/ 00713000
*     2 RTAAHFIRSTLOADDR PTR(31), /* Address of first RTAALO     @L1A*/ 00714000
*     2 RTAAHMaxBelow FIXED(31),   /* Limitation (in bytes) of          00715000
*                               below-16M common for modules     @L1A*/ 00716000
*     2 RTAAHBelowUsed FIXED(31),   /* Number of bytes used of          00717000
*                               below-16M common for modules     @L1A*/ 00718000
*     2 RTAAHMaxAbove FIXED(31),   /* Limitation (in bytes) of          00719000
*                               above-16M common for modules. 0         00720000
*                               indicates that there is no limit @L1A*/ 00721000
*     2 RTAAHAboveUsed FIXED(31),   /* Number of bytes used of          00722000
*                               below-16M common for modules     @L1A*/ 00723000
*     2 RTAAHFlags BIT(8),          /* Flags                     @L1A*/ 00724000
*       3 RTAAHNoAbove16M BIT(1),   /* An attempt was made to get       00725000
*                storage above-16M. The system was unable to comply     00726000
*                and the storage was obtained below 16M.                00727000
*                No subsequent caching of modules will be               00728000
*                done.                                           @L1A*/ 00729000
*       3 RTAAHCacheBelowIsFull BIT(1),  /*                      @L1A*/ 00730000
*       3 RTAAHCacheAboveIsFull BIT(1),  /*                      @L1A*/ 00731000
*     2 * CHAR(3),                  /* Reserved                  @L1A*/ 00732000
*     2 RTAAHFullCacheLimit FIXED,    /* Limit of number of times       00733000
*                the RTLS cache could not meet the needs for the        00734000
*                module being loaded before the cache is actually       00735000
*                marked as being full.                           @L1A*/ 00736000
*     2 RTAAHFullCacheCount FIXED,       /* Number of times that        00737000
*                the RTLS cache limit could not meet the needs for the  00738000
*                module being loaded.                            @L1A*/ 00739000
*     2 * CHAR(0) BDY(WORD);   /* Word-align the ending          @L1A*/ 00740000
*    /* Return Code Information                                      */ 00741000
*                                                                       00742000
*    /* It is guaranteed that                                           00743000
*       no reason code will be reused (i.e., the same reason code       00744000
*       will not be used for more than one return code).            */  00745000
*                                                                       00746000
*    /* Also note carefully that bits 0-15 of the reason code           00747000
*       may contain component-diagnostic data and must not be           00748000
*       assumed to be 0.                                            */  00749000
*                                                                       00750000
*Dcl CsvrtlsRsnCodeMask Bit(32) Constant('0000FFFF'X); /* Use this      00751000
*               mask to isolate the non component-diagnostic            00752000
*               portion of the reason code.                      @L1A*/ 00753000
*/* CSVRTLS Return and Reason Code definitions                       */ 00754000
*DCL CSVRTLSRc_OK Bit(32) Constant('00000000'X) ; /*                    00755000
*                        Meaning: CSVRTLS request successful.           00756000
*                        Action: None required.                      */ 00757000
*DCL CSVRTLSRc_Warn Bit(32) Constant('00000004'X) ; /*                  00758000
*                        Meaning: Warning                               00759000
*                        Action: Refer to action provided with the      00760000
*                        reason code.                                */ 00761000
*DCL CsvrtlsRsnListNoMatches Bit(32) Constant('00000401'X) ; /*         00762000
*                        Meaning: For LIST request, no matching logical 00763000
*                        and/or physical libraries matches the request. 00764000
*                        Action: Make sure that you specified the       00765000
*                        proper library name.                        */ 00766000
*DCL CsvrtlsRsnAliasesExist Bit(32) Constant('00000402'X) ; /*          00767000
*                        Meaning: For DISCONNECT request, there are     00768000
*                        outstanding alias entries to modules loaded    00769000
*                        for this library. An ATTACH(X), LINK(X), or    00770000
*                        XCTL(X) was issued using the name of a module  00771000
*                        loaded by RTLS for this library.               00772000
*                        Action: Avoid using DISCONNECT when there are  00773000
*                        such alias entries. If you cancel the jobstep, 00774000
*                        the system will perform the cleanup and        00775000
*                        disconnect on your behalf.                  */ 00776000
*DCL CsvrtlsRsnNotAllDataReturned Bit(32) Constant('00000403'X) ; /*    00777000
*                        Meaning: For LIST request, not all data was    00778000
*                        returned because the answer area is not big    00779000
*                        enough. Answer area field RTAAHTLEN indicates  00780000
*                        how much space is currently required.          00781000
*                        Action: Allocate a larger area and request the 00782000
*                        function again.                             */ 00783000
*DCL CSVRTLSRc_InvParm Bit(32) Constant('00000008'X) ; /*               00784000
*                        Meaning: CSVRTLS request specifies invalid     00785000
*                        parameters.                                    00786000
*                        Action: Refer to action provided with the      00787000
*                        reason code.                                */ 00788000
*DCL CsvrtlsRsnBadParmlist Bit(32) Constant('00000801'X) ; /*           00789000
*                        Meaning: Unable to access parameter list.      00790000
*                        Action: Check for possible storage overlay. */ 00791000
*DCL CsvrtlsRsnNotAuthorized Bit(32) Constant('00000804'X) ; /*         00792000
*                        Meaning: For CONNECT or LOAD - not authorized. 00793000
*                        For CONNECT, the customer has requested that   00794000
*                        security checking be done. You do not have     00795000
*                        read access to RACF FACILITY class resource    00796000
*                        CSVRTLS.LIBRARY.library.version. For LOAD, the 00797000
*                        customer has restricted access to the program  00798000
*                        that you are attempting to access. You do not  00799000
*                        have access to that program.                   00800000
*                        Action: Request this function only when you    00801000
*                        have the proper authority. For LOAD, refer to  00802000
*                        the documenation for completion code 306       00803000
*                        reason code 30 in the system codes             00804000
*                        publication, and the documentation for message 00805000
*                        CSV205I in the system messages publication,    00806000
*                        for further information. While the completion  00807000
*                        code and message are not produced, the         00808000
*                        information pertaining to them does apply to   00809000
*                        this situation.                             */ 00810000
*DCL CsvrtlsRsnBadAnsareaALET Bit(32) Constant('00000806'X) ; /*        00811000
*                        Meaning: Bad answer area ALET.                 00812000
*                        Action: Make sure that the ALET associated     00813000
*                        with the answer area is valid. The access      00814000
*                        register might not have been set up correctly. 00815000
*                                                                    */ 00816000
*DCL CsvrtlsRsnBadAnsarea Bit(32) Constant('00000807'X) ; /*            00817000
*                        Meaning: Error accessing answer area.          00818000
*                        Action: Make sure that the provided answer     00819000
*                        area is valid.                              */ 00820000
*DCL CsvrtlsRsnBadAnslen Bit(32) Constant('00000808'X) ; /*             00821000
*                        Meaning: LIST - AnsLen is less than size of    00822000
*                        the header area.                               00823000
*                        Action: Provide a larger answer area (as       00824000
*                        indicated by the ANSLEN keyword).           */ 00825000
*DCL CsvrtlsRsnBadRequestType Bit(32) Constant('00000809'X) ; /*        00826000
*                        Meaning: Request type is not valid.            00827000
*                        Action: Check for possible storage overlay of  00828000
*                        the parameter list.                         */ 00829000
*DCL CsvrtlsRsnBadEstaex Bit(32) Constant('0000080A'X) ; /*             00830000
*                        Meaning: Unable to establish ESTAEX. "xxxx"    00831000
*                        contains ESTAE(X) return code.                 00832000
*                        Action: Refer to documentation for ESTAEX      00833000
*                        return code "xxxx".                         */ 00834000
*DCL CsvrtlsRsnReservedNot0 Bit(32) Constant('0000080B'X) ; /*          00835000
*                        Meaning: Reserved field not 0.                 00836000
*                        Action: Check for possible storage overlay of  00837000
*                        the parameter list.                         */ 00838000
*DCL CsvrtlsRsnBadOutxtlstALET Bit(32) Constant('0000080C'X) ; /*       00839000
*                        Meaning: Bad Outxtlst ALET.                    00840000
*                        Action: Make sure that the ALET of the         00841000
*                        OUTXTLST area is valid. The access register    00842000
*                        might not have been set up correctly.       */ 00843000
*DCL CsvrtlsRsnBadParmlistALET Bit(32) Constant('0000080D'X) ; /*       00844000
*                        Meaning: Bad parmlist ALET.                    00845000
*                        Action: Make sure that the ALET of the         00846000
*                        parameter list is valid. The access register   00847000
*                        might not have been set up correctly.       */ 00848000
*DCL CsvrtlsRsnBadVersion Bit(32) Constant('0000080E'X) ; /*            00849000
*                        Meaning: Bad version number.                   00850000
*                        Action: Check for possible storage overlay of  00851000
*                        the parameter list.                         */ 00852000
*DCL CsvrtlsRsnLibraryNotFound Bit(32) Constant('00000810'X) ; /*       00853000
*                        Meaning: For CONNECT or LIST request, the      00854000
*                        requested library is not defined to RTLS.      00855000
*                        Action: Make sure that you specified the       00856000
*                        correct library name.                       */ 00857000
*DCL CsvrtlsRsnBadListType Bit(32) Constant('00000811'X) ; /*           00858000
*                        Meaning: For LIST, the ListType value is       00859000
*                        incorrect.                                     00860000
*                        Action: Check for possible storage overlay of  00861000
*                        the parameter list.                         */ 00862000
*DCL CsvrtlsRsnBadContoken Bit(32) Constant('0000082C'X) ; /*           00863000
*                        Meaning: For LOAD, DELETE, or DISCONNECT the   00864000
*                        input contoken does not represent a valid      00865000
*                        connection.                                    00866000
*                        Action: Make sure that you specified the       00867000
*                        connect token that was returned by the CONNECT 00868000
*                        request.                                    */ 00869000
*DCL CsvrtlsRsnModuleNotLoaded Bit(32) Constant('0000082D'X) ; /*       00870000
*                        Meaning: For LOAD, the module could not be     00871000
*                        loaded. A valid copy of the module was not     00872000
*                        located within the logical library represented 00873000
*                        by the connect token. If you are authorized,   00874000
*                        the only copy might have been within an        00875000
*                        unauthorized library. There might not have     00876000
*                        been enough storage available to satisfy the   00877000
*                        request to load the module.                    00878000
*                        Action: Make sure that you specified the       00879000
*                        correct connect token and correct module name. 00880000
*                        If you are authorized, make sure that the      00881000
*                        library containing the module is authorized.   00882000
*                        When the field designated by the OUTEPA        00883000
*                        parameter is non-zero, it contains additional  00884000
*                        diagnostic information. That information is in 00885000
*                        the format 000cccrr where ccc represents a     00886000
*                        system completion code, and rr the reason code 00887000
*                        associated with that completion code. See the  00888000
*                        system codes publication, for further          00889000
*                        information.                                */ 00890000
*DCL CsvrtlsRsnModaddrNotValid Bit(32) Constant('0000082E'X) ; /*       00891000
*                        Meaning: For DELETE, the provided address does 00892000
*                        not represent a module previously loaded by    00893000
*                        the LOAD request.                              00894000
*                        Action: Make sure that you specified the       00895000
*                        correct connect token and correct module       00896000
*                        address.                                    */ 00897000
*DCL CsvrtlsRsnBadTCBADDR Bit(32) Constant('0000082F'X) ; /*            00898000
*                        Meaning: The provided TCBADDR parameter does   00899000
*                        not specify a task that either is the current  00900000
*                        task or an ancestor task. The oldest task      00901000
*                        allowed is the connecting task. Alternately,   00902000
*                        the caller was not authorized.                 00903000
*                        Action: Make sure that you specified the       00904000
*                        correct TCBADDR and that you are authorized.   00905000
*                                                                    */ 00906000
*DCL CsvrtlsRsnBadTask Bit(32) Constant('00000830'X) ; /*               00907000
*                        Meaning: The task issuing a LOAD or DELETE     00908000
*                        request is neither the connecting task nor a   00909000
*                        subtask of that task. The task issuing a       00910000
*                        DISCONNECT request is not the connecting task. 00911000
*                        Action: Make sure that you use the LOAD,       00912000
*                        DELETE, and DISCONNECT requests only from a    00913000
*                        proper task.                                */ 00914000
*DCL CsvrtlsRsnBadOutxtlst Bit(32) Constant('00000831'X) ; /*           00915000
*                        Meaning: Unable to access the OutXtlst area.   00916000
*                        Action: Check that you provided a valid area.  00917000
*                                                                    */ 00918000
*DCL CsvrtlsRsnBadOutxtlstContents Bit(32) Constant('00000832'X) ; /*   00919000
*                        Meaning: The RtlsXtlNumEntriesProvided field   00920000
*                        had an incorrect value.                        00921000
*                        Action: Fill in the RtlsXtlNumEntriesProvided  00922000
*                        area using equate symbol RtlsXtlMaxNumEntries  00923000
*                        prior to invoking the macro.                */ 00924000
*DCL CsvrtlsRc_Env Bit(32) Constant('0000000C'X) ; /*                   00925000
*                        Meaning: Environmental error                   00926000
*                        Action: Refer to action provided with the      00927000
*                        reason code.                                */ 00928000
*DCL CsvrtlsRsnNoStorage Bit(32) Constant('00000C01'X) ; /*             00929000
*                        Meaning: No storage is available to complete   00930000
*                        the request.                                   00931000
*                        Action: Contact your system programmer. There  00932000
*                        might be a common storage shortage.         */ 00933000
*DCL CsvrtlsRsnTooManyConnections Bit(32) Constant('00000C02'X) ; /*    00934000
*                        Meaning: The limit of 32 connections from an   00935000
*                        address space by unauthorized callers been     00936000
*                        reached.                                       00937000
*                        Action: Restructure your program so that it    00938000
*                        requests fewer connections.                 */ 00939000
*DCL CsvrtlsRsnLoadDeleteInProcess Bit(32) Constant('00000C03'X) ; /*   00940000
*                        Meaning: For the disconnect request, at least  00941000
*                        one load or delete request is still in         00942000
*                        process.                                       00943000
*                        Action: Avoid requesting a disconnect when     00944000
*                        there are loads or delete requests still being 00945000
*                        done. If the load or delete is being done from 00946000
*                        a subtask, your program could wait for that    00947000
*                        subtask to complete before issuing the         00948000
*                        disconnect request.                         */ 00949000
*DCL CsvrtlsRsnTaskInRTLS Bit(32) Constant('00000C04'X) ; /*            00950000
*                        Meaning: The issuing task is currently         00951000
*                        processing an RTLS request. Another request    00952000
*                        during this time is not allowed.               00953000
*                        Action: Avoid issuing an RTLS request from a   00954000
*                        program running as an interrupt request block  00955000
*                        (IRB) when the interrupted program is          00956000
*                        processing an RTLS request. Bit STCBINRT in    00957000
*                        the STCB data area will be on if the           00958000
*                        interrupted program is in this state.       */ 00959000
*DCL CsvrtlsRsnNotAvailable Bit(32) Constant('00000CFF'X) ; /*          00960000
*                        Meaning: CSVRTLS has been withdrawn as of z/OS 00961000
*                        1.12.                                          00962000
*                        Action: Change your program not to use         00963000
*                        CSVRTLS.                                    */ 00964000
*DCL CsvrtlsRC_CompError Bit(32) Constant('00000010'X) ; /*             00965000
*                        Meaning: Unexpected failure.                   00966000
*                        Action: Refer to action provided with the      00967000
*                        reason code.                                */ 00968000
*DCL CsvrtlsRsnCompError Bit(32) Constant('00001001'X) ; /*             00969000
*                        Meaning: Unexpected failure. The state of the  00970000
*                        request is unpredictable.                      00971000
*                        Action: Contact your system programmer.     */ 00972000
*/* End of CSVRTLS Return and Reason Code definitions                */ 00973000
*                                                                       00974000
*DCL 1 RTAAPH TYPE,            /* RTAAPH Record data format      @L1A*/ 00975000
*     2 RTAAPHNEXTADDR PTR(31), /* Address of next RTAAPH. RTAAHNumPH   00976000
*          must be used to determine how far along this chain to go.    00977000
*                                                                @L1A*/ 00978000
*     2 RTAAPHFirstDSADDR PTR(31), /* Address of first RTAADS for this  00979000
*                                   RTAAPH                       @L1A*/ 00980000
*     2 RTAAPHFirstMOADDR PTR(31), /* Address of first RTAAMO for this  00981000
*                                   RTAAPH                       @L1A*/ 00982000
*     2 RTAAPHFirstPLADDR PTR(31), /* Address of first RTAAPL for this  00983000
*                                   RTAAPH                       @L1A*/ 00984000
*     2 RTAAPHNAME CHAR(8),   /* Name of physical data set       @L1A*/ 00985000
*     2 RTAAPHSeqNum FIXED(31),  /* Sequence number              @L1A*/ 00986000
*     2 RTAAPHDCBADDR PTR(31), /* This is the address of the DCB, in    00987000
*                                common storage, associated with the    00988000
*                                physical library.               @L2A*/ 00989000
*       3 RTAAPHDCB@ PTR(31), /* This is the address of the DCB, in     00990000
*                                common storage, associated with the    00991000
*                                physical library.               @L2A*/ 00992000
*     2 RTAAPHNumDS FIXED(31), /* Number of RTAADS entries associated   00993000
*                               with this physical data set      @L1A*/ 00994000
*     2 RTAAPHNumMO FIXED(31), /* Number of RTAAMO entries associated   00995000
*                               with this physical data set      @L1A*/ 00996000
*     2 RTAAPHNumPL FIXED(31), /* Number of RTAAPL entries associated   00997000
*                               with this physical data set      @L1A*/ 00998000
*     2 RTAAPHFlags BIT(8),   /* Flags                           @L1A*/ 00999000
*       3 RTAAPHDeletePending BIT(1),       /*                   @L1A*/ 01000000
*       3 RTAAPHCacheBelowIsFull BIT(1), /*                      @L1A*/ 01001000
*       3 RTAAPHCacheAboveIsFull BIT(1), /*                      @L1A*/ 01002000
*     2 * CHAR(3),            /* Reserved                        @L1A*/ 01003000
*     2 RTAAPHMaxBelow FIXED(31),  /* Limitation (in bytes) of          01004000
*                               below-16M common for modules     @L1A*/ 01005000
*     2 RTAAPHBelowUsed FIXED(31),  /* Number of bytes used of          01006000
*                               below-16M common for modules     @L1A*/ 01007000
*     2 RTAAPHMaxAbove FIXED(31),  /* Limitation (in bytes) of          01008000
*                               above-16M common for modules. 0         01009000
*                               indicates that there is no limit @L1A*/ 01010000
*     2 RTAAPHAboveUsed FIXED(31),  /* Number of bytes used of          01011000
*                               below-16M common for modules     @L1A*/ 01012000
*     2 RTAAPHFullCacheLimit FIXED,       /* Limit of number of times   01013000
*                the physical library cache limit could not meet the    01014000
*                needs for the module being loaded, before the cache is 01015000
*                actually marked as being full.                  @L1A*/ 01016000
*     2 RTAAPHFullCacheCount FIXED,      /* Number of times that        01017000
*                the physical library cache limit could not meet the    01018000
*                needs for the module being loaded.              @L1A*/ 01019000
*     2 * CHAR(0) Bdy(Word);  /* Word-align the ending           @L1A*/ 01020000
*                                                                       01021000
*DCL 1 RTAADS TYPE,                  /* RTAADS Record data format       01022000
*                                                                @L1A*/ 01023000
*     2 RTAADSNEXTADDR PTR(31), /* Address of next RTAADS. RTAAPHNumDS  01024000
*          must be used to determine how far along this chain to go.    01025000
*                                                                @L1A*/ 01026000
*     2 * CHAR(2),            /* UNUSED                          @L1A*/ 01027000
*     2 RTAADSVOLSER CHAR(6), /* Volume ID. Represents                  01028000
*                                status as of last allocation    @L1A*/ 01029000
*     2 RTAADSNAME CHAR(44),  /* Data set name.                  @L1A*/ 01030000
*     2 * CHAR(0) Bdy(Word);  /* Word-align the ending           @L1A*/ 01031000
*                                                                       01032000
*DCL 1 RTAAMO TYPE,                  /* RTAAMO Record data format       01033000
*                                                                @L1A*/ 01034000
*     2 RTAAMONEXTADDR PTR(31), /* Address of next RTAAMO. RTAAPHNumMO  01035000
*          must be used to determine how far along this chain to go.    01036000
*                                                                @L1A*/ 01037000
*     2 RTAAMOFLAGS BIT(8),   /* Flags                           @L1A*/ 01038000
*       3 RTAAMOPreloadRequested BIT(1),  /*                     @L1A*/ 01039000
*       3 RTAAMOPreloadSuccessful BIT(1),  /*                    @L1A*/ 01040000
*     2 * CHAR(3),            /* UNUSED                          @L1A*/ 01041000
*     2 RTAAMOEPADDR PTR(31), /* Entry-point address             @L1A*/ 01042000
*     2 RTAAMOLoadPtAddr1 PTR(31),  /* Load point                @L1A*/ 01043000
*     2 RTAAMOLENGTH1 FIXED(31),  /* Length                      @L1A*/ 01044000
*     2 RTAAMOLoadPtAddr2 PTR(31),  /* Load point 2 (may be 0)   @L1A*/ 01045000
*     2 RTAAMOLENGTH2 FIXED(31),  /* Length (may be 0)           @L1A*/ 01046000
*     2 RTAAMONAME CHAR(8),   /* Module name                     @L1A*/ 01047000
*     2 * CHAR(0) Bdy(Word);  /* Word-align the ending           @L1A*/ 01048000
*                                                                       01049000
*DCL 1 RTAALO TYPE,            /* RTAALO Record data format      @L1A*/ 01050000
*     2 RTAALONEXTADDR PTR(31), /* Address of next RTAALO. RTAAHNumLO   01051000
*          must be used to determine how far along this chain to go.    01052000
*                                                                @L1A*/ 01053000
*     2 RTAALOFirstLPHADDR PTR(31), /* Address of first RTAALPH for     01054000
*                                   this RTAALO                  @L1A*/ 01055000
*     2 RTAALOFirstMOADDR PTR(31), /* Address of first RTAAMO for       01056000
*                                   this RTAALO                  @L1A*/ 01057000
*     2 RTAALOFirstLUADDR PTR(31), /* Address of first RTAALU for this  01058000
*                                   RTAALO                       @L1A*/ 01059000
*     2 RTAALONAME CHAR(8),   /* Name of logical data set        @L1A*/ 01060000
*     2 RTAALOVERSION CHAR(8),  /* Version name                  @L1A*/ 01061000
*     2 RtaaLoSeqnum FIXED(31),  /* Sequence number              @L1A*/ 01062000
*     2 * CHAR(4),            /* UNUSED                          @L1A*/ 01063000
*     2 RTAALONumLPH FIXED(31),/* Number of RTAALPH entries associated  01064000
*                               with this logical data set       @L1A*/ 01065000
*     2 RTAALONumMO FIXED(31), /* Number of RTAAMO entries associated   01066000
*                               with this logical data set       @L1A*/ 01067000
*     2 RTAALONumLU FIXED(31), /* Number of RTAALU entries associated   01068000
*                               with this logical data set       @L1A*/ 01069000
*     2 RTAALOFlags BIT(8),   /* Flags                           @L1A*/ 01070000
*       3 RTAALODeletePending BIT(1),       /*                   @L1A*/ 01071000
*       3 RTAALODefault BIT(1),   /*                             @L1A*/ 01072000
*     2 RTAALOSecCheck FIXED(8),  /* See equates beginning with         01073000
*                                RtaaloSecCheck for values       @L1A*/ 01074000
*     2 RTAALOLibraryID Fixed(16), /* This is the internal ID that      01075000
*                                identifies the logical library  @L2A*/ 01076000
*     2 * CHAR(8),            /* Reserved                        @L1A*/ 01077000
*     2 RTAALONumRequests FIXED,         /* Number of times that        01078000
*                the logical library was used successfully to           01079000
*                load a module. This is the total of the following      01080000
*                two fields plus those cases where neither the          01081000
*                cache nor LleJPQ was used                       @L1A*/ 01082000
*     2 RTAALONumRequestsFromCache FIXED, /* Number of times that       01083000
*                the logical library cache was used to load a module.   01084000
*                                                                @L1A*/ 01085000
*     2 RTAALONumRequestsFromCSV FIXED,  /* Number of times that        01086000
*                the contents supervisor blocks were used to locate     01087000
*                a previously fetched copy of the module (hence         01088000
*                avoiding a new fetch)                           @L1A*/ 01089000
*     2 RTAALONumRequestsFromLLA FIXED,  /* Number of times that        01090000
*                the LLA located the copy to use                 @L1A*/ 01091000
*     2 * CHAR(0) Bdy(Word);  /* Word-align the ending           @L1A*/ 01092000
*DCL RtaaloSecCheckYes Constant(1);                    /*        @L1A*/ 01093000
*DCL RtaaloSecCheckNo Constant(2);                     /*        @L1A*/ 01094000
*                                                                       01095000
*DCL 1 RTAALPH TYPE,                 /* RTAALPH Record data format      01096000
*                                                                @L1A*/ 01097000
*     2 RTAALPHNEXTADDR PTR(31), /*                                     01098000
*                            Address of next RTAALPH. RTAALONumLPH      01099000
*          must be used to determine how far along this chain to go.    01100000
*                                                                @L1A*/ 01101000
*     2 RTAALPHNAME CHAR(8),  /* Physical data set name          @L1A*/ 01102000
*     2 RtAALPHSEQNUM FIXED(31), /* Sequence number              @L1A*/ 01103000
*     2 * CHAR(4),              /* Reserved                      @L1A*/ 01104000
*     2 * CHAR(0) Bdy(Word);  /* Word-align the ending           @L1A*/ 01105000
*                                                                       01106000
*DCL 1 RTAALU TYPE,                 /* RTAALU Record data format        01107000
*                                                                @L1A*/ 01108000
*     2 RTAALUNEXTADDR PTR(31), /* Address of next RTAALU. RTAALONumLU  01109000
*          must be used to determine how far along this chain to go.    01110000
*                                                                @L1A*/ 01111000
*     2 RTAALUASID FIXED(15), /* ASID                            @L1A*/ 01112000
*     2 * CHAR(2),            /* Unused                          @L1A*/ 01113000
*     2 RTAALUJOBNAME CHAR(8),  /* Jobname                       @L1A*/ 01114000
*     2 * CHAR(0) Bdy(Word);  /* Word-align the ending           @L1A*/ 01115000
*                                                                       01116000
*                                                                       01117000
*DCL 1 RTAAPL TYPE,                 /* RTAAPL Record data format        01118000
*                                                                @L1A*/ 01119000
*     2 RTAAPLNEXTADDR PTR(31), /* Address of next RTAAPL. RTAAPHNumPL  01120000
*          must be used to determine how far along this chain to go.    01121000
*                                                                @L1A*/ 01122000
*     2 RTAAPLNAME CHAR(8),     /* Logical name                  @L1A*/ 01123000
*     2 RtAAPLVERSION CHAR(8),  /* Version                       @L1A*/ 01124000
*     2 RtAAPLSEQNUM FIXED(31), /* Sequence number               @L1A*/ 01125000
*     2 * CHAR(4),              /* Reserved                      @L1A*/ 01126000
*     2 * CHAR(0) Bdy(Word);  /* Word-align the ending           @L1A*/ 01127000
*                                                                       01128000
*DCL 1 RTLSXTL TYPE CHAR(136) BDY(WORD), /* Extent-list format          01129000
*                                                                @L1A*/ 01130000
*     2 RtlsXtlNumEntriesProvided FIXED(31),  /* This should be         01131000
*          initialized to RtlsXtlMaxNumEntries (16) prior               01132000
*          to calling CSVRTLS REQUEST=LOAD.                             01133000
*                                                                @L1A*/ 01134000
*     2 RtlsXtlNumEntries FIXED(31),     /* The number of entries that  01135000
*          follow.                                               @L1A*/ 01136000
*     2 RtlsXtlEntries CHAR(128),  /* Entries area. Entries are         01137000
*          contigous. Each is mapped by RTLSXTLE                 @L1A*/ 01138000
*     2 * CHAR(0) Bdy(Word);  /* Word-align the ending           @L1A*/ 01139000
*                                                                       01140000
*DCL RtlsXtlMaxNumEntries Constant(16);     /*                   @L1A*/ 01141000
*DCL 1 RTLSXTLE TYPE,               /* Extent-list entry format         01142000
*                                                                @L1A*/ 01143000
*     2 RtlsXtleLoadPtAddr PTR(31), /* Segment load point address       01144000
*                                                                @L1A*/ 01145000
*     2 RtlsXtleLength FIXED(31),   /* Segment length                   01146000
*                                                                @L1A*/ 01147000
*     2 * CHAR(0) Bdy(Word);  /* Word-align the ending           @L1A*/ 01148000
*                                                                       01149000
*DCL RtlsContoken Char(8) TYPE;             /*                   @L1A*/ 01150000
*                                                                       01151000
* @LOGIC;                                                               01152000
* #PRAGMA TOOL=CBGEN.                                                   01153000
* #USEORG.                                                              01154000
* #EPRAGMA.                                                             01155000
* @ENDLOGIC;                                                            01156000
*/* End of PL/X Source                                               */ 01157000
* %IF CSVRTAA_LIST ^= 'NO' &                                            01158000
*    ZCBPRINT ^= 'NO' %THEN                                             01159000
*   %GOTO CSVRTAA_4;                                                    01160000
*   @LIST POP NOECHO;                                                   01161000
* %CSVRTAA_4:;                                                          01162000
* %END;                                                                 01163000
