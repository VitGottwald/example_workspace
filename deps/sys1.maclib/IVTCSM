*%IVTCSM: MACRO KEYS(REQUEST,BUFLIST,BUFLST64,BUFNUM,BUFTYPE,CSMUSER,   00000100
*                 GAP,ERRBFLST,OWNERID,COMPID,COMPUSER,TASKID,THREAD,   00000200
*                 UTILRTN,SKIPBUF,PAD,PADCHAR,SRCERRL,SRCGAP,SRCLIST,   00000300
*                 SRCLST64,SRCNUM,TARGERRL,TARGGAP,TARGLIST,TARLST64,   00000400
*                 TARGNUM,BUFSIZE,BUFSOURC,BACK,DS_INFO,EXPBUF,         00000500
*                 INITBUF,MINFREE,RETPTOKN,STATAREA,POOLTOKN,WAIT,      00000600
*                 CLEAR,FREETO,FREERTN,RETCODE,RSNCODE,PLISTVER,MF);    00000700
*/**** START OF SPECIFICATIONS **************************************** 00000800
*                                                                     * 00000900
*                                                                     * 00001000
*01* MACRO NAME:  IVTCSM                                -13/05/17-<2> * 00001100
*                                                                     * 00001200
*                                                                     * 00001300
*01* DESCRIPTIVE NAME:  Communications Storage Manager                * 00001400
*                                                                     * 00001500
*01* PROPRIETARY STATEMENT:                                           * 00001600
*                                                                     * 00001700
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00001800
*     &maczcpyn(&*1) COPYRIGHT IBM CORP. &maczcpyd(&*1)               * 00001900
*                                                                     * 00002000
* STATUS=                                                             * 00002100
*                                                                     * 00002200
*                                                                     * 00002300
*01* FUNCTION:                                                        * 00002400
*                                                                     * 00002500
*      The IVTCSM macro provides the interface to the Communications  * 00002600
*      Storage Manager.  CSM services allow applications and products * 00002700
*      such as VTAM to share common buffers so that movement of data  * 00002800
*      between buffers is avoided.                                    * 00002900
*                                                                     * 00003000
*                                                                     * 00003100
*      1.  Create a storage pool of buffers residing in ECSA, High    * 00003200
*          Virtual Common storage (HVCOMM) or in a Data Space.        * 00003300
*                                                                     * 00003400
*      2.  Get buffers of a pool.                                     * 00003500
*                                                                     * 00003600
*      3.  Free requests for buffers of a pool.                       * 00003700
*                                                                     * 00003800
*      4.  Transfer ownership of buffers of a pool.                   * 00003900
*                                                                     * 00004000
*      5.  Copy data between buffers of any type.                     * 00004100
*                                                                     * 00004200
*      6.  Create a logical image of a buffer.                        * 00004300
*                                                                     * 00004400
*      7.  Provide the address of CSM Resource statistics             * 00004500
*          information.                                               * 00004600
*                                                                     * 00004700
*      8.  Provide the address of information required to dump CSM    * 00004800
*          data space.                                                * 00004900
*                                                                     * 00005000
*                                                                     * 00005100
*                                                                     * 00005200
*01* EXTERNAL CLASSIFICATION:  GUPI                                   * 00005300
*                                                                     * 00005400
*01* END OF EXTERNAL CLASSIFICATION:                                  * 00005500
*                                                                     * 00005600
*01* ENVIRONMENT:                                                     * 00005700
*                                                                     * 00005800
*                                                                     * 00005900
*      Dispatchable unit mode: Task or SRB mode.                      * 00006000
*                                                                     * 00006100
*                        Exception: CREATE_POOL and DELETE_POOL       * 00006200
*                        requests must be issued in Task Mode.        * 00006300
*                                                                     * 00006400
*      Minimum authorization: Supervisor state.  Any PSW key.         * 00006500
*                                                                     * 00006600
*      AMODE:            31-bit. or                                   * 00006700
*                                                                     * 00006800
*      AMODE:            64-bit.                                      * 00006900
*                                                                     * 00007000
*      ASC mode:         Primary.                                     * 00007100
*                                                                     * 00007200
*      Interrupt status: Enabled for I/O and external interrupts.     * 00007300
*                                                                     * 00007400
*      Locks:            No locks held.                               * 00007500
*                                                                     * 00007600
*      Cross Memory Mode: Any PASN, any HASN, any SASN.               * 00007700
*                                                                     * 00007800
*                        CREATE_POOL and DELETE_POOL requests are     * 00007900
*                        PASN=HASN=SASN only.                         * 00008000
*                                                                     * 00008100
*      Control parameters: Control parameters must be in the primary  * 00008200
*                        address space.                               * 00008300
*                                                                     * 00008400
*                                                                     * 00008500
*                                                                     * 00008600
*01* PROGRAMMING REQUIREMENTS:                                        * 00008700
*                                                                     * 00008800
*    The user must provide a recovery environment if one is necessary * 00008900
*    during the invocation of the IVTCSM Service, as the service does * 00009000
*    not provide a recovery environment during all its functions.     * 00009100
*                                                                     * 00009200
*    The user must include the assembler statement SYSSTATE           * 00009300
*    AMODE64=YES when running in 64-bit addressing mode.              * 00009400
*                                                                     * 00009500
*    The service does provide for buffer reclamation at               * 00009600
*    end-of-memory, end-of-Job-Step-Task, if not an MVS started task, * 00009700
*    and, optionally, at abnormal end-of-task.                        * 00009800
*                                                                     * 00009900
*01* RESTRICTIONS:                                                    * 00010000
*                                                                     * 00010100
*                                                                     * 00010200
*    o   Do not use MVS page-fix services directly for buffers        * 00010300
*        provided by this service. Establish the BUFTYPE attribute of * 00010400
*        these buffers using CSM service requests.                    * 00010500
*                                                                     * 00010600
*    o   Do not issue ALESERV delete for an ALET returned from CSM.   * 00010700
*                                                                     * 00010800
*                                                                     * 00010900
*                                                                     * 00011000
*01* INPUT REGISTER INFORMATION:                                      * 00011100
*                                                                     * 00011200
*    Before issuing this macro, the caller must ensure that the       * 00011300
*    following general purpose register contain the specified         * 00011400
*    information:                                                     * 00011500
*                                                                     * 00011600
*                                                                     * 00011700
*    REGISTER  CONTENTS                                               * 00011800
*                                                                     * 00011900
*    13        address of a 72-byte standard save area in the primary * 00012000
*              address space                                          * 00012100
*                                                                     * 00012200
*                                                                     * 00012300
*                                                                     * 00012400
*01* OUTPUT REGISTER INFORMATION:                                     * 00012500
*                                                                     * 00012600
*    When control returns to the caller, the general purpose          * 00012700
*    registers contain:                                               * 00012800
*                                                                     * 00012900
*                                                                     * 00013000
*    REGISTER  CONTENTS                                               * 00013100
*                                                                     * 00013200
*    0         error reason code from the requested function          * 00013300
*                                                                     * 00013400
*    1         used as work register by the system                    * 00013500
*                                                                     * 00013600
*    2-13      unchanged                                              * 00013700
*                                                                     * 00013800
*    14        used as work register by the system                    * 00013900
*                                                                     * 00014000
*    15        return code from requested function                    * 00014100
*                                                                     * 00014200
*                                                                     * 00014300
*                                                                     * 00014400
*01* PERFORMANCE IMPLICATIONS:                                        * 00014500
*                                                                     * 00014600
*01* SYNTAX:                                                          * 00014700
*                                                                     * 00014800
*Ýxlabel¨  IVTCSM  Ð  REQUEST=ASSIGN_BUFFER                           * 00014900
*                  !   Ð ,BUFLIST=xbuflist                            * 00015000
*                  !   ¿ ,BUFLST64=xbuflst64                          * 00015100
*                  !     ,BUFNUM=xbufnum                              * 00015200
*                  !    Ý,BUFTYPE=»SAME!PAGEELIG!FIXEDº¨              * 00015300
*                  !    Ý,CSMUSER=»NO!YESº¨                           * 00015400
*                  !    Ý,GAP=»xgap!0º¨                               * 00015500
*                  !    Ý,ERRBFLST=xerrbflst¨                         * 00015600
*                  !    Ý,OWNERID=»xownerid!0º¨                       * 00015700
*                  !    Ý,COMPID=»xcompid!0º¨                         * 00015800
*                  !    Ý,COMPUSER=»xcompuser!0º¨                     * 00015900
*                  !    Ý,TASKID=»xtaskid!0º¨                         * 00016000
*                  !    Ý,THREAD=»xthread!0º¨                         * 00016100
*                  !    Ý,UTILRTN=»xutilrtn!0º¨                       * 00016200
*                  Ô ,REQUEST=CHANGE_OWNER                            * 00016300
*                  !   Ð ,BUFLIST=xbuflist                            * 00016400
*                  !   ¿ ,BUFLST64=xbuflst64                          * 00016500
*                  !     ,BUFNUM=xbufnum                              * 00016600
*                  !    Ý,CSMUSER=»NO!YESº¨                           * 00016700
*                  !    Ý,ERRBFLST=xerrbflst¨                         * 00016800
*                  !    Ý,GAP=»xgap!0º¨                               * 00016900
*                  !    Ý,OWNERID=»xownerid!0º¨                       * 00017000
*                  !    Ý,COMPID=»xcompid!0º¨                         * 00017100
*                  !    Ý,COMPUSER=»xcompuser!0º¨                     * 00017200
*                  !    Ý,SKIPBUF=»NO!YESº¨                           * 00017300
*                  !    Ý,TASKID=»xtaskid!0º¨                         * 00017400
*                  !    Ý,THREAD=»xthread!0º¨                         * 00017500
*                  !    Ý,UTILRTN=»xutilrtn!0º¨                       * 00017600
*                  Ô ,REQUEST=COPY_DATA                               * 00017700
*                  !   ÐÝ,PAD=NO¨                                     * 00017800
*                  !   ¿Ý,PAD=YES                                     * 00017900
*                  !         ,PADCHAR=xpadchar¨                       * 00018000
*                  !    Ý,SRCERRL=xsrcerrl¨                           * 00018100
*                  !    Ý,SRCGAP=»xsrcgap!0º¨                         * 00018200
*                  !   Ð ,SRCLIST=xsrclist                            * 00018300
*                  !   ¿ ,SRCLST64=xsrclst64                          * 00018400
*                  !     ,SRCNUM=xsrcnum                              * 00018500
*                  !    Ý,TARGERRL=xtargerrl¨                         * 00018600
*                  !    Ý,TARGGAP=»xtarggap!0º¨                       * 00018700
*                  !   Ð ,TARGLIST=xtarglist                          * 00018800
*                  !   ¿ ,TARLST64=xtarlst64                          * 00018900
*                  !     ,TARGNUM=xtargnum                            * 00019000
*                  !    Ý,THREAD=»xthread!0º¨                         * 00019100
*                  !    Ý,UTILRTN=»xutilrtn!0º¨                       * 00019200
*                  Ô ,REQUEST=CREATE_POOL                             * 00019300
*                  !     ,BUFSIZE=xbufsize                            * 00019400
*                  !   Ð ,BUFSOURC=DSPACE                             * 00019500
*                  !   !    Ý,BACK=»31!64º¨                           * 00019600
*                  !   Ô ,BUFSOURC=ECSA                               * 00019700
*                  !   ¿ ,BUFSOURC=HVCOMM                             * 00019800
*                  !    Ý,DS_INFO=xds_info¨                           * 00019900
*                  !     ,EXPBUF=xexpbuf                              * 00020000
*                  !     ,INITBUF=xinitbuf                            * 00020100
*                  !     ,MINFREE=xminfree                            * 00020200
*                  !    Ý,RETPTOKN=xretptokn¨                         * 00020300
*                  !    Ý,STATAREA=xstatarea¨                         * 00020400
*                  Ô ,REQUEST=DELETE_POOL                             * 00020500
*                  !     ,POOLTOKN=xpooltokn                          * 00020600
*                  Ô ,REQUEST=DUMP_INFO                               * 00020700
*                  !    Ý,DS_INFO=xds_info¨                           * 00020800
*                  Ô ,REQUEST=FIX_BUFFER                              * 00020900
*                  !   Ð ,BUFLIST=xbuflist                            * 00021000
*                  !   ¿ ,BUFLST64=xbuflst64                          * 00021100
*                  !     ,BUFNUM=xbufnum                              * 00021200
*                  !    Ý,ERRBFLST=xerrbflst¨                         * 00021300
*                  !    Ý,GAP=»xgap!0º¨                               * 00021400
*                  !    Ý,COMPID=»xcompid!0º¨                         * 00021500
*                  !    Ý,COMPUSER=»xcompuser!0º¨                     * 00021600
*                  !    Ý,THREAD=»xthread!0º¨                         * 00021700
*                  !    Ý,UTILRTN=»xutilrtn!0º¨                       * 00021800
*                  !    Ý,WAIT=»NO!YESº¨                              * 00021900
*                  Ô ,REQUEST=FREE_BUFFER                             * 00022000
*                  !   Ð ,BUFLIST=xbuflist                            * 00022100
*                  !   ¿ ,BUFLST64=xbuflst64                          * 00022200
*                  !     ,BUFNUM=xbufnum                              * 00022300
*                  !    Ý,CLEAR=»NO!YESº¨                             * 00022400
*                  !    Ý,ERRBFLST=xerrbflst¨                         * 00022500
*                  !    Ý,FREETO=»USER!CSMº¨                          * 00022600
*                  !    Ý,GAP=»xgap!0º¨                               * 00022700
*                  !    Ý,SKIPBUF=»NO!YESº¨                           * 00022800
*                  !    Ý,COMPID=»xcompid!0º¨                         * 00022900
*                  !    Ý,COMPUSER=»xcompuser!0º¨                     * 00023000
*                  !    Ý,THREAD=»xthread!0º¨                         * 00023100
*                  !    Ý,UTILRTN=»xutilrtn!0º¨                       * 00023200
*                  Ô ,REQUEST=GET_BUFFER                              * 00023300
*                  !   Ð ,BUFLIST=xbuflist                            * 00023400
*                  !   ¿ ,BUFLST64=xbuflst64                          * 00023500
*                  !     ,BUFNUM=xbufnum                              * 00023600
*                  !     ,BUFTYPE=»PAGEELIG!PAGEABLE!                 * 00023700
*                  !               FIXEDº                             * 00023800
*                  !    Ý,CLEAR=»NO!YESº¨                             * 00023900
*                  !    Ý,CSMUSER=»NO!YESº¨                           * 00024000
*                  !    Ý,ERRBFLST=xerrbflst¨                         * 00024100
*                  !    Ý,FREERTN=»xfreertn!CSMº¨                     * 00024200
*                  !    Ý,GAP=»xgap!0º¨                               * 00024300
*                  !    Ý,OWNERID=»xownerid!0º¨                       * 00024400
*                  !    Ý,COMPID=»xcompid!0º¨                         * 00024500
*                  !    Ý,COMPUSER=»xcompuser!0º¨                     * 00024600
*                  !     ,POOLTOKN=xpooltokn                          * 00024700
*                  !    Ý,TASKID=»xtaskid!0º¨                         * 00024800
*                  !    Ý,THREAD=»xthread!0º¨                         * 00024900
*                  !    Ý,UTILRTN=»xutilrtn!0º¨                       * 00025000
*                  !    Ý,WAIT=»NO!YES!EXPANDº¨                       * 00025100
*                  Ô ,REQUEST=PAGE_BUFFER                             * 00025200
*                  !   Ð ,BUFLIST=xbuflist                            * 00025300
*                  !   ¿ ,BUFLST64=xbuflst64                          * 00025400
*                  !     ,BUFNUM=xbufnum                              * 00025500
*                  !     ,BUFTYPE=»PAGEELIG!PAGEABLEº                 * 00025600
*                  !    Ý,GAP=»xgap!0º¨                               * 00025700
*                  !    Ý,ERRBFLST=xerrbflst¨                         * 00025800
*                  !    Ý,COMPID=»xcompid!0º¨                         * 00025900
*                  !    Ý,COMPUSER=»xcompuser!0º¨                     * 00026000
*                  !    Ý,THREAD=»xthread!0º¨                         * 00026100
*                  !    Ý,UTILRTN=»xutilrtn!0º¨                       * 00026200
*                  ¿ ,REQUEST=RESOURCE_STATS                          * 00026300
*                       Ý,STATAREA=xstatarea¨                         * 00026400
*                   Ý,RETCODE=xretcode¨                               * 00026500
*                   Ý,RSNCODE=xrsncode¨                               * 00026600
*                   Ý,PLISTVER=»xplistver!IMPLIED_VERSIONº¨           * 00026700
*                  ÐÝ,MF=S¨                                           * 00026800
*                  ÔÝ,MF=(L,xmfctrl»,xmfattr!0Dº)¨                    * 00026900
*                  ÔÝ,MF=(M,xmfctrl»,COMPLETE!NOCHECKº)¨              * 00027000
*                  ¿Ý,MF=(E,xmfctrl»,COMPLETE!NOCHECKº)¨              * 00027100
*                                                                     * 00027200
*                                                                     * 00027300
*      Where:                                                         * 00027400
*                                                                     * 00027500
*                                                                     * 00027600
*      Ýxlabel¨                                                       * 00027700
*          is an optional symbol, starting in column 1, that is the   * 00027800
*          name on the IVTCSM macro invocation.  The name must        * 00027900
*          conform to the rules for an ordinary assembler language    * 00028000
*          symbol.                                                    * 00028100
*          DEFAULT: No name.                                          * 00028200
*                                                                     * 00028300
*                                                                     * 00028400
*                                                                     * 00028500
*                                                                     * 00028600
*       REQUEST(»ASSIGN_BUFFER!CHANGE_OWNER!COPY_DATA!CREATE_POOL!DEL * 00028700
*          ETE_POOL!DUMP_INFO!FIX_BUFFER!FREE_BUFFER!GET_BUFFER!PAGE_ * 00028800
*          BUFFER!RESOURCE_STATSº)                                    * 00028900
*          is a required keyword input specifying the type of request * 00029000
*          to the communications storage manager.                     * 00029100
*                                                                     * 00029200
*                                                                     * 00029300
*           REQUEST(ASSIGN_BUFFER)                                    * 00029400
*                                                                     * 00029500
*              PURPOSE                                                * 00029600
*                                                                     * 00029700
*              This macroinstruction allows an application to request * 00029800
*              that a buffer be logically assigned to another owner   * 00029900
*              (shared) in order to make multiple owners of a buffer. * 00030000
*                                                                     * 00030100
*              USAGE                                                  * 00030200
*                                                                     * 00030300
*              This macroinstruction allows a buffer to be            * 00030400
*              concurrently shared between multiple users.  A logical * 00030500
*              instance of the buffer is created for each user.  A    * 00030600
*              new physical copy of the buffer is not created.  This  * 00030700
*              function is provided to allow specific areas of the    * 00030800
*              buffer to be allocated to different owners.  This      * 00030900
*              function could be used to allow multiple users to have * 00031000
*              read access to the same data.  No serialization is     * 00031100
*              provided to prevent concurrent updates by users.       * 00031200
*                                                                     * 00031300
*              The application must specify whether the new instance  * 00031400
*              of the buffer is to be guaranteed to be fixed or       * 00031500
*              eligible to be made pageable.                          * 00031600
*                                                                     * 00031700
*              The ownership of the new instance of the buffer is     * 00031800
*              assigned to the requesting address space by default.   * 00031900
*              This can be overridden by specifying the OWNERID       * 00032000
*              parameter.  The OWNERID is the ASID of the address     * 00032100
*              space.  Ownership of a new instance of the buffer may  * 00032200
*              be optionally qualified by specifying a TASKID on the  * 00032300
*              macroinstruction. The TASKID is a TCB address with the * 00032400
*              default being no task association.                     * 00032500
*                                                                     * 00032600
*              A new buffer token is returned representing the new    * 00032700
*              instance of the buffer.  The buffer token is the means * 00032800
*              by which this new instance of the buffer is known to   * 00032900
*              the storage manager.  This token must be used with all * 00033000
*              other requests to the storage manager for the          * 00033100
*              associated buffer instance.                            * 00033200
*                                                                     * 00033300
*              Multiple shared instances of a single buffer can be    * 00033400
*              created by passing a multi-entry buffer list with the  * 00033500
*              same buffer token in each entry.                       * 00033600
*                                                                     * 00033700
*              A request to create a new image of a buffer that is in * 00033800
*              the guaranteed to be pageable state is not permitted.  * 00033900
*              The reason for this restriction is to guarantee that a * 00034000
*              user of a buffer that has multiple images can          * 00034100
*              successfully issue a FIX_BUFFER request if necessary.  * 00034200
*              Fixing a buffer requires that the entire buffer be     * 00034300
*              fixed regardless of the fact that the user may only be * 00034400
*              interested in a piece of the buffer.                   * 00034500
*                                                                     * 00034600
*              RETURN CODES AND REASON CODES.                         * 00034700
*                                                                     * 00034800
*              The following codes can be returned to the application * 00034900
*              on this macroinstruction.                              * 00035000
*                                                                     * 00035100
*                                                                     * 00035200
*              RETURN CODE  MEANING                                   * 00035300
*                                                                     * 00035400
*              0            Request completed successfully            * 00035500
*                                                                     * 00035600
*              4            Request did not complete successfully.    * 00035700
*                           See the following reason codes to         * 00035800
*                           determine the type of error encountered.  * 00035900
*                                                                     * 00036000
*                                                                     * 00036100
*                           REASON CODE  MEANING                      * 00036200
*                                                                     * 00036300
*                           2            Requested function not       * 00036400
*                                        supported at the present     * 00036500
*                                        time, service has not been   * 00036600
*                                        initialized                  * 00036700
*                                                                     * 00036800
*                           7            Invalid buffer token         * 00036900
*                                        specified                    * 00037000
*                                                                     * 00037100
*                           9            Real Storage unavailable to  * 00037200
*                                        provide a fixed buffer, wait * 00037300
*                                        not requested                * 00037400
*                                                                     * 00037500
*                           15           Assign buffer request failed * 00037600
*                                        because the state of the     * 00037700
*                                        buffer is guaranteed to be   * 00037800
*                                        pageable.                    * 00037900
*                                                                     * 00038000
*                           20           BUFTYPE value specified is   * 00038100
*                                        not valid for this request.  * 00038200
*                                                                     * 00038300
*                                                                     * 00038400
*                                                                     * 00038500
*              8            System error while processing the         * 00038600
*                           request.  See the following reason codes  * 00038700
*                           to determine the type of error            * 00038800
*                           encountered.                              * 00038900
*                                                                     * 00039000
*                                                                     * 00039100
*                           REASON CODE  MEANING                      * 00039200
*                                                                     * 00039300
*                           1            Unable to obtain storage for * 00039400
*                                        the request.                 * 00039500
*                                                                     * 00039600
*                           6            An abend occurred while      * 00039700
*                                        processing this request.     * 00039800
*                                                                     * 00039900
*                                                                     * 00040000
*                                                                     * 00040100
*                                                                     * 00040200
*                                                                     * 00040300
*              PARAMETERS                                             * 00040400
*                                                                     * 00040500
*                                                                     * 00040600
*              The following is a set of mutually exclusive keys.     * 00040700
*              This set is required; only one key must be specified.  * 00040800
*                                                                     * 00040900
*                                                                     * 00041000
*                  BUFLIST or BUFLST64 is required. BUFLIST is        * 00041100
*                  required when IVTCSM is issued in 31-bit           * 00041200
*                  addressing mode. BUFLST64 is required when IVTCSM  * 00041300
*                  is issued in 64-bit addressing mode.               * 00041400
*                                                                     * 00041500
*              BUFLIST(xbuflist)                                      * 00041600
*                  belongs to a set of mutually exclusive keys. It is * 00041700
*                  an input.  It is the name (RS-type) (or address in * 00041800
*                  register (2)-(12) ASM only) of an area containing  * 00041900
*                  a list of buffer entries.  The number of entries   * 00042000
*                  in the list is provided by BUFNUM.                 * 00042100
*                                                                     * 00042200
*              BUFLST64(xbuflst64)                                    * 00042300
*                  belongs to a set of mutually exclusive keys. It is * 00042400
*                  the name (RS-type) (or address in register         * 00042500
*                  (2)-(12) ASM only) of a character input of an area * 00042600
*                  containing a list of 64-bit address buffer         * 00042700
*                  entries.  Each 64-bit buffer list entry is mapped  * 00042800
*                  by ivtbfl64. ivtbfl64 includes ivtbufl with the    * 00042900
*                  field BFL64_BUFL. It also redefines the BUFL_ALET  * 00043000
*                  and BUFL_ADDR fields as BUFL_ADDR64 for the 64-bit * 00043100
*                  buffer address. There is also a flag bit           * 00043200
*                  indicating 64-bit buffer list entry BUFL_BUFLST64. * 00043300
*                                                                     * 00043400
*                  The number of entries in the list is provided by   * 00043500
*                  BUFNUM.                                            * 00043600
*                                                                     * 00043700
*                  An entry in the buffer list is mapped by IVTBUFL.  * 00043800
*                  Some of the fields defined in IVTBUFL are required * 00043900
*                  as input and some are set by CSM as output fields. * 00044000
*                  Note that the buffer token representing the new    * 00044100
*                  buffer image is returned in the BUFL_TOKEN field   * 00044200
*                  as output.                                         * 00044300
*                                                                     * 00044400
*                  The following fields in IVTBUFL are required as    * 00044500
*                  input for this request.                            * 00044600
*                                                                     * 00044700
*                                                                     * 00044800
*                  o   BUFL_VERSION                                   * 00044900
*                                                                     * 00045000
*                  o   BUFL_TOKEN                                     * 00045100
*                                                                     * 00045200
*                                                                     * 00045300
*                  The following fields in IVTBUFL are returned as    * 00045400
*                  output by CSM for this request.                    * 00045500
*                                                                     * 00045600
*                                                                     * 00045700
*                  o   BUFL_TYPE                                      * 00045800
*                                                                     * 00045900
*                  o   BUFL_TOKEN                                     * 00046000
*                                                                     * 00046100
*                                                                     * 00046200
*                                                                     * 00046300
*                                                                     * 00046400
*                                                                     * 00046500
*              End of a set of mutually exclusive required keys.      * 00046600
*                                                                     * 00046700
*                                                                     * 00046800
*                                                                     * 00046900
*              BUFNUM(xbufnum)                                        * 00047000
*                  is the name (RS-type) (or address in register      * 00047100
*                  (2)-(12) ASM only) of a required fullword input    * 00047200
*                  specifying the number of buffers to be logically   * 00047300
*                  assigned.                                          * 00047400
*                                                                     * 00047500
*                                                                     * 00047600
*                                                                     * 00047700
*                                                                     * 00047800
*              ÝBUFTYPE(»SAME!PAGEELIG!FIXEDº)¨                       * 00047900
*                  is an optional keyword input specifying whether    * 00048000
*                  the buffer images are guaranteed to be fixed,      * 00048100
*                  eligible to be made pageable or have the same      * 00048200
*                  pageable state as the buffers represented by the   * 00048300
*                  input token.                                       * 00048400
*                  DEFAULT: SAME                                      * 00048500
*                                                                     * 00048600
*                                                                     * 00048700
*                  BUFTYPE(SAME)                                      * 00048800
*                      indicates that the pageable state of the       * 00048900
*                      buffer images will be the same as the buffers  * 00049000
*                      represented by the input token.                * 00049100
*                                                                     * 00049200
*                  BUFTYPE(PAGEELIG)                                  * 00049300
*                      indicates that the buffer images are eligible  * 00049400
*                      to be made pageable.                           * 00049500
*                                                                     * 00049600
*                  BUFTYPE(FIXED)                                     * 00049700
*                      indicates that buffer images are guaranteed to * 00049800
*                      be fixed.                                      * 00049900
*                                                                     * 00050000
*                                                                     * 00050100
*                                                                     * 00050200
*                                                                     * 00050300
*                                                                     * 00050400
*                                                                     * 00050500
*              ÝCSMUSER(»NO!YESº)¨                                    * 00050600
*                  is an optional keyword input specifies that CSM    * 00050700
*                  knows about this user address space. This was      * 00050800
*                  through previous Create Pool, Get Buffer, Assign   * 00050900
*                  Buffer or Change Owner request.  If taskid is      * 00051000
*                  used, CSM knows this user taskid from the previous * 00051100
*                  Create Pool, Get Buffer, Assign Buffer or Change   * 00051200
*                  Owner request.                                     * 00051300
*                  DEFAULT: NO                                        * 00051400
*                                                                     * 00051500
*                                                                     * 00051600
*                  CSMUSER(NO)                                        * 00051700
*                      CSM will set the bit in SMCST_OWNER_BITMAP to  * 00051800
*                      indicate the address space in use. For taskid, * 00051900
*                      CSM will set the bit in SMCST_TASK_BITMAP if   * 00052000
*                      taskid is specified.                           * 00052100
*                                                                     * 00052200
*                  CSMUSER(YES)                                       * 00052300
*                      CSM already knows about this address space or  * 00052400
*                      task. It does not need to update owner or task * 00052500
*                      bitmap. This reduces the path length for CSM   * 00052600
*                      request.                                       * 00052700
*                                                                     * 00052800
*                                                                     * 00052900
*                                                                     * 00053000
*                                                                     * 00053100
*                                                                     * 00053200
*                                                                     * 00053300
*              ÝGAP(»xgap!0º)¨                                        * 00053400
*                  is the name (RS-type) (or address in register      * 00053500
*                  (2)-(12) ASM only) of an optional fullword input   * 00053600
*                  specifying the number of bytes used to separate    * 00053700
*                  buffer entries.  This parameter allows the buffer  * 00053800
*                  entries to be in discontiguous storage.  If GAP is * 00053900
*                  not specified, buffer entries are contiguous.      * 00054000
*                  DEFAULT: 0.                                        * 00054100
*                                                                     * 00054200
*                                                                     * 00054300
*                                                                     * 00054400
*                                                                     * 00054500
*              ÝERRBFLST(xerrbflst)¨                                  * 00054600
*                  is the name (RS-type) (or address in register      * 00054700
*                  (2)-(12) ASM only) of an optional fullword output  * 00054800
*                  specifying the number of the last buffer entry     * 00054900
*                  that was successfully processed when an error is   * 00055000
*                  detected during processing of the                  * 00055100
*                  macroinstruction.                                  * 00055200
*                                                                     * 00055300
*                                                                     * 00055400
*                                                                     * 00055500
*                                                                     * 00055600
*              ÝOWNERID(»xownerid!0º)¨                                * 00055700
*                  is the name (RS-type) (or address in register      * 00055800
*                  (2)-(12) ASM only) of an optional halfword input   * 00055900
*                  specifying the owner to which the buffer image is  * 00056000
*                  to be logically assigned.  If not coded, the ASID  * 00056100
*                  of the issuing application is assigned as the      * 00056200
*                  OWNERID.                                           * 00056300
*                  DEFAULT: 0 indicates that the ASID of the          * 00056400
*                  executing address space is used to determine       * 00056500
*                  ownership.                                         * 00056600
*                                                                     * 00056700
*                                                                     * 00056800
*                                                                     * 00056900
*                                                                     * 00057000
*              ÝCOMPID(»xcompid!0º)¨                                  * 00057100
*                  is the name (RS-type) (or address in register      * 00057200
*                  (2)-(12) ASM only) of an optional byte input       * 00057300
*                  specifying the CS390 component ID of the buffer.   * 00057400
*                  DEFAULT: 0 indicates that component ID is not      * 00057500
*                  specified on CSM request.                          * 00057600
*                                                                     * 00057700
*                                                                     * 00057800
*                                                                     * 00057900
*                                                                     * 00058000
*              ÝCOMPUSER(»xcompuser!0º)¨                              * 00058100
*                  is the name (RS-type) (or address in register      * 00058200
*                  (2)-(12) ASM only) of an optional 4 character      * 00058300
*                  input specifying a unique user value that is       * 00058400
*                  placed in the CSM buffer header.  It is the CSM    * 00058500
*                  user's responsibility to ensure that this value is * 00058600
*                  of value to the component ID.                      * 00058700
*                  DEFAULT: 0 indicates that a unique user value is   * 00058800
*                  not placed in the CSM buffer header.               * 00058900
*                                                                     * 00059000
*                                                                     * 00059100
*                                                                     * 00059200
*                                                                     * 00059300
*              ÝTASKID(»xtaskid!0º)¨                                  * 00059400
*                  is the name (RS-type) (or address in register      * 00059500
*                  (2)-(12) ASM only) of an optional pointer input    * 00059600
*                  that contains the address of a TCB.  This further  * 00059700
*                  qualifies the ownership of a buffer to a specific  * 00059800
*                  task.  If TASKID is not specified, the buffer is   * 00059900
*                  not associated with a task.                        * 00060000
*                  DEFAULT: 0 indicates that no task association is   * 00060100
*                  done.                                              * 00060200
*                                                                     * 00060300
*                                                                     * 00060400
*                                                                     * 00060500
*                                                                     * 00060600
*              ÝTHREAD(»xthread!0º)¨                                  * 00060700
*                  is the name (RS-type) (or address in register      * 00060800
*                  (2)-(12) ASM only) of an optional 4 character      * 00060900
*                  input specifying a unique identifier that is       * 00061000
*                  placed in the CSM trace entry to correlate trace   * 00061100
*                  records with the application that is requesting    * 00061200
*                  the buffers.  It is the CSM user's responsibility  * 00061300
*                  to ensure that this value is different from the    * 00061400
*                  THREAD value specified by other users of the CSM.  * 00061500
*                  One way this can be achieved is by specifying an   * 00061600
*                  ECSA control block for THREAD.                     * 00061700
*                  DEFAULT: 0 indicates that a unique identifier is   * 00061800
*                  not placed in the CSM trace entry.                 * 00061900
*                                                                     * 00062000
*                                                                     * 00062100
*                                                                     * 00062200
*                                                                     * 00062300
*              ÝUTILRTN(»xutilrtn!0º)¨                                * 00062400
*                  is the name (RS-type) (or address in register      * 00062500
*                  (2)-(12) ASM only) of an optional fullword input   * 00062600
*                  specifying the return address of the caller of the * 00062700
*                  utility routine.  This parameter is only relevant  * 00062800
*                  to the tracing process.  It should be specified    * 00062900
*                  only if the CSM user requires identification of    * 00063000
*                  the caller of a utility routine in the CSM trace   * 00063100
*                  entry.                                             * 00063200
*                  DEFAULT: 0 indicates that the return address of    * 00063300
*                  the CSM request issuer is placed in the CSM trace  * 00063400
*                  entry.                                             * 00063500
*                                                                     * 00063600
*                                                                     * 00063700
*                                                                     * 00063800
*           REQUEST(CHANGE_OWNER)                                     * 00063900
*                                                                     * 00064000
*              PURPOSE                                                * 00064100
*                                                                     * 00064200
*              This macroinstruction allows the application to change * 00064300
*              the ownership of a buffer to another user.             * 00064400
*                                                                     * 00064500
*              USAGE                                                  * 00064600
*                                                                     * 00064700
*              This macroinstruction is used to change the OWNERID of * 00064800
*              a buffer from the APPL to VTAM on a SEND request and   * 00064900
*              vice versa on a RECEIVE request.  This ownership       * 00065000
*              transfer is handled by VTAM.  If an application needs  * 00065100
*              to transfer ownership of buffers across address        * 00065200
*              spaces, this function must be used.                    * 00065300
*                                                                     * 00065400
*              When this macroinstruction is issued, ownership is     * 00065500
*              assigned to the requesting address space by default.   * 00065600
*              This can be overridden by specifying the OWNERID       * 00065700
*              parameter.  The OWNERID is the ASID of the address     * 00065800
*              space.  Ownership of a buffer may be optionally        * 00065900
*              qualified by specifying the TASKID parameter on the    * 00066000
*              macroinstruction.  The TASKID is a TCB address with    * 00066100
*              the default being no task association.                 * 00066200
*                                                                     * 00066300
*              Ownership of a buffer that has an associated free      * 00066400
*              routine is not actually changed due to an IVTCSM       * 00066500
*              REQUEST=CHANGE_OWNER macroinstruction.  The buffer is  * 00066600
*              actually borrowed.  The original owner of the buffer   * 00066700
*              will be maintained so that the ownership is restored   * 00066800
*              when the buffer is freed.                              * 00066900
*                                                                     * 00067000
*              This service has been designed to allow buffers to be  * 00067100
*              passed between applications and VTAM.  An application  * 00067200
*              may need to use a buffer in multiple address spaces or * 00067300
*              pass it to other system services that might execute in * 00067400
*              a different address space.                             * 00067500
*                                                                     * 00067600
*              Ownership of a buffer must be maintained such that the * 00067700
*              buffer is owned by the current environment using the   * 00067800
*              buffer.  This is necessary since the owner is the      * 00067900
*              basis for reclamation of the buffers should the        * 00068000
*              owner's environment terminate.  If a buffer owned by   * 00068100
*              address space 1 is passed to address space 2 and       * 00068200
*              address space 2 must be able to access the buffer      * 00068300
*              regardless of the existence of address space 1, then   * 00068400
*              the ownership of the buffer must be changed to address * 00068500
*              space 2.  The determination of when the transfer of    * 00068600
*              ownership must take place is the responsibility of the * 00068700
*              user of the buffer that makes the buffer available for * 00068800
*              use in a different address space.  The associated task * 00068900
*              must exist as long as access is required to the        * 00069000
*              buffer.                                                * 00069100
*                                                                     * 00069200
*              For example, consider an application that acquires     * 00069300
*              buffers from CSM and passes the buffers to VTAM on an  * 00069400
*              APPCCMD send request.  Depending on the type of send   * 00069500
*              request, the VTAM processing may execute               * 00069600
*              asynchronously in a different address space. VTAM is   * 00069700
*              responsible for changing the ownership of the buffer   * 00069800
*              to the appropriate address space to ensure that the    * 00069900
*              buffer can be reliably accessed in the processing      * 00070000
*              address space independent of the address space         * 00070100
*              originating the request.                               * 00070200
*                                                                     * 00070300
*              RETURN CODES AND REASON CODES.                         * 00070400
*                                                                     * 00070500
*              The following codes can be returned to the application * 00070600
*              on this macroinstruction.                              * 00070700
*                                                                     * 00070800
*                                                                     * 00070900
*              RETURN CODE  MEANING                                   * 00071000
*                                                                     * 00071100
*              0            Request completed successfully            * 00071200
*                                                                     * 00071300
*              4            Request did not complete successfully.    * 00071400
*                           See the following reason codes to         * 00071500
*                           determine the type of error encountered.  * 00071600
*                                                                     * 00071700
*                                                                     * 00071800
*                           REASON CODE  MEANING                      * 00071900
*                                                                     * 00072000
*                           2            Requested function not       * 00072100
*                                        supported at the present     * 00072200
*                                        time, service has not been   * 00072300
*                                        initialized                  * 00072400
*                                                                     * 00072500
*                           7            Invalid buffer token         * 00072600
*                                        specified                    * 00072700
*                                                                     * 00072800
*                           31           IVTCSM request was issued in * 00072900
*                                        64-bit and BUFLST64 did not  * 00073000
*                                        start at the double word     * 00073100
*                                        boundary.                    * 00073200
*                                                                     * 00073300
*                                                                     * 00073400
*                                                                     * 00073500
*                                                                     * 00073600
*                                                                     * 00073700
*              PARAMETERS                                             * 00073800
*                                                                     * 00073900
*                                                                     * 00074000
*              The following is a set of mutually exclusive keys.     * 00074100
*              This set is required; only one key must be specified.  * 00074200
*                                                                     * 00074300
*                                                                     * 00074400
*                  BUFLIST or BUFLST64 is required. BUFLIST is        * 00074500
*                  required when IVTCSM is issued in 31-bit           * 00074600
*                  addressing mode. BUFLST64 is required when IVTCSM  * 00074700
*                  is issued in 64-bit addressing mode.               * 00074800
*                                                                     * 00074900
*              BUFLIST(xbuflist)                                      * 00075000
*                  belongs to a set of mutually exclusive keys. It is * 00075100
*                  an input.  It is the name (RS-type) (or address in * 00075200
*                  register (2)-(12) ASM only) of an area containing  * 00075300
*                  a list of buffer entries.  The number of entries   * 00075400
*                  in the list is provided by BUFNUM.                 * 00075500
*                                                                     * 00075600
*              BUFLST64(xbuflst64)                                    * 00075700
*                  belongs to a set of mutually exclusive keys. It is * 00075800
*                  the name (RS-type) (or address in register         * 00075900
*                  (2)-(12) ASM only) of a character input of an area * 00076000
*                  containing a list of 64-bit address buffer         * 00076100
*                  entries.  Each 64-bit buffer list entry is mapped  * 00076200
*                  by ivtbfl64. ivtbfl64 includes ivtbufl with the    * 00076300
*                  field BFL64_BUFL. It also redefines the BUFL_ALET  * 00076400
*                  and BUFL_ADDR fields as BUFL_ADDR64 for the 64-bit * 00076500
*                  buffer address. There is also a flag bit           * 00076600
*                  indicating 64-bit buffer list entry BUFL_BUFLST64. * 00076700
*                                                                     * 00076800
*                  The number of entries in the list is provided by   * 00076900
*                  BUFNUM.                                            * 00077000
*                                                                     * 00077100
*                  Each entry in the buffer list is mapped by         * 00077200
*                  IVTBUFL.                                           * 00077300
*                                                                     * 00077400
*                  The following fields in IVTBUFL are required as    * 00077500
*                  input for this request.                            * 00077600
*                                                                     * 00077700
*                                                                     * 00077800
*                  o   BUFL_VERSION                                   * 00077900
*                                                                     * 00078000
*                  o   BUFL_SOURCE  (Note:  This field is only        * 00078100
*                      required when SKIPBUF=YES is specified.)       * 00078200
*                                                                     * 00078300
*                  o   BUFL_TOKEN                                     * 00078400
*                                                                     * 00078500
*                                                                     * 00078600
*                  There are no fields in IVTBUFL, that are returned  * 00078700
*                  as output by CSM for this request.                 * 00078800
*                                                                     * 00078900
*                                                                     * 00079000
*                                                                     * 00079100
*              End of a set of mutually exclusive required keys.      * 00079200
*                                                                     * 00079300
*                                                                     * 00079400
*                                                                     * 00079500
*              BUFNUM(xbufnum)                                        * 00079600
*                  is the name (RS-type) (or address in register      * 00079700
*                  (2)-(12) ASM only) of a required fullword input    * 00079800
*                  specifying the number of buffers to change         * 00079900
*                  ownership.                                         * 00080000
*                                                                     * 00080100
*                                                                     * 00080200
*                                                                     * 00080300
*                                                                     * 00080400
*              ÝCSMUSER(»NO!YESº)¨                                    * 00080500
*                  is an optional keyword input specifies that CSM    * 00080600
*                  knows about this user address space. This was      * 00080700
*                  through previous Create Pool, Get Buffer, Assign   * 00080800
*                  Buffer or Change Owner request.  If taskid is      * 00080900
*                  used, CSM knows this user taskid from the previous * 00081000
*                  Create Pool, Get Buffer, Assign Buffer or Change   * 00081100
*                  Owner request.                                     * 00081200
*                  DEFAULT: NO                                        * 00081300
*                                                                     * 00081400
*                                                                     * 00081500
*                  CSMUSER(NO)                                        * 00081600
*                      CSM will set the bit in SMCST_OWNER_BITMAP to  * 00081700
*                      indicate the address space in use. For taskid, * 00081800
*                      CSM will set the bit in SMCST_TASK_BITMAP if   * 00081900
*                      taskid is specified.                           * 00082000
*                                                                     * 00082100
*                  CSMUSER(YES)                                       * 00082200
*                      CSM already knows about this address space or  * 00082300
*                      task. It does not need to update owner or task * 00082400
*                      bitmap.                                        * 00082500
*                                                                     * 00082600
*                                                                     * 00082700
*                                                                     * 00082800
*                                                                     * 00082900
*                                                                     * 00083000
*                                                                     * 00083100
*              ÝERRBFLST(xerrbflst)¨                                  * 00083200
*                  is the name (RS-type) (or address in register      * 00083300
*                  (2)-(12) ASM only) of an optional fullword output  * 00083400
*                  containing the number of the last buffer entry     * 00083500
*                  that was successfully processed when an error is   * 00083600
*                  detected during processing of the                  * 00083700
*                  macroinstruction.                                  * 00083800
*                                                                     * 00083900
*                                                                     * 00084000
*                                                                     * 00084100
*                                                                     * 00084200
*              ÝGAP(»xgap!0º)¨                                        * 00084300
*                  is the name (RS-type) (or address in register      * 00084400
*                  (2)-(12) ASM only) of an optional fullword input   * 00084500
*                  specifying the number of bytes used to separate    * 00084600
*                  buffer entries.  This parameter allows the buffer  * 00084700
*                  entries to be in discontiguous storage.  If GAP is * 00084800
*                  not specified, buffer entries are contiguous.      * 00084900
*                  DEFAULT: 0.                                        * 00085000
*                                                                     * 00085100
*                                                                     * 00085200
*                                                                     * 00085300
*                                                                     * 00085400
*              ÝOWNERID(»xownerid!0º)¨                                * 00085500
*                  is the name (RS-type) (or address in register      * 00085600
*                  (2)-(12) ASM only) of an optional halfword input   * 00085700
*                  specifying the owner to which the buffer is to be  * 00085800
*                  assigned.  If not coded, the ASID of the issuing   * 00085900
*                  application is assigned as the OWNERID.            * 00086000
*                  DEFAULT: 0 indicates that the ASID of the          * 00086100
*                  executing address space is used to determine       * 00086200
*                  ownership.                                         * 00086300
*                                                                     * 00086400
*                                                                     * 00086500
*                                                                     * 00086600
*                                                                     * 00086700
*              ÝCOMPID(»xcompid!0º)¨                                  * 00086800
*                  is the name (RS-type) (or address in register      * 00086900
*                  (2)-(12) ASM only) of an optional byte input       * 00087000
*                  specifying the CS390 component ID of the buffer.   * 00087100
*                  DEFAULT: 0 indicates that component ID is not      * 00087200
*                  specified on CSM request.                          * 00087300
*                                                                     * 00087400
*                                                                     * 00087500
*                                                                     * 00087600
*                                                                     * 00087700
*              ÝCOMPUSER(»xcompuser!0º)¨                              * 00087800
*                  is the name (RS-type) (or address in register      * 00087900
*                  (2)-(12) ASM only) of an optional 4 character      * 00088000
*                  input specifying a unique user value that is       * 00088100
*                  placed in the CSM buffer header.  It is the CSM    * 00088200
*                  user's responsibility to ensure that this value is * 00088300
*                  of value to the component ID.                      * 00088400
*                  DEFAULT: 0 indicates that a unique user value is   * 00088500
*                  not placed in the CSM buffer header.               * 00088600
*                                                                     * 00088700
*                                                                     * 00088800
*                                                                     * 00088900
*                                                                     * 00089000
*              ÝSKIPBUF(»NO!YESº)¨                                    * 00089100
*                  is an optional keyword input specifying whether    * 00089200
*                  all entries in the buffer list should be           * 00089300
*                  processed.                                         * 00089400
*                  DEFAULT: NO                                        * 00089500
*                                                                     * 00089600
*                                                                     * 00089700
*                  SKIPBUF(NO)                                        * 00089800
*                      specifies that all the entries in the buffer   * 00089900
*                      list will be processed.  No entries are        * 00090000
*                      skipped.  The BUFL_SOURCE value is not         * 00090100
*                      examined.                                      * 00090200
*                                                                     * 00090300
*                  SKIPBUF(YES)                                       * 00090400
*                      specifies that the only entries in the buffer  * 00090500
*                      list that have a BUFL_SOURCE value indicating  * 00090600
*                      the user's non-CSM storage (BUFL_UDSPACE or    * 00090700
*                      BUFL_USTOR) will be skipped.                   * 00090800
*                                                                     * 00090900
*                                                                     * 00091000
*                                                                     * 00091100
*                                                                     * 00091200
*                                                                     * 00091300
*                                                                     * 00091400
*              ÝTASKID(»xtaskid!0º)¨                                  * 00091500
*                  is the name (RS-type) (or address in register      * 00091600
*                  (2)-(12) ASM only) of an optional pointer input    * 00091700
*                  that contains the address of a TCB.  This further  * 00091800
*                  qualifies the ownership of a buffer to a specific  * 00091900
*                  task.  If TASKID is not specified, the buffer is   * 00092000
*                  not associated with a task.                        * 00092100
*                  DEFAULT: 0 indicates that no task association is   * 00092200
*                  done.                                              * 00092300
*                                                                     * 00092400
*                                                                     * 00092500
*                                                                     * 00092600
*                                                                     * 00092700
*              ÝTHREAD(»xthread!0º)¨                                  * 00092800
*                  is the name (RS-type) (or address in register      * 00092900
*                  (2)-(12) ASM only) of an optional 4 character      * 00093000
*                  input specifying a unique identifier that is       * 00093100
*                  placed in the CSM trace entry to correlate trace   * 00093200
*                  records with the application that is requesting    * 00093300
*                  the buffers.  It is the CSM user's responsibility  * 00093400
*                  to ensure that this value is different from the    * 00093500
*                  THREAD value specified by other users of the CSM.  * 00093600
*                  One way this can be achieved is by specifying an   * 00093700
*                  ECSA control block for THREAD.                     * 00093800
*                  DEFAULT: 0 indicates that a unique identifier is   * 00093900
*                  not placed in the CSM trace entry.                 * 00094000
*                                                                     * 00094100
*                                                                     * 00094200
*                                                                     * 00094300
*                                                                     * 00094400
*              ÝUTILRTN(»xutilrtn!0º)¨                                * 00094500
*                  is the name (RS-type) (or address in register      * 00094600
*                  (2)-(12) ASM only) of an optional fullword input   * 00094700
*                  specifying the return address of the caller of the * 00094800
*                  utility routine.  This parameter is only relevant  * 00094900
*                  to the tracing process.  It should be specified    * 00095000
*                  only if the CSM user requires identification of    * 00095100
*                  the caller of a utility routine in the CSM trace   * 00095200
*                  entry.                                             * 00095300
*                  DEFAULT: 0 indicates that the return address of    * 00095400
*                  the CSM request issuer is placed in the CSM trace  * 00095500
*                  entry.                                             * 00095600
*                                                                     * 00095700
*                                                                     * 00095800
*                                                                     * 00095900
*           REQUEST(COPY_DATA)                                        * 00096000
*                                                                     * 00096100
*              PURPOSE                                                * 00096200
*                                                                     * 00096300
*              This macroinstruction allows a user to copy data to or * 00096400
*              from a CSM buffer or a user data area.                 * 00096500
*                                                                     * 00096600
*              USAGE                                                  * 00096700
*                                                                     * 00096800
*              This service assists the application by isolating it   * 00096900
*              from the possible storage key difference between that  * 00097000
*              of the requester and that of the CSM buffer.  It also  * 00097100
*              assists users of CSM data space buffers by isolating   * 00097200
*              the requester from the addressing method used to       * 00097300
*              access a data space.                                   * 00097400
*                                                                     * 00097500
*              The copy function provided by this service allows      * 00097600
*              multiple source buffers to be copied to one or         * 00097700
*              multiple target buffers or vice versa.  The source     * 00097800
*              buffers will be copied to the target buffers using the * 00097900
*              source and target buffer lengths to pack data or span  * 00098000
*              data across the target buffers as required.            * 00098100
*                                                                     * 00098200
*              If the cumulative length of the source buffers is      * 00098300
*              greater than the cumulative length of the target       * 00098400
*              buffers, truncation of the source data will occur.     * 00098500
*                                                                     * 00098600
*              CSM accepts as input a source buffer list and a target * 00098700
*              buffer list.  The number of entries in each list are   * 00098800
*              not required to be equal.  Within each list, entries   * 00098900
*              may or may not represent a CSM buffer.  The            * 00099000
*              BUFL_SOURCE field in the entry will indicate whether   * 00099100
*              or not the entry represents a CSM buffer.  For entries * 00099200
*              representing CSM buffers, the address that is the      * 00099300
*              source or target of the copy is supplied by the        * 00099400
*              requester and is not required to be the actual start   * 00099500
*              address of the CSM buffer.  CSM validates that the     * 00099600
*              specified address and length corresponds to a storage  * 00099700
*              area that is within the bounds of the CSM buffer.      * 00099800
*              This validation is based on the size of the buffer as  * 00099900
*              determined at the time the buffer pool was created.    * 00100000
*                                                                     * 00100100
*              A user data area that is involved in the copy data     * 00100200
*              operation may be optionally ALET-qualified to allow    * 00100300
*              this area to reside in a data space.                   * 00100400
*                                                                     * 00100500
*              RETURN CODES AND REASON CODES.                         * 00100600
*                                                                     * 00100700
*              The following codes can be returned to the application * 00100800
*              on this macroinstruction.                              * 00100900
*                                                                     * 00101000
*                                                                     * 00101100
*              RETURN CODE  MEANING                                   * 00101200
*                                                                     * 00101300
*              0            Request completed successfully            * 00101400
*                                                                     * 00101500
*              4            Request did not complete successfully.    * 00101600
*                           See the following reason codes to         * 00101700
*                           determine the type of error encountered.  * 00101800
*                                                                     * 00101900
*                                                                     * 00102000
*                           REASON CODE  MEANING                      * 00102100
*                                                                     * 00102200
*                           2            Requested function not       * 00102300
*                                        supported at the present     * 00102400
*                                        time, service has not been   * 00102500
*                                        initialized                  * 00102600
*                                                                     * 00102700
*                           7            Invalid buffer token         * 00102800
*                                        specified                    * 00102900
*                                                                     * 00103000
*                           12           Address and length specified * 00103100
*                                        on a copy data request for a * 00103200
*                                        source buffer entry is       * 00103300
*                                        outside the bounds of the    * 00103400
*                                        CSM buffer represented by    * 00103500
*                                        the specified pool token.    * 00103600
*                                                                     * 00103700
*                           13           Address and length specified * 00103800
*                                        on a copy data request for a * 00103900
*                                        target buffer entry is       * 00104000
*                                        outside the bounds of the    * 00104100
*                                        CSM buffer represented by    * 00104200
*                                        the specified pool token.    * 00104300
*                                                                     * 00104400
*                           14           Copy operation resulted in   * 00104500
*                                        truncation of source data    * 00104600
*                                        due to insufficient buffer   * 00104700
*                                        space provided by the target * 00104800
*                                        buffer list.                 * 00104900
*                                                                     * 00105000
*                           18           BUFL_SOURCE value is not     * 00105100
*                                        valid for an entry in the    * 00105200
*                                        Source buffer list (SRCLIST  * 00105300
*                                        or SRCLST64).                * 00105400
*                                                                     * 00105500
*                           19           BUFL_SOURCE value is not     * 00105600
*                                        valid for an entry in the    * 00105700
*                                        Target buffer list (TARGLIST * 00105800
*                                        or TARLST64).                * 00105900
*                                                                     * 00106000
*                           22           Source and Target buffers    * 00106100
*                                        overlap.  No data was copied * 00106200
*                                        from source buffer.          * 00106300
*                                                                     * 00106400
*                                                                     * 00106500
*                                                                     * 00106600
*                                                                     * 00106700
*                                                                     * 00106800
*              PARAMETERS                                             * 00106900
*                                                                     * 00107000
*                                                                     * 00107100
*              ÝPAD(»NO!YESº)¨                                        * 00107200
*                  is an optional keyword input that indicates if     * 00107300
*                  padding is to be performed.                        * 00107400
*                  DEFAULT: NO                                        * 00107500
*                                                                     * 00107600
*                                                                     * 00107700
*                  ÝPAD(NO)¨                                          * 00107800
*                      indicating that padding is not performed.      * 00107900
*                                                                     * 00108000
*                  ÝPAD(YES)                                          * 00108100
*                      indicating that padding is to be performed     * 00108200
*                      using the value specified by PADCHAR.          * 00108300
*                                                                     * 00108400
*                                                                     * 00108500
*                      PADCHAR(xpadchar)¨                             * 00108600
*                          is the name (RS-type) (or address in       * 00108700
*                          register (2)-(12) ASM only) of a required  * 00108800
*                          1 character input specifying the character * 00108900
*                          to use as pad if the cumulative target     * 00109000
*                          length is greater than the cumulative      * 00109100
*                          source length.  If PAD=YES is not          * 00109200
*                          specified, then no padding is performed.   * 00109300
*                                                                     * 00109400
*                                                                     * 00109500
*                                                                     * 00109600
*                                                                     * 00109700
*                                                                     * 00109800
*                                                                     * 00109900
*                                                                     * 00110000
*                                                                     * 00110100
*              ÝSRCERRL(xsrcerrl)¨                                    * 00110200
*                  is the name (RS-type) (or address in register      * 00110300
*                  (2)-(12) ASM only) of an optional fullword output  * 00110400
*                  specifying the number of the last buffer entry     * 00110500
*                  that was successfully processed in the SRCLIST.    * 00110600
*                                                                     * 00110700
*                                                                     * 00110800
*                                                                     * 00110900
*                                                                     * 00111000
*              ÝSRCGAP(»xsrcgap!0º)¨                                  * 00111100
*                  is the name (RS-type) (or address in register      * 00111200
*                  (2)-(12) ASM only) of an optional fullword input   * 00111300
*                  specifying the number of bytes used to separate    * 00111400
*                  buffer entries in SRCLIST or SRCLST64.  This       * 00111500
*                  parameter allows the buffer entries to be in       * 00111600
*                  discontiguous storage.  If this parameter is not   * 00111700
*                  specified, buffer entries will be in contiguous    * 00111800
*                  storage.                                           * 00111900
*                  DEFAULT: 0.                                        * 00112000
*                                                                     * 00112100
*                                                                     * 00112200
*                                                                     * 00112300
*                                                                     * 00112400
*              The following is a set of mutually exclusive keys.     * 00112500
*              This set is required; only one key must be specified.  * 00112600
*                                                                     * 00112700
*                                                                     * 00112800
*                  SRCLIST or SRCLST64 is required. SRCLIST is        * 00112900
*                  required when IVTCSM is issued in 31-bit           * 00113000
*                  addressing mode. SRCLST64 is required when IVTCSM  * 00113100
*                  is issued in 64-bit addressing mode.               * 00113200
*                                                                     * 00113300
*              SRCLIST(xsrclist)                                      * 00113400
*                  belongs to a set of mutually exclusive keys. It is * 00113500
*                  an input.  It is the name (RS-type) (or address in * 00113600
*                  register (2)-(12) ASM only) of an area containing  * 00113700
*                  a list of information about the buffers from which * 00113800
*                  the data is to be copied.  Each entry in the list  * 00113900
*                  describes a buffer and is mapped by IVTBUFL.  The  * 00114000
*                  number of entries is equal to the number of        * 00114100
*                  buffers specified by SRCNUM.  The buffer entry may * 00114200
*                  represent a CSM buffer or a user data area.        * 00114300
*                                                                     * 00114400
*              SRCLST64(xsrclst64)                                    * 00114500
*                  belongs to a set of mutually exclusive keys. It is * 00114600
*                  the name (RS-type) (or address in register         * 00114700
*                  (2)-(12) ASM only) of a character input of an area * 00114800
*                  containing a list of information about the buffers * 00114900
*                  from which the data is to be copied.  Each entry   * 00115000
*                  in the list describes a buffer and is mapped by    * 00115100
*                  IVTBUFL.  The number of entries is equal to the    * 00115200
*                  number of buffers specified by SRCNUM.  The buffer * 00115300
*                  entry may represent a CSM buffer or a user data    * 00115400
*                  area.                                              * 00115500
*                                                                     * 00115600
*                  The following fields in IVTBUFL are required as    * 00115700
*                  input for this request.                            * 00115800
*                                                                     * 00115900
*                                                                     * 00116000
*                  o   BUFL_VERSION                                   * 00116100
*                                                                     * 00116200
*                  o   BUFL_SOURCE                                    * 00116300
*                                                                     * 00116400
*                  o   BUFL_TOKEN  (Note:  This field is only         * 00116500
*                      required if data is being copied from a CSM    * 00116600
*                      buffer.)                                       * 00116700
*                                                                     * 00116800
*                  o   BUFL_ALET   (Note:  This field is only         * 00116900
*                      required to access the data in a user data     * 00117000
*                      space.)                                        * 00117100
*                                                                     * 00117200
*                  o   BUFL_ADDR                                      * 00117300
*                                                                     * 00117400
*                  o   BUFL_SIZE                                      * 00117500
*                                                                     * 00117600
*                                                                     * 00117700
*                                                                     * 00117800
*                                                                     * 00117900
*                                                                     * 00118000
*              End of a set of mutually exclusive required keys.      * 00118100
*                                                                     * 00118200
*                                                                     * 00118300
*                                                                     * 00118400
*              SRCNUM(xsrcnum)                                        * 00118500
*                  is the name (RS-type) (or address in register      * 00118600
*                  (2)-(12) ASM only) of a required fullword input    * 00118700
*                  specifying the number of source buffers for the    * 00118800
*                  copy.                                              * 00118900
*                                                                     * 00119000
*                                                                     * 00119100
*                                                                     * 00119200
*                                                                     * 00119300
*              ÝTARGERRL(xtargerrl)¨                                  * 00119400
*                  is the name (RS-type) (or address in register      * 00119500
*                  (2)-(12) ASM only) of an optional fullword output  * 00119600
*                  specifying the number of the last buffer entry     * 00119700
*                  that was successfully processed in the TARGLIST.   * 00119800
*                                                                     * 00119900
*                                                                     * 00120000
*                                                                     * 00120100
*                                                                     * 00120200
*              ÝTARGGAP(»xtarggap!0º)¨                                * 00120300
*                  is the name (RS-type) (or address in register      * 00120400
*                  (2)-(12) ASM only) of an optional fullword input   * 00120500
*                  specifying the number of bytes used to separate    * 00120600
*                  buffer entries in TARGLIST or TARLST64.  This      * 00120700
*                  parameter allows the buffer entries to be in       * 00120800
*                  discontiguous storage.  If this parameter is not   * 00120900
*                  specified, buffer entries will be in contiguous    * 00121000
*                  storage.                                           * 00121100
*                  DEFAULT: 0.                                        * 00121200
*                                                                     * 00121300
*                                                                     * 00121400
*                                                                     * 00121500
*                                                                     * 00121600
*              The following is a set of mutually exclusive keys.     * 00121700
*              This set is required; only one key must be specified.  * 00121800
*                                                                     * 00121900
*                                                                     * 00122000
*                  TARGLIST or TARLST64 is required. TARGLIST is      * 00122100
*                  required when IVTCSM is issued in 31-bit           * 00122200
*                  addressing mode. TARLST64 is required when IVTCSM  * 00122300
*                  is issued in 64-bit addressing mode.               * 00122400
*                                                                     * 00122500
*              TARGLIST(xtarglist)                                    * 00122600
*                  belongs to a set of mutually exclusive keys. It is * 00122700
*                  an input.  It is the name (RS-type) (or address in * 00122800
*                  register (2)-(12) ASM only) of an area containing  * 00122900
*                  a list of information about the buffers that are   * 00123000
*                  the target of the copy operation.  Each entry in   * 00123100
*                  the list is a buffer entry mapped by IVTBUFL.  The * 00123200
*                  buffer entry may represent a CSM buffer or a user  * 00123300
*                  data area.                                         * 00123400
*                                                                     * 00123500
*              TARLST64(xtarlst64)                                    * 00123600
*                  belongs to a set of mutually exclusive keys. It is * 00123700
*                  the name (RS-type) (or address in register         * 00123800
*                  (2)-(12) ASM only) of a character input of an area * 00123900
*                  containing a list of information about the buffers * 00124000
*                  that are the target of the copy operation.  Each   * 00124100
*                  entry in the list is a buffer entry mapped by      * 00124200
*                  IVTBUFL.  The buffer entry may represent a CSM     * 00124300
*                  buffer or a user data area.                        * 00124400
*                                                                     * 00124500
*                  The following fields in IVTBUFL are required as    * 00124600
*                  input for this request.                            * 00124700
*                                                                     * 00124800
*                                                                     * 00124900
*                  o   BUFL_VERSION                                   * 00125000
*                                                                     * 00125100
*                  o   BUFL_SOURCE                                    * 00125200
*                                                                     * 00125300
*                  o   BUFL_TOKEN  (Note:  This field is only         * 00125400
*                      required if data is being copied into a CSM    * 00125500
*                      buffer.)                                       * 00125600
*                                                                     * 00125700
*                  o   BUFL_ALET   (Note:  This field is only         * 00125800
*                      required to copy data into a user data space.) * 00125900
*                                                                     * 00126000
*                  o   BUFL_ADDR                                      * 00126100
*                                                                     * 00126200
*                  o   BUFL_SIZE                                      * 00126300
*                                                                     * 00126400
*                                                                     * 00126500
*                  There are no fields in IVTBUFL returned as output, * 00126600
*                  by CSM, for this request.                          * 00126700
*                                                                     * 00126800
*                                                                     * 00126900
*                                                                     * 00127000
*              End of a set of mutually exclusive required keys.      * 00127100
*                                                                     * 00127200
*                                                                     * 00127300
*                                                                     * 00127400
*              TARGNUM(xtargnum)                                      * 00127500
*                  is the name (RS-type) (or address in register      * 00127600
*                  (2)-(12) ASM only) of a required fullword input    * 00127700
*                  specifying the number of target buffers for the    * 00127800
*                  copy.                                              * 00127900
*                                                                     * 00128000
*                                                                     * 00128100
*                                                                     * 00128200
*                                                                     * 00128300
*              ÝTHREAD(»xthread!0º)¨                                  * 00128400
*                  is the name (RS-type) (or address in register      * 00128500
*                  (2)-(12) ASM only) of an optional 4 character      * 00128600
*                  input specifying a unique identifier that is       * 00128700
*                  placed in the CSM trace entry to correlate trace   * 00128800
*                  records with the application that is requesting    * 00128900
*                  the buffers.  It is the CSM user's responsibility  * 00129000
*                  to ensure that this value is different from the    * 00129100
*                  THREAD value specified by other users of the CSM.  * 00129200
*                  One way this can be achieved is by specifying an   * 00129300
*                  ECSA control block for THREAD.                     * 00129400
*                  DEFAULT: 0 indicates that a unique identifier is   * 00129500
*                  not placed in the CSM trace entries.               * 00129600
*                                                                     * 00129700
*                                                                     * 00129800
*                                                                     * 00129900
*                                                                     * 00130000
*              ÝUTILRTN(»xutilrtn!0º)¨                                * 00130100
*                  is the name (RS-type) (or address in register      * 00130200
*                  (2)-(12) ASM only) of an optional fullword input   * 00130300
*                  specifying the return address of the caller of the * 00130400
*                  utility routine.  This parameter is only relevant  * 00130500
*                  to the tracing process.  It should be specified    * 00130600
*                  only if the CSM user requires identification of    * 00130700
*                  the caller of a utility routine in the CSM trace   * 00130800
*                  entry.                                             * 00130900
*                  DEFAULT: 0 indicates that the return address of    * 00131000
*                  the CSM request issuer is placed in the CSM trace  * 00131100
*                  entry.                                             * 00131200
*                                                                     * 00131300
*                                                                     * 00131400
*                                                                     * 00131500
*           REQUEST(CREATE_POOL)                                      * 00131600
*                                                                     * 00131700
*              PURPOSE                                                * 00131800
*                                                                     * 00131900
*              This macroinstruction allows an application to         * 00132000
*              register as a user of a storage pool of buffers        * 00132100
*              residing in ECSA, High Virtual Common storage (HVCOMM) * 00132200
*              or in a data space.                                    * 00132300
*                                                                     * 00132400
*              The structures to maintain the storage pools are       * 00132500
*              created as a result of the first CREATE_POOL request   * 00132600
*              by an application or VTAM.  For storage pools          * 00132700
*              requesting a data space as the storage type, a data    * 00132800
*              space is created on the first request for a pool of    * 00132900
*              this type.                                             * 00133000
*                                                                     * 00133100
*              Multiple storage pools may exist per data space.       * 00133200
*                                                                     * 00133300
*              On the create request, the caller specifies the size   * 00133400
*              of the buffers in the pool to be created (4K, 16K,32K, * 00133500
*              60K, and 180K).  Only one pool of a given size exists  * 00133600
*              per storage type.  Requests by other callers for a     * 00133700
*              pool of the same characteristics will share the        * 00133800
*              existing pool.                                         * 00133900
*                                                                     * 00134000
*              USAGE                                                  * 00134100
*                                                                     * 00134200
*              This macroinstruction should be used by an application * 00134300
*              to request the use of buffers from CSM.                * 00134400
*                                                                     * 00134500
*              CONTEXT                                                * 00134600
*                                                                     * 00134700
*              This macroinstruction must be issued in task mode.     * 00134800
*              This macroinstruction is not allowed in cross memory   * 00134900
*              mode.                                                  * 00135000
*                                                                     * 00135100
*              RETURN CODES AND REASON CODES.                         * 00135200
*                                                                     * 00135300
*              The following codes can be returned to the application * 00135400
*              on this macroinstruction.                              * 00135500
*                                                                     * 00135600
*                                                                     * 00135700
*              RETURN CODE  MEANING                                   * 00135800
*                                                                     * 00135900
*              0            Request completed successfully            * 00136000
*                                                                     * 00136100
*              4            Request did not complete successfully.    * 00136200
*                           See the following reason codes to         * 00136300
*                           determine the type of error encountered.  * 00136400
*                                                                     * 00136500
*                                                                     * 00136600
*                           REASON CODE  MEANING                      * 00136700
*                                                                     * 00136800
*                           3            Specified buffer size is     * 00136900
*                                        larger than supported size.  * 00137000
*                                                                     * 00137100
*                           4            Buffer pool cannot be        * 00137200
*                                        expanded to satisfy request. * 00137300
*                                                                     * 00137400
*                           21           BUFSOURC value is not valid  * 00137500
*                                        for this request.            * 00137600
*                                                                     * 00137700
*                           23           Unable to create the         * 00137800
*                                        specified pool.  Creation of * 00137900
*                                        the pool would cause the     * 00138000
*                                        ECSA maximum limit to be     * 00138100
*                                        exceeded.                    * 00138200
*                                                                     * 00138300
*                           27           Unable to create the         * 00138400
*                                        specified pool.  Creation of * 00138500
*                                        the pool would cause the     * 00138600
*                                        High Virtual Common storage  * 00138700
*                                        (HVCOMM) maximum limit to be * 00138800
*                                        exceeded.                    * 00138900
*                                                                     * 00139000
*                                                                     * 00139100
*                                                                     * 00139200
*              8            System error while processing the         * 00139300
*                           request.  See the following reason codes  * 00139400
*                           to determine the type of error            * 00139500
*                           encountered.                              * 00139600
*                                                                     * 00139700
*                                                                     * 00139800
*                           REASON CODE  MEANING                      * 00139900
*                                                                     * 00140000
*                           1            Unable to obtain storage for * 00140100
*                                        the request.                 * 00140200
*                                                                     * 00140300
*                           2            Schedule SRB fail for PC     * 00140400
*                                        routine.                     * 00140500
*                                                                     * 00140600
*                           3            Unable to create ALET for    * 00140700
*                                        data space.                  * 00140800
*                                                                     * 00140900
*                           4            Error encountered, while     * 00141000
*                                        creating the data space.     * 00141100
*                                                                     * 00141200
*                           5            Unable to create another     * 00141300
*                                        data space.  Number of data  * 00141400
*                                        spaces exceeds the maximum.  * 00141500
*                                                                     * 00141600
*                           6            An abend occurred while      * 00141700
*                                        processing this request.     * 00141800
*                                                                     * 00141900
*                                                                     * 00142000
*                                                                     * 00142100
*                                                                     * 00142200
*                                                                     * 00142300
*              PARAMETERS                                             * 00142400
*                                                                     * 00142500
*                                                                     * 00142600
*              BUFSIZE(xbufsize)                                      * 00142700
*                  is the name (RS-type) (or address in register      * 00142800
*                  (2)-(12) ASM only) of a required fullword input    * 00142900
*                  specifying the size of the buffers in the pool to  * 00143000
*                  be created.  Valid pool sizes are 4K, 16K, 32K,    * 00143100
*                  60K and 180K.  All other values specified on this  * 00143200
*                  parameter are rounded up to the next valid pool    * 00143300
*                  size.  However, if BUFSIZE is greater than 180K,   * 00143400
*                  the CREATE_POOL request is rejected.               * 00143500
*                                                                     * 00143600
*                                                                     * 00143700
*                                                                     * 00143800
*                                                                     * 00143900
*               BUFSOURC(»DSPACE!ECSA!HVCOMMº)                        * 00144000
*                  is a required keyword input specifying the source  * 00144100
*                  of the storage from which the buffers are to be    * 00144200
*                  allocated.                                         * 00144300
*                                                                     * 00144400
*                                                                     * 00144500
*                   BUFSOURC(DSPACE)                                  * 00144600
*                      indicates that the storage pool is to be       * 00144700
*                      created in data space.                         * 00144800
*                                                                     * 00144900
*                                                                     * 00145000
*                      ÝBACK(»31!64º)¨                                * 00145100
*                          is an optional keyword input An optional   * 00145200
*                          input parameter when BUFSOURC=DSPACE       * 00145300
*                          specifying where the data space storage in * 00145400
*                          this pool, when fixed, is allowed to be    * 00145500
*                          backed. Backing of the storage pertains to * 00145600
*                          the location of the real storage to which  * 00145700
*                          the virtual storage is coupled. The        * 00145800
*                          location is transparent with the exception * 00145900
*                          of of the logic used to build I/O          * 00146000
*                          structures which read into or write from   * 00146100
*                          this storage.  The default is BACK=BIT31.  * 00146200
*                          Note that CS/390 supports 64 bit real      * 00146300
*                          storage.                                   * 00146400
*                          DEFAULT: 31                                * 00146500
*                                                                     * 00146600
*                                                                     * 00146700
*                          BACK(31)                                   * 00146800
*                              indicating that the data space storage * 00146900
*                              is only allowed to be backed below the * 00147000
*                              2 Gigabyte bar. Use this option when   * 00147100
*                              I/O will be done into or out of this   * 00147200
*                              storage AND the product building the   * 00147300
*                              I/O structures does not support 64 bit * 00147400
*                              real storage.                          * 00147500
*                                                                     * 00147600
*                          BACK(64)                                   * 00147700
*                              indicating that the data space storage * 00147800
*                              is allowed to be backed on or above    * 00147900
*                              the 2 Gigabyte bar. Use this option    * 00148000
*                              when either I/O will not be performed  * 00148100
*                              on this storage or the product(s) that * 00148200
*                              build the I/O structures supports 64   * 00148300
*                              bit real storage.                      * 00148400
*                                                                     * 00148500
*                                                                     * 00148600
*                                                                     * 00148700
*                                                                     * 00148800
*                                                                     * 00148900
*                   BUFSOURC(ECSA)                                    * 00149000
*                      indicates that the storage pool is to be       * 00149100
*                      created in ECSA.                               * 00149200
*                                                                     * 00149300
*                   BUFSOURC(HVCOMM)                                  * 00149400
*                      indicates that the storage pool is to be       * 00149500
*                      created in High Virtual Common (HVCOMM).  High * 00149600
*                      Virtual Common storage (HVCOMM) is 64-bit      * 00149700
*                      common storage ("above the bar").              * 00149800
*                                                                     * 00149900
*                                                                     * 00150000
*                                                                     * 00150100
*                                                                     * 00150200
*                                                                     * 00150300
*                                                                     * 00150400
*              ÝDS_INFO(xds_info)¨                                    * 00150500
*                  is the name (RS-type) (or address in register      * 00150600
*                  (2)-(12) ASM only) of an optional pointer output   * 00150700
*                  that will contain the address of an area           * 00150800
*                  containing the information required to dump CSM    * 00150900
*                  data spaces mapped by IVTDATSP.  If not specified, * 00151000
*                  the application must reference the parameter list  * 00151100
*                  that is returned by CSM in order the retrieve the  * 00151200
*                  address.                                           * 00151300
*                                                                     * 00151400
*                                                                     * 00151500
*                                                                     * 00151600
*                                                                     * 00151700
*              EXPBUF(xexpbuf)                                        * 00151800
*                  is the name (RS-type) (or address in register      * 00151900
*                  (2)-(12) ASM only) of a required fullword input    * 00152000
*                  specifying the number of buffers by which the pool * 00152100
*                  is expanded when the number of free buffers falls  * 00152200
*                  below the value for MINFREE or when a GET_BUFFER   * 00152300
*                  request needs to be satisfied.                     * 00152400
*                                                                     * 00152500
*                  Valid ranges for EXPBUF are noted below. If a      * 00152600
*                  value outside of a range is specified, then CSM    * 00152700
*                  will use a default value.  The default values for  * 00152800
*                  EXPBUF are also noted below.                       * 00152900
*                                                                     * 00153000
*                                                                     * 00153100
*                        POOL SIZE                  VALID RANGE       * 00153200
*                                DEFAULT                              * 00153300
*                        4K                         1-256             * 00153400
*                                16                                   * 00153500
*                        16K                        1-256             * 00153600
*                                 8                                   * 00153700
*                        32K                        1-128             * 00153800
*                                 4                                   * 00153900
*                        60K                        1-68              * 00154000
*                                 4                                   * 00154100
*                        180K                       1-22              * 00154200
*                                 2                                   * 00154300
*                                                                     * 00154400
*                                                                     * 00154500
*                                                                     * 00154600
*                                                                     * 00154700
*                                                                     * 00154800
*                                                                     * 00154900
*                                                                     * 00155000
*              INITBUF(xinitbuf)                                      * 00155100
*                  is the name (RS-type) (or address in register      * 00155200
*                  (2)-(12) ASM only) of a required fullword input    * 00155300
*                  specifying the initial number of buffers to be     * 00155400
*                  created in the storage pool.  If zero is           * 00155500
*                  specified, the base pool will only be created to   * 00155600
*                  represent the requester as a user of the pool.  In * 00155700
*                  this case, the pool will be expanded on the first  * 00155800
*                  GET_BUFFER macroinstruction based on the           * 00155900
*                  specification for EXPBUF.                          * 00156000
*                                                                     * 00156100
*                  Note that the pool will not contract if the number * 00156200
*                  of buffers currently available is not at a certain * 00156300
*                  value.  The value is determine as the higher of    * 00156400
*                  INITBUF or MINFREE+(2*EXPBUF).                     * 00156500
*                                                                     * 00156600
*                  Valid values for INITBUF are 0-9999.  If a value   * 00156700
*                  outside of this range is specified, then CSM will  * 00156800
*                  use a default value.  The default values for       * 00156900
*                  INITBUF are noted below.                           * 00157000
*                                                                     * 00157100
*                                                                     * 00157200
*                        POOL SIZE                  DEFAULT           * 00157300
*                        4K                         64                * 00157400
*                        16K                        32                * 00157500
*                        32K                        16                * 00157600
*                        60K                        16                * 00157700
*                        180K                       2                 * 00157800
*                                                                     * 00157900
*                                                                     * 00158000
*                                                                     * 00158100
*                                                                     * 00158200
*                                                                     * 00158300
*                                                                     * 00158400
*                                                                     * 00158500
*              MINFREE(xminfree)                                      * 00158600
*                  is the name (RS-type) (or address in register      * 00158700
*                  (2)-(12) ASM only) of a required fullword input    * 00158800
*                  specifying the minimum number of buffers to be     * 00158900
*                  free in the pool at any time. The storage pool     * 00159000
*                  will be expanded if the number of free buffers     * 00159100
*                  falls below this limit.                            * 00159200
*                                                                     * 00159300
*                  Valid values for MINFREE are 0-9999.  If a value   * 00159400
*                  outside of this range is specified, then CSM will  * 00159500
*                  use a default value.  The default values for       * 00159600
*                  MINFREE are noted below.                           * 00159700
*                                                                     * 00159800
*                                                                     * 00159900
*                        POOL SIZE                  DEFAULT           * 00160000
*                        4K                         8                 * 00160100
*                        16K                        4                 * 00160200
*                        32K                        2                 * 00160300
*                        60K                        2                 * 00160400
*                        180K                       1                 * 00160500
*                                                                     * 00160600
*                                                                     * 00160700
*                                                                     * 00160800
*                                                                     * 00160900
*                                                                     * 00161000
*                                                                     * 00161100
*                                                                     * 00161200
*              ÝRETPTOKN(xretptokn)¨                                  * 00161300
*                  is the name (RS-type) (or address in register      * 00161400
*                  (2)-(12) ASM only) of an optional 10 character     * 00161500
*                  output of an area in which the application is to   * 00161600
*                  receive a token representing this user of this     * 00161700
*                  pool.  This token must be supplied as input on the * 00161800
*                  IVTCSM REQUEST=DELETE_POOL and IVTCSM              * 00161900
*                  REQUEST=GET_BUFFER macroinstructions, via the      * 00162000
*                  POOLTOKN parameter, associated with this pool.  If * 00162100
*                  RETPTOKN is not specified, the application must    * 00162200
*                  reference the parameter list that is returned by   * 00162300
*                  CSM in order to retrieve the value for subsequent  * 00162400
*                  requests that require POOLTOKN.                    * 00162500
*                                                                     * 00162600
*                                                                     * 00162700
*                                                                     * 00162800
*                                                                     * 00162900
*              ÝSTATAREA(xstatarea)¨                                  * 00163000
*                  is the name (RS-type) (or address in register      * 00163100
*                  (2)-(12) ASM only) of an optional pointer output   * 00163200
*                  that will contain the address an area containing   * 00163300
*                  the resource statistics mapped by IVTSTATA.  If    * 00163400
*                  not specified, the application must reference the  * 00163500
*                  parameter list that is returned by CSM in order    * 00163600
*                  the retrieve the address.                          * 00163700
*                                                                     * 00163800
*                                                                     * 00163900
*                                                                     * 00164000
*           REQUEST(DELETE_POOL)                                      * 00164100
*                                                                     * 00164200
*              PURPOSE                                                * 00164300
*                                                                     * 00164400
*              This macroinstruction allows an application to         * 00164500
*              indicate that it is no longer a registered user of the * 00164600
*              storage pool.                                          * 00164700
*                                                                     * 00164800
*              Since each pool may have multiple users, a storage     * 00164900
*              pool will not be deleted until all buffers have been   * 00165000
*              returned by all users and delete requests have been    * 00165100
*              received for each registered user.                     * 00165200
*                                                                     * 00165300
*              USAGE                                                  * 00165400
*                                                                     * 00165500
*              This macroinstruction should only be used if an IVTCSM * 00165600
*              REQUEST=CREATE_POOL macroinstruction was previously    * 00165700
*              issued by the application.                             * 00165800
*                                                                     * 00165900
*              CONTEXT                                                * 00166000
*                                                                     * 00166100
*              This macroinstruction must be issued in task mode.     * 00166200
*              This macroinstruction is not allowed in cross memory   * 00166300
*              mode.                                                  * 00166400
*                                                                     * 00166500
*              RETURN CODES AND REASON CODES.                         * 00166600
*                                                                     * 00166700
*              The following codes can be returned to the application * 00166800
*              on this macroinstruction.                              * 00166900
*                                                                     * 00167000
*                                                                     * 00167100
*              RETURN CODE  MEANING                                   * 00167200
*                                                                     * 00167300
*              0            Request completed successfully            * 00167400
*                                                                     * 00167500
*              4            Request did not complete successfully.    * 00167600
*                           See the following reason codes to         * 00167700
*                           determine the type of error encountered.  * 00167800
*                                                                     * 00167900
*                                                                     * 00168000
*                           REASON CODE  MEANING                      * 00168100
*                                                                     * 00168200
*                           2            Requested function not       * 00168300
*                                        supported at the present     * 00168400
*                                        time, service has not been   * 00168500
*                                        initialized                  * 00168600
*                                                                     * 00168700
*                           6            Invalid pool token specified * 00168800
*                                                                     * 00168900
*                                                                     * 00169000
*                                                                     * 00169100
*              8            System error while processing the         * 00169200
*                           request.  See the following reason codes  * 00169300
*                           to determine the type of error            * 00169400
*                           encountered.                              * 00169500
*                                                                     * 00169600
*                                                                     * 00169700
*                           REASON CODE  MEANING                      * 00169800
*                                                                     * 00169900
*                           1            Unable to obtain storage for * 00170000
*                                        the request.                 * 00170100
*                                                                     * 00170200
*                           6            An abend occurred while      * 00170300
*                                        processing this request.     * 00170400
*                                                                     * 00170500
*                                                                     * 00170600
*                                                                     * 00170700
*                                                                     * 00170800
*                                                                     * 00170900
*              PARAMETERS                                             * 00171000
*                                                                     * 00171100
*                                                                     * 00171200
*              POOLTOKN(xpooltokn)                                    * 00171300
*                  is the name (RS-type) (or address in register      * 00171400
*                  (2)-(12) ASM only) of a required 10 character      * 00171500
*                  input of a token representing this user of this    * 00171600
*                  pool.  This must be the token provided to the      * 00171700
*                  application on the associated IVTCSM               * 00171800
*                  REQUEST=CREATE_POOL macroinstruction.              * 00171900
*                                                                     * 00172000
*                                                                     * 00172100
*                                                                     * 00172200
*           REQUEST(DUMP_INFO)                                        * 00172300
*                                                                     * 00172400
*              PURPOSE This macroinstruction requests the address of  * 00172500
*              the information required to include CSM data space     * 00172600
*              information in a dump.                                 * 00172700
*                                                                     * 00172800
*              RETURN CODES AND REASON CODES.                         * 00172900
*                                                                     * 00173000
*              The following codes can be returned to the application * 00173100
*              on this macroinstruction.                              * 00173200
*                                                                     * 00173300
*                                                                     * 00173400
*              RETURN CODE  MEANING                                   * 00173500
*                                                                     * 00173600
*              0            Request completed successfully            * 00173700
*                                                                     * 00173800
*              4            Request did not complete successfully.    * 00173900
*                           See the following reason codes to         * 00174000
*                           determine the type of error encountered.  * 00174100
*                                                                     * 00174200
*                                                                     * 00174300
*                           REASON CODE  MEANING                      * 00174400
*                                                                     * 00174500
*                           2            Requested function not       * 00174600
*                                        supported at the present     * 00174700
*                                        time, service has not been   * 00174800
*                                        initialized                  * 00174900
*                                                                     * 00175000
*                                                                     * 00175100
*                                                                     * 00175200
*                                                                     * 00175300
*                                                                     * 00175400
*              PARAMETERS                                             * 00175500
*                                                                     * 00175600
*                                                                     * 00175700
*              ÝDS_INFO(xds_info)¨                                    * 00175800
*                  is the name (RS-type) (or address in register      * 00175900
*                  (2)-(12) ASM only) of an optional pointer output   * 00176000
*                  that will contain the address of an area           * 00176100
*                  containing the information required to dump CSM    * 00176200
*                  data spaces mapped by IVTDATSP.  If not specified, * 00176300
*                  the application must reference the parameter list  * 00176400
*                  that is returned by CSM in order the retrieve the  * 00176500
*                  address.                                           * 00176600
*                                                                     * 00176700
*                                                                     * 00176800
*                                                                     * 00176900
*           REQUEST(FIX_BUFFER)                                       * 00177000
*                                                                     * 00177100
*              PURPOSE                                                * 00177200
*                                                                     * 00177300
*              This macroinstruction allows an application to change  * 00177400
*              the pageable state of a buffer to be guaranteed to be  * 00177500
*              fixed.                                                 * 00177600
*                                                                     * 00177700
*              USAGE                                                  * 00177800
*                                                                     * 00177900
*              If a buffer is originally requested as guaranteed to   * 00178000
*              be pageable or made eligible to be paged, an           * 00178100
*              application can use this macroinstruction to make the  * 00178200
*              buffer guaranteed to be fixed.                         * 00178300
*                                                                     * 00178400
*              RETURN CODES AND REASON CODES.                         * 00178500
*                                                                     * 00178600
*              The following codes can be returned to the application * 00178700
*              on this macroinstruction.                              * 00178800
*                                                                     * 00178900
*                                                                     * 00179000
*              RETURN CODE  MEANING                                   * 00179100
*                                                                     * 00179200
*              0            Request completed successfully            * 00179300
*                                                                     * 00179400
*              4            Request did not complete successfully.    * 00179500
*                           See the following reason codes to         * 00179600
*                           determine the type of error encountered.  * 00179700
*                                                                     * 00179800
*                                                                     * 00179900
*                           REASON CODE  MEANING                      * 00180000
*                                                                     * 00180100
*                           2            Requested function not       * 00180200
*                                        supported at the present     * 00180300
*                                        time, service has not been   * 00180400
*                                        initialized                  * 00180500
*                                                                     * 00180600
*                           7            Invalid buffer token         * 00180700
*                                        specified                    * 00180800
*                                                                     * 00180900
*                           9            Real storage unavailable to  * 00181000
*                                        provide a fixed buffer, wait * 00181100
*                                        not requested                * 00181200
*                                                                     * 00181300
*                                                                     * 00181400
*                                                                     * 00181500
*              8            System error while processing the         * 00181600
*                           request.  See the following reason codes  * 00181700
*                           to determine the type of error            * 00181800
*                           encountered.                              * 00181900
*                                                                     * 00182000
*                                                                     * 00182100
*                           REASON CODE  MEANING                      * 00182200
*                                                                     * 00182300
*                           6            An abend occurred while      * 00182400
*                                        processing this request.     * 00182500
*                                                                     * 00182600
*                                                                     * 00182700
*                                                                     * 00182800
*                                                                     * 00182900
*                                                                     * 00183000
*              PARAMETERS                                             * 00183100
*                                                                     * 00183200
*                                                                     * 00183300
*              The following is a set of mutually exclusive keys.     * 00183400
*              This set is required; only one key must be specified.  * 00183500
*                                                                     * 00183600
*                                                                     * 00183700
*                  BUFLIST or BUFLST64 is required. BUFLIST is        * 00183800
*                  required when IVTCSM is issued in 31-bit           * 00183900
*                  addressing mode. BUFLST64 is required when IVTCSM  * 00184000
*                  is issued in 64-bit addressing mode.               * 00184100
*                                                                     * 00184200
*              BUFLIST(xbuflist)                                      * 00184300
*                  belongs to a set of mutually exclusive keys. It is * 00184400
*                  an input.  It is the name (RS-type) (or address in * 00184500
*                  register (2)-(12) ASM only) of an area in which    * 00184600
*                  the application program is to provide a list of    * 00184700
*                  buffer entries.  The number of entries in the list * 00184800
*                  is equal to the value specified by the BUFNUM      * 00184900
*                  parameter.                                         * 00185000
*                                                                     * 00185100
*              BUFLST64(xbuflst64)                                    * 00185200
*                  belongs to a set of mutually exclusive keys. It is * 00185300
*                  the name (RS-type) (or address in register         * 00185400
*                  (2)-(12) ASM only) of a character input of an area * 00185500
*                  in which the application program is to provide a   * 00185600
*                  list of 64-bit address buffer entries.  Each       * 00185700
*                  64-bit buffer list entry is mapped by ivtbfl64.    * 00185800
*                  ivtbfl64 includes ivtbufl with the field           * 00185900
*                  BFL64_BUFL. It also redefines the BUFL_ALET and    * 00186000
*                  BUFL_ADDR fields as BUFL_ADDR64 for the 64-bit     * 00186100
*                  buffer address. There is also a flag bit           * 00186200
*                  indicating 64-bit buffer list entry BUFL_BUFLST64. * 00186300
*                                                                     * 00186400
*                  The number of entries in the list is equal to the  * 00186500
*                  value specified by the BUFNUM parameter.           * 00186600
*                                                                     * 00186700
*                  An entry in the buffer list is mapped by IVTBUFL.  * 00186800
*                                                                     * 00186900
*                  The following fields in IVTBUFL are required as    * 00187000
*                  input for this request.                            * 00187100
*                                                                     * 00187200
*                                                                     * 00187300
*                  o   BUFL_VERSION                                   * 00187400
*                                                                     * 00187500
*                  o   BUFL_TOKEN                                     * 00187600
*                                                                     * 00187700
*                                                                     * 00187800
*                  The following field in IVTBUFL is returned as      * 00187900
*                  output by CSM for this request.                    * 00188000
*                                                                     * 00188100
*                                                                     * 00188200
*                  o   BUFL_TYPE                                      * 00188300
*                                                                     * 00188400
*                                                                     * 00188500
*                                                                     * 00188600
*                                                                     * 00188700
*                                                                     * 00188800
*              End of a set of mutually exclusive required keys.      * 00188900
*                                                                     * 00189000
*                                                                     * 00189100
*                                                                     * 00189200
*              BUFNUM(xbufnum)                                        * 00189300
*                  is the name (RS-type) (or address in register      * 00189400
*                  (2)-(12) ASM only) of a required fullword input    * 00189500
*                  specifying the number of buffers to be made        * 00189600
*                  guaranteed to be fixed.                            * 00189700
*                                                                     * 00189800
*                                                                     * 00189900
*                                                                     * 00190000
*                                                                     * 00190100
*              ÝERRBFLST(xerrbflst)¨                                  * 00190200
*                  is the name (RS-type) (or address in register      * 00190300
*                  (2)-(12) ASM only) of an optional fullword output  * 00190400
*                  containing the number of the last buffer entry     * 00190500
*                  that was successfully processed when an error is   * 00190600
*                  detected during processing of the                  * 00190700
*                  macroinstruction.                                  * 00190800
*                                                                     * 00190900
*                                                                     * 00191000
*                                                                     * 00191100
*                                                                     * 00191200
*              ÝGAP(»xgap!0º)¨                                        * 00191300
*                  is the name (RS-type) (or address in register      * 00191400
*                  (2)-(12) ASM only) of an optional fullword input   * 00191500
*                  specifying the number of bytes used to separate    * 00191600
*                  buffer entries.  This parameter allows the buffer  * 00191700
*                  entries to be in discontiguous storage.  If GAP is * 00191800
*                  not specified, buffer entries are in contiguous    * 00191900
*                  storage.                                           * 00192000
*                  DEFAULT: 0.                                        * 00192100
*                                                                     * 00192200
*                                                                     * 00192300
*                                                                     * 00192400
*                                                                     * 00192500
*              ÝCOMPID(»xcompid!0º)¨                                  * 00192600
*                  is the name (RS-type) (or address in register      * 00192700
*                  (2)-(12) ASM only) of an optional byte input       * 00192800
*                  specifying the CS390 component ID of the buffer.   * 00192900
*                  DEFAULT: 0 indicates that component ID is not      * 00193000
*                  specified on CSM request.                          * 00193100
*                                                                     * 00193200
*                                                                     * 00193300
*                                                                     * 00193400
*                                                                     * 00193500
*              ÝCOMPUSER(»xcompuser!0º)¨                              * 00193600
*                  is the name (RS-type) (or address in register      * 00193700
*                  (2)-(12) ASM only) of an optional 4 character      * 00193800
*                  input specifying a unique user value that is       * 00193900
*                  placed in the CSM buffer header.  It is the CSM    * 00194000
*                  user's responsibility to ensure that this value is * 00194100
*                  of value to the component ID.                      * 00194200
*                  DEFAULT: 0 indicates that a unique user value is   * 00194300
*                  not placed in the CSM buffer header.               * 00194400
*                                                                     * 00194500
*                                                                     * 00194600
*                                                                     * 00194700
*                                                                     * 00194800
*              ÝTHREAD(»xthread!0º)¨                                  * 00194900
*                  is the name (RS-type) (or address in register      * 00195000
*                  (2)-(12) ASM only) of an optional 4 character      * 00195100
*                  input specifying a unique identifier that is       * 00195200
*                  placed in the CSM trace entry to correlate trace   * 00195300
*                  records with the application that is requesting    * 00195400
*                  the buffers.  It is the CSM user's responsibility  * 00195500
*                  to ensure that this value is different from the    * 00195600
*                  THREAD value specified by other users of the CSM.  * 00195700
*                  One way this can be achieved is by specifying an   * 00195800
*                  ECSA control block for THREAD.                     * 00195900
*                  DEFAULT: 0 indicates that a unique identifier is   * 00196000
*                  not placed in the CSM trace entries.               * 00196100
*                                                                     * 00196200
*                                                                     * 00196300
*                                                                     * 00196400
*                                                                     * 00196500
*              ÝUTILRTN(»xutilrtn!0º)¨                                * 00196600
*                  is the name (RS-type) (or address in register      * 00196700
*                  (2)-(12) ASM only) of an optional fullword input   * 00196800
*                  specifying the return address of the caller of the * 00196900
*                  utility routine.  This parameter is only relevant  * 00197000
*                  to the tracing process.  It should be specified    * 00197100
*                  only if the CSM user requires identification of    * 00197200
*                  the caller of a utility routine in the CSM trace   * 00197300
*                  entry.                                             * 00197400
*                  DEFAULT: 0 indicates that the return address of    * 00197500
*                  the CSM request issuer is placed in the CSM trace  * 00197600
*                  entry.                                             * 00197700
*                                                                     * 00197800
*                                                                     * 00197900
*                                                                     * 00198000
*                                                                     * 00198100
*              ÝWAIT(»NO!YESº)¨                                       * 00198200
*                  is an optional keyword input specifying whether or * 00198300
*                  not the request should wait for fixed storage to   * 00198400
*                  become available.                                  * 00198500
*                  DEFAULT: NO                                        * 00198600
*                                                                     * 00198700
*                                                                     * 00198800
*                  WAIT(NO)                                           * 00198900
*                      specifies that this macroinstruction completes * 00199000
*                      without waiting for fixed storage to become    * 00199100
*                      available.                                     * 00199200
*                                                                     * 00199300
*                  WAIT(YES)                                          * 00199400
*                      specifies that this macroinstruction will not  * 00199500
*                      complete until fixed storage becomes           * 00199600
*                      available.  If fixed storage is not available, * 00199700
*                      users will be suspended until enough fixed     * 00199800
*                      storage is available to satisfy the request.   * 00199900
*                                                                     * 00200000
*                                                                     * 00200100
*                                                                     * 00200200
*                                                                     * 00200300
*                                                                     * 00200400
*           REQUEST(FREE_BUFFER)                                      * 00200500
*                                                                     * 00200600
*              PURPOSE                                                * 00200700
*                                                                     * 00200800
*              This macroinstruction allows an application to return  * 00200900
*              one or more buffers to a storage pool.  It is also     * 00201000
*              used to logically return a buffer that has been        * 00201100
*              assigned to multiple owners.  The buffer is returned   * 00201200
*              to the storage pool when the last owner returns the    * 00201300
*              buffer and a user free routine was not specified       * 00201400
*              during the initial allocation of the buffer.           * 00201500
*                                                                     * 00201600
*              USAGE                                                  * 00201700
*                                                                     * 00201800
*              An application may specify a free routine address that * 00201900
*              is to receive control when the IVTCSM                  * 00202000
*              REQUEST=FREE_BUFFER macroinstruction is issued.  An    * 00202100
*              application may optionally specify that the free       * 00202200
*              routine address specified when the buffer was obtained * 00202300
*              is to be overridden.  This allows a buffer to be freed * 00202400
*              back to the storage manager that was obtained          * 00202500
*              specifying a free routine address.  This option is     * 00202600
*              requested by specifying FREETO=CSM.  This option must  * 00202700
*              be invoked in this manner only by the requester of the * 00202800
*              buffer that specified a free routine on the GET_BUFFER * 00202900
*              request.  If others use this option, the buffer will   * 00203000
*              not be returned to the original owner of the buffer.   * 00203100
*                                                                     * 00203200
*              The application may optionally specify that the buffer * 00203300
*              obtained is to be cleared when it is returned to the   * 00203400
*              pool on a FREE_BUFFER request.  This provides for      * 00203500
*              secure data to be passed by an application to VTAM     * 00203600
*              such that any residual data will be eliminated once    * 00203700
*              VTAM has finished using the data.  The requester may   * 00203800
*              optionally specify that the buffer is to be cleared    * 00203900
*              when issuing the FREE_BUFFER request.                  * 00204000
*                                                                     * 00204100
*              All IVTCSM REQUEST=GET_BUFFER!ASSIGN_BUFFER            * 00204200
*              macroinstructions must have a corresponding            * 00204300
*              FREE_BUFFER request before the buffer is considered    * 00204400
*              available for reallocation by CSM or before a user     * 00204500
*              free routine is invoked for a buffer obtained          * 00204600
*              specifying a user free routine.  This is necessary to  * 00204700
*              ensure that all users, including the OWNERID of the    * 00204800
*              physical buffer, have finished using the buffer.       * 00204900
*                                                                     * 00205000
*              RETURN CODES AND REASON CODES.                         * 00205100
*                                                                     * 00205200
*              The following codes can be returned to the application * 00205300
*              on this macroinstruction.                              * 00205400
*                                                                     * 00205500
*                                                                     * 00205600
*              RETURN CODE  MEANING                                   * 00205700
*                                                                     * 00205800
*              0            Request completed successfully            * 00205900
*                                                                     * 00206000
*              4            Request did not complete successfully.    * 00206100
*                           See the following reason codes to         * 00206200
*                           determine the type of error encountered.  * 00206300
*                                                                     * 00206400
*                                                                     * 00206500
*                           REASON CODE  MEANING                      * 00206600
*                                                                     * 00206700
*                           2            Requested function not       * 00206800
*                                        supported at the present     * 00206900
*                                        time, service has not been   * 00207000
*                                        initialized                  * 00207100
*                                                                     * 00207200
*                           7            Invalid buffer token         * 00207300
*                                        specified                    * 00207400
*                                                                     * 00207500
*                           31           IVTCSM request was issued in * 00207600
*                                        64-bit and BUFLST64 did not  * 00207700
*                                        start at the double word     * 00207800
*                                        boundary.                    * 00207900
*                                                                     * 00208000
*                                                                     * 00208100
*                                                                     * 00208200
*              8            System error while processing the         * 00208300
*                           request.  See the following reason codes  * 00208400
*                           to determine the type of error            * 00208500
*                           encountered.                              * 00208600
*                                                                     * 00208700
*                                                                     * 00208800
*                           REASON CODE  MEANING                      * 00208900
*                                                                     * 00209000
*                           6            An abend occurred while      * 00209100
*                                        processing this request.     * 00209200
*                                                                     * 00209300
*                                                                     * 00209400
*                                                                     * 00209500
*                                                                     * 00209600
*                                                                     * 00209700
*              PARAMETERS                                             * 00209800
*                                                                     * 00209900
*                                                                     * 00210000
*              The following is a set of mutually exclusive keys.     * 00210100
*              This set is required; only one key must be specified.  * 00210200
*                                                                     * 00210300
*                                                                     * 00210400
*                  BUFLIST or BUFLST64 is required. BUFLIST is        * 00210500
*                  required when IVTCSM is issued in 31-bit           * 00210600
*                  addressing mode. BUFLST64 is required when IVTCSM  * 00210700
*                  is issued in 64-bit addressing mode.               * 00210800
*                                                                     * 00210900
*              BUFLIST(xbuflist)                                      * 00211000
*                  belongs to a set of mutually exclusive keys. It is * 00211100
*                  an input.  It is the name (RS-type) (or address in * 00211200
*                  register (2)-(12) ASM only) of an area containing  * 00211300
*                  a list of buffer entries.  The number of entries   * 00211400
*                  in the list is specified by BUFNUM.                * 00211500
*                                                                     * 00211600
*              BUFLST64(xbuflst64)                                    * 00211700
*                  belongs to a set of mutually exclusive keys. It is * 00211800
*                  the name (RS-type) (or address in register         * 00211900
*                  (2)-(12) ASM only) of a character input of an area * 00212000
*                  containing a list of 64-bit address buffer         * 00212100
*                  entries.  Each 64-bit buffer list entry is mapped  * 00212200
*                  by ivtbfl64. ivtbfl64 includes ivtbufl with the    * 00212300
*                  field BFL64_BUFL. It also redefines the BUFL_ALET  * 00212400
*                  and BUFL_ADDR fields as BUFL_ADDR64 for the 64-bit * 00212500
*                  buffer address. There is also a flag bit           * 00212600
*                  indicating 64-bit buffer list entry BUFL_BUFLST64. * 00212700
*                                                                     * 00212800
*                  The number of entries in the list is provided by   * 00212900
*                  BUFNUM.                                            * 00213000
*                                                                     * 00213100
*                  An entry in the buffer list is mapped by IVTBUFL.  * 00213200
*                                                                     * 00213300
*                  The following fields in IVTBUFL are required as    * 00213400
*                  input for this request.                            * 00213500
*                                                                     * 00213600
*                                                                     * 00213700
*                  o   BUFL_VERSION                                   * 00213800
*                                                                     * 00213900
*                  o   BUFL_SOURCE  (Note:  This field is only        * 00214000
*                      required when SKIPBUF=YES is specified.)       * 00214100
*                                                                     * 00214200
*                  o   BUFL_TOKEN                                     * 00214300
*                                                                     * 00214400
*                                                                     * 00214500
*                                                                     * 00214600
*                  There are no fields in IVTBUFL returned as output  * 00214700
*                  by CSM for this request.                           * 00214800
*                                                                     * 00214900
*                                                                     * 00215000
*                                                                     * 00215100
*              End of a set of mutually exclusive required keys.      * 00215200
*                                                                     * 00215300
*                                                                     * 00215400
*                                                                     * 00215500
*              BUFNUM(xbufnum)                                        * 00215600
*                  is the name (RS-type) (or address in register      * 00215700
*                  (2)-(12) ASM only) of a required fullword input    * 00215800
*                  specifying the number of buffer entries in the     * 00215900
*                  list.                                              * 00216000
*                                                                     * 00216100
*                                                                     * 00216200
*                                                                     * 00216300
*                                                                     * 00216400
*              ÝCLEAR(»NO!YESº)¨                                      * 00216500
*                  is an optional keyword input specifying whether    * 00216600
*                  the buffer is to be cleared when returned to       * 00216700
*                  storage pool.                                      * 00216800
*                  DEFAULT: NO                                        * 00216900
*                                                                     * 00217000
*                                                                     * 00217100
*                  CLEAR(NO)                                          * 00217200
*                      specifies that the buffer is not cleared when  * 00217300
*                      returned to the storage pool.  If the buffer   * 00217400
*                      was originally allocated with a CLEAR value of * 00217500
*                      YES, then CLEAR=NO is ignored by CSM and the   * 00217600
*                      buffer will be cleared when returned to the    * 00217700
*                      storage pool.                                  * 00217800
*                                                                     * 00217900
*                  CLEAR(YES)                                         * 00218000
*                      specifies that the buffer is to be cleared.    * 00218100
*                      Specifying CLEAR=YES will not cause a buffer   * 00218200
*                      to be cleared that is returned via a           * 00218300
*                      user-specified buffer return exit routine.     * 00218400
*                      However, if CLEAR=YES is specified, the buffer * 00218500
*                      is cleared in the event that it is returned to * 00218600
*                      the storage pool.                              * 00218700
*                                                                     * 00218800
*                                                                     * 00218900
*                                                                     * 00219000
*                                                                     * 00219100
*                                                                     * 00219200
*                                                                     * 00219300
*              ÝERRBFLST(xerrbflst)¨                                  * 00219400
*                  is the name (RS-type) (or address in register      * 00219500
*                  (2)-(12) ASM only) of an optional fullword output  * 00219600
*                  specifying the number of the last buffer entry     * 00219700
*                  that was successfully processed when an error is   * 00219800
*                  detected during processing of the                  * 00219900
*                  macroinstruction.                                  * 00220000
*                                                                     * 00220100
*                                                                     * 00220200
*                                                                     * 00220300
*                                                                     * 00220400
*              ÝFREETO(»USER!CSMº)¨                                   * 00220500
*                  is an optional keyword input allowing the FREERTN  * 00220600
*                  parameter on the IVTCSM REQUEST=GET_BUFFER         * 00220700
*                  macroinstruction to be overridden.                 * 00220800
*                  DEFAULT: USER                                      * 00220900
*                                                                     * 00221000
*                                                                     * 00221100
*                  FREETO(USER)                                       * 00221200
*                      specifies that the buffer is to be returned to * 00221300
*                      the buffer return exit routine specified on    * 00221400
*                      the GET_BUFFER request.                        * 00221500
*                                                                     * 00221600
*                  FREETO(CSM)                                        * 00221700
*                      specifies that the buffer return exit routine  * 00221800
*                      address provided when the buffer was obtained  * 00221900
*                      is to be overridden and the buffer is to be    * 00222000
*                      returned to the storage pool.  This option     * 00222100
*                      should only be used by the original owner of   * 00222200
*                      the buffer.                                    * 00222300
*                                                                     * 00222400
*                                                                     * 00222500
*                                                                     * 00222600
*                                                                     * 00222700
*                                                                     * 00222800
*                                                                     * 00222900
*              ÝGAP(»xgap!0º)¨                                        * 00223000
*                  is the name (RS-type) (or address in register      * 00223100
*                  (2)-(12) ASM only) of an optional fullword input   * 00223200
*                  specifying the number of bytes used to separate    * 00223300
*                  buffer entries.  This parameter allows the buffer  * 00223400
*                  entries to be in discontiguous storage.  If GAP is * 00223500
*                  not specified, buffer entries are not contiguous.  * 00223600
*                  DEFAULT: 0.                                        * 00223700
*                                                                     * 00223800
*                                                                     * 00223900
*                                                                     * 00224000
*                                                                     * 00224100
*              ÝSKIPBUF(»NO!YESº)¨                                    * 00224200
*                  is an optional keyword input specifying whether    * 00224300
*                  all entries in the buffer list should be           * 00224400
*                  processed.                                         * 00224500
*                  DEFAULT: NO                                        * 00224600
*                                                                     * 00224700
*                                                                     * 00224800
*                  SKIPBUF(NO)                                        * 00224900
*                      specifies that all the entries in the buffer   * 00225000
*                      list will be processed.  No entries are        * 00225100
*                      skipped.  The BUFL_SOURCE value is not         * 00225200
*                      examined.                                      * 00225300
*                                                                     * 00225400
*                  SKIPBUF(YES)                                       * 00225500
*                      specifies that the only entries in the buffer  * 00225600
*                      list that have a BUFL_SOURCE value indicating  * 00225700
*                      the user's non-CSM storage (BUFL_UDSPACE or    * 00225800
*                      BUFL_USTOR) will be skipped.                   * 00225900
*                                                                     * 00226000
*                                                                     * 00226100
*                                                                     * 00226200
*                                                                     * 00226300
*                                                                     * 00226400
*                                                                     * 00226500
*              ÝCOMPID(»xcompid!0º)¨                                  * 00226600
*                  is the name (RS-type) (or address in register      * 00226700
*                  (2)-(12) ASM only) of an optional byte input       * 00226800
*                  specifying the CS390 component ID of the buffer.   * 00226900
*                  DEFAULT: 0 indicates that component ID is not      * 00227000
*                  specified on CSM request.                          * 00227100
*                                                                     * 00227200
*                                                                     * 00227300
*                                                                     * 00227400
*                                                                     * 00227500
*              ÝCOMPUSER(»xcompuser!0º)¨                              * 00227600
*                  is the name (RS-type) (or address in register      * 00227700
*                  (2)-(12) ASM only) of an optional 4 character      * 00227800
*                  input specifying a unique user value that is       * 00227900
*                  placed in the CSM buffer header.  It is the CSM    * 00228000
*                  user's responsibility to ensure that this value is * 00228100
*                  of value to the component ID.                      * 00228200
*                  DEFAULT: 0 indicates that a unique user value is   * 00228300
*                  not placed in the CSM buffer header.               * 00228400
*                                                                     * 00228500
*                                                                     * 00228600
*                                                                     * 00228700
*                                                                     * 00228800
*              ÝTHREAD(»xthread!0º)¨                                  * 00228900
*                  is the name (RS-type) (or address in register      * 00229000
*                  (2)-(12) ASM only) of an optional 4 character      * 00229100
*                  input specifying a unique identifier that is       * 00229200
*                  placed in the CSM trace entry to correlate trace   * 00229300
*                  records with the application that is requesting    * 00229400
*                  the buffers.  It is the CSM user's responsibility  * 00229500
*                  to ensure that this value is different from the    * 00229600
*                  THREAD value specified by other users of the CSM.  * 00229700
*                  One way this can be achieved is by specifying an   * 00229800
*                  ECSA control block for THREAD.                     * 00229900
*                  DEFAULT: 0 indicates that a unique identifier is   * 00230000
*                  not placed in the CSM trace entry.                 * 00230100
*                                                                     * 00230200
*                                                                     * 00230300
*                                                                     * 00230400
*                                                                     * 00230500
*              ÝUTILRTN(»xutilrtn!0º)¨                                * 00230600
*                  is the name (RS-type) (or address in register      * 00230700
*                  (2)-(12) ASM only) of an optional fullword input   * 00230800
*                  specifying the return address of the caller of the * 00230900
*                  utility routine.  This parameter is only relevant  * 00231000
*                  to the tracing process.  It should be specified    * 00231100
*                  only if the CSM user requires identification of    * 00231200
*                  the caller of a utility routine in the CSM trace   * 00231300
*                  entry.                                             * 00231400
*                  DEFAULT: 0 indicates that the return address of    * 00231500
*                  the CSM request issuer is placed in the CSM trace  * 00231600
*                  entry.                                             * 00231700
*                                                                     * 00231800
*                                                                     * 00231900
*                                                                     * 00232000
*           REQUEST(GET_BUFFER)                                       * 00232100
*                                                                     * 00232200
*              PURPOSE                                                * 00232300
*                                                                     * 00232400
*              This macroinstruction allows an application to request * 00232500
*              one or more buffers of a predetermined size from the   * 00232600
*              CSM storage pool.                                      * 00232700
*                                                                     * 00232800
*              USAGE                                                  * 00232900
*                                                                     * 00233000
*              For the IVTCSM REQUEST=GET_BUFFER macroinstruction,    * 00233100
*              CSM allocates buffers from a pre-existing pool and     * 00233200
*              returns information to the requester needed to address * 00233300
*              the buffer.  This includes the ALET of a buffer that   * 00233400
*              resides in a data space.  The value specified on the   * 00233500
*              POOLTOKN parameter must be the same value returned on  * 00233600
*              the IVTCSM REQUEST=CREATE_POOL macroinstruction via    * 00233700
*              the RETPTOKN parameter.                                * 00233800
*                                                                     * 00233900
*              The application has the option of requesting buffers   * 00234000
*              that are guaranteed to be fixed, guaranteed to be      * 00234100
*              pageable or eligible to be made pageable.  A pageable  * 00234200
*              buffer can be obtained and used when fixed buffers are * 00234300
*              unavailable, and fixed at a later time using the       * 00234400
*              IVTCSM REQUEST=FIX_BUFFER macroinstruction.            * 00234500
*                                                                     * 00234600
*              Ownership of the buffers is assigned to the requesting * 00234700
*              address space by default.  This can be overridden by   * 00234800
*              specifying OWNERID.  The OWNERID is the ASID of the    * 00234900
*              address space.  Ownership of a buffer can be           * 00235000
*              optionally qualified for a given task by specifying    * 00235100
*              TASKID.  The TASKID is a TCB address.                  * 00235200
*                                                                     * 00235300
*              A buffer token is returned with each buffer.  The      * 00235400
*              buffer token is the means by which this buffer is      * 00235500
*              known to CSM.  This token must be used with all other  * 00235600
*              requests to CSM for the associated buffer.             * 00235700
*                                                                     * 00235800
*              The application can also specify a free routine        * 00235900
*              address that is to receive control when the IVTCSM     * 00236000
*              REQUEST=FREE_BUFFER macroinstruction is issued for the * 00236100
*              buffer.  The default is that the buffers are to be     * 00236200
*              returned to CSM.                                       * 00236300
*                                                                     * 00236400
*              The application can also specify that the buffer       * 00236500
*              obtained is to be cleared when it is returned to the   * 00236600
*              pool on a IVTCSM REQUEST=FREE_BUFFER macroinstruction. * 00236700
*              This provides for secure data to be passed by an       * 00236800
*              application to VTAM such that any residual data will   * 00236900
*              be eliminated once VTAM has finished using the data.   * 00237000
*                                                                     * 00237100
*              RETURN CODES AND REASON CODES.                         * 00237200
*                                                                     * 00237300
*              The following codes can be returned to the application * 00237400
*              on this macroinstruction.                              * 00237500
*                                                                     * 00237600
*                                                                     * 00237700
*              RETURN CODE  MEANING                                   * 00237800
*                                                                     * 00237900
*              0            Request completed successfully            * 00238000
*                                                                     * 00238100
*              4            Request did not complete successfully.    * 00238200
*                           See the following reason codes to         * 00238300
*                           determine the type of error encountered.  * 00238400
*                                                                     * 00238500
*                                                                     * 00238600
*                           REASON CODE  MEANING                      * 00238700
*                                                                     * 00238800
*                           2            Requested function not       * 00238900
*                                        supported at the present     * 00239000
*                                        time, service has not been   * 00239100
*                                        initialized                  * 00239200
*                                                                     * 00239300
*                           4            Buffer pool cannot be        * 00239400
*                                        expanded to satisfy request  * 00239500
*                                                                     * 00239600
*                           5            No available buffers in      * 00239700
*                                        pool, wait not requested     * 00239800
*                                                                     * 00239900
*                           6            Invalid pool token specified * 00240000
*                                                                     * 00240100
*                           9            Real storage unavailable to  * 00240200
*                                        provide a fixed buffer, wait * 00240300
*                                        not requested                * 00240400
*                                                                     * 00240500
*                           11           A problem has been detected  * 00240600
*                                        with the pool associated     * 00240700
*                                        with the CSM request. The    * 00240800
*                                        user should free all buffers * 00240900
*                                        when finished using them and * 00241000
*                                        issue a delete pool request  * 00241100
*                                        to terminate usage of this   * 00241200
*                                        pool. To allocate new        * 00241300
*                                        buffers, a new pool must be  * 00241400
*                                        created by issuing a new     * 00241500
*                                        create pool request.         * 00241600
*                                                                     * 00241700
*                           17           Extent has been overlaid.    * 00241800
*                                        Reissue the request.         * 00241900
*                                                                     * 00242000
*                           20           BUFTYPE value specified is   * 00242100
*                                        not valid for this request.  * 00242200
*                                                                     * 00242300
*                           24           ASID specified on OWNERID    * 00242400
*                                        parameter is not active.     * 00242500
*                                                                     * 00242600
*                           31           IVTCSM request was issued in * 00242700
*                                        64-bit and BUFLST64 did not  * 00242800
*                                        start at the double word     * 00242900
*                                        boundary.                    * 00243000
*                                                                     * 00243100
*                                                                     * 00243200
*                                                                     * 00243300
*              8            System error while processing the         * 00243400
*                           request.  See the following reason codes  * 00243500
*                           to determine the type of error            * 00243600
*                           encountered.                              * 00243700
*                                                                     * 00243800
*                                                                     * 00243900
*                           REASON CODE  MEANING                      * 00244000
*                                                                     * 00244100
*                           1            Unable to obtain storage for * 00244200
*                                        the request.                 * 00244300
*                                                                     * 00244400
*                           3            Unable to create ALET for    * 00244500
*                                        data space.                  * 00244600
*                                                                     * 00244700
*                           4            Error encountered, while     * 00244800
*                                        creating the data space.     * 00244900
*                                                                     * 00245000
*                           5            Unable to create another     * 00245100
*                                        data space.  Number of data  * 00245200
*                                        spaces exceeds the maximum.  * 00245300
*                                                                     * 00245400
*                           6            An abend occurred while      * 00245500
*                                        processing this request.     * 00245600
*                                                                     * 00245700
*                                                                     * 00245800
*                                                                     * 00245900
*                                                                     * 00246000
*                                                                     * 00246100
*              PARAMETERS                                             * 00246200
*                                                                     * 00246300
*                                                                     * 00246400
*              The following is a set of mutually exclusive keys.     * 00246500
*              This set is required; only one key must be specified.  * 00246600
*                                                                     * 00246700
*                                                                     * 00246800
*                  BUFLIST or BUFLST64 is required. BUFLIST is        * 00246900
*                  required when IVTCSM is issued in 31-bit           * 00247000
*                  addressing mode. BUFLST64 is required when IVTCSM  * 00247100
*                  is issued in 64-bit addressing mode.               * 00247200
*                                                                     * 00247300
*              BUFLIST(xbuflist)                                      * 00247400
*                  belongs to a set of mutually exclusive keys. It is * 00247500
*                  an input.  It is the name (RS-type) (or address in * 00247600
*                  register (2)-(12) ASM only) of an area containing  * 00247700
*                  a list of buffer entries.  The number of entries   * 00247800
*                  in the list is equal to the value specified by the * 00247900
*                  BUFNUM parameter.                                  * 00248000
*                                                                     * 00248100
*              BUFLST64(xbuflst64)                                    * 00248200
*                  belongs to a set of mutually exclusive keys. It is * 00248300
*                  the name (RS-type) (or address in register         * 00248400
*                  (2)-(12) ASM only) of a character input of an area * 00248500
*                  containing a list of 64-bit address buffer         * 00248600
*                  entries.  Each 64-bit buffer list entry is mapped  * 00248700
*                  by ivtbfl64. ivtbfl64 includes ivtbufl with the    * 00248800
*                  field BFL64_BUFL. It also redefines the BUFL_ALET  * 00248900
*                  and BUFL_ADDR fields as BUFL_ADDR64 for the 64-bit * 00249000
*                  buffer address. There is also a flag bit           * 00249100
*                  indicating 64-bit buffer list entry BUFL_BUFLST64. * 00249200
*                                                                     * 00249300
*                  The number of entries in the list is equal to the  * 00249400
*                  value specified by the BUFNUM parameter.           * 00249500
*                                                                     * 00249600
*                  An entry in the buffer list is mapped by IVTBUFL.  * 00249700
*                                                                     * 00249800
*                  The following field in IVTBUFL is required as      * 00249900
*                  input for this request.                            * 00250000
*                                                                     * 00250100
*                                                                     * 00250200
*                  o   BUFL_VERSION                                   * 00250300
*                                                                     * 00250400
*                                                                     * 00250500
*                  The following fields in IVTBUFL are returned as    * 00250600
*                  output by CSM for this request.                    * 00250700
*                                                                     * 00250800
*                                                                     * 00250900
*                  o   BUFL_SOURCE                                    * 00251000
*                                                                     * 00251100
*                  o   BUFL_TYPE                                      * 00251200
*                                                                     * 00251300
*                  o   BUFL_TOKEN                                     * 00251400
*                                                                     * 00251500
*                  o   BUFL_ALET   (Note:  This field is returned     * 00251600
*                      only if the buffer was allocated from a data   * 00251700
*                      space.)                                        * 00251800
*                                                                     * 00251900
*                  o   BUFL_ADDR                                      * 00252000
*                                                                     * 00252100
*                  o   BUFL_SIZE                                      * 00252200
*                                                                     * 00252300
*                                                                     * 00252400
*                                                                     * 00252500
*                                                                     * 00252600
*                                                                     * 00252700
*              End of a set of mutually exclusive required keys.      * 00252800
*                                                                     * 00252900
*                                                                     * 00253000
*                                                                     * 00253100
*              BUFNUM(xbufnum)                                        * 00253200
*                  is the name (RS-type) (or address in register      * 00253300
*                  (2)-(12) ASM only) of a required fullword input    * 00253400
*                  specifying the number of buffers to be obtained.   * 00253500
*                                                                     * 00253600
*                                                                     * 00253700
*                                                                     * 00253800
*                                                                     * 00253900
*               BUFTYPE(»PAGEELIG!PAGEABLE!FIXEDº)                    * 00254000
*                  is a required keyword input specifying whether the * 00254100
*                  buffers are to be guaranteed to be fixed,          * 00254200
*                  guaranteed to be pageable or eligible to be made   * 00254300
*                  pageable.                                          * 00254400
*                                                                     * 00254500
*                                                                     * 00254600
*                  BUFTYPE(PAGEELIG)                                  * 00254700
*                      indicates that the buffers are eligible to be  * 00254800
*                      made pageable.                                 * 00254900
*                                                                     * 00255000
*                  BUFTYPE(PAGEABLE)                                  * 00255100
*                      indicates that the buffers are to be           * 00255200
*                      guaranteed to be pageable.                     * 00255300
*                                                                     * 00255400
*                  BUFTYPE(FIXED)                                     * 00255500
*                      indicates that buffers are to be guaranteed to * 00255600
*                      be fixed.                                      * 00255700
*                                                                     * 00255800
*                                                                     * 00255900
*                                                                     * 00256000
*                                                                     * 00256100
*                                                                     * 00256200
*                                                                     * 00256300
*              ÝCLEAR(»NO!YESº)¨                                      * 00256400
*                  is an optional keyword input specifying whether    * 00256500
*                  the buffer is to be cleared when returned to the   * 00256600
*                  storage pool.                                      * 00256700
*                  DEFAULT: NO                                        * 00256800
*                                                                     * 00256900
*                                                                     * 00257000
*                  CLEAR(NO)                                          * 00257100
*                      specifies that the buffer is not cleared when  * 00257200
*                      returned to the buffer pool                    * 00257300
*                                                                     * 00257400
*                  CLEAR(YES)                                         * 00257500
*                      specifies that the buffer is cleared.          * 00257600
*                      Specifying CLEAR=YES will not cause a buffer   * 00257700
*                      to be cleared that is returned via a           * 00257800
*                      user-specified buffer return exit routine.     * 00257900
*                      However, if CLEAR=YES is specified, the buffer * 00258000
*                      is cleared in the event that it is returned to * 00258100
*                      the storage pool.                              * 00258200
*                                                                     * 00258300
*                                                                     * 00258400
*                                                                     * 00258500
*                                                                     * 00258600
*                                                                     * 00258700
*                                                                     * 00258800
*              ÝCSMUSER(»NO!YESº)¨                                    * 00258900
*                  is an optional keyword input specifies that CSM    * 00259000
*                  knows about this user address space. This was      * 00259100
*                  through previous Create Pool, Get Buffer, Assign   * 00259200
*                  Buffer or Change Owner request.  If taskid is      * 00259300
*                  used, CSM knows this user taskid from the previous * 00259400
*                  Create Pool, Get Buffer, Assign Buffer or Change   * 00259500
*                  Owner request.                                     * 00259600
*                  DEFAULT: NO                                        * 00259700
*                                                                     * 00259800
*                                                                     * 00259900
*                  CSMUSER(NO)                                        * 00260000
*                      CSM will set the bit in SMCST_OWNER_BITMAP to  * 00260100
*                      indicate the address space in use. For taskid, * 00260200
*                      CSM will set the bit in SMCST_TASK_BITMAP if   * 00260300
*                      taskid is specified.                           * 00260400
*                                                                     * 00260500
*                  CSMUSER(YES)                                       * 00260600
*                      CSM already knows about this address space or  * 00260700
*                      task. It does not need to update owner or task * 00260800
*                      bitmap.                                        * 00260900
*                                                                     * 00261000
*                                                                     * 00261100
*                                                                     * 00261200
*                                                                     * 00261300
*                                                                     * 00261400
*                                                                     * 00261500
*              ÝERRBFLST(xerrbflst)¨                                  * 00261600
*                  is the name (RS-type) (or address in register      * 00261700
*                  (2)-(12) ASM only) of an optional fullword output  * 00261800
*                  containing the number of the last buffer entry     * 00261900
*                  that was successfully processed when an error is   * 00262000
*                  detected during processing of the                  * 00262100
*                  macroinstruction.                                  * 00262200
*                                                                     * 00262300
*                                                                     * 00262400
*                                                                     * 00262500
*                                                                     * 00262600
*              ÝFREERTN(»xfreertn!CSMº)¨                              * 00262700
*                  is the name (RS-type) (or address in register      * 00262800
*                  (2)-(12) ASM only) of an optional pointer input    * 00262900
*                  that contains the address of an application        * 00263000
*                  routine that is to receive control when the buffer * 00263100
*                  is freed.  This allows the buffer to be passed to  * 00263200
*                  another application or product such as VTAM and to * 00263300
*                  receive the buffer back when the receiver is       * 00263400
*                  finished.  The buffer return exit routine is       * 00263500
*                  scheduled for execution in the address space of    * 00263600
*                  the original owner of the buffer.                  * 00263700
*                  DEFAULT: CSM specifies that the buffer is to be    * 00263800
*                  returned to CSM when freed.                        * 00263900
*                                                                     * 00264000
*                                                                     * 00264100
*                                                                     * 00264200
*                                                                     * 00264300
*              ÝGAP(»xgap!0º)¨                                        * 00264400
*                  is the name (RS-type) (or address in register      * 00264500
*                  (2)-(12) ASM only) of an optional fullword input   * 00264600
*                  specifying the number of bytes used to separate    * 00264700
*                  buffer entries.  This parameter allows the buffer  * 00264800
*                  entries to be in discontiguous storage.  If GAP is * 00264900
*                  not specified, buffer entries are contiguous.      * 00265000
*                  DEFAULT: 0.                                        * 00265100
*                                                                     * 00265200
*                                                                     * 00265300
*                                                                     * 00265400
*                                                                     * 00265500
*              ÝOWNERID(»xownerid!0º)¨                                * 00265600
*                  is the name (RS-type) (or address in register      * 00265700
*                  (2)-(12) ASM only) of an optional halfword input   * 00265800
*                  specifying the owner of the buffer being obtained. * 00265900
*                  DEFAULT: 0 indicates that the ASID of the          * 00266000
*                  executing address space is used to determine       * 00266100
*                  ownership.                                         * 00266200
*                                                                     * 00266300
*                                                                     * 00266400
*                                                                     * 00266500
*                                                                     * 00266600
*              ÝCOMPID(»xcompid!0º)¨                                  * 00266700
*                  is the name (RS-type) (or address in register      * 00266800
*                  (2)-(12) ASM only) of an optional byte input       * 00266900
*                  specifying the CS390 component ID of the buffer.   * 00267000
*                  DEFAULT: 0 indicates that component ID is not      * 00267100
*                  specified on CSM request.                          * 00267200
*                                                                     * 00267300
*                                                                     * 00267400
*                                                                     * 00267500
*                                                                     * 00267600
*              ÝCOMPUSER(»xcompuser!0º)¨                              * 00267700
*                  is the name (RS-type) (or address in register      * 00267800
*                  (2)-(12) ASM only) of an optional 4 character      * 00267900
*                  input specifying a unique user value that is       * 00268000
*                  placed in the CSM buffer header.  It is the CSM    * 00268100
*                  user's responsibility to ensure that this value is * 00268200
*                  of value to the component ID.                      * 00268300
*                  DEFAULT: 0 indicates that a unique user value is   * 00268400
*                  not placed in the CSM buffer header.               * 00268500
*                                                                     * 00268600
*                                                                     * 00268700
*                                                                     * 00268800
*                                                                     * 00268900
*              POOLTOKN(xpooltokn)                                    * 00269000
*                  is the name (RS-type) (or address in register      * 00269100
*                  (2)-(12) ASM only) of a required 10 character      * 00269200
*                  input of the token representing this user of this  * 00269300
*                  pool.  This must be the token provided to the      * 00269400
*                  application on the associated IVTCSM               * 00269500
*                  REQUEST=CREATE_POOL macroinstruction.              * 00269600
*                                                                     * 00269700
*                                                                     * 00269800
*                                                                     * 00269900
*                                                                     * 00270000
*              ÝTASKID(»xtaskid!0º)¨                                  * 00270100
*                  is the name (RS-type) (or address in register      * 00270200
*                  (2)-(12) ASM only) of an optional pointer input    * 00270300
*                  that contains the address of a TCB.  This further  * 00270400
*                  qualifies the ownership of a buffer to a specific  * 00270500
*                  task.  If TASKID is not specified, the buffer is   * 00270600
*                  not associated with a task.                        * 00270700
*                  DEFAULT: 0 indicates that no task association is   * 00270800
*                  done.                                              * 00270900
*                                                                     * 00271000
*                                                                     * 00271100
*                                                                     * 00271200
*                                                                     * 00271300
*              ÝTHREAD(»xthread!0º)¨                                  * 00271400
*                  is the name (RS-type) (or address in register      * 00271500
*                  (2)-(12) ASM only) of an optional 4 character      * 00271600
*                  input specifying a unique identifier that is       * 00271700
*                  placed in the CSM trace entry to correlate trace   * 00271800
*                  records with the application that is requesting    * 00271900
*                  the buffers.  It is the CSM user's responsibility  * 00272000
*                  to ensure that this value is different from the    * 00272100
*                  THREAD value specified by other users of the CSM.  * 00272200
*                  One way this can be achieved is by specifying an   * 00272300
*                  ECSA control block for THREAD.                     * 00272400
*                  DEFAULT: 0 indicates that a unique identifier is   * 00272500
*                  not placed in the CSM trace entries.               * 00272600
*                                                                     * 00272700
*                                                                     * 00272800
*                                                                     * 00272900
*                                                                     * 00273000
*              ÝUTILRTN(»xutilrtn!0º)¨                                * 00273100
*                  is the name (RS-type) (or address in register      * 00273200
*                  (2)-(12) ASM only) of an optional fullword input   * 00273300
*                  specifying the return address of the caller of the * 00273400
*                  utility routine.  This parameter is only relevant  * 00273500
*                  to the tracing process.  It should be specified    * 00273600
*                  only if the CSM user requires identification of    * 00273700
*                  the caller of a utility routine in the CSM trace   * 00273800
*                  entry.                                             * 00273900
*                  DEFAULT: 0 indicates that the return address of    * 00274000
*                  the CSM request issuer is placed in the CSM trace  * 00274100
*                  entry.                                             * 00274200
*                                                                     * 00274300
*                                                                     * 00274400
*                                                                     * 00274500
*                                                                     * 00274600
*              ÝWAIT(»NO!YES!EXPANDº)¨                                * 00274700
*                  is an optional keyword input specifying whether or * 00274800
*                  not the request should wait for buffers to become  * 00274900
*                  available.                                         * 00275000
*                  DEFAULT: NO                                        * 00275100
*                                                                     * 00275200
*                                                                     * 00275300
*                  WAIT(NO)                                           * 00275400
*                      specifies that this macroinstruction completes * 00275500
*                      without waiting for an available buffer.       * 00275600
*                                                                     * 00275700
*                  WAIT(YES)                                          * 00275800
*                      specifies that this macroinstruction will not  * 00275900
*                      complete until all buffers become available.   * 00276000
*                      If buffers are not available, users will be    * 00276100
*                      suspended until enough buffers become          * 00276200
*                      available to satisfy the request.              * 00276300
*                                                                     * 00276400
*                  WAIT(EXPAND)                                       * 00276500
*                      specifies that this macroinstruction will wait * 00276600
*                      for pool expansion to complete.  If enough     * 00276700
*                      buffers are not available to satisfy the       * 00276800
*                      request, users will be suspended until         * 00276900
*                      expansion completes.                           * 00277000
*                                                                     * 00277100
*                                                                     * 00277200
*                                                                     * 00277300
*                                                                     * 00277400
*                                                                     * 00277500
*           REQUEST(PAGE_BUFFER)                                      * 00277600
*                                                                     * 00277700
*              PURPOSE                                                * 00277800
*                                                                     * 00277900
*              This macroinstruction allows an application to change  * 00278000
*              the pageable state of a buffer.                        * 00278100
*                                                                     * 00278200
*              USAGE                                                  * 00278300
*                                                                     * 00278400
*              An application can use this macroinstruction to make   * 00278500
*              the buffer guaranteed to be pageable or eligible to be * 00278600
*              paged.                                                 * 00278700
*                                                                     * 00278800
*              When BUFTYPE=PAGEELIG is specified on this             * 00278900
*              macroinstruction, the buffer is marked as eligible to  * 00279000
*              be paged.  It is not physically unfixed unless the     * 00279100
*              storage manager requires real storage to satisfy       * 00279200
*              another storage manager request.  This avoids the      * 00279300
*              potential overhead of unnecessary fixing and freeing   * 00279400
*              of storage.                                            * 00279500
*                                                                     * 00279600
*              This function may be used to avoid consuming real      * 00279700
*              storage for data that is being held in a buffer for    * 00279800
*              possible use at a later time.                          * 00279900
*                                                                     * 00280000
*              When BUFTYPE=PAGEABLE is specified on this             * 00280100
*              macroinstruction, the buffer is marked as guaranteed   * 00280200
*              to be pageable.  This function may be used in          * 00280300
*              situations where a system service requires pageable    * 00280400
*              storage on input. This function can be issued only for * 00280500
*              a buffer consisting of one image.  The reason for this * 00280600
*              restriction is to guarantee that a user of a buffer    * 00280700
*              that has multiple images can successfully issue a      * 00280800
*              FIX_BUFFER request if necessary.  Fixing a buffer      * 00280900
*              requires that the entire buffer be fixed regardless of * 00281000
*              the fact that the user may only be interested in a     * 00281100
*              piece of the buffer.                                   * 00281200
*                                                                     * 00281300
*              In some circumstances, fixing of storage may be        * 00281400
*              required after receiving data from VTAM.  It is        * 00281500
*              possible that multiple applications may be returned    * 00281600
*              tokens representing the same buffer even though the    * 00281700
*              data for each application is in a distinct area of the * 00281800
*              buffer.  This function limits applications that have   * 00281900
*              to handle situations in which multiple images exist to * 00282000
*              those requiring pageable storage.                      * 00282100
*                                                                     * 00282200
*              RETURN CODES AND REASON CODES.                         * 00282300
*                                                                     * 00282400
*              The following codes can be returned to the application * 00282500
*              on this macroinstruction.                              * 00282600
*                                                                     * 00282700
*                                                                     * 00282800
*              RETURN CODE  MEANING                                   * 00282900
*                                                                     * 00283000
*              0            Request completed successfully            * 00283100
*                                                                     * 00283200
*              4            Request did not complete successfully.    * 00283300
*                           See the following reason codes to         * 00283400
*                           determine the type of error encountered.  * 00283500
*                                                                     * 00283600
*                                                                     * 00283700
*                           REASON CODE  MEANING                      * 00283800
*                                                                     * 00283900
*                           2            Requested function not       * 00284000
*                                        supported at the present     * 00284100
*                                        time, service has not been   * 00284200
*                                        initialized                  * 00284300
*                                                                     * 00284400
*                           7            Invalid buffer token         * 00284500
*                                        specified                    * 00284600
*                                                                     * 00284700
*                           10           Request to make a buffer     * 00284800
*                                        pageable denied, more than   * 00284900
*                                        one image of the buffer      * 00285000
*                                        exists                       * 00285100
*                                                                     * 00285200
*                           20           BUFTYPE value specified is   * 00285300
*                                        not valid for this request.  * 00285400
*                                                                     * 00285500
*                                                                     * 00285600
*                                                                     * 00285700
*              8            System error while processing the         * 00285800
*                           request.  See the following reason codes  * 00285900
*                           to determine the type of error            * 00286000
*                           encountered.                              * 00286100
*                                                                     * 00286200
*                                                                     * 00286300
*                           REASON CODE  MEANING                      * 00286400
*                                                                     * 00286500
*                           1            Unable to obtain storage for * 00286600
*                                        the request.                 * 00286700
*                                                                     * 00286800
*                           6            An abend occurred while      * 00286900
*                                        processing this request.     * 00287000
*                                                                     * 00287100
*                                                                     * 00287200
*                                                                     * 00287300
*                                                                     * 00287400
*                                                                     * 00287500
*              PARAMETERS                                             * 00287600
*                                                                     * 00287700
*                                                                     * 00287800
*              The following is a set of mutually exclusive keys.     * 00287900
*              This set is required; only one key must be specified.  * 00288000
*                                                                     * 00288100
*                                                                     * 00288200
*                  BUFLIST or BUFLST64 is required. BUFLIST is        * 00288300
*                  required when IVTCSM is issued in 31-bit           * 00288400
*                  addressing mode. BUFLST64 is required when IVTCSM  * 00288500
*                  is issued in 64-bit addressing mode.               * 00288600
*                                                                     * 00288700
*              BUFLIST(xbuflist)                                      * 00288800
*                  belongs to a set of mutually exclusive keys. It is * 00288900
*                  an input.  It is the name (RS-type) (or address in * 00289000
*                  register (2)-(12) ASM only) of an area containing  * 00289100
*                  a list of buffer entries.  The number of entries   * 00289200
*                  in the list is specified by BUFNUM.                * 00289300
*                                                                     * 00289400
*              BUFLST64(xbuflst64)                                    * 00289500
*                  belongs to a set of mutually exclusive keys. It is * 00289600
*                  the name (RS-type) (or address in register         * 00289700
*                  (2)-(12) ASM only) of a character input of an area * 00289800
*                  containing a list of 64-bit address buffer         * 00289900
*                  entries.  Each 64-bit buffer list entry is mapped  * 00290000
*                  by ivtbfl64. ivtbfl64 includes ivtbufl with the    * 00290100
*                  field BFL64_BUFL. It also redefines the BUFL_ALET  * 00290200
*                  and BUFL_ADDR fields as BUFL_ADDR64 for the 64-bit * 00290300
*                  buffer address. There is also a flag bit           * 00290400
*                  indicating 64-bit buffer list entry BUFL_BUFLST64. * 00290500
*                  The number of entries in the list is provided by   * 00290600
*                  BUFNUM.                                            * 00290700
*                                                                     * 00290800
*                  An entry in the buffer list is mapped by IVTBUFL.  * 00290900
*                                                                     * 00291000
*                  The following fields in IVTBUFL are required as    * 00291100
*                  input for this request.                            * 00291200
*                                                                     * 00291300
*                                                                     * 00291400
*                  o   BUFL_VERSION                                   * 00291500
*                                                                     * 00291600
*                  o   BUFL_TOKEN                                     * 00291700
*                                                                     * 00291800
*                                                                     * 00291900
*                  The following field in IVTBUFL is returned as      * 00292000
*                  output by CSM for this request.                    * 00292100
*                                                                     * 00292200
*                                                                     * 00292300
*                  o   BUFL_TYPE                                      * 00292400
*                                                                     * 00292500
*                                                                     * 00292600
*                                                                     * 00292700
*                                                                     * 00292800
*                                                                     * 00292900
*              End of a set of mutually exclusive required keys.      * 00293000
*                                                                     * 00293100
*                                                                     * 00293200
*                                                                     * 00293300
*              BUFNUM(xbufnum)                                        * 00293400
*                  is the name (RS-type) (or address in register      * 00293500
*                  (2)-(12) ASM only) of a required fullword input    * 00293600
*                  specifying the number of buffers to be made        * 00293700
*                  pageable or eligible to be paged.                  * 00293800
*                                                                     * 00293900
*                                                                     * 00294000
*                                                                     * 00294100
*                                                                     * 00294200
*               BUFTYPE(»PAGEELIG!PAGEABLEº)                          * 00294300
*                  is a required keyword input specifying whether the * 00294400
*                  buffers are to be guaranteed to be pageable or     * 00294500
*                  eligible to be made pageable.                      * 00294600
*                                                                     * 00294700
*                                                                     * 00294800
*                  BUFTYPE(PAGEELIG)                                  * 00294900
*                      indicates that the buffers are eligible to be  * 00295000
*                      made pageable.                                 * 00295100
*                                                                     * 00295200
*                  BUFTYPE(PAGEABLE)                                  * 00295300
*                      indicates that the buffers are to be           * 00295400
*                      guaranteed to be pageable.                     * 00295500
*                                                                     * 00295600
*                                                                     * 00295700
*                                                                     * 00295800
*                                                                     * 00295900
*                                                                     * 00296000
*                                                                     * 00296100
*              ÝGAP(»xgap!0º)¨                                        * 00296200
*                  is the name (RS-type) (or address in register      * 00296300
*                  (2)-(12) ASM only) of an optional fullword input   * 00296400
*                  specifying the number of bytes used to separate    * 00296500
*                  buffer entries.  This parameter allows the buffer  * 00296600
*                  entries to be in discontiguous storage.  If GAP is * 00296700
*                  not specified, buffer entries are contiguous.      * 00296800
*                  DEFAULT: 0.                                        * 00296900
*                                                                     * 00297000
*                                                                     * 00297100
*                                                                     * 00297200
*                                                                     * 00297300
*              ÝERRBFLST(xerrbflst)¨                                  * 00297400
*                  is the name (RS-type) (or address in register      * 00297500
*                  (2)-(12) ASM only) of an optional fullword output  * 00297600
*                  containing the number of the last buffer entry     * 00297700
*                  that was successfully processed when an error is   * 00297800
*                  detected during processing of the                  * 00297900
*                  macroinstruction.                                  * 00298000
*                                                                     * 00298100
*                                                                     * 00298200
*                                                                     * 00298300
*                                                                     * 00298400
*              ÝCOMPID(»xcompid!0º)¨                                  * 00298500
*                  is the name (RS-type) (or address in register      * 00298600
*                  (2)-(12) ASM only) of an optional byte input       * 00298700
*                  specifying the CS390 component ID of the buffer.   * 00298800
*                  DEFAULT: 0 indicates that component ID is not      * 00298900
*                  specified on CSM request.                          * 00299000
*                                                                     * 00299100
*                                                                     * 00299200
*                                                                     * 00299300
*                                                                     * 00299400
*              ÝCOMPUSER(»xcompuser!0º)¨                              * 00299500
*                  is the name (RS-type) (or address in register      * 00299600
*                  (2)-(12) ASM only) of an optional 4 character      * 00299700
*                  input specifying a unique user value that is       * 00299800
*                  placed in the CSM buffer header.  It is the CSM    * 00299900
*                  user's responsibility to ensure that this value is * 00300000
*                  of value to the component ID.                      * 00300100
*                  DEFAULT: 0 indicates that a unique user value is   * 00300200
*                  not placed in the CSM buffer header.               * 00300300
*                                                                     * 00300400
*                                                                     * 00300500
*                                                                     * 00300600
*                                                                     * 00300700
*              ÝTHREAD(»xthread!0º)¨                                  * 00300800
*                  is the name (RS-type) (or address in register      * 00300900
*                  (2)-(12) ASM only) of an optional 4 character      * 00301000
*                  input specifying a unique identifier that is       * 00301100
*                  placed in the CSM trace entry to correlate trace   * 00301200
*                  records with the application that is requesting    * 00301300
*                  the buffers.  It is the CSM user's responsibility  * 00301400
*                  to ensure that this value is different from the    * 00301500
*                  THREAD value specified by other users of the CSM.  * 00301600
*                  One way this can be achieved is by specifying an   * 00301700
*                  ECSA control block for THREAD.                     * 00301800
*                  DEFAULT: 0 indicates that a unique identifier is   * 00301900
*                  not placed in the CSM trace entries.               * 00302000
*                                                                     * 00302100
*                                                                     * 00302200
*                                                                     * 00302300
*                                                                     * 00302400
*              ÝUTILRTN(»xutilrtn!0º)¨                                * 00302500
*                  is the name (RS-type) (or address in register      * 00302600
*                  (2)-(12) ASM only) of an optional fullword input   * 00302700
*                  specifying the return address of the caller of the * 00302800
*                  utility routine.  This parameter is only relevant  * 00302900
*                  to the tracing process.  It should be specified    * 00303000
*                  only if the CSM user requires identification of    * 00303100
*                  the caller of a utility routine in the CSM trace   * 00303200
*                  entry.                                             * 00303300
*                  DEFAULT: 0 indicates that the return address of    * 00303400
*                  the CSM request issuer is placed in the CSM trace  * 00303500
*                  entry.                                             * 00303600
*                                                                     * 00303700
*                                                                     * 00303800
*                                                                     * 00303900
*           REQUEST(RESOURCE_STATS)                                   * 00304000
*                                                                     * 00304100
*              PURPOSE                                                * 00304200
*                                                                     * 00304300
*              This macroinstruction requests that the address of the * 00304400
*              information required to monitor the usage of ECSA,     * 00304500
*              High Virtual Common storage (HVCOMM), data space, and  * 00304600
*              fixed storage be returned.                             * 00304700
*                                                                     * 00304800
*              USAGE                                                  * 00304900
*                                                                     * 00305000
*              When this macroinstruction is issued, CSM returns the  * 00305100
*              address of a 4-byte area containing the status of      * 00305200
*              ECSA, High Virtual Common storage (HVCOMM), data       * 00305300
*              space, and fixed storage resources.  Applications can  * 00305400
*              issue this macroinstruction during initialization      * 00305500
*              processing and use the address throughout normal       * 00305600
*              processing.  The status information contained in this  * 00305700
*              area indicates whether the use of a resource is        * 00305800
*              normal, constrained, or critical.  If a resource usage * 00305900
*              is determined to be constrained or critical, users of  * 00306000
*              CSM can take action to prevent critical shortages that * 00306100
*              might jeopardize the application's or system's         * 00306200
*              operation, including:                                  * 00306300
*                                                                     * 00306400
*                                                                     * 00306500
*              o   Selecting a different storage source for buffer    * 00306600
*                  pools                                              * 00306700
*                                                                     * 00306800
*              o   Limiting usage of fixed storage.                   * 00306900
*                                                                     * 00307000
*                                                                     * 00307100
*                                                                     * 00307200
*              RETURN CODES AND REASON CODES.                         * 00307300
*                                                                     * 00307400
*              The following codes can be returned to the application * 00307500
*              on this macroinstruction.                              * 00307600
*                                                                     * 00307700
*                                                                     * 00307800
*              RETURN CODE  MEANING                                   * 00307900
*                                                                     * 00308000
*              0            Request completed successfully            * 00308100
*                                                                     * 00308200
*              4            Request did not complete successfully.    * 00308300
*                           See the following reason codes to         * 00308400
*                           determine the type of error encountered.  * 00308500
*                                                                     * 00308600
*                                                                     * 00308700
*                           REASON CODE  MEANING                      * 00308800
*                                                                     * 00308900
*                           2            Requested function not       * 00309000
*                                        supported at the present     * 00309100
*                                        time, service has not been   * 00309200
*                                        initialized                  * 00309300
*                                                                     * 00309400
*                                                                     * 00309500
*                                                                     * 00309600
*                                                                     * 00309700
*                                                                     * 00309800
*              PARAMETERS                                             * 00309900
*                                                                     * 00310000
*                                                                     * 00310100
*              ÝSTATAREA(xstatarea)¨                                  * 00310200
*                  is the name (RS-type) (or address in register      * 00310300
*                  (2)-(12) ASM only) of an optional pointer output   * 00310400
*                  that will contain the address of an area           * 00310500
*                  containing the resource statistics mapped by       * 00310600
*                  IVTSTATA.  If not specified, the application must  * 00310700
*                  reference the parameter list that is returned by   * 00310800
*                  CSM in order the retrieve the address.             * 00310900
*                                                                     * 00311000
*                  The information is in a non-fetch protected area   * 00311100
*                  and can be accessed while executing in any storage * 00311200
*                  key.                                               * 00311300
*                                                                     * 00311400
*                                                                     * 00311500
*                                                                     * 00311600
*                                                                     * 00311700
*                                                                     * 00311800
*                                                                     * 00311900
*                                                                     * 00312000
*                                                                     * 00312100
*      ÝRETCODE(xretcode)¨                                            * 00312200
*          is the name (RS-type) of an optional fullword output       * 00312300
*          variable (or register (2)-(12) or (15) ASM only) into      * 00312400
*          which the return code is to be copied from GPR 15.  If you * 00312500
*          specify 15, GPR15, REG15, or R15 (within or without        * 00312600
*          parentheses), the value will be left in GPR 15.  Do not    * 00312700
*          specify RETCODE with MF=M.                                 * 00312800
*                                                                     * 00312900
*                                                                     * 00313000
*                                                                     * 00313100
*                                                                     * 00313200
*      ÝRSNCODE(xrsncode)¨                                            * 00313300
*          is the name (RS-type) of an optional fullword output       * 00313400
*          variable into which the reason code is to be copied from   * 00313500
*          GPR 0.  If you specify 0, 00, GPR0, GPR00, REG0, REG00, or * 00313600
*          R0 (within or without parentheses), the value will be left * 00313700
*          in GPR 0.  Do not specify RSNCODE with MF=M.               * 00313800
*                                                                     * 00313900
*                                                                     * 00314000
*                                                                     * 00314100
*                                                                     * 00314200
*      ÝPLISTVER(»xplistver!IMPLIED_VERSIONº)¨                        * 00314300
*          is an optional byte input decimal value in the "0-2" range * 00314400
*          that specifies the macro version.  PLISTVER is the only    * 00314500
*          key allowed on the list form of MF and determines which    * 00314600
*          parameter list is generated.  The macro keys associated    * 00314700
*          with each supported version of the macro are listed in     * 00314800
*          MACRO USAGE NOTE 3.  Note that MAX may be specified        * 00314900
*          instead of a number, and the parameter list will be of the * 00315000
*          largest size currently supported. This size may grow from  * 00315100
*          release to release (thus possibly affecting the amount of  * 00315200
*          storage needed by your program).  If your program can      * 00315300
*          tolerate this, IBM recommends that you always specify MAX  * 00315400
*          when creating the list form parameter list as that will    * 00315500
*          ensure that the list form parameter list is always long    * 00315600
*          enough to hold whatever parameters might be specified on   * 00315700
*          the execute form.                                          * 00315800
*          DEFAULT: IMPLIED_VERSION.  When PLISTVER is omitted, the   * 00315900
*          default is the lowest version which allows all of the      * 00316000
*          parameters specified on the invocation to be processed.    * 00316100
*                                                                     * 00316200
*                                                                     * 00316300
*                                                                     * 00316400
*                                                                     * 00316500
*      ÝMF(»S!L!M!Eº)¨                                                * 00316600
*          is an optional keyword input which specifies the macro     * 00316700
*          form.                                                      * 00316800
*          DEFAULT: S                                                 * 00316900
*                                                                     * 00317000
*                                                                     * 00317100
*          ÝMF(S)¨                                                    * 00317200
*              specifies the standard form of the macro.  The "S"     * 00317300
*              form generates code to put the parameters into the     * 00317400
*              parameter list and invoke the desired service.  Full   * 00317500
*              checking for required macro keys is done along with    * 00317600
*              supplying defaults for omitted optional parameters.    * 00317700
*              The ?EPILOG macro must be invoked at the end of the    * 00317800
*              module.                                                * 00317900
*                                                                     * 00318000
*              For assembly language code modules, the "S" form       * 00318100
*              generates code to put the parameters into an in-line   * 00318200
*              parameter list and invoke the desired service.  Full   * 00318300
*              checking for required macro keys is done along with    * 00318400
*              supplying defaults for omitted optional parameters.    * 00318500
*                                                                     * 00318600
*          ÝMF(L,xmfctrl»,xmfattr!BDY(DWORD)º)¨                       * 00318700
*              specifies the list form of the macro.  The "L" form    * 00318800
*              defines an area to be used for the parameter list.     * 00318900
*              Only the PLISTVER key may be specified on the          * 00319000
*              invocation.  All other macro parameters are flagged as * 00319100
*              errors.  If PLISTVER is not specified, the original    * 00319200
*              parameter list definition is used.                     * 00319300
*                                                                     * 00319400
*            ,xmfctrl                                                 * 00319500
*              is a required input.  It is the name of a storage area * 00319600
*              for the parameter list.                                * 00319700
*                                                                     * 00319800
*            »,xmfattr!BDY(DWORD)º                                    * 00319900
*              is an optional 60 character input string that varies   * 00320000
*              from 1 to 60 characters. Use it to force boundary      * 00320100
*              alignment of the parameter list. Use only 0F or 0D     * 00320200
*              (assembler-only).                                      * 00320300
*              DEFAULT: 0D for Assembler, BDY(DWORD) for PL/X, which  * 00320400
*              forces the parameter list to a doubleword boundary.    * 00320500
*                                                                     * 00320600
*          ÝMF(M,xmfctrl»,COMPLETE!NOCHECKº)¨                         * 00320700
*              specifies the modify form of the macro.  The "M" form  * 00320800
*              generates code to put the parameters into the          * 00320900
*              parameter list specified by xmfctrl.                   * 00321000
*                                                                     * 00321100
*            ,xmfctrl                                                 * 00321200
*              is a required input.  It is the name (RS-type) (or     * 00321300
*              address in register (1)-(12) ASM only) of a storage    * 00321400
*              area for the parameter list.                           * 00321500
*                                                                     * 00321600
*            »,COMPLETE!NOCHECKº¨                                     * 00321700
*              is an optional keyword input which specifies the       * 00321800
*              degree of macro parameter syntax checking.             * 00321900
*              DEFAULT: COMPLETE                                      * 00322000
*                                                                     * 00322100
*                                                                     * 00322200
*              COMPLETE                                               * 00322300
*                  Checking for required macro keys is done and       * 00322400
*                  defaults are supplied for omitted optional         * 00322500
*                  parameters.  (See Macro Usage Note 2).             * 00322600
*                                                                     * 00322700
*              NOCHECK                                                * 00322800
*                  Checking for required macro keys is not done nor   * 00322900
*                  are defaults supplied for omitted optional         * 00323000
*                  parameters.                                        * 00323100
*                                                                     * 00323200
*                                                                     * 00323300
*                                                                     * 00323400
*          ÝMF(E,xmfctrl»,COMPLETE!NOCHECKº)¨                         * 00323500
*              specifies the execute form of the macro.  The "E" form * 00323600
*              generates code to put the parameters into the          * 00323700
*              parameter list specified by xmfctrl and invoke the     * 00323800
*              desired service.                                       * 00323900
*                                                                     * 00324000
*            ,xmfctrl                                                 * 00324100
*              is a required input.  It is the name (RS-type) (or     * 00324200
*              address in register (1)-(12) ASM only) of a storage    * 00324300
*              area for the parameter list.                           * 00324400
*                                                                     * 00324500
*            »,COMPLETE!NOCHECKº                                      * 00324600
*              is an optional keyword input which specifies the       * 00324700
*              degree of macro parameter syntax checking.             * 00324800
*              DEFAULT: COMPLETE                                      * 00324900
*                                                                     * 00325000
*                                                                     * 00325100
*              COMPLETE                                               * 00325200
*                  Checking for required macro keys is done and       * 00325300
*                  defaults are supplied for omitted optional         * 00325400
*                  parameters.  (See Macro Usage Note 2).             * 00325500
*                                                                     * 00325600
*              NOCHECK                                                * 00325700
*                  Checking for required macro keys is not done nor   * 00325800
*                  are defaults supplied for omitted optional         * 00325900
*                  parameters.                                        * 00326000
*                                                                     * 00326100
*                                                                     * 00326200
*                                                                     * 00326300
*                                                                     * 00326400
*                                                                     * 00326500
*                                                                     * 00326600
*                                                                     * 00326700
*01* ABEND CODES:                                                     * 00326800
*                                                                     * 00326900
*                                                                     * 00327000
*            4C4  Abnormal termination of CSM.                        * 00327100
*                                                                     * 00327200
*                                                                     * 00327300
*                                                                     * 00327400
*                 ABEND REASON CODES:                                 * 00327500
*                                                                     * 00327600
*                 1001    Unable to obtain storage during CSM         * 00327700
*                         initialization.                             * 00327800
*                                                                     * 00327900
*                 1002    The posting of an ECB failed during CSM     * 00328000
*                         initialization.                             * 00328100
*                                                                     * 00328200
*                 1003    Latch error. CSM was not able to create a   * 00328300
*                         latch.                                      * 00328400
*                                                                     * 00328500
*                 1004    The posting of an ECB, waiting for fixed    * 00328600
*                         storage, failed.                            * 00328700
*                                                                     * 00328800
*                                                                     * 00328900
*                                                                     * 00329000
*                                                                     * 00329100
*                                                                     * 00329200
*01* RETURN CODES:                                                    * 00329300
*                                                                     * 00329400
*                                                                     * 00329500
*            0    Request completed successfully                      * 00329600
*                                                                     * 00329700
*            4    Request did not complete successfully, see reason   * 00329800
*                 code to identify the type of error encountered      * 00329900
*                                                                     * 00330000
*                                                                     * 00330100
*                                                                     * 00330200
*                 REASON CODES:                                       * 00330300
*                                                                     * 00330400
*                 1       Requested function not supported            * 00330500
*                                                                     * 00330600
*                 2       Requested function not supported at the     * 00330700
*                         present time, service has not been          * 00330800
*                         initialized                                 * 00330900
*                                                                     * 00331000
*                 3       Specified buffer size is large than         * 00331100
*                         supported size                              * 00331200
*                                                                     * 00331300
*                 4       Buffer pool cannot be expanded to satisfy   * 00331400
*                         request                                     * 00331500
*                                                                     * 00331600
*                 5       No available buffers in pool, wait not      * 00331700
*                         requested                                   * 00331800
*                                                                     * 00331900
*                 6       Invalid pool token specified                * 00332000
*                                                                     * 00332100
*                 7       Invalid buffer token specified buffer,      * 00332200
*                         possible attempt to use a buffer that has   * 00332300
*                         been freed                                  * 00332400
*                                                                     * 00332500
*                 9       Real storage unavailable to provide a fixed * 00332600
*                         buffer, wait not requested                  * 00332700
*                                                                     * 00332800
*                 10      Request to make a buffer pageable denied,   * 00332900
*                         more than one image of the buffer exists    * 00333000
*                                                                     * 00333100
*                 11      A problem has been detected with the pool   * 00333200
*                         associated with the CSM request. The user   * 00333300
*                         should free all buffers when finished using * 00333400
*                         them and issue a delete pool request to     * 00333500
*                         terminate usage of this pool. To allocate   * 00333600
*                         new buffers, a new pool must be created by  * 00333700
*                         issuing a new create pool request.          * 00333800
*                                                                     * 00333900
*                 12      Address and length specified on a copy data * 00334000
*                         request for a source buffer entry is        * 00334100
*                         outside the bounds of the CSM buffer        * 00334200
*                         represented by the specified pool token.    * 00334300
*                                                                     * 00334400
*                 13      Address and length specified on a copy data * 00334500
*                         request for a target buffer entry is        * 00334600
*                         outside the bounds of the CSM buffer        * 00334700
*                         represented by the specified pool token.    * 00334800
*                                                                     * 00334900
*                 14      Copy operation resulted in truncation of    * 00335000
*                         source data due to insufficient buffer      * 00335100
*                         space provided by the target buffer list.   * 00335200
*                                                                     * 00335300
*                 15      Assign buffer request failed because the    * 00335400
*                         state of the buffer is guaranteed to be     * 00335500
*                         pageable.                                   * 00335600
*                                                                     * 00335700
*                 17      Extent has been overlaid.  Reissue the      * 00335800
*                         request.                                    * 00335900
*                                                                     * 00336000
*                 18      BUFL_SOURCE value is not valid for an entry * 00336100
*                         in the Source Buffer list (SRCLIST or       * 00336200
*                         SRCLST64).                                  * 00336300
*                                                                     * 00336400
*                 19      BUFL_SOURCE value is not valid for an entry * 00336500
*                         in the Target Buffer list (TARGLIST).       * 00336600
*                                                                     * 00336700
*                 20      BUFTYPE value specified is not valid for    * 00336800
*                         this request.                               * 00336900
*                                                                     * 00337000
*                 21      BUFSOURC value specified is not valid for   * 00337100
*                         this request.                               * 00337200
*                                                                     * 00337300
*                 22      Source and target buffers overlap.  No data * 00337400
*                         copied from source buffer.                  * 00337500
*                                                                     * 00337600
*                 23      Unable to create the specified pool.        * 00337700
*                         Creation of the pool would cause the ECSA   * 00337800
*                         maximum limit to be exceeded.               * 00337900
*                                                                     * 00338000
*                 24      ASID specified on OWNERID parameter is not  * 00338100
*                         active.                                     * 00338200
*                                                                     * 00338300
*                                                                     * 00338400
*                                                                     * 00338500
*                                                                     * 00338600
*            8    System error while processing the request           * 00338700
*                                                                     * 00338800
*                                                                     * 00338900
*                                                                     * 00339000
*                 REASON CODES:                                       * 00339100
*                                                                     * 00339200
*                 1       Unable to obtain storage for the request.   * 00339300
*                                                                     * 00339400
*                 2       Schedule SRB fail for PC routine.           * 00339500
*                                                                     * 00339600
*                 3       Unable to create ALET for data space.       * 00339700
*                                                                     * 00339800
*                 4       Error encountered, while creating the data  * 00339900
*                         space.                                      * 00340000
*                                                                     * 00340100
*                 5       Unable to create another data space.        * 00340200
*                         Number of data spaces exceeds the maximum.  * 00340300
*                                                                     * 00340400
*                 6       An abend occurred while processing this     * 00340500
*                         request.                                    * 00340600
*                                                                     * 00340700
*                                                                     * 00340800
*                                                                     * 00340900
*                                                                     * 00341000
*                                                                     * 00341100
*01* REASON CODES:                                                    * 00341200
*                                                                     * 00341300
*       Reason codes, as appropriate, are defined under their         * 00341400
*       corresponding return code.                                    * 00341500
*                                                                     * 00341600
*01* MODULE TYPE:  ASSEM-PL/X MACRO                                   * 00341700
*                                                                     * 00341800
*02*   PROCESSOR:  ASSEM-PL/X                                         * 00341900
*                                                                     * 00342000
*01* COMPONENT:  CSM                                                  * 00342100
*                                                                     * 00342200
*01* MACRO USAGE NOTES:                                               * 00342300
*                                                                     * 00342400
*                                                                     * 00342500
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00342600
*        global macro variable.  Any value other than 'NO' will       * 00342700
*        result in the macro expansion being printed.  The default is * 00342800
*        'YES'.  The following examples illustrate how the ZPRINT     * 00342900
*        variable should be set.                                      * 00343000
*                                                                     * 00343100
*                    GBLC &ZPRINT                                     * 00343200
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00343300
*                                                                     * 00343400
*                                                                     * 00343500
*    2.  When using the NOCHECK option in conjunction with the Modify * 00343600
*        and/or  Execute  forms,  be  sure  that  it is preceded by a * 00343700
*        Modify   or  Execute  form  invocation  which  specifies  or * 00343800
*        defaults  to  the  COMPLETE  option.   This insures that the * 00343900
*        parameter  list  is  initialized completely.   The parameter * 00344000
*        list  field which identifies the version number of the macro * 00344100
*        is only set when the Standard form or the Complete option of * 00344200
*        the  Execute/Modify  form  is  used,  or  when  PLISTVER  is * 00344300
*        explicitly  specified.  Be sure that the resulting parameter * 00344400
*        list version number covers all the keys that you use.        * 00344500
*                                                                     * 00344600
*                                                                     * 00344700
*    3.  The  IVTCSM  macro supports multiple versions. The macro key * 00344800
*        list  below  contains the version level in which the key was * 00344900
*        first  introduced.  Positionals  are  identified by the word * 00345000
*        'Positional'  followed by the numeric value of its position. * 00345100
*        Nested  positionals  are  preceded  by their outer key.  The * 00345200
*        lowest value represents the original version and the highest * 00345300
*        value  represents  the  most  recent  version  of the IVTCSM * 00345400
*        macro.    When  specifying  PLISTVER,  be sure that it is at * 00345500
*        least  as high as the highest version number of all the keys * 00345600
*        being used.                                                  * 00345700
*                                                                     * 00345800
*        VERSION   KEY                                                * 00345900
*                                                                     * 00346000
*              0      BACK                                            * 00346100
*                     BUFLIST                                         * 00346200
*                     BUFNUM                                          * 00346300
*                     BUFSIZE                                         * 00346400
*                     BUFSOURC                                        * 00346500
*                     BUFTYPE                                         * 00346600
*                     CLEAR                                           * 00346700
*                     CSMUSER                                         * 00346800
*                     DS_INFO                                         * 00346900
*                     ERRBFLST                                        * 00347000
*                     EXPBUF                                          * 00347100
*                     FREERTN                                         * 00347200
*                     FREETO                                          * 00347300
*                     GAP                                             * 00347400
*                     INITBUF                                         * 00347500
*                     MINFREE                                         * 00347600
*                     OWNERID                                         * 00347700
*                     PAD                                             * 00347800
*                     PADCHAR                                         * 00347900
*                     POOLTOKN                                        * 00348000
*                     REQUEST                                         * 00348100
*                     RETPTOKN                                        * 00348200
*                     SKIPBUF                                         * 00348300
*                     SRCERRL                                         * 00348400
*                     SRCGAP                                          * 00348500
*                     SRCLIST                                         * 00348600
*                     SRCNUM                                          * 00348700
*                     STATAREA                                        * 00348800
*                     TARGERRL                                        * 00348900
*                     TARGGAP                                         * 00349000
*                     TARGLIST                                        * 00349100
*                     TARGNUM                                         * 00349200
*                     TASKID                                          * 00349300
*                     THREAD                                          * 00349400
*                     UTILRTN                                         * 00349500
*                     WAIT                                            * 00349600
*              1      COMPID                                          * 00349700
*                     COMPUSER                                        * 00349800
*              2      BUFLST64                                        * 00349900
*                     SRCLST64                                        * 00350000
*                     TARLST64                                        * 00350100
*                                                                     * 00350200
*                                                                     * 00350300
*                                                                     * 00350400
*01* CHANGE ACTIVITY:                                                 * 00350500
*                                                                     * 00350600
*   Flag LineItem  FMID    Date   ID    Comment                       * 00350700
*                                                                     * 00350800
*$D0= ID@@@MST FPAPI   042295 143576: FAST PATH API FOR APPC          * 00350900
*$S1= P122889  FPAPI   081696 143576: ADD SKIPBUF PARAMETER           * 00351000
*$S2= P123445  FPAPI   090596 143576: CORRECT OVERLAY PROBLEM         * 00351100
*$S3= P125057  FPAPI   121696 143576: DOCUMENTATION CHANGES           * 00351200
*$S4= P125893  FPAPI   070797 984146: Added CSMUSER keyword           * 00351300
*$L1= R12REAL  CSV1R2   081400 578000: 64 bit real support            * 00351400
*$Q1= R16CSM   CSV1R5  081202 HARISHS: Added COMPID,COMPUSER          * 00351500
*$31= RFN64BIT CSV2R2  130516 HARISHS: 64-Bit addr support            * 00351600
*$32= 21424   RFN64BIT 140422 HARISHS: Add comments                   * 00351700
*$33=  24740   RFN64BIT 140619 PatBrown: Validate BUFLIST  $34= 25493 * 00351800
*FN64BIT 140714 HARISHS : Clear low order bit                         * 00351900
*                                                                     * 00352000
*$MAC(IVTCSM) COMP(CSM) PROD(VTAM): CSM INTERFACE MACRO               * 00352100
****** END OF SPECIFICATIONS *****************************************/ 00352200
*/********************************************************************* 00352300
         MACRO                                                          00352400
&XLABEL  IVTCSM &REQUEST=,&BUFLIST=,&BUFLST64=,&BUFNUM=,&BUFTYPE=,     *00352500
               &CSMUSER=,&GAP=,&ERRBFLST=,&OWNERID=,&COMPID=,          *00352600
               &COMPUSER=,&TASKID=,&THREAD=,&UTILRTN=,&SKIPBUF=,&PAD=, *00352700
               &PADCHAR=,&SRCERRL=,&SRCGAP=,&SRCLIST=,&SRCLST64=,      *00352800
               &SRCNUM=,&TARGERRL=,&TARGGAP=,&TARGLIST=,&TARLST64=,    *00352900
               &TARGNUM=,&BUFSIZE=,&BUFSOURC=,&BACK=,&DS_INFO=,        *00353000
               &EXPBUF=,&INITBUF=,&MINFREE=,&RETPTOKN=,&STATAREA=,     *00353100
               &POOLTOKN=,&WAIT=,&CLEAR=,&FREETO=,&FREERTN=,&RETCODE=, *00353200
               &RSNCODE=,&PLISTVER=,&MF=                                00353300
.*                                                                      00353400
*                    MACDATE -13/05/17-<2>                              00353500
.*                                                                      00353600
.*******************************************************************    00353700
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00353800
.*******************************************************************    00353900
                    GBLC  &ZPRINT     YES=PRINT NO=NO PRINT             00354000
                    GBLC  &ZTEST      YES=TEST NO=NO TEST               00354100
                    GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX       00354200
.*                                                                      00354300
                    GBLC  &ZIVTCSM    YES=MACRO USED AT LEAST ONCE      00354400
.*******************************************************************    00354500
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00354600
.*******************************************************************    00354700
                    LCLC  &ZMS        ERROR MESSAGE WORK AREA           00354800
                    LCLC  &ZCNDX      SYSNDX CHARACTERS                 00354900
                    LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED        00355000
                    LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR       00355100
                    LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE       00355200
                    LCLA  &ZAWRK      USED AS A WORK AREA               00355300
                    LCLA  &ZASIZ      USED FOR SIZE OF VALUE            00355400
                    LCLA  &ZN         NUMERIC WORK VARIABLE             00355500
                    LCLC  &ZC         CHARACTER WORK VARIABLE           00355600
                    LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE       00355700
                    LCLA  &ZTLA       VALUE TOO LONG VARIABLE           00355800
                    LCLC  &ZMAC_G     "G" or null                       00355900
&ZMAC_G             SETC  ''                                            00356000
                    LCLC  &ZMAC_LR                                      00356100
&ZMAC_LR            SETC  'LR'                                          00356200
                    LCLC  &ZMAC_L                                       00356300
&ZMAC_L             SETC  'L'                                           00356400
                    LCLC  &ZMAC_ST                                      00356500
&ZMAC_ST            SETC  'ST'                                          00356600
                    LCLC  &ZMAC_LLGT                                    00356700
&ZMAC_LLGT          SETC  'L'                                           00356800
                    LCLC  &ZMAC_LGR                                     00356900
&ZMAC_LGR           SETC  'LR'                                          00357000
                    LCLC  &ZMAC_LG                                      00357100
&ZMAC_LG            SETC  'L'                                           00357200
                    LCLC  &ZMAC_STG                                     00357300
&ZMAC_STG           SETC  'ST'                                          00357400
                    LCLA  &ZMACRET    MACRO RETURN CODE                 00357500
&ZMACRET            SETA  0           ASSUME NO ERRORS                  00357600
.*                                                                      00357700
                    LCLC  &ZCSYSLIST(255)       NONXKEY, POS ARRAY      00357800
                    LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()        00357900
                    LCLA  &ZPLLEN     PARAMETER LIST LENGTH             00358000
                    LCLC  &ZENDBASEPL           End of base PL          00358100
                    LCLA  &ZPLWORKA   PARAMETER LIST LENGTH             00358200
.*******************************************************************    00358300
.***AB.04  MACRO VARIABLES FOR RANGES AND SETS OF ARGUMENTS             00358400
.*******************************************************************    00358500
                    LCLA  &ZI         INDEX FOR ARRAY                   00358600
                    LCLA  &ZJ         INDEX FOR PARMS                   00358700
                    LCLA  &ZK         INDEX FOR PARSE                   00358800
                    LCLA  &ZLO        LOW RANGE VALUE                   00358900
                    LCLA  &ZHI        HIGH RANGE VALUE                  00359000
                    LCLC  &ZW         WORK AREA FOR PARM                00359100
.********************************************************************   00359200
.***AB.05  INVOKE MVS MACROS TO CONTROL CODE GENERATION                 00359300
.********************************************************************   00359400
                    GBLC  &SYSSPLV    SP LEVEL 1,2,3 -SPLEVEL           00359500
                    GBLC  &SYSASCE    SYSTEM STATE P ANY AR-SYSSTATE    00359600
                    GBLA  &SYSALVL    SYSSTATE ARCHLVL                  00359700
                    GBLC  &SYSAM64    SYSSTATE AMODE64                  00359800
.*                                                                      00359900
                    AIF   (K'&SYSASCE GT 0).ZSYS4  SYS STATE DEFINED    00360000
                    AIF   (K'&SYSSPLV GT 0).ZSYS2  SP LEVEL DEFINED     00360100
                    SPLEVEL  TEST                                       00360200
.ZSYS2              ANOP  ,                                             00360300
                    AIF   ('&SYSSPLV' EQ '1').ZSYS3  PRE SP 3.1         00360400
                    AIF   ('&SYSSPLV' EQ '2').ZSYS3  PRE SP 3.1         00360500
                    SYSSTATE TEST                                       00360600
                    AGO   .ZSYS4                                        00360700
.ZSYS3              ANOP  ,                                             00360800
&SYSASCE            SETC  'P'         ASSUME SYSSTATE PRIMARY           00360900
.ZSYS4              ANOP  ,                                             00361000
                    AIF   ('&SYSAM64' NE 'YES').ZSYSN64                 00361100
&ZMAC_LLGT          SETC 'LLGT'                                         00361200
&ZMAC_LGR           SETC 'LGR'                                          00361300
&ZMAC_LG            SETC 'LG'                                           00361400
&ZMAC_STG           SETC 'STG'                                          00361500
.ZSYSN64            ANOP  ,                                             00361600
                    AIF   (&SYSALVL LE 1).ZSYS4A                        00361700
&ZMAC_G             SETC 'G'                                            00361800
&ZMAC_LR            SETC 'LGR'                                          00361900
&ZMAC_L             SETC 'LG'                                           00362000
&ZMAC_ST            SETC 'STG'                                          00362100
.ZSYS4A             ANOP  ,                                             00362200
.*******************************************************************    00362300
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00362400
.*******************************************************************    00362500
                    LCLC  &XREQUEST   ++ VALUE                          00362600
                    LCLC  &XDUMMY1    ++ NAME                           00362700
                    LCLC  &XBUFLIST   ++ NAME                           00362800
                    LCLC  &XBUFLST64  ++ NAME                           00362900
                    LCLC  &XBUFNUM    ++ NAME                           00363000
                    LCLC  &XBUFTYPE   ++ VALUE                          00363100
                    LCLC  &XCSMUSER   ++ VALUE                          00363200
                    LCLC  &XGAP       ++ NAME                           00363300
                    LCLC  &XERRBFLST  ++ NAME                           00363400
                    LCLC  &XOWNERID   ++ NAME                           00363500
                    LCLC  &XCOMPID    ++ NAME                           00363600
                    LCLC  &XCOMPUSER  ++ NAME                           00363700
                    LCLC  &XTASKID    ++ NAME                           00363800
                    LCLC  &XTHREAD    ++ NAME                           00363900
                    LCLC  &XUTILRTN   ++ NAME                           00364000
                    LCLC  &XDUMMY2    ++ NAME                           00364100
                    LCLC  &XSKIPBUF   ++ VALUE                          00364200
                    LCLC  &XPAD       ++ VALUE                          00364300
                    LCLC  &XPADCHAR   ++ NAME                           00364400
                    LCLC  &XSRCERRL   ++ NAME                           00364500
                    LCLC  &XSRCGAP    ++ NAME                           00364600
                    LCLC  &XDUMMY3    ++ NAME                           00364700
                    LCLC  &XSRCLIST   ++ NAME                           00364800
                    LCLC  &XSRCLST64  ++ NAME                           00364900
                    LCLC  &XSRCNUM    ++ NAME                           00365000
                    LCLC  &XTARGERRL  ++ NAME                           00365100
                    LCLC  &XTARGGAP   ++ NAME                           00365200
                    LCLC  &XDUMMY4    ++ NAME                           00365300
                    LCLC  &XTARGLIST  ++ NAME                           00365400
                    LCLC  &XTARLST64  ++ NAME                           00365500
                    LCLC  &XTARGNUM   ++ NAME                           00365600
                    LCLC  &XBUFSIZE   ++ NAME                           00365700
                    LCLC  &XBUFSOURC  ++ VALUE                          00365800
                    LCLC  &XBACK      ++ VALUE                          00365900
                    LCLC  &XDS_INFO   ++ NAME                           00366000
                    LCLC  &XEXPBUF    ++ NAME                           00366100
                    LCLC  &XINITBUF   ++ NAME                           00366200
                    LCLC  &XMINFREE   ++ NAME                           00366300
                    LCLC  &XRETPTOKN  ++ NAME                           00366400
                    LCLC  &XSTATAREA  ++ NAME                           00366500
                    LCLC  &XPOOLTOKN  ++ NAME                           00366600
                    LCLC  &XDUMMY5    ++ NAME                           00366700
                    LCLC  &XWAIT      ++ VALUE                          00366800
                    LCLC  &XDUMMY6    ++ NAME                           00366900
                    LCLC  &XCLEAR     ++ VALUE                          00367000
                    LCLC  &XFREETO    ++ VALUE                          00367100
                    LCLC  &XDUMMY7    ++ NAME                           00367200
                    LCLC  &XFREERTN   ++ NAME                           00367300
                    LCLC  &XDUMMY8    ++ NAME                           00367400
                    LCLC  &XRETCODE   ++ NAME                           00367500
                    LCLC  &XRSNCODE   ++ NAME                           00367600
                    LCLA  &XPLISTVER  ++ VALUE                          00367700
                    LCLC  &XMF        ++ VALUE                          00367800
                    LCLC  &XMFCTRL    ++ NAME                           00367900
                    LCLC  &XMFATTR    ++ VALUE                          00368000
                    LCLC  &XMFSCK     ++ VALUE                          00368100
.*******************************************************************    00368200
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00368300
.*******************************************************************    00368400
                    LCLC  &ZXREQUEST  ++ INPUT VALUE                    00368500
                    LCLC  &ZXDUMMY1   ++ INPUT NAME                     00368600
                    LCLC  &ZXBUFLIST  ++ INPUT NAME                     00368700
                    LCLC  &ZXBUFLST64           ++ INPUT NAME           00368800
                    LCLC  &ZXBUFNUM   ++ INPUT NAME                     00368900
                    LCLC  &ZXBUFTYPE  ++ INPUT VALUE                    00369000
                    LCLC  &ZXCSMUSER  ++ INPUT VALUE                    00369100
                    LCLC  &ZXGAP      ++ INPUT NAME                     00369200
                    LCLC  &ZXERRBFLST           ++ OUTPUT NAME          00369300
                    LCLC  &ZXOWNERID  ++ INPUT NAME                     00369400
                    LCLC  &ZXCOMPID   ++ INPUT NAME                     00369500
                    LCLC  &ZXCOMPUSER           ++ INPUT NAME           00369600
                    LCLC  &ZXTASKID   ++ INPUT NAME                     00369700
                    LCLC  &ZXTHREAD   ++ INPUT NAME                     00369800
                    LCLC  &ZXUTILRTN  ++ INPUT NAME                     00369900
                    LCLC  &ZXDUMMY2   ++ INPUT NAME                     00370000
                    LCLC  &ZXSKIPBUF  ++ INPUT VALUE                    00370100
                    LCLC  &ZXPAD      ++ INPUT VALUE                    00370200
                    LCLC  &ZXPADCHAR  ++ INPUT NAME                     00370300
                    LCLC  &ZXSRCERRL  ++ OUTPUT NAME                    00370400
                    LCLC  &ZXSRCGAP   ++ INPUT NAME                     00370500
                    LCLC  &ZXDUMMY3   ++ INPUT NAME                     00370600
                    LCLC  &ZXSRCLIST  ++ INPUT NAME                     00370700
                    LCLC  &ZXSRCLST64           ++ INPUT NAME           00370800
                    LCLC  &ZXSRCNUM   ++ INPUT NAME                     00370900
                    LCLC  &ZXTARGERRL           ++ OUTPUT NAME          00371000
                    LCLC  &ZXTARGGAP  ++ INPUT NAME                     00371100
                    LCLC  &ZXDUMMY4   ++ INPUT NAME                     00371200
                    LCLC  &ZXTARGLIST           ++ INPUT NAME           00371300
                    LCLC  &ZXTARLST64           ++ INPUT NAME           00371400
                    LCLC  &ZXTARGNUM  ++ INPUT NAME                     00371500
                    LCLC  &ZXBUFSIZE  ++ INPUT NAME                     00371600
                    LCLC  &ZXBUFSOURC           ++ INPUT VALUE          00371700
                    LCLC  &ZXBACK     ++ INPUT VALUE                    00371800
                    LCLC  &ZXDS_INFO  ++ OUTPUT NAME                    00371900
                    LCLC  &ZXEXPBUF   ++ INPUT NAME                     00372000
                    LCLC  &ZXINITBUF  ++ INPUT NAME                     00372100
                    LCLC  &ZXMINFREE  ++ INPUT NAME                     00372200
                    LCLC  &ZXRETPTOKN           ++ OUTPUT NAME          00372300
                    LCLC  &ZXSTATAREA           ++ OUTPUT NAME          00372400
                    LCLC  &ZXPOOLTOKN           ++ INPUT NAME           00372500
                    LCLC  &ZXDUMMY5   ++ INPUT NAME                     00372600
                    LCLC  &ZXWAIT     ++ INPUT VALUE                    00372700
                    LCLC  &ZXDUMMY6   ++ INPUT NAME                     00372800
                    LCLC  &ZXCLEAR    ++ INPUT VALUE                    00372900
                    LCLC  &ZXFREETO   ++ INPUT VALUE                    00373000
                    LCLC  &ZXDUMMY7   ++ INPUT NAME                     00373100
                    LCLC  &ZXFREERTN  ++ INPUT NAME                     00373200
                    LCLC  &ZXDUMMY8   ++ INPUT NAME                     00373300
                    LCLC  &ZXRETCODE  ++ OUTPUT NAME                    00373400
                    LCLC  &ZXRSNCODE  ++ OUTPUT NAME                    00373500
                    LCLC  &ZXPLISTVER           ++ INPUT VALUE          00373600
                    LCLC  &ZXMF       ++ INPUT VALUE                    00373700
                    LCLC  &ZXMFCTRL   ++ INPUT NAME                     00373800
                    LCLC  &ZXMFATTR   ++ INPUT VALUE                    00373900
                    LCLC  &ZXMFSCK    ++ INPUT VALUE                    00374000
.********************************************************************   00374100
.***AC.PLV01  PROCESS PLISTVER                                      *   00374200
.********************************************************************   00374300
&XPLISTVER      SETA  0                                                 00374400
                AIF   (K'&PLISTVER(1) LE 0).ZPLV0                       00374500
                AIF   ('&PLISTVER(1)' NE 'MAX').ZPLV0                   00374600
&XPLISTVER      SETA  2                                                 00374700
.ZPLV0          ANOP  ,                                                 00374800
.*                                                                      00374900
                AIF   ('&BUFLST64' EQ '').ZPLV1E                        00375000
                AIF   (&XPLISTVER GE 2).ZPLV1E                          00375100
&XPLISTVER      SETA  2                                                 00375200
.ZPLV1E         ANOP  ,                                                 00375300
.*                                                                      00375400
                AIF   ('&COMPID' EQ '').ZPLV2E                          00375500
                AIF   (&XPLISTVER GE 1).ZPLV2E                          00375600
&XPLISTVER      SETA  1                                                 00375700
.ZPLV2E         ANOP  ,                                                 00375800
.*                                                                      00375900
                AIF   ('&COMPUSER' EQ '').ZPLV3E                        00376000
                AIF   (&XPLISTVER GE 1).ZPLV3E                          00376100
&XPLISTVER      SETA  1                                                 00376200
.ZPLV3E         ANOP  ,                                                 00376300
.*                                                                      00376400
                AIF   ('&BUFLST64' EQ '').ZPLV4E                        00376500
                AIF   (&XPLISTVER GE 2).ZPLV4E                          00376600
&XPLISTVER      SETA  2                                                 00376700
.ZPLV4E         ANOP  ,                                                 00376800
.*                                                                      00376900
                AIF   ('&COMPID' EQ '').ZPLV5E                          00377000
                AIF   (&XPLISTVER GE 1).ZPLV5E                          00377100
&XPLISTVER      SETA  1                                                 00377200
.ZPLV5E         ANOP  ,                                                 00377300
.*                                                                      00377400
                AIF   ('&COMPUSER' EQ '').ZPLV6E                        00377500
                AIF   (&XPLISTVER GE 1).ZPLV6E                          00377600
&XPLISTVER      SETA  1                                                 00377700
.ZPLV6E         ANOP  ,                                                 00377800
.*                                                                      00377900
                AIF   ('&SRCLST64' EQ '').ZPLV7E                        00378000
                AIF   (&XPLISTVER GE 2).ZPLV7E                          00378100
&XPLISTVER      SETA  2                                                 00378200
.ZPLV7E         ANOP  ,                                                 00378300
.*                                                                      00378400
                AIF   ('&TARLST64' EQ '').ZPLV8E                        00378500
                AIF   (&XPLISTVER GE 2).ZPLV8E                          00378600
&XPLISTVER      SETA  2                                                 00378700
.ZPLV8E         ANOP  ,                                                 00378800
.*                                                                      00378900
                AIF   ('&BUFLST64' EQ '').ZPLV9E                        00379000
                AIF   (&XPLISTVER GE 2).ZPLV9E                          00379100
&XPLISTVER      SETA  2                                                 00379200
.ZPLV9E         ANOP  ,                                                 00379300
.*                                                                      00379400
                AIF   ('&COMPID' EQ '').ZPLV10E                         00379500
                AIF   (&XPLISTVER GE 1).ZPLV10E                         00379600
&XPLISTVER      SETA  1                                                 00379700
.ZPLV10E        ANOP  ,                                                 00379800
.*                                                                      00379900
                AIF   ('&COMPUSER' EQ '').ZPLV11E                       00380000
                AIF   (&XPLISTVER GE 1).ZPLV11E                         00380100
&XPLISTVER      SETA  1                                                 00380200
.ZPLV11E        ANOP  ,                                                 00380300
.*                                                                      00380400
                AIF   ('&BUFLST64' EQ '').ZPLV12E                       00380500
                AIF   (&XPLISTVER GE 2).ZPLV12E                         00380600
&XPLISTVER      SETA  2                                                 00380700
.ZPLV12E        ANOP  ,                                                 00380800
.*                                                                      00380900
                AIF   ('&COMPID' EQ '').ZPLV13E                         00381000
                AIF   (&XPLISTVER GE 1).ZPLV13E                         00381100
&XPLISTVER      SETA  1                                                 00381200
.ZPLV13E        ANOP  ,                                                 00381300
.*                                                                      00381400
                AIF   ('&COMPUSER' EQ '').ZPLV14E                       00381500
                AIF   (&XPLISTVER GE 1).ZPLV14E                         00381600
&XPLISTVER      SETA  1                                                 00381700
.ZPLV14E        ANOP  ,                                                 00381800
.*                                                                      00381900
                AIF   ('&BUFLST64' EQ '').ZPLV15E                       00382000
                AIF   (&XPLISTVER GE 2).ZPLV15E                         00382100
&XPLISTVER      SETA  2                                                 00382200
.ZPLV15E        ANOP  ,                                                 00382300
.*                                                                      00382400
                AIF   ('&COMPID' EQ '').ZPLV16E                         00382500
                AIF   (&XPLISTVER GE 1).ZPLV16E                         00382600
&XPLISTVER      SETA  1                                                 00382700
.ZPLV16E        ANOP  ,                                                 00382800
.*                                                                      00382900
                AIF   ('&COMPUSER' EQ '').ZPLV17E                       00383000
                AIF   (&XPLISTVER GE 1).ZPLV17E                         00383100
&XPLISTVER      SETA  1                                                 00383200
.ZPLV17E        ANOP  ,                                                 00383300
.*                                                                      00383400
                AIF   ('&BUFLST64' EQ '').ZPLV18E                       00383500
                AIF   (&XPLISTVER GE 2).ZPLV18E                         00383600
&XPLISTVER      SETA  2                                                 00383700
.ZPLV18E        ANOP  ,                                                 00383800
.*                                                                      00383900
                AIF   ('&COMPID' EQ '').ZPLV19E                         00384000
                AIF   (&XPLISTVER GE 1).ZPLV19E                         00384100
&XPLISTVER      SETA  1                                                 00384200
.ZPLV19E        ANOP  ,                                                 00384300
.*                                                                      00384400
                AIF   ('&COMPUSER' EQ '').ZPLV20E                       00384500
                AIF   (&XPLISTVER GE 1).ZPLV20E                         00384600
&XPLISTVER      SETA  1                                                 00384700
.ZPLV20E        ANOP  ,                                                 00384800
.*                                                                      00384900
                AIF   (K'&PLISTVER(1) LE 0).ZPVCKE                      00385000
                AIF   ('&PLISTVER(1)' EQ 'IMPLIED_VERSION').ZPVCKE      00385100
                AIF   ('&PLISTVER(1)' EQ 'MAX').ZPVCKE                  00385200
.*-------------------------------------------------------------------   00385300
                AIF   (N'&PLISTVER LE 1).ZPVCK3  CK NUM                 00385400
&ZMS            SETC  '"PLISTVER='                                      00385500
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00385600
&ZMS            SETC  '&ZMS "PLISTVER"'                                 00385700
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00385800
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00385900
                AGO   .ZPVCK2                                           00386000
.ZPVCK3         ANOP  ,                                                 00386100
.*-------------------------------------------------------------------   00386200
                AIF   ('&PLISTVER'(1,1) NE '(').ZPVCK2                  00386300
&ZMS            SETC  '"PLISTVER='                                      00386400
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00386500
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00386600
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00386700
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00386800
                AGO   .ZPVCKE                                           00386900
.ZPVCK2         ANOP  ,                                                 00387000
.*-------------------------------------------------------------------   00387100
&ZCVAL          SETC  '&PLISTVER(1)'                                    00387200
                AIF   ('&ZCVAL'(1,1) EQ '(').ZPVCKE  IN GPR             00387300
                AIF   (T'&ZCVAL NE 'N').ZPVCK6  NUMERIC ERR             00387400
&ZN             SETA   &PLISTVER(1)        CONVERT TO ARITHMETIC        00387500
                AIF   (&ZN LT 0).ZPVCK6    TOO LOW                      00387600
                AIF   (&ZN LE 2).ZPVCK4A   NOT HIGH                     00387700
.ZPVCK6         ANOP  ,                                                 00387800
&ZMS            SETC  '"PLISTVER='                                      00387900
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00388000
&ZMS            SETC  '&ZMS THE RANGE IS "0-2"'                         00388100
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00388200
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00388300
&XPLISTVER      SETA  2                                                 00388400
                AGO   .ZPVCKE                                           00388500
.*-------------------------------------------------------------------   00388600
.ZPVCK4A        ANOP  ,                                                 00388700
                AIF   (&ZN GE &XPLISTVER).ZPVCK4                        00388800
&ZMS            SETC  'PLISTVER='                                       00388900
&ZMS            SETC  '&ZMS.&PLISTVER(1)'                               00389000
&ZMS            SETC  '&ZMS., BUT PLISTVER OF'                          00389100
&ZMS            SETC  '&ZMS &XPLISTVER'                                 00389200
                MNOTE 8,' &ZMS IS REQUIRED.'                            00389300
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00389400
                AGO   .ZPVCK5                                           00389500
.ZPVCK4         ANOP  ,                                                 00389600
&XPLISTVER      SETA  &PLISTVER(1)                                      00389700
.ZPVCK5         ANOP  ,                                                 00389800
.ZPVCKE         ANOP  ,                                                 00389900
.********************************************************************   00390000
.***AG.MF01 PROCESS MF MACRO FORMS                                      00390100
.********************************************************************   00390200
                    ACTR  10000                                         00390300
.*------------------------------------------------------------------    00390400
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00390500
&XMF                SETC  ''          INITIALIZE XVARIABLE              00390600
.*-------------------------------------------------------------------   00390700
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00390800
.ZG349              ANOP  ,                                             00390900
&ZTLC               SETC 'S'                                            00391000
                    AIF   ('&MF(1)' NE '&ZTLC').ZG350                   00391100
&XMF                SETC  'S'         SET KEYWORD                       00391200
&XMFSCK             SETC  'COMPLETE'  SET XMFSCK                        00391300
                    AIF   (N'&MF LE 1).ZG349A   CK NUM                  00391400
&ZMS                SETC  '"MF='                                        00391500
&ZMS                SETC  '&ZMS.&MF"'                                   00391600
&ZMS                SETC  '&ZMS "MF"'                                   00391700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00391800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00391900
.ZG349A             ANOP  ,                                             00392000
.*-------------------------------------------------------------------   00392100
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00392200
.ZG350              ANOP  ,                                             00392300
&ZTLC               SETC 'L'                                            00392400
                    AIF   ('&MF(1)' NE '&ZTLC').ZG357                   00392500
&XMF                SETC  'L'         SET KEYWORD                       00392600
                    AIF   (N'&MF LE 3).ZG350A   CK NUM                  00392700
&ZMS                SETC  '"MF='                                        00392800
&ZMS                SETC  '&ZMS.&MF"'                                   00392900
&ZMS                SETC  '&ZMS "MF"'                                   00393000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'          00393100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00393200
.ZG350A             ANOP  ,                                             00393300
.*-------------------------------------------------------------------   00393400
.***AG.KKCTL08 -MF(L) SPECIAL CHECK                                     00393500
                    AIF   (N'&SYSLIST NE 0).ZG350B  POSITIONALS?        00393600
                    AIF   ('&REQUEST' NE '').ZG350B  KEYS?              00393700
                    AIF   ('&BUFLIST' NE '').ZG350B  KEYS?              00393800
                    AIF   ('&BUFLST64' NE '').ZG350B  KEYS?             00393900
                    AIF   ('&BUFNUM' NE '').ZG350B  KEYS?               00394000
                    AIF   ('&BUFTYPE' NE '').ZG350B  KEYS?              00394100
                    AIF   ('&CSMUSER' NE '').ZG350B  KEYS?              00394200
                    AIF   ('&GAP' NE '').ZG350B  KEYS?                  00394300
                    AIF   ('&ERRBFLST' NE '').ZG350B  KEYS?             00394400
                    AIF   ('&OWNERID' NE '').ZG350B  KEYS?              00394500
                    AIF   ('&COMPID' NE '').ZG350B  KEYS?               00394600
                    AIF   ('&COMPUSER' NE '').ZG350B  KEYS?             00394700
                    AIF   ('&TASKID' NE '').ZG350B  KEYS?               00394800
                    AIF   ('&THREAD' NE '').ZG350B  KEYS?               00394900
                    AIF   ('&UTILRTN' NE '').ZG350B  KEYS?              00395000
                    AIF   ('&SKIPBUF' NE '').ZG350B  KEYS?              00395100
                    AIF   ('&PAD' NE '').ZG350B  KEYS?                  00395200
                    AIF   ('&PADCHAR' NE '').ZG350B  KEYS?              00395300
                    AIF   ('&SRCERRL' NE '').ZG350B  KEYS?              00395400
                    AIF   ('&SRCGAP' NE '').ZG350B  KEYS?               00395500
                    AIF   ('&SRCLIST' NE '').ZG350B  KEYS?              00395600
                    AIF   ('&SRCLST64' NE '').ZG350B  KEYS?             00395700
                    AIF   ('&SRCNUM' NE '').ZG350B  KEYS?               00395800
                    AIF   ('&TARGERRL' NE '').ZG350B  KEYS?             00395900
                    AIF   ('&TARGGAP' NE '').ZG350B  KEYS?              00396000
                    AIF   ('&TARGLIST' NE '').ZG350B  KEYS?             00396100
                    AIF   ('&TARLST64' NE '').ZG350B  KEYS?             00396200
                    AIF   ('&TARGNUM' NE '').ZG350B  KEYS?              00396300
                    AIF   ('&BUFSIZE' NE '').ZG350B  KEYS?              00396400
                    AIF   ('&BUFSOURC' NE '').ZG350B  KEYS?             00396500
                    AIF   ('&BACK' NE '').ZG350B  KEYS?                 00396600
                    AIF   ('&DS_INFO' NE '').ZG350B  KEYS?              00396700
                    AIF   ('&EXPBUF' NE '').ZG350B  KEYS?               00396800
                    AIF   ('&INITBUF' NE '').ZG350B  KEYS?              00396900
                    AIF   ('&MINFREE' NE '').ZG350B  KEYS?              00397000
                    AIF   ('&RETPTOKN' NE '').ZG350B  KEYS?             00397100
                    AIF   ('&STATAREA' NE '').ZG350B  KEYS?             00397200
                    AIF   ('&POOLTOKN' NE '').ZG350B  KEYS?             00397300
                    AIF   ('&WAIT' NE '').ZG350B  KEYS?                 00397400
                    AIF   ('&CLEAR' NE '').ZG350B  KEYS?                00397500
                    AIF   ('&FREETO' NE '').ZG350B  KEYS?               00397600
                    AIF   ('&FREERTN' NE '').ZG350B  KEYS?              00397700
                    AIF   ('&RETCODE' NE '').ZG350B  KEYS?              00397800
                    AIF   ('&RSNCODE' NE '').ZG350B  KEYS?              00397900
                    AGO    .ZG350C    INVOCATION OKAY                   00398000
.ZG350B             ANOP  ,                                             00398100
&ZMS                SETC  'THE "L" FORM OF "MF"'                        00398200
&ZMS                SETC  '&ZMS CAN ONLY HAVE'                          00398300
&ZMS                SETC  '&ZMS THE "PLISTVER" KEY'                     00398400
                    MNOTE 8,' &ZMS SPECIFIED ON THE INVOCATION.'        00398500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00398600
.ZG350C             ANOP  ,                                             00398700
.*-------------------------------------------------------------------   00398800
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00398900
&ZXMFCTRL           SETC  'INPUT'     SET IN/OUTPUT                     00399000
&XMFCTRL            SETC  '&MF(2,1)'  SET XVARIABLE                     00399100
                    AIF   (N'&MF(2) GT 1).ZG352B  MULTI PARMS           00399200
&XMFCTRL            SETC  '&MF(2)'    SET XVARIABLE                     00399300
.ZG352B             AIF   (K'&MF(2) GT 0).ZG352C                        00399400
&ZXMFCTRL           SETC  ''          RESET IN/OUTPUT                   00399500
&ZMS                SETC  'WHEN "L" IS SPECIFIED'                       00399600
&ZMS                SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'           00399700
                    MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                  00399800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00399900
.ZG352C             ANOP  ,                                             00400000
.*-------------------------------------------------------------------   00400100
.***AG.KCK01 NAME, OPT RQD INPUT, POS(2) -GPR NOT ALLOWED               00400200
                    AIF   (K'&ZXMFCTRL LE 0).ZG352P  NOT I/O            00400300
                    AIF   ('&XMFCTRL'(1,1) NE '(').ZG352P               00400400
&ZXMFCTRL           SETC  ''          RESET IN/OUTPUT                   00400500
&ZMS                SETC  '"MF='                                        00400600
&ZMS                SETC  '&ZMS.&MF"'                                   00400700
&ZMS                SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'     00400800
                    MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 2.'             00400900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00401000
.ZG352P             ANOP  ,                                             00401100
.*-------------------------------------------------------------------   00401200
.***AG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE                      00401300
&ZXMFATTR           SETC  'INPUT'     SET IN/OUTPUT                     00401400
&XMFATTR            SETC  '0D'                                          00401500
                    AIF   (K'&MF(3) LE 0).ZG355B  PARM                  00401600
&XMFATTR            SETC  '&MF(3,1)'  SET XVARIABLE                     00401700
                    AIF   (N'&MF(3) GT 1).ZG355B  MULTI                 00401800
&XMFATTR            SETC  '&MF(3)'    SET XVARIABLE                     00401900
.ZG355B             ANOP  ,                                             00402000
.*-------------------------------------------------------------------   00402100
.***AG.KCK01 VALUE, OPT INPUT, POS(3) -GPR NOT ALLOWED                  00402200
                    AIF   (K'&ZXMFATTR LE 0).ZG355P  NOT I/O            00402300
                    AIF   ('&XMFATTR'(1,1) NE '(').ZG355P               00402400
&ZXMFATTR           SETC  ''          RESET IN/OUTPUT                   00402500
&ZMS                SETC  '"MF='                                        00402600
&ZMS                SETC  '&ZMS.&MF"'                                   00402700
&ZMS                SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'     00402800
                    MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 3.'             00402900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00403000
.ZG355P             ANOP  ,                                             00403100
.*-------------------------------------------------------------------   00403200
.***AG.KCK03 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH                 00403300
                    AIF   (K'&ZXMFATTR LE 0).ZG355S  NOT I/O            00403400
                    AIF   (K'&XMFATTR LE 60).ZG355S  LNG OK             00403500
&ZXMFATTR           SETC  ''          RESET IN/OUTPUT                   00403600
&ZMS                SETC  '"MF='                                        00403700
&ZMS                SETC  '&ZMS.&MF"'                                   00403800
&ZMS                SETC  '&ZMS ARGUMENT 3 EXCEEDS THE MAXIMUM'         00403900
                    MNOTE 8,' &ZMS LENGTH OF 60 CHARACTERS.'            00404000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00404100
.ZG355S             ANOP  ,                                             00404200
.*-------------------------------------------------------------------   00404300
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00404400
.ZG357              ANOP  ,                                             00404500
&ZTLC               SETC 'M'                                            00404600
                    AIF   ('&MF(1)' NE '&ZTLC').ZG366                   00404700
&XMF                SETC  'M'         SET KEYWORD                       00404800
                    AIF   (N'&MF LE 3).ZG357A   CK NUM                  00404900
&ZMS                SETC  '"MF='                                        00405000
&ZMS                SETC  '&ZMS.&MF"'                                   00405100
&ZMS                SETC  '&ZMS "MF"'                                   00405200
                    MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'          00405300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00405400
.ZG357A             ANOP  ,                                             00405500
.*-------------------------------------------------------------------   00405600
.***AG.KKCTL09 -MF(M) OUTPUT KEYS SPECIFIED?                            00405700
                    AIF   ('&ERRBFLST' NE '').ZG357B  OUTPUT?           00405800
                    AIF   ('&SRCERRL' NE '').ZG357B                     00405900
                    AIF   ('&TARGERRL' NE '').ZG357B                    00406000
                    AIF   ('&DS_INFO' NE '').ZG357B                     00406100
                    AIF   ('&RETPTOKN' NE '').ZG357B                    00406200
                    AIF   ('&STATAREA' NE '').ZG357B                    00406300
                    AGO    .ZG357C    INVOCATION OKAY                   00406400
.ZG357B             ANOP  ,                                             00406500
&ZMS                SETC  'THE "M" FORM OF "MF" CANNOT'                 00406600
&ZMS                SETC  '&ZMS HAVE THE FOLLOWING OUTPUT KEY(S)'       00406700
&ZMS                SETC  '&ZMS SPECIFIED ON THE INVOCATION:'           00406800
&ZMS                SETC  '&ZMS "ERRBFLST"'                             00406900
&ZMS                SETC  '&ZMS OR "SRCERRL"'                           00407000
&ZMS                SETC  '&ZMS OR "TARGERRL"'                          00407100
&ZMS                SETC  '&ZMS OR "DS_INFO"'                           00407200
&ZMS                SETC  '&ZMS OR "RETPTOKN"'                          00407300
&ZMS                SETC  '&ZMS OR "STATAREA"'                          00407400
                    MNOTE 8,' &ZMS '                                    00407500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00407600
.ZG357C             ANOP  ,                                             00407700
.*-------------------------------------------------------------------   00407800
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00407900
&ZXMFCTRL           SETC  'INPUT'     SET IN/OUTPUT                     00408000
&XMFCTRL            SETC  '&MF(2,1)'  SET XVARIABLE                     00408100
                    AIF   (N'&MF(2) GT 1).ZG359B  MULTI PARMS           00408200
&XMFCTRL            SETC  '&MF(2)'    SET XVARIABLE                     00408300
.ZG359B             AIF   (K'&MF(2) GT 0).ZG359C                        00408400
&ZXMFCTRL           SETC  ''          RESET IN/OUTPUT                   00408500
&ZMS                SETC  'WHEN "M" IS SPECIFIED'                       00408600
&ZMS                SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'           00408700
                    MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                  00408800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00408900
.ZG359C             ANOP  ,                                             00409000
.*-------------------------------------------------------------------   00409100
.***AG.KCK02 NAME, OPT RQD INPUT, POS(2) -GPR OUT OF RANGE              00409200
                    AIF   (K'&ZXMFCTRL LE 0).ZG359R  NOT I/O            00409300
                    AIF   ('&XMFCTRL'(1,1) NE '(').ZG359R               00409400
&ZCGPR              SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)                    00409500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG359P                 00409600
                    AIF   (K'&ZCGPR GT 2).ZG359Q                        00409700
                    AIF   ('&ZCGPR' EQ '0').ZG359Q                      00409800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00409900
                    AIF   (T'&ZCGPR NE 'N').ZG359Q  INVALID REG NAME    00410000
.ZG359P             ANOP  ,                                             00410100
                    AIF   (T'&ZCGPR NE 'N').ZG359R  NON NUMERIC         00410200
                    AIF   ('&ZCGPR' LT '1').ZG359Q                      00410300
                    AIF   ('&ZCGPR' LE '12').ZG359R                     00410400
.ZG359Q             ANOP  ,                                             00410500
&ZMS                SETC  '"MF='                                        00410600
&ZMS                SETC  '&ZMS.&MF"'                                   00410700
&ZMS                SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'     00410800
                    MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'              00410900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00411000
.ZG359R             ANOP  ,                                             00411100
.*-------------------------------------------------------------------   00411200
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00411300
&XMFSCK             SETC  ''          INITIALIZE XVARIABLE              00411400
.ZG363A   AIF   ('&MF(3)' NE 'COMPLETE').ZG364A                         00411500
&XMFSCK             SETC  'COMPLETE'  SET KEYWORD                       00411600
.*-------------------------------------------------------------------   00411700
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00411800
.ZG364A   AIF   ('&MF(3)' NE 'NOCHECK').ZG365A                          00411900
&XMFSCK             SETC  'NOCHECK'   SET KEYWORD                       00412000
.*-------------------------------------------------------------------   00412100
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00412200
.ZG365A             AIF   (K'&XMFSCK GT 0).ZG365C  KEYWORD              00412300
                    AIF   (K'&MF(3) LE 0).ZG365B                        00412400
&ZMS                SETC  '"MF='                                        00412500
&ZMS                SETC  '&ZMS.&MF"'                                   00412600
&ZMS                SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '     00412700
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           00412800
&ZMS                SETC  '&ZMS "COMPLETE"'                             00412900
&ZMS                SETC  '&ZMS OR "NOCHECK".'                          00413000
                    MNOTE 8,' &ZMS '                                    00413100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00413200
.ZG365B             ANOP  ,                                             00413300
&XMFSCK             SETC  'COMPLETE'  SET DEFAULT KEYWORD               00413400
.ZG365C             ANOP  ,                                             00413500
&ZXMFSCK            SETC  'INPUT'     SET IN/OUTPUT                     00413600
.*-------------------------------------------------------------------   00413700
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00413800
.ZG366              ANOP  ,                                             00413900
&ZTLC               SETC 'E'                                            00414000
                    AIF   ('&MF(1)' NE '&ZTLC').ZG375                   00414100
&XMF                SETC  'E'         SET KEYWORD                       00414200
                    AIF   (N'&MF LE 3).ZG366A   CK NUM                  00414300
&ZMS                SETC  '"MF='                                        00414400
&ZMS                SETC  '&ZMS.&MF"'                                   00414500
&ZMS                SETC  '&ZMS "MF"'                                   00414600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'          00414700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00414800
.ZG366A             ANOP  ,                                             00414900
.*-------------------------------------------------------------------   00415000
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00415100
&ZXMFCTRL           SETC  'INPUT'     SET IN/OUTPUT                     00415200
&XMFCTRL            SETC  '&MF(2,1)'  SET XVARIABLE                     00415300
                    AIF   (N'&MF(2) GT 1).ZG368B  MULTI PARMS           00415400
&XMFCTRL            SETC  '&MF(2)'    SET XVARIABLE                     00415500
.ZG368B             AIF   (K'&MF(2) GT 0).ZG368C                        00415600
&ZXMFCTRL           SETC  ''          RESET IN/OUTPUT                   00415700
&ZMS                SETC  'WHEN "E" IS SPECIFIED'                       00415800
&ZMS                SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'           00415900
                    MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                  00416000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00416100
.ZG368C             ANOP  ,                                             00416200
.*-------------------------------------------------------------------   00416300
.***AG.KCK02 NAME, OPT RQD INPUT, POS(2) -GPR OUT OF RANGE              00416400
                    AIF   (K'&ZXMFCTRL LE 0).ZG368R  NOT I/O            00416500
                    AIF   ('&XMFCTRL'(1,1) NE '(').ZG368R               00416600
&ZCGPR              SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)                    00416700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG368P                 00416800
                    AIF   (K'&ZCGPR GT 2).ZG368Q                        00416900
                    AIF   ('&ZCGPR' EQ '0').ZG368Q                      00417000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00417100
                    AIF   (T'&ZCGPR NE 'N').ZG368Q  INVALID REG NAME    00417200
.ZG368P             ANOP  ,                                             00417300
                    AIF   (T'&ZCGPR NE 'N').ZG368R  NON NUMERIC         00417400
                    AIF   ('&ZCGPR' LT '1').ZG368Q                      00417500
                    AIF   ('&ZCGPR' LE '12').ZG368R                     00417600
.ZG368Q             ANOP  ,                                             00417700
&ZMS                SETC  '"MF='                                        00417800
&ZMS                SETC  '&ZMS.&MF"'                                   00417900
&ZMS                SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'     00418000
                    MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'              00418100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00418200
.ZG368R             ANOP  ,                                             00418300
.*-------------------------------------------------------------------   00418400
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00418500
&XMFSCK             SETC  ''          INITIALIZE XVARIABLE              00418600
.ZG372A   AIF   ('&MF(3)' NE 'COMPLETE').ZG373A                         00418700
&XMFSCK             SETC  'COMPLETE'  SET KEYWORD                       00418800
.*-------------------------------------------------------------------   00418900
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00419000
.ZG373A   AIF   ('&MF(3)' NE 'NOCHECK').ZG374A                          00419100
&XMFSCK             SETC  'NOCHECK'   SET KEYWORD                       00419200
.*-------------------------------------------------------------------   00419300
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00419400
.ZG374A             AIF   (K'&XMFSCK GT 0).ZG374C  KEYWORD              00419500
                    AIF   (K'&MF(3) LE 0).ZG374B                        00419600
&ZMS                SETC  '"MF='                                        00419700
&ZMS                SETC  '&ZMS.&MF"'                                   00419800
&ZMS                SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '     00419900
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           00420000
&ZMS                SETC  '&ZMS "COMPLETE"'                             00420100
&ZMS                SETC  '&ZMS OR "NOCHECK".'                          00420200
                    MNOTE 8,' &ZMS '                                    00420300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00420400
.ZG374B             ANOP  ,                                             00420500
&XMFSCK             SETC  'COMPLETE'  SET DEFAULT KEYWORD               00420600
.ZG374C             ANOP  ,                                             00420700
&ZXMFSCK            SETC  'INPUT'     SET IN/OUTPUT                     00420800
.*------------------------------------------------------------------    00420900
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00421000
.ZG375              ANOP  ,                                             00421100
&ZXMF               SETC  'INPUT'     SET IN/OUTPUT                     00421200
                    AIF   (K'&XMF GT 0).ZG375E  VALID ARG               00421300
                    AIF   (T'&MF EQ 'O').ZG375D  OMITTED                00421400
&ZASYSLNDX          SETA  0                                             00421500
.ZG375A             ANOP  ,           POSITIONAL MACRO KEY              00421600
&ZASYSLNDX          SETA  &ZASYSLNDX+1                                  00421700
                    AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG375C             00421800
&ZTLC               SETC 'MF'                                           00421900
                    AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG375A    00422000
.ZG375B             ANOP  ,                                             00422100
&ZXMF               SETC  ''          RESET IN/OUTPUT                   00422200
&ZMS                SETC  'THE "MF" KEY'                                00422300
&ZMS                SETC  '&ZMS MUST CONTAIN ONE'                       00422400
                    MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'              00422500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00422600
                    AGO   .ZG375E                                       00422700
.ZG375C             ANOP  ,                                             00422800
&ZXMF               SETC  ''          RESET IN/OUTPUT                   00422900
&ZMS                SETC  '"MF='                                        00423000
&ZMS                SETC  '&ZMS.&MF"'                                   00423100
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     00423200
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           00423300
&ZMS                SETC  '&ZMS "S",'                                   00423400
&ZMS                SETC  '&ZMS "L",'                                   00423500
&ZMS                SETC  '&ZMS "M",'                                   00423600
&ZMS                SETC  '&ZMS OR "E".'                                00423700
                    MNOTE 8,' &ZMS '                                    00423800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00423900
                    AGO   .ZG375E                                       00424000
.ZG375D             ANOP  ,                                             00424100
&XMF                SETC  'S'         SET DEFAULT KEYWORD               00424200
&XMFSCK             SETC  'COMPLETE'  COMPLETE CHECKING                 00424300
.ZG375E             ANOP  ,                                             00424400
.********************************************************************   00424500
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00424600
.********************************************************************   00424700
                    ACTR  10000                                         00424800
.*-------------------------------------------------------------------   00424900
.***AG.MF03 MF=(SLME)                                                   00425000
                    AIF   ('&XMF' EQ 'L').ZGMFX                         00425100
                    AIF   ('&XMFSCK' NE 'COMPLETE').ZGMFX               00425200
.*------------------------------------------------------------------    00425300
.***AG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00425400
&XREQUEST           SETC  ''          INITIALIZE XVARIABLE              00425500
.*-------------------------------------------------------------------   00425600
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00425700
.ZG3                ANOP  ,                                             00425800
                    AIF   (K'&REQUEST(1) LE 0).ZG3A                     00425900
&ZTLC               SETC 'ASSIGN_BUFFER'                                00426000
                    AIF   ('&REQUEST(1)' NE '&ZTLC').ZG46               00426100
&XREQUEST           SETC  'ASSIGN_BUFFER'       SET KEYWORD             00426200
                    AIF   (N'&REQUEST LE 1).ZG3A  CK NUM                00426300
&ZMS                SETC  '"REQUEST='                                   00426400
&ZMS                SETC  '&ZMS.&REQUEST"'                              00426500
&ZMS                SETC  '&ZMS "REQUEST"'                              00426600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00426700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00426800
.ZG3A               ANOP  ,                                             00426900
.*------------------------------------------------------------------    00427000
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00427100
&ZCVAL              SETC ''           CLEAR ERROR KEY ACCUMULATOR       00427200
.ZG3A0              AIF   (K'&SKIPBUF LE 0).ZG3A1  OK                   00427300
&ZCVAL              SETC '&ZCVAL SKIPBUF'       INCORRECT KEY USED      00427400
.ZG3A1              AIF   (K'&PAD LE 0).ZG3A2   OK                      00427500
&ZCVAL              SETC '&ZCVAL PAD'           INCORRECT KEY USED      00427600
.ZG3A2              AIF   (K'&PADCHAR LE 0).ZG3A3  OK                   00427700
&ZCVAL              SETC '&ZCVAL PADCHAR'       INCORRECT KEY USED      00427800
.ZG3A3              AIF   (K'&SRCERRL LE 0).ZG3A4  OK                   00427900
&ZCVAL              SETC '&ZCVAL SRCERRL'       INCORRECT KEY USED      00428000
.ZG3A4              AIF   (K'&SRCGAP LE 0).ZG3A5  OK                    00428100
&ZCVAL              SETC '&ZCVAL SRCGAP'        INCORRECT KEY USED      00428200
.ZG3A5              AIF   (K'&SRCLIST LE 0).ZG3A6  OK                   00428300
&ZCVAL              SETC '&ZCVAL SRCLIST'       INCORRECT KEY USED      00428400
.ZG3A6              AIF   (K'&SRCLST64 LE 0).ZG3A7  OK                  00428500
&ZCVAL              SETC '&ZCVAL SRCLST64'      INCORRECT KEY USED      00428600
.ZG3A7              AIF   (K'&SRCNUM LE 0).ZG3A8  OK                    00428700
&ZCVAL              SETC '&ZCVAL SRCNUM'        INCORRECT KEY USED      00428800
.ZG3A8              AIF   (K'&TARGERRL LE 0).ZG3A9  OK                  00428900
&ZCVAL              SETC '&ZCVAL TARGERRL'      INCORRECT KEY USED      00429000
.ZG3A9              AIF   (K'&TARGGAP LE 0).ZG3A10  OK                  00429100
&ZCVAL              SETC '&ZCVAL TARGGAP'       INCORRECT KEY USED      00429200
.ZG3A10             AIF   (K'&TARGLIST LE 0).ZG3A11  OK                 00429300
&ZCVAL              SETC '&ZCVAL TARGLIST'      INCORRECT KEY USED      00429400
.ZG3A11             AIF   (K'&TARLST64 LE 0).ZG3A12  OK                 00429500
&ZCVAL              SETC '&ZCVAL TARLST64'      INCORRECT KEY USED      00429600
.ZG3A12             AIF   (K'&TARGNUM LE 0).ZG3A13  OK                  00429700
&ZCVAL              SETC '&ZCVAL TARGNUM'       INCORRECT KEY USED      00429800
.ZG3A13             AIF   (K'&BUFSIZE LE 0).ZG3A14  OK                  00429900
&ZCVAL              SETC '&ZCVAL BUFSIZE'       INCORRECT KEY USED      00430000
.ZG3A14             AIF   (K'&BUFSOURC LE 0).ZG3A15  OK                 00430100
&ZCVAL              SETC '&ZCVAL BUFSOURC'      INCORRECT KEY USED      00430200
.ZG3A15             AIF   (K'&BACK LE 0).ZG3A16  OK                     00430300
&ZCVAL              SETC '&ZCVAL BACK'          INCORRECT KEY USED      00430400
.ZG3A16             AIF   (K'&DS_INFO LE 0).ZG3A17  OK                  00430500
&ZCVAL              SETC '&ZCVAL DS_INFO'       INCORRECT KEY USED      00430600
.ZG3A17             AIF   (K'&EXPBUF LE 0).ZG3A18  OK                   00430700
&ZCVAL              SETC '&ZCVAL EXPBUF'        INCORRECT KEY USED      00430800
.ZG3A18             AIF   (K'&INITBUF LE 0).ZG3A19  OK                  00430900
&ZCVAL              SETC '&ZCVAL INITBUF'       INCORRECT KEY USED      00431000
.ZG3A19             AIF   (K'&MINFREE LE 0).ZG3A20  OK                  00431100
&ZCVAL              SETC '&ZCVAL MINFREE'       INCORRECT KEY USED      00431200
.ZG3A20             AIF   (K'&RETPTOKN LE 0).ZG3A21  OK                 00431300
&ZCVAL              SETC '&ZCVAL RETPTOKN'      INCORRECT KEY USED      00431400
.ZG3A21             AIF   (K'&STATAREA LE 0).ZG3A22  OK                 00431500
&ZCVAL              SETC '&ZCVAL STATAREA'      INCORRECT KEY USED      00431600
.ZG3A22             AIF   (K'&POOLTOKN LE 0).ZG3A23  OK                 00431700
&ZCVAL              SETC '&ZCVAL POOLTOKN'      INCORRECT KEY USED      00431800
.ZG3A23             AIF   (K'&WAIT LE 0).ZG3A24  OK                     00431900
&ZCVAL              SETC '&ZCVAL WAIT'          INCORRECT KEY USED      00432000
.ZG3A24             AIF   (K'&CLEAR LE 0).ZG3A25  OK                    00432100
&ZCVAL              SETC '&ZCVAL CLEAR'         INCORRECT KEY USED      00432200
.ZG3A25             AIF   (K'&FREETO LE 0).ZG3A26  OK                   00432300
&ZCVAL              SETC '&ZCVAL FREETO'        INCORRECT KEY USED      00432400
.ZG3A26             AIF   (K'&FREERTN LE 0).ZG3A27  OK                  00432500
&ZCVAL              SETC '&ZCVAL FREERTN'       INCORRECT KEY USED      00432600
.ZG3A27             AIF   (K'&ZCVAL LE 0).ZG3A28  OK                    00432700
&ZCVAL              SETC '&ZCVAL'(2,K'&ZCVAL-1)                         00432800
                    AIF  (K'&ZCVAL LE 160).ZG3A28A                      00432900
&ZCVAL              SETC '&ZCVAL'(1,160)                                00433000
&ZCVAL              SETC '&ZCVAL....'                                   00433100
.ZG3A28A            ANOP                                                00433200
&ZMS                SETC  '"REQUEST'                                    00433300
&ZMS                SETC  '&ZMS.=&REQUEST"'                             00433400
&ZMS                SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'          00433500
                    MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'          00433600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00433700
.ZG3A28             ANOP  ,                                             00433800
.*----------------------------------------------------------------***   00433900
.***AG.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00434000
&XDUMMY1            SETC  ''          INITIALIZE XVARIABLE              00434100
                    AIF   (K'&BUFLIST LE 0).ZG5C                        00434200
&ZXDUMMY1           SETC  'INPUT'     SET IN/OUTPUT                     00434300
&XDUMMY1            SETC  'BUFLIST'   SET XVARIABLE                     00434400
&ZXBUFLIST          SETC  'INPUT'     SET IN/OUTPUT                     00434500
&XBUFLIST           SETC  '&BUFLIST(1)'         SET XVARIABLE PARM      00434600
                    AIF   (N'&BUFLIST GT 1).ZG5A                        00434700
&XBUFLIST           SETC  '&BUFLIST'  SET XVARIABLE PARM                00434800
.ZG5A               AIF   (N'&BUFLIST LE 1).ZG5B  CK NUM                00434900
&ZMS                SETC  '"BUFLIST='                                   00435000
&ZMS                SETC  '&ZMS.&BUFLIST"'                              00435100
&ZMS                SETC  '&ZMS "BUFLIST"'                              00435200
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00435300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00435400
.ZG5B               AIF   (K'&XBUFLIST GT 0).ZG5C  ONE PARM             00435500
&ZXDUMMY1           SETC  ''          RESET IN/OUTPUT                   00435600
&ZXBUFLIST          SETC  ''          RESET IN/OUTPUT                   00435700
&ZMS                SETC  ' '                                           00435800
&ZMS                SETC  '&ZMS "BUFLIST" KEY AND ITS'                  00435900
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00436000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00436100
.ZG5C               ANOP  ,                                             00436200
.*----------------------------------------------------------------***   00436300
.***AG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00436400
                    AIF   (K'&BUFLST64 LE 0).ZG6D  NO ME KEY            00436500
                    AIF   (N'&BUFLST64 LE 1).ZG6A  CK NUM               00436600
&ZMS                SETC  '"BUFLST64='                                  00436700
&ZMS                SETC  '&ZMS.&BUFLST64"'                             00436800
&ZMS                SETC  '&ZMS "BUFLST64"'                             00436900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00437000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00437100
.ZG6A               AIF   (K'&XDUMMY1 LE 0).ZG6B                        00437200
&ZMS                SETC  '"BUFLST64'                                   00437300
&ZMS                SETC  '&ZMS.=&BUFLST64"'                            00437400
&ZMS                SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'         00437500
&ZMS                SETC  '&ZMS "&XDUMMY1"'                             00437600
                    MNOTE 8,' &ZMS KEY.'                                00437700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00437800
                    AGO   .ZG6D                                         00437900
.*                                                                      00438000
.ZG6B               ANOP  ,                                             00438100
&ZXDUMMY1           SETC  'INPUT'     SET IN/OUTPUT                     00438200
&XDUMMY1            SETC  'BUFLST64'  SET XVARIABLE                     00438300
&ZXBUFLST64         SETC  'INPUT'     SET IN/OUTPUT                     00438400
&XBUFLST64          SETC  '&BUFLST64(1)'        SET XVARIABLE PARM      00438500
                    AIF   (N'&BUFLST64 GT 1).ZG6C                       00438600
&XBUFLST64          SETC  '&BUFLST64'           SET XVARIABLE PARM      00438700
.ZG6C               AIF   (K'&XBUFLST64 GT 0).ZG6D  ONE PARM            00438800
&ZXDUMMY1           SETC  ''          RESET IN/OUTPUT                   00438900
&ZXBUFLST64         SETC  ''          RESET IN/OUTPUT                   00439000
&ZMS                SETC  ' '                                           00439100
&ZMS                SETC  '&ZMS "BUFLST64" KEY AND ITS'                 00439200
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00439300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00439400
.ZG6D               ANOP  ,                                             00439500
.*------------------------------------------------------------------    00439600
.***AG.KME4Y09 NAME, RQD INPUT, ME KEYS -CHECK IF KEY ENTERED           00439700
                    AIF   (K'&XDUMMY1 GT 0).ZG7B                        00439800
&ZXDUMMY1           SETC  ''          RESET IN/OUTPUT                   00439900
&ZXBUFLIST          SETC  ''          RESET IN/OUTPUT                   00440000
&XDUMMY1            SETC  ''          ENSURE NULL                       00440100
&XBUFLIST           SETC  ''          ENSURE NULL                       00440200
&ZMS                SETC  'ONE OF THE FOLLOWING'                        00440300
&ZMS                SETC  '&ZMS MUTUALLY EXCLUSIVE KEY(S) IS'           00440400
&ZMS                SETC  '&ZMS REQUIRED:'                              00440500
&ZMS                SETC  '&ZMS "BUFLIST"'      VALID ME KEY            00440600
&ZMS                SETC  '&ZMS OR "BUFLST64".'  VALID ME KEY           00440700
                    MNOTE 8,' &ZMS '                                    00440800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00440900
.ZG7B               ANOP  ,                                             00441000
.*-------------------------------------------------------------------   00441100
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00441200
.ZG5ZY  AIF    ('&XDUMMY1' NE 'BUFLIST').ZG6ZY                          00441300
.*-------------------------------------------------------------------   00441400
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00441500
                    AIF   (K'&ZXBUFLIST LE 0).ZG5R  NOT I/O             00441600
                    AIF   ('&XBUFLIST'(1,1) NE '(').ZG5R                00441700
&ZCGPR              SETC  '&XBUFLIST'(2,K'&XBUFLIST-2)                  00441800
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG5P                   00441900
                    AIF   (K'&ZCGPR GT 2).ZG5Q                          00442000
                    AIF   ('&ZCGPR' EQ '0').ZG5Q                        00442100
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00442200
                    AIF   (T'&ZCGPR NE 'N').ZG5Q  INVALID REG NAME      00442300
.ZG5P               ANOP  ,                                             00442400
                    AIF   (T'&ZCGPR NE 'N').ZG5R  NON NUMERIC           00442500
                    AIF   ('&ZCGPR' LT '2').ZG5Q                        00442600
                    AIF   ('&ZCGPR' LE '12').ZG5R                       00442700
.ZG5Q               ANOP  ,                                             00442800
&ZMS                SETC  '"BUFLIST='                                   00442900
&ZMS                SETC  '&ZMS.&BUFLIST"'                              00443000
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00443100
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00443200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00443300
.ZG5R               ANOP  ,                                             00443400
.*-------------------------------------------------------------------   00443500
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00443600
.ZG6ZY  AIF    ('&XDUMMY1' NE 'BUFLST64').ZG7ZY                         00443700
.*-------------------------------------------------------------------   00443800
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00443900
                    AIF   (K'&ZXBUFLST64 LE 0).ZG6R  NOT I/O            00444000
                    AIF   ('&XBUFLST64'(1,1) NE '(').ZG6R               00444100
&ZCGPR              SETC  '&XBUFLST64'(2,K'&XBUFLST64-2)                00444200
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG6P                   00444300
                    AIF   (K'&ZCGPR GT 2).ZG6Q                          00444400
                    AIF   ('&ZCGPR' EQ '0').ZG6Q                        00444500
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00444600
                    AIF   (T'&ZCGPR NE 'N').ZG6Q  INVALID REG NAME      00444700
.ZG6P               ANOP  ,                                             00444800
                    AIF   (T'&ZCGPR NE 'N').ZG6R  NON NUMERIC           00444900
                    AIF   ('&ZCGPR' LT '2').ZG6Q                        00445000
                    AIF   ('&ZCGPR' LE '12').ZG6R                       00445100
.ZG6Q               ANOP  ,                                             00445200
&ZMS                SETC  '"BUFLST64='                                  00445300
&ZMS                SETC  '&ZMS.&BUFLST64"'                             00445400
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00445500
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00445600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00445700
.ZG6R               ANOP  ,                                             00445800
.*-------------------------------------------------------------------   00445900
.***AG.KMEKY15 NAME, RQD INPUT, ME KEYS -END                            00446000
.ZG7ZY              ANOP ,            END MUTUALLY EXCLUSIVE KEYS       00446100
.*----------------------------------------------------------------***   00446200
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00446300
                    AIF   (N'&BUFNUM LE 1).ZG9A  CK NUM                 00446400
&ZMS                SETC  '"BUFNUM='                                    00446500
&ZMS                SETC  '&ZMS.&BUFNUM"'                               00446600
&ZMS                SETC  '&ZMS "BUFNUM"'                               00446700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00446800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00446900
.ZG9A               ANOP  ,                                             00447000
.*-------------------------------------------------------------------   00447100
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00447200
&ZXBUFNUM           SETC  'INPUT'     SET IN/OUTPUT                     00447300
&XBUFNUM            SETC  '&BUFNUM(1)'          SET XVARIABLE           00447400
                    AIF   (N'&BUFNUM GT 1).ZG9B  MULTI PARMS            00447500
&XBUFNUM            SETC  '&BUFNUM'   SET XVARIABLE                     00447600
.ZG9B               AIF   (K'&BUFNUM(1) GT 0).ZG9C                      00447700
&ZXBUFNUM           SETC  ''          RESET IN/OUTPUT                   00447800
&ZMS                SETC  ' '                                           00447900
&ZMS                SETC  '&ZMS "BUFNUM" KEY AND ITS'                   00448000
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00448100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00448200
.ZG9C               ANOP  ,                                             00448300
.*-------------------------------------------------------------------   00448400
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00448500
                    AIF   (K'&ZXBUFNUM LE 0).ZG9R  NOT I/O              00448600
                    AIF   ('&XBUFNUM'(1,1) NE '(').ZG9R                 00448700
&ZCGPR              SETC  '&XBUFNUM'(2,K'&XBUFNUM-2)                    00448800
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG9P                   00448900
                    AIF   (K'&ZCGPR GT 2).ZG9Q                          00449000
                    AIF   ('&ZCGPR' EQ '0').ZG9Q                        00449100
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00449200
                    AIF   (T'&ZCGPR NE 'N').ZG9Q  INVALID REG NAME      00449300
.ZG9P               ANOP  ,                                             00449400
                    AIF   (T'&ZCGPR NE 'N').ZG9R  NON NUMERIC           00449500
                    AIF   ('&ZCGPR' LT '2').ZG9Q                        00449600
                    AIF   ('&ZCGPR' LE '12').ZG9R                       00449700
.ZG9Q               ANOP  ,                                             00449800
&ZMS                SETC  '"BUFNUM='                                    00449900
&ZMS                SETC  '&ZMS.&BUFNUM"'                               00450000
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00450100
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00450200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00450300
.ZG9R               ANOP  ,                                             00450400
.*----------------------------------------------------------------***   00450500
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00450600
                    AIF   (N'&BUFTYPE LE 1).ZG12A  CK NUM               00450700
&ZMS                SETC  '"BUFTYPE='                                   00450800
&ZMS                SETC  '&ZMS.&BUFTYPE"'                              00450900
&ZMS                SETC  '&ZMS "BUFTYPE"'                              00451000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00451100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00451200
.ZG12A              ANOP  ,                                             00451300
.*-------------------------------------------------------------------   00451400
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00451500
&XBUFTYPE           SETC  ''          INITIALIZE XVARIABLE              00451600
.ZG13A   AIF   ('&BUFTYPE(1)' NE 'SAME').ZG14A                          00451700
&XBUFTYPE           SETC  'SAME'      SET KEYWORD                       00451800
.*-------------------------------------------------------------------   00451900
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00452000
.ZG14A   AIF   ('&BUFTYPE(1)' NE 'PAGEELIG').ZG15A                      00452100
&XBUFTYPE           SETC  'PAGEELIG'  SET KEYWORD                       00452200
.*-------------------------------------------------------------------   00452300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00452400
.ZG15A   AIF   ('&BUFTYPE(1)' NE 'FIXED').ZG16A                         00452500
&XBUFTYPE           SETC  'FIXED'     SET KEYWORD                       00452600
.*-------------------------------------------------------------------   00452700
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00452800
.ZG16A              AIF   (K'&XBUFTYPE GT 0).ZG16C  KEYWORD             00452900
                    AIF   (K'&BUFTYPE(1) LE 0).ZG16B                    00453000
&ZMS                SETC  '"BUFTYPE='                                   00453100
&ZMS                SETC  '&ZMS.&BUFTYPE"'                              00453200
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     00453300
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           00453400
&ZMS                SETC  '&ZMS "SAME",'                                00453500
&ZMS                SETC  '&ZMS "PAGEELIG",'                            00453600
&ZMS                SETC  '&ZMS OR "FIXED".'                            00453700
                    MNOTE 8,' &ZMS '                                    00453800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00453900
.ZG16B              ANOP  ,                                             00454000
&XBUFTYPE           SETC  'SAME'      SET DEFAULT KEYWORD               00454100
.ZG16C              ANOP  ,                                             00454200
&ZXBUFTYPE          SETC  'INPUT'     SET IN/OUTPUT                     00454300
.*----------------------------------------------------------------***   00454400
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00454500
                    AIF   (N'&CSMUSER LE 1).ZG18A  CK NUM               00454600
&ZMS                SETC  '"CSMUSER='                                   00454700
&ZMS                SETC  '&ZMS.&CSMUSER"'                              00454800
&ZMS                SETC  '&ZMS "CSMUSER"'                              00454900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00455000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00455100
.ZG18A              ANOP  ,                                             00455200
.*-------------------------------------------------------------------   00455300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00455400
&XCSMUSER           SETC  ''          INITIALIZE XVARIABLE              00455500
.ZG19A   AIF   ('&CSMUSER(1)' NE 'NO').ZG20A                            00455600
&XCSMUSER           SETC  'NO'        SET KEYWORD                       00455700
.*-------------------------------------------------------------------   00455800
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00455900
.ZG20A   AIF   ('&CSMUSER(1)' NE 'YES').ZG21A                           00456000
&XCSMUSER           SETC  'YES'       SET KEYWORD                       00456100
.*-------------------------------------------------------------------   00456200
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00456300
.ZG21A              AIF   (K'&XCSMUSER GT 0).ZG21C  KEYWORD             00456400
                    AIF   (K'&CSMUSER(1) LE 0).ZG21B                    00456500
&ZMS                SETC  '"CSMUSER='                                   00456600
&ZMS                SETC  '&ZMS.&CSMUSER"'                              00456700
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     00456800
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           00456900
&ZMS                SETC  '&ZMS "NO"'                                   00457000
&ZMS                SETC  '&ZMS OR "YES".'                              00457100
                    MNOTE 8,' &ZMS '                                    00457200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00457300
.ZG21B              ANOP  ,                                             00457400
&XCSMUSER           SETC  'NO'        SET DEFAULT KEYWORD               00457500
.ZG21C              ANOP  ,                                             00457600
&ZXCSMUSER          SETC  'INPUT'     SET IN/OUTPUT                     00457700
.*----------------------------------------------------------------***   00457800
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00457900
                    AIF   (N'&GAP LE 1).ZG23A   CK NUM                  00458000
&ZMS                SETC  '"GAP='                                       00458100
&ZMS                SETC  '&ZMS.&GAP"'                                  00458200
&ZMS                SETC  '&ZMS "GAP"'                                  00458300
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00458400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00458500
.ZG23A              ANOP  ,                                             00458600
.*-------------------------------------------------------------------   00458700
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00458800
&ZXGAP              SETC  'INPUT'     SET IN/OUTPUT                     00458900
&XGAP               SETC  '0'                                           00459000
                    AIF   (K'&GAP(1) LE 0).ZG23B  PARM                  00459100
&XGAP               SETC  '&GAP(1)'   SET XVARIABLE                     00459200
                    AIF   (N'&GAP GT 1).ZG23B   MULTI                   00459300
&XGAP               SETC  '&GAP'      SET XVARIABLE                     00459400
.ZG23B              ANOP  ,                                             00459500
.*-------------------------------------------------------------------   00459600
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00459700
                    AIF   (K'&ZXGAP LE 0).ZG23R  NOT I/O                00459800
         AIF   ('&XGAP' EQ '0').ZG23R                                   00459900
                    AIF   ('&XGAP'(1,1) NE '(').ZG23R                   00460000
&ZCGPR              SETC  '&XGAP'(2,K'&XGAP-2)                          00460100
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG23P                  00460200
                    AIF   (K'&ZCGPR GT 2).ZG23Q                         00460300
                    AIF   ('&ZCGPR' EQ '0').ZG23Q                       00460400
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00460500
                    AIF   (T'&ZCGPR NE 'N').ZG23Q  INVALID REG NAME     00460600
.ZG23P              ANOP  ,                                             00460700
                    AIF   (T'&ZCGPR NE 'N').ZG23R  NON NUMERIC          00460800
                    AIF   ('&ZCGPR' LT '2').ZG23Q                       00460900
                    AIF   ('&ZCGPR' LE '12').ZG23R                      00461000
.ZG23Q              ANOP  ,                                             00461100
&ZMS                SETC  '"GAP='                                       00461200
&ZMS                SETC  '&ZMS.&GAP"'                                  00461300
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00461400
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00461500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00461600
.ZG23R              ANOP  ,                                             00461700
.*-------------------------------------------------------------------   00461800
.***AG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START             00461900
                    AIF   ('&XMF' EQ 'M').ZG27  BYPASS IF MF=M          00462000
.*----------------------------------------------------------------***   00462100
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00462200
                    AIF   (N'&ERRBFLST LE 1).ZG26A  CK NUM              00462300
&ZMS                SETC  '"ERRBFLST='                                  00462400
&ZMS                SETC  '&ZMS.&ERRBFLST"'                             00462500
&ZMS                SETC  '&ZMS "ERRBFLST"'                             00462600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00462700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00462800
.ZG26A              ANOP  ,                                             00462900
.*-------------------------------------------------------------------   00463000
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00463100
                    AIF   (K'&ERRBFLST(1) LE 0).ZG26C  NO PARM          00463200
&ZXERRBFLST         SETC  'OUTPUT'    SET OUTPUT                        00463300
&XERRBFLST          SETC  '&ERRBFLST(1)'        SET XVARIABLE           00463400
                    AIF   (N'&ERRBFLST GT 1).ZG26C                      00463500
&XERRBFLST          SETC  '&ERRBFLST'           SET XVARIABLE           00463600
.ZG26C              ANOP  ,                                             00463700
.*-------------------------------------------------------------------   00463800
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00463900
                    AIF   (K'&ZXERRBFLST LE 0).ZG26R  NOT I/O           00464000
                    AIF   ('&XERRBFLST'(1,1) NE '(').ZG26R              00464100
&ZCGPR              SETC  '&XERRBFLST'(2,K'&XERRBFLST-2)                00464200
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG26P                  00464300
                    AIF   (K'&ZCGPR GT 2).ZG26Q                         00464400
                    AIF   ('&ZCGPR' EQ '0').ZG26Q                       00464500
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00464600
                    AIF   (T'&ZCGPR NE 'N').ZG26Q  INVALID REG NAME     00464700
.ZG26P              ANOP  ,                                             00464800
                    AIF   (T'&ZCGPR NE 'N').ZG26R  NON NUMERIC          00464900
                    AIF   ('&ZCGPR' LT '2').ZG26Q                       00465000
                    AIF   ('&ZCGPR' LE '12').ZG26R                      00465100
.ZG26Q              ANOP  ,                                             00465200
&ZMS                SETC  '"ERRBFLST='                                  00465300
&ZMS                SETC  '&ZMS.&ERRBFLST"'                             00465400
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00465500
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00465600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00465700
.ZG26R              ANOP  ,                                             00465800
.*-------------------------------------------------------------------   00465900
.***AG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END               00466000
.ZG27               ANOP  ,           END OF BYPASS CHECK               00466100
.*----------------------------------------------------------------***   00466200
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00466300
                    AIF   (N'&OWNERID LE 1).ZG29A  CK NUM               00466400
&ZMS                SETC  '"OWNERID='                                   00466500
&ZMS                SETC  '&ZMS.&OWNERID"'                              00466600
&ZMS                SETC  '&ZMS "OWNERID"'                              00466700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00466800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00466900
.ZG29A              ANOP  ,                                             00467000
.*-------------------------------------------------------------------   00467100
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00467200
&ZXOWNERID          SETC  'INPUT'     SET IN/OUTPUT                     00467300
&XOWNERID           SETC  '0'                                           00467400
                    AIF   (K'&OWNERID(1) LE 0).ZG29B  PARM              00467500
&XOWNERID           SETC  '&OWNERID(1)'         SET XVARIABLE           00467600
                    AIF   (N'&OWNERID GT 1).ZG29B  MULTI                00467700
&XOWNERID           SETC  '&OWNERID'  SET XVARIABLE                     00467800
.ZG29B              ANOP  ,                                             00467900
.*-------------------------------------------------------------------   00468000
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00468100
                    AIF   (K'&ZXOWNERID LE 0).ZG29R  NOT I/O            00468200
         AIF   ('&XOWNERID' EQ '0').ZG29R                               00468300
                    AIF   ('&XOWNERID'(1,1) NE '(').ZG29R               00468400
&ZCGPR              SETC  '&XOWNERID'(2,K'&XOWNERID-2)                  00468500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG29P                  00468600
                    AIF   (K'&ZCGPR GT 2).ZG29Q                         00468700
                    AIF   ('&ZCGPR' EQ '0').ZG29Q                       00468800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00468900
                    AIF   (T'&ZCGPR NE 'N').ZG29Q  INVALID REG NAME     00469000
.ZG29P              ANOP  ,                                             00469100
                    AIF   (T'&ZCGPR NE 'N').ZG29R  NON NUMERIC          00469200
                    AIF   ('&ZCGPR' LT '2').ZG29Q                       00469300
                    AIF   ('&ZCGPR' LE '12').ZG29R                      00469400
.ZG29Q              ANOP  ,                                             00469500
&ZMS                SETC  '"OWNERID='                                   00469600
&ZMS                SETC  '&ZMS.&OWNERID"'                              00469700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00469800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00469900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00470000
.ZG29R              ANOP  ,                                             00470100
.*----------------------------------------------------------------***   00470200
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00470300
                    AIF   (N'&COMPID LE 1).ZG32A  CK NUM                00470400
&ZMS                SETC  '"COMPID='                                    00470500
&ZMS                SETC  '&ZMS.&COMPID"'                               00470600
&ZMS                SETC  '&ZMS "COMPID"'                               00470700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00470800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00470900
.ZG32A              ANOP  ,                                             00471000
.*-------------------------------------------------------------------   00471100
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00471200
&ZXCOMPID           SETC  'INPUT'     SET IN/OUTPUT                     00471300
&XCOMPID            SETC  '0'                                           00471400
                    AIF   (K'&COMPID(1) LE 0).ZG32B  PARM               00471500
&XCOMPID            SETC  '&COMPID(1)'          SET XVARIABLE           00471600
                    AIF   (N'&COMPID GT 1).ZG32B  MULTI                 00471700
&XCOMPID            SETC  '&COMPID'   SET XVARIABLE                     00471800
.ZG32B              ANOP  ,                                             00471900
.*-------------------------------------------------------------------   00472000
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00472100
                    AIF   (K'&ZXCOMPID LE 0).ZG32R  NOT I/O             00472200
         AIF   ('&XCOMPID' EQ '0').ZG32R                                00472300
                    AIF   ('&XCOMPID'(1,1) NE '(').ZG32R                00472400
&ZCGPR              SETC  '&XCOMPID'(2,K'&XCOMPID-2)                    00472500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG32P                  00472600
                    AIF   (K'&ZCGPR GT 2).ZG32Q                         00472700
                    AIF   ('&ZCGPR' EQ '0').ZG32Q                       00472800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00472900
                    AIF   (T'&ZCGPR NE 'N').ZG32Q  INVALID REG NAME     00473000
.ZG32P              ANOP  ,                                             00473100
                    AIF   (T'&ZCGPR NE 'N').ZG32R  NON NUMERIC          00473200
                    AIF   ('&ZCGPR' LT '2').ZG32Q                       00473300
                    AIF   ('&ZCGPR' LE '12').ZG32R                      00473400
.ZG32Q              ANOP  ,                                             00473500
&ZMS                SETC  '"COMPID='                                    00473600
&ZMS                SETC  '&ZMS.&COMPID"'                               00473700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00473800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00473900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00474000
.ZG32R              ANOP  ,                                             00474100
.*----------------------------------------------------------------***   00474200
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00474300
                    AIF   (N'&COMPUSER LE 1).ZG35A  CK NUM              00474400
&ZMS                SETC  '"COMPUSER='                                  00474500
&ZMS                SETC  '&ZMS.&COMPUSER"'                             00474600
&ZMS                SETC  '&ZMS "COMPUSER"'                             00474700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00474800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00474900
.ZG35A              ANOP  ,                                             00475000
.*-------------------------------------------------------------------   00475100
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00475200
&ZXCOMPUSER         SETC  'INPUT'     SET IN/OUTPUT                     00475300
&XCOMPUSER          SETC  '0'                                           00475400
                    AIF   (K'&COMPUSER(1) LE 0).ZG35B  PARM             00475500
&XCOMPUSER          SETC  '&COMPUSER(1)'        SET XVARIABLE           00475600
                    AIF   (N'&COMPUSER GT 1).ZG35B  MULTI               00475700
&XCOMPUSER          SETC  '&COMPUSER'           SET XVARIABLE           00475800
.ZG35B              ANOP  ,                                             00475900
.*-------------------------------------------------------------------   00476000
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00476100
                    AIF   (K'&ZXCOMPUSER LE 0).ZG35R  NOT I/O           00476200
         AIF   ('&XCOMPUSER' EQ '0').ZG35R                              00476300
                    AIF   ('&XCOMPUSER'(1,1) NE '(').ZG35R              00476400
&ZCGPR              SETC  '&XCOMPUSER'(2,K'&XCOMPUSER-2)                00476500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG35P                  00476600
                    AIF   (K'&ZCGPR GT 2).ZG35Q                         00476700
                    AIF   ('&ZCGPR' EQ '0').ZG35Q                       00476800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00476900
                    AIF   (T'&ZCGPR NE 'N').ZG35Q  INVALID REG NAME     00477000
.ZG35P              ANOP  ,                                             00477100
                    AIF   (T'&ZCGPR NE 'N').ZG35R  NON NUMERIC          00477200
                    AIF   ('&ZCGPR' LT '2').ZG35Q                       00477300
                    AIF   ('&ZCGPR' LE '12').ZG35R                      00477400
.ZG35Q              ANOP  ,                                             00477500
&ZMS                SETC  '"COMPUSER='                                  00477600
&ZMS                SETC  '&ZMS.&COMPUSER"'                             00477700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00477800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00477900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00478000
.ZG35R              ANOP  ,                                             00478100
.*----------------------------------------------------------------***   00478200
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00478300
                    AIF   (N'&TASKID LE 1).ZG38A  CK NUM                00478400
&ZMS                SETC  '"TASKID='                                    00478500
&ZMS                SETC  '&ZMS.&TASKID"'                               00478600
&ZMS                SETC  '&ZMS "TASKID"'                               00478700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00478800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00478900
.ZG38A              ANOP  ,                                             00479000
.*-------------------------------------------------------------------   00479100
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00479200
&ZXTASKID           SETC  'INPUT'     SET IN/OUTPUT                     00479300
&XTASKID            SETC  '0'                                           00479400
                    AIF   (K'&TASKID(1) LE 0).ZG38B  PARM               00479500
&XTASKID            SETC  '&TASKID(1)'          SET XVARIABLE           00479600
                    AIF   (N'&TASKID GT 1).ZG38B  MULTI                 00479700
&XTASKID            SETC  '&TASKID'   SET XVARIABLE                     00479800
.ZG38B              ANOP  ,                                             00479900
.*-------------------------------------------------------------------   00480000
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00480100
                    AIF   (K'&ZXTASKID LE 0).ZG38R  NOT I/O             00480200
         AIF   ('&XTASKID' EQ '0').ZG38R                                00480300
                    AIF   ('&XTASKID'(1,1) NE '(').ZG38R                00480400
&ZCGPR              SETC  '&XTASKID'(2,K'&XTASKID-2)                    00480500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG38P                  00480600
                    AIF   (K'&ZCGPR GT 2).ZG38Q                         00480700
                    AIF   ('&ZCGPR' EQ '0').ZG38Q                       00480800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00480900
                    AIF   (T'&ZCGPR NE 'N').ZG38Q  INVALID REG NAME     00481000
.ZG38P              ANOP  ,                                             00481100
                    AIF   (T'&ZCGPR NE 'N').ZG38R  NON NUMERIC          00481200
                    AIF   ('&ZCGPR' LT '2').ZG38Q                       00481300
                    AIF   ('&ZCGPR' LE '12').ZG38R                      00481400
.ZG38Q              ANOP  ,                                             00481500
&ZMS                SETC  '"TASKID='                                    00481600
&ZMS                SETC  '&ZMS.&TASKID"'                               00481700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00481800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00481900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00482000
.ZG38R              ANOP  ,                                             00482100
.*----------------------------------------------------------------***   00482200
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00482300
                    AIF   (N'&THREAD LE 1).ZG41A  CK NUM                00482400
&ZMS                SETC  '"THREAD='                                    00482500
&ZMS                SETC  '&ZMS.&THREAD"'                               00482600
&ZMS                SETC  '&ZMS "THREAD"'                               00482700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00482800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00482900
.ZG41A              ANOP  ,                                             00483000
.*-------------------------------------------------------------------   00483100
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00483200
&ZXTHREAD           SETC  'INPUT'     SET IN/OUTPUT                     00483300
&XTHREAD            SETC  '0'                                           00483400
                    AIF   (K'&THREAD(1) LE 0).ZG41B  PARM               00483500
&XTHREAD            SETC  '&THREAD(1)'          SET XVARIABLE           00483600
                    AIF   (N'&THREAD GT 1).ZG41B  MULTI                 00483700
&XTHREAD            SETC  '&THREAD'   SET XVARIABLE                     00483800
.ZG41B              ANOP  ,                                             00483900
.*-------------------------------------------------------------------   00484000
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00484100
                    AIF   (K'&ZXTHREAD LE 0).ZG41R  NOT I/O             00484200
         AIF   ('&XTHREAD' EQ '0').ZG41R                                00484300
                    AIF   ('&XTHREAD'(1,1) NE '(').ZG41R                00484400
&ZCGPR              SETC  '&XTHREAD'(2,K'&XTHREAD-2)                    00484500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG41P                  00484600
                    AIF   (K'&ZCGPR GT 2).ZG41Q                         00484700
                    AIF   ('&ZCGPR' EQ '0').ZG41Q                       00484800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00484900
                    AIF   (T'&ZCGPR NE 'N').ZG41Q  INVALID REG NAME     00485000
.ZG41P              ANOP  ,                                             00485100
                    AIF   (T'&ZCGPR NE 'N').ZG41R  NON NUMERIC          00485200
                    AIF   ('&ZCGPR' LT '2').ZG41Q                       00485300
                    AIF   ('&ZCGPR' LE '12').ZG41R                      00485400
.ZG41Q              ANOP  ,                                             00485500
&ZMS                SETC  '"THREAD='                                    00485600
&ZMS                SETC  '&ZMS.&THREAD"'                               00485700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00485800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00485900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00486000
.ZG41R              ANOP  ,                                             00486100
.*----------------------------------------------------------------***   00486200
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00486300
                    AIF   (N'&UTILRTN LE 1).ZG44A  CK NUM               00486400
&ZMS                SETC  '"UTILRTN='                                   00486500
&ZMS                SETC  '&ZMS.&UTILRTN"'                              00486600
&ZMS                SETC  '&ZMS "UTILRTN"'                              00486700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00486800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00486900
.ZG44A              ANOP  ,                                             00487000
.*-------------------------------------------------------------------   00487100
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00487200
&ZXUTILRTN          SETC  'INPUT'     SET IN/OUTPUT                     00487300
&XUTILRTN           SETC  '0'                                           00487400
                    AIF   (K'&UTILRTN(1) LE 0).ZG44B  PARM              00487500
&XUTILRTN           SETC  '&UTILRTN(1)'         SET XVARIABLE           00487600
                    AIF   (N'&UTILRTN GT 1).ZG44B  MULTI                00487700
&XUTILRTN           SETC  '&UTILRTN'  SET XVARIABLE                     00487800
.ZG44B              ANOP  ,                                             00487900
.*-------------------------------------------------------------------   00488000
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00488100
                    AIF   (K'&ZXUTILRTN LE 0).ZG44R  NOT I/O            00488200
         AIF   ('&XUTILRTN' EQ '0').ZG44R                               00488300
                    AIF   ('&XUTILRTN'(1,1) NE '(').ZG44R               00488400
&ZCGPR              SETC  '&XUTILRTN'(2,K'&XUTILRTN-2)                  00488500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG44P                  00488600
                    AIF   (K'&ZCGPR GT 2).ZG44Q                         00488700
                    AIF   ('&ZCGPR' EQ '0').ZG44Q                       00488800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00488900
                    AIF   (T'&ZCGPR NE 'N').ZG44Q  INVALID REG NAME     00489000
.ZG44P              ANOP  ,                                             00489100
                    AIF   (T'&ZCGPR NE 'N').ZG44R  NON NUMERIC          00489200
                    AIF   ('&ZCGPR' LT '2').ZG44Q                       00489300
                    AIF   ('&ZCGPR' LE '12').ZG44R                      00489400
.ZG44Q              ANOP  ,                                             00489500
&ZMS                SETC  '"UTILRTN='                                   00489600
&ZMS                SETC  '&ZMS.&UTILRTN"'                              00489700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00489800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00489900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00490000
.ZG44R              ANOP  ,                                             00490100
.*-------------------------------------------------------------------   00490200
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00490300
.ZG46               ANOP  ,                                             00490400
&ZTLC               SETC 'CHANGE_OWNER'                                 00490500
                    AIF   ('&REQUEST(1)' NE '&ZTLC').ZG88               00490600
&XREQUEST           SETC  'CHANGE_OWNER'        SET KEYWORD             00490700
                    AIF   (N'&REQUEST LE 1).ZG46A  CK NUM               00490800
&ZMS                SETC  '"REQUEST='                                   00490900
&ZMS                SETC  '&ZMS.&REQUEST"'                              00491000
&ZMS                SETC  '&ZMS "REQUEST"'                              00491100
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00491200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00491300
.ZG46A              ANOP  ,                                             00491400
.*------------------------------------------------------------------    00491500
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00491600
&ZCVAL              SETC ''           CLEAR ERROR KEY ACCUMULATOR       00491700
.ZG46A0             AIF   (K'&BUFTYPE LE 0).ZG46A1  OK                  00491800
&ZCVAL              SETC '&ZCVAL BUFTYPE'       INCORRECT KEY USED      00491900
.ZG46A1             AIF   (K'&PAD LE 0).ZG46A2  OK                      00492000
&ZCVAL              SETC '&ZCVAL PAD'           INCORRECT KEY USED      00492100
.ZG46A2             AIF   (K'&PADCHAR LE 0).ZG46A3  OK                  00492200
&ZCVAL              SETC '&ZCVAL PADCHAR'       INCORRECT KEY USED      00492300
.ZG46A3             AIF   (K'&SRCERRL LE 0).ZG46A4  OK                  00492400
&ZCVAL              SETC '&ZCVAL SRCERRL'       INCORRECT KEY USED      00492500
.ZG46A4             AIF   (K'&SRCGAP LE 0).ZG46A5  OK                   00492600
&ZCVAL              SETC '&ZCVAL SRCGAP'        INCORRECT KEY USED      00492700
.ZG46A5             AIF   (K'&SRCLIST LE 0).ZG46A6  OK                  00492800
&ZCVAL              SETC '&ZCVAL SRCLIST'       INCORRECT KEY USED      00492900
.ZG46A6             AIF   (K'&SRCLST64 LE 0).ZG46A7  OK                 00493000
&ZCVAL              SETC '&ZCVAL SRCLST64'      INCORRECT KEY USED      00493100
.ZG46A7             AIF   (K'&SRCNUM LE 0).ZG46A8  OK                   00493200
&ZCVAL              SETC '&ZCVAL SRCNUM'        INCORRECT KEY USED      00493300
.ZG46A8             AIF   (K'&TARGERRL LE 0).ZG46A9  OK                 00493400
&ZCVAL              SETC '&ZCVAL TARGERRL'      INCORRECT KEY USED      00493500
.ZG46A9             AIF   (K'&TARGGAP LE 0).ZG46A10  OK                 00493600
&ZCVAL              SETC '&ZCVAL TARGGAP'       INCORRECT KEY USED      00493700
.ZG46A10            AIF   (K'&TARGLIST LE 0).ZG46A11  OK                00493800
&ZCVAL              SETC '&ZCVAL TARGLIST'      INCORRECT KEY USED      00493900
.ZG46A11            AIF   (K'&TARLST64 LE 0).ZG46A12  OK                00494000
&ZCVAL              SETC '&ZCVAL TARLST64'      INCORRECT KEY USED      00494100
.ZG46A12            AIF   (K'&TARGNUM LE 0).ZG46A13  OK                 00494200
&ZCVAL              SETC '&ZCVAL TARGNUM'       INCORRECT KEY USED      00494300
.ZG46A13            AIF   (K'&BUFSIZE LE 0).ZG46A14  OK                 00494400
&ZCVAL              SETC '&ZCVAL BUFSIZE'       INCORRECT KEY USED      00494500
.ZG46A14            AIF   (K'&BUFSOURC LE 0).ZG46A15  OK                00494600
&ZCVAL              SETC '&ZCVAL BUFSOURC'      INCORRECT KEY USED      00494700
.ZG46A15            AIF   (K'&BACK LE 0).ZG46A16  OK                    00494800
&ZCVAL              SETC '&ZCVAL BACK'          INCORRECT KEY USED      00494900
.ZG46A16            AIF   (K'&DS_INFO LE 0).ZG46A17  OK                 00495000
&ZCVAL              SETC '&ZCVAL DS_INFO'       INCORRECT KEY USED      00495100
.ZG46A17            AIF   (K'&EXPBUF LE 0).ZG46A18  OK                  00495200
&ZCVAL              SETC '&ZCVAL EXPBUF'        INCORRECT KEY USED      00495300
.ZG46A18            AIF   (K'&INITBUF LE 0).ZG46A19  OK                 00495400
&ZCVAL              SETC '&ZCVAL INITBUF'       INCORRECT KEY USED      00495500
.ZG46A19            AIF   (K'&MINFREE LE 0).ZG46A20  OK                 00495600
&ZCVAL              SETC '&ZCVAL MINFREE'       INCORRECT KEY USED      00495700
.ZG46A20            AIF   (K'&RETPTOKN LE 0).ZG46A21  OK                00495800
&ZCVAL              SETC '&ZCVAL RETPTOKN'      INCORRECT KEY USED      00495900
.ZG46A21            AIF   (K'&STATAREA LE 0).ZG46A22  OK                00496000
&ZCVAL              SETC '&ZCVAL STATAREA'      INCORRECT KEY USED      00496100
.ZG46A22            AIF   (K'&POOLTOKN LE 0).ZG46A23  OK                00496200
&ZCVAL              SETC '&ZCVAL POOLTOKN'      INCORRECT KEY USED      00496300
.ZG46A23            AIF   (K'&WAIT LE 0).ZG46A24  OK                    00496400
&ZCVAL              SETC '&ZCVAL WAIT'          INCORRECT KEY USED      00496500
.ZG46A24            AIF   (K'&CLEAR LE 0).ZG46A25  OK                   00496600
&ZCVAL              SETC '&ZCVAL CLEAR'         INCORRECT KEY USED      00496700
.ZG46A25            AIF   (K'&FREETO LE 0).ZG46A26  OK                  00496800
&ZCVAL              SETC '&ZCVAL FREETO'        INCORRECT KEY USED      00496900
.ZG46A26            AIF   (K'&FREERTN LE 0).ZG46A27  OK                 00497000
&ZCVAL              SETC '&ZCVAL FREERTN'       INCORRECT KEY USED      00497100
.ZG46A27            AIF   (K'&ZCVAL LE 0).ZG46A28  OK                   00497200
&ZCVAL              SETC '&ZCVAL'(2,K'&ZCVAL-1)                         00497300
                    AIF  (K'&ZCVAL LE 160).ZG46A28A                     00497400
&ZCVAL              SETC '&ZCVAL'(1,160)                                00497500
&ZCVAL              SETC '&ZCVAL....'                                   00497600
.ZG46A28A           ANOP                                                00497700
&ZMS                SETC  '"REQUEST'                                    00497800
&ZMS                SETC  '&ZMS.=&REQUEST"'                             00497900
&ZMS                SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'          00498000
                    MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'          00498100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00498200
.ZG46A28            ANOP  ,                                             00498300
.*----------------------------------------------------------------***   00498400
.***AG.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00498500
&XDUMMY2            SETC  ''          INITIALIZE XVARIABLE              00498600
                    AIF   (K'&BUFLIST LE 0).ZG48C                       00498700
&ZXDUMMY2           SETC  'INPUT'     SET IN/OUTPUT                     00498800
&XDUMMY2            SETC  'BUFLIST'   SET XVARIABLE                     00498900
&ZXBUFLIST          SETC  'INPUT'     SET IN/OUTPUT                     00499000
&XBUFLIST           SETC  '&BUFLIST(1)'         SET XVARIABLE PARM      00499100
                    AIF   (N'&BUFLIST GT 1).ZG48A                       00499200
&XBUFLIST           SETC  '&BUFLIST'  SET XVARIABLE PARM                00499300
.ZG48A              AIF   (N'&BUFLIST LE 1).ZG48B  CK NUM               00499400
&ZMS                SETC  '"BUFLIST='                                   00499500
&ZMS                SETC  '&ZMS.&BUFLIST"'                              00499600
&ZMS                SETC  '&ZMS "BUFLIST"'                              00499700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00499800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00499900
.ZG48B              AIF   (K'&XBUFLIST GT 0).ZG48C  ONE PARM            00500000
&ZXDUMMY2           SETC  ''          RESET IN/OUTPUT                   00500100
&ZXBUFLIST          SETC  ''          RESET IN/OUTPUT                   00500200
&ZMS                SETC  ' '                                           00500300
&ZMS                SETC  '&ZMS "BUFLIST" KEY AND ITS'                  00500400
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00500500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00500600
.ZG48C              ANOP  ,                                             00500700
.*----------------------------------------------------------------***   00500800
.***AG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00500900
                    AIF   (K'&BUFLST64 LE 0).ZG49D  NO ME KEY           00501000
                    AIF   (N'&BUFLST64 LE 1).ZG49A  CK NUM              00501100
&ZMS                SETC  '"BUFLST64='                                  00501200
&ZMS                SETC  '&ZMS.&BUFLST64"'                             00501300
&ZMS                SETC  '&ZMS "BUFLST64"'                             00501400
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00501500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00501600
.ZG49A              AIF   (K'&XDUMMY2 LE 0).ZG49B                       00501700
&ZMS                SETC  '"BUFLST64'                                   00501800
&ZMS                SETC  '&ZMS.=&BUFLST64"'                            00501900
&ZMS                SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'         00502000
&ZMS                SETC  '&ZMS "&XDUMMY2"'                             00502100
                    MNOTE 8,' &ZMS KEY.'                                00502200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00502300
                    AGO   .ZG49D                                        00502400
.*                                                                      00502500
.ZG49B              ANOP  ,                                             00502600
&ZXDUMMY2           SETC  'INPUT'     SET IN/OUTPUT                     00502700
&XDUMMY2            SETC  'BUFLST64'  SET XVARIABLE                     00502800
&ZXBUFLST64         SETC  'INPUT'     SET IN/OUTPUT                     00502900
&XBUFLST64          SETC  '&BUFLST64(1)'        SET XVARIABLE PARM      00503000
                    AIF   (N'&BUFLST64 GT 1).ZG49C                      00503100
&XBUFLST64          SETC  '&BUFLST64'           SET XVARIABLE PARM      00503200
.ZG49C              AIF   (K'&XBUFLST64 GT 0).ZG49D  ONE PARM           00503300
&ZXDUMMY2           SETC  ''          RESET IN/OUTPUT                   00503400
&ZXBUFLST64         SETC  ''          RESET IN/OUTPUT                   00503500
&ZMS                SETC  ' '                                           00503600
&ZMS                SETC  '&ZMS "BUFLST64" KEY AND ITS'                 00503700
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00503800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00503900
.ZG49D              ANOP  ,                                             00504000
.*------------------------------------------------------------------    00504100
.***AG.KME4Y09 NAME, RQD INPUT, ME KEYS -CHECK IF KEY ENTERED           00504200
                    AIF   (K'&XDUMMY2 GT 0).ZG50B                       00504300
&ZXDUMMY2           SETC  ''          RESET IN/OUTPUT                   00504400
&ZXBUFLIST          SETC  ''          RESET IN/OUTPUT                   00504500
&XDUMMY2            SETC  ''          ENSURE NULL                       00504600
&XBUFLIST           SETC  ''          ENSURE NULL                       00504700
&ZMS                SETC  'ONE OF THE FOLLOWING'                        00504800
&ZMS                SETC  '&ZMS MUTUALLY EXCLUSIVE KEY(S) IS'           00504900
&ZMS                SETC  '&ZMS REQUIRED:'                              00505000
&ZMS                SETC  '&ZMS "BUFLIST"'      VALID ME KEY            00505100
&ZMS                SETC  '&ZMS OR "BUFLST64".'  VALID ME KEY           00505200
                    MNOTE 8,' &ZMS '                                    00505300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00505400
.ZG50B              ANOP  ,                                             00505500
.*-------------------------------------------------------------------   00505600
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00505700
.ZG48ZY  AIF    ('&XDUMMY2' NE 'BUFLIST').ZG49ZY                        00505800
.*-------------------------------------------------------------------   00505900
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00506000
                    AIF   (K'&ZXBUFLIST LE 0).ZG48R  NOT I/O            00506100
                    AIF   ('&XBUFLIST'(1,1) NE '(').ZG48R               00506200
&ZCGPR              SETC  '&XBUFLIST'(2,K'&XBUFLIST-2)                  00506300
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG48P                  00506400
                    AIF   (K'&ZCGPR GT 2).ZG48Q                         00506500
                    AIF   ('&ZCGPR' EQ '0').ZG48Q                       00506600
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00506700
                    AIF   (T'&ZCGPR NE 'N').ZG48Q  INVALID REG NAME     00506800
.ZG48P              ANOP  ,                                             00506900
                    AIF   (T'&ZCGPR NE 'N').ZG48R  NON NUMERIC          00507000
                    AIF   ('&ZCGPR' LT '2').ZG48Q                       00507100
                    AIF   ('&ZCGPR' LE '12').ZG48R                      00507200
.ZG48Q              ANOP  ,                                             00507300
&ZMS                SETC  '"BUFLIST='                                   00507400
&ZMS                SETC  '&ZMS.&BUFLIST"'                              00507500
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00507600
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00507700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00507800
.ZG48R              ANOP  ,                                             00507900
.*-------------------------------------------------------------------   00508000
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00508100
.ZG49ZY  AIF    ('&XDUMMY2' NE 'BUFLST64').ZG50ZY                       00508200
.*-------------------------------------------------------------------   00508300
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00508400
                    AIF   (K'&ZXBUFLST64 LE 0).ZG49R  NOT I/O           00508500
                    AIF   ('&XBUFLST64'(1,1) NE '(').ZG49R              00508600
&ZCGPR              SETC  '&XBUFLST64'(2,K'&XBUFLST64-2)                00508700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG49P                  00508800
                    AIF   (K'&ZCGPR GT 2).ZG49Q                         00508900
                    AIF   ('&ZCGPR' EQ '0').ZG49Q                       00509000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00509100
                    AIF   (T'&ZCGPR NE 'N').ZG49Q  INVALID REG NAME     00509200
.ZG49P              ANOP  ,                                             00509300
                    AIF   (T'&ZCGPR NE 'N').ZG49R  NON NUMERIC          00509400
                    AIF   ('&ZCGPR' LT '2').ZG49Q                       00509500
                    AIF   ('&ZCGPR' LE '12').ZG49R                      00509600
.ZG49Q              ANOP  ,                                             00509700
&ZMS                SETC  '"BUFLST64='                                  00509800
&ZMS                SETC  '&ZMS.&BUFLST64"'                             00509900
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00510000
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00510100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00510200
.ZG49R              ANOP  ,                                             00510300
.*-------------------------------------------------------------------   00510400
.***AG.KMEKY15 NAME, RQD INPUT, ME KEYS -END                            00510500
.ZG50ZY             ANOP ,            END MUTUALLY EXCLUSIVE KEYS       00510600
.*----------------------------------------------------------------***   00510700
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00510800
                    AIF   (N'&BUFNUM LE 1).ZG52A  CK NUM                00510900
&ZMS                SETC  '"BUFNUM='                                    00511000
&ZMS                SETC  '&ZMS.&BUFNUM"'                               00511100
&ZMS                SETC  '&ZMS "BUFNUM"'                               00511200
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00511300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00511400
.ZG52A              ANOP  ,                                             00511500
.*-------------------------------------------------------------------   00511600
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00511700
&ZXBUFNUM           SETC  'INPUT'     SET IN/OUTPUT                     00511800
&XBUFNUM            SETC  '&BUFNUM(1)'          SET XVARIABLE           00511900
                    AIF   (N'&BUFNUM GT 1).ZG52B  MULTI PARMS           00512000
&XBUFNUM            SETC  '&BUFNUM'   SET XVARIABLE                     00512100
.ZG52B              AIF   (K'&BUFNUM(1) GT 0).ZG52C                     00512200
&ZXBUFNUM           SETC  ''          RESET IN/OUTPUT                   00512300
&ZMS                SETC  ' '                                           00512400
&ZMS                SETC  '&ZMS "BUFNUM" KEY AND ITS'                   00512500
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00512600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00512700
.ZG52C              ANOP  ,                                             00512800
.*-------------------------------------------------------------------   00512900
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00513000
                    AIF   (K'&ZXBUFNUM LE 0).ZG52R  NOT I/O             00513100
                    AIF   ('&XBUFNUM'(1,1) NE '(').ZG52R                00513200
&ZCGPR              SETC  '&XBUFNUM'(2,K'&XBUFNUM-2)                    00513300
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG52P                  00513400
                    AIF   (K'&ZCGPR GT 2).ZG52Q                         00513500
                    AIF   ('&ZCGPR' EQ '0').ZG52Q                       00513600
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00513700
                    AIF   (T'&ZCGPR NE 'N').ZG52Q  INVALID REG NAME     00513800
.ZG52P              ANOP  ,                                             00513900
                    AIF   (T'&ZCGPR NE 'N').ZG52R  NON NUMERIC          00514000
                    AIF   ('&ZCGPR' LT '2').ZG52Q                       00514100
                    AIF   ('&ZCGPR' LE '12').ZG52R                      00514200
.ZG52Q              ANOP  ,                                             00514300
&ZMS                SETC  '"BUFNUM='                                    00514400
&ZMS                SETC  '&ZMS.&BUFNUM"'                               00514500
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00514600
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00514700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00514800
.ZG52R              ANOP  ,                                             00514900
.*----------------------------------------------------------------***   00515000
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00515100
                    AIF   (N'&CSMUSER LE 1).ZG55A  CK NUM               00515200
&ZMS                SETC  '"CSMUSER='                                   00515300
&ZMS                SETC  '&ZMS.&CSMUSER"'                              00515400
&ZMS                SETC  '&ZMS "CSMUSER"'                              00515500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00515600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00515700
.ZG55A              ANOP  ,                                             00515800
.*-------------------------------------------------------------------   00515900
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00516000
&XCSMUSER           SETC  ''          INITIALIZE XVARIABLE              00516100
.ZG56A   AIF   ('&CSMUSER(1)' NE 'NO').ZG57A                            00516200
&XCSMUSER           SETC  'NO'        SET KEYWORD                       00516300
.*-------------------------------------------------------------------   00516400
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00516500
.ZG57A   AIF   ('&CSMUSER(1)' NE 'YES').ZG58A                           00516600
&XCSMUSER           SETC  'YES'       SET KEYWORD                       00516700
.*-------------------------------------------------------------------   00516800
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00516900
.ZG58A              AIF   (K'&XCSMUSER GT 0).ZG58C  KEYWORD             00517000
                    AIF   (K'&CSMUSER(1) LE 0).ZG58B                    00517100
&ZMS                SETC  '"CSMUSER='                                   00517200
&ZMS                SETC  '&ZMS.&CSMUSER"'                              00517300
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     00517400
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           00517500
&ZMS                SETC  '&ZMS "NO"'                                   00517600
&ZMS                SETC  '&ZMS OR "YES".'                              00517700
                    MNOTE 8,' &ZMS '                                    00517800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00517900
.ZG58B              ANOP  ,                                             00518000
&XCSMUSER           SETC  'NO'        SET DEFAULT KEYWORD               00518100
.ZG58C              ANOP  ,                                             00518200
&ZXCSMUSER          SETC  'INPUT'     SET IN/OUTPUT                     00518300
.*-------------------------------------------------------------------   00518400
.***AG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START             00518500
                    AIF   ('&XMF' EQ 'M').ZG61  BYPASS IF MF=M          00518600
.*----------------------------------------------------------------***   00518700
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00518800
                    AIF   (N'&ERRBFLST LE 1).ZG60A  CK NUM              00518900
&ZMS                SETC  '"ERRBFLST='                                  00519000
&ZMS                SETC  '&ZMS.&ERRBFLST"'                             00519100
&ZMS                SETC  '&ZMS "ERRBFLST"'                             00519200
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00519300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00519400
.ZG60A              ANOP  ,                                             00519500
.*-------------------------------------------------------------------   00519600
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00519700
                    AIF   (K'&ERRBFLST(1) LE 0).ZG60C  NO PARM          00519800
&ZXERRBFLST         SETC  'OUTPUT'    SET OUTPUT                        00519900
&XERRBFLST          SETC  '&ERRBFLST(1)'        SET XVARIABLE           00520000
                    AIF   (N'&ERRBFLST GT 1).ZG60C                      00520100
&XERRBFLST          SETC  '&ERRBFLST'           SET XVARIABLE           00520200
.ZG60C              ANOP  ,                                             00520300
.*-------------------------------------------------------------------   00520400
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00520500
                    AIF   (K'&ZXERRBFLST LE 0).ZG60R  NOT I/O           00520600
                    AIF   ('&XERRBFLST'(1,1) NE '(').ZG60R              00520700
&ZCGPR              SETC  '&XERRBFLST'(2,K'&XERRBFLST-2)                00520800
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG60P                  00520900
                    AIF   (K'&ZCGPR GT 2).ZG60Q                         00521000
                    AIF   ('&ZCGPR' EQ '0').ZG60Q                       00521100
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00521200
                    AIF   (T'&ZCGPR NE 'N').ZG60Q  INVALID REG NAME     00521300
.ZG60P              ANOP  ,                                             00521400
                    AIF   (T'&ZCGPR NE 'N').ZG60R  NON NUMERIC          00521500
                    AIF   ('&ZCGPR' LT '2').ZG60Q                       00521600
                    AIF   ('&ZCGPR' LE '12').ZG60R                      00521700
.ZG60Q              ANOP  ,                                             00521800
&ZMS                SETC  '"ERRBFLST='                                  00521900
&ZMS                SETC  '&ZMS.&ERRBFLST"'                             00522000
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00522100
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00522200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00522300
.ZG60R              ANOP  ,                                             00522400
.*-------------------------------------------------------------------   00522500
.***AG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END               00522600
.ZG61               ANOP  ,           END OF BYPASS CHECK               00522700
.*----------------------------------------------------------------***   00522800
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00522900
                    AIF   (N'&GAP LE 1).ZG63A   CK NUM                  00523000
&ZMS                SETC  '"GAP='                                       00523100
&ZMS                SETC  '&ZMS.&GAP"'                                  00523200
&ZMS                SETC  '&ZMS "GAP"'                                  00523300
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00523400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00523500
.ZG63A              ANOP  ,                                             00523600
.*-------------------------------------------------------------------   00523700
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00523800
&ZXGAP              SETC  'INPUT'     SET IN/OUTPUT                     00523900
&XGAP               SETC  '0'                                           00524000
                    AIF   (K'&GAP(1) LE 0).ZG63B  PARM                  00524100
&XGAP               SETC  '&GAP(1)'   SET XVARIABLE                     00524200
                    AIF   (N'&GAP GT 1).ZG63B   MULTI                   00524300
&XGAP               SETC  '&GAP'      SET XVARIABLE                     00524400
.ZG63B              ANOP  ,                                             00524500
.*-------------------------------------------------------------------   00524600
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00524700
                    AIF   (K'&ZXGAP LE 0).ZG63R  NOT I/O                00524800
         AIF   ('&XGAP' EQ '0').ZG63R                                   00524900
                    AIF   ('&XGAP'(1,1) NE '(').ZG63R                   00525000
&ZCGPR              SETC  '&XGAP'(2,K'&XGAP-2)                          00525100
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG63P                  00525200
                    AIF   (K'&ZCGPR GT 2).ZG63Q                         00525300
                    AIF   ('&ZCGPR' EQ '0').ZG63Q                       00525400
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00525500
                    AIF   (T'&ZCGPR NE 'N').ZG63Q  INVALID REG NAME     00525600
.ZG63P              ANOP  ,                                             00525700
                    AIF   (T'&ZCGPR NE 'N').ZG63R  NON NUMERIC          00525800
                    AIF   ('&ZCGPR' LT '2').ZG63Q                       00525900
                    AIF   ('&ZCGPR' LE '12').ZG63R                      00526000
.ZG63Q              ANOP  ,                                             00526100
&ZMS                SETC  '"GAP='                                       00526200
&ZMS                SETC  '&ZMS.&GAP"'                                  00526300
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00526400
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00526500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00526600
.ZG63R              ANOP  ,                                             00526700
.*----------------------------------------------------------------***   00526800
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00526900
                    AIF   (N'&OWNERID LE 1).ZG66A  CK NUM               00527000
&ZMS                SETC  '"OWNERID='                                   00527100
&ZMS                SETC  '&ZMS.&OWNERID"'                              00527200
&ZMS                SETC  '&ZMS "OWNERID"'                              00527300
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00527400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00527500
.ZG66A              ANOP  ,                                             00527600
.*-------------------------------------------------------------------   00527700
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00527800
&ZXOWNERID          SETC  'INPUT'     SET IN/OUTPUT                     00527900
&XOWNERID           SETC  '0'                                           00528000
                    AIF   (K'&OWNERID(1) LE 0).ZG66B  PARM              00528100
&XOWNERID           SETC  '&OWNERID(1)'         SET XVARIABLE           00528200
                    AIF   (N'&OWNERID GT 1).ZG66B  MULTI                00528300
&XOWNERID           SETC  '&OWNERID'  SET XVARIABLE                     00528400
.ZG66B              ANOP  ,                                             00528500
.*-------------------------------------------------------------------   00528600
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00528700
                    AIF   (K'&ZXOWNERID LE 0).ZG66R  NOT I/O            00528800
         AIF   ('&XOWNERID' EQ '0').ZG66R                               00528900
                    AIF   ('&XOWNERID'(1,1) NE '(').ZG66R               00529000
&ZCGPR              SETC  '&XOWNERID'(2,K'&XOWNERID-2)                  00529100
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG66P                  00529200
                    AIF   (K'&ZCGPR GT 2).ZG66Q                         00529300
                    AIF   ('&ZCGPR' EQ '0').ZG66Q                       00529400
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00529500
                    AIF   (T'&ZCGPR NE 'N').ZG66Q  INVALID REG NAME     00529600
.ZG66P              ANOP  ,                                             00529700
                    AIF   (T'&ZCGPR NE 'N').ZG66R  NON NUMERIC          00529800
                    AIF   ('&ZCGPR' LT '2').ZG66Q                       00529900
                    AIF   ('&ZCGPR' LE '12').ZG66R                      00530000
.ZG66Q              ANOP  ,                                             00530100
&ZMS                SETC  '"OWNERID='                                   00530200
&ZMS                SETC  '&ZMS.&OWNERID"'                              00530300
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00530400
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00530500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00530600
.ZG66R              ANOP  ,                                             00530700
.*----------------------------------------------------------------***   00530800
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00530900
                    AIF   (N'&COMPID LE 1).ZG69A  CK NUM                00531000
&ZMS                SETC  '"COMPID='                                    00531100
&ZMS                SETC  '&ZMS.&COMPID"'                               00531200
&ZMS                SETC  '&ZMS "COMPID"'                               00531300
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00531400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00531500
.ZG69A              ANOP  ,                                             00531600
.*-------------------------------------------------------------------   00531700
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00531800
&ZXCOMPID           SETC  'INPUT'     SET IN/OUTPUT                     00531900
&XCOMPID            SETC  '0'                                           00532000
                    AIF   (K'&COMPID(1) LE 0).ZG69B  PARM               00532100
&XCOMPID            SETC  '&COMPID(1)'          SET XVARIABLE           00532200
                    AIF   (N'&COMPID GT 1).ZG69B  MULTI                 00532300
&XCOMPID            SETC  '&COMPID'   SET XVARIABLE                     00532400
.ZG69B              ANOP  ,                                             00532500
.*-------------------------------------------------------------------   00532600
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00532700
                    AIF   (K'&ZXCOMPID LE 0).ZG69R  NOT I/O             00532800
         AIF   ('&XCOMPID' EQ '0').ZG69R                                00532900
                    AIF   ('&XCOMPID'(1,1) NE '(').ZG69R                00533000
&ZCGPR              SETC  '&XCOMPID'(2,K'&XCOMPID-2)                    00533100
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG69P                  00533200
                    AIF   (K'&ZCGPR GT 2).ZG69Q                         00533300
                    AIF   ('&ZCGPR' EQ '0').ZG69Q                       00533400
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00533500
                    AIF   (T'&ZCGPR NE 'N').ZG69Q  INVALID REG NAME     00533600
.ZG69P              ANOP  ,                                             00533700
                    AIF   (T'&ZCGPR NE 'N').ZG69R  NON NUMERIC          00533800
                    AIF   ('&ZCGPR' LT '2').ZG69Q                       00533900
                    AIF   ('&ZCGPR' LE '12').ZG69R                      00534000
.ZG69Q              ANOP  ,                                             00534100
&ZMS                SETC  '"COMPID='                                    00534200
&ZMS                SETC  '&ZMS.&COMPID"'                               00534300
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00534400
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00534500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00534600
.ZG69R              ANOP  ,                                             00534700
.*----------------------------------------------------------------***   00534800
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00534900
                    AIF   (N'&COMPUSER LE 1).ZG72A  CK NUM              00535000
&ZMS                SETC  '"COMPUSER='                                  00535100
&ZMS                SETC  '&ZMS.&COMPUSER"'                             00535200
&ZMS                SETC  '&ZMS "COMPUSER"'                             00535300
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00535400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00535500
.ZG72A              ANOP  ,                                             00535600
.*-------------------------------------------------------------------   00535700
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00535800
&ZXCOMPUSER         SETC  'INPUT'     SET IN/OUTPUT                     00535900
&XCOMPUSER          SETC  '0'                                           00536000
                    AIF   (K'&COMPUSER(1) LE 0).ZG72B  PARM             00536100
&XCOMPUSER          SETC  '&COMPUSER(1)'        SET XVARIABLE           00536200
                    AIF   (N'&COMPUSER GT 1).ZG72B  MULTI               00536300
&XCOMPUSER          SETC  '&COMPUSER'           SET XVARIABLE           00536400
.ZG72B              ANOP  ,                                             00536500
.*-------------------------------------------------------------------   00536600
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00536700
                    AIF   (K'&ZXCOMPUSER LE 0).ZG72R  NOT I/O           00536800
         AIF   ('&XCOMPUSER' EQ '0').ZG72R                              00536900
                    AIF   ('&XCOMPUSER'(1,1) NE '(').ZG72R              00537000
&ZCGPR              SETC  '&XCOMPUSER'(2,K'&XCOMPUSER-2)                00537100
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG72P                  00537200
                    AIF   (K'&ZCGPR GT 2).ZG72Q                         00537300
                    AIF   ('&ZCGPR' EQ '0').ZG72Q                       00537400
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00537500
                    AIF   (T'&ZCGPR NE 'N').ZG72Q  INVALID REG NAME     00537600
.ZG72P              ANOP  ,                                             00537700
                    AIF   (T'&ZCGPR NE 'N').ZG72R  NON NUMERIC          00537800
                    AIF   ('&ZCGPR' LT '2').ZG72Q                       00537900
                    AIF   ('&ZCGPR' LE '12').ZG72R                      00538000
.ZG72Q              ANOP  ,                                             00538100
&ZMS                SETC  '"COMPUSER='                                  00538200
&ZMS                SETC  '&ZMS.&COMPUSER"'                             00538300
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00538400
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00538500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00538600
.ZG72R              ANOP  ,                                             00538700
.*----------------------------------------------------------------***   00538800
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00538900
                    AIF   (N'&SKIPBUF LE 1).ZG75A  CK NUM               00539000
&ZMS                SETC  '"SKIPBUF='                                   00539100
&ZMS                SETC  '&ZMS.&SKIPBUF"'                              00539200
&ZMS                SETC  '&ZMS "SKIPBUF"'                              00539300
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00539400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00539500
.ZG75A              ANOP  ,                                             00539600
.*-------------------------------------------------------------------   00539700
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00539800
&XSKIPBUF           SETC  ''          INITIALIZE XVARIABLE              00539900
.ZG76A   AIF   ('&SKIPBUF(1)' NE 'NO').ZG77A                            00540000
&XSKIPBUF           SETC  'NO'        SET KEYWORD                       00540100
.*-------------------------------------------------------------------   00540200
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00540300
.ZG77A   AIF   ('&SKIPBUF(1)' NE 'YES').ZG78A                           00540400
&XSKIPBUF           SETC  'YES'       SET KEYWORD                       00540500
.*-------------------------------------------------------------------   00540600
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00540700
.ZG78A              AIF   (K'&XSKIPBUF GT 0).ZG78C  KEYWORD             00540800
                    AIF   (K'&SKIPBUF(1) LE 0).ZG78B                    00540900
&ZMS                SETC  '"SKIPBUF='                                   00541000
&ZMS                SETC  '&ZMS.&SKIPBUF"'                              00541100
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     00541200
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           00541300
&ZMS                SETC  '&ZMS "NO"'                                   00541400
&ZMS                SETC  '&ZMS OR "YES".'                              00541500
                    MNOTE 8,' &ZMS '                                    00541600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00541700
.ZG78B              ANOP  ,                                             00541800
&XSKIPBUF           SETC  'NO'        SET DEFAULT KEYWORD               00541900
.ZG78C              ANOP  ,                                             00542000
&ZXSKIPBUF          SETC  'INPUT'     SET IN/OUTPUT                     00542100
.*----------------------------------------------------------------***   00542200
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00542300
                    AIF   (N'&TASKID LE 1).ZG80A  CK NUM                00542400
&ZMS                SETC  '"TASKID='                                    00542500
&ZMS                SETC  '&ZMS.&TASKID"'                               00542600
&ZMS                SETC  '&ZMS "TASKID"'                               00542700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00542800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00542900
.ZG80A              ANOP  ,                                             00543000
.*-------------------------------------------------------------------   00543100
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00543200
&ZXTASKID           SETC  'INPUT'     SET IN/OUTPUT                     00543300
&XTASKID            SETC  '0'                                           00543400
                    AIF   (K'&TASKID(1) LE 0).ZG80B  PARM               00543500
&XTASKID            SETC  '&TASKID(1)'          SET XVARIABLE           00543600
                    AIF   (N'&TASKID GT 1).ZG80B  MULTI                 00543700
&XTASKID            SETC  '&TASKID'   SET XVARIABLE                     00543800
.ZG80B              ANOP  ,                                             00543900
.*-------------------------------------------------------------------   00544000
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00544100
                    AIF   (K'&ZXTASKID LE 0).ZG80R  NOT I/O             00544200
         AIF   ('&XTASKID' EQ '0').ZG80R                                00544300
                    AIF   ('&XTASKID'(1,1) NE '(').ZG80R                00544400
&ZCGPR              SETC  '&XTASKID'(2,K'&XTASKID-2)                    00544500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG80P                  00544600
                    AIF   (K'&ZCGPR GT 2).ZG80Q                         00544700
                    AIF   ('&ZCGPR' EQ '0').ZG80Q                       00544800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00544900
                    AIF   (T'&ZCGPR NE 'N').ZG80Q  INVALID REG NAME     00545000
.ZG80P              ANOP  ,                                             00545100
                    AIF   (T'&ZCGPR NE 'N').ZG80R  NON NUMERIC          00545200
                    AIF   ('&ZCGPR' LT '2').ZG80Q                       00545300
                    AIF   ('&ZCGPR' LE '12').ZG80R                      00545400
.ZG80Q              ANOP  ,                                             00545500
&ZMS                SETC  '"TASKID='                                    00545600
&ZMS                SETC  '&ZMS.&TASKID"'                               00545700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00545800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00545900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00546000
.ZG80R              ANOP  ,                                             00546100
.*----------------------------------------------------------------***   00546200
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00546300
                    AIF   (N'&THREAD LE 1).ZG83A  CK NUM                00546400
&ZMS                SETC  '"THREAD='                                    00546500
&ZMS                SETC  '&ZMS.&THREAD"'                               00546600
&ZMS                SETC  '&ZMS "THREAD"'                               00546700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00546800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00546900
.ZG83A              ANOP  ,                                             00547000
.*-------------------------------------------------------------------   00547100
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00547200
&ZXTHREAD           SETC  'INPUT'     SET IN/OUTPUT                     00547300
&XTHREAD            SETC  '0'                                           00547400
                    AIF   (K'&THREAD(1) LE 0).ZG83B  PARM               00547500
&XTHREAD            SETC  '&THREAD(1)'          SET XVARIABLE           00547600
                    AIF   (N'&THREAD GT 1).ZG83B  MULTI                 00547700
&XTHREAD            SETC  '&THREAD'   SET XVARIABLE                     00547800
.ZG83B              ANOP  ,                                             00547900
.*-------------------------------------------------------------------   00548000
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00548100
                    AIF   (K'&ZXTHREAD LE 0).ZG83R  NOT I/O             00548200
         AIF   ('&XTHREAD' EQ '0').ZG83R                                00548300
                    AIF   ('&XTHREAD'(1,1) NE '(').ZG83R                00548400
&ZCGPR              SETC  '&XTHREAD'(2,K'&XTHREAD-2)                    00548500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG83P                  00548600
                    AIF   (K'&ZCGPR GT 2).ZG83Q                         00548700
                    AIF   ('&ZCGPR' EQ '0').ZG83Q                       00548800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00548900
                    AIF   (T'&ZCGPR NE 'N').ZG83Q  INVALID REG NAME     00549000
.ZG83P              ANOP  ,                                             00549100
                    AIF   (T'&ZCGPR NE 'N').ZG83R  NON NUMERIC          00549200
                    AIF   ('&ZCGPR' LT '2').ZG83Q                       00549300
                    AIF   ('&ZCGPR' LE '12').ZG83R                      00549400
.ZG83Q              ANOP  ,                                             00549500
&ZMS                SETC  '"THREAD='                                    00549600
&ZMS                SETC  '&ZMS.&THREAD"'                               00549700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00549800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00549900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00550000
.ZG83R              ANOP  ,                                             00550100
.*----------------------------------------------------------------***   00550200
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00550300
                    AIF   (N'&UTILRTN LE 1).ZG86A  CK NUM               00550400
&ZMS                SETC  '"UTILRTN='                                   00550500
&ZMS                SETC  '&ZMS.&UTILRTN"'                              00550600
&ZMS                SETC  '&ZMS "UTILRTN"'                              00550700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00550800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00550900
.ZG86A              ANOP  ,                                             00551000
.*-------------------------------------------------------------------   00551100
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00551200
&ZXUTILRTN          SETC  'INPUT'     SET IN/OUTPUT                     00551300
&XUTILRTN           SETC  '0'                                           00551400
                    AIF   (K'&UTILRTN(1) LE 0).ZG86B  PARM              00551500
&XUTILRTN           SETC  '&UTILRTN(1)'         SET XVARIABLE           00551600
                    AIF   (N'&UTILRTN GT 1).ZG86B  MULTI                00551700
&XUTILRTN           SETC  '&UTILRTN'  SET XVARIABLE                     00551800
.ZG86B              ANOP  ,                                             00551900
.*-------------------------------------------------------------------   00552000
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00552100
                    AIF   (K'&ZXUTILRTN LE 0).ZG86R  NOT I/O            00552200
         AIF   ('&XUTILRTN' EQ '0').ZG86R                               00552300
                    AIF   ('&XUTILRTN'(1,1) NE '(').ZG86R               00552400
&ZCGPR              SETC  '&XUTILRTN'(2,K'&XUTILRTN-2)                  00552500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG86P                  00552600
                    AIF   (K'&ZCGPR GT 2).ZG86Q                         00552700
                    AIF   ('&ZCGPR' EQ '0').ZG86Q                       00552800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00552900
                    AIF   (T'&ZCGPR NE 'N').ZG86Q  INVALID REG NAME     00553000
.ZG86P              ANOP  ,                                             00553100
                    AIF   (T'&ZCGPR NE 'N').ZG86R  NON NUMERIC          00553200
                    AIF   ('&ZCGPR' LT '2').ZG86Q                       00553300
                    AIF   ('&ZCGPR' LE '12').ZG86R                      00553400
.ZG86Q              ANOP  ,                                             00553500
&ZMS                SETC  '"UTILRTN='                                   00553600
&ZMS                SETC  '&ZMS.&UTILRTN"'                              00553700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00553800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00553900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00554000
.ZG86R              ANOP  ,                                             00554100
.*-------------------------------------------------------------------   00554200
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00554300
.ZG88               ANOP  ,                                             00554400
&ZTLC               SETC 'COPY_DATA'                                    00554500
                    AIF   ('&REQUEST(1)' NE '&ZTLC').ZG129              00554600
&XREQUEST           SETC  'COPY_DATA'           SET KEYWORD             00554700
                    AIF   (N'&REQUEST LE 1).ZG88A  CK NUM               00554800
&ZMS                SETC  '"REQUEST='                                   00554900
&ZMS                SETC  '&ZMS.&REQUEST"'                              00555000
&ZMS                SETC  '&ZMS "REQUEST"'                              00555100
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00555200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00555300
.ZG88A              ANOP  ,                                             00555400
.*------------------------------------------------------------------    00555500
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00555600
&ZCVAL              SETC ''           CLEAR ERROR KEY ACCUMULATOR       00555700
.ZG88A0             AIF   (K'&BUFLIST LE 0).ZG88A1  OK                  00555800
&ZCVAL              SETC '&ZCVAL BUFLIST'       INCORRECT KEY USED      00555900
.ZG88A1             AIF   (K'&BUFLST64 LE 0).ZG88A2  OK                 00556000
&ZCVAL              SETC '&ZCVAL BUFLST64'      INCORRECT KEY USED      00556100
.ZG88A2             AIF   (K'&BUFNUM LE 0).ZG88A3  OK                   00556200
&ZCVAL              SETC '&ZCVAL BUFNUM'        INCORRECT KEY USED      00556300
.ZG88A3             AIF   (K'&BUFTYPE LE 0).ZG88A4  OK                  00556400
&ZCVAL              SETC '&ZCVAL BUFTYPE'       INCORRECT KEY USED      00556500
.ZG88A4             AIF   (K'&CSMUSER LE 0).ZG88A5  OK                  00556600
&ZCVAL              SETC '&ZCVAL CSMUSER'       INCORRECT KEY USED      00556700
.ZG88A5             AIF   (K'&GAP LE 0).ZG88A6  OK                      00556800
&ZCVAL              SETC '&ZCVAL GAP'           INCORRECT KEY USED      00556900
.ZG88A6             AIF   (K'&ERRBFLST LE 0).ZG88A7  OK                 00557000
&ZCVAL              SETC '&ZCVAL ERRBFLST'      INCORRECT KEY USED      00557100
.ZG88A7             AIF   (K'&OWNERID LE 0).ZG88A8  OK                  00557200
&ZCVAL              SETC '&ZCVAL OWNERID'       INCORRECT KEY USED      00557300
.ZG88A8             AIF   (K'&COMPID LE 0).ZG88A9  OK                   00557400
&ZCVAL              SETC '&ZCVAL COMPID'        INCORRECT KEY USED      00557500
.ZG88A9             AIF   (K'&COMPUSER LE 0).ZG88A10  OK                00557600
&ZCVAL              SETC '&ZCVAL COMPUSER'      INCORRECT KEY USED      00557700
.ZG88A10            AIF   (K'&TASKID LE 0).ZG88A11  OK                  00557800
&ZCVAL              SETC '&ZCVAL TASKID'        INCORRECT KEY USED      00557900
.ZG88A11            AIF   (K'&SKIPBUF LE 0).ZG88A12  OK                 00558000
&ZCVAL              SETC '&ZCVAL SKIPBUF'       INCORRECT KEY USED      00558100
.ZG88A12            AIF   (K'&BUFSIZE LE 0).ZG88A13  OK                 00558200
&ZCVAL              SETC '&ZCVAL BUFSIZE'       INCORRECT KEY USED      00558300
.ZG88A13            AIF   (K'&BUFSOURC LE 0).ZG88A14  OK                00558400
&ZCVAL              SETC '&ZCVAL BUFSOURC'      INCORRECT KEY USED      00558500
.ZG88A14            AIF   (K'&BACK LE 0).ZG88A15  OK                    00558600
&ZCVAL              SETC '&ZCVAL BACK'          INCORRECT KEY USED      00558700
.ZG88A15            AIF   (K'&DS_INFO LE 0).ZG88A16  OK                 00558800
&ZCVAL              SETC '&ZCVAL DS_INFO'       INCORRECT KEY USED      00558900
.ZG88A16            AIF   (K'&EXPBUF LE 0).ZG88A17  OK                  00559000
&ZCVAL              SETC '&ZCVAL EXPBUF'        INCORRECT KEY USED      00559100
.ZG88A17            AIF   (K'&INITBUF LE 0).ZG88A18  OK                 00559200
&ZCVAL              SETC '&ZCVAL INITBUF'       INCORRECT KEY USED      00559300
.ZG88A18            AIF   (K'&MINFREE LE 0).ZG88A19  OK                 00559400
&ZCVAL              SETC '&ZCVAL MINFREE'       INCORRECT KEY USED      00559500
.ZG88A19            AIF   (K'&RETPTOKN LE 0).ZG88A20  OK                00559600
&ZCVAL              SETC '&ZCVAL RETPTOKN'      INCORRECT KEY USED      00559700
.ZG88A20            AIF   (K'&STATAREA LE 0).ZG88A21  OK                00559800
&ZCVAL              SETC '&ZCVAL STATAREA'      INCORRECT KEY USED      00559900
.ZG88A21            AIF   (K'&POOLTOKN LE 0).ZG88A22  OK                00560000
&ZCVAL              SETC '&ZCVAL POOLTOKN'      INCORRECT KEY USED      00560100
.ZG88A22            AIF   (K'&WAIT LE 0).ZG88A23  OK                    00560200
&ZCVAL              SETC '&ZCVAL WAIT'          INCORRECT KEY USED      00560300
.ZG88A23            AIF   (K'&CLEAR LE 0).ZG88A24  OK                   00560400
&ZCVAL              SETC '&ZCVAL CLEAR'         INCORRECT KEY USED      00560500
.ZG88A24            AIF   (K'&FREETO LE 0).ZG88A25  OK                  00560600
&ZCVAL              SETC '&ZCVAL FREETO'        INCORRECT KEY USED      00560700
.ZG88A25            AIF   (K'&FREERTN LE 0).ZG88A26  OK                 00560800
&ZCVAL              SETC '&ZCVAL FREERTN'       INCORRECT KEY USED      00560900
.ZG88A26            AIF   (K'&ZCVAL LE 0).ZG88A27  OK                   00561000
&ZCVAL              SETC '&ZCVAL'(2,K'&ZCVAL-1)                         00561100
                    AIF  (K'&ZCVAL LE 160).ZG88A27A                     00561200
&ZCVAL              SETC '&ZCVAL'(1,160)                                00561300
&ZCVAL              SETC '&ZCVAL....'                                   00561400
.ZG88A27A           ANOP                                                00561500
&ZMS                SETC  '"REQUEST'                                    00561600
&ZMS                SETC  '&ZMS.=&REQUEST"'                             00561700
&ZMS                SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'          00561800
                    MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'          00561900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00562000
.ZG88A27            ANOP  ,                                             00562100
.*------------------------------------------------------------------    00562200
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00562300
&XPAD               SETC  ''          INITIALIZE XVARIABLE              00562400
.*-------------------------------------------------------------------   00562500
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00562600
.ZG91               ANOP  ,                                             00562700
                    AIF   (K'&PAD(1) LE 0).ZG91A                        00562800
&ZTLC               SETC 'NO'                                           00562900
                    AIF   ('&PAD(1)' NE '&ZTLC').ZG92                   00563000
&XPAD               SETC  'NO'        SET KEYWORD                       00563100
                    AIF   (N'&PAD LE 1).ZG91A   CK NUM                  00563200
&ZMS                SETC  '"PAD='                                       00563300
&ZMS                SETC  '&ZMS.&PAD"'                                  00563400
&ZMS                SETC  '&ZMS "PAD"'                                  00563500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00563600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00563700
.ZG91A              ANOP  ,                                             00563800
.*------------------------------------------------------------------    00563900
.***AG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00564000
&ZCVAL              SETC ''           CLEAR ERROR KEY ACCUMULATOR       00564100
.ZG91A0             AIF   (K'&PADCHAR LE 0).ZG91A1  OK                  00564200
&ZCVAL              SETC '&ZCVAL PADCHAR'       INCORRECT KEY USED      00564300
.ZG91A1             AIF   (K'&ZCVAL LE 0).ZG91A2  OK                    00564400
&ZCVAL              SETC '&ZCVAL'(2,K'&ZCVAL-1)                         00564500
&ZMS                SETC  '"PAD'                                        00564600
&ZMS                SETC  '&ZMS.=&PAD"'                                 00564700
&ZMS                SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'          00564800
                    MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'          00564900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00565000
.ZG91A2             ANOP  ,                                             00565100
.*-------------------------------------------------------------------   00565200
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00565300
.ZG92               ANOP  ,                                             00565400
&ZTLC               SETC 'YES'                                          00565500
                    AIF   ('&PAD(1)' NE '&ZTLC').ZG96                   00565600
&XPAD               SETC  'YES'       SET KEYWORD                       00565700
                    AIF   (N'&PAD LE 1).ZG92A   CK NUM                  00565800
&ZMS                SETC  '"PAD='                                       00565900
&ZMS                SETC  '&ZMS.&PAD"'                                  00566000
&ZMS                SETC  '&ZMS "PAD"'                                  00566100
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00566200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00566300
.ZG92A              ANOP  ,                                             00566400
.*----------------------------------------------------------------***   00566500
.***AG.KXVAR05 NAME, OPT RQD INPUT, KEYS -XVARIABLE KEY                 00566600
                    AIF   (N'&PADCHAR LE 1).ZG94A  CK NUM               00566700
&ZMS                SETC  '"PADCHAR='                                   00566800
&ZMS                SETC  '&ZMS.&PADCHAR"'                              00566900
&ZMS                SETC  '&ZMS "PADCHAR"'                              00567000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00567100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00567200
.ZG94A              ANOP  ,                                             00567300
.*-------------------------------------------------------------------   00567400
.***AG.KXVAR06 NAME, OPT RQD INPUT, KEYS -XVARIABLE                     00567500
&ZXPADCHAR          SETC  'INPUT'     SET IN/OUTPUT                     00567600
&XPADCHAR           SETC  '&PADCHAR(1)'         SET XVARIABLE           00567700
                    AIF   (N'&PADCHAR GT 1).ZG94B  MULTI PARMS          00567800
&XPADCHAR           SETC  '&PADCHAR'  SET XVARIABLE                     00567900
.ZG94B              AIF   (K'&PADCHAR(1) GT 0).ZG94C                    00568000
&ZXPADCHAR          SETC  ''          RESET IN/OUTPUT                   00568100
&ZMS                SETC  ' '                                           00568200
&ZMS                SETC  '&ZMS "PADCHAR" KEY AND ITS'                  00568300
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00568400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00568500
.ZG94C              ANOP  ,                                             00568600
.*-------------------------------------------------------------------   00568700
.***AG.KCK02 NAME, OPT RQD INPUT, KEYS -GPR OUT OF RANGE                00568800
                    AIF   (K'&ZXPADCHAR LE 0).ZG94R  NOT I/O            00568900
                    AIF   ('&XPADCHAR'(1,1) NE '(').ZG94R               00569000
&ZCGPR              SETC  '&XPADCHAR'(2,K'&XPADCHAR-2)                  00569100
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG94P                  00569200
                    AIF   (K'&ZCGPR GT 2).ZG94Q                         00569300
                    AIF   ('&ZCGPR' EQ '0').ZG94Q                       00569400
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00569500
                    AIF   (T'&ZCGPR NE 'N').ZG94Q  INVALID REG NAME     00569600
.ZG94P              ANOP  ,                                             00569700
                    AIF   (T'&ZCGPR NE 'N').ZG94R  NON NUMERIC          00569800
                    AIF   ('&ZCGPR' LT '2').ZG94Q                       00569900
                    AIF   ('&ZCGPR' LE '12').ZG94R                      00570000
.ZG94Q              ANOP  ,                                             00570100
&ZMS                SETC  '"PADCHAR='                                   00570200
&ZMS                SETC  '&ZMS.&PADCHAR"'                              00570300
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00570400
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00570500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00570600
.ZG94R              ANOP  ,                                             00570700
.*------------------------------------------------------------------    00570800
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00570900
.ZG96               ANOP  ,                                             00571000
&ZXPAD              SETC  'INPUT'     SET IN/OUTPUT                     00571100
                    AIF   (K'&XPAD GT 0).ZG96E  VALID ARG               00571200
                    AIF   (T'&PAD EQ 'O').ZG96D  OMITTED                00571300
&ZASYSLNDX          SETA  0                                             00571400
.ZG96A              ANOP  ,           POSITIONAL MACRO KEY              00571500
&ZASYSLNDX          SETA  &ZASYSLNDX+1                                  00571600
                    AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG96C              00571700
&ZTLC               SETC 'PAD'                                          00571800
                    AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG96A     00571900
.ZG96B              ANOP  ,                                             00572000
&ZXPAD              SETC  ''          RESET IN/OUTPUT                   00572100
&ZMS                SETC  'THE "PAD" KEY'                               00572200
&ZMS                SETC  '&ZMS MUST CONTAIN ONE'                       00572300
                    MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'              00572400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00572500
                    AGO   .ZG96E                                        00572600
.ZG96C              ANOP  ,                                             00572700
&ZXPAD              SETC  ''          RESET IN/OUTPUT                   00572800
&ZMS                SETC  '"PAD='                                       00572900
&ZMS                SETC  '&ZMS.&PAD"'                                  00573000
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     00573100
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           00573200
&ZMS                SETC  '&ZMS "NO"'                                   00573300
&ZMS                SETC  '&ZMS OR "YES".'                              00573400
                    MNOTE 8,' &ZMS '                                    00573500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00573600
                    AGO   .ZG96E                                        00573700
.ZG96D              ANOP  ,                                             00573800
&XPAD               SETC  'NO'        SET DEFAULT KEYWORD               00573900
.ZG96E              ANOP  ,                                             00574000
.*-------------------------------------------------------------------   00574100
.***AG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START             00574200
                    AIF   ('&XMF' EQ 'M').ZG99  BYPASS IF MF=M          00574300
.*----------------------------------------------------------------***   00574400
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00574500
                    AIF   (N'&SRCERRL LE 1).ZG98A  CK NUM               00574600
&ZMS                SETC  '"SRCERRL='                                   00574700
&ZMS                SETC  '&ZMS.&SRCERRL"'                              00574800
&ZMS                SETC  '&ZMS "SRCERRL"'                              00574900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00575000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00575100
.ZG98A              ANOP  ,                                             00575200
.*-------------------------------------------------------------------   00575300
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00575400
                    AIF   (K'&SRCERRL(1) LE 0).ZG98C  NO PARM           00575500
&ZXSRCERRL          SETC  'OUTPUT'    SET OUTPUT                        00575600
&XSRCERRL           SETC  '&SRCERRL(1)'         SET XVARIABLE           00575700
                    AIF   (N'&SRCERRL GT 1).ZG98C                       00575800
&XSRCERRL           SETC  '&SRCERRL'  SET XVARIABLE                     00575900
.ZG98C              ANOP  ,                                             00576000
.*-------------------------------------------------------------------   00576100
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00576200
                    AIF   (K'&ZXSRCERRL LE 0).ZG98R  NOT I/O            00576300
                    AIF   ('&XSRCERRL'(1,1) NE '(').ZG98R               00576400
&ZCGPR              SETC  '&XSRCERRL'(2,K'&XSRCERRL-2)                  00576500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG98P                  00576600
                    AIF   (K'&ZCGPR GT 2).ZG98Q                         00576700
                    AIF   ('&ZCGPR' EQ '0').ZG98Q                       00576800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00576900
                    AIF   (T'&ZCGPR NE 'N').ZG98Q  INVALID REG NAME     00577000
.ZG98P              ANOP  ,                                             00577100
                    AIF   (T'&ZCGPR NE 'N').ZG98R  NON NUMERIC          00577200
                    AIF   ('&ZCGPR' LT '2').ZG98Q                       00577300
                    AIF   ('&ZCGPR' LE '12').ZG98R                      00577400
.ZG98Q              ANOP  ,                                             00577500
&ZMS                SETC  '"SRCERRL='                                   00577600
&ZMS                SETC  '&ZMS.&SRCERRL"'                              00577700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00577800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00577900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00578000
.ZG98R              ANOP  ,                                             00578100
.*-------------------------------------------------------------------   00578200
.***AG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END               00578300
.ZG99               ANOP  ,           END OF BYPASS CHECK               00578400
.*----------------------------------------------------------------***   00578500
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00578600
                    AIF   (N'&SRCGAP LE 1).ZG101A  CK NUM               00578700
&ZMS                SETC  '"SRCGAP='                                    00578800
&ZMS                SETC  '&ZMS.&SRCGAP"'                               00578900
&ZMS                SETC  '&ZMS "SRCGAP"'                               00579000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00579100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00579200
.ZG101A             ANOP  ,                                             00579300
.*-------------------------------------------------------------------   00579400
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00579500
&ZXSRCGAP           SETC  'INPUT'     SET IN/OUTPUT                     00579600
&XSRCGAP            SETC  '0'                                           00579700
                    AIF   (K'&SRCGAP(1) LE 0).ZG101B  PARM              00579800
&XSRCGAP            SETC  '&SRCGAP(1)'          SET XVARIABLE           00579900
                    AIF   (N'&SRCGAP GT 1).ZG101B  MULTI                00580000
&XSRCGAP            SETC  '&SRCGAP'   SET XVARIABLE                     00580100
.ZG101B             ANOP  ,                                             00580200
.*-------------------------------------------------------------------   00580300
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00580400
                    AIF   (K'&ZXSRCGAP LE 0).ZG101R  NOT I/O            00580500
         AIF   ('&XSRCGAP' EQ '0').ZG101R                               00580600
                    AIF   ('&XSRCGAP'(1,1) NE '(').ZG101R               00580700
&ZCGPR              SETC  '&XSRCGAP'(2,K'&XSRCGAP-2)                    00580800
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG101P                 00580900
                    AIF   (K'&ZCGPR GT 2).ZG101Q                        00581000
                    AIF   ('&ZCGPR' EQ '0').ZG101Q                      00581100
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00581200
                    AIF   (T'&ZCGPR NE 'N').ZG101Q  INVALID REG NAME    00581300
.ZG101P             ANOP  ,                                             00581400
                    AIF   (T'&ZCGPR NE 'N').ZG101R  NON NUMERIC         00581500
                    AIF   ('&ZCGPR' LT '2').ZG101Q                      00581600
                    AIF   ('&ZCGPR' LE '12').ZG101R                     00581700
.ZG101Q             ANOP  ,                                             00581800
&ZMS                SETC  '"SRCGAP='                                    00581900
&ZMS                SETC  '&ZMS.&SRCGAP"'                               00582000
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00582100
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00582200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00582300
.ZG101R             ANOP  ,                                             00582400
.*----------------------------------------------------------------***   00582500
.***AG.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00582600
&XDUMMY3            SETC  ''          INITIALIZE XVARIABLE              00582700
                    AIF   (K'&SRCLIST LE 0).ZG104C                      00582800
&ZXDUMMY3           SETC  'INPUT'     SET IN/OUTPUT                     00582900
&XDUMMY3            SETC  'SRCLIST'   SET XVARIABLE                     00583000
&ZXSRCLIST          SETC  'INPUT'     SET IN/OUTPUT                     00583100
&XSRCLIST           SETC  '&SRCLIST(1)'         SET XVARIABLE PARM      00583200
                    AIF   (N'&SRCLIST GT 1).ZG104A                      00583300
&XSRCLIST           SETC  '&SRCLIST'  SET XVARIABLE PARM                00583400
.ZG104A             AIF   (N'&SRCLIST LE 1).ZG104B  CK NUM              00583500
&ZMS                SETC  '"SRCLIST='                                   00583600
&ZMS                SETC  '&ZMS.&SRCLIST"'                              00583700
&ZMS                SETC  '&ZMS "SRCLIST"'                              00583800
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00583900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00584000
.ZG104B             AIF   (K'&XSRCLIST GT 0).ZG104C  ONE PARM           00584100
&ZXDUMMY3           SETC  ''          RESET IN/OUTPUT                   00584200
&ZXSRCLIST          SETC  ''          RESET IN/OUTPUT                   00584300
&ZMS                SETC  ' '                                           00584400
&ZMS                SETC  '&ZMS "SRCLIST" KEY AND ITS'                  00584500
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00584600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00584700
.ZG104C             ANOP  ,                                             00584800
.*----------------------------------------------------------------***   00584900
.***AG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00585000
                    AIF   (K'&SRCLST64 LE 0).ZG105D  NO ME KEY          00585100
                    AIF   (N'&SRCLST64 LE 1).ZG105A  CK NUM             00585200
&ZMS                SETC  '"SRCLST64='                                  00585300
&ZMS                SETC  '&ZMS.&SRCLST64"'                             00585400
&ZMS                SETC  '&ZMS "SRCLST64"'                             00585500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00585600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00585700
.ZG105A             AIF   (K'&XDUMMY3 LE 0).ZG105B                      00585800
&ZMS                SETC  '"SRCLST64'                                   00585900
&ZMS                SETC  '&ZMS.=&SRCLST64"'                            00586000
&ZMS                SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'         00586100
&ZMS                SETC  '&ZMS "&XDUMMY3"'                             00586200
                    MNOTE 8,' &ZMS KEY.'                                00586300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00586400
                    AGO   .ZG105D                                       00586500
.*                                                                      00586600
.ZG105B             ANOP  ,                                             00586700
&ZXDUMMY3           SETC  'INPUT'     SET IN/OUTPUT                     00586800
&XDUMMY3            SETC  'SRCLST64'  SET XVARIABLE                     00586900
&ZXSRCLST64         SETC  'INPUT'     SET IN/OUTPUT                     00587000
&XSRCLST64          SETC  '&SRCLST64(1)'        SET XVARIABLE PARM      00587100
                    AIF   (N'&SRCLST64 GT 1).ZG105C                     00587200
&XSRCLST64          SETC  '&SRCLST64'           SET XVARIABLE PARM      00587300
.ZG105C             AIF   (K'&XSRCLST64 GT 0).ZG105D  ONE PARM          00587400
&ZXDUMMY3           SETC  ''          RESET IN/OUTPUT                   00587500
&ZXSRCLST64         SETC  ''          RESET IN/OUTPUT                   00587600
&ZMS                SETC  ' '                                           00587700
&ZMS                SETC  '&ZMS "SRCLST64" KEY AND ITS'                 00587800
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00587900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00588000
.ZG105D             ANOP  ,                                             00588100
.*------------------------------------------------------------------    00588200
.***AG.KME4Y09 NAME, RQD INPUT, ME KEYS -CHECK IF KEY ENTERED           00588300
                    AIF   (K'&XDUMMY3 GT 0).ZG106B                      00588400
&ZXDUMMY3           SETC  ''          RESET IN/OUTPUT                   00588500
&ZXSRCLIST          SETC  ''          RESET IN/OUTPUT                   00588600
&XDUMMY3            SETC  ''          ENSURE NULL                       00588700
&XSRCLIST           SETC  ''          ENSURE NULL                       00588800
&ZMS                SETC  'ONE OF THE FOLLOWING'                        00588900
&ZMS                SETC  '&ZMS MUTUALLY EXCLUSIVE KEY(S) IS'           00589000
&ZMS                SETC  '&ZMS REQUIRED:'                              00589100
&ZMS                SETC  '&ZMS "SRCLIST"'      VALID ME KEY            00589200
&ZMS                SETC  '&ZMS OR "SRCLST64".'  VALID ME KEY           00589300
                    MNOTE 8,' &ZMS '                                    00589400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00589500
.ZG106B             ANOP  ,                                             00589600
.*-------------------------------------------------------------------   00589700
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00589800
.ZG104ZY  AIF    ('&XDUMMY3' NE 'SRCLIST').ZG105ZY                      00589900
.*-------------------------------------------------------------------   00590000
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00590100
                    AIF   (K'&ZXSRCLIST LE 0).ZG104R  NOT I/O           00590200
                    AIF   ('&XSRCLIST'(1,1) NE '(').ZG104R              00590300
&ZCGPR              SETC  '&XSRCLIST'(2,K'&XSRCLIST-2)                  00590400
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG104P                 00590500
                    AIF   (K'&ZCGPR GT 2).ZG104Q                        00590600
                    AIF   ('&ZCGPR' EQ '0').ZG104Q                      00590700
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00590800
                    AIF   (T'&ZCGPR NE 'N').ZG104Q  INVALID REG NAME    00590900
.ZG104P             ANOP  ,                                             00591000
                    AIF   (T'&ZCGPR NE 'N').ZG104R  NON NUMERIC         00591100
                    AIF   ('&ZCGPR' LT '2').ZG104Q                      00591200
                    AIF   ('&ZCGPR' LE '12').ZG104R                     00591300
.ZG104Q             ANOP  ,                                             00591400
&ZMS                SETC  '"SRCLIST='                                   00591500
&ZMS                SETC  '&ZMS.&SRCLIST"'                              00591600
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00591700
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00591800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00591900
.ZG104R             ANOP  ,                                             00592000
.*-------------------------------------------------------------------   00592100
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00592200
.ZG105ZY  AIF    ('&XDUMMY3' NE 'SRCLST64').ZG106ZY                     00592300
.*-------------------------------------------------------------------   00592400
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00592500
                    AIF   (K'&ZXSRCLST64 LE 0).ZG105R  NOT I/O          00592600
                    AIF   ('&XSRCLST64'(1,1) NE '(').ZG105R             00592700
&ZCGPR              SETC  '&XSRCLST64'(2,K'&XSRCLST64-2)                00592800
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG105P                 00592900
                    AIF   (K'&ZCGPR GT 2).ZG105Q                        00593000
                    AIF   ('&ZCGPR' EQ '0').ZG105Q                      00593100
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00593200
                    AIF   (T'&ZCGPR NE 'N').ZG105Q  INVALID REG NAME    00593300
.ZG105P             ANOP  ,                                             00593400
                    AIF   (T'&ZCGPR NE 'N').ZG105R  NON NUMERIC         00593500
                    AIF   ('&ZCGPR' LT '2').ZG105Q                      00593600
                    AIF   ('&ZCGPR' LE '12').ZG105R                     00593700
.ZG105Q             ANOP  ,                                             00593800
&ZMS                SETC  '"SRCLST64='                                  00593900
&ZMS                SETC  '&ZMS.&SRCLST64"'                             00594000
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00594100
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00594200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00594300
.ZG105R             ANOP  ,                                             00594400
.*-------------------------------------------------------------------   00594500
.***AG.KMEKY15 NAME, RQD INPUT, ME KEYS -END                            00594600
.ZG106ZY            ANOP ,            END MUTUALLY EXCLUSIVE KEYS       00594700
.*----------------------------------------------------------------***   00594800
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00594900
                    AIF   (N'&SRCNUM LE 1).ZG108A  CK NUM               00595000
&ZMS                SETC  '"SRCNUM='                                    00595100
&ZMS                SETC  '&ZMS.&SRCNUM"'                               00595200
&ZMS                SETC  '&ZMS "SRCNUM"'                               00595300
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00595400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00595500
.ZG108A             ANOP  ,                                             00595600
.*-------------------------------------------------------------------   00595700
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00595800
&ZXSRCNUM           SETC  'INPUT'     SET IN/OUTPUT                     00595900
&XSRCNUM            SETC  '&SRCNUM(1)'          SET XVARIABLE           00596000
                    AIF   (N'&SRCNUM GT 1).ZG108B  MULTI PARMS          00596100
&XSRCNUM            SETC  '&SRCNUM'   SET XVARIABLE                     00596200
.ZG108B             AIF   (K'&SRCNUM(1) GT 0).ZG108C                    00596300
&ZXSRCNUM           SETC  ''          RESET IN/OUTPUT                   00596400
&ZMS                SETC  ' '                                           00596500
&ZMS                SETC  '&ZMS "SRCNUM" KEY AND ITS'                   00596600
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00596700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00596800
.ZG108C             ANOP  ,                                             00596900
.*-------------------------------------------------------------------   00597000
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00597100
                    AIF   (K'&ZXSRCNUM LE 0).ZG108R  NOT I/O            00597200
                    AIF   ('&XSRCNUM'(1,1) NE '(').ZG108R               00597300
&ZCGPR              SETC  '&XSRCNUM'(2,K'&XSRCNUM-2)                    00597400
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG108P                 00597500
                    AIF   (K'&ZCGPR GT 2).ZG108Q                        00597600
                    AIF   ('&ZCGPR' EQ '0').ZG108Q                      00597700
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00597800
                    AIF   (T'&ZCGPR NE 'N').ZG108Q  INVALID REG NAME    00597900
.ZG108P             ANOP  ,                                             00598000
                    AIF   (T'&ZCGPR NE 'N').ZG108R  NON NUMERIC         00598100
                    AIF   ('&ZCGPR' LT '2').ZG108Q                      00598200
                    AIF   ('&ZCGPR' LE '12').ZG108R                     00598300
.ZG108Q             ANOP  ,                                             00598400
&ZMS                SETC  '"SRCNUM='                                    00598500
&ZMS                SETC  '&ZMS.&SRCNUM"'                               00598600
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00598700
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00598800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00598900
.ZG108R             ANOP  ,                                             00599000
.*-------------------------------------------------------------------   00599100
.***AG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START             00599200
                    AIF   ('&XMF' EQ 'M').ZG112  BYPASS IF MF=M         00599300
.*----------------------------------------------------------------***   00599400
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00599500
                    AIF   (N'&TARGERRL LE 1).ZG111A  CK NUM             00599600
&ZMS                SETC  '"TARGERRL='                                  00599700
&ZMS                SETC  '&ZMS.&TARGERRL"'                             00599800
&ZMS                SETC  '&ZMS "TARGERRL"'                             00599900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00600000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00600100
.ZG111A             ANOP  ,                                             00600200
.*-------------------------------------------------------------------   00600300
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00600400
                    AIF   (K'&TARGERRL(1) LE 0).ZG111C  NO PARM         00600500
&ZXTARGERRL         SETC  'OUTPUT'    SET OUTPUT                        00600600
&XTARGERRL          SETC  '&TARGERRL(1)'        SET XVARIABLE           00600700
                    AIF   (N'&TARGERRL GT 1).ZG111C                     00600800
&XTARGERRL          SETC  '&TARGERRL'           SET XVARIABLE           00600900
.ZG111C             ANOP  ,                                             00601000
.*-------------------------------------------------------------------   00601100
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00601200
                    AIF   (K'&ZXTARGERRL LE 0).ZG111R  NOT I/O          00601300
                    AIF   ('&XTARGERRL'(1,1) NE '(').ZG111R             00601400
&ZCGPR              SETC  '&XTARGERRL'(2,K'&XTARGERRL-2)                00601500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG111P                 00601600
                    AIF   (K'&ZCGPR GT 2).ZG111Q                        00601700
                    AIF   ('&ZCGPR' EQ '0').ZG111Q                      00601800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00601900
                    AIF   (T'&ZCGPR NE 'N').ZG111Q  INVALID REG NAME    00602000
.ZG111P             ANOP  ,                                             00602100
                    AIF   (T'&ZCGPR NE 'N').ZG111R  NON NUMERIC         00602200
                    AIF   ('&ZCGPR' LT '2').ZG111Q                      00602300
                    AIF   ('&ZCGPR' LE '12').ZG111R                     00602400
.ZG111Q             ANOP  ,                                             00602500
&ZMS                SETC  '"TARGERRL='                                  00602600
&ZMS                SETC  '&ZMS.&TARGERRL"'                             00602700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00602800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00602900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00603000
.ZG111R             ANOP  ,                                             00603100
.*-------------------------------------------------------------------   00603200
.***AG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END               00603300
.ZG112              ANOP  ,           END OF BYPASS CHECK               00603400
.*----------------------------------------------------------------***   00603500
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00603600
                    AIF   (N'&TARGGAP LE 1).ZG114A  CK NUM              00603700
&ZMS                SETC  '"TARGGAP='                                   00603800
&ZMS                SETC  '&ZMS.&TARGGAP"'                              00603900
&ZMS                SETC  '&ZMS "TARGGAP"'                              00604000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00604100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00604200
.ZG114A             ANOP  ,                                             00604300
.*-------------------------------------------------------------------   00604400
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00604500
&ZXTARGGAP          SETC  'INPUT'     SET IN/OUTPUT                     00604600
&XTARGGAP           SETC  '0'                                           00604700
                    AIF   (K'&TARGGAP(1) LE 0).ZG114B  PARM             00604800
&XTARGGAP           SETC  '&TARGGAP(1)'         SET XVARIABLE           00604900
                    AIF   (N'&TARGGAP GT 1).ZG114B  MULTI               00605000
&XTARGGAP           SETC  '&TARGGAP'  SET XVARIABLE                     00605100
.ZG114B             ANOP  ,                                             00605200
.*-------------------------------------------------------------------   00605300
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00605400
                    AIF   (K'&ZXTARGGAP LE 0).ZG114R  NOT I/O           00605500
         AIF   ('&XTARGGAP' EQ '0').ZG114R                              00605600
                    AIF   ('&XTARGGAP'(1,1) NE '(').ZG114R              00605700
&ZCGPR              SETC  '&XTARGGAP'(2,K'&XTARGGAP-2)                  00605800
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG114P                 00605900
                    AIF   (K'&ZCGPR GT 2).ZG114Q                        00606000
                    AIF   ('&ZCGPR' EQ '0').ZG114Q                      00606100
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00606200
                    AIF   (T'&ZCGPR NE 'N').ZG114Q  INVALID REG NAME    00606300
.ZG114P             ANOP  ,                                             00606400
                    AIF   (T'&ZCGPR NE 'N').ZG114R  NON NUMERIC         00606500
                    AIF   ('&ZCGPR' LT '2').ZG114Q                      00606600
                    AIF   ('&ZCGPR' LE '12').ZG114R                     00606700
.ZG114Q             ANOP  ,                                             00606800
&ZMS                SETC  '"TARGGAP='                                   00606900
&ZMS                SETC  '&ZMS.&TARGGAP"'                              00607000
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00607100
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00607200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00607300
.ZG114R             ANOP  ,                                             00607400
.*----------------------------------------------------------------***   00607500
.***AG.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00607600
&XDUMMY4            SETC  ''          INITIALIZE XVARIABLE              00607700
                    AIF   (K'&TARGLIST LE 0).ZG117C                     00607800
&ZXDUMMY4           SETC  'INPUT'     SET IN/OUTPUT                     00607900
&XDUMMY4            SETC  'TARGLIST'  SET XVARIABLE                     00608000
&ZXTARGLIST         SETC  'INPUT'     SET IN/OUTPUT                     00608100
&XTARGLIST          SETC  '&TARGLIST(1)'        SET XVARIABLE PARM      00608200
                    AIF   (N'&TARGLIST GT 1).ZG117A                     00608300
&XTARGLIST          SETC  '&TARGLIST'           SET XVARIABLE PARM      00608400
.ZG117A             AIF   (N'&TARGLIST LE 1).ZG117B  CK NUM             00608500
&ZMS                SETC  '"TARGLIST='                                  00608600
&ZMS                SETC  '&ZMS.&TARGLIST"'                             00608700
&ZMS                SETC  '&ZMS "TARGLIST"'                             00608800
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00608900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00609000
.ZG117B             AIF   (K'&XTARGLIST GT 0).ZG117C  ONE PARM          00609100
&ZXDUMMY4           SETC  ''          RESET IN/OUTPUT                   00609200
&ZXTARGLIST         SETC  ''          RESET IN/OUTPUT                   00609300
&ZMS                SETC  ' '                                           00609400
&ZMS                SETC  '&ZMS "TARGLIST" KEY AND ITS'                 00609500
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00609600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00609700
.ZG117C             ANOP  ,                                             00609800
.*----------------------------------------------------------------***   00609900
.***AG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00610000
                    AIF   (K'&TARLST64 LE 0).ZG118D  NO ME KEY          00610100
                    AIF   (N'&TARLST64 LE 1).ZG118A  CK NUM             00610200
&ZMS                SETC  '"TARLST64='                                  00610300
&ZMS                SETC  '&ZMS.&TARLST64"'                             00610400
&ZMS                SETC  '&ZMS "TARLST64"'                             00610500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00610600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00610700
.ZG118A             AIF   (K'&XDUMMY4 LE 0).ZG118B                      00610800
&ZMS                SETC  '"TARLST64'                                   00610900
&ZMS                SETC  '&ZMS.=&TARLST64"'                            00611000
&ZMS                SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'         00611100
&ZMS                SETC  '&ZMS "&XDUMMY4"'                             00611200
                    MNOTE 8,' &ZMS KEY.'                                00611300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00611400
                    AGO   .ZG118D                                       00611500
.*                                                                      00611600
.ZG118B             ANOP  ,                                             00611700
&ZXDUMMY4           SETC  'INPUT'     SET IN/OUTPUT                     00611800
&XDUMMY4            SETC  'TARLST64'  SET XVARIABLE                     00611900
&ZXTARLST64         SETC  'INPUT'     SET IN/OUTPUT                     00612000
&XTARLST64          SETC  '&TARLST64(1)'        SET XVARIABLE PARM      00612100
                    AIF   (N'&TARLST64 GT 1).ZG118C                     00612200
&XTARLST64          SETC  '&TARLST64'           SET XVARIABLE PARM      00612300
.ZG118C             AIF   (K'&XTARLST64 GT 0).ZG118D  ONE PARM          00612400
&ZXDUMMY4           SETC  ''          RESET IN/OUTPUT                   00612500
&ZXTARLST64         SETC  ''          RESET IN/OUTPUT                   00612600
&ZMS                SETC  ' '                                           00612700
&ZMS                SETC  '&ZMS "TARLST64" KEY AND ITS'                 00612800
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00612900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00613000
.ZG118D             ANOP  ,                                             00613100
.*------------------------------------------------------------------    00613200
.***AG.KME4Y09 NAME, RQD INPUT, ME KEYS -CHECK IF KEY ENTERED           00613300
                    AIF   (K'&XDUMMY4 GT 0).ZG119B                      00613400
&ZXDUMMY4           SETC  ''          RESET IN/OUTPUT                   00613500
&ZXTARGLIST         SETC  ''          RESET IN/OUTPUT                   00613600
&XDUMMY4            SETC  ''          ENSURE NULL                       00613700
&XTARGLIST          SETC  ''          ENSURE NULL                       00613800
&ZMS                SETC  'ONE OF THE FOLLOWING'                        00613900
&ZMS                SETC  '&ZMS MUTUALLY EXCLUSIVE KEY(S) IS'           00614000
&ZMS                SETC  '&ZMS REQUIRED:'                              00614100
&ZMS                SETC  '&ZMS "TARGLIST"'     VALID ME KEY            00614200
&ZMS                SETC  '&ZMS OR "TARLST64".'  VALID ME KEY           00614300
                    MNOTE 8,' &ZMS '                                    00614400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00614500
.ZG119B             ANOP  ,                                             00614600
.*-------------------------------------------------------------------   00614700
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00614800
.ZG117ZY  AIF    ('&XDUMMY4' NE 'TARGLIST').ZG118ZY                     00614900
.*-------------------------------------------------------------------   00615000
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00615100
                    AIF   (K'&ZXTARGLIST LE 0).ZG117R  NOT I/O          00615200
                    AIF   ('&XTARGLIST'(1,1) NE '(').ZG117R             00615300
&ZCGPR              SETC  '&XTARGLIST'(2,K'&XTARGLIST-2)                00615400
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG117P                 00615500
                    AIF   (K'&ZCGPR GT 2).ZG117Q                        00615600
                    AIF   ('&ZCGPR' EQ '0').ZG117Q                      00615700
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00615800
                    AIF   (T'&ZCGPR NE 'N').ZG117Q  INVALID REG NAME    00615900
.ZG117P             ANOP  ,                                             00616000
                    AIF   (T'&ZCGPR NE 'N').ZG117R  NON NUMERIC         00616100
                    AIF   ('&ZCGPR' LT '2').ZG117Q                      00616200
                    AIF   ('&ZCGPR' LE '12').ZG117R                     00616300
.ZG117Q             ANOP  ,                                             00616400
&ZMS                SETC  '"TARGLIST='                                  00616500
&ZMS                SETC  '&ZMS.&TARGLIST"'                             00616600
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00616700
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00616800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00616900
.ZG117R             ANOP  ,                                             00617000
.*-------------------------------------------------------------------   00617100
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00617200
.ZG118ZY  AIF    ('&XDUMMY4' NE 'TARLST64').ZG119ZY                     00617300
.*-------------------------------------------------------------------   00617400
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00617500
                    AIF   (K'&ZXTARLST64 LE 0).ZG118R  NOT I/O          00617600
                    AIF   ('&XTARLST64'(1,1) NE '(').ZG118R             00617700
&ZCGPR              SETC  '&XTARLST64'(2,K'&XTARLST64-2)                00617800
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG118P                 00617900
                    AIF   (K'&ZCGPR GT 2).ZG118Q                        00618000
                    AIF   ('&ZCGPR' EQ '0').ZG118Q                      00618100
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00618200
                    AIF   (T'&ZCGPR NE 'N').ZG118Q  INVALID REG NAME    00618300
.ZG118P             ANOP  ,                                             00618400
                    AIF   (T'&ZCGPR NE 'N').ZG118R  NON NUMERIC         00618500
                    AIF   ('&ZCGPR' LT '2').ZG118Q                      00618600
                    AIF   ('&ZCGPR' LE '12').ZG118R                     00618700
.ZG118Q             ANOP  ,                                             00618800
&ZMS                SETC  '"TARLST64='                                  00618900
&ZMS                SETC  '&ZMS.&TARLST64"'                             00619000
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00619100
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00619200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00619300
.ZG118R             ANOP  ,                                             00619400
.*-------------------------------------------------------------------   00619500
.***AG.KMEKY15 NAME, RQD INPUT, ME KEYS -END                            00619600
.ZG119ZY            ANOP ,            END MUTUALLY EXCLUSIVE KEYS       00619700
.*----------------------------------------------------------------***   00619800
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00619900
                    AIF   (N'&TARGNUM LE 1).ZG121A  CK NUM              00620000
&ZMS                SETC  '"TARGNUM='                                   00620100
&ZMS                SETC  '&ZMS.&TARGNUM"'                              00620200
&ZMS                SETC  '&ZMS "TARGNUM"'                              00620300
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00620400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00620500
.ZG121A             ANOP  ,                                             00620600
.*-------------------------------------------------------------------   00620700
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00620800
&ZXTARGNUM          SETC  'INPUT'     SET IN/OUTPUT                     00620900
&XTARGNUM           SETC  '&TARGNUM(1)'         SET XVARIABLE           00621000
                    AIF   (N'&TARGNUM GT 1).ZG121B  MULTI PARMS         00621100
&XTARGNUM           SETC  '&TARGNUM'  SET XVARIABLE                     00621200
.ZG121B             AIF   (K'&TARGNUM(1) GT 0).ZG121C                   00621300
&ZXTARGNUM          SETC  ''          RESET IN/OUTPUT                   00621400
&ZMS                SETC  ' '                                           00621500
&ZMS                SETC  '&ZMS "TARGNUM" KEY AND ITS'                  00621600
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00621700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00621800
.ZG121C             ANOP  ,                                             00621900
.*-------------------------------------------------------------------   00622000
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00622100
                    AIF   (K'&ZXTARGNUM LE 0).ZG121R  NOT I/O           00622200
                    AIF   ('&XTARGNUM'(1,1) NE '(').ZG121R              00622300
&ZCGPR              SETC  '&XTARGNUM'(2,K'&XTARGNUM-2)                  00622400
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG121P                 00622500
                    AIF   (K'&ZCGPR GT 2).ZG121Q                        00622600
                    AIF   ('&ZCGPR' EQ '0').ZG121Q                      00622700
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00622800
                    AIF   (T'&ZCGPR NE 'N').ZG121Q  INVALID REG NAME    00622900
.ZG121P             ANOP  ,                                             00623000
                    AIF   (T'&ZCGPR NE 'N').ZG121R  NON NUMERIC         00623100
                    AIF   ('&ZCGPR' LT '2').ZG121Q                      00623200
                    AIF   ('&ZCGPR' LE '12').ZG121R                     00623300
.ZG121Q             ANOP  ,                                             00623400
&ZMS                SETC  '"TARGNUM='                                   00623500
&ZMS                SETC  '&ZMS.&TARGNUM"'                              00623600
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00623700
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00623800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00623900
.ZG121R             ANOP  ,                                             00624000
.*----------------------------------------------------------------***   00624100
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00624200
                    AIF   (N'&THREAD LE 1).ZG124A  CK NUM               00624300
&ZMS                SETC  '"THREAD='                                    00624400
&ZMS                SETC  '&ZMS.&THREAD"'                               00624500
&ZMS                SETC  '&ZMS "THREAD"'                               00624600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00624700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00624800
.ZG124A             ANOP  ,                                             00624900
.*-------------------------------------------------------------------   00625000
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00625100
&ZXTHREAD           SETC  'INPUT'     SET IN/OUTPUT                     00625200
&XTHREAD            SETC  '0'                                           00625300
                    AIF   (K'&THREAD(1) LE 0).ZG124B  PARM              00625400
&XTHREAD            SETC  '&THREAD(1)'          SET XVARIABLE           00625500
                    AIF   (N'&THREAD GT 1).ZG124B  MULTI                00625600
&XTHREAD            SETC  '&THREAD'   SET XVARIABLE                     00625700
.ZG124B             ANOP  ,                                             00625800
.*-------------------------------------------------------------------   00625900
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00626000
                    AIF   (K'&ZXTHREAD LE 0).ZG124R  NOT I/O            00626100
         AIF   ('&XTHREAD' EQ '0').ZG124R                               00626200
                    AIF   ('&XTHREAD'(1,1) NE '(').ZG124R               00626300
&ZCGPR              SETC  '&XTHREAD'(2,K'&XTHREAD-2)                    00626400
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG124P                 00626500
                    AIF   (K'&ZCGPR GT 2).ZG124Q                        00626600
                    AIF   ('&ZCGPR' EQ '0').ZG124Q                      00626700
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00626800
                    AIF   (T'&ZCGPR NE 'N').ZG124Q  INVALID REG NAME    00626900
.ZG124P             ANOP  ,                                             00627000
                    AIF   (T'&ZCGPR NE 'N').ZG124R  NON NUMERIC         00627100
                    AIF   ('&ZCGPR' LT '2').ZG124Q                      00627200
                    AIF   ('&ZCGPR' LE '12').ZG124R                     00627300
.ZG124Q             ANOP  ,                                             00627400
&ZMS                SETC  '"THREAD='                                    00627500
&ZMS                SETC  '&ZMS.&THREAD"'                               00627600
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00627700
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00627800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00627900
.ZG124R             ANOP  ,                                             00628000
.*----------------------------------------------------------------***   00628100
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00628200
                    AIF   (N'&UTILRTN LE 1).ZG127A  CK NUM              00628300
&ZMS                SETC  '"UTILRTN='                                   00628400
&ZMS                SETC  '&ZMS.&UTILRTN"'                              00628500
&ZMS                SETC  '&ZMS "UTILRTN"'                              00628600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00628700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00628800
.ZG127A             ANOP  ,                                             00628900
.*-------------------------------------------------------------------   00629000
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00629100
&ZXUTILRTN          SETC  'INPUT'     SET IN/OUTPUT                     00629200
&XUTILRTN           SETC  '0'                                           00629300
                    AIF   (K'&UTILRTN(1) LE 0).ZG127B  PARM             00629400
&XUTILRTN           SETC  '&UTILRTN(1)'         SET XVARIABLE           00629500
                    AIF   (N'&UTILRTN GT 1).ZG127B  MULTI               00629600
&XUTILRTN           SETC  '&UTILRTN'  SET XVARIABLE                     00629700
.ZG127B             ANOP  ,                                             00629800
.*-------------------------------------------------------------------   00629900
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00630000
                    AIF   (K'&ZXUTILRTN LE 0).ZG127R  NOT I/O           00630100
         AIF   ('&XUTILRTN' EQ '0').ZG127R                              00630200
                    AIF   ('&XUTILRTN'(1,1) NE '(').ZG127R              00630300
&ZCGPR              SETC  '&XUTILRTN'(2,K'&XUTILRTN-2)                  00630400
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG127P                 00630500
                    AIF   (K'&ZCGPR GT 2).ZG127Q                        00630600
                    AIF   ('&ZCGPR' EQ '0').ZG127Q                      00630700
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00630800
                    AIF   (T'&ZCGPR NE 'N').ZG127Q  INVALID REG NAME    00630900
.ZG127P             ANOP  ,                                             00631000
                    AIF   (T'&ZCGPR NE 'N').ZG127R  NON NUMERIC         00631100
                    AIF   ('&ZCGPR' LT '2').ZG127Q                      00631200
                    AIF   ('&ZCGPR' LE '12').ZG127R                     00631300
.ZG127Q             ANOP  ,                                             00631400
&ZMS                SETC  '"UTILRTN='                                   00631500
&ZMS                SETC  '&ZMS.&UTILRTN"'                              00631600
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00631700
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00631800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00631900
.ZG127R             ANOP  ,                                             00632000
.*-------------------------------------------------------------------   00632100
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00632200
.ZG129              ANOP  ,                                             00632300
&ZTLC               SETC 'CREATE_POOL'                                  00632400
                    AIF   ('&REQUEST(1)' NE '&ZTLC').ZG162              00632500
&XREQUEST           SETC  'CREATE_POOL'         SET KEYWORD             00632600
                    AIF   (N'&REQUEST LE 1).ZG129A  CK NUM              00632700
&ZMS                SETC  '"REQUEST='                                   00632800
&ZMS                SETC  '&ZMS.&REQUEST"'                              00632900
&ZMS                SETC  '&ZMS "REQUEST"'                              00633000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00633100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00633200
.ZG129A             ANOP  ,                                             00633300
.*------------------------------------------------------------------    00633400
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00633500
&ZCVAL              SETC ''           CLEAR ERROR KEY ACCUMULATOR       00633600
.ZG129A0            AIF   (K'&BUFLIST LE 0).ZG129A1  OK                 00633700
&ZCVAL              SETC '&ZCVAL BUFLIST'       INCORRECT KEY USED      00633800
.ZG129A1            AIF   (K'&BUFLST64 LE 0).ZG129A2  OK                00633900
&ZCVAL              SETC '&ZCVAL BUFLST64'      INCORRECT KEY USED      00634000
.ZG129A2            AIF   (K'&BUFNUM LE 0).ZG129A3  OK                  00634100
&ZCVAL              SETC '&ZCVAL BUFNUM'        INCORRECT KEY USED      00634200
.ZG129A3            AIF   (K'&BUFTYPE LE 0).ZG129A4  OK                 00634300
&ZCVAL              SETC '&ZCVAL BUFTYPE'       INCORRECT KEY USED      00634400
.ZG129A4            AIF   (K'&CSMUSER LE 0).ZG129A5  OK                 00634500
&ZCVAL              SETC '&ZCVAL CSMUSER'       INCORRECT KEY USED      00634600
.ZG129A5            AIF   (K'&GAP LE 0).ZG129A6  OK                     00634700
&ZCVAL              SETC '&ZCVAL GAP'           INCORRECT KEY USED      00634800
.ZG129A6            AIF   (K'&ERRBFLST LE 0).ZG129A7  OK                00634900
&ZCVAL              SETC '&ZCVAL ERRBFLST'      INCORRECT KEY USED      00635000
.ZG129A7            AIF   (K'&OWNERID LE 0).ZG129A8  OK                 00635100
&ZCVAL              SETC '&ZCVAL OWNERID'       INCORRECT KEY USED      00635200
.ZG129A8            AIF   (K'&COMPID LE 0).ZG129A9  OK                  00635300
&ZCVAL              SETC '&ZCVAL COMPID'        INCORRECT KEY USED      00635400
.ZG129A9            AIF   (K'&COMPUSER LE 0).ZG129A10  OK               00635500
&ZCVAL              SETC '&ZCVAL COMPUSER'      INCORRECT KEY USED      00635600
.ZG129A10           AIF   (K'&TASKID LE 0).ZG129A11  OK                 00635700
&ZCVAL              SETC '&ZCVAL TASKID'        INCORRECT KEY USED      00635800
.ZG129A11           AIF   (K'&THREAD LE 0).ZG129A12  OK                 00635900
&ZCVAL              SETC '&ZCVAL THREAD'        INCORRECT KEY USED      00636000
.ZG129A12           AIF   (K'&UTILRTN LE 0).ZG129A13  OK                00636100
&ZCVAL              SETC '&ZCVAL UTILRTN'       INCORRECT KEY USED      00636200
.ZG129A13           AIF   (K'&SKIPBUF LE 0).ZG129A14  OK                00636300
&ZCVAL              SETC '&ZCVAL SKIPBUF'       INCORRECT KEY USED      00636400
.ZG129A14           AIF   (K'&PAD LE 0).ZG129A15  OK                    00636500
&ZCVAL              SETC '&ZCVAL PAD'           INCORRECT KEY USED      00636600
.ZG129A15           AIF   (K'&PADCHAR LE 0).ZG129A16  OK                00636700
&ZCVAL              SETC '&ZCVAL PADCHAR'       INCORRECT KEY USED      00636800
.ZG129A16           AIF   (K'&SRCERRL LE 0).ZG129A17  OK                00636900
&ZCVAL              SETC '&ZCVAL SRCERRL'       INCORRECT KEY USED      00637000
.ZG129A17           AIF   (K'&SRCGAP LE 0).ZG129A18  OK                 00637100
&ZCVAL              SETC '&ZCVAL SRCGAP'        INCORRECT KEY USED      00637200
.ZG129A18           AIF   (K'&SRCLIST LE 0).ZG129A19  OK                00637300
&ZCVAL              SETC '&ZCVAL SRCLIST'       INCORRECT KEY USED      00637400
.ZG129A19           AIF   (K'&SRCLST64 LE 0).ZG129A20  OK               00637500
&ZCVAL              SETC '&ZCVAL SRCLST64'      INCORRECT KEY USED      00637600
.ZG129A20           AIF   (K'&SRCNUM LE 0).ZG129A21  OK                 00637700
&ZCVAL              SETC '&ZCVAL SRCNUM'        INCORRECT KEY USED      00637800
.ZG129A21           AIF   (K'&TARGERRL LE 0).ZG129A22  OK               00637900
&ZCVAL              SETC '&ZCVAL TARGERRL'      INCORRECT KEY USED      00638000
.ZG129A22           AIF   (K'&TARGGAP LE 0).ZG129A23  OK                00638100
&ZCVAL              SETC '&ZCVAL TARGGAP'       INCORRECT KEY USED      00638200
.ZG129A23           AIF   (K'&TARGLIST LE 0).ZG129A24  OK               00638300
&ZCVAL              SETC '&ZCVAL TARGLIST'      INCORRECT KEY USED      00638400
.ZG129A24           AIF   (K'&TARLST64 LE 0).ZG129A25  OK               00638500
&ZCVAL              SETC '&ZCVAL TARLST64'      INCORRECT KEY USED      00638600
.ZG129A25           AIF   (K'&TARGNUM LE 0).ZG129A26  OK                00638700
&ZCVAL              SETC '&ZCVAL TARGNUM'       INCORRECT KEY USED      00638800
.ZG129A26           AIF   (K'&POOLTOKN LE 0).ZG129A27  OK               00638900
&ZCVAL              SETC '&ZCVAL POOLTOKN'      INCORRECT KEY USED      00639000
.ZG129A27           AIF   (K'&WAIT LE 0).ZG129A28  OK                   00639100
&ZCVAL              SETC '&ZCVAL WAIT'          INCORRECT KEY USED      00639200
.ZG129A28           AIF   (K'&CLEAR LE 0).ZG129A29  OK                  00639300
&ZCVAL              SETC '&ZCVAL CLEAR'         INCORRECT KEY USED      00639400
.ZG129A29           AIF   (K'&FREETO LE 0).ZG129A30  OK                 00639500
&ZCVAL              SETC '&ZCVAL FREETO'        INCORRECT KEY USED      00639600
.ZG129A30           AIF   (K'&FREERTN LE 0).ZG129A31  OK                00639700
&ZCVAL              SETC '&ZCVAL FREERTN'       INCORRECT KEY USED      00639800
.ZG129A31           AIF   (K'&ZCVAL LE 0).ZG129A32  OK                  00639900
&ZCVAL              SETC '&ZCVAL'(2,K'&ZCVAL-1)                         00640000
                    AIF  (K'&ZCVAL LE 160).ZG129A32A                    00640100
&ZCVAL              SETC '&ZCVAL'(1,160)                                00640200
&ZCVAL              SETC '&ZCVAL....'                                   00640300
.ZG129A32A          ANOP                                                00640400
&ZMS                SETC  '"REQUEST'                                    00640500
&ZMS                SETC  '&ZMS.=&REQUEST"'                             00640600
&ZMS                SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'          00640700
                    MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'          00640800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00640900
.ZG129A32           ANOP  ,                                             00641000
.*----------------------------------------------------------------***   00641100
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00641200
                    AIF   (N'&BUFSIZE LE 1).ZG131A  CK NUM              00641300
&ZMS                SETC  '"BUFSIZE='                                   00641400
&ZMS                SETC  '&ZMS.&BUFSIZE"'                              00641500
&ZMS                SETC  '&ZMS "BUFSIZE"'                              00641600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00641700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00641800
.ZG131A             ANOP  ,                                             00641900
.*-------------------------------------------------------------------   00642000
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00642100
&ZXBUFSIZE          SETC  'INPUT'     SET IN/OUTPUT                     00642200
&XBUFSIZE           SETC  '&BUFSIZE(1)'         SET XVARIABLE           00642300
                    AIF   (N'&BUFSIZE GT 1).ZG131B  MULTI PARMS         00642400
&XBUFSIZE           SETC  '&BUFSIZE'  SET XVARIABLE                     00642500
.ZG131B             AIF   (K'&BUFSIZE(1) GT 0).ZG131C                   00642600
&ZXBUFSIZE          SETC  ''          RESET IN/OUTPUT                   00642700
&ZMS                SETC  ' '                                           00642800
&ZMS                SETC  '&ZMS "BUFSIZE" KEY AND ITS'                  00642900
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00643000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00643100
.ZG131C             ANOP  ,                                             00643200
.*-------------------------------------------------------------------   00643300
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00643400
                    AIF   (K'&ZXBUFSIZE LE 0).ZG131R  NOT I/O           00643500
                    AIF   ('&XBUFSIZE'(1,1) NE '(').ZG131R              00643600
&ZCGPR              SETC  '&XBUFSIZE'(2,K'&XBUFSIZE-2)                  00643700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG131P                 00643800
                    AIF   (K'&ZCGPR GT 2).ZG131Q                        00643900
                    AIF   ('&ZCGPR' EQ '0').ZG131Q                      00644000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00644100
                    AIF   (T'&ZCGPR NE 'N').ZG131Q  INVALID REG NAME    00644200
.ZG131P             ANOP  ,                                             00644300
                    AIF   (T'&ZCGPR NE 'N').ZG131R  NON NUMERIC         00644400
                    AIF   ('&ZCGPR' LT '2').ZG131Q                      00644500
                    AIF   ('&ZCGPR' LE '12').ZG131R                     00644600
.ZG131Q             ANOP  ,                                             00644700
&ZMS                SETC  '"BUFSIZE='                                   00644800
&ZMS                SETC  '&ZMS.&BUFSIZE"'                              00644900
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00645000
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00645100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00645200
.ZG131R             ANOP  ,                                             00645300
.*------------------------------------------------------------------    00645400
.***AG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00645500
&XBUFSOURC          SETC  ''          INITIALIZE XVARIABLE              00645600
.*-------------------------------------------------------------------   00645700
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00645800
.ZG135              ANOP  ,                                             00645900
                    AIF   (K'&BUFSOURC(1) LE 0).ZG135A                  00646000
&ZTLC               SETC 'DSPACE'                                       00646100
                    AIF   ('&BUFSOURC(1)' NE '&ZTLC').ZG141             00646200
&XBUFSOURC          SETC  'DSPACE'    SET KEYWORD                       00646300
                    AIF   (N'&BUFSOURC LE 1).ZG135A  CK NUM             00646400
&ZMS                SETC  '"BUFSOURC='                                  00646500
&ZMS                SETC  '&ZMS.&BUFSOURC"'                             00646600
&ZMS                SETC  '&ZMS "BUFSOURC"'                             00646700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00646800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00646900
.ZG135A             ANOP  ,                                             00647000
.*----------------------------------------------------------------***   00647100
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00647200
                    AIF   (N'&BACK LE 1).ZG137A  CK NUM                 00647300
&ZMS                SETC  '"BACK='                                      00647400
&ZMS                SETC  '&ZMS.&BACK"'                                 00647500
&ZMS                SETC  '&ZMS "BACK"'                                 00647600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00647700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00647800
.ZG137A             ANOP  ,                                             00647900
.*-------------------------------------------------------------------   00648000
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00648100
&XBACK              SETC  ''          INITIALIZE XVARIABLE              00648200
.ZG138A   AIF   ('&BACK(1)' NE '31').ZG139A                             00648300
&XBACK              SETC  '31'        SET KEYWORD                       00648400
.*-------------------------------------------------------------------   00648500
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00648600
.ZG139A   AIF   ('&BACK(1)' NE '64').ZG140A                             00648700
&XBACK              SETC  '64'        SET KEYWORD                       00648800
.*-------------------------------------------------------------------   00648900
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00649000
.ZG140A             AIF   (K'&XBACK GT 0).ZG140C  KEYWORD               00649100
                    AIF   (K'&BACK(1) LE 0).ZG140B                      00649200
&ZMS                SETC  '"BACK='                                      00649300
&ZMS                SETC  '&ZMS.&BACK"'                                 00649400
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     00649500
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           00649600
&ZMS                SETC  '&ZMS "31"'                                   00649700
&ZMS                SETC  '&ZMS OR "64".'                               00649800
                    MNOTE 8,' &ZMS '                                    00649900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00650000
.ZG140B             ANOP  ,                                             00650100
&XBACK              SETC  '31'        SET DEFAULT KEYWORD               00650200
.ZG140C             ANOP  ,                                             00650300
&ZXBACK             SETC  'INPUT'     SET IN/OUTPUT                     00650400
.*-------------------------------------------------------------------   00650500
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00650600
.ZG141              ANOP  ,                                             00650700
&ZTLC               SETC 'ECSA'                                         00650800
                    AIF   ('&BUFSOURC(1)' NE '&ZTLC').ZG142             00650900
&XBUFSOURC          SETC  'ECSA'      SET KEYWORD                       00651000
                    AIF   (N'&BUFSOURC LE 1).ZG141A  CK NUM             00651100
&ZMS                SETC  '"BUFSOURC='                                  00651200
&ZMS                SETC  '&ZMS.&BUFSOURC"'                             00651300
&ZMS                SETC  '&ZMS "BUFSOURC"'                             00651400
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00651500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00651600
.ZG141A             ANOP  ,                                             00651700
.*------------------------------------------------------------------    00651800
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00651900
&ZCVAL              SETC ''           CLEAR ERROR KEY ACCUMULATOR       00652000
.ZG141A0            AIF   (K'&BACK LE 0).ZG141A1  OK                    00652100
&ZCVAL              SETC '&ZCVAL BACK'          INCORRECT KEY USED      00652200
.ZG141A1            AIF   (K'&ZCVAL LE 0).ZG141A2  OK                   00652300
&ZCVAL              SETC '&ZCVAL'(2,K'&ZCVAL-1)                         00652400
&ZMS                SETC  '"BUFSOURC'                                   00652500
&ZMS                SETC  '&ZMS.=&BUFSOURC"'                            00652600
&ZMS                SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'          00652700
                    MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'          00652800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00652900
.ZG141A2            ANOP  ,                                             00653000
.*-------------------------------------------------------------------   00653100
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00653200
.ZG142              ANOP  ,                                             00653300
&ZTLC               SETC 'HVCOMM'                                       00653400
                    AIF   ('&BUFSOURC(1)' NE '&ZTLC').ZG143             00653500
&XBUFSOURC          SETC  'HVCOMM'    SET KEYWORD                       00653600
                    AIF   (N'&BUFSOURC LE 1).ZG142A  CK NUM             00653700
&ZMS                SETC  '"BUFSOURC='                                  00653800
&ZMS                SETC  '&ZMS.&BUFSOURC"'                             00653900
&ZMS                SETC  '&ZMS "BUFSOURC"'                             00654000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00654100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00654200
.ZG142A             ANOP  ,                                             00654300
.*------------------------------------------------------------------    00654400
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00654500
&ZCVAL              SETC ''           CLEAR ERROR KEY ACCUMULATOR       00654600
.ZG142A0            AIF   (K'&BACK LE 0).ZG142A1  OK                    00654700
&ZCVAL              SETC '&ZCVAL BACK'          INCORRECT KEY USED      00654800
.ZG142A1            AIF   (K'&ZCVAL LE 0).ZG142A2  OK                   00654900
&ZCVAL              SETC '&ZCVAL'(2,K'&ZCVAL-1)                         00655000
&ZMS                SETC  '"BUFSOURC'                                   00655100
&ZMS                SETC  '&ZMS.=&BUFSOURC"'                            00655200
&ZMS                SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'          00655300
                    MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'          00655400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00655500
.ZG142A2            ANOP  ,                                             00655600
.*------------------------------------------------------------------    00655700
.***AG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00655800
.ZG143              ANOP  ,                                             00655900
&ZXBUFSOURC         SETC  'INPUT'     SET IN/OUTPUT                     00656000
                    AIF   (K'&XBUFSOURC GT 0).ZG143E  VALID ARG         00656100
                    AIF   (T'&BUFSOURC EQ 'O').ZG143D  OMITTED          00656200
&ZASYSLNDX          SETA  0                                             00656300
.ZG143A             ANOP  ,           POSITIONAL MACRO KEY              00656400
&ZASYSLNDX          SETA  &ZASYSLNDX+1                                  00656500
                    AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG143C             00656600
&ZTLC               SETC 'BUFSOURC'                                     00656700
                    AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG143A    00656800
.ZG143B             ANOP  ,                                             00656900
&ZXBUFSOURC         SETC  ''          RESET IN/OUTPUT                   00657000
&ZMS                SETC  'THE "BUFSOURC" KEY'                          00657100
&ZMS                SETC  '&ZMS MUST CONTAIN ONE'                       00657200
                    MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'              00657300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00657400
                    AGO   .ZG143E                                       00657500
.ZG143C             ANOP  ,                                             00657600
&ZXBUFSOURC         SETC  ''          RESET IN/OUTPUT                   00657700
&ZMS                SETC  '"BUFSOURC='                                  00657800
&ZMS                SETC  '&ZMS.&BUFSOURC"'                             00657900
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     00658000
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           00658100
&ZMS                SETC  '&ZMS "DSPACE",'                              00658200
&ZMS                SETC  '&ZMS "ECSA",'                                00658300
&ZMS                SETC  '&ZMS OR "HVCOMM".'                           00658400
                    MNOTE 8,' &ZMS '                                    00658500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00658600
                    AGO   .ZG143E                                       00658700
.ZG143D             ANOP  ,                                             00658800
&XBUFSOURC          SETC  'DSPACE'    SET DEFAULT KEYWORD               00658900
.ZG143E             ANOP  ,                                             00659000
.*------------------------------------------------------------------    00659100
.***AG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00659200
                    AIF   (K'&BUFSOURC(1) GT 0).ZG143F  PARM            00659300
&XBUFSOURC          SETC  ''          ENSURE NULL KEYWORD               00659400
&ZXBUFSOURC         SETC  ''          RESET IN/OUTPUT                   00659500
&ZMS                SETC  'THE'                                         00659600
&ZMS                SETC  '&ZMS "BUFSOURC" KEY AND ITS'                 00659700
&ZMS                SETC  '&ZMS ARGUMENT ARE REQUIRED.'                 00659800
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           00659900
&ZMS                SETC  '&ZMS "DSPACE",'                              00660000
&ZMS                SETC  '&ZMS "ECSA",'                                00660100
&ZMS                SETC  '&ZMS OR "HVCOMM".'                           00660200
                    MNOTE 8,' &ZMS '                                    00660300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00660400
.ZG143F             ANOP  ,                                             00660500
.*-------------------------------------------------------------------   00660600
.***AG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START             00660700
                    AIF   ('&XMF' EQ 'M').ZG146  BYPASS IF MF=M         00660800
.*----------------------------------------------------------------***   00660900
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00661000
                    AIF   (N'&DS_INFO LE 1).ZG145A  CK NUM              00661100
&ZMS                SETC  '"DS_INFO='                                   00661200
&ZMS                SETC  '&ZMS.&DS_INFO"'                              00661300
&ZMS                SETC  '&ZMS "DS_INFO"'                              00661400
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00661500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00661600
.ZG145A             ANOP  ,                                             00661700
.*-------------------------------------------------------------------   00661800
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00661900
                    AIF   (K'&DS_INFO(1) LE 0).ZG145C  NO PARM          00662000
&ZXDS_INFO          SETC  'OUTPUT'    SET OUTPUT                        00662100
&XDS_INFO           SETC  '&DS_INFO(1)'         SET XVARIABLE           00662200
                    AIF   (N'&DS_INFO GT 1).ZG145C                      00662300
&XDS_INFO           SETC  '&DS_INFO'  SET XVARIABLE                     00662400
.ZG145C             ANOP  ,                                             00662500
.*-------------------------------------------------------------------   00662600
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00662700
                    AIF   (K'&ZXDS_INFO LE 0).ZG145R  NOT I/O           00662800
                    AIF   ('&XDS_INFO'(1,1) NE '(').ZG145R              00662900
&ZCGPR              SETC  '&XDS_INFO'(2,K'&XDS_INFO-2)                  00663000
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG145P                 00663100
                    AIF   (K'&ZCGPR GT 2).ZG145Q                        00663200
                    AIF   ('&ZCGPR' EQ '0').ZG145Q                      00663300
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00663400
                    AIF   (T'&ZCGPR NE 'N').ZG145Q  INVALID REG NAME    00663500
.ZG145P             ANOP  ,                                             00663600
                    AIF   (T'&ZCGPR NE 'N').ZG145R  NON NUMERIC         00663700
                    AIF   ('&ZCGPR' LT '2').ZG145Q                      00663800
                    AIF   ('&ZCGPR' LE '12').ZG145R                     00663900
.ZG145Q             ANOP  ,                                             00664000
&ZMS                SETC  '"DS_INFO='                                   00664100
&ZMS                SETC  '&ZMS.&DS_INFO"'                              00664200
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00664300
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00664400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00664500
.ZG145R             ANOP  ,                                             00664600
.*-------------------------------------------------------------------   00664700
.***AG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END               00664800
.ZG146              ANOP  ,           END OF BYPASS CHECK               00664900
.*----------------------------------------------------------------***   00665000
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00665100
                    AIF   (N'&EXPBUF LE 1).ZG148A  CK NUM               00665200
&ZMS                SETC  '"EXPBUF='                                    00665300
&ZMS                SETC  '&ZMS.&EXPBUF"'                               00665400
&ZMS                SETC  '&ZMS "EXPBUF"'                               00665500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00665600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00665700
.ZG148A             ANOP  ,                                             00665800
.*-------------------------------------------------------------------   00665900
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00666000
&ZXEXPBUF           SETC  'INPUT'     SET IN/OUTPUT                     00666100
&XEXPBUF            SETC  '&EXPBUF(1)'          SET XVARIABLE           00666200
                    AIF   (N'&EXPBUF GT 1).ZG148B  MULTI PARMS          00666300
&XEXPBUF            SETC  '&EXPBUF'   SET XVARIABLE                     00666400
.ZG148B             AIF   (K'&EXPBUF(1) GT 0).ZG148C                    00666500
&ZXEXPBUF           SETC  ''          RESET IN/OUTPUT                   00666600
&ZMS                SETC  ' '                                           00666700
&ZMS                SETC  '&ZMS "EXPBUF" KEY AND ITS'                   00666800
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00666900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00667000
.ZG148C             ANOP  ,                                             00667100
.*-------------------------------------------------------------------   00667200
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00667300
                    AIF   (K'&ZXEXPBUF LE 0).ZG148R  NOT I/O            00667400
                    AIF   ('&XEXPBUF'(1,1) NE '(').ZG148R               00667500
&ZCGPR              SETC  '&XEXPBUF'(2,K'&XEXPBUF-2)                    00667600
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG148P                 00667700
                    AIF   (K'&ZCGPR GT 2).ZG148Q                        00667800
                    AIF   ('&ZCGPR' EQ '0').ZG148Q                      00667900
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00668000
                    AIF   (T'&ZCGPR NE 'N').ZG148Q  INVALID REG NAME    00668100
.ZG148P             ANOP  ,                                             00668200
                    AIF   (T'&ZCGPR NE 'N').ZG148R  NON NUMERIC         00668300
                    AIF   ('&ZCGPR' LT '2').ZG148Q                      00668400
                    AIF   ('&ZCGPR' LE '12').ZG148R                     00668500
.ZG148Q             ANOP  ,                                             00668600
&ZMS                SETC  '"EXPBUF='                                    00668700
&ZMS                SETC  '&ZMS.&EXPBUF"'                               00668800
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00668900
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00669000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00669100
.ZG148R             ANOP  ,                                             00669200
.*----------------------------------------------------------------***   00669300
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00669400
                    AIF   (N'&INITBUF LE 1).ZG151A  CK NUM              00669500
&ZMS                SETC  '"INITBUF='                                   00669600
&ZMS                SETC  '&ZMS.&INITBUF"'                              00669700
&ZMS                SETC  '&ZMS "INITBUF"'                              00669800
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00669900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00670000
.ZG151A             ANOP  ,                                             00670100
.*-------------------------------------------------------------------   00670200
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00670300
&ZXINITBUF          SETC  'INPUT'     SET IN/OUTPUT                     00670400
&XINITBUF           SETC  '&INITBUF(1)'         SET XVARIABLE           00670500
                    AIF   (N'&INITBUF GT 1).ZG151B  MULTI PARMS         00670600
&XINITBUF           SETC  '&INITBUF'  SET XVARIABLE                     00670700
.ZG151B             AIF   (K'&INITBUF(1) GT 0).ZG151C                   00670800
&ZXINITBUF          SETC  ''          RESET IN/OUTPUT                   00670900
&ZMS                SETC  ' '                                           00671000
&ZMS                SETC  '&ZMS "INITBUF" KEY AND ITS'                  00671100
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00671200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00671300
.ZG151C             ANOP  ,                                             00671400
.*-------------------------------------------------------------------   00671500
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00671600
                    AIF   (K'&ZXINITBUF LE 0).ZG151R  NOT I/O           00671700
                    AIF   ('&XINITBUF'(1,1) NE '(').ZG151R              00671800
&ZCGPR              SETC  '&XINITBUF'(2,K'&XINITBUF-2)                  00671900
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG151P                 00672000
                    AIF   (K'&ZCGPR GT 2).ZG151Q                        00672100
                    AIF   ('&ZCGPR' EQ '0').ZG151Q                      00672200
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00672300
                    AIF   (T'&ZCGPR NE 'N').ZG151Q  INVALID REG NAME    00672400
.ZG151P             ANOP  ,                                             00672500
                    AIF   (T'&ZCGPR NE 'N').ZG151R  NON NUMERIC         00672600
                    AIF   ('&ZCGPR' LT '2').ZG151Q                      00672700
                    AIF   ('&ZCGPR' LE '12').ZG151R                     00672800
.ZG151Q             ANOP  ,                                             00672900
&ZMS                SETC  '"INITBUF='                                   00673000
&ZMS                SETC  '&ZMS.&INITBUF"'                              00673100
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00673200
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00673300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00673400
.ZG151R             ANOP  ,                                             00673500
.*----------------------------------------------------------------***   00673600
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00673700
                    AIF   (N'&MINFREE LE 1).ZG154A  CK NUM              00673800
&ZMS                SETC  '"MINFREE='                                   00673900
&ZMS                SETC  '&ZMS.&MINFREE"'                              00674000
&ZMS                SETC  '&ZMS "MINFREE"'                              00674100
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00674200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00674300
.ZG154A             ANOP  ,                                             00674400
.*-------------------------------------------------------------------   00674500
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00674600
&ZXMINFREE          SETC  'INPUT'     SET IN/OUTPUT                     00674700
&XMINFREE           SETC  '&MINFREE(1)'         SET XVARIABLE           00674800
                    AIF   (N'&MINFREE GT 1).ZG154B  MULTI PARMS         00674900
&XMINFREE           SETC  '&MINFREE'  SET XVARIABLE                     00675000
.ZG154B             AIF   (K'&MINFREE(1) GT 0).ZG154C                   00675100
&ZXMINFREE          SETC  ''          RESET IN/OUTPUT                   00675200
&ZMS                SETC  ' '                                           00675300
&ZMS                SETC  '&ZMS "MINFREE" KEY AND ITS'                  00675400
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00675500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00675600
.ZG154C             ANOP  ,                                             00675700
.*-------------------------------------------------------------------   00675800
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00675900
                    AIF   (K'&ZXMINFREE LE 0).ZG154R  NOT I/O           00676000
                    AIF   ('&XMINFREE'(1,1) NE '(').ZG154R              00676100
&ZCGPR              SETC  '&XMINFREE'(2,K'&XMINFREE-2)                  00676200
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG154P                 00676300
                    AIF   (K'&ZCGPR GT 2).ZG154Q                        00676400
                    AIF   ('&ZCGPR' EQ '0').ZG154Q                      00676500
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00676600
                    AIF   (T'&ZCGPR NE 'N').ZG154Q  INVALID REG NAME    00676700
.ZG154P             ANOP  ,                                             00676800
                    AIF   (T'&ZCGPR NE 'N').ZG154R  NON NUMERIC         00676900
                    AIF   ('&ZCGPR' LT '2').ZG154Q                      00677000
                    AIF   ('&ZCGPR' LE '12').ZG154R                     00677100
.ZG154Q             ANOP  ,                                             00677200
&ZMS                SETC  '"MINFREE='                                   00677300
&ZMS                SETC  '&ZMS.&MINFREE"'                              00677400
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00677500
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00677600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00677700
.ZG154R             ANOP  ,                                             00677800
.*-------------------------------------------------------------------   00677900
.***AG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START             00678000
                    AIF   ('&XMF' EQ 'M').ZG158  BYPASS IF MF=M         00678100
.*----------------------------------------------------------------***   00678200
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00678300
                    AIF   (N'&RETPTOKN LE 1).ZG157A  CK NUM             00678400
&ZMS                SETC  '"RETPTOKN='                                  00678500
&ZMS                SETC  '&ZMS.&RETPTOKN"'                             00678600
&ZMS                SETC  '&ZMS "RETPTOKN"'                             00678700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00678800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00678900
.ZG157A             ANOP  ,                                             00679000
.*-------------------------------------------------------------------   00679100
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00679200
                    AIF   (K'&RETPTOKN(1) LE 0).ZG157C  NO PARM         00679300
&ZXRETPTOKN         SETC  'OUTPUT'    SET OUTPUT                        00679400
&XRETPTOKN          SETC  '&RETPTOKN(1)'        SET XVARIABLE           00679500
                    AIF   (N'&RETPTOKN GT 1).ZG157C                     00679600
&XRETPTOKN          SETC  '&RETPTOKN'           SET XVARIABLE           00679700
.ZG157C             ANOP  ,                                             00679800
.*-------------------------------------------------------------------   00679900
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00680000
                    AIF   (K'&ZXRETPTOKN LE 0).ZG157R  NOT I/O          00680100
                    AIF   ('&XRETPTOKN'(1,1) NE '(').ZG157R             00680200
&ZCGPR              SETC  '&XRETPTOKN'(2,K'&XRETPTOKN-2)                00680300
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG157P                 00680400
                    AIF   (K'&ZCGPR GT 2).ZG157Q                        00680500
                    AIF   ('&ZCGPR' EQ '0').ZG157Q                      00680600
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00680700
                    AIF   (T'&ZCGPR NE 'N').ZG157Q  INVALID REG NAME    00680800
.ZG157P             ANOP  ,                                             00680900
                    AIF   (T'&ZCGPR NE 'N').ZG157R  NON NUMERIC         00681000
                    AIF   ('&ZCGPR' LT '2').ZG157Q                      00681100
                    AIF   ('&ZCGPR' LE '12').ZG157R                     00681200
.ZG157Q             ANOP  ,                                             00681300
&ZMS                SETC  '"RETPTOKN='                                  00681400
&ZMS                SETC  '&ZMS.&RETPTOKN"'                             00681500
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00681600
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00681700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00681800
.ZG157R             ANOP  ,                                             00681900
.*-------------------------------------------------------------------   00682000
.***AG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END               00682100
.ZG158              ANOP  ,           END OF BYPASS CHECK               00682200
.*-------------------------------------------------------------------   00682300
.***AG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START             00682400
                    AIF   ('&XMF' EQ 'M').ZG161  BYPASS IF MF=M         00682500
.*----------------------------------------------------------------***   00682600
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00682700
                    AIF   (N'&STATAREA LE 1).ZG160A  CK NUM             00682800
&ZMS                SETC  '"STATAREA='                                  00682900
&ZMS                SETC  '&ZMS.&STATAREA"'                             00683000
&ZMS                SETC  '&ZMS "STATAREA"'                             00683100
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00683200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00683300
.ZG160A             ANOP  ,                                             00683400
.*-------------------------------------------------------------------   00683500
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00683600
                    AIF   (K'&STATAREA(1) LE 0).ZG160C  NO PARM         00683700
&ZXSTATAREA         SETC  'OUTPUT'    SET OUTPUT                        00683800
&XSTATAREA          SETC  '&STATAREA(1)'        SET XVARIABLE           00683900
                    AIF   (N'&STATAREA GT 1).ZG160C                     00684000
&XSTATAREA          SETC  '&STATAREA'           SET XVARIABLE           00684100
.ZG160C             ANOP  ,                                             00684200
.*-------------------------------------------------------------------   00684300
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00684400
                    AIF   (K'&ZXSTATAREA LE 0).ZG160R  NOT I/O          00684500
                    AIF   ('&XSTATAREA'(1,1) NE '(').ZG160R             00684600
&ZCGPR              SETC  '&XSTATAREA'(2,K'&XSTATAREA-2)                00684700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG160P                 00684800
                    AIF   (K'&ZCGPR GT 2).ZG160Q                        00684900
                    AIF   ('&ZCGPR' EQ '0').ZG160Q                      00685000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00685100
                    AIF   (T'&ZCGPR NE 'N').ZG160Q  INVALID REG NAME    00685200
.ZG160P             ANOP  ,                                             00685300
                    AIF   (T'&ZCGPR NE 'N').ZG160R  NON NUMERIC         00685400
                    AIF   ('&ZCGPR' LT '2').ZG160Q                      00685500
                    AIF   ('&ZCGPR' LE '12').ZG160R                     00685600
.ZG160Q             ANOP  ,                                             00685700
&ZMS                SETC  '"STATAREA='                                  00685800
&ZMS                SETC  '&ZMS.&STATAREA"'                             00685900
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00686000
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00686100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00686200
.ZG160R             ANOP  ,                                             00686300
.*-------------------------------------------------------------------   00686400
.***AG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END               00686500
.ZG161              ANOP  ,           END OF BYPASS CHECK               00686600
.*-------------------------------------------------------------------   00686700
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00686800
.ZG162              ANOP  ,                                             00686900
&ZTLC               SETC 'DELETE_POOL'                                  00687000
                    AIF   ('&REQUEST(1)' NE '&ZTLC').ZG166              00687100
&XREQUEST           SETC  'DELETE_POOL'         SET KEYWORD             00687200
                    AIF   (N'&REQUEST LE 1).ZG162A  CK NUM              00687300
&ZMS                SETC  '"REQUEST='                                   00687400
&ZMS                SETC  '&ZMS.&REQUEST"'                              00687500
&ZMS                SETC  '&ZMS "REQUEST"'                              00687600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00687700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00687800
.ZG162A             ANOP  ,                                             00687900
.*------------------------------------------------------------------    00688000
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00688100
&ZCVAL              SETC ''           CLEAR ERROR KEY ACCUMULATOR       00688200
.ZG162A0            AIF   (K'&BUFLIST LE 0).ZG162A1  OK                 00688300
&ZCVAL              SETC '&ZCVAL BUFLIST'       INCORRECT KEY USED      00688400
.ZG162A1            AIF   (K'&BUFLST64 LE 0).ZG162A2  OK                00688500
&ZCVAL              SETC '&ZCVAL BUFLST64'      INCORRECT KEY USED      00688600
.ZG162A2            AIF   (K'&BUFNUM LE 0).ZG162A3  OK                  00688700
&ZCVAL              SETC '&ZCVAL BUFNUM'        INCORRECT KEY USED      00688800
.ZG162A3            AIF   (K'&BUFTYPE LE 0).ZG162A4  OK                 00688900
&ZCVAL              SETC '&ZCVAL BUFTYPE'       INCORRECT KEY USED      00689000
.ZG162A4            AIF   (K'&CSMUSER LE 0).ZG162A5  OK                 00689100
&ZCVAL              SETC '&ZCVAL CSMUSER'       INCORRECT KEY USED      00689200
.ZG162A5            AIF   (K'&GAP LE 0).ZG162A6  OK                     00689300
&ZCVAL              SETC '&ZCVAL GAP'           INCORRECT KEY USED      00689400
.ZG162A6            AIF   (K'&ERRBFLST LE 0).ZG162A7  OK                00689500
&ZCVAL              SETC '&ZCVAL ERRBFLST'      INCORRECT KEY USED      00689600
.ZG162A7            AIF   (K'&OWNERID LE 0).ZG162A8  OK                 00689700
&ZCVAL              SETC '&ZCVAL OWNERID'       INCORRECT KEY USED      00689800
.ZG162A8            AIF   (K'&COMPID LE 0).ZG162A9  OK                  00689900
&ZCVAL              SETC '&ZCVAL COMPID'        INCORRECT KEY USED      00690000
.ZG162A9            AIF   (K'&COMPUSER LE 0).ZG162A10  OK               00690100
&ZCVAL              SETC '&ZCVAL COMPUSER'      INCORRECT KEY USED      00690200
.ZG162A10           AIF   (K'&TASKID LE 0).ZG162A11  OK                 00690300
&ZCVAL              SETC '&ZCVAL TASKID'        INCORRECT KEY USED      00690400
.ZG162A11           AIF   (K'&THREAD LE 0).ZG162A12  OK                 00690500
&ZCVAL              SETC '&ZCVAL THREAD'        INCORRECT KEY USED      00690600
.ZG162A12           AIF   (K'&UTILRTN LE 0).ZG162A13  OK                00690700
&ZCVAL              SETC '&ZCVAL UTILRTN'       INCORRECT KEY USED      00690800
.ZG162A13           AIF   (K'&SKIPBUF LE 0).ZG162A14  OK                00690900
&ZCVAL              SETC '&ZCVAL SKIPBUF'       INCORRECT KEY USED      00691000
.ZG162A14           AIF   (K'&PAD LE 0).ZG162A15  OK                    00691100
&ZCVAL              SETC '&ZCVAL PAD'           INCORRECT KEY USED      00691200
.ZG162A15           AIF   (K'&PADCHAR LE 0).ZG162A16  OK                00691300
&ZCVAL              SETC '&ZCVAL PADCHAR'       INCORRECT KEY USED      00691400
.ZG162A16           AIF   (K'&SRCERRL LE 0).ZG162A17  OK                00691500
&ZCVAL              SETC '&ZCVAL SRCERRL'       INCORRECT KEY USED      00691600
.ZG162A17           AIF   (K'&SRCGAP LE 0).ZG162A18  OK                 00691700
&ZCVAL              SETC '&ZCVAL SRCGAP'        INCORRECT KEY USED      00691800
.ZG162A18           AIF   (K'&SRCLIST LE 0).ZG162A19  OK                00691900
&ZCVAL              SETC '&ZCVAL SRCLIST'       INCORRECT KEY USED      00692000
.ZG162A19           AIF   (K'&SRCLST64 LE 0).ZG162A20  OK               00692100
&ZCVAL              SETC '&ZCVAL SRCLST64'      INCORRECT KEY USED      00692200
.ZG162A20           AIF   (K'&SRCNUM LE 0).ZG162A21  OK                 00692300
&ZCVAL              SETC '&ZCVAL SRCNUM'        INCORRECT KEY USED      00692400
.ZG162A21           AIF   (K'&TARGERRL LE 0).ZG162A22  OK               00692500
&ZCVAL              SETC '&ZCVAL TARGERRL'      INCORRECT KEY USED      00692600
.ZG162A22           AIF   (K'&TARGGAP LE 0).ZG162A23  OK                00692700
&ZCVAL              SETC '&ZCVAL TARGGAP'       INCORRECT KEY USED      00692800
.ZG162A23           AIF   (K'&TARGLIST LE 0).ZG162A24  OK               00692900
&ZCVAL              SETC '&ZCVAL TARGLIST'      INCORRECT KEY USED      00693000
.ZG162A24           AIF   (K'&TARLST64 LE 0).ZG162A25  OK               00693100
&ZCVAL              SETC '&ZCVAL TARLST64'      INCORRECT KEY USED      00693200
.ZG162A25           AIF   (K'&TARGNUM LE 0).ZG162A26  OK                00693300
&ZCVAL              SETC '&ZCVAL TARGNUM'       INCORRECT KEY USED      00693400
.ZG162A26           AIF   (K'&BUFSIZE LE 0).ZG162A27  OK                00693500
&ZCVAL              SETC '&ZCVAL BUFSIZE'       INCORRECT KEY USED      00693600
.ZG162A27           AIF   (K'&BUFSOURC LE 0).ZG162A28  OK               00693700
&ZCVAL              SETC '&ZCVAL BUFSOURC'      INCORRECT KEY USED      00693800
.ZG162A28           AIF   (K'&BACK LE 0).ZG162A29  OK                   00693900
&ZCVAL              SETC '&ZCVAL BACK'          INCORRECT KEY USED      00694000
.ZG162A29           AIF   (K'&DS_INFO LE 0).ZG162A30  OK                00694100
&ZCVAL              SETC '&ZCVAL DS_INFO'       INCORRECT KEY USED      00694200
.ZG162A30           AIF   (K'&EXPBUF LE 0).ZG162A31  OK                 00694300
&ZCVAL              SETC '&ZCVAL EXPBUF'        INCORRECT KEY USED      00694400
.ZG162A31           AIF   (K'&INITBUF LE 0).ZG162A32  OK                00694500
&ZCVAL              SETC '&ZCVAL INITBUF'       INCORRECT KEY USED      00694600
.ZG162A32           AIF   (K'&MINFREE LE 0).ZG162A33  OK                00694700
&ZCVAL              SETC '&ZCVAL MINFREE'       INCORRECT KEY USED      00694800
.ZG162A33           AIF   (K'&RETPTOKN LE 0).ZG162A34  OK               00694900
&ZCVAL              SETC '&ZCVAL RETPTOKN'      INCORRECT KEY USED      00695000
.ZG162A34           AIF   (K'&STATAREA LE 0).ZG162A35  OK               00695100
&ZCVAL              SETC '&ZCVAL STATAREA'      INCORRECT KEY USED      00695200
.ZG162A35           AIF   (K'&WAIT LE 0).ZG162A36  OK                   00695300
&ZCVAL              SETC '&ZCVAL WAIT'          INCORRECT KEY USED      00695400
.ZG162A36           AIF   (K'&CLEAR LE 0).ZG162A37  OK                  00695500
&ZCVAL              SETC '&ZCVAL CLEAR'         INCORRECT KEY USED      00695600
.ZG162A37           AIF   (K'&FREETO LE 0).ZG162A38  OK                 00695700
&ZCVAL              SETC '&ZCVAL FREETO'        INCORRECT KEY USED      00695800
.ZG162A38           AIF   (K'&FREERTN LE 0).ZG162A39  OK                00695900
&ZCVAL              SETC '&ZCVAL FREERTN'       INCORRECT KEY USED      00696000
.ZG162A39           AIF   (K'&ZCVAL LE 0).ZG162A40  OK                  00696100
&ZCVAL              SETC '&ZCVAL'(2,K'&ZCVAL-1)                         00696200
                    AIF  (K'&ZCVAL LE 160).ZG162A40A                    00696300
&ZCVAL              SETC '&ZCVAL'(1,160)                                00696400
&ZCVAL              SETC '&ZCVAL....'                                   00696500
.ZG162A40A          ANOP                                                00696600
&ZMS                SETC  '"REQUEST'                                    00696700
&ZMS                SETC  '&ZMS.=&REQUEST"'                             00696800
&ZMS                SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'          00696900
                    MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'          00697000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00697100
.ZG162A40           ANOP  ,                                             00697200
.*----------------------------------------------------------------***   00697300
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00697400
                    AIF   (N'&POOLTOKN LE 1).ZG164A  CK NUM             00697500
&ZMS                SETC  '"POOLTOKN='                                  00697600
&ZMS                SETC  '&ZMS.&POOLTOKN"'                             00697700
&ZMS                SETC  '&ZMS "POOLTOKN"'                             00697800
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00697900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00698000
.ZG164A             ANOP  ,                                             00698100
.*-------------------------------------------------------------------   00698200
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00698300
&ZXPOOLTOKN         SETC  'INPUT'     SET IN/OUTPUT                     00698400
&XPOOLTOKN          SETC  '&POOLTOKN(1)'        SET XVARIABLE           00698500
                    AIF   (N'&POOLTOKN GT 1).ZG164B  MULTI PARMS        00698600
&XPOOLTOKN          SETC  '&POOLTOKN'           SET XVARIABLE           00698700
.ZG164B             AIF   (K'&POOLTOKN(1) GT 0).ZG164C                  00698800
&ZXPOOLTOKN         SETC  ''          RESET IN/OUTPUT                   00698900
&ZMS                SETC  ' '                                           00699000
&ZMS                SETC  '&ZMS "POOLTOKN" KEY AND ITS'                 00699100
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00699200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00699300
.ZG164C             ANOP  ,                                             00699400
.*-------------------------------------------------------------------   00699500
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00699600
                    AIF   (K'&ZXPOOLTOKN LE 0).ZG164R  NOT I/O          00699700
                    AIF   ('&XPOOLTOKN'(1,1) NE '(').ZG164R             00699800
&ZCGPR              SETC  '&XPOOLTOKN'(2,K'&XPOOLTOKN-2)                00699900
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG164P                 00700000
                    AIF   (K'&ZCGPR GT 2).ZG164Q                        00700100
                    AIF   ('&ZCGPR' EQ '0').ZG164Q                      00700200
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00700300
                    AIF   (T'&ZCGPR NE 'N').ZG164Q  INVALID REG NAME    00700400
.ZG164P             ANOP  ,                                             00700500
                    AIF   (T'&ZCGPR NE 'N').ZG164R  NON NUMERIC         00700600
                    AIF   ('&ZCGPR' LT '2').ZG164Q                      00700700
                    AIF   ('&ZCGPR' LE '12').ZG164R                     00700800
.ZG164Q             ANOP  ,                                             00700900
&ZMS                SETC  '"POOLTOKN='                                  00701000
&ZMS                SETC  '&ZMS.&POOLTOKN"'                             00701100
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00701200
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00701300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00701400
.ZG164R             ANOP  ,                                             00701500
.*-------------------------------------------------------------------   00701600
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00701700
.ZG166              ANOP  ,                                             00701800
&ZTLC               SETC 'DUMP_INFO'                                    00701900
                    AIF   ('&REQUEST(1)' NE '&ZTLC').ZG170              00702000
&XREQUEST           SETC  'DUMP_INFO'           SET KEYWORD             00702100
                    AIF   (N'&REQUEST LE 1).ZG166A  CK NUM              00702200
&ZMS                SETC  '"REQUEST='                                   00702300
&ZMS                SETC  '&ZMS.&REQUEST"'                              00702400
&ZMS                SETC  '&ZMS "REQUEST"'                              00702500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00702600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00702700
.ZG166A             ANOP  ,                                             00702800
.*------------------------------------------------------------------    00702900
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00703000
&ZCVAL              SETC ''           CLEAR ERROR KEY ACCUMULATOR       00703100
.ZG166A0            AIF   (K'&BUFLIST LE 0).ZG166A1  OK                 00703200
&ZCVAL              SETC '&ZCVAL BUFLIST'       INCORRECT KEY USED      00703300
.ZG166A1            AIF   (K'&BUFLST64 LE 0).ZG166A2  OK                00703400
&ZCVAL              SETC '&ZCVAL BUFLST64'      INCORRECT KEY USED      00703500
.ZG166A2            AIF   (K'&BUFNUM LE 0).ZG166A3  OK                  00703600
&ZCVAL              SETC '&ZCVAL BUFNUM'        INCORRECT KEY USED      00703700
.ZG166A3            AIF   (K'&BUFTYPE LE 0).ZG166A4  OK                 00703800
&ZCVAL              SETC '&ZCVAL BUFTYPE'       INCORRECT KEY USED      00703900
.ZG166A4            AIF   (K'&CSMUSER LE 0).ZG166A5  OK                 00704000
&ZCVAL              SETC '&ZCVAL CSMUSER'       INCORRECT KEY USED      00704100
.ZG166A5            AIF   (K'&GAP LE 0).ZG166A6  OK                     00704200
&ZCVAL              SETC '&ZCVAL GAP'           INCORRECT KEY USED      00704300
.ZG166A6            AIF   (K'&ERRBFLST LE 0).ZG166A7  OK                00704400
&ZCVAL              SETC '&ZCVAL ERRBFLST'      INCORRECT KEY USED      00704500
.ZG166A7            AIF   (K'&OWNERID LE 0).ZG166A8  OK                 00704600
&ZCVAL              SETC '&ZCVAL OWNERID'       INCORRECT KEY USED      00704700
.ZG166A8            AIF   (K'&COMPID LE 0).ZG166A9  OK                  00704800
&ZCVAL              SETC '&ZCVAL COMPID'        INCORRECT KEY USED      00704900
.ZG166A9            AIF   (K'&COMPUSER LE 0).ZG166A10  OK               00705000
&ZCVAL              SETC '&ZCVAL COMPUSER'      INCORRECT KEY USED      00705100
.ZG166A10           AIF   (K'&TASKID LE 0).ZG166A11  OK                 00705200
&ZCVAL              SETC '&ZCVAL TASKID'        INCORRECT KEY USED      00705300
.ZG166A11           AIF   (K'&THREAD LE 0).ZG166A12  OK                 00705400
&ZCVAL              SETC '&ZCVAL THREAD'        INCORRECT KEY USED      00705500
.ZG166A12           AIF   (K'&UTILRTN LE 0).ZG166A13  OK                00705600
&ZCVAL              SETC '&ZCVAL UTILRTN'       INCORRECT KEY USED      00705700
.ZG166A13           AIF   (K'&SKIPBUF LE 0).ZG166A14  OK                00705800
&ZCVAL              SETC '&ZCVAL SKIPBUF'       INCORRECT KEY USED      00705900
.ZG166A14           AIF   (K'&PAD LE 0).ZG166A15  OK                    00706000
&ZCVAL              SETC '&ZCVAL PAD'           INCORRECT KEY USED      00706100
.ZG166A15           AIF   (K'&PADCHAR LE 0).ZG166A16  OK                00706200
&ZCVAL              SETC '&ZCVAL PADCHAR'       INCORRECT KEY USED      00706300
.ZG166A16           AIF   (K'&SRCERRL LE 0).ZG166A17  OK                00706400
&ZCVAL              SETC '&ZCVAL SRCERRL'       INCORRECT KEY USED      00706500
.ZG166A17           AIF   (K'&SRCGAP LE 0).ZG166A18  OK                 00706600
&ZCVAL              SETC '&ZCVAL SRCGAP'        INCORRECT KEY USED      00706700
.ZG166A18           AIF   (K'&SRCLIST LE 0).ZG166A19  OK                00706800
&ZCVAL              SETC '&ZCVAL SRCLIST'       INCORRECT KEY USED      00706900
.ZG166A19           AIF   (K'&SRCLST64 LE 0).ZG166A20  OK               00707000
&ZCVAL              SETC '&ZCVAL SRCLST64'      INCORRECT KEY USED      00707100
.ZG166A20           AIF   (K'&SRCNUM LE 0).ZG166A21  OK                 00707200
&ZCVAL              SETC '&ZCVAL SRCNUM'        INCORRECT KEY USED      00707300
.ZG166A21           AIF   (K'&TARGERRL LE 0).ZG166A22  OK               00707400
&ZCVAL              SETC '&ZCVAL TARGERRL'      INCORRECT KEY USED      00707500
.ZG166A22           AIF   (K'&TARGGAP LE 0).ZG166A23  OK                00707600
&ZCVAL              SETC '&ZCVAL TARGGAP'       INCORRECT KEY USED      00707700
.ZG166A23           AIF   (K'&TARGLIST LE 0).ZG166A24  OK               00707800
&ZCVAL              SETC '&ZCVAL TARGLIST'      INCORRECT KEY USED      00707900
.ZG166A24           AIF   (K'&TARLST64 LE 0).ZG166A25  OK               00708000
&ZCVAL              SETC '&ZCVAL TARLST64'      INCORRECT KEY USED      00708100
.ZG166A25           AIF   (K'&TARGNUM LE 0).ZG166A26  OK                00708200
&ZCVAL              SETC '&ZCVAL TARGNUM'       INCORRECT KEY USED      00708300
.ZG166A26           AIF   (K'&BUFSIZE LE 0).ZG166A27  OK                00708400
&ZCVAL              SETC '&ZCVAL BUFSIZE'       INCORRECT KEY USED      00708500
.ZG166A27           AIF   (K'&BUFSOURC LE 0).ZG166A28  OK               00708600
&ZCVAL              SETC '&ZCVAL BUFSOURC'      INCORRECT KEY USED      00708700
.ZG166A28           AIF   (K'&BACK LE 0).ZG166A29  OK                   00708800
&ZCVAL              SETC '&ZCVAL BACK'          INCORRECT KEY USED      00708900
.ZG166A29           AIF   (K'&EXPBUF LE 0).ZG166A30  OK                 00709000
&ZCVAL              SETC '&ZCVAL EXPBUF'        INCORRECT KEY USED      00709100
.ZG166A30           AIF   (K'&INITBUF LE 0).ZG166A31  OK                00709200
&ZCVAL              SETC '&ZCVAL INITBUF'       INCORRECT KEY USED      00709300
.ZG166A31           AIF   (K'&MINFREE LE 0).ZG166A32  OK                00709400
&ZCVAL              SETC '&ZCVAL MINFREE'       INCORRECT KEY USED      00709500
.ZG166A32           AIF   (K'&RETPTOKN LE 0).ZG166A33  OK               00709600
&ZCVAL              SETC '&ZCVAL RETPTOKN'      INCORRECT KEY USED      00709700
.ZG166A33           AIF   (K'&STATAREA LE 0).ZG166A34  OK               00709800
&ZCVAL              SETC '&ZCVAL STATAREA'      INCORRECT KEY USED      00709900
.ZG166A34           AIF   (K'&POOLTOKN LE 0).ZG166A35  OK               00710000
&ZCVAL              SETC '&ZCVAL POOLTOKN'      INCORRECT KEY USED      00710100
.ZG166A35           AIF   (K'&WAIT LE 0).ZG166A36  OK                   00710200
&ZCVAL              SETC '&ZCVAL WAIT'          INCORRECT KEY USED      00710300
.ZG166A36           AIF   (K'&CLEAR LE 0).ZG166A37  OK                  00710400
&ZCVAL              SETC '&ZCVAL CLEAR'         INCORRECT KEY USED      00710500
.ZG166A37           AIF   (K'&FREETO LE 0).ZG166A38  OK                 00710600
&ZCVAL              SETC '&ZCVAL FREETO'        INCORRECT KEY USED      00710700
.ZG166A38           AIF   (K'&FREERTN LE 0).ZG166A39  OK                00710800
&ZCVAL              SETC '&ZCVAL FREERTN'       INCORRECT KEY USED      00710900
.ZG166A39           AIF   (K'&ZCVAL LE 0).ZG166A40  OK                  00711000
&ZCVAL              SETC '&ZCVAL'(2,K'&ZCVAL-1)                         00711100
                    AIF  (K'&ZCVAL LE 160).ZG166A40A                    00711200
&ZCVAL              SETC '&ZCVAL'(1,160)                                00711300
&ZCVAL              SETC '&ZCVAL....'                                   00711400
.ZG166A40A          ANOP                                                00711500
&ZMS                SETC  '"REQUEST'                                    00711600
&ZMS                SETC  '&ZMS.=&REQUEST"'                             00711700
&ZMS                SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'          00711800
                    MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'          00711900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00712000
.ZG166A40           ANOP  ,                                             00712100
.*-------------------------------------------------------------------   00712200
.***AG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START             00712300
                    AIF   ('&XMF' EQ 'M').ZG169  BYPASS IF MF=M         00712400
.*----------------------------------------------------------------***   00712500
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00712600
                    AIF   (N'&DS_INFO LE 1).ZG168A  CK NUM              00712700
&ZMS                SETC  '"DS_INFO='                                   00712800
&ZMS                SETC  '&ZMS.&DS_INFO"'                              00712900
&ZMS                SETC  '&ZMS "DS_INFO"'                              00713000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00713100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00713200
.ZG168A             ANOP  ,                                             00713300
.*-------------------------------------------------------------------   00713400
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00713500
                    AIF   (K'&DS_INFO(1) LE 0).ZG168C  NO PARM          00713600
&ZXDS_INFO          SETC  'OUTPUT'    SET OUTPUT                        00713700
&XDS_INFO           SETC  '&DS_INFO(1)'         SET XVARIABLE           00713800
                    AIF   (N'&DS_INFO GT 1).ZG168C                      00713900
&XDS_INFO           SETC  '&DS_INFO'  SET XVARIABLE                     00714000
.ZG168C             ANOP  ,                                             00714100
.*-------------------------------------------------------------------   00714200
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00714300
                    AIF   (K'&ZXDS_INFO LE 0).ZG168R  NOT I/O           00714400
                    AIF   ('&XDS_INFO'(1,1) NE '(').ZG168R              00714500
&ZCGPR              SETC  '&XDS_INFO'(2,K'&XDS_INFO-2)                  00714600
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG168P                 00714700
                    AIF   (K'&ZCGPR GT 2).ZG168Q                        00714800
                    AIF   ('&ZCGPR' EQ '0').ZG168Q                      00714900
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00715000
                    AIF   (T'&ZCGPR NE 'N').ZG168Q  INVALID REG NAME    00715100
.ZG168P             ANOP  ,                                             00715200
                    AIF   (T'&ZCGPR NE 'N').ZG168R  NON NUMERIC         00715300
                    AIF   ('&ZCGPR' LT '2').ZG168Q                      00715400
                    AIF   ('&ZCGPR' LE '12').ZG168R                     00715500
.ZG168Q             ANOP  ,                                             00715600
&ZMS                SETC  '"DS_INFO='                                   00715700
&ZMS                SETC  '&ZMS.&DS_INFO"'                              00715800
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00715900
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00716000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00716100
.ZG168R             ANOP  ,                                             00716200
.*-------------------------------------------------------------------   00716300
.***AG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END               00716400
.ZG169              ANOP  ,           END OF BYPASS CHECK               00716500
.*-------------------------------------------------------------------   00716600
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00716700
.ZG170              ANOP  ,                                             00716800
&ZTLC               SETC 'FIX_BUFFER'                                   00716900
                    AIF   ('&REQUEST(1)' NE '&ZTLC').ZG201              00717000
&XREQUEST           SETC  'FIX_BUFFER'          SET KEYWORD             00717100
                    AIF   (N'&REQUEST LE 1).ZG170A  CK NUM              00717200
&ZMS                SETC  '"REQUEST='                                   00717300
&ZMS                SETC  '&ZMS.&REQUEST"'                              00717400
&ZMS                SETC  '&ZMS "REQUEST"'                              00717500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00717600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00717700
.ZG170A             ANOP  ,                                             00717800
.*------------------------------------------------------------------    00717900
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00718000
&ZCVAL              SETC ''           CLEAR ERROR KEY ACCUMULATOR       00718100
.ZG170A0            AIF   (K'&BUFTYPE LE 0).ZG170A1  OK                 00718200
&ZCVAL              SETC '&ZCVAL BUFTYPE'       INCORRECT KEY USED      00718300
.ZG170A1            AIF   (K'&CSMUSER LE 0).ZG170A2  OK                 00718400
&ZCVAL              SETC '&ZCVAL CSMUSER'       INCORRECT KEY USED      00718500
.ZG170A2            AIF   (K'&OWNERID LE 0).ZG170A3  OK                 00718600
&ZCVAL              SETC '&ZCVAL OWNERID'       INCORRECT KEY USED      00718700
.ZG170A3            AIF   (K'&TASKID LE 0).ZG170A4  OK                  00718800
&ZCVAL              SETC '&ZCVAL TASKID'        INCORRECT KEY USED      00718900
.ZG170A4            AIF   (K'&SKIPBUF LE 0).ZG170A5  OK                 00719000
&ZCVAL              SETC '&ZCVAL SKIPBUF'       INCORRECT KEY USED      00719100
.ZG170A5            AIF   (K'&PAD LE 0).ZG170A6  OK                     00719200
&ZCVAL              SETC '&ZCVAL PAD'           INCORRECT KEY USED      00719300
.ZG170A6            AIF   (K'&PADCHAR LE 0).ZG170A7  OK                 00719400
&ZCVAL              SETC '&ZCVAL PADCHAR'       INCORRECT KEY USED      00719500
.ZG170A7            AIF   (K'&SRCERRL LE 0).ZG170A8  OK                 00719600
&ZCVAL              SETC '&ZCVAL SRCERRL'       INCORRECT KEY USED      00719700
.ZG170A8            AIF   (K'&SRCGAP LE 0).ZG170A9  OK                  00719800
&ZCVAL              SETC '&ZCVAL SRCGAP'        INCORRECT KEY USED      00719900
.ZG170A9            AIF   (K'&SRCLIST LE 0).ZG170A10  OK                00720000
&ZCVAL              SETC '&ZCVAL SRCLIST'       INCORRECT KEY USED      00720100
.ZG170A10           AIF   (K'&SRCLST64 LE 0).ZG170A11  OK               00720200
&ZCVAL              SETC '&ZCVAL SRCLST64'      INCORRECT KEY USED      00720300
.ZG170A11           AIF   (K'&SRCNUM LE 0).ZG170A12  OK                 00720400
&ZCVAL              SETC '&ZCVAL SRCNUM'        INCORRECT KEY USED      00720500
.ZG170A12           AIF   (K'&TARGERRL LE 0).ZG170A13  OK               00720600
&ZCVAL              SETC '&ZCVAL TARGERRL'      INCORRECT KEY USED      00720700
.ZG170A13           AIF   (K'&TARGGAP LE 0).ZG170A14  OK                00720800
&ZCVAL              SETC '&ZCVAL TARGGAP'       INCORRECT KEY USED      00720900
.ZG170A14           AIF   (K'&TARGLIST LE 0).ZG170A15  OK               00721000
&ZCVAL              SETC '&ZCVAL TARGLIST'      INCORRECT KEY USED      00721100
.ZG170A15           AIF   (K'&TARLST64 LE 0).ZG170A16  OK               00721200
&ZCVAL              SETC '&ZCVAL TARLST64'      INCORRECT KEY USED      00721300
.ZG170A16           AIF   (K'&TARGNUM LE 0).ZG170A17  OK                00721400
&ZCVAL              SETC '&ZCVAL TARGNUM'       INCORRECT KEY USED      00721500
.ZG170A17           AIF   (K'&BUFSIZE LE 0).ZG170A18  OK                00721600
&ZCVAL              SETC '&ZCVAL BUFSIZE'       INCORRECT KEY USED      00721700
.ZG170A18           AIF   (K'&BUFSOURC LE 0).ZG170A19  OK               00721800
&ZCVAL              SETC '&ZCVAL BUFSOURC'      INCORRECT KEY USED      00721900
.ZG170A19           AIF   (K'&BACK LE 0).ZG170A20  OK                   00722000
&ZCVAL              SETC '&ZCVAL BACK'          INCORRECT KEY USED      00722100
.ZG170A20           AIF   (K'&DS_INFO LE 0).ZG170A21  OK                00722200
&ZCVAL              SETC '&ZCVAL DS_INFO'       INCORRECT KEY USED      00722300
.ZG170A21           AIF   (K'&EXPBUF LE 0).ZG170A22  OK                 00722400
&ZCVAL              SETC '&ZCVAL EXPBUF'        INCORRECT KEY USED      00722500
.ZG170A22           AIF   (K'&INITBUF LE 0).ZG170A23  OK                00722600
&ZCVAL              SETC '&ZCVAL INITBUF'       INCORRECT KEY USED      00722700
.ZG170A23           AIF   (K'&MINFREE LE 0).ZG170A24  OK                00722800
&ZCVAL              SETC '&ZCVAL MINFREE'       INCORRECT KEY USED      00722900
.ZG170A24           AIF   (K'&RETPTOKN LE 0).ZG170A25  OK               00723000
&ZCVAL              SETC '&ZCVAL RETPTOKN'      INCORRECT KEY USED      00723100
.ZG170A25           AIF   (K'&STATAREA LE 0).ZG170A26  OK               00723200
&ZCVAL              SETC '&ZCVAL STATAREA'      INCORRECT KEY USED      00723300
.ZG170A26           AIF   (K'&POOLTOKN LE 0).ZG170A27  OK               00723400
&ZCVAL              SETC '&ZCVAL POOLTOKN'      INCORRECT KEY USED      00723500
.ZG170A27           AIF   (K'&CLEAR LE 0).ZG170A28  OK                  00723600
&ZCVAL              SETC '&ZCVAL CLEAR'         INCORRECT KEY USED      00723700
.ZG170A28           AIF   (K'&FREETO LE 0).ZG170A29  OK                 00723800
&ZCVAL              SETC '&ZCVAL FREETO'        INCORRECT KEY USED      00723900
.ZG170A29           AIF   (K'&FREERTN LE 0).ZG170A30  OK                00724000
&ZCVAL              SETC '&ZCVAL FREERTN'       INCORRECT KEY USED      00724100
.ZG170A30           AIF   (K'&ZCVAL LE 0).ZG170A31  OK                  00724200
&ZCVAL              SETC '&ZCVAL'(2,K'&ZCVAL-1)                         00724300
                    AIF  (K'&ZCVAL LE 160).ZG170A31A                    00724400
&ZCVAL              SETC '&ZCVAL'(1,160)                                00724500
&ZCVAL              SETC '&ZCVAL....'                                   00724600
.ZG170A31A          ANOP                                                00724700
&ZMS                SETC  '"REQUEST'                                    00724800
&ZMS                SETC  '&ZMS.=&REQUEST"'                             00724900
&ZMS                SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'          00725000
                    MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'          00725100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00725200
.ZG170A31           ANOP  ,                                             00725300
.*----------------------------------------------------------------***   00725400
.***AG.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00725500
&XDUMMY5            SETC  ''          INITIALIZE XVARIABLE              00725600
                    AIF   (K'&BUFLIST LE 0).ZG172C                      00725700
&ZXDUMMY5           SETC  'INPUT'     SET IN/OUTPUT                     00725800
&XDUMMY5            SETC  'BUFLIST'   SET XVARIABLE                     00725900
&ZXBUFLIST          SETC  'INPUT'     SET IN/OUTPUT                     00726000
&XBUFLIST           SETC  '&BUFLIST(1)'         SET XVARIABLE PARM      00726100
                    AIF   (N'&BUFLIST GT 1).ZG172A                      00726200
&XBUFLIST           SETC  '&BUFLIST'  SET XVARIABLE PARM                00726300
.ZG172A             AIF   (N'&BUFLIST LE 1).ZG172B  CK NUM              00726400
&ZMS                SETC  '"BUFLIST='                                   00726500
&ZMS                SETC  '&ZMS.&BUFLIST"'                              00726600
&ZMS                SETC  '&ZMS "BUFLIST"'                              00726700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00726800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00726900
.ZG172B             AIF   (K'&XBUFLIST GT 0).ZG172C  ONE PARM           00727000
&ZXDUMMY5           SETC  ''          RESET IN/OUTPUT                   00727100
&ZXBUFLIST          SETC  ''          RESET IN/OUTPUT                   00727200
&ZMS                SETC  ' '                                           00727300
&ZMS                SETC  '&ZMS "BUFLIST" KEY AND ITS'                  00727400
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00727500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00727600
.ZG172C             ANOP  ,                                             00727700
.*----------------------------------------------------------------***   00727800
.***AG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00727900
                    AIF   (K'&BUFLST64 LE 0).ZG173D  NO ME KEY          00728000
                    AIF   (N'&BUFLST64 LE 1).ZG173A  CK NUM             00728100
&ZMS                SETC  '"BUFLST64='                                  00728200
&ZMS                SETC  '&ZMS.&BUFLST64"'                             00728300
&ZMS                SETC  '&ZMS "BUFLST64"'                             00728400
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00728500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00728600
.ZG173A             AIF   (K'&XDUMMY5 LE 0).ZG173B                      00728700
&ZMS                SETC  '"BUFLST64'                                   00728800
&ZMS                SETC  '&ZMS.=&BUFLST64"'                            00728900
&ZMS                SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'         00729000
&ZMS                SETC  '&ZMS "&XDUMMY5"'                             00729100
                    MNOTE 8,' &ZMS KEY.'                                00729200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00729300
                    AGO   .ZG173D                                       00729400
.*                                                                      00729500
.ZG173B             ANOP  ,                                             00729600
&ZXDUMMY5           SETC  'INPUT'     SET IN/OUTPUT                     00729700
&XDUMMY5            SETC  'BUFLST64'  SET XVARIABLE                     00729800
&ZXBUFLST64         SETC  'INPUT'     SET IN/OUTPUT                     00729900
&XBUFLST64          SETC  '&BUFLST64(1)'        SET XVARIABLE PARM      00730000
                    AIF   (N'&BUFLST64 GT 1).ZG173C                     00730100
&XBUFLST64          SETC  '&BUFLST64'           SET XVARIABLE PARM      00730200
.ZG173C             AIF   (K'&XBUFLST64 GT 0).ZG173D  ONE PARM          00730300
&ZXDUMMY5           SETC  ''          RESET IN/OUTPUT                   00730400
&ZXBUFLST64         SETC  ''          RESET IN/OUTPUT                   00730500
&ZMS                SETC  ' '                                           00730600
&ZMS                SETC  '&ZMS "BUFLST64" KEY AND ITS'                 00730700
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00730800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00730900
.ZG173D             ANOP  ,                                             00731000
.*------------------------------------------------------------------    00731100
.***AG.KME4Y09 NAME, RQD INPUT, ME KEYS -CHECK IF KEY ENTERED           00731200
                    AIF   (K'&XDUMMY5 GT 0).ZG174B                      00731300
&ZXDUMMY5           SETC  ''          RESET IN/OUTPUT                   00731400
&ZXBUFLIST          SETC  ''          RESET IN/OUTPUT                   00731500
&XDUMMY5            SETC  ''          ENSURE NULL                       00731600
&XBUFLIST           SETC  ''          ENSURE NULL                       00731700
&ZMS                SETC  'ONE OF THE FOLLOWING'                        00731800
&ZMS                SETC  '&ZMS MUTUALLY EXCLUSIVE KEY(S) IS'           00731900
&ZMS                SETC  '&ZMS REQUIRED:'                              00732000
&ZMS                SETC  '&ZMS "BUFLIST"'      VALID ME KEY            00732100
&ZMS                SETC  '&ZMS OR "BUFLST64".'  VALID ME KEY           00732200
                    MNOTE 8,' &ZMS '                                    00732300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00732400
.ZG174B             ANOP  ,                                             00732500
.*-------------------------------------------------------------------   00732600
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00732700
.ZG172ZY  AIF    ('&XDUMMY5' NE 'BUFLIST').ZG173ZY                      00732800
.*-------------------------------------------------------------------   00732900
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00733000
                    AIF   (K'&ZXBUFLIST LE 0).ZG172R  NOT I/O           00733100
                    AIF   ('&XBUFLIST'(1,1) NE '(').ZG172R              00733200
&ZCGPR              SETC  '&XBUFLIST'(2,K'&XBUFLIST-2)                  00733300
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG172P                 00733400
                    AIF   (K'&ZCGPR GT 2).ZG172Q                        00733500
                    AIF   ('&ZCGPR' EQ '0').ZG172Q                      00733600
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00733700
                    AIF   (T'&ZCGPR NE 'N').ZG172Q  INVALID REG NAME    00733800
.ZG172P             ANOP  ,                                             00733900
                    AIF   (T'&ZCGPR NE 'N').ZG172R  NON NUMERIC         00734000
                    AIF   ('&ZCGPR' LT '2').ZG172Q                      00734100
                    AIF   ('&ZCGPR' LE '12').ZG172R                     00734200
.ZG172Q             ANOP  ,                                             00734300
&ZMS                SETC  '"BUFLIST='                                   00734400
&ZMS                SETC  '&ZMS.&BUFLIST"'                              00734500
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00734600
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00734700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00734800
.ZG172R             ANOP  ,                                             00734900
.*-------------------------------------------------------------------   00735000
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00735100
.ZG173ZY  AIF    ('&XDUMMY5' NE 'BUFLST64').ZG174ZY                     00735200
.*-------------------------------------------------------------------   00735300
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00735400
                    AIF   (K'&ZXBUFLST64 LE 0).ZG173R  NOT I/O          00735500
                    AIF   ('&XBUFLST64'(1,1) NE '(').ZG173R             00735600
&ZCGPR              SETC  '&XBUFLST64'(2,K'&XBUFLST64-2)                00735700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG173P                 00735800
                    AIF   (K'&ZCGPR GT 2).ZG173Q                        00735900
                    AIF   ('&ZCGPR' EQ '0').ZG173Q                      00736000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00736100
                    AIF   (T'&ZCGPR NE 'N').ZG173Q  INVALID REG NAME    00736200
.ZG173P             ANOP  ,                                             00736300
                    AIF   (T'&ZCGPR NE 'N').ZG173R  NON NUMERIC         00736400
                    AIF   ('&ZCGPR' LT '2').ZG173Q                      00736500
                    AIF   ('&ZCGPR' LE '12').ZG173R                     00736600
.ZG173Q             ANOP  ,                                             00736700
&ZMS                SETC  '"BUFLST64='                                  00736800
&ZMS                SETC  '&ZMS.&BUFLST64"'                             00736900
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00737000
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00737100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00737200
.ZG173R             ANOP  ,                                             00737300
.*-------------------------------------------------------------------   00737400
.***AG.KMEKY15 NAME, RQD INPUT, ME KEYS -END                            00737500
.ZG174ZY            ANOP ,            END MUTUALLY EXCLUSIVE KEYS       00737600
.*----------------------------------------------------------------***   00737700
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00737800
                    AIF   (N'&BUFNUM LE 1).ZG176A  CK NUM               00737900
&ZMS                SETC  '"BUFNUM='                                    00738000
&ZMS                SETC  '&ZMS.&BUFNUM"'                               00738100
&ZMS                SETC  '&ZMS "BUFNUM"'                               00738200
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00738300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00738400
.ZG176A             ANOP  ,                                             00738500
.*-------------------------------------------------------------------   00738600
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00738700
&ZXBUFNUM           SETC  'INPUT'     SET IN/OUTPUT                     00738800
&XBUFNUM            SETC  '&BUFNUM(1)'          SET XVARIABLE           00738900
                    AIF   (N'&BUFNUM GT 1).ZG176B  MULTI PARMS          00739000
&XBUFNUM            SETC  '&BUFNUM'   SET XVARIABLE                     00739100
.ZG176B             AIF   (K'&BUFNUM(1) GT 0).ZG176C                    00739200
&ZXBUFNUM           SETC  ''          RESET IN/OUTPUT                   00739300
&ZMS                SETC  ' '                                           00739400
&ZMS                SETC  '&ZMS "BUFNUM" KEY AND ITS'                   00739500
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00739600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00739700
.ZG176C             ANOP  ,                                             00739800
.*-------------------------------------------------------------------   00739900
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00740000
                    AIF   (K'&ZXBUFNUM LE 0).ZG176R  NOT I/O            00740100
                    AIF   ('&XBUFNUM'(1,1) NE '(').ZG176R               00740200
&ZCGPR              SETC  '&XBUFNUM'(2,K'&XBUFNUM-2)                    00740300
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG176P                 00740400
                    AIF   (K'&ZCGPR GT 2).ZG176Q                        00740500
                    AIF   ('&ZCGPR' EQ '0').ZG176Q                      00740600
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00740700
                    AIF   (T'&ZCGPR NE 'N').ZG176Q  INVALID REG NAME    00740800
.ZG176P             ANOP  ,                                             00740900
                    AIF   (T'&ZCGPR NE 'N').ZG176R  NON NUMERIC         00741000
                    AIF   ('&ZCGPR' LT '2').ZG176Q                      00741100
                    AIF   ('&ZCGPR' LE '12').ZG176R                     00741200
.ZG176Q             ANOP  ,                                             00741300
&ZMS                SETC  '"BUFNUM='                                    00741400
&ZMS                SETC  '&ZMS.&BUFNUM"'                               00741500
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00741600
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00741700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00741800
.ZG176R             ANOP  ,                                             00741900
.*-------------------------------------------------------------------   00742000
.***AG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START             00742100
                    AIF   ('&XMF' EQ 'M').ZG180  BYPASS IF MF=M         00742200
.*----------------------------------------------------------------***   00742300
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00742400
                    AIF   (N'&ERRBFLST LE 1).ZG179A  CK NUM             00742500
&ZMS                SETC  '"ERRBFLST='                                  00742600
&ZMS                SETC  '&ZMS.&ERRBFLST"'                             00742700
&ZMS                SETC  '&ZMS "ERRBFLST"'                             00742800
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00742900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00743000
.ZG179A             ANOP  ,                                             00743100
.*-------------------------------------------------------------------   00743200
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00743300
                    AIF   (K'&ERRBFLST(1) LE 0).ZG179C  NO PARM         00743400
&ZXERRBFLST         SETC  'OUTPUT'    SET OUTPUT                        00743500
&XERRBFLST          SETC  '&ERRBFLST(1)'        SET XVARIABLE           00743600
                    AIF   (N'&ERRBFLST GT 1).ZG179C                     00743700
&XERRBFLST          SETC  '&ERRBFLST'           SET XVARIABLE           00743800
.ZG179C             ANOP  ,                                             00743900
.*-------------------------------------------------------------------   00744000
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00744100
                    AIF   (K'&ZXERRBFLST LE 0).ZG179R  NOT I/O          00744200
                    AIF   ('&XERRBFLST'(1,1) NE '(').ZG179R             00744300
&ZCGPR              SETC  '&XERRBFLST'(2,K'&XERRBFLST-2)                00744400
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG179P                 00744500
                    AIF   (K'&ZCGPR GT 2).ZG179Q                        00744600
                    AIF   ('&ZCGPR' EQ '0').ZG179Q                      00744700
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00744800
                    AIF   (T'&ZCGPR NE 'N').ZG179Q  INVALID REG NAME    00744900
.ZG179P             ANOP  ,                                             00745000
                    AIF   (T'&ZCGPR NE 'N').ZG179R  NON NUMERIC         00745100
                    AIF   ('&ZCGPR' LT '2').ZG179Q                      00745200
                    AIF   ('&ZCGPR' LE '12').ZG179R                     00745300
.ZG179Q             ANOP  ,                                             00745400
&ZMS                SETC  '"ERRBFLST='                                  00745500
&ZMS                SETC  '&ZMS.&ERRBFLST"'                             00745600
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00745700
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00745800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00745900
.ZG179R             ANOP  ,                                             00746000
.*-------------------------------------------------------------------   00746100
.***AG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END               00746200
.ZG180              ANOP  ,           END OF BYPASS CHECK               00746300
.*----------------------------------------------------------------***   00746400
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00746500
                    AIF   (N'&GAP LE 1).ZG182A  CK NUM                  00746600
&ZMS                SETC  '"GAP='                                       00746700
&ZMS                SETC  '&ZMS.&GAP"'                                  00746800
&ZMS                SETC  '&ZMS "GAP"'                                  00746900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00747000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00747100
.ZG182A             ANOP  ,                                             00747200
.*-------------------------------------------------------------------   00747300
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00747400
&ZXGAP              SETC  'INPUT'     SET IN/OUTPUT                     00747500
&XGAP               SETC  '0'                                           00747600
                    AIF   (K'&GAP(1) LE 0).ZG182B  PARM                 00747700
&XGAP               SETC  '&GAP(1)'   SET XVARIABLE                     00747800
                    AIF   (N'&GAP GT 1).ZG182B  MULTI                   00747900
&XGAP               SETC  '&GAP'      SET XVARIABLE                     00748000
.ZG182B             ANOP  ,                                             00748100
.*-------------------------------------------------------------------   00748200
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00748300
                    AIF   (K'&ZXGAP LE 0).ZG182R  NOT I/O               00748400
         AIF   ('&XGAP' EQ '0').ZG182R                                  00748500
                    AIF   ('&XGAP'(1,1) NE '(').ZG182R                  00748600
&ZCGPR              SETC  '&XGAP'(2,K'&XGAP-2)                          00748700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG182P                 00748800
                    AIF   (K'&ZCGPR GT 2).ZG182Q                        00748900
                    AIF   ('&ZCGPR' EQ '0').ZG182Q                      00749000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00749100
                    AIF   (T'&ZCGPR NE 'N').ZG182Q  INVALID REG NAME    00749200
.ZG182P             ANOP  ,                                             00749300
                    AIF   (T'&ZCGPR NE 'N').ZG182R  NON NUMERIC         00749400
                    AIF   ('&ZCGPR' LT '2').ZG182Q                      00749500
                    AIF   ('&ZCGPR' LE '12').ZG182R                     00749600
.ZG182Q             ANOP  ,                                             00749700
&ZMS                SETC  '"GAP='                                       00749800
&ZMS                SETC  '&ZMS.&GAP"'                                  00749900
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00750000
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00750100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00750200
.ZG182R             ANOP  ,                                             00750300
.*----------------------------------------------------------------***   00750400
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00750500
                    AIF   (N'&COMPID LE 1).ZG185A  CK NUM               00750600
&ZMS                SETC  '"COMPID='                                    00750700
&ZMS                SETC  '&ZMS.&COMPID"'                               00750800
&ZMS                SETC  '&ZMS "COMPID"'                               00750900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00751000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00751100
.ZG185A             ANOP  ,                                             00751200
.*-------------------------------------------------------------------   00751300
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00751400
&ZXCOMPID           SETC  'INPUT'     SET IN/OUTPUT                     00751500
&XCOMPID            SETC  '0'                                           00751600
                    AIF   (K'&COMPID(1) LE 0).ZG185B  PARM              00751700
&XCOMPID            SETC  '&COMPID(1)'          SET XVARIABLE           00751800
                    AIF   (N'&COMPID GT 1).ZG185B  MULTI                00751900
&XCOMPID            SETC  '&COMPID'   SET XVARIABLE                     00752000
.ZG185B             ANOP  ,                                             00752100
.*-------------------------------------------------------------------   00752200
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00752300
                    AIF   (K'&ZXCOMPID LE 0).ZG185R  NOT I/O            00752400
         AIF   ('&XCOMPID' EQ '0').ZG185R                               00752500
                    AIF   ('&XCOMPID'(1,1) NE '(').ZG185R               00752600
&ZCGPR              SETC  '&XCOMPID'(2,K'&XCOMPID-2)                    00752700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG185P                 00752800
                    AIF   (K'&ZCGPR GT 2).ZG185Q                        00752900
                    AIF   ('&ZCGPR' EQ '0').ZG185Q                      00753000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00753100
                    AIF   (T'&ZCGPR NE 'N').ZG185Q  INVALID REG NAME    00753200
.ZG185P             ANOP  ,                                             00753300
                    AIF   (T'&ZCGPR NE 'N').ZG185R  NON NUMERIC         00753400
                    AIF   ('&ZCGPR' LT '2').ZG185Q                      00753500
                    AIF   ('&ZCGPR' LE '12').ZG185R                     00753600
.ZG185Q             ANOP  ,                                             00753700
&ZMS                SETC  '"COMPID='                                    00753800
&ZMS                SETC  '&ZMS.&COMPID"'                               00753900
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00754000
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00754100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00754200
.ZG185R             ANOP  ,                                             00754300
.*----------------------------------------------------------------***   00754400
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00754500
                    AIF   (N'&COMPUSER LE 1).ZG188A  CK NUM             00754600
&ZMS                SETC  '"COMPUSER='                                  00754700
&ZMS                SETC  '&ZMS.&COMPUSER"'                             00754800
&ZMS                SETC  '&ZMS "COMPUSER"'                             00754900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00755000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00755100
.ZG188A             ANOP  ,                                             00755200
.*-------------------------------------------------------------------   00755300
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00755400
&ZXCOMPUSER         SETC  'INPUT'     SET IN/OUTPUT                     00755500
&XCOMPUSER          SETC  '0'                                           00755600
                    AIF   (K'&COMPUSER(1) LE 0).ZG188B  PARM            00755700
&XCOMPUSER          SETC  '&COMPUSER(1)'        SET XVARIABLE           00755800
                    AIF   (N'&COMPUSER GT 1).ZG188B  MULTI              00755900
&XCOMPUSER          SETC  '&COMPUSER'           SET XVARIABLE           00756000
.ZG188B             ANOP  ,                                             00756100
.*-------------------------------------------------------------------   00756200
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00756300
                    AIF   (K'&ZXCOMPUSER LE 0).ZG188R  NOT I/O          00756400
         AIF   ('&XCOMPUSER' EQ '0').ZG188R                             00756500
                    AIF   ('&XCOMPUSER'(1,1) NE '(').ZG188R             00756600
&ZCGPR              SETC  '&XCOMPUSER'(2,K'&XCOMPUSER-2)                00756700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG188P                 00756800
                    AIF   (K'&ZCGPR GT 2).ZG188Q                        00756900
                    AIF   ('&ZCGPR' EQ '0').ZG188Q                      00757000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00757100
                    AIF   (T'&ZCGPR NE 'N').ZG188Q  INVALID REG NAME    00757200
.ZG188P             ANOP  ,                                             00757300
                    AIF   (T'&ZCGPR NE 'N').ZG188R  NON NUMERIC         00757400
                    AIF   ('&ZCGPR' LT '2').ZG188Q                      00757500
                    AIF   ('&ZCGPR' LE '12').ZG188R                     00757600
.ZG188Q             ANOP  ,                                             00757700
&ZMS                SETC  '"COMPUSER='                                  00757800
&ZMS                SETC  '&ZMS.&COMPUSER"'                             00757900
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00758000
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00758100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00758200
.ZG188R             ANOP  ,                                             00758300
.*----------------------------------------------------------------***   00758400
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00758500
                    AIF   (N'&THREAD LE 1).ZG191A  CK NUM               00758600
&ZMS                SETC  '"THREAD='                                    00758700
&ZMS                SETC  '&ZMS.&THREAD"'                               00758800
&ZMS                SETC  '&ZMS "THREAD"'                               00758900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00759000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00759100
.ZG191A             ANOP  ,                                             00759200
.*-------------------------------------------------------------------   00759300
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00759400
&ZXTHREAD           SETC  'INPUT'     SET IN/OUTPUT                     00759500
&XTHREAD            SETC  '0'                                           00759600
                    AIF   (K'&THREAD(1) LE 0).ZG191B  PARM              00759700
&XTHREAD            SETC  '&THREAD(1)'          SET XVARIABLE           00759800
                    AIF   (N'&THREAD GT 1).ZG191B  MULTI                00759900
&XTHREAD            SETC  '&THREAD'   SET XVARIABLE                     00760000
.ZG191B             ANOP  ,                                             00760100
.*-------------------------------------------------------------------   00760200
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00760300
                    AIF   (K'&ZXTHREAD LE 0).ZG191R  NOT I/O            00760400
         AIF   ('&XTHREAD' EQ '0').ZG191R                               00760500
                    AIF   ('&XTHREAD'(1,1) NE '(').ZG191R               00760600
&ZCGPR              SETC  '&XTHREAD'(2,K'&XTHREAD-2)                    00760700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG191P                 00760800
                    AIF   (K'&ZCGPR GT 2).ZG191Q                        00760900
                    AIF   ('&ZCGPR' EQ '0').ZG191Q                      00761000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00761100
                    AIF   (T'&ZCGPR NE 'N').ZG191Q  INVALID REG NAME    00761200
.ZG191P             ANOP  ,                                             00761300
                    AIF   (T'&ZCGPR NE 'N').ZG191R  NON NUMERIC         00761400
                    AIF   ('&ZCGPR' LT '2').ZG191Q                      00761500
                    AIF   ('&ZCGPR' LE '12').ZG191R                     00761600
.ZG191Q             ANOP  ,                                             00761700
&ZMS                SETC  '"THREAD='                                    00761800
&ZMS                SETC  '&ZMS.&THREAD"'                               00761900
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00762000
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00762100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00762200
.ZG191R             ANOP  ,                                             00762300
.*----------------------------------------------------------------***   00762400
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00762500
                    AIF   (N'&UTILRTN LE 1).ZG194A  CK NUM              00762600
&ZMS                SETC  '"UTILRTN='                                   00762700
&ZMS                SETC  '&ZMS.&UTILRTN"'                              00762800
&ZMS                SETC  '&ZMS "UTILRTN"'                              00762900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00763000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00763100
.ZG194A             ANOP  ,                                             00763200
.*-------------------------------------------------------------------   00763300
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00763400
&ZXUTILRTN          SETC  'INPUT'     SET IN/OUTPUT                     00763500
&XUTILRTN           SETC  '0'                                           00763600
                    AIF   (K'&UTILRTN(1) LE 0).ZG194B  PARM             00763700
&XUTILRTN           SETC  '&UTILRTN(1)'         SET XVARIABLE           00763800
                    AIF   (N'&UTILRTN GT 1).ZG194B  MULTI               00763900
&XUTILRTN           SETC  '&UTILRTN'  SET XVARIABLE                     00764000
.ZG194B             ANOP  ,                                             00764100
.*-------------------------------------------------------------------   00764200
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00764300
                    AIF   (K'&ZXUTILRTN LE 0).ZG194R  NOT I/O           00764400
         AIF   ('&XUTILRTN' EQ '0').ZG194R                              00764500
                    AIF   ('&XUTILRTN'(1,1) NE '(').ZG194R              00764600
&ZCGPR              SETC  '&XUTILRTN'(2,K'&XUTILRTN-2)                  00764700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG194P                 00764800
                    AIF   (K'&ZCGPR GT 2).ZG194Q                        00764900
                    AIF   ('&ZCGPR' EQ '0').ZG194Q                      00765000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00765100
                    AIF   (T'&ZCGPR NE 'N').ZG194Q  INVALID REG NAME    00765200
.ZG194P             ANOP  ,                                             00765300
                    AIF   (T'&ZCGPR NE 'N').ZG194R  NON NUMERIC         00765400
                    AIF   ('&ZCGPR' LT '2').ZG194Q                      00765500
                    AIF   ('&ZCGPR' LE '12').ZG194R                     00765600
.ZG194Q             ANOP  ,                                             00765700
&ZMS                SETC  '"UTILRTN='                                   00765800
&ZMS                SETC  '&ZMS.&UTILRTN"'                              00765900
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00766000
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00766100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00766200
.ZG194R             ANOP  ,                                             00766300
.*----------------------------------------------------------------***   00766400
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00766500
                    AIF   (N'&WAIT LE 1).ZG197A  CK NUM                 00766600
&ZMS                SETC  '"WAIT='                                      00766700
&ZMS                SETC  '&ZMS.&WAIT"'                                 00766800
&ZMS                SETC  '&ZMS "WAIT"'                                 00766900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00767000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00767100
.ZG197A             ANOP  ,                                             00767200
.*-------------------------------------------------------------------   00767300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00767400
&XWAIT              SETC  ''          INITIALIZE XVARIABLE              00767500
.ZG198A   AIF   ('&WAIT(1)' NE 'NO').ZG199A                             00767600
&XWAIT              SETC  'NO'        SET KEYWORD                       00767700
.*-------------------------------------------------------------------   00767800
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00767900
.ZG199A   AIF   ('&WAIT(1)' NE 'YES').ZG200A                            00768000
&XWAIT              SETC  'YES'       SET KEYWORD                       00768100
.*-------------------------------------------------------------------   00768200
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00768300
.ZG200A             AIF   (K'&XWAIT GT 0).ZG200C  KEYWORD               00768400
                    AIF   (K'&WAIT(1) LE 0).ZG200B                      00768500
&ZMS                SETC  '"WAIT='                                      00768600
&ZMS                SETC  '&ZMS.&WAIT"'                                 00768700
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     00768800
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           00768900
&ZMS                SETC  '&ZMS "NO"'                                   00769000
&ZMS                SETC  '&ZMS OR "YES".'                              00769100
                    MNOTE 8,' &ZMS '                                    00769200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00769300
.ZG200B             ANOP  ,                                             00769400
&XWAIT              SETC  'NO'        SET DEFAULT KEYWORD               00769500
.ZG200C             ANOP  ,                                             00769600
&ZXWAIT             SETC  'INPUT'     SET IN/OUTPUT                     00769700
.*-------------------------------------------------------------------   00769800
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00769900
.ZG201              ANOP  ,                                             00770000
&ZTLC               SETC 'FREE_BUFFER'                                  00770100
                    AIF   ('&REQUEST(1)' NE '&ZTLC').ZG242              00770200
&XREQUEST           SETC  'FREE_BUFFER'         SET KEYWORD             00770300
                    AIF   (N'&REQUEST LE 1).ZG201A  CK NUM              00770400
&ZMS                SETC  '"REQUEST='                                   00770500
&ZMS                SETC  '&ZMS.&REQUEST"'                              00770600
&ZMS                SETC  '&ZMS "REQUEST"'                              00770700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00770800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00770900
.ZG201A             ANOP  ,                                             00771000
.*------------------------------------------------------------------    00771100
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00771200
&ZCVAL              SETC ''           CLEAR ERROR KEY ACCUMULATOR       00771300
.ZG201A0            AIF   (K'&BUFTYPE LE 0).ZG201A1  OK                 00771400
&ZCVAL              SETC '&ZCVAL BUFTYPE'       INCORRECT KEY USED      00771500
.ZG201A1            AIF   (K'&CSMUSER LE 0).ZG201A2  OK                 00771600
&ZCVAL              SETC '&ZCVAL CSMUSER'       INCORRECT KEY USED      00771700
.ZG201A2            AIF   (K'&OWNERID LE 0).ZG201A3  OK                 00771800
&ZCVAL              SETC '&ZCVAL OWNERID'       INCORRECT KEY USED      00771900
.ZG201A3            AIF   (K'&TASKID LE 0).ZG201A4  OK                  00772000
&ZCVAL              SETC '&ZCVAL TASKID'        INCORRECT KEY USED      00772100
.ZG201A4            AIF   (K'&PAD LE 0).ZG201A5  OK                     00772200
&ZCVAL              SETC '&ZCVAL PAD'           INCORRECT KEY USED      00772300
.ZG201A5            AIF   (K'&PADCHAR LE 0).ZG201A6  OK                 00772400
&ZCVAL              SETC '&ZCVAL PADCHAR'       INCORRECT KEY USED      00772500
.ZG201A6            AIF   (K'&SRCERRL LE 0).ZG201A7  OK                 00772600
&ZCVAL              SETC '&ZCVAL SRCERRL'       INCORRECT KEY USED      00772700
.ZG201A7            AIF   (K'&SRCGAP LE 0).ZG201A8  OK                  00772800
&ZCVAL              SETC '&ZCVAL SRCGAP'        INCORRECT KEY USED      00772900
.ZG201A8            AIF   (K'&SRCLIST LE 0).ZG201A9  OK                 00773000
&ZCVAL              SETC '&ZCVAL SRCLIST'       INCORRECT KEY USED      00773100
.ZG201A9            AIF   (K'&SRCLST64 LE 0).ZG201A10  OK               00773200
&ZCVAL              SETC '&ZCVAL SRCLST64'      INCORRECT KEY USED      00773300
.ZG201A10           AIF   (K'&SRCNUM LE 0).ZG201A11  OK                 00773400
&ZCVAL              SETC '&ZCVAL SRCNUM'        INCORRECT KEY USED      00773500
.ZG201A11           AIF   (K'&TARGERRL LE 0).ZG201A12  OK               00773600
&ZCVAL              SETC '&ZCVAL TARGERRL'      INCORRECT KEY USED      00773700
.ZG201A12           AIF   (K'&TARGGAP LE 0).ZG201A13  OK                00773800
&ZCVAL              SETC '&ZCVAL TARGGAP'       INCORRECT KEY USED      00773900
.ZG201A13           AIF   (K'&TARGLIST LE 0).ZG201A14  OK               00774000
&ZCVAL              SETC '&ZCVAL TARGLIST'      INCORRECT KEY USED      00774100
.ZG201A14           AIF   (K'&TARLST64 LE 0).ZG201A15  OK               00774200
&ZCVAL              SETC '&ZCVAL TARLST64'      INCORRECT KEY USED      00774300
.ZG201A15           AIF   (K'&TARGNUM LE 0).ZG201A16  OK                00774400
&ZCVAL              SETC '&ZCVAL TARGNUM'       INCORRECT KEY USED      00774500
.ZG201A16           AIF   (K'&BUFSIZE LE 0).ZG201A17  OK                00774600
&ZCVAL              SETC '&ZCVAL BUFSIZE'       INCORRECT KEY USED      00774700
.ZG201A17           AIF   (K'&BUFSOURC LE 0).ZG201A18  OK               00774800
&ZCVAL              SETC '&ZCVAL BUFSOURC'      INCORRECT KEY USED      00774900
.ZG201A18           AIF   (K'&BACK LE 0).ZG201A19  OK                   00775000
&ZCVAL              SETC '&ZCVAL BACK'          INCORRECT KEY USED      00775100
.ZG201A19           AIF   (K'&DS_INFO LE 0).ZG201A20  OK                00775200
&ZCVAL              SETC '&ZCVAL DS_INFO'       INCORRECT KEY USED      00775300
.ZG201A20           AIF   (K'&EXPBUF LE 0).ZG201A21  OK                 00775400
&ZCVAL              SETC '&ZCVAL EXPBUF'        INCORRECT KEY USED      00775500
.ZG201A21           AIF   (K'&INITBUF LE 0).ZG201A22  OK                00775600
&ZCVAL              SETC '&ZCVAL INITBUF'       INCORRECT KEY USED      00775700
.ZG201A22           AIF   (K'&MINFREE LE 0).ZG201A23  OK                00775800
&ZCVAL              SETC '&ZCVAL MINFREE'       INCORRECT KEY USED      00775900
.ZG201A23           AIF   (K'&RETPTOKN LE 0).ZG201A24  OK               00776000
&ZCVAL              SETC '&ZCVAL RETPTOKN'      INCORRECT KEY USED      00776100
.ZG201A24           AIF   (K'&STATAREA LE 0).ZG201A25  OK               00776200
&ZCVAL              SETC '&ZCVAL STATAREA'      INCORRECT KEY USED      00776300
.ZG201A25           AIF   (K'&POOLTOKN LE 0).ZG201A26  OK               00776400
&ZCVAL              SETC '&ZCVAL POOLTOKN'      INCORRECT KEY USED      00776500
.ZG201A26           AIF   (K'&WAIT LE 0).ZG201A27  OK                   00776600
&ZCVAL              SETC '&ZCVAL WAIT'          INCORRECT KEY USED      00776700
.ZG201A27           AIF   (K'&FREERTN LE 0).ZG201A28  OK                00776800
&ZCVAL              SETC '&ZCVAL FREERTN'       INCORRECT KEY USED      00776900
.ZG201A28           AIF   (K'&ZCVAL LE 0).ZG201A29  OK                  00777000
&ZCVAL              SETC '&ZCVAL'(2,K'&ZCVAL-1)                         00777100
                    AIF  (K'&ZCVAL LE 160).ZG201A29A                    00777200
&ZCVAL              SETC '&ZCVAL'(1,160)                                00777300
&ZCVAL              SETC '&ZCVAL....'                                   00777400
.ZG201A29A          ANOP                                                00777500
&ZMS                SETC  '"REQUEST'                                    00777600
&ZMS                SETC  '&ZMS.=&REQUEST"'                             00777700
&ZMS                SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'          00777800
                    MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'          00777900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00778000
.ZG201A29           ANOP  ,                                             00778100
.*----------------------------------------------------------------***   00778200
.***AG.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00778300
&XDUMMY6            SETC  ''          INITIALIZE XVARIABLE              00778400
                    AIF   (K'&BUFLIST LE 0).ZG203C                      00778500
&ZXDUMMY6           SETC  'INPUT'     SET IN/OUTPUT                     00778600
&XDUMMY6            SETC  'BUFLIST'   SET XVARIABLE                     00778700
&ZXBUFLIST          SETC  'INPUT'     SET IN/OUTPUT                     00778800
&XBUFLIST           SETC  '&BUFLIST(1)'         SET XVARIABLE PARM      00778900
                    AIF   (N'&BUFLIST GT 1).ZG203A                      00779000
&XBUFLIST           SETC  '&BUFLIST'  SET XVARIABLE PARM                00779100
.ZG203A             AIF   (N'&BUFLIST LE 1).ZG203B  CK NUM              00779200
&ZMS                SETC  '"BUFLIST='                                   00779300
&ZMS                SETC  '&ZMS.&BUFLIST"'                              00779400
&ZMS                SETC  '&ZMS "BUFLIST"'                              00779500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00779600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00779700
.ZG203B             AIF   (K'&XBUFLIST GT 0).ZG203C  ONE PARM           00779800
&ZXDUMMY6           SETC  ''          RESET IN/OUTPUT                   00779900
&ZXBUFLIST          SETC  ''          RESET IN/OUTPUT                   00780000
&ZMS                SETC  ' '                                           00780100
&ZMS                SETC  '&ZMS "BUFLIST" KEY AND ITS'                  00780200
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00780300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00780400
.ZG203C             ANOP  ,                                             00780500
.*----------------------------------------------------------------***   00780600
.***AG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00780700
                    AIF   (K'&BUFLST64 LE 0).ZG204D  NO ME KEY          00780800
                    AIF   (N'&BUFLST64 LE 1).ZG204A  CK NUM             00780900
&ZMS                SETC  '"BUFLST64='                                  00781000
&ZMS                SETC  '&ZMS.&BUFLST64"'                             00781100
&ZMS                SETC  '&ZMS "BUFLST64"'                             00781200
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00781300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00781400
.ZG204A             AIF   (K'&XDUMMY6 LE 0).ZG204B                      00781500
&ZMS                SETC  '"BUFLST64'                                   00781600
&ZMS                SETC  '&ZMS.=&BUFLST64"'                            00781700
&ZMS                SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'         00781800
&ZMS                SETC  '&ZMS "&XDUMMY6"'                             00781900
                    MNOTE 8,' &ZMS KEY.'                                00782000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00782100
                    AGO   .ZG204D                                       00782200
.*                                                                      00782300
.ZG204B             ANOP  ,                                             00782400
&ZXDUMMY6           SETC  'INPUT'     SET IN/OUTPUT                     00782500
&XDUMMY6            SETC  'BUFLST64'  SET XVARIABLE                     00782600
&ZXBUFLST64         SETC  'INPUT'     SET IN/OUTPUT                     00782700
&XBUFLST64          SETC  '&BUFLST64(1)'        SET XVARIABLE PARM      00782800
                    AIF   (N'&BUFLST64 GT 1).ZG204C                     00782900
&XBUFLST64          SETC  '&BUFLST64'           SET XVARIABLE PARM      00783000
.ZG204C             AIF   (K'&XBUFLST64 GT 0).ZG204D  ONE PARM          00783100
&ZXDUMMY6           SETC  ''          RESET IN/OUTPUT                   00783200
&ZXBUFLST64         SETC  ''          RESET IN/OUTPUT                   00783300
&ZMS                SETC  ' '                                           00783400
&ZMS                SETC  '&ZMS "BUFLST64" KEY AND ITS'                 00783500
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00783600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00783700
.ZG204D             ANOP  ,                                             00783800
.*------------------------------------------------------------------    00783900
.***AG.KME4Y09 NAME, RQD INPUT, ME KEYS -CHECK IF KEY ENTERED           00784000
                    AIF   (K'&XDUMMY6 GT 0).ZG205B                      00784100
&ZXDUMMY6           SETC  ''          RESET IN/OUTPUT                   00784200
&ZXBUFLIST          SETC  ''          RESET IN/OUTPUT                   00784300
&XDUMMY6            SETC  ''          ENSURE NULL                       00784400
&XBUFLIST           SETC  ''          ENSURE NULL                       00784500
&ZMS                SETC  'ONE OF THE FOLLOWING'                        00784600
&ZMS                SETC  '&ZMS MUTUALLY EXCLUSIVE KEY(S) IS'           00784700
&ZMS                SETC  '&ZMS REQUIRED:'                              00784800
&ZMS                SETC  '&ZMS "BUFLIST"'      VALID ME KEY            00784900
&ZMS                SETC  '&ZMS OR "BUFLST64".'  VALID ME KEY           00785000
                    MNOTE 8,' &ZMS '                                    00785100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00785200
.ZG205B             ANOP  ,                                             00785300
.*-------------------------------------------------------------------   00785400
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00785500
.ZG203ZY  AIF    ('&XDUMMY6' NE 'BUFLIST').ZG204ZY                      00785600
.*-------------------------------------------------------------------   00785700
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00785800
                    AIF   (K'&ZXBUFLIST LE 0).ZG203R  NOT I/O           00785900
                    AIF   ('&XBUFLIST'(1,1) NE '(').ZG203R              00786000
&ZCGPR              SETC  '&XBUFLIST'(2,K'&XBUFLIST-2)                  00786100
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG203P                 00786200
                    AIF   (K'&ZCGPR GT 2).ZG203Q                        00786300
                    AIF   ('&ZCGPR' EQ '0').ZG203Q                      00786400
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00786500
                    AIF   (T'&ZCGPR NE 'N').ZG203Q  INVALID REG NAME    00786600
.ZG203P             ANOP  ,                                             00786700
                    AIF   (T'&ZCGPR NE 'N').ZG203R  NON NUMERIC         00786800
                    AIF   ('&ZCGPR' LT '2').ZG203Q                      00786900
                    AIF   ('&ZCGPR' LE '12').ZG203R                     00787000
.ZG203Q             ANOP  ,                                             00787100
&ZMS                SETC  '"BUFLIST='                                   00787200
&ZMS                SETC  '&ZMS.&BUFLIST"'                              00787300
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00787400
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00787500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00787600
.ZG203R             ANOP  ,                                             00787700
.*-------------------------------------------------------------------   00787800
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00787900
.ZG204ZY  AIF    ('&XDUMMY6' NE 'BUFLST64').ZG205ZY                     00788000
.*-------------------------------------------------------------------   00788100
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00788200
                    AIF   (K'&ZXBUFLST64 LE 0).ZG204R  NOT I/O          00788300
                    AIF   ('&XBUFLST64'(1,1) NE '(').ZG204R             00788400
&ZCGPR              SETC  '&XBUFLST64'(2,K'&XBUFLST64-2)                00788500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG204P                 00788600
                    AIF   (K'&ZCGPR GT 2).ZG204Q                        00788700
                    AIF   ('&ZCGPR' EQ '0').ZG204Q                      00788800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00788900
                    AIF   (T'&ZCGPR NE 'N').ZG204Q  INVALID REG NAME    00789000
.ZG204P             ANOP  ,                                             00789100
                    AIF   (T'&ZCGPR NE 'N').ZG204R  NON NUMERIC         00789200
                    AIF   ('&ZCGPR' LT '2').ZG204Q                      00789300
                    AIF   ('&ZCGPR' LE '12').ZG204R                     00789400
.ZG204Q             ANOP  ,                                             00789500
&ZMS                SETC  '"BUFLST64='                                  00789600
&ZMS                SETC  '&ZMS.&BUFLST64"'                             00789700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00789800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00789900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00790000
.ZG204R             ANOP  ,                                             00790100
.*-------------------------------------------------------------------   00790200
.***AG.KMEKY15 NAME, RQD INPUT, ME KEYS -END                            00790300
.ZG205ZY            ANOP ,            END MUTUALLY EXCLUSIVE KEYS       00790400
.*----------------------------------------------------------------***   00790500
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00790600
                    AIF   (N'&BUFNUM LE 1).ZG207A  CK NUM               00790700
&ZMS                SETC  '"BUFNUM='                                    00790800
&ZMS                SETC  '&ZMS.&BUFNUM"'                               00790900
&ZMS                SETC  '&ZMS "BUFNUM"'                               00791000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00791100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00791200
.ZG207A             ANOP  ,                                             00791300
.*-------------------------------------------------------------------   00791400
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00791500
&ZXBUFNUM           SETC  'INPUT'     SET IN/OUTPUT                     00791600
&XBUFNUM            SETC  '&BUFNUM(1)'          SET XVARIABLE           00791700
                    AIF   (N'&BUFNUM GT 1).ZG207B  MULTI PARMS          00791800
&XBUFNUM            SETC  '&BUFNUM'   SET XVARIABLE                     00791900
.ZG207B             AIF   (K'&BUFNUM(1) GT 0).ZG207C                    00792000
&ZXBUFNUM           SETC  ''          RESET IN/OUTPUT                   00792100
&ZMS                SETC  ' '                                           00792200
&ZMS                SETC  '&ZMS "BUFNUM" KEY AND ITS'                   00792300
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00792400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00792500
.ZG207C             ANOP  ,                                             00792600
.*-------------------------------------------------------------------   00792700
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00792800
                    AIF   (K'&ZXBUFNUM LE 0).ZG207R  NOT I/O            00792900
                    AIF   ('&XBUFNUM'(1,1) NE '(').ZG207R               00793000
&ZCGPR              SETC  '&XBUFNUM'(2,K'&XBUFNUM-2)                    00793100
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG207P                 00793200
                    AIF   (K'&ZCGPR GT 2).ZG207Q                        00793300
                    AIF   ('&ZCGPR' EQ '0').ZG207Q                      00793400
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00793500
                    AIF   (T'&ZCGPR NE 'N').ZG207Q  INVALID REG NAME    00793600
.ZG207P             ANOP  ,                                             00793700
                    AIF   (T'&ZCGPR NE 'N').ZG207R  NON NUMERIC         00793800
                    AIF   ('&ZCGPR' LT '2').ZG207Q                      00793900
                    AIF   ('&ZCGPR' LE '12').ZG207R                     00794000
.ZG207Q             ANOP  ,                                             00794100
&ZMS                SETC  '"BUFNUM='                                    00794200
&ZMS                SETC  '&ZMS.&BUFNUM"'                               00794300
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00794400
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00794500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00794600
.ZG207R             ANOP  ,                                             00794700
.*----------------------------------------------------------------***   00794800
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00794900
                    AIF   (N'&CLEAR LE 1).ZG210A  CK NUM                00795000
&ZMS                SETC  '"CLEAR='                                     00795100
&ZMS                SETC  '&ZMS.&CLEAR"'                                00795200
&ZMS                SETC  '&ZMS "CLEAR"'                                00795300
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00795400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00795500
.ZG210A             ANOP  ,                                             00795600
.*-------------------------------------------------------------------   00795700
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00795800
&XCLEAR             SETC  ''          INITIALIZE XVARIABLE              00795900
.ZG211A   AIF   ('&CLEAR(1)' NE 'NO').ZG212A                            00796000
&XCLEAR             SETC  'NO'        SET KEYWORD                       00796100
.*-------------------------------------------------------------------   00796200
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00796300
.ZG212A   AIF   ('&CLEAR(1)' NE 'YES').ZG213A                           00796400
&XCLEAR             SETC  'YES'       SET KEYWORD                       00796500
.*-------------------------------------------------------------------   00796600
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00796700
.ZG213A             AIF   (K'&XCLEAR GT 0).ZG213C  KEYWORD              00796800
                    AIF   (K'&CLEAR(1) LE 0).ZG213B                     00796900
&ZMS                SETC  '"CLEAR='                                     00797000
&ZMS                SETC  '&ZMS.&CLEAR"'                                00797100
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     00797200
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           00797300
&ZMS                SETC  '&ZMS "NO"'                                   00797400
&ZMS                SETC  '&ZMS OR "YES".'                              00797500
                    MNOTE 8,' &ZMS '                                    00797600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00797700
.ZG213B             ANOP  ,                                             00797800
&XCLEAR             SETC  'NO'        SET DEFAULT KEYWORD               00797900
.ZG213C             ANOP  ,                                             00798000
&ZXCLEAR            SETC  'INPUT'     SET IN/OUTPUT                     00798100
.*-------------------------------------------------------------------   00798200
.***AG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START             00798300
                    AIF   ('&XMF' EQ 'M').ZG216  BYPASS IF MF=M         00798400
.*----------------------------------------------------------------***   00798500
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00798600
                    AIF   (N'&ERRBFLST LE 1).ZG215A  CK NUM             00798700
&ZMS                SETC  '"ERRBFLST='                                  00798800
&ZMS                SETC  '&ZMS.&ERRBFLST"'                             00798900
&ZMS                SETC  '&ZMS "ERRBFLST"'                             00799000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00799100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00799200
.ZG215A             ANOP  ,                                             00799300
.*-------------------------------------------------------------------   00799400
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00799500
                    AIF   (K'&ERRBFLST(1) LE 0).ZG215C  NO PARM         00799600
&ZXERRBFLST         SETC  'OUTPUT'    SET OUTPUT                        00799700
&XERRBFLST          SETC  '&ERRBFLST(1)'        SET XVARIABLE           00799800
                    AIF   (N'&ERRBFLST GT 1).ZG215C                     00799900
&XERRBFLST          SETC  '&ERRBFLST'           SET XVARIABLE           00800000
.ZG215C             ANOP  ,                                             00800100
.*-------------------------------------------------------------------   00800200
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00800300
                    AIF   (K'&ZXERRBFLST LE 0).ZG215R  NOT I/O          00800400
                    AIF   ('&XERRBFLST'(1,1) NE '(').ZG215R             00800500
&ZCGPR              SETC  '&XERRBFLST'(2,K'&XERRBFLST-2)                00800600
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG215P                 00800700
                    AIF   (K'&ZCGPR GT 2).ZG215Q                        00800800
                    AIF   ('&ZCGPR' EQ '0').ZG215Q                      00800900
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00801000
                    AIF   (T'&ZCGPR NE 'N').ZG215Q  INVALID REG NAME    00801100
.ZG215P             ANOP  ,                                             00801200
                    AIF   (T'&ZCGPR NE 'N').ZG215R  NON NUMERIC         00801300
                    AIF   ('&ZCGPR' LT '2').ZG215Q                      00801400
                    AIF   ('&ZCGPR' LE '12').ZG215R                     00801500
.ZG215Q             ANOP  ,                                             00801600
&ZMS                SETC  '"ERRBFLST='                                  00801700
&ZMS                SETC  '&ZMS.&ERRBFLST"'                             00801800
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00801900
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00802000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00802100
.ZG215R             ANOP  ,                                             00802200
.*-------------------------------------------------------------------   00802300
.***AG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END               00802400
.ZG216              ANOP  ,           END OF BYPASS CHECK               00802500
.*----------------------------------------------------------------***   00802600
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00802700
                    AIF   (N'&FREETO LE 1).ZG218A  CK NUM               00802800
&ZMS                SETC  '"FREETO='                                    00802900
&ZMS                SETC  '&ZMS.&FREETO"'                               00803000
&ZMS                SETC  '&ZMS "FREETO"'                               00803100
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00803200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00803300
.ZG218A             ANOP  ,                                             00803400
.*-------------------------------------------------------------------   00803500
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00803600
&XFREETO            SETC  ''          INITIALIZE XVARIABLE              00803700
.ZG219A   AIF   ('&FREETO(1)' NE 'USER').ZG220A                         00803800
&XFREETO            SETC  'USER'      SET KEYWORD                       00803900
.*-------------------------------------------------------------------   00804000
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00804100
.ZG220A   AIF   ('&FREETO(1)' NE 'CSM').ZG221A                          00804200
&XFREETO            SETC  'CSM'       SET KEYWORD                       00804300
.*-------------------------------------------------------------------   00804400
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00804500
.ZG221A             AIF   (K'&XFREETO GT 0).ZG221C  KEYWORD             00804600
                    AIF   (K'&FREETO(1) LE 0).ZG221B                    00804700
&ZMS                SETC  '"FREETO='                                    00804800
&ZMS                SETC  '&ZMS.&FREETO"'                               00804900
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     00805000
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           00805100
&ZMS                SETC  '&ZMS "USER"'                                 00805200
&ZMS                SETC  '&ZMS OR "CSM".'                              00805300
                    MNOTE 8,' &ZMS '                                    00805400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00805500
.ZG221B             ANOP  ,                                             00805600
&XFREETO            SETC  'USER'      SET DEFAULT KEYWORD               00805700
.ZG221C             ANOP  ,                                             00805800
&ZXFREETO           SETC  'INPUT'     SET IN/OUTPUT                     00805900
.*----------------------------------------------------------------***   00806000
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00806100
                    AIF   (N'&GAP LE 1).ZG223A  CK NUM                  00806200
&ZMS                SETC  '"GAP='                                       00806300
&ZMS                SETC  '&ZMS.&GAP"'                                  00806400
&ZMS                SETC  '&ZMS "GAP"'                                  00806500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00806600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00806700
.ZG223A             ANOP  ,                                             00806800
.*-------------------------------------------------------------------   00806900
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00807000
&ZXGAP              SETC  'INPUT'     SET IN/OUTPUT                     00807100
&XGAP               SETC  '0'                                           00807200
                    AIF   (K'&GAP(1) LE 0).ZG223B  PARM                 00807300
&XGAP               SETC  '&GAP(1)'   SET XVARIABLE                     00807400
                    AIF   (N'&GAP GT 1).ZG223B  MULTI                   00807500
&XGAP               SETC  '&GAP'      SET XVARIABLE                     00807600
.ZG223B             ANOP  ,                                             00807700
.*-------------------------------------------------------------------   00807800
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00807900
                    AIF   (K'&ZXGAP LE 0).ZG223R  NOT I/O               00808000
         AIF   ('&XGAP' EQ '0').ZG223R                                  00808100
                    AIF   ('&XGAP'(1,1) NE '(').ZG223R                  00808200
&ZCGPR              SETC  '&XGAP'(2,K'&XGAP-2)                          00808300
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG223P                 00808400
                    AIF   (K'&ZCGPR GT 2).ZG223Q                        00808500
                    AIF   ('&ZCGPR' EQ '0').ZG223Q                      00808600
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00808700
                    AIF   (T'&ZCGPR NE 'N').ZG223Q  INVALID REG NAME    00808800
.ZG223P             ANOP  ,                                             00808900
                    AIF   (T'&ZCGPR NE 'N').ZG223R  NON NUMERIC         00809000
                    AIF   ('&ZCGPR' LT '2').ZG223Q                      00809100
                    AIF   ('&ZCGPR' LE '12').ZG223R                     00809200
.ZG223Q             ANOP  ,                                             00809300
&ZMS                SETC  '"GAP='                                       00809400
&ZMS                SETC  '&ZMS.&GAP"'                                  00809500
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00809600
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00809700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00809800
.ZG223R             ANOP  ,                                             00809900
.*----------------------------------------------------------------***   00810000
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00810100
                    AIF   (N'&SKIPBUF LE 1).ZG226A  CK NUM              00810200
&ZMS                SETC  '"SKIPBUF='                                   00810300
&ZMS                SETC  '&ZMS.&SKIPBUF"'                              00810400
&ZMS                SETC  '&ZMS "SKIPBUF"'                              00810500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00810600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00810700
.ZG226A             ANOP  ,                                             00810800
.*-------------------------------------------------------------------   00810900
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00811000
&XSKIPBUF           SETC  ''          INITIALIZE XVARIABLE              00811100
.ZG227A   AIF   ('&SKIPBUF(1)' NE 'NO').ZG228A                          00811200
&XSKIPBUF           SETC  'NO'        SET KEYWORD                       00811300
.*-------------------------------------------------------------------   00811400
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00811500
.ZG228A   AIF   ('&SKIPBUF(1)' NE 'YES').ZG229A                         00811600
&XSKIPBUF           SETC  'YES'       SET KEYWORD                       00811700
.*-------------------------------------------------------------------   00811800
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00811900
.ZG229A             AIF   (K'&XSKIPBUF GT 0).ZG229C  KEYWORD            00812000
                    AIF   (K'&SKIPBUF(1) LE 0).ZG229B                   00812100
&ZMS                SETC  '"SKIPBUF='                                   00812200
&ZMS                SETC  '&ZMS.&SKIPBUF"'                              00812300
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     00812400
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           00812500
&ZMS                SETC  '&ZMS "NO"'                                   00812600
&ZMS                SETC  '&ZMS OR "YES".'                              00812700
                    MNOTE 8,' &ZMS '                                    00812800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00812900
.ZG229B             ANOP  ,                                             00813000
&XSKIPBUF           SETC  'NO'        SET DEFAULT KEYWORD               00813100
.ZG229C             ANOP  ,                                             00813200
&ZXSKIPBUF          SETC  'INPUT'     SET IN/OUTPUT                     00813300
.*----------------------------------------------------------------***   00813400
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00813500
                    AIF   (N'&COMPID LE 1).ZG231A  CK NUM               00813600
&ZMS                SETC  '"COMPID='                                    00813700
&ZMS                SETC  '&ZMS.&COMPID"'                               00813800
&ZMS                SETC  '&ZMS "COMPID"'                               00813900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00814000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00814100
.ZG231A             ANOP  ,                                             00814200
.*-------------------------------------------------------------------   00814300
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00814400
&ZXCOMPID           SETC  'INPUT'     SET IN/OUTPUT                     00814500
&XCOMPID            SETC  '0'                                           00814600
                    AIF   (K'&COMPID(1) LE 0).ZG231B  PARM              00814700
&XCOMPID            SETC  '&COMPID(1)'          SET XVARIABLE           00814800
                    AIF   (N'&COMPID GT 1).ZG231B  MULTI                00814900
&XCOMPID            SETC  '&COMPID'   SET XVARIABLE                     00815000
.ZG231B             ANOP  ,                                             00815100
.*-------------------------------------------------------------------   00815200
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00815300
                    AIF   (K'&ZXCOMPID LE 0).ZG231R  NOT I/O            00815400
         AIF   ('&XCOMPID' EQ '0').ZG231R                               00815500
                    AIF   ('&XCOMPID'(1,1) NE '(').ZG231R               00815600
&ZCGPR              SETC  '&XCOMPID'(2,K'&XCOMPID-2)                    00815700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG231P                 00815800
                    AIF   (K'&ZCGPR GT 2).ZG231Q                        00815900
                    AIF   ('&ZCGPR' EQ '0').ZG231Q                      00816000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00816100
                    AIF   (T'&ZCGPR NE 'N').ZG231Q  INVALID REG NAME    00816200
.ZG231P             ANOP  ,                                             00816300
                    AIF   (T'&ZCGPR NE 'N').ZG231R  NON NUMERIC         00816400
                    AIF   ('&ZCGPR' LT '2').ZG231Q                      00816500
                    AIF   ('&ZCGPR' LE '12').ZG231R                     00816600
.ZG231Q             ANOP  ,                                             00816700
&ZMS                SETC  '"COMPID='                                    00816800
&ZMS                SETC  '&ZMS.&COMPID"'                               00816900
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00817000
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00817100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00817200
.ZG231R             ANOP  ,                                             00817300
.*----------------------------------------------------------------***   00817400
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00817500
                    AIF   (N'&COMPUSER LE 1).ZG234A  CK NUM             00817600
&ZMS                SETC  '"COMPUSER='                                  00817700
&ZMS                SETC  '&ZMS.&COMPUSER"'                             00817800
&ZMS                SETC  '&ZMS "COMPUSER"'                             00817900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00818000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00818100
.ZG234A             ANOP  ,                                             00818200
.*-------------------------------------------------------------------   00818300
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00818400
&ZXCOMPUSER         SETC  'INPUT'     SET IN/OUTPUT                     00818500
&XCOMPUSER          SETC  '0'                                           00818600
                    AIF   (K'&COMPUSER(1) LE 0).ZG234B  PARM            00818700
&XCOMPUSER          SETC  '&COMPUSER(1)'        SET XVARIABLE           00818800
                    AIF   (N'&COMPUSER GT 1).ZG234B  MULTI              00818900
&XCOMPUSER          SETC  '&COMPUSER'           SET XVARIABLE           00819000
.ZG234B             ANOP  ,                                             00819100
.*-------------------------------------------------------------------   00819200
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00819300
                    AIF   (K'&ZXCOMPUSER LE 0).ZG234R  NOT I/O          00819400
         AIF   ('&XCOMPUSER' EQ '0').ZG234R                             00819500
                    AIF   ('&XCOMPUSER'(1,1) NE '(').ZG234R             00819600
&ZCGPR              SETC  '&XCOMPUSER'(2,K'&XCOMPUSER-2)                00819700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG234P                 00819800
                    AIF   (K'&ZCGPR GT 2).ZG234Q                        00819900
                    AIF   ('&ZCGPR' EQ '0').ZG234Q                      00820000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00820100
                    AIF   (T'&ZCGPR NE 'N').ZG234Q  INVALID REG NAME    00820200
.ZG234P             ANOP  ,                                             00820300
                    AIF   (T'&ZCGPR NE 'N').ZG234R  NON NUMERIC         00820400
                    AIF   ('&ZCGPR' LT '2').ZG234Q                      00820500
                    AIF   ('&ZCGPR' LE '12').ZG234R                     00820600
.ZG234Q             ANOP  ,                                             00820700
&ZMS                SETC  '"COMPUSER='                                  00820800
&ZMS                SETC  '&ZMS.&COMPUSER"'                             00820900
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00821000
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00821100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00821200
.ZG234R             ANOP  ,                                             00821300
.*----------------------------------------------------------------***   00821400
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00821500
                    AIF   (N'&THREAD LE 1).ZG237A  CK NUM               00821600
&ZMS                SETC  '"THREAD='                                    00821700
&ZMS                SETC  '&ZMS.&THREAD"'                               00821800
&ZMS                SETC  '&ZMS "THREAD"'                               00821900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00822000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00822100
.ZG237A             ANOP  ,                                             00822200
.*-------------------------------------------------------------------   00822300
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00822400
&ZXTHREAD           SETC  'INPUT'     SET IN/OUTPUT                     00822500
&XTHREAD            SETC  '0'                                           00822600
                    AIF   (K'&THREAD(1) LE 0).ZG237B  PARM              00822700
&XTHREAD            SETC  '&THREAD(1)'          SET XVARIABLE           00822800
                    AIF   (N'&THREAD GT 1).ZG237B  MULTI                00822900
&XTHREAD            SETC  '&THREAD'   SET XVARIABLE                     00823000
.ZG237B             ANOP  ,                                             00823100
.*-------------------------------------------------------------------   00823200
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00823300
                    AIF   (K'&ZXTHREAD LE 0).ZG237R  NOT I/O            00823400
         AIF   ('&XTHREAD' EQ '0').ZG237R                               00823500
                    AIF   ('&XTHREAD'(1,1) NE '(').ZG237R               00823600
&ZCGPR              SETC  '&XTHREAD'(2,K'&XTHREAD-2)                    00823700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG237P                 00823800
                    AIF   (K'&ZCGPR GT 2).ZG237Q                        00823900
                    AIF   ('&ZCGPR' EQ '0').ZG237Q                      00824000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00824100
                    AIF   (T'&ZCGPR NE 'N').ZG237Q  INVALID REG NAME    00824200
.ZG237P             ANOP  ,                                             00824300
                    AIF   (T'&ZCGPR NE 'N').ZG237R  NON NUMERIC         00824400
                    AIF   ('&ZCGPR' LT '2').ZG237Q                      00824500
                    AIF   ('&ZCGPR' LE '12').ZG237R                     00824600
.ZG237Q             ANOP  ,                                             00824700
&ZMS                SETC  '"THREAD='                                    00824800
&ZMS                SETC  '&ZMS.&THREAD"'                               00824900
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00825000
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00825100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00825200
.ZG237R             ANOP  ,                                             00825300
.*----------------------------------------------------------------***   00825400
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00825500
                    AIF   (N'&UTILRTN LE 1).ZG240A  CK NUM              00825600
&ZMS                SETC  '"UTILRTN='                                   00825700
&ZMS                SETC  '&ZMS.&UTILRTN"'                              00825800
&ZMS                SETC  '&ZMS "UTILRTN"'                              00825900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00826000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00826100
.ZG240A             ANOP  ,                                             00826200
.*-------------------------------------------------------------------   00826300
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00826400
&ZXUTILRTN          SETC  'INPUT'     SET IN/OUTPUT                     00826500
&XUTILRTN           SETC  '0'                                           00826600
                    AIF   (K'&UTILRTN(1) LE 0).ZG240B  PARM             00826700
&XUTILRTN           SETC  '&UTILRTN(1)'         SET XVARIABLE           00826800
                    AIF   (N'&UTILRTN GT 1).ZG240B  MULTI               00826900
&XUTILRTN           SETC  '&UTILRTN'  SET XVARIABLE                     00827000
.ZG240B             ANOP  ,                                             00827100
.*-------------------------------------------------------------------   00827200
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00827300
                    AIF   (K'&ZXUTILRTN LE 0).ZG240R  NOT I/O           00827400
         AIF   ('&XUTILRTN' EQ '0').ZG240R                              00827500
                    AIF   ('&XUTILRTN'(1,1) NE '(').ZG240R              00827600
&ZCGPR              SETC  '&XUTILRTN'(2,K'&XUTILRTN-2)                  00827700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG240P                 00827800
                    AIF   (K'&ZCGPR GT 2).ZG240Q                        00827900
                    AIF   ('&ZCGPR' EQ '0').ZG240Q                      00828000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00828100
                    AIF   (T'&ZCGPR NE 'N').ZG240Q  INVALID REG NAME    00828200
.ZG240P             ANOP  ,                                             00828300
                    AIF   (T'&ZCGPR NE 'N').ZG240R  NON NUMERIC         00828400
                    AIF   ('&ZCGPR' LT '2').ZG240Q                      00828500
                    AIF   ('&ZCGPR' LE '12').ZG240R                     00828600
.ZG240Q             ANOP  ,                                             00828700
&ZMS                SETC  '"UTILRTN='                                   00828800
&ZMS                SETC  '&ZMS.&UTILRTN"'                              00828900
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00829000
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00829100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00829200
.ZG240R             ANOP  ,                                             00829300
.*-------------------------------------------------------------------   00829400
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00829500
.ZG242              ANOP  ,                                             00829600
&ZTLC               SETC 'GET_BUFFER'                                   00829700
                    AIF   ('&REQUEST(1)' NE '&ZTLC').ZG302              00829800
&XREQUEST           SETC  'GET_BUFFER'          SET KEYWORD             00829900
                    AIF   (N'&REQUEST LE 1).ZG242A  CK NUM              00830000
&ZMS                SETC  '"REQUEST='                                   00830100
&ZMS                SETC  '&ZMS.&REQUEST"'                              00830200
&ZMS                SETC  '&ZMS "REQUEST"'                              00830300
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00830400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00830500
.ZG242A             ANOP  ,                                             00830600
.*------------------------------------------------------------------    00830700
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00830800
&ZCVAL              SETC ''           CLEAR ERROR KEY ACCUMULATOR       00830900
.ZG242A0            AIF   (K'&SKIPBUF LE 0).ZG242A1  OK                 00831000
&ZCVAL              SETC '&ZCVAL SKIPBUF'       INCORRECT KEY USED      00831100
.ZG242A1            AIF   (K'&PAD LE 0).ZG242A2  OK                     00831200
&ZCVAL              SETC '&ZCVAL PAD'           INCORRECT KEY USED      00831300
.ZG242A2            AIF   (K'&PADCHAR LE 0).ZG242A3  OK                 00831400
&ZCVAL              SETC '&ZCVAL PADCHAR'       INCORRECT KEY USED      00831500
.ZG242A3            AIF   (K'&SRCERRL LE 0).ZG242A4  OK                 00831600
&ZCVAL              SETC '&ZCVAL SRCERRL'       INCORRECT KEY USED      00831700
.ZG242A4            AIF   (K'&SRCGAP LE 0).ZG242A5  OK                  00831800
&ZCVAL              SETC '&ZCVAL SRCGAP'        INCORRECT KEY USED      00831900
.ZG242A5            AIF   (K'&SRCLIST LE 0).ZG242A6  OK                 00832000
&ZCVAL              SETC '&ZCVAL SRCLIST'       INCORRECT KEY USED      00832100
.ZG242A6            AIF   (K'&SRCLST64 LE 0).ZG242A7  OK                00832200
&ZCVAL              SETC '&ZCVAL SRCLST64'      INCORRECT KEY USED      00832300
.ZG242A7            AIF   (K'&SRCNUM LE 0).ZG242A8  OK                  00832400
&ZCVAL              SETC '&ZCVAL SRCNUM'        INCORRECT KEY USED      00832500
.ZG242A8            AIF   (K'&TARGERRL LE 0).ZG242A9  OK                00832600
&ZCVAL              SETC '&ZCVAL TARGERRL'      INCORRECT KEY USED      00832700
.ZG242A9            AIF   (K'&TARGGAP LE 0).ZG242A10  OK                00832800
&ZCVAL              SETC '&ZCVAL TARGGAP'       INCORRECT KEY USED      00832900
.ZG242A10           AIF   (K'&TARGLIST LE 0).ZG242A11  OK               00833000
&ZCVAL              SETC '&ZCVAL TARGLIST'      INCORRECT KEY USED      00833100
.ZG242A11           AIF   (K'&TARLST64 LE 0).ZG242A12  OK               00833200
&ZCVAL              SETC '&ZCVAL TARLST64'      INCORRECT KEY USED      00833300
.ZG242A12           AIF   (K'&TARGNUM LE 0).ZG242A13  OK                00833400
&ZCVAL              SETC '&ZCVAL TARGNUM'       INCORRECT KEY USED      00833500
.ZG242A13           AIF   (K'&BUFSIZE LE 0).ZG242A14  OK                00833600
&ZCVAL              SETC '&ZCVAL BUFSIZE'       INCORRECT KEY USED      00833700
.ZG242A14           AIF   (K'&BUFSOURC LE 0).ZG242A15  OK               00833800
&ZCVAL              SETC '&ZCVAL BUFSOURC'      INCORRECT KEY USED      00833900
.ZG242A15           AIF   (K'&BACK LE 0).ZG242A16  OK                   00834000
&ZCVAL              SETC '&ZCVAL BACK'          INCORRECT KEY USED      00834100
.ZG242A16           AIF   (K'&DS_INFO LE 0).ZG242A17  OK                00834200
&ZCVAL              SETC '&ZCVAL DS_INFO'       INCORRECT KEY USED      00834300
.ZG242A17           AIF   (K'&EXPBUF LE 0).ZG242A18  OK                 00834400
&ZCVAL              SETC '&ZCVAL EXPBUF'        INCORRECT KEY USED      00834500
.ZG242A18           AIF   (K'&INITBUF LE 0).ZG242A19  OK                00834600
&ZCVAL              SETC '&ZCVAL INITBUF'       INCORRECT KEY USED      00834700
.ZG242A19           AIF   (K'&MINFREE LE 0).ZG242A20  OK                00834800
&ZCVAL              SETC '&ZCVAL MINFREE'       INCORRECT KEY USED      00834900
.ZG242A20           AIF   (K'&RETPTOKN LE 0).ZG242A21  OK               00835000
&ZCVAL              SETC '&ZCVAL RETPTOKN'      INCORRECT KEY USED      00835100
.ZG242A21           AIF   (K'&STATAREA LE 0).ZG242A22  OK               00835200
&ZCVAL              SETC '&ZCVAL STATAREA'      INCORRECT KEY USED      00835300
.ZG242A22           AIF   (K'&FREETO LE 0).ZG242A23  OK                 00835400
&ZCVAL              SETC '&ZCVAL FREETO'        INCORRECT KEY USED      00835500
.ZG242A23           AIF   (K'&ZCVAL LE 0).ZG242A24  OK                  00835600
&ZCVAL              SETC '&ZCVAL'(2,K'&ZCVAL-1)                         00835700
                    AIF  (K'&ZCVAL LE 160).ZG242A24A                    00835800
&ZCVAL              SETC '&ZCVAL'(1,160)                                00835900
&ZCVAL              SETC '&ZCVAL....'                                   00836000
.ZG242A24A          ANOP                                                00836100
&ZMS                SETC  '"REQUEST'                                    00836200
&ZMS                SETC  '&ZMS.=&REQUEST"'                             00836300
&ZMS                SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'          00836400
                    MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'          00836500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00836600
.ZG242A24           ANOP  ,                                             00836700
.*----------------------------------------------------------------***   00836800
.***AG.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00836900
&XDUMMY7            SETC  ''          INITIALIZE XVARIABLE              00837000
                    AIF   (K'&BUFLIST LE 0).ZG244C                      00837100
&ZXDUMMY7           SETC  'INPUT'     SET IN/OUTPUT                     00837200
&XDUMMY7            SETC  'BUFLIST'   SET XVARIABLE                     00837300
&ZXBUFLIST          SETC  'INPUT'     SET IN/OUTPUT                     00837400
&XBUFLIST           SETC  '&BUFLIST(1)'         SET XVARIABLE PARM      00837500
                    AIF   (N'&BUFLIST GT 1).ZG244A                      00837600
&XBUFLIST           SETC  '&BUFLIST'  SET XVARIABLE PARM                00837700
.ZG244A             AIF   (N'&BUFLIST LE 1).ZG244B  CK NUM              00837800
&ZMS                SETC  '"BUFLIST='                                   00837900
&ZMS                SETC  '&ZMS.&BUFLIST"'                              00838000
&ZMS                SETC  '&ZMS "BUFLIST"'                              00838100
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00838200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00838300
.ZG244B             AIF   (K'&XBUFLIST GT 0).ZG244C  ONE PARM           00838400
&ZXDUMMY7           SETC  ''          RESET IN/OUTPUT                   00838500
&ZXBUFLIST          SETC  ''          RESET IN/OUTPUT                   00838600
&ZMS                SETC  ' '                                           00838700
&ZMS                SETC  '&ZMS "BUFLIST" KEY AND ITS'                  00838800
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00838900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00839000
.ZG244C             ANOP  ,                                             00839100
.*----------------------------------------------------------------***   00839200
.***AG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00839300
                    AIF   (K'&BUFLST64 LE 0).ZG245D  NO ME KEY          00839400
                    AIF   (N'&BUFLST64 LE 1).ZG245A  CK NUM             00839500
&ZMS                SETC  '"BUFLST64='                                  00839600
&ZMS                SETC  '&ZMS.&BUFLST64"'                             00839700
&ZMS                SETC  '&ZMS "BUFLST64"'                             00839800
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00839900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00840000
.ZG245A             AIF   (K'&XDUMMY7 LE 0).ZG245B                      00840100
&ZMS                SETC  '"BUFLST64'                                   00840200
&ZMS                SETC  '&ZMS.=&BUFLST64"'                            00840300
&ZMS                SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'         00840400
&ZMS                SETC  '&ZMS "&XDUMMY7"'                             00840500
                    MNOTE 8,' &ZMS KEY.'                                00840600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00840700
                    AGO   .ZG245D                                       00840800
.*                                                                      00840900
.ZG245B             ANOP  ,                                             00841000
&ZXDUMMY7           SETC  'INPUT'     SET IN/OUTPUT                     00841100
&XDUMMY7            SETC  'BUFLST64'  SET XVARIABLE                     00841200
&ZXBUFLST64         SETC  'INPUT'     SET IN/OUTPUT                     00841300
&XBUFLST64          SETC  '&BUFLST64(1)'        SET XVARIABLE PARM      00841400
                    AIF   (N'&BUFLST64 GT 1).ZG245C                     00841500
&XBUFLST64          SETC  '&BUFLST64'           SET XVARIABLE PARM      00841600
.ZG245C             AIF   (K'&XBUFLST64 GT 0).ZG245D  ONE PARM          00841700
&ZXDUMMY7           SETC  ''          RESET IN/OUTPUT                   00841800
&ZXBUFLST64         SETC  ''          RESET IN/OUTPUT                   00841900
&ZMS                SETC  ' '                                           00842000
&ZMS                SETC  '&ZMS "BUFLST64" KEY AND ITS'                 00842100
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00842200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00842300
.ZG245D             ANOP  ,                                             00842400
.*------------------------------------------------------------------    00842500
.***AG.KME4Y09 NAME, RQD INPUT, ME KEYS -CHECK IF KEY ENTERED           00842600
                    AIF   (K'&XDUMMY7 GT 0).ZG246B                      00842700
&ZXDUMMY7           SETC  ''          RESET IN/OUTPUT                   00842800
&ZXBUFLIST          SETC  ''          RESET IN/OUTPUT                   00842900
&XDUMMY7            SETC  ''          ENSURE NULL                       00843000
&XBUFLIST           SETC  ''          ENSURE NULL                       00843100
&ZMS                SETC  'ONE OF THE FOLLOWING'                        00843200
&ZMS                SETC  '&ZMS MUTUALLY EXCLUSIVE KEY(S) IS'           00843300
&ZMS                SETC  '&ZMS REQUIRED:'                              00843400
&ZMS                SETC  '&ZMS "BUFLIST"'      VALID ME KEY            00843500
&ZMS                SETC  '&ZMS OR "BUFLST64".'  VALID ME KEY           00843600
                    MNOTE 8,' &ZMS '                                    00843700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00843800
.ZG246B             ANOP  ,                                             00843900
.*-------------------------------------------------------------------   00844000
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00844100
.ZG244ZY  AIF    ('&XDUMMY7' NE 'BUFLIST').ZG245ZY                      00844200
.*-------------------------------------------------------------------   00844300
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00844400
                    AIF   (K'&ZXBUFLIST LE 0).ZG244R  NOT I/O           00844500
                    AIF   ('&XBUFLIST'(1,1) NE '(').ZG244R              00844600
&ZCGPR              SETC  '&XBUFLIST'(2,K'&XBUFLIST-2)                  00844700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG244P                 00844800
                    AIF   (K'&ZCGPR GT 2).ZG244Q                        00844900
                    AIF   ('&ZCGPR' EQ '0').ZG244Q                      00845000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00845100
                    AIF   (T'&ZCGPR NE 'N').ZG244Q  INVALID REG NAME    00845200
.ZG244P             ANOP  ,                                             00845300
                    AIF   (T'&ZCGPR NE 'N').ZG244R  NON NUMERIC         00845400
                    AIF   ('&ZCGPR' LT '2').ZG244Q                      00845500
                    AIF   ('&ZCGPR' LE '12').ZG244R                     00845600
.ZG244Q             ANOP  ,                                             00845700
&ZMS                SETC  '"BUFLIST='                                   00845800
&ZMS                SETC  '&ZMS.&BUFLIST"'                              00845900
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00846000
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00846100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00846200
.ZG244R             ANOP  ,                                             00846300
.*-------------------------------------------------------------------   00846400
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00846500
.ZG245ZY  AIF    ('&XDUMMY7' NE 'BUFLST64').ZG246ZY                     00846600
.*-------------------------------------------------------------------   00846700
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00846800
                    AIF   (K'&ZXBUFLST64 LE 0).ZG245R  NOT I/O          00846900
                    AIF   ('&XBUFLST64'(1,1) NE '(').ZG245R             00847000
&ZCGPR              SETC  '&XBUFLST64'(2,K'&XBUFLST64-2)                00847100
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG245P                 00847200
                    AIF   (K'&ZCGPR GT 2).ZG245Q                        00847300
                    AIF   ('&ZCGPR' EQ '0').ZG245Q                      00847400
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00847500
                    AIF   (T'&ZCGPR NE 'N').ZG245Q  INVALID REG NAME    00847600
.ZG245P             ANOP  ,                                             00847700
                    AIF   (T'&ZCGPR NE 'N').ZG245R  NON NUMERIC         00847800
                    AIF   ('&ZCGPR' LT '2').ZG245Q                      00847900
                    AIF   ('&ZCGPR' LE '12').ZG245R                     00848000
.ZG245Q             ANOP  ,                                             00848100
&ZMS                SETC  '"BUFLST64='                                  00848200
&ZMS                SETC  '&ZMS.&BUFLST64"'                             00848300
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00848400
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00848500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00848600
.ZG245R             ANOP  ,                                             00848700
.*-------------------------------------------------------------------   00848800
.***AG.KMEKY15 NAME, RQD INPUT, ME KEYS -END                            00848900
.ZG246ZY            ANOP ,            END MUTUALLY EXCLUSIVE KEYS       00849000
.*----------------------------------------------------------------***   00849100
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00849200
                    AIF   (N'&BUFNUM LE 1).ZG248A  CK NUM               00849300
&ZMS                SETC  '"BUFNUM='                                    00849400
&ZMS                SETC  '&ZMS.&BUFNUM"'                               00849500
&ZMS                SETC  '&ZMS "BUFNUM"'                               00849600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00849700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00849800
.ZG248A             ANOP  ,                                             00849900
.*-------------------------------------------------------------------   00850000
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00850100
&ZXBUFNUM           SETC  'INPUT'     SET IN/OUTPUT                     00850200
&XBUFNUM            SETC  '&BUFNUM(1)'          SET XVARIABLE           00850300
                    AIF   (N'&BUFNUM GT 1).ZG248B  MULTI PARMS          00850400
&XBUFNUM            SETC  '&BUFNUM'   SET XVARIABLE                     00850500
.ZG248B             AIF   (K'&BUFNUM(1) GT 0).ZG248C                    00850600
&ZXBUFNUM           SETC  ''          RESET IN/OUTPUT                   00850700
&ZMS                SETC  ' '                                           00850800
&ZMS                SETC  '&ZMS "BUFNUM" KEY AND ITS'                   00850900
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00851000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00851100
.ZG248C             ANOP  ,                                             00851200
.*-------------------------------------------------------------------   00851300
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00851400
                    AIF   (K'&ZXBUFNUM LE 0).ZG248R  NOT I/O            00851500
                    AIF   ('&XBUFNUM'(1,1) NE '(').ZG248R               00851600
&ZCGPR              SETC  '&XBUFNUM'(2,K'&XBUFNUM-2)                    00851700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG248P                 00851800
                    AIF   (K'&ZCGPR GT 2).ZG248Q                        00851900
                    AIF   ('&ZCGPR' EQ '0').ZG248Q                      00852000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00852100
                    AIF   (T'&ZCGPR NE 'N').ZG248Q  INVALID REG NAME    00852200
.ZG248P             ANOP  ,                                             00852300
                    AIF   (T'&ZCGPR NE 'N').ZG248R  NON NUMERIC         00852400
                    AIF   ('&ZCGPR' LT '2').ZG248Q                      00852500
                    AIF   ('&ZCGPR' LE '12').ZG248R                     00852600
.ZG248Q             ANOP  ,                                             00852700
&ZMS                SETC  '"BUFNUM='                                    00852800
&ZMS                SETC  '&ZMS.&BUFNUM"'                               00852900
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00853000
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00853100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00853200
.ZG248R             ANOP  ,                                             00853300
.*----------------------------------------------------------------***   00853400
.***AG.KKWRD01 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00853500
                    AIF   (N'&BUFTYPE LE 1).ZG251A  CK NUM              00853600
&ZMS                SETC  '"BUFTYPE='                                   00853700
&ZMS                SETC  '&ZMS.&BUFTYPE"'                              00853800
&ZMS                SETC  '&ZMS "BUFTYPE"'                              00853900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00854000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00854100
.ZG251A             ANOP  ,                                             00854200
.*-------------------------------------------------------------------   00854300
.***AG.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00854400
&XBUFTYPE           SETC  ''          INITIALIZE XVARIABLE              00854500
.ZG252A   AIF   ('&BUFTYPE(1)' NE 'PAGEELIG').ZG253A                    00854600
&XBUFTYPE           SETC  'PAGEELIG'  SET KEYWORD                       00854700
.*-------------------------------------------------------------------   00854800
.***AG.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00854900
.ZG253A   AIF   ('&BUFTYPE(1)' NE 'PAGEABLE').ZG254A                    00855000
&XBUFTYPE           SETC  'PAGEABLE'  SET KEYWORD                       00855100
.*-------------------------------------------------------------------   00855200
.***AG.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00855300
.ZG254A   AIF   ('&BUFTYPE(1)' NE 'FIXED').ZG255A                       00855400
&XBUFTYPE           SETC  'FIXED'     SET KEYWORD                       00855500
.*-------------------------------------------------------------------   00855600
.***AG.KKWRD03 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00855700
.ZG255A             AIF   (K'&XBUFTYPE GT 0).ZG255C  KEYWORD            00855800
                    AIF   (K'&BUFTYPE(1) LE 0).ZG255B                   00855900
&ZMS                SETC  '"BUFTYPE='                                   00856000
&ZMS                SETC  '&ZMS.&BUFTYPE"'                              00856100
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     00856200
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           00856300
&ZMS                SETC  '&ZMS "PAGEELIG",'                            00856400
&ZMS                SETC  '&ZMS "PAGEABLE",'                            00856500
&ZMS                SETC  '&ZMS OR "FIXED".'                            00856600
                    MNOTE 8,' &ZMS '                                    00856700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00856800
.ZG255B             ANOP  ,                                             00856900
&XBUFTYPE           SETC  'PAGEELIG'  SET DEFAULT KEYWORD               00857000
.ZG255C             ANOP  ,                                             00857100
&ZXBUFTYPE          SETC  'INPUT'     SET IN/OUTPUT                     00857200
.*-------------------------------------------------------------------   00857300
.***AG.KKWRD04 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00857400
                    AIF   (K'&BUFTYPE(1) GT 0).ZG255D  VALID            00857500
&ZXBUFTYPE          SETC  ''          RESET IN/OUTPUT                   00857600
&ZMS                SETC  'THE'                                         00857700
&ZMS                SETC  '&ZMS "BUFTYPE" KEY AND ITS'                  00857800
&ZMS                SETC  '&ZMS ARGUMENT ARE REQUIRED.'                 00857900
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           00858000
&ZMS                SETC  '&ZMS "PAGEELIG",'                            00858100
&ZMS                SETC  '&ZMS "PAGEABLE",'                            00858200
&ZMS                SETC  '&ZMS OR "FIXED".'                            00858300
                    MNOTE 8,' &ZMS '                                    00858400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00858500
.ZG255D             ANOP  ,                                             00858600
.*----------------------------------------------------------------***   00858700
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00858800
                    AIF   (N'&CLEAR LE 1).ZG257A  CK NUM                00858900
&ZMS                SETC  '"CLEAR='                                     00859000
&ZMS                SETC  '&ZMS.&CLEAR"'                                00859100
&ZMS                SETC  '&ZMS "CLEAR"'                                00859200
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00859300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00859400
.ZG257A             ANOP  ,                                             00859500
.*-------------------------------------------------------------------   00859600
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00859700
&XCLEAR             SETC  ''          INITIALIZE XVARIABLE              00859800
.ZG258A   AIF   ('&CLEAR(1)' NE 'NO').ZG259A                            00859900
&XCLEAR             SETC  'NO'        SET KEYWORD                       00860000
.*-------------------------------------------------------------------   00860100
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00860200
.ZG259A   AIF   ('&CLEAR(1)' NE 'YES').ZG260A                           00860300
&XCLEAR             SETC  'YES'       SET KEYWORD                       00860400
.*-------------------------------------------------------------------   00860500
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00860600
.ZG260A             AIF   (K'&XCLEAR GT 0).ZG260C  KEYWORD              00860700
                    AIF   (K'&CLEAR(1) LE 0).ZG260B                     00860800
&ZMS                SETC  '"CLEAR='                                     00860900
&ZMS                SETC  '&ZMS.&CLEAR"'                                00861000
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     00861100
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           00861200
&ZMS                SETC  '&ZMS "NO"'                                   00861300
&ZMS                SETC  '&ZMS OR "YES".'                              00861400
                    MNOTE 8,' &ZMS '                                    00861500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00861600
.ZG260B             ANOP  ,                                             00861700
&XCLEAR             SETC  'NO'        SET DEFAULT KEYWORD               00861800
.ZG260C             ANOP  ,                                             00861900
&ZXCLEAR            SETC  'INPUT'     SET IN/OUTPUT                     00862000
.*----------------------------------------------------------------***   00862100
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00862200
                    AIF   (N'&CSMUSER LE 1).ZG262A  CK NUM              00862300
&ZMS                SETC  '"CSMUSER='                                   00862400
&ZMS                SETC  '&ZMS.&CSMUSER"'                              00862500
&ZMS                SETC  '&ZMS "CSMUSER"'                              00862600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00862700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00862800
.ZG262A             ANOP  ,                                             00862900
.*-------------------------------------------------------------------   00863000
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00863100
&XCSMUSER           SETC  ''          INITIALIZE XVARIABLE              00863200
.ZG263A   AIF   ('&CSMUSER(1)' NE 'NO').ZG264A                          00863300
&XCSMUSER           SETC  'NO'        SET KEYWORD                       00863400
.*-------------------------------------------------------------------   00863500
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00863600
.ZG264A   AIF   ('&CSMUSER(1)' NE 'YES').ZG265A                         00863700
&XCSMUSER           SETC  'YES'       SET KEYWORD                       00863800
.*-------------------------------------------------------------------   00863900
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00864000
.ZG265A             AIF   (K'&XCSMUSER GT 0).ZG265C  KEYWORD            00864100
                    AIF   (K'&CSMUSER(1) LE 0).ZG265B                   00864200
&ZMS                SETC  '"CSMUSER='                                   00864300
&ZMS                SETC  '&ZMS.&CSMUSER"'                              00864400
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     00864500
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           00864600
&ZMS                SETC  '&ZMS "NO"'                                   00864700
&ZMS                SETC  '&ZMS OR "YES".'                              00864800
                    MNOTE 8,' &ZMS '                                    00864900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00865000
.ZG265B             ANOP  ,                                             00865100
&XCSMUSER           SETC  'NO'        SET DEFAULT KEYWORD               00865200
.ZG265C             ANOP  ,                                             00865300
&ZXCSMUSER          SETC  'INPUT'     SET IN/OUTPUT                     00865400
.*-------------------------------------------------------------------   00865500
.***AG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START             00865600
                    AIF   ('&XMF' EQ 'M').ZG268  BYPASS IF MF=M         00865700
.*----------------------------------------------------------------***   00865800
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00865900
                    AIF   (N'&ERRBFLST LE 1).ZG267A  CK NUM             00866000
&ZMS                SETC  '"ERRBFLST='                                  00866100
&ZMS                SETC  '&ZMS.&ERRBFLST"'                             00866200
&ZMS                SETC  '&ZMS "ERRBFLST"'                             00866300
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00866400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00866500
.ZG267A             ANOP  ,                                             00866600
.*-------------------------------------------------------------------   00866700
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00866800
                    AIF   (K'&ERRBFLST(1) LE 0).ZG267C  NO PARM         00866900
&ZXERRBFLST         SETC  'OUTPUT'    SET OUTPUT                        00867000
&XERRBFLST          SETC  '&ERRBFLST(1)'        SET XVARIABLE           00867100
                    AIF   (N'&ERRBFLST GT 1).ZG267C                     00867200
&XERRBFLST          SETC  '&ERRBFLST'           SET XVARIABLE           00867300
.ZG267C             ANOP  ,                                             00867400
.*-------------------------------------------------------------------   00867500
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00867600
                    AIF   (K'&ZXERRBFLST LE 0).ZG267R  NOT I/O          00867700
                    AIF   ('&XERRBFLST'(1,1) NE '(').ZG267R             00867800
&ZCGPR              SETC  '&XERRBFLST'(2,K'&XERRBFLST-2)                00867900
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG267P                 00868000
                    AIF   (K'&ZCGPR GT 2).ZG267Q                        00868100
                    AIF   ('&ZCGPR' EQ '0').ZG267Q                      00868200
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00868300
                    AIF   (T'&ZCGPR NE 'N').ZG267Q  INVALID REG NAME    00868400
.ZG267P             ANOP  ,                                             00868500
                    AIF   (T'&ZCGPR NE 'N').ZG267R  NON NUMERIC         00868600
                    AIF   ('&ZCGPR' LT '2').ZG267Q                      00868700
                    AIF   ('&ZCGPR' LE '12').ZG267R                     00868800
.ZG267Q             ANOP  ,                                             00868900
&ZMS                SETC  '"ERRBFLST='                                  00869000
&ZMS                SETC  '&ZMS.&ERRBFLST"'                             00869100
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00869200
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00869300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00869400
.ZG267R             ANOP  ,                                             00869500
.*-------------------------------------------------------------------   00869600
.***AG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END               00869700
.ZG268              ANOP  ,           END OF BYPASS CHECK               00869800
.*----------------------------------------------------------------***   00869900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00870000
                    AIF   (N'&FREERTN LE 1).ZG270A  CK NUM              00870100
&ZMS                SETC  '"FREERTN='                                   00870200
&ZMS                SETC  '&ZMS.&FREERTN"'                              00870300
&ZMS                SETC  '&ZMS "FREERTN"'                              00870400
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00870500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00870600
.ZG270A             ANOP  ,                                             00870700
.*-------------------------------------------------------------------   00870800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00870900
&ZXFREERTN          SETC  'INPUT'     SET IN/OUTPUT                     00871000
&XFREERTN           SETC  'CSM'                                         00871100
                    AIF   (K'&FREERTN(1) LE 0).ZG270B  PARM             00871200
&XFREERTN           SETC  '&FREERTN(1)'         SET XVARIABLE           00871300
                    AIF   (N'&FREERTN GT 1).ZG270B  MULTI               00871400
&XFREERTN           SETC  '&FREERTN'  SET XVARIABLE                     00871500
.ZG270B             ANOP  ,                                             00871600
.*-------------------------------------------------------------------   00871700
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00871800
                    AIF   (K'&ZXFREERTN LE 0).ZG270R  NOT I/O           00871900
         AIF   ('&XFREERTN' EQ 'CSM').ZG270R                            00872000
                    AIF   ('&XFREERTN'(1,1) NE '(').ZG270R              00872100
&ZCGPR              SETC  '&XFREERTN'(2,K'&XFREERTN-2)                  00872200
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG270P                 00872300
                    AIF   (K'&ZCGPR GT 2).ZG270Q                        00872400
                    AIF   ('&ZCGPR' EQ '0').ZG270Q                      00872500
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00872600
                    AIF   (T'&ZCGPR NE 'N').ZG270Q  INVALID REG NAME    00872700
.ZG270P             ANOP  ,                                             00872800
                    AIF   (T'&ZCGPR NE 'N').ZG270R  NON NUMERIC         00872900
                    AIF   ('&ZCGPR' LT '2').ZG270Q                      00873000
                    AIF   ('&ZCGPR' LE '12').ZG270R                     00873100
.ZG270Q             ANOP  ,                                             00873200
&ZMS                SETC  '"FREERTN='                                   00873300
&ZMS                SETC  '&ZMS.&FREERTN"'                              00873400
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00873500
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00873600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00873700
.ZG270R             ANOP  ,                                             00873800
.*----------------------------------------------------------------***   00873900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00874000
                    AIF   (N'&GAP LE 1).ZG273A  CK NUM                  00874100
&ZMS                SETC  '"GAP='                                       00874200
&ZMS                SETC  '&ZMS.&GAP"'                                  00874300
&ZMS                SETC  '&ZMS "GAP"'                                  00874400
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00874500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00874600
.ZG273A             ANOP  ,                                             00874700
.*-------------------------------------------------------------------   00874800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00874900
&ZXGAP              SETC  'INPUT'     SET IN/OUTPUT                     00875000
&XGAP               SETC  '0'                                           00875100
                    AIF   (K'&GAP(1) LE 0).ZG273B  PARM                 00875200
&XGAP               SETC  '&GAP(1)'   SET XVARIABLE                     00875300
                    AIF   (N'&GAP GT 1).ZG273B  MULTI                   00875400
&XGAP               SETC  '&GAP'      SET XVARIABLE                     00875500
.ZG273B             ANOP  ,                                             00875600
.*-------------------------------------------------------------------   00875700
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00875800
                    AIF   (K'&ZXGAP LE 0).ZG273R  NOT I/O               00875900
         AIF   ('&XGAP' EQ '0').ZG273R                                  00876000
                    AIF   ('&XGAP'(1,1) NE '(').ZG273R                  00876100
&ZCGPR              SETC  '&XGAP'(2,K'&XGAP-2)                          00876200
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG273P                 00876300
                    AIF   (K'&ZCGPR GT 2).ZG273Q                        00876400
                    AIF   ('&ZCGPR' EQ '0').ZG273Q                      00876500
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00876600
                    AIF   (T'&ZCGPR NE 'N').ZG273Q  INVALID REG NAME    00876700
.ZG273P             ANOP  ,                                             00876800
                    AIF   (T'&ZCGPR NE 'N').ZG273R  NON NUMERIC         00876900
                    AIF   ('&ZCGPR' LT '2').ZG273Q                      00877000
                    AIF   ('&ZCGPR' LE '12').ZG273R                     00877100
.ZG273Q             ANOP  ,                                             00877200
&ZMS                SETC  '"GAP='                                       00877300
&ZMS                SETC  '&ZMS.&GAP"'                                  00877400
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00877500
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00877600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00877700
.ZG273R             ANOP  ,                                             00877800
.*----------------------------------------------------------------***   00877900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00878000
                    AIF   (N'&OWNERID LE 1).ZG276A  CK NUM              00878100
&ZMS                SETC  '"OWNERID='                                   00878200
&ZMS                SETC  '&ZMS.&OWNERID"'                              00878300
&ZMS                SETC  '&ZMS "OWNERID"'                              00878400
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00878500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00878600
.ZG276A             ANOP  ,                                             00878700
.*-------------------------------------------------------------------   00878800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00878900
&ZXOWNERID          SETC  'INPUT'     SET IN/OUTPUT                     00879000
&XOWNERID           SETC  '0'                                           00879100
                    AIF   (K'&OWNERID(1) LE 0).ZG276B  PARM             00879200
&XOWNERID           SETC  '&OWNERID(1)'         SET XVARIABLE           00879300
                    AIF   (N'&OWNERID GT 1).ZG276B  MULTI               00879400
&XOWNERID           SETC  '&OWNERID'  SET XVARIABLE                     00879500
.ZG276B             ANOP  ,                                             00879600
.*-------------------------------------------------------------------   00879700
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00879800
                    AIF   (K'&ZXOWNERID LE 0).ZG276R  NOT I/O           00879900
         AIF   ('&XOWNERID' EQ '0').ZG276R                              00880000
                    AIF   ('&XOWNERID'(1,1) NE '(').ZG276R              00880100
&ZCGPR              SETC  '&XOWNERID'(2,K'&XOWNERID-2)                  00880200
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG276P                 00880300
                    AIF   (K'&ZCGPR GT 2).ZG276Q                        00880400
                    AIF   ('&ZCGPR' EQ '0').ZG276Q                      00880500
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00880600
                    AIF   (T'&ZCGPR NE 'N').ZG276Q  INVALID REG NAME    00880700
.ZG276P             ANOP  ,                                             00880800
                    AIF   (T'&ZCGPR NE 'N').ZG276R  NON NUMERIC         00880900
                    AIF   ('&ZCGPR' LT '2').ZG276Q                      00881000
                    AIF   ('&ZCGPR' LE '12').ZG276R                     00881100
.ZG276Q             ANOP  ,                                             00881200
&ZMS                SETC  '"OWNERID='                                   00881300
&ZMS                SETC  '&ZMS.&OWNERID"'                              00881400
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00881500
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00881600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00881700
.ZG276R             ANOP  ,                                             00881800
.*----------------------------------------------------------------***   00881900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00882000
                    AIF   (N'&COMPID LE 1).ZG279A  CK NUM               00882100
&ZMS                SETC  '"COMPID='                                    00882200
&ZMS                SETC  '&ZMS.&COMPID"'                               00882300
&ZMS                SETC  '&ZMS "COMPID"'                               00882400
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00882500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00882600
.ZG279A             ANOP  ,                                             00882700
.*-------------------------------------------------------------------   00882800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00882900
&ZXCOMPID           SETC  'INPUT'     SET IN/OUTPUT                     00883000
&XCOMPID            SETC  '0'                                           00883100
                    AIF   (K'&COMPID(1) LE 0).ZG279B  PARM              00883200
&XCOMPID            SETC  '&COMPID(1)'          SET XVARIABLE           00883300
                    AIF   (N'&COMPID GT 1).ZG279B  MULTI                00883400
&XCOMPID            SETC  '&COMPID'   SET XVARIABLE                     00883500
.ZG279B             ANOP  ,                                             00883600
.*-------------------------------------------------------------------   00883700
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00883800
                    AIF   (K'&ZXCOMPID LE 0).ZG279R  NOT I/O            00883900
         AIF   ('&XCOMPID' EQ '0').ZG279R                               00884000
                    AIF   ('&XCOMPID'(1,1) NE '(').ZG279R               00884100
&ZCGPR              SETC  '&XCOMPID'(2,K'&XCOMPID-2)                    00884200
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG279P                 00884300
                    AIF   (K'&ZCGPR GT 2).ZG279Q                        00884400
                    AIF   ('&ZCGPR' EQ '0').ZG279Q                      00884500
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00884600
                    AIF   (T'&ZCGPR NE 'N').ZG279Q  INVALID REG NAME    00884700
.ZG279P             ANOP  ,                                             00884800
                    AIF   (T'&ZCGPR NE 'N').ZG279R  NON NUMERIC         00884900
                    AIF   ('&ZCGPR' LT '2').ZG279Q                      00885000
                    AIF   ('&ZCGPR' LE '12').ZG279R                     00885100
.ZG279Q             ANOP  ,                                             00885200
&ZMS                SETC  '"COMPID='                                    00885300
&ZMS                SETC  '&ZMS.&COMPID"'                               00885400
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00885500
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00885600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00885700
.ZG279R             ANOP  ,                                             00885800
.*----------------------------------------------------------------***   00885900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00886000
                    AIF   (N'&COMPUSER LE 1).ZG282A  CK NUM             00886100
&ZMS                SETC  '"COMPUSER='                                  00886200
&ZMS                SETC  '&ZMS.&COMPUSER"'                             00886300
&ZMS                SETC  '&ZMS "COMPUSER"'                             00886400
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00886500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00886600
.ZG282A             ANOP  ,                                             00886700
.*-------------------------------------------------------------------   00886800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00886900
&ZXCOMPUSER         SETC  'INPUT'     SET IN/OUTPUT                     00887000
&XCOMPUSER          SETC  '0'                                           00887100
                    AIF   (K'&COMPUSER(1) LE 0).ZG282B  PARM            00887200
&XCOMPUSER          SETC  '&COMPUSER(1)'        SET XVARIABLE           00887300
                    AIF   (N'&COMPUSER GT 1).ZG282B  MULTI              00887400
&XCOMPUSER          SETC  '&COMPUSER'           SET XVARIABLE           00887500
.ZG282B             ANOP  ,                                             00887600
.*-------------------------------------------------------------------   00887700
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00887800
                    AIF   (K'&ZXCOMPUSER LE 0).ZG282R  NOT I/O          00887900
         AIF   ('&XCOMPUSER' EQ '0').ZG282R                             00888000
                    AIF   ('&XCOMPUSER'(1,1) NE '(').ZG282R             00888100
&ZCGPR              SETC  '&XCOMPUSER'(2,K'&XCOMPUSER-2)                00888200
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG282P                 00888300
                    AIF   (K'&ZCGPR GT 2).ZG282Q                        00888400
                    AIF   ('&ZCGPR' EQ '0').ZG282Q                      00888500
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00888600
                    AIF   (T'&ZCGPR NE 'N').ZG282Q  INVALID REG NAME    00888700
.ZG282P             ANOP  ,                                             00888800
                    AIF   (T'&ZCGPR NE 'N').ZG282R  NON NUMERIC         00888900
                    AIF   ('&ZCGPR' LT '2').ZG282Q                      00889000
                    AIF   ('&ZCGPR' LE '12').ZG282R                     00889100
.ZG282Q             ANOP  ,                                             00889200
&ZMS                SETC  '"COMPUSER='                                  00889300
&ZMS                SETC  '&ZMS.&COMPUSER"'                             00889400
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00889500
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00889600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00889700
.ZG282R             ANOP  ,                                             00889800
.*----------------------------------------------------------------***   00889900
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00890000
                    AIF   (N'&POOLTOKN LE 1).ZG285A  CK NUM             00890100
&ZMS                SETC  '"POOLTOKN='                                  00890200
&ZMS                SETC  '&ZMS.&POOLTOKN"'                             00890300
&ZMS                SETC  '&ZMS "POOLTOKN"'                             00890400
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00890500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00890600
.ZG285A             ANOP  ,                                             00890700
.*-------------------------------------------------------------------   00890800
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00890900
&ZXPOOLTOKN         SETC  'INPUT'     SET IN/OUTPUT                     00891000
&XPOOLTOKN          SETC  '&POOLTOKN(1)'        SET XVARIABLE           00891100
                    AIF   (N'&POOLTOKN GT 1).ZG285B  MULTI PARMS        00891200
&XPOOLTOKN          SETC  '&POOLTOKN'           SET XVARIABLE           00891300
.ZG285B             AIF   (K'&POOLTOKN(1) GT 0).ZG285C                  00891400
&ZXPOOLTOKN         SETC  ''          RESET IN/OUTPUT                   00891500
&ZMS                SETC  ' '                                           00891600
&ZMS                SETC  '&ZMS "POOLTOKN" KEY AND ITS'                 00891700
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00891800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00891900
.ZG285C             ANOP  ,                                             00892000
.*-------------------------------------------------------------------   00892100
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00892200
                    AIF   (K'&ZXPOOLTOKN LE 0).ZG285R  NOT I/O          00892300
                    AIF   ('&XPOOLTOKN'(1,1) NE '(').ZG285R             00892400
&ZCGPR              SETC  '&XPOOLTOKN'(2,K'&XPOOLTOKN-2)                00892500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG285P                 00892600
                    AIF   (K'&ZCGPR GT 2).ZG285Q                        00892700
                    AIF   ('&ZCGPR' EQ '0').ZG285Q                      00892800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00892900
                    AIF   (T'&ZCGPR NE 'N').ZG285Q  INVALID REG NAME    00893000
.ZG285P             ANOP  ,                                             00893100
                    AIF   (T'&ZCGPR NE 'N').ZG285R  NON NUMERIC         00893200
                    AIF   ('&ZCGPR' LT '2').ZG285Q                      00893300
                    AIF   ('&ZCGPR' LE '12').ZG285R                     00893400
.ZG285Q             ANOP  ,                                             00893500
&ZMS                SETC  '"POOLTOKN='                                  00893600
&ZMS                SETC  '&ZMS.&POOLTOKN"'                             00893700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00893800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00893900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00894000
.ZG285R             ANOP  ,                                             00894100
.*----------------------------------------------------------------***   00894200
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00894300
                    AIF   (N'&TASKID LE 1).ZG288A  CK NUM               00894400
&ZMS                SETC  '"TASKID='                                    00894500
&ZMS                SETC  '&ZMS.&TASKID"'                               00894600
&ZMS                SETC  '&ZMS "TASKID"'                               00894700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00894800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00894900
.ZG288A             ANOP  ,                                             00895000
.*-------------------------------------------------------------------   00895100
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00895200
&ZXTASKID           SETC  'INPUT'     SET IN/OUTPUT                     00895300
&XTASKID            SETC  '0'                                           00895400
                    AIF   (K'&TASKID(1) LE 0).ZG288B  PARM              00895500
&XTASKID            SETC  '&TASKID(1)'          SET XVARIABLE           00895600
                    AIF   (N'&TASKID GT 1).ZG288B  MULTI                00895700
&XTASKID            SETC  '&TASKID'   SET XVARIABLE                     00895800
.ZG288B             ANOP  ,                                             00895900
.*-------------------------------------------------------------------   00896000
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00896100
                    AIF   (K'&ZXTASKID LE 0).ZG288R  NOT I/O            00896200
         AIF   ('&XTASKID' EQ '0').ZG288R                               00896300
                    AIF   ('&XTASKID'(1,1) NE '(').ZG288R               00896400
&ZCGPR              SETC  '&XTASKID'(2,K'&XTASKID-2)                    00896500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG288P                 00896600
                    AIF   (K'&ZCGPR GT 2).ZG288Q                        00896700
                    AIF   ('&ZCGPR' EQ '0').ZG288Q                      00896800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00896900
                    AIF   (T'&ZCGPR NE 'N').ZG288Q  INVALID REG NAME    00897000
.ZG288P             ANOP  ,                                             00897100
                    AIF   (T'&ZCGPR NE 'N').ZG288R  NON NUMERIC         00897200
                    AIF   ('&ZCGPR' LT '2').ZG288Q                      00897300
                    AIF   ('&ZCGPR' LE '12').ZG288R                     00897400
.ZG288Q             ANOP  ,                                             00897500
&ZMS                SETC  '"TASKID='                                    00897600
&ZMS                SETC  '&ZMS.&TASKID"'                               00897700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00897800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00897900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00898000
.ZG288R             ANOP  ,                                             00898100
.*----------------------------------------------------------------***   00898200
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00898300
                    AIF   (N'&THREAD LE 1).ZG291A  CK NUM               00898400
&ZMS                SETC  '"THREAD='                                    00898500
&ZMS                SETC  '&ZMS.&THREAD"'                               00898600
&ZMS                SETC  '&ZMS "THREAD"'                               00898700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00898800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00898900
.ZG291A             ANOP  ,                                             00899000
.*-------------------------------------------------------------------   00899100
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00899200
&ZXTHREAD           SETC  'INPUT'     SET IN/OUTPUT                     00899300
&XTHREAD            SETC  '0'                                           00899400
                    AIF   (K'&THREAD(1) LE 0).ZG291B  PARM              00899500
&XTHREAD            SETC  '&THREAD(1)'          SET XVARIABLE           00899600
                    AIF   (N'&THREAD GT 1).ZG291B  MULTI                00899700
&XTHREAD            SETC  '&THREAD'   SET XVARIABLE                     00899800
.ZG291B             ANOP  ,                                             00899900
.*-------------------------------------------------------------------   00900000
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00900100
                    AIF   (K'&ZXTHREAD LE 0).ZG291R  NOT I/O            00900200
         AIF   ('&XTHREAD' EQ '0').ZG291R                               00900300
                    AIF   ('&XTHREAD'(1,1) NE '(').ZG291R               00900400
&ZCGPR              SETC  '&XTHREAD'(2,K'&XTHREAD-2)                    00900500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG291P                 00900600
                    AIF   (K'&ZCGPR GT 2).ZG291Q                        00900700
                    AIF   ('&ZCGPR' EQ '0').ZG291Q                      00900800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00900900
                    AIF   (T'&ZCGPR NE 'N').ZG291Q  INVALID REG NAME    00901000
.ZG291P             ANOP  ,                                             00901100
                    AIF   (T'&ZCGPR NE 'N').ZG291R  NON NUMERIC         00901200
                    AIF   ('&ZCGPR' LT '2').ZG291Q                      00901300
                    AIF   ('&ZCGPR' LE '12').ZG291R                     00901400
.ZG291Q             ANOP  ,                                             00901500
&ZMS                SETC  '"THREAD='                                    00901600
&ZMS                SETC  '&ZMS.&THREAD"'                               00901700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00901800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00901900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00902000
.ZG291R             ANOP  ,                                             00902100
.*----------------------------------------------------------------***   00902200
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00902300
                    AIF   (N'&UTILRTN LE 1).ZG294A  CK NUM              00902400
&ZMS                SETC  '"UTILRTN='                                   00902500
&ZMS                SETC  '&ZMS.&UTILRTN"'                              00902600
&ZMS                SETC  '&ZMS "UTILRTN"'                              00902700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00902800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00902900
.ZG294A             ANOP  ,                                             00903000
.*-------------------------------------------------------------------   00903100
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00903200
&ZXUTILRTN          SETC  'INPUT'     SET IN/OUTPUT                     00903300
&XUTILRTN           SETC  '0'                                           00903400
                    AIF   (K'&UTILRTN(1) LE 0).ZG294B  PARM             00903500
&XUTILRTN           SETC  '&UTILRTN(1)'         SET XVARIABLE           00903600
                    AIF   (N'&UTILRTN GT 1).ZG294B  MULTI               00903700
&XUTILRTN           SETC  '&UTILRTN'  SET XVARIABLE                     00903800
.ZG294B             ANOP  ,                                             00903900
.*-------------------------------------------------------------------   00904000
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00904100
                    AIF   (K'&ZXUTILRTN LE 0).ZG294R  NOT I/O           00904200
         AIF   ('&XUTILRTN' EQ '0').ZG294R                              00904300
                    AIF   ('&XUTILRTN'(1,1) NE '(').ZG294R              00904400
&ZCGPR              SETC  '&XUTILRTN'(2,K'&XUTILRTN-2)                  00904500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG294P                 00904600
                    AIF   (K'&ZCGPR GT 2).ZG294Q                        00904700
                    AIF   ('&ZCGPR' EQ '0').ZG294Q                      00904800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00904900
                    AIF   (T'&ZCGPR NE 'N').ZG294Q  INVALID REG NAME    00905000
.ZG294P             ANOP  ,                                             00905100
                    AIF   (T'&ZCGPR NE 'N').ZG294R  NON NUMERIC         00905200
                    AIF   ('&ZCGPR' LT '2').ZG294Q                      00905300
                    AIF   ('&ZCGPR' LE '12').ZG294R                     00905400
.ZG294Q             ANOP  ,                                             00905500
&ZMS                SETC  '"UTILRTN='                                   00905600
&ZMS                SETC  '&ZMS.&UTILRTN"'                              00905700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00905800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00905900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00906000
.ZG294R             ANOP  ,                                             00906100
.*----------------------------------------------------------------***   00906200
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00906300
                    AIF   (N'&WAIT LE 1).ZG297A  CK NUM                 00906400
&ZMS                SETC  '"WAIT='                                      00906500
&ZMS                SETC  '&ZMS.&WAIT"'                                 00906600
&ZMS                SETC  '&ZMS "WAIT"'                                 00906700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00906800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00906900
.ZG297A             ANOP  ,                                             00907000
.*-------------------------------------------------------------------   00907100
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00907200
&XWAIT              SETC  ''          INITIALIZE XVARIABLE              00907300
.ZG298A   AIF   ('&WAIT(1)' NE 'NO').ZG299A                             00907400
&XWAIT              SETC  'NO'        SET KEYWORD                       00907500
.*-------------------------------------------------------------------   00907600
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00907700
.ZG299A   AIF   ('&WAIT(1)' NE 'YES').ZG300A                            00907800
&XWAIT              SETC  'YES'       SET KEYWORD                       00907900
.*-------------------------------------------------------------------   00908000
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00908100
.ZG300A   AIF   ('&WAIT(1)' NE 'EXPAND').ZG301A                         00908200
&XWAIT              SETC  'EXPAND'    SET KEYWORD                       00908300
.*-------------------------------------------------------------------   00908400
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00908500
.ZG301A             AIF   (K'&XWAIT GT 0).ZG301C  KEYWORD               00908600
                    AIF   (K'&WAIT(1) LE 0).ZG301B                      00908700
&ZMS                SETC  '"WAIT='                                      00908800
&ZMS                SETC  '&ZMS.&WAIT"'                                 00908900
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     00909000
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           00909100
&ZMS                SETC  '&ZMS "NO",'                                  00909200
&ZMS                SETC  '&ZMS "YES",'                                 00909300
&ZMS                SETC  '&ZMS OR "EXPAND".'                           00909400
                    MNOTE 8,' &ZMS '                                    00909500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00909600
.ZG301B             ANOP  ,                                             00909700
&XWAIT              SETC  'NO'        SET DEFAULT KEYWORD               00909800
.ZG301C             ANOP  ,                                             00909900
&ZXWAIT             SETC  'INPUT'     SET IN/OUTPUT                     00910000
.*-------------------------------------------------------------------   00910100
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00910200
.ZG302              ANOP  ,                                             00910300
&ZTLC               SETC 'PAGE_BUFFER'                                  00910400
                    AIF   ('&REQUEST(1)' NE '&ZTLC').ZG333              00910500
&XREQUEST           SETC  'PAGE_BUFFER'         SET KEYWORD             00910600
                    AIF   (N'&REQUEST LE 1).ZG302A  CK NUM              00910700
&ZMS                SETC  '"REQUEST='                                   00910800
&ZMS                SETC  '&ZMS.&REQUEST"'                              00910900
&ZMS                SETC  '&ZMS "REQUEST"'                              00911000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00911100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00911200
.ZG302A             ANOP  ,                                             00911300
.*------------------------------------------------------------------    00911400
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00911500
&ZCVAL              SETC ''           CLEAR ERROR KEY ACCUMULATOR       00911600
.ZG302A0            AIF   (K'&CSMUSER LE 0).ZG302A1  OK                 00911700
&ZCVAL              SETC '&ZCVAL CSMUSER'       INCORRECT KEY USED      00911800
.ZG302A1            AIF   (K'&OWNERID LE 0).ZG302A2  OK                 00911900
&ZCVAL              SETC '&ZCVAL OWNERID'       INCORRECT KEY USED      00912000
.ZG302A2            AIF   (K'&TASKID LE 0).ZG302A3  OK                  00912100
&ZCVAL              SETC '&ZCVAL TASKID'        INCORRECT KEY USED      00912200
.ZG302A3            AIF   (K'&SKIPBUF LE 0).ZG302A4  OK                 00912300
&ZCVAL              SETC '&ZCVAL SKIPBUF'       INCORRECT KEY USED      00912400
.ZG302A4            AIF   (K'&PAD LE 0).ZG302A5  OK                     00912500
&ZCVAL              SETC '&ZCVAL PAD'           INCORRECT KEY USED      00912600
.ZG302A5            AIF   (K'&PADCHAR LE 0).ZG302A6  OK                 00912700
&ZCVAL              SETC '&ZCVAL PADCHAR'       INCORRECT KEY USED      00912800
.ZG302A6            AIF   (K'&SRCERRL LE 0).ZG302A7  OK                 00912900
&ZCVAL              SETC '&ZCVAL SRCERRL'       INCORRECT KEY USED      00913000
.ZG302A7            AIF   (K'&SRCGAP LE 0).ZG302A8  OK                  00913100
&ZCVAL              SETC '&ZCVAL SRCGAP'        INCORRECT KEY USED      00913200
.ZG302A8            AIF   (K'&SRCLIST LE 0).ZG302A9  OK                 00913300
&ZCVAL              SETC '&ZCVAL SRCLIST'       INCORRECT KEY USED      00913400
.ZG302A9            AIF   (K'&SRCLST64 LE 0).ZG302A10  OK               00913500
&ZCVAL              SETC '&ZCVAL SRCLST64'      INCORRECT KEY USED      00913600
.ZG302A10           AIF   (K'&SRCNUM LE 0).ZG302A11  OK                 00913700
&ZCVAL              SETC '&ZCVAL SRCNUM'        INCORRECT KEY USED      00913800
.ZG302A11           AIF   (K'&TARGERRL LE 0).ZG302A12  OK               00913900
&ZCVAL              SETC '&ZCVAL TARGERRL'      INCORRECT KEY USED      00914000
.ZG302A12           AIF   (K'&TARGGAP LE 0).ZG302A13  OK                00914100
&ZCVAL              SETC '&ZCVAL TARGGAP'       INCORRECT KEY USED      00914200
.ZG302A13           AIF   (K'&TARGLIST LE 0).ZG302A14  OK               00914300
&ZCVAL              SETC '&ZCVAL TARGLIST'      INCORRECT KEY USED      00914400
.ZG302A14           AIF   (K'&TARLST64 LE 0).ZG302A15  OK               00914500
&ZCVAL              SETC '&ZCVAL TARLST64'      INCORRECT KEY USED      00914600
.ZG302A15           AIF   (K'&TARGNUM LE 0).ZG302A16  OK                00914700
&ZCVAL              SETC '&ZCVAL TARGNUM'       INCORRECT KEY USED      00914800
.ZG302A16           AIF   (K'&BUFSIZE LE 0).ZG302A17  OK                00914900
&ZCVAL              SETC '&ZCVAL BUFSIZE'       INCORRECT KEY USED      00915000
.ZG302A17           AIF   (K'&BUFSOURC LE 0).ZG302A18  OK               00915100
&ZCVAL              SETC '&ZCVAL BUFSOURC'      INCORRECT KEY USED      00915200
.ZG302A18           AIF   (K'&BACK LE 0).ZG302A19  OK                   00915300
&ZCVAL              SETC '&ZCVAL BACK'          INCORRECT KEY USED      00915400
.ZG302A19           AIF   (K'&DS_INFO LE 0).ZG302A20  OK                00915500
&ZCVAL              SETC '&ZCVAL DS_INFO'       INCORRECT KEY USED      00915600
.ZG302A20           AIF   (K'&EXPBUF LE 0).ZG302A21  OK                 00915700
&ZCVAL              SETC '&ZCVAL EXPBUF'        INCORRECT KEY USED      00915800
.ZG302A21           AIF   (K'&INITBUF LE 0).ZG302A22  OK                00915900
&ZCVAL              SETC '&ZCVAL INITBUF'       INCORRECT KEY USED      00916000
.ZG302A22           AIF   (K'&MINFREE LE 0).ZG302A23  OK                00916100
&ZCVAL              SETC '&ZCVAL MINFREE'       INCORRECT KEY USED      00916200
.ZG302A23           AIF   (K'&RETPTOKN LE 0).ZG302A24  OK               00916300
&ZCVAL              SETC '&ZCVAL RETPTOKN'      INCORRECT KEY USED      00916400
.ZG302A24           AIF   (K'&STATAREA LE 0).ZG302A25  OK               00916500
&ZCVAL              SETC '&ZCVAL STATAREA'      INCORRECT KEY USED      00916600
.ZG302A25           AIF   (K'&POOLTOKN LE 0).ZG302A26  OK               00916700
&ZCVAL              SETC '&ZCVAL POOLTOKN'      INCORRECT KEY USED      00916800
.ZG302A26           AIF   (K'&WAIT LE 0).ZG302A27  OK                   00916900
&ZCVAL              SETC '&ZCVAL WAIT'          INCORRECT KEY USED      00917000
.ZG302A27           AIF   (K'&CLEAR LE 0).ZG302A28  OK                  00917100
&ZCVAL              SETC '&ZCVAL CLEAR'         INCORRECT KEY USED      00917200
.ZG302A28           AIF   (K'&FREETO LE 0).ZG302A29  OK                 00917300
&ZCVAL              SETC '&ZCVAL FREETO'        INCORRECT KEY USED      00917400
.ZG302A29           AIF   (K'&FREERTN LE 0).ZG302A30  OK                00917500
&ZCVAL              SETC '&ZCVAL FREERTN'       INCORRECT KEY USED      00917600
.ZG302A30           AIF   (K'&ZCVAL LE 0).ZG302A31  OK                  00917700
&ZCVAL              SETC '&ZCVAL'(2,K'&ZCVAL-1)                         00917800
                    AIF  (K'&ZCVAL LE 160).ZG302A31A                    00917900
&ZCVAL              SETC '&ZCVAL'(1,160)                                00918000
&ZCVAL              SETC '&ZCVAL....'                                   00918100
.ZG302A31A          ANOP                                                00918200
&ZMS                SETC  '"REQUEST'                                    00918300
&ZMS                SETC  '&ZMS.=&REQUEST"'                             00918400
&ZMS                SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'          00918500
                    MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'          00918600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00918700
.ZG302A31           ANOP  ,                                             00918800
.*----------------------------------------------------------------***   00918900
.***AG.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00919000
&XDUMMY8            SETC  ''          INITIALIZE XVARIABLE              00919100
                    AIF   (K'&BUFLIST LE 0).ZG304C                      00919200
&ZXDUMMY8           SETC  'INPUT'     SET IN/OUTPUT                     00919300
&XDUMMY8            SETC  'BUFLIST'   SET XVARIABLE                     00919400
&ZXBUFLIST          SETC  'INPUT'     SET IN/OUTPUT                     00919500
&XBUFLIST           SETC  '&BUFLIST(1)'         SET XVARIABLE PARM      00919600
                    AIF   (N'&BUFLIST GT 1).ZG304A                      00919700
&XBUFLIST           SETC  '&BUFLIST'  SET XVARIABLE PARM                00919800
.ZG304A             AIF   (N'&BUFLIST LE 1).ZG304B  CK NUM              00919900
&ZMS                SETC  '"BUFLIST='                                   00920000
&ZMS                SETC  '&ZMS.&BUFLIST"'                              00920100
&ZMS                SETC  '&ZMS "BUFLIST"'                              00920200
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00920300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00920400
.ZG304B             AIF   (K'&XBUFLIST GT 0).ZG304C  ONE PARM           00920500
&ZXDUMMY8           SETC  ''          RESET IN/OUTPUT                   00920600
&ZXBUFLIST          SETC  ''          RESET IN/OUTPUT                   00920700
&ZMS                SETC  ' '                                           00920800
&ZMS                SETC  '&ZMS "BUFLIST" KEY AND ITS'                  00920900
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00921000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00921100
.ZG304C             ANOP  ,                                             00921200
.*----------------------------------------------------------------***   00921300
.***AG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00921400
                    AIF   (K'&BUFLST64 LE 0).ZG305D  NO ME KEY          00921500
                    AIF   (N'&BUFLST64 LE 1).ZG305A  CK NUM             00921600
&ZMS                SETC  '"BUFLST64='                                  00921700
&ZMS                SETC  '&ZMS.&BUFLST64"'                             00921800
&ZMS                SETC  '&ZMS "BUFLST64"'                             00921900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00922000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00922100
.ZG305A             AIF   (K'&XDUMMY8 LE 0).ZG305B                      00922200
&ZMS                SETC  '"BUFLST64'                                   00922300
&ZMS                SETC  '&ZMS.=&BUFLST64"'                            00922400
&ZMS                SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'         00922500
&ZMS                SETC  '&ZMS "&XDUMMY8"'                             00922600
                    MNOTE 8,' &ZMS KEY.'                                00922700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00922800
                    AGO   .ZG305D                                       00922900
.*                                                                      00923000
.ZG305B             ANOP  ,                                             00923100
&ZXDUMMY8           SETC  'INPUT'     SET IN/OUTPUT                     00923200
&XDUMMY8            SETC  'BUFLST64'  SET XVARIABLE                     00923300
&ZXBUFLST64         SETC  'INPUT'     SET IN/OUTPUT                     00923400
&XBUFLST64          SETC  '&BUFLST64(1)'        SET XVARIABLE PARM      00923500
                    AIF   (N'&BUFLST64 GT 1).ZG305C                     00923600
&XBUFLST64          SETC  '&BUFLST64'           SET XVARIABLE PARM      00923700
.ZG305C             AIF   (K'&XBUFLST64 GT 0).ZG305D  ONE PARM          00923800
&ZXDUMMY8           SETC  ''          RESET IN/OUTPUT                   00923900
&ZXBUFLST64         SETC  ''          RESET IN/OUTPUT                   00924000
&ZMS                SETC  ' '                                           00924100
&ZMS                SETC  '&ZMS "BUFLST64" KEY AND ITS'                 00924200
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00924300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00924400
.ZG305D             ANOP  ,                                             00924500
.*------------------------------------------------------------------    00924600
.***AG.KME4Y09 NAME, RQD INPUT, ME KEYS -CHECK IF KEY ENTERED           00924700
                    AIF   (K'&XDUMMY8 GT 0).ZG306B                      00924800
&ZXDUMMY8           SETC  ''          RESET IN/OUTPUT                   00924900
&ZXBUFLIST          SETC  ''          RESET IN/OUTPUT                   00925000
&XDUMMY8            SETC  ''          ENSURE NULL                       00925100
&XBUFLIST           SETC  ''          ENSURE NULL                       00925200
&ZMS                SETC  'ONE OF THE FOLLOWING'                        00925300
&ZMS                SETC  '&ZMS MUTUALLY EXCLUSIVE KEY(S) IS'           00925400
&ZMS                SETC  '&ZMS REQUIRED:'                              00925500
&ZMS                SETC  '&ZMS "BUFLIST"'      VALID ME KEY            00925600
&ZMS                SETC  '&ZMS OR "BUFLST64".'  VALID ME KEY           00925700
                    MNOTE 8,' &ZMS '                                    00925800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00925900
.ZG306B             ANOP  ,                                             00926000
.*-------------------------------------------------------------------   00926100
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00926200
.ZG304ZY  AIF    ('&XDUMMY8' NE 'BUFLIST').ZG305ZY                      00926300
.*-------------------------------------------------------------------   00926400
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00926500
                    AIF   (K'&ZXBUFLIST LE 0).ZG304R  NOT I/O           00926600
                    AIF   ('&XBUFLIST'(1,1) NE '(').ZG304R              00926700
&ZCGPR              SETC  '&XBUFLIST'(2,K'&XBUFLIST-2)                  00926800
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG304P                 00926900
                    AIF   (K'&ZCGPR GT 2).ZG304Q                        00927000
                    AIF   ('&ZCGPR' EQ '0').ZG304Q                      00927100
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00927200
                    AIF   (T'&ZCGPR NE 'N').ZG304Q  INVALID REG NAME    00927300
.ZG304P             ANOP  ,                                             00927400
                    AIF   (T'&ZCGPR NE 'N').ZG304R  NON NUMERIC         00927500
                    AIF   ('&ZCGPR' LT '2').ZG304Q                      00927600
                    AIF   ('&ZCGPR' LE '12').ZG304R                     00927700
.ZG304Q             ANOP  ,                                             00927800
&ZMS                SETC  '"BUFLIST='                                   00927900
&ZMS                SETC  '&ZMS.&BUFLIST"'                              00928000
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00928100
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00928200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00928300
.ZG304R             ANOP  ,                                             00928400
.*-------------------------------------------------------------------   00928500
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00928600
.ZG305ZY  AIF    ('&XDUMMY8' NE 'BUFLST64').ZG306ZY                     00928700
.*-------------------------------------------------------------------   00928800
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00928900
                    AIF   (K'&ZXBUFLST64 LE 0).ZG305R  NOT I/O          00929000
                    AIF   ('&XBUFLST64'(1,1) NE '(').ZG305R             00929100
&ZCGPR              SETC  '&XBUFLST64'(2,K'&XBUFLST64-2)                00929200
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG305P                 00929300
                    AIF   (K'&ZCGPR GT 2).ZG305Q                        00929400
                    AIF   ('&ZCGPR' EQ '0').ZG305Q                      00929500
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00929600
                    AIF   (T'&ZCGPR NE 'N').ZG305Q  INVALID REG NAME    00929700
.ZG305P             ANOP  ,                                             00929800
                    AIF   (T'&ZCGPR NE 'N').ZG305R  NON NUMERIC         00929900
                    AIF   ('&ZCGPR' LT '2').ZG305Q                      00930000
                    AIF   ('&ZCGPR' LE '12').ZG305R                     00930100
.ZG305Q             ANOP  ,                                             00930200
&ZMS                SETC  '"BUFLST64='                                  00930300
&ZMS                SETC  '&ZMS.&BUFLST64"'                             00930400
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00930500
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00930600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00930700
.ZG305R             ANOP  ,                                             00930800
.*-------------------------------------------------------------------   00930900
.***AG.KMEKY15 NAME, RQD INPUT, ME KEYS -END                            00931000
.ZG306ZY            ANOP ,            END MUTUALLY EXCLUSIVE KEYS       00931100
.*----------------------------------------------------------------***   00931200
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00931300
                    AIF   (N'&BUFNUM LE 1).ZG308A  CK NUM               00931400
&ZMS                SETC  '"BUFNUM='                                    00931500
&ZMS                SETC  '&ZMS.&BUFNUM"'                               00931600
&ZMS                SETC  '&ZMS "BUFNUM"'                               00931700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00931800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00931900
.ZG308A             ANOP  ,                                             00932000
.*-------------------------------------------------------------------   00932100
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00932200
&ZXBUFNUM           SETC  'INPUT'     SET IN/OUTPUT                     00932300
&XBUFNUM            SETC  '&BUFNUM(1)'          SET XVARIABLE           00932400
                    AIF   (N'&BUFNUM GT 1).ZG308B  MULTI PARMS          00932500
&XBUFNUM            SETC  '&BUFNUM'   SET XVARIABLE                     00932600
.ZG308B             AIF   (K'&BUFNUM(1) GT 0).ZG308C                    00932700
&ZXBUFNUM           SETC  ''          RESET IN/OUTPUT                   00932800
&ZMS                SETC  ' '                                           00932900
&ZMS                SETC  '&ZMS "BUFNUM" KEY AND ITS'                   00933000
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00933100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00933200
.ZG308C             ANOP  ,                                             00933300
.*-------------------------------------------------------------------   00933400
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00933500
                    AIF   (K'&ZXBUFNUM LE 0).ZG308R  NOT I/O            00933600
                    AIF   ('&XBUFNUM'(1,1) NE '(').ZG308R               00933700
&ZCGPR              SETC  '&XBUFNUM'(2,K'&XBUFNUM-2)                    00933800
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG308P                 00933900
                    AIF   (K'&ZCGPR GT 2).ZG308Q                        00934000
                    AIF   ('&ZCGPR' EQ '0').ZG308Q                      00934100
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00934200
                    AIF   (T'&ZCGPR NE 'N').ZG308Q  INVALID REG NAME    00934300
.ZG308P             ANOP  ,                                             00934400
                    AIF   (T'&ZCGPR NE 'N').ZG308R  NON NUMERIC         00934500
                    AIF   ('&ZCGPR' LT '2').ZG308Q                      00934600
                    AIF   ('&ZCGPR' LE '12').ZG308R                     00934700
.ZG308Q             ANOP  ,                                             00934800
&ZMS                SETC  '"BUFNUM='                                    00934900
&ZMS                SETC  '&ZMS.&BUFNUM"'                               00935000
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00935100
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00935200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00935300
.ZG308R             ANOP  ,                                             00935400
.*----------------------------------------------------------------***   00935500
.***AG.KKWRD01 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00935600
                    AIF   (N'&BUFTYPE LE 1).ZG311A  CK NUM              00935700
&ZMS                SETC  '"BUFTYPE='                                   00935800
&ZMS                SETC  '&ZMS.&BUFTYPE"'                              00935900
&ZMS                SETC  '&ZMS "BUFTYPE"'                              00936000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00936100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00936200
.ZG311A             ANOP  ,                                             00936300
.*-------------------------------------------------------------------   00936400
.***AG.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00936500
&XBUFTYPE           SETC  ''          INITIALIZE XVARIABLE              00936600
.ZG312A   AIF   ('&BUFTYPE(1)' NE 'PAGEELIG').ZG313A                    00936700
&XBUFTYPE           SETC  'PAGEELIG'  SET KEYWORD                       00936800
.*-------------------------------------------------------------------   00936900
.***AG.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00937000
.ZG313A   AIF   ('&BUFTYPE(1)' NE 'PAGEABLE').ZG314A                    00937100
&XBUFTYPE           SETC  'PAGEABLE'  SET KEYWORD                       00937200
.*-------------------------------------------------------------------   00937300
.***AG.KKWRD03 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00937400
.ZG314A             AIF   (K'&XBUFTYPE GT 0).ZG314C  KEYWORD            00937500
                    AIF   (K'&BUFTYPE(1) LE 0).ZG314B                   00937600
&ZMS                SETC  '"BUFTYPE='                                   00937700
&ZMS                SETC  '&ZMS.&BUFTYPE"'                              00937800
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     00937900
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           00938000
&ZMS                SETC  '&ZMS "PAGEELIG"'                             00938100
&ZMS                SETC  '&ZMS OR "PAGEABLE".'                         00938200
                    MNOTE 8,' &ZMS '                                    00938300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00938400
.ZG314B             ANOP  ,                                             00938500
&XBUFTYPE           SETC  'PAGEELIG'  SET DEFAULT KEYWORD               00938600
.ZG314C             ANOP  ,                                             00938700
&ZXBUFTYPE          SETC  'INPUT'     SET IN/OUTPUT                     00938800
.*-------------------------------------------------------------------   00938900
.***AG.KKWRD04 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00939000
                    AIF   (K'&BUFTYPE(1) GT 0).ZG314D  VALID            00939100
&ZXBUFTYPE          SETC  ''          RESET IN/OUTPUT                   00939200
&ZMS                SETC  'THE'                                         00939300
&ZMS                SETC  '&ZMS "BUFTYPE" KEY AND ITS'                  00939400
&ZMS                SETC  '&ZMS ARGUMENT ARE REQUIRED.'                 00939500
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           00939600
&ZMS                SETC  '&ZMS "PAGEELIG"'                             00939700
&ZMS                SETC  '&ZMS OR "PAGEABLE".'                         00939800
                    MNOTE 8,' &ZMS '                                    00939900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00940000
.ZG314D             ANOP  ,                                             00940100
.*----------------------------------------------------------------***   00940200
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00940300
                    AIF   (N'&GAP LE 1).ZG316A  CK NUM                  00940400
&ZMS                SETC  '"GAP='                                       00940500
&ZMS                SETC  '&ZMS.&GAP"'                                  00940600
&ZMS                SETC  '&ZMS "GAP"'                                  00940700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00940800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00940900
.ZG316A             ANOP  ,                                             00941000
.*-------------------------------------------------------------------   00941100
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00941200
&ZXGAP              SETC  'INPUT'     SET IN/OUTPUT                     00941300
&XGAP               SETC  '0'                                           00941400
                    AIF   (K'&GAP(1) LE 0).ZG316B  PARM                 00941500
&XGAP               SETC  '&GAP(1)'   SET XVARIABLE                     00941600
                    AIF   (N'&GAP GT 1).ZG316B  MULTI                   00941700
&XGAP               SETC  '&GAP'      SET XVARIABLE                     00941800
.ZG316B             ANOP  ,                                             00941900
.*-------------------------------------------------------------------   00942000
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00942100
                    AIF   (K'&ZXGAP LE 0).ZG316R  NOT I/O               00942200
         AIF   ('&XGAP' EQ '0').ZG316R                                  00942300
                    AIF   ('&XGAP'(1,1) NE '(').ZG316R                  00942400
&ZCGPR              SETC  '&XGAP'(2,K'&XGAP-2)                          00942500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG316P                 00942600
                    AIF   (K'&ZCGPR GT 2).ZG316Q                        00942700
                    AIF   ('&ZCGPR' EQ '0').ZG316Q                      00942800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00942900
                    AIF   (T'&ZCGPR NE 'N').ZG316Q  INVALID REG NAME    00943000
.ZG316P             ANOP  ,                                             00943100
                    AIF   (T'&ZCGPR NE 'N').ZG316R  NON NUMERIC         00943200
                    AIF   ('&ZCGPR' LT '2').ZG316Q                      00943300
                    AIF   ('&ZCGPR' LE '12').ZG316R                     00943400
.ZG316Q             ANOP  ,                                             00943500
&ZMS                SETC  '"GAP='                                       00943600
&ZMS                SETC  '&ZMS.&GAP"'                                  00943700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00943800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00943900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00944000
.ZG316R             ANOP  ,                                             00944100
.*-------------------------------------------------------------------   00944200
.***AG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START             00944300
                    AIF   ('&XMF' EQ 'M').ZG320  BYPASS IF MF=M         00944400
.*----------------------------------------------------------------***   00944500
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00944600
                    AIF   (N'&ERRBFLST LE 1).ZG319A  CK NUM             00944700
&ZMS                SETC  '"ERRBFLST='                                  00944800
&ZMS                SETC  '&ZMS.&ERRBFLST"'                             00944900
&ZMS                SETC  '&ZMS "ERRBFLST"'                             00945000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00945100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00945200
.ZG319A             ANOP  ,                                             00945300
.*-------------------------------------------------------------------   00945400
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00945500
                    AIF   (K'&ERRBFLST(1) LE 0).ZG319C  NO PARM         00945600
&ZXERRBFLST         SETC  'OUTPUT'    SET OUTPUT                        00945700
&XERRBFLST          SETC  '&ERRBFLST(1)'        SET XVARIABLE           00945800
                    AIF   (N'&ERRBFLST GT 1).ZG319C                     00945900
&XERRBFLST          SETC  '&ERRBFLST'           SET XVARIABLE           00946000
.ZG319C             ANOP  ,                                             00946100
.*-------------------------------------------------------------------   00946200
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00946300
                    AIF   (K'&ZXERRBFLST LE 0).ZG319R  NOT I/O          00946400
                    AIF   ('&XERRBFLST'(1,1) NE '(').ZG319R             00946500
&ZCGPR              SETC  '&XERRBFLST'(2,K'&XERRBFLST-2)                00946600
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG319P                 00946700
                    AIF   (K'&ZCGPR GT 2).ZG319Q                        00946800
                    AIF   ('&ZCGPR' EQ '0').ZG319Q                      00946900
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00947000
                    AIF   (T'&ZCGPR NE 'N').ZG319Q  INVALID REG NAME    00947100
.ZG319P             ANOP  ,                                             00947200
                    AIF   (T'&ZCGPR NE 'N').ZG319R  NON NUMERIC         00947300
                    AIF   ('&ZCGPR' LT '2').ZG319Q                      00947400
                    AIF   ('&ZCGPR' LE '12').ZG319R                     00947500
.ZG319Q             ANOP  ,                                             00947600
&ZMS                SETC  '"ERRBFLST='                                  00947700
&ZMS                SETC  '&ZMS.&ERRBFLST"'                             00947800
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00947900
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00948000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00948100
.ZG319R             ANOP  ,                                             00948200
.*-------------------------------------------------------------------   00948300
.***AG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END               00948400
.ZG320              ANOP  ,           END OF BYPASS CHECK               00948500
.*----------------------------------------------------------------***   00948600
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00948700
                    AIF   (N'&COMPID LE 1).ZG322A  CK NUM               00948800
&ZMS                SETC  '"COMPID='                                    00948900
&ZMS                SETC  '&ZMS.&COMPID"'                               00949000
&ZMS                SETC  '&ZMS "COMPID"'                               00949100
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00949200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00949300
.ZG322A             ANOP  ,                                             00949400
.*-------------------------------------------------------------------   00949500
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00949600
&ZXCOMPID           SETC  'INPUT'     SET IN/OUTPUT                     00949700
&XCOMPID            SETC  '0'                                           00949800
                    AIF   (K'&COMPID(1) LE 0).ZG322B  PARM              00949900
&XCOMPID            SETC  '&COMPID(1)'          SET XVARIABLE           00950000
                    AIF   (N'&COMPID GT 1).ZG322B  MULTI                00950100
&XCOMPID            SETC  '&COMPID'   SET XVARIABLE                     00950200
.ZG322B             ANOP  ,                                             00950300
.*-------------------------------------------------------------------   00950400
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00950500
                    AIF   (K'&ZXCOMPID LE 0).ZG322R  NOT I/O            00950600
         AIF   ('&XCOMPID' EQ '0').ZG322R                               00950700
                    AIF   ('&XCOMPID'(1,1) NE '(').ZG322R               00950800
&ZCGPR              SETC  '&XCOMPID'(2,K'&XCOMPID-2)                    00950900
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG322P                 00951000
                    AIF   (K'&ZCGPR GT 2).ZG322Q                        00951100
                    AIF   ('&ZCGPR' EQ '0').ZG322Q                      00951200
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00951300
                    AIF   (T'&ZCGPR NE 'N').ZG322Q  INVALID REG NAME    00951400
.ZG322P             ANOP  ,                                             00951500
                    AIF   (T'&ZCGPR NE 'N').ZG322R  NON NUMERIC         00951600
                    AIF   ('&ZCGPR' LT '2').ZG322Q                      00951700
                    AIF   ('&ZCGPR' LE '12').ZG322R                     00951800
.ZG322Q             ANOP  ,                                             00951900
&ZMS                SETC  '"COMPID='                                    00952000
&ZMS                SETC  '&ZMS.&COMPID"'                               00952100
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00952200
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00952300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00952400
.ZG322R             ANOP  ,                                             00952500
.*----------------------------------------------------------------***   00952600
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00952700
                    AIF   (N'&COMPUSER LE 1).ZG325A  CK NUM             00952800
&ZMS                SETC  '"COMPUSER='                                  00952900
&ZMS                SETC  '&ZMS.&COMPUSER"'                             00953000
&ZMS                SETC  '&ZMS "COMPUSER"'                             00953100
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00953200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00953300
.ZG325A             ANOP  ,                                             00953400
.*-------------------------------------------------------------------   00953500
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00953600
&ZXCOMPUSER         SETC  'INPUT'     SET IN/OUTPUT                     00953700
&XCOMPUSER          SETC  '0'                                           00953800
                    AIF   (K'&COMPUSER(1) LE 0).ZG325B  PARM            00953900
&XCOMPUSER          SETC  '&COMPUSER(1)'        SET XVARIABLE           00954000
                    AIF   (N'&COMPUSER GT 1).ZG325B  MULTI              00954100
&XCOMPUSER          SETC  '&COMPUSER'           SET XVARIABLE           00954200
.ZG325B             ANOP  ,                                             00954300
.*-------------------------------------------------------------------   00954400
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00954500
                    AIF   (K'&ZXCOMPUSER LE 0).ZG325R  NOT I/O          00954600
         AIF   ('&XCOMPUSER' EQ '0').ZG325R                             00954700
                    AIF   ('&XCOMPUSER'(1,1) NE '(').ZG325R             00954800
&ZCGPR              SETC  '&XCOMPUSER'(2,K'&XCOMPUSER-2)                00954900
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG325P                 00955000
                    AIF   (K'&ZCGPR GT 2).ZG325Q                        00955100
                    AIF   ('&ZCGPR' EQ '0').ZG325Q                      00955200
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00955300
                    AIF   (T'&ZCGPR NE 'N').ZG325Q  INVALID REG NAME    00955400
.ZG325P             ANOP  ,                                             00955500
                    AIF   (T'&ZCGPR NE 'N').ZG325R  NON NUMERIC         00955600
                    AIF   ('&ZCGPR' LT '2').ZG325Q                      00955700
                    AIF   ('&ZCGPR' LE '12').ZG325R                     00955800
.ZG325Q             ANOP  ,                                             00955900
&ZMS                SETC  '"COMPUSER='                                  00956000
&ZMS                SETC  '&ZMS.&COMPUSER"'                             00956100
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00956200
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00956300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00956400
.ZG325R             ANOP  ,                                             00956500
.*----------------------------------------------------------------***   00956600
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00956700
                    AIF   (N'&THREAD LE 1).ZG328A  CK NUM               00956800
&ZMS                SETC  '"THREAD='                                    00956900
&ZMS                SETC  '&ZMS.&THREAD"'                               00957000
&ZMS                SETC  '&ZMS "THREAD"'                               00957100
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00957200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00957300
.ZG328A             ANOP  ,                                             00957400
.*-------------------------------------------------------------------   00957500
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00957600
&ZXTHREAD           SETC  'INPUT'     SET IN/OUTPUT                     00957700
&XTHREAD            SETC  '0'                                           00957800
                    AIF   (K'&THREAD(1) LE 0).ZG328B  PARM              00957900
&XTHREAD            SETC  '&THREAD(1)'          SET XVARIABLE           00958000
                    AIF   (N'&THREAD GT 1).ZG328B  MULTI                00958100
&XTHREAD            SETC  '&THREAD'   SET XVARIABLE                     00958200
.ZG328B             ANOP  ,                                             00958300
.*-------------------------------------------------------------------   00958400
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00958500
                    AIF   (K'&ZXTHREAD LE 0).ZG328R  NOT I/O            00958600
         AIF   ('&XTHREAD' EQ '0').ZG328R                               00958700
                    AIF   ('&XTHREAD'(1,1) NE '(').ZG328R               00958800
&ZCGPR              SETC  '&XTHREAD'(2,K'&XTHREAD-2)                    00958900
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG328P                 00959000
                    AIF   (K'&ZCGPR GT 2).ZG328Q                        00959100
                    AIF   ('&ZCGPR' EQ '0').ZG328Q                      00959200
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00959300
                    AIF   (T'&ZCGPR NE 'N').ZG328Q  INVALID REG NAME    00959400
.ZG328P             ANOP  ,                                             00959500
                    AIF   (T'&ZCGPR NE 'N').ZG328R  NON NUMERIC         00959600
                    AIF   ('&ZCGPR' LT '2').ZG328Q                      00959700
                    AIF   ('&ZCGPR' LE '12').ZG328R                     00959800
.ZG328Q             ANOP  ,                                             00959900
&ZMS                SETC  '"THREAD='                                    00960000
&ZMS                SETC  '&ZMS.&THREAD"'                               00960100
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00960200
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00960300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00960400
.ZG328R             ANOP  ,                                             00960500
.*----------------------------------------------------------------***   00960600
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00960700
                    AIF   (N'&UTILRTN LE 1).ZG331A  CK NUM              00960800
&ZMS                SETC  '"UTILRTN='                                   00960900
&ZMS                SETC  '&ZMS.&UTILRTN"'                              00961000
&ZMS                SETC  '&ZMS "UTILRTN"'                              00961100
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00961200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00961300
.ZG331A             ANOP  ,                                             00961400
.*-------------------------------------------------------------------   00961500
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00961600
&ZXUTILRTN          SETC  'INPUT'     SET IN/OUTPUT                     00961700
&XUTILRTN           SETC  '0'                                           00961800
                    AIF   (K'&UTILRTN(1) LE 0).ZG331B  PARM             00961900
&XUTILRTN           SETC  '&UTILRTN(1)'         SET XVARIABLE           00962000
                    AIF   (N'&UTILRTN GT 1).ZG331B  MULTI               00962100
&XUTILRTN           SETC  '&UTILRTN'  SET XVARIABLE                     00962200
.ZG331B             ANOP  ,                                             00962300
.*-------------------------------------------------------------------   00962400
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00962500
                    AIF   (K'&ZXUTILRTN LE 0).ZG331R  NOT I/O           00962600
         AIF   ('&XUTILRTN' EQ '0').ZG331R                              00962700
                    AIF   ('&XUTILRTN'(1,1) NE '(').ZG331R              00962800
&ZCGPR              SETC  '&XUTILRTN'(2,K'&XUTILRTN-2)                  00962900
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG331P                 00963000
                    AIF   (K'&ZCGPR GT 2).ZG331Q                        00963100
                    AIF   ('&ZCGPR' EQ '0').ZG331Q                      00963200
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00963300
                    AIF   (T'&ZCGPR NE 'N').ZG331Q  INVALID REG NAME    00963400
.ZG331P             ANOP  ,                                             00963500
                    AIF   (T'&ZCGPR NE 'N').ZG331R  NON NUMERIC         00963600
                    AIF   ('&ZCGPR' LT '2').ZG331Q                      00963700
                    AIF   ('&ZCGPR' LE '12').ZG331R                     00963800
.ZG331Q             ANOP  ,                                             00963900
&ZMS                SETC  '"UTILRTN='                                   00964000
&ZMS                SETC  '&ZMS.&UTILRTN"'                              00964100
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00964200
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00964300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00964400
.ZG331R             ANOP  ,                                             00964500
.*-------------------------------------------------------------------   00964600
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00964700
.ZG333              ANOP  ,                                             00964800
&ZTLC               SETC 'RESOURCE_STATS'                               00964900
                    AIF   ('&REQUEST(1)' NE '&ZTLC').ZG337              00965000
&XREQUEST           SETC  'RESOURCE_STATS'      SET KEYWORD             00965100
                    AIF   (N'&REQUEST LE 1).ZG333A  CK NUM              00965200
&ZMS                SETC  '"REQUEST='                                   00965300
&ZMS                SETC  '&ZMS.&REQUEST"'                              00965400
&ZMS                SETC  '&ZMS "REQUEST"'                              00965500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00965600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00965700
.ZG333A             ANOP  ,                                             00965800
.*------------------------------------------------------------------    00965900
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00966000
&ZCVAL              SETC ''           CLEAR ERROR KEY ACCUMULATOR       00966100
.ZG333A0            AIF   (K'&BUFLIST LE 0).ZG333A1  OK                 00966200
&ZCVAL              SETC '&ZCVAL BUFLIST'       INCORRECT KEY USED      00966300
.ZG333A1            AIF   (K'&BUFLST64 LE 0).ZG333A2  OK                00966400
&ZCVAL              SETC '&ZCVAL BUFLST64'      INCORRECT KEY USED      00966500
.ZG333A2            AIF   (K'&BUFNUM LE 0).ZG333A3  OK                  00966600
&ZCVAL              SETC '&ZCVAL BUFNUM'        INCORRECT KEY USED      00966700
.ZG333A3            AIF   (K'&BUFTYPE LE 0).ZG333A4  OK                 00966800
&ZCVAL              SETC '&ZCVAL BUFTYPE'       INCORRECT KEY USED      00966900
.ZG333A4            AIF   (K'&CSMUSER LE 0).ZG333A5  OK                 00967000
&ZCVAL              SETC '&ZCVAL CSMUSER'       INCORRECT KEY USED      00967100
.ZG333A5            AIF   (K'&GAP LE 0).ZG333A6  OK                     00967200
&ZCVAL              SETC '&ZCVAL GAP'           INCORRECT KEY USED      00967300
.ZG333A6            AIF   (K'&ERRBFLST LE 0).ZG333A7  OK                00967400
&ZCVAL              SETC '&ZCVAL ERRBFLST'      INCORRECT KEY USED      00967500
.ZG333A7            AIF   (K'&OWNERID LE 0).ZG333A8  OK                 00967600
&ZCVAL              SETC '&ZCVAL OWNERID'       INCORRECT KEY USED      00967700
.ZG333A8            AIF   (K'&COMPID LE 0).ZG333A9  OK                  00967800
&ZCVAL              SETC '&ZCVAL COMPID'        INCORRECT KEY USED      00967900
.ZG333A9            AIF   (K'&COMPUSER LE 0).ZG333A10  OK               00968000
&ZCVAL              SETC '&ZCVAL COMPUSER'      INCORRECT KEY USED      00968100
.ZG333A10           AIF   (K'&TASKID LE 0).ZG333A11  OK                 00968200
&ZCVAL              SETC '&ZCVAL TASKID'        INCORRECT KEY USED      00968300
.ZG333A11           AIF   (K'&THREAD LE 0).ZG333A12  OK                 00968400
&ZCVAL              SETC '&ZCVAL THREAD'        INCORRECT KEY USED      00968500
.ZG333A12           AIF   (K'&UTILRTN LE 0).ZG333A13  OK                00968600
&ZCVAL              SETC '&ZCVAL UTILRTN'       INCORRECT KEY USED      00968700
.ZG333A13           AIF   (K'&SKIPBUF LE 0).ZG333A14  OK                00968800
&ZCVAL              SETC '&ZCVAL SKIPBUF'       INCORRECT KEY USED      00968900
.ZG333A14           AIF   (K'&PAD LE 0).ZG333A15  OK                    00969000
&ZCVAL              SETC '&ZCVAL PAD'           INCORRECT KEY USED      00969100
.ZG333A15           AIF   (K'&PADCHAR LE 0).ZG333A16  OK                00969200
&ZCVAL              SETC '&ZCVAL PADCHAR'       INCORRECT KEY USED      00969300
.ZG333A16           AIF   (K'&SRCERRL LE 0).ZG333A17  OK                00969400
&ZCVAL              SETC '&ZCVAL SRCERRL'       INCORRECT KEY USED      00969500
.ZG333A17           AIF   (K'&SRCGAP LE 0).ZG333A18  OK                 00969600
&ZCVAL              SETC '&ZCVAL SRCGAP'        INCORRECT KEY USED      00969700
.ZG333A18           AIF   (K'&SRCLIST LE 0).ZG333A19  OK                00969800
&ZCVAL              SETC '&ZCVAL SRCLIST'       INCORRECT KEY USED      00969900
.ZG333A19           AIF   (K'&SRCLST64 LE 0).ZG333A20  OK               00970000
&ZCVAL              SETC '&ZCVAL SRCLST64'      INCORRECT KEY USED      00970100
.ZG333A20           AIF   (K'&SRCNUM LE 0).ZG333A21  OK                 00970200
&ZCVAL              SETC '&ZCVAL SRCNUM'        INCORRECT KEY USED      00970300
.ZG333A21           AIF   (K'&TARGERRL LE 0).ZG333A22  OK               00970400
&ZCVAL              SETC '&ZCVAL TARGERRL'      INCORRECT KEY USED      00970500
.ZG333A22           AIF   (K'&TARGGAP LE 0).ZG333A23  OK                00970600
&ZCVAL              SETC '&ZCVAL TARGGAP'       INCORRECT KEY USED      00970700
.ZG333A23           AIF   (K'&TARGLIST LE 0).ZG333A24  OK               00970800
&ZCVAL              SETC '&ZCVAL TARGLIST'      INCORRECT KEY USED      00970900
.ZG333A24           AIF   (K'&TARLST64 LE 0).ZG333A25  OK               00971000
&ZCVAL              SETC '&ZCVAL TARLST64'      INCORRECT KEY USED      00971100
.ZG333A25           AIF   (K'&TARGNUM LE 0).ZG333A26  OK                00971200
&ZCVAL              SETC '&ZCVAL TARGNUM'       INCORRECT KEY USED      00971300
.ZG333A26           AIF   (K'&BUFSIZE LE 0).ZG333A27  OK                00971400
&ZCVAL              SETC '&ZCVAL BUFSIZE'       INCORRECT KEY USED      00971500
.ZG333A27           AIF   (K'&BUFSOURC LE 0).ZG333A28  OK               00971600
&ZCVAL              SETC '&ZCVAL BUFSOURC'      INCORRECT KEY USED      00971700
.ZG333A28           AIF   (K'&BACK LE 0).ZG333A29  OK                   00971800
&ZCVAL              SETC '&ZCVAL BACK'          INCORRECT KEY USED      00971900
.ZG333A29           AIF   (K'&DS_INFO LE 0).ZG333A30  OK                00972000
&ZCVAL              SETC '&ZCVAL DS_INFO'       INCORRECT KEY USED      00972100
.ZG333A30           AIF   (K'&EXPBUF LE 0).ZG333A31  OK                 00972200
&ZCVAL              SETC '&ZCVAL EXPBUF'        INCORRECT KEY USED      00972300
.ZG333A31           AIF   (K'&INITBUF LE 0).ZG333A32  OK                00972400
&ZCVAL              SETC '&ZCVAL INITBUF'       INCORRECT KEY USED      00972500
.ZG333A32           AIF   (K'&MINFREE LE 0).ZG333A33  OK                00972600
&ZCVAL              SETC '&ZCVAL MINFREE'       INCORRECT KEY USED      00972700
.ZG333A33           AIF   (K'&RETPTOKN LE 0).ZG333A34  OK               00972800
&ZCVAL              SETC '&ZCVAL RETPTOKN'      INCORRECT KEY USED      00972900
.ZG333A34           AIF   (K'&POOLTOKN LE 0).ZG333A35  OK               00973000
&ZCVAL              SETC '&ZCVAL POOLTOKN'      INCORRECT KEY USED      00973100
.ZG333A35           AIF   (K'&WAIT LE 0).ZG333A36  OK                   00973200
&ZCVAL              SETC '&ZCVAL WAIT'          INCORRECT KEY USED      00973300
.ZG333A36           AIF   (K'&CLEAR LE 0).ZG333A37  OK                  00973400
&ZCVAL              SETC '&ZCVAL CLEAR'         INCORRECT KEY USED      00973500
.ZG333A37           AIF   (K'&FREETO LE 0).ZG333A38  OK                 00973600
&ZCVAL              SETC '&ZCVAL FREETO'        INCORRECT KEY USED      00973700
.ZG333A38           AIF   (K'&FREERTN LE 0).ZG333A39  OK                00973800
&ZCVAL              SETC '&ZCVAL FREERTN'       INCORRECT KEY USED      00973900
.ZG333A39           AIF   (K'&ZCVAL LE 0).ZG333A40  OK                  00974000
&ZCVAL              SETC '&ZCVAL'(2,K'&ZCVAL-1)                         00974100
                    AIF  (K'&ZCVAL LE 160).ZG333A40A                    00974200
&ZCVAL              SETC '&ZCVAL'(1,160)                                00974300
&ZCVAL              SETC '&ZCVAL....'                                   00974400
.ZG333A40A          ANOP                                                00974500
&ZMS                SETC  '"REQUEST'                                    00974600
&ZMS                SETC  '&ZMS.=&REQUEST"'                             00974700
&ZMS                SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'          00974800
                    MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'          00974900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00975000
.ZG333A40           ANOP  ,                                             00975100
.*-------------------------------------------------------------------   00975200
.***AG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START             00975300
                    AIF   ('&XMF' EQ 'M').ZG336  BYPASS IF MF=M         00975400
.*----------------------------------------------------------------***   00975500
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00975600
                    AIF   (N'&STATAREA LE 1).ZG335A  CK NUM             00975700
&ZMS                SETC  '"STATAREA='                                  00975800
&ZMS                SETC  '&ZMS.&STATAREA"'                             00975900
&ZMS                SETC  '&ZMS "STATAREA"'                             00976000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00976100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00976200
.ZG335A             ANOP  ,                                             00976300
.*-------------------------------------------------------------------   00976400
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00976500
                    AIF   (K'&STATAREA(1) LE 0).ZG335C  NO PARM         00976600
&ZXSTATAREA         SETC  'OUTPUT'    SET OUTPUT                        00976700
&XSTATAREA          SETC  '&STATAREA(1)'        SET XVARIABLE           00976800
                    AIF   (N'&STATAREA GT 1).ZG335C                     00976900
&XSTATAREA          SETC  '&STATAREA'           SET XVARIABLE           00977000
.ZG335C             ANOP  ,                                             00977100
.*-------------------------------------------------------------------   00977200
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00977300
                    AIF   (K'&ZXSTATAREA LE 0).ZG335R  NOT I/O          00977400
                    AIF   ('&XSTATAREA'(1,1) NE '(').ZG335R             00977500
&ZCGPR              SETC  '&XSTATAREA'(2,K'&XSTATAREA-2)                00977600
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG335P                 00977700
                    AIF   (K'&ZCGPR GT 2).ZG335Q                        00977800
                    AIF   ('&ZCGPR' EQ '0').ZG335Q                      00977900
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00978000
                    AIF   (T'&ZCGPR NE 'N').ZG335Q  INVALID REG NAME    00978100
.ZG335P             ANOP  ,                                             00978200
                    AIF   (T'&ZCGPR NE 'N').ZG335R  NON NUMERIC         00978300
                    AIF   ('&ZCGPR' LT '2').ZG335Q                      00978400
                    AIF   ('&ZCGPR' LE '12').ZG335R                     00978500
.ZG335Q             ANOP  ,                                             00978600
&ZMS                SETC  '"STATAREA='                                  00978700
&ZMS                SETC  '&ZMS.&STATAREA"'                             00978800
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00978900
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00979000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00979100
.ZG335R             ANOP  ,                                             00979200
.*-------------------------------------------------------------------   00979300
.***AG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END               00979400
.ZG336              ANOP  ,           END OF BYPASS CHECK               00979500
.*------------------------------------------------------------------    00979600
.***AG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00979700
.ZG337              ANOP  ,                                             00979800
&ZXREQUEST          SETC  'INPUT'     SET IN/OUTPUT                     00979900
                    AIF   (K'&XREQUEST GT 0).ZG337E  VALID ARG          00980000
                    AIF   (T'&REQUEST EQ 'O').ZG337D  OMITTED           00980100
&ZASYSLNDX          SETA  0                                             00980200
.ZG337A             ANOP  ,           POSITIONAL MACRO KEY              00980300
&ZASYSLNDX          SETA  &ZASYSLNDX+1                                  00980400
                    AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG337C             00980500
&ZTLC               SETC 'REQUEST'                                      00980600
                    AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG337A    00980700
.ZG337B             ANOP  ,                                             00980800
&ZXREQUEST          SETC  ''          RESET IN/OUTPUT                   00980900
&ZMS                SETC  'THE "REQUEST" KEY'                           00981000
&ZMS                SETC  '&ZMS MUST CONTAIN ONE'                       00981100
                    MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'              00981200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00981300
                    AGO   .ZG337E                                       00981400
.ZG337C             ANOP  ,                                             00981500
&ZXREQUEST          SETC  ''          RESET IN/OUTPUT                   00981600
&ZMS                SETC  '"REQUEST='                                   00981700
&ZMS                SETC  '&ZMS.&REQUEST"'                              00981800
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     00981900
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           00982000
&ZMS                SETC  '&ZMS "ASSIGN_BUFFER",'                       00982100
&ZMS                SETC  '&ZMS "CHANGE_OWNER",'                        00982200
&ZMS                SETC  '&ZMS "COPY_DATA",'                           00982300
&ZMS                SETC  '&ZMS "CREATE_POOL",'                         00982400
&ZMS                SETC  '&ZMS "DELETE_POOL",'                         00982500
&ZMS                SETC  '&ZMS "DUMP_INFO",'                           00982600
&ZMS                SETC  '&ZMS "FIX_BUFFER",'                          00982700
&ZMS                SETC  '&ZMS "FREE_BUFFER",'                         00982800
&ZMS                SETC  '&ZMS "GET_BUFFER",'                          00982900
&ZMS                SETC  '&ZMS "PAGE_BUFFER",'                         00983000
                    MNOTE 8,' &ZMS '                                    00983100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00983200
&ZMS                SETC  '(CONTINUED) '                                00983300
&ZMS                SETC  '&ZMS OR "RESOURCE_STATS".'                   00983400
                    MNOTE 8,' &ZMS '                                    00983500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00983600
                    AGO   .ZG337E                                       00983700
.ZG337D             ANOP  ,                                             00983800
&XREQUEST           SETC  'ASSIGN_BUFFER'       SET DEFAULT KEYWORD     00983900
.ZG337E             ANOP  ,                                             00984000
.*------------------------------------------------------------------    00984100
.***AG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00984200
                    AIF   (K'&REQUEST(1) GT 0).ZG337F  PARM             00984300
&XREQUEST           SETC  ''          ENSURE NULL KEYWORD               00984400
&ZXREQUEST          SETC  ''          RESET IN/OUTPUT                   00984500
&ZMS                SETC  'THE'                                         00984600
&ZMS                SETC  '&ZMS "REQUEST" KEY AND ITS'                  00984700
&ZMS                SETC  '&ZMS ARGUMENT ARE REQUIRED.'                 00984800
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           00984900
&ZMS                SETC  '&ZMS "ASSIGN_BUFFER",'                       00985000
&ZMS                SETC  '&ZMS "CHANGE_OWNER",'                        00985100
&ZMS                SETC  '&ZMS "COPY_DATA",'                           00985200
&ZMS                SETC  '&ZMS "CREATE_POOL",'                         00985300
&ZMS                SETC  '&ZMS "DELETE_POOL",'                         00985400
&ZMS                SETC  '&ZMS "DUMP_INFO",'                           00985500
&ZMS                SETC  '&ZMS "FIX_BUFFER",'                          00985600
&ZMS                SETC  '&ZMS "FREE_BUFFER",'                         00985700
&ZMS                SETC  '&ZMS "GET_BUFFER",'                          00985800
                    MNOTE 8,' &ZMS '                                    00985900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00986000
&ZMS                SETC  '(CONTINUED) '                                00986100
&ZMS                SETC  '&ZMS "PAGE_BUFFER",'                         00986200
&ZMS                SETC  '&ZMS OR "RESOURCE_STATS".'                   00986300
                    MNOTE 8,' &ZMS '                                    00986400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00986500
.ZG337F             ANOP  ,                                             00986600
.*----------------------------------------------------------------***   00986700
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00986800
                    AIF   (N'&RETCODE LE 1).ZG339A  CK NUM              00986900
&ZMS                SETC  '"RETCODE='                                   00987000
&ZMS                SETC  '&ZMS.&RETCODE"'                              00987100
&ZMS                SETC  '&ZMS "RETCODE"'                              00987200
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00987300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00987400
.ZG339A             ANOP  ,                                             00987500
.*-------------------------------------------------------------------   00987600
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00987700
                    AIF   (K'&RETCODE(1) LE 0).ZG339C  NO PARM          00987800
&ZXRETCODE          SETC  'OUTPUT'    SET OUTPUT                        00987900
&XRETCODE           SETC  '&RETCODE(1)'         SET XVARIABLE           00988000
                    AIF   (N'&RETCODE GT 1).ZG339C                      00988100
&XRETCODE           SETC  '&RETCODE'  SET XVARIABLE                     00988200
.ZG339C             ANOP  ,                                             00988300
.*-------------------------------------------------------------------   00988400
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00988500
                    AIF   (K'&ZXRETCODE LE 0).ZG339R  NOT I/O           00988600
                    AIF   ('&XRETCODE'(1,1) NE '(').ZG339R              00988700
&ZCGPR              SETC  '&XRETCODE'(2,K'&XRETCODE-2)                  00988800
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG339P                 00988900
                    AIF   (K'&ZCGPR GT 2).ZG339Q                        00989000
                    AIF   ('&ZCGPR' EQ '0').ZG339Q                      00989100
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00989200
                    AIF   (T'&ZCGPR NE 'N').ZG339Q  INVALID REG NAME    00989300
.ZG339P             ANOP  ,                                             00989400
                    AIF   (T'&ZCGPR NE 'N').ZG339R  NON NUMERIC         00989500
                    AIF   ('&ZCGPR' EQ '15').ZG339R                     00989600
                    AIF   ('&ZCGPR' LT '2').ZG339Q                      00989700
                    AIF   ('&ZCGPR' LE '12').ZG339R                     00989800
.ZG339Q             ANOP  ,                                             00989900
&ZMS                SETC  '"RETCODE='                                   00990000
&ZMS                SETC  '&ZMS.&RETCODE"'                              00990100
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00990200
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12) OR (15).'      00990300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00990400
.ZG339R             ANOP  ,                                             00990500
.*----------------------------------------------------------------***   00990600
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00990700
                    AIF   (N'&RSNCODE LE 1).ZG342A  CK NUM              00990800
&ZMS                SETC  '"RSNCODE='                                   00990900
&ZMS                SETC  '&ZMS.&RSNCODE"'                              00991000
&ZMS                SETC  '&ZMS "RSNCODE"'                              00991100
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00991200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00991300
.ZG342A             ANOP  ,                                             00991400
.*-------------------------------------------------------------------   00991500
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00991600
                    AIF   (K'&RSNCODE(1) LE 0).ZG342C  NO PARM          00991700
&ZXRSNCODE          SETC  'OUTPUT'    SET OUTPUT                        00991800
&XRSNCODE           SETC  '&RSNCODE(1)'         SET XVARIABLE           00991900
                    AIF   (N'&RSNCODE GT 1).ZG342C                      00992000
&XRSNCODE           SETC  '&RSNCODE'  SET XVARIABLE                     00992100
.ZG342C             ANOP  ,                                             00992200
.*-------------------------------------------------------------------   00992300
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00992400
                    AIF   (K'&ZXRSNCODE LE 0).ZG342R  NOT I/O           00992500
                    AIF   ('&XRSNCODE'(1,1) NE '(').ZG342R              00992600
&ZCGPR              SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                  00992700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG342P                 00992800
                    AIF   (K'&ZCGPR GT 2).ZG342Q                        00992900
                    AIF   ('&ZCGPR' EQ '0').ZG342R                      00993000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00993100
                    AIF   (T'&ZCGPR NE 'N').ZG342Q  INVALID REG NAME    00993200
.ZG342P             ANOP  ,                                             00993300
                    AIF   (T'&ZCGPR NE 'N').ZG342R  NON NUMERIC         00993400
                    AIF   ('&ZCGPR' EQ '0').ZG342R                      00993500
                    AIF   ('&ZCGPR' LT '2').ZG342Q                      00993600
                    AIF   ('&ZCGPR' LE '12').ZG342R                     00993700
.ZG342Q             ANOP  ,                                             00993800
&ZMS                SETC  '"RSNCODE='                                   00993900
&ZMS                SETC  '&ZMS.&RSNCODE"'                              00994000
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00994100
                    MNOTE 8,' &ZMS IN THE RANGE (0) OR (2)-(12).'       00994200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00994300
.ZG342R             ANOP  ,                                             00994400
.******************************************************************     00994500
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00994600
.******************************************************************     00994700
                    ACTR  10000                                         00994800
.*----------------------------------------------------------------***   00994900
.***AH.P02 EXTRA POSITIONALS                                            00995000
                    AIF   (N'&SYSLIST LE 0).ZGLISTX  NO EXTRAS          00995100
                    AIF   (N'&SYSLIST NE 2).ZGLISTX1  NOT NULL          00995200
                    AIF   ('&SYSLIST(1)' NE '').ZGLISTX1  NOT NULL      00995300
                    AIF   ('&SYSLIST(2)' EQ '').ZGLISTX  NOT NULL       00995400
.ZGLISTX1           ANOP  ,                                             00995500
&ZCVAL              SETC  ''          ERROR FIELD                       00995600
&ZAWRK              SETA  0           POSITIONAL NUMBER                 00995700
.ZGLIST2            ANOP  ,                                             00995800
&ZAWRK              SETA  &ZAWRK+1    NEXT POSITIONAL                   00995900
                    AIF   (&ZAWRK GT N'&SYSLIST).ZGLIST3  DONE          00996000
&ZCVAL              SETC '&ZCVAL,&SYSLIST(&ZAWRK)'  EXTRA               00996100
                    AGO   .ZGLIST2                                      00996200
.*                                                                      00996300
.ZGLIST3            ANOP  ,                                             00996400
&ZCVAL              SETC '&ZCVAL'(2,K'&ZCVAL-1)  STRIP COMMA            00996500
&ZMS                SETC  'POSITIONAL ARGUMENT(S),'                     00996600
&ZMS                SETC  '&ZMS "&ZCVAL"'                               00996700
&ZMS                SETC  '&ZMS CANNOT BE USED.'                        00996800
&ZMS                SETC  '&ZMS NO POSITIONAL ARGUMENTS'                00996900
                    MNOTE 8,' &ZMS ARE ALLOWED.'                        00997000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00997100
.ZGLISTX            ANOP  ,                                             00997200
&ZASYSLNDX          SETA  0                                             00997300
.*-------------------------------------------------------------------   00997400
.***AG.MF04 MF=(SLME)                                                   00997500
.ZGMFX              ANOP  ,           END OF FULL SYNTAX CHECK          00997600
.********************************************************************   00997700
.***AE.MF01   PARTIAL MACRO SYNTAX CHECKING                             00997800
.********************************************************************   00997900
                    ACTR  10000                                         00998000
.*-------------------------------------------------------------------   00998100
.***AE.MF01 MF=(SLME)                                                   00998200
                    AIF   ('&XMF' EQ 'L').ZEMFX                         00998300
                    AIF   ('&XMFSCK' NE 'NOCHECK').ZEMFX                00998400
.********************************************************************   00998500
.***AE.KC00 INITIALIZE KEYWORD CONTROL VARIABLES                        00998600
.********************************************************************   00998700
&XREQUEST           SETC  ''          INITIALIZE XVARIABLE              00998800
&XBUFTYPE           SETC  ''          INITIALIZE XVARIABLE              00998900
&XCSMUSER           SETC  ''          INITIALIZE XVARIABLE              00999000
&XSKIPBUF           SETC  ''          INITIALIZE XVARIABLE              00999100
&XPAD               SETC  ''          INITIALIZE XVARIABLE              00999200
&XBUFSOURC          SETC  ''          INITIALIZE XVARIABLE              00999300
&XBACK              SETC  ''          INITIALIZE XVARIABLE              00999400
&XWAIT              SETC  ''          INITIALIZE XVARIABLE              00999500
&XCLEAR             SETC  ''          INITIALIZE XVARIABLE              00999600
&XFREETO            SETC  ''          INITIALIZE XVARIABLE              00999700
.*-------------------------------------------------------------------   00999800
.***AE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00999900
&ZTLC               SETC 'ASSIGN_BUFFER'                                01000000
                    AIF   ('&REQUEST(1)' NE '&ZTLC').ZE3A               01000100
&XREQUEST           SETC  'ASSIGN_BUFFER'       SET KEYWORD             01000200
                    AIF   (N'&REQUEST LE 1).ZE3A  CK NUM                01000300
&ZMS                SETC  '"REQUEST='                                   01000400
&ZMS                SETC  '&ZMS.&REQUEST"'                              01000500
&ZMS                SETC  '&ZMS "REQUEST"'                              01000600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01000700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01000800
.ZE3A               ANOP  ,                                             01000900
.*----------------------------------------------------------------***   01001000
.***AE.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE                      01001100
&XDUMMY1            SETC  ''          INITIALIZE XVARIABLE              01001200
                    AIF   (K'&BUFLIST LE 0).ZE5C                        01001300
&ZXDUMMY1           SETC  'INPUT'     SET IN/OUTPUT                     01001400
&XDUMMY1            SETC  'BUFLIST'   SET XVARIABLE                     01001500
&ZXBUFLIST          SETC  'INPUT'     SET IN/OUTPUT                     01001600
&XBUFLIST           SETC  '&BUFLIST(1)'         SET XVARIABLE PARM      01001700
                    AIF   (N'&BUFLIST GT 1).ZE5A                        01001800
&XBUFLIST           SETC  '&BUFLIST'  SET XVARIABLE PARM                01001900
.ZE5A               AIF   (N'&BUFLIST LE 1).ZE5B  CK NUM                01002000
&ZMS                SETC  '"BUFLIST='                                   01002100
&ZMS                SETC  '&ZMS.&BUFLIST"'                              01002200
&ZMS                SETC  '&ZMS "BUFLIST"'                              01002300
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01002400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01002500
.ZE5B               AIF   (K'&XBUFLIST GT 0).ZE5C  ONE PARM             01002600
&ZXDUMMY1           SETC  ''          RESET IN/OUTPUT                   01002700
&ZXBUFLIST          SETC  ''          RESET IN/OUTPUT                   01002800
.ZE5C               ANOP  ,                                             01002900
.*----------------------------------------------------------------***   01003000
.***AE.KMEKY02 NAME, RQD INPUT, ME KEYS -NON-XVAR KEY                   01003100
                    AIF   (K'&BUFLST64 LE 0).ZE6D  NO ME KEY            01003200
                    AIF   (N'&BUFLST64 LE 1).ZE6A  CK NUM               01003300
&ZMS                SETC  '"BUFLST64='                                  01003400
&ZMS                SETC  '&ZMS.&BUFLST64"'                             01003500
&ZMS                SETC  '&ZMS "BUFLST64"'                             01003600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01003700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01003800
.ZE6A               AIF   (K'&XDUMMY1 LE 0).ZE6B                        01003900
&ZMS                SETC  '"BUFLST64'                                   01004000
&ZMS                SETC  '&ZMS.=&BUFLST64"'                            01004100
&ZMS                SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'         01004200
&ZMS                SETC  '&ZMS "&XDUMMY1"'                             01004300
                    MNOTE 8,' &ZMS KEY.'                                01004400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01004500
                    AGO   .ZE6D                                         01004600
.*                                                                      01004700
.ZE6B               ANOP  ,                                             01004800
&ZXDUMMY1           SETC  'INPUT'     SET IN/OUTPUT                     01004900
&XDUMMY1            SETC  'BUFLST64'  SET XVARIABLE                     01005000
&ZXBUFLST64         SETC  'INPUT'     SET IN/OUTPUT                     01005100
&XBUFLST64          SETC  '&BUFLST64(1)'        SET PARM                01005200
                    AIF   (N'&BUFLST64 GT 1).ZE6C                       01005300
&XBUFLST64          SETC  '&BUFLST64'           SET PARM                01005400
.ZE6C               AIF   (K'&XBUFLST64 GT 0).ZE6D  ONE PARM            01005500
&ZXDUMMY1           SETC  ''          RESET IN/OUTPUT                   01005600
&ZXBUFLST64         SETC  ''          RESET IN/OUTPUT                   01005700
.ZE6D               ANOP  ,                                             01005800
.*------------------------------------------------------------------    01005900
.***AE.KMEKY07 NAME, RQD INPUT, ME KEYS -CHECK IF ENTERED               01006000
                    AIF   (K'&XDUMMY1 GT 0).ZE7B                        01006100
&ZXDUMMY1           SETC  ''          RESET IN/OUTPUT                   01006200
&XDUMMY1            SETC  ''          SET NULL                          01006300
&ZXBUFLIST          SETC  ''          RESET OUTPUT                      01006400
&XBUFLIST           SETC  ''          SET NULL PARM                     01006500
.ZE7B               ANOP  ,                                             01006600
.*-------------------------------------------------------------------   01006700
.***AE.KMEKY08 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           01006800
.ZE5     AIF   ('&XDUMMY1' NE 'BUFLIST').ZE6                            01006900
.*-------------------------------------------------------------------   01007000
.***AE.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 01007100
                    AIF   (K'&ZXBUFLIST LE 0).ZE5R  NOT I/O             01007200
                    AIF   ('&XBUFLIST'(1,1) NE '(').ZE5R                01007300
&ZCGPR              SETC  '&XBUFLIST'(2,K'&XBUFLIST-2)                  01007400
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE5P                   01007500
                    AIF   (K'&ZCGPR GT 2).ZE5Q                          01007600
                    AIF   ('&ZCGPR' EQ '0').ZE5Q                        01007700
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01007800
                    AIF   (T'&ZCGPR NE 'N').ZE5Q  INVALID REG NAME      01007900
.ZE5P               ANOP  ,                                             01008000
                    AIF   (T'&ZCGPR NE 'N').ZE5R  NON NUMERIC           01008100
                    AIF   ('&ZCGPR' LT '2').ZE5Q                        01008200
                    AIF   ('&ZCGPR' LE '12').ZE5R                       01008300
.ZE5Q               ANOP  ,                                             01008400
&ZMS                SETC  '"BUFLIST='                                   01008500
&ZMS                SETC  '&ZMS.&BUFLIST"'                              01008600
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01008700
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01008800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01008900
.ZE5R               ANOP  ,                                             01009000
.*-------------------------------------------------------------------   01009100
.***AE.KMEKY08 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           01009200
.ZE6     AIF   ('&XDUMMY1' NE 'BUFLST64').ZE7                           01009300
.*-------------------------------------------------------------------   01009400
.***AE.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 01009500
                    AIF   (K'&ZXBUFLST64 LE 0).ZE6R  NOT I/O            01009600
                    AIF   ('&XBUFLST64'(1,1) NE '(').ZE6R               01009700
&ZCGPR              SETC  '&XBUFLST64'(2,K'&XBUFLST64-2)                01009800
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE6P                   01009900
                    AIF   (K'&ZCGPR GT 2).ZE6Q                          01010000
                    AIF   ('&ZCGPR' EQ '0').ZE6Q                        01010100
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01010200
                    AIF   (T'&ZCGPR NE 'N').ZE6Q  INVALID REG NAME      01010300
.ZE6P               ANOP  ,                                             01010400
                    AIF   (T'&ZCGPR NE 'N').ZE6R  NON NUMERIC           01010500
                    AIF   ('&ZCGPR' LT '2').ZE6Q                        01010600
                    AIF   ('&ZCGPR' LE '12').ZE6R                       01010700
.ZE6Q               ANOP  ,                                             01010800
&ZMS                SETC  '"BUFLST64='                                  01010900
&ZMS                SETC  '&ZMS.&BUFLST64"'                             01011000
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01011100
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01011200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01011300
.ZE6R               ANOP  ,                                             01011400
.*-------------------------------------------------------------------   01011500
.***AE.KMEKY09 NAME, RQD INPUT, ME KEYS -END                            01011600
.ZE7                ANOP  ,           END MUTUALLY EXCLUSIVE KEYS       01011700
.*----------------------------------------------------------------***   01011800
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY                          01011900
                    AIF   (N'&BUFNUM LE 1).ZE9A  CK NUM                 01012000
&ZMS                SETC  '"BUFNUM='                                    01012100
&ZMS                SETC  '&ZMS.&BUFNUM"'                               01012200
&ZMS                SETC  '&ZMS "BUFNUM"'                               01012300
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01012400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01012500
.ZE9A               ANOP  ,                                             01012600
.*-------------------------------------------------------------------   01012700
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT                     01012800
                    AIF   (K'&BUFNUM(1) LE 0).ZE9B NO PRM               01012900
&ZXBUFNUM           SETC  'INPUT'     SET IN/OUTPUT                     01013000
&XBUFNUM            SETC  '&BUFNUM(1)'          SET XVARIABLE           01013100
                    AIF   (N'&BUFNUM GT 1).ZE9B                         01013200
.*                  ANOP                                                01013300
&XBUFNUM            SETC  '&BUFNUM'   SET XVARIABLE                     01013400
.ZE9B               ANOP  ,                                             01013500
.*-------------------------------------------------------------------   01013600
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    01013700
                    AIF   (K'&ZXBUFNUM LE 0).ZE9R  NOT I/O              01013800
                    AIF   ('&XBUFNUM'(1,1) NE '(').ZE9R                 01013900
&ZCGPR              SETC  '&XBUFNUM'(2,K'&XBUFNUM-2)                    01014000
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE9P                   01014100
                    AIF   (K'&ZCGPR GT 2).ZE9Q                          01014200
                    AIF   ('&ZCGPR' EQ '0').ZE9Q                        01014300
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01014400
                    AIF   (T'&ZCGPR NE 'N').ZE9Q  INVALID REG NAME      01014500
.ZE9P               ANOP  ,                                             01014600
                    AIF   (T'&ZCGPR NE 'N').ZE9R  NON NUMERIC           01014700
                    AIF   ('&ZCGPR' LT '2').ZE9Q                        01014800
                    AIF   ('&ZCGPR' LE '12').ZE9R                       01014900
.ZE9Q               ANOP  ,                                             01015000
&ZMS                SETC  '"BUFNUM='                                    01015100
&ZMS                SETC  '&ZMS.&BUFNUM"'                               01015200
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01015300
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01015400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01015500
.ZE9R               ANOP  ,                                             01015600
.*----------------------------------------------------------------***   01015700
.***AE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01015800
                    AIF   (N'&BUFTYPE LE 1).ZE12A  CK NUM               01015900
&ZMS                SETC  '"BUFTYPE='                                   01016000
&ZMS                SETC  '&ZMS.&BUFTYPE"'                              01016100
&ZMS                SETC  '&ZMS "BUFTYPE"'                              01016200
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01016300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01016400
.ZE12A              ANOP  ,                                             01016500
.*-------------------------------------------------------------------   01016600
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01016700
.ZE13A   AIF   ('&BUFTYPE(1)' NE 'SAME').ZE14A                          01016800
&XBUFTYPE           SETC  'SAME'      SET KEYWORD                       01016900
.*-------------------------------------------------------------------   01017000
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01017100
.ZE14A   AIF   ('&BUFTYPE(1)' NE 'PAGEELIG').ZE15A                      01017200
&XBUFTYPE           SETC  'PAGEELIG'  SET KEYWORD                       01017300
.*-------------------------------------------------------------------   01017400
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01017500
.ZE15A   AIF   ('&BUFTYPE(1)' NE 'FIXED').ZE16A                         01017600
&XBUFTYPE           SETC  'FIXED'     SET KEYWORD                       01017700
.*----------------------------------------------------------------***   01017800
.***AE.KKWRD06 Additional value checks                                  01017900
.ZE16A              ANOP                                                01018000
&ZTLC               SETC 'PAGEABLE'                                     01018100
         AIF   ('&BUFTYPE(1)' NE '&ZTLC').ZE16A1                        01018200
&XBUFTYPE           SETC  'PAGEABLE'  SET KEYWORD                       01018300
.ZE16A1  ANOP                                                           01018400
.*-------------------------------------------------------------------   01018500
.***AE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01018600
.ZE0P12Q253A        AIF   (K'&XBUFTYPE GT 0).ZE0P12Q253B                01018700
                    AIF   (K'&BUFTYPE(1) LE 0).ZE0P12Q253C              01018800
&ZMS                SETC  '"BUFTYPE='                                   01018900
&ZMS                SETC  '&ZMS.&BUFTYPE"'                              01019000
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     01019100
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           01019200
&ZMS                SETC  '&ZMS "SAME",'                                01019300
&ZMS                SETC  '&ZMS "PAGEELIG",'                            01019400
&ZMS                SETC  '&ZMS OR "FIXED".'                            01019500
                    MNOTE 8,' &ZMS '                                    01019600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01019700
                    AGO   .ZE0P12Q253C                                  01019800
.*                                                                      01019900
.ZE0P12Q253B        ANOP  ,                                             01020000
&ZXBUFTYPE          SETC  'INPUT'     SET IN/OUTPUT                     01020100
.ZE0P12Q253C        ANOP  ,                                             01020200
.*----------------------------------------------------------------***   01020300
.***AE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01020400
                    AIF   (N'&CSMUSER LE 1).ZE18A  CK NUM               01020500
&ZMS                SETC  '"CSMUSER='                                   01020600
&ZMS                SETC  '&ZMS.&CSMUSER"'                              01020700
&ZMS                SETC  '&ZMS "CSMUSER"'                              01020800
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01020900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01021000
.ZE18A              ANOP  ,                                             01021100
.*-------------------------------------------------------------------   01021200
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01021300
.ZE19A   AIF   ('&CSMUSER(1)' NE 'NO').ZE20A                            01021400
&XCSMUSER           SETC  'NO'        SET KEYWORD                       01021500
.*-------------------------------------------------------------------   01021600
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01021700
.ZE20A   AIF   ('&CSMUSER(1)' NE 'YES').ZE21A                           01021800
&XCSMUSER           SETC  'YES'       SET KEYWORD                       01021900
.*-------------------------------------------------------------------   01022000
.***AE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01022100
.ZE21A              AIF   (K'&XCSMUSER GT 0).ZE21B                      01022200
                    AIF   (K'&CSMUSER(1) LE 0).ZE21C                    01022300
&ZMS                SETC  '"CSMUSER='                                   01022400
&ZMS                SETC  '&ZMS.&CSMUSER"'                              01022500
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     01022600
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           01022700
&ZMS                SETC  '&ZMS "NO"'                                   01022800
&ZMS                SETC  '&ZMS OR "YES".'                              01022900
                    MNOTE 8,' &ZMS '                                    01023000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01023100
                    AGO   .ZE21C                                        01023200
.*                                                                      01023300
.ZE21B              ANOP  ,                                             01023400
&ZXCSMUSER          SETC  'INPUT'     SET IN/OUTPUT                     01023500
.ZE21C              ANOP  ,                                             01023600
.*----------------------------------------------------------------***   01023700
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01023800
                    AIF   (N'&GAP LE 1).ZE23A   CK NUM                  01023900
&ZMS                SETC  '"GAP='                                       01024000
&ZMS                SETC  '&ZMS.&GAP"'                                  01024100
&ZMS                SETC  '&ZMS "GAP"'                                  01024200
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01024300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01024400
.ZE23A              ANOP  ,                                             01024500
.*-------------------------------------------------------------------   01024600
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01024700
                    AIF   (K'&GAP(1) LE 0).ZE23B NO PRM                 01024800
&ZXGAP              SETC  'INPUT'     SET IN/OUTPUT                     01024900
&XGAP               SETC  '&GAP(1)'   SET XVARIABLE                     01025000
                    AIF   (N'&GAP GT 1).ZE23B                           01025100
.*                  ANOP                                                01025200
&XGAP               SETC  '&GAP'      SET XVARIABLE                     01025300
.ZE23B              ANOP  ,                                             01025400
.*-------------------------------------------------------------------   01025500
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01025600
                    AIF   (K'&ZXGAP LE 0).ZE23R  NOT I/O                01025700
                    AIF   ('&XGAP'(1,1) NE '(').ZE23R                   01025800
&ZCGPR              SETC  '&XGAP'(2,K'&XGAP-2)                          01025900
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE23P                  01026000
                    AIF   (K'&ZCGPR GT 2).ZE23Q                         01026100
                    AIF   ('&ZCGPR' EQ '0').ZE23Q                       01026200
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01026300
                    AIF   (T'&ZCGPR NE 'N').ZE23Q  INVALID REG NAME     01026400
.ZE23P              ANOP  ,                                             01026500
                    AIF   (T'&ZCGPR NE 'N').ZE23R  NON NUMERIC          01026600
                    AIF   ('&ZCGPR' LT '2').ZE23Q                       01026700
                    AIF   ('&ZCGPR' LE '12').ZE23R                      01026800
.ZE23Q              ANOP  ,                                             01026900
&ZMS                SETC  '"GAP='                                       01027000
&ZMS                SETC  '&ZMS.&GAP"'                                  01027100
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01027200
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01027300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01027400
.ZE23R              ANOP  ,                                             01027500
.*----------------------------------------------------------------***   01027600
.***AE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVAR KEY                         01027700
                    AIF   (N'&ERRBFLST LE 1).ZE26A  CK NUM              01027800
&ZMS                SETC  '"ERRBFLST='                                  01027900
&ZMS                SETC  '&ZMS.&ERRBFLST"'                             01028000
&ZMS                SETC  '&ZMS "ERRBFLST"'                             01028100
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01028200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01028300
.ZE26A              ANOP  ,                                             01028400
.*-------------------------------------------------------------------   01028500
.***AE.KXVAR04 NAME, OPT OUTPUT, KEYS -XVAR ARGUMENT                    01028600
                    AIF   (K'&ERRBFLST(1) LE 0).ZE26B NO PRM            01028700
&ZXERRBFLST         SETC  'OUTPUT'    SET IN/OUTPUT                     01028800
&XERRBFLST          SETC  '&ERRBFLST(1)'        SET XVARIABLE           01028900
                    AIF   (N'&ERRBFLST GT 1).ZE26B                      01029000
.*                  ANOP                                                01029100
&XERRBFLST          SETC  '&ERRBFLST'           SET XVARIABLE           01029200
.ZE26B              ANOP  ,                                             01029300
.*-------------------------------------------------------------------   01029400
.***AE.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   01029500
                    AIF   (K'&ZXERRBFLST LE 0).ZE26R  NOT I/O           01029600
                    AIF   ('&XERRBFLST'(1,1) NE '(').ZE26R              01029700
&ZCGPR              SETC  '&XERRBFLST'(2,K'&XERRBFLST-2)                01029800
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE26P                  01029900
                    AIF   (K'&ZCGPR GT 2).ZE26Q                         01030000
                    AIF   ('&ZCGPR' EQ '0').ZE26Q                       01030100
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01030200
                    AIF   (T'&ZCGPR NE 'N').ZE26Q  INVALID REG NAME     01030300
.ZE26P              ANOP  ,                                             01030400
                    AIF   (T'&ZCGPR NE 'N').ZE26R  NON NUMERIC          01030500
                    AIF   ('&ZCGPR' LT '2').ZE26Q                       01030600
                    AIF   ('&ZCGPR' LE '12').ZE26R                      01030700
.ZE26Q              ANOP  ,                                             01030800
&ZMS                SETC  '"ERRBFLST='                                  01030900
&ZMS                SETC  '&ZMS.&ERRBFLST"'                             01031000
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01031100
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01031200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01031300
.ZE26R              ANOP  ,                                             01031400
.*----------------------------------------------------------------***   01031500
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01031600
                    AIF   (N'&OWNERID LE 1).ZE29A  CK NUM               01031700
&ZMS                SETC  '"OWNERID='                                   01031800
&ZMS                SETC  '&ZMS.&OWNERID"'                              01031900
&ZMS                SETC  '&ZMS "OWNERID"'                              01032000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01032100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01032200
.ZE29A              ANOP  ,                                             01032300
.*-------------------------------------------------------------------   01032400
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01032500
                    AIF   (K'&OWNERID(1) LE 0).ZE29B NO PRM             01032600
&ZXOWNERID          SETC  'INPUT'     SET IN/OUTPUT                     01032700
&XOWNERID           SETC  '&OWNERID(1)'         SET XVARIABLE           01032800
                    AIF   (N'&OWNERID GT 1).ZE29B                       01032900
.*                  ANOP                                                01033000
&XOWNERID           SETC  '&OWNERID'  SET XVARIABLE                     01033100
.ZE29B              ANOP  ,                                             01033200
.*-------------------------------------------------------------------   01033300
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01033400
                    AIF   (K'&ZXOWNERID LE 0).ZE29R  NOT I/O            01033500
                    AIF   ('&XOWNERID'(1,1) NE '(').ZE29R               01033600
&ZCGPR              SETC  '&XOWNERID'(2,K'&XOWNERID-2)                  01033700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE29P                  01033800
                    AIF   (K'&ZCGPR GT 2).ZE29Q                         01033900
                    AIF   ('&ZCGPR' EQ '0').ZE29Q                       01034000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01034100
                    AIF   (T'&ZCGPR NE 'N').ZE29Q  INVALID REG NAME     01034200
.ZE29P              ANOP  ,                                             01034300
                    AIF   (T'&ZCGPR NE 'N').ZE29R  NON NUMERIC          01034400
                    AIF   ('&ZCGPR' LT '2').ZE29Q                       01034500
                    AIF   ('&ZCGPR' LE '12').ZE29R                      01034600
.ZE29Q              ANOP  ,                                             01034700
&ZMS                SETC  '"OWNERID='                                   01034800
&ZMS                SETC  '&ZMS.&OWNERID"'                              01034900
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01035000
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01035100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01035200
.ZE29R              ANOP  ,                                             01035300
.*----------------------------------------------------------------***   01035400
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01035500
                    AIF   (N'&COMPID LE 1).ZE32A  CK NUM                01035600
&ZMS                SETC  '"COMPID='                                    01035700
&ZMS                SETC  '&ZMS.&COMPID"'                               01035800
&ZMS                SETC  '&ZMS "COMPID"'                               01035900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01036000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01036100
.ZE32A              ANOP  ,                                             01036200
.*-------------------------------------------------------------------   01036300
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01036400
                    AIF   (K'&COMPID(1) LE 0).ZE32B NO PRM              01036500
&ZXCOMPID           SETC  'INPUT'     SET IN/OUTPUT                     01036600
&XCOMPID            SETC  '&COMPID(1)'          SET XVARIABLE           01036700
                    AIF   (N'&COMPID GT 1).ZE32B                        01036800
.*                  ANOP                                                01036900
&XCOMPID            SETC  '&COMPID'   SET XVARIABLE                     01037000
.ZE32B              ANOP  ,                                             01037100
.*-------------------------------------------------------------------   01037200
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01037300
                    AIF   (K'&ZXCOMPID LE 0).ZE32R  NOT I/O             01037400
                    AIF   ('&XCOMPID'(1,1) NE '(').ZE32R                01037500
&ZCGPR              SETC  '&XCOMPID'(2,K'&XCOMPID-2)                    01037600
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE32P                  01037700
                    AIF   (K'&ZCGPR GT 2).ZE32Q                         01037800
                    AIF   ('&ZCGPR' EQ '0').ZE32Q                       01037900
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01038000
                    AIF   (T'&ZCGPR NE 'N').ZE32Q  INVALID REG NAME     01038100
.ZE32P              ANOP  ,                                             01038200
                    AIF   (T'&ZCGPR NE 'N').ZE32R  NON NUMERIC          01038300
                    AIF   ('&ZCGPR' LT '2').ZE32Q                       01038400
                    AIF   ('&ZCGPR' LE '12').ZE32R                      01038500
.ZE32Q              ANOP  ,                                             01038600
&ZMS                SETC  '"COMPID='                                    01038700
&ZMS                SETC  '&ZMS.&COMPID"'                               01038800
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01038900
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01039000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01039100
.ZE32R              ANOP  ,                                             01039200
.*----------------------------------------------------------------***   01039300
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01039400
                    AIF   (N'&COMPUSER LE 1).ZE35A  CK NUM              01039500
&ZMS                SETC  '"COMPUSER='                                  01039600
&ZMS                SETC  '&ZMS.&COMPUSER"'                             01039700
&ZMS                SETC  '&ZMS "COMPUSER"'                             01039800
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01039900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01040000
.ZE35A              ANOP  ,                                             01040100
.*-------------------------------------------------------------------   01040200
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01040300
                    AIF   (K'&COMPUSER(1) LE 0).ZE35B NO PRM            01040400
&ZXCOMPUSER         SETC  'INPUT'     SET IN/OUTPUT                     01040500
&XCOMPUSER          SETC  '&COMPUSER(1)'        SET XVARIABLE           01040600
                    AIF   (N'&COMPUSER GT 1).ZE35B                      01040700
.*                  ANOP                                                01040800
&XCOMPUSER          SETC  '&COMPUSER'           SET XVARIABLE           01040900
.ZE35B              ANOP  ,                                             01041000
.*-------------------------------------------------------------------   01041100
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01041200
                    AIF   (K'&ZXCOMPUSER LE 0).ZE35R  NOT I/O           01041300
                    AIF   ('&XCOMPUSER'(1,1) NE '(').ZE35R              01041400
&ZCGPR              SETC  '&XCOMPUSER'(2,K'&XCOMPUSER-2)                01041500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE35P                  01041600
                    AIF   (K'&ZCGPR GT 2).ZE35Q                         01041700
                    AIF   ('&ZCGPR' EQ '0').ZE35Q                       01041800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01041900
                    AIF   (T'&ZCGPR NE 'N').ZE35Q  INVALID REG NAME     01042000
.ZE35P              ANOP  ,                                             01042100
                    AIF   (T'&ZCGPR NE 'N').ZE35R  NON NUMERIC          01042200
                    AIF   ('&ZCGPR' LT '2').ZE35Q                       01042300
                    AIF   ('&ZCGPR' LE '12').ZE35R                      01042400
.ZE35Q              ANOP  ,                                             01042500
&ZMS                SETC  '"COMPUSER='                                  01042600
&ZMS                SETC  '&ZMS.&COMPUSER"'                             01042700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01042800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01042900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01043000
.ZE35R              ANOP  ,                                             01043100
.*----------------------------------------------------------------***   01043200
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01043300
                    AIF   (N'&TASKID LE 1).ZE38A  CK NUM                01043400
&ZMS                SETC  '"TASKID='                                    01043500
&ZMS                SETC  '&ZMS.&TASKID"'                               01043600
&ZMS                SETC  '&ZMS "TASKID"'                               01043700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01043800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01043900
.ZE38A              ANOP  ,                                             01044000
.*-------------------------------------------------------------------   01044100
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01044200
                    AIF   (K'&TASKID(1) LE 0).ZE38B NO PRM              01044300
&ZXTASKID           SETC  'INPUT'     SET IN/OUTPUT                     01044400
&XTASKID            SETC  '&TASKID(1)'          SET XVARIABLE           01044500
                    AIF   (N'&TASKID GT 1).ZE38B                        01044600
.*                  ANOP                                                01044700
&XTASKID            SETC  '&TASKID'   SET XVARIABLE                     01044800
.ZE38B              ANOP  ,                                             01044900
.*-------------------------------------------------------------------   01045000
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01045100
                    AIF   (K'&ZXTASKID LE 0).ZE38R  NOT I/O             01045200
                    AIF   ('&XTASKID'(1,1) NE '(').ZE38R                01045300
&ZCGPR              SETC  '&XTASKID'(2,K'&XTASKID-2)                    01045400
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE38P                  01045500
                    AIF   (K'&ZCGPR GT 2).ZE38Q                         01045600
                    AIF   ('&ZCGPR' EQ '0').ZE38Q                       01045700
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01045800
                    AIF   (T'&ZCGPR NE 'N').ZE38Q  INVALID REG NAME     01045900
.ZE38P              ANOP  ,                                             01046000
                    AIF   (T'&ZCGPR NE 'N').ZE38R  NON NUMERIC          01046100
                    AIF   ('&ZCGPR' LT '2').ZE38Q                       01046200
                    AIF   ('&ZCGPR' LE '12').ZE38R                      01046300
.ZE38Q              ANOP  ,                                             01046400
&ZMS                SETC  '"TASKID='                                    01046500
&ZMS                SETC  '&ZMS.&TASKID"'                               01046600
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01046700
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01046800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01046900
.ZE38R              ANOP  ,                                             01047000
.*----------------------------------------------------------------***   01047100
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01047200
                    AIF   (N'&THREAD LE 1).ZE41A  CK NUM                01047300
&ZMS                SETC  '"THREAD='                                    01047400
&ZMS                SETC  '&ZMS.&THREAD"'                               01047500
&ZMS                SETC  '&ZMS "THREAD"'                               01047600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01047700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01047800
.ZE41A              ANOP  ,                                             01047900
.*-------------------------------------------------------------------   01048000
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01048100
                    AIF   (K'&THREAD(1) LE 0).ZE41B NO PRM              01048200
&ZXTHREAD           SETC  'INPUT'     SET IN/OUTPUT                     01048300
&XTHREAD            SETC  '&THREAD(1)'          SET XVARIABLE           01048400
                    AIF   (N'&THREAD GT 1).ZE41B                        01048500
.*                  ANOP                                                01048600
&XTHREAD            SETC  '&THREAD'   SET XVARIABLE                     01048700
.ZE41B              ANOP  ,                                             01048800
.*-------------------------------------------------------------------   01048900
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01049000
                    AIF   (K'&ZXTHREAD LE 0).ZE41R  NOT I/O             01049100
                    AIF   ('&XTHREAD'(1,1) NE '(').ZE41R                01049200
&ZCGPR              SETC  '&XTHREAD'(2,K'&XTHREAD-2)                    01049300
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE41P                  01049400
                    AIF   (K'&ZCGPR GT 2).ZE41Q                         01049500
                    AIF   ('&ZCGPR' EQ '0').ZE41Q                       01049600
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01049700
                    AIF   (T'&ZCGPR NE 'N').ZE41Q  INVALID REG NAME     01049800
.ZE41P              ANOP  ,                                             01049900
                    AIF   (T'&ZCGPR NE 'N').ZE41R  NON NUMERIC          01050000
                    AIF   ('&ZCGPR' LT '2').ZE41Q                       01050100
                    AIF   ('&ZCGPR' LE '12').ZE41R                      01050200
.ZE41Q              ANOP  ,                                             01050300
&ZMS                SETC  '"THREAD='                                    01050400
&ZMS                SETC  '&ZMS.&THREAD"'                               01050500
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01050600
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01050700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01050800
.ZE41R              ANOP  ,                                             01050900
.*----------------------------------------------------------------***   01051000
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01051100
                    AIF   (N'&UTILRTN LE 1).ZE44A  CK NUM               01051200
&ZMS                SETC  '"UTILRTN='                                   01051300
&ZMS                SETC  '&ZMS.&UTILRTN"'                              01051400
&ZMS                SETC  '&ZMS "UTILRTN"'                              01051500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01051600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01051700
.ZE44A              ANOP  ,                                             01051800
.*-------------------------------------------------------------------   01051900
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01052000
                    AIF   (K'&UTILRTN(1) LE 0).ZE44B NO PRM             01052100
&ZXUTILRTN          SETC  'INPUT'     SET IN/OUTPUT                     01052200
&XUTILRTN           SETC  '&UTILRTN(1)'         SET XVARIABLE           01052300
                    AIF   (N'&UTILRTN GT 1).ZE44B                       01052400
.*                  ANOP                                                01052500
&XUTILRTN           SETC  '&UTILRTN'  SET XVARIABLE                     01052600
.ZE44B              ANOP  ,                                             01052700
.*-------------------------------------------------------------------   01052800
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01052900
                    AIF   (K'&ZXUTILRTN LE 0).ZE44R  NOT I/O            01053000
                    AIF   ('&XUTILRTN'(1,1) NE '(').ZE44R               01053100
&ZCGPR              SETC  '&XUTILRTN'(2,K'&XUTILRTN-2)                  01053200
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE44P                  01053300
                    AIF   (K'&ZCGPR GT 2).ZE44Q                         01053400
                    AIF   ('&ZCGPR' EQ '0').ZE44Q                       01053500
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01053600
                    AIF   (T'&ZCGPR NE 'N').ZE44Q  INVALID REG NAME     01053700
.ZE44P              ANOP  ,                                             01053800
                    AIF   (T'&ZCGPR NE 'N').ZE44R  NON NUMERIC          01053900
                    AIF   ('&ZCGPR' LT '2').ZE44Q                       01054000
                    AIF   ('&ZCGPR' LE '12').ZE44R                      01054100
.ZE44Q              ANOP  ,                                             01054200
&ZMS                SETC  '"UTILRTN='                                   01054300
&ZMS                SETC  '&ZMS.&UTILRTN"'                              01054400
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01054500
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01054600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01054700
.ZE44R              ANOP  ,                                             01054800
.*-------------------------------------------------------------------   01054900
.***AE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           01055000
&ZTLC               SETC 'CHANGE_OWNER'                                 01055100
                    AIF   ('&REQUEST(1)' NE '&ZTLC').ZE46A              01055200
&XREQUEST           SETC  'CHANGE_OWNER'        SET KEYWORD             01055300
                    AIF   (N'&REQUEST LE 1).ZE46A  CK NUM               01055400
&ZMS                SETC  '"REQUEST='                                   01055500
&ZMS                SETC  '&ZMS.&REQUEST"'                              01055600
&ZMS                SETC  '&ZMS "REQUEST"'                              01055700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01055800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01055900
.ZE46A              ANOP  ,                                             01056000
.*----------------------------------------------------------------***   01056100
.***AE.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE                      01056200
&XDUMMY2            SETC  ''          INITIALIZE XVARIABLE              01056300
                    AIF   (K'&BUFLIST LE 0).ZE48C                       01056400
&ZXDUMMY2           SETC  'INPUT'     SET IN/OUTPUT                     01056500
&XDUMMY2            SETC  'BUFLIST'   SET XVARIABLE                     01056600
&ZXBUFLIST          SETC  'INPUT'     SET IN/OUTPUT                     01056700
&XBUFLIST           SETC  '&BUFLIST(1)'         SET XVARIABLE PARM      01056800
                    AIF   (N'&BUFLIST GT 1).ZE48A                       01056900
&XBUFLIST           SETC  '&BUFLIST'  SET XVARIABLE PARM                01057000
.ZE48A              AIF   (N'&BUFLIST LE 1).ZE48B  CK NUM               01057100
&ZMS                SETC  '"BUFLIST='                                   01057200
&ZMS                SETC  '&ZMS.&BUFLIST"'                              01057300
&ZMS                SETC  '&ZMS "BUFLIST"'                              01057400
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01057500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01057600
.ZE48B              AIF   (K'&XBUFLIST GT 0).ZE48C  ONE PARM            01057700
&ZXDUMMY2           SETC  ''          RESET IN/OUTPUT                   01057800
&ZXBUFLIST          SETC  ''          RESET IN/OUTPUT                   01057900
.ZE48C              ANOP  ,                                             01058000
.*----------------------------------------------------------------***   01058100
.***AE.KMEKY02 NAME, RQD INPUT, ME KEYS -NON-XVAR KEY                   01058200
                    AIF   (K'&BUFLST64 LE 0).ZE49D  NO ME KEY           01058300
                    AIF   (N'&BUFLST64 LE 1).ZE49A  CK NUM              01058400
&ZMS                SETC  '"BUFLST64='                                  01058500
&ZMS                SETC  '&ZMS.&BUFLST64"'                             01058600
&ZMS                SETC  '&ZMS "BUFLST64"'                             01058700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01058800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01058900
.ZE49A              AIF   (K'&XDUMMY2 LE 0).ZE49B                       01059000
&ZMS                SETC  '"BUFLST64'                                   01059100
&ZMS                SETC  '&ZMS.=&BUFLST64"'                            01059200
&ZMS                SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'         01059300
&ZMS                SETC  '&ZMS "&XDUMMY2"'                             01059400
                    MNOTE 8,' &ZMS KEY.'                                01059500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01059600
                    AGO   .ZE49D                                        01059700
.*                                                                      01059800
.ZE49B              ANOP  ,                                             01059900
&ZXDUMMY2           SETC  'INPUT'     SET IN/OUTPUT                     01060000
&XDUMMY2            SETC  'BUFLST64'  SET XVARIABLE                     01060100
&ZXBUFLST64         SETC  'INPUT'     SET IN/OUTPUT                     01060200
&XBUFLST64          SETC  '&BUFLST64(1)'        SET PARM                01060300
                    AIF   (N'&BUFLST64 GT 1).ZE49C                      01060400
&XBUFLST64          SETC  '&BUFLST64'           SET PARM                01060500
.ZE49C              AIF   (K'&XBUFLST64 GT 0).ZE49D  ONE PARM           01060600
&ZXDUMMY2           SETC  ''          RESET IN/OUTPUT                   01060700
&ZXBUFLST64         SETC  ''          RESET IN/OUTPUT                   01060800
.ZE49D              ANOP  ,                                             01060900
.*------------------------------------------------------------------    01061000
.***AE.KMEKY07 NAME, RQD INPUT, ME KEYS -CHECK IF ENTERED               01061100
                    AIF   (K'&XDUMMY2 GT 0).ZE50B                       01061200
&ZXDUMMY2           SETC  ''          RESET IN/OUTPUT                   01061300
&XDUMMY2            SETC  ''          SET NULL                          01061400
&ZXBUFLIST          SETC  ''          RESET OUTPUT                      01061500
&XBUFLIST           SETC  ''          SET NULL PARM                     01061600
.ZE50B              ANOP  ,                                             01061700
.*-------------------------------------------------------------------   01061800
.***AE.KMEKY08 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           01061900
.ZE48     AIF   ('&XDUMMY2' NE 'BUFLIST').ZE49                          01062000
.*-------------------------------------------------------------------   01062100
.***AE.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 01062200
                    AIF   (K'&ZXBUFLIST LE 0).ZE48R  NOT I/O            01062300
                    AIF   ('&XBUFLIST'(1,1) NE '(').ZE48R               01062400
&ZCGPR              SETC  '&XBUFLIST'(2,K'&XBUFLIST-2)                  01062500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE48P                  01062600
                    AIF   (K'&ZCGPR GT 2).ZE48Q                         01062700
                    AIF   ('&ZCGPR' EQ '0').ZE48Q                       01062800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01062900
                    AIF   (T'&ZCGPR NE 'N').ZE48Q  INVALID REG NAME     01063000
.ZE48P              ANOP  ,                                             01063100
                    AIF   (T'&ZCGPR NE 'N').ZE48R  NON NUMERIC          01063200
                    AIF   ('&ZCGPR' LT '2').ZE48Q                       01063300
                    AIF   ('&ZCGPR' LE '12').ZE48R                      01063400
.ZE48Q              ANOP  ,                                             01063500
&ZMS                SETC  '"BUFLIST='                                   01063600
&ZMS                SETC  '&ZMS.&BUFLIST"'                              01063700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01063800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01063900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01064000
.ZE48R              ANOP  ,                                             01064100
.*-------------------------------------------------------------------   01064200
.***AE.KMEKY08 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           01064300
.ZE49     AIF   ('&XDUMMY2' NE 'BUFLST64').ZE50                         01064400
.*-------------------------------------------------------------------   01064500
.***AE.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 01064600
                    AIF   (K'&ZXBUFLST64 LE 0).ZE49R  NOT I/O           01064700
                    AIF   ('&XBUFLST64'(1,1) NE '(').ZE49R              01064800
&ZCGPR              SETC  '&XBUFLST64'(2,K'&XBUFLST64-2)                01064900
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE49P                  01065000
                    AIF   (K'&ZCGPR GT 2).ZE49Q                         01065100
                    AIF   ('&ZCGPR' EQ '0').ZE49Q                       01065200
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01065300
                    AIF   (T'&ZCGPR NE 'N').ZE49Q  INVALID REG NAME     01065400
.ZE49P              ANOP  ,                                             01065500
                    AIF   (T'&ZCGPR NE 'N').ZE49R  NON NUMERIC          01065600
                    AIF   ('&ZCGPR' LT '2').ZE49Q                       01065700
                    AIF   ('&ZCGPR' LE '12').ZE49R                      01065800
.ZE49Q              ANOP  ,                                             01065900
&ZMS                SETC  '"BUFLST64='                                  01066000
&ZMS                SETC  '&ZMS.&BUFLST64"'                             01066100
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01066200
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01066300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01066400
.ZE49R              ANOP  ,                                             01066500
.*-------------------------------------------------------------------   01066600
.***AE.KMEKY09 NAME, RQD INPUT, ME KEYS -END                            01066700
.ZE50               ANOP  ,           END MUTUALLY EXCLUSIVE KEYS       01066800
.*----------------------------------------------------------------***   01066900
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY                          01067000
                    AIF   (N'&BUFNUM LE 1).ZE52A  CK NUM                01067100
&ZMS                SETC  '"BUFNUM='                                    01067200
&ZMS                SETC  '&ZMS.&BUFNUM"'                               01067300
&ZMS                SETC  '&ZMS "BUFNUM"'                               01067400
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01067500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01067600
.ZE52A              ANOP  ,                                             01067700
.*-------------------------------------------------------------------   01067800
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT                     01067900
                    AIF   (K'&BUFNUM(1) LE 0).ZE52B NO PRM              01068000
&ZXBUFNUM           SETC  'INPUT'     SET IN/OUTPUT                     01068100
&XBUFNUM            SETC  '&BUFNUM(1)'          SET XVARIABLE           01068200
                    AIF   (N'&BUFNUM GT 1).ZE52B                        01068300
.*                  ANOP                                                01068400
&XBUFNUM            SETC  '&BUFNUM'   SET XVARIABLE                     01068500
.ZE52B              ANOP  ,                                             01068600
.*-------------------------------------------------------------------   01068700
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    01068800
                    AIF   (K'&ZXBUFNUM LE 0).ZE52R  NOT I/O             01068900
                    AIF   ('&XBUFNUM'(1,1) NE '(').ZE52R                01069000
&ZCGPR              SETC  '&XBUFNUM'(2,K'&XBUFNUM-2)                    01069100
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE52P                  01069200
                    AIF   (K'&ZCGPR GT 2).ZE52Q                         01069300
                    AIF   ('&ZCGPR' EQ '0').ZE52Q                       01069400
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01069500
                    AIF   (T'&ZCGPR NE 'N').ZE52Q  INVALID REG NAME     01069600
.ZE52P              ANOP  ,                                             01069700
                    AIF   (T'&ZCGPR NE 'N').ZE52R  NON NUMERIC          01069800
                    AIF   ('&ZCGPR' LT '2').ZE52Q                       01069900
                    AIF   ('&ZCGPR' LE '12').ZE52R                      01070000
.ZE52Q              ANOP  ,                                             01070100
&ZMS                SETC  '"BUFNUM='                                    01070200
&ZMS                SETC  '&ZMS.&BUFNUM"'                               01070300
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01070400
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01070500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01070600
.ZE52R              ANOP  ,                                             01070700
.*----------------------------------------------------------------***   01070800
.***AE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01070900
                    AIF   (N'&CSMUSER LE 1).ZE55A  CK NUM               01071000
&ZMS                SETC  '"CSMUSER='                                   01071100
&ZMS                SETC  '&ZMS.&CSMUSER"'                              01071200
&ZMS                SETC  '&ZMS "CSMUSER"'                              01071300
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01071400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01071500
.ZE55A              ANOP  ,                                             01071600
.*-------------------------------------------------------------------   01071700
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01071800
.ZE56A   AIF   ('&CSMUSER(1)' NE 'NO').ZE57A                            01071900
&XCSMUSER           SETC  'NO'        SET KEYWORD                       01072000
.*-------------------------------------------------------------------   01072100
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01072200
.ZE57A   AIF   ('&CSMUSER(1)' NE 'YES').ZE58A                           01072300
&XCSMUSER           SETC  'YES'       SET KEYWORD                       01072400
.*-------------------------------------------------------------------   01072500
.***AE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01072600
.ZE58A              AIF   (K'&XCSMUSER GT 0).ZE58B                      01072700
                    AIF   (K'&CSMUSER(1) LE 0).ZE58C                    01072800
&ZMS                SETC  '"CSMUSER='                                   01072900
&ZMS                SETC  '&ZMS.&CSMUSER"'                              01073000
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     01073100
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           01073200
&ZMS                SETC  '&ZMS "NO"'                                   01073300
&ZMS                SETC  '&ZMS OR "YES".'                              01073400
                    MNOTE 8,' &ZMS '                                    01073500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01073600
                    AGO   .ZE58C                                        01073700
.*                                                                      01073800
.ZE58B              ANOP  ,                                             01073900
&ZXCSMUSER          SETC  'INPUT'     SET IN/OUTPUT                     01074000
.ZE58C              ANOP  ,                                             01074100
.*----------------------------------------------------------------***   01074200
.***AE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVAR KEY                         01074300
                    AIF   (N'&ERRBFLST LE 1).ZE60A  CK NUM              01074400
&ZMS                SETC  '"ERRBFLST='                                  01074500
&ZMS                SETC  '&ZMS.&ERRBFLST"'                             01074600
&ZMS                SETC  '&ZMS "ERRBFLST"'                             01074700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01074800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01074900
.ZE60A              ANOP  ,                                             01075000
.*-------------------------------------------------------------------   01075100
.***AE.KXVAR04 NAME, OPT OUTPUT, KEYS -XVAR ARGUMENT                    01075200
                    AIF   (K'&ERRBFLST(1) LE 0).ZE60B NO PRM            01075300
&ZXERRBFLST         SETC  'OUTPUT'    SET IN/OUTPUT                     01075400
&XERRBFLST          SETC  '&ERRBFLST(1)'        SET XVARIABLE           01075500
                    AIF   (N'&ERRBFLST GT 1).ZE60B                      01075600
.*                  ANOP                                                01075700
&XERRBFLST          SETC  '&ERRBFLST'           SET XVARIABLE           01075800
.ZE60B              ANOP  ,                                             01075900
.*-------------------------------------------------------------------   01076000
.***AE.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   01076100
                    AIF   (K'&ZXERRBFLST LE 0).ZE60R  NOT I/O           01076200
                    AIF   ('&XERRBFLST'(1,1) NE '(').ZE60R              01076300
&ZCGPR              SETC  '&XERRBFLST'(2,K'&XERRBFLST-2)                01076400
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE60P                  01076500
                    AIF   (K'&ZCGPR GT 2).ZE60Q                         01076600
                    AIF   ('&ZCGPR' EQ '0').ZE60Q                       01076700
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01076800
                    AIF   (T'&ZCGPR NE 'N').ZE60Q  INVALID REG NAME     01076900
.ZE60P              ANOP  ,                                             01077000
                    AIF   (T'&ZCGPR NE 'N').ZE60R  NON NUMERIC          01077100
                    AIF   ('&ZCGPR' LT '2').ZE60Q                       01077200
                    AIF   ('&ZCGPR' LE '12').ZE60R                      01077300
.ZE60Q              ANOP  ,                                             01077400
&ZMS                SETC  '"ERRBFLST='                                  01077500
&ZMS                SETC  '&ZMS.&ERRBFLST"'                             01077600
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01077700
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01077800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01077900
.ZE60R              ANOP  ,                                             01078000
.*----------------------------------------------------------------***   01078100
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01078200
                    AIF   (N'&GAP LE 1).ZE63A   CK NUM                  01078300
&ZMS                SETC  '"GAP='                                       01078400
&ZMS                SETC  '&ZMS.&GAP"'                                  01078500
&ZMS                SETC  '&ZMS "GAP"'                                  01078600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01078700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01078800
.ZE63A              ANOP  ,                                             01078900
.*-------------------------------------------------------------------   01079000
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01079100
                    AIF   (K'&GAP(1) LE 0).ZE63B NO PRM                 01079200
&ZXGAP              SETC  'INPUT'     SET IN/OUTPUT                     01079300
&XGAP               SETC  '&GAP(1)'   SET XVARIABLE                     01079400
                    AIF   (N'&GAP GT 1).ZE63B                           01079500
.*                  ANOP                                                01079600
&XGAP               SETC  '&GAP'      SET XVARIABLE                     01079700
.ZE63B              ANOP  ,                                             01079800
.*-------------------------------------------------------------------   01079900
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01080000
                    AIF   (K'&ZXGAP LE 0).ZE63R  NOT I/O                01080100
                    AIF   ('&XGAP'(1,1) NE '(').ZE63R                   01080200
&ZCGPR              SETC  '&XGAP'(2,K'&XGAP-2)                          01080300
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE63P                  01080400
                    AIF   (K'&ZCGPR GT 2).ZE63Q                         01080500
                    AIF   ('&ZCGPR' EQ '0').ZE63Q                       01080600
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01080700
                    AIF   (T'&ZCGPR NE 'N').ZE63Q  INVALID REG NAME     01080800
.ZE63P              ANOP  ,                                             01080900
                    AIF   (T'&ZCGPR NE 'N').ZE63R  NON NUMERIC          01081000
                    AIF   ('&ZCGPR' LT '2').ZE63Q                       01081100
                    AIF   ('&ZCGPR' LE '12').ZE63R                      01081200
.ZE63Q              ANOP  ,                                             01081300
&ZMS                SETC  '"GAP='                                       01081400
&ZMS                SETC  '&ZMS.&GAP"'                                  01081500
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01081600
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01081700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01081800
.ZE63R              ANOP  ,                                             01081900
.*----------------------------------------------------------------***   01082000
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01082100
                    AIF   (N'&OWNERID LE 1).ZE66A  CK NUM               01082200
&ZMS                SETC  '"OWNERID='                                   01082300
&ZMS                SETC  '&ZMS.&OWNERID"'                              01082400
&ZMS                SETC  '&ZMS "OWNERID"'                              01082500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01082600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01082700
.ZE66A              ANOP  ,                                             01082800
.*-------------------------------------------------------------------   01082900
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01083000
                    AIF   (K'&OWNERID(1) LE 0).ZE66B NO PRM             01083100
&ZXOWNERID          SETC  'INPUT'     SET IN/OUTPUT                     01083200
&XOWNERID           SETC  '&OWNERID(1)'         SET XVARIABLE           01083300
                    AIF   (N'&OWNERID GT 1).ZE66B                       01083400
.*                  ANOP                                                01083500
&XOWNERID           SETC  '&OWNERID'  SET XVARIABLE                     01083600
.ZE66B              ANOP  ,                                             01083700
.*-------------------------------------------------------------------   01083800
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01083900
                    AIF   (K'&ZXOWNERID LE 0).ZE66R  NOT I/O            01084000
                    AIF   ('&XOWNERID'(1,1) NE '(').ZE66R               01084100
&ZCGPR              SETC  '&XOWNERID'(2,K'&XOWNERID-2)                  01084200
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE66P                  01084300
                    AIF   (K'&ZCGPR GT 2).ZE66Q                         01084400
                    AIF   ('&ZCGPR' EQ '0').ZE66Q                       01084500
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01084600
                    AIF   (T'&ZCGPR NE 'N').ZE66Q  INVALID REG NAME     01084700
.ZE66P              ANOP  ,                                             01084800
                    AIF   (T'&ZCGPR NE 'N').ZE66R  NON NUMERIC          01084900
                    AIF   ('&ZCGPR' LT '2').ZE66Q                       01085000
                    AIF   ('&ZCGPR' LE '12').ZE66R                      01085100
.ZE66Q              ANOP  ,                                             01085200
&ZMS                SETC  '"OWNERID='                                   01085300
&ZMS                SETC  '&ZMS.&OWNERID"'                              01085400
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01085500
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01085600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01085700
.ZE66R              ANOP  ,                                             01085800
.*----------------------------------------------------------------***   01085900
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01086000
                    AIF   (N'&COMPID LE 1).ZE69A  CK NUM                01086100
&ZMS                SETC  '"COMPID='                                    01086200
&ZMS                SETC  '&ZMS.&COMPID"'                               01086300
&ZMS                SETC  '&ZMS "COMPID"'                               01086400
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01086500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01086600
.ZE69A              ANOP  ,                                             01086700
.*-------------------------------------------------------------------   01086800
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01086900
                    AIF   (K'&COMPID(1) LE 0).ZE69B NO PRM              01087000
&ZXCOMPID           SETC  'INPUT'     SET IN/OUTPUT                     01087100
&XCOMPID            SETC  '&COMPID(1)'          SET XVARIABLE           01087200
                    AIF   (N'&COMPID GT 1).ZE69B                        01087300
.*                  ANOP                                                01087400
&XCOMPID            SETC  '&COMPID'   SET XVARIABLE                     01087500
.ZE69B              ANOP  ,                                             01087600
.*-------------------------------------------------------------------   01087700
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01087800
                    AIF   (K'&ZXCOMPID LE 0).ZE69R  NOT I/O             01087900
                    AIF   ('&XCOMPID'(1,1) NE '(').ZE69R                01088000
&ZCGPR              SETC  '&XCOMPID'(2,K'&XCOMPID-2)                    01088100
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE69P                  01088200
                    AIF   (K'&ZCGPR GT 2).ZE69Q                         01088300
                    AIF   ('&ZCGPR' EQ '0').ZE69Q                       01088400
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01088500
                    AIF   (T'&ZCGPR NE 'N').ZE69Q  INVALID REG NAME     01088600
.ZE69P              ANOP  ,                                             01088700
                    AIF   (T'&ZCGPR NE 'N').ZE69R  NON NUMERIC          01088800
                    AIF   ('&ZCGPR' LT '2').ZE69Q                       01088900
                    AIF   ('&ZCGPR' LE '12').ZE69R                      01089000
.ZE69Q              ANOP  ,                                             01089100
&ZMS                SETC  '"COMPID='                                    01089200
&ZMS                SETC  '&ZMS.&COMPID"'                               01089300
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01089400
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01089500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01089600
.ZE69R              ANOP  ,                                             01089700
.*----------------------------------------------------------------***   01089800
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01089900
                    AIF   (N'&COMPUSER LE 1).ZE72A  CK NUM              01090000
&ZMS                SETC  '"COMPUSER='                                  01090100
&ZMS                SETC  '&ZMS.&COMPUSER"'                             01090200
&ZMS                SETC  '&ZMS "COMPUSER"'                             01090300
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01090400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01090500
.ZE72A              ANOP  ,                                             01090600
.*-------------------------------------------------------------------   01090700
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01090800
                    AIF   (K'&COMPUSER(1) LE 0).ZE72B NO PRM            01090900
&ZXCOMPUSER         SETC  'INPUT'     SET IN/OUTPUT                     01091000
&XCOMPUSER          SETC  '&COMPUSER(1)'        SET XVARIABLE           01091100
                    AIF   (N'&COMPUSER GT 1).ZE72B                      01091200
.*                  ANOP                                                01091300
&XCOMPUSER          SETC  '&COMPUSER'           SET XVARIABLE           01091400
.ZE72B              ANOP  ,                                             01091500
.*-------------------------------------------------------------------   01091600
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01091700
                    AIF   (K'&ZXCOMPUSER LE 0).ZE72R  NOT I/O           01091800
                    AIF   ('&XCOMPUSER'(1,1) NE '(').ZE72R              01091900
&ZCGPR              SETC  '&XCOMPUSER'(2,K'&XCOMPUSER-2)                01092000
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE72P                  01092100
                    AIF   (K'&ZCGPR GT 2).ZE72Q                         01092200
                    AIF   ('&ZCGPR' EQ '0').ZE72Q                       01092300
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01092400
                    AIF   (T'&ZCGPR NE 'N').ZE72Q  INVALID REG NAME     01092500
.ZE72P              ANOP  ,                                             01092600
                    AIF   (T'&ZCGPR NE 'N').ZE72R  NON NUMERIC          01092700
                    AIF   ('&ZCGPR' LT '2').ZE72Q                       01092800
                    AIF   ('&ZCGPR' LE '12').ZE72R                      01092900
.ZE72Q              ANOP  ,                                             01093000
&ZMS                SETC  '"COMPUSER='                                  01093100
&ZMS                SETC  '&ZMS.&COMPUSER"'                             01093200
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01093300
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01093400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01093500
.ZE72R              ANOP  ,                                             01093600
.*----------------------------------------------------------------***   01093700
.***AE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01093800
                    AIF   (N'&SKIPBUF LE 1).ZE75A  CK NUM               01093900
&ZMS                SETC  '"SKIPBUF='                                   01094000
&ZMS                SETC  '&ZMS.&SKIPBUF"'                              01094100
&ZMS                SETC  '&ZMS "SKIPBUF"'                              01094200
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01094300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01094400
.ZE75A              ANOP  ,                                             01094500
.*-------------------------------------------------------------------   01094600
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01094700
.ZE76A   AIF   ('&SKIPBUF(1)' NE 'NO').ZE77A                            01094800
&XSKIPBUF           SETC  'NO'        SET KEYWORD                       01094900
.*-------------------------------------------------------------------   01095000
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01095100
.ZE77A   AIF   ('&SKIPBUF(1)' NE 'YES').ZE78A                           01095200
&XSKIPBUF           SETC  'YES'       SET KEYWORD                       01095300
.*-------------------------------------------------------------------   01095400
.***AE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01095500
.ZE78A              AIF   (K'&XSKIPBUF GT 0).ZE78B                      01095600
                    AIF   (K'&SKIPBUF(1) LE 0).ZE78C                    01095700
&ZMS                SETC  '"SKIPBUF='                                   01095800
&ZMS                SETC  '&ZMS.&SKIPBUF"'                              01095900
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     01096000
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           01096100
&ZMS                SETC  '&ZMS "NO"'                                   01096200
&ZMS                SETC  '&ZMS OR "YES".'                              01096300
                    MNOTE 8,' &ZMS '                                    01096400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01096500
                    AGO   .ZE78C                                        01096600
.*                                                                      01096700
.ZE78B              ANOP  ,                                             01096800
&ZXSKIPBUF          SETC  'INPUT'     SET IN/OUTPUT                     01096900
.ZE78C              ANOP  ,                                             01097000
.*----------------------------------------------------------------***   01097100
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01097200
                    AIF   (N'&TASKID LE 1).ZE80A  CK NUM                01097300
&ZMS                SETC  '"TASKID='                                    01097400
&ZMS                SETC  '&ZMS.&TASKID"'                               01097500
&ZMS                SETC  '&ZMS "TASKID"'                               01097600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01097700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01097800
.ZE80A              ANOP  ,                                             01097900
.*-------------------------------------------------------------------   01098000
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01098100
                    AIF   (K'&TASKID(1) LE 0).ZE80B NO PRM              01098200
&ZXTASKID           SETC  'INPUT'     SET IN/OUTPUT                     01098300
&XTASKID            SETC  '&TASKID(1)'          SET XVARIABLE           01098400
                    AIF   (N'&TASKID GT 1).ZE80B                        01098500
.*                  ANOP                                                01098600
&XTASKID            SETC  '&TASKID'   SET XVARIABLE                     01098700
.ZE80B              ANOP  ,                                             01098800
.*-------------------------------------------------------------------   01098900
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01099000
                    AIF   (K'&ZXTASKID LE 0).ZE80R  NOT I/O             01099100
                    AIF   ('&XTASKID'(1,1) NE '(').ZE80R                01099200
&ZCGPR              SETC  '&XTASKID'(2,K'&XTASKID-2)                    01099300
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE80P                  01099400
                    AIF   (K'&ZCGPR GT 2).ZE80Q                         01099500
                    AIF   ('&ZCGPR' EQ '0').ZE80Q                       01099600
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01099700
                    AIF   (T'&ZCGPR NE 'N').ZE80Q  INVALID REG NAME     01099800
.ZE80P              ANOP  ,                                             01099900
                    AIF   (T'&ZCGPR NE 'N').ZE80R  NON NUMERIC          01100000
                    AIF   ('&ZCGPR' LT '2').ZE80Q                       01100100
                    AIF   ('&ZCGPR' LE '12').ZE80R                      01100200
.ZE80Q              ANOP  ,                                             01100300
&ZMS                SETC  '"TASKID='                                    01100400
&ZMS                SETC  '&ZMS.&TASKID"'                               01100500
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01100600
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01100700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01100800
.ZE80R              ANOP  ,                                             01100900
.*----------------------------------------------------------------***   01101000
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01101100
                    AIF   (N'&THREAD LE 1).ZE83A  CK NUM                01101200
&ZMS                SETC  '"THREAD='                                    01101300
&ZMS                SETC  '&ZMS.&THREAD"'                               01101400
&ZMS                SETC  '&ZMS "THREAD"'                               01101500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01101600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01101700
.ZE83A              ANOP  ,                                             01101800
.*-------------------------------------------------------------------   01101900
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01102000
                    AIF   (K'&THREAD(1) LE 0).ZE83B NO PRM              01102100
&ZXTHREAD           SETC  'INPUT'     SET IN/OUTPUT                     01102200
&XTHREAD            SETC  '&THREAD(1)'          SET XVARIABLE           01102300
                    AIF   (N'&THREAD GT 1).ZE83B                        01102400
.*                  ANOP                                                01102500
&XTHREAD            SETC  '&THREAD'   SET XVARIABLE                     01102600
.ZE83B              ANOP  ,                                             01102700
.*-------------------------------------------------------------------   01102800
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01102900
                    AIF   (K'&ZXTHREAD LE 0).ZE83R  NOT I/O             01103000
                    AIF   ('&XTHREAD'(1,1) NE '(').ZE83R                01103100
&ZCGPR              SETC  '&XTHREAD'(2,K'&XTHREAD-2)                    01103200
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE83P                  01103300
                    AIF   (K'&ZCGPR GT 2).ZE83Q                         01103400
                    AIF   ('&ZCGPR' EQ '0').ZE83Q                       01103500
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01103600
                    AIF   (T'&ZCGPR NE 'N').ZE83Q  INVALID REG NAME     01103700
.ZE83P              ANOP  ,                                             01103800
                    AIF   (T'&ZCGPR NE 'N').ZE83R  NON NUMERIC          01103900
                    AIF   ('&ZCGPR' LT '2').ZE83Q                       01104000
                    AIF   ('&ZCGPR' LE '12').ZE83R                      01104100
.ZE83Q              ANOP  ,                                             01104200
&ZMS                SETC  '"THREAD='                                    01104300
&ZMS                SETC  '&ZMS.&THREAD"'                               01104400
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01104500
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01104600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01104700
.ZE83R              ANOP  ,                                             01104800
.*----------------------------------------------------------------***   01104900
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01105000
                    AIF   (N'&UTILRTN LE 1).ZE86A  CK NUM               01105100
&ZMS                SETC  '"UTILRTN='                                   01105200
&ZMS                SETC  '&ZMS.&UTILRTN"'                              01105300
&ZMS                SETC  '&ZMS "UTILRTN"'                              01105400
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01105500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01105600
.ZE86A              ANOP  ,                                             01105700
.*-------------------------------------------------------------------   01105800
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01105900
                    AIF   (K'&UTILRTN(1) LE 0).ZE86B NO PRM             01106000
&ZXUTILRTN          SETC  'INPUT'     SET IN/OUTPUT                     01106100
&XUTILRTN           SETC  '&UTILRTN(1)'         SET XVARIABLE           01106200
                    AIF   (N'&UTILRTN GT 1).ZE86B                       01106300
.*                  ANOP                                                01106400
&XUTILRTN           SETC  '&UTILRTN'  SET XVARIABLE                     01106500
.ZE86B              ANOP  ,                                             01106600
.*-------------------------------------------------------------------   01106700
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01106800
                    AIF   (K'&ZXUTILRTN LE 0).ZE86R  NOT I/O            01106900
                    AIF   ('&XUTILRTN'(1,1) NE '(').ZE86R               01107000
&ZCGPR              SETC  '&XUTILRTN'(2,K'&XUTILRTN-2)                  01107100
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE86P                  01107200
                    AIF   (K'&ZCGPR GT 2).ZE86Q                         01107300
                    AIF   ('&ZCGPR' EQ '0').ZE86Q                       01107400
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01107500
                    AIF   (T'&ZCGPR NE 'N').ZE86Q  INVALID REG NAME     01107600
.ZE86P              ANOP  ,                                             01107700
                    AIF   (T'&ZCGPR NE 'N').ZE86R  NON NUMERIC          01107800
                    AIF   ('&ZCGPR' LT '2').ZE86Q                       01107900
                    AIF   ('&ZCGPR' LE '12').ZE86R                      01108000
.ZE86Q              ANOP  ,                                             01108100
&ZMS                SETC  '"UTILRTN='                                   01108200
&ZMS                SETC  '&ZMS.&UTILRTN"'                              01108300
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01108400
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01108500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01108600
.ZE86R              ANOP  ,                                             01108700
.*-------------------------------------------------------------------   01108800
.***AE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           01108900
&ZTLC               SETC 'COPY_DATA'                                    01109000
                    AIF   ('&REQUEST(1)' NE '&ZTLC').ZE88A              01109100
&XREQUEST           SETC  'COPY_DATA'           SET KEYWORD             01109200
                    AIF   (N'&REQUEST LE 1).ZE88A  CK NUM               01109300
&ZMS                SETC  '"REQUEST='                                   01109400
&ZMS                SETC  '&ZMS.&REQUEST"'                              01109500
&ZMS                SETC  '&ZMS "REQUEST"'                              01109600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01109700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01109800
.ZE88A              ANOP  ,                                             01109900
.*-------------------------------------------------------------------   01110000
.***AE.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01110100
&ZTLC               SETC 'NO'                                           01110200
                    AIF   ('&PAD(1)' NE '&ZTLC').ZE91A                  01110300
&XPAD               SETC  'NO'        SET KEYWORD                       01110400
                    AIF   (N'&PAD LE 1).ZE91A   CK NUM                  01110500
&ZMS                SETC  '"PAD='                                       01110600
&ZMS                SETC  '&ZMS.&PAD"'                                  01110700
&ZMS                SETC  '&ZMS "PAD"'                                  01110800
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01110900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01111000
.ZE91A              ANOP  ,                                             01111100
.*-------------------------------------------------------------------   01111200
.***AE.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01111300
&ZTLC               SETC 'YES'                                          01111400
                    AIF   ('&PAD(1)' NE '&ZTLC').ZE92A                  01111500
&XPAD               SETC  'YES'       SET KEYWORD                       01111600
                    AIF   (N'&PAD LE 1).ZE92A   CK NUM                  01111700
&ZMS                SETC  '"PAD='                                       01111800
&ZMS                SETC  '&ZMS.&PAD"'                                  01111900
&ZMS                SETC  '&ZMS "PAD"'                                  01112000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01112100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01112200
.ZE92A              ANOP  ,                                             01112300
.*----------------------------------------------------------------***   01112400
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY                          01112500
                    AIF   (N'&PADCHAR LE 1).ZE94A  CK NUM               01112600
&ZMS                SETC  '"PADCHAR='                                   01112700
&ZMS                SETC  '&ZMS.&PADCHAR"'                              01112800
&ZMS                SETC  '&ZMS "PADCHAR"'                              01112900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01113000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01113100
.ZE94A              ANOP  ,                                             01113200
.*-------------------------------------------------------------------   01113300
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT                     01113400
                    AIF   (K'&PADCHAR(1) LE 0).ZE94B NO PRM             01113500
&ZXPADCHAR          SETC  'INPUT'     SET IN/OUTPUT                     01113600
&XPADCHAR           SETC  '&PADCHAR(1)'         SET XVARIABLE           01113700
                    AIF   (N'&PADCHAR GT 1).ZE94B                       01113800
.*                  ANOP                                                01113900
&XPADCHAR           SETC  '&PADCHAR'  SET XVARIABLE                     01114000
.ZE94B              ANOP  ,                                             01114100
.*-------------------------------------------------------------------   01114200
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    01114300
                    AIF   (K'&ZXPADCHAR LE 0).ZE94R  NOT I/O            01114400
                    AIF   ('&XPADCHAR'(1,1) NE '(').ZE94R               01114500
&ZCGPR              SETC  '&XPADCHAR'(2,K'&XPADCHAR-2)                  01114600
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE94P                  01114700
                    AIF   (K'&ZCGPR GT 2).ZE94Q                         01114800
                    AIF   ('&ZCGPR' EQ '0').ZE94Q                       01114900
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01115000
                    AIF   (T'&ZCGPR NE 'N').ZE94Q  INVALID REG NAME     01115100
.ZE94P              ANOP  ,                                             01115200
                    AIF   (T'&ZCGPR NE 'N').ZE94R  NON NUMERIC          01115300
                    AIF   ('&ZCGPR' LT '2').ZE94Q                       01115400
                    AIF   ('&ZCGPR' LE '12').ZE94R                      01115500
.ZE94Q              ANOP  ,                                             01115600
&ZMS                SETC  '"PADCHAR='                                   01115700
&ZMS                SETC  '&ZMS.&PADCHAR"'                              01115800
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01115900
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01116000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01116100
.ZE94R              ANOP  ,                                             01116200
.*------------------------------------------------------------------    01116300
.***AE.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           01116400
.ZE96               AIF   (K'&XPAD GT 0).ZE96A                          01116500
                    AIF   (K'&PAD(1) LE 0).ZE96B                        01116600
&ZMS                SETC  '"PAD='                                       01116700
&ZMS                SETC  '&ZMS.&PAD"'                                  01116800
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     01116900
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           01117000
&ZMS                SETC  '&ZMS "NO"'                                   01117100
&ZMS                SETC  '&ZMS OR "YES".'                              01117200
                    MNOTE 8,' &ZMS '                                    01117300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01117400
                    AGO   .ZE96B                                        01117500
.*                                                                      01117600
.ZE96A              ANOP  ,                                             01117700
&ZXPAD              SETC  'INPUT'     SET IN/OUTPUT                     01117800
.ZE96B              ANOP  ,                                             01117900
.*----------------------------------------------------------------***   01118000
.***AE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVAR KEY                         01118100
                    AIF   (N'&SRCERRL LE 1).ZE98A  CK NUM               01118200
&ZMS                SETC  '"SRCERRL='                                   01118300
&ZMS                SETC  '&ZMS.&SRCERRL"'                              01118400
&ZMS                SETC  '&ZMS "SRCERRL"'                              01118500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01118600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01118700
.ZE98A              ANOP  ,                                             01118800
.*-------------------------------------------------------------------   01118900
.***AE.KXVAR04 NAME, OPT OUTPUT, KEYS -XVAR ARGUMENT                    01119000
                    AIF   (K'&SRCERRL(1) LE 0).ZE98B NO PRM             01119100
&ZXSRCERRL          SETC  'OUTPUT'    SET IN/OUTPUT                     01119200
&XSRCERRL           SETC  '&SRCERRL(1)'         SET XVARIABLE           01119300
                    AIF   (N'&SRCERRL GT 1).ZE98B                       01119400
.*                  ANOP                                                01119500
&XSRCERRL           SETC  '&SRCERRL'  SET XVARIABLE                     01119600
.ZE98B              ANOP  ,                                             01119700
.*-------------------------------------------------------------------   01119800
.***AE.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   01119900
                    AIF   (K'&ZXSRCERRL LE 0).ZE98R  NOT I/O            01120000
                    AIF   ('&XSRCERRL'(1,1) NE '(').ZE98R               01120100
&ZCGPR              SETC  '&XSRCERRL'(2,K'&XSRCERRL-2)                  01120200
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE98P                  01120300
                    AIF   (K'&ZCGPR GT 2).ZE98Q                         01120400
                    AIF   ('&ZCGPR' EQ '0').ZE98Q                       01120500
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01120600
                    AIF   (T'&ZCGPR NE 'N').ZE98Q  INVALID REG NAME     01120700
.ZE98P              ANOP  ,                                             01120800
                    AIF   (T'&ZCGPR NE 'N').ZE98R  NON NUMERIC          01120900
                    AIF   ('&ZCGPR' LT '2').ZE98Q                       01121000
                    AIF   ('&ZCGPR' LE '12').ZE98R                      01121100
.ZE98Q              ANOP  ,                                             01121200
&ZMS                SETC  '"SRCERRL='                                   01121300
&ZMS                SETC  '&ZMS.&SRCERRL"'                              01121400
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01121500
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01121600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01121700
.ZE98R              ANOP  ,                                             01121800
.*----------------------------------------------------------------***   01121900
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01122000
                    AIF   (N'&SRCGAP LE 1).ZE101A  CK NUM               01122100
&ZMS                SETC  '"SRCGAP='                                    01122200
&ZMS                SETC  '&ZMS.&SRCGAP"'                               01122300
&ZMS                SETC  '&ZMS "SRCGAP"'                               01122400
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01122500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01122600
.ZE101A             ANOP  ,                                             01122700
.*-------------------------------------------------------------------   01122800
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01122900
                    AIF   (K'&SRCGAP(1) LE 0).ZE101B NO PRM             01123000
&ZXSRCGAP           SETC  'INPUT'     SET IN/OUTPUT                     01123100
&XSRCGAP            SETC  '&SRCGAP(1)'          SET XVARIABLE           01123200
                    AIF   (N'&SRCGAP GT 1).ZE101B                       01123300
.*                  ANOP                                                01123400
&XSRCGAP            SETC  '&SRCGAP'   SET XVARIABLE                     01123500
.ZE101B             ANOP  ,                                             01123600
.*-------------------------------------------------------------------   01123700
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01123800
                    AIF   (K'&ZXSRCGAP LE 0).ZE101R  NOT I/O            01123900
                    AIF   ('&XSRCGAP'(1,1) NE '(').ZE101R               01124000
&ZCGPR              SETC  '&XSRCGAP'(2,K'&XSRCGAP-2)                    01124100
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE101P                 01124200
                    AIF   (K'&ZCGPR GT 2).ZE101Q                        01124300
                    AIF   ('&ZCGPR' EQ '0').ZE101Q                      01124400
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01124500
                    AIF   (T'&ZCGPR NE 'N').ZE101Q  INVALID REG NAME    01124600
.ZE101P             ANOP  ,                                             01124700
                    AIF   (T'&ZCGPR NE 'N').ZE101R  NON NUMERIC         01124800
                    AIF   ('&ZCGPR' LT '2').ZE101Q                      01124900
                    AIF   ('&ZCGPR' LE '12').ZE101R                     01125000
.ZE101Q             ANOP  ,                                             01125100
&ZMS                SETC  '"SRCGAP='                                    01125200
&ZMS                SETC  '&ZMS.&SRCGAP"'                               01125300
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01125400
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01125500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01125600
.ZE101R             ANOP  ,                                             01125700
.*----------------------------------------------------------------***   01125800
.***AE.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE                      01125900
&XDUMMY3            SETC  ''          INITIALIZE XVARIABLE              01126000
                    AIF   (K'&SRCLIST LE 0).ZE104C                      01126100
&ZXDUMMY3           SETC  'INPUT'     SET IN/OUTPUT                     01126200
&XDUMMY3            SETC  'SRCLIST'   SET XVARIABLE                     01126300
&ZXSRCLIST          SETC  'INPUT'     SET IN/OUTPUT                     01126400
&XSRCLIST           SETC  '&SRCLIST(1)'         SET XVARIABLE PARM      01126500
                    AIF   (N'&SRCLIST GT 1).ZE104A                      01126600
&XSRCLIST           SETC  '&SRCLIST'  SET XVARIABLE PARM                01126700
.ZE104A             AIF   (N'&SRCLIST LE 1).ZE104B  CK NUM              01126800
&ZMS                SETC  '"SRCLIST='                                   01126900
&ZMS                SETC  '&ZMS.&SRCLIST"'                              01127000
&ZMS                SETC  '&ZMS "SRCLIST"'                              01127100
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01127200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01127300
.ZE104B             AIF   (K'&XSRCLIST GT 0).ZE104C  ONE PARM           01127400
&ZXDUMMY3           SETC  ''          RESET IN/OUTPUT                   01127500
&ZXSRCLIST          SETC  ''          RESET IN/OUTPUT                   01127600
.ZE104C             ANOP  ,                                             01127700
.*----------------------------------------------------------------***   01127800
.***AE.KMEKY02 NAME, RQD INPUT, ME KEYS -NON-XVAR KEY                   01127900
                    AIF   (K'&SRCLST64 LE 0).ZE105D  NO ME KEY          01128000
                    AIF   (N'&SRCLST64 LE 1).ZE105A  CK NUM             01128100
&ZMS                SETC  '"SRCLST64='                                  01128200
&ZMS                SETC  '&ZMS.&SRCLST64"'                             01128300
&ZMS                SETC  '&ZMS "SRCLST64"'                             01128400
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01128500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01128600
.ZE105A             AIF   (K'&XDUMMY3 LE 0).ZE105B                      01128700
&ZMS                SETC  '"SRCLST64'                                   01128800
&ZMS                SETC  '&ZMS.=&SRCLST64"'                            01128900
&ZMS                SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'         01129000
&ZMS                SETC  '&ZMS "&XDUMMY3"'                             01129100
                    MNOTE 8,' &ZMS KEY.'                                01129200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01129300
                    AGO   .ZE105D                                       01129400
.*                                                                      01129500
.ZE105B             ANOP  ,                                             01129600
&ZXDUMMY3           SETC  'INPUT'     SET IN/OUTPUT                     01129700
&XDUMMY3            SETC  'SRCLST64'  SET XVARIABLE                     01129800
&ZXSRCLST64         SETC  'INPUT'     SET IN/OUTPUT                     01129900
&XSRCLST64          SETC  '&SRCLST64(1)'        SET PARM                01130000
                    AIF   (N'&SRCLST64 GT 1).ZE105C                     01130100
&XSRCLST64          SETC  '&SRCLST64'           SET PARM                01130200
.ZE105C             AIF   (K'&XSRCLST64 GT 0).ZE105D  ONE PARM          01130300
&ZXDUMMY3           SETC  ''          RESET IN/OUTPUT                   01130400
&ZXSRCLST64         SETC  ''          RESET IN/OUTPUT                   01130500
.ZE105D             ANOP  ,                                             01130600
.*------------------------------------------------------------------    01130700
.***AE.KMEKY07 NAME, RQD INPUT, ME KEYS -CHECK IF ENTERED               01130800
                    AIF   (K'&XDUMMY3 GT 0).ZE106B                      01130900
&ZXDUMMY3           SETC  ''          RESET IN/OUTPUT                   01131000
&XDUMMY3            SETC  ''          SET NULL                          01131100
&ZXSRCLIST          SETC  ''          RESET OUTPUT                      01131200
&XSRCLIST           SETC  ''          SET NULL PARM                     01131300
.ZE106B             ANOP  ,                                             01131400
.*-------------------------------------------------------------------   01131500
.***AE.KMEKY08 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           01131600
.ZE104     AIF   ('&XDUMMY3' NE 'SRCLIST').ZE105                        01131700
.*-------------------------------------------------------------------   01131800
.***AE.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 01131900
                    AIF   (K'&ZXSRCLIST LE 0).ZE104R  NOT I/O           01132000
                    AIF   ('&XSRCLIST'(1,1) NE '(').ZE104R              01132100
&ZCGPR              SETC  '&XSRCLIST'(2,K'&XSRCLIST-2)                  01132200
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE104P                 01132300
                    AIF   (K'&ZCGPR GT 2).ZE104Q                        01132400
                    AIF   ('&ZCGPR' EQ '0').ZE104Q                      01132500
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01132600
                    AIF   (T'&ZCGPR NE 'N').ZE104Q  INVALID REG NAME    01132700
.ZE104P             ANOP  ,                                             01132800
                    AIF   (T'&ZCGPR NE 'N').ZE104R  NON NUMERIC         01132900
                    AIF   ('&ZCGPR' LT '2').ZE104Q                      01133000
                    AIF   ('&ZCGPR' LE '12').ZE104R                     01133100
.ZE104Q             ANOP  ,                                             01133200
&ZMS                SETC  '"SRCLIST='                                   01133300
&ZMS                SETC  '&ZMS.&SRCLIST"'                              01133400
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01133500
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01133600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01133700
.ZE104R             ANOP  ,                                             01133800
.*-------------------------------------------------------------------   01133900
.***AE.KMEKY08 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           01134000
.ZE105     AIF   ('&XDUMMY3' NE 'SRCLST64').ZE106                       01134100
.*-------------------------------------------------------------------   01134200
.***AE.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 01134300
                    AIF   (K'&ZXSRCLST64 LE 0).ZE105R  NOT I/O          01134400
                    AIF   ('&XSRCLST64'(1,1) NE '(').ZE105R             01134500
&ZCGPR              SETC  '&XSRCLST64'(2,K'&XSRCLST64-2)                01134600
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE105P                 01134700
                    AIF   (K'&ZCGPR GT 2).ZE105Q                        01134800
                    AIF   ('&ZCGPR' EQ '0').ZE105Q                      01134900
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01135000
                    AIF   (T'&ZCGPR NE 'N').ZE105Q  INVALID REG NAME    01135100
.ZE105P             ANOP  ,                                             01135200
                    AIF   (T'&ZCGPR NE 'N').ZE105R  NON NUMERIC         01135300
                    AIF   ('&ZCGPR' LT '2').ZE105Q                      01135400
                    AIF   ('&ZCGPR' LE '12').ZE105R                     01135500
.ZE105Q             ANOP  ,                                             01135600
&ZMS                SETC  '"SRCLST64='                                  01135700
&ZMS                SETC  '&ZMS.&SRCLST64"'                             01135800
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01135900
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01136000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01136100
.ZE105R             ANOP  ,                                             01136200
.*-------------------------------------------------------------------   01136300
.***AE.KMEKY09 NAME, RQD INPUT, ME KEYS -END                            01136400
.ZE106              ANOP  ,           END MUTUALLY EXCLUSIVE KEYS       01136500
.*----------------------------------------------------------------***   01136600
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY                          01136700
                    AIF   (N'&SRCNUM LE 1).ZE108A  CK NUM               01136800
&ZMS                SETC  '"SRCNUM='                                    01136900
&ZMS                SETC  '&ZMS.&SRCNUM"'                               01137000
&ZMS                SETC  '&ZMS "SRCNUM"'                               01137100
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01137200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01137300
.ZE108A             ANOP  ,                                             01137400
.*-------------------------------------------------------------------   01137500
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT                     01137600
                    AIF   (K'&SRCNUM(1) LE 0).ZE108B NO PRM             01137700
&ZXSRCNUM           SETC  'INPUT'     SET IN/OUTPUT                     01137800
&XSRCNUM            SETC  '&SRCNUM(1)'          SET XVARIABLE           01137900
                    AIF   (N'&SRCNUM GT 1).ZE108B                       01138000
.*                  ANOP                                                01138100
&XSRCNUM            SETC  '&SRCNUM'   SET XVARIABLE                     01138200
.ZE108B             ANOP  ,                                             01138300
.*-------------------------------------------------------------------   01138400
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    01138500
                    AIF   (K'&ZXSRCNUM LE 0).ZE108R  NOT I/O            01138600
                    AIF   ('&XSRCNUM'(1,1) NE '(').ZE108R               01138700
&ZCGPR              SETC  '&XSRCNUM'(2,K'&XSRCNUM-2)                    01138800
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE108P                 01138900
                    AIF   (K'&ZCGPR GT 2).ZE108Q                        01139000
                    AIF   ('&ZCGPR' EQ '0').ZE108Q                      01139100
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01139200
                    AIF   (T'&ZCGPR NE 'N').ZE108Q  INVALID REG NAME    01139300
.ZE108P             ANOP  ,                                             01139400
                    AIF   (T'&ZCGPR NE 'N').ZE108R  NON NUMERIC         01139500
                    AIF   ('&ZCGPR' LT '2').ZE108Q                      01139600
                    AIF   ('&ZCGPR' LE '12').ZE108R                     01139700
.ZE108Q             ANOP  ,                                             01139800
&ZMS                SETC  '"SRCNUM='                                    01139900
&ZMS                SETC  '&ZMS.&SRCNUM"'                               01140000
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01140100
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01140200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01140300
.ZE108R             ANOP  ,                                             01140400
.*----------------------------------------------------------------***   01140500
.***AE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVAR KEY                         01140600
                    AIF   (N'&TARGERRL LE 1).ZE111A  CK NUM             01140700
&ZMS                SETC  '"TARGERRL='                                  01140800
&ZMS                SETC  '&ZMS.&TARGERRL"'                             01140900
&ZMS                SETC  '&ZMS "TARGERRL"'                             01141000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01141100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01141200
.ZE111A             ANOP  ,                                             01141300
.*-------------------------------------------------------------------   01141400
.***AE.KXVAR04 NAME, OPT OUTPUT, KEYS -XVAR ARGUMENT                    01141500
                    AIF   (K'&TARGERRL(1) LE 0).ZE111B NO PRM           01141600
&ZXTARGERRL         SETC  'OUTPUT'    SET IN/OUTPUT                     01141700
&XTARGERRL          SETC  '&TARGERRL(1)'        SET XVARIABLE           01141800
                    AIF   (N'&TARGERRL GT 1).ZE111B                     01141900
.*                  ANOP                                                01142000
&XTARGERRL          SETC  '&TARGERRL'           SET XVARIABLE           01142100
.ZE111B             ANOP  ,                                             01142200
.*-------------------------------------------------------------------   01142300
.***AE.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   01142400
                    AIF   (K'&ZXTARGERRL LE 0).ZE111R  NOT I/O          01142500
                    AIF   ('&XTARGERRL'(1,1) NE '(').ZE111R             01142600
&ZCGPR              SETC  '&XTARGERRL'(2,K'&XTARGERRL-2)                01142700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE111P                 01142800
                    AIF   (K'&ZCGPR GT 2).ZE111Q                        01142900
                    AIF   ('&ZCGPR' EQ '0').ZE111Q                      01143000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01143100
                    AIF   (T'&ZCGPR NE 'N').ZE111Q  INVALID REG NAME    01143200
.ZE111P             ANOP  ,                                             01143300
                    AIF   (T'&ZCGPR NE 'N').ZE111R  NON NUMERIC         01143400
                    AIF   ('&ZCGPR' LT '2').ZE111Q                      01143500
                    AIF   ('&ZCGPR' LE '12').ZE111R                     01143600
.ZE111Q             ANOP  ,                                             01143700
&ZMS                SETC  '"TARGERRL='                                  01143800
&ZMS                SETC  '&ZMS.&TARGERRL"'                             01143900
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01144000
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01144100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01144200
.ZE111R             ANOP  ,                                             01144300
.*----------------------------------------------------------------***   01144400
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01144500
                    AIF   (N'&TARGGAP LE 1).ZE114A  CK NUM              01144600
&ZMS                SETC  '"TARGGAP='                                   01144700
&ZMS                SETC  '&ZMS.&TARGGAP"'                              01144800
&ZMS                SETC  '&ZMS "TARGGAP"'                              01144900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01145000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01145100
.ZE114A             ANOP  ,                                             01145200
.*-------------------------------------------------------------------   01145300
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01145400
                    AIF   (K'&TARGGAP(1) LE 0).ZE114B NO PRM            01145500
&ZXTARGGAP          SETC  'INPUT'     SET IN/OUTPUT                     01145600
&XTARGGAP           SETC  '&TARGGAP(1)'         SET XVARIABLE           01145700
                    AIF   (N'&TARGGAP GT 1).ZE114B                      01145800
.*                  ANOP                                                01145900
&XTARGGAP           SETC  '&TARGGAP'  SET XVARIABLE                     01146000
.ZE114B             ANOP  ,                                             01146100
.*-------------------------------------------------------------------   01146200
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01146300
                    AIF   (K'&ZXTARGGAP LE 0).ZE114R  NOT I/O           01146400
                    AIF   ('&XTARGGAP'(1,1) NE '(').ZE114R              01146500
&ZCGPR              SETC  '&XTARGGAP'(2,K'&XTARGGAP-2)                  01146600
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE114P                 01146700
                    AIF   (K'&ZCGPR GT 2).ZE114Q                        01146800
                    AIF   ('&ZCGPR' EQ '0').ZE114Q                      01146900
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01147000
                    AIF   (T'&ZCGPR NE 'N').ZE114Q  INVALID REG NAME    01147100
.ZE114P             ANOP  ,                                             01147200
                    AIF   (T'&ZCGPR NE 'N').ZE114R  NON NUMERIC         01147300
                    AIF   ('&ZCGPR' LT '2').ZE114Q                      01147400
                    AIF   ('&ZCGPR' LE '12').ZE114R                     01147500
.ZE114Q             ANOP  ,                                             01147600
&ZMS                SETC  '"TARGGAP='                                   01147700
&ZMS                SETC  '&ZMS.&TARGGAP"'                              01147800
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01147900
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01148000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01148100
.ZE114R             ANOP  ,                                             01148200
.*----------------------------------------------------------------***   01148300
.***AE.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE                      01148400
&XDUMMY4            SETC  ''          INITIALIZE XVARIABLE              01148500
                    AIF   (K'&TARGLIST LE 0).ZE117C                     01148600
&ZXDUMMY4           SETC  'INPUT'     SET IN/OUTPUT                     01148700
&XDUMMY4            SETC  'TARGLIST'  SET XVARIABLE                     01148800
&ZXTARGLIST         SETC  'INPUT'     SET IN/OUTPUT                     01148900
&XTARGLIST          SETC  '&TARGLIST(1)'        SET XVARIABLE PARM      01149000
                    AIF   (N'&TARGLIST GT 1).ZE117A                     01149100
&XTARGLIST          SETC  '&TARGLIST'           SET XVARIABLE PARM      01149200
.ZE117A             AIF   (N'&TARGLIST LE 1).ZE117B  CK NUM             01149300
&ZMS                SETC  '"TARGLIST='                                  01149400
&ZMS                SETC  '&ZMS.&TARGLIST"'                             01149500
&ZMS                SETC  '&ZMS "TARGLIST"'                             01149600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01149700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01149800
.ZE117B             AIF   (K'&XTARGLIST GT 0).ZE117C  ONE PARM          01149900
&ZXDUMMY4           SETC  ''          RESET IN/OUTPUT                   01150000
&ZXTARGLIST         SETC  ''          RESET IN/OUTPUT                   01150100
.ZE117C             ANOP  ,                                             01150200
.*----------------------------------------------------------------***   01150300
.***AE.KMEKY02 NAME, RQD INPUT, ME KEYS -NON-XVAR KEY                   01150400
                    AIF   (K'&TARLST64 LE 0).ZE118D  NO ME KEY          01150500
                    AIF   (N'&TARLST64 LE 1).ZE118A  CK NUM             01150600
&ZMS                SETC  '"TARLST64='                                  01150700
&ZMS                SETC  '&ZMS.&TARLST64"'                             01150800
&ZMS                SETC  '&ZMS "TARLST64"'                             01150900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01151000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01151100
.ZE118A             AIF   (K'&XDUMMY4 LE 0).ZE118B                      01151200
&ZMS                SETC  '"TARLST64'                                   01151300
&ZMS                SETC  '&ZMS.=&TARLST64"'                            01151400
&ZMS                SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'         01151500
&ZMS                SETC  '&ZMS "&XDUMMY4"'                             01151600
                    MNOTE 8,' &ZMS KEY.'                                01151700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01151800
                    AGO   .ZE118D                                       01151900
.*                                                                      01152000
.ZE118B             ANOP  ,                                             01152100
&ZXDUMMY4           SETC  'INPUT'     SET IN/OUTPUT                     01152200
&XDUMMY4            SETC  'TARLST64'  SET XVARIABLE                     01152300
&ZXTARLST64         SETC  'INPUT'     SET IN/OUTPUT                     01152400
&XTARLST64          SETC  '&TARLST64(1)'        SET PARM                01152500
                    AIF   (N'&TARLST64 GT 1).ZE118C                     01152600
&XTARLST64          SETC  '&TARLST64'           SET PARM                01152700
.ZE118C             AIF   (K'&XTARLST64 GT 0).ZE118D  ONE PARM          01152800
&ZXDUMMY4           SETC  ''          RESET IN/OUTPUT                   01152900
&ZXTARLST64         SETC  ''          RESET IN/OUTPUT                   01153000
.ZE118D             ANOP  ,                                             01153100
.*------------------------------------------------------------------    01153200
.***AE.KMEKY07 NAME, RQD INPUT, ME KEYS -CHECK IF ENTERED               01153300
                    AIF   (K'&XDUMMY4 GT 0).ZE119B                      01153400
&ZXDUMMY4           SETC  ''          RESET IN/OUTPUT                   01153500
&XDUMMY4            SETC  ''          SET NULL                          01153600
&ZXTARGLIST         SETC  ''          RESET OUTPUT                      01153700
&XTARGLIST          SETC  ''          SET NULL PARM                     01153800
.ZE119B             ANOP  ,                                             01153900
.*-------------------------------------------------------------------   01154000
.***AE.KMEKY08 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           01154100
.ZE117     AIF   ('&XDUMMY4' NE 'TARGLIST').ZE118                       01154200
.*-------------------------------------------------------------------   01154300
.***AE.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 01154400
                    AIF   (K'&ZXTARGLIST LE 0).ZE117R  NOT I/O          01154500
                    AIF   ('&XTARGLIST'(1,1) NE '(').ZE117R             01154600
&ZCGPR              SETC  '&XTARGLIST'(2,K'&XTARGLIST-2)                01154700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE117P                 01154800
                    AIF   (K'&ZCGPR GT 2).ZE117Q                        01154900
                    AIF   ('&ZCGPR' EQ '0').ZE117Q                      01155000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01155100
                    AIF   (T'&ZCGPR NE 'N').ZE117Q  INVALID REG NAME    01155200
.ZE117P             ANOP  ,                                             01155300
                    AIF   (T'&ZCGPR NE 'N').ZE117R  NON NUMERIC         01155400
                    AIF   ('&ZCGPR' LT '2').ZE117Q                      01155500
                    AIF   ('&ZCGPR' LE '12').ZE117R                     01155600
.ZE117Q             ANOP  ,                                             01155700
&ZMS                SETC  '"TARGLIST='                                  01155800
&ZMS                SETC  '&ZMS.&TARGLIST"'                             01155900
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01156000
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01156100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01156200
.ZE117R             ANOP  ,                                             01156300
.*-------------------------------------------------------------------   01156400
.***AE.KMEKY08 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           01156500
.ZE118     AIF   ('&XDUMMY4' NE 'TARLST64').ZE119                       01156600
.*-------------------------------------------------------------------   01156700
.***AE.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 01156800
                    AIF   (K'&ZXTARLST64 LE 0).ZE118R  NOT I/O          01156900
                    AIF   ('&XTARLST64'(1,1) NE '(').ZE118R             01157000
&ZCGPR              SETC  '&XTARLST64'(2,K'&XTARLST64-2)                01157100
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE118P                 01157200
                    AIF   (K'&ZCGPR GT 2).ZE118Q                        01157300
                    AIF   ('&ZCGPR' EQ '0').ZE118Q                      01157400
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01157500
                    AIF   (T'&ZCGPR NE 'N').ZE118Q  INVALID REG NAME    01157600
.ZE118P             ANOP  ,                                             01157700
                    AIF   (T'&ZCGPR NE 'N').ZE118R  NON NUMERIC         01157800
                    AIF   ('&ZCGPR' LT '2').ZE118Q                      01157900
                    AIF   ('&ZCGPR' LE '12').ZE118R                     01158000
.ZE118Q             ANOP  ,                                             01158100
&ZMS                SETC  '"TARLST64='                                  01158200
&ZMS                SETC  '&ZMS.&TARLST64"'                             01158300
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01158400
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01158500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01158600
.ZE118R             ANOP  ,                                             01158700
.*-------------------------------------------------------------------   01158800
.***AE.KMEKY09 NAME, RQD INPUT, ME KEYS -END                            01158900
.ZE119              ANOP  ,           END MUTUALLY EXCLUSIVE KEYS       01159000
.*----------------------------------------------------------------***   01159100
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY                          01159200
                    AIF   (N'&TARGNUM LE 1).ZE121A  CK NUM              01159300
&ZMS                SETC  '"TARGNUM='                                   01159400
&ZMS                SETC  '&ZMS.&TARGNUM"'                              01159500
&ZMS                SETC  '&ZMS "TARGNUM"'                              01159600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01159700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01159800
.ZE121A             ANOP  ,                                             01159900
.*-------------------------------------------------------------------   01160000
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT                     01160100
                    AIF   (K'&TARGNUM(1) LE 0).ZE121B NO PRM            01160200
&ZXTARGNUM          SETC  'INPUT'     SET IN/OUTPUT                     01160300
&XTARGNUM           SETC  '&TARGNUM(1)'         SET XVARIABLE           01160400
                    AIF   (N'&TARGNUM GT 1).ZE121B                      01160500
.*                  ANOP                                                01160600
&XTARGNUM           SETC  '&TARGNUM'  SET XVARIABLE                     01160700
.ZE121B             ANOP  ,                                             01160800
.*-------------------------------------------------------------------   01160900
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    01161000
                    AIF   (K'&ZXTARGNUM LE 0).ZE121R  NOT I/O           01161100
                    AIF   ('&XTARGNUM'(1,1) NE '(').ZE121R              01161200
&ZCGPR              SETC  '&XTARGNUM'(2,K'&XTARGNUM-2)                  01161300
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE121P                 01161400
                    AIF   (K'&ZCGPR GT 2).ZE121Q                        01161500
                    AIF   ('&ZCGPR' EQ '0').ZE121Q                      01161600
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01161700
                    AIF   (T'&ZCGPR NE 'N').ZE121Q  INVALID REG NAME    01161800
.ZE121P             ANOP  ,                                             01161900
                    AIF   (T'&ZCGPR NE 'N').ZE121R  NON NUMERIC         01162000
                    AIF   ('&ZCGPR' LT '2').ZE121Q                      01162100
                    AIF   ('&ZCGPR' LE '12').ZE121R                     01162200
.ZE121Q             ANOP  ,                                             01162300
&ZMS                SETC  '"TARGNUM='                                   01162400
&ZMS                SETC  '&ZMS.&TARGNUM"'                              01162500
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01162600
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01162700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01162800
.ZE121R             ANOP  ,                                             01162900
.*----------------------------------------------------------------***   01163000
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01163100
                    AIF   (N'&THREAD LE 1).ZE124A  CK NUM               01163200
&ZMS                SETC  '"THREAD='                                    01163300
&ZMS                SETC  '&ZMS.&THREAD"'                               01163400
&ZMS                SETC  '&ZMS "THREAD"'                               01163500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01163600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01163700
.ZE124A             ANOP  ,                                             01163800
.*-------------------------------------------------------------------   01163900
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01164000
                    AIF   (K'&THREAD(1) LE 0).ZE124B NO PRM             01164100
&ZXTHREAD           SETC  'INPUT'     SET IN/OUTPUT                     01164200
&XTHREAD            SETC  '&THREAD(1)'          SET XVARIABLE           01164300
                    AIF   (N'&THREAD GT 1).ZE124B                       01164400
.*                  ANOP                                                01164500
&XTHREAD            SETC  '&THREAD'   SET XVARIABLE                     01164600
.ZE124B             ANOP  ,                                             01164700
.*-------------------------------------------------------------------   01164800
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01164900
                    AIF   (K'&ZXTHREAD LE 0).ZE124R  NOT I/O            01165000
                    AIF   ('&XTHREAD'(1,1) NE '(').ZE124R               01165100
&ZCGPR              SETC  '&XTHREAD'(2,K'&XTHREAD-2)                    01165200
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE124P                 01165300
                    AIF   (K'&ZCGPR GT 2).ZE124Q                        01165400
                    AIF   ('&ZCGPR' EQ '0').ZE124Q                      01165500
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01165600
                    AIF   (T'&ZCGPR NE 'N').ZE124Q  INVALID REG NAME    01165700
.ZE124P             ANOP  ,                                             01165800
                    AIF   (T'&ZCGPR NE 'N').ZE124R  NON NUMERIC         01165900
                    AIF   ('&ZCGPR' LT '2').ZE124Q                      01166000
                    AIF   ('&ZCGPR' LE '12').ZE124R                     01166100
.ZE124Q             ANOP  ,                                             01166200
&ZMS                SETC  '"THREAD='                                    01166300
&ZMS                SETC  '&ZMS.&THREAD"'                               01166400
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01166500
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01166600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01166700
.ZE124R             ANOP  ,                                             01166800
.*----------------------------------------------------------------***   01166900
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01167000
                    AIF   (N'&UTILRTN LE 1).ZE127A  CK NUM              01167100
&ZMS                SETC  '"UTILRTN='                                   01167200
&ZMS                SETC  '&ZMS.&UTILRTN"'                              01167300
&ZMS                SETC  '&ZMS "UTILRTN"'                              01167400
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01167500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01167600
.ZE127A             ANOP  ,                                             01167700
.*-------------------------------------------------------------------   01167800
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01167900
                    AIF   (K'&UTILRTN(1) LE 0).ZE127B NO PRM            01168000
&ZXUTILRTN          SETC  'INPUT'     SET IN/OUTPUT                     01168100
&XUTILRTN           SETC  '&UTILRTN(1)'         SET XVARIABLE           01168200
                    AIF   (N'&UTILRTN GT 1).ZE127B                      01168300
.*                  ANOP                                                01168400
&XUTILRTN           SETC  '&UTILRTN'  SET XVARIABLE                     01168500
.ZE127B             ANOP  ,                                             01168600
.*-------------------------------------------------------------------   01168700
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01168800
                    AIF   (K'&ZXUTILRTN LE 0).ZE127R  NOT I/O           01168900
                    AIF   ('&XUTILRTN'(1,1) NE '(').ZE127R              01169000
&ZCGPR              SETC  '&XUTILRTN'(2,K'&XUTILRTN-2)                  01169100
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE127P                 01169200
                    AIF   (K'&ZCGPR GT 2).ZE127Q                        01169300
                    AIF   ('&ZCGPR' EQ '0').ZE127Q                      01169400
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01169500
                    AIF   (T'&ZCGPR NE 'N').ZE127Q  INVALID REG NAME    01169600
.ZE127P             ANOP  ,                                             01169700
                    AIF   (T'&ZCGPR NE 'N').ZE127R  NON NUMERIC         01169800
                    AIF   ('&ZCGPR' LT '2').ZE127Q                      01169900
                    AIF   ('&ZCGPR' LE '12').ZE127R                     01170000
.ZE127Q             ANOP  ,                                             01170100
&ZMS                SETC  '"UTILRTN='                                   01170200
&ZMS                SETC  '&ZMS.&UTILRTN"'                              01170300
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01170400
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01170500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01170600
.ZE127R             ANOP  ,                                             01170700
.*-------------------------------------------------------------------   01170800
.***AE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           01170900
&ZTLC               SETC 'CREATE_POOL'                                  01171000
                    AIF   ('&REQUEST(1)' NE '&ZTLC').ZE129A             01171100
&XREQUEST           SETC  'CREATE_POOL'         SET KEYWORD             01171200
                    AIF   (N'&REQUEST LE 1).ZE129A  CK NUM              01171300
&ZMS                SETC  '"REQUEST='                                   01171400
&ZMS                SETC  '&ZMS.&REQUEST"'                              01171500
&ZMS                SETC  '&ZMS "REQUEST"'                              01171600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01171700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01171800
.ZE129A             ANOP  ,                                             01171900
.*----------------------------------------------------------------***   01172000
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY                          01172100
                    AIF   (N'&BUFSIZE LE 1).ZE131A  CK NUM              01172200
&ZMS                SETC  '"BUFSIZE='                                   01172300
&ZMS                SETC  '&ZMS.&BUFSIZE"'                              01172400
&ZMS                SETC  '&ZMS "BUFSIZE"'                              01172500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01172600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01172700
.ZE131A             ANOP  ,                                             01172800
.*-------------------------------------------------------------------   01172900
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT                     01173000
                    AIF   (K'&BUFSIZE(1) LE 0).ZE131B NO PRM            01173100
&ZXBUFSIZE          SETC  'INPUT'     SET IN/OUTPUT                     01173200
&XBUFSIZE           SETC  '&BUFSIZE(1)'         SET XVARIABLE           01173300
                    AIF   (N'&BUFSIZE GT 1).ZE131B                      01173400
.*                  ANOP                                                01173500
&XBUFSIZE           SETC  '&BUFSIZE'  SET XVARIABLE                     01173600
.ZE131B             ANOP  ,                                             01173700
.*-------------------------------------------------------------------   01173800
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    01173900
                    AIF   (K'&ZXBUFSIZE LE 0).ZE131R  NOT I/O           01174000
                    AIF   ('&XBUFSIZE'(1,1) NE '(').ZE131R              01174100
&ZCGPR              SETC  '&XBUFSIZE'(2,K'&XBUFSIZE-2)                  01174200
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE131P                 01174300
                    AIF   (K'&ZCGPR GT 2).ZE131Q                        01174400
                    AIF   ('&ZCGPR' EQ '0').ZE131Q                      01174500
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01174600
                    AIF   (T'&ZCGPR NE 'N').ZE131Q  INVALID REG NAME    01174700
.ZE131P             ANOP  ,                                             01174800
                    AIF   (T'&ZCGPR NE 'N').ZE131R  NON NUMERIC         01174900
                    AIF   ('&ZCGPR' LT '2').ZE131Q                      01175000
                    AIF   ('&ZCGPR' LE '12').ZE131R                     01175100
.ZE131Q             ANOP  ,                                             01175200
&ZMS                SETC  '"BUFSIZE='                                   01175300
&ZMS                SETC  '&ZMS.&BUFSIZE"'                              01175400
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01175500
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01175600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01175700
.ZE131R             ANOP  ,                                             01175800
.*-------------------------------------------------------------------   01175900
.***AE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           01176000
&ZTLC               SETC 'DSPACE'                                       01176100
                    AIF   ('&BUFSOURC(1)' NE '&ZTLC').ZE135A            01176200
&XBUFSOURC          SETC  'DSPACE'    SET KEYWORD                       01176300
                    AIF   (N'&BUFSOURC LE 1).ZE135A  CK NUM             01176400
&ZMS                SETC  '"BUFSOURC='                                  01176500
&ZMS                SETC  '&ZMS.&BUFSOURC"'                             01176600
&ZMS                SETC  '&ZMS "BUFSOURC"'                             01176700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01176800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01176900
.ZE135A             ANOP  ,                                             01177000
.*----------------------------------------------------------------***   01177100
.***AE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01177200
                    AIF   (N'&BACK LE 1).ZE137A  CK NUM                 01177300
&ZMS                SETC  '"BACK='                                      01177400
&ZMS                SETC  '&ZMS.&BACK"'                                 01177500
&ZMS                SETC  '&ZMS "BACK"'                                 01177600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01177700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01177800
.ZE137A             ANOP  ,                                             01177900
.*-------------------------------------------------------------------   01178000
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01178100
.ZE138A   AIF   ('&BACK(1)' NE '31').ZE139A                             01178200
&XBACK              SETC  '31'        SET KEYWORD                       01178300
.*-------------------------------------------------------------------   01178400
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01178500
.ZE139A   AIF   ('&BACK(1)' NE '64').ZE140A                             01178600
&XBACK              SETC  '64'        SET KEYWORD                       01178700
.*-------------------------------------------------------------------   01178800
.***AE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01178900
.ZE140A             AIF   (K'&XBACK GT 0).ZE140B                        01179000
                    AIF   (K'&BACK(1) LE 0).ZE140C                      01179100
&ZMS                SETC  '"BACK='                                      01179200
&ZMS                SETC  '&ZMS.&BACK"'                                 01179300
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     01179400
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           01179500
&ZMS                SETC  '&ZMS "31"'                                   01179600
&ZMS                SETC  '&ZMS OR "64".'                               01179700
                    MNOTE 8,' &ZMS '                                    01179800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01179900
                    AGO   .ZE140C                                       01180000
.*                                                                      01180100
.ZE140B             ANOP  ,                                             01180200
&ZXBACK             SETC  'INPUT'     SET IN/OUTPUT                     01180300
.ZE140C             ANOP  ,                                             01180400
.*-------------------------------------------------------------------   01180500
.***AE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           01180600
&ZTLC               SETC 'ECSA'                                         01180700
                    AIF   ('&BUFSOURC(1)' NE '&ZTLC').ZE141A            01180800
&XBUFSOURC          SETC  'ECSA'      SET KEYWORD                       01180900
                    AIF   (N'&BUFSOURC LE 1).ZE141A  CK NUM             01181000
&ZMS                SETC  '"BUFSOURC='                                  01181100
&ZMS                SETC  '&ZMS.&BUFSOURC"'                             01181200
&ZMS                SETC  '&ZMS "BUFSOURC"'                             01181300
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01181400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01181500
.ZE141A             ANOP  ,                                             01181600
.*-------------------------------------------------------------------   01181700
.***AE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           01181800
&ZTLC               SETC 'HVCOMM'                                       01181900
                    AIF   ('&BUFSOURC(1)' NE '&ZTLC').ZE142A            01182000
&XBUFSOURC          SETC  'HVCOMM'    SET KEYWORD                       01182100
                    AIF   (N'&BUFSOURC LE 1).ZE142A  CK NUM             01182200
&ZMS                SETC  '"BUFSOURC='                                  01182300
&ZMS                SETC  '&ZMS.&BUFSOURC"'                             01182400
&ZMS                SETC  '&ZMS "BUFSOURC"'                             01182500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01182600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01182700
.ZE142A             ANOP  ,                                             01182800
.*------------------------------------------------------------------    01182900
.***AE.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           01183000
.ZE143              AIF   (K'&XBUFSOURC GT 0).ZE143A                    01183100
                    AIF   (K'&BUFSOURC(1) LE 0).ZE143B                  01183200
&ZMS                SETC  '"BUFSOURC='                                  01183300
&ZMS                SETC  '&ZMS.&BUFSOURC"'                             01183400
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     01183500
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           01183600
&ZMS                SETC  '&ZMS "DSPACE",'                              01183700
&ZMS                SETC  '&ZMS "ECSA",'                                01183800
&ZMS                SETC  '&ZMS OR "HVCOMM".'                           01183900
                    MNOTE 8,' &ZMS '                                    01184000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01184100
                    AGO   .ZE143B                                       01184200
.*                                                                      01184300
.ZE143A             ANOP  ,                                             01184400
&ZXBUFSOURC         SETC  'INPUT'     SET IN/OUTPUT                     01184500
.ZE143B             ANOP  ,                                             01184600
.*----------------------------------------------------------------***   01184700
.***AE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVAR KEY                         01184800
                    AIF   (N'&DS_INFO LE 1).ZE145A  CK NUM              01184900
&ZMS                SETC  '"DS_INFO='                                   01185000
&ZMS                SETC  '&ZMS.&DS_INFO"'                              01185100
&ZMS                SETC  '&ZMS "DS_INFO"'                              01185200
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01185300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01185400
.ZE145A             ANOP  ,                                             01185500
.*-------------------------------------------------------------------   01185600
.***AE.KXVAR04 NAME, OPT OUTPUT, KEYS -XVAR ARGUMENT                    01185700
                    AIF   (K'&DS_INFO(1) LE 0).ZE145B NO PRM            01185800
&ZXDS_INFO          SETC  'OUTPUT'    SET IN/OUTPUT                     01185900
&XDS_INFO           SETC  '&DS_INFO(1)'         SET XVARIABLE           01186000
                    AIF   (N'&DS_INFO GT 1).ZE145B                      01186100
.*                  ANOP                                                01186200
&XDS_INFO           SETC  '&DS_INFO'  SET XVARIABLE                     01186300
.ZE145B             ANOP  ,                                             01186400
.*-------------------------------------------------------------------   01186500
.***AE.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   01186600
                    AIF   (K'&ZXDS_INFO LE 0).ZE145R  NOT I/O           01186700
                    AIF   ('&XDS_INFO'(1,1) NE '(').ZE145R              01186800
&ZCGPR              SETC  '&XDS_INFO'(2,K'&XDS_INFO-2)                  01186900
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE145P                 01187000
                    AIF   (K'&ZCGPR GT 2).ZE145Q                        01187100
                    AIF   ('&ZCGPR' EQ '0').ZE145Q                      01187200
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01187300
                    AIF   (T'&ZCGPR NE 'N').ZE145Q  INVALID REG NAME    01187400
.ZE145P             ANOP  ,                                             01187500
                    AIF   (T'&ZCGPR NE 'N').ZE145R  NON NUMERIC         01187600
                    AIF   ('&ZCGPR' LT '2').ZE145Q                      01187700
                    AIF   ('&ZCGPR' LE '12').ZE145R                     01187800
.ZE145Q             ANOP  ,                                             01187900
&ZMS                SETC  '"DS_INFO='                                   01188000
&ZMS                SETC  '&ZMS.&DS_INFO"'                              01188100
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01188200
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01188300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01188400
.ZE145R             ANOP  ,                                             01188500
.*----------------------------------------------------------------***   01188600
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY                          01188700
                    AIF   (N'&EXPBUF LE 1).ZE148A  CK NUM               01188800
&ZMS                SETC  '"EXPBUF='                                    01188900
&ZMS                SETC  '&ZMS.&EXPBUF"'                               01189000
&ZMS                SETC  '&ZMS "EXPBUF"'                               01189100
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01189200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01189300
.ZE148A             ANOP  ,                                             01189400
.*-------------------------------------------------------------------   01189500
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT                     01189600
                    AIF   (K'&EXPBUF(1) LE 0).ZE148B NO PRM             01189700
&ZXEXPBUF           SETC  'INPUT'     SET IN/OUTPUT                     01189800
&XEXPBUF            SETC  '&EXPBUF(1)'          SET XVARIABLE           01189900
                    AIF   (N'&EXPBUF GT 1).ZE148B                       01190000
.*                  ANOP                                                01190100
&XEXPBUF            SETC  '&EXPBUF'   SET XVARIABLE                     01190200
.ZE148B             ANOP  ,                                             01190300
.*-------------------------------------------------------------------   01190400
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    01190500
                    AIF   (K'&ZXEXPBUF LE 0).ZE148R  NOT I/O            01190600
                    AIF   ('&XEXPBUF'(1,1) NE '(').ZE148R               01190700
&ZCGPR              SETC  '&XEXPBUF'(2,K'&XEXPBUF-2)                    01190800
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE148P                 01190900
                    AIF   (K'&ZCGPR GT 2).ZE148Q                        01191000
                    AIF   ('&ZCGPR' EQ '0').ZE148Q                      01191100
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01191200
                    AIF   (T'&ZCGPR NE 'N').ZE148Q  INVALID REG NAME    01191300
.ZE148P             ANOP  ,                                             01191400
                    AIF   (T'&ZCGPR NE 'N').ZE148R  NON NUMERIC         01191500
                    AIF   ('&ZCGPR' LT '2').ZE148Q                      01191600
                    AIF   ('&ZCGPR' LE '12').ZE148R                     01191700
.ZE148Q             ANOP  ,                                             01191800
&ZMS                SETC  '"EXPBUF='                                    01191900
&ZMS                SETC  '&ZMS.&EXPBUF"'                               01192000
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01192100
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01192200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01192300
.ZE148R             ANOP  ,                                             01192400
.*----------------------------------------------------------------***   01192500
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY                          01192600
                    AIF   (N'&INITBUF LE 1).ZE151A  CK NUM              01192700
&ZMS                SETC  '"INITBUF='                                   01192800
&ZMS                SETC  '&ZMS.&INITBUF"'                              01192900
&ZMS                SETC  '&ZMS "INITBUF"'                              01193000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01193100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01193200
.ZE151A             ANOP  ,                                             01193300
.*-------------------------------------------------------------------   01193400
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT                     01193500
                    AIF   (K'&INITBUF(1) LE 0).ZE151B NO PRM            01193600
&ZXINITBUF          SETC  'INPUT'     SET IN/OUTPUT                     01193700
&XINITBUF           SETC  '&INITBUF(1)'         SET XVARIABLE           01193800
                    AIF   (N'&INITBUF GT 1).ZE151B                      01193900
.*                  ANOP                                                01194000
&XINITBUF           SETC  '&INITBUF'  SET XVARIABLE                     01194100
.ZE151B             ANOP  ,                                             01194200
.*-------------------------------------------------------------------   01194300
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    01194400
                    AIF   (K'&ZXINITBUF LE 0).ZE151R  NOT I/O           01194500
                    AIF   ('&XINITBUF'(1,1) NE '(').ZE151R              01194600
&ZCGPR              SETC  '&XINITBUF'(2,K'&XINITBUF-2)                  01194700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE151P                 01194800
                    AIF   (K'&ZCGPR GT 2).ZE151Q                        01194900
                    AIF   ('&ZCGPR' EQ '0').ZE151Q                      01195000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01195100
                    AIF   (T'&ZCGPR NE 'N').ZE151Q  INVALID REG NAME    01195200
.ZE151P             ANOP  ,                                             01195300
                    AIF   (T'&ZCGPR NE 'N').ZE151R  NON NUMERIC         01195400
                    AIF   ('&ZCGPR' LT '2').ZE151Q                      01195500
                    AIF   ('&ZCGPR' LE '12').ZE151R                     01195600
.ZE151Q             ANOP  ,                                             01195700
&ZMS                SETC  '"INITBUF='                                   01195800
&ZMS                SETC  '&ZMS.&INITBUF"'                              01195900
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01196000
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01196100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01196200
.ZE151R             ANOP  ,                                             01196300
.*----------------------------------------------------------------***   01196400
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY                          01196500
                    AIF   (N'&MINFREE LE 1).ZE154A  CK NUM              01196600
&ZMS                SETC  '"MINFREE='                                   01196700
&ZMS                SETC  '&ZMS.&MINFREE"'                              01196800
&ZMS                SETC  '&ZMS "MINFREE"'                              01196900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01197000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01197100
.ZE154A             ANOP  ,                                             01197200
.*-------------------------------------------------------------------   01197300
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT                     01197400
                    AIF   (K'&MINFREE(1) LE 0).ZE154B NO PRM            01197500
&ZXMINFREE          SETC  'INPUT'     SET IN/OUTPUT                     01197600
&XMINFREE           SETC  '&MINFREE(1)'         SET XVARIABLE           01197700
                    AIF   (N'&MINFREE GT 1).ZE154B                      01197800
.*                  ANOP                                                01197900
&XMINFREE           SETC  '&MINFREE'  SET XVARIABLE                     01198000
.ZE154B             ANOP  ,                                             01198100
.*-------------------------------------------------------------------   01198200
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    01198300
                    AIF   (K'&ZXMINFREE LE 0).ZE154R  NOT I/O           01198400
                    AIF   ('&XMINFREE'(1,1) NE '(').ZE154R              01198500
&ZCGPR              SETC  '&XMINFREE'(2,K'&XMINFREE-2)                  01198600
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE154P                 01198700
                    AIF   (K'&ZCGPR GT 2).ZE154Q                        01198800
                    AIF   ('&ZCGPR' EQ '0').ZE154Q                      01198900
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01199000
                    AIF   (T'&ZCGPR NE 'N').ZE154Q  INVALID REG NAME    01199100
.ZE154P             ANOP  ,                                             01199200
                    AIF   (T'&ZCGPR NE 'N').ZE154R  NON NUMERIC         01199300
                    AIF   ('&ZCGPR' LT '2').ZE154Q                      01199400
                    AIF   ('&ZCGPR' LE '12').ZE154R                     01199500
.ZE154Q             ANOP  ,                                             01199600
&ZMS                SETC  '"MINFREE='                                   01199700
&ZMS                SETC  '&ZMS.&MINFREE"'                              01199800
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01199900
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01200000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01200100
.ZE154R             ANOP  ,                                             01200200
.*----------------------------------------------------------------***   01200300
.***AE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVAR KEY                         01200400
                    AIF   (N'&RETPTOKN LE 1).ZE157A  CK NUM             01200500
&ZMS                SETC  '"RETPTOKN='                                  01200600
&ZMS                SETC  '&ZMS.&RETPTOKN"'                             01200700
&ZMS                SETC  '&ZMS "RETPTOKN"'                             01200800
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01200900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01201000
.ZE157A             ANOP  ,                                             01201100
.*-------------------------------------------------------------------   01201200
.***AE.KXVAR04 NAME, OPT OUTPUT, KEYS -XVAR ARGUMENT                    01201300
                    AIF   (K'&RETPTOKN(1) LE 0).ZE157B NO PRM           01201400
&ZXRETPTOKN         SETC  'OUTPUT'    SET IN/OUTPUT                     01201500
&XRETPTOKN          SETC  '&RETPTOKN(1)'        SET XVARIABLE           01201600
                    AIF   (N'&RETPTOKN GT 1).ZE157B                     01201700
.*                  ANOP                                                01201800
&XRETPTOKN          SETC  '&RETPTOKN'           SET XVARIABLE           01201900
.ZE157B             ANOP  ,                                             01202000
.*-------------------------------------------------------------------   01202100
.***AE.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   01202200
                    AIF   (K'&ZXRETPTOKN LE 0).ZE157R  NOT I/O          01202300
                    AIF   ('&XRETPTOKN'(1,1) NE '(').ZE157R             01202400
&ZCGPR              SETC  '&XRETPTOKN'(2,K'&XRETPTOKN-2)                01202500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE157P                 01202600
                    AIF   (K'&ZCGPR GT 2).ZE157Q                        01202700
                    AIF   ('&ZCGPR' EQ '0').ZE157Q                      01202800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01202900
                    AIF   (T'&ZCGPR NE 'N').ZE157Q  INVALID REG NAME    01203000
.ZE157P             ANOP  ,                                             01203100
                    AIF   (T'&ZCGPR NE 'N').ZE157R  NON NUMERIC         01203200
                    AIF   ('&ZCGPR' LT '2').ZE157Q                      01203300
                    AIF   ('&ZCGPR' LE '12').ZE157R                     01203400
.ZE157Q             ANOP  ,                                             01203500
&ZMS                SETC  '"RETPTOKN='                                  01203600
&ZMS                SETC  '&ZMS.&RETPTOKN"'                             01203700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01203800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01203900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01204000
.ZE157R             ANOP  ,                                             01204100
.*----------------------------------------------------------------***   01204200
.***AE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVAR KEY                         01204300
                    AIF   (N'&STATAREA LE 1).ZE160A  CK NUM             01204400
&ZMS                SETC  '"STATAREA='                                  01204500
&ZMS                SETC  '&ZMS.&STATAREA"'                             01204600
&ZMS                SETC  '&ZMS "STATAREA"'                             01204700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01204800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01204900
.ZE160A             ANOP  ,                                             01205000
.*-------------------------------------------------------------------   01205100
.***AE.KXVAR04 NAME, OPT OUTPUT, KEYS -XVAR ARGUMENT                    01205200
                    AIF   (K'&STATAREA(1) LE 0).ZE160B NO PRM           01205300
&ZXSTATAREA         SETC  'OUTPUT'    SET IN/OUTPUT                     01205400
&XSTATAREA          SETC  '&STATAREA(1)'        SET XVARIABLE           01205500
                    AIF   (N'&STATAREA GT 1).ZE160B                     01205600
.*                  ANOP                                                01205700
&XSTATAREA          SETC  '&STATAREA'           SET XVARIABLE           01205800
.ZE160B             ANOP  ,                                             01205900
.*-------------------------------------------------------------------   01206000
.***AE.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   01206100
                    AIF   (K'&ZXSTATAREA LE 0).ZE160R  NOT I/O          01206200
                    AIF   ('&XSTATAREA'(1,1) NE '(').ZE160R             01206300
&ZCGPR              SETC  '&XSTATAREA'(2,K'&XSTATAREA-2)                01206400
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE160P                 01206500
                    AIF   (K'&ZCGPR GT 2).ZE160Q                        01206600
                    AIF   ('&ZCGPR' EQ '0').ZE160Q                      01206700
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01206800
                    AIF   (T'&ZCGPR NE 'N').ZE160Q  INVALID REG NAME    01206900
.ZE160P             ANOP  ,                                             01207000
                    AIF   (T'&ZCGPR NE 'N').ZE160R  NON NUMERIC         01207100
                    AIF   ('&ZCGPR' LT '2').ZE160Q                      01207200
                    AIF   ('&ZCGPR' LE '12').ZE160R                     01207300
.ZE160Q             ANOP  ,                                             01207400
&ZMS                SETC  '"STATAREA='                                  01207500
&ZMS                SETC  '&ZMS.&STATAREA"'                             01207600
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01207700
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01207800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01207900
.ZE160R             ANOP  ,                                             01208000
.*-------------------------------------------------------------------   01208100
.***AE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           01208200
&ZTLC               SETC 'DELETE_POOL'                                  01208300
                    AIF   ('&REQUEST(1)' NE '&ZTLC').ZE162A             01208400
&XREQUEST           SETC  'DELETE_POOL'         SET KEYWORD             01208500
                    AIF   (N'&REQUEST LE 1).ZE162A  CK NUM              01208600
&ZMS                SETC  '"REQUEST='                                   01208700
&ZMS                SETC  '&ZMS.&REQUEST"'                              01208800
&ZMS                SETC  '&ZMS "REQUEST"'                              01208900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01209000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01209100
.ZE162A             ANOP  ,                                             01209200
.*----------------------------------------------------------------***   01209300
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY                          01209400
                    AIF   (N'&POOLTOKN LE 1).ZE164A  CK NUM             01209500
&ZMS                SETC  '"POOLTOKN='                                  01209600
&ZMS                SETC  '&ZMS.&POOLTOKN"'                             01209700
&ZMS                SETC  '&ZMS "POOLTOKN"'                             01209800
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01209900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01210000
.ZE164A             ANOP  ,                                             01210100
.*-------------------------------------------------------------------   01210200
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT                     01210300
                    AIF   (K'&POOLTOKN(1) LE 0).ZE164B NO PRM           01210400
&ZXPOOLTOKN         SETC  'INPUT'     SET IN/OUTPUT                     01210500
&XPOOLTOKN          SETC  '&POOLTOKN(1)'        SET XVARIABLE           01210600
                    AIF   (N'&POOLTOKN GT 1).ZE164B                     01210700
.*                  ANOP                                                01210800
&XPOOLTOKN          SETC  '&POOLTOKN'           SET XVARIABLE           01210900
.ZE164B             ANOP  ,                                             01211000
.*-------------------------------------------------------------------   01211100
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    01211200
                    AIF   (K'&ZXPOOLTOKN LE 0).ZE164R  NOT I/O          01211300
                    AIF   ('&XPOOLTOKN'(1,1) NE '(').ZE164R             01211400
&ZCGPR              SETC  '&XPOOLTOKN'(2,K'&XPOOLTOKN-2)                01211500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE164P                 01211600
                    AIF   (K'&ZCGPR GT 2).ZE164Q                        01211700
                    AIF   ('&ZCGPR' EQ '0').ZE164Q                      01211800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01211900
                    AIF   (T'&ZCGPR NE 'N').ZE164Q  INVALID REG NAME    01212000
.ZE164P             ANOP  ,                                             01212100
                    AIF   (T'&ZCGPR NE 'N').ZE164R  NON NUMERIC         01212200
                    AIF   ('&ZCGPR' LT '2').ZE164Q                      01212300
                    AIF   ('&ZCGPR' LE '12').ZE164R                     01212400
.ZE164Q             ANOP  ,                                             01212500
&ZMS                SETC  '"POOLTOKN='                                  01212600
&ZMS                SETC  '&ZMS.&POOLTOKN"'                             01212700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01212800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01212900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01213000
.ZE164R             ANOP  ,                                             01213100
.*-------------------------------------------------------------------   01213200
.***AE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           01213300
&ZTLC               SETC 'DUMP_INFO'                                    01213400
                    AIF   ('&REQUEST(1)' NE '&ZTLC').ZE166A             01213500
&XREQUEST           SETC  'DUMP_INFO'           SET KEYWORD             01213600
                    AIF   (N'&REQUEST LE 1).ZE166A  CK NUM              01213700
&ZMS                SETC  '"REQUEST='                                   01213800
&ZMS                SETC  '&ZMS.&REQUEST"'                              01213900
&ZMS                SETC  '&ZMS "REQUEST"'                              01214000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01214100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01214200
.ZE166A             ANOP  ,                                             01214300
.*----------------------------------------------------------------***   01214400
.***AE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVAR KEY                         01214500
                    AIF   (N'&DS_INFO LE 1).ZE168A  CK NUM              01214600
&ZMS                SETC  '"DS_INFO='                                   01214700
&ZMS                SETC  '&ZMS.&DS_INFO"'                              01214800
&ZMS                SETC  '&ZMS "DS_INFO"'                              01214900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01215000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01215100
.ZE168A             ANOP  ,                                             01215200
.*-------------------------------------------------------------------   01215300
.***AE.KXVAR04 NAME, OPT OUTPUT, KEYS -XVAR ARGUMENT                    01215400
                    AIF   (K'&DS_INFO(1) LE 0).ZE168B NO PRM            01215500
&ZXDS_INFO          SETC  'OUTPUT'    SET IN/OUTPUT                     01215600
&XDS_INFO           SETC  '&DS_INFO(1)'         SET XVARIABLE           01215700
                    AIF   (N'&DS_INFO GT 1).ZE168B                      01215800
.*                  ANOP                                                01215900
&XDS_INFO           SETC  '&DS_INFO'  SET XVARIABLE                     01216000
.ZE168B             ANOP  ,                                             01216100
.*-------------------------------------------------------------------   01216200
.***AE.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   01216300
                    AIF   (K'&ZXDS_INFO LE 0).ZE168R  NOT I/O           01216400
                    AIF   ('&XDS_INFO'(1,1) NE '(').ZE168R              01216500
&ZCGPR              SETC  '&XDS_INFO'(2,K'&XDS_INFO-2)                  01216600
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE168P                 01216700
                    AIF   (K'&ZCGPR GT 2).ZE168Q                        01216800
                    AIF   ('&ZCGPR' EQ '0').ZE168Q                      01216900
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01217000
                    AIF   (T'&ZCGPR NE 'N').ZE168Q  INVALID REG NAME    01217100
.ZE168P             ANOP  ,                                             01217200
                    AIF   (T'&ZCGPR NE 'N').ZE168R  NON NUMERIC         01217300
                    AIF   ('&ZCGPR' LT '2').ZE168Q                      01217400
                    AIF   ('&ZCGPR' LE '12').ZE168R                     01217500
.ZE168Q             ANOP  ,                                             01217600
&ZMS                SETC  '"DS_INFO='                                   01217700
&ZMS                SETC  '&ZMS.&DS_INFO"'                              01217800
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01217900
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01218000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01218100
.ZE168R             ANOP  ,                                             01218200
.*-------------------------------------------------------------------   01218300
.***AE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           01218400
&ZTLC               SETC 'FIX_BUFFER'                                   01218500
                    AIF   ('&REQUEST(1)' NE '&ZTLC').ZE170A             01218600
&XREQUEST           SETC  'FIX_BUFFER'          SET KEYWORD             01218700
                    AIF   (N'&REQUEST LE 1).ZE170A  CK NUM              01218800
&ZMS                SETC  '"REQUEST='                                   01218900
&ZMS                SETC  '&ZMS.&REQUEST"'                              01219000
&ZMS                SETC  '&ZMS "REQUEST"'                              01219100
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01219200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01219300
.ZE170A             ANOP  ,                                             01219400
.*----------------------------------------------------------------***   01219500
.***AE.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE                      01219600
&XDUMMY5            SETC  ''          INITIALIZE XVARIABLE              01219700
                    AIF   (K'&BUFLIST LE 0).ZE172C                      01219800
&ZXDUMMY5           SETC  'INPUT'     SET IN/OUTPUT                     01219900
&XDUMMY5            SETC  'BUFLIST'   SET XVARIABLE                     01220000
&ZXBUFLIST          SETC  'INPUT'     SET IN/OUTPUT                     01220100
&XBUFLIST           SETC  '&BUFLIST(1)'         SET XVARIABLE PARM      01220200
                    AIF   (N'&BUFLIST GT 1).ZE172A                      01220300
&XBUFLIST           SETC  '&BUFLIST'  SET XVARIABLE PARM                01220400
.ZE172A             AIF   (N'&BUFLIST LE 1).ZE172B  CK NUM              01220500
&ZMS                SETC  '"BUFLIST='                                   01220600
&ZMS                SETC  '&ZMS.&BUFLIST"'                              01220700
&ZMS                SETC  '&ZMS "BUFLIST"'                              01220800
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01220900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01221000
.ZE172B             AIF   (K'&XBUFLIST GT 0).ZE172C  ONE PARM           01221100
&ZXDUMMY5           SETC  ''          RESET IN/OUTPUT                   01221200
&ZXBUFLIST          SETC  ''          RESET IN/OUTPUT                   01221300
.ZE172C             ANOP  ,                                             01221400
.*----------------------------------------------------------------***   01221500
.***AE.KMEKY02 NAME, RQD INPUT, ME KEYS -NON-XVAR KEY                   01221600
                    AIF   (K'&BUFLST64 LE 0).ZE173D  NO ME KEY          01221700
                    AIF   (N'&BUFLST64 LE 1).ZE173A  CK NUM             01221800
&ZMS                SETC  '"BUFLST64='                                  01221900
&ZMS                SETC  '&ZMS.&BUFLST64"'                             01222000
&ZMS                SETC  '&ZMS "BUFLST64"'                             01222100
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01222200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01222300
.ZE173A             AIF   (K'&XDUMMY5 LE 0).ZE173B                      01222400
&ZMS                SETC  '"BUFLST64'                                   01222500
&ZMS                SETC  '&ZMS.=&BUFLST64"'                            01222600
&ZMS                SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'         01222700
&ZMS                SETC  '&ZMS "&XDUMMY5"'                             01222800
                    MNOTE 8,' &ZMS KEY.'                                01222900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01223000
                    AGO   .ZE173D                                       01223100
.*                                                                      01223200
.ZE173B             ANOP  ,                                             01223300
&ZXDUMMY5           SETC  'INPUT'     SET IN/OUTPUT                     01223400
&XDUMMY5            SETC  'BUFLST64'  SET XVARIABLE                     01223500
&ZXBUFLST64         SETC  'INPUT'     SET IN/OUTPUT                     01223600
&XBUFLST64          SETC  '&BUFLST64(1)'        SET PARM                01223700
                    AIF   (N'&BUFLST64 GT 1).ZE173C                     01223800
&XBUFLST64          SETC  '&BUFLST64'           SET PARM                01223900
.ZE173C             AIF   (K'&XBUFLST64 GT 0).ZE173D  ONE PARM          01224000
&ZXDUMMY5           SETC  ''          RESET IN/OUTPUT                   01224100
&ZXBUFLST64         SETC  ''          RESET IN/OUTPUT                   01224200
.ZE173D             ANOP  ,                                             01224300
.*------------------------------------------------------------------    01224400
.***AE.KMEKY07 NAME, RQD INPUT, ME KEYS -CHECK IF ENTERED               01224500
                    AIF   (K'&XDUMMY5 GT 0).ZE174B                      01224600
&ZXDUMMY5           SETC  ''          RESET IN/OUTPUT                   01224700
&XDUMMY5            SETC  ''          SET NULL                          01224800
&ZXBUFLIST          SETC  ''          RESET OUTPUT                      01224900
&XBUFLIST           SETC  ''          SET NULL PARM                     01225000
.ZE174B             ANOP  ,                                             01225100
.*-------------------------------------------------------------------   01225200
.***AE.KMEKY08 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           01225300
.ZE172     AIF   ('&XDUMMY5' NE 'BUFLIST').ZE173                        01225400
.*-------------------------------------------------------------------   01225500
.***AE.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 01225600
                    AIF   (K'&ZXBUFLIST LE 0).ZE172R  NOT I/O           01225700
                    AIF   ('&XBUFLIST'(1,1) NE '(').ZE172R              01225800
&ZCGPR              SETC  '&XBUFLIST'(2,K'&XBUFLIST-2)                  01225900
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE172P                 01226000
                    AIF   (K'&ZCGPR GT 2).ZE172Q                        01226100
                    AIF   ('&ZCGPR' EQ '0').ZE172Q                      01226200
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01226300
                    AIF   (T'&ZCGPR NE 'N').ZE172Q  INVALID REG NAME    01226400
.ZE172P             ANOP  ,                                             01226500
                    AIF   (T'&ZCGPR NE 'N').ZE172R  NON NUMERIC         01226600
                    AIF   ('&ZCGPR' LT '2').ZE172Q                      01226700
                    AIF   ('&ZCGPR' LE '12').ZE172R                     01226800
.ZE172Q             ANOP  ,                                             01226900
&ZMS                SETC  '"BUFLIST='                                   01227000
&ZMS                SETC  '&ZMS.&BUFLIST"'                              01227100
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01227200
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01227300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01227400
.ZE172R             ANOP  ,                                             01227500
.*-------------------------------------------------------------------   01227600
.***AE.KMEKY08 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           01227700
.ZE173     AIF   ('&XDUMMY5' NE 'BUFLST64').ZE174                       01227800
.*-------------------------------------------------------------------   01227900
.***AE.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 01228000
                    AIF   (K'&ZXBUFLST64 LE 0).ZE173R  NOT I/O          01228100
                    AIF   ('&XBUFLST64'(1,1) NE '(').ZE173R             01228200
&ZCGPR              SETC  '&XBUFLST64'(2,K'&XBUFLST64-2)                01228300
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE173P                 01228400
                    AIF   (K'&ZCGPR GT 2).ZE173Q                        01228500
                    AIF   ('&ZCGPR' EQ '0').ZE173Q                      01228600
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01228700
                    AIF   (T'&ZCGPR NE 'N').ZE173Q  INVALID REG NAME    01228800
.ZE173P             ANOP  ,                                             01228900
                    AIF   (T'&ZCGPR NE 'N').ZE173R  NON NUMERIC         01229000
                    AIF   ('&ZCGPR' LT '2').ZE173Q                      01229100
                    AIF   ('&ZCGPR' LE '12').ZE173R                     01229200
.ZE173Q             ANOP  ,                                             01229300
&ZMS                SETC  '"BUFLST64='                                  01229400
&ZMS                SETC  '&ZMS.&BUFLST64"'                             01229500
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01229600
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01229700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01229800
.ZE173R             ANOP  ,                                             01229900
.*-------------------------------------------------------------------   01230000
.***AE.KMEKY09 NAME, RQD INPUT, ME KEYS -END                            01230100
.ZE174              ANOP  ,           END MUTUALLY EXCLUSIVE KEYS       01230200
.*----------------------------------------------------------------***   01230300
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY                          01230400
                    AIF   (N'&BUFNUM LE 1).ZE176A  CK NUM               01230500
&ZMS                SETC  '"BUFNUM='                                    01230600
&ZMS                SETC  '&ZMS.&BUFNUM"'                               01230700
&ZMS                SETC  '&ZMS "BUFNUM"'                               01230800
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01230900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01231000
.ZE176A             ANOP  ,                                             01231100
.*-------------------------------------------------------------------   01231200
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT                     01231300
                    AIF   (K'&BUFNUM(1) LE 0).ZE176B NO PRM             01231400
&ZXBUFNUM           SETC  'INPUT'     SET IN/OUTPUT                     01231500
&XBUFNUM            SETC  '&BUFNUM(1)'          SET XVARIABLE           01231600
                    AIF   (N'&BUFNUM GT 1).ZE176B                       01231700
.*                  ANOP                                                01231800
&XBUFNUM            SETC  '&BUFNUM'   SET XVARIABLE                     01231900
.ZE176B             ANOP  ,                                             01232000
.*-------------------------------------------------------------------   01232100
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    01232200
                    AIF   (K'&ZXBUFNUM LE 0).ZE176R  NOT I/O            01232300
                    AIF   ('&XBUFNUM'(1,1) NE '(').ZE176R               01232400
&ZCGPR              SETC  '&XBUFNUM'(2,K'&XBUFNUM-2)                    01232500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE176P                 01232600
                    AIF   (K'&ZCGPR GT 2).ZE176Q                        01232700
                    AIF   ('&ZCGPR' EQ '0').ZE176Q                      01232800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01232900
                    AIF   (T'&ZCGPR NE 'N').ZE176Q  INVALID REG NAME    01233000
.ZE176P             ANOP  ,                                             01233100
                    AIF   (T'&ZCGPR NE 'N').ZE176R  NON NUMERIC         01233200
                    AIF   ('&ZCGPR' LT '2').ZE176Q                      01233300
                    AIF   ('&ZCGPR' LE '12').ZE176R                     01233400
.ZE176Q             ANOP  ,                                             01233500
&ZMS                SETC  '"BUFNUM='                                    01233600
&ZMS                SETC  '&ZMS.&BUFNUM"'                               01233700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01233800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01233900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01234000
.ZE176R             ANOP  ,                                             01234100
.*----------------------------------------------------------------***   01234200
.***AE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVAR KEY                         01234300
                    AIF   (N'&ERRBFLST LE 1).ZE179A  CK NUM             01234400
&ZMS                SETC  '"ERRBFLST='                                  01234500
&ZMS                SETC  '&ZMS.&ERRBFLST"'                             01234600
&ZMS                SETC  '&ZMS "ERRBFLST"'                             01234700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01234800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01234900
.ZE179A             ANOP  ,                                             01235000
.*-------------------------------------------------------------------   01235100
.***AE.KXVAR04 NAME, OPT OUTPUT, KEYS -XVAR ARGUMENT                    01235200
                    AIF   (K'&ERRBFLST(1) LE 0).ZE179B NO PRM           01235300
&ZXERRBFLST         SETC  'OUTPUT'    SET IN/OUTPUT                     01235400
&XERRBFLST          SETC  '&ERRBFLST(1)'        SET XVARIABLE           01235500
                    AIF   (N'&ERRBFLST GT 1).ZE179B                     01235600
.*                  ANOP                                                01235700
&XERRBFLST          SETC  '&ERRBFLST'           SET XVARIABLE           01235800
.ZE179B             ANOP  ,                                             01235900
.*-------------------------------------------------------------------   01236000
.***AE.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   01236100
                    AIF   (K'&ZXERRBFLST LE 0).ZE179R  NOT I/O          01236200
                    AIF   ('&XERRBFLST'(1,1) NE '(').ZE179R             01236300
&ZCGPR              SETC  '&XERRBFLST'(2,K'&XERRBFLST-2)                01236400
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE179P                 01236500
                    AIF   (K'&ZCGPR GT 2).ZE179Q                        01236600
                    AIF   ('&ZCGPR' EQ '0').ZE179Q                      01236700
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01236800
                    AIF   (T'&ZCGPR NE 'N').ZE179Q  INVALID REG NAME    01236900
.ZE179P             ANOP  ,                                             01237000
                    AIF   (T'&ZCGPR NE 'N').ZE179R  NON NUMERIC         01237100
                    AIF   ('&ZCGPR' LT '2').ZE179Q                      01237200
                    AIF   ('&ZCGPR' LE '12').ZE179R                     01237300
.ZE179Q             ANOP  ,                                             01237400
&ZMS                SETC  '"ERRBFLST='                                  01237500
&ZMS                SETC  '&ZMS.&ERRBFLST"'                             01237600
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01237700
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01237800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01237900
.ZE179R             ANOP  ,                                             01238000
.*----------------------------------------------------------------***   01238100
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01238200
                    AIF   (N'&GAP LE 1).ZE182A  CK NUM                  01238300
&ZMS                SETC  '"GAP='                                       01238400
&ZMS                SETC  '&ZMS.&GAP"'                                  01238500
&ZMS                SETC  '&ZMS "GAP"'                                  01238600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01238700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01238800
.ZE182A             ANOP  ,                                             01238900
.*-------------------------------------------------------------------   01239000
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01239100
                    AIF   (K'&GAP(1) LE 0).ZE182B NO PRM                01239200
&ZXGAP              SETC  'INPUT'     SET IN/OUTPUT                     01239300
&XGAP               SETC  '&GAP(1)'   SET XVARIABLE                     01239400
                    AIF   (N'&GAP GT 1).ZE182B                          01239500
.*                  ANOP                                                01239600
&XGAP               SETC  '&GAP'      SET XVARIABLE                     01239700
.ZE182B             ANOP  ,                                             01239800
.*-------------------------------------------------------------------   01239900
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01240000
                    AIF   (K'&ZXGAP LE 0).ZE182R  NOT I/O               01240100
                    AIF   ('&XGAP'(1,1) NE '(').ZE182R                  01240200
&ZCGPR              SETC  '&XGAP'(2,K'&XGAP-2)                          01240300
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE182P                 01240400
                    AIF   (K'&ZCGPR GT 2).ZE182Q                        01240500
                    AIF   ('&ZCGPR' EQ '0').ZE182Q                      01240600
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01240700
                    AIF   (T'&ZCGPR NE 'N').ZE182Q  INVALID REG NAME    01240800
.ZE182P             ANOP  ,                                             01240900
                    AIF   (T'&ZCGPR NE 'N').ZE182R  NON NUMERIC         01241000
                    AIF   ('&ZCGPR' LT '2').ZE182Q                      01241100
                    AIF   ('&ZCGPR' LE '12').ZE182R                     01241200
.ZE182Q             ANOP  ,                                             01241300
&ZMS                SETC  '"GAP='                                       01241400
&ZMS                SETC  '&ZMS.&GAP"'                                  01241500
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01241600
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01241700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01241800
.ZE182R             ANOP  ,                                             01241900
.*----------------------------------------------------------------***   01242000
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01242100
                    AIF   (N'&COMPID LE 1).ZE185A  CK NUM               01242200
&ZMS                SETC  '"COMPID='                                    01242300
&ZMS                SETC  '&ZMS.&COMPID"'                               01242400
&ZMS                SETC  '&ZMS "COMPID"'                               01242500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01242600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01242700
.ZE185A             ANOP  ,                                             01242800
.*-------------------------------------------------------------------   01242900
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01243000
                    AIF   (K'&COMPID(1) LE 0).ZE185B NO PRM             01243100
&ZXCOMPID           SETC  'INPUT'     SET IN/OUTPUT                     01243200
&XCOMPID            SETC  '&COMPID(1)'          SET XVARIABLE           01243300
                    AIF   (N'&COMPID GT 1).ZE185B                       01243400
.*                  ANOP                                                01243500
&XCOMPID            SETC  '&COMPID'   SET XVARIABLE                     01243600
.ZE185B             ANOP  ,                                             01243700
.*-------------------------------------------------------------------   01243800
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01243900
                    AIF   (K'&ZXCOMPID LE 0).ZE185R  NOT I/O            01244000
                    AIF   ('&XCOMPID'(1,1) NE '(').ZE185R               01244100
&ZCGPR              SETC  '&XCOMPID'(2,K'&XCOMPID-2)                    01244200
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE185P                 01244300
                    AIF   (K'&ZCGPR GT 2).ZE185Q                        01244400
                    AIF   ('&ZCGPR' EQ '0').ZE185Q                      01244500
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01244600
                    AIF   (T'&ZCGPR NE 'N').ZE185Q  INVALID REG NAME    01244700
.ZE185P             ANOP  ,                                             01244800
                    AIF   (T'&ZCGPR NE 'N').ZE185R  NON NUMERIC         01244900
                    AIF   ('&ZCGPR' LT '2').ZE185Q                      01245000
                    AIF   ('&ZCGPR' LE '12').ZE185R                     01245100
.ZE185Q             ANOP  ,                                             01245200
&ZMS                SETC  '"COMPID='                                    01245300
&ZMS                SETC  '&ZMS.&COMPID"'                               01245400
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01245500
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01245600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01245700
.ZE185R             ANOP  ,                                             01245800
.*----------------------------------------------------------------***   01245900
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01246000
                    AIF   (N'&COMPUSER LE 1).ZE188A  CK NUM             01246100
&ZMS                SETC  '"COMPUSER='                                  01246200
&ZMS                SETC  '&ZMS.&COMPUSER"'                             01246300
&ZMS                SETC  '&ZMS "COMPUSER"'                             01246400
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01246500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01246600
.ZE188A             ANOP  ,                                             01246700
.*-------------------------------------------------------------------   01246800
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01246900
                    AIF   (K'&COMPUSER(1) LE 0).ZE188B NO PRM           01247000
&ZXCOMPUSER         SETC  'INPUT'     SET IN/OUTPUT                     01247100
&XCOMPUSER          SETC  '&COMPUSER(1)'        SET XVARIABLE           01247200
                    AIF   (N'&COMPUSER GT 1).ZE188B                     01247300
.*                  ANOP                                                01247400
&XCOMPUSER          SETC  '&COMPUSER'           SET XVARIABLE           01247500
.ZE188B             ANOP  ,                                             01247600
.*-------------------------------------------------------------------   01247700
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01247800
                    AIF   (K'&ZXCOMPUSER LE 0).ZE188R  NOT I/O          01247900
                    AIF   ('&XCOMPUSER'(1,1) NE '(').ZE188R             01248000
&ZCGPR              SETC  '&XCOMPUSER'(2,K'&XCOMPUSER-2)                01248100
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE188P                 01248200
                    AIF   (K'&ZCGPR GT 2).ZE188Q                        01248300
                    AIF   ('&ZCGPR' EQ '0').ZE188Q                      01248400
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01248500
                    AIF   (T'&ZCGPR NE 'N').ZE188Q  INVALID REG NAME    01248600
.ZE188P             ANOP  ,                                             01248700
                    AIF   (T'&ZCGPR NE 'N').ZE188R  NON NUMERIC         01248800
                    AIF   ('&ZCGPR' LT '2').ZE188Q                      01248900
                    AIF   ('&ZCGPR' LE '12').ZE188R                     01249000
.ZE188Q             ANOP  ,                                             01249100
&ZMS                SETC  '"COMPUSER='                                  01249200
&ZMS                SETC  '&ZMS.&COMPUSER"'                             01249300
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01249400
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01249500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01249600
.ZE188R             ANOP  ,                                             01249700
.*----------------------------------------------------------------***   01249800
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01249900
                    AIF   (N'&THREAD LE 1).ZE191A  CK NUM               01250000
&ZMS                SETC  '"THREAD='                                    01250100
&ZMS                SETC  '&ZMS.&THREAD"'                               01250200
&ZMS                SETC  '&ZMS "THREAD"'                               01250300
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01250400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01250500
.ZE191A             ANOP  ,                                             01250600
.*-------------------------------------------------------------------   01250700
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01250800
                    AIF   (K'&THREAD(1) LE 0).ZE191B NO PRM             01250900
&ZXTHREAD           SETC  'INPUT'     SET IN/OUTPUT                     01251000
&XTHREAD            SETC  '&THREAD(1)'          SET XVARIABLE           01251100
                    AIF   (N'&THREAD GT 1).ZE191B                       01251200
.*                  ANOP                                                01251300
&XTHREAD            SETC  '&THREAD'   SET XVARIABLE                     01251400
.ZE191B             ANOP  ,                                             01251500
.*-------------------------------------------------------------------   01251600
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01251700
                    AIF   (K'&ZXTHREAD LE 0).ZE191R  NOT I/O            01251800
                    AIF   ('&XTHREAD'(1,1) NE '(').ZE191R               01251900
&ZCGPR              SETC  '&XTHREAD'(2,K'&XTHREAD-2)                    01252000
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE191P                 01252100
                    AIF   (K'&ZCGPR GT 2).ZE191Q                        01252200
                    AIF   ('&ZCGPR' EQ '0').ZE191Q                      01252300
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01252400
                    AIF   (T'&ZCGPR NE 'N').ZE191Q  INVALID REG NAME    01252500
.ZE191P             ANOP  ,                                             01252600
                    AIF   (T'&ZCGPR NE 'N').ZE191R  NON NUMERIC         01252700
                    AIF   ('&ZCGPR' LT '2').ZE191Q                      01252800
                    AIF   ('&ZCGPR' LE '12').ZE191R                     01252900
.ZE191Q             ANOP  ,                                             01253000
&ZMS                SETC  '"THREAD='                                    01253100
&ZMS                SETC  '&ZMS.&THREAD"'                               01253200
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01253300
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01253400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01253500
.ZE191R             ANOP  ,                                             01253600
.*----------------------------------------------------------------***   01253700
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01253800
                    AIF   (N'&UTILRTN LE 1).ZE194A  CK NUM              01253900
&ZMS                SETC  '"UTILRTN='                                   01254000
&ZMS                SETC  '&ZMS.&UTILRTN"'                              01254100
&ZMS                SETC  '&ZMS "UTILRTN"'                              01254200
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01254300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01254400
.ZE194A             ANOP  ,                                             01254500
.*-------------------------------------------------------------------   01254600
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01254700
                    AIF   (K'&UTILRTN(1) LE 0).ZE194B NO PRM            01254800
&ZXUTILRTN          SETC  'INPUT'     SET IN/OUTPUT                     01254900
&XUTILRTN           SETC  '&UTILRTN(1)'         SET XVARIABLE           01255000
                    AIF   (N'&UTILRTN GT 1).ZE194B                      01255100
.*                  ANOP                                                01255200
&XUTILRTN           SETC  '&UTILRTN'  SET XVARIABLE                     01255300
.ZE194B             ANOP  ,                                             01255400
.*-------------------------------------------------------------------   01255500
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01255600
                    AIF   (K'&ZXUTILRTN LE 0).ZE194R  NOT I/O           01255700
                    AIF   ('&XUTILRTN'(1,1) NE '(').ZE194R              01255800
&ZCGPR              SETC  '&XUTILRTN'(2,K'&XUTILRTN-2)                  01255900
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE194P                 01256000
                    AIF   (K'&ZCGPR GT 2).ZE194Q                        01256100
                    AIF   ('&ZCGPR' EQ '0').ZE194Q                      01256200
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01256300
                    AIF   (T'&ZCGPR NE 'N').ZE194Q  INVALID REG NAME    01256400
.ZE194P             ANOP  ,                                             01256500
                    AIF   (T'&ZCGPR NE 'N').ZE194R  NON NUMERIC         01256600
                    AIF   ('&ZCGPR' LT '2').ZE194Q                      01256700
                    AIF   ('&ZCGPR' LE '12').ZE194R                     01256800
.ZE194Q             ANOP  ,                                             01256900
&ZMS                SETC  '"UTILRTN='                                   01257000
&ZMS                SETC  '&ZMS.&UTILRTN"'                              01257100
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01257200
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01257300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01257400
.ZE194R             ANOP  ,                                             01257500
.*----------------------------------------------------------------***   01257600
.***AE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01257700
                    AIF   (N'&WAIT LE 1).ZE197A  CK NUM                 01257800
&ZMS                SETC  '"WAIT='                                      01257900
&ZMS                SETC  '&ZMS.&WAIT"'                                 01258000
&ZMS                SETC  '&ZMS "WAIT"'                                 01258100
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01258200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01258300
.ZE197A             ANOP  ,                                             01258400
.*-------------------------------------------------------------------   01258500
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01258600
.ZE198A   AIF   ('&WAIT(1)' NE 'NO').ZE199A                             01258700
&XWAIT              SETC  'NO'        SET KEYWORD                       01258800
.*-------------------------------------------------------------------   01258900
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01259000
.ZE199A   AIF   ('&WAIT(1)' NE 'YES').ZE200A                            01259100
&XWAIT              SETC  'YES'       SET KEYWORD                       01259200
.*----------------------------------------------------------------***   01259300
.***AE.KKWRD06 Additional value checks                                  01259400
.ZE200A             ANOP                                                01259500
&ZTLC               SETC 'EXPAND'                                       01259600
         AIF   ('&WAIT(1)' NE '&ZTLC').ZE200A1                          01259700
&XWAIT              SETC  'EXPAND'    SET KEYWORD                       01259800
.ZE200A1  ANOP                                                          01259900
.*-------------------------------------------------------------------   01260000
.***AE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01260100
.ZE0P197Q300A       AIF   (K'&XWAIT GT 0).ZE0P197Q300B                  01260200
                    AIF   (K'&WAIT(1) LE 0).ZE0P197Q300C                01260300
&ZMS                SETC  '"WAIT='                                      01260400
&ZMS                SETC  '&ZMS.&WAIT"'                                 01260500
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     01260600
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           01260700
&ZMS                SETC  '&ZMS "NO"'                                   01260800
&ZMS                SETC  '&ZMS OR "YES".'                              01260900
                    MNOTE 8,' &ZMS '                                    01261000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01261100
                    AGO   .ZE0P197Q300C                                 01261200
.*                                                                      01261300
.ZE0P197Q300B       ANOP  ,                                             01261400
&ZXWAIT             SETC  'INPUT'     SET IN/OUTPUT                     01261500
.ZE0P197Q300C       ANOP  ,                                             01261600
.*-------------------------------------------------------------------   01261700
.***AE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           01261800
&ZTLC               SETC 'FREE_BUFFER'                                  01261900
                    AIF   ('&REQUEST(1)' NE '&ZTLC').ZE201A             01262000
&XREQUEST           SETC  'FREE_BUFFER'         SET KEYWORD             01262100
                    AIF   (N'&REQUEST LE 1).ZE201A  CK NUM              01262200
&ZMS                SETC  '"REQUEST='                                   01262300
&ZMS                SETC  '&ZMS.&REQUEST"'                              01262400
&ZMS                SETC  '&ZMS "REQUEST"'                              01262500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01262600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01262700
.ZE201A             ANOP  ,                                             01262800
.*----------------------------------------------------------------***   01262900
.***AE.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE                      01263000
&XDUMMY6            SETC  ''          INITIALIZE XVARIABLE              01263100
                    AIF   (K'&BUFLIST LE 0).ZE203C                      01263200
&ZXDUMMY6           SETC  'INPUT'     SET IN/OUTPUT                     01263300
&XDUMMY6            SETC  'BUFLIST'   SET XVARIABLE                     01263400
&ZXBUFLIST          SETC  'INPUT'     SET IN/OUTPUT                     01263500
&XBUFLIST           SETC  '&BUFLIST(1)'         SET XVARIABLE PARM      01263600
                    AIF   (N'&BUFLIST GT 1).ZE203A                      01263700
&XBUFLIST           SETC  '&BUFLIST'  SET XVARIABLE PARM                01263800
.ZE203A             AIF   (N'&BUFLIST LE 1).ZE203B  CK NUM              01263900
&ZMS                SETC  '"BUFLIST='                                   01264000
&ZMS                SETC  '&ZMS.&BUFLIST"'                              01264100
&ZMS                SETC  '&ZMS "BUFLIST"'                              01264200
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01264300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01264400
.ZE203B             AIF   (K'&XBUFLIST GT 0).ZE203C  ONE PARM           01264500
&ZXDUMMY6           SETC  ''          RESET IN/OUTPUT                   01264600
&ZXBUFLIST          SETC  ''          RESET IN/OUTPUT                   01264700
.ZE203C             ANOP  ,                                             01264800
.*----------------------------------------------------------------***   01264900
.***AE.KMEKY02 NAME, RQD INPUT, ME KEYS -NON-XVAR KEY                   01265000
                    AIF   (K'&BUFLST64 LE 0).ZE204D  NO ME KEY          01265100
                    AIF   (N'&BUFLST64 LE 1).ZE204A  CK NUM             01265200
&ZMS                SETC  '"BUFLST64='                                  01265300
&ZMS                SETC  '&ZMS.&BUFLST64"'                             01265400
&ZMS                SETC  '&ZMS "BUFLST64"'                             01265500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01265600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01265700
.ZE204A             AIF   (K'&XDUMMY6 LE 0).ZE204B                      01265800
&ZMS                SETC  '"BUFLST64'                                   01265900
&ZMS                SETC  '&ZMS.=&BUFLST64"'                            01266000
&ZMS                SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'         01266100
&ZMS                SETC  '&ZMS "&XDUMMY6"'                             01266200
                    MNOTE 8,' &ZMS KEY.'                                01266300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01266400
                    AGO   .ZE204D                                       01266500
.*                                                                      01266600
.ZE204B             ANOP  ,                                             01266700
&ZXDUMMY6           SETC  'INPUT'     SET IN/OUTPUT                     01266800
&XDUMMY6            SETC  'BUFLST64'  SET XVARIABLE                     01266900
&ZXBUFLST64         SETC  'INPUT'     SET IN/OUTPUT                     01267000
&XBUFLST64          SETC  '&BUFLST64(1)'        SET PARM                01267100
                    AIF   (N'&BUFLST64 GT 1).ZE204C                     01267200
&XBUFLST64          SETC  '&BUFLST64'           SET PARM                01267300
.ZE204C             AIF   (K'&XBUFLST64 GT 0).ZE204D  ONE PARM          01267400
&ZXDUMMY6           SETC  ''          RESET IN/OUTPUT                   01267500
&ZXBUFLST64         SETC  ''          RESET IN/OUTPUT                   01267600
.ZE204D             ANOP  ,                                             01267700
.*------------------------------------------------------------------    01267800
.***AE.KMEKY07 NAME, RQD INPUT, ME KEYS -CHECK IF ENTERED               01267900
                    AIF   (K'&XDUMMY6 GT 0).ZE205B                      01268000
&ZXDUMMY6           SETC  ''          RESET IN/OUTPUT                   01268100
&XDUMMY6            SETC  ''          SET NULL                          01268200
&ZXBUFLIST          SETC  ''          RESET OUTPUT                      01268300
&XBUFLIST           SETC  ''          SET NULL PARM                     01268400
.ZE205B             ANOP  ,                                             01268500
.*-------------------------------------------------------------------   01268600
.***AE.KMEKY08 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           01268700
.ZE203     AIF   ('&XDUMMY6' NE 'BUFLIST').ZE204                        01268800
.*-------------------------------------------------------------------   01268900
.***AE.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 01269000
                    AIF   (K'&ZXBUFLIST LE 0).ZE203R  NOT I/O           01269100
                    AIF   ('&XBUFLIST'(1,1) NE '(').ZE203R              01269200
&ZCGPR              SETC  '&XBUFLIST'(2,K'&XBUFLIST-2)                  01269300
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE203P                 01269400
                    AIF   (K'&ZCGPR GT 2).ZE203Q                        01269500
                    AIF   ('&ZCGPR' EQ '0').ZE203Q                      01269600
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01269700
                    AIF   (T'&ZCGPR NE 'N').ZE203Q  INVALID REG NAME    01269800
.ZE203P             ANOP  ,                                             01269900
                    AIF   (T'&ZCGPR NE 'N').ZE203R  NON NUMERIC         01270000
                    AIF   ('&ZCGPR' LT '2').ZE203Q                      01270100
                    AIF   ('&ZCGPR' LE '12').ZE203R                     01270200
.ZE203Q             ANOP  ,                                             01270300
&ZMS                SETC  '"BUFLIST='                                   01270400
&ZMS                SETC  '&ZMS.&BUFLIST"'                              01270500
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01270600
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01270700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01270800
.ZE203R             ANOP  ,                                             01270900
.*-------------------------------------------------------------------   01271000
.***AE.KMEKY08 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           01271100
.ZE204     AIF   ('&XDUMMY6' NE 'BUFLST64').ZE205                       01271200
.*-------------------------------------------------------------------   01271300
.***AE.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 01271400
                    AIF   (K'&ZXBUFLST64 LE 0).ZE204R  NOT I/O          01271500
                    AIF   ('&XBUFLST64'(1,1) NE '(').ZE204R             01271600
&ZCGPR              SETC  '&XBUFLST64'(2,K'&XBUFLST64-2)                01271700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE204P                 01271800
                    AIF   (K'&ZCGPR GT 2).ZE204Q                        01271900
                    AIF   ('&ZCGPR' EQ '0').ZE204Q                      01272000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01272100
                    AIF   (T'&ZCGPR NE 'N').ZE204Q  INVALID REG NAME    01272200
.ZE204P             ANOP  ,                                             01272300
                    AIF   (T'&ZCGPR NE 'N').ZE204R  NON NUMERIC         01272400
                    AIF   ('&ZCGPR' LT '2').ZE204Q                      01272500
                    AIF   ('&ZCGPR' LE '12').ZE204R                     01272600
.ZE204Q             ANOP  ,                                             01272700
&ZMS                SETC  '"BUFLST64='                                  01272800
&ZMS                SETC  '&ZMS.&BUFLST64"'                             01272900
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01273000
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01273100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01273200
.ZE204R             ANOP  ,                                             01273300
.*-------------------------------------------------------------------   01273400
.***AE.KMEKY09 NAME, RQD INPUT, ME KEYS -END                            01273500
.ZE205              ANOP  ,           END MUTUALLY EXCLUSIVE KEYS       01273600
.*----------------------------------------------------------------***   01273700
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY                          01273800
                    AIF   (N'&BUFNUM LE 1).ZE207A  CK NUM               01273900
&ZMS                SETC  '"BUFNUM='                                    01274000
&ZMS                SETC  '&ZMS.&BUFNUM"'                               01274100
&ZMS                SETC  '&ZMS "BUFNUM"'                               01274200
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01274300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01274400
.ZE207A             ANOP  ,                                             01274500
.*-------------------------------------------------------------------   01274600
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT                     01274700
                    AIF   (K'&BUFNUM(1) LE 0).ZE207B NO PRM             01274800
&ZXBUFNUM           SETC  'INPUT'     SET IN/OUTPUT                     01274900
&XBUFNUM            SETC  '&BUFNUM(1)'          SET XVARIABLE           01275000
                    AIF   (N'&BUFNUM GT 1).ZE207B                       01275100
.*                  ANOP                                                01275200
&XBUFNUM            SETC  '&BUFNUM'   SET XVARIABLE                     01275300
.ZE207B             ANOP  ,                                             01275400
.*-------------------------------------------------------------------   01275500
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    01275600
                    AIF   (K'&ZXBUFNUM LE 0).ZE207R  NOT I/O            01275700
                    AIF   ('&XBUFNUM'(1,1) NE '(').ZE207R               01275800
&ZCGPR              SETC  '&XBUFNUM'(2,K'&XBUFNUM-2)                    01275900
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE207P                 01276000
                    AIF   (K'&ZCGPR GT 2).ZE207Q                        01276100
                    AIF   ('&ZCGPR' EQ '0').ZE207Q                      01276200
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01276300
                    AIF   (T'&ZCGPR NE 'N').ZE207Q  INVALID REG NAME    01276400
.ZE207P             ANOP  ,                                             01276500
                    AIF   (T'&ZCGPR NE 'N').ZE207R  NON NUMERIC         01276600
                    AIF   ('&ZCGPR' LT '2').ZE207Q                      01276700
                    AIF   ('&ZCGPR' LE '12').ZE207R                     01276800
.ZE207Q             ANOP  ,                                             01276900
&ZMS                SETC  '"BUFNUM='                                    01277000
&ZMS                SETC  '&ZMS.&BUFNUM"'                               01277100
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01277200
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01277300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01277400
.ZE207R             ANOP  ,                                             01277500
.*----------------------------------------------------------------***   01277600
.***AE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01277700
                    AIF   (N'&CLEAR LE 1).ZE210A  CK NUM                01277800
&ZMS                SETC  '"CLEAR='                                     01277900
&ZMS                SETC  '&ZMS.&CLEAR"'                                01278000
&ZMS                SETC  '&ZMS "CLEAR"'                                01278100
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01278200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01278300
.ZE210A             ANOP  ,                                             01278400
.*-------------------------------------------------------------------   01278500
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01278600
.ZE211A   AIF   ('&CLEAR(1)' NE 'NO').ZE212A                            01278700
&XCLEAR             SETC  'NO'        SET KEYWORD                       01278800
.*-------------------------------------------------------------------   01278900
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01279000
.ZE212A   AIF   ('&CLEAR(1)' NE 'YES').ZE213A                           01279100
&XCLEAR             SETC  'YES'       SET KEYWORD                       01279200
.*-------------------------------------------------------------------   01279300
.***AE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01279400
.ZE213A             AIF   (K'&XCLEAR GT 0).ZE213B                       01279500
                    AIF   (K'&CLEAR(1) LE 0).ZE213C                     01279600
&ZMS                SETC  '"CLEAR='                                     01279700
&ZMS                SETC  '&ZMS.&CLEAR"'                                01279800
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     01279900
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           01280000
&ZMS                SETC  '&ZMS "NO"'                                   01280100
&ZMS                SETC  '&ZMS OR "YES".'                              01280200
                    MNOTE 8,' &ZMS '                                    01280300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01280400
                    AGO   .ZE213C                                       01280500
.*                                                                      01280600
.ZE213B             ANOP  ,                                             01280700
&ZXCLEAR            SETC  'INPUT'     SET IN/OUTPUT                     01280800
.ZE213C             ANOP  ,                                             01280900
.*----------------------------------------------------------------***   01281000
.***AE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVAR KEY                         01281100
                    AIF   (N'&ERRBFLST LE 1).ZE215A  CK NUM             01281200
&ZMS                SETC  '"ERRBFLST='                                  01281300
&ZMS                SETC  '&ZMS.&ERRBFLST"'                             01281400
&ZMS                SETC  '&ZMS "ERRBFLST"'                             01281500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01281600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01281700
.ZE215A             ANOP  ,                                             01281800
.*-------------------------------------------------------------------   01281900
.***AE.KXVAR04 NAME, OPT OUTPUT, KEYS -XVAR ARGUMENT                    01282000
                    AIF   (K'&ERRBFLST(1) LE 0).ZE215B NO PRM           01282100
&ZXERRBFLST         SETC  'OUTPUT'    SET IN/OUTPUT                     01282200
&XERRBFLST          SETC  '&ERRBFLST(1)'        SET XVARIABLE           01282300
                    AIF   (N'&ERRBFLST GT 1).ZE215B                     01282400
.*                  ANOP                                                01282500
&XERRBFLST          SETC  '&ERRBFLST'           SET XVARIABLE           01282600
.ZE215B             ANOP  ,                                             01282700
.*-------------------------------------------------------------------   01282800
.***AE.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   01282900
                    AIF   (K'&ZXERRBFLST LE 0).ZE215R  NOT I/O          01283000
                    AIF   ('&XERRBFLST'(1,1) NE '(').ZE215R             01283100
&ZCGPR              SETC  '&XERRBFLST'(2,K'&XERRBFLST-2)                01283200
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE215P                 01283300
                    AIF   (K'&ZCGPR GT 2).ZE215Q                        01283400
                    AIF   ('&ZCGPR' EQ '0').ZE215Q                      01283500
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01283600
                    AIF   (T'&ZCGPR NE 'N').ZE215Q  INVALID REG NAME    01283700
.ZE215P             ANOP  ,                                             01283800
                    AIF   (T'&ZCGPR NE 'N').ZE215R  NON NUMERIC         01283900
                    AIF   ('&ZCGPR' LT '2').ZE215Q                      01284000
                    AIF   ('&ZCGPR' LE '12').ZE215R                     01284100
.ZE215Q             ANOP  ,                                             01284200
&ZMS                SETC  '"ERRBFLST='                                  01284300
&ZMS                SETC  '&ZMS.&ERRBFLST"'                             01284400
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01284500
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01284600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01284700
.ZE215R             ANOP  ,                                             01284800
.*----------------------------------------------------------------***   01284900
.***AE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01285000
                    AIF   (N'&FREETO LE 1).ZE218A  CK NUM               01285100
&ZMS                SETC  '"FREETO='                                    01285200
&ZMS                SETC  '&ZMS.&FREETO"'                               01285300
&ZMS                SETC  '&ZMS "FREETO"'                               01285400
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01285500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01285600
.ZE218A             ANOP  ,                                             01285700
.*-------------------------------------------------------------------   01285800
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01285900
.ZE219A   AIF   ('&FREETO(1)' NE 'USER').ZE220A                         01286000
&XFREETO            SETC  'USER'      SET KEYWORD                       01286100
.*-------------------------------------------------------------------   01286200
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01286300
.ZE220A   AIF   ('&FREETO(1)' NE 'CSM').ZE221A                          01286400
&XFREETO            SETC  'CSM'       SET KEYWORD                       01286500
.*-------------------------------------------------------------------   01286600
.***AE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01286700
.ZE221A             AIF   (K'&XFREETO GT 0).ZE221B                      01286800
                    AIF   (K'&FREETO(1) LE 0).ZE221C                    01286900
&ZMS                SETC  '"FREETO='                                    01287000
&ZMS                SETC  '&ZMS.&FREETO"'                               01287100
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     01287200
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           01287300
&ZMS                SETC  '&ZMS "USER"'                                 01287400
&ZMS                SETC  '&ZMS OR "CSM".'                              01287500
                    MNOTE 8,' &ZMS '                                    01287600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01287700
                    AGO   .ZE221C                                       01287800
.*                                                                      01287900
.ZE221B             ANOP  ,                                             01288000
&ZXFREETO           SETC  'INPUT'     SET IN/OUTPUT                     01288100
.ZE221C             ANOP  ,                                             01288200
.*----------------------------------------------------------------***   01288300
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01288400
                    AIF   (N'&GAP LE 1).ZE223A  CK NUM                  01288500
&ZMS                SETC  '"GAP='                                       01288600
&ZMS                SETC  '&ZMS.&GAP"'                                  01288700
&ZMS                SETC  '&ZMS "GAP"'                                  01288800
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01288900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01289000
.ZE223A             ANOP  ,                                             01289100
.*-------------------------------------------------------------------   01289200
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01289300
                    AIF   (K'&GAP(1) LE 0).ZE223B NO PRM                01289400
&ZXGAP              SETC  'INPUT'     SET IN/OUTPUT                     01289500
&XGAP               SETC  '&GAP(1)'   SET XVARIABLE                     01289600
                    AIF   (N'&GAP GT 1).ZE223B                          01289700
.*                  ANOP                                                01289800
&XGAP               SETC  '&GAP'      SET XVARIABLE                     01289900
.ZE223B             ANOP  ,                                             01290000
.*-------------------------------------------------------------------   01290100
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01290200
                    AIF   (K'&ZXGAP LE 0).ZE223R  NOT I/O               01290300
                    AIF   ('&XGAP'(1,1) NE '(').ZE223R                  01290400
&ZCGPR              SETC  '&XGAP'(2,K'&XGAP-2)                          01290500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE223P                 01290600
                    AIF   (K'&ZCGPR GT 2).ZE223Q                        01290700
                    AIF   ('&ZCGPR' EQ '0').ZE223Q                      01290800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01290900
                    AIF   (T'&ZCGPR NE 'N').ZE223Q  INVALID REG NAME    01291000
.ZE223P             ANOP  ,                                             01291100
                    AIF   (T'&ZCGPR NE 'N').ZE223R  NON NUMERIC         01291200
                    AIF   ('&ZCGPR' LT '2').ZE223Q                      01291300
                    AIF   ('&ZCGPR' LE '12').ZE223R                     01291400
.ZE223Q             ANOP  ,                                             01291500
&ZMS                SETC  '"GAP='                                       01291600
&ZMS                SETC  '&ZMS.&GAP"'                                  01291700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01291800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01291900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01292000
.ZE223R             ANOP  ,                                             01292100
.*----------------------------------------------------------------***   01292200
.***AE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01292300
                    AIF   (N'&SKIPBUF LE 1).ZE226A  CK NUM              01292400
&ZMS                SETC  '"SKIPBUF='                                   01292500
&ZMS                SETC  '&ZMS.&SKIPBUF"'                              01292600
&ZMS                SETC  '&ZMS "SKIPBUF"'                              01292700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01292800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01292900
.ZE226A             ANOP  ,                                             01293000
.*-------------------------------------------------------------------   01293100
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01293200
.ZE227A   AIF   ('&SKIPBUF(1)' NE 'NO').ZE228A                          01293300
&XSKIPBUF           SETC  'NO'        SET KEYWORD                       01293400
.*-------------------------------------------------------------------   01293500
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01293600
.ZE228A   AIF   ('&SKIPBUF(1)' NE 'YES').ZE229A                         01293700
&XSKIPBUF           SETC  'YES'       SET KEYWORD                       01293800
.*-------------------------------------------------------------------   01293900
.***AE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01294000
.ZE229A             AIF   (K'&XSKIPBUF GT 0).ZE229B                     01294100
                    AIF   (K'&SKIPBUF(1) LE 0).ZE229C                   01294200
&ZMS                SETC  '"SKIPBUF='                                   01294300
&ZMS                SETC  '&ZMS.&SKIPBUF"'                              01294400
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     01294500
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           01294600
&ZMS                SETC  '&ZMS "NO"'                                   01294700
&ZMS                SETC  '&ZMS OR "YES".'                              01294800
                    MNOTE 8,' &ZMS '                                    01294900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01295000
                    AGO   .ZE229C                                       01295100
.*                                                                      01295200
.ZE229B             ANOP  ,                                             01295300
&ZXSKIPBUF          SETC  'INPUT'     SET IN/OUTPUT                     01295400
.ZE229C             ANOP  ,                                             01295500
.*----------------------------------------------------------------***   01295600
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01295700
                    AIF   (N'&COMPID LE 1).ZE231A  CK NUM               01295800
&ZMS                SETC  '"COMPID='                                    01295900
&ZMS                SETC  '&ZMS.&COMPID"'                               01296000
&ZMS                SETC  '&ZMS "COMPID"'                               01296100
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01296200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01296300
.ZE231A             ANOP  ,                                             01296400
.*-------------------------------------------------------------------   01296500
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01296600
                    AIF   (K'&COMPID(1) LE 0).ZE231B NO PRM             01296700
&ZXCOMPID           SETC  'INPUT'     SET IN/OUTPUT                     01296800
&XCOMPID            SETC  '&COMPID(1)'          SET XVARIABLE           01296900
                    AIF   (N'&COMPID GT 1).ZE231B                       01297000
.*                  ANOP                                                01297100
&XCOMPID            SETC  '&COMPID'   SET XVARIABLE                     01297200
.ZE231B             ANOP  ,                                             01297300
.*-------------------------------------------------------------------   01297400
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01297500
                    AIF   (K'&ZXCOMPID LE 0).ZE231R  NOT I/O            01297600
                    AIF   ('&XCOMPID'(1,1) NE '(').ZE231R               01297700
&ZCGPR              SETC  '&XCOMPID'(2,K'&XCOMPID-2)                    01297800
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE231P                 01297900
                    AIF   (K'&ZCGPR GT 2).ZE231Q                        01298000
                    AIF   ('&ZCGPR' EQ '0').ZE231Q                      01298100
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01298200
                    AIF   (T'&ZCGPR NE 'N').ZE231Q  INVALID REG NAME    01298300
.ZE231P             ANOP  ,                                             01298400
                    AIF   (T'&ZCGPR NE 'N').ZE231R  NON NUMERIC         01298500
                    AIF   ('&ZCGPR' LT '2').ZE231Q                      01298600
                    AIF   ('&ZCGPR' LE '12').ZE231R                     01298700
.ZE231Q             ANOP  ,                                             01298800
&ZMS                SETC  '"COMPID='                                    01298900
&ZMS                SETC  '&ZMS.&COMPID"'                               01299000
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01299100
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01299200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01299300
.ZE231R             ANOP  ,                                             01299400
.*----------------------------------------------------------------***   01299500
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01299600
                    AIF   (N'&COMPUSER LE 1).ZE234A  CK NUM             01299700
&ZMS                SETC  '"COMPUSER='                                  01299800
&ZMS                SETC  '&ZMS.&COMPUSER"'                             01299900
&ZMS                SETC  '&ZMS "COMPUSER"'                             01300000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01300100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01300200
.ZE234A             ANOP  ,                                             01300300
.*-------------------------------------------------------------------   01300400
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01300500
                    AIF   (K'&COMPUSER(1) LE 0).ZE234B NO PRM           01300600
&ZXCOMPUSER         SETC  'INPUT'     SET IN/OUTPUT                     01300700
&XCOMPUSER          SETC  '&COMPUSER(1)'        SET XVARIABLE           01300800
                    AIF   (N'&COMPUSER GT 1).ZE234B                     01300900
.*                  ANOP                                                01301000
&XCOMPUSER          SETC  '&COMPUSER'           SET XVARIABLE           01301100
.ZE234B             ANOP  ,                                             01301200
.*-------------------------------------------------------------------   01301300
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01301400
                    AIF   (K'&ZXCOMPUSER LE 0).ZE234R  NOT I/O          01301500
                    AIF   ('&XCOMPUSER'(1,1) NE '(').ZE234R             01301600
&ZCGPR              SETC  '&XCOMPUSER'(2,K'&XCOMPUSER-2)                01301700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE234P                 01301800
                    AIF   (K'&ZCGPR GT 2).ZE234Q                        01301900
                    AIF   ('&ZCGPR' EQ '0').ZE234Q                      01302000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01302100
                    AIF   (T'&ZCGPR NE 'N').ZE234Q  INVALID REG NAME    01302200
.ZE234P             ANOP  ,                                             01302300
                    AIF   (T'&ZCGPR NE 'N').ZE234R  NON NUMERIC         01302400
                    AIF   ('&ZCGPR' LT '2').ZE234Q                      01302500
                    AIF   ('&ZCGPR' LE '12').ZE234R                     01302600
.ZE234Q             ANOP  ,                                             01302700
&ZMS                SETC  '"COMPUSER='                                  01302800
&ZMS                SETC  '&ZMS.&COMPUSER"'                             01302900
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01303000
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01303100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01303200
.ZE234R             ANOP  ,                                             01303300
.*----------------------------------------------------------------***   01303400
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01303500
                    AIF   (N'&THREAD LE 1).ZE237A  CK NUM               01303600
&ZMS                SETC  '"THREAD='                                    01303700
&ZMS                SETC  '&ZMS.&THREAD"'                               01303800
&ZMS                SETC  '&ZMS "THREAD"'                               01303900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01304000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01304100
.ZE237A             ANOP  ,                                             01304200
.*-------------------------------------------------------------------   01304300
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01304400
                    AIF   (K'&THREAD(1) LE 0).ZE237B NO PRM             01304500
&ZXTHREAD           SETC  'INPUT'     SET IN/OUTPUT                     01304600
&XTHREAD            SETC  '&THREAD(1)'          SET XVARIABLE           01304700
                    AIF   (N'&THREAD GT 1).ZE237B                       01304800
.*                  ANOP                                                01304900
&XTHREAD            SETC  '&THREAD'   SET XVARIABLE                     01305000
.ZE237B             ANOP  ,                                             01305100
.*-------------------------------------------------------------------   01305200
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01305300
                    AIF   (K'&ZXTHREAD LE 0).ZE237R  NOT I/O            01305400
                    AIF   ('&XTHREAD'(1,1) NE '(').ZE237R               01305500
&ZCGPR              SETC  '&XTHREAD'(2,K'&XTHREAD-2)                    01305600
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE237P                 01305700
                    AIF   (K'&ZCGPR GT 2).ZE237Q                        01305800
                    AIF   ('&ZCGPR' EQ '0').ZE237Q                      01305900
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01306000
                    AIF   (T'&ZCGPR NE 'N').ZE237Q  INVALID REG NAME    01306100
.ZE237P             ANOP  ,                                             01306200
                    AIF   (T'&ZCGPR NE 'N').ZE237R  NON NUMERIC         01306300
                    AIF   ('&ZCGPR' LT '2').ZE237Q                      01306400
                    AIF   ('&ZCGPR' LE '12').ZE237R                     01306500
.ZE237Q             ANOP  ,                                             01306600
&ZMS                SETC  '"THREAD='                                    01306700
&ZMS                SETC  '&ZMS.&THREAD"'                               01306800
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01306900
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01307000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01307100
.ZE237R             ANOP  ,                                             01307200
.*----------------------------------------------------------------***   01307300
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01307400
                    AIF   (N'&UTILRTN LE 1).ZE240A  CK NUM              01307500
&ZMS                SETC  '"UTILRTN='                                   01307600
&ZMS                SETC  '&ZMS.&UTILRTN"'                              01307700
&ZMS                SETC  '&ZMS "UTILRTN"'                              01307800
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01307900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01308000
.ZE240A             ANOP  ,                                             01308100
.*-------------------------------------------------------------------   01308200
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01308300
                    AIF   (K'&UTILRTN(1) LE 0).ZE240B NO PRM            01308400
&ZXUTILRTN          SETC  'INPUT'     SET IN/OUTPUT                     01308500
&XUTILRTN           SETC  '&UTILRTN(1)'         SET XVARIABLE           01308600
                    AIF   (N'&UTILRTN GT 1).ZE240B                      01308700
.*                  ANOP                                                01308800
&XUTILRTN           SETC  '&UTILRTN'  SET XVARIABLE                     01308900
.ZE240B             ANOP  ,                                             01309000
.*-------------------------------------------------------------------   01309100
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01309200
                    AIF   (K'&ZXUTILRTN LE 0).ZE240R  NOT I/O           01309300
                    AIF   ('&XUTILRTN'(1,1) NE '(').ZE240R              01309400
&ZCGPR              SETC  '&XUTILRTN'(2,K'&XUTILRTN-2)                  01309500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE240P                 01309600
                    AIF   (K'&ZCGPR GT 2).ZE240Q                        01309700
                    AIF   ('&ZCGPR' EQ '0').ZE240Q                      01309800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01309900
                    AIF   (T'&ZCGPR NE 'N').ZE240Q  INVALID REG NAME    01310000
.ZE240P             ANOP  ,                                             01310100
                    AIF   (T'&ZCGPR NE 'N').ZE240R  NON NUMERIC         01310200
                    AIF   ('&ZCGPR' LT '2').ZE240Q                      01310300
                    AIF   ('&ZCGPR' LE '12').ZE240R                     01310400
.ZE240Q             ANOP  ,                                             01310500
&ZMS                SETC  '"UTILRTN='                                   01310600
&ZMS                SETC  '&ZMS.&UTILRTN"'                              01310700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01310800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01310900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01311000
.ZE240R             ANOP  ,                                             01311100
.*-------------------------------------------------------------------   01311200
.***AE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           01311300
&ZTLC               SETC 'GET_BUFFER'                                   01311400
                    AIF   ('&REQUEST(1)' NE '&ZTLC').ZE242A             01311500
&XREQUEST           SETC  'GET_BUFFER'          SET KEYWORD             01311600
                    AIF   (N'&REQUEST LE 1).ZE242A  CK NUM              01311700
&ZMS                SETC  '"REQUEST='                                   01311800
&ZMS                SETC  '&ZMS.&REQUEST"'                              01311900
&ZMS                SETC  '&ZMS "REQUEST"'                              01312000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01312100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01312200
.ZE242A             ANOP  ,                                             01312300
.*----------------------------------------------------------------***   01312400
.***AE.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE                      01312500
&XDUMMY7            SETC  ''          INITIALIZE XVARIABLE              01312600
                    AIF   (K'&BUFLIST LE 0).ZE244C                      01312700
&ZXDUMMY7           SETC  'INPUT'     SET IN/OUTPUT                     01312800
&XDUMMY7            SETC  'BUFLIST'   SET XVARIABLE                     01312900
&ZXBUFLIST          SETC  'INPUT'     SET IN/OUTPUT                     01313000
&XBUFLIST           SETC  '&BUFLIST(1)'         SET XVARIABLE PARM      01313100
                    AIF   (N'&BUFLIST GT 1).ZE244A                      01313200
&XBUFLIST           SETC  '&BUFLIST'  SET XVARIABLE PARM                01313300
.ZE244A             AIF   (N'&BUFLIST LE 1).ZE244B  CK NUM              01313400
&ZMS                SETC  '"BUFLIST='                                   01313500
&ZMS                SETC  '&ZMS.&BUFLIST"'                              01313600
&ZMS                SETC  '&ZMS "BUFLIST"'                              01313700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01313800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01313900
.ZE244B             AIF   (K'&XBUFLIST GT 0).ZE244C  ONE PARM           01314000
&ZXDUMMY7           SETC  ''          RESET IN/OUTPUT                   01314100
&ZXBUFLIST          SETC  ''          RESET IN/OUTPUT                   01314200
.ZE244C             ANOP  ,                                             01314300
.*----------------------------------------------------------------***   01314400
.***AE.KMEKY02 NAME, RQD INPUT, ME KEYS -NON-XVAR KEY                   01314500
                    AIF   (K'&BUFLST64 LE 0).ZE245D  NO ME KEY          01314600
                    AIF   (N'&BUFLST64 LE 1).ZE245A  CK NUM             01314700
&ZMS                SETC  '"BUFLST64='                                  01314800
&ZMS                SETC  '&ZMS.&BUFLST64"'                             01314900
&ZMS                SETC  '&ZMS "BUFLST64"'                             01315000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01315100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01315200
.ZE245A             AIF   (K'&XDUMMY7 LE 0).ZE245B                      01315300
&ZMS                SETC  '"BUFLST64'                                   01315400
&ZMS                SETC  '&ZMS.=&BUFLST64"'                            01315500
&ZMS                SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'         01315600
&ZMS                SETC  '&ZMS "&XDUMMY7"'                             01315700
                    MNOTE 8,' &ZMS KEY.'                                01315800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01315900
                    AGO   .ZE245D                                       01316000
.*                                                                      01316100
.ZE245B             ANOP  ,                                             01316200
&ZXDUMMY7           SETC  'INPUT'     SET IN/OUTPUT                     01316300
&XDUMMY7            SETC  'BUFLST64'  SET XVARIABLE                     01316400
&ZXBUFLST64         SETC  'INPUT'     SET IN/OUTPUT                     01316500
&XBUFLST64          SETC  '&BUFLST64(1)'        SET PARM                01316600
                    AIF   (N'&BUFLST64 GT 1).ZE245C                     01316700
&XBUFLST64          SETC  '&BUFLST64'           SET PARM                01316800
.ZE245C             AIF   (K'&XBUFLST64 GT 0).ZE245D  ONE PARM          01316900
&ZXDUMMY7           SETC  ''          RESET IN/OUTPUT                   01317000
&ZXBUFLST64         SETC  ''          RESET IN/OUTPUT                   01317100
.ZE245D             ANOP  ,                                             01317200
.*------------------------------------------------------------------    01317300
.***AE.KMEKY07 NAME, RQD INPUT, ME KEYS -CHECK IF ENTERED               01317400
                    AIF   (K'&XDUMMY7 GT 0).ZE246B                      01317500
&ZXDUMMY7           SETC  ''          RESET IN/OUTPUT                   01317600
&XDUMMY7            SETC  ''          SET NULL                          01317700
&ZXBUFLIST          SETC  ''          RESET OUTPUT                      01317800
&XBUFLIST           SETC  ''          SET NULL PARM                     01317900
.ZE246B             ANOP  ,                                             01318000
.*-------------------------------------------------------------------   01318100
.***AE.KMEKY08 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           01318200
.ZE244     AIF   ('&XDUMMY7' NE 'BUFLIST').ZE245                        01318300
.*-------------------------------------------------------------------   01318400
.***AE.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 01318500
                    AIF   (K'&ZXBUFLIST LE 0).ZE244R  NOT I/O           01318600
                    AIF   ('&XBUFLIST'(1,1) NE '(').ZE244R              01318700
&ZCGPR              SETC  '&XBUFLIST'(2,K'&XBUFLIST-2)                  01318800
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE244P                 01318900
                    AIF   (K'&ZCGPR GT 2).ZE244Q                        01319000
                    AIF   ('&ZCGPR' EQ '0').ZE244Q                      01319100
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01319200
                    AIF   (T'&ZCGPR NE 'N').ZE244Q  INVALID REG NAME    01319300
.ZE244P             ANOP  ,                                             01319400
                    AIF   (T'&ZCGPR NE 'N').ZE244R  NON NUMERIC         01319500
                    AIF   ('&ZCGPR' LT '2').ZE244Q                      01319600
                    AIF   ('&ZCGPR' LE '12').ZE244R                     01319700
.ZE244Q             ANOP  ,                                             01319800
&ZMS                SETC  '"BUFLIST='                                   01319900
&ZMS                SETC  '&ZMS.&BUFLIST"'                              01320000
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01320100
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01320200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01320300
.ZE244R             ANOP  ,                                             01320400
.*-------------------------------------------------------------------   01320500
.***AE.KMEKY08 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           01320600
.ZE245     AIF   ('&XDUMMY7' NE 'BUFLST64').ZE246                       01320700
.*-------------------------------------------------------------------   01320800
.***AE.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 01320900
                    AIF   (K'&ZXBUFLST64 LE 0).ZE245R  NOT I/O          01321000
                    AIF   ('&XBUFLST64'(1,1) NE '(').ZE245R             01321100
&ZCGPR              SETC  '&XBUFLST64'(2,K'&XBUFLST64-2)                01321200
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE245P                 01321300
                    AIF   (K'&ZCGPR GT 2).ZE245Q                        01321400
                    AIF   ('&ZCGPR' EQ '0').ZE245Q                      01321500
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01321600
                    AIF   (T'&ZCGPR NE 'N').ZE245Q  INVALID REG NAME    01321700
.ZE245P             ANOP  ,                                             01321800
                    AIF   (T'&ZCGPR NE 'N').ZE245R  NON NUMERIC         01321900
                    AIF   ('&ZCGPR' LT '2').ZE245Q                      01322000
                    AIF   ('&ZCGPR' LE '12').ZE245R                     01322100
.ZE245Q             ANOP  ,                                             01322200
&ZMS                SETC  '"BUFLST64='                                  01322300
&ZMS                SETC  '&ZMS.&BUFLST64"'                             01322400
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01322500
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01322600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01322700
.ZE245R             ANOP  ,                                             01322800
.*-------------------------------------------------------------------   01322900
.***AE.KMEKY09 NAME, RQD INPUT, ME KEYS -END                            01323000
.ZE246              ANOP  ,           END MUTUALLY EXCLUSIVE KEYS       01323100
.*----------------------------------------------------------------***   01323200
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY                          01323300
                    AIF   (N'&BUFNUM LE 1).ZE248A  CK NUM               01323400
&ZMS                SETC  '"BUFNUM='                                    01323500
&ZMS                SETC  '&ZMS.&BUFNUM"'                               01323600
&ZMS                SETC  '&ZMS "BUFNUM"'                               01323700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01323800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01323900
.ZE248A             ANOP  ,                                             01324000
.*-------------------------------------------------------------------   01324100
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT                     01324200
                    AIF   (K'&BUFNUM(1) LE 0).ZE248B NO PRM             01324300
&ZXBUFNUM           SETC  'INPUT'     SET IN/OUTPUT                     01324400
&XBUFNUM            SETC  '&BUFNUM(1)'          SET XVARIABLE           01324500
                    AIF   (N'&BUFNUM GT 1).ZE248B                       01324600
.*                  ANOP                                                01324700
&XBUFNUM            SETC  '&BUFNUM'   SET XVARIABLE                     01324800
.ZE248B             ANOP  ,                                             01324900
.*-------------------------------------------------------------------   01325000
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    01325100
                    AIF   (K'&ZXBUFNUM LE 0).ZE248R  NOT I/O            01325200
                    AIF   ('&XBUFNUM'(1,1) NE '(').ZE248R               01325300
&ZCGPR              SETC  '&XBUFNUM'(2,K'&XBUFNUM-2)                    01325400
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE248P                 01325500
                    AIF   (K'&ZCGPR GT 2).ZE248Q                        01325600
                    AIF   ('&ZCGPR' EQ '0').ZE248Q                      01325700
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01325800
                    AIF   (T'&ZCGPR NE 'N').ZE248Q  INVALID REG NAME    01325900
.ZE248P             ANOP  ,                                             01326000
                    AIF   (T'&ZCGPR NE 'N').ZE248R  NON NUMERIC         01326100
                    AIF   ('&ZCGPR' LT '2').ZE248Q                      01326200
                    AIF   ('&ZCGPR' LE '12').ZE248R                     01326300
.ZE248Q             ANOP  ,                                             01326400
&ZMS                SETC  '"BUFNUM='                                    01326500
&ZMS                SETC  '&ZMS.&BUFNUM"'                               01326600
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01326700
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01326800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01326900
.ZE248R             ANOP  ,                                             01327000
.*----------------------------------------------------------------***   01327100
.***AE.KKWRD01 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             01327200
                    AIF   (N'&BUFTYPE LE 1).ZE251A  CK NUM              01327300
&ZMS                SETC  '"BUFTYPE='                                   01327400
&ZMS                SETC  '&ZMS.&BUFTYPE"'                              01327500
&ZMS                SETC  '&ZMS "BUFTYPE"'                              01327600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01327700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01327800
.ZE251A             ANOP  ,                                             01327900
.*-------------------------------------------------------------------   01328000
.***AE.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             01328100
.ZE252A   AIF   ('&BUFTYPE(1)' NE 'PAGEELIG').ZE253A                    01328200
&XBUFTYPE           SETC  'PAGEELIG'  SET KEYWORD                       01328300
.*-------------------------------------------------------------------   01328400
.***AE.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             01328500
.ZE253A   AIF   ('&BUFTYPE(1)' NE 'PAGEABLE').ZE254A                    01328600
&XBUFTYPE           SETC  'PAGEABLE'  SET KEYWORD                       01328700
.*-------------------------------------------------------------------   01328800
.***AE.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             01328900
.ZE254A   AIF   ('&BUFTYPE(1)' NE 'FIXED').ZE255A                       01329000
&XBUFTYPE           SETC  'FIXED'     SET KEYWORD                       01329100
.*-------------------------------------------------------------------   01329200
.***AE.KKWRD03 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             01329300
.ZE255A             AIF   (K'&XBUFTYPE GT 0).ZE255B                     01329400
                    AIF   (K'&BUFTYPE(1) LE 0).ZE255C                   01329500
&ZMS                SETC  '"BUFTYPE='                                   01329600
&ZMS                SETC  '&ZMS.&BUFTYPE"'                              01329700
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     01329800
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           01329900
&ZMS                SETC  '&ZMS "PAGEELIG",'                            01330000
&ZMS                SETC  '&ZMS "PAGEABLE",'                            01330100
&ZMS                SETC  '&ZMS OR "FIXED".'                            01330200
                    MNOTE 8,' &ZMS '                                    01330300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01330400
                    AGO   .ZE255C                                       01330500
.*                                                                      01330600
.ZE255B             ANOP  ,                                             01330700
&ZXBUFTYPE          SETC  'INPUT'     SET IN/OUTPUT                     01330800
.ZE255C             ANOP  ,                                             01330900
.*----------------------------------------------------------------***   01331000
.***AE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01331100
                    AIF   (N'&CLEAR LE 1).ZE257A  CK NUM                01331200
&ZMS                SETC  '"CLEAR='                                     01331300
&ZMS                SETC  '&ZMS.&CLEAR"'                                01331400
&ZMS                SETC  '&ZMS "CLEAR"'                                01331500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01331600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01331700
.ZE257A             ANOP  ,                                             01331800
.*-------------------------------------------------------------------   01331900
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01332000
.ZE258A   AIF   ('&CLEAR(1)' NE 'NO').ZE259A                            01332100
&XCLEAR             SETC  'NO'        SET KEYWORD                       01332200
.*-------------------------------------------------------------------   01332300
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01332400
.ZE259A   AIF   ('&CLEAR(1)' NE 'YES').ZE260A                           01332500
&XCLEAR             SETC  'YES'       SET KEYWORD                       01332600
.*-------------------------------------------------------------------   01332700
.***AE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01332800
.ZE260A             AIF   (K'&XCLEAR GT 0).ZE260B                       01332900
                    AIF   (K'&CLEAR(1) LE 0).ZE260C                     01333000
&ZMS                SETC  '"CLEAR='                                     01333100
&ZMS                SETC  '&ZMS.&CLEAR"'                                01333200
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     01333300
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           01333400
&ZMS                SETC  '&ZMS "NO"'                                   01333500
&ZMS                SETC  '&ZMS OR "YES".'                              01333600
                    MNOTE 8,' &ZMS '                                    01333700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01333800
                    AGO   .ZE260C                                       01333900
.*                                                                      01334000
.ZE260B             ANOP  ,                                             01334100
&ZXCLEAR            SETC  'INPUT'     SET IN/OUTPUT                     01334200
.ZE260C             ANOP  ,                                             01334300
.*----------------------------------------------------------------***   01334400
.***AE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01334500
                    AIF   (N'&CSMUSER LE 1).ZE262A  CK NUM              01334600
&ZMS                SETC  '"CSMUSER='                                   01334700
&ZMS                SETC  '&ZMS.&CSMUSER"'                              01334800
&ZMS                SETC  '&ZMS "CSMUSER"'                              01334900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01335000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01335100
.ZE262A             ANOP  ,                                             01335200
.*-------------------------------------------------------------------   01335300
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01335400
.ZE263A   AIF   ('&CSMUSER(1)' NE 'NO').ZE264A                          01335500
&XCSMUSER           SETC  'NO'        SET KEYWORD                       01335600
.*-------------------------------------------------------------------   01335700
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01335800
.ZE264A   AIF   ('&CSMUSER(1)' NE 'YES').ZE265A                         01335900
&XCSMUSER           SETC  'YES'       SET KEYWORD                       01336000
.*-------------------------------------------------------------------   01336100
.***AE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01336200
.ZE265A             AIF   (K'&XCSMUSER GT 0).ZE265B                     01336300
                    AIF   (K'&CSMUSER(1) LE 0).ZE265C                   01336400
&ZMS                SETC  '"CSMUSER='                                   01336500
&ZMS                SETC  '&ZMS.&CSMUSER"'                              01336600
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     01336700
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           01336800
&ZMS                SETC  '&ZMS "NO"'                                   01336900
&ZMS                SETC  '&ZMS OR "YES".'                              01337000
                    MNOTE 8,' &ZMS '                                    01337100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01337200
                    AGO   .ZE265C                                       01337300
.*                                                                      01337400
.ZE265B             ANOP  ,                                             01337500
&ZXCSMUSER          SETC  'INPUT'     SET IN/OUTPUT                     01337600
.ZE265C             ANOP  ,                                             01337700
.*----------------------------------------------------------------***   01337800
.***AE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVAR KEY                         01337900
                    AIF   (N'&ERRBFLST LE 1).ZE267A  CK NUM             01338000
&ZMS                SETC  '"ERRBFLST='                                  01338100
&ZMS                SETC  '&ZMS.&ERRBFLST"'                             01338200
&ZMS                SETC  '&ZMS "ERRBFLST"'                             01338300
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01338400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01338500
.ZE267A             ANOP  ,                                             01338600
.*-------------------------------------------------------------------   01338700
.***AE.KXVAR04 NAME, OPT OUTPUT, KEYS -XVAR ARGUMENT                    01338800
                    AIF   (K'&ERRBFLST(1) LE 0).ZE267B NO PRM           01338900
&ZXERRBFLST         SETC  'OUTPUT'    SET IN/OUTPUT                     01339000
&XERRBFLST          SETC  '&ERRBFLST(1)'        SET XVARIABLE           01339100
                    AIF   (N'&ERRBFLST GT 1).ZE267B                     01339200
.*                  ANOP                                                01339300
&XERRBFLST          SETC  '&ERRBFLST'           SET XVARIABLE           01339400
.ZE267B             ANOP  ,                                             01339500
.*-------------------------------------------------------------------   01339600
.***AE.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   01339700
                    AIF   (K'&ZXERRBFLST LE 0).ZE267R  NOT I/O          01339800
                    AIF   ('&XERRBFLST'(1,1) NE '(').ZE267R             01339900
&ZCGPR              SETC  '&XERRBFLST'(2,K'&XERRBFLST-2)                01340000
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE267P                 01340100
                    AIF   (K'&ZCGPR GT 2).ZE267Q                        01340200
                    AIF   ('&ZCGPR' EQ '0').ZE267Q                      01340300
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01340400
                    AIF   (T'&ZCGPR NE 'N').ZE267Q  INVALID REG NAME    01340500
.ZE267P             ANOP  ,                                             01340600
                    AIF   (T'&ZCGPR NE 'N').ZE267R  NON NUMERIC         01340700
                    AIF   ('&ZCGPR' LT '2').ZE267Q                      01340800
                    AIF   ('&ZCGPR' LE '12').ZE267R                     01340900
.ZE267Q             ANOP  ,                                             01341000
&ZMS                SETC  '"ERRBFLST='                                  01341100
&ZMS                SETC  '&ZMS.&ERRBFLST"'                             01341200
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01341300
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01341400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01341500
.ZE267R             ANOP  ,                                             01341600
.*----------------------------------------------------------------***   01341700
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01341800
                    AIF   (N'&FREERTN LE 1).ZE270A  CK NUM              01341900
&ZMS                SETC  '"FREERTN='                                   01342000
&ZMS                SETC  '&ZMS.&FREERTN"'                              01342100
&ZMS                SETC  '&ZMS "FREERTN"'                              01342200
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01342300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01342400
.ZE270A             ANOP  ,                                             01342500
.*-------------------------------------------------------------------   01342600
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01342700
                    AIF   (K'&FREERTN(1) LE 0).ZE270B NO PRM            01342800
&ZXFREERTN          SETC  'INPUT'     SET IN/OUTPUT                     01342900
&XFREERTN           SETC  '&FREERTN(1)'         SET XVARIABLE           01343000
                    AIF   (N'&FREERTN GT 1).ZE270B                      01343100
.*                  ANOP                                                01343200
&XFREERTN           SETC  '&FREERTN'  SET XVARIABLE                     01343300
.ZE270B             ANOP  ,                                             01343400
.*-------------------------------------------------------------------   01343500
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01343600
                    AIF   (K'&ZXFREERTN LE 0).ZE270R  NOT I/O           01343700
                    AIF   ('&XFREERTN'(1,1) NE '(').ZE270R              01343800
&ZCGPR              SETC  '&XFREERTN'(2,K'&XFREERTN-2)                  01343900
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE270P                 01344000
                    AIF   (K'&ZCGPR GT 2).ZE270Q                        01344100
                    AIF   ('&ZCGPR' EQ '0').ZE270Q                      01344200
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01344300
                    AIF   (T'&ZCGPR NE 'N').ZE270Q  INVALID REG NAME    01344400
.ZE270P             ANOP  ,                                             01344500
                    AIF   (T'&ZCGPR NE 'N').ZE270R  NON NUMERIC         01344600
                    AIF   ('&ZCGPR' LT '2').ZE270Q                      01344700
                    AIF   ('&ZCGPR' LE '12').ZE270R                     01344800
.ZE270Q             ANOP  ,                                             01344900
&ZMS                SETC  '"FREERTN='                                   01345000
&ZMS                SETC  '&ZMS.&FREERTN"'                              01345100
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01345200
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01345300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01345400
.ZE270R             ANOP  ,                                             01345500
.*----------------------------------------------------------------***   01345600
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01345700
                    AIF   (N'&GAP LE 1).ZE273A  CK NUM                  01345800
&ZMS                SETC  '"GAP='                                       01345900
&ZMS                SETC  '&ZMS.&GAP"'                                  01346000
&ZMS                SETC  '&ZMS "GAP"'                                  01346100
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01346200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01346300
.ZE273A             ANOP  ,                                             01346400
.*-------------------------------------------------------------------   01346500
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01346600
                    AIF   (K'&GAP(1) LE 0).ZE273B NO PRM                01346700
&ZXGAP              SETC  'INPUT'     SET IN/OUTPUT                     01346800
&XGAP               SETC  '&GAP(1)'   SET XVARIABLE                     01346900
                    AIF   (N'&GAP GT 1).ZE273B                          01347000
.*                  ANOP                                                01347100
&XGAP               SETC  '&GAP'      SET XVARIABLE                     01347200
.ZE273B             ANOP  ,                                             01347300
.*-------------------------------------------------------------------   01347400
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01347500
                    AIF   (K'&ZXGAP LE 0).ZE273R  NOT I/O               01347600
                    AIF   ('&XGAP'(1,1) NE '(').ZE273R                  01347700
&ZCGPR              SETC  '&XGAP'(2,K'&XGAP-2)                          01347800
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE273P                 01347900
                    AIF   (K'&ZCGPR GT 2).ZE273Q                        01348000
                    AIF   ('&ZCGPR' EQ '0').ZE273Q                      01348100
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01348200
                    AIF   (T'&ZCGPR NE 'N').ZE273Q  INVALID REG NAME    01348300
.ZE273P             ANOP  ,                                             01348400
                    AIF   (T'&ZCGPR NE 'N').ZE273R  NON NUMERIC         01348500
                    AIF   ('&ZCGPR' LT '2').ZE273Q                      01348600
                    AIF   ('&ZCGPR' LE '12').ZE273R                     01348700
.ZE273Q             ANOP  ,                                             01348800
&ZMS                SETC  '"GAP='                                       01348900
&ZMS                SETC  '&ZMS.&GAP"'                                  01349000
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01349100
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01349200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01349300
.ZE273R             ANOP  ,                                             01349400
.*----------------------------------------------------------------***   01349500
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01349600
                    AIF   (N'&OWNERID LE 1).ZE276A  CK NUM              01349700
&ZMS                SETC  '"OWNERID='                                   01349800
&ZMS                SETC  '&ZMS.&OWNERID"'                              01349900
&ZMS                SETC  '&ZMS "OWNERID"'                              01350000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01350100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01350200
.ZE276A             ANOP  ,                                             01350300
.*-------------------------------------------------------------------   01350400
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01350500
                    AIF   (K'&OWNERID(1) LE 0).ZE276B NO PRM            01350600
&ZXOWNERID          SETC  'INPUT'     SET IN/OUTPUT                     01350700
&XOWNERID           SETC  '&OWNERID(1)'         SET XVARIABLE           01350800
                    AIF   (N'&OWNERID GT 1).ZE276B                      01350900
.*                  ANOP                                                01351000
&XOWNERID           SETC  '&OWNERID'  SET XVARIABLE                     01351100
.ZE276B             ANOP  ,                                             01351200
.*-------------------------------------------------------------------   01351300
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01351400
                    AIF   (K'&ZXOWNERID LE 0).ZE276R  NOT I/O           01351500
                    AIF   ('&XOWNERID'(1,1) NE '(').ZE276R              01351600
&ZCGPR              SETC  '&XOWNERID'(2,K'&XOWNERID-2)                  01351700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE276P                 01351800
                    AIF   (K'&ZCGPR GT 2).ZE276Q                        01351900
                    AIF   ('&ZCGPR' EQ '0').ZE276Q                      01352000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01352100
                    AIF   (T'&ZCGPR NE 'N').ZE276Q  INVALID REG NAME    01352200
.ZE276P             ANOP  ,                                             01352300
                    AIF   (T'&ZCGPR NE 'N').ZE276R  NON NUMERIC         01352400
                    AIF   ('&ZCGPR' LT '2').ZE276Q                      01352500
                    AIF   ('&ZCGPR' LE '12').ZE276R                     01352600
.ZE276Q             ANOP  ,                                             01352700
&ZMS                SETC  '"OWNERID='                                   01352800
&ZMS                SETC  '&ZMS.&OWNERID"'                              01352900
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01353000
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01353100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01353200
.ZE276R             ANOP  ,                                             01353300
.*----------------------------------------------------------------***   01353400
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01353500
                    AIF   (N'&COMPID LE 1).ZE279A  CK NUM               01353600
&ZMS                SETC  '"COMPID='                                    01353700
&ZMS                SETC  '&ZMS.&COMPID"'                               01353800
&ZMS                SETC  '&ZMS "COMPID"'                               01353900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01354000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01354100
.ZE279A             ANOP  ,                                             01354200
.*-------------------------------------------------------------------   01354300
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01354400
                    AIF   (K'&COMPID(1) LE 0).ZE279B NO PRM             01354500
&ZXCOMPID           SETC  'INPUT'     SET IN/OUTPUT                     01354600
&XCOMPID            SETC  '&COMPID(1)'          SET XVARIABLE           01354700
                    AIF   (N'&COMPID GT 1).ZE279B                       01354800
.*                  ANOP                                                01354900
&XCOMPID            SETC  '&COMPID'   SET XVARIABLE                     01355000
.ZE279B             ANOP  ,                                             01355100
.*-------------------------------------------------------------------   01355200
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01355300
                    AIF   (K'&ZXCOMPID LE 0).ZE279R  NOT I/O            01355400
                    AIF   ('&XCOMPID'(1,1) NE '(').ZE279R               01355500
&ZCGPR              SETC  '&XCOMPID'(2,K'&XCOMPID-2)                    01355600
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE279P                 01355700
                    AIF   (K'&ZCGPR GT 2).ZE279Q                        01355800
                    AIF   ('&ZCGPR' EQ '0').ZE279Q                      01355900
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01356000
                    AIF   (T'&ZCGPR NE 'N').ZE279Q  INVALID REG NAME    01356100
.ZE279P             ANOP  ,                                             01356200
                    AIF   (T'&ZCGPR NE 'N').ZE279R  NON NUMERIC         01356300
                    AIF   ('&ZCGPR' LT '2').ZE279Q                      01356400
                    AIF   ('&ZCGPR' LE '12').ZE279R                     01356500
.ZE279Q             ANOP  ,                                             01356600
&ZMS                SETC  '"COMPID='                                    01356700
&ZMS                SETC  '&ZMS.&COMPID"'                               01356800
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01356900
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01357000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01357100
.ZE279R             ANOP  ,                                             01357200
.*----------------------------------------------------------------***   01357300
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01357400
                    AIF   (N'&COMPUSER LE 1).ZE282A  CK NUM             01357500
&ZMS                SETC  '"COMPUSER='                                  01357600
&ZMS                SETC  '&ZMS.&COMPUSER"'                             01357700
&ZMS                SETC  '&ZMS "COMPUSER"'                             01357800
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01357900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01358000
.ZE282A             ANOP  ,                                             01358100
.*-------------------------------------------------------------------   01358200
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01358300
                    AIF   (K'&COMPUSER(1) LE 0).ZE282B NO PRM           01358400
&ZXCOMPUSER         SETC  'INPUT'     SET IN/OUTPUT                     01358500
&XCOMPUSER          SETC  '&COMPUSER(1)'        SET XVARIABLE           01358600
                    AIF   (N'&COMPUSER GT 1).ZE282B                     01358700
.*                  ANOP                                                01358800
&XCOMPUSER          SETC  '&COMPUSER'           SET XVARIABLE           01358900
.ZE282B             ANOP  ,                                             01359000
.*-------------------------------------------------------------------   01359100
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01359200
                    AIF   (K'&ZXCOMPUSER LE 0).ZE282R  NOT I/O          01359300
                    AIF   ('&XCOMPUSER'(1,1) NE '(').ZE282R             01359400
&ZCGPR              SETC  '&XCOMPUSER'(2,K'&XCOMPUSER-2)                01359500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE282P                 01359600
                    AIF   (K'&ZCGPR GT 2).ZE282Q                        01359700
                    AIF   ('&ZCGPR' EQ '0').ZE282Q                      01359800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01359900
                    AIF   (T'&ZCGPR NE 'N').ZE282Q  INVALID REG NAME    01360000
.ZE282P             ANOP  ,                                             01360100
                    AIF   (T'&ZCGPR NE 'N').ZE282R  NON NUMERIC         01360200
                    AIF   ('&ZCGPR' LT '2').ZE282Q                      01360300
                    AIF   ('&ZCGPR' LE '12').ZE282R                     01360400
.ZE282Q             ANOP  ,                                             01360500
&ZMS                SETC  '"COMPUSER='                                  01360600
&ZMS                SETC  '&ZMS.&COMPUSER"'                             01360700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01360800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01360900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01361000
.ZE282R             ANOP  ,                                             01361100
.*----------------------------------------------------------------***   01361200
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY                          01361300
                    AIF   (N'&POOLTOKN LE 1).ZE285A  CK NUM             01361400
&ZMS                SETC  '"POOLTOKN='                                  01361500
&ZMS                SETC  '&ZMS.&POOLTOKN"'                             01361600
&ZMS                SETC  '&ZMS "POOLTOKN"'                             01361700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01361800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01361900
.ZE285A             ANOP  ,                                             01362000
.*-------------------------------------------------------------------   01362100
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT                     01362200
                    AIF   (K'&POOLTOKN(1) LE 0).ZE285B NO PRM           01362300
&ZXPOOLTOKN         SETC  'INPUT'     SET IN/OUTPUT                     01362400
&XPOOLTOKN          SETC  '&POOLTOKN(1)'        SET XVARIABLE           01362500
                    AIF   (N'&POOLTOKN GT 1).ZE285B                     01362600
.*                  ANOP                                                01362700
&XPOOLTOKN          SETC  '&POOLTOKN'           SET XVARIABLE           01362800
.ZE285B             ANOP  ,                                             01362900
.*-------------------------------------------------------------------   01363000
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    01363100
                    AIF   (K'&ZXPOOLTOKN LE 0).ZE285R  NOT I/O          01363200
                    AIF   ('&XPOOLTOKN'(1,1) NE '(').ZE285R             01363300
&ZCGPR              SETC  '&XPOOLTOKN'(2,K'&XPOOLTOKN-2)                01363400
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE285P                 01363500
                    AIF   (K'&ZCGPR GT 2).ZE285Q                        01363600
                    AIF   ('&ZCGPR' EQ '0').ZE285Q                      01363700
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01363800
                    AIF   (T'&ZCGPR NE 'N').ZE285Q  INVALID REG NAME    01363900
.ZE285P             ANOP  ,                                             01364000
                    AIF   (T'&ZCGPR NE 'N').ZE285R  NON NUMERIC         01364100
                    AIF   ('&ZCGPR' LT '2').ZE285Q                      01364200
                    AIF   ('&ZCGPR' LE '12').ZE285R                     01364300
.ZE285Q             ANOP  ,                                             01364400
&ZMS                SETC  '"POOLTOKN='                                  01364500
&ZMS                SETC  '&ZMS.&POOLTOKN"'                             01364600
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01364700
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01364800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01364900
.ZE285R             ANOP  ,                                             01365000
.*----------------------------------------------------------------***   01365100
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01365200
                    AIF   (N'&TASKID LE 1).ZE288A  CK NUM               01365300
&ZMS                SETC  '"TASKID='                                    01365400
&ZMS                SETC  '&ZMS.&TASKID"'                               01365500
&ZMS                SETC  '&ZMS "TASKID"'                               01365600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01365700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01365800
.ZE288A             ANOP  ,                                             01365900
.*-------------------------------------------------------------------   01366000
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01366100
                    AIF   (K'&TASKID(1) LE 0).ZE288B NO PRM             01366200
&ZXTASKID           SETC  'INPUT'     SET IN/OUTPUT                     01366300
&XTASKID            SETC  '&TASKID(1)'          SET XVARIABLE           01366400
                    AIF   (N'&TASKID GT 1).ZE288B                       01366500
.*                  ANOP                                                01366600
&XTASKID            SETC  '&TASKID'   SET XVARIABLE                     01366700
.ZE288B             ANOP  ,                                             01366800
.*-------------------------------------------------------------------   01366900
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01367000
                    AIF   (K'&ZXTASKID LE 0).ZE288R  NOT I/O            01367100
                    AIF   ('&XTASKID'(1,1) NE '(').ZE288R               01367200
&ZCGPR              SETC  '&XTASKID'(2,K'&XTASKID-2)                    01367300
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE288P                 01367400
                    AIF   (K'&ZCGPR GT 2).ZE288Q                        01367500
                    AIF   ('&ZCGPR' EQ '0').ZE288Q                      01367600
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01367700
                    AIF   (T'&ZCGPR NE 'N').ZE288Q  INVALID REG NAME    01367800
.ZE288P             ANOP  ,                                             01367900
                    AIF   (T'&ZCGPR NE 'N').ZE288R  NON NUMERIC         01368000
                    AIF   ('&ZCGPR' LT '2').ZE288Q                      01368100
                    AIF   ('&ZCGPR' LE '12').ZE288R                     01368200
.ZE288Q             ANOP  ,                                             01368300
&ZMS                SETC  '"TASKID='                                    01368400
&ZMS                SETC  '&ZMS.&TASKID"'                               01368500
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01368600
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01368700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01368800
.ZE288R             ANOP  ,                                             01368900
.*----------------------------------------------------------------***   01369000
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01369100
                    AIF   (N'&THREAD LE 1).ZE291A  CK NUM               01369200
&ZMS                SETC  '"THREAD='                                    01369300
&ZMS                SETC  '&ZMS.&THREAD"'                               01369400
&ZMS                SETC  '&ZMS "THREAD"'                               01369500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01369600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01369700
.ZE291A             ANOP  ,                                             01369800
.*-------------------------------------------------------------------   01369900
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01370000
                    AIF   (K'&THREAD(1) LE 0).ZE291B NO PRM             01370100
&ZXTHREAD           SETC  'INPUT'     SET IN/OUTPUT                     01370200
&XTHREAD            SETC  '&THREAD(1)'          SET XVARIABLE           01370300
                    AIF   (N'&THREAD GT 1).ZE291B                       01370400
.*                  ANOP                                                01370500
&XTHREAD            SETC  '&THREAD'   SET XVARIABLE                     01370600
.ZE291B             ANOP  ,                                             01370700
.*-------------------------------------------------------------------   01370800
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01370900
                    AIF   (K'&ZXTHREAD LE 0).ZE291R  NOT I/O            01371000
                    AIF   ('&XTHREAD'(1,1) NE '(').ZE291R               01371100
&ZCGPR              SETC  '&XTHREAD'(2,K'&XTHREAD-2)                    01371200
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE291P                 01371300
                    AIF   (K'&ZCGPR GT 2).ZE291Q                        01371400
                    AIF   ('&ZCGPR' EQ '0').ZE291Q                      01371500
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01371600
                    AIF   (T'&ZCGPR NE 'N').ZE291Q  INVALID REG NAME    01371700
.ZE291P             ANOP  ,                                             01371800
                    AIF   (T'&ZCGPR NE 'N').ZE291R  NON NUMERIC         01371900
                    AIF   ('&ZCGPR' LT '2').ZE291Q                      01372000
                    AIF   ('&ZCGPR' LE '12').ZE291R                     01372100
.ZE291Q             ANOP  ,                                             01372200
&ZMS                SETC  '"THREAD='                                    01372300
&ZMS                SETC  '&ZMS.&THREAD"'                               01372400
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01372500
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01372600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01372700
.ZE291R             ANOP  ,                                             01372800
.*----------------------------------------------------------------***   01372900
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01373000
                    AIF   (N'&UTILRTN LE 1).ZE294A  CK NUM              01373100
&ZMS                SETC  '"UTILRTN='                                   01373200
&ZMS                SETC  '&ZMS.&UTILRTN"'                              01373300
&ZMS                SETC  '&ZMS "UTILRTN"'                              01373400
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01373500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01373600
.ZE294A             ANOP  ,                                             01373700
.*-------------------------------------------------------------------   01373800
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01373900
                    AIF   (K'&UTILRTN(1) LE 0).ZE294B NO PRM            01374000
&ZXUTILRTN          SETC  'INPUT'     SET IN/OUTPUT                     01374100
&XUTILRTN           SETC  '&UTILRTN(1)'         SET XVARIABLE           01374200
                    AIF   (N'&UTILRTN GT 1).ZE294B                      01374300
.*                  ANOP                                                01374400
&XUTILRTN           SETC  '&UTILRTN'  SET XVARIABLE                     01374500
.ZE294B             ANOP  ,                                             01374600
.*-------------------------------------------------------------------   01374700
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01374800
                    AIF   (K'&ZXUTILRTN LE 0).ZE294R  NOT I/O           01374900
                    AIF   ('&XUTILRTN'(1,1) NE '(').ZE294R              01375000
&ZCGPR              SETC  '&XUTILRTN'(2,K'&XUTILRTN-2)                  01375100
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE294P                 01375200
                    AIF   (K'&ZCGPR GT 2).ZE294Q                        01375300
                    AIF   ('&ZCGPR' EQ '0').ZE294Q                      01375400
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01375500
                    AIF   (T'&ZCGPR NE 'N').ZE294Q  INVALID REG NAME    01375600
.ZE294P             ANOP  ,                                             01375700
                    AIF   (T'&ZCGPR NE 'N').ZE294R  NON NUMERIC         01375800
                    AIF   ('&ZCGPR' LT '2').ZE294Q                      01375900
                    AIF   ('&ZCGPR' LE '12').ZE294R                     01376000
.ZE294Q             ANOP  ,                                             01376100
&ZMS                SETC  '"UTILRTN='                                   01376200
&ZMS                SETC  '&ZMS.&UTILRTN"'                              01376300
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01376400
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01376500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01376600
.ZE294R             ANOP  ,                                             01376700
.*----------------------------------------------------------------***   01376800
.***AE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01376900
                    AIF   (N'&WAIT LE 1).ZE297A  CK NUM                 01377000
&ZMS                SETC  '"WAIT='                                      01377100
&ZMS                SETC  '&ZMS.&WAIT"'                                 01377200
&ZMS                SETC  '&ZMS "WAIT"'                                 01377300
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01377400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01377500
.ZE297A             ANOP  ,                                             01377600
.*-------------------------------------------------------------------   01377700
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01377800
.ZE298A   AIF   ('&WAIT(1)' NE 'NO').ZE299A                             01377900
&XWAIT              SETC  'NO'        SET KEYWORD                       01378000
.*-------------------------------------------------------------------   01378100
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01378200
.ZE299A   AIF   ('&WAIT(1)' NE 'YES').ZE300A                            01378300
&XWAIT              SETC  'YES'       SET KEYWORD                       01378400
.*-------------------------------------------------------------------   01378500
.***AE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01378600
.ZE300A   AIF   ('&WAIT(1)' NE 'EXPAND').ZE301A                         01378700
&XWAIT              SETC  'EXPAND'    SET KEYWORD                       01378800
.*-------------------------------------------------------------------   01378900
.***AE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             01379000
.ZE301A             AIF   (K'&XWAIT GT 0).ZE301B                        01379100
                    AIF   (K'&WAIT(1) LE 0).ZE301C                      01379200
&ZMS                SETC  '"WAIT='                                      01379300
&ZMS                SETC  '&ZMS.&WAIT"'                                 01379400
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     01379500
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           01379600
&ZMS                SETC  '&ZMS "NO",'                                  01379700
&ZMS                SETC  '&ZMS "YES",'                                 01379800
&ZMS                SETC  '&ZMS OR "EXPAND".'                           01379900
                    MNOTE 8,' &ZMS '                                    01380000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01380100
                    AGO   .ZE301C                                       01380200
.*                                                                      01380300
.ZE301B             ANOP  ,                                             01380400
&ZXWAIT             SETC  'INPUT'     SET IN/OUTPUT                     01380500
.ZE301C             ANOP  ,                                             01380600
.*-------------------------------------------------------------------   01380700
.***AE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           01380800
&ZTLC               SETC 'PAGE_BUFFER'                                  01380900
                    AIF   ('&REQUEST(1)' NE '&ZTLC').ZE302A             01381000
&XREQUEST           SETC  'PAGE_BUFFER'         SET KEYWORD             01381100
                    AIF   (N'&REQUEST LE 1).ZE302A  CK NUM              01381200
&ZMS                SETC  '"REQUEST='                                   01381300
&ZMS                SETC  '&ZMS.&REQUEST"'                              01381400
&ZMS                SETC  '&ZMS "REQUEST"'                              01381500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01381600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01381700
.ZE302A             ANOP  ,                                             01381800
.*----------------------------------------------------------------***   01381900
.***AE.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE                      01382000
&XDUMMY8            SETC  ''          INITIALIZE XVARIABLE              01382100
                    AIF   (K'&BUFLIST LE 0).ZE304C                      01382200
&ZXDUMMY8           SETC  'INPUT'     SET IN/OUTPUT                     01382300
&XDUMMY8            SETC  'BUFLIST'   SET XVARIABLE                     01382400
&ZXBUFLIST          SETC  'INPUT'     SET IN/OUTPUT                     01382500
&XBUFLIST           SETC  '&BUFLIST(1)'         SET XVARIABLE PARM      01382600
                    AIF   (N'&BUFLIST GT 1).ZE304A                      01382700
&XBUFLIST           SETC  '&BUFLIST'  SET XVARIABLE PARM                01382800
.ZE304A             AIF   (N'&BUFLIST LE 1).ZE304B  CK NUM              01382900
&ZMS                SETC  '"BUFLIST='                                   01383000
&ZMS                SETC  '&ZMS.&BUFLIST"'                              01383100
&ZMS                SETC  '&ZMS "BUFLIST"'                              01383200
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01383300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01383400
.ZE304B             AIF   (K'&XBUFLIST GT 0).ZE304C  ONE PARM           01383500
&ZXDUMMY8           SETC  ''          RESET IN/OUTPUT                   01383600
&ZXBUFLIST          SETC  ''          RESET IN/OUTPUT                   01383700
.ZE304C             ANOP  ,                                             01383800
.*----------------------------------------------------------------***   01383900
.***AE.KMEKY02 NAME, RQD INPUT, ME KEYS -NON-XVAR KEY                   01384000
                    AIF   (K'&BUFLST64 LE 0).ZE305D  NO ME KEY          01384100
                    AIF   (N'&BUFLST64 LE 1).ZE305A  CK NUM             01384200
&ZMS                SETC  '"BUFLST64='                                  01384300
&ZMS                SETC  '&ZMS.&BUFLST64"'                             01384400
&ZMS                SETC  '&ZMS "BUFLST64"'                             01384500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01384600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01384700
.ZE305A             AIF   (K'&XDUMMY8 LE 0).ZE305B                      01384800
&ZMS                SETC  '"BUFLST64'                                   01384900
&ZMS                SETC  '&ZMS.=&BUFLST64"'                            01385000
&ZMS                SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'         01385100
&ZMS                SETC  '&ZMS "&XDUMMY8"'                             01385200
                    MNOTE 8,' &ZMS KEY.'                                01385300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01385400
                    AGO   .ZE305D                                       01385500
.*                                                                      01385600
.ZE305B             ANOP  ,                                             01385700
&ZXDUMMY8           SETC  'INPUT'     SET IN/OUTPUT                     01385800
&XDUMMY8            SETC  'BUFLST64'  SET XVARIABLE                     01385900
&ZXBUFLST64         SETC  'INPUT'     SET IN/OUTPUT                     01386000
&XBUFLST64          SETC  '&BUFLST64(1)'        SET PARM                01386100
                    AIF   (N'&BUFLST64 GT 1).ZE305C                     01386200
&XBUFLST64          SETC  '&BUFLST64'           SET PARM                01386300
.ZE305C             AIF   (K'&XBUFLST64 GT 0).ZE305D  ONE PARM          01386400
&ZXDUMMY8           SETC  ''          RESET IN/OUTPUT                   01386500
&ZXBUFLST64         SETC  ''          RESET IN/OUTPUT                   01386600
.ZE305D             ANOP  ,                                             01386700
.*------------------------------------------------------------------    01386800
.***AE.KMEKY07 NAME, RQD INPUT, ME KEYS -CHECK IF ENTERED               01386900
                    AIF   (K'&XDUMMY8 GT 0).ZE306B                      01387000
&ZXDUMMY8           SETC  ''          RESET IN/OUTPUT                   01387100
&XDUMMY8            SETC  ''          SET NULL                          01387200
&ZXBUFLIST          SETC  ''          RESET OUTPUT                      01387300
&XBUFLIST           SETC  ''          SET NULL PARM                     01387400
.ZE306B             ANOP  ,                                             01387500
.*-------------------------------------------------------------------   01387600
.***AE.KMEKY08 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           01387700
.ZE304     AIF   ('&XDUMMY8' NE 'BUFLIST').ZE305                        01387800
.*-------------------------------------------------------------------   01387900
.***AE.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 01388000
                    AIF   (K'&ZXBUFLIST LE 0).ZE304R  NOT I/O           01388100
                    AIF   ('&XBUFLIST'(1,1) NE '(').ZE304R              01388200
&ZCGPR              SETC  '&XBUFLIST'(2,K'&XBUFLIST-2)                  01388300
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE304P                 01388400
                    AIF   (K'&ZCGPR GT 2).ZE304Q                        01388500
                    AIF   ('&ZCGPR' EQ '0').ZE304Q                      01388600
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01388700
                    AIF   (T'&ZCGPR NE 'N').ZE304Q  INVALID REG NAME    01388800
.ZE304P             ANOP  ,                                             01388900
                    AIF   (T'&ZCGPR NE 'N').ZE304R  NON NUMERIC         01389000
                    AIF   ('&ZCGPR' LT '2').ZE304Q                      01389100
                    AIF   ('&ZCGPR' LE '12').ZE304R                     01389200
.ZE304Q             ANOP  ,                                             01389300
&ZMS                SETC  '"BUFLIST='                                   01389400
&ZMS                SETC  '&ZMS.&BUFLIST"'                              01389500
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01389600
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01389700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01389800
.ZE304R             ANOP  ,                                             01389900
.*-------------------------------------------------------------------   01390000
.***AE.KMEKY08 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           01390100
.ZE305     AIF   ('&XDUMMY8' NE 'BUFLST64').ZE306                       01390200
.*-------------------------------------------------------------------   01390300
.***AE.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 01390400
                    AIF   (K'&ZXBUFLST64 LE 0).ZE305R  NOT I/O          01390500
                    AIF   ('&XBUFLST64'(1,1) NE '(').ZE305R             01390600
&ZCGPR              SETC  '&XBUFLST64'(2,K'&XBUFLST64-2)                01390700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE305P                 01390800
                    AIF   (K'&ZCGPR GT 2).ZE305Q                        01390900
                    AIF   ('&ZCGPR' EQ '0').ZE305Q                      01391000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01391100
                    AIF   (T'&ZCGPR NE 'N').ZE305Q  INVALID REG NAME    01391200
.ZE305P             ANOP  ,                                             01391300
                    AIF   (T'&ZCGPR NE 'N').ZE305R  NON NUMERIC         01391400
                    AIF   ('&ZCGPR' LT '2').ZE305Q                      01391500
                    AIF   ('&ZCGPR' LE '12').ZE305R                     01391600
.ZE305Q             ANOP  ,                                             01391700
&ZMS                SETC  '"BUFLST64='                                  01391800
&ZMS                SETC  '&ZMS.&BUFLST64"'                             01391900
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01392000
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01392100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01392200
.ZE305R             ANOP  ,                                             01392300
.*-------------------------------------------------------------------   01392400
.***AE.KMEKY09 NAME, RQD INPUT, ME KEYS -END                            01392500
.ZE306              ANOP  ,           END MUTUALLY EXCLUSIVE KEYS       01392600
.*----------------------------------------------------------------***   01392700
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY                          01392800
                    AIF   (N'&BUFNUM LE 1).ZE308A  CK NUM               01392900
&ZMS                SETC  '"BUFNUM='                                    01393000
&ZMS                SETC  '&ZMS.&BUFNUM"'                               01393100
&ZMS                SETC  '&ZMS "BUFNUM"'                               01393200
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01393300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01393400
.ZE308A             ANOP  ,                                             01393500
.*-------------------------------------------------------------------   01393600
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT                     01393700
                    AIF   (K'&BUFNUM(1) LE 0).ZE308B NO PRM             01393800
&ZXBUFNUM           SETC  'INPUT'     SET IN/OUTPUT                     01393900
&XBUFNUM            SETC  '&BUFNUM(1)'          SET XVARIABLE           01394000
                    AIF   (N'&BUFNUM GT 1).ZE308B                       01394100
.*                  ANOP                                                01394200
&XBUFNUM            SETC  '&BUFNUM'   SET XVARIABLE                     01394300
.ZE308B             ANOP  ,                                             01394400
.*-------------------------------------------------------------------   01394500
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    01394600
                    AIF   (K'&ZXBUFNUM LE 0).ZE308R  NOT I/O            01394700
                    AIF   ('&XBUFNUM'(1,1) NE '(').ZE308R               01394800
&ZCGPR              SETC  '&XBUFNUM'(2,K'&XBUFNUM-2)                    01394900
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE308P                 01395000
                    AIF   (K'&ZCGPR GT 2).ZE308Q                        01395100
                    AIF   ('&ZCGPR' EQ '0').ZE308Q                      01395200
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01395300
                    AIF   (T'&ZCGPR NE 'N').ZE308Q  INVALID REG NAME    01395400
.ZE308P             ANOP  ,                                             01395500
                    AIF   (T'&ZCGPR NE 'N').ZE308R  NON NUMERIC         01395600
                    AIF   ('&ZCGPR' LT '2').ZE308Q                      01395700
                    AIF   ('&ZCGPR' LE '12').ZE308R                     01395800
.ZE308Q             ANOP  ,                                             01395900
&ZMS                SETC  '"BUFNUM='                                    01396000
&ZMS                SETC  '&ZMS.&BUFNUM"'                               01396100
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01396200
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01396300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01396400
.ZE308R             ANOP  ,                                             01396500
.*----------------------------------------------------------------***   01396600
.***AE.KKWRD01 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             01396700
                    AIF   (N'&BUFTYPE LE 1).ZE311A  CK NUM              01396800
&ZMS                SETC  '"BUFTYPE='                                   01396900
&ZMS                SETC  '&ZMS.&BUFTYPE"'                              01397000
&ZMS                SETC  '&ZMS "BUFTYPE"'                              01397100
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01397200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01397300
.ZE311A             ANOP  ,                                             01397400
.*-------------------------------------------------------------------   01397500
.***AE.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             01397600
.ZE312A   AIF   ('&BUFTYPE(1)' NE 'PAGEELIG').ZE313A                    01397700
&XBUFTYPE           SETC  'PAGEELIG'  SET KEYWORD                       01397800
.*-------------------------------------------------------------------   01397900
.***AE.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             01398000
.ZE313A   AIF   ('&BUFTYPE(1)' NE 'PAGEABLE').ZE314A                    01398100
&XBUFTYPE           SETC  'PAGEABLE'  SET KEYWORD                       01398200
.*-------------------------------------------------------------------   01398300
.***AE.KKWRD03 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             01398400
.ZE314A             AIF   (K'&XBUFTYPE GT 0).ZE314B                     01398500
                    AIF   (K'&BUFTYPE(1) LE 0).ZE314C                   01398600
&ZMS                SETC  '"BUFTYPE='                                   01398700
&ZMS                SETC  '&ZMS.&BUFTYPE"'                              01398800
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     01398900
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           01399000
&ZMS                SETC  '&ZMS "PAGEELIG"'                             01399100
&ZMS                SETC  '&ZMS OR "PAGEABLE".'                         01399200
                    MNOTE 8,' &ZMS '                                    01399300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01399400
                    AGO   .ZE314C                                       01399500
.*                                                                      01399600
.ZE314B             ANOP  ,                                             01399700
&ZXBUFTYPE          SETC  'INPUT'     SET IN/OUTPUT                     01399800
.ZE314C             ANOP  ,                                             01399900
.*----------------------------------------------------------------***   01400000
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01400100
                    AIF   (N'&GAP LE 1).ZE316A  CK NUM                  01400200
&ZMS                SETC  '"GAP='                                       01400300
&ZMS                SETC  '&ZMS.&GAP"'                                  01400400
&ZMS                SETC  '&ZMS "GAP"'                                  01400500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01400600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01400700
.ZE316A             ANOP  ,                                             01400800
.*-------------------------------------------------------------------   01400900
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01401000
                    AIF   (K'&GAP(1) LE 0).ZE316B NO PRM                01401100
&ZXGAP              SETC  'INPUT'     SET IN/OUTPUT                     01401200
&XGAP               SETC  '&GAP(1)'   SET XVARIABLE                     01401300
                    AIF   (N'&GAP GT 1).ZE316B                          01401400
.*                  ANOP                                                01401500
&XGAP               SETC  '&GAP'      SET XVARIABLE                     01401600
.ZE316B             ANOP  ,                                             01401700
.*-------------------------------------------------------------------   01401800
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01401900
                    AIF   (K'&ZXGAP LE 0).ZE316R  NOT I/O               01402000
                    AIF   ('&XGAP'(1,1) NE '(').ZE316R                  01402100
&ZCGPR              SETC  '&XGAP'(2,K'&XGAP-2)                          01402200
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE316P                 01402300
                    AIF   (K'&ZCGPR GT 2).ZE316Q                        01402400
                    AIF   ('&ZCGPR' EQ '0').ZE316Q                      01402500
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01402600
                    AIF   (T'&ZCGPR NE 'N').ZE316Q  INVALID REG NAME    01402700
.ZE316P             ANOP  ,                                             01402800
                    AIF   (T'&ZCGPR NE 'N').ZE316R  NON NUMERIC         01402900
                    AIF   ('&ZCGPR' LT '2').ZE316Q                      01403000
                    AIF   ('&ZCGPR' LE '12').ZE316R                     01403100
.ZE316Q             ANOP  ,                                             01403200
&ZMS                SETC  '"GAP='                                       01403300
&ZMS                SETC  '&ZMS.&GAP"'                                  01403400
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01403500
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01403600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01403700
.ZE316R             ANOP  ,                                             01403800
.*----------------------------------------------------------------***   01403900
.***AE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVAR KEY                         01404000
                    AIF   (N'&ERRBFLST LE 1).ZE319A  CK NUM             01404100
&ZMS                SETC  '"ERRBFLST='                                  01404200
&ZMS                SETC  '&ZMS.&ERRBFLST"'                             01404300
&ZMS                SETC  '&ZMS "ERRBFLST"'                             01404400
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01404500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01404600
.ZE319A             ANOP  ,                                             01404700
.*-------------------------------------------------------------------   01404800
.***AE.KXVAR04 NAME, OPT OUTPUT, KEYS -XVAR ARGUMENT                    01404900
                    AIF   (K'&ERRBFLST(1) LE 0).ZE319B NO PRM           01405000
&ZXERRBFLST         SETC  'OUTPUT'    SET IN/OUTPUT                     01405100
&XERRBFLST          SETC  '&ERRBFLST(1)'        SET XVARIABLE           01405200
                    AIF   (N'&ERRBFLST GT 1).ZE319B                     01405300
.*                  ANOP                                                01405400
&XERRBFLST          SETC  '&ERRBFLST'           SET XVARIABLE           01405500
.ZE319B             ANOP  ,                                             01405600
.*-------------------------------------------------------------------   01405700
.***AE.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   01405800
                    AIF   (K'&ZXERRBFLST LE 0).ZE319R  NOT I/O          01405900
                    AIF   ('&XERRBFLST'(1,1) NE '(').ZE319R             01406000
&ZCGPR              SETC  '&XERRBFLST'(2,K'&XERRBFLST-2)                01406100
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE319P                 01406200
                    AIF   (K'&ZCGPR GT 2).ZE319Q                        01406300
                    AIF   ('&ZCGPR' EQ '0').ZE319Q                      01406400
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01406500
                    AIF   (T'&ZCGPR NE 'N').ZE319Q  INVALID REG NAME    01406600
.ZE319P             ANOP  ,                                             01406700
                    AIF   (T'&ZCGPR NE 'N').ZE319R  NON NUMERIC         01406800
                    AIF   ('&ZCGPR' LT '2').ZE319Q                      01406900
                    AIF   ('&ZCGPR' LE '12').ZE319R                     01407000
.ZE319Q             ANOP  ,                                             01407100
&ZMS                SETC  '"ERRBFLST='                                  01407200
&ZMS                SETC  '&ZMS.&ERRBFLST"'                             01407300
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01407400
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01407500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01407600
.ZE319R             ANOP  ,                                             01407700
.*----------------------------------------------------------------***   01407800
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01407900
                    AIF   (N'&COMPID LE 1).ZE322A  CK NUM               01408000
&ZMS                SETC  '"COMPID='                                    01408100
&ZMS                SETC  '&ZMS.&COMPID"'                               01408200
&ZMS                SETC  '&ZMS "COMPID"'                               01408300
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01408400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01408500
.ZE322A             ANOP  ,                                             01408600
.*-------------------------------------------------------------------   01408700
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01408800
                    AIF   (K'&COMPID(1) LE 0).ZE322B NO PRM             01408900
&ZXCOMPID           SETC  'INPUT'     SET IN/OUTPUT                     01409000
&XCOMPID            SETC  '&COMPID(1)'          SET XVARIABLE           01409100
                    AIF   (N'&COMPID GT 1).ZE322B                       01409200
.*                  ANOP                                                01409300
&XCOMPID            SETC  '&COMPID'   SET XVARIABLE                     01409400
.ZE322B             ANOP  ,                                             01409500
.*-------------------------------------------------------------------   01409600
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01409700
                    AIF   (K'&ZXCOMPID LE 0).ZE322R  NOT I/O            01409800
                    AIF   ('&XCOMPID'(1,1) NE '(').ZE322R               01409900
&ZCGPR              SETC  '&XCOMPID'(2,K'&XCOMPID-2)                    01410000
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE322P                 01410100
                    AIF   (K'&ZCGPR GT 2).ZE322Q                        01410200
                    AIF   ('&ZCGPR' EQ '0').ZE322Q                      01410300
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01410400
                    AIF   (T'&ZCGPR NE 'N').ZE322Q  INVALID REG NAME    01410500
.ZE322P             ANOP  ,                                             01410600
                    AIF   (T'&ZCGPR NE 'N').ZE322R  NON NUMERIC         01410700
                    AIF   ('&ZCGPR' LT '2').ZE322Q                      01410800
                    AIF   ('&ZCGPR' LE '12').ZE322R                     01410900
.ZE322Q             ANOP  ,                                             01411000
&ZMS                SETC  '"COMPID='                                    01411100
&ZMS                SETC  '&ZMS.&COMPID"'                               01411200
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01411300
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01411400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01411500
.ZE322R             ANOP  ,                                             01411600
.*----------------------------------------------------------------***   01411700
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01411800
                    AIF   (N'&COMPUSER LE 1).ZE325A  CK NUM             01411900
&ZMS                SETC  '"COMPUSER='                                  01412000
&ZMS                SETC  '&ZMS.&COMPUSER"'                             01412100
&ZMS                SETC  '&ZMS "COMPUSER"'                             01412200
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01412300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01412400
.ZE325A             ANOP  ,                                             01412500
.*-------------------------------------------------------------------   01412600
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01412700
                    AIF   (K'&COMPUSER(1) LE 0).ZE325B NO PRM           01412800
&ZXCOMPUSER         SETC  'INPUT'     SET IN/OUTPUT                     01412900
&XCOMPUSER          SETC  '&COMPUSER(1)'        SET XVARIABLE           01413000
                    AIF   (N'&COMPUSER GT 1).ZE325B                     01413100
.*                  ANOP                                                01413200
&XCOMPUSER          SETC  '&COMPUSER'           SET XVARIABLE           01413300
.ZE325B             ANOP  ,                                             01413400
.*-------------------------------------------------------------------   01413500
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01413600
                    AIF   (K'&ZXCOMPUSER LE 0).ZE325R  NOT I/O          01413700
                    AIF   ('&XCOMPUSER'(1,1) NE '(').ZE325R             01413800
&ZCGPR              SETC  '&XCOMPUSER'(2,K'&XCOMPUSER-2)                01413900
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE325P                 01414000
                    AIF   (K'&ZCGPR GT 2).ZE325Q                        01414100
                    AIF   ('&ZCGPR' EQ '0').ZE325Q                      01414200
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01414300
                    AIF   (T'&ZCGPR NE 'N').ZE325Q  INVALID REG NAME    01414400
.ZE325P             ANOP  ,                                             01414500
                    AIF   (T'&ZCGPR NE 'N').ZE325R  NON NUMERIC         01414600
                    AIF   ('&ZCGPR' LT '2').ZE325Q                      01414700
                    AIF   ('&ZCGPR' LE '12').ZE325R                     01414800
.ZE325Q             ANOP  ,                                             01414900
&ZMS                SETC  '"COMPUSER='                                  01415000
&ZMS                SETC  '&ZMS.&COMPUSER"'                             01415100
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01415200
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01415300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01415400
.ZE325R             ANOP  ,                                             01415500
.*----------------------------------------------------------------***   01415600
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01415700
                    AIF   (N'&THREAD LE 1).ZE328A  CK NUM               01415800
&ZMS                SETC  '"THREAD='                                    01415900
&ZMS                SETC  '&ZMS.&THREAD"'                               01416000
&ZMS                SETC  '&ZMS "THREAD"'                               01416100
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01416200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01416300
.ZE328A             ANOP  ,                                             01416400
.*-------------------------------------------------------------------   01416500
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01416600
                    AIF   (K'&THREAD(1) LE 0).ZE328B NO PRM             01416700
&ZXTHREAD           SETC  'INPUT'     SET IN/OUTPUT                     01416800
&XTHREAD            SETC  '&THREAD(1)'          SET XVARIABLE           01416900
                    AIF   (N'&THREAD GT 1).ZE328B                       01417000
.*                  ANOP                                                01417100
&XTHREAD            SETC  '&THREAD'   SET XVARIABLE                     01417200
.ZE328B             ANOP  ,                                             01417300
.*-------------------------------------------------------------------   01417400
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01417500
                    AIF   (K'&ZXTHREAD LE 0).ZE328R  NOT I/O            01417600
                    AIF   ('&XTHREAD'(1,1) NE '(').ZE328R               01417700
&ZCGPR              SETC  '&XTHREAD'(2,K'&XTHREAD-2)                    01417800
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE328P                 01417900
                    AIF   (K'&ZCGPR GT 2).ZE328Q                        01418000
                    AIF   ('&ZCGPR' EQ '0').ZE328Q                      01418100
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01418200
                    AIF   (T'&ZCGPR NE 'N').ZE328Q  INVALID REG NAME    01418300
.ZE328P             ANOP  ,                                             01418400
                    AIF   (T'&ZCGPR NE 'N').ZE328R  NON NUMERIC         01418500
                    AIF   ('&ZCGPR' LT '2').ZE328Q                      01418600
                    AIF   ('&ZCGPR' LE '12').ZE328R                     01418700
.ZE328Q             ANOP  ,                                             01418800
&ZMS                SETC  '"THREAD='                                    01418900
&ZMS                SETC  '&ZMS.&THREAD"'                               01419000
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01419100
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01419200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01419300
.ZE328R             ANOP  ,                                             01419400
.*----------------------------------------------------------------***   01419500
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          01419600
                    AIF   (N'&UTILRTN LE 1).ZE331A  CK NUM              01419700
&ZMS                SETC  '"UTILRTN='                                   01419800
&ZMS                SETC  '&ZMS.&UTILRTN"'                              01419900
&ZMS                SETC  '&ZMS "UTILRTN"'                              01420000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01420100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01420200
.ZE331A             ANOP  ,                                             01420300
.*-------------------------------------------------------------------   01420400
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     01420500
                    AIF   (K'&UTILRTN(1) LE 0).ZE331B NO PRM            01420600
&ZXUTILRTN          SETC  'INPUT'     SET IN/OUTPUT                     01420700
&XUTILRTN           SETC  '&UTILRTN(1)'         SET XVARIABLE           01420800
                    AIF   (N'&UTILRTN GT 1).ZE331B                      01420900
.*                  ANOP                                                01421000
&XUTILRTN           SETC  '&UTILRTN'  SET XVARIABLE                     01421100
.ZE331B             ANOP  ,                                             01421200
.*-------------------------------------------------------------------   01421300
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    01421400
                    AIF   (K'&ZXUTILRTN LE 0).ZE331R  NOT I/O           01421500
                    AIF   ('&XUTILRTN'(1,1) NE '(').ZE331R              01421600
&ZCGPR              SETC  '&XUTILRTN'(2,K'&XUTILRTN-2)                  01421700
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE331P                 01421800
                    AIF   (K'&ZCGPR GT 2).ZE331Q                        01421900
                    AIF   ('&ZCGPR' EQ '0').ZE331Q                      01422000
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01422100
                    AIF   (T'&ZCGPR NE 'N').ZE331Q  INVALID REG NAME    01422200
.ZE331P             ANOP  ,                                             01422300
                    AIF   (T'&ZCGPR NE 'N').ZE331R  NON NUMERIC         01422400
                    AIF   ('&ZCGPR' LT '2').ZE331Q                      01422500
                    AIF   ('&ZCGPR' LE '12').ZE331R                     01422600
.ZE331Q             ANOP  ,                                             01422700
&ZMS                SETC  '"UTILRTN='                                   01422800
&ZMS                SETC  '&ZMS.&UTILRTN"'                              01422900
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01423000
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01423100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01423200
.ZE331R             ANOP  ,                                             01423300
.*-------------------------------------------------------------------   01423400
.***AE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           01423500
&ZTLC               SETC 'RESOURCE_STATS'                               01423600
                    AIF   ('&REQUEST(1)' NE '&ZTLC').ZE333A             01423700
&XREQUEST           SETC  'RESOURCE_STATS'      SET KEYWORD             01423800
                    AIF   (N'&REQUEST LE 1).ZE333A  CK NUM              01423900
&ZMS                SETC  '"REQUEST='                                   01424000
&ZMS                SETC  '&ZMS.&REQUEST"'                              01424100
&ZMS                SETC  '&ZMS "REQUEST"'                              01424200
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01424300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01424400
.ZE333A             ANOP  ,                                             01424500
.*----------------------------------------------------------------***   01424600
.***AE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVAR KEY                         01424700
                    AIF   (N'&STATAREA LE 1).ZE335A  CK NUM             01424800
&ZMS                SETC  '"STATAREA='                                  01424900
&ZMS                SETC  '&ZMS.&STATAREA"'                             01425000
&ZMS                SETC  '&ZMS "STATAREA"'                             01425100
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01425200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01425300
.ZE335A             ANOP  ,                                             01425400
.*-------------------------------------------------------------------   01425500
.***AE.KXVAR04 NAME, OPT OUTPUT, KEYS -XVAR ARGUMENT                    01425600
                    AIF   (K'&STATAREA(1) LE 0).ZE335B NO PRM           01425700
&ZXSTATAREA         SETC  'OUTPUT'    SET IN/OUTPUT                     01425800
&XSTATAREA          SETC  '&STATAREA(1)'        SET XVARIABLE           01425900
                    AIF   (N'&STATAREA GT 1).ZE335B                     01426000
.*                  ANOP                                                01426100
&XSTATAREA          SETC  '&STATAREA'           SET XVARIABLE           01426200
.ZE335B             ANOP  ,                                             01426300
.*-------------------------------------------------------------------   01426400
.***AE.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   01426500
                    AIF   (K'&ZXSTATAREA LE 0).ZE335R  NOT I/O          01426600
                    AIF   ('&XSTATAREA'(1,1) NE '(').ZE335R             01426700
&ZCGPR              SETC  '&XSTATAREA'(2,K'&XSTATAREA-2)                01426800
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE335P                 01426900
                    AIF   (K'&ZCGPR GT 2).ZE335Q                        01427000
                    AIF   ('&ZCGPR' EQ '0').ZE335Q                      01427100
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01427200
                    AIF   (T'&ZCGPR NE 'N').ZE335Q  INVALID REG NAME    01427300
.ZE335P             ANOP  ,                                             01427400
                    AIF   (T'&ZCGPR NE 'N').ZE335R  NON NUMERIC         01427500
                    AIF   ('&ZCGPR' LT '2').ZE335Q                      01427600
                    AIF   ('&ZCGPR' LE '12').ZE335R                     01427700
.ZE335Q             ANOP  ,                                             01427800
&ZMS                SETC  '"STATAREA='                                  01427900
&ZMS                SETC  '&ZMS.&STATAREA"'                             01428000
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01428100
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01428200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01428300
.ZE335R             ANOP  ,                                             01428400
.*------------------------------------------------------------------    01428500
.***AE.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           01428600
.ZE337              AIF   (K'&XREQUEST GT 0).ZE337A                     01428700
                    AIF   (K'&REQUEST(1) LE 0).ZE337B                   01428800
&ZMS                SETC  '"REQUEST='                                   01428900
&ZMS                SETC  '&ZMS.&REQUEST"'                              01429000
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     01429100
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           01429200
&ZMS                SETC  '&ZMS "ASSIGN_BUFFER",'                       01429300
&ZMS                SETC  '&ZMS "CHANGE_OWNER",'                        01429400
&ZMS                SETC  '&ZMS "COPY_DATA",'                           01429500
&ZMS                SETC  '&ZMS "CREATE_POOL",'                         01429600
&ZMS                SETC  '&ZMS "DELETE_POOL",'                         01429700
&ZMS                SETC  '&ZMS "DUMP_INFO",'                           01429800
&ZMS                SETC  '&ZMS "FIX_BUFFER",'                          01429900
&ZMS                SETC  '&ZMS "FREE_BUFFER",'                         01430000
&ZMS                SETC  '&ZMS "GET_BUFFER",'                          01430100
&ZMS                SETC  '&ZMS "PAGE_BUFFER",'                         01430200
                    MNOTE 8,' &ZMS '                                    01430300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01430400
&ZMS                SETC  '(CONTINUED) '                                01430500
&ZMS                SETC  '&ZMS OR "RESOURCE_STATS".'                   01430600
                    MNOTE 8,' &ZMS '                                    01430700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01430800
                    AGO   .ZE337B                                       01430900
.*                                                                      01431000
.ZE337A             ANOP  ,                                             01431100
&ZXREQUEST          SETC  'INPUT'     SET IN/OUTPUT                     01431200
.ZE337B             ANOP  ,                                             01431300
.*----------------------------------------------------------------***   01431400
.***AE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVAR KEY                         01431500
                    AIF   (N'&RETCODE LE 1).ZE339A  CK NUM              01431600
&ZMS                SETC  '"RETCODE='                                   01431700
&ZMS                SETC  '&ZMS.&RETCODE"'                              01431800
&ZMS                SETC  '&ZMS "RETCODE"'                              01431900
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01432000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01432100
.ZE339A             ANOP  ,                                             01432200
.*-------------------------------------------------------------------   01432300
.***AE.KXVAR04 NAME, OPT OUTPUT, KEYS -XVAR ARGUMENT                    01432400
                    AIF   (K'&RETCODE(1) LE 0).ZE339B NO PRM            01432500
&ZXRETCODE          SETC  'OUTPUT'    SET IN/OUTPUT                     01432600
&XRETCODE           SETC  '&RETCODE(1)'         SET XVARIABLE           01432700
                    AIF   (N'&RETCODE GT 1).ZE339B                      01432800
.*                  ANOP                                                01432900
&XRETCODE           SETC  '&RETCODE'  SET XVARIABLE                     01433000
.ZE339B             ANOP  ,                                             01433100
.*-------------------------------------------------------------------   01433200
.***AE.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   01433300
                    AIF   (K'&ZXRETCODE LE 0).ZE339R  NOT I/O           01433400
                    AIF   ('&XRETCODE'(1,1) NE '(').ZE339R              01433500
&ZCGPR              SETC  '&XRETCODE'(2,K'&XRETCODE-2)                  01433600
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE339P                 01433700
                    AIF   (K'&ZCGPR GT 2).ZE339Q                        01433800
                    AIF   ('&ZCGPR' EQ '0').ZE339Q                      01433900
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01434000
                    AIF   (T'&ZCGPR NE 'N').ZE339Q  INVALID REG NAME    01434100
.ZE339P             ANOP  ,                                             01434200
                    AIF   (T'&ZCGPR NE 'N').ZE339R  NON NUMERIC         01434300
                    AIF   ('&ZCGPR' LT '2').ZE339Q                      01434400
                    AIF   ('&ZCGPR' LE '12').ZE339R                     01434500
.ZE339Q             ANOP  ,                                             01434600
&ZMS                SETC  '"RETCODE='                                   01434700
&ZMS                SETC  '&ZMS.&RETCODE"'                              01434800
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01434900
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01435000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01435100
.ZE339R             ANOP  ,                                             01435200
.*----------------------------------------------------------------***   01435300
.***AE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVAR KEY                         01435400
                    AIF   (N'&RSNCODE LE 1).ZE342A  CK NUM              01435500
&ZMS                SETC  '"RSNCODE='                                   01435600
&ZMS                SETC  '&ZMS.&RSNCODE"'                              01435700
&ZMS                SETC  '&ZMS "RSNCODE"'                              01435800
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           01435900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01436000
.ZE342A             ANOP  ,                                             01436100
.*-------------------------------------------------------------------   01436200
.***AE.KXVAR04 NAME, OPT OUTPUT, KEYS -XVAR ARGUMENT                    01436300
                    AIF   (K'&RSNCODE(1) LE 0).ZE342B NO PRM            01436400
&ZXRSNCODE          SETC  'OUTPUT'    SET IN/OUTPUT                     01436500
&XRSNCODE           SETC  '&RSNCODE(1)'         SET XVARIABLE           01436600
                    AIF   (N'&RSNCODE GT 1).ZE342B                      01436700
.*                  ANOP                                                01436800
&XRSNCODE           SETC  '&RSNCODE'  SET XVARIABLE                     01436900
.ZE342B             ANOP  ,                                             01437000
.*-------------------------------------------------------------------   01437100
.***AE.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   01437200
                    AIF   (K'&ZXRSNCODE LE 0).ZE342R  NOT I/O           01437300
                    AIF   ('&XRSNCODE'(1,1) NE '(').ZE342R              01437400
&ZCGPR              SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                  01437500
                    AIF   ('&ZCGPR'(1,1) NE '0').ZE342P                 01437600
                    AIF   (K'&ZCGPR GT 2).ZE342Q                        01437700
                    AIF   ('&ZCGPR' EQ '0').ZE342Q                      01437800
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 01437900
                    AIF   (T'&ZCGPR NE 'N').ZE342Q  INVALID REG NAME    01438000
.ZE342P             ANOP  ,                                             01438100
                    AIF   (T'&ZCGPR NE 'N').ZE342R  NON NUMERIC         01438200
                    AIF   ('&ZCGPR' LT '2').ZE342Q                      01438300
                    AIF   ('&ZCGPR' LE '12').ZE342R                     01438400
.ZE342Q             ANOP  ,                                             01438500
&ZMS                SETC  '"RSNCODE='                                   01438600
&ZMS                SETC  '&ZMS.&RSNCODE"'                              01438700
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     01438800
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              01438900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01439000
.ZE342R             ANOP  ,                                             01439100
.******************************************************************     01439200
.***AF.P00 CHECK STANDALONE POSITIONAL VARIABLES                        01439300
.******************************************************************     01439400
                    ACTR  10000                                         01439500
.*----------------------------------------------------------------***   01439600
.***AF.P02 EXTRA POSITIONALS                                            01439700
                    AIF   (N'&SYSLIST LE 0).ZELISTX  NO EXTRAS          01439800
&ZCVAL              SETC  ''          ERROR FIELD                       01439900
&ZAWRK              SETA  0           POSITIONAL NUMBER                 01440000
.ZELIST2            ANOP  ,                                             01440100
&ZAWRK              SETA  &ZAWRK+1    NEXT POSITIONAL                   01440200
                    AIF   (&ZAWRK GT N'&SYSLIST).ZELIST3  DONE          01440300
&ZCVAL              SETC '&ZCVAL,&SYSLIST(&ZAWRK)'  EXTRA               01440400
                    AGO   .ZELIST2                                      01440500
.*                                                                      01440600
.ZELIST3            ANOP  ,                                             01440700
&ZCVAL              SETC '&ZCVAL'(2,K'&ZCVAL-1)  STRIP COMMA            01440800
&ZMS                SETC  'POSITIONAL ARGUMENT(S),'                     01440900
&ZMS                SETC  '&ZMS "&ZCVAL"'                               01441000
&ZMS                SETC  '&ZMS CANNOT BE USED.'                        01441100
&ZMS                SETC  '&ZMS NO POSITIONAL ARGUMENTS'                01441200
                    MNOTE 8,' &ZMS ARE ALLOWED.'                        01441300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       01441400
.ZELISTX            ANOP  ,                                             01441500
&ZASYSLNDX          SETA  0                                             01441600
.*-------------------------------------------------------------------   01441700
.***AE.MF02 MF=(SLME)                                                   01441800
.ZEMFX              ANOP  ,           END OF PARTIAL SYNTAX CHECK       01441900
.*******************************************************************    01442000
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       01442100
.*******************************************************************    01442200
                    AIF   (&ZMACRET NE 0).ZLX2  ERROR DETECTED          01442300
.*******************************************************************    01442400
.***AE.01  START OF IVTCSM MACRO CODE                                   01442500
.*******************************************************************    01442600
                    LCLC  &M0M0001                 NAME                 01442700
&M0M0001            SETC  '&XLABEL'                SET NAME             01442800
                    AIF   (K'&XLABEL NE 0).XLAB2                        01442900
&M0M0001            SETC  'M00M&SYSNDX'            DEFAULT NAME         01443000
.*                                                                      01443100
.XLAB2              ANOP  ,                                             01443200
                    AIF   ('&XMF' EQ 'L').XLAB3                         01443300
&M0M0001 DS    0H                             IVTCSM-2                  01443400
.XLAB3              ANOP  ,                                             01443500
.*******************************************************************    01443600
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              01443700
.*******************************************************************    01443800
              PUSH  PRINT                                               01443900
                    AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON    01444000
                    PRINT OFF         ++ PR01                           01444100
                    AGO   .ZPRNTXX                                      01444200
.ZPRINTX            PRINT ON                                            01444300
.ZPRNTXX            ANOP  ,                                             01444400
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  01444500
         AIF ('&XREQUEST' NE '').ALLOK                                  01444600
         AIF ('&XMF' NE 'E').ALLOK                                      01444700
&ZMS     SETC  'THE'                                                    01444800
&ZMS     SETC  '&ZMS "REQUEST" KEY AND ITS ARGUMENT'                    01444900
&ZMS     SETC  '&ZMS ARE REQUIRED.'                                     01445000
&ZMS     SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                      01445100
&ZMS     SETC  '&ZMS "ASSIGN_BUFFER",'  VALID KEYWORD                   01445200
&ZMS     SETC  '&ZMS "CHANGE_OWNER",'  VALID KEYWORD                    01445300
&ZMS     SETC  '&ZMS "COPY_DATA",'   VALID KEYWORD                      01445400
&ZMS     SETC  '&ZMS "CREATE_POOL",'  VALID KEYWORD                     01445500
&ZMS     SETC  '&ZMS "DELETE_POOL",'  VALID KEYWORD                     01445600
&ZMS     SETC  '&ZMS "DUMP_INFO",'   VALID KEYWORD                      01445700
&ZMS     SETC  '&ZMS "FIX_BUFFER",'  VALID KEYWORD                      01445800
&ZMS     SETC  '&ZMS "FREE_BUFFER",'  VALID KEYWORD                     01445900
&ZMS     SETC  '&ZMS "GET_BUFFER",'  VALID KEYWORD                      01446000
         MNOTE 8,' &ZMS '                                               01446100
&ZMACRET SETA  8           SET MACRO ERROR RETURN CODE                  01446200
&ZMS     SETC  '(CONTINUED) '                                           01446300
&ZMS     SETC  '&ZMS "PAGE_BUFFER",'  VALID KEYWORD                     01446400
&ZMS     SETC  '&ZMS OR "RESOURCE_STATS".'  VALID KEYWORD               01446500
         MNOTE 8,' &ZMS '                                               01446600
&ZMACRET SETA  8           SET MACRO ERROR RETURN CODE                  01446700
.ALLOK   ANOP                                                           01446800
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  01446900
.********************************************************************   01447000
.***AL.L01 INTERNAL ARRAY TO PRODUCE FORMATTED CODE                     01447100
.********************************************************************   01447200
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       01447300
                      LCLA  &ZOPN1         INVOCATION INDEX             01447400
                      LCLC  &ZOPL(4095)    LABEL                        01447500
                      LCLC  &ZOPO(4095)    OPERATION                    01447600
                      LCLC  &ZOPV(4095)    VALUE                        01447700
                      LCLC  &ZOPD(4095)    DESCRIPTION                  01447800
.*                                                                      01447900
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     01448000
.******************************************************************     01448100
.***AL.L10 IVTCSM FMT=LIST MF=S!L PARAMETERS                            01448200
.******************************************************************     01448300
                      AIF   ('&XMF' EQ 'L').ZLMFSL2                     01448400
                      AIF   ('&XMF' NE 'S').ZLMFSLX                     01448500
&XMFCTRL              SETC  '#Z'.'&SYSNDX'.'A'                          01448600
&XMFATTR              SETC  '0D'                                        01448700
.*                                                                      01448800
&ZOPN                 SETA  &ZOPN+1                                     01448900
&ZOPL(&ZOPN)          SETC  ' '                                         01449000
&ZOPO(&ZOPN)          SETC  'CNOP'                                      01449100
&ZOPV(&ZOPN)          SETC  '4,8'                                       01449200
&ZOPN                 SETA  &ZOPN+1                                     01449300
&ZOPL(&ZOPN)          SETC  ' '                                         01449400
&ZOPO(&ZOPN)          SETC  'BRAS'                                      01449500
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL.S'                              01449600
&ZOPD(&ZOPN)          SETC  '++ IVTCSM ARG PARMS'                       01449700
.*                                                                      01449800
&ZOPN                 SETA  &ZOPN+1                                     01449900
&ZOPL(&ZOPN)          SETC  ' '                                         01450000
&ZOPO(&ZOPN)          SETC  'SPACE'                                     01450100
&ZOPV(&ZOPN)          SETC  '1'                                         01450200
&ZOPD(&ZOPN)          SETC  ' '                                         01450300
.*                                                                      01450400
.ZLMFSL2              ANOP  ,                                           01450500
.*-------------------------------------------------------------------   01450600
.***AM.L00  IVTCSM FMT=LIST name                                        01450700
                      AIF   ('&XMF' NE 'L').ZLMFSL2M                    01450800
&ZOPN                 SETA &ZOPN+1                                      01450900
&ZOPL(&ZOPN)          SETC '&M0M0001'                                   01451000
&ZOPO(&ZOPN)          SETC 'EQU'                                        01451100
&ZOPV(&ZOPN)          SETC '&XMFCTRL'                                   01451200
&ZOPD(&ZOPN)          SETC '++ IVTCSM NAME'                             01451300
.ZLMFSL2M             ANOP  ,                                           01451400
.*-------------------------------------------------------------------   01451500
.***AM.L01  IVTCSM FMT=LIST PARAMETERS                                  01451600
&ZOPN                 SETA &ZOPN+1                                      01451700
&ZOPL(&ZOPN)          SETC '&XMFCTRL'                                   01451800
&ZOPO(&ZOPN)          SETC 'DS'                                         01451900
&ZOPV(&ZOPN)          SETC '&XMFATTR'                                   01452000
&ZOPD(&ZOPN)          SETC '++ IVTCSM PARM LIST'                        01452100
.*-------------------------------------------------------------------   01452200
.***AM.L02 XVERSION XL1                                                 01452300
&ZOPN                 SETA &ZOPN+1                                      01452400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XVERSION'                         01452500
&ZOPO(&ZOPN)          SETC 'DS'                                         01452600
&ZOPV(&ZOPN)          SETC 'XL1'                                        01452700
&ZOPD(&ZOPN)          SETC '++ INPUT XVERSION'                          01452800
.*-------------------------------------------------------------------   01452900
.***AM.L05 XBUFSOURC XL1                                                01453000
&ZOPN                 SETA &ZOPN+1                                      01453100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XBUFSOURC'                        01453200
&ZOPO(&ZOPN)          SETC 'DS'                                         01453300
&ZOPV(&ZOPN)          SETC 'XL1'                                        01453400
&ZOPD(&ZOPN)          SETC '++ &ZXBUFSOURC XBUFSOURC'                   01453500
.*                                                                      01453600
&ZOPN                 SETA  &ZOPN+1                                     01453700
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XBUFSOURC_ECSA'                  01453800
&ZOPO(&ZOPN)          SETC  'EQU'                                       01453900
&ZOPV(&ZOPN)          SETC  '128'                                       01454000
&ZOPD(&ZOPN)          SETC  '++ XBUFSOURC.'                             01454100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ECSA'                         01454200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01454300
.*                                                                      01454400
&ZOPN                 SETA  &ZOPN+1                                     01454500
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XBUFSOURC_DSPACE'                01454600
&ZOPO(&ZOPN)          SETC  'EQU'                                       01454700
&ZOPV(&ZOPN)          SETC  '64'                                        01454800
&ZOPD(&ZOPN)          SETC  '++ XBUFSOURC.'                             01454900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).DSPACE'                       01455000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01455100
.*                                                                      01455200
&ZOPN                 SETA  &ZOPN+1                                     01455300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XBUFSOURC_HVCOMM'                01455400
&ZOPO(&ZOPN)          SETC  'EQU'                                       01455500
&ZOPV(&ZOPN)          SETC  '8'                                         01455600
&ZOPD(&ZOPN)          SETC  '++ XBUFSOURC.'                             01455700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).HVCOMM'                       01455800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01455900
.*-------------------------------------------------------------------   01456000
.***AM.L05 XBUFTYPE XL1                                                 01456100
&ZOPN                 SETA &ZOPN+1                                      01456200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XBUFTYPE'                         01456300
&ZOPO(&ZOPN)          SETC 'DS'                                         01456400
&ZOPV(&ZOPN)          SETC 'XL1'                                        01456500
&ZOPD(&ZOPN)          SETC '++ &ZXBUFTYPE XBUFTYPE'                     01456600
.*                                                                      01456700
&ZOPN                 SETA  &ZOPN+1                                     01456800
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XBUFTYPE_SAME'                   01456900
&ZOPO(&ZOPN)          SETC  'EQU'                                       01457000
&ZOPV(&ZOPN)          SETC  '0'                                         01457100
&ZOPD(&ZOPN)          SETC  '++ XBUFTYPE.'                              01457200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).SAME'                         01457300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01457400
.*                                                                      01457500
&ZOPN                 SETA  &ZOPN+1                                     01457600
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XBUFTYPE_FIXED'                  01457700
&ZOPO(&ZOPN)          SETC  'EQU'                                       01457800
&ZOPV(&ZOPN)          SETC  '128'                                       01457900
&ZOPD(&ZOPN)          SETC  '++ XBUFTYPE.'                              01458000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).FIXED'                        01458100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01458200
.*                                                                      01458300
&ZOPN                 SETA  &ZOPN+1                                     01458400
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XBUFTYPE_PAGEABLE'               01458500
&ZOPO(&ZOPN)          SETC  'EQU'                                       01458600
&ZOPV(&ZOPN)          SETC  '64'                                        01458700
&ZOPD(&ZOPN)          SETC  '++ XBUFTYPE.'                              01458800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).PAGEABLE'                     01458900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01459000
.*                                                                      01459100
&ZOPN                 SETA  &ZOPN+1                                     01459200
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XBUFTYPE_PAGEELIG'               01459300
&ZOPO(&ZOPN)          SETC  'EQU'                                       01459400
&ZOPV(&ZOPN)          SETC  '32'                                        01459500
&ZOPD(&ZOPN)          SETC  '++ XBUFTYPE.'                              01459600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).PAGEELIG'                     01459700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01459800
.*-------------------------------------------------------------------   01459900
.***AM.L05 XCLEAR XL1                                                   01460000
&ZOPN                 SETA &ZOPN+1                                      01460100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCLEAR'                           01460200
&ZOPO(&ZOPN)          SETC 'DS'                                         01460300
&ZOPV(&ZOPN)          SETC 'XL1'                                        01460400
&ZOPD(&ZOPN)          SETC '++ &ZXCLEAR XCLEAR'                         01460500
.*                                                                      01460600
&ZOPN                 SETA  &ZOPN+1                                     01460700
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XCLEAR_NO'                       01460800
&ZOPO(&ZOPN)          SETC  'EQU'                                       01460900
&ZOPV(&ZOPN)          SETC  '0'                                         01461000
&ZOPD(&ZOPN)          SETC  '++ XCLEAR.'                                01461100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).NO'                           01461200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01461300
.*                                                                      01461400
&ZOPN                 SETA  &ZOPN+1                                     01461500
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XCLEAR_YES'                      01461600
&ZOPO(&ZOPN)          SETC  'EQU'                                       01461700
&ZOPV(&ZOPN)          SETC  '128'                                       01461800
&ZOPD(&ZOPN)          SETC  '++ XCLEAR.'                                01461900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).YES'                          01462000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01462100
.*-------------------------------------------------------------------   01462200
.***AM.L05 XWAIT XL1                                                    01462300
&ZOPN                 SETA &ZOPN+1                                      01462400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XWAIT'                            01462500
&ZOPO(&ZOPN)          SETC 'DS'                                         01462600
&ZOPV(&ZOPN)          SETC 'XL1'                                        01462700
&ZOPD(&ZOPN)          SETC '++ &ZXWAIT XWAIT'                           01462800
.*                                                                      01462900
&ZOPN                 SETA  &ZOPN+1                                     01463000
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XWAIT_NO'                        01463100
&ZOPO(&ZOPN)          SETC  'EQU'                                       01463200
&ZOPV(&ZOPN)          SETC  '0'                                         01463300
&ZOPD(&ZOPN)          SETC  '++ XWAIT.'                                 01463400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).NO'                           01463500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01463600
.*                                                                      01463700
&ZOPN                 SETA  &ZOPN+1                                     01463800
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XWAIT_YES'                       01463900
&ZOPO(&ZOPN)          SETC  'EQU'                                       01464000
&ZOPV(&ZOPN)          SETC  '128'                                       01464100
&ZOPD(&ZOPN)          SETC  '++ XWAIT.'                                 01464200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).YES'                          01464300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01464400
.*                                                                      01464500
&ZOPN                 SETA  &ZOPN+1                                     01464600
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XWAIT_EXPAND'                    01464700
&ZOPO(&ZOPN)          SETC  'EQU'                                       01464800
&ZOPV(&ZOPN)          SETC  '64'                                        01464900
&ZOPD(&ZOPN)          SETC  '++ XWAIT.'                                 01465000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).EXPAND'                       01465100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01465200
.*-------------------------------------------------------------------   01465300
.***AM.L05 XFREETO XL1                                                  01465400
&ZOPN                 SETA &ZOPN+1                                      01465500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XFREETO'                          01465600
&ZOPO(&ZOPN)          SETC 'DS'                                         01465700
&ZOPV(&ZOPN)          SETC 'XL1'                                        01465800
&ZOPD(&ZOPN)          SETC '++ &ZXFREETO XFREETO'                       01465900
.*                                                                      01466000
&ZOPN                 SETA  &ZOPN+1                                     01466100
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XFREETO_USER'                    01466200
&ZOPO(&ZOPN)          SETC  'EQU'                                       01466300
&ZOPV(&ZOPN)          SETC  '128'                                       01466400
&ZOPD(&ZOPN)          SETC  '++ XFREETO.'                               01466500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).USER'                         01466600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01466700
.*                                                                      01466800
&ZOPN                 SETA  &ZOPN+1                                     01466900
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XFREETO_CSM'                     01467000
&ZOPO(&ZOPN)          SETC  'EQU'                                       01467100
&ZOPV(&ZOPN)          SETC  '64'                                        01467200
&ZOPD(&ZOPN)          SETC  '++ XFREETO.'                               01467300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).CSM'                          01467400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01467500
.*-------------------------------------------------------------------   01467600
.***AM.L09  XOWNERID XL2                                                01467700
&ZOPN                 SETA &ZOPN+1                                      01467800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XOWNERID'                         01467900
&ZOPO(&ZOPN)          SETC 'DS'                                         01468000
&ZOPV(&ZOPN)          SETC 'XL2'                                        01468100
&ZOPD(&ZOPN)          SETC '++ &ZXOWNERID '                             01468200
.*-------------------------------------------------------------------   01468300
.***AM.L05 XREQUEST F                                                   01468400
&ZOPN                 SETA &ZOPN+1                                      01468500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XREQUEST'                         01468600
&ZOPO(&ZOPN)          SETC 'DS'                                         01468700
&ZOPV(&ZOPN)          SETC 'F'                                          01468800
&ZOPD(&ZOPN)          SETC '++ &ZXREQUEST XREQUEST'                     01468900
.*                                                                      01469000
&ZOPN                 SETA  &ZOPN+1                                     01469100
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_CREATE_POOL'            01469200
&ZOPO(&ZOPN)          SETC  'EQU'                                       01469300
&ZOPV(&ZOPN)          SETC  '0'                                         01469400
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              01469500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).CREATE_POOL'                  01469600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01469700
.*                                                                      01469800
&ZOPN                 SETA  &ZOPN+1                                     01469900
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_DELETE_POOL'            01470000
&ZOPO(&ZOPN)          SETC  'EQU'                                       01470100
&ZOPV(&ZOPN)          SETC  '1'                                         01470200
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              01470300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).DELETE_POOL'                  01470400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01470500
.*                                                                      01470600
&ZOPN                 SETA  &ZOPN+1                                     01470700
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_GET_BUFFER'             01470800
&ZOPO(&ZOPN)          SETC  'EQU'                                       01470900
&ZOPV(&ZOPN)          SETC  '2'                                         01471000
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              01471100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).GET_BUFFER'                   01471200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01471300
.*                                                                      01471400
&ZOPN                 SETA  &ZOPN+1                                     01471500
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_FREE_BUFFER'            01471600
&ZOPO(&ZOPN)          SETC  'EQU'                                       01471700
&ZOPV(&ZOPN)          SETC  '3'                                         01471800
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              01471900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).FREE_BUFFER'                  01472000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01472100
.*                                                                      01472200
&ZOPN                 SETA  &ZOPN+1                                     01472300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_ASSIGN_BUFFER'          01472400
&ZOPO(&ZOPN)          SETC  'EQU'                                       01472500
&ZOPV(&ZOPN)          SETC  '4'                                         01472600
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              01472700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ASSIGN_BUFFER'                01472800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01472900
.*                                                                      01473000
&ZOPN                 SETA  &ZOPN+1                                     01473100
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_DUMP_INFO'              01473200
&ZOPO(&ZOPN)          SETC  'EQU'                                       01473300
&ZOPV(&ZOPN)          SETC  '5'                                         01473400
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              01473500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).DUMP_INFO'                    01473600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01473700
.*                                                                      01473800
&ZOPN                 SETA  &ZOPN+1                                     01473900
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_FIX_BUFFER'             01474000
&ZOPO(&ZOPN)          SETC  'EQU'                                       01474100
&ZOPV(&ZOPN)          SETC  '6'                                         01474200
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              01474300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).FIX_BUFFER'                   01474400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01474500
.*                                                                      01474600
&ZOPN                 SETA  &ZOPN+1                                     01474700
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_PAGE_BUFFER'            01474800
&ZOPO(&ZOPN)          SETC  'EQU'                                       01474900
&ZOPV(&ZOPN)          SETC  '7'                                         01475000
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              01475100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).PAGE_BUFFER'                  01475200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01475300
.*                                                                      01475400
&ZOPN                 SETA  &ZOPN+1                                     01475500
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_RESOURCE_STATS'         01475600
&ZOPO(&ZOPN)          SETC  'EQU'                                       01475700
&ZOPV(&ZOPN)          SETC  '8'                                         01475800
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              01475900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).RESOURCE_STATS'               01476000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01476100
.*                                                                      01476200
&ZOPN                 SETA  &ZOPN+1                                     01476300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_COPY_DATA'              01476400
&ZOPO(&ZOPN)          SETC  'EQU'                                       01476500
&ZOPV(&ZOPN)          SETC  '9'                                         01476600
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              01476700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).COPY_DATA'                    01476800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01476900
.*                                                                      01477000
&ZOPN                 SETA  &ZOPN+1                                     01477100
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_CHANGE_OWNER'           01477200
&ZOPO(&ZOPN)          SETC  'EQU'                                       01477300
&ZOPV(&ZOPN)          SETC  '100'                                       01477400
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              01477500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).CHANGE_OWNER'                 01477600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01477700
.*-------------------------------------------------------------------   01477800
.***AM.L09  XBUFSIZE F                                                  01477900
&ZOPN                 SETA &ZOPN+1                                      01478000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XBUFSIZE'                         01478100
&ZOPO(&ZOPN)          SETC 'DS'                                         01478200
&ZOPV(&ZOPN)          SETC 'F'                                          01478300
&ZOPD(&ZOPN)          SETC '++ &ZXBUFSIZE '                             01478400
.*-------------------------------------------------------------------   01478500
.***AM.L09  XINITBUF F                                                  01478600
&ZOPN                 SETA &ZOPN+1                                      01478700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XINITBUF'                         01478800
&ZOPO(&ZOPN)          SETC 'DS'                                         01478900
&ZOPV(&ZOPN)          SETC 'F'                                          01479000
&ZOPD(&ZOPN)          SETC '++ &ZXINITBUF '                             01479100
.*-------------------------------------------------------------------   01479200
.***AM.L09  XMINFREE F                                                  01479300
&ZOPN                 SETA &ZOPN+1                                      01479400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XMINFREE'                         01479500
&ZOPO(&ZOPN)          SETC 'DS'                                         01479600
&ZOPV(&ZOPN)          SETC 'F'                                          01479700
&ZOPD(&ZOPN)          SETC '++ &ZXMINFREE '                             01479800
.*-------------------------------------------------------------------   01479900
.***AM.L09  XEXPBUF F                                                   01480000
&ZOPN                 SETA &ZOPN+1                                      01480100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XEXPBUF'                          01480200
&ZOPO(&ZOPN)          SETC 'DS'                                         01480300
&ZOPV(&ZOPN)          SETC 'F'                                          01480400
&ZOPD(&ZOPN)          SETC '++ &ZXEXPBUF '                              01480500
.*-------------------------------------------------------------------   01480600
.***AM.L09  XBUFNUM F                                                   01480700
&ZOPN                 SETA &ZOPN+1                                      01480800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XBUFNUM'                          01480900
&ZOPO(&ZOPN)          SETC 'DS'                                         01481000
&ZOPV(&ZOPN)          SETC 'F'                                          01481100
&ZOPD(&ZOPN)          SETC '++ &ZXBUFNUM '                              01481200
.*-------------------------------------------------------------------   01481300
.***AM.L09  XBUFLIST A                                                  01481400
&ZOPN                 SETA &ZOPN+1                                      01481500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XBUFLIST'                         01481600
&ZOPO(&ZOPN)          SETC 'DS'                                         01481700
&ZOPV(&ZOPN)          SETC 'A'                                          01481800
&ZOPD(&ZOPN)          SETC '++ &ZXBUFLIST '                             01481900
.*-------------------------------------------------------------------   01482000
.***AM.L09  XERRBFLST F                                                 01482100
&ZOPN                 SETA &ZOPN+1                                      01482200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XERRBFLST'                        01482300
&ZOPO(&ZOPN)          SETC 'DS'                                         01482400
&ZOPV(&ZOPN)          SETC 'F'                                          01482500
&ZOPD(&ZOPN)          SETC '++ &ZXERRBFLST '                            01482600
.*-------------------------------------------------------------------   01482700
.***AM.L09  XTASKID A                                                   01482800
&ZOPN                 SETA &ZOPN+1                                      01482900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XTASKID'                          01483000
&ZOPO(&ZOPN)          SETC 'DS'                                         01483100
&ZOPV(&ZOPN)          SETC 'A'                                          01483200
&ZOPD(&ZOPN)          SETC '++ &ZXTASKID '                              01483300
.*-------------------------------------------------------------------   01483400
.***AM.L09  XFREERTN A                                                  01483500
&ZOPN                 SETA &ZOPN+1                                      01483600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XFREERTN'                         01483700
&ZOPO(&ZOPN)          SETC 'DS'                                         01483800
&ZOPV(&ZOPN)          SETC 'A'                                          01483900
&ZOPD(&ZOPN)          SETC '++ &ZXFREERTN '                             01484000
.*-------------------------------------------------------------------   01484100
.***AM.L09  XGAP F                                                      01484200
&ZOPN                 SETA &ZOPN+1                                      01484300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XGAP'                             01484400
&ZOPO(&ZOPN)          SETC 'DS'                                         01484500
&ZOPV(&ZOPN)          SETC 'F'                                          01484600
&ZOPD(&ZOPN)          SETC '++ &ZXGAP '                                 01484700
.*-------------------------------------------------------------------   01484800
.***AM.L09  XSRCGAP F                                                   01484900
&ZOPN                 SETA &ZOPN+1                                      01485000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSRCGAP'                          01485100
&ZOPO(&ZOPN)          SETC 'DS'                                         01485200
&ZOPV(&ZOPN)          SETC 'F'                                          01485300
&ZOPD(&ZOPN)          SETC '++ &ZXSRCGAP '                              01485400
.*-------------------------------------------------------------------   01485500
.***AM.L09  XTARGGAP F                                                  01485600
&ZOPN                 SETA &ZOPN+1                                      01485700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XTARGGAP'                         01485800
&ZOPO(&ZOPN)          SETC 'DS'                                         01485900
&ZOPV(&ZOPN)          SETC 'F'                                          01486000
&ZOPD(&ZOPN)          SETC '++ &ZXTARGGAP '                             01486100
.*-------------------------------------------------------------------   01486200
.***AM.L09  XSRCNUM F                                                   01486300
&ZOPN                 SETA &ZOPN+1                                      01486400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSRCNUM'                          01486500
&ZOPO(&ZOPN)          SETC 'DS'                                         01486600
&ZOPV(&ZOPN)          SETC 'F'                                          01486700
&ZOPD(&ZOPN)          SETC '++ &ZXSRCNUM '                              01486800
.*-------------------------------------------------------------------   01486900
.***AM.L09  XTARGNUM F                                                  01487000
&ZOPN                 SETA &ZOPN+1                                      01487100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XTARGNUM'                         01487200
&ZOPO(&ZOPN)          SETC 'DS'                                         01487300
&ZOPV(&ZOPN)          SETC 'F'                                          01487400
&ZOPD(&ZOPN)          SETC '++ &ZXTARGNUM '                             01487500
.*-------------------------------------------------------------------   01487600
.***AM.L09  XSRCLIST A                                                  01487700
&ZOPN                 SETA &ZOPN+1                                      01487800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSRCLIST'                         01487900
&ZOPO(&ZOPN)          SETC 'DS'                                         01488000
&ZOPV(&ZOPN)          SETC 'A'                                          01488100
&ZOPD(&ZOPN)          SETC '++ &ZXSRCLIST '                             01488200
.*-------------------------------------------------------------------   01488300
.***AM.L09  XTARGLIST A                                                 01488400
&ZOPN                 SETA &ZOPN+1                                      01488500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XTARGLIST'                        01488600
&ZOPO(&ZOPN)          SETC 'DS'                                         01488700
&ZOPV(&ZOPN)          SETC 'A'                                          01488800
&ZOPD(&ZOPN)          SETC '++ &ZXTARGLIST '                            01488900
.*-------------------------------------------------------------------   01489000
.***AM.L09  XSRCERRL F                                                  01489100
&ZOPN                 SETA &ZOPN+1                                      01489200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSRCERRL'                         01489300
&ZOPO(&ZOPN)          SETC 'DS'                                         01489400
&ZOPV(&ZOPN)          SETC 'F'                                          01489500
&ZOPD(&ZOPN)          SETC '++ &ZXSRCERRL '                             01489600
.*-------------------------------------------------------------------   01489700
.***AM.L09  XTARGERRL F                                                 01489800
&ZOPN                 SETA &ZOPN+1                                      01489900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XTARGERRL'                        01490000
&ZOPO(&ZOPN)          SETC 'DS'                                         01490100
&ZOPV(&ZOPN)          SETC 'F'                                          01490200
&ZOPD(&ZOPN)          SETC '++ &ZXTARGERRL '                            01490300
.*-------------------------------------------------------------------   01490400
.***AM.L09  XUTILRTN F                                                  01490500
&ZOPN                 SETA &ZOPN+1                                      01490600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XUTILRTN'                         01490700
&ZOPO(&ZOPN)          SETC 'DS'                                         01490800
&ZOPV(&ZOPN)          SETC 'F'                                          01490900
&ZOPD(&ZOPN)          SETC '++ &ZXUTILRTN '                             01491000
.*-------------------------------------------------------------------   01491100
.***AM.L09  XDS_INFO A                                                  01491200
&ZOPN                 SETA &ZOPN+1                                      01491300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XDS_INFO'                         01491400
&ZOPO(&ZOPN)          SETC 'DS'                                         01491500
&ZOPV(&ZOPN)          SETC 'A'                                          01491600
&ZOPD(&ZOPN)          SETC '++ &ZXDS_INFO '                             01491700
.*-------------------------------------------------------------------   01491800
.***AM.L09  XSTATAREA A                                                 01491900
&ZOPN                 SETA &ZOPN+1                                      01492000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSTATAREA'                        01492100
&ZOPO(&ZOPN)          SETC 'DS'                                         01492200
&ZOPV(&ZOPN)          SETC 'A'                                          01492300
&ZOPD(&ZOPN)          SETC '++ &ZXSTATAREA '                            01492400
.*-------------------------------------------------------------------   01492500
.***AM.L09  XTHREAD CL4                                                 01492600
&ZOPN                 SETA &ZOPN+1                                      01492700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XTHREAD'                          01492800
&ZOPO(&ZOPN)          SETC 'DS'                                         01492900
&ZOPV(&ZOPN)          SETC 'CL4'                                        01493000
&ZOPD(&ZOPN)          SETC '++ &ZXTHREAD '                              01493100
.*-------------------------------------------------------------------   01493200
.***AM.L09  XPADCHAR CL1                                                01493300
&ZOPN                 SETA &ZOPN+1                                      01493400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPADCHAR'                         01493500
&ZOPO(&ZOPN)          SETC 'DS'                                         01493600
&ZOPV(&ZOPN)          SETC 'CL1'                                        01493700
&ZOPD(&ZOPN)          SETC '++ &ZXPADCHAR '                             01493800
.*-------------------------------------------------------------------   01493900
.***AM.L05 XPAD XL1                                                     01494000
&ZOPN                 SETA &ZOPN+1                                      01494100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPAD'                             01494200
&ZOPO(&ZOPN)          SETC 'DS'                                         01494300
&ZOPV(&ZOPN)          SETC 'XL1'                                        01494400
&ZOPD(&ZOPN)          SETC '++ &ZXPAD XPAD'                             01494500
.*                                                                      01494600
&ZOPN                 SETA  &ZOPN+1                                     01494700
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XPAD_NO'                         01494800
&ZOPO(&ZOPN)          SETC  'EQU'                                       01494900
&ZOPV(&ZOPN)          SETC  '0'                                         01495000
&ZOPD(&ZOPN)          SETC  '++ XPAD.'                                  01495100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).NO'                           01495200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01495300
.*                                                                      01495400
&ZOPN                 SETA  &ZOPN+1                                     01495500
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XPAD_YES'                        01495600
&ZOPO(&ZOPN)          SETC  'EQU'                                       01495700
&ZOPV(&ZOPN)          SETC  '128'                                       01495800
&ZOPD(&ZOPN)          SETC  '++ XPAD.'                                  01495900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).YES'                          01496000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01496100
.*-------------------------------------------------------------------   01496200
.***AM.L09  XPOOLTOKN CL10                                              01496300
&ZOPN                 SETA &ZOPN+1                                      01496400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPOOLTOKN'                        01496500
&ZOPO(&ZOPN)          SETC 'DS'                                         01496600
&ZOPV(&ZOPN)          SETC 'CL10'                                       01496700
&ZOPD(&ZOPN)          SETC '++ &ZXPOOLTOKN '                            01496800
.*-------------------------------------------------------------------   01496900
.***AM.L05 XSKIPBUF XL1                                                 01497000
&ZOPN                 SETA &ZOPN+1                                      01497100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSKIPBUF'                         01497200
&ZOPO(&ZOPN)          SETC 'DS'                                         01497300
&ZOPV(&ZOPN)          SETC 'XL1'                                        01497400
&ZOPD(&ZOPN)          SETC '++ &ZXSKIPBUF XSKIPBUF'                     01497500
.*                                                                      01497600
&ZOPN                 SETA  &ZOPN+1                                     01497700
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XSKIPBUF_NO'                     01497800
&ZOPO(&ZOPN)          SETC  'EQU'                                       01497900
&ZOPV(&ZOPN)          SETC  '0'                                         01498000
&ZOPD(&ZOPN)          SETC  '++ XSKIPBUF.'                              01498100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).NO'                           01498200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01498300
.*                                                                      01498400
&ZOPN                 SETA  &ZOPN+1                                     01498500
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XSKIPBUF_YES'                    01498600
&ZOPO(&ZOPN)          SETC  'EQU'                                       01498700
&ZOPV(&ZOPN)          SETC  '128'                                       01498800
&ZOPD(&ZOPN)          SETC  '++ XSKIPBUF.'                              01498900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).YES'                          01499000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01499100
.*-------------------------------------------------------------------   01499200
.***AM.L05 XCSMUSER XL1                                                 01499300
&ZOPN                 SETA &ZOPN+1                                      01499400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCSMUSER'                         01499500
&ZOPO(&ZOPN)          SETC 'DS'                                         01499600
&ZOPV(&ZOPN)          SETC 'XL1'                                        01499700
&ZOPD(&ZOPN)          SETC '++ &ZXCSMUSER XCSMUSER'                     01499800
.*                                                                      01499900
&ZOPN                 SETA  &ZOPN+1                                     01500000
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XCSMUSER_NO'                     01500100
&ZOPO(&ZOPN)          SETC  'EQU'                                       01500200
&ZOPV(&ZOPN)          SETC  '0'                                         01500300
&ZOPD(&ZOPN)          SETC  '++ XCSMUSER.'                              01500400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).NO'                           01500500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01500600
.*                                                                      01500700
&ZOPN                 SETA  &ZOPN+1                                     01500800
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XCSMUSER_YES'                    01500900
&ZOPO(&ZOPN)          SETC  'EQU'                                       01501000
&ZOPV(&ZOPN)          SETC  '128'                                       01501100
&ZOPD(&ZOPN)          SETC  '++ XCSMUSER.'                              01501200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).YES'                          01501300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01501400
.*-------------------------------------------------------------------   01501500
.***AM.L03 XFLAGS1 BL.8                                                 01501600
&ZOPN                 SETA &ZOPN+1                                      01501700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XFLAGS1'                          01501800
&ZOPO(&ZOPN)          SETC 'DS'                                         01501900
&ZOPV(&ZOPN)          SETC 'BL.8'                                       01502000
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'                             01502100
.*                                                                      01502200
&ZOPN                 SETA  &ZOPN+1                                     01502300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XBACK64'                         01502400
&ZOPO(&ZOPN)          SETC  'EQU'                                       01502500
&ZOPV(&ZOPN)          SETC  'B''10000000'''                             01502600
&ZOPD(&ZOPN)          SETC  '++ XBACK.'                                 01502700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).64'                           01502800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      01502900
.*-------------------------------------------------------------------   01503000
.***AM.L09  XRSV001 CL1                                                 01503100
&ZOPN                 SETA &ZOPN+1                                      01503200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV001'                          01503300
&ZOPO(&ZOPN)          SETC 'DS'                                         01503400
&ZOPV(&ZOPN)          SETC 'CL1'                                        01503500
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               01503600
.*-------------------------------------------------------------------   01503700
.***AM.MLM2 SAVED LOCATION COUNTER                                      01503800
                      AIF  (&XPLISTVER GE 1).ZL70LA                     01503900
                      AIF  ('&ZENDBASEPL' NE '').ZL70LA                 01504000
&ZENDBASEPL           SETC 'YES'                                        01504100
&ZOPN                 SETA &ZOPN+1                                      01504200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._PL_END'                           01504300
&ZOPO(&ZOPN)          SETC 'EQU'                                        01504400
&ZOPV(&ZOPN)          SETC '*'                                          01504500
&ZOPD(&ZOPN)          SETC '++ END OF BASE PLIST'                       01504600
.ZL70LA               ANOP  ,                                           01504700
.*-------------------------------------------------------------------   01504800
.***AM.LVER1                                                            01504900
                      AIF  (&XPLISTVER LT 1).ZL70L                      01505000
.*-------------------------------------------------------------------   01505100
.*-------------------------------------------------------------------   01505200
.***AM.L09  XCOMPID XL1                                                 01505300
&ZOPN                 SETA &ZOPN+1                                      01505400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCOMPID'                          01505500
&ZOPO(&ZOPN)          SETC 'DS'                                         01505600
&ZOPV(&ZOPN)          SETC 'XL1'                                        01505700
&ZOPD(&ZOPN)          SETC '++ &ZXCOMPID '                              01505800
.*-------------------------------------------------------------------   01505900
.***AM.LVER2                                                            01506000
.ZL70L                ANOP  ,                                           01506100
.*-------------------------------------------------------------------   01506200
.*-------------------------------------------------------------------   01506300
.***AM.LVER1                                                            01506400
                      AIF  (&XPLISTVER LT 1).ZL71L                      01506500
.*-------------------------------------------------------------------   01506600
.*-------------------------------------------------------------------   01506700
.***AM.L09  XRSV002 CL3                                                 01506800
&ZOPN                 SETA &ZOPN+1                                      01506900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV002'                          01507000
&ZOPO(&ZOPN)          SETC 'DS'                                         01507100
&ZOPV(&ZOPN)          SETC 'CL3'                                        01507200
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               01507300
.*-------------------------------------------------------------------   01507400
.***AM.LVER2                                                            01507500
.ZL71L                ANOP  ,                                           01507600
.*-------------------------------------------------------------------   01507700
.*-------------------------------------------------------------------   01507800
.***AM.LVER1                                                            01507900
                      AIF  (&XPLISTVER LT 1).ZL72L                      01508000
.*-------------------------------------------------------------------   01508100
.*-------------------------------------------------------------------   01508200
.***AM.L09  XCOMPUSER CL4                                               01508300
&ZOPN                 SETA &ZOPN+1                                      01508400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCOMPUSER'                        01508500
&ZOPO(&ZOPN)          SETC 'DS'                                         01508600
&ZOPV(&ZOPN)          SETC 'CL4'                                        01508700
&ZOPD(&ZOPN)          SETC '++ &ZXCOMPUSER '                            01508800
.*-------------------------------------------------------------------   01508900
.***AM.LVER2                                                            01509000
.ZL72L                ANOP  ,                                           01509100
.*-------------------------------------------------------------------   01509200
.*-------------------------------------------------------------------   01509300
.***AM.LVER1                                                            01509400
                      AIF  (&XPLISTVER LT 1).ZL73L                      01509500
.*-------------------------------------------------------------------   01509600
.*-------------------------------------------------------------------   01509700
.***AM.L09  XRSV003 CL8                                                 01509800
&ZOPN                 SETA &ZOPN+1                                      01509900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV003'                          01510000
&ZOPO(&ZOPN)          SETC 'DS'                                         01510100
&ZOPV(&ZOPN)          SETC 'CL8'                                        01510200
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               01510300
.*-------------------------------------------------------------------   01510400
.***AM.LVER2                                                            01510500
.ZL73L                ANOP  ,                                           01510600
.*-------------------------------------------------------------------   01510700
.*-------------------------------------------------------------------   01510800
.***AM.MLM2 SAVED LOCATION COUNTER                                      01510900
                      AIF  (&XPLISTVER GE 2).ZL74LA                     01511000
                      AIF  ('&ZENDBASEPL' NE '').ZL74LA                 01511100
&ZENDBASEPL           SETC 'YES'                                        01511200
&ZOPN                 SETA &ZOPN+1                                      01511300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._PL_END'                           01511400
&ZOPO(&ZOPN)          SETC 'EQU'                                        01511500
&ZOPV(&ZOPN)          SETC '*'                                          01511600
&ZOPD(&ZOPN)          SETC '++ END OF BASE PLIST'                       01511700
.ZL74LA               ANOP  ,                                           01511800
.*-------------------------------------------------------------------   01511900
.***AM.LVER1                                                            01512000
                      AIF  (&XPLISTVER LT 2).ZL74L                      01512100
.*-------------------------------------------------------------------   01512200
.*-------------------------------------------------------------------   01512300
.***AM.L09  XRSV004 CL4                                                 01512400
&ZOPN                 SETA &ZOPN+1                                      01512500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV004'                          01512600
&ZOPO(&ZOPN)          SETC 'DS'                                         01512700
&ZOPV(&ZOPN)          SETC 'CL4'                                        01512800
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               01512900
.*-------------------------------------------------------------------   01513000
.***AM.LVER2                                                            01513100
.ZL74L                ANOP  ,                                           01513200
.*-------------------------------------------------------------------   01513300
.*-------------------------------------------------------------------   01513400
.***AM.LVER1                                                            01513500
                      AIF  (&XPLISTVER LT 2).ZL75L                      01513600
.*-------------------------------------------------------------------   01513700
.*-------------------------------------------------------------------   01513800
.***AM.L09 ADDR64 XBUFLST64 AD                                          01513900
&ZOPN                 SETA &ZOPN+1                                      01514000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XBUFLST64_ADDR64'                 01514100
&ZOPO(&ZOPN)          SETC 'DS'                                         01514200
&ZOPV(&ZOPN)          SETC 'AD'                                         01514300
&ZOPD(&ZOPN)          SETC '++ &ZXBUFLST64 ADDR64'                      01514400
.*-------------------------------------------------------------------   01514500
.***AM.LVER2                                                            01514600
.ZL75L                ANOP  ,                                           01514700
.*-------------------------------------------------------------------   01514800
.*-------------------------------------------------------------------   01514900
.***AM.LVER1                                                            01515000
                      AIF  (&XPLISTVER LT 2).ZL76L                      01515100
.*-------------------------------------------------------------------   01515200
.*-------------------------------------------------------------------   01515300
.***AM.L09 ADDR64 XSRCLST64 AD                                          01515400
&ZOPN                 SETA &ZOPN+1                                      01515500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSRCLST64_ADDR64'                 01515600
&ZOPO(&ZOPN)          SETC 'DS'                                         01515700
&ZOPV(&ZOPN)          SETC 'AD'                                         01515800
&ZOPD(&ZOPN)          SETC '++ &ZXSRCLST64 ADDR64'                      01515900
.*-------------------------------------------------------------------   01516000
.***AM.LVER2                                                            01516100
.ZL76L                ANOP  ,                                           01516200
.*-------------------------------------------------------------------   01516300
.*-------------------------------------------------------------------   01516400
.***AM.LVER1                                                            01516500
                      AIF  (&XPLISTVER LT 2).ZL77L                      01516600
.*-------------------------------------------------------------------   01516700
.*-------------------------------------------------------------------   01516800
.***AM.L09 ADDR64 XTARLST64 AD                                          01516900
&ZOPN                 SETA &ZOPN+1                                      01517000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XTARLST64_ADDR64'                 01517100
&ZOPO(&ZOPN)          SETC 'DS'                                         01517200
&ZOPV(&ZOPN)          SETC 'AD'                                         01517300
&ZOPD(&ZOPN)          SETC '++ &ZXTARLST64 ADDR64'                      01517400
.*-------------------------------------------------------------------   01517500
.***AM.LVER2                                                            01517600
.ZL77L                ANOP  ,                                           01517700
.*-------------------------------------------------------------------   01517800
.*-------------------------------------------------------------------   01517900
.***AM.MLM1 SAVED LOCATION COUNTER                                      01518000
                      AIF  ('&ZENDBASEPL' NE '').ZL78LB                 01518100
&ZENDBASEPL           SETC 'YES'                                        01518200
&ZOPN                 SETA &ZOPN+1                                      01518300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._PL_END'                           01518400
&ZOPO(&ZOPN)          SETC 'EQU'                                        01518500
&ZOPV(&ZOPN)          SETC '*'                                          01518600
&ZOPD(&ZOPN)          SETC '++ END OF BASE PLIST'                       01518700
.ZL78LB               ANOP  ,                                           01518800
.*-------------------------------------------------------------------   01518900
.***AM.PJR1 DEFINED ON XPOOLTOKN                                        01519000
&ZOPN                 SETA &ZOPN+1                                      01519100
&ZOPL(&ZOPN)          SETC ' '                                          01519200
&ZOPO(&ZOPN)          SETC 'ORG'                                        01519300
&ZOPV(&ZOPN)          SETC '&XMFCTRL.+102'                              01519400
&ZOPD(&ZOPN)          SETC ' '                                          01519500
.*-------------------------------------------------------------------   01519600
.***AM.L09  XRETPTOKN CL10                                              01519700
&ZOPN                 SETA &ZOPN+1                                      01519800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRETPTOKN'                        01519900
&ZOPO(&ZOPN)          SETC 'DS'                                         01520000
&ZOPV(&ZOPN)          SETC 'CL10'                                       01520100
&ZOPD(&ZOPN)          SETC '++ &ZXRETPTOKN '                            01520200
&ZOPN                 SETA &ZOPN+1                                      01520300
&ZOPL(&ZOPN)          SETC ' '                                          01520400
&ZOPO(&ZOPN)          SETC 'ORG'                                        01520500
&ZOPV(&ZOPN)          SETC '&XMFCTRL._PL_END'                           01520600
&ZOPD(&ZOPN)          SETC 'RESET LOCATION COUNTER'                     01520700
.*-------------------------------------------------------------------   01520800
.***AM.L10 END OF IVTCSM LIST PARAMETERS                                01520900
&ZOPN                 SETA &ZOPN+1                                      01521000
&ZOPL(&ZOPN)          SETC '&XMFCTRL.L'                                 01521100
&ZOPO(&ZOPN)          SETC 'EQU'                                        01521200
&ZOPV(&ZOPN)          SETC '*-&XMFCTRL'                                 01521300
&ZOPD(&ZOPN)          SETC '++ LENGTH OF PLIST'                         01521400
.*                                                                      01521500
&ZOPN                 SETA &ZOPN+1                                      01521600
&ZOPL(&ZOPN)          SETC ' '                                          01521700
&ZOPO(&ZOPN)          SETC 'SPACE'                                      01521800
&ZOPV(&ZOPN)          SETC '1'                                          01521900
&ZOPD(&ZOPN)          SETC ' '                                          01522000
.*-------------------------------------------------------------------   01522100
.***AL.L12 IVTCSM FMT=LIST MF=S!L PARAMETERS                            01522200
                      AIF   ('&XMF' EQ 'L').ZMFLX  DONE IF MF=L         01522300
.*                                                                      01522400
&ZOPN                 SETA  &ZOPN+1                                     01522500
&ZOPL(&ZOPN)          SETC  '&XMFCTRL.S'                                01522600
&ZOPO(&ZOPN)          SETC  'DC'                                        01522700
&ZOPV(&ZOPN)          SETC  '0H''0'''                                   01522800
&ZOPD(&ZOPN)          SETC  '++ IVTCSM ARG PARMS'                       01522900
.*                                                                      01523000
.ZLMFSLX              ANOP  ,                                           01523100
.*-------------------------------------------------------------------   01523200
.***AL.L13 SET ZPLLEN TO ITS APPROPRIATE VALUE                          01523300
&ZPLLEN               SETA 116                                          01523400
.*                                                                      01523500
                      AIF  (&XPLISTVER LT 1).ZLLEN2Z                    01523600
&ZPLLEN               SETA 132                                          01523700
.ZLLEN2Z              ANOP  ,                                           01523800
.*                                                                      01523900
                      AIF  (&XPLISTVER LT 2).ZLLEN3Z                    01524000
&ZPLLEN               SETA 160                                          01524100
.ZLLEN3Z              ANOP  ,                                           01524200
.*                                                                      01524300
.******************************************************************     01524400
.***AI.L01 IVTCSM FMT=LIST FILL IN PARAMETER AREA                       01524500
.******************************************************************     01524600
                      ACTR  10000                                       01524700
&ZCVAL                SETC  'LA'           ASSUME XA MODE               01524800
                      AIF   ('&SYSASCE' EQ 'P').ZIMFXA  SYSSTATE PRI    01524900
&ZCVAL                SETC  'LAE'          XAX MODE                     01525000
.ZIMFXA               ANOP ,                                            01525100
.*                                                                      01525200
                      AIF   ('&XMFCTRL'(1,1) NE '(').ZIMFN2  NOT GPR    01525300
&ZCGPR                SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)  GET GPR         01525400
                      AIF   ('&ZCGPR' EQ 'GPR1').ZIMFNX                 01525500
                      AIF   ('&ZCGPR' EQ 'GPR01').ZIMFNX                01525600
                      AIF   ('&ZCGPR' EQ 'REG1').ZIMFNX                 01525700
                      AIF   ('&ZCGPR' EQ 'REG01').ZIMFNX                01525800
                      AIF   ('&ZCGPR' EQ 'R1').ZIMFNX                   01525900
                      AIF   ('&ZCGPR' EQ '1').ZIMFNX                    01526000
                      AIF   ('&ZCGPR' EQ '01').ZIMFNX                   01526100
&ZOPN                 SETA  &ZOPN+1                                     01526200
&ZOPL(&ZOPN)          SETC  ' '                                         01526300
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    01526400
&ZOPV(&ZOPN)          SETC  '1,0(,&ZCGPR)'                              01526500
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       01526600
                      AGO   .ZIMFNX                                     01526700
.*                                                                      01526800
.ZIMFN2               ANOP ,                                            01526900
                      AIF   ('&XMF' NE 'S').ZIMFNX1                     01527000
                      AIF   ('&ZCVAL' NE 'LAE').ZIMFNX                  01527100
&ZOPN                 SETA  &ZOPN+1                                     01527200
&ZOPL(&ZOPN)          SETC  ' '                                         01527300
&ZOPO(&ZOPN)          SETC  'LAE'                                       01527400
&ZOPV(&ZOPN)          SETC  '1,0(1,0)'                                  01527500
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       01527600
                      AGO   .ZIMFNX                                     01527700
.ZIMFNX1              ANOP ,                                            01527800
&ZOPN                 SETA  &ZOPN+1                                     01527900
&ZOPL(&ZOPN)          SETC  ' '                                         01528000
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    01528100
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL'                                01528200
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       01528300
.ZIMFNX               ANOP ,                                            01528400
.********************************************************************   01528500
.***AI.L02 IVTCSM FMT=LIST INITIALIZE PARAMETER AREA                    01528600
.********************************************************************   01528700
.***AI.L03 MF=(SLME)                                                    01528800
                      AIF   ('&XMF' EQ 'L').ZIMFLX                      01528900
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZIMFLX            01529000
.*                                                                      01529100
&ZOPN                 SETA  &ZOPN+1                                     01529200
&ZOPL(&ZOPN)          SETC  ' '                                         01529300
&ZOPO(&ZOPN)          SETC  'XC'                                        01529400
&ZOPV(&ZOPN)          SETC  '0(&ZPLLEN,1),0(1)'                         01529500
&ZOPD(&ZOPN)          SETC  '++ INITIALIZE'                             01529600
.ZIMFLX               ANOP  ,                                           01529700
.*-------------------------------------------------------------------   01529800
.***AI.L04B XVERSION XL1                                                01529900
                      AIF   (&XPLISTVER EQ 0).ZIMFVX                    01530000
                      AIF   ('&XMFSCK' EQ 'COMPLETE').ZIMFVY            01530100
.ZIMFVX               ANOP  ,                                           01530200
                      AIF   ('&PLISTVER' EQ '').ZIMFVZ                  01530300
                      AIF   ('&XMFSCK' EQ 'COMPLETE').ZIMFVZ            01530400
.ZIMFVY               ANOP  ,                                           01530500
&ZOPN                 SETA  &ZOPN+1                                     01530600
&ZOPL(&ZOPN)          SETC  ' '                                         01530700
&ZOPO(&ZOPN)          SETC  'MVI'                                       01530800
&ZOPV(&ZOPN)          SETC  '0(1),&XPLISTVER'                           01530900
&ZOPD(&ZOPN)          SETC  '++ INPUT XVERSION XL1'                     01531000
.ZIMFVZ               ANOP  ,                                           01531100
.*-------------------------------------------------------------------   01531200
.***AI.L07 XBUFSOURC AL1                                                01531300
&ZW                   SETC  ''                                          01531400
.*-------------------------------------------------------------------   01531500
.***AI.L15 XBUFSOURC "ECSA" AL1                                         01531600
         AIF   ('&XBUFSOURC' NE 'ECSA').ZI3A                            01531700
&ZW                   SETC  '128'                                       01531800
.ZI3A                 ANOP  ,                                           01531900
.*-------------------------------------------------------------------   01532000
.***AI.L15 XBUFSOURC "DSPACE" AL1                                       01532100
         AIF   ('&XBUFSOURC' NE 'DSPACE').ZI4A                          01532200
&ZW                   SETC  '64'                                        01532300
.ZI4A                 ANOP  ,                                           01532400
.*-------------------------------------------------------------------   01532500
.***AI.L15 XBUFSOURC "HVCOMM" AL1                                       01532600
         AIF   ('&XBUFSOURC' NE 'HVCOMM').ZI5A                          01532700
&ZW                   SETC  '8'                                         01532800
.ZI5A                 ANOP  ,                                           01532900
.*-------------------------------------------------------------------   01533000
.***AI.L17 XBUFSOURC AL1                                                01533100
                      AIF   ('&ZW' NE '0').ZI5C                         01533200
                      AIF   ('&XMFSCK' EQ 'COMPLETE').ZI5B              01533300
.ZI5C                 ANOP  ,                                           01533400
                      AIF   ('&ZW' EQ '').ZI5B                          01533500
.*                                                                      01533600
&ZOPN                 SETA  &ZOPN+1                                     01533700
&ZOPL(&ZOPN)          SETC  ' '                                         01533800
&ZOPO(&ZOPN)          SETC  'MVI'                                       01533900
&ZOPV(&ZOPN)          SETC  '1(1),&ZW'                                  01534000
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFSOURC XBUFSOURC'                  01534100
.ZI5B                 ANOP  ,                                           01534200
.*-------------------------------------------------------------------   01534300
.***AI.L07 XBUFTYPE AL1                                                 01534400
&ZW                   SETC  ''                                          01534500
.*-------------------------------------------------------------------   01534600
.***AI.L15 XBUFTYPE "SAME" AL1                                          01534700
         AIF   ('&XBUFTYPE' NE 'SAME').ZI7A                             01534800
&ZW                   SETC  '0'                                         01534900
.ZI7A                 ANOP  ,                                           01535000
.*-------------------------------------------------------------------   01535100
.***AI.L15 XBUFTYPE "FIXED" AL1                                         01535200
         AIF   ('&XBUFTYPE' NE 'FIXED').ZI8A                            01535300
&ZW                   SETC  '128'                                       01535400
.ZI8A                 ANOP  ,                                           01535500
.*-------------------------------------------------------------------   01535600
.***AI.L15 XBUFTYPE "PAGEABLE" AL1                                      01535700
         AIF   ('&XBUFTYPE' NE 'PAGEABLE').ZI9A                         01535800
&ZW                   SETC  '64'                                        01535900
.ZI9A                 ANOP  ,                                           01536000
.*-------------------------------------------------------------------   01536100
.***AI.L15 XBUFTYPE "PAGEELIG" AL1                                      01536200
         AIF   ('&XBUFTYPE' NE 'PAGEELIG').ZI10A                        01536300
&ZW                   SETC  '32'                                        01536400
.ZI10A                ANOP  ,                                           01536500
.*-------------------------------------------------------------------   01536600
.***AI.L17 XBUFTYPE AL1                                                 01536700
                      AIF   ('&ZW' NE '0').ZI10C                        01536800
                      AIF   ('&XMFSCK' EQ 'COMPLETE').ZI10B             01536900
.ZI10C                ANOP  ,                                           01537000
                      AIF   ('&ZW' EQ '').ZI10B                         01537100
.*                                                                      01537200
&ZOPN                 SETA  &ZOPN+1                                     01537300
&ZOPL(&ZOPN)          SETC  ' '                                         01537400
&ZOPO(&ZOPN)          SETC  'MVI'                                       01537500
&ZOPV(&ZOPN)          SETC  '2(1),&ZW'                                  01537600
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFTYPE XBUFTYPE'                    01537700
.ZI10B                ANOP  ,                                           01537800
.*-------------------------------------------------------------------   01537900
.***AI.L07 XCLEAR AL1                                                   01538000
&ZW                   SETC  ''                                          01538100
.*-------------------------------------------------------------------   01538200
.***AI.L15 XCLEAR "NO" AL1                                              01538300
         AIF   ('&XCLEAR' NE 'NO').ZI12A                                01538400
&ZW                   SETC  '0'                                         01538500
.ZI12A                ANOP  ,                                           01538600
.*-------------------------------------------------------------------   01538700
.***AI.L15 XCLEAR "YES" AL1                                             01538800
         AIF   ('&XCLEAR' NE 'YES').ZI13A                               01538900
&ZW                   SETC  '128'                                       01539000
.ZI13A                ANOP  ,                                           01539100
.*-------------------------------------------------------------------   01539200
.***AI.L17 XCLEAR AL1                                                   01539300
                      AIF   ('&ZW' NE '0').ZI13C                        01539400
                      AIF   ('&XMFSCK' EQ 'COMPLETE').ZI13B             01539500
.ZI13C                ANOP  ,                                           01539600
                      AIF   ('&ZW' EQ '').ZI13B                         01539700
.*                                                                      01539800
&ZOPN                 SETA  &ZOPN+1                                     01539900
&ZOPL(&ZOPN)          SETC  ' '                                         01540000
&ZOPO(&ZOPN)          SETC  'MVI'                                       01540100
&ZOPV(&ZOPN)          SETC  '3(1),&ZW'                                  01540200
&ZOPD(&ZOPN)          SETC  '++ &ZXCLEAR XCLEAR'                        01540300
.ZI13B                ANOP  ,                                           01540400
.*-------------------------------------------------------------------   01540500
.***AI.L07 XWAIT AL1                                                    01540600
&ZW                   SETC  ''                                          01540700
.*-------------------------------------------------------------------   01540800
.***AI.L15 XWAIT "NO" AL1                                               01540900
         AIF   ('&XWAIT' NE 'NO').ZI15A                                 01541000
&ZW                   SETC  '0'                                         01541100
.ZI15A                ANOP  ,                                           01541200
.*-------------------------------------------------------------------   01541300
.***AI.L15 XWAIT "YES" AL1                                              01541400
         AIF   ('&XWAIT' NE 'YES').ZI16A                                01541500
&ZW                   SETC  '128'                                       01541600
.ZI16A                ANOP  ,                                           01541700
.*-------------------------------------------------------------------   01541800
.***AI.L15 XWAIT "EXPAND" AL1                                           01541900
         AIF   ('&XWAIT' NE 'EXPAND').ZI17A                             01542000
&ZW                   SETC  '64'                                        01542100
.ZI17A                ANOP  ,                                           01542200
.*-------------------------------------------------------------------   01542300
.***AI.L17 XWAIT AL1                                                    01542400
                      AIF   ('&ZW' NE '0').ZI17C                        01542500
                      AIF   ('&XMFSCK' EQ 'COMPLETE').ZI17B             01542600
.ZI17C                ANOP  ,                                           01542700
                      AIF   ('&ZW' EQ '').ZI17B                         01542800
.*                                                                      01542900
&ZOPN                 SETA  &ZOPN+1                                     01543000
&ZOPL(&ZOPN)          SETC  ' '                                         01543100
&ZOPO(&ZOPN)          SETC  'MVI'                                       01543200
&ZOPV(&ZOPN)          SETC  '4(1),&ZW'                                  01543300
&ZOPD(&ZOPN)          SETC  '++ &ZXWAIT XWAIT'                          01543400
.ZI17B                ANOP  ,                                           01543500
.*-------------------------------------------------------------------   01543600
.***AI.L07 XFREETO AL1                                                  01543700
&ZW                   SETC  ''                                          01543800
.*-------------------------------------------------------------------   01543900
.***AI.L15 XFREETO "USER" AL1                                           01544000
         AIF   ('&XFREETO' NE 'USER').ZI19A                             01544100
&ZW                   SETC  '128'                                       01544200
.ZI19A                ANOP  ,                                           01544300
.*-------------------------------------------------------------------   01544400
.***AI.L15 XFREETO "CSM" AL1                                            01544500
         AIF   ('&XFREETO' NE 'CSM').ZI20A                              01544600
&ZW                   SETC  '64'                                        01544700
.ZI20A                ANOP  ,                                           01544800
.*-------------------------------------------------------------------   01544900
.***AI.L17 XFREETO AL1                                                  01545000
                      AIF   ('&ZW' NE '0').ZI20C                        01545100
                      AIF   ('&XMFSCK' EQ 'COMPLETE').ZI20B             01545200
.ZI20C                ANOP  ,                                           01545300
                      AIF   ('&ZW' EQ '').ZI20B                         01545400
.*                                                                      01545500
&ZOPN                 SETA  &ZOPN+1                                     01545600
&ZOPL(&ZOPN)          SETC  ' '                                         01545700
&ZOPO(&ZOPN)          SETC  'MVI'                                       01545800
&ZOPV(&ZOPN)          SETC  '5(1),&ZW'                                  01545900
&ZOPD(&ZOPN)          SETC  '++ &ZXFREETO XFREETO'                      01546000
.ZI20B                ANOP  ,                                           01546100
.*-------------------------------------------------------------------   01546200
.***AI.L18  XOWNERID XL2                                                01546300
         AIF   ('&XOWNERID' NE '0').ZI21                                01546400
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZI21  CK *        01546500
&ZXOWNERID            SETC  ''             RESET INPUT/OUTPUT           01546600
.ZI21                 ANOP  ,                                           01546700
.*-------------------------------------------------------------------   01546800
.***AI.L25  XOWNERID XL2                                                01546900
                      AIF   ('&ZXOWNERID' EQ '').ZI21E                  01547000
                      AIF   ('&ZXOWNERID' EQ 'OUTPUT').ZI21E            01547100
&ZCGPR                SETC  '&XOWNERID'                                 01547200
         AIF   ('&XOWNERID' NE '0').ZI21A                               01547300
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI21E                          01547400
.*                                                                      01547500
&ZCGPR                SETC  '=XL2''00'''                                01547600
.ZI21A                ANOP  ,                                           01547700
.*                                                                      01547800
                      AIF   ('&XOWNERID'(1,1) NE '(').ZI21B             01547900
&ZCGPR   SETC  '0('.'&XOWNERID'(2,K'&XOWNERID-2).')'                    01548000
                      AGO   .ZI21D                                      01548100
.ZI21B                ANOP  ,                                           01548200
.*                                                                      01548300
&ZC                   SETC  '&XOWNERID'(1,1)                            01548400
                      AIF   (T'&ZC NE 'N').ZI21D                        01548500
&ZC                   SETC  '&XOWNERID'                                 01548600
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI21D               01548700
&ZCGPR                SETC  '=AL2(&XOWNERID)'                           01548800
.*                                                                      01548900
.ZI21D                ANOP  ,                                           01549000
.*                                                                      01549100
&ZOPN                 SETA  &ZOPN+1                                     01549200
&ZOPL(&ZOPN)          SETC  ' '                                         01549300
&ZOPO(&ZOPN)          SETC  'MVC'                                       01549400
&ZOPV(&ZOPN)          SETC  '6(2,1),&ZCGPR'                             01549500
&ZOPD(&ZOPN)          SETC  '++ &ZXOWNERID XOWNERID'                    01549600
.*                                                                      01549700
.ZI21E                ANOP  ,                                           01549800
.*-------------------------------------------------------------------   01549900
.***AI.L07 XREQUEST A                                                   01550000
&ZW                   SETC  ''                                          01550100
.*-------------------------------------------------------------------   01550200
.***AI.L15 XREQUEST "CREATE_POOL" A                                     01550300
         AIF   ('&XREQUEST' NE 'CREATE_POOL').ZI23A                     01550400
&ZW                   SETC  '0'                                         01550500
.ZI23A                ANOP  ,                                           01550600
.*-------------------------------------------------------------------   01550700
.***AI.L15 XREQUEST "DELETE_POOL" A                                     01550800
         AIF   ('&XREQUEST' NE 'DELETE_POOL').ZI24A                     01550900
&ZW                   SETC  '1'                                         01551000
.ZI24A                ANOP  ,                                           01551100
.*-------------------------------------------------------------------   01551200
.***AI.L15 XREQUEST "GET_BUFFER" A                                      01551300
         AIF   ('&XREQUEST' NE 'GET_BUFFER').ZI25A                      01551400
&ZW                   SETC  '2'                                         01551500
.ZI25A                ANOP  ,                                           01551600
.*-------------------------------------------------------------------   01551700
.***AI.L15 XREQUEST "FREE_BUFFER" A                                     01551800
         AIF   ('&XREQUEST' NE 'FREE_BUFFER').ZI26A                     01551900
&ZW                   SETC  '3'                                         01552000
.ZI26A                ANOP  ,                                           01552100
.*-------------------------------------------------------------------   01552200
.***AI.L15 XREQUEST "ASSIGN_BUFFER" A                                   01552300
         AIF   ('&XREQUEST' NE 'ASSIGN_BUFFER').ZI27A                   01552400
&ZW                   SETC  '4'                                         01552500
.ZI27A                ANOP  ,                                           01552600
.*-------------------------------------------------------------------   01552700
.***AI.L15 XREQUEST "DUMP_INFO" A                                       01552800
         AIF   ('&XREQUEST' NE 'DUMP_INFO').ZI28A                       01552900
&ZW                   SETC  '5'                                         01553000
.ZI28A                ANOP  ,                                           01553100
.*-------------------------------------------------------------------   01553200
.***AI.L15 XREQUEST "FIX_BUFFER" A                                      01553300
         AIF   ('&XREQUEST' NE 'FIX_BUFFER').ZI29A                      01553400
&ZW                   SETC  '6'                                         01553500
.ZI29A                ANOP  ,                                           01553600
.*-------------------------------------------------------------------   01553700
.***AI.L15 XREQUEST "PAGE_BUFFER" A                                     01553800
         AIF   ('&XREQUEST' NE 'PAGE_BUFFER').ZI30A                     01553900
&ZW                   SETC  '7'                                         01554000
.ZI30A                ANOP  ,                                           01554100
.*-------------------------------------------------------------------   01554200
.***AI.L15 XREQUEST "RESOURCE_STATS" A                                  01554300
         AIF   ('&XREQUEST' NE 'RESOURCE_STATS').ZI31A                  01554400
&ZW                   SETC  '8'                                         01554500
.ZI31A                ANOP  ,                                           01554600
.*-------------------------------------------------------------------   01554700
.***AI.L15 XREQUEST "COPY_DATA" A                                       01554800
         AIF   ('&XREQUEST' NE 'COPY_DATA').ZI32A                       01554900
&ZW                   SETC  '9'                                         01555000
.ZI32A                ANOP  ,                                           01555100
.*-------------------------------------------------------------------   01555200
.***AI.L15 XREQUEST "CHANGE_OWNER" A                                    01555300
         AIF   ('&XREQUEST' NE 'CHANGE_OWNER').ZI33A                    01555400
&ZW                   SETC  '100'                                       01555500
.ZI33A                ANOP  ,                                           01555600
.*-------------------------------------------------------------------   01555700
.***AI.L15 XREQUEST A                                                   01555800
                      AIF   ('&ZW' NE '0').ZI33C                        01555900
                      AIF   ('&XMFSCK' EQ 'COMPLETE').ZI33B             01556000
.ZI33C                ANOP  ,                                           01556100
                      AIF   ('&ZW' EQ '').ZI33B                         01556200
.*                                                                      01556300
&ZOPN                 SETA  &ZOPN+1                                     01556400
&ZOPL(&ZOPN)          SETC  ' '                                         01556500
&ZOPO(&ZOPN)          SETC  'MVC'                                       01556600
&ZOPV(&ZOPN)          SETC  '8(4,1),=A(&ZW)'                            01556700
&ZOPD(&ZOPN)          SETC  '++ &ZXREQUEST XREQUEST'                    01556800
.ZI33B                ANOP  ,                                           01556900
.*-------------------------------------------------------------------   01557000
.***AI.L25  XBUFSIZE F                                                  01557100
                      AIF   ('&ZXBUFSIZE' EQ '').ZI34E                  01557200
                      AIF   ('&ZXBUFSIZE' EQ 'OUTPUT').ZI34E            01557300
&ZCGPR                SETC  '&XBUFSIZE'                                 01557400
.*                                                                      01557500
                      AIF   ('&XBUFSIZE'(1,1) NE '(').ZI34B             01557600
&ZCGPR   SETC  '0('.'&XBUFSIZE'(2,K'&XBUFSIZE-2).')'                    01557700
                      AGO   .ZI34D                                      01557800
.ZI34B                ANOP  ,                                           01557900
.*                                                                      01558000
&ZC                   SETC  '&XBUFSIZE'(1,1)                            01558100
                      AIF   (T'&ZC NE 'N').ZI34D                        01558200
&ZC                   SETC  '&XBUFSIZE'                                 01558300
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI34D               01558400
&ZCGPR                SETC  '=FL4''&XBUFSIZE'''                         01558500
.*                                                                      01558600
.ZI34D                ANOP  ,                                           01558700
.*                                                                      01558800
&ZOPN                 SETA  &ZOPN+1                                     01558900
&ZOPL(&ZOPN)          SETC  ' '                                         01559000
&ZOPO(&ZOPN)          SETC  'MVC'                                       01559100
&ZOPV(&ZOPN)          SETC  '12(4,1),&ZCGPR'                            01559200
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFSIZE XBUFSIZE'                    01559300
.*                                                                      01559400
.ZI34E                ANOP  ,                                           01559500
.*-------------------------------------------------------------------   01559600
.***AI.L25  XINITBUF F                                                  01559700
                      AIF   ('&ZXINITBUF' EQ '').ZI35E                  01559800
                      AIF   ('&ZXINITBUF' EQ 'OUTPUT').ZI35E            01559900
&ZCGPR                SETC  '&XINITBUF'                                 01560000
.*                                                                      01560100
                      AIF   ('&XINITBUF'(1,1) NE '(').ZI35B             01560200
&ZCGPR   SETC  '0('.'&XINITBUF'(2,K'&XINITBUF-2).')'                    01560300
                      AGO   .ZI35D                                      01560400
.ZI35B                ANOP  ,                                           01560500
.*                                                                      01560600
&ZC                   SETC  '&XINITBUF'(1,1)                            01560700
                      AIF   (T'&ZC NE 'N').ZI35D                        01560800
&ZC                   SETC  '&XINITBUF'                                 01560900
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI35D               01561000
&ZCGPR                SETC  '=FL4''&XINITBUF'''                         01561100
.*                                                                      01561200
.ZI35D                ANOP  ,                                           01561300
.*                                                                      01561400
&ZOPN                 SETA  &ZOPN+1                                     01561500
&ZOPL(&ZOPN)          SETC  ' '                                         01561600
&ZOPO(&ZOPN)          SETC  'MVC'                                       01561700
&ZOPV(&ZOPN)          SETC  '16(4,1),&ZCGPR'                            01561800
&ZOPD(&ZOPN)          SETC  '++ &ZXINITBUF XINITBUF'                    01561900
.*                                                                      01562000
.ZI35E                ANOP  ,                                           01562100
.*-------------------------------------------------------------------   01562200
.***AI.L25  XMINFREE F                                                  01562300
                      AIF   ('&ZXMINFREE' EQ '').ZI36E                  01562400
                      AIF   ('&ZXMINFREE' EQ 'OUTPUT').ZI36E            01562500
&ZCGPR                SETC  '&XMINFREE'                                 01562600
.*                                                                      01562700
                      AIF   ('&XMINFREE'(1,1) NE '(').ZI36B             01562800
&ZCGPR   SETC  '0('.'&XMINFREE'(2,K'&XMINFREE-2).')'                    01562900
                      AGO   .ZI36D                                      01563000
.ZI36B                ANOP  ,                                           01563100
.*                                                                      01563200
&ZC                   SETC  '&XMINFREE'(1,1)                            01563300
                      AIF   (T'&ZC NE 'N').ZI36D                        01563400
&ZC                   SETC  '&XMINFREE'                                 01563500
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI36D               01563600
&ZCGPR                SETC  '=FL4''&XMINFREE'''                         01563700
.*                                                                      01563800
.ZI36D                ANOP  ,                                           01563900
.*                                                                      01564000
&ZOPN                 SETA  &ZOPN+1                                     01564100
&ZOPL(&ZOPN)          SETC  ' '                                         01564200
&ZOPO(&ZOPN)          SETC  'MVC'                                       01564300
&ZOPV(&ZOPN)          SETC  '20(4,1),&ZCGPR'                            01564400
&ZOPD(&ZOPN)          SETC  '++ &ZXMINFREE XMINFREE'                    01564500
.*                                                                      01564600
.ZI36E                ANOP  ,                                           01564700
.*-------------------------------------------------------------------   01564800
.***AI.L25  XEXPBUF F                                                   01564900
                      AIF   ('&ZXEXPBUF' EQ '').ZI37E                   01565000
                      AIF   ('&ZXEXPBUF' EQ 'OUTPUT').ZI37E             01565100
&ZCGPR                SETC  '&XEXPBUF'                                  01565200
.*                                                                      01565300
                      AIF   ('&XEXPBUF'(1,1) NE '(').ZI37B              01565400
&ZCGPR   SETC  '0('.'&XEXPBUF'(2,K'&XEXPBUF-2).')'                      01565500
                      AGO   .ZI37D                                      01565600
.ZI37B                ANOP  ,                                           01565700
.*                                                                      01565800
&ZC                   SETC  '&XEXPBUF'(1,1)                             01565900
                      AIF   (T'&ZC NE 'N').ZI37D                        01566000
&ZC                   SETC  '&XEXPBUF'                                  01566100
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI37D               01566200
&ZCGPR                SETC  '=FL4''&XEXPBUF'''                          01566300
.*                                                                      01566400
.ZI37D                ANOP  ,                                           01566500
.*                                                                      01566600
&ZOPN                 SETA  &ZOPN+1                                     01566700
&ZOPL(&ZOPN)          SETC  ' '                                         01566800
&ZOPO(&ZOPN)          SETC  'MVC'                                       01566900
&ZOPV(&ZOPN)          SETC  '24(4,1),&ZCGPR'                            01567000
&ZOPD(&ZOPN)          SETC  '++ &ZXEXPBUF XEXPBUF'                      01567100
.*                                                                      01567200
.ZI37E                ANOP  ,                                           01567300
.*-------------------------------------------------------------------   01567400
.***AI.L25  XBUFNUM F                                                   01567500
                      AIF   ('&ZXBUFNUM' EQ '').ZI38E                   01567600
                      AIF   ('&ZXBUFNUM' EQ 'OUTPUT').ZI38E             01567700
&ZCGPR                SETC  '&XBUFNUM'                                  01567800
.*                                                                      01567900
                      AIF   ('&XBUFNUM'(1,1) NE '(').ZI38B              01568000
&ZCGPR   SETC  '0('.'&XBUFNUM'(2,K'&XBUFNUM-2).')'                      01568100
                      AGO   .ZI38D                                      01568200
.ZI38B                ANOP  ,                                           01568300
.*                                                                      01568400
&ZC                   SETC  '&XBUFNUM'(1,1)                             01568500
                      AIF   (T'&ZC NE 'N').ZI38D                        01568600
&ZC                   SETC  '&XBUFNUM'                                  01568700
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI38D               01568800
&ZCGPR                SETC  '=FL4''&XBUFNUM'''                          01568900
.*                                                                      01569000
.ZI38D                ANOP  ,                                           01569100
.*                                                                      01569200
&ZOPN                 SETA  &ZOPN+1                                     01569300
&ZOPL(&ZOPN)          SETC  ' '                                         01569400
&ZOPO(&ZOPN)          SETC  'MVC'                                       01569500
&ZOPV(&ZOPN)          SETC  '28(4,1),&ZCGPR'                            01569600
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFNUM XBUFNUM'                      01569700
.*                                                                      01569800
.ZI38E                ANOP  ,                                           01569900
.*-------------------------------------------------------------------   01570000
.***AI.L19  XBUFLIST A                                                  01570100
                      AIF   ('&ZXBUFLIST' EQ '').ZI39H                  01570200
&ZCLNG                SETC  '&XBUFLIST'                                 01570300
&ZCGPR                SETC  '14'                                        01570400
         AIF   ('&XBUFLIST'(1,1) EQ '(').ZI39F  IN GPR                  01570500
.*                                                                      01570600
&ZOPN                 SETA  &ZOPN+1                                     01570700
&ZOPL(&ZOPN)          SETC  ' '                                         01570800
&ZOPO(&ZOPN)          SETC  'LA'                                        01570900
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             01571000
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFLIST XBUFLIST'                    01571100
.*                                                                      01571200
                      AGO   .ZI39G                                      01571300
.*                                                                      01571400
.ZI39F                ANOP  ,                                           01571500
&ZCGPR   SETC  '&XBUFLIST'(2,K'&XBUFLIST-2)                             01571600
.*                                                                      01571700
.ZI39G                ANOP  ,                                           01571800
.*                                                                      01571900
&ZOPN                 SETA  &ZOPN+1                                     01572000
&ZOPL(&ZOPN)          SETC  ' '                                         01572100
&ZOPO(&ZOPN)          SETC  'ST'                                        01572200
&ZOPV(&ZOPN)          SETC  '&ZCGPR,32(,1)'                             01572300
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFLIST XBUFLIST'                    01572400
.*                                                                      01572500
.ZI39H                ANOP  ,                                           01572600
.*-------------------------------------------------------------------   01572700
.***AI.L18  XTASKID AL4                                                 01572800
         AIF   ('&XTASKID' NE '0').ZI41                                 01572900
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZI41  CK *        01573000
&ZXTASKID             SETC  ''             RESET INPUT/OUTPUT           01573100
.ZI41                 ANOP  ,                                           01573200
.*-------------------------------------------------------------------   01573300
.***AI.L25  XTASKID AL4                                                 01573400
                      AIF   ('&ZXTASKID' EQ '').ZI41E                   01573500
                      AIF   ('&ZXTASKID' EQ 'OUTPUT').ZI41E             01573600
&ZCGPR                SETC  '&XTASKID'                                  01573700
         AIF   ('&XTASKID' NE '0').ZI41A                                01573800
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI41E                          01573900
.*                                                                      01574000
&ZCGPR                SETC  '=XL4''00'''                                01574100
.ZI41A                ANOP  ,                                           01574200
.*                                                                      01574300
                      AIF   ('&XTASKID'(1,1) NE '(').ZI41B              01574400
&ZCGPR   SETC  '0('.'&XTASKID'(2,K'&XTASKID-2).')'                      01574500
                      AGO   .ZI41D                                      01574600
.ZI41B                ANOP  ,                                           01574700
.*                                                                      01574800
&ZC                   SETC  '&XTASKID'(1,1)                             01574900
                      AIF   (T'&ZC NE 'N').ZI41D                        01575000
&ZC                   SETC  '&XTASKID'                                  01575100
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI41D               01575200
&ZCGPR                SETC  '=AL4(&XTASKID)'                            01575300
.*                                                                      01575400
.ZI41D                ANOP  ,                                           01575500
.*                                                                      01575600
&ZOPN                 SETA  &ZOPN+1                                     01575700
&ZOPL(&ZOPN)          SETC  ' '                                         01575800
&ZOPO(&ZOPN)          SETC  'MVC'                                       01575900
&ZOPV(&ZOPN)          SETC  '40(4,1),&ZCGPR'                            01576000
&ZOPD(&ZOPN)          SETC  '++ &ZXTASKID XTASKID'                      01576100
.*                                                                      01576200
.ZI41E                ANOP  ,                                           01576300
.*-------------------------------------------------------------------   01576400
.***AI.L18  XFREERTN AL4                                                01576500
         AIF   ('&XFREERTN' NE 'CSM').ZI42                              01576600
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZI42  CK *        01576700
&ZXFREERTN            SETC  ''             RESET INPUT/OUTPUT           01576800
.ZI42                 ANOP  ,                                           01576900
.*-------------------------------------------------------------------   01577000
.***AI.L25  XFREERTN AL4                                                01577100
                      AIF   ('&ZXFREERTN' EQ '').ZI42E                  01577200
                      AIF   ('&ZXFREERTN' EQ 'OUTPUT').ZI42E            01577300
&ZCGPR                SETC  '&XFREERTN'                                 01577400
         AIF   ('&XFREERTN' NE 'CSM').ZI42A                             01577500
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI42E                          01577600
.*                                                                      01577700
&ZCGPR                SETC  '=XL4''00'''                                01577800
.ZI42A                ANOP  ,                                           01577900
.*                                                                      01578000
                      AIF   ('&XFREERTN'(1,1) NE '(').ZI42B             01578100
&ZCGPR   SETC  '0('.'&XFREERTN'(2,K'&XFREERTN-2).')'                    01578200
                      AGO   .ZI42D                                      01578300
.ZI42B                ANOP  ,                                           01578400
.*                                                                      01578500
&ZC                   SETC  '&XFREERTN'(1,1)                            01578600
                      AIF   (T'&ZC NE 'N').ZI42D                        01578700
&ZC                   SETC  '&XFREERTN'                                 01578800
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI42D               01578900
&ZCGPR                SETC  '=AL4(&XFREERTN)'                           01579000
.*                                                                      01579100
.ZI42D                ANOP  ,                                           01579200
.*                                                                      01579300
&ZOPN                 SETA  &ZOPN+1                                     01579400
&ZOPL(&ZOPN)          SETC  ' '                                         01579500
&ZOPO(&ZOPN)          SETC  'MVC'                                       01579600
&ZOPV(&ZOPN)          SETC  '44(4,1),&ZCGPR'                            01579700
&ZOPD(&ZOPN)          SETC  '++ &ZXFREERTN XFREERTN'                    01579800
.*                                                                      01579900
.ZI42E                ANOP  ,                                           01580000
.*-------------------------------------------------------------------   01580100
.***AI.L18  XGAP F                                                      01580200
         AIF   ('&XGAP' NE '0').ZI43                                    01580300
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZI43  CK *        01580400
&ZXGAP                SETC  ''             RESET INPUT/OUTPUT           01580500
.ZI43                 ANOP  ,                                           01580600
.*-------------------------------------------------------------------   01580700
.***AI.L25  XGAP F                                                      01580800
                      AIF   ('&ZXGAP' EQ '').ZI43E                      01580900
                      AIF   ('&ZXGAP' EQ 'OUTPUT').ZI43E                01581000
&ZCGPR                SETC  '&XGAP'                                     01581100
         AIF   ('&XGAP' NE '0').ZI43A                                   01581200
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI43E                          01581300
.*                                                                      01581400
&ZCGPR                SETC  '=XL4''00'''                                01581500
.ZI43A                ANOP  ,                                           01581600
.*                                                                      01581700
                      AIF   ('&XGAP'(1,1) NE '(').ZI43B                 01581800
&ZCGPR   SETC  '0('.'&XGAP'(2,K'&XGAP-2).')'                            01581900
                      AGO   .ZI43D                                      01582000
.ZI43B                ANOP  ,                                           01582100
.*                                                                      01582200
&ZC                   SETC  '&XGAP'(1,1)                                01582300
                      AIF   (T'&ZC NE 'N').ZI43D                        01582400
&ZC                   SETC  '&XGAP'                                     01582500
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI43D               01582600
&ZCGPR                SETC  '=FL4''&XGAP'''                             01582700
.*                                                                      01582800
.ZI43D                ANOP  ,                                           01582900
.*                                                                      01583000
&ZOPN                 SETA  &ZOPN+1                                     01583100
&ZOPL(&ZOPN)          SETC  ' '                                         01583200
&ZOPO(&ZOPN)          SETC  'MVC'                                       01583300
&ZOPV(&ZOPN)          SETC  '48(4,1),&ZCGPR'                            01583400
&ZOPD(&ZOPN)          SETC  '++ &ZXGAP XGAP'                            01583500
.*                                                                      01583600
.ZI43E                ANOP  ,                                           01583700
.*-------------------------------------------------------------------   01583800
.***AI.L18  XSRCGAP F                                                   01583900
         AIF   ('&XSRCGAP' NE '0').ZI44                                 01584000
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZI44  CK *        01584100
&ZXSRCGAP             SETC  ''             RESET INPUT/OUTPUT           01584200
.ZI44                 ANOP  ,                                           01584300
.*-------------------------------------------------------------------   01584400
.***AI.L25  XSRCGAP F                                                   01584500
                      AIF   ('&ZXSRCGAP' EQ '').ZI44E                   01584600
                      AIF   ('&ZXSRCGAP' EQ 'OUTPUT').ZI44E             01584700
&ZCGPR                SETC  '&XSRCGAP'                                  01584800
         AIF   ('&XSRCGAP' NE '0').ZI44A                                01584900
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI44E                          01585000
.*                                                                      01585100
&ZCGPR                SETC  '=XL4''00'''                                01585200
.ZI44A                ANOP  ,                                           01585300
.*                                                                      01585400
                      AIF   ('&XSRCGAP'(1,1) NE '(').ZI44B              01585500
&ZCGPR   SETC  '0('.'&XSRCGAP'(2,K'&XSRCGAP-2).')'                      01585600
                      AGO   .ZI44D                                      01585700
.ZI44B                ANOP  ,                                           01585800
.*                                                                      01585900
&ZC                   SETC  '&XSRCGAP'(1,1)                             01586000
                      AIF   (T'&ZC NE 'N').ZI44D                        01586100
&ZC                   SETC  '&XSRCGAP'                                  01586200
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI44D               01586300
&ZCGPR                SETC  '=FL4''&XSRCGAP'''                          01586400
.*                                                                      01586500
.ZI44D                ANOP  ,                                           01586600
.*                                                                      01586700
&ZOPN                 SETA  &ZOPN+1                                     01586800
&ZOPL(&ZOPN)          SETC  ' '                                         01586900
&ZOPO(&ZOPN)          SETC  'MVC'                                       01587000
&ZOPV(&ZOPN)          SETC  '52(4,1),&ZCGPR'                            01587100
&ZOPD(&ZOPN)          SETC  '++ &ZXSRCGAP XSRCGAP'                      01587200
.*                                                                      01587300
.ZI44E                ANOP  ,                                           01587400
.*-------------------------------------------------------------------   01587500
.***AI.L18  XTARGGAP F                                                  01587600
         AIF   ('&XTARGGAP' NE '0').ZI45                                01587700
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZI45  CK *        01587800
&ZXTARGGAP            SETC  ''             RESET INPUT/OUTPUT           01587900
.ZI45                 ANOP  ,                                           01588000
.*-------------------------------------------------------------------   01588100
.***AI.L25  XTARGGAP F                                                  01588200
                      AIF   ('&ZXTARGGAP' EQ '').ZI45E                  01588300
                      AIF   ('&ZXTARGGAP' EQ 'OUTPUT').ZI45E            01588400
&ZCGPR                SETC  '&XTARGGAP'                                 01588500
         AIF   ('&XTARGGAP' NE '0').ZI45A                               01588600
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI45E                          01588700
.*                                                                      01588800
&ZCGPR                SETC  '=XL4''00'''                                01588900
.ZI45A                ANOP  ,                                           01589000
.*                                                                      01589100
                      AIF   ('&XTARGGAP'(1,1) NE '(').ZI45B             01589200
&ZCGPR   SETC  '0('.'&XTARGGAP'(2,K'&XTARGGAP-2).')'                    01589300
                      AGO   .ZI45D                                      01589400
.ZI45B                ANOP  ,                                           01589500
.*                                                                      01589600
&ZC                   SETC  '&XTARGGAP'(1,1)                            01589700
                      AIF   (T'&ZC NE 'N').ZI45D                        01589800
&ZC                   SETC  '&XTARGGAP'                                 01589900
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI45D               01590000
&ZCGPR                SETC  '=FL4''&XTARGGAP'''                         01590100
.*                                                                      01590200
.ZI45D                ANOP  ,                                           01590300
.*                                                                      01590400
&ZOPN                 SETA  &ZOPN+1                                     01590500
&ZOPL(&ZOPN)          SETC  ' '                                         01590600
&ZOPO(&ZOPN)          SETC  'MVC'                                       01590700
&ZOPV(&ZOPN)          SETC  '56(4,1),&ZCGPR'                            01590800
&ZOPD(&ZOPN)          SETC  '++ &ZXTARGGAP XTARGGAP'                    01590900
.*                                                                      01591000
.ZI45E                ANOP  ,                                           01591100
.*-------------------------------------------------------------------   01591200
.***AI.L25  XSRCNUM F                                                   01591300
                      AIF   ('&ZXSRCNUM' EQ '').ZI46E                   01591400
                      AIF   ('&ZXSRCNUM' EQ 'OUTPUT').ZI46E             01591500
&ZCGPR                SETC  '&XSRCNUM'                                  01591600
.*                                                                      01591700
                      AIF   ('&XSRCNUM'(1,1) NE '(').ZI46B              01591800
&ZCGPR   SETC  '0('.'&XSRCNUM'(2,K'&XSRCNUM-2).')'                      01591900
                      AGO   .ZI46D                                      01592000
.ZI46B                ANOP  ,                                           01592100
.*                                                                      01592200
&ZC                   SETC  '&XSRCNUM'(1,1)                             01592300
                      AIF   (T'&ZC NE 'N').ZI46D                        01592400
&ZC                   SETC  '&XSRCNUM'                                  01592500
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI46D               01592600
&ZCGPR                SETC  '=FL4''&XSRCNUM'''                          01592700
.*                                                                      01592800
.ZI46D                ANOP  ,                                           01592900
.*                                                                      01593000
&ZOPN                 SETA  &ZOPN+1                                     01593100
&ZOPL(&ZOPN)          SETC  ' '                                         01593200
&ZOPO(&ZOPN)          SETC  'MVC'                                       01593300
&ZOPV(&ZOPN)          SETC  '60(4,1),&ZCGPR'                            01593400
&ZOPD(&ZOPN)          SETC  '++ &ZXSRCNUM XSRCNUM'                      01593500
.*                                                                      01593600
.ZI46E                ANOP  ,                                           01593700
.*-------------------------------------------------------------------   01593800
.***AI.L25  XTARGNUM F                                                  01593900
                      AIF   ('&ZXTARGNUM' EQ '').ZI47E                  01594000
                      AIF   ('&ZXTARGNUM' EQ 'OUTPUT').ZI47E            01594100
&ZCGPR                SETC  '&XTARGNUM'                                 01594200
.*                                                                      01594300
                      AIF   ('&XTARGNUM'(1,1) NE '(').ZI47B             01594400
&ZCGPR   SETC  '0('.'&XTARGNUM'(2,K'&XTARGNUM-2).')'                    01594500
                      AGO   .ZI47D                                      01594600
.ZI47B                ANOP  ,                                           01594700
.*                                                                      01594800
&ZC                   SETC  '&XTARGNUM'(1,1)                            01594900
                      AIF   (T'&ZC NE 'N').ZI47D                        01595000
&ZC                   SETC  '&XTARGNUM'                                 01595100
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI47D               01595200
&ZCGPR                SETC  '=FL4''&XTARGNUM'''                         01595300
.*                                                                      01595400
.ZI47D                ANOP  ,                                           01595500
.*                                                                      01595600
&ZOPN                 SETA  &ZOPN+1                                     01595700
&ZOPL(&ZOPN)          SETC  ' '                                         01595800
&ZOPO(&ZOPN)          SETC  'MVC'                                       01595900
&ZOPV(&ZOPN)          SETC  '64(4,1),&ZCGPR'                            01596000
&ZOPD(&ZOPN)          SETC  '++ &ZXTARGNUM XTARGNUM'                    01596100
.*                                                                      01596200
.ZI47E                ANOP  ,                                           01596300
.*-------------------------------------------------------------------   01596400
.***AI.L19  XSRCLIST A                                                  01596500
                      AIF   ('&ZXSRCLIST' EQ '').ZI48H                  01596600
&ZCLNG                SETC  '&XSRCLIST'                                 01596700
&ZCGPR                SETC  '14'                                        01596800
         AIF   ('&XSRCLIST'(1,1) EQ '(').ZI48F  IN GPR                  01596900
.*                                                                      01597000
&ZOPN                 SETA  &ZOPN+1                                     01597100
&ZOPL(&ZOPN)          SETC  ' '                                         01597200
&ZOPO(&ZOPN)          SETC  'LA'                                        01597300
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             01597400
&ZOPD(&ZOPN)          SETC  '++ &ZXSRCLIST XSRCLIST'                    01597500
.*                                                                      01597600
                      AGO   .ZI48G                                      01597700
.*                                                                      01597800
.ZI48F                ANOP  ,                                           01597900
&ZCGPR   SETC  '&XSRCLIST'(2,K'&XSRCLIST-2)                             01598000
.*                                                                      01598100
.ZI48G                ANOP  ,                                           01598200
.*                                                                      01598300
&ZOPN                 SETA  &ZOPN+1                                     01598400
&ZOPL(&ZOPN)          SETC  ' '                                         01598500
&ZOPO(&ZOPN)          SETC  'ST'                                        01598600
&ZOPV(&ZOPN)          SETC  '&ZCGPR,68(,1)'                             01598700
&ZOPD(&ZOPN)          SETC  '++ &ZXSRCLIST XSRCLIST'                    01598800
.*                                                                      01598900
.ZI48H                ANOP  ,                                           01599000
.*-------------------------------------------------------------------   01599100
.***AI.L19  XTARGLIST A                                                 01599200
                      AIF   ('&ZXTARGLIST' EQ '').ZI49H                 01599300
&ZCLNG                SETC  '&XTARGLIST'                                01599400
&ZCGPR                SETC  '14'                                        01599500
         AIF   ('&XTARGLIST'(1,1) EQ '(').ZI49F  IN GPR                 01599600
.*                                                                      01599700
&ZOPN                 SETA  &ZOPN+1                                     01599800
&ZOPL(&ZOPN)          SETC  ' '                                         01599900
&ZOPO(&ZOPN)          SETC  'LA'                                        01600000
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             01600100
&ZOPD(&ZOPN)          SETC  '++ &ZXTARGLIST XTARGLIST'                  01600200
.*                                                                      01600300
                      AGO   .ZI49G                                      01600400
.*                                                                      01600500
.ZI49F                ANOP  ,                                           01600600
&ZCGPR   SETC  '&XTARGLIST'(2,K'&XTARGLIST-2)                           01600700
.*                                                                      01600800
.ZI49G                ANOP  ,                                           01600900
.*                                                                      01601000
&ZOPN                 SETA  &ZOPN+1                                     01601100
&ZOPL(&ZOPN)          SETC  ' '                                         01601200
&ZOPO(&ZOPN)          SETC  'ST'                                        01601300
&ZOPV(&ZOPN)          SETC  '&ZCGPR,72(,1)'                             01601400
&ZOPD(&ZOPN)          SETC  '++ &ZXTARGLIST XTARGLIST'                  01601500
.*                                                                      01601600
.ZI49H                ANOP  ,                                           01601700
.*-------------------------------------------------------------------   01601800
.***AI.L18  XUTILRTN F                                                  01601900
         AIF   ('&XUTILRTN' NE '0').ZI52                                01602000
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZI52  CK *        01602100
&ZXUTILRTN            SETC  ''             RESET INPUT/OUTPUT           01602200
.ZI52                 ANOP  ,                                           01602300
.*-------------------------------------------------------------------   01602400
.***AI.L25  XUTILRTN F                                                  01602500
                      AIF   ('&ZXUTILRTN' EQ '').ZI52E                  01602600
                      AIF   ('&ZXUTILRTN' EQ 'OUTPUT').ZI52E            01602700
&ZCGPR                SETC  '&XUTILRTN'                                 01602800
         AIF   ('&XUTILRTN' NE '0').ZI52A                               01602900
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI52E                          01603000
.*                                                                      01603100
&ZCGPR                SETC  '=XL4''00'''                                01603200
.ZI52A                ANOP  ,                                           01603300
.*                                                                      01603400
                      AIF   ('&XUTILRTN'(1,1) NE '(').ZI52B             01603500
&ZCGPR   SETC  '0('.'&XUTILRTN'(2,K'&XUTILRTN-2).')'                    01603600
                      AGO   .ZI52D                                      01603700
.ZI52B                ANOP  ,                                           01603800
.*                                                                      01603900
&ZC                   SETC  '&XUTILRTN'(1,1)                            01604000
                      AIF   (T'&ZC NE 'N').ZI52D                        01604100
&ZC                   SETC  '&XUTILRTN'                                 01604200
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI52D               01604300
&ZCGPR                SETC  '=AL4(&XUTILRTN)'                           01604400
.*                                                                      01604500
.ZI52D                ANOP  ,                                           01604600
.*                                                                      01604700
&ZOPN                 SETA  &ZOPN+1                                     01604800
&ZOPL(&ZOPN)          SETC  ' '                                         01604900
&ZOPO(&ZOPN)          SETC  'MVC'                                       01605000
&ZOPV(&ZOPN)          SETC  '84(4,1),&ZCGPR'                            01605100
&ZOPD(&ZOPN)          SETC  '++ &ZXUTILRTN XUTILRTN'                    01605200
.*                                                                      01605300
.ZI52E                ANOP  ,                                           01605400
.*-------------------------------------------------------------------   01605500
.***AI.L18  XTHREAD CL4                                                 01605600
         AIF   ('&XTHREAD' NE '0').ZI55                                 01605700
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZI55  CK *        01605800
&ZXTHREAD             SETC  ''             RESET INPUT/OUTPUT           01605900
.ZI55                 ANOP  ,                                           01606000
.*-------------------------------------------------------------------   01606100
.***AI.L25  XTHREAD CL4                                                 01606200
                      AIF   ('&ZXTHREAD' EQ '').ZI55E                   01606300
                      AIF   ('&ZXTHREAD' EQ 'OUTPUT').ZI55E             01606400
&ZCGPR                SETC  '&XTHREAD'                                  01606500
         AIF   ('&XTHREAD' NE '0').ZI55A                                01606600
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI55E                          01606700
.*                                                                      01606800
&ZCGPR                SETC  '=XL4''00'''                                01606900
.ZI55A                ANOP  ,                                           01607000
.*                                                                      01607100
                      AIF   ('&XTHREAD'(1,1) NE '(').ZI55B              01607200
&ZCGPR   SETC  '0('.'&XTHREAD'(2,K'&XTHREAD-2).')'                      01607300
.ZI55B                ANOP  ,                                           01607400
.*                                                                      01607500
&ZOPN                 SETA  &ZOPN+1                                     01607600
&ZOPL(&ZOPN)          SETC  ' '                                         01607700
&ZOPO(&ZOPN)          SETC  'MVC'                                       01607800
&ZOPV(&ZOPN)          SETC  '96(4,1),&ZCGPR'                            01607900
&ZOPD(&ZOPN)          SETC  '++ &ZXTHREAD XTHREAD'                      01608000
.*                                                                      01608100
.ZI55E                ANOP  ,                                           01608200
.*-------------------------------------------------------------------   01608300
.***AI.L25  XPADCHAR CL1                                                01608400
                      AIF   ('&ZXPADCHAR' EQ '').ZI56E                  01608500
                      AIF   ('&ZXPADCHAR' EQ 'OUTPUT').ZI56E            01608600
&ZCGPR                SETC  '&XPADCHAR'                                 01608700
.*                                                                      01608800
                      AIF   ('&XPADCHAR'(1,1) NE '(').ZI56B             01608900
&ZCGPR   SETC  '0('.'&XPADCHAR'(2,K'&XPADCHAR-2).')'                    01609000
.ZI56B                ANOP  ,                                           01609100
.*                                                                      01609200
&ZOPN                 SETA  &ZOPN+1                                     01609300
&ZOPL(&ZOPN)          SETC  ' '                                         01609400
&ZOPO(&ZOPN)          SETC  'MVC'                                       01609500
&ZOPV(&ZOPN)          SETC  '100(1,1),&ZCGPR'                           01609600
&ZOPD(&ZOPN)          SETC  '++ &ZXPADCHAR XPADCHAR'                    01609700
.*                                                                      01609800
.ZI56E                ANOP  ,                                           01609900
.*-------------------------------------------------------------------   01610000
.***AI.L07 XPAD AL1                                                     01610100
&ZW                   SETC  ''                                          01610200
.*-------------------------------------------------------------------   01610300
.***AI.L15 XPAD "NO" AL1                                                01610400
         AIF   ('&XPAD' NE 'NO').ZI58A                                  01610500
&ZW                   SETC  '0'                                         01610600
.ZI58A                ANOP  ,                                           01610700
.*-------------------------------------------------------------------   01610800
.***AI.L15 XPAD "YES" AL1                                               01610900
         AIF   ('&XPAD' NE 'YES').ZI59A                                 01611000
&ZW                   SETC  '128'                                       01611100
.ZI59A                ANOP  ,                                           01611200
.*-------------------------------------------------------------------   01611300
.***AI.L17 XPAD AL1                                                     01611400
                      AIF   ('&ZW' NE '0').ZI59C                        01611500
                      AIF   ('&XMFSCK' EQ 'COMPLETE').ZI59B             01611600
.ZI59C                ANOP  ,                                           01611700
                      AIF   ('&ZW' EQ '').ZI59B                         01611800
.*                                                                      01611900
&ZOPN                 SETA  &ZOPN+1                                     01612000
&ZOPL(&ZOPN)          SETC  ' '                                         01612100
&ZOPO(&ZOPN)          SETC  'MVI'                                       01612200
&ZOPV(&ZOPN)          SETC  '101(1),&ZW'                                01612300
&ZOPD(&ZOPN)          SETC  '++ &ZXPAD XPAD'                            01612400
.ZI59B                ANOP  ,                                           01612500
.*-------------------------------------------------------------------   01612600
.***AI.L25  XPOOLTOKN CL10                                              01612700
                      AIF   ('&ZXPOOLTOKN' EQ '').ZI60E                 01612800
                      AIF   ('&ZXPOOLTOKN' EQ 'OUTPUT').ZI60E           01612900
&ZCGPR                SETC  '&XPOOLTOKN'                                01613000
.*                                                                      01613100
                      AIF   ('&XPOOLTOKN'(1,1) NE '(').ZI60B            01613200
&ZCGPR   SETC  '0('.'&XPOOLTOKN'(2,K'&XPOOLTOKN-2).')'                  01613300
.ZI60B                ANOP  ,                                           01613400
.*                                                                      01613500
&ZOPN                 SETA  &ZOPN+1                                     01613600
&ZOPL(&ZOPN)          SETC  ' '                                         01613700
&ZOPO(&ZOPN)          SETC  'MVC'                                       01613800
&ZOPV(&ZOPN)          SETC  '102(10,1),&ZCGPR'                          01613900
&ZOPD(&ZOPN)          SETC  '++ &ZXPOOLTOKN XPOOLTOKN'                  01614000
.*                                                                      01614100
.ZI60E                ANOP  ,                                           01614200
.*-------------------------------------------------------------------   01614300
.***AI.L07 XSKIPBUF AL1                                                 01614400
&ZW                   SETC  ''                                          01614500
.*-------------------------------------------------------------------   01614600
.***AI.L15 XSKIPBUF "NO" AL1                                            01614700
         AIF   ('&XSKIPBUF' NE 'NO').ZI62A                              01614800
&ZW                   SETC  '0'                                         01614900
.ZI62A                ANOP  ,                                           01615000
.*-------------------------------------------------------------------   01615100
.***AI.L15 XSKIPBUF "YES" AL1                                           01615200
         AIF   ('&XSKIPBUF' NE 'YES').ZI63A                             01615300
&ZW                   SETC  '128'                                       01615400
.ZI63A                ANOP  ,                                           01615500
.*-------------------------------------------------------------------   01615600
.***AI.L17 XSKIPBUF AL1                                                 01615700
                      AIF   ('&ZW' NE '0').ZI63C                        01615800
                      AIF   ('&XMFSCK' EQ 'COMPLETE').ZI63B             01615900
.ZI63C                ANOP  ,                                           01616000
                      AIF   ('&ZW' EQ '').ZI63B                         01616100
.*                                                                      01616200
&ZOPN                 SETA  &ZOPN+1                                     01616300
&ZOPL(&ZOPN)          SETC  ' '                                         01616400
&ZOPO(&ZOPN)          SETC  'MVI'                                       01616500
&ZOPV(&ZOPN)          SETC  '112(1),&ZW'                                01616600
&ZOPD(&ZOPN)          SETC  '++ &ZXSKIPBUF XSKIPBUF'                    01616700
.ZI63B                ANOP  ,                                           01616800
.*-------------------------------------------------------------------   01616900
.***AI.L07 XCSMUSER AL1                                                 01617000
&ZW                   SETC  ''                                          01617100
.*-------------------------------------------------------------------   01617200
.***AI.L15 XCSMUSER "NO" AL1                                            01617300
         AIF   ('&XCSMUSER' NE 'NO').ZI65A                              01617400
&ZW                   SETC  '0'                                         01617500
.ZI65A                ANOP  ,                                           01617600
.*-------------------------------------------------------------------   01617700
.***AI.L15 XCSMUSER "YES" AL1                                           01617800
         AIF   ('&XCSMUSER' NE 'YES').ZI66A                             01617900
&ZW                   SETC  '128'                                       01618000
.ZI66A                ANOP  ,                                           01618100
.*-------------------------------------------------------------------   01618200
.***AI.L17 XCSMUSER AL1                                                 01618300
                      AIF   ('&ZW' NE '0').ZI66C                        01618400
                      AIF   ('&XMFSCK' EQ 'COMPLETE').ZI66B             01618500
.ZI66C                ANOP  ,                                           01618600
                      AIF   ('&ZW' EQ '').ZI66B                         01618700
.*                                                                      01618800
&ZOPN                 SETA  &ZOPN+1                                     01618900
&ZOPL(&ZOPN)          SETC  ' '                                         01619000
&ZOPO(&ZOPN)          SETC  'MVI'                                       01619100
&ZOPV(&ZOPN)          SETC  '113(1),&ZW'                                01619200
&ZOPD(&ZOPN)          SETC  '++ &ZXCSMUSER XCSMUSER'                    01619300
.ZI66B                ANOP  ,                                           01619400
.*-------------------------------------------------------------------   01619500
.***AI.L05 XFLAGS1 BL1                                                  01619600
&ZW                   SETC  ''                                          01619700
&ZCLNG                SETC  ''             RESET BIT ON FLAG            01619800
&ZMS                  SETC  ''                                          01619900
&ZC                   SETC  ''                                          01620000
.*-------------------------------------------------------------------   01620100
.***AI.L08 XFLAGS1 "64"                                                 01620200
.***      BL1'1XXXXXXX'                                                 01620300
         AIF   ('&XBACK' NE '64').ZI68A                                 01620400
&ZW                   SETC  '&ZW.10000000'                              01620500
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              01620600
&ZMS                  SETC  '&ZMS.11111111'                             01620700
                      AGO   .ZI68C                                      01620800
.*                                                                      01620900
.ZI68A                ANOP  ,                                           01621000
&ZW                   SETC  '&ZW.00000000'                              01621100
         AIF   ('&ZXBACK' EQ '').ZI68B                                  01621200
&ZMS                  SETC  '&ZMS.01111111'                             01621300
&ZC                   SETC  'YES'          SET BIT OFF FLAG             01621400
                      AGO   .ZI68C                                      01621500
.*                                                                      01621600
.ZI68B                ANOP  ,                                           01621700
&ZMS                  SETC  '&ZMS.11111111'                             01621800
.ZI68C                ANOP  ,                                           01621900
.*-------------------------------------------------------------------   01622000
.***AI.L11 XFLAGS1 BL1                                                  01622100
                      AIF   ('&XMFSCK' NE 'NOCHECK').ZI68D              01622200
                      AIF   ('&ZC' NE 'YES').ZI68D                      01622300
&ZOPN                 SETA  &ZOPN+1                                     01622400
&ZOPL(&ZOPN)          SETC  ' '                                         01622500
&ZOPO(&ZOPN)          SETC  'NI'                                        01622600
&ZOPV(&ZOPN)          SETC  '114(1),B''&ZMS'''                          01622700
&ZOPD(&ZOPN)          SETC  '++ INPUT BL1'                              01622800
.ZI68D                ANOP  ,                                           01622900
                      AIF   ('&ZCLNG' NE 'YES').ZI68E  ALL ZERO BITS    01623000
&ZOPN                 SETA  &ZOPN+1                                     01623100
&ZOPL(&ZOPN)          SETC  ' '                                         01623200
&ZOPO(&ZOPN)          SETC  'OI'                                        01623300
&ZOPV(&ZOPN)          SETC  '114(1),B''&ZW'''                           01623400
&ZOPD(&ZOPN)          SETC  '++ INPUT BL1'                              01623500
.ZI68E                ANOP  ,                                           01623600
.*-------------------------------------------------------------------   01623700
.***AI.LVER01                                                           01623800
                      AIF  (&XPLISTVER LT 1).ZI70Z                      01623900
.*-------------------------------------------------------------------   01624000
.***AI.L18  XCOMPID XL1                                                 01624100
         AIF   ('&XCOMPID' NE '0').ZI70                                 01624200
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZI70  CK *        01624300
&ZXCOMPID             SETC  ''             RESET INPUT/OUTPUT           01624400
.ZI70                 ANOP  ,                                           01624500
.*-------------------------------------------------------------------   01624600
.***AI.L25  XCOMPID XL1                                                 01624700
                      AIF   ('&ZXCOMPID' EQ '').ZI70E                   01624800
                      AIF   ('&ZXCOMPID' EQ 'OUTPUT').ZI70E             01624900
&ZCGPR                SETC  '&XCOMPID'                                  01625000
         AIF   ('&XCOMPID' NE '0').ZI70A                                01625100
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI70E                          01625200
.*                                                                      01625300
&ZCGPR                SETC  '=XL1''00'''                                01625400
.ZI70A                ANOP  ,                                           01625500
.*                                                                      01625600
                      AIF   ('&XCOMPID'(1,1) NE '(').ZI70B              01625700
&ZCGPR   SETC  '0('.'&XCOMPID'(2,K'&XCOMPID-2).')'                      01625800
                      AGO   .ZI70D                                      01625900
.ZI70B                ANOP  ,                                           01626000
.*                                                                      01626100
&ZC                   SETC  '&XCOMPID'(1,1)                             01626200
                      AIF   (T'&ZC NE 'N').ZI70D                        01626300
&ZC                   SETC  '&XCOMPID'                                  01626400
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI70D               01626500
&ZCGPR                SETC  '=AL1(&XCOMPID)'                            01626600
.*                                                                      01626700
.ZI70D                ANOP  ,                                           01626800
.*                                                                      01626900
&ZOPN                 SETA  &ZOPN+1                                     01627000
&ZOPL(&ZOPN)          SETC  ' '                                         01627100
&ZOPO(&ZOPN)          SETC  'MVC'                                       01627200
&ZOPV(&ZOPN)          SETC  '116(1,1),&ZCGPR'                           01627300
&ZOPD(&ZOPN)          SETC  '++ &ZXCOMPID XCOMPID'                      01627400
.*                                                                      01627500
.ZI70E                ANOP  ,                                           01627600
.*-------------------------------------------------------------------   01627700
.***AI.LVER02                                                           01627800
.ZI70Z                ANOP  ,                                           01627900
.*-------------------------------------------------------------------   01628000
.***AI.LVER01                                                           01628100
                      AIF  (&XPLISTVER LT 1).ZI71Z                      01628200
.*-------------------------------------------------------------------   01628300
.***AI.LVER02                                                           01628400
.ZI71Z                ANOP  ,                                           01628500
.*-------------------------------------------------------------------   01628600
.***AI.LVER01                                                           01628700
                      AIF  (&XPLISTVER LT 1).ZI72Z                      01628800
.*-------------------------------------------------------------------   01628900
.***AI.L18  XCOMPUSER CL4                                               01629000
         AIF   ('&XCOMPUSER' NE '0').ZI72                               01629100
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZI72  CK *        01629200
&ZXCOMPUSER           SETC  ''             RESET INPUT/OUTPUT           01629300
.ZI72                 ANOP  ,                                           01629400
.*-------------------------------------------------------------------   01629500
.***AI.L25  XCOMPUSER CL4                                               01629600
                      AIF   ('&ZXCOMPUSER' EQ '').ZI72E                 01629700
                      AIF   ('&ZXCOMPUSER' EQ 'OUTPUT').ZI72E           01629800
&ZCGPR                SETC  '&XCOMPUSER'                                01629900
         AIF   ('&XCOMPUSER' NE '0').ZI72A                              01630000
         AIF   ('&XMFSCK' EQ 'COMPLETE').ZI72E                          01630100
.*                                                                      01630200
&ZCGPR                SETC  '=XL4''00'''                                01630300
.ZI72A                ANOP  ,                                           01630400
.*                                                                      01630500
                      AIF   ('&XCOMPUSER'(1,1) NE '(').ZI72B            01630600
&ZCGPR   SETC  '0('.'&XCOMPUSER'(2,K'&XCOMPUSER-2).')'                  01630700
.ZI72B                ANOP  ,                                           01630800
.*                                                                      01630900
&ZOPN                 SETA  &ZOPN+1                                     01631000
&ZOPL(&ZOPN)          SETC  ' '                                         01631100
&ZOPO(&ZOPN)          SETC  'MVC'                                       01631200
&ZOPV(&ZOPN)          SETC  '120(4,1),&ZCGPR'                           01631300
&ZOPD(&ZOPN)          SETC  '++ &ZXCOMPUSER XCOMPUSER'                  01631400
.*                                                                      01631500
.ZI72E                ANOP  ,                                           01631600
.*-------------------------------------------------------------------   01631700
.***AI.LVER02                                                           01631800
.ZI72Z                ANOP  ,                                           01631900
.*-------------------------------------------------------------------   01632000
.***AI.LVER01                                                           01632100
                      AIF  (&XPLISTVER LT 1).ZI73Z                      01632200
.*-------------------------------------------------------------------   01632300
.***AI.LVER02                                                           01632400
.ZI73Z                ANOP  ,                                           01632500
.*-------------------------------------------------------------------   01632600
.***AI.LVER01                                                           01632700
                      AIF  (&XPLISTVER LT 2).ZI74Z                      01632800
.*-------------------------------------------------------------------   01632900
.***AI.LVER02                                                           01633000
.ZI74Z                ANOP  ,                                           01633100
.*-------------------------------------------------------------------   01633200
.***AI.LVER01                                                           01633300
                      AIF  (&XPLISTVER LT 2).ZI75Z                      01633400
.*-------------------------------------------------------------------   01633500
.***AI.L19 ADDR64 XBUFLST64 AD                                          01633600
                      AIF   ('&ZXBUFLST64' EQ '').ZI75H                 01633700
&ZCLNG                SETC  '&XBUFLST64'                                01633800
&ZCGPR                SETC  '14'                                        01633900
         AIF   ('&XBUFLST64'(1,1) EQ '(').ZI75F  IN GPR                 01634000
.*                                                                      01634100
&ZOPN                 SETA  &ZOPN+1                                     01634200
&ZOPL(&ZOPN)          SETC  ' '                                         01634300
&ZOPO(&ZOPN)          SETC  'LA'                                        01634400
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             01634500
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFLST64 XBUFLST64'                  01634600
.*                                                                      01634700
                      AGO   .ZI75G                                      01634800
.*                                                                      01634900
.ZI75F                ANOP  ,                                           01635000
&ZCGPR   SETC  '&XBUFLST64'(2,K'&XBUFLST64-2)                           01635100
.*                                                                      01635200
.ZI75G                ANOP  ,                                           01635300
                      AIF   ('&SYSAM64' EQ 'YES').ZI75H1A               01635400
                      AIF   ('&XMFSCK' NE 'NOCHECK').ZI75C2             01635500
.*                                                                      01635600
&ZOPN                 SETA  &ZOPN+1                                     01635700
&ZOPL(&ZOPN)          SETC  ' '                                         01635800
&ZOPO(&ZOPN)          SETC  'XC'                                        01635900
&ZOPV(&ZOPN)          SETC  '136(4,1),136(1)'                           01636000
.ZI75C2               ANOP  ,                                           01636100
.*                                                                      01636200
&ZOPN                 SETA  &ZOPN+1                                     01636300
&ZOPL(&ZOPN)          SETC  ' '                                         01636400
&ZOPO(&ZOPN)          SETC  'ST'                                        01636500
&ZOPV(&ZOPN)          SETC  '&ZCGPR,4+136(,1)'                          01636600
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFLST64 XBUFLST64'                  01636700
.*                                                                      01636800
                      AGO   .ZI75H                                      01636900
.ZI75H1A              ANOP  ,                                           01637000
.*                                                                      01637100
&ZOPN                 SETA  &ZOPN+1                                     01637200
&ZOPL(&ZOPN)          SETC  ' '                                         01637300
&ZOPO(&ZOPN)          SETC  'STG'                                       01637400
&ZOPV(&ZOPN)          SETC  '&ZCGPR,136(,1)'                            01637500
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFLST64 XBUFLST64'                  01637600
.*                                                                      01637700
.ZI75H                ANOP  ,                                           01637800
.*-------------------------------------------------------------------   01637900
.***AI.LVER02                                                           01638000
.ZI75Z                ANOP  ,                                           01638100
.*-------------------------------------------------------------------   01638200
.***AI.LVER01                                                           01638300
                      AIF  (&XPLISTVER LT 2).ZI76Z                      01638400
.*-------------------------------------------------------------------   01638500
.***AI.L19 ADDR64 XSRCLST64 AD                                          01638600
                      AIF   ('&ZXSRCLST64' EQ '').ZI76H                 01638700
&ZCLNG                SETC  '&XSRCLST64'                                01638800
&ZCGPR                SETC  '14'                                        01638900
         AIF   ('&XSRCLST64'(1,1) EQ '(').ZI76F  IN GPR                 01639000
.*                                                                      01639100
&ZOPN                 SETA  &ZOPN+1                                     01639200
&ZOPL(&ZOPN)          SETC  ' '                                         01639300
&ZOPO(&ZOPN)          SETC  'LA'                                        01639400
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             01639500
&ZOPD(&ZOPN)          SETC  '++ &ZXSRCLST64 XSRCLST64'                  01639600
.*                                                                      01639700
                      AGO   .ZI76G                                      01639800
.*                                                                      01639900
.ZI76F                ANOP  ,                                           01640000
&ZCGPR   SETC  '&XSRCLST64'(2,K'&XSRCLST64-2)                           01640100
.*                                                                      01640200
.ZI76G                ANOP  ,                                           01640300
                      AIF   ('&SYSAM64' EQ 'YES').ZI76H1A               01640400
                      AIF   ('&XMFSCK' NE 'NOCHECK').ZI76C2             01640500
.*                                                                      01640600
&ZOPN                 SETA  &ZOPN+1                                     01640700
&ZOPL(&ZOPN)          SETC  ' '                                         01640800
&ZOPO(&ZOPN)          SETC  'XC'                                        01640900
&ZOPV(&ZOPN)          SETC  '144(4,1),144(1)'                           01641000
.ZI76C2               ANOP  ,                                           01641100
.*                                                                      01641200
&ZOPN                 SETA  &ZOPN+1                                     01641300
&ZOPL(&ZOPN)          SETC  ' '                                         01641400
&ZOPO(&ZOPN)          SETC  'ST'                                        01641500
&ZOPV(&ZOPN)          SETC  '&ZCGPR,4+144(,1)'                          01641600
&ZOPD(&ZOPN)          SETC  '++ &ZXSRCLST64 XSRCLST64'                  01641700
.*                                                                      01641800
                      AGO   .ZI76H                                      01641900
.ZI76H1A              ANOP  ,                                           01642000
.*                                                                      01642100
&ZOPN                 SETA  &ZOPN+1                                     01642200
&ZOPL(&ZOPN)          SETC  ' '                                         01642300
&ZOPO(&ZOPN)          SETC  'STG'                                       01642400
&ZOPV(&ZOPN)          SETC  '&ZCGPR,144(,1)'                            01642500
&ZOPD(&ZOPN)          SETC  '++ &ZXSRCLST64 XSRCLST64'                  01642600
.*                                                                      01642700
.ZI76H                ANOP  ,                                           01642800
.*-------------------------------------------------------------------   01642900
.***AI.LVER02                                                           01643000
.ZI76Z                ANOP  ,                                           01643100
.*-------------------------------------------------------------------   01643200
.***AI.LVER01                                                           01643300
                      AIF  (&XPLISTVER LT 2).ZI77Z                      01643400
.*-------------------------------------------------------------------   01643500
.***AI.L19 ADDR64 XTARLST64 AD                                          01643600
                      AIF   ('&ZXTARLST64' EQ '').ZI77H                 01643700
&ZCLNG                SETC  '&XTARLST64'                                01643800
&ZCGPR                SETC  '14'                                        01643900
         AIF   ('&XTARLST64'(1,1) EQ '(').ZI77F  IN GPR                 01644000
.*                                                                      01644100
&ZOPN                 SETA  &ZOPN+1                                     01644200
&ZOPL(&ZOPN)          SETC  ' '                                         01644300
&ZOPO(&ZOPN)          SETC  'LA'                                        01644400
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             01644500
&ZOPD(&ZOPN)          SETC  '++ &ZXTARLST64 XTARLST64'                  01644600
.*                                                                      01644700
                      AGO   .ZI77G                                      01644800
.*                                                                      01644900
.ZI77F                ANOP  ,                                           01645000
&ZCGPR   SETC  '&XTARLST64'(2,K'&XTARLST64-2)                           01645100
.*                                                                      01645200
.ZI77G                ANOP  ,                                           01645300
                      AIF   ('&SYSAM64' EQ 'YES').ZI77H1A               01645400
                      AIF   ('&XMFSCK' NE 'NOCHECK').ZI77C2             01645500
.*                                                                      01645600
&ZOPN                 SETA  &ZOPN+1                                     01645700
&ZOPL(&ZOPN)          SETC  ' '                                         01645800
&ZOPO(&ZOPN)          SETC  'XC'                                        01645900
&ZOPV(&ZOPN)          SETC  '152(4,1),152(1)'                           01646000
.ZI77C2               ANOP  ,                                           01646100
.*                                                                      01646200
&ZOPN                 SETA  &ZOPN+1                                     01646300
&ZOPL(&ZOPN)          SETC  ' '                                         01646400
&ZOPO(&ZOPN)          SETC  'ST'                                        01646500
&ZOPV(&ZOPN)          SETC  '&ZCGPR,4+152(,1)'                          01646600
&ZOPD(&ZOPN)          SETC  '++ &ZXTARLST64 XTARLST64'                  01646700
.*                                                                      01646800
                      AGO   .ZI77H                                      01646900
.ZI77H1A              ANOP  ,                                           01647000
.*                                                                      01647100
&ZOPN                 SETA  &ZOPN+1                                     01647200
&ZOPL(&ZOPN)          SETC  ' '                                         01647300
&ZOPO(&ZOPN)          SETC  'STG'                                       01647400
&ZOPV(&ZOPN)          SETC  '&ZCGPR,152(,1)'                            01647500
&ZOPD(&ZOPN)          SETC  '++ &ZXTARLST64 XTARLST64'                  01647600
.*                                                                      01647700
.ZI77H                ANOP  ,                                           01647800
.*-------------------------------------------------------------------   01647900
.***AI.LVER02                                                           01648000
.ZI77Z                ANOP  ,                                           01648100
.*-------------------------------------------------------------------   01648200
&ZOPN1                SETA &ZOPN                                        01648300
.*-------------------------------------------------------------------   01648400
.***AI.C00 MF=M CHECK TO BYPASS INVOCATION                              01648500
                      AIF   ('&XMF' EQ 'M').ZMFLX  DONE IF MF=M         01648600
.*******************************************************************    01648700
.***  PROCESS IVTCSM OUTPUT PARAMETERS                                  01648800
.*******************************************************************    01648900
                      ACTR  10000                                       01649000
.*------------------------------------------------------------------    01649100
.***AO.L02 XERRBFLST F                                                  01649200
         AIF   ('&ZXERRBFLST' EQ 'OUTPUT').ZO40A  OUTPUT                01649300
         AIF   ('&ZXERRBFLST' NE 'INOUT').ZO40C  INOUT                  01649400
.ZO40A    AIF   ('&XERRBFLST'(1,1) NE '(').ZO40B  ADDR IN GPR           01649500
&ZCGPR   SETC  '&XERRBFLST'(2,K'&XERRBFLST-2)                           01649600
&ZOPN                 SETA  &ZOPN+1                                     01649700
&ZOPL(&ZOPN)          SETC  ' '                                         01649800
&ZOPO(&ZOPN)          SETC  'MVC'                                       01649900
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),36(1)'                         01650000
&ZOPD(&ZOPN)          SETC  '++ XERRBFLST F'                            01650100
                      AGO   .ZO40C                                      01650200
.*                                                                      01650300
.ZO40B                ANOP  ,                                           01650400
&ZAWRK   SETA  K'&XERRBFLST                                             01650500
         AIF   ('&XERRBFLST'(&ZAWRK,1) NE ')').ZO40G                    01650600
&ZN      SETA  2                                                        01650700
.ZO40H    ANOP                                                          01650800
         AIF   (&ZN GE &ZAWRK).ZO40G                                    01650900
         AIF   ('&XERRBFLST'(&ZN,1) NE '(').ZO40I                       01651000
&ZC      SETC  '&XERRBFLST'(1,&ZN).'4'.','                              01651100
&ZC      SETC  '&ZC'.'&XERRBFLST'(&ZN+1,&ZAWRK-&ZN).',36(1)'            01651200
         AGO   .ZO40J                                                   01651300
.ZO40I    ANOP                                                          01651400
&ZN      SETA  &ZN+1                                                    01651500
         AGO   .ZO40H                                                   01651600
.ZO40G    ANOP                                                          01651700
&ZC      SETC  '&XERRBFLST.(4),36(1)'                                   01651800
.ZO40J    ANOP                                                          01651900
&ZOPN                 SETA  &ZOPN+1                                     01652000
&ZOPL(&ZOPN)          SETC  ' '                                         01652100
&ZOPO(&ZOPN)          SETC  'MVC'                                       01652200
&ZOPV(&ZOPN)          SETC  '&ZC'                                       01652300
&ZOPD(&ZOPN)          SETC  '++ XERRBFLST F'                            01652400
.ZO40C                ANOP  ,                                           01652500
.*------------------------------------------------------------------    01652600
.***AO.L02 XSRCERRL F                                                   01652700
         AIF   ('&ZXSRCERRL' EQ 'OUTPUT').ZO50A  OUTPUT                 01652800
         AIF   ('&ZXSRCERRL' NE 'INOUT').ZO50C  INOUT                   01652900
.ZO50A    AIF   ('&XSRCERRL'(1,1) NE '(').ZO50B  ADDR IN GPR            01653000
&ZCGPR   SETC  '&XSRCERRL'(2,K'&XSRCERRL-2)                             01653100
&ZOPN                 SETA  &ZOPN+1                                     01653200
&ZOPL(&ZOPN)          SETC  ' '                                         01653300
&ZOPO(&ZOPN)          SETC  'MVC'                                       01653400
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),76(1)'                         01653500
&ZOPD(&ZOPN)          SETC  '++ XSRCERRL F'                             01653600
                      AGO   .ZO50C                                      01653700
.*                                                                      01653800
.ZO50B                ANOP  ,                                           01653900
&ZAWRK   SETA  K'&XSRCERRL                                              01654000
         AIF   ('&XSRCERRL'(&ZAWRK,1) NE ')').ZO50G                     01654100
&ZN      SETA  2                                                        01654200
.ZO50H    ANOP                                                          01654300
         AIF   (&ZN GE &ZAWRK).ZO50G                                    01654400
         AIF   ('&XSRCERRL'(&ZN,1) NE '(').ZO50I                        01654500
&ZC      SETC  '&XSRCERRL'(1,&ZN).'4'.','                               01654600
&ZC      SETC  '&ZC'.'&XSRCERRL'(&ZN+1,&ZAWRK-&ZN).',76(1)'             01654700
         AGO   .ZO50J                                                   01654800
.ZO50I    ANOP                                                          01654900
&ZN      SETA  &ZN+1                                                    01655000
         AGO   .ZO50H                                                   01655100
.ZO50G    ANOP                                                          01655200
&ZC      SETC  '&XSRCERRL.(4),76(1)'                                    01655300
.ZO50J    ANOP                                                          01655400
&ZOPN                 SETA  &ZOPN+1                                     01655500
&ZOPL(&ZOPN)          SETC  ' '                                         01655600
&ZOPO(&ZOPN)          SETC  'MVC'                                       01655700
&ZOPV(&ZOPN)          SETC  '&ZC'                                       01655800
&ZOPD(&ZOPN)          SETC  '++ XSRCERRL F'                             01655900
.ZO50C                ANOP  ,                                           01656000
.*------------------------------------------------------------------    01656100
.***AO.L02 XTARGERRL F                                                  01656200
         AIF   ('&ZXTARGERRL' EQ 'OUTPUT').ZO51A  OUTPUT                01656300
         AIF   ('&ZXTARGERRL' NE 'INOUT').ZO51C  INOUT                  01656400
.ZO51A    AIF   ('&XTARGERRL'(1,1) NE '(').ZO51B  ADDR IN GPR           01656500
&ZCGPR   SETC  '&XTARGERRL'(2,K'&XTARGERRL-2)                           01656600
&ZOPN                 SETA  &ZOPN+1                                     01656700
&ZOPL(&ZOPN)          SETC  ' '                                         01656800
&ZOPO(&ZOPN)          SETC  'MVC'                                       01656900
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),80(1)'                         01657000
&ZOPD(&ZOPN)          SETC  '++ XTARGERRL F'                            01657100
                      AGO   .ZO51C                                      01657200
.*                                                                      01657300
.ZO51B                ANOP  ,                                           01657400
&ZAWRK   SETA  K'&XTARGERRL                                             01657500
         AIF   ('&XTARGERRL'(&ZAWRK,1) NE ')').ZO51G                    01657600
&ZN      SETA  2                                                        01657700
.ZO51H    ANOP                                                          01657800
         AIF   (&ZN GE &ZAWRK).ZO51G                                    01657900
         AIF   ('&XTARGERRL'(&ZN,1) NE '(').ZO51I                       01658000
&ZC      SETC  '&XTARGERRL'(1,&ZN).'4'.','                              01658100
&ZC      SETC  '&ZC'.'&XTARGERRL'(&ZN+1,&ZAWRK-&ZN).',80(1)'            01658200
         AGO   .ZO51J                                                   01658300
.ZO51I    ANOP                                                          01658400
&ZN      SETA  &ZN+1                                                    01658500
         AGO   .ZO51H                                                   01658600
.ZO51G    ANOP                                                          01658700
&ZC      SETC  '&XTARGERRL.(4),80(1)'                                   01658800
.ZO51J    ANOP                                                          01658900
&ZOPN                 SETA  &ZOPN+1                                     01659000
&ZOPL(&ZOPN)          SETC  ' '                                         01659100
&ZOPO(&ZOPN)          SETC  'MVC'                                       01659200
&ZOPV(&ZOPN)          SETC  '&ZC'                                       01659300
&ZOPD(&ZOPN)          SETC  '++ XTARGERRL F'                            01659400
.ZO51C                ANOP  ,                                           01659500
.*------------------------------------------------------------------    01659600
.***AO.L02 XDS_INFO A                                                   01659700
         AIF   ('&ZXDS_INFO' EQ 'OUTPUT').ZO53A  OUTPUT                 01659800
         AIF   ('&ZXDS_INFO' NE 'INOUT').ZO53C  INOUT                   01659900
.ZO53A    AIF   ('&XDS_INFO'(1,1) NE '(').ZO53B  ADDR IN GPR            01660000
&ZCGPR   SETC  '&XDS_INFO'(2,K'&XDS_INFO-2)                             01660100
&ZOPN                 SETA  &ZOPN+1                                     01660200
&ZOPL(&ZOPN)          SETC  ' '                                         01660300
&ZOPO(&ZOPN)          SETC  'MVC'                                       01660400
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),88(1)'                         01660500
&ZOPD(&ZOPN)          SETC  '++ XDS_INFO A'                             01660600
                      AGO   .ZO53C                                      01660700
.*                                                                      01660800
.ZO53B                ANOP  ,                                           01660900
&ZAWRK   SETA  K'&XDS_INFO                                              01661000
         AIF   ('&XDS_INFO'(&ZAWRK,1) NE ')').ZO53G                     01661100
&ZN      SETA  2                                                        01661200
.ZO53H    ANOP                                                          01661300
         AIF   (&ZN GE &ZAWRK).ZO53G                                    01661400
         AIF   ('&XDS_INFO'(&ZN,1) NE '(').ZO53I                        01661500
&ZC      SETC  '&XDS_INFO'(1,&ZN).'4'.','                               01661600
&ZC      SETC  '&ZC'.'&XDS_INFO'(&ZN+1,&ZAWRK-&ZN).',88(1)'             01661700
         AGO   .ZO53J                                                   01661800
.ZO53I    ANOP                                                          01661900
&ZN      SETA  &ZN+1                                                    01662000
         AGO   .ZO53H                                                   01662100
.ZO53G    ANOP                                                          01662200
&ZC      SETC  '&XDS_INFO.(4),88(1)'                                    01662300
.ZO53J    ANOP                                                          01662400
&ZOPN                 SETA  &ZOPN+1                                     01662500
&ZOPL(&ZOPN)          SETC  ' '                                         01662600
&ZOPO(&ZOPN)          SETC  'MVC'                                       01662700
&ZOPV(&ZOPN)          SETC  '&ZC'                                       01662800
&ZOPD(&ZOPN)          SETC  '++ XDS_INFO A'                             01662900
.ZO53C                ANOP  ,                                           01663000
.*------------------------------------------------------------------    01663100
.***AO.L02 XSTATAREA A                                                  01663200
         AIF   ('&ZXSTATAREA' EQ 'OUTPUT').ZO54A  OUTPUT                01663300
         AIF   ('&ZXSTATAREA' NE 'INOUT').ZO54C  INOUT                  01663400
.ZO54A    AIF   ('&XSTATAREA'(1,1) NE '(').ZO54B  ADDR IN GPR           01663500
&ZCGPR   SETC  '&XSTATAREA'(2,K'&XSTATAREA-2)                           01663600
&ZOPN                 SETA  &ZOPN+1                                     01663700
&ZOPL(&ZOPN)          SETC  ' '                                         01663800
&ZOPO(&ZOPN)          SETC  'MVC'                                       01663900
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),92(1)'                         01664000
&ZOPD(&ZOPN)          SETC  '++ XSTATAREA A'                            01664100
                      AGO   .ZO54C                                      01664200
.*                                                                      01664300
.ZO54B                ANOP  ,                                           01664400
&ZAWRK   SETA  K'&XSTATAREA                                             01664500
         AIF   ('&XSTATAREA'(&ZAWRK,1) NE ')').ZO54G                    01664600
&ZN      SETA  2                                                        01664700
.ZO54H    ANOP                                                          01664800
         AIF   (&ZN GE &ZAWRK).ZO54G                                    01664900
         AIF   ('&XSTATAREA'(&ZN,1) NE '(').ZO54I                       01665000
&ZC      SETC  '&XSTATAREA'(1,&ZN).'4'.','                              01665100
&ZC      SETC  '&ZC'.'&XSTATAREA'(&ZN+1,&ZAWRK-&ZN).',92(1)'            01665200
         AGO   .ZO54J                                                   01665300
.ZO54I    ANOP                                                          01665400
&ZN      SETA  &ZN+1                                                    01665500
         AGO   .ZO54H                                                   01665600
.ZO54G    ANOP                                                          01665700
&ZC      SETC  '&XSTATAREA.(4),92(1)'                                   01665800
.ZO54J    ANOP                                                          01665900
&ZOPN                 SETA  &ZOPN+1                                     01666000
&ZOPL(&ZOPN)          SETC  ' '                                         01666100
&ZOPO(&ZOPN)          SETC  'MVC'                                       01666200
&ZOPV(&ZOPN)          SETC  '&ZC'                                       01666300
&ZOPD(&ZOPN)          SETC  '++ XSTATAREA A'                            01666400
.ZO54C                ANOP  ,                                           01666500
.*------------------------------------------------------------------    01666600
.***AO.L02 XRETPTOKN CL10                                               01666700
         AIF   ('&ZXRETPTOKN' EQ 'OUTPUT').ZO79A  OUTPUT                01666800
         AIF   ('&ZXRETPTOKN' NE 'INOUT').ZO79C  INOUT                  01666900
.ZO79A    AIF   ('&XRETPTOKN'(1,1) NE '(').ZO79B  ADDR IN GPR           01667000
&ZCGPR   SETC  '&XRETPTOKN'(2,K'&XRETPTOKN-2)                           01667100
&ZOPN                 SETA  &ZOPN+1                                     01667200
&ZOPL(&ZOPN)          SETC  ' '                                         01667300
&ZOPO(&ZOPN)          SETC  'MVC'                                       01667400
&ZOPV(&ZOPN)          SETC  '0(10,&ZCGPR),102(1)'                       01667500
&ZOPD(&ZOPN)          SETC  '++ XRETPTOKN CL10'                         01667600
                      AGO   .ZO79C                                      01667700
.*                                                                      01667800
.ZO79B                ANOP  ,                                           01667900
&ZAWRK   SETA  K'&XRETPTOKN                                             01668000
         AIF   ('&XRETPTOKN'(&ZAWRK,1) NE ')').ZO79G                    01668100
&ZN      SETA  2                                                        01668200
.ZO79H    ANOP                                                          01668300
         AIF   (&ZN GE &ZAWRK).ZO79G                                    01668400
         AIF   ('&XRETPTOKN'(&ZN,1) NE '(').ZO79I                       01668500
&ZC      SETC  '&XRETPTOKN'(1,&ZN).'10'.','                             01668600
&ZC      SETC  '&ZC'.'&XRETPTOKN'(&ZN+1,&ZAWRK-&ZN).',102(1)'           01668700
         AGO   .ZO79J                                                   01668800
.ZO79I    ANOP                                                          01668900
&ZN      SETA  &ZN+1                                                    01669000
         AGO   .ZO79H                                                   01669100
.ZO79G    ANOP                                                          01669200
&ZC      SETC  '&XRETPTOKN.(10),102(1)'                                 01669300
.ZO79J    ANOP                                                          01669400
&ZOPN                 SETA  &ZOPN+1                                     01669500
&ZOPL(&ZOPN)          SETC  ' '                                         01669600
&ZOPO(&ZOPN)          SETC  'MVC'                                       01669700
&ZOPV(&ZOPN)          SETC  '&ZC'                                       01669800
&ZOPD(&ZOPN)          SETC  '++ XRETPTOKN CL10'                         01669900
.ZO79C                ANOP  ,                                           01670000
.*******************************************************************    01670100
.***AO.X02  RETURN CODE PROCESSING                                      01670200
.*******************************************************************    01670300
                      AIF   (N'&RETCODE LE 0).ZMRETX                    01670400
                      AIF   ('&XRETCODE'(1,1) EQ '(').ZMRET2            01670500
                      AIF   ('&XRETCODE' EQ 'GPR15').ZMRETX             01670600
                      AIF   ('&XRETCODE' EQ 'REG15').ZMRETX             01670700
                      AIF   ('&XRETCODE' EQ 'R15').ZMRETX               01670800
                      AIF   ('&XRETCODE' EQ '15').ZMRETX                01670900
&ZOPN                 SETA  &ZOPN+1                                     01671000
&ZOPL(&ZOPN)          SETC  ' '                                         01671100
&ZOPO(&ZOPN)          SETC  'ST'                                        01671200
&ZOPV(&ZOPN)          SETC  '15,&XRETCODE'                              01671300
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        01671400
                      AGO   .ZMRETX                                     01671500
.*                                                                      01671600
.ZMRET2               ANOP  ,                                           01671700
&ZCGPR                SETC  '&XRETCODE'(2,K'&XRETCODE-2)                01671800
                      AIF   ('&ZCGPR' EQ 'GPR15').ZMRETX                01671900
                      AIF   ('&ZCGPR' EQ 'REG15').ZMRETX                01672000
                      AIF   ('&ZCGPR' EQ 'R15').ZMRETX                  01672100
                      AIF   ('&ZCGPR' EQ '15').ZMRETX                   01672200
&ZOPN                 SETA  &ZOPN+1                                     01672300
&ZOPL(&ZOPN)          SETC  ' '                                         01672400
&ZOPO(&ZOPN)          SETC  '&ZMAC_LR'                                  01672500
&ZOPV(&ZOPN)          SETC  '&ZCGPR,15'                                 01672600
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        01672700
.ZMRETX               ANOP  ,                                           01672800
.*******************************************************************    01672900
.***AO.X03  REASON CODE PROCESSING                                      01673000
.*******************************************************************    01673100
                      AIF   (N'&RSNCODE LE 0).ZMRSNX                    01673200
                      AIF   ('&XRSNCODE'(1,1) EQ '(').ZMRSN2            01673300
                      AIF   ('&XRSNCODE' EQ 'GPR0').ZMRSNX              01673400
                      AIF   ('&XRSNCODE' EQ 'GPR00').ZMRSNX             01673500
                      AIF   ('&XRSNCODE' EQ 'REG0').ZMRSNX              01673600
                      AIF   ('&XRSNCODE' EQ 'REG00').ZMRSNX             01673700
                      AIF   ('&XRSNCODE' EQ 'R0').ZMRSNX                01673800
                      AIF   ('&XRSNCODE' EQ '0').ZMRSNX                 01673900
                      AIF   ('&XRSNCODE' EQ '00').ZMRSNX                01674000
&ZOPN                 SETA  &ZOPN+1                                     01674100
&ZOPL(&ZOPN)          SETC  ' '                                         01674200
&ZOPO(&ZOPN)          SETC  'ST'                                        01674300
&ZOPV(&ZOPN)          SETC  '0,&XRSNCODE'                               01674400
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        01674500
                      AGO   .ZMRSNX                                     01674600
.*                                                                      01674700
.ZMRSN2               ANOP  ,                                           01674800
&ZCGPR                SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                01674900
                      AIF   ('&ZCGPR' EQ 'GPR0').ZMRSNX                 01675000
                      AIF   ('&ZCGPR' EQ 'GPR00').ZMRSNX                01675100
                      AIF   ('&ZCGPR' EQ 'REG0').ZMRSNX                 01675200
                      AIF   ('&ZCGPR' EQ 'REG00').ZMRSNX                01675300
                      AIF   ('&ZCGPR' EQ 'R0').ZMRSNX                   01675400
                      AIF   ('&ZCGPR' EQ '0').ZMRSNX                    01675500
                      AIF   ('&ZCGPR' EQ '00').ZMRSNX                   01675600
&ZOPN                 SETA  &ZOPN+1                                     01675700
&ZOPL(&ZOPN)          SETC  ' '                                         01675800
&ZOPO(&ZOPN)          SETC  '&ZMAC_LR'                                  01675900
&ZOPV(&ZOPN)          SETC  '&ZCGPR,0'                                  01676000
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        01676100
.ZMRSNX               ANOP  ,                                           01676200
.*******************************************************************    01676300
.***AO.X04  LABEL FOR MF=L PROCESSING                                   01676400
.*******************************************************************    01676500
.ZMFLX                ANOP  ,              MF=L PROCESSING              01676600
.*******************************************************************    01676700
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               01676800
.*******************************************************************    01676900
                      ACTR  10000                                       01677000
.*                                                                      01677100
                      LCLA  &ZLC           COLUMN POSITION              01677200
                      LCLA  &ZOPX          LIST TABLE INDEX             01677300
                      LCLC  &ZLL           LABEL                        01677400
                      LCLC  &ZLOP          OPERATION                    01677500
                      LCLC  &ZLV           VALUE                        01677600
                      LCLC  &ZLD           DESCRIPTION                  01677700
.*                                                                      01677800
&ZOPX                 SETA  1                                           01677900
.ZL2                  AIF   (&ZOPX GT &ZOPN1).ZLX  B IF DONE            01678000
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              01678100
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              01678200
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              01678300
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              01678400
                      AIF   (K'&ZLD LE 0).ZL5                           01678500
&ZLC                  SETA  35             COMMENT COLUMN               01678600
                      AIF   ('&ZLD'(1,1) NE '*').ZL3                    01678700
&ZLC                  SETA  33             COMMMENT COLUMN              01678800
.ZL3                  AIF   (K'&ZLV GE &ZLC-16-1).ZL4                   01678900
&ZLV                  SETC  '&ZLV'.' '                                  01679000
                      AGO   .ZL3                                        01679100
.*                                                                      01679200
.ZL4                  ANOP  ,                                           01679300
&ZLV                  SETC  '&ZLV'.' '                                  01679400
.ZL5                  ANOP  ,                                           01679500
&ZLV                  SETC  '&ZLV'.'&ZLD'                               01679600
.*                                                                      01679700
&ZLL     &ZLOP &ZLV                                                     01679800
.*                                                                      01679900
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               01680000
                      AGO   .ZL2           CONTINUE LOOPING             01680100
.*                                                                      01680200
.ZLX                  ANOP  ,                                           01680300
                      AIF   ('&XMF' EQ 'L').ZLINKX  MF=L                01680400
                      AIF   ('&XMF' EQ 'M').ZLINKX  MF=M                01680500
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  01680600
            AIF  ('&SYSAM64'  EQ 'YES').PSWMOD64                   @31A 01680700
            L    15,16(0,0)     CVT address                             01680800
            L    15,140(,15)    ECVT address                            01680900
            ICM  15,15,200(15)  CSM structure address                   01681000
            BZ   NSRV&SYSNDX    CSM structure not anchored              01681100
            AIF  ('&XREQUEST' EQ 'CHANGE_OWNER').CHOWNER                01681200
            AIF  ('&XREQUEST' EQ 'GET_BUFFER').GETBFR                   01681300
            AIF  ('&XREQUEST' EQ 'FREE_BUFFER').FREEBFR                 01681400
            L    15,8(,15)      CSM service address                     01681500
            BALR 14,15          Call CSM service                        01681600
            B    DONE&SYSNDX                                            01681700
            AGO  .NOSERV                                                01681800
.CHOWNER    ANOP                                                        01681900
            L    15,12(,15)     Change Owner service address            01682000
            BALR 14,15          Call Change Owner service               01682100
            B    DONE&SYSNDX                                            01682200
.GETBFR     ANOP                                                        01682300
            TM   49(15),B'10000000'                                     01682400
            BNO  GPFM&SYSNDX    No performance update                   01682500
            L    15,36(,15)     Get Buffer service address              01682600
            BALR 14,15          Call Get Buffer service                 01682700
            B    DONE&SYSNDX                                            01682800
GPFM&SYSNDX EQU *                                                       01682900
            L    15,8(,15)      CSM service address                     01683000
            BALR 14,15          Call CSM service                        01683100
            B    DONE&SYSNDX                                            01683200
.FREEBFR    ANOP                                                        01683300
            TM   49(15),B'10000000'                                     01683400
            BNO  FPFM&SYSNDX    No performance update                   01683500
            L    15,40(,15)     Free Buffer service address             01683600
            BALR 14,15          Call Free Buffer service                01683700
            B    DONE&SYSNDX                                            01683800
FPFM&SYSNDX EQU *                                                       01683900
            L    15,8(,15)      CSM service address                     01684000
            BALR 14,15          Call CSM service                        01684100
            B    DONE&SYSNDX                                            01684200
.NOSERV     ANOP                                                        01684300
            AIF  ('&XREQUEST' EQ 'CREATE_POOL').CRPOOL                  01684400
NSRV&SYSNDX EQU *                                                       01684500
            LA   15,4           Set error return code                   01684600
            LA   0,2            Set error reason code                   01684700
            AGO  .CSMEND                                                01684800
.CRPOOL     ANOP                                                        01684900
NSRV&SYSNDX EQU *                                                       01685000
            LR   14,1           Save parameter list address             01685100
            LOAD EP=IVTSMCBF    Obtain CSM service address              01685200
            LR   15,0           Set CSM service address                 01685300
            LR   1,14           Restore parameter list address          01685400
            BALR 14,15          Call CSM service                        01685500
            AGO  .CSMEND                                           @31A 01685600
.PSWMOD64   ANOP                                                   @31A 01685700
            LG   15,72(0,0)     CVT 64-bit address                 @31A 01685800
            LLGT 15,140(,15)    ECVT address                       @31A 01685900
            ICM  15,15,200(15)  CSM structure address              @31A 01686000
            BZ   NS64&SYSNDX    CSM structure not anchored         @31A 01686100
            AIF  ('&XREQUEST' EQ 'CHANGE_OWNER').CHOWNER64         @31A 01686200
            AIF  ('&XREQUEST' EQ 'GET_BUFFER').GETBFR64            @31A 01686300
            AIF  ('&XREQUEST' EQ 'FREE_BUFFER').FREEBFR64          @31A 01686400
            LLGT 15,52(,15)     CSM service address IVTSM6BF       @31A 01686500
            BASR 14,15          Call CSM service                   @31A 01686600
            B    DONE&SYSNDX                                       @31A 01686700
            AGO  .NOSERV64                                         @31A 01686800
.CHOWNER64  ANOP                                                   @31A 01686900
            LLGT 15,64(,15)     Change Owner service in 64-Bit PSW @31A 01687000
            BASR 14,15          Call Change Owner service IVTSM6CO @31A 01687100
            B    DONE&SYSNDX                                       @31A 01687200
.GETBFR64   ANOP                                                   @31A 01687300
            LLGT 15,56(,15)     Get Buffer service in 64-Bit PSW   @31A 01687400
            BASR 14,15          Call Get Buffer service IVTSM6GB   @31A 01687500
            B    DONE&SYSNDX                                       @31A 01687600
.FREEBFR64  ANOP                                                   @31A 01687700
            LLGT 15,60(,15)     Free Buffer service in 64-Bit PSW  @31A 01687800
            BASR 14,15          Call Free Buffer service IVTSM6FB  @31A 01687900
            B    DONE&SYSNDX                                       @31A 01688000
.NOSERV64   ANOP                                                   @31A 01688100
            AIF  ('&XREQUEST' EQ 'CREATE_POOL').CRPOOL64           @31A 01688200
NS64&SYSNDX EQU *                                                  @31A 01688300
            LA   15,4           Set error return code              @31A 01688400
            LA   0,2            Set error reason code              @31A 01688500
            AGO  .CSMEND                                           @31A 01688600
.CRPOOL64   ANOP                                                   @31A 01688700
NS64&SYSNDX EQU *                                                  @31A 01688800
            LGR  14,1           Save parameter list address        @31A 01688900
            LOAD EP=IVTSM6BF    Obtain CSM service addr IVTSM6BF   @31A 01689000
            LGR  15,0           Set CSM service address            @31A 01689100
            LGR  1,14           Restore parameter list address     @31A 01689200
            NILL 15,X'FFFE'     Clear low order bit           @31A @34C 01689300
            BASR 14,15          Call CSM service                   @31A 01689400
            AGO  .CSMEND                                           @31A 01689500
.CSMEND     ANOP                                                        01689600
DONE&SYSNDX EQU *                                                       01689700
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  01689800
.ZLINKX               ANOP  ,                                           01689900
.*******************************************************************    01690000
.***AP.X01  FORMAT GENERATED CODE                                       01690100
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            01690200
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              01690300
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              01690400
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              01690500
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              01690600
                      AIF   (K'&ZLD LE 0).ZL51                          01690700
&ZLC                  SETA  35             COMMENT COLUMN               01690800
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   01690900
&ZLC                  SETA  33             COMMENT COLUMN               01691000
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  01691100
&ZLV                  SETC  '&ZLV'.' '                                  01691200
                      AGO   .ZL31                                       01691300
.*                                                                      01691400
.ZL41                 ANOP  ,                                           01691500
&ZLV                  SETC  '&ZLV'.' '                                  01691600
.ZL51                 ANOP  ,                                           01691700
&ZLV                  SETC  '&ZLV'.'&ZLD'                               01691800
.*                                                                      01691900
&ZLL     &ZLOP &ZLV                                                     01692000
.*                                                                      01692100
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               01692200
                      AGO   .ZL21          CONTINUE LOOPING             01692300
.*                                                                      01692400
.ZLX1                 ANOP  ,                                           01692500
.*******************************************************************    01692600
.***AP.X02  END OF IVTCSM MACRO                                         01692700
&ZIVTCSM              SETC  'YES'          SET IVTCSM USED              01692800
         POP   PRINT                                                    01692900
*                                            IVTCSM-2                   01693000
         SPACE 1                                                        01693100
.ZLX2                 ANOP  ,                                           01693200
         MEND                                                           01693300
**********************************************************************/ 01693400
*/**** START OF SPECIFICATIONS **************************************** 01693500
*                                                                     * 01693600
*                                                                     * 01693700
*01* MACRO NAME:  IVTCSM                                -13/05/17-<2> * 01693800
*                                                                     * 01693900
*                                                                     * 01694000
*01* DESCRIPTIVE NAME:  Communications Storage Manager                * 01694100
*                                                                     * 01694200
*01* PROPRIETARY STATEMENT:                                           * 01694300
*                                                                     * 01694400
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 01694500
*     &maczcpyn(&*1) COPYRIGHT IBM CORP. &maczcpyd(&*1)               * 01694600
*                                                                     * 01694700
* STATUS=                                                             * 01694800
*                                                                     * 01694900
*                                                                     * 01695000
*01* FUNCTION:                                                        * 01695100
*       See the IVTCSM macro prologue for details.                    * 01695200
*                                                                     * 01695300
*01* INPUT:                                                           * 01695400
*                                                                     * 01695500
*            ?IVTCSM   Ð REQUEST(ASSIGN_BUFFER)                       * 01695600
*                      !   Ð BUFLIST(xbuflist)                        * 01695700
*                      !   ¿ BUFLST64(xbuflst64)                      * 01695800
*                      !     BUFNUM(xbufnum)                          * 01695900
*                      !    ÝBUFTYPE(»SAME!PAGEELIG!FIXEDº)¨          * 01696000
*                      !    ÝCSMUSER(»NO!YESº)¨                       * 01696100
*                      !    ÝGAP(»xgap!0º)¨                           * 01696200
*                      !    ÝERRBFLST(xerrbflst)¨                     * 01696300
*                      !    ÝOWNERID(»xownerid!0º)¨                   * 01696400
*                      !    ÝCOMPID(»xcompid!0º)¨                     * 01696500
*                      !    ÝCOMPUSER(»xcompuser!0º)¨                 * 01696600
*                      !    ÝTASKID(»xtaskid!0º)¨                     * 01696700
*                      !    ÝTHREAD(»xthread!0º)¨                     * 01696800
*                      !    ÝUTILRTN(»xutilrtn!0º)¨                   * 01696900
*                      Ô REQUEST(CHANGE_OWNER)                        * 01697000
*                      !   Ð BUFLIST(xbuflist)                        * 01697100
*                      !   ¿ BUFLST64(xbuflst64)                      * 01697200
*                      !     BUFNUM(xbufnum)                          * 01697300
*                      !    ÝCSMUSER(»NO!YESº)¨                       * 01697400
*                      !    ÝERRBFLST(xerrbflst)¨                     * 01697500
*                      !    ÝGAP(»xgap!0º)¨                           * 01697600
*                      !    ÝOWNERID(»xownerid!0º)¨                   * 01697700
*                      !    ÝCOMPID(»xcompid!0º)¨                     * 01697800
*                      !    ÝCOMPUSER(»xcompuser!0º)¨                 * 01697900
*                      !    ÝSKIPBUF(»NO!YESº)¨                       * 01698000
*                      !    ÝTASKID(»xtaskid!0º)¨                     * 01698100
*                      !    ÝTHREAD(»xthread!0º)¨                     * 01698200
*                      !    ÝUTILRTN(»xutilrtn!0º)¨                   * 01698300
*                      Ô REQUEST(COPY_DATA)                           * 01698400
*                      !   ÐÝPAD(NO)¨                                 * 01698500
*                      !   ¿ÝPAD(YES)                                 * 01698600
*                      !         PADCHAR(xpadchar)¨                   * 01698700
*                      !    ÝSRCERRL(xsrcerrl)¨                       * 01698800
*                      !    ÝSRCGAP(»xsrcgap!0º)¨                     * 01698900
*                      !   Ð SRCLIST(xsrclist)                        * 01699000
*                      !   ¿ SRCLST64(xsrclst64)                      * 01699100
*                      !     SRCNUM(xsrcnum)                          * 01699200
*                      !    ÝTARGERRL(xtargerrl)¨                     * 01699300
*                      !    ÝTARGGAP(»xtarggap!0º)¨                   * 01699400
*                      !   Ð TARGLIST(xtarglist)                      * 01699500
*                      !   ¿ TARLST64(xtarlst64)                      * 01699600
*                      !     TARGNUM(xtargnum)                        * 01699700
*                      !    ÝTHREAD(»xthread!0º)¨                     * 01699800
*                      !    ÝUTILRTN(»xutilrtn!0º)¨                   * 01699900
*                      Ô REQUEST(CREATE_POOL)                         * 01700000
*                      !     BUFSIZE(xbufsize)                        * 01700100
*                      !   Ð BUFSOURC(DSPACE)                         * 01700200
*                      !   !    ÝBACK(»31!64º)¨                       * 01700300
*                      !   Ô BUFSOURC(ECSA)                           * 01700400
*                      !   ¿ BUFSOURC(HVCOMM)                         * 01700500
*                      !    ÝDS_INFO(xds_info)¨                       * 01700600
*                      !     EXPBUF(xexpbuf)                          * 01700700
*                      !     INITBUF(xinitbuf)                        * 01700800
*                      !     MINFREE(xminfree)                        * 01700900
*                      !    ÝRETPTOKN(xretptokn)¨                     * 01701000
*                      !    ÝSTATAREA(xstatarea)¨                     * 01701100
*                      Ô REQUEST(DELETE_POOL)                         * 01701200
*                      !     POOLTOKN(xpooltokn)                      * 01701300
*                      Ô REQUEST(DUMP_INFO)                           * 01701400
*                      !    ÝDS_INFO(xds_info)¨                       * 01701500
*                      Ô REQUEST(FIX_BUFFER)                          * 01701600
*                      !   Ð BUFLIST(xbuflist)                        * 01701700
*                      !   ¿ BUFLST64(xbuflst64)                      * 01701800
*                      !     BUFNUM(xbufnum)                          * 01701900
*                      !    ÝERRBFLST(xerrbflst)¨                     * 01702000
*                      !    ÝGAP(»xgap!0º)¨                           * 01702100
*                      !    ÝCOMPID(»xcompid!0º)¨                     * 01702200
*                      !    ÝCOMPUSER(»xcompuser!0º)¨                 * 01702300
*                      !    ÝTHREAD(»xthread!0º)¨                     * 01702400
*                      !    ÝUTILRTN(»xutilrtn!0º)¨                   * 01702500
*                      !    ÝWAIT(»NO!YESº)¨                          * 01702600
*                      Ô REQUEST(FREE_BUFFER)                         * 01702700
*                      !   Ð BUFLIST(xbuflist)                        * 01702800
*                      !   ¿ BUFLST64(xbuflst64)                      * 01702900
*                      !     BUFNUM(xbufnum)                          * 01703000
*                      !    ÝCLEAR(»NO!YESº)¨                         * 01703100
*                      !    ÝERRBFLST(xerrbflst)¨                     * 01703200
*                      !    ÝFREETO(»USER!CSMº)¨                      * 01703300
*                      !    ÝGAP(»xgap!0º)¨                           * 01703400
*                      !    ÝSKIPBUF(»NO!YESº)¨                       * 01703500
*                      !    ÝCOMPID(»xcompid!0º)¨                     * 01703600
*                      !    ÝCOMPUSER(»xcompuser!0º)¨                 * 01703700
*                      !    ÝTHREAD(»xthread!0º)¨                     * 01703800
*                      !    ÝUTILRTN(»xutilrtn!0º)¨                   * 01703900
*                      Ô REQUEST(GET_BUFFER)                          * 01704000
*                      !   Ð BUFLIST(xbuflist)                        * 01704100
*                      !   ¿ BUFLST64(xbuflst64)                      * 01704200
*                      !     BUFNUM(xbufnum)                          * 01704300
*                      !     BUFTYPE(»PAGEELIG!PAGEABLE!              * 01704400
*                      !              FIXEDº)                         * 01704500
*                      !    ÝCLEAR(»NO!YESº)¨                         * 01704600
*                      !    ÝCSMUSER(»NO!YESº)¨                       * 01704700
*                      !    ÝERRBFLST(xerrbflst)¨                     * 01704800
*                      !    ÝFREERTN(»xfreertn!CSMº)¨                 * 01704900
*                      !    ÝGAP(»xgap!0º)¨                           * 01705000
*                      !    ÝOWNERID(»xownerid!0º)¨                   * 01705100
*                      !    ÝCOMPID(»xcompid!0º)¨                     * 01705200
*                      !    ÝCOMPUSER(»xcompuser!0º)¨                 * 01705300
*                      !     POOLTOKN(xpooltokn)                      * 01705400
*                      !    ÝTASKID(»xtaskid!0º)¨                     * 01705500
*                      !    ÝTHREAD(»xthread!0º)¨                     * 01705600
*                      !    ÝUTILRTN(»xutilrtn!0º)¨                   * 01705700
*                      !    ÝWAIT(»NO!YES!EXPANDº)¨                   * 01705800
*                      Ô REQUEST(PAGE_BUFFER)                         * 01705900
*                      !   Ð BUFLIST(xbuflist)                        * 01706000
*                      !   ¿ BUFLST64(xbuflst64)                      * 01706100
*                      !     BUFNUM(xbufnum)                          * 01706200
*                      !     BUFTYPE(»PAGEELIG!PAGEABLEº)             * 01706300
*                      !    ÝGAP(»xgap!0º)¨                           * 01706400
*                      !    ÝERRBFLST(xerrbflst)¨                     * 01706500
*                      !    ÝCOMPID(»xcompid!0º)¨                     * 01706600
*                      !    ÝCOMPUSER(»xcompuser!0º)¨                 * 01706700
*                      !    ÝTHREAD(»xthread!0º)¨                     * 01706800
*                      !    ÝUTILRTN(»xutilrtn!0º)¨                   * 01706900
*                      ¿ REQUEST(RESOURCE_STATS)                      * 01707000
*                           ÝSTATAREA(xstatarea)¨                     * 01707100
*                       ÝRETCODE(xretcode)¨                           * 01707200
*                       ÝRSNCODE(xrsncode)¨                           * 01707300
*                       ÝPLISTVER(»xplistver!IMPLIED_VERSIONº)¨       * 01707400
*                      ÐÝMF(S)¨                                       * 01707500
*                      ÔÝMF(L,xmfctrl»,xmfattr!BDY(DWORD)º)¨          * 01707600
*                      ÔÝMF(M,xmfctrl»,COMPLETE!NOCHECKº)¨            * 01707700
*                      ¿ÝMF(E,xmfctrl»,COMPLETE!NOCHECKº)¨            * 01707800
*                                                                     * 01707900
****** END OF SPECIFICATIONS *****************************************/ 01708000
*/*PB.ECHO01 MACRO INVOCATION ECHO-----------------------------------*/ 01708100
*  ANS('@SPACE;') NORESCAN COL(MACLMAR);                                01708200
*  ANS('/* ? IVTCSM '!!MACLIST!!' ')                                    01708300
*      NORESCAN COL(MACLMAR+5);    /* START ECHO */                     01708400
*                                                                       01708500
*  DCL ZELO  FIXED;                                                     01708600
*  DCL ZECOL FIXED;                                                     01708700
*                                                                       01708800
*  ZELO=1;     /* STARTING COLUMN */                                    01708900
*  DO WHILE ZELO<=LENGTH(MACKEYS);  /* PARENTHSIS SCAN */               01709000
*    ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');                    01709100
*    IF ZECOL>0                                                         01709200
*      THEN                                                             01709300
*        DO;   /* PARENTHESIS FOUND */                                  01709400
*          ANS(MACKEYS(ZELO:ZELO+ZECOL-1)!!' ')                         01709500
*             NORESCAN COL(MACLMAR+5);                                  01709600
*          ZELO=ZELO+ZECOL;        /* NEXT PORTION */                   01709700
*        END;                                                           01709800
*      ELSE                                                             01709900
*        DO;   /* REMAINING KEYS */                                     01710000
*          ANS(MACKEYS(ZELO:LENGTH(MACKEYS)))                           01710100
*             NORESCAN COL(MACLMAR+5);                                  01710200
*          ZELO=LENGTH(MACKEYS)+1;                                      01710300
*        END;                                                           01710400
*  END;                                                                 01710500
*  ANS(' -13/05/17-2- */')                                              01710600
*      NORESCAN COL(MACLMAR+5);    /* END ECHO */                       01710700
*/********************************************************************/ 01710800
*/*PV.DCL01 MACRO DECLARES AND CODE GENERATION CONTROLS              */ 01710900
*/********************************************************************/ 01711000
*  DCL ZPRINT  EXTERNAL; DEACT ZPRINT; /* YES=PRINT, NO=NO PRINT     */ 01711100
*  DCL ZTEST   EXTERNAL; DEACT ZTEST;  /* YES=TEST, NO=NO TEST       */ 01711200
*  DCL ZSYSTEM EXTERNAL; DEACT ZSYSTEM;/* PCCODE10, MVS, SAK, VM     */ 01711300
*                                                                       01711400
*  DCL   ZIVTCSM CHAR EXTERNAL; /* YES=USED AT LEAST ONCE          */   01711500
*  DEACT ZIVTCSM;                                                       01711600
*                                                                       01711700
*  DCL ZMACRET FIXED; DEACT ZMACRET;                                    01711800
*  ZMACRET=0;                   /* MACRO COMPILE RETURN CODE         */ 01711900
*                                                                       01712000
*  DCL ZMS CHAR;   DEACT ZMS;   /* ERROR MESSAGE                     */ 01712100
*  DCL ZCVAL CHAR; DEACT ZCVAL; /* ERROR MESSAGE WORK AREA           */ 01712200
*                                                                       01712300
*  DCL ZI FIXED;  DEACT ZI;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 01712400
*  DCL ZJ FIXED;  DEACT ZJ;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 01712500
*  DCL ZK FIXED;  DEACT ZK;     /* INDEX FOR RANGE COLON (:)         */ 01712600
*  DCL ZL FIXED;  DEACT ZL;     /* INDEX FOR RANGE VALUE CHECKING    */ 01712700
*  DCL ZLO FIXED; DEACT ZLO;    /* LOW RANGE VALUE                   */ 01712800
*  DCL ZHI FIXED; DEACT ZHI;    /* HIGH RANGE VALUE                  */ 01712900
*  DCL ZW CHAR;   DEACT ZW;     /* WORK AREA FOR RANGE VALUE SUBLIST */ 01713000
*  DCL ZN FIXED;  DEACT ZN;     /* NUMERIC WORK VARIABLE             */ 01713100
*  DCL ZC CHAR;   DEACT ZC;     /* CHARACTER WORK VARIABLE           */ 01713200
*  DCL ZMAXINVOCLEN FIXED; DEACT ZMAXINVOCLEN;  /* INVOCATION LENGTH */ 01713300
*  DCL ZPLLEN FIXED; DEACT ZPLLEN;        /* PARAMETER LIST LENGTH   */ 01713400
*                                                                       01713500
*  DCL ZPRMMAX FIXED;           /* MAXIMUM PARM LIST SIZE            */ 01713600
*  DCL ZPRMNUM FIXED;           /* PARAMETER ARRAY INDEX             */ 01713700
*  DCL ZPRM(100);               /* PARAMETER ENTRY                   */ 01713800
*  DCL EHAMAXLEN FIXED EXTERNAL;   /* MAX ILIST SIZE FOR PARM LISTS  */ 01713900
*  DCL EHAREGS CHARACTER EXTERNAL; /* REG DCLS                       */ 01714000
*  DCL EHAREGS64 CHARACTER EXTERNAL; /* REG DCLS                     */ 01714100
*  DCL EHALIST CHARACTER EXTERNAL; /* STANDARD PARM LIST GENERATION  */ 01714200
*/*******************************************************************/  01714300
*/*PV.XVAR01 DECLARE ALL MACRO PARAMETER VARIABLES                  */  01714400
*/*******************************************************************/  01714500
*  DCL XREQUEST;  DEACT XREQUEST;  /***PV.XVAR02 INPUT VALUE */         01714600
*  DCL ZXREQUEST; DEACT ZXREQUEST;  /***INPUT/OUTPUT CONTROL */         01714700
*  DCL XDUMMY1;  DEACT XDUMMY1;    /***PV.XVAR02 INPUT NAME */          01714800
*  DCL ZXDUMMY1; DEACT ZXDUMMY1;   /***INPUT/OUTPUT CONTROL */          01714900
*  DCL XBUFLIST;  DEACT XBUFLIST;  /***PV.XVAR02 INPUT NAME */          01715000
*  DCL ZXBUFLIST; DEACT ZXBUFLIST;  /***INPUT/OUTPUT CONTROL */         01715100
*  DCL XBUFLST64;  DEACT XBUFLST64;  /***PV.XVAR02 INPUT NAME */        01715200
*  DCL ZXBUFLST64; DEACT ZXBUFLST64;  /***INPUT/OUTPUT CONTROL */       01715300
*  DCL XBUFNUM;  DEACT XBUFNUM;    /***PV.XVAR02 INPUT NAME */          01715400
*  DCL ZXBUFNUM; DEACT ZXBUFNUM;   /***INPUT/OUTPUT CONTROL */          01715500
*  DCL XBUFTYPE;  DEACT XBUFTYPE;  /***PV.XVAR02 INPUT VALUE */         01715600
*  DCL ZXBUFTYPE; DEACT ZXBUFTYPE;  /***INPUT/OUTPUT CONTROL */         01715700
*  DCL XCSMUSER;  DEACT XCSMUSER;  /***PV.XVAR02 INPUT VALUE */         01715800
*  DCL ZXCSMUSER; DEACT ZXCSMUSER;  /***INPUT/OUTPUT CONTROL */         01715900
*  DCL XGAP;  DEACT XGAP;          /***PV.XVAR02 INPUT NAME */          01716000
*  DCL ZXGAP; DEACT ZXGAP;         /***INPUT/OUTPUT CONTROL */          01716100
*  DCL XERRBFLST;  DEACT XERRBFLST;  /***PV.XVAR02 OUTPUT NAME */       01716200
*  DCL ZXERRBFLST; DEACT ZXERRBFLST;  /***INPUT/OUTPUT CONTROL */       01716300
*  DCL XOWNERID;  DEACT XOWNERID;  /***PV.XVAR02 INPUT NAME */          01716400
*  DCL ZXOWNERID; DEACT ZXOWNERID;  /***INPUT/OUTPUT CONTROL */         01716500
*  DCL XCOMPID;  DEACT XCOMPID;    /***PV.XVAR02 INPUT NAME */          01716600
*  DCL ZXCOMPID; DEACT ZXCOMPID;   /***INPUT/OUTPUT CONTROL */          01716700
*  DCL XCOMPUSER;  DEACT XCOMPUSER;  /***PV.XVAR02 INPUT NAME */        01716800
*  DCL ZXCOMPUSER; DEACT ZXCOMPUSER;  /***INPUT/OUTPUT CONTROL */       01716900
*  DCL XTASKID;  DEACT XTASKID;    /***PV.XVAR02 INPUT NAME */          01717000
*  DCL ZXTASKID; DEACT ZXTASKID;   /***INPUT/OUTPUT CONTROL */          01717100
*  DCL XTHREAD;  DEACT XTHREAD;    /***PV.XVAR02 INPUT NAME */          01717200
*  DCL ZXTHREAD; DEACT ZXTHREAD;   /***INPUT/OUTPUT CONTROL */          01717300
*  DCL XUTILRTN;  DEACT XUTILRTN;  /***PV.XVAR02 INPUT NAME */          01717400
*  DCL ZXUTILRTN; DEACT ZXUTILRTN;  /***INPUT/OUTPUT CONTROL */         01717500
*  DCL XDUMMY2;  DEACT XDUMMY2;    /***PV.XVAR02 INPUT NAME */          01717600
*  DCL ZXDUMMY2; DEACT ZXDUMMY2;   /***INPUT/OUTPUT CONTROL */          01717700
*  DCL XSKIPBUF;  DEACT XSKIPBUF;  /***PV.XVAR02 INPUT VALUE */         01717800
*  DCL ZXSKIPBUF; DEACT ZXSKIPBUF;  /***INPUT/OUTPUT CONTROL */         01717900
*  DCL XPAD;  DEACT XPAD;          /***PV.XVAR02 INPUT VALUE */         01718000
*  DCL ZXPAD; DEACT ZXPAD;         /***INPUT/OUTPUT CONTROL */          01718100
*  DCL XPADCHAR;  DEACT XPADCHAR;  /***PV.XVAR02 INPUT NAME */          01718200
*  DCL ZXPADCHAR; DEACT ZXPADCHAR;  /***INPUT/OUTPUT CONTROL */         01718300
*  DCL XSRCERRL;  DEACT XSRCERRL;  /***PV.XVAR02 OUTPUT NAME */         01718400
*  DCL ZXSRCERRL; DEACT ZXSRCERRL;  /***INPUT/OUTPUT CONTROL */         01718500
*  DCL XSRCGAP;  DEACT XSRCGAP;    /***PV.XVAR02 INPUT NAME */          01718600
*  DCL ZXSRCGAP; DEACT ZXSRCGAP;   /***INPUT/OUTPUT CONTROL */          01718700
*  DCL XDUMMY3;  DEACT XDUMMY3;    /***PV.XVAR02 INPUT NAME */          01718800
*  DCL ZXDUMMY3; DEACT ZXDUMMY3;   /***INPUT/OUTPUT CONTROL */          01718900
*  DCL XSRCLIST;  DEACT XSRCLIST;  /***PV.XVAR02 INPUT NAME */          01719000
*  DCL ZXSRCLIST; DEACT ZXSRCLIST;  /***INPUT/OUTPUT CONTROL */         01719100
*  DCL XSRCLST64;  DEACT XSRCLST64;  /***PV.XVAR02 INPUT NAME */        01719200
*  DCL ZXSRCLST64; DEACT ZXSRCLST64;  /***INPUT/OUTPUT CONTROL */       01719300
*  DCL XSRCNUM;  DEACT XSRCNUM;    /***PV.XVAR02 INPUT NAME */          01719400
*  DCL ZXSRCNUM; DEACT ZXSRCNUM;   /***INPUT/OUTPUT CONTROL */          01719500
*  DCL XTARGERRL;  DEACT XTARGERRL;  /***PV.XVAR02 OUTPUT NAME */       01719600
*  DCL ZXTARGERRL; DEACT ZXTARGERRL;  /***INPUT/OUTPUT CONTROL */       01719700
*  DCL XTARGGAP;  DEACT XTARGGAP;  /***PV.XVAR02 INPUT NAME */          01719800
*  DCL ZXTARGGAP; DEACT ZXTARGGAP;  /***INPUT/OUTPUT CONTROL */         01719900
*  DCL XDUMMY4;  DEACT XDUMMY4;    /***PV.XVAR02 INPUT NAME */          01720000
*  DCL ZXDUMMY4; DEACT ZXDUMMY4;   /***INPUT/OUTPUT CONTROL */          01720100
*  DCL XTARGLIST;  DEACT XTARGLIST;  /***PV.XVAR02 INPUT NAME */        01720200
*  DCL ZXTARGLIST; DEACT ZXTARGLIST;  /***INPUT/OUTPUT CONTROL */       01720300
*  DCL XTARLST64;  DEACT XTARLST64;  /***PV.XVAR02 INPUT NAME */        01720400
*  DCL ZXTARLST64; DEACT ZXTARLST64;  /***INPUT/OUTPUT CONTROL */       01720500
*  DCL XTARGNUM;  DEACT XTARGNUM;  /***PV.XVAR02 INPUT NAME */          01720600
*  DCL ZXTARGNUM; DEACT ZXTARGNUM;  /***INPUT/OUTPUT CONTROL */         01720700
*  DCL XBUFSIZE;  DEACT XBUFSIZE;  /***PV.XVAR02 INPUT NAME */          01720800
*  DCL ZXBUFSIZE; DEACT ZXBUFSIZE;  /***INPUT/OUTPUT CONTROL */         01720900
*  DCL XBUFSOURC;  DEACT XBUFSOURC;  /***PV.XVAR02 INPUT VALUE */       01721000
*  DCL ZXBUFSOURC; DEACT ZXBUFSOURC;  /***INPUT/OUTPUT CONTROL */       01721100
*  DCL XBACK;  DEACT XBACK;        /***PV.XVAR02 INPUT VALUE */         01721200
*  DCL ZXBACK; DEACT ZXBACK;       /***INPUT/OUTPUT CONTROL */          01721300
*  DCL XDS_INFO;  DEACT XDS_INFO;  /***PV.XVAR02 OUTPUT NAME */         01721400
*  DCL ZXDS_INFO; DEACT ZXDS_INFO;  /***INPUT/OUTPUT CONTROL */         01721500
*  DCL XEXPBUF;  DEACT XEXPBUF;    /***PV.XVAR02 INPUT NAME */          01721600
*  DCL ZXEXPBUF; DEACT ZXEXPBUF;   /***INPUT/OUTPUT CONTROL */          01721700
*  DCL XINITBUF;  DEACT XINITBUF;  /***PV.XVAR02 INPUT NAME */          01721800
*  DCL ZXINITBUF; DEACT ZXINITBUF;  /***INPUT/OUTPUT CONTROL */         01721900
*  DCL XMINFREE;  DEACT XMINFREE;  /***PV.XVAR02 INPUT NAME */          01722000
*  DCL ZXMINFREE; DEACT ZXMINFREE;  /***INPUT/OUTPUT CONTROL */         01722100
*  DCL XRETPTOKN;  DEACT XRETPTOKN;  /***PV.XVAR02 OUTPUT NAME */       01722200
*  DCL ZXRETPTOKN; DEACT ZXRETPTOKN;  /***INPUT/OUTPUT CONTROL */       01722300
*  DCL XSTATAREA;  DEACT XSTATAREA;  /***PV.XVAR02 OUTPUT NAME */       01722400
*  DCL ZXSTATAREA; DEACT ZXSTATAREA;  /***INPUT/OUTPUT CONTROL */       01722500
*  DCL XPOOLTOKN;  DEACT XPOOLTOKN;  /***PV.XVAR02 INPUT NAME */        01722600
*  DCL ZXPOOLTOKN; DEACT ZXPOOLTOKN;  /***INPUT/OUTPUT CONTROL */       01722700
*  DCL XDUMMY5;  DEACT XDUMMY5;    /***PV.XVAR02 INPUT NAME */          01722800
*  DCL ZXDUMMY5; DEACT ZXDUMMY5;   /***INPUT/OUTPUT CONTROL */          01722900
*  DCL XWAIT;  DEACT XWAIT;        /***PV.XVAR02 INPUT VALUE */         01723000
*  DCL ZXWAIT; DEACT ZXWAIT;       /***INPUT/OUTPUT CONTROL */          01723100
*  DCL XDUMMY6;  DEACT XDUMMY6;    /***PV.XVAR02 INPUT NAME */          01723200
*  DCL ZXDUMMY6; DEACT ZXDUMMY6;   /***INPUT/OUTPUT CONTROL */          01723300
*  DCL XCLEAR;  DEACT XCLEAR;      /***PV.XVAR02 INPUT VALUE */         01723400
*  DCL ZXCLEAR; DEACT ZXCLEAR;     /***INPUT/OUTPUT CONTROL */          01723500
*  DCL XFREETO;  DEACT XFREETO;    /***PV.XVAR02 INPUT VALUE */         01723600
*  DCL ZXFREETO; DEACT ZXFREETO;   /***INPUT/OUTPUT CONTROL */          01723700
*  DCL XDUMMY7;  DEACT XDUMMY7;    /***PV.XVAR02 INPUT NAME */          01723800
*  DCL ZXDUMMY7; DEACT ZXDUMMY7;   /***INPUT/OUTPUT CONTROL */          01723900
*  DCL XFREERTN;  DEACT XFREERTN;  /***PV.XVAR02 INPUT NAME */          01724000
*  DCL ZXFREERTN; DEACT ZXFREERTN;  /***INPUT/OUTPUT CONTROL */         01724100
*  DCL XDUMMY8;  DEACT XDUMMY8;    /***PV.XVAR02 INPUT NAME */          01724200
*  DCL ZXDUMMY8; DEACT ZXDUMMY8;   /***INPUT/OUTPUT CONTROL */          01724300
*  DCL XRETCODE;  DEACT XRETCODE;  /***PV.XVAR02 OUTPUT NAME */         01724400
*  DCL ZXRETCODE; DEACT ZXRETCODE;  /***INPUT/OUTPUT CONTROL */         01724500
*  DCL XRSNCODE;  DEACT XRSNCODE;  /***PV.XVAR02 OUTPUT NAME */         01724600
*  DCL ZXRSNCODE; DEACT ZXRSNCODE;  /***INPUT/OUTPUT CONTROL */         01724700
*  DCL XPLISTVER FIXED;  DEACT XPLISTVER;  /***PV.XVAR02 INPUT VALUE */ 01724800
*  DCL ZXPLISTVER; DEACT ZXPLISTVER;  /***INPUT/OUTPUT CONTROL */       01724900
*  DCL XMF;  DEACT XMF;            /***PV.XVAR02 INPUT VALUE */         01725000
*  DCL ZXMF; DEACT ZXMF;           /***INPUT/OUTPUT CONTROL */          01725100
*  DCL XMFCTRL;  DEACT XMFCTRL;    /***PV.XVAR02 INPUT NAME */          01725200
*  DCL ZXMFCTRL; DEACT ZXMFCTRL;   /***INPUT/OUTPUT CONTROL */          01725300
*  DCL XMFATTR;  DEACT XMFATTR;    /***PV.XVAR02 INPUT VALUE */         01725400
*  DCL ZXMFATTR; DEACT ZXMFATTR;   /***INPUT/OUTPUT CONTROL */          01725500
*  DCL XMFSCK;  DEACT XMFSCK;      /***PV.XVAR02 INPUT VALUE */         01725600
*  DCL ZXMFSCK; DEACT ZXMFSCK;     /***INPUT/OUTPUT CONTROL */          01725700
*/********************************************************************/ 01725800
*/***PC.PLV01  PROCESS PLISTVER                                      */ 01725900
*/********************************************************************/ 01726000
*  IF TRANSLATE(PLISTVER(1)) = 'MAX' THEN                               01726100
*    XPLISTVER=2;                                                       01726200
*  ELSE                                                                 01726300
*    XPLISTVER=0;                                                       01726400
*  IF BUFLST64^='' & XPLISTVER<2                                        01726500
*    THEN                                                               01726600
*      XPLISTVER=2;                                                     01726700
*  IF COMPID^='' & XPLISTVER<1                                          01726800
*    THEN                                                               01726900
*      XPLISTVER=1;                                                     01727000
*  IF COMPUSER^='' & XPLISTVER<1                                        01727100
*    THEN                                                               01727200
*      XPLISTVER=1;                                                     01727300
*  IF BUFLST64^='' & XPLISTVER<2                                        01727400
*    THEN                                                               01727500
*      XPLISTVER=2;                                                     01727600
*  IF COMPID^='' & XPLISTVER<1                                          01727700
*    THEN                                                               01727800
*      XPLISTVER=1;                                                     01727900
*  IF COMPUSER^='' & XPLISTVER<1                                        01728000
*    THEN                                                               01728100
*      XPLISTVER=1;                                                     01728200
*  IF SRCLST64^='' & XPLISTVER<2                                        01728300
*    THEN                                                               01728400
*      XPLISTVER=2;                                                     01728500
*  IF TARLST64^='' & XPLISTVER<2                                        01728600
*    THEN                                                               01728700
*      XPLISTVER=2;                                                     01728800
*  IF BUFLST64^='' & XPLISTVER<2                                        01728900
*    THEN                                                               01729000
*      XPLISTVER=2;                                                     01729100
*  IF COMPID^='' & XPLISTVER<1                                          01729200
*    THEN                                                               01729300
*      XPLISTVER=1;                                                     01729400
*  IF COMPUSER^='' & XPLISTVER<1                                        01729500
*    THEN                                                               01729600
*      XPLISTVER=1;                                                     01729700
*  IF BUFLST64^='' & XPLISTVER<2                                        01729800
*    THEN                                                               01729900
*      XPLISTVER=2;                                                     01730000
*  IF COMPID^='' & XPLISTVER<1                                          01730100
*    THEN                                                               01730200
*      XPLISTVER=1;                                                     01730300
*  IF COMPUSER^='' & XPLISTVER<1                                        01730400
*    THEN                                                               01730500
*      XPLISTVER=1;                                                     01730600
*  IF BUFLST64^='' & XPLISTVER<2                                        01730700
*    THEN                                                               01730800
*      XPLISTVER=2;                                                     01730900
*  IF COMPID^='' & XPLISTVER<1                                          01731000
*    THEN                                                               01731100
*      XPLISTVER=1;                                                     01731200
*  IF COMPUSER^='' & XPLISTVER<1                                        01731300
*    THEN                                                               01731400
*      XPLISTVER=1;                                                     01731500
*  IF BUFLST64^='' & XPLISTVER<2                                        01731600
*    THEN                                                               01731700
*      XPLISTVER=2;                                                     01731800
*  IF COMPID^='' & XPLISTVER<1                                          01731900
*    THEN                                                               01732000
*      XPLISTVER=1;                                                     01732100
*  IF COMPUSER^='' & XPLISTVER<1                                        01732200
*    THEN                                                               01732300
*      XPLISTVER=1;                                                     01732400
*  IF PLISTVER^=''                                                      01732500
*     & TRANSLATE(PLISTVER(1))^='IMPLIED_VERSION'                       01732600
*     & TRANSLATE(PLISTVER(1))^='MAX'                                   01732700
*    THEN                                                               01732800
*      DO;                                                              01732900
*                                                                       01733000
*        ZCVAL='';                           /* ERROR FLAG */           01733100
*        IF PLISTVER='PLISTVER' ! PLISTVER='()'  /*CHECK ENTRY*/        01733200
*          THEN                                                         01733300
*            DO;                                                        01733400
*              ZMS=' 8, THE "PLISTVER" KEY'!! /**KOPTP* MSG*/           01733500
*                  ' MUST CONTAIN ONE'!!                                01733600
*                  ' (OR MORE) ARGUMENT(S).';                           01733700
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01733800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01733900
*              ZMACRET=8;                    /* MACRO ERROR */          01734000
*              ZCVAL='NO_ARGUMENT';                                     01734100
*            END;                                                       01734200
*        IF NUMBER(PLISTVER)>1               /* CHECK POSITIONALS */    01734300
*          THEN                                                         01734400
*            DO;                                                        01734500
*              ZMS=' 8, "PLISTVER'!!         /**KPOSP* MSG*/            01734600
*                  PLISTVER!!                                           01734700
*                  '" "PLISTVER"'!!                                     01734800
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        01734900
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01735000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01735100
*              ZMACRET=8;                    /* MACRO ERROR */          01735200
*            END;                                                       01735300
*                                                                       01735400
*        ZC=PLISTVER(1);                                                01735500
*        DO ZL=1 TO LENGTH(ZC);              /* MUST BE NUMBER */       01735600
*          IF ZC(ZL:ZL)<'0' !                /* MUST BE NUMERIC */      01735700
*             ZC(ZL:ZL)>'9'                  /* MUST BE NUMERIC */      01735800
*            THEN                                                       01735900
*              ZCVAL='NUMERIC';              /* NUMERIC ERROR */        01736000
*        END;                                                           01736100
*        IF ZCVAL=''                                                    01736200
*          THEN                                                         01736300
*            DO;                             /* CHECK RANGE LIMITS */   01736400
*            IF FIXED(PLISTVER(1))>=XPLISTVER                           01736500
*              THEN                                                     01736600
*                XPLISTVER=FIXED(PLISTVER(1));                          01736700
*              ELSE                                                     01736800
*                DO;                                                    01736900
*              ZMS=' 8, PLISTVER='!!         /**KVALP* MSG*/            01737000
*                    PLISTVER(1)!!                                      01737100
*                  ', BUT PLISTVER OF '!!                               01737200
*                    CHAR(XPLISTVER)!!                                  01737300
*                  ' IS REQUIRED.';                                     01737400
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01737500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01737600
*              ZMACRET=8;                    /* MACRO ERROR */          01737700
*                END;                                                   01737800
*              IF XPLISTVER<0 !              /* LOW LIMIT */            01737900
*                 XPLISTVER>2                /* HIGH LIMIT */           01738000
*                THEN                                                   01738100
*                  ZCVAL='RANGE';            /* RANGE ERROR */          01738200
*            END;                                                       01738300
*        IF ZCVAL^=''                                                   01738400
*          THEN                                                         01738500
*            DO;                             /* RANGE ERROR */          01738600
*              ZXPLISTVER='';                /* RESET IN/OUTPUT */      01738700
*              ZMS=' 8, "PLISTVER '!!        /**KRNGP* MSG*/            01738800
*                  PLISTVER!!                                           01738900
*                  '" THE RANGE IS "0-2"'!!                             01739000
*                  ' FOR ARGUMENT 1.';                                  01739100
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01739200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01739300
*              ZMACRET=8;                    /* MACRO ERROR */          01739400
*            END;                                                       01739500
*      END;                                                             01739600
*                                                                       01739700
*/********************************************************************/ 01739800
*/***PG.MF01  PROCESS MF MACRO FORMS                                 */ 01739900
*/********************************************************************/ 01740000
*/*PG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01740100
*  XMF='';                                                              01740200
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01740300
*  IF TRANSLATE(MF(1))                                                  01740400
*              = 'S'                         /* CHECK FOR KEYWORD */    01740500
*    THEN                                                               01740600
*      DO;                                                              01740700
*        XMFSCK='COMPLETE';                                             01740800
*        XMF='S';                            /* SET XVARIABLE */        01740900
*        IF NUMBER(MF)>1                     /* CHECK POSITIONALS */    01741000
*          THEN                                                         01741100
*            DO;                                                        01741200
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            01741300
*                  MF!!                                                 01741400
*                  '" "MF"'!!                                           01741500
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        01741600
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01741700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01741800
*              ZMACRET=8;                    /* MACRO ERROR */          01741900
*            END;                                                       01742000
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01742100
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     01742200
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01742300
*  IF TRANSLATE(MF(1))                                                  01742400
*              = 'L'                         /* CHECK FOR KEYWORD */    01742500
*    THEN                                                               01742600
*      DO;                                                              01742700
*        XMF='L';                            /* SET XVARIABLE */        01742800
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    01742900
*          THEN                                                         01743000
*            DO;                                                        01743100
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            01743200
*                  MF!!                                                 01743300
*                  '" "MF"'!!                                           01743400
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       01743500
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01743600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01743700
*              ZMACRET=8;                    /* MACRO ERROR */          01743800
*            END;                                                       01743900
*/*PG.KKCTL10 -MF(L) SPECIAL CHECK-----------------------------------*/ 01744000
*        ZMAXINVOCLEN = LENGTH(MF) + 2;                                 01744100
*        IF PLISTVER ^= ''                                              01744200
*          THEN                                                         01744300
*            ZMAXINVOCLEN=ZMAXINVOCLEN + LENGTH(PLISTVER) + 8;          01744400
*        IF LENGTH(MACKEYS) > ZMAXINVOCLEN !                            01744500
*           MACLIST ^= ''                    /* CHECK FOR OTHER PARMS*/ 01744600
*          THEN                                                         01744700
*            DO;                                                        01744800
*              ZMS=' 8, THE "L" FORM OF "MF"'!! /**MFLP* MSG*/          01744900
*                  ' CAN ONLY HAVE'!!                                   01745000
*                  ' THE "PLISTVER" KEY'!!                              01745100
*                  ' SPECIFIED ON THE INVOCATION.';                     01745200
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01745300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01745400
*              ZMACRET=8;                    /* MACRO ERROR */          01745500
*            END;                                                       01745600
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 01745700
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        01745800
*  IF MF(2)=''                               /* CHECK FOR NULL */       01745900
*   THEN                                                                01746000
*    DO;                                     /* KEY IS REQUIRED */      01746100
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      01746200
*        ZMS=' 8, WHEN "L" IS SPECIFIED'!!                              01746300
*            ' FOR THE "MF" KEY, POSITIONAL'!!                          01746400
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            01746500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01746600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01746700
*        ZMACRET=8;                          /* MACRO ERROR */          01746800
*    END;                                                               01746900
*  ELSE                                                                 01747000
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        01747100
*/*PG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE--------------------*/ 01747200
*  ZXMFATTR='INPUT';                         /* SET IN/OUTPUT */        01747300
*  XMFATTR='BDY(DWORD)';                     /* SET DEFAULT */          01747400
*  IF MF(3)^=''                              /* CHECK FOR NULL */       01747500
*    THEN                                                               01747600
*      XMFATTR=MF(3);                        /* SET XVARIABLE */        01747700
*/*PG.KCK01 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH---------------*/ 01747800
*  IF ZXMFATTR^='' &                         /* NOT IN/OUTPUT */        01747900
*     LENGTH(XMFATTR)>60                                                01748000
*    THEN                                                               01748100
*      DO;                                                              01748200
*        ZXMFATTR='';                        /* RESET IN/OUTPUT */      01748300
*        ZMS=' 8, "MF'!!                     /**KLNGP* MSG*/            01748400
*            MF!!                                                       01748500
*            '" ARGUMENT 3 EXCEEDS THE MAXIMUM'!!                       01748600
*            ' LENGTH OF 60 CHARACTERS. ';                              01748700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01748800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01748900
*        ZMACRET=8;                          /* MACRO ERROR */          01749000
*      END;                                                             01749100
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01749200
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     01749300
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01749400
*  IF TRANSLATE(MF(1))                                                  01749500
*              = 'M'                         /* CHECK FOR KEYWORD */    01749600
*    THEN                                                               01749700
*      DO;                                                              01749800
*        XMF='M';                            /* SET XVARIABLE */        01749900
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    01750000
*          THEN                                                         01750100
*            DO;                                                        01750200
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            01750300
*                  MF!!                                                 01750400
*                  '" "MF"'!!                                           01750500
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       01750600
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01750700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01750800
*              ZMACRET=8;                    /* MACRO ERROR */          01750900
*            END;                                                       01751000
*/*PG.KKCTL11 -MF(M) OUTPUT KEYS SPECIFIED?--------------------------*/ 01751100
*        IF ERRBFLST ^= ''                   /* OUTPUT KEY SPECIFIED */ 01751200
*        ! SRCERRL ^= ''                                                01751300
*        ! TARGERRL ^= ''                                               01751400
*        ! DS_INFO ^= ''                                                01751500
*        ! RETPTOKN ^= ''                                               01751600
*        ! STATAREA ^= ''                                               01751700
*          THEN                                                         01751800
*            DO;                                                        01751900
*              ZMS=' 8, THE "M" FORM OF "MF" CANNOT'!! /**MFMOP* MSG*/  01752000
*                  ' HAVE THE FOLLOWING OUTPUT KEY(S)'!!                01752100
*                  ' SPECIFIED ON THE INVOCATION:'!!                    01752200
*                  ' "ERRBFLST"'!!           /* INVALID KEY */          01752300
*                  ' OR "SRCERRL"'!!         /* INVALID KEY */          01752400
*                  ' OR "TARGERRL"'!!        /* INVALID KEY */          01752500
*                  ' OR "DS_INFO"'!!         /* INVALID KEY */          01752600
*                  ' OR "RETPTOKN"'!!        /* INVALID KEY */          01752700
*                  ' OR "STATAREA".';        /* INVALID KEY */          01752800
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01752900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01753000
*              ZMACRET=8;                    /* MACRO ERROR */          01753100
*            END;                                                       01753200
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 01753300
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        01753400
*  IF MF(2)=''                               /* CHECK FOR NULL */       01753500
*   THEN                                                                01753600
*    DO;                                     /* KEY IS REQUIRED */      01753700
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      01753800
*        ZMS=' 8, WHEN "M" IS SPECIFIED'!!                              01753900
*            ' FOR THE "MF" KEY, POSITIONAL'!!                          01754000
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            01754100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01754200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01754300
*        ZMACRET=8;                          /* MACRO ERROR */          01754400
*    END;                                                               01754500
*  ELSE                                                                 01754600
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        01754700
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01754800
*  XMFSCK='';                                /* RESET XVARIABLE */      01754900
*  IF TRANSLATE(MF(3))                                                  01755000
*              = 'COMPLETE'                  /* CHECK FOR KEYWORD */    01755100
*    THEN                                                               01755200
*      XMFSCK = 'COMPLETE';                  /* SET XVARIABLE */        01755300
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01755400
*  IF TRANSLATE(MF(3))                                                  01755500
*              = 'NOCHECK'                   /* CHECK FOR KEYWORD */    01755600
*    THEN                                                               01755700
*      XMFSCK = 'NOCHECK';                   /* SET XVARIABLE */        01755800
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01755900
*  ZXMFSCK='INPUT';                          /* SET IN/OUTPUT */        01756000
*  IF XMFSCK=''                              /* CHECK FOR KEYWORD */    01756100
*    THEN                                                               01756200
*      DO;                                   /* KEYWORD NOT ENTERED */  01756300
*        XMFSCK='COMPLETE';                  /* SET DEFAULT */          01756400
*        IF MF(3)^=''                                                   01756500
*          THEN                                                         01756600
*            DO;                                                        01756700
*              ZXMFSCK='';                   /* RESET IN/OUTPUT */      01756800
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/            01756900
*                  MF!!'"'!!                                            01757000
*                  ' ARGUMENT 3 IS AN UNKNOWN KEYWORD. '!!              01757100
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    01757200
*                  ' "COMPLETE"'!!           /* VALID KEYWORD */        01757300
*                  ' OR "NOCHECK".';         /* VALID KEYWORD */        01757400
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01757500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01757600
*              ZMACRET=8;                    /* MACRO ERROR */          01757700
*            END;                                                       01757800
*      END;                                                             01757900
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01758000
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     01758100
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01758200
*  IF TRANSLATE(MF(1))                                                  01758300
*              = 'E'                         /* CHECK FOR KEYWORD */    01758400
*    THEN                                                               01758500
*      DO;                                                              01758600
*        XMF='E';                            /* SET XVARIABLE */        01758700
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    01758800
*          THEN                                                         01758900
*            DO;                                                        01759000
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            01759100
*                  MF!!                                                 01759200
*                  '" "MF"'!!                                           01759300
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       01759400
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01759500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01759600
*              ZMACRET=8;                    /* MACRO ERROR */          01759700
*            END;                                                       01759800
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 01759900
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        01760000
*  IF MF(2)=''                               /* CHECK FOR NULL */       01760100
*   THEN                                                                01760200
*    DO;                                     /* KEY IS REQUIRED */      01760300
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      01760400
*        ZMS=' 8, WHEN "E" IS SPECIFIED'!!                              01760500
*            ' FOR THE "MF" KEY, POSITIONAL'!!                          01760600
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            01760700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01760800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01760900
*        ZMACRET=8;                          /* MACRO ERROR */          01761000
*    END;                                                               01761100
*  ELSE                                                                 01761200
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        01761300
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01761400
*  XMFSCK='';                                /* RESET XVARIABLE */      01761500
*  IF TRANSLATE(MF(3))                                                  01761600
*              = 'COMPLETE'                  /* CHECK FOR KEYWORD */    01761700
*    THEN                                                               01761800
*      XMFSCK = 'COMPLETE';                  /* SET XVARIABLE */        01761900
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01762000
*  IF TRANSLATE(MF(3))                                                  01762100
*              = 'NOCHECK'                   /* CHECK FOR KEYWORD */    01762200
*    THEN                                                               01762300
*      XMFSCK = 'NOCHECK';                   /* SET XVARIABLE */        01762400
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01762500
*  ZXMFSCK='INPUT';                          /* SET IN/OUTPUT */        01762600
*  IF XMFSCK=''                              /* CHECK FOR KEYWORD */    01762700
*    THEN                                                               01762800
*      DO;                                   /* KEYWORD NOT ENTERED */  01762900
*        XMFSCK='COMPLETE';                  /* SET DEFAULT */          01763000
*        IF MF(3)^=''                                                   01763100
*          THEN                                                         01763200
*            DO;                                                        01763300
*              ZXMFSCK='';                   /* RESET IN/OUTPUT */      01763400
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/            01763500
*                  MF!!'"'!!                                            01763600
*                  ' ARGUMENT 3 IS AN UNKNOWN KEYWORD. '!!              01763700
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    01763800
*                  ' "COMPLETE"'!!           /* VALID KEYWORD */        01763900
*                  ' OR "NOCHECK".';         /* VALID KEYWORD */        01764000
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01764100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01764200
*              ZMACRET=8;                    /* MACRO ERROR */          01764300
*            END;                                                       01764400
*      END;                                                             01764500
*/*PG.KKCTL05 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01764600
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     01764700
*/*PG.KKCTL06 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01764800
*  IF MF='MF'                                                           01764900
*    ! MF='()'                               /*CHECK ENTRY*/            01765000
*     THEN                                                              01765100
*       DO;                                                             01765200
*              ZMS=' 8, THE "MF" KEY'!!      /**KOPTP* MSG*/            01765300
*                  ' MUST CONTAIN ONE'!!                                01765400
*                  ' (OR MORE) ARGUMENT(S).';                           01765500
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01765600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01765700
*              ZMACRET=8;                    /* MACRO ERROR */          01765800
*       END;                                                            01765900
*  ELSE                                                                 01766000
*    DO;                                                                01766100
*      ZXMF='INPUT';                         /* SET IN/OUTPUT */        01766200
*      IF XMF=''                             /* CHECK FOR KEYWORD */    01766300
*        THEN                                                           01766400
*          DO;                               /* KEYWORD NOT ENTERED */  01766500
*            XMF='S';                        /* SET DEFAULT */          01766600
*            XMFSCK='COMPLETE';              /* COMPLETE CHECKING */    01766700
*            IF MF(1)^=''                    /* CHECK FOR KEYWORD */    01766800
*              THEN                                                     01766900
*                DO;                                                    01767000
*                  ZXMF='';                  /* RESET IN/OUTPUT */      01767100
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/            01767200
*                  MF!!'"'!!                                            01767300
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              01767400
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    01767500
*                  ' "S",'!!                 /* VALID KEYWORD */        01767600
*                  ' "L",'!!                 /* VALID KEYWORD */        01767700
*                  ' "M",'!!                 /* VALID KEYWORD */        01767800
*                  ' OR "E".';               /* VALID KEYWORD */        01767900
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01768000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01768100
*              ZMACRET=8;                    /* MACRO ERROR */          01768200
*                END;                                                   01768300
*          END;                                                         01768400
*    END;                                                               01768500
*/********************************************************************/ 01768600
*/***PD.P01 FULL DEFAULT CHECKING                                    */ 01768700
*/********************************************************************/ 01768800
*  IF PLISTVER=''                                                       01768900
*     ! PLISTVER(1)='IMPLIED_VERSION'                                   01769000
*    THEN                                                               01769100
*      ZC='ON';                              /* DEFAULT FLAG ON */      01769200
*    ELSE                                                               01769300
*      ZC='OFF';                             /* DEFAULT FLAG OFF */     01769400
*/********************************************************************/ 01769500
*/***PD.P02 DEFAULT ECHO                                             */ 01769600
*/********************************************************************/ 01769700
*/*PD.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 01769800
*  IF XMF^='L'                                                          01769900
*     & XMFSCK='COMPLETE'                                               01770000
*    THEN                                                               01770100
*      DO;                                   /* FULL SYNTAX CHECK */    01770200
*        ANS('/*DEFAULT(S): */')                                        01770300
*           NORESCAN COL(MACLMAR+5);                                    01770400
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01770500
*  IF TRANSLATE(REQUEST(1))                                             01770600
*              = 'ASSIGN_BUFFER'  !          /* CHECK FOR KEYWORD */    01770700
*     REQUEST(1)=''                          /* CHECK FOR NULL */       01770800
*    THEN                                                               01770900
*      DO;                                                              01771000
*/*PD.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 01771100
*  XDUMMY1='';                               /* RESET XVARIABLE */      01771200
*  IF BUFLIST^=''                            /* CHECK ME KEY */         01771300
*    THEN                                                               01771400
*      DO;                                   /* VALID ME KEY */         01771500
*        XDUMMY1='BUFLIST';                  /* SET XVARIABLE */        01771600
*      END;                                                             01771700
*/*PD.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 01771800
*  IF BUFLST64^=''                           /* CHECK ME KEY */         01771900
*    THEN                                                               01772000
*      DO;                                                              01772100
*        IF XDUMMY1=''                       /* CHECK XVARIABLE */      01772200
*          THEN                                                         01772300
*            DO;                             /* VALID ME KEY */         01772400
*              XDUMMY1='BUFLST64';           /* SET XVAR1 */            01772500
*            END;                                                       01772600
*      END;                                                             01772700
*/*PD.KMEKY07 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 01772800
*  IF XDUMMY1=''                             /* CHECK XVARIABLE */      01772900
*    THEN                                                               01773000
*      DO;                                                              01773100
*        XDUMMY1='BUFLIST';                                             01773200
*        ZC='ON';                            /* DEFAULT FLAG ON */      01773300
*      END;                                                             01773400
*/*PD.KMEKY10 NAME, RQD INPUT, ME KEYS -START------------------------*/ 01773500
*  IF XDUMMY1='BUFLIST'                      /* CHECK FOR ME KEY */     01773600
*    THEN                                                               01773700
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        01773800
*/*PD.KMEKY09 NAME, RQD INPUT, ME KEYS -END--------------------------*/ 01773900
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          01774000
*/*PD.KMEKY10 NAME, RQD INPUT, ME KEYS -START------------------------*/ 01774100
*  IF XDUMMY1='BUFLST64'                     /* CHECK FOR ME KEY */     01774200
*    THEN                                                               01774300
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        01774400
*/*PD.KMEKY11 NAME, RQD INPUT, ME KEYS -END--------------------------*/ 01774500
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          01774600
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01774700
*  XBUFTYPE='SAME';                          /* RESET XVARIABLE */      01774800
*  IF BUFTYPE(1)=''                                                     01774900
*    THEN                                                               01775000
*        ZC='ON';                            /* DEFAULT FLAG ON */      01775100
*  IF TRANSLATE(BUFTYPE(1))                                             01775200
*              = 'SAME'                                                 01775300
*    THEN                                                               01775400
*        XBUFTYPE='';                        /* SET XVARIABLE */        01775500
*  IF TRANSLATE(BUFTYPE(1))                                             01775600
*              = 'PAGEELIG'                                             01775700
*    THEN                                                               01775800
*        XBUFTYPE='';                        /* SET XVARIABLE */        01775900
*  IF TRANSLATE(BUFTYPE(1))                                             01776000
*              = 'FIXED'                                                01776100
*    THEN                                                               01776200
*        XBUFTYPE='';                        /* SET XVARIABLE */        01776300
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01776400
*  IF XBUFTYPE^=''                                                      01776500
*    THEN DO;                                                           01776600
*      ANS('/* BUFTYPE('!!                                              01776700
*          XBUFTYPE!!                                                   01776800
*          ')*/')                                                       01776900
*          NORESCAN COL(MACLMAR+5);                                     01777000
*      XBUFTYPE = '';                                                   01777100
*    END;                                                               01777200
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01777300
*  XCSMUSER='NO';                            /* RESET XVARIABLE */      01777400
*  IF CSMUSER(1)=''                                                     01777500
*    THEN                                                               01777600
*        ZC='ON';                            /* DEFAULT FLAG ON */      01777700
*  IF TRANSLATE(CSMUSER(1))                                             01777800
*              = 'NO'                                                   01777900
*    THEN                                                               01778000
*        XCSMUSER='';                        /* SET XVARIABLE */        01778100
*  IF TRANSLATE(CSMUSER(1))                                             01778200
*              = 'YES'                                                  01778300
*    THEN                                                               01778400
*        XCSMUSER='';                        /* SET XVARIABLE */        01778500
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01778600
*  IF XCSMUSER^=''                                                      01778700
*    THEN DO;                                                           01778800
*      ANS('/* CSMUSER('!!                                              01778900
*          XCSMUSER!!                                                   01779000
*          ')*/')                                                       01779100
*          NORESCAN COL(MACLMAR+5);                                     01779200
*      XCSMUSER = '';                                                   01779300
*    END;                                                               01779400
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01779500
*  XGAP='';                                                             01779600
*  IF GAP(1)=''                                                         01779700
*    THEN                                                               01779800
*      DO;                                                              01779900
*        XGAP='0';                           /* SET DEFAULT */          01780000
*        ZC='ON';                            /* DEFAULT FLAG ON */      01780100
*      END;                                                             01780200
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01780300
*  IF XGAP^=''                                                          01780400
*    THEN DO;                                                           01780500
*      ANS('/* GAP('!!                                                  01780600
*          XGAP!!                                                       01780700
*          ')*/')                                                       01780800
*          NORESCAN COL(MACLMAR+5);                                     01780900
*      XGAP = '';                                                       01781000
*    END;                                                               01781100
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01781200
*  XOWNERID='';                                                         01781300
*  IF OWNERID(1)=''                                                     01781400
*    THEN                                                               01781500
*      DO;                                                              01781600
*        XOWNERID='0';                       /* SET DEFAULT */          01781700
*        ZC='ON';                            /* DEFAULT FLAG ON */      01781800
*      END;                                                             01781900
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01782000
*  IF XOWNERID^=''                                                      01782100
*    THEN DO;                                                           01782200
*      ANS('/* OWNERID('!!                                              01782300
*          XOWNERID!!                                                   01782400
*          ')*/')                                                       01782500
*          NORESCAN COL(MACLMAR+5);                                     01782600
*      XOWNERID = '';                                                   01782700
*    END;                                                               01782800
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01782900
*  XCOMPID='';                                                          01783000
*  IF COMPID(1)=''                                                      01783100
*    THEN                                                               01783200
*      DO;                                                              01783300
*        XCOMPID='0';                        /* SET DEFAULT */          01783400
*        ZC='ON';                            /* DEFAULT FLAG ON */      01783500
*      END;                                                             01783600
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01783700
*  IF XPLISTVER>=1                                                      01783800
*    THEN                                                               01783900
*      DO;                                                              01784000
*  IF XCOMPID^=''                                                       01784100
*    THEN DO;                                                           01784200
*      ANS('/* COMPID('!!                                               01784300
*          XCOMPID!!                                                    01784400
*          ')*/')                                                       01784500
*          NORESCAN COL(MACLMAR+5);                                     01784600
*      XCOMPID = '';                                                    01784700
*    END;                                                               01784800
*      END;                                                             01784900
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01785000
*  XCOMPUSER='';                                                        01785100
*  IF COMPUSER(1)=''                                                    01785200
*    THEN                                                               01785300
*      DO;                                                              01785400
*        XCOMPUSER='0';                      /* SET DEFAULT */          01785500
*        ZC='ON';                            /* DEFAULT FLAG ON */      01785600
*      END;                                                             01785700
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01785800
*  IF XPLISTVER>=1                                                      01785900
*    THEN                                                               01786000
*      DO;                                                              01786100
*  IF XCOMPUSER^=''                                                     01786200
*    THEN DO;                                                           01786300
*      ANS('/* COMPUSER('!!                                             01786400
*          XCOMPUSER!!                                                  01786500
*          ')*/')                                                       01786600
*          NORESCAN COL(MACLMAR+5);                                     01786700
*      XCOMPUSER = '';                                                  01786800
*    END;                                                               01786900
*      END;                                                             01787000
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01787100
*  XTASKID='';                                                          01787200
*  IF TASKID(1)=''                                                      01787300
*    THEN                                                               01787400
*      DO;                                                              01787500
*        XTASKID='0';                        /* SET DEFAULT */          01787600
*        ZC='ON';                            /* DEFAULT FLAG ON */      01787700
*      END;                                                             01787800
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01787900
*  IF XTASKID^=''                                                       01788000
*    THEN DO;                                                           01788100
*      ANS('/* TASKID('!!                                               01788200
*          XTASKID!!                                                    01788300
*          ')*/')                                                       01788400
*          NORESCAN COL(MACLMAR+5);                                     01788500
*      XTASKID = '';                                                    01788600
*    END;                                                               01788700
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01788800
*  XTHREAD='';                                                          01788900
*  IF THREAD(1)=''                                                      01789000
*    THEN                                                               01789100
*      DO;                                                              01789200
*        XTHREAD='0';                        /* SET DEFAULT */          01789300
*        ZC='ON';                            /* DEFAULT FLAG ON */      01789400
*      END;                                                             01789500
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01789600
*  IF XTHREAD^=''                                                       01789700
*    THEN DO;                                                           01789800
*      ANS('/* THREAD('!!                                               01789900
*          XTHREAD!!                                                    01790000
*          ')*/')                                                       01790100
*          NORESCAN COL(MACLMAR+5);                                     01790200
*      XTHREAD = '';                                                    01790300
*    END;                                                               01790400
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01790500
*  XUTILRTN='';                                                         01790600
*  IF UTILRTN(1)=''                                                     01790700
*    THEN                                                               01790800
*      DO;                                                              01790900
*        XUTILRTN='0';                       /* SET DEFAULT */          01791000
*        ZC='ON';                            /* DEFAULT FLAG ON */      01791100
*      END;                                                             01791200
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01791300
*  IF XUTILRTN^=''                                                      01791400
*    THEN DO;                                                           01791500
*      ANS('/* UTILRTN('!!                                              01791600
*          XUTILRTN!!                                                   01791700
*          ')*/')                                                       01791800
*          NORESCAN COL(MACLMAR+5);                                     01791900
*      XUTILRTN = '';                                                   01792000
*    END;                                                               01792100
*/*PD.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01792200
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     01792300
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01792400
*  IF TRANSLATE(REQUEST(1))                                             01792500
*              = 'CHANGE_OWNER'              /* CHECK FOR KEYWORD */    01792600
*    THEN                                                               01792700
*      DO;                                                              01792800
*/*PD.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 01792900
*  XDUMMY2='';                               /* RESET XVARIABLE */      01793000
*  IF BUFLIST^=''                            /* CHECK ME KEY */         01793100
*    THEN                                                               01793200
*      DO;                                   /* VALID ME KEY */         01793300
*        XDUMMY2='BUFLIST';                  /* SET XVARIABLE */        01793400
*      END;                                                             01793500
*/*PD.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 01793600
*  IF BUFLST64^=''                           /* CHECK ME KEY */         01793700
*    THEN                                                               01793800
*      DO;                                                              01793900
*        IF XDUMMY2=''                       /* CHECK XVARIABLE */      01794000
*          THEN                                                         01794100
*            DO;                             /* VALID ME KEY */         01794200
*              XDUMMY2='BUFLST64';           /* SET XVAR1 */            01794300
*            END;                                                       01794400
*      END;                                                             01794500
*/*PD.KMEKY07 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 01794600
*  IF XDUMMY2=''                             /* CHECK XVARIABLE */      01794700
*    THEN                                                               01794800
*      DO;                                                              01794900
*        XDUMMY2='BUFLIST';                                             01795000
*        ZC='ON';                            /* DEFAULT FLAG ON */      01795100
*      END;                                                             01795200
*/*PD.KMEKY10 NAME, RQD INPUT, ME KEYS -START------------------------*/ 01795300
*  IF XDUMMY2='BUFLIST'                      /* CHECK FOR ME KEY */     01795400
*    THEN                                                               01795500
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        01795600
*/*PD.KMEKY09 NAME, RQD INPUT, ME KEYS -END--------------------------*/ 01795700
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          01795800
*/*PD.KMEKY10 NAME, RQD INPUT, ME KEYS -START------------------------*/ 01795900
*  IF XDUMMY2='BUFLST64'                     /* CHECK FOR ME KEY */     01796000
*    THEN                                                               01796100
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        01796200
*/*PD.KMEKY11 NAME, RQD INPUT, ME KEYS -END--------------------------*/ 01796300
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          01796400
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01796500
*  XCSMUSER='NO';                            /* RESET XVARIABLE */      01796600
*  IF CSMUSER(1)=''                                                     01796700
*    THEN                                                               01796800
*        ZC='ON';                            /* DEFAULT FLAG ON */      01796900
*  IF TRANSLATE(CSMUSER(1))                                             01797000
*              = 'NO'                                                   01797100
*    THEN                                                               01797200
*        XCSMUSER='';                        /* SET XVARIABLE */        01797300
*  IF TRANSLATE(CSMUSER(1))                                             01797400
*              = 'YES'                                                  01797500
*    THEN                                                               01797600
*        XCSMUSER='';                        /* SET XVARIABLE */        01797700
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01797800
*  IF XCSMUSER^=''                                                      01797900
*    THEN DO;                                                           01798000
*      ANS('/* CSMUSER('!!                                              01798100
*          XCSMUSER!!                                                   01798200
*          ')*/')                                                       01798300
*          NORESCAN COL(MACLMAR+5);                                     01798400
*      XCSMUSER = '';                                                   01798500
*    END;                                                               01798600
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01798700
*  XGAP='';                                                             01798800
*  IF GAP(1)=''                                                         01798900
*    THEN                                                               01799000
*      DO;                                                              01799100
*        XGAP='0';                           /* SET DEFAULT */          01799200
*        ZC='ON';                            /* DEFAULT FLAG ON */      01799300
*      END;                                                             01799400
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01799500
*  IF XGAP^=''                                                          01799600
*    THEN DO;                                                           01799700
*      ANS('/* GAP('!!                                                  01799800
*          XGAP!!                                                       01799900
*          ')*/')                                                       01800000
*          NORESCAN COL(MACLMAR+5);                                     01800100
*      XGAP = '';                                                       01800200
*    END;                                                               01800300
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01800400
*  XOWNERID='';                                                         01800500
*  IF OWNERID(1)=''                                                     01800600
*    THEN                                                               01800700
*      DO;                                                              01800800
*        XOWNERID='0';                       /* SET DEFAULT */          01800900
*        ZC='ON';                            /* DEFAULT FLAG ON */      01801000
*      END;                                                             01801100
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01801200
*  IF XOWNERID^=''                                                      01801300
*    THEN DO;                                                           01801400
*      ANS('/* OWNERID('!!                                              01801500
*          XOWNERID!!                                                   01801600
*          ')*/')                                                       01801700
*          NORESCAN COL(MACLMAR+5);                                     01801800
*      XOWNERID = '';                                                   01801900
*    END;                                                               01802000
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01802100
*  XCOMPID='';                                                          01802200
*  IF COMPID(1)=''                                                      01802300
*    THEN                                                               01802400
*      DO;                                                              01802500
*        XCOMPID='0';                        /* SET DEFAULT */          01802600
*        ZC='ON';                            /* DEFAULT FLAG ON */      01802700
*      END;                                                             01802800
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01802900
*  IF XPLISTVER>=1                                                      01803000
*    THEN                                                               01803100
*      DO;                                                              01803200
*  IF XCOMPID^=''                                                       01803300
*    THEN DO;                                                           01803400
*      ANS('/* COMPID('!!                                               01803500
*          XCOMPID!!                                                    01803600
*          ')*/')                                                       01803700
*          NORESCAN COL(MACLMAR+5);                                     01803800
*      XCOMPID = '';                                                    01803900
*    END;                                                               01804000
*      END;                                                             01804100
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01804200
*  XCOMPUSER='';                                                        01804300
*  IF COMPUSER(1)=''                                                    01804400
*    THEN                                                               01804500
*      DO;                                                              01804600
*        XCOMPUSER='0';                      /* SET DEFAULT */          01804700
*        ZC='ON';                            /* DEFAULT FLAG ON */      01804800
*      END;                                                             01804900
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01805000
*  IF XPLISTVER>=1                                                      01805100
*    THEN                                                               01805200
*      DO;                                                              01805300
*  IF XCOMPUSER^=''                                                     01805400
*    THEN DO;                                                           01805500
*      ANS('/* COMPUSER('!!                                             01805600
*          XCOMPUSER!!                                                  01805700
*          ')*/')                                                       01805800
*          NORESCAN COL(MACLMAR+5);                                     01805900
*      XCOMPUSER = '';                                                  01806000
*    END;                                                               01806100
*      END;                                                             01806200
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01806300
*  XSKIPBUF='NO';                            /* RESET XVARIABLE */      01806400
*  IF SKIPBUF(1)=''                                                     01806500
*    THEN                                                               01806600
*        ZC='ON';                            /* DEFAULT FLAG ON */      01806700
*  IF TRANSLATE(SKIPBUF(1))                                             01806800
*              = 'NO'                                                   01806900
*    THEN                                                               01807000
*        XSKIPBUF='';                        /* SET XVARIABLE */        01807100
*  IF TRANSLATE(SKIPBUF(1))                                             01807200
*              = 'YES'                                                  01807300
*    THEN                                                               01807400
*        XSKIPBUF='';                        /* SET XVARIABLE */        01807500
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01807600
*  IF XSKIPBUF^=''                                                      01807700
*    THEN DO;                                                           01807800
*      ANS('/* SKIPBUF('!!                                              01807900
*          XSKIPBUF!!                                                   01808000
*          ')*/')                                                       01808100
*          NORESCAN COL(MACLMAR+5);                                     01808200
*      XSKIPBUF = '';                                                   01808300
*    END;                                                               01808400
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01808500
*  XTASKID='';                                                          01808600
*  IF TASKID(1)=''                                                      01808700
*    THEN                                                               01808800
*      DO;                                                              01808900
*        XTASKID='0';                        /* SET DEFAULT */          01809000
*        ZC='ON';                            /* DEFAULT FLAG ON */      01809100
*      END;                                                             01809200
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01809300
*  IF XTASKID^=''                                                       01809400
*    THEN DO;                                                           01809500
*      ANS('/* TASKID('!!                                               01809600
*          XTASKID!!                                                    01809700
*          ')*/')                                                       01809800
*          NORESCAN COL(MACLMAR+5);                                     01809900
*      XTASKID = '';                                                    01810000
*    END;                                                               01810100
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01810200
*  XTHREAD='';                                                          01810300
*  IF THREAD(1)=''                                                      01810400
*    THEN                                                               01810500
*      DO;                                                              01810600
*        XTHREAD='0';                        /* SET DEFAULT */          01810700
*        ZC='ON';                            /* DEFAULT FLAG ON */      01810800
*      END;                                                             01810900
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01811000
*  IF XTHREAD^=''                                                       01811100
*    THEN DO;                                                           01811200
*      ANS('/* THREAD('!!                                               01811300
*          XTHREAD!!                                                    01811400
*          ')*/')                                                       01811500
*          NORESCAN COL(MACLMAR+5);                                     01811600
*      XTHREAD = '';                                                    01811700
*    END;                                                               01811800
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01811900
*  XUTILRTN='';                                                         01812000
*  IF UTILRTN(1)=''                                                     01812100
*    THEN                                                               01812200
*      DO;                                                              01812300
*        XUTILRTN='0';                       /* SET DEFAULT */          01812400
*        ZC='ON';                            /* DEFAULT FLAG ON */      01812500
*      END;                                                             01812600
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01812700
*  IF XUTILRTN^=''                                                      01812800
*    THEN DO;                                                           01812900
*      ANS('/* UTILRTN('!!                                              01813000
*          XUTILRTN!!                                                   01813100
*          ')*/')                                                       01813200
*          NORESCAN COL(MACLMAR+5);                                     01813300
*      XUTILRTN = '';                                                   01813400
*    END;                                                               01813500
*/*PD.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01813600
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     01813700
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01813800
*  IF TRANSLATE(REQUEST(1))                                             01813900
*              = 'COPY_DATA'                 /* CHECK FOR KEYWORD */    01814000
*    THEN                                                               01814100
*      DO;                                                              01814200
*/*PD.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01814300
*  IF PAD(1)=''                                                         01814400
*    THEN                                                               01814500
*      DO;                                                              01814600
*        ANS('/*PAD(NO)*/')                                             01814700
*            NORESCAN COL(MACLMAR+5);                                   01814800
*        ZC='ON';                            /* DEFAULT FLAG ON */      01814900
*      END;                                                             01815000
*/*PD.KXVAR01 NAME, OPT RQD INPUT, KEYS -XVARIABLE-------------------*/ 01815100
*  XPADCHAR='';                                                         01815200
*  IF PADCHAR(1)=''                                                     01815300
*    THEN                                                               01815400
*      DO;                                                              01815500
*        XPADCHAR='0';                       /* SET DEFAULT */          01815600
*        ZC='ON';                            /* DEFAULT FLAG ON */      01815700
*      END;                                                             01815800
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01815900
*  IF XPADCHAR^=''                                                      01816000
*    THEN DO;                                                           01816100
*      ANS('/* PADCHAR('!!                                              01816200
*          XPADCHAR!!                                                   01816300
*          ')*/')                                                       01816400
*          NORESCAN COL(MACLMAR+5);                                     01816500
*      XPADCHAR = '';                                                   01816600
*    END;                                                               01816700
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01816800
*  XSRCGAP='';                                                          01816900
*  IF SRCGAP(1)=''                                                      01817000
*    THEN                                                               01817100
*      DO;                                                              01817200
*        XSRCGAP='0';                        /* SET DEFAULT */          01817300
*        ZC='ON';                            /* DEFAULT FLAG ON */      01817400
*      END;                                                             01817500
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01817600
*  IF XSRCGAP^=''                                                       01817700
*    THEN DO;                                                           01817800
*      ANS('/* SRCGAP('!!                                               01817900
*          XSRCGAP!!                                                    01818000
*          ')*/')                                                       01818100
*          NORESCAN COL(MACLMAR+5);                                     01818200
*      XSRCGAP = '';                                                    01818300
*    END;                                                               01818400
*/*PD.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 01818500
*  XDUMMY3='';                               /* RESET XVARIABLE */      01818600
*  IF SRCLIST^=''                            /* CHECK ME KEY */         01818700
*    THEN                                                               01818800
*      DO;                                   /* VALID ME KEY */         01818900
*        XDUMMY3='SRCLIST';                  /* SET XVARIABLE */        01819000
*      END;                                                             01819100
*/*PD.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 01819200
*  IF SRCLST64^=''                           /* CHECK ME KEY */         01819300
*    THEN                                                               01819400
*      DO;                                                              01819500
*        IF XDUMMY3=''                       /* CHECK XVARIABLE */      01819600
*          THEN                                                         01819700
*            DO;                             /* VALID ME KEY */         01819800
*              XDUMMY3='SRCLST64';           /* SET XVAR1 */            01819900
*            END;                                                       01820000
*      END;                                                             01820100
*/*PD.KMEKY07 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 01820200
*  IF XDUMMY3=''                             /* CHECK XVARIABLE */      01820300
*    THEN                                                               01820400
*      DO;                                                              01820500
*        XDUMMY3='SRCLIST';                                             01820600
*        ZC='ON';                            /* DEFAULT FLAG ON */      01820700
*      END;                                                             01820800
*/*PD.KMEKY10 NAME, RQD INPUT, ME KEYS -START------------------------*/ 01820900
*  IF XDUMMY3='SRCLIST'                      /* CHECK FOR ME KEY */     01821000
*    THEN                                                               01821100
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        01821200
*/*PD.KMEKY09 NAME, RQD INPUT, ME KEYS -END--------------------------*/ 01821300
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          01821400
*/*PD.KMEKY10 NAME, RQD INPUT, ME KEYS -START------------------------*/ 01821500
*  IF XDUMMY3='SRCLST64'                     /* CHECK FOR ME KEY */     01821600
*    THEN                                                               01821700
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        01821800
*/*PD.KMEKY11 NAME, RQD INPUT, ME KEYS -END--------------------------*/ 01821900
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          01822000
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01822100
*  XTARGGAP='';                                                         01822200
*  IF TARGGAP(1)=''                                                     01822300
*    THEN                                                               01822400
*      DO;                                                              01822500
*        XTARGGAP='0';                       /* SET DEFAULT */          01822600
*        ZC='ON';                            /* DEFAULT FLAG ON */      01822700
*      END;                                                             01822800
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01822900
*  IF XTARGGAP^=''                                                      01823000
*    THEN DO;                                                           01823100
*      ANS('/* TARGGAP('!!                                              01823200
*          XTARGGAP!!                                                   01823300
*          ')*/')                                                       01823400
*          NORESCAN COL(MACLMAR+5);                                     01823500
*      XTARGGAP = '';                                                   01823600
*    END;                                                               01823700
*/*PD.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 01823800
*  XDUMMY4='';                               /* RESET XVARIABLE */      01823900
*  IF TARGLIST^=''                           /* CHECK ME KEY */         01824000
*    THEN                                                               01824100
*      DO;                                   /* VALID ME KEY */         01824200
*        XDUMMY4='TARGLIST';                 /* SET XVARIABLE */        01824300
*      END;                                                             01824400
*/*PD.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 01824500
*  IF TARLST64^=''                           /* CHECK ME KEY */         01824600
*    THEN                                                               01824700
*      DO;                                                              01824800
*        IF XDUMMY4=''                       /* CHECK XVARIABLE */      01824900
*          THEN                                                         01825000
*            DO;                             /* VALID ME KEY */         01825100
*              XDUMMY4='TARLST64';           /* SET XVAR1 */            01825200
*            END;                                                       01825300
*      END;                                                             01825400
*/*PD.KMEKY07 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 01825500
*  IF XDUMMY4=''                             /* CHECK XVARIABLE */      01825600
*    THEN                                                               01825700
*      DO;                                                              01825800
*        XDUMMY4='TARGLIST';                                            01825900
*        ZC='ON';                            /* DEFAULT FLAG ON */      01826000
*      END;                                                             01826100
*/*PD.KMEKY10 NAME, RQD INPUT, ME KEYS -START------------------------*/ 01826200
*  IF XDUMMY4='TARGLIST'                     /* CHECK FOR ME KEY */     01826300
*    THEN                                                               01826400
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        01826500
*/*PD.KMEKY09 NAME, RQD INPUT, ME KEYS -END--------------------------*/ 01826600
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          01826700
*/*PD.KMEKY10 NAME, RQD INPUT, ME KEYS -START------------------------*/ 01826800
*  IF XDUMMY4='TARLST64'                     /* CHECK FOR ME KEY */     01826900
*    THEN                                                               01827000
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        01827100
*/*PD.KMEKY11 NAME, RQD INPUT, ME KEYS -END--------------------------*/ 01827200
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          01827300
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01827400
*  XTHREAD='';                                                          01827500
*  IF THREAD(1)=''                                                      01827600
*    THEN                                                               01827700
*      DO;                                                              01827800
*        XTHREAD='0';                        /* SET DEFAULT */          01827900
*        ZC='ON';                            /* DEFAULT FLAG ON */      01828000
*      END;                                                             01828100
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01828200
*  IF XTHREAD^=''                                                       01828300
*    THEN DO;                                                           01828400
*      ANS('/* THREAD('!!                                               01828500
*          XTHREAD!!                                                    01828600
*          ')*/')                                                       01828700
*          NORESCAN COL(MACLMAR+5);                                     01828800
*      XTHREAD = '';                                                    01828900
*    END;                                                               01829000
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01829100
*  XUTILRTN='';                                                         01829200
*  IF UTILRTN(1)=''                                                     01829300
*    THEN                                                               01829400
*      DO;                                                              01829500
*        XUTILRTN='0';                       /* SET DEFAULT */          01829600
*        ZC='ON';                            /* DEFAULT FLAG ON */      01829700
*      END;                                                             01829800
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01829900
*  IF XUTILRTN^=''                                                      01830000
*    THEN DO;                                                           01830100
*      ANS('/* UTILRTN('!!                                              01830200
*          XUTILRTN!!                                                   01830300
*          ')*/')                                                       01830400
*          NORESCAN COL(MACLMAR+5);                                     01830500
*      XUTILRTN = '';                                                   01830600
*    END;                                                               01830700
*/*PD.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01830800
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     01830900
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01831000
*  IF TRANSLATE(BUFSOURC(1))                                            01831100
*              = 'DSPACE'  !                 /* CHECK FOR KEYWORD */    01831200
*     BUFSOURC(1)=''                         /* CHECK FOR NULL */       01831300
*    THEN                                                               01831400
*      DO;                                                              01831500
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01831600
*  XBACK='31';                               /* RESET XVARIABLE */      01831700
*  IF BACK(1)=''                                                        01831800
*    THEN                                                               01831900
*        ZC='ON';                            /* DEFAULT FLAG ON */      01832000
*  IF TRANSLATE(BACK(1))                                                01832100
*              = '31'                                                   01832200
*    THEN                                                               01832300
*        XBACK='';                           /* SET XVARIABLE */        01832400
*  IF TRANSLATE(BACK(1))                                                01832500
*              = '64'                                                   01832600
*    THEN                                                               01832700
*        XBACK='';                           /* SET XVARIABLE */        01832800
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01832900
*  IF XBACK^=''                                                         01833000
*    THEN DO;                                                           01833100
*      ANS('/* BACK('!!                                                 01833200
*          XBACK!!                                                      01833300
*          ')*/')                                                       01833400
*          NORESCAN COL(MACLMAR+5);                                     01833500
*      XBACK = '';                                                      01833600
*    END;                                                               01833700
*/*PD.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01833800
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     01833900
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01834000
*  IF TRANSLATE(REQUEST(1))                                             01834100
*              = 'FIX_BUFFER'                /* CHECK FOR KEYWORD */    01834200
*    THEN                                                               01834300
*      DO;                                                              01834400
*/*PD.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 01834500
*  XDUMMY5='';                               /* RESET XVARIABLE */      01834600
*  IF BUFLIST^=''                            /* CHECK ME KEY */         01834700
*    THEN                                                               01834800
*      DO;                                   /* VALID ME KEY */         01834900
*        XDUMMY5='BUFLIST';                  /* SET XVARIABLE */        01835000
*      END;                                                             01835100
*/*PD.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 01835200
*  IF BUFLST64^=''                           /* CHECK ME KEY */         01835300
*    THEN                                                               01835400
*      DO;                                                              01835500
*        IF XDUMMY5=''                       /* CHECK XVARIABLE */      01835600
*          THEN                                                         01835700
*            DO;                             /* VALID ME KEY */         01835800
*              XDUMMY5='BUFLST64';           /* SET XVAR1 */            01835900
*            END;                                                       01836000
*      END;                                                             01836100
*/*PD.KMEKY07 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 01836200
*  IF XDUMMY5=''                             /* CHECK XVARIABLE */      01836300
*    THEN                                                               01836400
*      DO;                                                              01836500
*        XDUMMY5='BUFLIST';                                             01836600
*        ZC='ON';                            /* DEFAULT FLAG ON */      01836700
*      END;                                                             01836800
*/*PD.KMEKY10 NAME, RQD INPUT, ME KEYS -START------------------------*/ 01836900
*  IF XDUMMY5='BUFLIST'                      /* CHECK FOR ME KEY */     01837000
*    THEN                                                               01837100
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        01837200
*/*PD.KMEKY09 NAME, RQD INPUT, ME KEYS -END--------------------------*/ 01837300
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          01837400
*/*PD.KMEKY10 NAME, RQD INPUT, ME KEYS -START------------------------*/ 01837500
*  IF XDUMMY5='BUFLST64'                     /* CHECK FOR ME KEY */     01837600
*    THEN                                                               01837700
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        01837800
*/*PD.KMEKY11 NAME, RQD INPUT, ME KEYS -END--------------------------*/ 01837900
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          01838000
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01838100
*  XGAP='';                                                             01838200
*  IF GAP(1)=''                                                         01838300
*    THEN                                                               01838400
*      DO;                                                              01838500
*        XGAP='0';                           /* SET DEFAULT */          01838600
*        ZC='ON';                            /* DEFAULT FLAG ON */      01838700
*      END;                                                             01838800
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01838900
*  IF XGAP^=''                                                          01839000
*    THEN DO;                                                           01839100
*      ANS('/* GAP('!!                                                  01839200
*          XGAP!!                                                       01839300
*          ')*/')                                                       01839400
*          NORESCAN COL(MACLMAR+5);                                     01839500
*      XGAP = '';                                                       01839600
*    END;                                                               01839700
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01839800
*  XCOMPID='';                                                          01839900
*  IF COMPID(1)=''                                                      01840000
*    THEN                                                               01840100
*      DO;                                                              01840200
*        XCOMPID='0';                        /* SET DEFAULT */          01840300
*        ZC='ON';                            /* DEFAULT FLAG ON */      01840400
*      END;                                                             01840500
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01840600
*  IF XPLISTVER>=1                                                      01840700
*    THEN                                                               01840800
*      DO;                                                              01840900
*  IF XCOMPID^=''                                                       01841000
*    THEN DO;                                                           01841100
*      ANS('/* COMPID('!!                                               01841200
*          XCOMPID!!                                                    01841300
*          ')*/')                                                       01841400
*          NORESCAN COL(MACLMAR+5);                                     01841500
*      XCOMPID = '';                                                    01841600
*    END;                                                               01841700
*      END;                                                             01841800
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01841900
*  XCOMPUSER='';                                                        01842000
*  IF COMPUSER(1)=''                                                    01842100
*    THEN                                                               01842200
*      DO;                                                              01842300
*        XCOMPUSER='0';                      /* SET DEFAULT */          01842400
*        ZC='ON';                            /* DEFAULT FLAG ON */      01842500
*      END;                                                             01842600
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01842700
*  IF XPLISTVER>=1                                                      01842800
*    THEN                                                               01842900
*      DO;                                                              01843000
*  IF XCOMPUSER^=''                                                     01843100
*    THEN DO;                                                           01843200
*      ANS('/* COMPUSER('!!                                             01843300
*          XCOMPUSER!!                                                  01843400
*          ')*/')                                                       01843500
*          NORESCAN COL(MACLMAR+5);                                     01843600
*      XCOMPUSER = '';                                                  01843700
*    END;                                                               01843800
*      END;                                                             01843900
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01844000
*  XTHREAD='';                                                          01844100
*  IF THREAD(1)=''                                                      01844200
*    THEN                                                               01844300
*      DO;                                                              01844400
*        XTHREAD='0';                        /* SET DEFAULT */          01844500
*        ZC='ON';                            /* DEFAULT FLAG ON */      01844600
*      END;                                                             01844700
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01844800
*  IF XTHREAD^=''                                                       01844900
*    THEN DO;                                                           01845000
*      ANS('/* THREAD('!!                                               01845100
*          XTHREAD!!                                                    01845200
*          ')*/')                                                       01845300
*          NORESCAN COL(MACLMAR+5);                                     01845400
*      XTHREAD = '';                                                    01845500
*    END;                                                               01845600
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01845700
*  XUTILRTN='';                                                         01845800
*  IF UTILRTN(1)=''                                                     01845900
*    THEN                                                               01846000
*      DO;                                                              01846100
*        XUTILRTN='0';                       /* SET DEFAULT */          01846200
*        ZC='ON';                            /* DEFAULT FLAG ON */      01846300
*      END;                                                             01846400
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01846500
*  IF XUTILRTN^=''                                                      01846600
*    THEN DO;                                                           01846700
*      ANS('/* UTILRTN('!!                                              01846800
*          XUTILRTN!!                                                   01846900
*          ')*/')                                                       01847000
*          NORESCAN COL(MACLMAR+5);                                     01847100
*      XUTILRTN = '';                                                   01847200
*    END;                                                               01847300
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01847400
*  XWAIT='NO';                               /* RESET XVARIABLE */      01847500
*  IF WAIT(1)=''                                                        01847600
*    THEN                                                               01847700
*        ZC='ON';                            /* DEFAULT FLAG ON */      01847800
*  IF TRANSLATE(WAIT(1))                                                01847900
*              = 'NO'                                                   01848000
*    THEN                                                               01848100
*        XWAIT='';                           /* SET XVARIABLE */        01848200
*  IF TRANSLATE(WAIT(1))                                                01848300
*              = 'YES'                                                  01848400
*    THEN                                                               01848500
*        XWAIT='';                           /* SET XVARIABLE */        01848600
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01848700
*  IF XWAIT^=''                                                         01848800
*    THEN DO;                                                           01848900
*      ANS('/* WAIT('!!                                                 01849000
*          XWAIT!!                                                      01849100
*          ')*/')                                                       01849200
*          NORESCAN COL(MACLMAR+5);                                     01849300
*      XWAIT = '';                                                      01849400
*    END;                                                               01849500
*/*PD.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01849600
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     01849700
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01849800
*  IF TRANSLATE(REQUEST(1))                                             01849900
*              = 'FREE_BUFFER'               /* CHECK FOR KEYWORD */    01850000
*    THEN                                                               01850100
*      DO;                                                              01850200
*/*PD.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 01850300
*  XDUMMY6='';                               /* RESET XVARIABLE */      01850400
*  IF BUFLIST^=''                            /* CHECK ME KEY */         01850500
*    THEN                                                               01850600
*      DO;                                   /* VALID ME KEY */         01850700
*        XDUMMY6='BUFLIST';                  /* SET XVARIABLE */        01850800
*      END;                                                             01850900
*/*PD.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 01851000
*  IF BUFLST64^=''                           /* CHECK ME KEY */         01851100
*    THEN                                                               01851200
*      DO;                                                              01851300
*        IF XDUMMY6=''                       /* CHECK XVARIABLE */      01851400
*          THEN                                                         01851500
*            DO;                             /* VALID ME KEY */         01851600
*              XDUMMY6='BUFLST64';           /* SET XVAR1 */            01851700
*            END;                                                       01851800
*      END;                                                             01851900
*/*PD.KMEKY07 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 01852000
*  IF XDUMMY6=''                             /* CHECK XVARIABLE */      01852100
*    THEN                                                               01852200
*      DO;                                                              01852300
*        XDUMMY6='BUFLIST';                                             01852400
*        ZC='ON';                            /* DEFAULT FLAG ON */      01852500
*      END;                                                             01852600
*/*PD.KMEKY10 NAME, RQD INPUT, ME KEYS -START------------------------*/ 01852700
*  IF XDUMMY6='BUFLIST'                      /* CHECK FOR ME KEY */     01852800
*    THEN                                                               01852900
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        01853000
*/*PD.KMEKY09 NAME, RQD INPUT, ME KEYS -END--------------------------*/ 01853100
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          01853200
*/*PD.KMEKY10 NAME, RQD INPUT, ME KEYS -START------------------------*/ 01853300
*  IF XDUMMY6='BUFLST64'                     /* CHECK FOR ME KEY */     01853400
*    THEN                                                               01853500
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        01853600
*/*PD.KMEKY11 NAME, RQD INPUT, ME KEYS -END--------------------------*/ 01853700
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          01853800
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01853900
*  XCLEAR='NO';                              /* RESET XVARIABLE */      01854000
*  IF CLEAR(1)=''                                                       01854100
*    THEN                                                               01854200
*        ZC='ON';                            /* DEFAULT FLAG ON */      01854300
*  IF TRANSLATE(CLEAR(1))                                               01854400
*              = 'NO'                                                   01854500
*    THEN                                                               01854600
*        XCLEAR='';                          /* SET XVARIABLE */        01854700
*  IF TRANSLATE(CLEAR(1))                                               01854800
*              = 'YES'                                                  01854900
*    THEN                                                               01855000
*        XCLEAR='';                          /* SET XVARIABLE */        01855100
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01855200
*  IF XCLEAR^=''                                                        01855300
*    THEN DO;                                                           01855400
*      ANS('/* CLEAR('!!                                                01855500
*          XCLEAR!!                                                     01855600
*          ')*/')                                                       01855700
*          NORESCAN COL(MACLMAR+5);                                     01855800
*      XCLEAR = '';                                                     01855900
*    END;                                                               01856000
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01856100
*  XFREETO='USER';                           /* RESET XVARIABLE */      01856200
*  IF FREETO(1)=''                                                      01856300
*    THEN                                                               01856400
*        ZC='ON';                            /* DEFAULT FLAG ON */      01856500
*  IF TRANSLATE(FREETO(1))                                              01856600
*              = 'USER'                                                 01856700
*    THEN                                                               01856800
*        XFREETO='';                         /* SET XVARIABLE */        01856900
*  IF TRANSLATE(FREETO(1))                                              01857000
*              = 'CSM'                                                  01857100
*    THEN                                                               01857200
*        XFREETO='';                         /* SET XVARIABLE */        01857300
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01857400
*  IF XFREETO^=''                                                       01857500
*    THEN DO;                                                           01857600
*      ANS('/* FREETO('!!                                               01857700
*          XFREETO!!                                                    01857800
*          ')*/')                                                       01857900
*          NORESCAN COL(MACLMAR+5);                                     01858000
*      XFREETO = '';                                                    01858100
*    END;                                                               01858200
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01858300
*  XGAP='';                                                             01858400
*  IF GAP(1)=''                                                         01858500
*    THEN                                                               01858600
*      DO;                                                              01858700
*        XGAP='0';                           /* SET DEFAULT */          01858800
*        ZC='ON';                            /* DEFAULT FLAG ON */      01858900
*      END;                                                             01859000
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01859100
*  IF XGAP^=''                                                          01859200
*    THEN DO;                                                           01859300
*      ANS('/* GAP('!!                                                  01859400
*          XGAP!!                                                       01859500
*          ')*/')                                                       01859600
*          NORESCAN COL(MACLMAR+5);                                     01859700
*      XGAP = '';                                                       01859800
*    END;                                                               01859900
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01860000
*  XSKIPBUF='NO';                            /* RESET XVARIABLE */      01860100
*  IF SKIPBUF(1)=''                                                     01860200
*    THEN                                                               01860300
*        ZC='ON';                            /* DEFAULT FLAG ON */      01860400
*  IF TRANSLATE(SKIPBUF(1))                                             01860500
*              = 'NO'                                                   01860600
*    THEN                                                               01860700
*        XSKIPBUF='';                        /* SET XVARIABLE */        01860800
*  IF TRANSLATE(SKIPBUF(1))                                             01860900
*              = 'YES'                                                  01861000
*    THEN                                                               01861100
*        XSKIPBUF='';                        /* SET XVARIABLE */        01861200
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01861300
*  IF XSKIPBUF^=''                                                      01861400
*    THEN DO;                                                           01861500
*      ANS('/* SKIPBUF('!!                                              01861600
*          XSKIPBUF!!                                                   01861700
*          ')*/')                                                       01861800
*          NORESCAN COL(MACLMAR+5);                                     01861900
*      XSKIPBUF = '';                                                   01862000
*    END;                                                               01862100
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01862200
*  XCOMPID='';                                                          01862300
*  IF COMPID(1)=''                                                      01862400
*    THEN                                                               01862500
*      DO;                                                              01862600
*        XCOMPID='0';                        /* SET DEFAULT */          01862700
*        ZC='ON';                            /* DEFAULT FLAG ON */      01862800
*      END;                                                             01862900
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01863000
*  IF XPLISTVER>=1                                                      01863100
*    THEN                                                               01863200
*      DO;                                                              01863300
*  IF XCOMPID^=''                                                       01863400
*    THEN DO;                                                           01863500
*      ANS('/* COMPID('!!                                               01863600
*          XCOMPID!!                                                    01863700
*          ')*/')                                                       01863800
*          NORESCAN COL(MACLMAR+5);                                     01863900
*      XCOMPID = '';                                                    01864000
*    END;                                                               01864100
*      END;                                                             01864200
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01864300
*  XCOMPUSER='';                                                        01864400
*  IF COMPUSER(1)=''                                                    01864500
*    THEN                                                               01864600
*      DO;                                                              01864700
*        XCOMPUSER='0';                      /* SET DEFAULT */          01864800
*        ZC='ON';                            /* DEFAULT FLAG ON */      01864900
*      END;                                                             01865000
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01865100
*  IF XPLISTVER>=1                                                      01865200
*    THEN                                                               01865300
*      DO;                                                              01865400
*  IF XCOMPUSER^=''                                                     01865500
*    THEN DO;                                                           01865600
*      ANS('/* COMPUSER('!!                                             01865700
*          XCOMPUSER!!                                                  01865800
*          ')*/')                                                       01865900
*          NORESCAN COL(MACLMAR+5);                                     01866000
*      XCOMPUSER = '';                                                  01866100
*    END;                                                               01866200
*      END;                                                             01866300
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01866400
*  XTHREAD='';                                                          01866500
*  IF THREAD(1)=''                                                      01866600
*    THEN                                                               01866700
*      DO;                                                              01866800
*        XTHREAD='0';                        /* SET DEFAULT */          01866900
*        ZC='ON';                            /* DEFAULT FLAG ON */      01867000
*      END;                                                             01867100
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01867200
*  IF XTHREAD^=''                                                       01867300
*    THEN DO;                                                           01867400
*      ANS('/* THREAD('!!                                               01867500
*          XTHREAD!!                                                    01867600
*          ')*/')                                                       01867700
*          NORESCAN COL(MACLMAR+5);                                     01867800
*      XTHREAD = '';                                                    01867900
*    END;                                                               01868000
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01868100
*  XUTILRTN='';                                                         01868200
*  IF UTILRTN(1)=''                                                     01868300
*    THEN                                                               01868400
*      DO;                                                              01868500
*        XUTILRTN='0';                       /* SET DEFAULT */          01868600
*        ZC='ON';                            /* DEFAULT FLAG ON */      01868700
*      END;                                                             01868800
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01868900
*  IF XUTILRTN^=''                                                      01869000
*    THEN DO;                                                           01869100
*      ANS('/* UTILRTN('!!                                              01869200
*          XUTILRTN!!                                                   01869300
*          ')*/')                                                       01869400
*          NORESCAN COL(MACLMAR+5);                                     01869500
*      XUTILRTN = '';                                                   01869600
*    END;                                                               01869700
*/*PD.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01869800
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     01869900
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01870000
*  IF TRANSLATE(REQUEST(1))                                             01870100
*              = 'GET_BUFFER'                /* CHECK FOR KEYWORD */    01870200
*    THEN                                                               01870300
*      DO;                                                              01870400
*/*PD.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 01870500
*  XDUMMY7='';                               /* RESET XVARIABLE */      01870600
*  IF BUFLIST^=''                            /* CHECK ME KEY */         01870700
*    THEN                                                               01870800
*      DO;                                   /* VALID ME KEY */         01870900
*        XDUMMY7='BUFLIST';                  /* SET XVARIABLE */        01871000
*      END;                                                             01871100
*/*PD.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 01871200
*  IF BUFLST64^=''                           /* CHECK ME KEY */         01871300
*    THEN                                                               01871400
*      DO;                                                              01871500
*        IF XDUMMY7=''                       /* CHECK XVARIABLE */      01871600
*          THEN                                                         01871700
*            DO;                             /* VALID ME KEY */         01871800
*              XDUMMY7='BUFLST64';           /* SET XVAR1 */            01871900
*            END;                                                       01872000
*      END;                                                             01872100
*/*PD.KMEKY07 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 01872200
*  IF XDUMMY7=''                             /* CHECK XVARIABLE */      01872300
*    THEN                                                               01872400
*      DO;                                                              01872500
*        XDUMMY7='BUFLIST';                                             01872600
*        ZC='ON';                            /* DEFAULT FLAG ON */      01872700
*      END;                                                             01872800
*/*PD.KMEKY10 NAME, RQD INPUT, ME KEYS -START------------------------*/ 01872900
*  IF XDUMMY7='BUFLIST'                      /* CHECK FOR ME KEY */     01873000
*    THEN                                                               01873100
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        01873200
*/*PD.KMEKY09 NAME, RQD INPUT, ME KEYS -END--------------------------*/ 01873300
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          01873400
*/*PD.KMEKY10 NAME, RQD INPUT, ME KEYS -START------------------------*/ 01873500
*  IF XDUMMY7='BUFLST64'                     /* CHECK FOR ME KEY */     01873600
*    THEN                                                               01873700
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        01873800
*/*PD.KMEKY11 NAME, RQD INPUT, ME KEYS -END--------------------------*/ 01873900
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          01874000
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01874100
*  XCLEAR='NO';                              /* RESET XVARIABLE */      01874200
*  IF CLEAR(1)=''                                                       01874300
*    THEN                                                               01874400
*        ZC='ON';                            /* DEFAULT FLAG ON */      01874500
*  IF TRANSLATE(CLEAR(1))                                               01874600
*              = 'NO'                                                   01874700
*    THEN                                                               01874800
*        XCLEAR='';                          /* SET XVARIABLE */        01874900
*  IF TRANSLATE(CLEAR(1))                                               01875000
*              = 'YES'                                                  01875100
*    THEN                                                               01875200
*        XCLEAR='';                          /* SET XVARIABLE */        01875300
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01875400
*  IF XCLEAR^=''                                                        01875500
*    THEN DO;                                                           01875600
*      ANS('/* CLEAR('!!                                                01875700
*          XCLEAR!!                                                     01875800
*          ')*/')                                                       01875900
*          NORESCAN COL(MACLMAR+5);                                     01876000
*      XCLEAR = '';                                                     01876100
*    END;                                                               01876200
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01876300
*  XCSMUSER='NO';                            /* RESET XVARIABLE */      01876400
*  IF CSMUSER(1)=''                                                     01876500
*    THEN                                                               01876600
*        ZC='ON';                            /* DEFAULT FLAG ON */      01876700
*  IF TRANSLATE(CSMUSER(1))                                             01876800
*              = 'NO'                                                   01876900
*    THEN                                                               01877000
*        XCSMUSER='';                        /* SET XVARIABLE */        01877100
*  IF TRANSLATE(CSMUSER(1))                                             01877200
*              = 'YES'                                                  01877300
*    THEN                                                               01877400
*        XCSMUSER='';                        /* SET XVARIABLE */        01877500
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01877600
*  IF XCSMUSER^=''                                                      01877700
*    THEN DO;                                                           01877800
*      ANS('/* CSMUSER('!!                                              01877900
*          XCSMUSER!!                                                   01878000
*          ')*/')                                                       01878100
*          NORESCAN COL(MACLMAR+5);                                     01878200
*      XCSMUSER = '';                                                   01878300
*    END;                                                               01878400
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01878500
*  XFREERTN='';                                                         01878600
*  IF FREERTN(1)=''                                                     01878700
*    THEN                                                               01878800
*      DO;                                                              01878900
*        XFREERTN='CSM';                     /* SET DEFAULT */          01879000
*        ZC='ON';                            /* DEFAULT FLAG ON */      01879100
*      END;                                                             01879200
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01879300
*  IF XFREERTN^=''                                                      01879400
*    THEN DO;                                                           01879500
*      ANS('/* FREERTN('!!                                              01879600
*          XFREERTN!!                                                   01879700
*          ')*/')                                                       01879800
*          NORESCAN COL(MACLMAR+5);                                     01879900
*      XFREERTN = '';                                                   01880000
*    END;                                                               01880100
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01880200
*  XGAP='';                                                             01880300
*  IF GAP(1)=''                                                         01880400
*    THEN                                                               01880500
*      DO;                                                              01880600
*        XGAP='0';                           /* SET DEFAULT */          01880700
*        ZC='ON';                            /* DEFAULT FLAG ON */      01880800
*      END;                                                             01880900
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01881000
*  IF XGAP^=''                                                          01881100
*    THEN DO;                                                           01881200
*      ANS('/* GAP('!!                                                  01881300
*          XGAP!!                                                       01881400
*          ')*/')                                                       01881500
*          NORESCAN COL(MACLMAR+5);                                     01881600
*      XGAP = '';                                                       01881700
*    END;                                                               01881800
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01881900
*  XOWNERID='';                                                         01882000
*  IF OWNERID(1)=''                                                     01882100
*    THEN                                                               01882200
*      DO;                                                              01882300
*        XOWNERID='0';                       /* SET DEFAULT */          01882400
*        ZC='ON';                            /* DEFAULT FLAG ON */      01882500
*      END;                                                             01882600
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01882700
*  IF XOWNERID^=''                                                      01882800
*    THEN DO;                                                           01882900
*      ANS('/* OWNERID('!!                                              01883000
*          XOWNERID!!                                                   01883100
*          ')*/')                                                       01883200
*          NORESCAN COL(MACLMAR+5);                                     01883300
*      XOWNERID = '';                                                   01883400
*    END;                                                               01883500
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01883600
*  XCOMPID='';                                                          01883700
*  IF COMPID(1)=''                                                      01883800
*    THEN                                                               01883900
*      DO;                                                              01884000
*        XCOMPID='0';                        /* SET DEFAULT */          01884100
*        ZC='ON';                            /* DEFAULT FLAG ON */      01884200
*      END;                                                             01884300
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01884400
*  IF XPLISTVER>=1                                                      01884500
*    THEN                                                               01884600
*      DO;                                                              01884700
*  IF XCOMPID^=''                                                       01884800
*    THEN DO;                                                           01884900
*      ANS('/* COMPID('!!                                               01885000
*          XCOMPID!!                                                    01885100
*          ')*/')                                                       01885200
*          NORESCAN COL(MACLMAR+5);                                     01885300
*      XCOMPID = '';                                                    01885400
*    END;                                                               01885500
*      END;                                                             01885600
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01885700
*  XCOMPUSER='';                                                        01885800
*  IF COMPUSER(1)=''                                                    01885900
*    THEN                                                               01886000
*      DO;                                                              01886100
*        XCOMPUSER='0';                      /* SET DEFAULT */          01886200
*        ZC='ON';                            /* DEFAULT FLAG ON */      01886300
*      END;                                                             01886400
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01886500
*  IF XPLISTVER>=1                                                      01886600
*    THEN                                                               01886700
*      DO;                                                              01886800
*  IF XCOMPUSER^=''                                                     01886900
*    THEN DO;                                                           01887000
*      ANS('/* COMPUSER('!!                                             01887100
*          XCOMPUSER!!                                                  01887200
*          ')*/')                                                       01887300
*          NORESCAN COL(MACLMAR+5);                                     01887400
*      XCOMPUSER = '';                                                  01887500
*    END;                                                               01887600
*      END;                                                             01887700
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01887800
*  XTASKID='';                                                          01887900
*  IF TASKID(1)=''                                                      01888000
*    THEN                                                               01888100
*      DO;                                                              01888200
*        XTASKID='0';                        /* SET DEFAULT */          01888300
*        ZC='ON';                            /* DEFAULT FLAG ON */      01888400
*      END;                                                             01888500
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01888600
*  IF XTASKID^=''                                                       01888700
*    THEN DO;                                                           01888800
*      ANS('/* TASKID('!!                                               01888900
*          XTASKID!!                                                    01889000
*          ')*/')                                                       01889100
*          NORESCAN COL(MACLMAR+5);                                     01889200
*      XTASKID = '';                                                    01889300
*    END;                                                               01889400
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01889500
*  XTHREAD='';                                                          01889600
*  IF THREAD(1)=''                                                      01889700
*    THEN                                                               01889800
*      DO;                                                              01889900
*        XTHREAD='0';                        /* SET DEFAULT */          01890000
*        ZC='ON';                            /* DEFAULT FLAG ON */      01890100
*      END;                                                             01890200
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01890300
*  IF XTHREAD^=''                                                       01890400
*    THEN DO;                                                           01890500
*      ANS('/* THREAD('!!                                               01890600
*          XTHREAD!!                                                    01890700
*          ')*/')                                                       01890800
*          NORESCAN COL(MACLMAR+5);                                     01890900
*      XTHREAD = '';                                                    01891000
*    END;                                                               01891100
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01891200
*  XUTILRTN='';                                                         01891300
*  IF UTILRTN(1)=''                                                     01891400
*    THEN                                                               01891500
*      DO;                                                              01891600
*        XUTILRTN='0';                       /* SET DEFAULT */          01891700
*        ZC='ON';                            /* DEFAULT FLAG ON */      01891800
*      END;                                                             01891900
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01892000
*  IF XUTILRTN^=''                                                      01892100
*    THEN DO;                                                           01892200
*      ANS('/* UTILRTN('!!                                              01892300
*          XUTILRTN!!                                                   01892400
*          ')*/')                                                       01892500
*          NORESCAN COL(MACLMAR+5);                                     01892600
*      XUTILRTN = '';                                                   01892700
*    END;                                                               01892800
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01892900
*  XWAIT='NO';                               /* RESET XVARIABLE */      01893000
*  IF WAIT(1)=''                                                        01893100
*    THEN                                                               01893200
*        ZC='ON';                            /* DEFAULT FLAG ON */      01893300
*  IF TRANSLATE(WAIT(1))                                                01893400
*              = 'NO'                                                   01893500
*    THEN                                                               01893600
*        XWAIT='';                           /* SET XVARIABLE */        01893700
*  IF TRANSLATE(WAIT(1))                                                01893800
*              = 'YES'                                                  01893900
*    THEN                                                               01894000
*        XWAIT='';                           /* SET XVARIABLE */        01894100
*  IF TRANSLATE(WAIT(1))                                                01894200
*              = 'EXPAND'                                               01894300
*    THEN                                                               01894400
*        XWAIT='';                           /* SET XVARIABLE */        01894500
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01894600
*  IF XWAIT^=''                                                         01894700
*    THEN DO;                                                           01894800
*      ANS('/* WAIT('!!                                                 01894900
*          XWAIT!!                                                      01895000
*          ')*/')                                                       01895100
*          NORESCAN COL(MACLMAR+5);                                     01895200
*      XWAIT = '';                                                      01895300
*    END;                                                               01895400
*/*PD.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01895500
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     01895600
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01895700
*  IF TRANSLATE(REQUEST(1))                                             01895800
*              = 'PAGE_BUFFER'               /* CHECK FOR KEYWORD */    01895900
*    THEN                                                               01896000
*      DO;                                                              01896100
*/*PD.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 01896200
*  XDUMMY8='';                               /* RESET XVARIABLE */      01896300
*  IF BUFLIST^=''                            /* CHECK ME KEY */         01896400
*    THEN                                                               01896500
*      DO;                                   /* VALID ME KEY */         01896600
*        XDUMMY8='BUFLIST';                  /* SET XVARIABLE */        01896700
*      END;                                                             01896800
*/*PD.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 01896900
*  IF BUFLST64^=''                           /* CHECK ME KEY */         01897000
*    THEN                                                               01897100
*      DO;                                                              01897200
*        IF XDUMMY8=''                       /* CHECK XVARIABLE */      01897300
*          THEN                                                         01897400
*            DO;                             /* VALID ME KEY */         01897500
*              XDUMMY8='BUFLST64';           /* SET XVAR1 */            01897600
*            END;                                                       01897700
*      END;                                                             01897800
*/*PD.KMEKY07 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 01897900
*  IF XDUMMY8=''                             /* CHECK XVARIABLE */      01898000
*    THEN                                                               01898100
*      DO;                                                              01898200
*        XDUMMY8='BUFLIST';                                             01898300
*        ZC='ON';                            /* DEFAULT FLAG ON */      01898400
*      END;                                                             01898500
*/*PD.KMEKY10 NAME, RQD INPUT, ME KEYS -START------------------------*/ 01898600
*  IF XDUMMY8='BUFLIST'                      /* CHECK FOR ME KEY */     01898700
*    THEN                                                               01898800
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        01898900
*/*PD.KMEKY09 NAME, RQD INPUT, ME KEYS -END--------------------------*/ 01899000
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          01899100
*/*PD.KMEKY10 NAME, RQD INPUT, ME KEYS -START------------------------*/ 01899200
*  IF XDUMMY8='BUFLST64'                     /* CHECK FOR ME KEY */     01899300
*    THEN                                                               01899400
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        01899500
*/*PD.KMEKY11 NAME, RQD INPUT, ME KEYS -END--------------------------*/ 01899600
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          01899700
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01899800
*  XGAP='';                                                             01899900
*  IF GAP(1)=''                                                         01900000
*    THEN                                                               01900100
*      DO;                                                              01900200
*        XGAP='0';                           /* SET DEFAULT */          01900300
*        ZC='ON';                            /* DEFAULT FLAG ON */      01900400
*      END;                                                             01900500
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01900600
*  IF XGAP^=''                                                          01900700
*    THEN DO;                                                           01900800
*      ANS('/* GAP('!!                                                  01900900
*          XGAP!!                                                       01901000
*          ')*/')                                                       01901100
*          NORESCAN COL(MACLMAR+5);                                     01901200
*      XGAP = '';                                                       01901300
*    END;                                                               01901400
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01901500
*  XCOMPID='';                                                          01901600
*  IF COMPID(1)=''                                                      01901700
*    THEN                                                               01901800
*      DO;                                                              01901900
*        XCOMPID='0';                        /* SET DEFAULT */          01902000
*        ZC='ON';                            /* DEFAULT FLAG ON */      01902100
*      END;                                                             01902200
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01902300
*  IF XPLISTVER>=1                                                      01902400
*    THEN                                                               01902500
*      DO;                                                              01902600
*  IF XCOMPID^=''                                                       01902700
*    THEN DO;                                                           01902800
*      ANS('/* COMPID('!!                                               01902900
*          XCOMPID!!                                                    01903000
*          ')*/')                                                       01903100
*          NORESCAN COL(MACLMAR+5);                                     01903200
*      XCOMPID = '';                                                    01903300
*    END;                                                               01903400
*      END;                                                             01903500
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01903600
*  XCOMPUSER='';                                                        01903700
*  IF COMPUSER(1)=''                                                    01903800
*    THEN                                                               01903900
*      DO;                                                              01904000
*        XCOMPUSER='0';                      /* SET DEFAULT */          01904100
*        ZC='ON';                            /* DEFAULT FLAG ON */      01904200
*      END;                                                             01904300
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01904400
*  IF XPLISTVER>=1                                                      01904500
*    THEN                                                               01904600
*      DO;                                                              01904700
*  IF XCOMPUSER^=''                                                     01904800
*    THEN DO;                                                           01904900
*      ANS('/* COMPUSER('!!                                             01905000
*          XCOMPUSER!!                                                  01905100
*          ')*/')                                                       01905200
*          NORESCAN COL(MACLMAR+5);                                     01905300
*      XCOMPUSER = '';                                                  01905400
*    END;                                                               01905500
*      END;                                                             01905600
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01905700
*  XTHREAD='';                                                          01905800
*  IF THREAD(1)=''                                                      01905900
*    THEN                                                               01906000
*      DO;                                                              01906100
*        XTHREAD='0';                        /* SET DEFAULT */          01906200
*        ZC='ON';                            /* DEFAULT FLAG ON */      01906300
*      END;                                                             01906400
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01906500
*  IF XTHREAD^=''                                                       01906600
*    THEN DO;                                                           01906700
*      ANS('/* THREAD('!!                                               01906800
*          XTHREAD!!                                                    01906900
*          ')*/')                                                       01907000
*          NORESCAN COL(MACLMAR+5);                                     01907100
*      XTHREAD = '';                                                    01907200
*    END;                                                               01907300
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01907400
*  XUTILRTN='';                                                         01907500
*  IF UTILRTN(1)=''                                                     01907600
*    THEN                                                               01907700
*      DO;                                                              01907800
*        XUTILRTN='0';                       /* SET DEFAULT */          01907900
*        ZC='ON';                            /* DEFAULT FLAG ON */      01908000
*      END;                                                             01908100
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01908200
*  IF XUTILRTN^=''                                                      01908300
*    THEN DO;                                                           01908400
*      ANS('/* UTILRTN('!!                                              01908500
*          XUTILRTN!!                                                   01908600
*          ')*/')                                                       01908700
*          NORESCAN COL(MACLMAR+5);                                     01908800
*      XUTILRTN = '';                                                   01908900
*    END;                                                               01909000
*/*PD.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01909100
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     01909200
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 01909300
*  IF PLISTVER=''                                                       01909400
*    THEN DO;                                                           01909500
*      ANS('/* PLISTVER('!!                                             01909600
*          CHAR(XPLISTVER)!!                                            01909700
*          ')*/')                                                       01909800
*          NORESCAN COL(MACLMAR+5);                                     01909900
*    END;                                                               01910000
*  IF ZC='OFF'                               /*NO DEFAULTS TAKEN */     01910100
*    THEN                                                               01910200
*      ANS('/* NONE. */')                                               01910300
*         NORESCAN COL(MACLMAR+5);                                      01910400
*/*PD.P04 END DEFAULT ECHO ------------------------------------------*/ 01910500
*      END;                                                             01910600
*/********************************************************************/ 01910700
*/*PB.SYSL01 INVOKE SP LEVEL AND SYSTEM STATE MACROS                 */ 01910800
*/********************************************************************/ 01910900
*  DCL SYSSPLV CHAR EXTERNAL; DEACT SYSSPLV;/* SPLEVEL 1,2,3         */ 01911000
*  DCL SYSASCE CHAR EXTERNAL; DEACT SYSASCE;/* STATE ANY P AR */        01911100
*  DCL SYSAM64 CHAR EXTERNAL; DEACT SYSAM64;                            01911200
*  DCL SYSALVL FIXED EXTERNAL; DEACT SYSALVL;                           01911300
*                                                                       01911400
*  IF SYSASCE=''                                                        01911500
*    THEN                                                               01911600
*      DO;                                                              01911700
*        IF SYSSPLV=''                                                  01911800
*          THEN                                                         01911900
*            ANS('?SPLEVEL  (TEST);') COL(MACLMAR);                     01912000
*        IF SYSSPLV^='1' & SYSSPLV^='2'                                 01912100
*          THEN                                                         01912200
*            ANS('?SYSSTATE (TEST);') COL(MACLMAR);                     01912300
*          ELSE                                                         01912400
*            SYSASCE='P';                    /* SYSSTATE DEFAULT*/      01912500
*      END;                                                             01912600
*/********************************************************************/ 01912700
*/***PG.P01 FULL MACRO SYNTAX CHECKING                               */ 01912800
*/********************************************************************/ 01912900
*/*PG.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 01913000
*  IF XMF^='L'                                                          01913100
*     & XMFSCK='COMPLETE'                                               01913200
*    THEN                                                               01913300
*      DO;                                   /* FULL SYNTAX CHECK */    01913400
*/*PG.P03 EXCESSIVE POSITIONAL ARGUMENTS-----------------------------*/ 01913500
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */    01913600
*    THEN                                                               01913700
*      DO;                                                              01913800
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'!! /**PPOSP* MSG*/            01913900
*            ' "'!!MACLIST!!'"'!!                                       01914000
*            ' CANNOT BE USED.'!!                                       01914100
*            ' NO POSITIONAL ARGUMENTS'!!                               01914200
*            ' ARE ALLOWED.';                                           01914300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01914400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01914500
*        ZMACRET=8;                          /* MACRO ERROR */          01914600
*      END;                                                             01914700
*/*PG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01914800
*  XREQUEST='';                                                         01914900
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01915000
*  IF TRANSLATE(REQUEST(1))                                             01915100
*              = 'ASSIGN_BUFFER'             /* CHECK FOR KEYWORD */    01915200
*     ! REQUEST(1)=''                        /* CHECK FOR NULL */       01915300
*    THEN                                                               01915400
*      DO;                                                              01915500
*        XREQUEST='ASSIGN_BUFFER';           /* SET XVARIABLE */        01915600
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    01915700
*          THEN                                                         01915800
*            DO;                                                        01915900
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            01916000
*                  REQUEST!!                                            01916100
*                  '" "REQUEST"'!!                                      01916200
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        01916300
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01916400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01916500
*              ZMACRET=8;                    /* MACRO ERROR */          01916600
*            END;                                                       01916700
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01916800
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 01916900
*        IF SKIPBUF^=''                      /* CHECK FOR KEY */        01917000
*          THEN                                                         01917100
*            ZCVAL=ZCVAL!!',SKIPBUF';        /* INCORRECT KEY USED */   01917200
*        IF PAD^=''                          /* CHECK FOR KEY */        01917300
*          THEN                                                         01917400
*            ZCVAL=ZCVAL!!',PAD';            /* INCORRECT KEY USED */   01917500
*        IF PADCHAR^=''                      /* CHECK FOR KEY */        01917600
*          THEN                                                         01917700
*            ZCVAL=ZCVAL!!',PADCHAR';        /* INCORRECT KEY USED */   01917800
*        IF SRCERRL^=''                      /* CHECK FOR KEY */        01917900
*          THEN                                                         01918000
*            ZCVAL=ZCVAL!!',SRCERRL';        /* INCORRECT KEY USED */   01918100
*        IF SRCGAP^=''                       /* CHECK FOR KEY */        01918200
*          THEN                                                         01918300
*            ZCVAL=ZCVAL!!',SRCGAP';         /* INCORRECT KEY USED */   01918400
*        IF SRCLIST^=''                      /* CHECK FOR KEY */        01918500
*          THEN                                                         01918600
*            ZCVAL=ZCVAL!!',SRCLIST';        /* INCORRECT KEY USED */   01918700
*        IF SRCLST64^=''                     /* CHECK FOR KEY */        01918800
*          THEN                                                         01918900
*            ZCVAL=ZCVAL!!',SRCLST64';       /* INCORRECT KEY USED */   01919000
*        IF SRCNUM^=''                       /* CHECK FOR KEY */        01919100
*          THEN                                                         01919200
*            ZCVAL=ZCVAL!!',SRCNUM';         /* INCORRECT KEY USED */   01919300
*        IF TARGERRL^=''                     /* CHECK FOR KEY */        01919400
*          THEN                                                         01919500
*            ZCVAL=ZCVAL!!',TARGERRL';       /* INCORRECT KEY USED */   01919600
*        IF TARGGAP^=''                      /* CHECK FOR KEY */        01919700
*          THEN                                                         01919800
*            ZCVAL=ZCVAL!!',TARGGAP';        /* INCORRECT KEY USED */   01919900
*        IF TARGLIST^=''                     /* CHECK FOR KEY */        01920000
*          THEN                                                         01920100
*            ZCVAL=ZCVAL!!',TARGLIST';       /* INCORRECT KEY USED */   01920200
*        IF TARLST64^=''                     /* CHECK FOR KEY */        01920300
*          THEN                                                         01920400
*            ZCVAL=ZCVAL!!',TARLST64';       /* INCORRECT KEY USED */   01920500
*        IF TARGNUM^=''                      /* CHECK FOR KEY */        01920600
*          THEN                                                         01920700
*            ZCVAL=ZCVAL!!',TARGNUM';        /* INCORRECT KEY USED */   01920800
*        IF BUFSIZE^=''                      /* CHECK FOR KEY */        01920900
*          THEN                                                         01921000
*            ZCVAL=ZCVAL!!',BUFSIZE';        /* INCORRECT KEY USED */   01921100
*        IF BUFSOURC^=''                     /* CHECK FOR KEY */        01921200
*          THEN                                                         01921300
*            ZCVAL=ZCVAL!!',BUFSOURC';       /* INCORRECT KEY USED */   01921400
*        IF BACK^=''                         /* CHECK FOR KEY */        01921500
*          THEN                                                         01921600
*            ZCVAL=ZCVAL!!',BACK';           /* INCORRECT KEY USED */   01921700
*        IF DS_INFO^=''                      /* CHECK FOR KEY */        01921800
*          THEN                                                         01921900
*            ZCVAL=ZCVAL!!',DS_INFO';        /* INCORRECT KEY USED */   01922000
*        IF EXPBUF^=''                       /* CHECK FOR KEY */        01922100
*          THEN                                                         01922200
*            ZCVAL=ZCVAL!!',EXPBUF';         /* INCORRECT KEY USED */   01922300
*        IF INITBUF^=''                      /* CHECK FOR KEY */        01922400
*          THEN                                                         01922500
*            ZCVAL=ZCVAL!!',INITBUF';        /* INCORRECT KEY USED */   01922600
*        IF MINFREE^=''                      /* CHECK FOR KEY */        01922700
*          THEN                                                         01922800
*            ZCVAL=ZCVAL!!',MINFREE';        /* INCORRECT KEY USED */   01922900
*        IF RETPTOKN^=''                     /* CHECK FOR KEY */        01923000
*          THEN                                                         01923100
*            ZCVAL=ZCVAL!!',RETPTOKN';       /* INCORRECT KEY USED */   01923200
*        IF STATAREA^=''                     /* CHECK FOR KEY */        01923300
*          THEN                                                         01923400
*            ZCVAL=ZCVAL!!',STATAREA';       /* INCORRECT KEY USED */   01923500
*        IF POOLTOKN^=''                     /* CHECK FOR KEY */        01923600
*          THEN                                                         01923700
*            ZCVAL=ZCVAL!!',POOLTOKN';       /* INCORRECT KEY USED */   01923800
*        IF WAIT^=''                         /* CHECK FOR KEY */        01923900
*          THEN                                                         01924000
*            ZCVAL=ZCVAL!!',WAIT';           /* INCORRECT KEY USED */   01924100
*        IF CLEAR^=''                        /* CHECK FOR KEY */        01924200
*          THEN                                                         01924300
*            ZCVAL=ZCVAL!!',CLEAR';          /* INCORRECT KEY USED */   01924400
*        IF FREETO^=''                       /* CHECK FOR KEY */        01924500
*          THEN                                                         01924600
*            ZCVAL=ZCVAL!!',FREETO';         /* INCORRECT KEY USED */   01924700
*        IF FREERTN^=''                      /* CHECK FOR KEY */        01924800
*          THEN                                                         01924900
*            ZCVAL=ZCVAL!!',FREERTN';        /* INCORRECT KEY USED */   01925000
*        IF ZCVAL^=''                                                   01925100
*          THEN                                                         01925200
*            DO;                             /* INCORRECT KEYS USED */  01925300
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            01925400
*              ZMS=' 8, "REQUEST'!!          /**KMEIP* MSG*/            01925500
*                  REQUEST!!'"'!!                                       01925600
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   01925700
*                  ' FOLLOWING KEY(S) "'!!                              01925800
*                  ZCVAL!!'".';                                         01925900
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01926000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01926100
*              ZMACRET=8;                    /* MACRO ERROR */          01926200
*            END;                                                       01926300
*/*PG.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 01926400
*  XDUMMY1='';                               /* RESET XVARIABLE */      01926500
*  IF BUFLIST^=''                            /* CHECK ME KEY */         01926600
*    THEN                                                               01926700
*      DO;                                   /* VALID ME KEY */         01926800
*        IF NUMBER(BUFLIST)>1                /* CHECK SUBLISTS */       01926900
*          THEN                                                         01927000
*            DO;                                                        01927100
*              ZMS=' 8, "BUFLIST'!!          /**KPOSP* MSG*/            01927200
*                  BUFLIST!!                                            01927300
*                  '" "BUFLIST"'!!                                      01927400
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        01927500
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01927600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01927700
*              ZMACRET=8;                    /* MACRO ERROR */          01927800
*            END;                                                       01927900
*        XDUMMY1='BUFLIST';                  /* SET XVARIABLE */        01928000
*        XBUFLIST=BUFLIST(1);                /* SET XVARIABLE */        01928100
*        ZXDUMMY1='INPUT';                   /* SET IN/OUTPUT */        01928200
*        ZXBUFLIST='INPUT';                  /* SET IN/OUTPUT */        01928300
*        IF BUFLIST(1)=''                    /* CHECK ME KEY */         01928400
*          THEN                                                         01928500
*            DO;                                                        01928600
*              ZXDUMMY1='';                  /* RESET IN/OUTPUT */      01928700
*              ZXBUFLIST='';                 /* RESET IN/OUTPUT */      01928800
*              ZMS=' 8,  '!!                                            01928900
*                  ' "BUFLIST" KEY AND ITS'!!                           01929000
*                  ' ARGUMENT ARE REQUIRED.'; /**KRQDP* MSG*/           01929100
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01929200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01929300
*              ZMACRET=8;                    /* MACRO ERROR */          01929400
*           END;                                                        01929500
*      END;                                                             01929600
*/*PG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 01929700
*  IF BUFLST64^=''                           /* CHECK ME KEY */         01929800
*    THEN                                                               01929900
*      DO;                                                              01930000
*        IF NUMBER(BUFLST64)>1               /* CHECK SUBLISTS */       01930100
*          THEN                                                         01930200
*            DO;                                                        01930300
*              ZMS=' 8, "BUFLST64'!!         /**KPOSP* MSG*/            01930400
*                  BUFLST64!!                                           01930500
*                  '" "BUFLST64"'!!                                     01930600
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        01930700
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01930800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01930900
*              ZMACRET=8;                    /* MACRO ERROR */          01931000
*            END;                                                       01931100
*        IF XDUMMY1=''                       /* CHECK XVARIABLE */      01931200
*          THEN                                                         01931300
*            DO;                             /* VALID ME KEY */         01931400
*              XDUMMY1='BUFLST64';           /* SET XVAR1 */            01931500
*              XBUFLST64=BUFLST64(1);        /* SET XVAR2 */            01931600
*              ZXDUMMY1='INPUT';             /* SET IN/OUTPUT */        01931700
*              ZXBUFLST64='INPUT';           /* SET IN/OUTPUT */        01931800
*              IF BUFLST64(1)=''             /* CHECK ME KEY */         01931900
*                THEN                                                   01932000
*                  DO;                                                  01932100
*                    ZXDUMMY1='';            /* RESET IN/OUTPUT */      01932200
*                    ZXBUFLST64='';          /* RESET IN/OUTPUT */      01932300
*                    ZMS=' 8,  '!!                                      01932400
*                        ' "BUFLST64" KEY AND ITS'!!                    01932500
*                        ' ARGUMENT ARE REQUIRED.'; /**KRQDP* MSG*/     01932600
*                    ANS MSG('?IVTCSM ---> '!!ZMS);                     01932700
*                    ANS(COMMENT(ZMS)) COL(MACLMAR);                    01932800
*                    ZMACRET=8;              /* MACRO ERROR */          01932900
*                  END;                                                 01933000
*            END;                                                       01933100
*          ELSE                                                         01933200
*            DO;                                                        01933300
*              ZMS=' 8, "BUFLST64'!!         /**KMEKP* MSG*/            01933400
*                  BUFLST64!!'"'!!                                      01933500
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'!!                01933600
*                  XDUMMY1!!                                            01933700
*                  '" KEY.';                                            01933800
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01933900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01934000
*              ZMACRET=8;                    /* MACRO ERROR */          01934100
*            END;                                                       01934200
*      END;                                                             01934300
*/*PG.KMEKY08 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 01934400
*  IF XDUMMY1=''                             /* CHECK XVARIABLE */      01934500
*    THEN                                                               01934600
*      DO;                                                              01934700
*        XDUMMY1='BUFLIST';                  /* SET DEFAULT */          01934800
*        XBUFLIST='0';                       /* SET DEFAULT */          01934900
*        ZXDUMMY1='';                        /* RESET IN/OUTPUT */      01935000
*        ZXBUFLIST='';                       /* RESET IN/OUTPUT */      01935100
*        ZMS=' 8, ONE OF THE FOLLOWING'!!    /**KMERP* MSG*/            01935200
*            ' MUTUALLY EXCLUSIVE KEY(S) IS'!!                          01935300
*            ' REQUIRED:'!!                                             01935400
*            ' "BUFLIST"'!!                  /* VALID ME KEY */         01935500
*            ' OR "BUFLST64".';              /* VALID ME KEY */         01935600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01935700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01935800
*        ZMACRET=8;                          /* MACRO ERROR */          01935900
*      END;                                                             01936000
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 01936100
*  IF NUMBER(BUFNUM)>1                       /* CHECK POSITIONALS */    01936200
*    THEN                                                               01936300
*      DO;                                                              01936400
*        ZMS=' 8, "BUFNUM'!!                 /**KPOSP* MSG*/            01936500
*            BUFNUM!!                                                   01936600
*            '" "BUFNUM"'!!                                             01936700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              01936800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01936900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01937000
*        ZMACRET=8;                          /* MACRO ERROR */          01937100
*      END;                                                             01937200
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 01937300
*  XBUFNUM=BUFNUM(1);                        /* SET XVARIABLE */        01937400
*  IF BUFNUM(1)=''                           /* CHECK FOR NULL */       01937500
*   THEN                                                                01937600
*    DO;                                     /* KEY IS REQUIRED */      01937700
*        ZXBUFNUM='';                        /* RESET IN/OUTPUT */      01937800
*        ZMS=' 8,  '!!                                                  01937900
*            ' "BUFNUM" KEY AND ITS'!!                                  01938000
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            01938100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01938200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01938300
*        ZMACRET=8;                          /* MACRO ERROR */          01938400
*    END;                                                               01938500
*  ELSE                                                                 01938600
*    ZXBUFNUM='INPUT';                       /* SET IN/OUTPUT */        01938700
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01938800
*  IF BUFTYPE='BUFTYPE'                      /* CHECK ENTRY */          01938900
*    THEN                                                               01939000
*      DO;                                                              01939100
*        ZMS=' 8, THE "BUFTYPE" KEY'!!       /**KOPTP* MSG*/            01939200
*            ' MUST CONTAIN ONE'!!                                      01939300
*            ' (OR MORE) ARGUMENT(S).';                                 01939400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01939500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01939600
*        ZMACRET=8;                          /* MACRO ERROR */          01939700
*      END;                                                             01939800
*  IF NUMBER(BUFTYPE)>1                      /* CHECK POSITIONALS */    01939900
*    THEN                                                               01940000
*      DO;                                                              01940100
*        ZMS=' 8, "BUFTYPE'!!                /**KPOSP* MSG*/            01940200
*            BUFTYPE!!                                                  01940300
*            '" "BUFTYPE"'!!                                            01940400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              01940500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01940600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01940700
*        ZMACRET=8;                          /* MACRO ERROR */          01940800
*      END;                                                             01940900
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01941000
*  XBUFTYPE='';                              /* RESET XVARIABLE */      01941100
*  IF TRANSLATE(BUFTYPE(1))                                             01941200
*              = 'SAME'                      /* CHECK FOR KEYWORD */    01941300
*    THEN                                                               01941400
*      XBUFTYPE = 'SAME';                    /* SET XVARIABLE */        01941500
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01941600
*  IF TRANSLATE(BUFTYPE(1))                                             01941700
*              = 'PAGEELIG'                  /* CHECK FOR KEYWORD */    01941800
*    THEN                                                               01941900
*      XBUFTYPE = 'PAGEELIG';                /* SET XVARIABLE */        01942000
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01942100
*  IF TRANSLATE(BUFTYPE(1))                                             01942200
*              = 'FIXED'                     /* CHECK FOR KEYWORD */    01942300
*    THEN                                                               01942400
*      XBUFTYPE = 'FIXED';                   /* SET XVARIABLE */        01942500
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01942600
*  ZXBUFTYPE='INPUT';                        /* SET IN/OUTPUT */        01942700
*  IF XBUFTYPE=''                            /* CHECK FOR KEYWORD */    01942800
*    THEN                                                               01942900
*      DO;                                   /* KEYWORD NOT ENTERED */  01943000
*        XBUFTYPE='SAME';                    /* SET DEFAULT */          01943100
*        IF BUFTYPE(1)^=''                                              01943200
*          THEN                                                         01943300
*            DO;                                                        01943400
*              ZXBUFTYPE='';                 /* RESET IN/OUTPUT */      01943500
*              ZMS=' 8, "BUFTYPE'!!          /**KUKWP* MSG*/            01943600
*                  BUFTYPE!!'"'!!                                       01943700
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              01943800
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    01943900
*                  ' "SAME",'!!              /* VALID KEYWORD */        01944000
*                  ' "PAGEELIG",'!!          /* VALID KEYWORD */        01944100
*                  ' OR "FIXED".';           /* VALID KEYWORD */        01944200
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01944300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01944400
*              ZMACRET=8;                    /* MACRO ERROR */          01944500
*            END;                                                       01944600
*      END;                                                             01944700
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01944800
*  IF CSMUSER='CSMUSER'                      /* CHECK ENTRY */          01944900
*    THEN                                                               01945000
*      DO;                                                              01945100
*        ZMS=' 8, THE "CSMUSER" KEY'!!       /**KOPTP* MSG*/            01945200
*            ' MUST CONTAIN ONE'!!                                      01945300
*            ' (OR MORE) ARGUMENT(S).';                                 01945400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01945500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01945600
*        ZMACRET=8;                          /* MACRO ERROR */          01945700
*      END;                                                             01945800
*  IF NUMBER(CSMUSER)>1                      /* CHECK POSITIONALS */    01945900
*    THEN                                                               01946000
*      DO;                                                              01946100
*        ZMS=' 8, "CSMUSER'!!                /**KPOSP* MSG*/            01946200
*            CSMUSER!!                                                  01946300
*            '" "CSMUSER"'!!                                            01946400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              01946500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01946600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01946700
*        ZMACRET=8;                          /* MACRO ERROR */          01946800
*      END;                                                             01946900
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01947000
*  XCSMUSER='';                              /* RESET XVARIABLE */      01947100
*  IF TRANSLATE(CSMUSER(1))                                             01947200
*              = 'NO'                        /* CHECK FOR KEYWORD */    01947300
*    THEN                                                               01947400
*      XCSMUSER = 'NO';                      /* SET XVARIABLE */        01947500
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01947600
*  IF TRANSLATE(CSMUSER(1))                                             01947700
*              = 'YES'                       /* CHECK FOR KEYWORD */    01947800
*    THEN                                                               01947900
*      XCSMUSER = 'YES';                     /* SET XVARIABLE */        01948000
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01948100
*  ZXCSMUSER='INPUT';                        /* SET IN/OUTPUT */        01948200
*  IF XCSMUSER=''                            /* CHECK FOR KEYWORD */    01948300
*    THEN                                                               01948400
*      DO;                                   /* KEYWORD NOT ENTERED */  01948500
*        XCSMUSER='NO';                      /* SET DEFAULT */          01948600
*        IF CSMUSER(1)^=''                                              01948700
*          THEN                                                         01948800
*            DO;                                                        01948900
*              ZXCSMUSER='';                 /* RESET IN/OUTPUT */      01949000
*              ZMS=' 8, "CSMUSER'!!          /**KUKWP* MSG*/            01949100
*                  CSMUSER!!'"'!!                                       01949200
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              01949300
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    01949400
*                  ' "NO"'!!                 /* VALID KEYWORD */        01949500
*                  ' OR "YES".';             /* VALID KEYWORD */        01949600
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01949700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01949800
*              ZMACRET=8;                    /* MACRO ERROR */          01949900
*            END;                                                       01950000
*      END;                                                             01950100
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 01950200
*  IF GAP='GAP' ! GAP='()'                   /*CHECK ENTRY*/            01950300
*    THEN                                                               01950400
*      DO;                                                              01950500
*        ZMS=' 8, THE "GAP" KEY'!!           /**KOPTP* MSG*/            01950600
*            ' MUST CONTAIN ONE'!!                                      01950700
*            ' (OR MORE) ARGUMENT(S).';                                 01950800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01950900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01951000
*        ZMACRET=8;                          /* MACRO ERROR */          01951100
*      END;                                                             01951200
*  IF NUMBER(GAP)>1                          /* CHECK POSITIONALS */    01951300
*    THEN                                                               01951400
*      DO;                                                              01951500
*        ZMS=' 8, "GAP'!!                    /**KPOSP* MSG*/            01951600
*            GAP!!                                                      01951700
*            '" "GAP"'!!                                                01951800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              01951900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01952000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01952100
*        ZMACRET=8;                          /* MACRO ERROR */          01952200
*      END;                                                             01952300
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01952400
*  ZXGAP='INPUT';                            /* SET IN/OUTPUT */        01952500
*  XGAP='0';                                 /* SET DEFAULT */          01952600
*  IF GAP(1)^=''                             /* CHECK FOR NULL */       01952700
*    THEN                                                               01952800
*      XGAP=GAP(1);                          /* SET XVARIABLE */        01952900
*/*PG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START-----------*/ 01953000
*  IF XMF^='M'                               /* BYPASS IF MF=M */       01953100
*    THEN                                                               01953200
*      DO;                                                              01953300
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 01953400
*  IF ERRBFLST='ERRBFLST' ! ERRBFLST='()'    /*CHECK ENTRY*/            01953500
*    THEN                                                               01953600
*      DO;                                                              01953700
*        ZMS=' 8, THE "ERRBFLST" KEY'!!      /**KOPTP* MSG*/            01953800
*            ' MUST CONTAIN ONE'!!                                      01953900
*            ' (OR MORE) ARGUMENT(S).';                                 01954000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01954100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01954200
*        ZMACRET=8;                          /* MACRO ERROR */          01954300
*      END;                                                             01954400
*  IF NUMBER(ERRBFLST)>1                     /* CHECK POSITIONALS */    01954500
*    THEN                                                               01954600
*      DO;                                                              01954700
*        ZMS=' 8, "ERRBFLST'!!               /**KPOSP* MSG*/            01954800
*            ERRBFLST!!                                                 01954900
*            '" "ERRBFLST"'!!                                           01955000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              01955100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01955200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01955300
*        ZMACRET=8;                          /* MACRO ERROR */          01955400
*      END;                                                             01955500
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 01955600
*  IF ERRBFLST(1)^=''                        /* CHECK FOR NULL */       01955700
*    THEN                                                               01955800
*      DO;                                                              01955900
*        XERRBFLST=ERRBFLST(1);              /* SET XVARIABLE */        01956000
*        ZXERRBFLST='OUTPUT';                /* SET OUTPUT */           01956100
*      END;                                                             01956200
*  ELSE                                                                 01956300
*    IF ZXERRBFLST^=''                                                  01956400
*      THEN                                                             01956500
*        ZXERRBFLST='';                      /* RESET OUTPUT */         01956600
*/*PG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END-------------*/ 01956700
*      END;  /**** END OF BYPASS CHECK */                               01956800
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 01956900
*  IF OWNERID='OWNERID' ! OWNERID='()'       /*CHECK ENTRY*/            01957000
*    THEN                                                               01957100
*      DO;                                                              01957200
*        ZMS=' 8, THE "OWNERID" KEY'!!       /**KOPTP* MSG*/            01957300
*            ' MUST CONTAIN ONE'!!                                      01957400
*            ' (OR MORE) ARGUMENT(S).';                                 01957500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01957600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01957700
*        ZMACRET=8;                          /* MACRO ERROR */          01957800
*      END;                                                             01957900
*  IF NUMBER(OWNERID)>1                      /* CHECK POSITIONALS */    01958000
*    THEN                                                               01958100
*      DO;                                                              01958200
*        ZMS=' 8, "OWNERID'!!                /**KPOSP* MSG*/            01958300
*            OWNERID!!                                                  01958400
*            '" "OWNERID"'!!                                            01958500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              01958600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01958700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01958800
*        ZMACRET=8;                          /* MACRO ERROR */          01958900
*      END;                                                             01959000
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01959100
*  ZXOWNERID='INPUT';                        /* SET IN/OUTPUT */        01959200
*  XOWNERID='0';                             /* SET DEFAULT */          01959300
*  IF OWNERID(1)^=''                         /* CHECK FOR NULL */       01959400
*    THEN                                                               01959500
*      XOWNERID=OWNERID(1);                  /* SET XVARIABLE */        01959600
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 01959700
*  IF COMPID='COMPID' ! COMPID='()'          /*CHECK ENTRY*/            01959800
*    THEN                                                               01959900
*      DO;                                                              01960000
*        ZMS=' 8, THE "COMPID" KEY'!!        /**KOPTP* MSG*/            01960100
*            ' MUST CONTAIN ONE'!!                                      01960200
*            ' (OR MORE) ARGUMENT(S).';                                 01960300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01960400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01960500
*        ZMACRET=8;                          /* MACRO ERROR */          01960600
*      END;                                                             01960700
*  IF NUMBER(COMPID)>1                       /* CHECK POSITIONALS */    01960800
*    THEN                                                               01960900
*      DO;                                                              01961000
*        ZMS=' 8, "COMPID'!!                 /**KPOSP* MSG*/            01961100
*            COMPID!!                                                   01961200
*            '" "COMPID"'!!                                             01961300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              01961400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01961500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01961600
*        ZMACRET=8;                          /* MACRO ERROR */          01961700
*      END;                                                             01961800
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01961900
*  ZXCOMPID='INPUT';                         /* SET IN/OUTPUT */        01962000
*  XCOMPID='0';                              /* SET DEFAULT */          01962100
*  IF COMPID(1)^=''                          /* CHECK FOR NULL */       01962200
*    THEN                                                               01962300
*      XCOMPID=COMPID(1);                    /* SET XVARIABLE */        01962400
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 01962500
*  IF COMPUSER='COMPUSER' ! COMPUSER='()'    /*CHECK ENTRY*/            01962600
*    THEN                                                               01962700
*      DO;                                                              01962800
*        ZMS=' 8, THE "COMPUSER" KEY'!!      /**KOPTP* MSG*/            01962900
*            ' MUST CONTAIN ONE'!!                                      01963000
*            ' (OR MORE) ARGUMENT(S).';                                 01963100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01963200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01963300
*        ZMACRET=8;                          /* MACRO ERROR */          01963400
*      END;                                                             01963500
*  IF NUMBER(COMPUSER)>1                     /* CHECK POSITIONALS */    01963600
*    THEN                                                               01963700
*      DO;                                                              01963800
*        ZMS=' 8, "COMPUSER'!!               /**KPOSP* MSG*/            01963900
*            COMPUSER!!                                                 01964000
*            '" "COMPUSER"'!!                                           01964100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              01964200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01964300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01964400
*        ZMACRET=8;                          /* MACRO ERROR */          01964500
*      END;                                                             01964600
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01964700
*  ZXCOMPUSER='INPUT';                       /* SET IN/OUTPUT */        01964800
*  XCOMPUSER='0';                            /* SET DEFAULT */          01964900
*  IF COMPUSER(1)^=''                        /* CHECK FOR NULL */       01965000
*    THEN                                                               01965100
*      XCOMPUSER=COMPUSER(1);                /* SET XVARIABLE */        01965200
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 01965300
*  IF TASKID='TASKID' ! TASKID='()'          /*CHECK ENTRY*/            01965400
*    THEN                                                               01965500
*      DO;                                                              01965600
*        ZMS=' 8, THE "TASKID" KEY'!!        /**KOPTP* MSG*/            01965700
*            ' MUST CONTAIN ONE'!!                                      01965800
*            ' (OR MORE) ARGUMENT(S).';                                 01965900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01966000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01966100
*        ZMACRET=8;                          /* MACRO ERROR */          01966200
*      END;                                                             01966300
*  IF NUMBER(TASKID)>1                       /* CHECK POSITIONALS */    01966400
*    THEN                                                               01966500
*      DO;                                                              01966600
*        ZMS=' 8, "TASKID'!!                 /**KPOSP* MSG*/            01966700
*            TASKID!!                                                   01966800
*            '" "TASKID"'!!                                             01966900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              01967000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01967100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01967200
*        ZMACRET=8;                          /* MACRO ERROR */          01967300
*      END;                                                             01967400
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01967500
*  ZXTASKID='INPUT';                         /* SET IN/OUTPUT */        01967600
*  XTASKID='0';                              /* SET DEFAULT */          01967700
*  IF TASKID(1)^=''                          /* CHECK FOR NULL */       01967800
*    THEN                                                               01967900
*      XTASKID=TASKID(1);                    /* SET XVARIABLE */        01968000
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 01968100
*  IF THREAD='THREAD' ! THREAD='()'          /*CHECK ENTRY*/            01968200
*    THEN                                                               01968300
*      DO;                                                              01968400
*        ZMS=' 8, THE "THREAD" KEY'!!        /**KOPTP* MSG*/            01968500
*            ' MUST CONTAIN ONE'!!                                      01968600
*            ' (OR MORE) ARGUMENT(S).';                                 01968700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01968800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01968900
*        ZMACRET=8;                          /* MACRO ERROR */          01969000
*      END;                                                             01969100
*  IF NUMBER(THREAD)>1                       /* CHECK POSITIONALS */    01969200
*    THEN                                                               01969300
*      DO;                                                              01969400
*        ZMS=' 8, "THREAD'!!                 /**KPOSP* MSG*/            01969500
*            THREAD!!                                                   01969600
*            '" "THREAD"'!!                                             01969700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              01969800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01969900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01970000
*        ZMACRET=8;                          /* MACRO ERROR */          01970100
*      END;                                                             01970200
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01970300
*  ZXTHREAD='INPUT';                         /* SET IN/OUTPUT */        01970400
*  XTHREAD='0';                              /* SET DEFAULT */          01970500
*  IF THREAD(1)^=''                          /* CHECK FOR NULL */       01970600
*    THEN                                                               01970700
*      XTHREAD=THREAD(1);                    /* SET XVARIABLE */        01970800
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 01970900
*  IF UTILRTN='UTILRTN' ! UTILRTN='()'       /*CHECK ENTRY*/            01971000
*    THEN                                                               01971100
*      DO;                                                              01971200
*        ZMS=' 8, THE "UTILRTN" KEY'!!       /**KOPTP* MSG*/            01971300
*            ' MUST CONTAIN ONE'!!                                      01971400
*            ' (OR MORE) ARGUMENT(S).';                                 01971500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01971600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01971700
*        ZMACRET=8;                          /* MACRO ERROR */          01971800
*      END;                                                             01971900
*  IF NUMBER(UTILRTN)>1                      /* CHECK POSITIONALS */    01972000
*    THEN                                                               01972100
*      DO;                                                              01972200
*        ZMS=' 8, "UTILRTN'!!                /**KPOSP* MSG*/            01972300
*            UTILRTN!!                                                  01972400
*            '" "UTILRTN"'!!                                            01972500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              01972600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01972700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01972800
*        ZMACRET=8;                          /* MACRO ERROR */          01972900
*      END;                                                             01973000
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 01973100
*  ZXUTILRTN='INPUT';                        /* SET IN/OUTPUT */        01973200
*  XUTILRTN='0';                             /* SET DEFAULT */          01973300
*  IF UTILRTN(1)^=''                         /* CHECK FOR NULL */       01973400
*    THEN                                                               01973500
*      XUTILRTN=UTILRTN(1);                  /* SET XVARIABLE */        01973600
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01973700
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     01973800
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01973900
*  IF TRANSLATE(REQUEST(1))                                             01974000
*              = 'CHANGE_OWNER'              /* CHECK FOR KEYWORD */    01974100
*    THEN                                                               01974200
*      DO;                                                              01974300
*        XREQUEST='CHANGE_OWNER';            /* SET XVARIABLE */        01974400
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    01974500
*          THEN                                                         01974600
*            DO;                                                        01974700
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            01974800
*                  REQUEST!!                                            01974900
*                  '" "REQUEST"'!!                                      01975000
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        01975100
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01975200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01975300
*              ZMACRET=8;                    /* MACRO ERROR */          01975400
*            END;                                                       01975500
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 01975600
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 01975700
*        IF BUFTYPE^=''                      /* CHECK FOR KEY */        01975800
*          THEN                                                         01975900
*            ZCVAL=ZCVAL!!',BUFTYPE';        /* INCORRECT KEY USED */   01976000
*        IF PAD^=''                          /* CHECK FOR KEY */        01976100
*          THEN                                                         01976200
*            ZCVAL=ZCVAL!!',PAD';            /* INCORRECT KEY USED */   01976300
*        IF PADCHAR^=''                      /* CHECK FOR KEY */        01976400
*          THEN                                                         01976500
*            ZCVAL=ZCVAL!!',PADCHAR';        /* INCORRECT KEY USED */   01976600
*        IF SRCERRL^=''                      /* CHECK FOR KEY */        01976700
*          THEN                                                         01976800
*            ZCVAL=ZCVAL!!',SRCERRL';        /* INCORRECT KEY USED */   01976900
*        IF SRCGAP^=''                       /* CHECK FOR KEY */        01977000
*          THEN                                                         01977100
*            ZCVAL=ZCVAL!!',SRCGAP';         /* INCORRECT KEY USED */   01977200
*        IF SRCLIST^=''                      /* CHECK FOR KEY */        01977300
*          THEN                                                         01977400
*            ZCVAL=ZCVAL!!',SRCLIST';        /* INCORRECT KEY USED */   01977500
*        IF SRCLST64^=''                     /* CHECK FOR KEY */        01977600
*          THEN                                                         01977700
*            ZCVAL=ZCVAL!!',SRCLST64';       /* INCORRECT KEY USED */   01977800
*        IF SRCNUM^=''                       /* CHECK FOR KEY */        01977900
*          THEN                                                         01978000
*            ZCVAL=ZCVAL!!',SRCNUM';         /* INCORRECT KEY USED */   01978100
*        IF TARGERRL^=''                     /* CHECK FOR KEY */        01978200
*          THEN                                                         01978300
*            ZCVAL=ZCVAL!!',TARGERRL';       /* INCORRECT KEY USED */   01978400
*        IF TARGGAP^=''                      /* CHECK FOR KEY */        01978500
*          THEN                                                         01978600
*            ZCVAL=ZCVAL!!',TARGGAP';        /* INCORRECT KEY USED */   01978700
*        IF TARGLIST^=''                     /* CHECK FOR KEY */        01978800
*          THEN                                                         01978900
*            ZCVAL=ZCVAL!!',TARGLIST';       /* INCORRECT KEY USED */   01979000
*        IF TARLST64^=''                     /* CHECK FOR KEY */        01979100
*          THEN                                                         01979200
*            ZCVAL=ZCVAL!!',TARLST64';       /* INCORRECT KEY USED */   01979300
*        IF TARGNUM^=''                      /* CHECK FOR KEY */        01979400
*          THEN                                                         01979500
*            ZCVAL=ZCVAL!!',TARGNUM';        /* INCORRECT KEY USED */   01979600
*        IF BUFSIZE^=''                      /* CHECK FOR KEY */        01979700
*          THEN                                                         01979800
*            ZCVAL=ZCVAL!!',BUFSIZE';        /* INCORRECT KEY USED */   01979900
*        IF BUFSOURC^=''                     /* CHECK FOR KEY */        01980000
*          THEN                                                         01980100
*            ZCVAL=ZCVAL!!',BUFSOURC';       /* INCORRECT KEY USED */   01980200
*        IF BACK^=''                         /* CHECK FOR KEY */        01980300
*          THEN                                                         01980400
*            ZCVAL=ZCVAL!!',BACK';           /* INCORRECT KEY USED */   01980500
*        IF DS_INFO^=''                      /* CHECK FOR KEY */        01980600
*          THEN                                                         01980700
*            ZCVAL=ZCVAL!!',DS_INFO';        /* INCORRECT KEY USED */   01980800
*        IF EXPBUF^=''                       /* CHECK FOR KEY */        01980900
*          THEN                                                         01981000
*            ZCVAL=ZCVAL!!',EXPBUF';         /* INCORRECT KEY USED */   01981100
*        IF INITBUF^=''                      /* CHECK FOR KEY */        01981200
*          THEN                                                         01981300
*            ZCVAL=ZCVAL!!',INITBUF';        /* INCORRECT KEY USED */   01981400
*        IF MINFREE^=''                      /* CHECK FOR KEY */        01981500
*          THEN                                                         01981600
*            ZCVAL=ZCVAL!!',MINFREE';        /* INCORRECT KEY USED */   01981700
*        IF RETPTOKN^=''                     /* CHECK FOR KEY */        01981800
*          THEN                                                         01981900
*            ZCVAL=ZCVAL!!',RETPTOKN';       /* INCORRECT KEY USED */   01982000
*        IF STATAREA^=''                     /* CHECK FOR KEY */        01982100
*          THEN                                                         01982200
*            ZCVAL=ZCVAL!!',STATAREA';       /* INCORRECT KEY USED */   01982300
*        IF POOLTOKN^=''                     /* CHECK FOR KEY */        01982400
*          THEN                                                         01982500
*            ZCVAL=ZCVAL!!',POOLTOKN';       /* INCORRECT KEY USED */   01982600
*        IF WAIT^=''                         /* CHECK FOR KEY */        01982700
*          THEN                                                         01982800
*            ZCVAL=ZCVAL!!',WAIT';           /* INCORRECT KEY USED */   01982900
*        IF CLEAR^=''                        /* CHECK FOR KEY */        01983000
*          THEN                                                         01983100
*            ZCVAL=ZCVAL!!',CLEAR';          /* INCORRECT KEY USED */   01983200
*        IF FREETO^=''                       /* CHECK FOR KEY */        01983300
*          THEN                                                         01983400
*            ZCVAL=ZCVAL!!',FREETO';         /* INCORRECT KEY USED */   01983500
*        IF FREERTN^=''                      /* CHECK FOR KEY */        01983600
*          THEN                                                         01983700
*            ZCVAL=ZCVAL!!',FREERTN';        /* INCORRECT KEY USED */   01983800
*        IF ZCVAL^=''                                                   01983900
*          THEN                                                         01984000
*            DO;                             /* INCORRECT KEYS USED */  01984100
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            01984200
*              ZMS=' 8, "REQUEST'!!          /**KMEIP* MSG*/            01984300
*                  REQUEST!!'"'!!                                       01984400
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   01984500
*                  ' FOLLOWING KEY(S) "'!!                              01984600
*                  ZCVAL!!'".';                                         01984700
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01984800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01984900
*              ZMACRET=8;                    /* MACRO ERROR */          01985000
*            END;                                                       01985100
*/*PG.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 01985200
*  XDUMMY2='';                               /* RESET XVARIABLE */      01985300
*  IF BUFLIST^=''                            /* CHECK ME KEY */         01985400
*    THEN                                                               01985500
*      DO;                                   /* VALID ME KEY */         01985600
*        IF NUMBER(BUFLIST)>1                /* CHECK SUBLISTS */       01985700
*          THEN                                                         01985800
*            DO;                                                        01985900
*              ZMS=' 8, "BUFLIST'!!          /**KPOSP* MSG*/            01986000
*                  BUFLIST!!                                            01986100
*                  '" "BUFLIST"'!!                                      01986200
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        01986300
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01986400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01986500
*              ZMACRET=8;                    /* MACRO ERROR */          01986600
*            END;                                                       01986700
*        XDUMMY2='BUFLIST';                  /* SET XVARIABLE */        01986800
*        XBUFLIST=BUFLIST(1);                /* SET XVARIABLE */        01986900
*        ZXDUMMY2='INPUT';                   /* SET IN/OUTPUT */        01987000
*        ZXBUFLIST='INPUT';                  /* SET IN/OUTPUT */        01987100
*        IF BUFLIST(1)=''                    /* CHECK ME KEY */         01987200
*          THEN                                                         01987300
*            DO;                                                        01987400
*              ZXDUMMY2='';                  /* RESET IN/OUTPUT */      01987500
*              ZXBUFLIST='';                 /* RESET IN/OUTPUT */      01987600
*              ZMS=' 8,  '!!                                            01987700
*                  ' "BUFLIST" KEY AND ITS'!!                           01987800
*                  ' ARGUMENT ARE REQUIRED.'; /**KRQDP* MSG*/           01987900
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01988000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01988100
*              ZMACRET=8;                    /* MACRO ERROR */          01988200
*           END;                                                        01988300
*      END;                                                             01988400
*/*PG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 01988500
*  IF BUFLST64^=''                           /* CHECK ME KEY */         01988600
*    THEN                                                               01988700
*      DO;                                                              01988800
*        IF NUMBER(BUFLST64)>1               /* CHECK SUBLISTS */       01988900
*          THEN                                                         01989000
*            DO;                                                        01989100
*              ZMS=' 8, "BUFLST64'!!         /**KPOSP* MSG*/            01989200
*                  BUFLST64!!                                           01989300
*                  '" "BUFLST64"'!!                                     01989400
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        01989500
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01989600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01989700
*              ZMACRET=8;                    /* MACRO ERROR */          01989800
*            END;                                                       01989900
*        IF XDUMMY2=''                       /* CHECK XVARIABLE */      01990000
*          THEN                                                         01990100
*            DO;                             /* VALID ME KEY */         01990200
*              XDUMMY2='BUFLST64';           /* SET XVAR1 */            01990300
*              XBUFLST64=BUFLST64(1);        /* SET XVAR2 */            01990400
*              ZXDUMMY2='INPUT';             /* SET IN/OUTPUT */        01990500
*              ZXBUFLST64='INPUT';           /* SET IN/OUTPUT */        01990600
*              IF BUFLST64(1)=''             /* CHECK ME KEY */         01990700
*                THEN                                                   01990800
*                  DO;                                                  01990900
*                    ZXDUMMY2='';            /* RESET IN/OUTPUT */      01991000
*                    ZXBUFLST64='';          /* RESET IN/OUTPUT */      01991100
*                    ZMS=' 8,  '!!                                      01991200
*                        ' "BUFLST64" KEY AND ITS'!!                    01991300
*                        ' ARGUMENT ARE REQUIRED.'; /**KRQDP* MSG*/     01991400
*                    ANS MSG('?IVTCSM ---> '!!ZMS);                     01991500
*                    ANS(COMMENT(ZMS)) COL(MACLMAR);                    01991600
*                    ZMACRET=8;              /* MACRO ERROR */          01991700
*                  END;                                                 01991800
*            END;                                                       01991900
*          ELSE                                                         01992000
*            DO;                                                        01992100
*              ZMS=' 8, "BUFLST64'!!         /**KMEKP* MSG*/            01992200
*                  BUFLST64!!'"'!!                                      01992300
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'!!                01992400
*                  XDUMMY2!!                                            01992500
*                  '" KEY.';                                            01992600
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           01992700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          01992800
*              ZMACRET=8;                    /* MACRO ERROR */          01992900
*            END;                                                       01993000
*      END;                                                             01993100
*/*PG.KMEKY08 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 01993200
*  IF XDUMMY2=''                             /* CHECK XVARIABLE */      01993300
*    THEN                                                               01993400
*      DO;                                                              01993500
*        XDUMMY2='BUFLIST';                  /* SET DEFAULT */          01993600
*        XBUFLIST='0';                       /* SET DEFAULT */          01993700
*        ZXDUMMY2='';                        /* RESET IN/OUTPUT */      01993800
*        ZXBUFLIST='';                       /* RESET IN/OUTPUT */      01993900
*        ZMS=' 8, ONE OF THE FOLLOWING'!!    /**KMERP* MSG*/            01994000
*            ' MUTUALLY EXCLUSIVE KEY(S) IS'!!                          01994100
*            ' REQUIRED:'!!                                             01994200
*            ' "BUFLIST"'!!                  /* VALID ME KEY */         01994300
*            ' OR "BUFLST64".';              /* VALID ME KEY */         01994400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01994500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01994600
*        ZMACRET=8;                          /* MACRO ERROR */          01994700
*      END;                                                             01994800
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 01994900
*  IF NUMBER(BUFNUM)>1                       /* CHECK POSITIONALS */    01995000
*    THEN                                                               01995100
*      DO;                                                              01995200
*        ZMS=' 8, "BUFNUM'!!                 /**KPOSP* MSG*/            01995300
*            BUFNUM!!                                                   01995400
*            '" "BUFNUM"'!!                                             01995500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              01995600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01995700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01995800
*        ZMACRET=8;                          /* MACRO ERROR */          01995900
*      END;                                                             01996000
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 01996100
*  XBUFNUM=BUFNUM(1);                        /* SET XVARIABLE */        01996200
*  IF BUFNUM(1)=''                           /* CHECK FOR NULL */       01996300
*   THEN                                                                01996400
*    DO;                                     /* KEY IS REQUIRED */      01996500
*        ZXBUFNUM='';                        /* RESET IN/OUTPUT */      01996600
*        ZMS=' 8,  '!!                                                  01996700
*            ' "BUFNUM" KEY AND ITS'!!                                  01996800
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            01996900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01997000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01997100
*        ZMACRET=8;                          /* MACRO ERROR */          01997200
*    END;                                                               01997300
*  ELSE                                                                 01997400
*    ZXBUFNUM='INPUT';                       /* SET IN/OUTPUT */        01997500
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01997600
*  IF CSMUSER='CSMUSER'                      /* CHECK ENTRY */          01997700
*    THEN                                                               01997800
*      DO;                                                              01997900
*        ZMS=' 8, THE "CSMUSER" KEY'!!       /**KOPTP* MSG*/            01998000
*            ' MUST CONTAIN ONE'!!                                      01998100
*            ' (OR MORE) ARGUMENT(S).';                                 01998200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01998300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01998400
*        ZMACRET=8;                          /* MACRO ERROR */          01998500
*      END;                                                             01998600
*  IF NUMBER(CSMUSER)>1                      /* CHECK POSITIONALS */    01998700
*    THEN                                                               01998800
*      DO;                                                              01998900
*        ZMS=' 8, "CSMUSER'!!                /**KPOSP* MSG*/            01999000
*            CSMUSER!!                                                  01999100
*            '" "CSMUSER"'!!                                            01999200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              01999300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 01999400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                01999500
*        ZMACRET=8;                          /* MACRO ERROR */          01999600
*      END;                                                             01999700
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 01999800
*  XCSMUSER='';                              /* RESET XVARIABLE */      01999900
*  IF TRANSLATE(CSMUSER(1))                                             02000000
*              = 'NO'                        /* CHECK FOR KEYWORD */    02000100
*    THEN                                                               02000200
*      XCSMUSER = 'NO';                      /* SET XVARIABLE */        02000300
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02000400
*  IF TRANSLATE(CSMUSER(1))                                             02000500
*              = 'YES'                       /* CHECK FOR KEYWORD */    02000600
*    THEN                                                               02000700
*      XCSMUSER = 'YES';                     /* SET XVARIABLE */        02000800
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02000900
*  ZXCSMUSER='INPUT';                        /* SET IN/OUTPUT */        02001000
*  IF XCSMUSER=''                            /* CHECK FOR KEYWORD */    02001100
*    THEN                                                               02001200
*      DO;                                   /* KEYWORD NOT ENTERED */  02001300
*        XCSMUSER='NO';                      /* SET DEFAULT */          02001400
*        IF CSMUSER(1)^=''                                              02001500
*          THEN                                                         02001600
*            DO;                                                        02001700
*              ZXCSMUSER='';                 /* RESET IN/OUTPUT */      02001800
*              ZMS=' 8, "CSMUSER'!!          /**KUKWP* MSG*/            02001900
*                  CSMUSER!!'"'!!                                       02002000
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02002100
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02002200
*                  ' "NO"'!!                 /* VALID KEYWORD */        02002300
*                  ' OR "YES".';             /* VALID KEYWORD */        02002400
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02002500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02002600
*              ZMACRET=8;                    /* MACRO ERROR */          02002700
*            END;                                                       02002800
*      END;                                                             02002900
*/*PG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START-----------*/ 02003000
*  IF XMF^='M'                               /* BYPASS IF MF=M */       02003100
*    THEN                                                               02003200
*      DO;                                                              02003300
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02003400
*  IF ERRBFLST='ERRBFLST' ! ERRBFLST='()'    /*CHECK ENTRY*/            02003500
*    THEN                                                               02003600
*      DO;                                                              02003700
*        ZMS=' 8, THE "ERRBFLST" KEY'!!      /**KOPTP* MSG*/            02003800
*            ' MUST CONTAIN ONE'!!                                      02003900
*            ' (OR MORE) ARGUMENT(S).';                                 02004000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02004100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02004200
*        ZMACRET=8;                          /* MACRO ERROR */          02004300
*      END;                                                             02004400
*  IF NUMBER(ERRBFLST)>1                     /* CHECK POSITIONALS */    02004500
*    THEN                                                               02004600
*      DO;                                                              02004700
*        ZMS=' 8, "ERRBFLST'!!               /**KPOSP* MSG*/            02004800
*            ERRBFLST!!                                                 02004900
*            '" "ERRBFLST"'!!                                           02005000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02005100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02005200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02005300
*        ZMACRET=8;                          /* MACRO ERROR */          02005400
*      END;                                                             02005500
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02005600
*  IF ERRBFLST(1)^=''                        /* CHECK FOR NULL */       02005700
*    THEN                                                               02005800
*      DO;                                                              02005900
*        XERRBFLST=ERRBFLST(1);              /* SET XVARIABLE */        02006000
*        ZXERRBFLST='OUTPUT';                /* SET OUTPUT */           02006100
*      END;                                                             02006200
*  ELSE                                                                 02006300
*    IF ZXERRBFLST^=''                                                  02006400
*      THEN                                                             02006500
*        ZXERRBFLST='';                      /* RESET OUTPUT */         02006600
*/*PG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END-------------*/ 02006700
*      END;  /**** END OF BYPASS CHECK */                               02006800
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02006900
*  IF GAP='GAP' ! GAP='()'                   /*CHECK ENTRY*/            02007000
*    THEN                                                               02007100
*      DO;                                                              02007200
*        ZMS=' 8, THE "GAP" KEY'!!           /**KOPTP* MSG*/            02007300
*            ' MUST CONTAIN ONE'!!                                      02007400
*            ' (OR MORE) ARGUMENT(S).';                                 02007500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02007600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02007700
*        ZMACRET=8;                          /* MACRO ERROR */          02007800
*      END;                                                             02007900
*  IF NUMBER(GAP)>1                          /* CHECK POSITIONALS */    02008000
*    THEN                                                               02008100
*      DO;                                                              02008200
*        ZMS=' 8, "GAP'!!                    /**KPOSP* MSG*/            02008300
*            GAP!!                                                      02008400
*            '" "GAP"'!!                                                02008500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02008600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02008700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02008800
*        ZMACRET=8;                          /* MACRO ERROR */          02008900
*      END;                                                             02009000
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02009100
*  ZXGAP='INPUT';                            /* SET IN/OUTPUT */        02009200
*  XGAP='0';                                 /* SET DEFAULT */          02009300
*  IF GAP(1)^=''                             /* CHECK FOR NULL */       02009400
*    THEN                                                               02009500
*      XGAP=GAP(1);                          /* SET XVARIABLE */        02009600
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02009700
*  IF OWNERID='OWNERID' ! OWNERID='()'       /*CHECK ENTRY*/            02009800
*    THEN                                                               02009900
*      DO;                                                              02010000
*        ZMS=' 8, THE "OWNERID" KEY'!!       /**KOPTP* MSG*/            02010100
*            ' MUST CONTAIN ONE'!!                                      02010200
*            ' (OR MORE) ARGUMENT(S).';                                 02010300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02010400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02010500
*        ZMACRET=8;                          /* MACRO ERROR */          02010600
*      END;                                                             02010700
*  IF NUMBER(OWNERID)>1                      /* CHECK POSITIONALS */    02010800
*    THEN                                                               02010900
*      DO;                                                              02011000
*        ZMS=' 8, "OWNERID'!!                /**KPOSP* MSG*/            02011100
*            OWNERID!!                                                  02011200
*            '" "OWNERID"'!!                                            02011300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02011400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02011500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02011600
*        ZMACRET=8;                          /* MACRO ERROR */          02011700
*      END;                                                             02011800
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02011900
*  ZXOWNERID='INPUT';                        /* SET IN/OUTPUT */        02012000
*  XOWNERID='0';                             /* SET DEFAULT */          02012100
*  IF OWNERID(1)^=''                         /* CHECK FOR NULL */       02012200
*    THEN                                                               02012300
*      XOWNERID=OWNERID(1);                  /* SET XVARIABLE */        02012400
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02012500
*  IF COMPID='COMPID' ! COMPID='()'          /*CHECK ENTRY*/            02012600
*    THEN                                                               02012700
*      DO;                                                              02012800
*        ZMS=' 8, THE "COMPID" KEY'!!        /**KOPTP* MSG*/            02012900
*            ' MUST CONTAIN ONE'!!                                      02013000
*            ' (OR MORE) ARGUMENT(S).';                                 02013100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02013200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02013300
*        ZMACRET=8;                          /* MACRO ERROR */          02013400
*      END;                                                             02013500
*  IF NUMBER(COMPID)>1                       /* CHECK POSITIONALS */    02013600
*    THEN                                                               02013700
*      DO;                                                              02013800
*        ZMS=' 8, "COMPID'!!                 /**KPOSP* MSG*/            02013900
*            COMPID!!                                                   02014000
*            '" "COMPID"'!!                                             02014100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02014200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02014300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02014400
*        ZMACRET=8;                          /* MACRO ERROR */          02014500
*      END;                                                             02014600
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02014700
*  ZXCOMPID='INPUT';                         /* SET IN/OUTPUT */        02014800
*  XCOMPID='0';                              /* SET DEFAULT */          02014900
*  IF COMPID(1)^=''                          /* CHECK FOR NULL */       02015000
*    THEN                                                               02015100
*      XCOMPID=COMPID(1);                    /* SET XVARIABLE */        02015200
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02015300
*  IF COMPUSER='COMPUSER' ! COMPUSER='()'    /*CHECK ENTRY*/            02015400
*    THEN                                                               02015500
*      DO;                                                              02015600
*        ZMS=' 8, THE "COMPUSER" KEY'!!      /**KOPTP* MSG*/            02015700
*            ' MUST CONTAIN ONE'!!                                      02015800
*            ' (OR MORE) ARGUMENT(S).';                                 02015900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02016000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02016100
*        ZMACRET=8;                          /* MACRO ERROR */          02016200
*      END;                                                             02016300
*  IF NUMBER(COMPUSER)>1                     /* CHECK POSITIONALS */    02016400
*    THEN                                                               02016500
*      DO;                                                              02016600
*        ZMS=' 8, "COMPUSER'!!               /**KPOSP* MSG*/            02016700
*            COMPUSER!!                                                 02016800
*            '" "COMPUSER"'!!                                           02016900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02017000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02017100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02017200
*        ZMACRET=8;                          /* MACRO ERROR */          02017300
*      END;                                                             02017400
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02017500
*  ZXCOMPUSER='INPUT';                       /* SET IN/OUTPUT */        02017600
*  XCOMPUSER='0';                            /* SET DEFAULT */          02017700
*  IF COMPUSER(1)^=''                        /* CHECK FOR NULL */       02017800
*    THEN                                                               02017900
*      XCOMPUSER=COMPUSER(1);                /* SET XVARIABLE */        02018000
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02018100
*  IF SKIPBUF='SKIPBUF'                      /* CHECK ENTRY */          02018200
*    THEN                                                               02018300
*      DO;                                                              02018400
*        ZMS=' 8, THE "SKIPBUF" KEY'!!       /**KOPTP* MSG*/            02018500
*            ' MUST CONTAIN ONE'!!                                      02018600
*            ' (OR MORE) ARGUMENT(S).';                                 02018700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02018800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02018900
*        ZMACRET=8;                          /* MACRO ERROR */          02019000
*      END;                                                             02019100
*  IF NUMBER(SKIPBUF)>1                      /* CHECK POSITIONALS */    02019200
*    THEN                                                               02019300
*      DO;                                                              02019400
*        ZMS=' 8, "SKIPBUF'!!                /**KPOSP* MSG*/            02019500
*            SKIPBUF!!                                                  02019600
*            '" "SKIPBUF"'!!                                            02019700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02019800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02019900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02020000
*        ZMACRET=8;                          /* MACRO ERROR */          02020100
*      END;                                                             02020200
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02020300
*  XSKIPBUF='';                              /* RESET XVARIABLE */      02020400
*  IF TRANSLATE(SKIPBUF(1))                                             02020500
*              = 'NO'                        /* CHECK FOR KEYWORD */    02020600
*    THEN                                                               02020700
*      XSKIPBUF = 'NO';                      /* SET XVARIABLE */        02020800
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02020900
*  IF TRANSLATE(SKIPBUF(1))                                             02021000
*              = 'YES'                       /* CHECK FOR KEYWORD */    02021100
*    THEN                                                               02021200
*      XSKIPBUF = 'YES';                     /* SET XVARIABLE */        02021300
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02021400
*  ZXSKIPBUF='INPUT';                        /* SET IN/OUTPUT */        02021500
*  IF XSKIPBUF=''                            /* CHECK FOR KEYWORD */    02021600
*    THEN                                                               02021700
*      DO;                                   /* KEYWORD NOT ENTERED */  02021800
*        XSKIPBUF='NO';                      /* SET DEFAULT */          02021900
*        IF SKIPBUF(1)^=''                                              02022000
*          THEN                                                         02022100
*            DO;                                                        02022200
*              ZXSKIPBUF='';                 /* RESET IN/OUTPUT */      02022300
*              ZMS=' 8, "SKIPBUF'!!          /**KUKWP* MSG*/            02022400
*                  SKIPBUF!!'"'!!                                       02022500
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02022600
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02022700
*                  ' "NO"'!!                 /* VALID KEYWORD */        02022800
*                  ' OR "YES".';             /* VALID KEYWORD */        02022900
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02023000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02023100
*              ZMACRET=8;                    /* MACRO ERROR */          02023200
*            END;                                                       02023300
*      END;                                                             02023400
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02023500
*  IF TASKID='TASKID' ! TASKID='()'          /*CHECK ENTRY*/            02023600
*    THEN                                                               02023700
*      DO;                                                              02023800
*        ZMS=' 8, THE "TASKID" KEY'!!        /**KOPTP* MSG*/            02023900
*            ' MUST CONTAIN ONE'!!                                      02024000
*            ' (OR MORE) ARGUMENT(S).';                                 02024100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02024200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02024300
*        ZMACRET=8;                          /* MACRO ERROR */          02024400
*      END;                                                             02024500
*  IF NUMBER(TASKID)>1                       /* CHECK POSITIONALS */    02024600
*    THEN                                                               02024700
*      DO;                                                              02024800
*        ZMS=' 8, "TASKID'!!                 /**KPOSP* MSG*/            02024900
*            TASKID!!                                                   02025000
*            '" "TASKID"'!!                                             02025100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02025200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02025300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02025400
*        ZMACRET=8;                          /* MACRO ERROR */          02025500
*      END;                                                             02025600
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02025700
*  ZXTASKID='INPUT';                         /* SET IN/OUTPUT */        02025800
*  XTASKID='0';                              /* SET DEFAULT */          02025900
*  IF TASKID(1)^=''                          /* CHECK FOR NULL */       02026000
*    THEN                                                               02026100
*      XTASKID=TASKID(1);                    /* SET XVARIABLE */        02026200
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02026300
*  IF THREAD='THREAD' ! THREAD='()'          /*CHECK ENTRY*/            02026400
*    THEN                                                               02026500
*      DO;                                                              02026600
*        ZMS=' 8, THE "THREAD" KEY'!!        /**KOPTP* MSG*/            02026700
*            ' MUST CONTAIN ONE'!!                                      02026800
*            ' (OR MORE) ARGUMENT(S).';                                 02026900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02027000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02027100
*        ZMACRET=8;                          /* MACRO ERROR */          02027200
*      END;                                                             02027300
*  IF NUMBER(THREAD)>1                       /* CHECK POSITIONALS */    02027400
*    THEN                                                               02027500
*      DO;                                                              02027600
*        ZMS=' 8, "THREAD'!!                 /**KPOSP* MSG*/            02027700
*            THREAD!!                                                   02027800
*            '" "THREAD"'!!                                             02027900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02028000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02028100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02028200
*        ZMACRET=8;                          /* MACRO ERROR */          02028300
*      END;                                                             02028400
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02028500
*  ZXTHREAD='INPUT';                         /* SET IN/OUTPUT */        02028600
*  XTHREAD='0';                              /* SET DEFAULT */          02028700
*  IF THREAD(1)^=''                          /* CHECK FOR NULL */       02028800
*    THEN                                                               02028900
*      XTHREAD=THREAD(1);                    /* SET XVARIABLE */        02029000
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02029100
*  IF UTILRTN='UTILRTN' ! UTILRTN='()'       /*CHECK ENTRY*/            02029200
*    THEN                                                               02029300
*      DO;                                                              02029400
*        ZMS=' 8, THE "UTILRTN" KEY'!!       /**KOPTP* MSG*/            02029500
*            ' MUST CONTAIN ONE'!!                                      02029600
*            ' (OR MORE) ARGUMENT(S).';                                 02029700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02029800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02029900
*        ZMACRET=8;                          /* MACRO ERROR */          02030000
*      END;                                                             02030100
*  IF NUMBER(UTILRTN)>1                      /* CHECK POSITIONALS */    02030200
*    THEN                                                               02030300
*      DO;                                                              02030400
*        ZMS=' 8, "UTILRTN'!!                /**KPOSP* MSG*/            02030500
*            UTILRTN!!                                                  02030600
*            '" "UTILRTN"'!!                                            02030700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02030800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02030900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02031000
*        ZMACRET=8;                          /* MACRO ERROR */          02031100
*      END;                                                             02031200
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02031300
*  ZXUTILRTN='INPUT';                        /* SET IN/OUTPUT */        02031400
*  XUTILRTN='0';                             /* SET DEFAULT */          02031500
*  IF UTILRTN(1)^=''                         /* CHECK FOR NULL */       02031600
*    THEN                                                               02031700
*      XUTILRTN=UTILRTN(1);                  /* SET XVARIABLE */        02031800
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02031900
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     02032000
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02032100
*  IF TRANSLATE(REQUEST(1))                                             02032200
*              = 'COPY_DATA'                 /* CHECK FOR KEYWORD */    02032300
*    THEN                                                               02032400
*      DO;                                                              02032500
*        XREQUEST='COPY_DATA';               /* SET XVARIABLE */        02032600
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    02032700
*          THEN                                                         02032800
*            DO;                                                        02032900
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            02033000
*                  REQUEST!!                                            02033100
*                  '" "REQUEST"'!!                                      02033200
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02033300
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02033400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02033500
*              ZMACRET=8;                    /* MACRO ERROR */          02033600
*            END;                                                       02033700
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02033800
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 02033900
*        IF BUFLIST^=''                      /* CHECK FOR KEY */        02034000
*          THEN                                                         02034100
*            ZCVAL=ZCVAL!!',BUFLIST';        /* INCORRECT KEY USED */   02034200
*        IF BUFLST64^=''                     /* CHECK FOR KEY */        02034300
*          THEN                                                         02034400
*            ZCVAL=ZCVAL!!',BUFLST64';       /* INCORRECT KEY USED */   02034500
*        IF BUFNUM^=''                       /* CHECK FOR KEY */        02034600
*          THEN                                                         02034700
*            ZCVAL=ZCVAL!!',BUFNUM';         /* INCORRECT KEY USED */   02034800
*        IF BUFTYPE^=''                      /* CHECK FOR KEY */        02034900
*          THEN                                                         02035000
*            ZCVAL=ZCVAL!!',BUFTYPE';        /* INCORRECT KEY USED */   02035100
*        IF CSMUSER^=''                      /* CHECK FOR KEY */        02035200
*          THEN                                                         02035300
*            ZCVAL=ZCVAL!!',CSMUSER';        /* INCORRECT KEY USED */   02035400
*        IF GAP^=''                          /* CHECK FOR KEY */        02035500
*          THEN                                                         02035600
*            ZCVAL=ZCVAL!!',GAP';            /* INCORRECT KEY USED */   02035700
*        IF ERRBFLST^=''                     /* CHECK FOR KEY */        02035800
*          THEN                                                         02035900
*            ZCVAL=ZCVAL!!',ERRBFLST';       /* INCORRECT KEY USED */   02036000
*        IF OWNERID^=''                      /* CHECK FOR KEY */        02036100
*          THEN                                                         02036200
*            ZCVAL=ZCVAL!!',OWNERID';        /* INCORRECT KEY USED */   02036300
*        IF COMPID^=''                       /* CHECK FOR KEY */        02036400
*          THEN                                                         02036500
*            ZCVAL=ZCVAL!!',COMPID';         /* INCORRECT KEY USED */   02036600
*        IF COMPUSER^=''                     /* CHECK FOR KEY */        02036700
*          THEN                                                         02036800
*            ZCVAL=ZCVAL!!',COMPUSER';       /* INCORRECT KEY USED */   02036900
*        IF TASKID^=''                       /* CHECK FOR KEY */        02037000
*          THEN                                                         02037100
*            ZCVAL=ZCVAL!!',TASKID';         /* INCORRECT KEY USED */   02037200
*        IF SKIPBUF^=''                      /* CHECK FOR KEY */        02037300
*          THEN                                                         02037400
*            ZCVAL=ZCVAL!!',SKIPBUF';        /* INCORRECT KEY USED */   02037500
*        IF BUFSIZE^=''                      /* CHECK FOR KEY */        02037600
*          THEN                                                         02037700
*            ZCVAL=ZCVAL!!',BUFSIZE';        /* INCORRECT KEY USED */   02037800
*        IF BUFSOURC^=''                     /* CHECK FOR KEY */        02037900
*          THEN                                                         02038000
*            ZCVAL=ZCVAL!!',BUFSOURC';       /* INCORRECT KEY USED */   02038100
*        IF BACK^=''                         /* CHECK FOR KEY */        02038200
*          THEN                                                         02038300
*            ZCVAL=ZCVAL!!',BACK';           /* INCORRECT KEY USED */   02038400
*        IF DS_INFO^=''                      /* CHECK FOR KEY */        02038500
*          THEN                                                         02038600
*            ZCVAL=ZCVAL!!',DS_INFO';        /* INCORRECT KEY USED */   02038700
*        IF EXPBUF^=''                       /* CHECK FOR KEY */        02038800
*          THEN                                                         02038900
*            ZCVAL=ZCVAL!!',EXPBUF';         /* INCORRECT KEY USED */   02039000
*        IF INITBUF^=''                      /* CHECK FOR KEY */        02039100
*          THEN                                                         02039200
*            ZCVAL=ZCVAL!!',INITBUF';        /* INCORRECT KEY USED */   02039300
*        IF MINFREE^=''                      /* CHECK FOR KEY */        02039400
*          THEN                                                         02039500
*            ZCVAL=ZCVAL!!',MINFREE';        /* INCORRECT KEY USED */   02039600
*        IF RETPTOKN^=''                     /* CHECK FOR KEY */        02039700
*          THEN                                                         02039800
*            ZCVAL=ZCVAL!!',RETPTOKN';       /* INCORRECT KEY USED */   02039900
*        IF STATAREA^=''                     /* CHECK FOR KEY */        02040000
*          THEN                                                         02040100
*            ZCVAL=ZCVAL!!',STATAREA';       /* INCORRECT KEY USED */   02040200
*        IF POOLTOKN^=''                     /* CHECK FOR KEY */        02040300
*          THEN                                                         02040400
*            ZCVAL=ZCVAL!!',POOLTOKN';       /* INCORRECT KEY USED */   02040500
*        IF WAIT^=''                         /* CHECK FOR KEY */        02040600
*          THEN                                                         02040700
*            ZCVAL=ZCVAL!!',WAIT';           /* INCORRECT KEY USED */   02040800
*        IF CLEAR^=''                        /* CHECK FOR KEY */        02040900
*          THEN                                                         02041000
*            ZCVAL=ZCVAL!!',CLEAR';          /* INCORRECT KEY USED */   02041100
*        IF FREETO^=''                       /* CHECK FOR KEY */        02041200
*          THEN                                                         02041300
*            ZCVAL=ZCVAL!!',FREETO';         /* INCORRECT KEY USED */   02041400
*        IF FREERTN^=''                      /* CHECK FOR KEY */        02041500
*          THEN                                                         02041600
*            ZCVAL=ZCVAL!!',FREERTN';        /* INCORRECT KEY USED */   02041700
*        IF ZCVAL^=''                                                   02041800
*          THEN                                                         02041900
*            DO;                             /* INCORRECT KEYS USED */  02042000
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            02042100
*              ZMS=' 8, "REQUEST'!!          /**KMEIP* MSG*/            02042200
*                  REQUEST!!'"'!!                                       02042300
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   02042400
*                  ' FOLLOWING KEY(S) "'!!                              02042500
*                  ZCVAL!!'".';                                         02042600
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02042700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02042800
*              ZMACRET=8;                    /* MACRO ERROR */          02042900
*            END;                                                       02043000
*/*PG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02043100
*  XPAD='';                                                             02043200
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02043300
*  IF TRANSLATE(PAD(1))                                                 02043400
*              = 'NO'                        /* CHECK FOR KEYWORD */    02043500
*     ! PAD(1)=''                            /* CHECK FOR NULL */       02043600
*    THEN                                                               02043700
*      DO;                                                              02043800
*        XPAD='NO';                          /* SET XVARIABLE */        02043900
*        IF NUMBER(PAD)>1                    /* CHECK POSITIONALS */    02044000
*          THEN                                                         02044100
*            DO;                                                        02044200
*              ZMS=' 8, "PAD'!!              /**KPOSP* MSG*/            02044300
*                  PAD!!                                                02044400
*                  '" "PAD"'!!                                          02044500
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02044600
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02044700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02044800
*              ZMACRET=8;                    /* MACRO ERROR */          02044900
*            END;                                                       02045000
*/*PG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02045100
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 02045200
*        IF PADCHAR^=''                      /* CHECK FOR KEY */        02045300
*          THEN                                                         02045400
*            ZCVAL=ZCVAL!!',PADCHAR';        /* INCORRECT KEY USED */   02045500
*        IF ZCVAL^=''                                                   02045600
*          THEN                                                         02045700
*            DO;                             /* INCORRECT KEYS USED */  02045800
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            02045900
*              ZMS=' 8, "PAD'!!              /**KMEIP* MSG*/            02046000
*                  PAD!!'"'!!                                           02046100
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   02046200
*                  ' FOLLOWING KEY(S) "'!!                              02046300
*                  ZCVAL!!'".';                                         02046400
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02046500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02046600
*              ZMACRET=8;                    /* MACRO ERROR */          02046700
*            END;                                                       02046800
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02046900
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     02047000
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02047100
*  IF TRANSLATE(PAD(1))                                                 02047200
*              = 'YES'                       /* CHECK FOR KEYWORD */    02047300
*    THEN                                                               02047400
*      DO;                                                              02047500
*        XPAD='YES';                         /* SET XVARIABLE */        02047600
*        IF NUMBER(PAD)>1                    /* CHECK POSITIONALS */    02047700
*          THEN                                                         02047800
*            DO;                                                        02047900
*              ZMS=' 8, "PAD'!!              /**KPOSP* MSG*/            02048000
*                  PAD!!                                                02048100
*                  '" "PAD"'!!                                          02048200
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02048300
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02048400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02048500
*              ZMACRET=8;                    /* MACRO ERROR */          02048600
*            END;                                                       02048700
*/*PG.KXVAR01 NAME, OPT RQD INPUT, KEYS -EXCESSIVE ARGUMENTS---------*/ 02048800
*  IF NUMBER(PADCHAR)>1                      /* CHECK POSITIONALS */    02048900
*    THEN                                                               02049000
*      DO;                                                              02049100
*        ZMS=' 8, "PADCHAR'!!                /**KPOSP* MSG*/            02049200
*            PADCHAR!!                                                  02049300
*            '" "PADCHAR"'!!                                            02049400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02049500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02049600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02049700
*        ZMACRET=8;                          /* MACRO ERROR */          02049800
*      END;                                                             02049900
*/*PG.KXVAR03 NAME, OPT RQD INPUT, KEYS -XVARIABLE-------------------*/ 02050000
*  XPADCHAR=PADCHAR(1);                      /* SET XVARIABLE */        02050100
*  IF PADCHAR(1)=''                          /* CHECK FOR NULL */       02050200
*   THEN                                                                02050300
*    DO;                                     /* KEY IS REQUIRED */      02050400
*        ZXPADCHAR='';                       /* RESET IN/OUTPUT */      02050500
*        ZMS=' 8,  '!!                                                  02050600
*            ' "PADCHAR" KEY AND ITS'!!                                 02050700
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            02050800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02050900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02051000
*        ZMACRET=8;                          /* MACRO ERROR */          02051100
*    END;                                                               02051200
*  ELSE                                                                 02051300
*    ZXPADCHAR='INPUT';                      /* SET IN/OUTPUT */        02051400
*/*PG.KKCTL05 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02051500
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     02051600
*/*PG.KKCTL06 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02051700
*  IF PAD='PAD'                                                         02051800
*    ! PAD='()'                              /*CHECK ENTRY*/            02051900
*     THEN                                                              02052000
*       DO;                                                             02052100
*              ZMS=' 8, THE "PAD" KEY'!!     /**KOPTP* MSG*/            02052200
*                  ' MUST CONTAIN ONE'!!                                02052300
*                  ' (OR MORE) ARGUMENT(S).';                           02052400
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02052500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02052600
*              ZMACRET=8;                    /* MACRO ERROR */          02052700
*       END;                                                            02052800
*  ELSE                                                                 02052900
*    DO;                                                                02053000
*      ZXPAD='INPUT';                        /* SET IN/OUTPUT */        02053100
*      IF XPAD=''                            /* CHECK FOR KEYWORD */    02053200
*        THEN                                                           02053300
*          DO;                               /* KEYWORD NOT ENTERED */  02053400
*            XPAD='NO';                      /* SET DEFAULT */          02053500
*            IF PAD(1)^=''                   /* CHECK FOR KEYWORD */    02053600
*              THEN                                                     02053700
*                DO;                                                    02053800
*                  ZXPAD='';                 /* RESET IN/OUTPUT */      02053900
*              ZMS=' 8, "PAD'!!              /**KUKWP* MSG*/            02054000
*                  PAD!!'"'!!                                           02054100
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02054200
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02054300
*                  ' "NO"'!!                 /* VALID KEYWORD */        02054400
*                  ' OR "YES".';             /* VALID KEYWORD */        02054500
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02054600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02054700
*              ZMACRET=8;                    /* MACRO ERROR */          02054800
*                END;                                                   02054900
*          END;                                                         02055000
*    END;                                                               02055100
*/*PG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START-----------*/ 02055200
*  IF XMF^='M'                               /* BYPASS IF MF=M */       02055300
*    THEN                                                               02055400
*      DO;                                                              02055500
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02055600
*  IF SRCERRL='SRCERRL' ! SRCERRL='()'       /*CHECK ENTRY*/            02055700
*    THEN                                                               02055800
*      DO;                                                              02055900
*        ZMS=' 8, THE "SRCERRL" KEY'!!       /**KOPTP* MSG*/            02056000
*            ' MUST CONTAIN ONE'!!                                      02056100
*            ' (OR MORE) ARGUMENT(S).';                                 02056200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02056300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02056400
*        ZMACRET=8;                          /* MACRO ERROR */          02056500
*      END;                                                             02056600
*  IF NUMBER(SRCERRL)>1                      /* CHECK POSITIONALS */    02056700
*    THEN                                                               02056800
*      DO;                                                              02056900
*        ZMS=' 8, "SRCERRL'!!                /**KPOSP* MSG*/            02057000
*            SRCERRL!!                                                  02057100
*            '" "SRCERRL"'!!                                            02057200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02057300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02057400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02057500
*        ZMACRET=8;                          /* MACRO ERROR */          02057600
*      END;                                                             02057700
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02057800
*  IF SRCERRL(1)^=''                         /* CHECK FOR NULL */       02057900
*    THEN                                                               02058000
*      DO;                                                              02058100
*        XSRCERRL=SRCERRL(1);                /* SET XVARIABLE */        02058200
*        ZXSRCERRL='OUTPUT';                 /* SET OUTPUT */           02058300
*      END;                                                             02058400
*  ELSE                                                                 02058500
*    IF ZXSRCERRL^=''                                                   02058600
*      THEN                                                             02058700
*        ZXSRCERRL='';                       /* RESET OUTPUT */         02058800
*/*PG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END-------------*/ 02058900
*      END;  /**** END OF BYPASS CHECK */                               02059000
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02059100
*  IF SRCGAP='SRCGAP' ! SRCGAP='()'          /*CHECK ENTRY*/            02059200
*    THEN                                                               02059300
*      DO;                                                              02059400
*        ZMS=' 8, THE "SRCGAP" KEY'!!        /**KOPTP* MSG*/            02059500
*            ' MUST CONTAIN ONE'!!                                      02059600
*            ' (OR MORE) ARGUMENT(S).';                                 02059700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02059800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02059900
*        ZMACRET=8;                          /* MACRO ERROR */          02060000
*      END;                                                             02060100
*  IF NUMBER(SRCGAP)>1                       /* CHECK POSITIONALS */    02060200
*    THEN                                                               02060300
*      DO;                                                              02060400
*        ZMS=' 8, "SRCGAP'!!                 /**KPOSP* MSG*/            02060500
*            SRCGAP!!                                                   02060600
*            '" "SRCGAP"'!!                                             02060700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02060800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02060900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02061000
*        ZMACRET=8;                          /* MACRO ERROR */          02061100
*      END;                                                             02061200
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02061300
*  ZXSRCGAP='INPUT';                         /* SET IN/OUTPUT */        02061400
*  XSRCGAP='0';                              /* SET DEFAULT */          02061500
*  IF SRCGAP(1)^=''                          /* CHECK FOR NULL */       02061600
*    THEN                                                               02061700
*      XSRCGAP=SRCGAP(1);                    /* SET XVARIABLE */        02061800
*/*PG.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02061900
*  XDUMMY3='';                               /* RESET XVARIABLE */      02062000
*  IF SRCLIST^=''                            /* CHECK ME KEY */         02062100
*    THEN                                                               02062200
*      DO;                                   /* VALID ME KEY */         02062300
*        IF NUMBER(SRCLIST)>1                /* CHECK SUBLISTS */       02062400
*          THEN                                                         02062500
*            DO;                                                        02062600
*              ZMS=' 8, "SRCLIST'!!          /**KPOSP* MSG*/            02062700
*                  SRCLIST!!                                            02062800
*                  '" "SRCLIST"'!!                                      02062900
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02063000
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02063100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02063200
*              ZMACRET=8;                    /* MACRO ERROR */          02063300
*            END;                                                       02063400
*        XDUMMY3='SRCLIST';                  /* SET XVARIABLE */        02063500
*        XSRCLIST=SRCLIST(1);                /* SET XVARIABLE */        02063600
*        ZXDUMMY3='INPUT';                   /* SET IN/OUTPUT */        02063700
*        ZXSRCLIST='INPUT';                  /* SET IN/OUTPUT */        02063800
*        IF SRCLIST(1)=''                    /* CHECK ME KEY */         02063900
*          THEN                                                         02064000
*            DO;                                                        02064100
*              ZXDUMMY3='';                  /* RESET IN/OUTPUT */      02064200
*              ZXSRCLIST='';                 /* RESET IN/OUTPUT */      02064300
*              ZMS=' 8,  '!!                                            02064400
*                  ' "SRCLIST" KEY AND ITS'!!                           02064500
*                  ' ARGUMENT ARE REQUIRED.'; /**KRQDP* MSG*/           02064600
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02064700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02064800
*              ZMACRET=8;                    /* MACRO ERROR */          02064900
*           END;                                                        02065000
*      END;                                                             02065100
*/*PG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02065200
*  IF SRCLST64^=''                           /* CHECK ME KEY */         02065300
*    THEN                                                               02065400
*      DO;                                                              02065500
*        IF NUMBER(SRCLST64)>1               /* CHECK SUBLISTS */       02065600
*          THEN                                                         02065700
*            DO;                                                        02065800
*              ZMS=' 8, "SRCLST64'!!         /**KPOSP* MSG*/            02065900
*                  SRCLST64!!                                           02066000
*                  '" "SRCLST64"'!!                                     02066100
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02066200
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02066300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02066400
*              ZMACRET=8;                    /* MACRO ERROR */          02066500
*            END;                                                       02066600
*        IF XDUMMY3=''                       /* CHECK XVARIABLE */      02066700
*          THEN                                                         02066800
*            DO;                             /* VALID ME KEY */         02066900
*              XDUMMY3='SRCLST64';           /* SET XVAR1 */            02067000
*              XSRCLST64=SRCLST64(1);        /* SET XVAR2 */            02067100
*              ZXDUMMY3='INPUT';             /* SET IN/OUTPUT */        02067200
*              ZXSRCLST64='INPUT';           /* SET IN/OUTPUT */        02067300
*              IF SRCLST64(1)=''             /* CHECK ME KEY */         02067400
*                THEN                                                   02067500
*                  DO;                                                  02067600
*                    ZXDUMMY3='';            /* RESET IN/OUTPUT */      02067700
*                    ZXSRCLST64='';          /* RESET IN/OUTPUT */      02067800
*                    ZMS=' 8,  '!!                                      02067900
*                        ' "SRCLST64" KEY AND ITS'!!                    02068000
*                        ' ARGUMENT ARE REQUIRED.'; /**KRQDP* MSG*/     02068100
*                    ANS MSG('?IVTCSM ---> '!!ZMS);                     02068200
*                    ANS(COMMENT(ZMS)) COL(MACLMAR);                    02068300
*                    ZMACRET=8;              /* MACRO ERROR */          02068400
*                  END;                                                 02068500
*            END;                                                       02068600
*          ELSE                                                         02068700
*            DO;                                                        02068800
*              ZMS=' 8, "SRCLST64'!!         /**KMEKP* MSG*/            02068900
*                  SRCLST64!!'"'!!                                      02069000
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'!!                02069100
*                  XDUMMY3!!                                            02069200
*                  '" KEY.';                                            02069300
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02069400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02069500
*              ZMACRET=8;                    /* MACRO ERROR */          02069600
*            END;                                                       02069700
*      END;                                                             02069800
*/*PG.KMEKY08 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 02069900
*  IF XDUMMY3=''                             /* CHECK XVARIABLE */      02070000
*    THEN                                                               02070100
*      DO;                                                              02070200
*        XDUMMY3='SRCLIST';                  /* SET DEFAULT */          02070300
*        XSRCLIST='0';                       /* SET DEFAULT */          02070400
*        ZXDUMMY3='';                        /* RESET IN/OUTPUT */      02070500
*        ZXSRCLIST='';                       /* RESET IN/OUTPUT */      02070600
*        ZMS=' 8, ONE OF THE FOLLOWING'!!    /**KMERP* MSG*/            02070700
*            ' MUTUALLY EXCLUSIVE KEY(S) IS'!!                          02070800
*            ' REQUIRED:'!!                                             02070900
*            ' "SRCLIST"'!!                  /* VALID ME KEY */         02071000
*            ' OR "SRCLST64".';              /* VALID ME KEY */         02071100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02071200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02071300
*        ZMACRET=8;                          /* MACRO ERROR */          02071400
*      END;                                                             02071500
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02071600
*  IF NUMBER(SRCNUM)>1                       /* CHECK POSITIONALS */    02071700
*    THEN                                                               02071800
*      DO;                                                              02071900
*        ZMS=' 8, "SRCNUM'!!                 /**KPOSP* MSG*/            02072000
*            SRCNUM!!                                                   02072100
*            '" "SRCNUM"'!!                                             02072200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02072300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02072400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02072500
*        ZMACRET=8;                          /* MACRO ERROR */          02072600
*      END;                                                             02072700
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02072800
*  XSRCNUM=SRCNUM(1);                        /* SET XVARIABLE */        02072900
*  IF SRCNUM(1)=''                           /* CHECK FOR NULL */       02073000
*   THEN                                                                02073100
*    DO;                                     /* KEY IS REQUIRED */      02073200
*        ZXSRCNUM='';                        /* RESET IN/OUTPUT */      02073300
*        ZMS=' 8,  '!!                                                  02073400
*            ' "SRCNUM" KEY AND ITS'!!                                  02073500
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            02073600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02073700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02073800
*        ZMACRET=8;                          /* MACRO ERROR */          02073900
*    END;                                                               02074000
*  ELSE                                                                 02074100
*    ZXSRCNUM='INPUT';                       /* SET IN/OUTPUT */        02074200
*/*PG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START-----------*/ 02074300
*  IF XMF^='M'                               /* BYPASS IF MF=M */       02074400
*    THEN                                                               02074500
*      DO;                                                              02074600
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02074700
*  IF TARGERRL='TARGERRL' ! TARGERRL='()'    /*CHECK ENTRY*/            02074800
*    THEN                                                               02074900
*      DO;                                                              02075000
*        ZMS=' 8, THE "TARGERRL" KEY'!!      /**KOPTP* MSG*/            02075100
*            ' MUST CONTAIN ONE'!!                                      02075200
*            ' (OR MORE) ARGUMENT(S).';                                 02075300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02075400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02075500
*        ZMACRET=8;                          /* MACRO ERROR */          02075600
*      END;                                                             02075700
*  IF NUMBER(TARGERRL)>1                     /* CHECK POSITIONALS */    02075800
*    THEN                                                               02075900
*      DO;                                                              02076000
*        ZMS=' 8, "TARGERRL'!!               /**KPOSP* MSG*/            02076100
*            TARGERRL!!                                                 02076200
*            '" "TARGERRL"'!!                                           02076300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02076400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02076500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02076600
*        ZMACRET=8;                          /* MACRO ERROR */          02076700
*      END;                                                             02076800
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02076900
*  IF TARGERRL(1)^=''                        /* CHECK FOR NULL */       02077000
*    THEN                                                               02077100
*      DO;                                                              02077200
*        XTARGERRL=TARGERRL(1);              /* SET XVARIABLE */        02077300
*        ZXTARGERRL='OUTPUT';                /* SET OUTPUT */           02077400
*      END;                                                             02077500
*  ELSE                                                                 02077600
*    IF ZXTARGERRL^=''                                                  02077700
*      THEN                                                             02077800
*        ZXTARGERRL='';                      /* RESET OUTPUT */         02077900
*/*PG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END-------------*/ 02078000
*      END;  /**** END OF BYPASS CHECK */                               02078100
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02078200
*  IF TARGGAP='TARGGAP' ! TARGGAP='()'       /*CHECK ENTRY*/            02078300
*    THEN                                                               02078400
*      DO;                                                              02078500
*        ZMS=' 8, THE "TARGGAP" KEY'!!       /**KOPTP* MSG*/            02078600
*            ' MUST CONTAIN ONE'!!                                      02078700
*            ' (OR MORE) ARGUMENT(S).';                                 02078800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02078900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02079000
*        ZMACRET=8;                          /* MACRO ERROR */          02079100
*      END;                                                             02079200
*  IF NUMBER(TARGGAP)>1                      /* CHECK POSITIONALS */    02079300
*    THEN                                                               02079400
*      DO;                                                              02079500
*        ZMS=' 8, "TARGGAP'!!                /**KPOSP* MSG*/            02079600
*            TARGGAP!!                                                  02079700
*            '" "TARGGAP"'!!                                            02079800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02079900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02080000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02080100
*        ZMACRET=8;                          /* MACRO ERROR */          02080200
*      END;                                                             02080300
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02080400
*  ZXTARGGAP='INPUT';                        /* SET IN/OUTPUT */        02080500
*  XTARGGAP='0';                             /* SET DEFAULT */          02080600
*  IF TARGGAP(1)^=''                         /* CHECK FOR NULL */       02080700
*    THEN                                                               02080800
*      XTARGGAP=TARGGAP(1);                  /* SET XVARIABLE */        02080900
*/*PG.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02081000
*  XDUMMY4='';                               /* RESET XVARIABLE */      02081100
*  IF TARGLIST^=''                           /* CHECK ME KEY */         02081200
*    THEN                                                               02081300
*      DO;                                   /* VALID ME KEY */         02081400
*        IF NUMBER(TARGLIST)>1               /* CHECK SUBLISTS */       02081500
*          THEN                                                         02081600
*            DO;                                                        02081700
*              ZMS=' 8, "TARGLIST'!!         /**KPOSP* MSG*/            02081800
*                  TARGLIST!!                                           02081900
*                  '" "TARGLIST"'!!                                     02082000
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02082100
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02082200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02082300
*              ZMACRET=8;                    /* MACRO ERROR */          02082400
*            END;                                                       02082500
*        XDUMMY4='TARGLIST';                 /* SET XVARIABLE */        02082600
*        XTARGLIST=TARGLIST(1);              /* SET XVARIABLE */        02082700
*        ZXDUMMY4='INPUT';                   /* SET IN/OUTPUT */        02082800
*        ZXTARGLIST='INPUT';                 /* SET IN/OUTPUT */        02082900
*        IF TARGLIST(1)=''                   /* CHECK ME KEY */         02083000
*          THEN                                                         02083100
*            DO;                                                        02083200
*              ZXDUMMY4='';                  /* RESET IN/OUTPUT */      02083300
*              ZXTARGLIST='';                /* RESET IN/OUTPUT */      02083400
*              ZMS=' 8,  '!!                                            02083500
*                  ' "TARGLIST" KEY AND ITS'!!                          02083600
*                  ' ARGUMENT ARE REQUIRED.'; /**KRQDP* MSG*/           02083700
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02083800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02083900
*              ZMACRET=8;                    /* MACRO ERROR */          02084000
*           END;                                                        02084100
*      END;                                                             02084200
*/*PG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02084300
*  IF TARLST64^=''                           /* CHECK ME KEY */         02084400
*    THEN                                                               02084500
*      DO;                                                              02084600
*        IF NUMBER(TARLST64)>1               /* CHECK SUBLISTS */       02084700
*          THEN                                                         02084800
*            DO;                                                        02084900
*              ZMS=' 8, "TARLST64'!!         /**KPOSP* MSG*/            02085000
*                  TARLST64!!                                           02085100
*                  '" "TARLST64"'!!                                     02085200
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02085300
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02085400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02085500
*              ZMACRET=8;                    /* MACRO ERROR */          02085600
*            END;                                                       02085700
*        IF XDUMMY4=''                       /* CHECK XVARIABLE */      02085800
*          THEN                                                         02085900
*            DO;                             /* VALID ME KEY */         02086000
*              XDUMMY4='TARLST64';           /* SET XVAR1 */            02086100
*              XTARLST64=TARLST64(1);        /* SET XVAR2 */            02086200
*              ZXDUMMY4='INPUT';             /* SET IN/OUTPUT */        02086300
*              ZXTARLST64='INPUT';           /* SET IN/OUTPUT */        02086400
*              IF TARLST64(1)=''             /* CHECK ME KEY */         02086500
*                THEN                                                   02086600
*                  DO;                                                  02086700
*                    ZXDUMMY4='';            /* RESET IN/OUTPUT */      02086800
*                    ZXTARLST64='';          /* RESET IN/OUTPUT */      02086900
*                    ZMS=' 8,  '!!                                      02087000
*                        ' "TARLST64" KEY AND ITS'!!                    02087100
*                        ' ARGUMENT ARE REQUIRED.'; /**KRQDP* MSG*/     02087200
*                    ANS MSG('?IVTCSM ---> '!!ZMS);                     02087300
*                    ANS(COMMENT(ZMS)) COL(MACLMAR);                    02087400
*                    ZMACRET=8;              /* MACRO ERROR */          02087500
*                  END;                                                 02087600
*            END;                                                       02087700
*          ELSE                                                         02087800
*            DO;                                                        02087900
*              ZMS=' 8, "TARLST64'!!         /**KMEKP* MSG*/            02088000
*                  TARLST64!!'"'!!                                      02088100
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'!!                02088200
*                  XDUMMY4!!                                            02088300
*                  '" KEY.';                                            02088400
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02088500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02088600
*              ZMACRET=8;                    /* MACRO ERROR */          02088700
*            END;                                                       02088800
*      END;                                                             02088900
*/*PG.KMEKY08 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 02089000
*  IF XDUMMY4=''                             /* CHECK XVARIABLE */      02089100
*    THEN                                                               02089200
*      DO;                                                              02089300
*        XDUMMY4='TARGLIST';                 /* SET DEFAULT */          02089400
*        XTARGLIST='0';                      /* SET DEFAULT */          02089500
*        ZXDUMMY4='';                        /* RESET IN/OUTPUT */      02089600
*        ZXTARGLIST='';                      /* RESET IN/OUTPUT */      02089700
*        ZMS=' 8, ONE OF THE FOLLOWING'!!    /**KMERP* MSG*/            02089800
*            ' MUTUALLY EXCLUSIVE KEY(S) IS'!!                          02089900
*            ' REQUIRED:'!!                                             02090000
*            ' "TARGLIST"'!!                 /* VALID ME KEY */         02090100
*            ' OR "TARLST64".';              /* VALID ME KEY */         02090200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02090300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02090400
*        ZMACRET=8;                          /* MACRO ERROR */          02090500
*      END;                                                             02090600
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02090700
*  IF NUMBER(TARGNUM)>1                      /* CHECK POSITIONALS */    02090800
*    THEN                                                               02090900
*      DO;                                                              02091000
*        ZMS=' 8, "TARGNUM'!!                /**KPOSP* MSG*/            02091100
*            TARGNUM!!                                                  02091200
*            '" "TARGNUM"'!!                                            02091300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02091400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02091500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02091600
*        ZMACRET=8;                          /* MACRO ERROR */          02091700
*      END;                                                             02091800
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02091900
*  XTARGNUM=TARGNUM(1);                      /* SET XVARIABLE */        02092000
*  IF TARGNUM(1)=''                          /* CHECK FOR NULL */       02092100
*   THEN                                                                02092200
*    DO;                                     /* KEY IS REQUIRED */      02092300
*        ZXTARGNUM='';                       /* RESET IN/OUTPUT */      02092400
*        ZMS=' 8,  '!!                                                  02092500
*            ' "TARGNUM" KEY AND ITS'!!                                 02092600
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            02092700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02092800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02092900
*        ZMACRET=8;                          /* MACRO ERROR */          02093000
*    END;                                                               02093100
*  ELSE                                                                 02093200
*    ZXTARGNUM='INPUT';                      /* SET IN/OUTPUT */        02093300
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02093400
*  IF THREAD='THREAD' ! THREAD='()'          /*CHECK ENTRY*/            02093500
*    THEN                                                               02093600
*      DO;                                                              02093700
*        ZMS=' 8, THE "THREAD" KEY'!!        /**KOPTP* MSG*/            02093800
*            ' MUST CONTAIN ONE'!!                                      02093900
*            ' (OR MORE) ARGUMENT(S).';                                 02094000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02094100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02094200
*        ZMACRET=8;                          /* MACRO ERROR */          02094300
*      END;                                                             02094400
*  IF NUMBER(THREAD)>1                       /* CHECK POSITIONALS */    02094500
*    THEN                                                               02094600
*      DO;                                                              02094700
*        ZMS=' 8, "THREAD'!!                 /**KPOSP* MSG*/            02094800
*            THREAD!!                                                   02094900
*            '" "THREAD"'!!                                             02095000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02095100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02095200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02095300
*        ZMACRET=8;                          /* MACRO ERROR */          02095400
*      END;                                                             02095500
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02095600
*  ZXTHREAD='INPUT';                         /* SET IN/OUTPUT */        02095700
*  XTHREAD='0';                              /* SET DEFAULT */          02095800
*  IF THREAD(1)^=''                          /* CHECK FOR NULL */       02095900
*    THEN                                                               02096000
*      XTHREAD=THREAD(1);                    /* SET XVARIABLE */        02096100
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02096200
*  IF UTILRTN='UTILRTN' ! UTILRTN='()'       /*CHECK ENTRY*/            02096300
*    THEN                                                               02096400
*      DO;                                                              02096500
*        ZMS=' 8, THE "UTILRTN" KEY'!!       /**KOPTP* MSG*/            02096600
*            ' MUST CONTAIN ONE'!!                                      02096700
*            ' (OR MORE) ARGUMENT(S).';                                 02096800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02096900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02097000
*        ZMACRET=8;                          /* MACRO ERROR */          02097100
*      END;                                                             02097200
*  IF NUMBER(UTILRTN)>1                      /* CHECK POSITIONALS */    02097300
*    THEN                                                               02097400
*      DO;                                                              02097500
*        ZMS=' 8, "UTILRTN'!!                /**KPOSP* MSG*/            02097600
*            UTILRTN!!                                                  02097700
*            '" "UTILRTN"'!!                                            02097800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02097900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02098000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02098100
*        ZMACRET=8;                          /* MACRO ERROR */          02098200
*      END;                                                             02098300
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02098400
*  ZXUTILRTN='INPUT';                        /* SET IN/OUTPUT */        02098500
*  XUTILRTN='0';                             /* SET DEFAULT */          02098600
*  IF UTILRTN(1)^=''                         /* CHECK FOR NULL */       02098700
*    THEN                                                               02098800
*      XUTILRTN=UTILRTN(1);                  /* SET XVARIABLE */        02098900
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02099000
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     02099100
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02099200
*  IF TRANSLATE(REQUEST(1))                                             02099300
*              = 'CREATE_POOL'               /* CHECK FOR KEYWORD */    02099400
*    THEN                                                               02099500
*      DO;                                                              02099600
*        XREQUEST='CREATE_POOL';             /* SET XVARIABLE */        02099700
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    02099800
*          THEN                                                         02099900
*            DO;                                                        02100000
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            02100100
*                  REQUEST!!                                            02100200
*                  '" "REQUEST"'!!                                      02100300
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02100400
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02100500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02100600
*              ZMACRET=8;                    /* MACRO ERROR */          02100700
*            END;                                                       02100800
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02100900
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 02101000
*        IF BUFLIST^=''                      /* CHECK FOR KEY */        02101100
*          THEN                                                         02101200
*            ZCVAL=ZCVAL!!',BUFLIST';        /* INCORRECT KEY USED */   02101300
*        IF BUFLST64^=''                     /* CHECK FOR KEY */        02101400
*          THEN                                                         02101500
*            ZCVAL=ZCVAL!!',BUFLST64';       /* INCORRECT KEY USED */   02101600
*        IF BUFNUM^=''                       /* CHECK FOR KEY */        02101700
*          THEN                                                         02101800
*            ZCVAL=ZCVAL!!',BUFNUM';         /* INCORRECT KEY USED */   02101900
*        IF BUFTYPE^=''                      /* CHECK FOR KEY */        02102000
*          THEN                                                         02102100
*            ZCVAL=ZCVAL!!',BUFTYPE';        /* INCORRECT KEY USED */   02102200
*        IF CSMUSER^=''                      /* CHECK FOR KEY */        02102300
*          THEN                                                         02102400
*            ZCVAL=ZCVAL!!',CSMUSER';        /* INCORRECT KEY USED */   02102500
*        IF GAP^=''                          /* CHECK FOR KEY */        02102600
*          THEN                                                         02102700
*            ZCVAL=ZCVAL!!',GAP';            /* INCORRECT KEY USED */   02102800
*        IF ERRBFLST^=''                     /* CHECK FOR KEY */        02102900
*          THEN                                                         02103000
*            ZCVAL=ZCVAL!!',ERRBFLST';       /* INCORRECT KEY USED */   02103100
*        IF OWNERID^=''                      /* CHECK FOR KEY */        02103200
*          THEN                                                         02103300
*            ZCVAL=ZCVAL!!',OWNERID';        /* INCORRECT KEY USED */   02103400
*        IF COMPID^=''                       /* CHECK FOR KEY */        02103500
*          THEN                                                         02103600
*            ZCVAL=ZCVAL!!',COMPID';         /* INCORRECT KEY USED */   02103700
*        IF COMPUSER^=''                     /* CHECK FOR KEY */        02103800
*          THEN                                                         02103900
*            ZCVAL=ZCVAL!!',COMPUSER';       /* INCORRECT KEY USED */   02104000
*        IF TASKID^=''                       /* CHECK FOR KEY */        02104100
*          THEN                                                         02104200
*            ZCVAL=ZCVAL!!',TASKID';         /* INCORRECT KEY USED */   02104300
*        IF THREAD^=''                       /* CHECK FOR KEY */        02104400
*          THEN                                                         02104500
*            ZCVAL=ZCVAL!!',THREAD';         /* INCORRECT KEY USED */   02104600
*        IF UTILRTN^=''                      /* CHECK FOR KEY */        02104700
*          THEN                                                         02104800
*            ZCVAL=ZCVAL!!',UTILRTN';        /* INCORRECT KEY USED */   02104900
*        IF SKIPBUF^=''                      /* CHECK FOR KEY */        02105000
*          THEN                                                         02105100
*            ZCVAL=ZCVAL!!',SKIPBUF';        /* INCORRECT KEY USED */   02105200
*        IF PAD^=''                          /* CHECK FOR KEY */        02105300
*          THEN                                                         02105400
*            ZCVAL=ZCVAL!!',PAD';            /* INCORRECT KEY USED */   02105500
*        IF PADCHAR^=''                      /* CHECK FOR KEY */        02105600
*          THEN                                                         02105700
*            ZCVAL=ZCVAL!!',PADCHAR';        /* INCORRECT KEY USED */   02105800
*        IF SRCERRL^=''                      /* CHECK FOR KEY */        02105900
*          THEN                                                         02106000
*            ZCVAL=ZCVAL!!',SRCERRL';        /* INCORRECT KEY USED */   02106100
*        IF SRCGAP^=''                       /* CHECK FOR KEY */        02106200
*          THEN                                                         02106300
*            ZCVAL=ZCVAL!!',SRCGAP';         /* INCORRECT KEY USED */   02106400
*        IF SRCLIST^=''                      /* CHECK FOR KEY */        02106500
*          THEN                                                         02106600
*            ZCVAL=ZCVAL!!',SRCLIST';        /* INCORRECT KEY USED */   02106700
*        IF SRCLST64^=''                     /* CHECK FOR KEY */        02106800
*          THEN                                                         02106900
*            ZCVAL=ZCVAL!!',SRCLST64';       /* INCORRECT KEY USED */   02107000
*        IF SRCNUM^=''                       /* CHECK FOR KEY */        02107100
*          THEN                                                         02107200
*            ZCVAL=ZCVAL!!',SRCNUM';         /* INCORRECT KEY USED */   02107300
*        IF TARGERRL^=''                     /* CHECK FOR KEY */        02107400
*          THEN                                                         02107500
*            ZCVAL=ZCVAL!!',TARGERRL';       /* INCORRECT KEY USED */   02107600
*        IF TARGGAP^=''                      /* CHECK FOR KEY */        02107700
*          THEN                                                         02107800
*            ZCVAL=ZCVAL!!',TARGGAP';        /* INCORRECT KEY USED */   02107900
*        IF TARGLIST^=''                     /* CHECK FOR KEY */        02108000
*          THEN                                                         02108100
*            ZCVAL=ZCVAL!!',TARGLIST';       /* INCORRECT KEY USED */   02108200
*        IF TARLST64^=''                     /* CHECK FOR KEY */        02108300
*          THEN                                                         02108400
*            ZCVAL=ZCVAL!!',TARLST64';       /* INCORRECT KEY USED */   02108500
*        IF TARGNUM^=''                      /* CHECK FOR KEY */        02108600
*          THEN                                                         02108700
*            ZCVAL=ZCVAL!!',TARGNUM';        /* INCORRECT KEY USED */   02108800
*        IF POOLTOKN^=''                     /* CHECK FOR KEY */        02108900
*          THEN                                                         02109000
*            ZCVAL=ZCVAL!!',POOLTOKN';       /* INCORRECT KEY USED */   02109100
*        IF WAIT^=''                         /* CHECK FOR KEY */        02109200
*          THEN                                                         02109300
*            ZCVAL=ZCVAL!!',WAIT';           /* INCORRECT KEY USED */   02109400
*        IF CLEAR^=''                        /* CHECK FOR KEY */        02109500
*          THEN                                                         02109600
*            ZCVAL=ZCVAL!!',CLEAR';          /* INCORRECT KEY USED */   02109700
*        IF FREETO^=''                       /* CHECK FOR KEY */        02109800
*          THEN                                                         02109900
*            ZCVAL=ZCVAL!!',FREETO';         /* INCORRECT KEY USED */   02110000
*        IF FREERTN^=''                      /* CHECK FOR KEY */        02110100
*          THEN                                                         02110200
*            ZCVAL=ZCVAL!!',FREERTN';        /* INCORRECT KEY USED */   02110300
*        IF ZCVAL^=''                                                   02110400
*          THEN                                                         02110500
*            DO;                             /* INCORRECT KEYS USED */  02110600
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            02110700
*              ZMS=' 8, "REQUEST'!!          /**KMEIP* MSG*/            02110800
*                  REQUEST!!'"'!!                                       02110900
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   02111000
*                  ' FOLLOWING KEY(S) "'!!                              02111100
*                  ZCVAL!!'".';                                         02111200
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02111300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02111400
*              ZMACRET=8;                    /* MACRO ERROR */          02111500
*            END;                                                       02111600
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02111700
*  IF NUMBER(BUFSIZE)>1                      /* CHECK POSITIONALS */    02111800
*    THEN                                                               02111900
*      DO;                                                              02112000
*        ZMS=' 8, "BUFSIZE'!!                /**KPOSP* MSG*/            02112100
*            BUFSIZE!!                                                  02112200
*            '" "BUFSIZE"'!!                                            02112300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02112400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02112500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02112600
*        ZMACRET=8;                          /* MACRO ERROR */          02112700
*      END;                                                             02112800
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02112900
*  XBUFSIZE=BUFSIZE(1);                      /* SET XVARIABLE */        02113000
*  IF BUFSIZE(1)=''                          /* CHECK FOR NULL */       02113100
*   THEN                                                                02113200
*    DO;                                     /* KEY IS REQUIRED */      02113300
*        ZXBUFSIZE='';                       /* RESET IN/OUTPUT */      02113400
*        ZMS=' 8,  '!!                                                  02113500
*            ' "BUFSIZE" KEY AND ITS'!!                                 02113600
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            02113700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02113800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02113900
*        ZMACRET=8;                          /* MACRO ERROR */          02114000
*    END;                                                               02114100
*  ELSE                                                                 02114200
*    ZXBUFSIZE='INPUT';                      /* SET IN/OUTPUT */        02114300
*/*PG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02114400
*  XBUFSOURC='';                                                        02114500
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02114600
*  IF TRANSLATE(BUFSOURC(1))                                            02114700
*              = 'DSPACE'                    /* CHECK FOR KEYWORD */    02114800
*     ! BUFSOURC(1)=''                       /* CHECK FOR NULL */       02114900
*    THEN                                                               02115000
*      DO;                                                              02115100
*        XBUFSOURC='DSPACE';                 /* SET XVARIABLE */        02115200
*        IF NUMBER(BUFSOURC)>1               /* CHECK POSITIONALS */    02115300
*          THEN                                                         02115400
*            DO;                                                        02115500
*              ZMS=' 8, "BUFSOURC'!!         /**KPOSP* MSG*/            02115600
*                  BUFSOURC!!                                           02115700
*                  '" "BUFSOURC"'!!                                     02115800
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02115900
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02116000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02116100
*              ZMACRET=8;                    /* MACRO ERROR */          02116200
*            END;                                                       02116300
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02116400
*  IF BACK='BACK'                            /* CHECK ENTRY */          02116500
*    THEN                                                               02116600
*      DO;                                                              02116700
*        ZMS=' 8, THE "BACK" KEY'!!          /**KOPTP* MSG*/            02116800
*            ' MUST CONTAIN ONE'!!                                      02116900
*            ' (OR MORE) ARGUMENT(S).';                                 02117000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02117100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02117200
*        ZMACRET=8;                          /* MACRO ERROR */          02117300
*      END;                                                             02117400
*  IF NUMBER(BACK)>1                         /* CHECK POSITIONALS */    02117500
*    THEN                                                               02117600
*      DO;                                                              02117700
*        ZMS=' 8, "BACK'!!                   /**KPOSP* MSG*/            02117800
*            BACK!!                                                     02117900
*            '" "BACK"'!!                                               02118000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02118100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02118200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02118300
*        ZMACRET=8;                          /* MACRO ERROR */          02118400
*      END;                                                             02118500
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02118600
*  XBACK='';                                 /* RESET XVARIABLE */      02118700
*  IF TRANSLATE(BACK(1))                                                02118800
*              = '31'                        /* CHECK FOR KEYWORD */    02118900
*    THEN                                                               02119000
*      XBACK = '31';                         /* SET XVARIABLE */        02119100
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02119200
*  IF TRANSLATE(BACK(1))                                                02119300
*              = '64'                        /* CHECK FOR KEYWORD */    02119400
*    THEN                                                               02119500
*      XBACK = '64';                         /* SET XVARIABLE */        02119600
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02119700
*  ZXBACK='INPUT';                           /* SET IN/OUTPUT */        02119800
*  IF XBACK=''                               /* CHECK FOR KEYWORD */    02119900
*    THEN                                                               02120000
*      DO;                                   /* KEYWORD NOT ENTERED */  02120100
*        XBACK='31';                         /* SET DEFAULT */          02120200
*        IF BACK(1)^=''                                                 02120300
*          THEN                                                         02120400
*            DO;                                                        02120500
*              ZXBACK='';                    /* RESET IN/OUTPUT */      02120600
*              ZMS=' 8, "BACK'!!             /**KUKWP* MSG*/            02120700
*                  BACK!!'"'!!                                          02120800
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02120900
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02121000
*                  ' "31"'!!                 /* VALID KEYWORD */        02121100
*                  ' OR "64".';              /* VALID KEYWORD */        02121200
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02121300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02121400
*              ZMACRET=8;                    /* MACRO ERROR */          02121500
*            END;                                                       02121600
*      END;                                                             02121700
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02121800
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     02121900
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02122000
*  IF TRANSLATE(BUFSOURC(1))                                            02122100
*              = 'ECSA'                      /* CHECK FOR KEYWORD */    02122200
*    THEN                                                               02122300
*      DO;                                                              02122400
*        XBUFSOURC='ECSA';                   /* SET XVARIABLE */        02122500
*        IF NUMBER(BUFSOURC)>1               /* CHECK POSITIONALS */    02122600
*          THEN                                                         02122700
*            DO;                                                        02122800
*              ZMS=' 8, "BUFSOURC'!!         /**KPOSP* MSG*/            02122900
*                  BUFSOURC!!                                           02123000
*                  '" "BUFSOURC"'!!                                     02123100
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02123200
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02123300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02123400
*              ZMACRET=8;                    /* MACRO ERROR */          02123500
*            END;                                                       02123600
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02123700
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 02123800
*        IF BACK^=''                         /* CHECK FOR KEY */        02123900
*          THEN                                                         02124000
*            ZCVAL=ZCVAL!!',BACK';           /* INCORRECT KEY USED */   02124100
*        IF ZCVAL^=''                                                   02124200
*          THEN                                                         02124300
*            DO;                             /* INCORRECT KEYS USED */  02124400
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            02124500
*              ZMS=' 8, "BUFSOURC'!!         /**KMEIP* MSG*/            02124600
*                  BUFSOURC!!'"'!!                                      02124700
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   02124800
*                  ' FOLLOWING KEY(S) "'!!                              02124900
*                  ZCVAL!!'".';                                         02125000
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02125100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02125200
*              ZMACRET=8;                    /* MACRO ERROR */          02125300
*            END;                                                       02125400
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02125500
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     02125600
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02125700
*  IF TRANSLATE(BUFSOURC(1))                                            02125800
*              = 'HVCOMM'                    /* CHECK FOR KEYWORD */    02125900
*    THEN                                                               02126000
*      DO;                                                              02126100
*        XBUFSOURC='HVCOMM';                 /* SET XVARIABLE */        02126200
*        IF NUMBER(BUFSOURC)>1               /* CHECK POSITIONALS */    02126300
*          THEN                                                         02126400
*            DO;                                                        02126500
*              ZMS=' 8, "BUFSOURC'!!         /**KPOSP* MSG*/            02126600
*                  BUFSOURC!!                                           02126700
*                  '" "BUFSOURC"'!!                                     02126800
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02126900
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02127000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02127100
*              ZMACRET=8;                    /* MACRO ERROR */          02127200
*            END;                                                       02127300
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02127400
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 02127500
*        IF BACK^=''                         /* CHECK FOR KEY */        02127600
*          THEN                                                         02127700
*            ZCVAL=ZCVAL!!',BACK';           /* INCORRECT KEY USED */   02127800
*        IF ZCVAL^=''                                                   02127900
*          THEN                                                         02128000
*            DO;                             /* INCORRECT KEYS USED */  02128100
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            02128200
*              ZMS=' 8, "BUFSOURC'!!         /**KMEIP* MSG*/            02128300
*                  BUFSOURC!!'"'!!                                      02128400
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   02128500
*                  ' FOLLOWING KEY(S) "'!!                              02128600
*                  ZCVAL!!'".';                                         02128700
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02128800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02128900
*              ZMACRET=8;                    /* MACRO ERROR */          02129000
*            END;                                                       02129100
*/*PG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02129200
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     02129300
*/*PG.KKCTL06 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02129400
*  IF BUFSOURC='BUFSOURC'                                               02129500
*    ! BUFSOURC='()'                         /*CHECK ENTRY*/            02129600
*     THEN                                                              02129700
*       DO;                                                             02129800
*              ZMS=' 8, THE "BUFSOURC" KEY'!! /**KOPTP* MSG*/           02129900
*                  ' MUST CONTAIN ONE'!!                                02130000
*                  ' (OR MORE) ARGUMENT(S).';                           02130100
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02130200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02130300
*              ZMACRET=8;                    /* MACRO ERROR */          02130400
*       END;                                                            02130500
*  ELSE                                                                 02130600
*    DO;                                                                02130700
*      ZXBUFSOURC='INPUT';                   /* SET IN/OUTPUT */        02130800
*      IF XBUFSOURC=''                       /* CHECK FOR KEYWORD */    02130900
*        THEN                                                           02131000
*          DO;                               /* KEYWORD NOT ENTERED */  02131100
*            XBUFSOURC='DSPACE';             /* SET DEFAULT */          02131200
*            IF BUFSOURC(1)^=''              /* CHECK FOR KEYWORD */    02131300
*              THEN                                                     02131400
*                DO;                                                    02131500
*                  ZXBUFSOURC='';            /* RESET IN/OUTPUT */      02131600
*              ZMS=' 8, "BUFSOURC'!!         /**KUKWP* MSG*/            02131700
*                  BUFSOURC!!'"'!!                                      02131800
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02131900
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02132000
*                  ' "DSPACE",'!!            /* VALID KEYWORD */        02132100
*                  ' "ECSA",'!!              /* VALID KEYWORD */        02132200
*                  ' OR "HVCOMM".';          /* VALID KEYWORD */        02132300
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02132400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02132500
*              ZMACRET=8;                    /* MACRO ERROR */          02132600
*                END;                                                   02132700
*          END;                                                         02132800
*    END;                                                               02132900
*/*PG.KKCTL07 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02133000
*  IF BUFSOURC(1)=''                         /* CHECK FOR KEYWORD */    02133100
*    THEN                                                               02133200
*      DO;                                                              02133300
*        ZXBUFSOURC='';                      /* RESET IN/OUTPUT */      02133400
*        ZMS=' 8, THE'!!                     /**KRKWP* MSG*/            02133500
*            ' "BUFSOURC" KEY AND ITS'!!                                02133600
*            ' ARGUMENT ARE REQUIRED.'!!                                02133700
*            ' VALID KEYWORD CHOICE(S) ARE:'!!                          02133800
*            ' "DSPACE",'!!                  /* VALID KEYWORD */        02133900
*            ' "ECSA",'!!                    /* VALID KEYWORD */        02134000
*            ' OR "HVCOMM".';                /* VALID KEYWORD */        02134100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02134200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02134300
*        ZMACRET=8;                          /* MACRO ERROR */          02134400
*      END;                                                             02134500
*/*PG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START-----------*/ 02134600
*  IF XMF^='M'                               /* BYPASS IF MF=M */       02134700
*    THEN                                                               02134800
*      DO;                                                              02134900
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02135000
*  IF DS_INFO='DS_INFO' ! DS_INFO='()'       /*CHECK ENTRY*/            02135100
*    THEN                                                               02135200
*      DO;                                                              02135300
*        ZMS=' 8, THE "DS_INFO" KEY'!!       /**KOPTP* MSG*/            02135400
*            ' MUST CONTAIN ONE'!!                                      02135500
*            ' (OR MORE) ARGUMENT(S).';                                 02135600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02135700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02135800
*        ZMACRET=8;                          /* MACRO ERROR */          02135900
*      END;                                                             02136000
*  IF NUMBER(DS_INFO)>1                      /* CHECK POSITIONALS */    02136100
*    THEN                                                               02136200
*      DO;                                                              02136300
*        ZMS=' 8, "DS_INFO'!!                /**KPOSP* MSG*/            02136400
*            DS_INFO!!                                                  02136500
*            '" "DS_INFO"'!!                                            02136600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02136700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02136800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02136900
*        ZMACRET=8;                          /* MACRO ERROR */          02137000
*      END;                                                             02137100
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02137200
*  IF DS_INFO(1)^=''                         /* CHECK FOR NULL */       02137300
*    THEN                                                               02137400
*      DO;                                                              02137500
*        XDS_INFO=DS_INFO(1);                /* SET XVARIABLE */        02137600
*        ZXDS_INFO='OUTPUT';                 /* SET OUTPUT */           02137700
*      END;                                                             02137800
*  ELSE                                                                 02137900
*    IF ZXDS_INFO^=''                                                   02138000
*      THEN                                                             02138100
*        ZXDS_INFO='';                       /* RESET OUTPUT */         02138200
*/*PG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END-------------*/ 02138300
*      END;  /**** END OF BYPASS CHECK */                               02138400
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02138500
*  IF NUMBER(EXPBUF)>1                       /* CHECK POSITIONALS */    02138600
*    THEN                                                               02138700
*      DO;                                                              02138800
*        ZMS=' 8, "EXPBUF'!!                 /**KPOSP* MSG*/            02138900
*            EXPBUF!!                                                   02139000
*            '" "EXPBUF"'!!                                             02139100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02139200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02139300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02139400
*        ZMACRET=8;                          /* MACRO ERROR */          02139500
*      END;                                                             02139600
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02139700
*  XEXPBUF=EXPBUF(1);                        /* SET XVARIABLE */        02139800
*  IF EXPBUF(1)=''                           /* CHECK FOR NULL */       02139900
*   THEN                                                                02140000
*    DO;                                     /* KEY IS REQUIRED */      02140100
*        ZXEXPBUF='';                        /* RESET IN/OUTPUT */      02140200
*        ZMS=' 8,  '!!                                                  02140300
*            ' "EXPBUF" KEY AND ITS'!!                                  02140400
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            02140500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02140600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02140700
*        ZMACRET=8;                          /* MACRO ERROR */          02140800
*    END;                                                               02140900
*  ELSE                                                                 02141000
*    ZXEXPBUF='INPUT';                       /* SET IN/OUTPUT */        02141100
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02141200
*  IF NUMBER(INITBUF)>1                      /* CHECK POSITIONALS */    02141300
*    THEN                                                               02141400
*      DO;                                                              02141500
*        ZMS=' 8, "INITBUF'!!                /**KPOSP* MSG*/            02141600
*            INITBUF!!                                                  02141700
*            '" "INITBUF"'!!                                            02141800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02141900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02142000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02142100
*        ZMACRET=8;                          /* MACRO ERROR */          02142200
*      END;                                                             02142300
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02142400
*  XINITBUF=INITBUF(1);                      /* SET XVARIABLE */        02142500
*  IF INITBUF(1)=''                          /* CHECK FOR NULL */       02142600
*   THEN                                                                02142700
*    DO;                                     /* KEY IS REQUIRED */      02142800
*        ZXINITBUF='';                       /* RESET IN/OUTPUT */      02142900
*        ZMS=' 8,  '!!                                                  02143000
*            ' "INITBUF" KEY AND ITS'!!                                 02143100
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            02143200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02143300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02143400
*        ZMACRET=8;                          /* MACRO ERROR */          02143500
*    END;                                                               02143600
*  ELSE                                                                 02143700
*    ZXINITBUF='INPUT';                      /* SET IN/OUTPUT */        02143800
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02143900
*  IF NUMBER(MINFREE)>1                      /* CHECK POSITIONALS */    02144000
*    THEN                                                               02144100
*      DO;                                                              02144200
*        ZMS=' 8, "MINFREE'!!                /**KPOSP* MSG*/            02144300
*            MINFREE!!                                                  02144400
*            '" "MINFREE"'!!                                            02144500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02144600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02144700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02144800
*        ZMACRET=8;                          /* MACRO ERROR */          02144900
*      END;                                                             02145000
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02145100
*  XMINFREE=MINFREE(1);                      /* SET XVARIABLE */        02145200
*  IF MINFREE(1)=''                          /* CHECK FOR NULL */       02145300
*   THEN                                                                02145400
*    DO;                                     /* KEY IS REQUIRED */      02145500
*        ZXMINFREE='';                       /* RESET IN/OUTPUT */      02145600
*        ZMS=' 8,  '!!                                                  02145700
*            ' "MINFREE" KEY AND ITS'!!                                 02145800
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            02145900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02146000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02146100
*        ZMACRET=8;                          /* MACRO ERROR */          02146200
*    END;                                                               02146300
*  ELSE                                                                 02146400
*    ZXMINFREE='INPUT';                      /* SET IN/OUTPUT */        02146500
*/*PG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START-----------*/ 02146600
*  IF XMF^='M'                               /* BYPASS IF MF=M */       02146700
*    THEN                                                               02146800
*      DO;                                                              02146900
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02147000
*  IF RETPTOKN='RETPTOKN' ! RETPTOKN='()'    /*CHECK ENTRY*/            02147100
*    THEN                                                               02147200
*      DO;                                                              02147300
*        ZMS=' 8, THE "RETPTOKN" KEY'!!      /**KOPTP* MSG*/            02147400
*            ' MUST CONTAIN ONE'!!                                      02147500
*            ' (OR MORE) ARGUMENT(S).';                                 02147600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02147700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02147800
*        ZMACRET=8;                          /* MACRO ERROR */          02147900
*      END;                                                             02148000
*  IF NUMBER(RETPTOKN)>1                     /* CHECK POSITIONALS */    02148100
*    THEN                                                               02148200
*      DO;                                                              02148300
*        ZMS=' 8, "RETPTOKN'!!               /**KPOSP* MSG*/            02148400
*            RETPTOKN!!                                                 02148500
*            '" "RETPTOKN"'!!                                           02148600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02148700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02148800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02148900
*        ZMACRET=8;                          /* MACRO ERROR */          02149000
*      END;                                                             02149100
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02149200
*  IF RETPTOKN(1)^=''                        /* CHECK FOR NULL */       02149300
*    THEN                                                               02149400
*      DO;                                                              02149500
*        XRETPTOKN=RETPTOKN(1);              /* SET XVARIABLE */        02149600
*        ZXRETPTOKN='OUTPUT';                /* SET OUTPUT */           02149700
*      END;                                                             02149800
*  ELSE                                                                 02149900
*    IF ZXRETPTOKN^=''                                                  02150000
*      THEN                                                             02150100
*        ZXRETPTOKN='';                      /* RESET OUTPUT */         02150200
*/*PG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END-------------*/ 02150300
*      END;  /**** END OF BYPASS CHECK */                               02150400
*/*PG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START-----------*/ 02150500
*  IF XMF^='M'                               /* BYPASS IF MF=M */       02150600
*    THEN                                                               02150700
*      DO;                                                              02150800
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02150900
*  IF STATAREA='STATAREA' ! STATAREA='()'    /*CHECK ENTRY*/            02151000
*    THEN                                                               02151100
*      DO;                                                              02151200
*        ZMS=' 8, THE "STATAREA" KEY'!!      /**KOPTP* MSG*/            02151300
*            ' MUST CONTAIN ONE'!!                                      02151400
*            ' (OR MORE) ARGUMENT(S).';                                 02151500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02151600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02151700
*        ZMACRET=8;                          /* MACRO ERROR */          02151800
*      END;                                                             02151900
*  IF NUMBER(STATAREA)>1                     /* CHECK POSITIONALS */    02152000
*    THEN                                                               02152100
*      DO;                                                              02152200
*        ZMS=' 8, "STATAREA'!!               /**KPOSP* MSG*/            02152300
*            STATAREA!!                                                 02152400
*            '" "STATAREA"'!!                                           02152500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02152600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02152700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02152800
*        ZMACRET=8;                          /* MACRO ERROR */          02152900
*      END;                                                             02153000
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02153100
*  IF STATAREA(1)^=''                        /* CHECK FOR NULL */       02153200
*    THEN                                                               02153300
*      DO;                                                              02153400
*        XSTATAREA=STATAREA(1);              /* SET XVARIABLE */        02153500
*        ZXSTATAREA='OUTPUT';                /* SET OUTPUT */           02153600
*      END;                                                             02153700
*  ELSE                                                                 02153800
*    IF ZXSTATAREA^=''                                                  02153900
*      THEN                                                             02154000
*        ZXSTATAREA='';                      /* RESET OUTPUT */         02154100
*/*PG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END-------------*/ 02154200
*      END;  /**** END OF BYPASS CHECK */                               02154300
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02154400
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     02154500
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02154600
*  IF TRANSLATE(REQUEST(1))                                             02154700
*              = 'DELETE_POOL'               /* CHECK FOR KEYWORD */    02154800
*    THEN                                                               02154900
*      DO;                                                              02155000
*        XREQUEST='DELETE_POOL';             /* SET XVARIABLE */        02155100
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    02155200
*          THEN                                                         02155300
*            DO;                                                        02155400
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            02155500
*                  REQUEST!!                                            02155600
*                  '" "REQUEST"'!!                                      02155700
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02155800
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02155900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02156000
*              ZMACRET=8;                    /* MACRO ERROR */          02156100
*            END;                                                       02156200
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02156300
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 02156400
*        IF BUFLIST^=''                      /* CHECK FOR KEY */        02156500
*          THEN                                                         02156600
*            ZCVAL=ZCVAL!!',BUFLIST';        /* INCORRECT KEY USED */   02156700
*        IF BUFLST64^=''                     /* CHECK FOR KEY */        02156800
*          THEN                                                         02156900
*            ZCVAL=ZCVAL!!',BUFLST64';       /* INCORRECT KEY USED */   02157000
*        IF BUFNUM^=''                       /* CHECK FOR KEY */        02157100
*          THEN                                                         02157200
*            ZCVAL=ZCVAL!!',BUFNUM';         /* INCORRECT KEY USED */   02157300
*        IF BUFTYPE^=''                      /* CHECK FOR KEY */        02157400
*          THEN                                                         02157500
*            ZCVAL=ZCVAL!!',BUFTYPE';        /* INCORRECT KEY USED */   02157600
*        IF CSMUSER^=''                      /* CHECK FOR KEY */        02157700
*          THEN                                                         02157800
*            ZCVAL=ZCVAL!!',CSMUSER';        /* INCORRECT KEY USED */   02157900
*        IF GAP^=''                          /* CHECK FOR KEY */        02158000
*          THEN                                                         02158100
*            ZCVAL=ZCVAL!!',GAP';            /* INCORRECT KEY USED */   02158200
*        IF ERRBFLST^=''                     /* CHECK FOR KEY */        02158300
*          THEN                                                         02158400
*            ZCVAL=ZCVAL!!',ERRBFLST';       /* INCORRECT KEY USED */   02158500
*        IF OWNERID^=''                      /* CHECK FOR KEY */        02158600
*          THEN                                                         02158700
*            ZCVAL=ZCVAL!!',OWNERID';        /* INCORRECT KEY USED */   02158800
*        IF COMPID^=''                       /* CHECK FOR KEY */        02158900
*          THEN                                                         02159000
*            ZCVAL=ZCVAL!!',COMPID';         /* INCORRECT KEY USED */   02159100
*        IF COMPUSER^=''                     /* CHECK FOR KEY */        02159200
*          THEN                                                         02159300
*            ZCVAL=ZCVAL!!',COMPUSER';       /* INCORRECT KEY USED */   02159400
*        IF TASKID^=''                       /* CHECK FOR KEY */        02159500
*          THEN                                                         02159600
*            ZCVAL=ZCVAL!!',TASKID';         /* INCORRECT KEY USED */   02159700
*        IF THREAD^=''                       /* CHECK FOR KEY */        02159800
*          THEN                                                         02159900
*            ZCVAL=ZCVAL!!',THREAD';         /* INCORRECT KEY USED */   02160000
*        IF UTILRTN^=''                      /* CHECK FOR KEY */        02160100
*          THEN                                                         02160200
*            ZCVAL=ZCVAL!!',UTILRTN';        /* INCORRECT KEY USED */   02160300
*        IF SKIPBUF^=''                      /* CHECK FOR KEY */        02160400
*          THEN                                                         02160500
*            ZCVAL=ZCVAL!!',SKIPBUF';        /* INCORRECT KEY USED */   02160600
*        IF PAD^=''                          /* CHECK FOR KEY */        02160700
*          THEN                                                         02160800
*            ZCVAL=ZCVAL!!',PAD';            /* INCORRECT KEY USED */   02160900
*        IF PADCHAR^=''                      /* CHECK FOR KEY */        02161000
*          THEN                                                         02161100
*            ZCVAL=ZCVAL!!',PADCHAR';        /* INCORRECT KEY USED */   02161200
*        IF SRCERRL^=''                      /* CHECK FOR KEY */        02161300
*          THEN                                                         02161400
*            ZCVAL=ZCVAL!!',SRCERRL';        /* INCORRECT KEY USED */   02161500
*        IF SRCGAP^=''                       /* CHECK FOR KEY */        02161600
*          THEN                                                         02161700
*            ZCVAL=ZCVAL!!',SRCGAP';         /* INCORRECT KEY USED */   02161800
*        IF SRCLIST^=''                      /* CHECK FOR KEY */        02161900
*          THEN                                                         02162000
*            ZCVAL=ZCVAL!!',SRCLIST';        /* INCORRECT KEY USED */   02162100
*        IF SRCLST64^=''                     /* CHECK FOR KEY */        02162200
*          THEN                                                         02162300
*            ZCVAL=ZCVAL!!',SRCLST64';       /* INCORRECT KEY USED */   02162400
*        IF SRCNUM^=''                       /* CHECK FOR KEY */        02162500
*          THEN                                                         02162600
*            ZCVAL=ZCVAL!!',SRCNUM';         /* INCORRECT KEY USED */   02162700
*        IF TARGERRL^=''                     /* CHECK FOR KEY */        02162800
*          THEN                                                         02162900
*            ZCVAL=ZCVAL!!',TARGERRL';       /* INCORRECT KEY USED */   02163000
*        IF TARGGAP^=''                      /* CHECK FOR KEY */        02163100
*          THEN                                                         02163200
*            ZCVAL=ZCVAL!!',TARGGAP';        /* INCORRECT KEY USED */   02163300
*        IF TARGLIST^=''                     /* CHECK FOR KEY */        02163400
*          THEN                                                         02163500
*            ZCVAL=ZCVAL!!',TARGLIST';       /* INCORRECT KEY USED */   02163600
*        IF TARLST64^=''                     /* CHECK FOR KEY */        02163700
*          THEN                                                         02163800
*            ZCVAL=ZCVAL!!',TARLST64';       /* INCORRECT KEY USED */   02163900
*        IF TARGNUM^=''                      /* CHECK FOR KEY */        02164000
*          THEN                                                         02164100
*            ZCVAL=ZCVAL!!',TARGNUM';        /* INCORRECT KEY USED */   02164200
*        IF BUFSIZE^=''                      /* CHECK FOR KEY */        02164300
*          THEN                                                         02164400
*            ZCVAL=ZCVAL!!',BUFSIZE';        /* INCORRECT KEY USED */   02164500
*        IF BUFSOURC^=''                     /* CHECK FOR KEY */        02164600
*          THEN                                                         02164700
*            ZCVAL=ZCVAL!!',BUFSOURC';       /* INCORRECT KEY USED */   02164800
*        IF BACK^=''                         /* CHECK FOR KEY */        02164900
*          THEN                                                         02165000
*            ZCVAL=ZCVAL!!',BACK';           /* INCORRECT KEY USED */   02165100
*        IF DS_INFO^=''                      /* CHECK FOR KEY */        02165200
*          THEN                                                         02165300
*            ZCVAL=ZCVAL!!',DS_INFO';        /* INCORRECT KEY USED */   02165400
*        IF EXPBUF^=''                       /* CHECK FOR KEY */        02165500
*          THEN                                                         02165600
*            ZCVAL=ZCVAL!!',EXPBUF';         /* INCORRECT KEY USED */   02165700
*        IF INITBUF^=''                      /* CHECK FOR KEY */        02165800
*          THEN                                                         02165900
*            ZCVAL=ZCVAL!!',INITBUF';        /* INCORRECT KEY USED */   02166000
*        IF MINFREE^=''                      /* CHECK FOR KEY */        02166100
*          THEN                                                         02166200
*            ZCVAL=ZCVAL!!',MINFREE';        /* INCORRECT KEY USED */   02166300
*        IF RETPTOKN^=''                     /* CHECK FOR KEY */        02166400
*          THEN                                                         02166500
*            ZCVAL=ZCVAL!!',RETPTOKN';       /* INCORRECT KEY USED */   02166600
*        IF STATAREA^=''                     /* CHECK FOR KEY */        02166700
*          THEN                                                         02166800
*            ZCVAL=ZCVAL!!',STATAREA';       /* INCORRECT KEY USED */   02166900
*        IF WAIT^=''                         /* CHECK FOR KEY */        02167000
*          THEN                                                         02167100
*            ZCVAL=ZCVAL!!',WAIT';           /* INCORRECT KEY USED */   02167200
*        IF CLEAR^=''                        /* CHECK FOR KEY */        02167300
*          THEN                                                         02167400
*            ZCVAL=ZCVAL!!',CLEAR';          /* INCORRECT KEY USED */   02167500
*        IF FREETO^=''                       /* CHECK FOR KEY */        02167600
*          THEN                                                         02167700
*            ZCVAL=ZCVAL!!',FREETO';         /* INCORRECT KEY USED */   02167800
*        IF FREERTN^=''                      /* CHECK FOR KEY */        02167900
*          THEN                                                         02168000
*            ZCVAL=ZCVAL!!',FREERTN';        /* INCORRECT KEY USED */   02168100
*        IF ZCVAL^=''                                                   02168200
*          THEN                                                         02168300
*            DO;                             /* INCORRECT KEYS USED */  02168400
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            02168500
*              ZMS=' 8, "REQUEST'!!          /**KMEIP* MSG*/            02168600
*                  REQUEST!!'"'!!                                       02168700
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   02168800
*                  ' FOLLOWING KEY(S) "'!!                              02168900
*                  ZCVAL!!'".';                                         02169000
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02169100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02169200
*              ZMACRET=8;                    /* MACRO ERROR */          02169300
*            END;                                                       02169400
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02169500
*  IF NUMBER(POOLTOKN)>1                     /* CHECK POSITIONALS */    02169600
*    THEN                                                               02169700
*      DO;                                                              02169800
*        ZMS=' 8, "POOLTOKN'!!               /**KPOSP* MSG*/            02169900
*            POOLTOKN!!                                                 02170000
*            '" "POOLTOKN"'!!                                           02170100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02170200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02170300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02170400
*        ZMACRET=8;                          /* MACRO ERROR */          02170500
*      END;                                                             02170600
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02170700
*  XPOOLTOKN=POOLTOKN(1);                    /* SET XVARIABLE */        02170800
*  IF POOLTOKN(1)=''                         /* CHECK FOR NULL */       02170900
*   THEN                                                                02171000
*    DO;                                     /* KEY IS REQUIRED */      02171100
*        ZXPOOLTOKN='';                      /* RESET IN/OUTPUT */      02171200
*        ZMS=' 8,  '!!                                                  02171300
*            ' "POOLTOKN" KEY AND ITS'!!                                02171400
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            02171500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02171600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02171700
*        ZMACRET=8;                          /* MACRO ERROR */          02171800
*    END;                                                               02171900
*  ELSE                                                                 02172000
*    ZXPOOLTOKN='INPUT';                     /* SET IN/OUTPUT */        02172100
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02172200
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     02172300
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02172400
*  IF TRANSLATE(REQUEST(1))                                             02172500
*              = 'DUMP_INFO'                 /* CHECK FOR KEYWORD */    02172600
*    THEN                                                               02172700
*      DO;                                                              02172800
*        XREQUEST='DUMP_INFO';               /* SET XVARIABLE */        02172900
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    02173000
*          THEN                                                         02173100
*            DO;                                                        02173200
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            02173300
*                  REQUEST!!                                            02173400
*                  '" "REQUEST"'!!                                      02173500
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02173600
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02173700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02173800
*              ZMACRET=8;                    /* MACRO ERROR */          02173900
*            END;                                                       02174000
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02174100
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 02174200
*        IF BUFLIST^=''                      /* CHECK FOR KEY */        02174300
*          THEN                                                         02174400
*            ZCVAL=ZCVAL!!',BUFLIST';        /* INCORRECT KEY USED */   02174500
*        IF BUFLST64^=''                     /* CHECK FOR KEY */        02174600
*          THEN                                                         02174700
*            ZCVAL=ZCVAL!!',BUFLST64';       /* INCORRECT KEY USED */   02174800
*        IF BUFNUM^=''                       /* CHECK FOR KEY */        02174900
*          THEN                                                         02175000
*            ZCVAL=ZCVAL!!',BUFNUM';         /* INCORRECT KEY USED */   02175100
*        IF BUFTYPE^=''                      /* CHECK FOR KEY */        02175200
*          THEN                                                         02175300
*            ZCVAL=ZCVAL!!',BUFTYPE';        /* INCORRECT KEY USED */   02175400
*        IF CSMUSER^=''                      /* CHECK FOR KEY */        02175500
*          THEN                                                         02175600
*            ZCVAL=ZCVAL!!',CSMUSER';        /* INCORRECT KEY USED */   02175700
*        IF GAP^=''                          /* CHECK FOR KEY */        02175800
*          THEN                                                         02175900
*            ZCVAL=ZCVAL!!',GAP';            /* INCORRECT KEY USED */   02176000
*        IF ERRBFLST^=''                     /* CHECK FOR KEY */        02176100
*          THEN                                                         02176200
*            ZCVAL=ZCVAL!!',ERRBFLST';       /* INCORRECT KEY USED */   02176300
*        IF OWNERID^=''                      /* CHECK FOR KEY */        02176400
*          THEN                                                         02176500
*            ZCVAL=ZCVAL!!',OWNERID';        /* INCORRECT KEY USED */   02176600
*        IF COMPID^=''                       /* CHECK FOR KEY */        02176700
*          THEN                                                         02176800
*            ZCVAL=ZCVAL!!',COMPID';         /* INCORRECT KEY USED */   02176900
*        IF COMPUSER^=''                     /* CHECK FOR KEY */        02177000
*          THEN                                                         02177100
*            ZCVAL=ZCVAL!!',COMPUSER';       /* INCORRECT KEY USED */   02177200
*        IF TASKID^=''                       /* CHECK FOR KEY */        02177300
*          THEN                                                         02177400
*            ZCVAL=ZCVAL!!',TASKID';         /* INCORRECT KEY USED */   02177500
*        IF THREAD^=''                       /* CHECK FOR KEY */        02177600
*          THEN                                                         02177700
*            ZCVAL=ZCVAL!!',THREAD';         /* INCORRECT KEY USED */   02177800
*        IF UTILRTN^=''                      /* CHECK FOR KEY */        02177900
*          THEN                                                         02178000
*            ZCVAL=ZCVAL!!',UTILRTN';        /* INCORRECT KEY USED */   02178100
*        IF SKIPBUF^=''                      /* CHECK FOR KEY */        02178200
*          THEN                                                         02178300
*            ZCVAL=ZCVAL!!',SKIPBUF';        /* INCORRECT KEY USED */   02178400
*        IF PAD^=''                          /* CHECK FOR KEY */        02178500
*          THEN                                                         02178600
*            ZCVAL=ZCVAL!!',PAD';            /* INCORRECT KEY USED */   02178700
*        IF PADCHAR^=''                      /* CHECK FOR KEY */        02178800
*          THEN                                                         02178900
*            ZCVAL=ZCVAL!!',PADCHAR';        /* INCORRECT KEY USED */   02179000
*        IF SRCERRL^=''                      /* CHECK FOR KEY */        02179100
*          THEN                                                         02179200
*            ZCVAL=ZCVAL!!',SRCERRL';        /* INCORRECT KEY USED */   02179300
*        IF SRCGAP^=''                       /* CHECK FOR KEY */        02179400
*          THEN                                                         02179500
*            ZCVAL=ZCVAL!!',SRCGAP';         /* INCORRECT KEY USED */   02179600
*        IF SRCLIST^=''                      /* CHECK FOR KEY */        02179700
*          THEN                                                         02179800
*            ZCVAL=ZCVAL!!',SRCLIST';        /* INCORRECT KEY USED */   02179900
*        IF SRCLST64^=''                     /* CHECK FOR KEY */        02180000
*          THEN                                                         02180100
*            ZCVAL=ZCVAL!!',SRCLST64';       /* INCORRECT KEY USED */   02180200
*        IF SRCNUM^=''                       /* CHECK FOR KEY */        02180300
*          THEN                                                         02180400
*            ZCVAL=ZCVAL!!',SRCNUM';         /* INCORRECT KEY USED */   02180500
*        IF TARGERRL^=''                     /* CHECK FOR KEY */        02180600
*          THEN                                                         02180700
*            ZCVAL=ZCVAL!!',TARGERRL';       /* INCORRECT KEY USED */   02180800
*        IF TARGGAP^=''                      /* CHECK FOR KEY */        02180900
*          THEN                                                         02181000
*            ZCVAL=ZCVAL!!',TARGGAP';        /* INCORRECT KEY USED */   02181100
*        IF TARGLIST^=''                     /* CHECK FOR KEY */        02181200
*          THEN                                                         02181300
*            ZCVAL=ZCVAL!!',TARGLIST';       /* INCORRECT KEY USED */   02181400
*        IF TARLST64^=''                     /* CHECK FOR KEY */        02181500
*          THEN                                                         02181600
*            ZCVAL=ZCVAL!!',TARLST64';       /* INCORRECT KEY USED */   02181700
*        IF TARGNUM^=''                      /* CHECK FOR KEY */        02181800
*          THEN                                                         02181900
*            ZCVAL=ZCVAL!!',TARGNUM';        /* INCORRECT KEY USED */   02182000
*        IF BUFSIZE^=''                      /* CHECK FOR KEY */        02182100
*          THEN                                                         02182200
*            ZCVAL=ZCVAL!!',BUFSIZE';        /* INCORRECT KEY USED */   02182300
*        IF BUFSOURC^=''                     /* CHECK FOR KEY */        02182400
*          THEN                                                         02182500
*            ZCVAL=ZCVAL!!',BUFSOURC';       /* INCORRECT KEY USED */   02182600
*        IF BACK^=''                         /* CHECK FOR KEY */        02182700
*          THEN                                                         02182800
*            ZCVAL=ZCVAL!!',BACK';           /* INCORRECT KEY USED */   02182900
*        IF EXPBUF^=''                       /* CHECK FOR KEY */        02183000
*          THEN                                                         02183100
*            ZCVAL=ZCVAL!!',EXPBUF';         /* INCORRECT KEY USED */   02183200
*        IF INITBUF^=''                      /* CHECK FOR KEY */        02183300
*          THEN                                                         02183400
*            ZCVAL=ZCVAL!!',INITBUF';        /* INCORRECT KEY USED */   02183500
*        IF MINFREE^=''                      /* CHECK FOR KEY */        02183600
*          THEN                                                         02183700
*            ZCVAL=ZCVAL!!',MINFREE';        /* INCORRECT KEY USED */   02183800
*        IF RETPTOKN^=''                     /* CHECK FOR KEY */        02183900
*          THEN                                                         02184000
*            ZCVAL=ZCVAL!!',RETPTOKN';       /* INCORRECT KEY USED */   02184100
*        IF STATAREA^=''                     /* CHECK FOR KEY */        02184200
*          THEN                                                         02184300
*            ZCVAL=ZCVAL!!',STATAREA';       /* INCORRECT KEY USED */   02184400
*        IF POOLTOKN^=''                     /* CHECK FOR KEY */        02184500
*          THEN                                                         02184600
*            ZCVAL=ZCVAL!!',POOLTOKN';       /* INCORRECT KEY USED */   02184700
*        IF WAIT^=''                         /* CHECK FOR KEY */        02184800
*          THEN                                                         02184900
*            ZCVAL=ZCVAL!!',WAIT';           /* INCORRECT KEY USED */   02185000
*        IF CLEAR^=''                        /* CHECK FOR KEY */        02185100
*          THEN                                                         02185200
*            ZCVAL=ZCVAL!!',CLEAR';          /* INCORRECT KEY USED */   02185300
*        IF FREETO^=''                       /* CHECK FOR KEY */        02185400
*          THEN                                                         02185500
*            ZCVAL=ZCVAL!!',FREETO';         /* INCORRECT KEY USED */   02185600
*        IF FREERTN^=''                      /* CHECK FOR KEY */        02185700
*          THEN                                                         02185800
*            ZCVAL=ZCVAL!!',FREERTN';        /* INCORRECT KEY USED */   02185900
*        IF ZCVAL^=''                                                   02186000
*          THEN                                                         02186100
*            DO;                             /* INCORRECT KEYS USED */  02186200
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            02186300
*              ZMS=' 8, "REQUEST'!!          /**KMEIP* MSG*/            02186400
*                  REQUEST!!'"'!!                                       02186500
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   02186600
*                  ' FOLLOWING KEY(S) "'!!                              02186700
*                  ZCVAL!!'".';                                         02186800
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02186900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02187000
*              ZMACRET=8;                    /* MACRO ERROR */          02187100
*            END;                                                       02187200
*/*PG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START-----------*/ 02187300
*  IF XMF^='M'                               /* BYPASS IF MF=M */       02187400
*    THEN                                                               02187500
*      DO;                                                              02187600
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02187700
*  IF DS_INFO='DS_INFO' ! DS_INFO='()'       /*CHECK ENTRY*/            02187800
*    THEN                                                               02187900
*      DO;                                                              02188000
*        ZMS=' 8, THE "DS_INFO" KEY'!!       /**KOPTP* MSG*/            02188100
*            ' MUST CONTAIN ONE'!!                                      02188200
*            ' (OR MORE) ARGUMENT(S).';                                 02188300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02188400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02188500
*        ZMACRET=8;                          /* MACRO ERROR */          02188600
*      END;                                                             02188700
*  IF NUMBER(DS_INFO)>1                      /* CHECK POSITIONALS */    02188800
*    THEN                                                               02188900
*      DO;                                                              02189000
*        ZMS=' 8, "DS_INFO'!!                /**KPOSP* MSG*/            02189100
*            DS_INFO!!                                                  02189200
*            '" "DS_INFO"'!!                                            02189300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02189400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02189500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02189600
*        ZMACRET=8;                          /* MACRO ERROR */          02189700
*      END;                                                             02189800
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02189900
*  IF DS_INFO(1)^=''                         /* CHECK FOR NULL */       02190000
*    THEN                                                               02190100
*      DO;                                                              02190200
*        XDS_INFO=DS_INFO(1);                /* SET XVARIABLE */        02190300
*        ZXDS_INFO='OUTPUT';                 /* SET OUTPUT */           02190400
*      END;                                                             02190500
*  ELSE                                                                 02190600
*    IF ZXDS_INFO^=''                                                   02190700
*      THEN                                                             02190800
*        ZXDS_INFO='';                       /* RESET OUTPUT */         02190900
*/*PG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END-------------*/ 02191000
*      END;  /**** END OF BYPASS CHECK */                               02191100
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02191200
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     02191300
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02191400
*  IF TRANSLATE(REQUEST(1))                                             02191500
*              = 'FIX_BUFFER'                /* CHECK FOR KEYWORD */    02191600
*    THEN                                                               02191700
*      DO;                                                              02191800
*        XREQUEST='FIX_BUFFER';              /* SET XVARIABLE */        02191900
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    02192000
*          THEN                                                         02192100
*            DO;                                                        02192200
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            02192300
*                  REQUEST!!                                            02192400
*                  '" "REQUEST"'!!                                      02192500
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02192600
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02192700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02192800
*              ZMACRET=8;                    /* MACRO ERROR */          02192900
*            END;                                                       02193000
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02193100
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 02193200
*        IF BUFTYPE^=''                      /* CHECK FOR KEY */        02193300
*          THEN                                                         02193400
*            ZCVAL=ZCVAL!!',BUFTYPE';        /* INCORRECT KEY USED */   02193500
*        IF CSMUSER^=''                      /* CHECK FOR KEY */        02193600
*          THEN                                                         02193700
*            ZCVAL=ZCVAL!!',CSMUSER';        /* INCORRECT KEY USED */   02193800
*        IF OWNERID^=''                      /* CHECK FOR KEY */        02193900
*          THEN                                                         02194000
*            ZCVAL=ZCVAL!!',OWNERID';        /* INCORRECT KEY USED */   02194100
*        IF TASKID^=''                       /* CHECK FOR KEY */        02194200
*          THEN                                                         02194300
*            ZCVAL=ZCVAL!!',TASKID';         /* INCORRECT KEY USED */   02194400
*        IF SKIPBUF^=''                      /* CHECK FOR KEY */        02194500
*          THEN                                                         02194600
*            ZCVAL=ZCVAL!!',SKIPBUF';        /* INCORRECT KEY USED */   02194700
*        IF PAD^=''                          /* CHECK FOR KEY */        02194800
*          THEN                                                         02194900
*            ZCVAL=ZCVAL!!',PAD';            /* INCORRECT KEY USED */   02195000
*        IF PADCHAR^=''                      /* CHECK FOR KEY */        02195100
*          THEN                                                         02195200
*            ZCVAL=ZCVAL!!',PADCHAR';        /* INCORRECT KEY USED */   02195300
*        IF SRCERRL^=''                      /* CHECK FOR KEY */        02195400
*          THEN                                                         02195500
*            ZCVAL=ZCVAL!!',SRCERRL';        /* INCORRECT KEY USED */   02195600
*        IF SRCGAP^=''                       /* CHECK FOR KEY */        02195700
*          THEN                                                         02195800
*            ZCVAL=ZCVAL!!',SRCGAP';         /* INCORRECT KEY USED */   02195900
*        IF SRCLIST^=''                      /* CHECK FOR KEY */        02196000
*          THEN                                                         02196100
*            ZCVAL=ZCVAL!!',SRCLIST';        /* INCORRECT KEY USED */   02196200
*        IF SRCLST64^=''                     /* CHECK FOR KEY */        02196300
*          THEN                                                         02196400
*            ZCVAL=ZCVAL!!',SRCLST64';       /* INCORRECT KEY USED */   02196500
*        IF SRCNUM^=''                       /* CHECK FOR KEY */        02196600
*          THEN                                                         02196700
*            ZCVAL=ZCVAL!!',SRCNUM';         /* INCORRECT KEY USED */   02196800
*        IF TARGERRL^=''                     /* CHECK FOR KEY */        02196900
*          THEN                                                         02197000
*            ZCVAL=ZCVAL!!',TARGERRL';       /* INCORRECT KEY USED */   02197100
*        IF TARGGAP^=''                      /* CHECK FOR KEY */        02197200
*          THEN                                                         02197300
*            ZCVAL=ZCVAL!!',TARGGAP';        /* INCORRECT KEY USED */   02197400
*        IF TARGLIST^=''                     /* CHECK FOR KEY */        02197500
*          THEN                                                         02197600
*            ZCVAL=ZCVAL!!',TARGLIST';       /* INCORRECT KEY USED */   02197700
*        IF TARLST64^=''                     /* CHECK FOR KEY */        02197800
*          THEN                                                         02197900
*            ZCVAL=ZCVAL!!',TARLST64';       /* INCORRECT KEY USED */   02198000
*        IF TARGNUM^=''                      /* CHECK FOR KEY */        02198100
*          THEN                                                         02198200
*            ZCVAL=ZCVAL!!',TARGNUM';        /* INCORRECT KEY USED */   02198300
*        IF BUFSIZE^=''                      /* CHECK FOR KEY */        02198400
*          THEN                                                         02198500
*            ZCVAL=ZCVAL!!',BUFSIZE';        /* INCORRECT KEY USED */   02198600
*        IF BUFSOURC^=''                     /* CHECK FOR KEY */        02198700
*          THEN                                                         02198800
*            ZCVAL=ZCVAL!!',BUFSOURC';       /* INCORRECT KEY USED */   02198900
*        IF BACK^=''                         /* CHECK FOR KEY */        02199000
*          THEN                                                         02199100
*            ZCVAL=ZCVAL!!',BACK';           /* INCORRECT KEY USED */   02199200
*        IF DS_INFO^=''                      /* CHECK FOR KEY */        02199300
*          THEN                                                         02199400
*            ZCVAL=ZCVAL!!',DS_INFO';        /* INCORRECT KEY USED */   02199500
*        IF EXPBUF^=''                       /* CHECK FOR KEY */        02199600
*          THEN                                                         02199700
*            ZCVAL=ZCVAL!!',EXPBUF';         /* INCORRECT KEY USED */   02199800
*        IF INITBUF^=''                      /* CHECK FOR KEY */        02199900
*          THEN                                                         02200000
*            ZCVAL=ZCVAL!!',INITBUF';        /* INCORRECT KEY USED */   02200100
*        IF MINFREE^=''                      /* CHECK FOR KEY */        02200200
*          THEN                                                         02200300
*            ZCVAL=ZCVAL!!',MINFREE';        /* INCORRECT KEY USED */   02200400
*        IF RETPTOKN^=''                     /* CHECK FOR KEY */        02200500
*          THEN                                                         02200600
*            ZCVAL=ZCVAL!!',RETPTOKN';       /* INCORRECT KEY USED */   02200700
*        IF STATAREA^=''                     /* CHECK FOR KEY */        02200800
*          THEN                                                         02200900
*            ZCVAL=ZCVAL!!',STATAREA';       /* INCORRECT KEY USED */   02201000
*        IF POOLTOKN^=''                     /* CHECK FOR KEY */        02201100
*          THEN                                                         02201200
*            ZCVAL=ZCVAL!!',POOLTOKN';       /* INCORRECT KEY USED */   02201300
*        IF CLEAR^=''                        /* CHECK FOR KEY */        02201400
*          THEN                                                         02201500
*            ZCVAL=ZCVAL!!',CLEAR';          /* INCORRECT KEY USED */   02201600
*        IF FREETO^=''                       /* CHECK FOR KEY */        02201700
*          THEN                                                         02201800
*            ZCVAL=ZCVAL!!',FREETO';         /* INCORRECT KEY USED */   02201900
*        IF FREERTN^=''                      /* CHECK FOR KEY */        02202000
*          THEN                                                         02202100
*            ZCVAL=ZCVAL!!',FREERTN';        /* INCORRECT KEY USED */   02202200
*        IF ZCVAL^=''                                                   02202300
*          THEN                                                         02202400
*            DO;                             /* INCORRECT KEYS USED */  02202500
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            02202600
*              ZMS=' 8, "REQUEST'!!          /**KMEIP* MSG*/            02202700
*                  REQUEST!!'"'!!                                       02202800
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   02202900
*                  ' FOLLOWING KEY(S) "'!!                              02203000
*                  ZCVAL!!'".';                                         02203100
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02203200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02203300
*              ZMACRET=8;                    /* MACRO ERROR */          02203400
*            END;                                                       02203500
*/*PG.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02203600
*  XDUMMY5='';                               /* RESET XVARIABLE */      02203700
*  IF BUFLIST^=''                            /* CHECK ME KEY */         02203800
*    THEN                                                               02203900
*      DO;                                   /* VALID ME KEY */         02204000
*        IF NUMBER(BUFLIST)>1                /* CHECK SUBLISTS */       02204100
*          THEN                                                         02204200
*            DO;                                                        02204300
*              ZMS=' 8, "BUFLIST'!!          /**KPOSP* MSG*/            02204400
*                  BUFLIST!!                                            02204500
*                  '" "BUFLIST"'!!                                      02204600
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02204700
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02204800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02204900
*              ZMACRET=8;                    /* MACRO ERROR */          02205000
*            END;                                                       02205100
*        XDUMMY5='BUFLIST';                  /* SET XVARIABLE */        02205200
*        XBUFLIST=BUFLIST(1);                /* SET XVARIABLE */        02205300
*        ZXDUMMY5='INPUT';                   /* SET IN/OUTPUT */        02205400
*        ZXBUFLIST='INPUT';                  /* SET IN/OUTPUT */        02205500
*        IF BUFLIST(1)=''                    /* CHECK ME KEY */         02205600
*          THEN                                                         02205700
*            DO;                                                        02205800
*              ZXDUMMY5='';                  /* RESET IN/OUTPUT */      02205900
*              ZXBUFLIST='';                 /* RESET IN/OUTPUT */      02206000
*              ZMS=' 8,  '!!                                            02206100
*                  ' "BUFLIST" KEY AND ITS'!!                           02206200
*                  ' ARGUMENT ARE REQUIRED.'; /**KRQDP* MSG*/           02206300
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02206400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02206500
*              ZMACRET=8;                    /* MACRO ERROR */          02206600
*           END;                                                        02206700
*      END;                                                             02206800
*/*PG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02206900
*  IF BUFLST64^=''                           /* CHECK ME KEY */         02207000
*    THEN                                                               02207100
*      DO;                                                              02207200
*        IF NUMBER(BUFLST64)>1               /* CHECK SUBLISTS */       02207300
*          THEN                                                         02207400
*            DO;                                                        02207500
*              ZMS=' 8, "BUFLST64'!!         /**KPOSP* MSG*/            02207600
*                  BUFLST64!!                                           02207700
*                  '" "BUFLST64"'!!                                     02207800
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02207900
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02208000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02208100
*              ZMACRET=8;                    /* MACRO ERROR */          02208200
*            END;                                                       02208300
*        IF XDUMMY5=''                       /* CHECK XVARIABLE */      02208400
*          THEN                                                         02208500
*            DO;                             /* VALID ME KEY */         02208600
*              XDUMMY5='BUFLST64';           /* SET XVAR1 */            02208700
*              XBUFLST64=BUFLST64(1);        /* SET XVAR2 */            02208800
*              ZXDUMMY5='INPUT';             /* SET IN/OUTPUT */        02208900
*              ZXBUFLST64='INPUT';           /* SET IN/OUTPUT */        02209000
*              IF BUFLST64(1)=''             /* CHECK ME KEY */         02209100
*                THEN                                                   02209200
*                  DO;                                                  02209300
*                    ZXDUMMY5='';            /* RESET IN/OUTPUT */      02209400
*                    ZXBUFLST64='';          /* RESET IN/OUTPUT */      02209500
*                    ZMS=' 8,  '!!                                      02209600
*                        ' "BUFLST64" KEY AND ITS'!!                    02209700
*                        ' ARGUMENT ARE REQUIRED.'; /**KRQDP* MSG*/     02209800
*                    ANS MSG('?IVTCSM ---> '!!ZMS);                     02209900
*                    ANS(COMMENT(ZMS)) COL(MACLMAR);                    02210000
*                    ZMACRET=8;              /* MACRO ERROR */          02210100
*                  END;                                                 02210200
*            END;                                                       02210300
*          ELSE                                                         02210400
*            DO;                                                        02210500
*              ZMS=' 8, "BUFLST64'!!         /**KMEKP* MSG*/            02210600
*                  BUFLST64!!'"'!!                                      02210700
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'!!                02210800
*                  XDUMMY5!!                                            02210900
*                  '" KEY.';                                            02211000
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02211100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02211200
*              ZMACRET=8;                    /* MACRO ERROR */          02211300
*            END;                                                       02211400
*      END;                                                             02211500
*/*PG.KMEKY08 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 02211600
*  IF XDUMMY5=''                             /* CHECK XVARIABLE */      02211700
*    THEN                                                               02211800
*      DO;                                                              02211900
*        XDUMMY5='BUFLIST';                  /* SET DEFAULT */          02212000
*        XBUFLIST='0';                       /* SET DEFAULT */          02212100
*        ZXDUMMY5='';                        /* RESET IN/OUTPUT */      02212200
*        ZXBUFLIST='';                       /* RESET IN/OUTPUT */      02212300
*        ZMS=' 8, ONE OF THE FOLLOWING'!!    /**KMERP* MSG*/            02212400
*            ' MUTUALLY EXCLUSIVE KEY(S) IS'!!                          02212500
*            ' REQUIRED:'!!                                             02212600
*            ' "BUFLIST"'!!                  /* VALID ME KEY */         02212700
*            ' OR "BUFLST64".';              /* VALID ME KEY */         02212800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02212900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02213000
*        ZMACRET=8;                          /* MACRO ERROR */          02213100
*      END;                                                             02213200
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02213300
*  IF NUMBER(BUFNUM)>1                       /* CHECK POSITIONALS */    02213400
*    THEN                                                               02213500
*      DO;                                                              02213600
*        ZMS=' 8, "BUFNUM'!!                 /**KPOSP* MSG*/            02213700
*            BUFNUM!!                                                   02213800
*            '" "BUFNUM"'!!                                             02213900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02214000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02214100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02214200
*        ZMACRET=8;                          /* MACRO ERROR */          02214300
*      END;                                                             02214400
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02214500
*  XBUFNUM=BUFNUM(1);                        /* SET XVARIABLE */        02214600
*  IF BUFNUM(1)=''                           /* CHECK FOR NULL */       02214700
*   THEN                                                                02214800
*    DO;                                     /* KEY IS REQUIRED */      02214900
*        ZXBUFNUM='';                        /* RESET IN/OUTPUT */      02215000
*        ZMS=' 8,  '!!                                                  02215100
*            ' "BUFNUM" KEY AND ITS'!!                                  02215200
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            02215300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02215400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02215500
*        ZMACRET=8;                          /* MACRO ERROR */          02215600
*    END;                                                               02215700
*  ELSE                                                                 02215800
*    ZXBUFNUM='INPUT';                       /* SET IN/OUTPUT */        02215900
*/*PG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START-----------*/ 02216000
*  IF XMF^='M'                               /* BYPASS IF MF=M */       02216100
*    THEN                                                               02216200
*      DO;                                                              02216300
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02216400
*  IF ERRBFLST='ERRBFLST' ! ERRBFLST='()'    /*CHECK ENTRY*/            02216500
*    THEN                                                               02216600
*      DO;                                                              02216700
*        ZMS=' 8, THE "ERRBFLST" KEY'!!      /**KOPTP* MSG*/            02216800
*            ' MUST CONTAIN ONE'!!                                      02216900
*            ' (OR MORE) ARGUMENT(S).';                                 02217000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02217100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02217200
*        ZMACRET=8;                          /* MACRO ERROR */          02217300
*      END;                                                             02217400
*  IF NUMBER(ERRBFLST)>1                     /* CHECK POSITIONALS */    02217500
*    THEN                                                               02217600
*      DO;                                                              02217700
*        ZMS=' 8, "ERRBFLST'!!               /**KPOSP* MSG*/            02217800
*            ERRBFLST!!                                                 02217900
*            '" "ERRBFLST"'!!                                           02218000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02218100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02218200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02218300
*        ZMACRET=8;                          /* MACRO ERROR */          02218400
*      END;                                                             02218500
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02218600
*  IF ERRBFLST(1)^=''                        /* CHECK FOR NULL */       02218700
*    THEN                                                               02218800
*      DO;                                                              02218900
*        XERRBFLST=ERRBFLST(1);              /* SET XVARIABLE */        02219000
*        ZXERRBFLST='OUTPUT';                /* SET OUTPUT */           02219100
*      END;                                                             02219200
*  ELSE                                                                 02219300
*    IF ZXERRBFLST^=''                                                  02219400
*      THEN                                                             02219500
*        ZXERRBFLST='';                      /* RESET OUTPUT */         02219600
*/*PG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END-------------*/ 02219700
*      END;  /**** END OF BYPASS CHECK */                               02219800
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02219900
*  IF GAP='GAP' ! GAP='()'                   /*CHECK ENTRY*/            02220000
*    THEN                                                               02220100
*      DO;                                                              02220200
*        ZMS=' 8, THE "GAP" KEY'!!           /**KOPTP* MSG*/            02220300
*            ' MUST CONTAIN ONE'!!                                      02220400
*            ' (OR MORE) ARGUMENT(S).';                                 02220500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02220600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02220700
*        ZMACRET=8;                          /* MACRO ERROR */          02220800
*      END;                                                             02220900
*  IF NUMBER(GAP)>1                          /* CHECK POSITIONALS */    02221000
*    THEN                                                               02221100
*      DO;                                                              02221200
*        ZMS=' 8, "GAP'!!                    /**KPOSP* MSG*/            02221300
*            GAP!!                                                      02221400
*            '" "GAP"'!!                                                02221500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02221600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02221700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02221800
*        ZMACRET=8;                          /* MACRO ERROR */          02221900
*      END;                                                             02222000
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02222100
*  ZXGAP='INPUT';                            /* SET IN/OUTPUT */        02222200
*  XGAP='0';                                 /* SET DEFAULT */          02222300
*  IF GAP(1)^=''                             /* CHECK FOR NULL */       02222400
*    THEN                                                               02222500
*      XGAP=GAP(1);                          /* SET XVARIABLE */        02222600
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02222700
*  IF COMPID='COMPID' ! COMPID='()'          /*CHECK ENTRY*/            02222800
*    THEN                                                               02222900
*      DO;                                                              02223000
*        ZMS=' 8, THE "COMPID" KEY'!!        /**KOPTP* MSG*/            02223100
*            ' MUST CONTAIN ONE'!!                                      02223200
*            ' (OR MORE) ARGUMENT(S).';                                 02223300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02223400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02223500
*        ZMACRET=8;                          /* MACRO ERROR */          02223600
*      END;                                                             02223700
*  IF NUMBER(COMPID)>1                       /* CHECK POSITIONALS */    02223800
*    THEN                                                               02223900
*      DO;                                                              02224000
*        ZMS=' 8, "COMPID'!!                 /**KPOSP* MSG*/            02224100
*            COMPID!!                                                   02224200
*            '" "COMPID"'!!                                             02224300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02224400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02224500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02224600
*        ZMACRET=8;                          /* MACRO ERROR */          02224700
*      END;                                                             02224800
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02224900
*  ZXCOMPID='INPUT';                         /* SET IN/OUTPUT */        02225000
*  XCOMPID='0';                              /* SET DEFAULT */          02225100
*  IF COMPID(1)^=''                          /* CHECK FOR NULL */       02225200
*    THEN                                                               02225300
*      XCOMPID=COMPID(1);                    /* SET XVARIABLE */        02225400
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02225500
*  IF COMPUSER='COMPUSER' ! COMPUSER='()'    /*CHECK ENTRY*/            02225600
*    THEN                                                               02225700
*      DO;                                                              02225800
*        ZMS=' 8, THE "COMPUSER" KEY'!!      /**KOPTP* MSG*/            02225900
*            ' MUST CONTAIN ONE'!!                                      02226000
*            ' (OR MORE) ARGUMENT(S).';                                 02226100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02226200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02226300
*        ZMACRET=8;                          /* MACRO ERROR */          02226400
*      END;                                                             02226500
*  IF NUMBER(COMPUSER)>1                     /* CHECK POSITIONALS */    02226600
*    THEN                                                               02226700
*      DO;                                                              02226800
*        ZMS=' 8, "COMPUSER'!!               /**KPOSP* MSG*/            02226900
*            COMPUSER!!                                                 02227000
*            '" "COMPUSER"'!!                                           02227100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02227200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02227300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02227400
*        ZMACRET=8;                          /* MACRO ERROR */          02227500
*      END;                                                             02227600
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02227700
*  ZXCOMPUSER='INPUT';                       /* SET IN/OUTPUT */        02227800
*  XCOMPUSER='0';                            /* SET DEFAULT */          02227900
*  IF COMPUSER(1)^=''                        /* CHECK FOR NULL */       02228000
*    THEN                                                               02228100
*      XCOMPUSER=COMPUSER(1);                /* SET XVARIABLE */        02228200
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02228300
*  IF THREAD='THREAD' ! THREAD='()'          /*CHECK ENTRY*/            02228400
*    THEN                                                               02228500
*      DO;                                                              02228600
*        ZMS=' 8, THE "THREAD" KEY'!!        /**KOPTP* MSG*/            02228700
*            ' MUST CONTAIN ONE'!!                                      02228800
*            ' (OR MORE) ARGUMENT(S).';                                 02228900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02229000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02229100
*        ZMACRET=8;                          /* MACRO ERROR */          02229200
*      END;                                                             02229300
*  IF NUMBER(THREAD)>1                       /* CHECK POSITIONALS */    02229400
*    THEN                                                               02229500
*      DO;                                                              02229600
*        ZMS=' 8, "THREAD'!!                 /**KPOSP* MSG*/            02229700
*            THREAD!!                                                   02229800
*            '" "THREAD"'!!                                             02229900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02230000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02230100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02230200
*        ZMACRET=8;                          /* MACRO ERROR */          02230300
*      END;                                                             02230400
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02230500
*  ZXTHREAD='INPUT';                         /* SET IN/OUTPUT */        02230600
*  XTHREAD='0';                              /* SET DEFAULT */          02230700
*  IF THREAD(1)^=''                          /* CHECK FOR NULL */       02230800
*    THEN                                                               02230900
*      XTHREAD=THREAD(1);                    /* SET XVARIABLE */        02231000
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02231100
*  IF UTILRTN='UTILRTN' ! UTILRTN='()'       /*CHECK ENTRY*/            02231200
*    THEN                                                               02231300
*      DO;                                                              02231400
*        ZMS=' 8, THE "UTILRTN" KEY'!!       /**KOPTP* MSG*/            02231500
*            ' MUST CONTAIN ONE'!!                                      02231600
*            ' (OR MORE) ARGUMENT(S).';                                 02231700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02231800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02231900
*        ZMACRET=8;                          /* MACRO ERROR */          02232000
*      END;                                                             02232100
*  IF NUMBER(UTILRTN)>1                      /* CHECK POSITIONALS */    02232200
*    THEN                                                               02232300
*      DO;                                                              02232400
*        ZMS=' 8, "UTILRTN'!!                /**KPOSP* MSG*/            02232500
*            UTILRTN!!                                                  02232600
*            '" "UTILRTN"'!!                                            02232700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02232800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02232900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02233000
*        ZMACRET=8;                          /* MACRO ERROR */          02233100
*      END;                                                             02233200
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02233300
*  ZXUTILRTN='INPUT';                        /* SET IN/OUTPUT */        02233400
*  XUTILRTN='0';                             /* SET DEFAULT */          02233500
*  IF UTILRTN(1)^=''                         /* CHECK FOR NULL */       02233600
*    THEN                                                               02233700
*      XUTILRTN=UTILRTN(1);                  /* SET XVARIABLE */        02233800
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02233900
*  IF WAIT='WAIT'                            /* CHECK ENTRY */          02234000
*    THEN                                                               02234100
*      DO;                                                              02234200
*        ZMS=' 8, THE "WAIT" KEY'!!          /**KOPTP* MSG*/            02234300
*            ' MUST CONTAIN ONE'!!                                      02234400
*            ' (OR MORE) ARGUMENT(S).';                                 02234500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02234600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02234700
*        ZMACRET=8;                          /* MACRO ERROR */          02234800
*      END;                                                             02234900
*  IF NUMBER(WAIT)>1                         /* CHECK POSITIONALS */    02235000
*    THEN                                                               02235100
*      DO;                                                              02235200
*        ZMS=' 8, "WAIT'!!                   /**KPOSP* MSG*/            02235300
*            WAIT!!                                                     02235400
*            '" "WAIT"'!!                                               02235500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02235600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02235700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02235800
*        ZMACRET=8;                          /* MACRO ERROR */          02235900
*      END;                                                             02236000
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02236100
*  XWAIT='';                                 /* RESET XVARIABLE */      02236200
*  IF TRANSLATE(WAIT(1))                                                02236300
*              = 'NO'                        /* CHECK FOR KEYWORD */    02236400
*    THEN                                                               02236500
*      XWAIT = 'NO';                         /* SET XVARIABLE */        02236600
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02236700
*  IF TRANSLATE(WAIT(1))                                                02236800
*              = 'YES'                       /* CHECK FOR KEYWORD */    02236900
*    THEN                                                               02237000
*      XWAIT = 'YES';                        /* SET XVARIABLE */        02237100
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02237200
*  ZXWAIT='INPUT';                           /* SET IN/OUTPUT */        02237300
*  IF XWAIT=''                               /* CHECK FOR KEYWORD */    02237400
*    THEN                                                               02237500
*      DO;                                   /* KEYWORD NOT ENTERED */  02237600
*        XWAIT='NO';                         /* SET DEFAULT */          02237700
*        IF WAIT(1)^=''                                                 02237800
*          THEN                                                         02237900
*            DO;                                                        02238000
*              ZXWAIT='';                    /* RESET IN/OUTPUT */      02238100
*              ZMS=' 8, "WAIT'!!             /**KUKWP* MSG*/            02238200
*                  WAIT!!'"'!!                                          02238300
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02238400
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02238500
*                  ' "NO"'!!                 /* VALID KEYWORD */        02238600
*                  ' OR "YES".';             /* VALID KEYWORD */        02238700
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02238800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02238900
*              ZMACRET=8;                    /* MACRO ERROR */          02239000
*            END;                                                       02239100
*      END;                                                             02239200
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02239300
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     02239400
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02239500
*  IF TRANSLATE(REQUEST(1))                                             02239600
*              = 'FREE_BUFFER'               /* CHECK FOR KEYWORD */    02239700
*    THEN                                                               02239800
*      DO;                                                              02239900
*        XREQUEST='FREE_BUFFER';             /* SET XVARIABLE */        02240000
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    02240100
*          THEN                                                         02240200
*            DO;                                                        02240300
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            02240400
*                  REQUEST!!                                            02240500
*                  '" "REQUEST"'!!                                      02240600
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02240700
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02240800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02240900
*              ZMACRET=8;                    /* MACRO ERROR */          02241000
*            END;                                                       02241100
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02241200
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 02241300
*        IF BUFTYPE^=''                      /* CHECK FOR KEY */        02241400
*          THEN                                                         02241500
*            ZCVAL=ZCVAL!!',BUFTYPE';        /* INCORRECT KEY USED */   02241600
*        IF CSMUSER^=''                      /* CHECK FOR KEY */        02241700
*          THEN                                                         02241800
*            ZCVAL=ZCVAL!!',CSMUSER';        /* INCORRECT KEY USED */   02241900
*        IF OWNERID^=''                      /* CHECK FOR KEY */        02242000
*          THEN                                                         02242100
*            ZCVAL=ZCVAL!!',OWNERID';        /* INCORRECT KEY USED */   02242200
*        IF TASKID^=''                       /* CHECK FOR KEY */        02242300
*          THEN                                                         02242400
*            ZCVAL=ZCVAL!!',TASKID';         /* INCORRECT KEY USED */   02242500
*        IF PAD^=''                          /* CHECK FOR KEY */        02242600
*          THEN                                                         02242700
*            ZCVAL=ZCVAL!!',PAD';            /* INCORRECT KEY USED */   02242800
*        IF PADCHAR^=''                      /* CHECK FOR KEY */        02242900
*          THEN                                                         02243000
*            ZCVAL=ZCVAL!!',PADCHAR';        /* INCORRECT KEY USED */   02243100
*        IF SRCERRL^=''                      /* CHECK FOR KEY */        02243200
*          THEN                                                         02243300
*            ZCVAL=ZCVAL!!',SRCERRL';        /* INCORRECT KEY USED */   02243400
*        IF SRCGAP^=''                       /* CHECK FOR KEY */        02243500
*          THEN                                                         02243600
*            ZCVAL=ZCVAL!!',SRCGAP';         /* INCORRECT KEY USED */   02243700
*        IF SRCLIST^=''                      /* CHECK FOR KEY */        02243800
*          THEN                                                         02243900
*            ZCVAL=ZCVAL!!',SRCLIST';        /* INCORRECT KEY USED */   02244000
*        IF SRCLST64^=''                     /* CHECK FOR KEY */        02244100
*          THEN                                                         02244200
*            ZCVAL=ZCVAL!!',SRCLST64';       /* INCORRECT KEY USED */   02244300
*        IF SRCNUM^=''                       /* CHECK FOR KEY */        02244400
*          THEN                                                         02244500
*            ZCVAL=ZCVAL!!',SRCNUM';         /* INCORRECT KEY USED */   02244600
*        IF TARGERRL^=''                     /* CHECK FOR KEY */        02244700
*          THEN                                                         02244800
*            ZCVAL=ZCVAL!!',TARGERRL';       /* INCORRECT KEY USED */   02244900
*        IF TARGGAP^=''                      /* CHECK FOR KEY */        02245000
*          THEN                                                         02245100
*            ZCVAL=ZCVAL!!',TARGGAP';        /* INCORRECT KEY USED */   02245200
*        IF TARGLIST^=''                     /* CHECK FOR KEY */        02245300
*          THEN                                                         02245400
*            ZCVAL=ZCVAL!!',TARGLIST';       /* INCORRECT KEY USED */   02245500
*        IF TARLST64^=''                     /* CHECK FOR KEY */        02245600
*          THEN                                                         02245700
*            ZCVAL=ZCVAL!!',TARLST64';       /* INCORRECT KEY USED */   02245800
*        IF TARGNUM^=''                      /* CHECK FOR KEY */        02245900
*          THEN                                                         02246000
*            ZCVAL=ZCVAL!!',TARGNUM';        /* INCORRECT KEY USED */   02246100
*        IF BUFSIZE^=''                      /* CHECK FOR KEY */        02246200
*          THEN                                                         02246300
*            ZCVAL=ZCVAL!!',BUFSIZE';        /* INCORRECT KEY USED */   02246400
*        IF BUFSOURC^=''                     /* CHECK FOR KEY */        02246500
*          THEN                                                         02246600
*            ZCVAL=ZCVAL!!',BUFSOURC';       /* INCORRECT KEY USED */   02246700
*        IF BACK^=''                         /* CHECK FOR KEY */        02246800
*          THEN                                                         02246900
*            ZCVAL=ZCVAL!!',BACK';           /* INCORRECT KEY USED */   02247000
*        IF DS_INFO^=''                      /* CHECK FOR KEY */        02247100
*          THEN                                                         02247200
*            ZCVAL=ZCVAL!!',DS_INFO';        /* INCORRECT KEY USED */   02247300
*        IF EXPBUF^=''                       /* CHECK FOR KEY */        02247400
*          THEN                                                         02247500
*            ZCVAL=ZCVAL!!',EXPBUF';         /* INCORRECT KEY USED */   02247600
*        IF INITBUF^=''                      /* CHECK FOR KEY */        02247700
*          THEN                                                         02247800
*            ZCVAL=ZCVAL!!',INITBUF';        /* INCORRECT KEY USED */   02247900
*        IF MINFREE^=''                      /* CHECK FOR KEY */        02248000
*          THEN                                                         02248100
*            ZCVAL=ZCVAL!!',MINFREE';        /* INCORRECT KEY USED */   02248200
*        IF RETPTOKN^=''                     /* CHECK FOR KEY */        02248300
*          THEN                                                         02248400
*            ZCVAL=ZCVAL!!',RETPTOKN';       /* INCORRECT KEY USED */   02248500
*        IF STATAREA^=''                     /* CHECK FOR KEY */        02248600
*          THEN                                                         02248700
*            ZCVAL=ZCVAL!!',STATAREA';       /* INCORRECT KEY USED */   02248800
*        IF POOLTOKN^=''                     /* CHECK FOR KEY */        02248900
*          THEN                                                         02249000
*            ZCVAL=ZCVAL!!',POOLTOKN';       /* INCORRECT KEY USED */   02249100
*        IF WAIT^=''                         /* CHECK FOR KEY */        02249200
*          THEN                                                         02249300
*            ZCVAL=ZCVAL!!',WAIT';           /* INCORRECT KEY USED */   02249400
*        IF FREERTN^=''                      /* CHECK FOR KEY */        02249500
*          THEN                                                         02249600
*            ZCVAL=ZCVAL!!',FREERTN';        /* INCORRECT KEY USED */   02249700
*        IF ZCVAL^=''                                                   02249800
*          THEN                                                         02249900
*            DO;                             /* INCORRECT KEYS USED */  02250000
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            02250100
*              ZMS=' 8, "REQUEST'!!          /**KMEIP* MSG*/            02250200
*                  REQUEST!!'"'!!                                       02250300
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   02250400
*                  ' FOLLOWING KEY(S) "'!!                              02250500
*                  ZCVAL!!'".';                                         02250600
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02250700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02250800
*              ZMACRET=8;                    /* MACRO ERROR */          02250900
*            END;                                                       02251000
*/*PG.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02251100
*  XDUMMY6='';                               /* RESET XVARIABLE */      02251200
*  IF BUFLIST^=''                            /* CHECK ME KEY */         02251300
*    THEN                                                               02251400
*      DO;                                   /* VALID ME KEY */         02251500
*        IF NUMBER(BUFLIST)>1                /* CHECK SUBLISTS */       02251600
*          THEN                                                         02251700
*            DO;                                                        02251800
*              ZMS=' 8, "BUFLIST'!!          /**KPOSP* MSG*/            02251900
*                  BUFLIST!!                                            02252000
*                  '" "BUFLIST"'!!                                      02252100
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02252200
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02252300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02252400
*              ZMACRET=8;                    /* MACRO ERROR */          02252500
*            END;                                                       02252600
*        XDUMMY6='BUFLIST';                  /* SET XVARIABLE */        02252700
*        XBUFLIST=BUFLIST(1);                /* SET XVARIABLE */        02252800
*        ZXDUMMY6='INPUT';                   /* SET IN/OUTPUT */        02252900
*        ZXBUFLIST='INPUT';                  /* SET IN/OUTPUT */        02253000
*        IF BUFLIST(1)=''                    /* CHECK ME KEY */         02253100
*          THEN                                                         02253200
*            DO;                                                        02253300
*              ZXDUMMY6='';                  /* RESET IN/OUTPUT */      02253400
*              ZXBUFLIST='';                 /* RESET IN/OUTPUT */      02253500
*              ZMS=' 8,  '!!                                            02253600
*                  ' "BUFLIST" KEY AND ITS'!!                           02253700
*                  ' ARGUMENT ARE REQUIRED.'; /**KRQDP* MSG*/           02253800
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02253900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02254000
*              ZMACRET=8;                    /* MACRO ERROR */          02254100
*           END;                                                        02254200
*      END;                                                             02254300
*/*PG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02254400
*  IF BUFLST64^=''                           /* CHECK ME KEY */         02254500
*    THEN                                                               02254600
*      DO;                                                              02254700
*        IF NUMBER(BUFLST64)>1               /* CHECK SUBLISTS */       02254800
*          THEN                                                         02254900
*            DO;                                                        02255000
*              ZMS=' 8, "BUFLST64'!!         /**KPOSP* MSG*/            02255100
*                  BUFLST64!!                                           02255200
*                  '" "BUFLST64"'!!                                     02255300
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02255400
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02255500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02255600
*              ZMACRET=8;                    /* MACRO ERROR */          02255700
*            END;                                                       02255800
*        IF XDUMMY6=''                       /* CHECK XVARIABLE */      02255900
*          THEN                                                         02256000
*            DO;                             /* VALID ME KEY */         02256100
*              XDUMMY6='BUFLST64';           /* SET XVAR1 */            02256200
*              XBUFLST64=BUFLST64(1);        /* SET XVAR2 */            02256300
*              ZXDUMMY6='INPUT';             /* SET IN/OUTPUT */        02256400
*              ZXBUFLST64='INPUT';           /* SET IN/OUTPUT */        02256500
*              IF BUFLST64(1)=''             /* CHECK ME KEY */         02256600
*                THEN                                                   02256700
*                  DO;                                                  02256800
*                    ZXDUMMY6='';            /* RESET IN/OUTPUT */      02256900
*                    ZXBUFLST64='';          /* RESET IN/OUTPUT */      02257000
*                    ZMS=' 8,  '!!                                      02257100
*                        ' "BUFLST64" KEY AND ITS'!!                    02257200
*                        ' ARGUMENT ARE REQUIRED.'; /**KRQDP* MSG*/     02257300
*                    ANS MSG('?IVTCSM ---> '!!ZMS);                     02257400
*                    ANS(COMMENT(ZMS)) COL(MACLMAR);                    02257500
*                    ZMACRET=8;              /* MACRO ERROR */          02257600
*                  END;                                                 02257700
*            END;                                                       02257800
*          ELSE                                                         02257900
*            DO;                                                        02258000
*              ZMS=' 8, "BUFLST64'!!         /**KMEKP* MSG*/            02258100
*                  BUFLST64!!'"'!!                                      02258200
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'!!                02258300
*                  XDUMMY6!!                                            02258400
*                  '" KEY.';                                            02258500
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02258600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02258700
*              ZMACRET=8;                    /* MACRO ERROR */          02258800
*            END;                                                       02258900
*      END;                                                             02259000
*/*PG.KMEKY08 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 02259100
*  IF XDUMMY6=''                             /* CHECK XVARIABLE */      02259200
*    THEN                                                               02259300
*      DO;                                                              02259400
*        XDUMMY6='BUFLIST';                  /* SET DEFAULT */          02259500
*        XBUFLIST='0';                       /* SET DEFAULT */          02259600
*        ZXDUMMY6='';                        /* RESET IN/OUTPUT */      02259700
*        ZXBUFLIST='';                       /* RESET IN/OUTPUT */      02259800
*        ZMS=' 8, ONE OF THE FOLLOWING'!!    /**KMERP* MSG*/            02259900
*            ' MUTUALLY EXCLUSIVE KEY(S) IS'!!                          02260000
*            ' REQUIRED:'!!                                             02260100
*            ' "BUFLIST"'!!                  /* VALID ME KEY */         02260200
*            ' OR "BUFLST64".';              /* VALID ME KEY */         02260300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02260400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02260500
*        ZMACRET=8;                          /* MACRO ERROR */          02260600
*      END;                                                             02260700
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02260800
*  IF NUMBER(BUFNUM)>1                       /* CHECK POSITIONALS */    02260900
*    THEN                                                               02261000
*      DO;                                                              02261100
*        ZMS=' 8, "BUFNUM'!!                 /**KPOSP* MSG*/            02261200
*            BUFNUM!!                                                   02261300
*            '" "BUFNUM"'!!                                             02261400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02261500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02261600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02261700
*        ZMACRET=8;                          /* MACRO ERROR */          02261800
*      END;                                                             02261900
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02262000
*  XBUFNUM=BUFNUM(1);                        /* SET XVARIABLE */        02262100
*  IF BUFNUM(1)=''                           /* CHECK FOR NULL */       02262200
*   THEN                                                                02262300
*    DO;                                     /* KEY IS REQUIRED */      02262400
*        ZXBUFNUM='';                        /* RESET IN/OUTPUT */      02262500
*        ZMS=' 8,  '!!                                                  02262600
*            ' "BUFNUM" KEY AND ITS'!!                                  02262700
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            02262800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02262900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02263000
*        ZMACRET=8;                          /* MACRO ERROR */          02263100
*    END;                                                               02263200
*  ELSE                                                                 02263300
*    ZXBUFNUM='INPUT';                       /* SET IN/OUTPUT */        02263400
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02263500
*  IF CLEAR='CLEAR'                          /* CHECK ENTRY */          02263600
*    THEN                                                               02263700
*      DO;                                                              02263800
*        ZMS=' 8, THE "CLEAR" KEY'!!         /**KOPTP* MSG*/            02263900
*            ' MUST CONTAIN ONE'!!                                      02264000
*            ' (OR MORE) ARGUMENT(S).';                                 02264100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02264200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02264300
*        ZMACRET=8;                          /* MACRO ERROR */          02264400
*      END;                                                             02264500
*  IF NUMBER(CLEAR)>1                        /* CHECK POSITIONALS */    02264600
*    THEN                                                               02264700
*      DO;                                                              02264800
*        ZMS=' 8, "CLEAR'!!                  /**KPOSP* MSG*/            02264900
*            CLEAR!!                                                    02265000
*            '" "CLEAR"'!!                                              02265100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02265200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02265300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02265400
*        ZMACRET=8;                          /* MACRO ERROR */          02265500
*      END;                                                             02265600
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02265700
*  XCLEAR='';                                /* RESET XVARIABLE */      02265800
*  IF TRANSLATE(CLEAR(1))                                               02265900
*              = 'NO'                        /* CHECK FOR KEYWORD */    02266000
*    THEN                                                               02266100
*      XCLEAR = 'NO';                        /* SET XVARIABLE */        02266200
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02266300
*  IF TRANSLATE(CLEAR(1))                                               02266400
*              = 'YES'                       /* CHECK FOR KEYWORD */    02266500
*    THEN                                                               02266600
*      XCLEAR = 'YES';                       /* SET XVARIABLE */        02266700
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02266800
*  ZXCLEAR='INPUT';                          /* SET IN/OUTPUT */        02266900
*  IF XCLEAR=''                              /* CHECK FOR KEYWORD */    02267000
*    THEN                                                               02267100
*      DO;                                   /* KEYWORD NOT ENTERED */  02267200
*        XCLEAR='NO';                        /* SET DEFAULT */          02267300
*        IF CLEAR(1)^=''                                                02267400
*          THEN                                                         02267500
*            DO;                                                        02267600
*              ZXCLEAR='';                   /* RESET IN/OUTPUT */      02267700
*              ZMS=' 8, "CLEAR'!!            /**KUKWP* MSG*/            02267800
*                  CLEAR!!'"'!!                                         02267900
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02268000
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02268100
*                  ' "NO"'!!                 /* VALID KEYWORD */        02268200
*                  ' OR "YES".';             /* VALID KEYWORD */        02268300
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02268400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02268500
*              ZMACRET=8;                    /* MACRO ERROR */          02268600
*            END;                                                       02268700
*      END;                                                             02268800
*/*PG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START-----------*/ 02268900
*  IF XMF^='M'                               /* BYPASS IF MF=M */       02269000
*    THEN                                                               02269100
*      DO;                                                              02269200
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02269300
*  IF ERRBFLST='ERRBFLST' ! ERRBFLST='()'    /*CHECK ENTRY*/            02269400
*    THEN                                                               02269500
*      DO;                                                              02269600
*        ZMS=' 8, THE "ERRBFLST" KEY'!!      /**KOPTP* MSG*/            02269700
*            ' MUST CONTAIN ONE'!!                                      02269800
*            ' (OR MORE) ARGUMENT(S).';                                 02269900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02270000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02270100
*        ZMACRET=8;                          /* MACRO ERROR */          02270200
*      END;                                                             02270300
*  IF NUMBER(ERRBFLST)>1                     /* CHECK POSITIONALS */    02270400
*    THEN                                                               02270500
*      DO;                                                              02270600
*        ZMS=' 8, "ERRBFLST'!!               /**KPOSP* MSG*/            02270700
*            ERRBFLST!!                                                 02270800
*            '" "ERRBFLST"'!!                                           02270900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02271000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02271100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02271200
*        ZMACRET=8;                          /* MACRO ERROR */          02271300
*      END;                                                             02271400
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02271500
*  IF ERRBFLST(1)^=''                        /* CHECK FOR NULL */       02271600
*    THEN                                                               02271700
*      DO;                                                              02271800
*        XERRBFLST=ERRBFLST(1);              /* SET XVARIABLE */        02271900
*        ZXERRBFLST='OUTPUT';                /* SET OUTPUT */           02272000
*      END;                                                             02272100
*  ELSE                                                                 02272200
*    IF ZXERRBFLST^=''                                                  02272300
*      THEN                                                             02272400
*        ZXERRBFLST='';                      /* RESET OUTPUT */         02272500
*/*PG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END-------------*/ 02272600
*      END;  /**** END OF BYPASS CHECK */                               02272700
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02272800
*  IF FREETO='FREETO'                        /* CHECK ENTRY */          02272900
*    THEN                                                               02273000
*      DO;                                                              02273100
*        ZMS=' 8, THE "FREETO" KEY'!!        /**KOPTP* MSG*/            02273200
*            ' MUST CONTAIN ONE'!!                                      02273300
*            ' (OR MORE) ARGUMENT(S).';                                 02273400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02273500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02273600
*        ZMACRET=8;                          /* MACRO ERROR */          02273700
*      END;                                                             02273800
*  IF NUMBER(FREETO)>1                       /* CHECK POSITIONALS */    02273900
*    THEN                                                               02274000
*      DO;                                                              02274100
*        ZMS=' 8, "FREETO'!!                 /**KPOSP* MSG*/            02274200
*            FREETO!!                                                   02274300
*            '" "FREETO"'!!                                             02274400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02274500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02274600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02274700
*        ZMACRET=8;                          /* MACRO ERROR */          02274800
*      END;                                                             02274900
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02275000
*  XFREETO='';                               /* RESET XVARIABLE */      02275100
*  IF TRANSLATE(FREETO(1))                                              02275200
*              = 'USER'                      /* CHECK FOR KEYWORD */    02275300
*    THEN                                                               02275400
*      XFREETO = 'USER';                     /* SET XVARIABLE */        02275500
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02275600
*  IF TRANSLATE(FREETO(1))                                              02275700
*              = 'CSM'                       /* CHECK FOR KEYWORD */    02275800
*    THEN                                                               02275900
*      XFREETO = 'CSM';                      /* SET XVARIABLE */        02276000
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02276100
*  ZXFREETO='INPUT';                         /* SET IN/OUTPUT */        02276200
*  IF XFREETO=''                             /* CHECK FOR KEYWORD */    02276300
*    THEN                                                               02276400
*      DO;                                   /* KEYWORD NOT ENTERED */  02276500
*        XFREETO='USER';                     /* SET DEFAULT */          02276600
*        IF FREETO(1)^=''                                               02276700
*          THEN                                                         02276800
*            DO;                                                        02276900
*              ZXFREETO='';                  /* RESET IN/OUTPUT */      02277000
*              ZMS=' 8, "FREETO'!!           /**KUKWP* MSG*/            02277100
*                  FREETO!!'"'!!                                        02277200
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02277300
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02277400
*                  ' "USER"'!!               /* VALID KEYWORD */        02277500
*                  ' OR "CSM".';             /* VALID KEYWORD */        02277600
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02277700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02277800
*              ZMACRET=8;                    /* MACRO ERROR */          02277900
*            END;                                                       02278000
*      END;                                                             02278100
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02278200
*  IF GAP='GAP' ! GAP='()'                   /*CHECK ENTRY*/            02278300
*    THEN                                                               02278400
*      DO;                                                              02278500
*        ZMS=' 8, THE "GAP" KEY'!!           /**KOPTP* MSG*/            02278600
*            ' MUST CONTAIN ONE'!!                                      02278700
*            ' (OR MORE) ARGUMENT(S).';                                 02278800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02278900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02279000
*        ZMACRET=8;                          /* MACRO ERROR */          02279100
*      END;                                                             02279200
*  IF NUMBER(GAP)>1                          /* CHECK POSITIONALS */    02279300
*    THEN                                                               02279400
*      DO;                                                              02279500
*        ZMS=' 8, "GAP'!!                    /**KPOSP* MSG*/            02279600
*            GAP!!                                                      02279700
*            '" "GAP"'!!                                                02279800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02279900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02280000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02280100
*        ZMACRET=8;                          /* MACRO ERROR */          02280200
*      END;                                                             02280300
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02280400
*  ZXGAP='INPUT';                            /* SET IN/OUTPUT */        02280500
*  XGAP='0';                                 /* SET DEFAULT */          02280600
*  IF GAP(1)^=''                             /* CHECK FOR NULL */       02280700
*    THEN                                                               02280800
*      XGAP=GAP(1);                          /* SET XVARIABLE */        02280900
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02281000
*  IF SKIPBUF='SKIPBUF'                      /* CHECK ENTRY */          02281100
*    THEN                                                               02281200
*      DO;                                                              02281300
*        ZMS=' 8, THE "SKIPBUF" KEY'!!       /**KOPTP* MSG*/            02281400
*            ' MUST CONTAIN ONE'!!                                      02281500
*            ' (OR MORE) ARGUMENT(S).';                                 02281600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02281700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02281800
*        ZMACRET=8;                          /* MACRO ERROR */          02281900
*      END;                                                             02282000
*  IF NUMBER(SKIPBUF)>1                      /* CHECK POSITIONALS */    02282100
*    THEN                                                               02282200
*      DO;                                                              02282300
*        ZMS=' 8, "SKIPBUF'!!                /**KPOSP* MSG*/            02282400
*            SKIPBUF!!                                                  02282500
*            '" "SKIPBUF"'!!                                            02282600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02282700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02282800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02282900
*        ZMACRET=8;                          /* MACRO ERROR */          02283000
*      END;                                                             02283100
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02283200
*  XSKIPBUF='';                              /* RESET XVARIABLE */      02283300
*  IF TRANSLATE(SKIPBUF(1))                                             02283400
*              = 'NO'                        /* CHECK FOR KEYWORD */    02283500
*    THEN                                                               02283600
*      XSKIPBUF = 'NO';                      /* SET XVARIABLE */        02283700
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02283800
*  IF TRANSLATE(SKIPBUF(1))                                             02283900
*              = 'YES'                       /* CHECK FOR KEYWORD */    02284000
*    THEN                                                               02284100
*      XSKIPBUF = 'YES';                     /* SET XVARIABLE */        02284200
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02284300
*  ZXSKIPBUF='INPUT';                        /* SET IN/OUTPUT */        02284400
*  IF XSKIPBUF=''                            /* CHECK FOR KEYWORD */    02284500
*    THEN                                                               02284600
*      DO;                                   /* KEYWORD NOT ENTERED */  02284700
*        XSKIPBUF='NO';                      /* SET DEFAULT */          02284800
*        IF SKIPBUF(1)^=''                                              02284900
*          THEN                                                         02285000
*            DO;                                                        02285100
*              ZXSKIPBUF='';                 /* RESET IN/OUTPUT */      02285200
*              ZMS=' 8, "SKIPBUF'!!          /**KUKWP* MSG*/            02285300
*                  SKIPBUF!!'"'!!                                       02285400
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02285500
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02285600
*                  ' "NO"'!!                 /* VALID KEYWORD */        02285700
*                  ' OR "YES".';             /* VALID KEYWORD */        02285800
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02285900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02286000
*              ZMACRET=8;                    /* MACRO ERROR */          02286100
*            END;                                                       02286200
*      END;                                                             02286300
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02286400
*  IF COMPID='COMPID' ! COMPID='()'          /*CHECK ENTRY*/            02286500
*    THEN                                                               02286600
*      DO;                                                              02286700
*        ZMS=' 8, THE "COMPID" KEY'!!        /**KOPTP* MSG*/            02286800
*            ' MUST CONTAIN ONE'!!                                      02286900
*            ' (OR MORE) ARGUMENT(S).';                                 02287000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02287100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02287200
*        ZMACRET=8;                          /* MACRO ERROR */          02287300
*      END;                                                             02287400
*  IF NUMBER(COMPID)>1                       /* CHECK POSITIONALS */    02287500
*    THEN                                                               02287600
*      DO;                                                              02287700
*        ZMS=' 8, "COMPID'!!                 /**KPOSP* MSG*/            02287800
*            COMPID!!                                                   02287900
*            '" "COMPID"'!!                                             02288000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02288100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02288200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02288300
*        ZMACRET=8;                          /* MACRO ERROR */          02288400
*      END;                                                             02288500
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02288600
*  ZXCOMPID='INPUT';                         /* SET IN/OUTPUT */        02288700
*  XCOMPID='0';                              /* SET DEFAULT */          02288800
*  IF COMPID(1)^=''                          /* CHECK FOR NULL */       02288900
*    THEN                                                               02289000
*      XCOMPID=COMPID(1);                    /* SET XVARIABLE */        02289100
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02289200
*  IF COMPUSER='COMPUSER' ! COMPUSER='()'    /*CHECK ENTRY*/            02289300
*    THEN                                                               02289400
*      DO;                                                              02289500
*        ZMS=' 8, THE "COMPUSER" KEY'!!      /**KOPTP* MSG*/            02289600
*            ' MUST CONTAIN ONE'!!                                      02289700
*            ' (OR MORE) ARGUMENT(S).';                                 02289800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02289900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02290000
*        ZMACRET=8;                          /* MACRO ERROR */          02290100
*      END;                                                             02290200
*  IF NUMBER(COMPUSER)>1                     /* CHECK POSITIONALS */    02290300
*    THEN                                                               02290400
*      DO;                                                              02290500
*        ZMS=' 8, "COMPUSER'!!               /**KPOSP* MSG*/            02290600
*            COMPUSER!!                                                 02290700
*            '" "COMPUSER"'!!                                           02290800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02290900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02291000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02291100
*        ZMACRET=8;                          /* MACRO ERROR */          02291200
*      END;                                                             02291300
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02291400
*  ZXCOMPUSER='INPUT';                       /* SET IN/OUTPUT */        02291500
*  XCOMPUSER='0';                            /* SET DEFAULT */          02291600
*  IF COMPUSER(1)^=''                        /* CHECK FOR NULL */       02291700
*    THEN                                                               02291800
*      XCOMPUSER=COMPUSER(1);                /* SET XVARIABLE */        02291900
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02292000
*  IF THREAD='THREAD' ! THREAD='()'          /*CHECK ENTRY*/            02292100
*    THEN                                                               02292200
*      DO;                                                              02292300
*        ZMS=' 8, THE "THREAD" KEY'!!        /**KOPTP* MSG*/            02292400
*            ' MUST CONTAIN ONE'!!                                      02292500
*            ' (OR MORE) ARGUMENT(S).';                                 02292600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02292700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02292800
*        ZMACRET=8;                          /* MACRO ERROR */          02292900
*      END;                                                             02293000
*  IF NUMBER(THREAD)>1                       /* CHECK POSITIONALS */    02293100
*    THEN                                                               02293200
*      DO;                                                              02293300
*        ZMS=' 8, "THREAD'!!                 /**KPOSP* MSG*/            02293400
*            THREAD!!                                                   02293500
*            '" "THREAD"'!!                                             02293600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02293700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02293800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02293900
*        ZMACRET=8;                          /* MACRO ERROR */          02294000
*      END;                                                             02294100
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02294200
*  ZXTHREAD='INPUT';                         /* SET IN/OUTPUT */        02294300
*  XTHREAD='0';                              /* SET DEFAULT */          02294400
*  IF THREAD(1)^=''                          /* CHECK FOR NULL */       02294500
*    THEN                                                               02294600
*      XTHREAD=THREAD(1);                    /* SET XVARIABLE */        02294700
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02294800
*  IF UTILRTN='UTILRTN' ! UTILRTN='()'       /*CHECK ENTRY*/            02294900
*    THEN                                                               02295000
*      DO;                                                              02295100
*        ZMS=' 8, THE "UTILRTN" KEY'!!       /**KOPTP* MSG*/            02295200
*            ' MUST CONTAIN ONE'!!                                      02295300
*            ' (OR MORE) ARGUMENT(S).';                                 02295400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02295500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02295600
*        ZMACRET=8;                          /* MACRO ERROR */          02295700
*      END;                                                             02295800
*  IF NUMBER(UTILRTN)>1                      /* CHECK POSITIONALS */    02295900
*    THEN                                                               02296000
*      DO;                                                              02296100
*        ZMS=' 8, "UTILRTN'!!                /**KPOSP* MSG*/            02296200
*            UTILRTN!!                                                  02296300
*            '" "UTILRTN"'!!                                            02296400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02296500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02296600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02296700
*        ZMACRET=8;                          /* MACRO ERROR */          02296800
*      END;                                                             02296900
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02297000
*  ZXUTILRTN='INPUT';                        /* SET IN/OUTPUT */        02297100
*  XUTILRTN='0';                             /* SET DEFAULT */          02297200
*  IF UTILRTN(1)^=''                         /* CHECK FOR NULL */       02297300
*    THEN                                                               02297400
*      XUTILRTN=UTILRTN(1);                  /* SET XVARIABLE */        02297500
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02297600
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     02297700
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02297800
*  IF TRANSLATE(REQUEST(1))                                             02297900
*              = 'GET_BUFFER'                /* CHECK FOR KEYWORD */    02298000
*    THEN                                                               02298100
*      DO;                                                              02298200
*        XREQUEST='GET_BUFFER';              /* SET XVARIABLE */        02298300
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    02298400
*          THEN                                                         02298500
*            DO;                                                        02298600
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            02298700
*                  REQUEST!!                                            02298800
*                  '" "REQUEST"'!!                                      02298900
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02299000
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02299100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02299200
*              ZMACRET=8;                    /* MACRO ERROR */          02299300
*            END;                                                       02299400
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02299500
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 02299600
*        IF SKIPBUF^=''                      /* CHECK FOR KEY */        02299700
*          THEN                                                         02299800
*            ZCVAL=ZCVAL!!',SKIPBUF';        /* INCORRECT KEY USED */   02299900
*        IF PAD^=''                          /* CHECK FOR KEY */        02300000
*          THEN                                                         02300100
*            ZCVAL=ZCVAL!!',PAD';            /* INCORRECT KEY USED */   02300200
*        IF PADCHAR^=''                      /* CHECK FOR KEY */        02300300
*          THEN                                                         02300400
*            ZCVAL=ZCVAL!!',PADCHAR';        /* INCORRECT KEY USED */   02300500
*        IF SRCERRL^=''                      /* CHECK FOR KEY */        02300600
*          THEN                                                         02300700
*            ZCVAL=ZCVAL!!',SRCERRL';        /* INCORRECT KEY USED */   02300800
*        IF SRCGAP^=''                       /* CHECK FOR KEY */        02300900
*          THEN                                                         02301000
*            ZCVAL=ZCVAL!!',SRCGAP';         /* INCORRECT KEY USED */   02301100
*        IF SRCLIST^=''                      /* CHECK FOR KEY */        02301200
*          THEN                                                         02301300
*            ZCVAL=ZCVAL!!',SRCLIST';        /* INCORRECT KEY USED */   02301400
*        IF SRCLST64^=''                     /* CHECK FOR KEY */        02301500
*          THEN                                                         02301600
*            ZCVAL=ZCVAL!!',SRCLST64';       /* INCORRECT KEY USED */   02301700
*        IF SRCNUM^=''                       /* CHECK FOR KEY */        02301800
*          THEN                                                         02301900
*            ZCVAL=ZCVAL!!',SRCNUM';         /* INCORRECT KEY USED */   02302000
*        IF TARGERRL^=''                     /* CHECK FOR KEY */        02302100
*          THEN                                                         02302200
*            ZCVAL=ZCVAL!!',TARGERRL';       /* INCORRECT KEY USED */   02302300
*        IF TARGGAP^=''                      /* CHECK FOR KEY */        02302400
*          THEN                                                         02302500
*            ZCVAL=ZCVAL!!',TARGGAP';        /* INCORRECT KEY USED */   02302600
*        IF TARGLIST^=''                     /* CHECK FOR KEY */        02302700
*          THEN                                                         02302800
*            ZCVAL=ZCVAL!!',TARGLIST';       /* INCORRECT KEY USED */   02302900
*        IF TARLST64^=''                     /* CHECK FOR KEY */        02303000
*          THEN                                                         02303100
*            ZCVAL=ZCVAL!!',TARLST64';       /* INCORRECT KEY USED */   02303200
*        IF TARGNUM^=''                      /* CHECK FOR KEY */        02303300
*          THEN                                                         02303400
*            ZCVAL=ZCVAL!!',TARGNUM';        /* INCORRECT KEY USED */   02303500
*        IF BUFSIZE^=''                      /* CHECK FOR KEY */        02303600
*          THEN                                                         02303700
*            ZCVAL=ZCVAL!!',BUFSIZE';        /* INCORRECT KEY USED */   02303800
*        IF BUFSOURC^=''                     /* CHECK FOR KEY */        02303900
*          THEN                                                         02304000
*            ZCVAL=ZCVAL!!',BUFSOURC';       /* INCORRECT KEY USED */   02304100
*        IF BACK^=''                         /* CHECK FOR KEY */        02304200
*          THEN                                                         02304300
*            ZCVAL=ZCVAL!!',BACK';           /* INCORRECT KEY USED */   02304400
*        IF DS_INFO^=''                      /* CHECK FOR KEY */        02304500
*          THEN                                                         02304600
*            ZCVAL=ZCVAL!!',DS_INFO';        /* INCORRECT KEY USED */   02304700
*        IF EXPBUF^=''                       /* CHECK FOR KEY */        02304800
*          THEN                                                         02304900
*            ZCVAL=ZCVAL!!',EXPBUF';         /* INCORRECT KEY USED */   02305000
*        IF INITBUF^=''                      /* CHECK FOR KEY */        02305100
*          THEN                                                         02305200
*            ZCVAL=ZCVAL!!',INITBUF';        /* INCORRECT KEY USED */   02305300
*        IF MINFREE^=''                      /* CHECK FOR KEY */        02305400
*          THEN                                                         02305500
*            ZCVAL=ZCVAL!!',MINFREE';        /* INCORRECT KEY USED */   02305600
*        IF RETPTOKN^=''                     /* CHECK FOR KEY */        02305700
*          THEN                                                         02305800
*            ZCVAL=ZCVAL!!',RETPTOKN';       /* INCORRECT KEY USED */   02305900
*        IF STATAREA^=''                     /* CHECK FOR KEY */        02306000
*          THEN                                                         02306100
*            ZCVAL=ZCVAL!!',STATAREA';       /* INCORRECT KEY USED */   02306200
*        IF FREETO^=''                       /* CHECK FOR KEY */        02306300
*          THEN                                                         02306400
*            ZCVAL=ZCVAL!!',FREETO';         /* INCORRECT KEY USED */   02306500
*        IF ZCVAL^=''                                                   02306600
*          THEN                                                         02306700
*            DO;                             /* INCORRECT KEYS USED */  02306800
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            02306900
*              ZMS=' 8, "REQUEST'!!          /**KMEIP* MSG*/            02307000
*                  REQUEST!!'"'!!                                       02307100
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   02307200
*                  ' FOLLOWING KEY(S) "'!!                              02307300
*                  ZCVAL!!'".';                                         02307400
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02307500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02307600
*              ZMACRET=8;                    /* MACRO ERROR */          02307700
*            END;                                                       02307800
*/*PG.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02307900
*  XDUMMY7='';                               /* RESET XVARIABLE */      02308000
*  IF BUFLIST^=''                            /* CHECK ME KEY */         02308100
*    THEN                                                               02308200
*      DO;                                   /* VALID ME KEY */         02308300
*        IF NUMBER(BUFLIST)>1                /* CHECK SUBLISTS */       02308400
*          THEN                                                         02308500
*            DO;                                                        02308600
*              ZMS=' 8, "BUFLIST'!!          /**KPOSP* MSG*/            02308700
*                  BUFLIST!!                                            02308800
*                  '" "BUFLIST"'!!                                      02308900
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02309000
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02309100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02309200
*              ZMACRET=8;                    /* MACRO ERROR */          02309300
*            END;                                                       02309400
*        XDUMMY7='BUFLIST';                  /* SET XVARIABLE */        02309500
*        XBUFLIST=BUFLIST(1);                /* SET XVARIABLE */        02309600
*        ZXDUMMY7='INPUT';                   /* SET IN/OUTPUT */        02309700
*        ZXBUFLIST='INPUT';                  /* SET IN/OUTPUT */        02309800
*        IF BUFLIST(1)=''                    /* CHECK ME KEY */         02309900
*          THEN                                                         02310000
*            DO;                                                        02310100
*              ZXDUMMY7='';                  /* RESET IN/OUTPUT */      02310200
*              ZXBUFLIST='';                 /* RESET IN/OUTPUT */      02310300
*              ZMS=' 8,  '!!                                            02310400
*                  ' "BUFLIST" KEY AND ITS'!!                           02310500
*                  ' ARGUMENT ARE REQUIRED.'; /**KRQDP* MSG*/           02310600
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02310700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02310800
*              ZMACRET=8;                    /* MACRO ERROR */          02310900
*           END;                                                        02311000
*      END;                                                             02311100
*/*PG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02311200
*  IF BUFLST64^=''                           /* CHECK ME KEY */         02311300
*    THEN                                                               02311400
*      DO;                                                              02311500
*        IF NUMBER(BUFLST64)>1               /* CHECK SUBLISTS */       02311600
*          THEN                                                         02311700
*            DO;                                                        02311800
*              ZMS=' 8, "BUFLST64'!!         /**KPOSP* MSG*/            02311900
*                  BUFLST64!!                                           02312000
*                  '" "BUFLST64"'!!                                     02312100
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02312200
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02312300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02312400
*              ZMACRET=8;                    /* MACRO ERROR */          02312500
*            END;                                                       02312600
*        IF XDUMMY7=''                       /* CHECK XVARIABLE */      02312700
*          THEN                                                         02312800
*            DO;                             /* VALID ME KEY */         02312900
*              XDUMMY7='BUFLST64';           /* SET XVAR1 */            02313000
*              XBUFLST64=BUFLST64(1);        /* SET XVAR2 */            02313100
*              ZXDUMMY7='INPUT';             /* SET IN/OUTPUT */        02313200
*              ZXBUFLST64='INPUT';           /* SET IN/OUTPUT */        02313300
*              IF BUFLST64(1)=''             /* CHECK ME KEY */         02313400
*                THEN                                                   02313500
*                  DO;                                                  02313600
*                    ZXDUMMY7='';            /* RESET IN/OUTPUT */      02313700
*                    ZXBUFLST64='';          /* RESET IN/OUTPUT */      02313800
*                    ZMS=' 8,  '!!                                      02313900
*                        ' "BUFLST64" KEY AND ITS'!!                    02314000
*                        ' ARGUMENT ARE REQUIRED.'; /**KRQDP* MSG*/     02314100
*                    ANS MSG('?IVTCSM ---> '!!ZMS);                     02314200
*                    ANS(COMMENT(ZMS)) COL(MACLMAR);                    02314300
*                    ZMACRET=8;              /* MACRO ERROR */          02314400
*                  END;                                                 02314500
*            END;                                                       02314600
*          ELSE                                                         02314700
*            DO;                                                        02314800
*              ZMS=' 8, "BUFLST64'!!         /**KMEKP* MSG*/            02314900
*                  BUFLST64!!'"'!!                                      02315000
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'!!                02315100
*                  XDUMMY7!!                                            02315200
*                  '" KEY.';                                            02315300
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02315400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02315500
*              ZMACRET=8;                    /* MACRO ERROR */          02315600
*            END;                                                       02315700
*      END;                                                             02315800
*/*PG.KMEKY08 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 02315900
*  IF XDUMMY7=''                             /* CHECK XVARIABLE */      02316000
*    THEN                                                               02316100
*      DO;                                                              02316200
*        XDUMMY7='BUFLIST';                  /* SET DEFAULT */          02316300
*        XBUFLIST='0';                       /* SET DEFAULT */          02316400
*        ZXDUMMY7='';                        /* RESET IN/OUTPUT */      02316500
*        ZXBUFLIST='';                       /* RESET IN/OUTPUT */      02316600
*        ZMS=' 8, ONE OF THE FOLLOWING'!!    /**KMERP* MSG*/            02316700
*            ' MUTUALLY EXCLUSIVE KEY(S) IS'!!                          02316800
*            ' REQUIRED:'!!                                             02316900
*            ' "BUFLIST"'!!                  /* VALID ME KEY */         02317000
*            ' OR "BUFLST64".';              /* VALID ME KEY */         02317100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02317200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02317300
*        ZMACRET=8;                          /* MACRO ERROR */          02317400
*      END;                                                             02317500
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02317600
*  IF NUMBER(BUFNUM)>1                       /* CHECK POSITIONALS */    02317700
*    THEN                                                               02317800
*      DO;                                                              02317900
*        ZMS=' 8, "BUFNUM'!!                 /**KPOSP* MSG*/            02318000
*            BUFNUM!!                                                   02318100
*            '" "BUFNUM"'!!                                             02318200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02318300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02318400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02318500
*        ZMACRET=8;                          /* MACRO ERROR */          02318600
*      END;                                                             02318700
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02318800
*  XBUFNUM=BUFNUM(1);                        /* SET XVARIABLE */        02318900
*  IF BUFNUM(1)=''                           /* CHECK FOR NULL */       02319000
*   THEN                                                                02319100
*    DO;                                     /* KEY IS REQUIRED */      02319200
*        ZXBUFNUM='';                        /* RESET IN/OUTPUT */      02319300
*        ZMS=' 8,  '!!                                                  02319400
*            ' "BUFNUM" KEY AND ITS'!!                                  02319500
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            02319600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02319700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02319800
*        ZMACRET=8;                          /* MACRO ERROR */          02319900
*    END;                                                               02320000
*  ELSE                                                                 02320100
*    ZXBUFNUM='INPUT';                       /* SET IN/OUTPUT */        02320200
*/*PG.KKWRD01 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02320300
*  IF NUMBER(BUFTYPE)>1                      /* CHECK POSITIONALS */    02320400
*    THEN                                                               02320500
*      DO;                                                              02320600
*        ZMS=' 8, "BUFTYPE'!!                /**KPOSP* MSG*/            02320700
*            BUFTYPE!!                                                  02320800
*            '" "BUFTYPE"'!!                                            02320900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02321000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02321100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02321200
*        ZMACRET=8;                          /* MACRO ERROR */          02321300
*      END;                                                             02321400
*/*PG.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02321500
*  XBUFTYPE='';                              /* RESET XVARIABLE */      02321600
*  IF TRANSLATE(BUFTYPE(1))                                             02321700
*              = 'PAGEELIG'                  /* CHECK FOR KEYWORD */    02321800
*    THEN                                                               02321900
*      XBUFTYPE = 'PAGEELIG';                /* SET XVARIABLE */        02322000
*/*PG.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02322100
*  IF TRANSLATE(BUFTYPE(1))                                             02322200
*              = 'PAGEABLE'                  /* CHECK FOR KEYWORD */    02322300
*    THEN                                                               02322400
*      XBUFTYPE = 'PAGEABLE';                /* SET XVARIABLE */        02322500
*/*PG.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02322600
*  IF TRANSLATE(BUFTYPE(1))                                             02322700
*              = 'FIXED'                     /* CHECK FOR KEYWORD */    02322800
*    THEN                                                               02322900
*      XBUFTYPE = 'FIXED';                   /* SET XVARIABLE */        02323000
*/*PG.KKWRD03 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02323100
*  ZXBUFTYPE='INPUT';                        /* SET IN/OUTPUT */        02323200
*  IF XBUFTYPE=''                            /* CHECK FOR KEYWORD */    02323300
*    THEN                                                               02323400
*      DO;                                   /* KEYWORD NOT ENTERED */  02323500
*        XBUFTYPE='PAGEELIG';                /* SET DEFAULT */          02323600
*        IF BUFTYPE(1)^=''                                              02323700
*          THEN                                                         02323800
*            DO;                                                        02323900
*              ZXBUFTYPE='';                 /* RESET IN/OUTPUT */      02324000
*              ZMS=' 8, "BUFTYPE'!!          /**KUKWP* MSG*/            02324100
*                  BUFTYPE!!'"'!!                                       02324200
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02324300
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02324400
*                  ' "PAGEELIG",'!!          /* VALID KEYWORD */        02324500
*                  ' "PAGEABLE",'!!          /* VALID KEYWORD */        02324600
*                  ' OR "FIXED".';           /* VALID KEYWORD */        02324700
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02324800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02324900
*              ZMACRET=8;                    /* MACRO ERROR */          02325000
*            END;                                                       02325100
*      END;                                                             02325200
*/*PG.KKWRD04 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02325300
*  IF BUFTYPE(1)=''                          /* CHECK FOR KEYWORD */    02325400
*    THEN                                                               02325500
*      DO;                                   /* KEYWORD NOT ENTERED */  02325600
*        ZXBUFTYPE='';                       /* RESET IN/OUTPUT */      02325700
*        ZMS=' 8, THE'!!                     /**KRKWP* MSG*/            02325800
*            ' "BUFTYPE" KEY AND ITS'!!                                 02325900
*            ' ARGUMENT ARE REQUIRED.'!!                                02326000
*            ' VALID KEYWORD CHOICE(S) ARE:'!!                          02326100
*            ' "PAGEELIG",'!!                /* VALID KEYWORD */        02326200
*            ' "PAGEABLE",'!!                /* VALID KEYWORD */        02326300
*            ' OR "FIXED".';                 /* VALID KEYWORD */        02326400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02326500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02326600
*        ZMACRET=8;                          /* MACRO ERROR */          02326700
*      END;                                                             02326800
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02326900
*  IF CLEAR='CLEAR'                          /* CHECK ENTRY */          02327000
*    THEN                                                               02327100
*      DO;                                                              02327200
*        ZMS=' 8, THE "CLEAR" KEY'!!         /**KOPTP* MSG*/            02327300
*            ' MUST CONTAIN ONE'!!                                      02327400
*            ' (OR MORE) ARGUMENT(S).';                                 02327500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02327600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02327700
*        ZMACRET=8;                          /* MACRO ERROR */          02327800
*      END;                                                             02327900
*  IF NUMBER(CLEAR)>1                        /* CHECK POSITIONALS */    02328000
*    THEN                                                               02328100
*      DO;                                                              02328200
*        ZMS=' 8, "CLEAR'!!                  /**KPOSP* MSG*/            02328300
*            CLEAR!!                                                    02328400
*            '" "CLEAR"'!!                                              02328500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02328600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02328700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02328800
*        ZMACRET=8;                          /* MACRO ERROR */          02328900
*      END;                                                             02329000
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02329100
*  XCLEAR='';                                /* RESET XVARIABLE */      02329200
*  IF TRANSLATE(CLEAR(1))                                               02329300
*              = 'NO'                        /* CHECK FOR KEYWORD */    02329400
*    THEN                                                               02329500
*      XCLEAR = 'NO';                        /* SET XVARIABLE */        02329600
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02329700
*  IF TRANSLATE(CLEAR(1))                                               02329800
*              = 'YES'                       /* CHECK FOR KEYWORD */    02329900
*    THEN                                                               02330000
*      XCLEAR = 'YES';                       /* SET XVARIABLE */        02330100
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02330200
*  ZXCLEAR='INPUT';                          /* SET IN/OUTPUT */        02330300
*  IF XCLEAR=''                              /* CHECK FOR KEYWORD */    02330400
*    THEN                                                               02330500
*      DO;                                   /* KEYWORD NOT ENTERED */  02330600
*        XCLEAR='NO';                        /* SET DEFAULT */          02330700
*        IF CLEAR(1)^=''                                                02330800
*          THEN                                                         02330900
*            DO;                                                        02331000
*              ZXCLEAR='';                   /* RESET IN/OUTPUT */      02331100
*              ZMS=' 8, "CLEAR'!!            /**KUKWP* MSG*/            02331200
*                  CLEAR!!'"'!!                                         02331300
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02331400
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02331500
*                  ' "NO"'!!                 /* VALID KEYWORD */        02331600
*                  ' OR "YES".';             /* VALID KEYWORD */        02331700
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02331800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02331900
*              ZMACRET=8;                    /* MACRO ERROR */          02332000
*            END;                                                       02332100
*      END;                                                             02332200
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02332300
*  IF CSMUSER='CSMUSER'                      /* CHECK ENTRY */          02332400
*    THEN                                                               02332500
*      DO;                                                              02332600
*        ZMS=' 8, THE "CSMUSER" KEY'!!       /**KOPTP* MSG*/            02332700
*            ' MUST CONTAIN ONE'!!                                      02332800
*            ' (OR MORE) ARGUMENT(S).';                                 02332900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02333000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02333100
*        ZMACRET=8;                          /* MACRO ERROR */          02333200
*      END;                                                             02333300
*  IF NUMBER(CSMUSER)>1                      /* CHECK POSITIONALS */    02333400
*    THEN                                                               02333500
*      DO;                                                              02333600
*        ZMS=' 8, "CSMUSER'!!                /**KPOSP* MSG*/            02333700
*            CSMUSER!!                                                  02333800
*            '" "CSMUSER"'!!                                            02333900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02334000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02334100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02334200
*        ZMACRET=8;                          /* MACRO ERROR */          02334300
*      END;                                                             02334400
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02334500
*  XCSMUSER='';                              /* RESET XVARIABLE */      02334600
*  IF TRANSLATE(CSMUSER(1))                                             02334700
*              = 'NO'                        /* CHECK FOR KEYWORD */    02334800
*    THEN                                                               02334900
*      XCSMUSER = 'NO';                      /* SET XVARIABLE */        02335000
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02335100
*  IF TRANSLATE(CSMUSER(1))                                             02335200
*              = 'YES'                       /* CHECK FOR KEYWORD */    02335300
*    THEN                                                               02335400
*      XCSMUSER = 'YES';                     /* SET XVARIABLE */        02335500
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02335600
*  ZXCSMUSER='INPUT';                        /* SET IN/OUTPUT */        02335700
*  IF XCSMUSER=''                            /* CHECK FOR KEYWORD */    02335800
*    THEN                                                               02335900
*      DO;                                   /* KEYWORD NOT ENTERED */  02336000
*        XCSMUSER='NO';                      /* SET DEFAULT */          02336100
*        IF CSMUSER(1)^=''                                              02336200
*          THEN                                                         02336300
*            DO;                                                        02336400
*              ZXCSMUSER='';                 /* RESET IN/OUTPUT */      02336500
*              ZMS=' 8, "CSMUSER'!!          /**KUKWP* MSG*/            02336600
*                  CSMUSER!!'"'!!                                       02336700
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02336800
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02336900
*                  ' "NO"'!!                 /* VALID KEYWORD */        02337000
*                  ' OR "YES".';             /* VALID KEYWORD */        02337100
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02337200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02337300
*              ZMACRET=8;                    /* MACRO ERROR */          02337400
*            END;                                                       02337500
*      END;                                                             02337600
*/*PG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START-----------*/ 02337700
*  IF XMF^='M'                               /* BYPASS IF MF=M */       02337800
*    THEN                                                               02337900
*      DO;                                                              02338000
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02338100
*  IF ERRBFLST='ERRBFLST' ! ERRBFLST='()'    /*CHECK ENTRY*/            02338200
*    THEN                                                               02338300
*      DO;                                                              02338400
*        ZMS=' 8, THE "ERRBFLST" KEY'!!      /**KOPTP* MSG*/            02338500
*            ' MUST CONTAIN ONE'!!                                      02338600
*            ' (OR MORE) ARGUMENT(S).';                                 02338700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02338800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02338900
*        ZMACRET=8;                          /* MACRO ERROR */          02339000
*      END;                                                             02339100
*  IF NUMBER(ERRBFLST)>1                     /* CHECK POSITIONALS */    02339200
*    THEN                                                               02339300
*      DO;                                                              02339400
*        ZMS=' 8, "ERRBFLST'!!               /**KPOSP* MSG*/            02339500
*            ERRBFLST!!                                                 02339600
*            '" "ERRBFLST"'!!                                           02339700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02339800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02339900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02340000
*        ZMACRET=8;                          /* MACRO ERROR */          02340100
*      END;                                                             02340200
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02340300
*  IF ERRBFLST(1)^=''                        /* CHECK FOR NULL */       02340400
*    THEN                                                               02340500
*      DO;                                                              02340600
*        XERRBFLST=ERRBFLST(1);              /* SET XVARIABLE */        02340700
*        ZXERRBFLST='OUTPUT';                /* SET OUTPUT */           02340800
*      END;                                                             02340900
*  ELSE                                                                 02341000
*    IF ZXERRBFLST^=''                                                  02341100
*      THEN                                                             02341200
*        ZXERRBFLST='';                      /* RESET OUTPUT */         02341300
*/*PG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END-------------*/ 02341400
*      END;  /**** END OF BYPASS CHECK */                               02341500
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02341600
*  IF FREERTN='FREERTN' ! FREERTN='()'       /*CHECK ENTRY*/            02341700
*    THEN                                                               02341800
*      DO;                                                              02341900
*        ZMS=' 8, THE "FREERTN" KEY'!!       /**KOPTP* MSG*/            02342000
*            ' MUST CONTAIN ONE'!!                                      02342100
*            ' (OR MORE) ARGUMENT(S).';                                 02342200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02342300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02342400
*        ZMACRET=8;                          /* MACRO ERROR */          02342500
*      END;                                                             02342600
*  IF NUMBER(FREERTN)>1                      /* CHECK POSITIONALS */    02342700
*    THEN                                                               02342800
*      DO;                                                              02342900
*        ZMS=' 8, "FREERTN'!!                /**KPOSP* MSG*/            02343000
*            FREERTN!!                                                  02343100
*            '" "FREERTN"'!!                                            02343200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02343300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02343400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02343500
*        ZMACRET=8;                          /* MACRO ERROR */          02343600
*      END;                                                             02343700
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02343800
*  ZXFREERTN='INPUT';                        /* SET IN/OUTPUT */        02343900
*  XFREERTN='CSM';                           /* SET DEFAULT */          02344000
*  IF FREERTN(1)^=''                         /* CHECK FOR NULL */       02344100
*    THEN                                                               02344200
*      XFREERTN=FREERTN(1);                  /* SET XVARIABLE */        02344300
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02344400
*  IF GAP='GAP' ! GAP='()'                   /*CHECK ENTRY*/            02344500
*    THEN                                                               02344600
*      DO;                                                              02344700
*        ZMS=' 8, THE "GAP" KEY'!!           /**KOPTP* MSG*/            02344800
*            ' MUST CONTAIN ONE'!!                                      02344900
*            ' (OR MORE) ARGUMENT(S).';                                 02345000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02345100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02345200
*        ZMACRET=8;                          /* MACRO ERROR */          02345300
*      END;                                                             02345400
*  IF NUMBER(GAP)>1                          /* CHECK POSITIONALS */    02345500
*    THEN                                                               02345600
*      DO;                                                              02345700
*        ZMS=' 8, "GAP'!!                    /**KPOSP* MSG*/            02345800
*            GAP!!                                                      02345900
*            '" "GAP"'!!                                                02346000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02346100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02346200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02346300
*        ZMACRET=8;                          /* MACRO ERROR */          02346400
*      END;                                                             02346500
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02346600
*  ZXGAP='INPUT';                            /* SET IN/OUTPUT */        02346700
*  XGAP='0';                                 /* SET DEFAULT */          02346800
*  IF GAP(1)^=''                             /* CHECK FOR NULL */       02346900
*    THEN                                                               02347000
*      XGAP=GAP(1);                          /* SET XVARIABLE */        02347100
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02347200
*  IF OWNERID='OWNERID' ! OWNERID='()'       /*CHECK ENTRY*/            02347300
*    THEN                                                               02347400
*      DO;                                                              02347500
*        ZMS=' 8, THE "OWNERID" KEY'!!       /**KOPTP* MSG*/            02347600
*            ' MUST CONTAIN ONE'!!                                      02347700
*            ' (OR MORE) ARGUMENT(S).';                                 02347800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02347900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02348000
*        ZMACRET=8;                          /* MACRO ERROR */          02348100
*      END;                                                             02348200
*  IF NUMBER(OWNERID)>1                      /* CHECK POSITIONALS */    02348300
*    THEN                                                               02348400
*      DO;                                                              02348500
*        ZMS=' 8, "OWNERID'!!                /**KPOSP* MSG*/            02348600
*            OWNERID!!                                                  02348700
*            '" "OWNERID"'!!                                            02348800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02348900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02349000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02349100
*        ZMACRET=8;                          /* MACRO ERROR */          02349200
*      END;                                                             02349300
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02349400
*  ZXOWNERID='INPUT';                        /* SET IN/OUTPUT */        02349500
*  XOWNERID='0';                             /* SET DEFAULT */          02349600
*  IF OWNERID(1)^=''                         /* CHECK FOR NULL */       02349700
*    THEN                                                               02349800
*      XOWNERID=OWNERID(1);                  /* SET XVARIABLE */        02349900
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02350000
*  IF COMPID='COMPID' ! COMPID='()'          /*CHECK ENTRY*/            02350100
*    THEN                                                               02350200
*      DO;                                                              02350300
*        ZMS=' 8, THE "COMPID" KEY'!!        /**KOPTP* MSG*/            02350400
*            ' MUST CONTAIN ONE'!!                                      02350500
*            ' (OR MORE) ARGUMENT(S).';                                 02350600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02350700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02350800
*        ZMACRET=8;                          /* MACRO ERROR */          02350900
*      END;                                                             02351000
*  IF NUMBER(COMPID)>1                       /* CHECK POSITIONALS */    02351100
*    THEN                                                               02351200
*      DO;                                                              02351300
*        ZMS=' 8, "COMPID'!!                 /**KPOSP* MSG*/            02351400
*            COMPID!!                                                   02351500
*            '" "COMPID"'!!                                             02351600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02351700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02351800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02351900
*        ZMACRET=8;                          /* MACRO ERROR */          02352000
*      END;                                                             02352100
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02352200
*  ZXCOMPID='INPUT';                         /* SET IN/OUTPUT */        02352300
*  XCOMPID='0';                              /* SET DEFAULT */          02352400
*  IF COMPID(1)^=''                          /* CHECK FOR NULL */       02352500
*    THEN                                                               02352600
*      XCOMPID=COMPID(1);                    /* SET XVARIABLE */        02352700
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02352800
*  IF COMPUSER='COMPUSER' ! COMPUSER='()'    /*CHECK ENTRY*/            02352900
*    THEN                                                               02353000
*      DO;                                                              02353100
*        ZMS=' 8, THE "COMPUSER" KEY'!!      /**KOPTP* MSG*/            02353200
*            ' MUST CONTAIN ONE'!!                                      02353300
*            ' (OR MORE) ARGUMENT(S).';                                 02353400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02353500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02353600
*        ZMACRET=8;                          /* MACRO ERROR */          02353700
*      END;                                                             02353800
*  IF NUMBER(COMPUSER)>1                     /* CHECK POSITIONALS */    02353900
*    THEN                                                               02354000
*      DO;                                                              02354100
*        ZMS=' 8, "COMPUSER'!!               /**KPOSP* MSG*/            02354200
*            COMPUSER!!                                                 02354300
*            '" "COMPUSER"'!!                                           02354400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02354500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02354600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02354700
*        ZMACRET=8;                          /* MACRO ERROR */          02354800
*      END;                                                             02354900
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02355000
*  ZXCOMPUSER='INPUT';                       /* SET IN/OUTPUT */        02355100
*  XCOMPUSER='0';                            /* SET DEFAULT */          02355200
*  IF COMPUSER(1)^=''                        /* CHECK FOR NULL */       02355300
*    THEN                                                               02355400
*      XCOMPUSER=COMPUSER(1);                /* SET XVARIABLE */        02355500
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02355600
*  IF NUMBER(POOLTOKN)>1                     /* CHECK POSITIONALS */    02355700
*    THEN                                                               02355800
*      DO;                                                              02355900
*        ZMS=' 8, "POOLTOKN'!!               /**KPOSP* MSG*/            02356000
*            POOLTOKN!!                                                 02356100
*            '" "POOLTOKN"'!!                                           02356200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02356300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02356400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02356500
*        ZMACRET=8;                          /* MACRO ERROR */          02356600
*      END;                                                             02356700
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02356800
*  XPOOLTOKN=POOLTOKN(1);                    /* SET XVARIABLE */        02356900
*  IF POOLTOKN(1)=''                         /* CHECK FOR NULL */       02357000
*   THEN                                                                02357100
*    DO;                                     /* KEY IS REQUIRED */      02357200
*        ZXPOOLTOKN='';                      /* RESET IN/OUTPUT */      02357300
*        ZMS=' 8,  '!!                                                  02357400
*            ' "POOLTOKN" KEY AND ITS'!!                                02357500
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            02357600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02357700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02357800
*        ZMACRET=8;                          /* MACRO ERROR */          02357900
*    END;                                                               02358000
*  ELSE                                                                 02358100
*    ZXPOOLTOKN='INPUT';                     /* SET IN/OUTPUT */        02358200
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02358300
*  IF TASKID='TASKID' ! TASKID='()'          /*CHECK ENTRY*/            02358400
*    THEN                                                               02358500
*      DO;                                                              02358600
*        ZMS=' 8, THE "TASKID" KEY'!!        /**KOPTP* MSG*/            02358700
*            ' MUST CONTAIN ONE'!!                                      02358800
*            ' (OR MORE) ARGUMENT(S).';                                 02358900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02359000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02359100
*        ZMACRET=8;                          /* MACRO ERROR */          02359200
*      END;                                                             02359300
*  IF NUMBER(TASKID)>1                       /* CHECK POSITIONALS */    02359400
*    THEN                                                               02359500
*      DO;                                                              02359600
*        ZMS=' 8, "TASKID'!!                 /**KPOSP* MSG*/            02359700
*            TASKID!!                                                   02359800
*            '" "TASKID"'!!                                             02359900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02360000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02360100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02360200
*        ZMACRET=8;                          /* MACRO ERROR */          02360300
*      END;                                                             02360400
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02360500
*  ZXTASKID='INPUT';                         /* SET IN/OUTPUT */        02360600
*  XTASKID='0';                              /* SET DEFAULT */          02360700
*  IF TASKID(1)^=''                          /* CHECK FOR NULL */       02360800
*    THEN                                                               02360900
*      XTASKID=TASKID(1);                    /* SET XVARIABLE */        02361000
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02361100
*  IF THREAD='THREAD' ! THREAD='()'          /*CHECK ENTRY*/            02361200
*    THEN                                                               02361300
*      DO;                                                              02361400
*        ZMS=' 8, THE "THREAD" KEY'!!        /**KOPTP* MSG*/            02361500
*            ' MUST CONTAIN ONE'!!                                      02361600
*            ' (OR MORE) ARGUMENT(S).';                                 02361700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02361800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02361900
*        ZMACRET=8;                          /* MACRO ERROR */          02362000
*      END;                                                             02362100
*  IF NUMBER(THREAD)>1                       /* CHECK POSITIONALS */    02362200
*    THEN                                                               02362300
*      DO;                                                              02362400
*        ZMS=' 8, "THREAD'!!                 /**KPOSP* MSG*/            02362500
*            THREAD!!                                                   02362600
*            '" "THREAD"'!!                                             02362700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02362800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02362900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02363000
*        ZMACRET=8;                          /* MACRO ERROR */          02363100
*      END;                                                             02363200
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02363300
*  ZXTHREAD='INPUT';                         /* SET IN/OUTPUT */        02363400
*  XTHREAD='0';                              /* SET DEFAULT */          02363500
*  IF THREAD(1)^=''                          /* CHECK FOR NULL */       02363600
*    THEN                                                               02363700
*      XTHREAD=THREAD(1);                    /* SET XVARIABLE */        02363800
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02363900
*  IF UTILRTN='UTILRTN' ! UTILRTN='()'       /*CHECK ENTRY*/            02364000
*    THEN                                                               02364100
*      DO;                                                              02364200
*        ZMS=' 8, THE "UTILRTN" KEY'!!       /**KOPTP* MSG*/            02364300
*            ' MUST CONTAIN ONE'!!                                      02364400
*            ' (OR MORE) ARGUMENT(S).';                                 02364500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02364600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02364700
*        ZMACRET=8;                          /* MACRO ERROR */          02364800
*      END;                                                             02364900
*  IF NUMBER(UTILRTN)>1                      /* CHECK POSITIONALS */    02365000
*    THEN                                                               02365100
*      DO;                                                              02365200
*        ZMS=' 8, "UTILRTN'!!                /**KPOSP* MSG*/            02365300
*            UTILRTN!!                                                  02365400
*            '" "UTILRTN"'!!                                            02365500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02365600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02365700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02365800
*        ZMACRET=8;                          /* MACRO ERROR */          02365900
*      END;                                                             02366000
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02366100
*  ZXUTILRTN='INPUT';                        /* SET IN/OUTPUT */        02366200
*  XUTILRTN='0';                             /* SET DEFAULT */          02366300
*  IF UTILRTN(1)^=''                         /* CHECK FOR NULL */       02366400
*    THEN                                                               02366500
*      XUTILRTN=UTILRTN(1);                  /* SET XVARIABLE */        02366600
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02366700
*  IF WAIT='WAIT'                            /* CHECK ENTRY */          02366800
*    THEN                                                               02366900
*      DO;                                                              02367000
*        ZMS=' 8, THE "WAIT" KEY'!!          /**KOPTP* MSG*/            02367100
*            ' MUST CONTAIN ONE'!!                                      02367200
*            ' (OR MORE) ARGUMENT(S).';                                 02367300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02367400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02367500
*        ZMACRET=8;                          /* MACRO ERROR */          02367600
*      END;                                                             02367700
*  IF NUMBER(WAIT)>1                         /* CHECK POSITIONALS */    02367800
*    THEN                                                               02367900
*      DO;                                                              02368000
*        ZMS=' 8, "WAIT'!!                   /**KPOSP* MSG*/            02368100
*            WAIT!!                                                     02368200
*            '" "WAIT"'!!                                               02368300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02368400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02368500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02368600
*        ZMACRET=8;                          /* MACRO ERROR */          02368700
*      END;                                                             02368800
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02368900
*  XWAIT='';                                 /* RESET XVARIABLE */      02369000
*  IF TRANSLATE(WAIT(1))                                                02369100
*              = 'NO'                        /* CHECK FOR KEYWORD */    02369200
*    THEN                                                               02369300
*      XWAIT = 'NO';                         /* SET XVARIABLE */        02369400
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02369500
*  IF TRANSLATE(WAIT(1))                                                02369600
*              = 'YES'                       /* CHECK FOR KEYWORD */    02369700
*    THEN                                                               02369800
*      XWAIT = 'YES';                        /* SET XVARIABLE */        02369900
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02370000
*  IF TRANSLATE(WAIT(1))                                                02370100
*              = 'EXPAND'                    /* CHECK FOR KEYWORD */    02370200
*    THEN                                                               02370300
*      XWAIT = 'EXPAND';                     /* SET XVARIABLE */        02370400
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02370500
*  ZXWAIT='INPUT';                           /* SET IN/OUTPUT */        02370600
*  IF XWAIT=''                               /* CHECK FOR KEYWORD */    02370700
*    THEN                                                               02370800
*      DO;                                   /* KEYWORD NOT ENTERED */  02370900
*        XWAIT='NO';                         /* SET DEFAULT */          02371000
*        IF WAIT(1)^=''                                                 02371100
*          THEN                                                         02371200
*            DO;                                                        02371300
*              ZXWAIT='';                    /* RESET IN/OUTPUT */      02371400
*              ZMS=' 8, "WAIT'!!             /**KUKWP* MSG*/            02371500
*                  WAIT!!'"'!!                                          02371600
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02371700
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02371800
*                  ' "NO",'!!                /* VALID KEYWORD */        02371900
*                  ' "YES",'!!               /* VALID KEYWORD */        02372000
*                  ' OR "EXPAND".';          /* VALID KEYWORD */        02372100
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02372200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02372300
*              ZMACRET=8;                    /* MACRO ERROR */          02372400
*            END;                                                       02372500
*      END;                                                             02372600
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02372700
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     02372800
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02372900
*  IF TRANSLATE(REQUEST(1))                                             02373000
*              = 'PAGE_BUFFER'               /* CHECK FOR KEYWORD */    02373100
*    THEN                                                               02373200
*      DO;                                                              02373300
*        XREQUEST='PAGE_BUFFER';             /* SET XVARIABLE */        02373400
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    02373500
*          THEN                                                         02373600
*            DO;                                                        02373700
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            02373800
*                  REQUEST!!                                            02373900
*                  '" "REQUEST"'!!                                      02374000
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02374100
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02374200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02374300
*              ZMACRET=8;                    /* MACRO ERROR */          02374400
*            END;                                                       02374500
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02374600
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 02374700
*        IF CSMUSER^=''                      /* CHECK FOR KEY */        02374800
*          THEN                                                         02374900
*            ZCVAL=ZCVAL!!',CSMUSER';        /* INCORRECT KEY USED */   02375000
*        IF OWNERID^=''                      /* CHECK FOR KEY */        02375100
*          THEN                                                         02375200
*            ZCVAL=ZCVAL!!',OWNERID';        /* INCORRECT KEY USED */   02375300
*        IF TASKID^=''                       /* CHECK FOR KEY */        02375400
*          THEN                                                         02375500
*            ZCVAL=ZCVAL!!',TASKID';         /* INCORRECT KEY USED */   02375600
*        IF SKIPBUF^=''                      /* CHECK FOR KEY */        02375700
*          THEN                                                         02375800
*            ZCVAL=ZCVAL!!',SKIPBUF';        /* INCORRECT KEY USED */   02375900
*        IF PAD^=''                          /* CHECK FOR KEY */        02376000
*          THEN                                                         02376100
*            ZCVAL=ZCVAL!!',PAD';            /* INCORRECT KEY USED */   02376200
*        IF PADCHAR^=''                      /* CHECK FOR KEY */        02376300
*          THEN                                                         02376400
*            ZCVAL=ZCVAL!!',PADCHAR';        /* INCORRECT KEY USED */   02376500
*        IF SRCERRL^=''                      /* CHECK FOR KEY */        02376600
*          THEN                                                         02376700
*            ZCVAL=ZCVAL!!',SRCERRL';        /* INCORRECT KEY USED */   02376800
*        IF SRCGAP^=''                       /* CHECK FOR KEY */        02376900
*          THEN                                                         02377000
*            ZCVAL=ZCVAL!!',SRCGAP';         /* INCORRECT KEY USED */   02377100
*        IF SRCLIST^=''                      /* CHECK FOR KEY */        02377200
*          THEN                                                         02377300
*            ZCVAL=ZCVAL!!',SRCLIST';        /* INCORRECT KEY USED */   02377400
*        IF SRCLST64^=''                     /* CHECK FOR KEY */        02377500
*          THEN                                                         02377600
*            ZCVAL=ZCVAL!!',SRCLST64';       /* INCORRECT KEY USED */   02377700
*        IF SRCNUM^=''                       /* CHECK FOR KEY */        02377800
*          THEN                                                         02377900
*            ZCVAL=ZCVAL!!',SRCNUM';         /* INCORRECT KEY USED */   02378000
*        IF TARGERRL^=''                     /* CHECK FOR KEY */        02378100
*          THEN                                                         02378200
*            ZCVAL=ZCVAL!!',TARGERRL';       /* INCORRECT KEY USED */   02378300
*        IF TARGGAP^=''                      /* CHECK FOR KEY */        02378400
*          THEN                                                         02378500
*            ZCVAL=ZCVAL!!',TARGGAP';        /* INCORRECT KEY USED */   02378600
*        IF TARGLIST^=''                     /* CHECK FOR KEY */        02378700
*          THEN                                                         02378800
*            ZCVAL=ZCVAL!!',TARGLIST';       /* INCORRECT KEY USED */   02378900
*        IF TARLST64^=''                     /* CHECK FOR KEY */        02379000
*          THEN                                                         02379100
*            ZCVAL=ZCVAL!!',TARLST64';       /* INCORRECT KEY USED */   02379200
*        IF TARGNUM^=''                      /* CHECK FOR KEY */        02379300
*          THEN                                                         02379400
*            ZCVAL=ZCVAL!!',TARGNUM';        /* INCORRECT KEY USED */   02379500
*        IF BUFSIZE^=''                      /* CHECK FOR KEY */        02379600
*          THEN                                                         02379700
*            ZCVAL=ZCVAL!!',BUFSIZE';        /* INCORRECT KEY USED */   02379800
*        IF BUFSOURC^=''                     /* CHECK FOR KEY */        02379900
*          THEN                                                         02380000
*            ZCVAL=ZCVAL!!',BUFSOURC';       /* INCORRECT KEY USED */   02380100
*        IF BACK^=''                         /* CHECK FOR KEY */        02380200
*          THEN                                                         02380300
*            ZCVAL=ZCVAL!!',BACK';           /* INCORRECT KEY USED */   02380400
*        IF DS_INFO^=''                      /* CHECK FOR KEY */        02380500
*          THEN                                                         02380600
*            ZCVAL=ZCVAL!!',DS_INFO';        /* INCORRECT KEY USED */   02380700
*        IF EXPBUF^=''                       /* CHECK FOR KEY */        02380800
*          THEN                                                         02380900
*            ZCVAL=ZCVAL!!',EXPBUF';         /* INCORRECT KEY USED */   02381000
*        IF INITBUF^=''                      /* CHECK FOR KEY */        02381100
*          THEN                                                         02381200
*            ZCVAL=ZCVAL!!',INITBUF';        /* INCORRECT KEY USED */   02381300
*        IF MINFREE^=''                      /* CHECK FOR KEY */        02381400
*          THEN                                                         02381500
*            ZCVAL=ZCVAL!!',MINFREE';        /* INCORRECT KEY USED */   02381600
*        IF RETPTOKN^=''                     /* CHECK FOR KEY */        02381700
*          THEN                                                         02381800
*            ZCVAL=ZCVAL!!',RETPTOKN';       /* INCORRECT KEY USED */   02381900
*        IF STATAREA^=''                     /* CHECK FOR KEY */        02382000
*          THEN                                                         02382100
*            ZCVAL=ZCVAL!!',STATAREA';       /* INCORRECT KEY USED */   02382200
*        IF POOLTOKN^=''                     /* CHECK FOR KEY */        02382300
*          THEN                                                         02382400
*            ZCVAL=ZCVAL!!',POOLTOKN';       /* INCORRECT KEY USED */   02382500
*        IF WAIT^=''                         /* CHECK FOR KEY */        02382600
*          THEN                                                         02382700
*            ZCVAL=ZCVAL!!',WAIT';           /* INCORRECT KEY USED */   02382800
*        IF CLEAR^=''                        /* CHECK FOR KEY */        02382900
*          THEN                                                         02383000
*            ZCVAL=ZCVAL!!',CLEAR';          /* INCORRECT KEY USED */   02383100
*        IF FREETO^=''                       /* CHECK FOR KEY */        02383200
*          THEN                                                         02383300
*            ZCVAL=ZCVAL!!',FREETO';         /* INCORRECT KEY USED */   02383400
*        IF FREERTN^=''                      /* CHECK FOR KEY */        02383500
*          THEN                                                         02383600
*            ZCVAL=ZCVAL!!',FREERTN';        /* INCORRECT KEY USED */   02383700
*        IF ZCVAL^=''                                                   02383800
*          THEN                                                         02383900
*            DO;                             /* INCORRECT KEYS USED */  02384000
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            02384100
*              ZMS=' 8, "REQUEST'!!          /**KMEIP* MSG*/            02384200
*                  REQUEST!!'"'!!                                       02384300
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   02384400
*                  ' FOLLOWING KEY(S) "'!!                              02384500
*                  ZCVAL!!'".';                                         02384600
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02384700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02384800
*              ZMACRET=8;                    /* MACRO ERROR */          02384900
*            END;                                                       02385000
*/*PG.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02385100
*  XDUMMY8='';                               /* RESET XVARIABLE */      02385200
*  IF BUFLIST^=''                            /* CHECK ME KEY */         02385300
*    THEN                                                               02385400
*      DO;                                   /* VALID ME KEY */         02385500
*        IF NUMBER(BUFLIST)>1                /* CHECK SUBLISTS */       02385600
*          THEN                                                         02385700
*            DO;                                                        02385800
*              ZMS=' 8, "BUFLIST'!!          /**KPOSP* MSG*/            02385900
*                  BUFLIST!!                                            02386000
*                  '" "BUFLIST"'!!                                      02386100
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02386200
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02386300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02386400
*              ZMACRET=8;                    /* MACRO ERROR */          02386500
*            END;                                                       02386600
*        XDUMMY8='BUFLIST';                  /* SET XVARIABLE */        02386700
*        XBUFLIST=BUFLIST(1);                /* SET XVARIABLE */        02386800
*        ZXDUMMY8='INPUT';                   /* SET IN/OUTPUT */        02386900
*        ZXBUFLIST='INPUT';                  /* SET IN/OUTPUT */        02387000
*        IF BUFLIST(1)=''                    /* CHECK ME KEY */         02387100
*          THEN                                                         02387200
*            DO;                                                        02387300
*              ZXDUMMY8='';                  /* RESET IN/OUTPUT */      02387400
*              ZXBUFLIST='';                 /* RESET IN/OUTPUT */      02387500
*              ZMS=' 8,  '!!                                            02387600
*                  ' "BUFLIST" KEY AND ITS'!!                           02387700
*                  ' ARGUMENT ARE REQUIRED.'; /**KRQDP* MSG*/           02387800
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02387900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02388000
*              ZMACRET=8;                    /* MACRO ERROR */          02388100
*           END;                                                        02388200
*      END;                                                             02388300
*/*PG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02388400
*  IF BUFLST64^=''                           /* CHECK ME KEY */         02388500
*    THEN                                                               02388600
*      DO;                                                              02388700
*        IF NUMBER(BUFLST64)>1               /* CHECK SUBLISTS */       02388800
*          THEN                                                         02388900
*            DO;                                                        02389000
*              ZMS=' 8, "BUFLST64'!!         /**KPOSP* MSG*/            02389100
*                  BUFLST64!!                                           02389200
*                  '" "BUFLST64"'!!                                     02389300
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02389400
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02389500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02389600
*              ZMACRET=8;                    /* MACRO ERROR */          02389700
*            END;                                                       02389800
*        IF XDUMMY8=''                       /* CHECK XVARIABLE */      02389900
*          THEN                                                         02390000
*            DO;                             /* VALID ME KEY */         02390100
*              XDUMMY8='BUFLST64';           /* SET XVAR1 */            02390200
*              XBUFLST64=BUFLST64(1);        /* SET XVAR2 */            02390300
*              ZXDUMMY8='INPUT';             /* SET IN/OUTPUT */        02390400
*              ZXBUFLST64='INPUT';           /* SET IN/OUTPUT */        02390500
*              IF BUFLST64(1)=''             /* CHECK ME KEY */         02390600
*                THEN                                                   02390700
*                  DO;                                                  02390800
*                    ZXDUMMY8='';            /* RESET IN/OUTPUT */      02390900
*                    ZXBUFLST64='';          /* RESET IN/OUTPUT */      02391000
*                    ZMS=' 8,  '!!                                      02391100
*                        ' "BUFLST64" KEY AND ITS'!!                    02391200
*                        ' ARGUMENT ARE REQUIRED.'; /**KRQDP* MSG*/     02391300
*                    ANS MSG('?IVTCSM ---> '!!ZMS);                     02391400
*                    ANS(COMMENT(ZMS)) COL(MACLMAR);                    02391500
*                    ZMACRET=8;              /* MACRO ERROR */          02391600
*                  END;                                                 02391700
*            END;                                                       02391800
*          ELSE                                                         02391900
*            DO;                                                        02392000
*              ZMS=' 8, "BUFLST64'!!         /**KMEKP* MSG*/            02392100
*                  BUFLST64!!'"'!!                                      02392200
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'!!                02392300
*                  XDUMMY8!!                                            02392400
*                  '" KEY.';                                            02392500
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02392600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02392700
*              ZMACRET=8;                    /* MACRO ERROR */          02392800
*            END;                                                       02392900
*      END;                                                             02393000
*/*PG.KMEKY08 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 02393100
*  IF XDUMMY8=''                             /* CHECK XVARIABLE */      02393200
*    THEN                                                               02393300
*      DO;                                                              02393400
*        XDUMMY8='BUFLIST';                  /* SET DEFAULT */          02393500
*        XBUFLIST='0';                       /* SET DEFAULT */          02393600
*        ZXDUMMY8='';                        /* RESET IN/OUTPUT */      02393700
*        ZXBUFLIST='';                       /* RESET IN/OUTPUT */      02393800
*        ZMS=' 8, ONE OF THE FOLLOWING'!!    /**KMERP* MSG*/            02393900
*            ' MUTUALLY EXCLUSIVE KEY(S) IS'!!                          02394000
*            ' REQUIRED:'!!                                             02394100
*            ' "BUFLIST"'!!                  /* VALID ME KEY */         02394200
*            ' OR "BUFLST64".';              /* VALID ME KEY */         02394300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02394400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02394500
*        ZMACRET=8;                          /* MACRO ERROR */          02394600
*      END;                                                             02394700
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02394800
*  IF NUMBER(BUFNUM)>1                       /* CHECK POSITIONALS */    02394900
*    THEN                                                               02395000
*      DO;                                                              02395100
*        ZMS=' 8, "BUFNUM'!!                 /**KPOSP* MSG*/            02395200
*            BUFNUM!!                                                   02395300
*            '" "BUFNUM"'!!                                             02395400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02395500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02395600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02395700
*        ZMACRET=8;                          /* MACRO ERROR */          02395800
*      END;                                                             02395900
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02396000
*  XBUFNUM=BUFNUM(1);                        /* SET XVARIABLE */        02396100
*  IF BUFNUM(1)=''                           /* CHECK FOR NULL */       02396200
*   THEN                                                                02396300
*    DO;                                     /* KEY IS REQUIRED */      02396400
*        ZXBUFNUM='';                        /* RESET IN/OUTPUT */      02396500
*        ZMS=' 8,  '!!                                                  02396600
*            ' "BUFNUM" KEY AND ITS'!!                                  02396700
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            02396800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02396900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02397000
*        ZMACRET=8;                          /* MACRO ERROR */          02397100
*    END;                                                               02397200
*  ELSE                                                                 02397300
*    ZXBUFNUM='INPUT';                       /* SET IN/OUTPUT */        02397400
*/*PG.KKWRD01 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02397500
*  IF NUMBER(BUFTYPE)>1                      /* CHECK POSITIONALS */    02397600
*    THEN                                                               02397700
*      DO;                                                              02397800
*        ZMS=' 8, "BUFTYPE'!!                /**KPOSP* MSG*/            02397900
*            BUFTYPE!!                                                  02398000
*            '" "BUFTYPE"'!!                                            02398100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02398200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02398300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02398400
*        ZMACRET=8;                          /* MACRO ERROR */          02398500
*      END;                                                             02398600
*/*PG.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02398700
*  XBUFTYPE='';                              /* RESET XVARIABLE */      02398800
*  IF TRANSLATE(BUFTYPE(1))                                             02398900
*              = 'PAGEELIG'                  /* CHECK FOR KEYWORD */    02399000
*    THEN                                                               02399100
*      XBUFTYPE = 'PAGEELIG';                /* SET XVARIABLE */        02399200
*/*PG.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02399300
*  IF TRANSLATE(BUFTYPE(1))                                             02399400
*              = 'PAGEABLE'                  /* CHECK FOR KEYWORD */    02399500
*    THEN                                                               02399600
*      XBUFTYPE = 'PAGEABLE';                /* SET XVARIABLE */        02399700
*/*PG.KKWRD03 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02399800
*  ZXBUFTYPE='INPUT';                        /* SET IN/OUTPUT */        02399900
*  IF XBUFTYPE=''                            /* CHECK FOR KEYWORD */    02400000
*    THEN                                                               02400100
*      DO;                                   /* KEYWORD NOT ENTERED */  02400200
*        XBUFTYPE='PAGEELIG';                /* SET DEFAULT */          02400300
*        IF BUFTYPE(1)^=''                                              02400400
*          THEN                                                         02400500
*            DO;                                                        02400600
*              ZXBUFTYPE='';                 /* RESET IN/OUTPUT */      02400700
*              ZMS=' 8, "BUFTYPE'!!          /**KUKWP* MSG*/            02400800
*                  BUFTYPE!!'"'!!                                       02400900
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02401000
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02401100
*                  ' "PAGEELIG"'!!           /* VALID KEYWORD */        02401200
*                  ' OR "PAGEABLE".';        /* VALID KEYWORD */        02401300
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02401400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02401500
*              ZMACRET=8;                    /* MACRO ERROR */          02401600
*            END;                                                       02401700
*      END;                                                             02401800
*/*PG.KKWRD04 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02401900
*  IF BUFTYPE(1)=''                          /* CHECK FOR KEYWORD */    02402000
*    THEN                                                               02402100
*      DO;                                   /* KEYWORD NOT ENTERED */  02402200
*        ZXBUFTYPE='';                       /* RESET IN/OUTPUT */      02402300
*        ZMS=' 8, THE'!!                     /**KRKWP* MSG*/            02402400
*            ' "BUFTYPE" KEY AND ITS'!!                                 02402500
*            ' ARGUMENT ARE REQUIRED.'!!                                02402600
*            ' VALID KEYWORD CHOICE(S) ARE:'!!                          02402700
*            ' "PAGEELIG"'!!                 /* VALID KEYWORD */        02402800
*            ' OR "PAGEABLE".';              /* VALID KEYWORD */        02402900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02403000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02403100
*        ZMACRET=8;                          /* MACRO ERROR */          02403200
*      END;                                                             02403300
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02403400
*  IF GAP='GAP' ! GAP='()'                   /*CHECK ENTRY*/            02403500
*    THEN                                                               02403600
*      DO;                                                              02403700
*        ZMS=' 8, THE "GAP" KEY'!!           /**KOPTP* MSG*/            02403800
*            ' MUST CONTAIN ONE'!!                                      02403900
*            ' (OR MORE) ARGUMENT(S).';                                 02404000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02404100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02404200
*        ZMACRET=8;                          /* MACRO ERROR */          02404300
*      END;                                                             02404400
*  IF NUMBER(GAP)>1                          /* CHECK POSITIONALS */    02404500
*    THEN                                                               02404600
*      DO;                                                              02404700
*        ZMS=' 8, "GAP'!!                    /**KPOSP* MSG*/            02404800
*            GAP!!                                                      02404900
*            '" "GAP"'!!                                                02405000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02405100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02405200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02405300
*        ZMACRET=8;                          /* MACRO ERROR */          02405400
*      END;                                                             02405500
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02405600
*  ZXGAP='INPUT';                            /* SET IN/OUTPUT */        02405700
*  XGAP='0';                                 /* SET DEFAULT */          02405800
*  IF GAP(1)^=''                             /* CHECK FOR NULL */       02405900
*    THEN                                                               02406000
*      XGAP=GAP(1);                          /* SET XVARIABLE */        02406100
*/*PG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START-----------*/ 02406200
*  IF XMF^='M'                               /* BYPASS IF MF=M */       02406300
*    THEN                                                               02406400
*      DO;                                                              02406500
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02406600
*  IF ERRBFLST='ERRBFLST' ! ERRBFLST='()'    /*CHECK ENTRY*/            02406700
*    THEN                                                               02406800
*      DO;                                                              02406900
*        ZMS=' 8, THE "ERRBFLST" KEY'!!      /**KOPTP* MSG*/            02407000
*            ' MUST CONTAIN ONE'!!                                      02407100
*            ' (OR MORE) ARGUMENT(S).';                                 02407200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02407300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02407400
*        ZMACRET=8;                          /* MACRO ERROR */          02407500
*      END;                                                             02407600
*  IF NUMBER(ERRBFLST)>1                     /* CHECK POSITIONALS */    02407700
*    THEN                                                               02407800
*      DO;                                                              02407900
*        ZMS=' 8, "ERRBFLST'!!               /**KPOSP* MSG*/            02408000
*            ERRBFLST!!                                                 02408100
*            '" "ERRBFLST"'!!                                           02408200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02408300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02408400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02408500
*        ZMACRET=8;                          /* MACRO ERROR */          02408600
*      END;                                                             02408700
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02408800
*  IF ERRBFLST(1)^=''                        /* CHECK FOR NULL */       02408900
*    THEN                                                               02409000
*      DO;                                                              02409100
*        XERRBFLST=ERRBFLST(1);              /* SET XVARIABLE */        02409200
*        ZXERRBFLST='OUTPUT';                /* SET OUTPUT */           02409300
*      END;                                                             02409400
*  ELSE                                                                 02409500
*    IF ZXERRBFLST^=''                                                  02409600
*      THEN                                                             02409700
*        ZXERRBFLST='';                      /* RESET OUTPUT */         02409800
*/*PG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END-------------*/ 02409900
*      END;  /**** END OF BYPASS CHECK */                               02410000
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02410100
*  IF COMPID='COMPID' ! COMPID='()'          /*CHECK ENTRY*/            02410200
*    THEN                                                               02410300
*      DO;                                                              02410400
*        ZMS=' 8, THE "COMPID" KEY'!!        /**KOPTP* MSG*/            02410500
*            ' MUST CONTAIN ONE'!!                                      02410600
*            ' (OR MORE) ARGUMENT(S).';                                 02410700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02410800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02410900
*        ZMACRET=8;                          /* MACRO ERROR */          02411000
*      END;                                                             02411100
*  IF NUMBER(COMPID)>1                       /* CHECK POSITIONALS */    02411200
*    THEN                                                               02411300
*      DO;                                                              02411400
*        ZMS=' 8, "COMPID'!!                 /**KPOSP* MSG*/            02411500
*            COMPID!!                                                   02411600
*            '" "COMPID"'!!                                             02411700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02411800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02411900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02412000
*        ZMACRET=8;                          /* MACRO ERROR */          02412100
*      END;                                                             02412200
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02412300
*  ZXCOMPID='INPUT';                         /* SET IN/OUTPUT */        02412400
*  XCOMPID='0';                              /* SET DEFAULT */          02412500
*  IF COMPID(1)^=''                          /* CHECK FOR NULL */       02412600
*    THEN                                                               02412700
*      XCOMPID=COMPID(1);                    /* SET XVARIABLE */        02412800
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02412900
*  IF COMPUSER='COMPUSER' ! COMPUSER='()'    /*CHECK ENTRY*/            02413000
*    THEN                                                               02413100
*      DO;                                                              02413200
*        ZMS=' 8, THE "COMPUSER" KEY'!!      /**KOPTP* MSG*/            02413300
*            ' MUST CONTAIN ONE'!!                                      02413400
*            ' (OR MORE) ARGUMENT(S).';                                 02413500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02413600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02413700
*        ZMACRET=8;                          /* MACRO ERROR */          02413800
*      END;                                                             02413900
*  IF NUMBER(COMPUSER)>1                     /* CHECK POSITIONALS */    02414000
*    THEN                                                               02414100
*      DO;                                                              02414200
*        ZMS=' 8, "COMPUSER'!!               /**KPOSP* MSG*/            02414300
*            COMPUSER!!                                                 02414400
*            '" "COMPUSER"'!!                                           02414500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02414600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02414700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02414800
*        ZMACRET=8;                          /* MACRO ERROR */          02414900
*      END;                                                             02415000
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02415100
*  ZXCOMPUSER='INPUT';                       /* SET IN/OUTPUT */        02415200
*  XCOMPUSER='0';                            /* SET DEFAULT */          02415300
*  IF COMPUSER(1)^=''                        /* CHECK FOR NULL */       02415400
*    THEN                                                               02415500
*      XCOMPUSER=COMPUSER(1);                /* SET XVARIABLE */        02415600
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02415700
*  IF THREAD='THREAD' ! THREAD='()'          /*CHECK ENTRY*/            02415800
*    THEN                                                               02415900
*      DO;                                                              02416000
*        ZMS=' 8, THE "THREAD" KEY'!!        /**KOPTP* MSG*/            02416100
*            ' MUST CONTAIN ONE'!!                                      02416200
*            ' (OR MORE) ARGUMENT(S).';                                 02416300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02416400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02416500
*        ZMACRET=8;                          /* MACRO ERROR */          02416600
*      END;                                                             02416700
*  IF NUMBER(THREAD)>1                       /* CHECK POSITIONALS */    02416800
*    THEN                                                               02416900
*      DO;                                                              02417000
*        ZMS=' 8, "THREAD'!!                 /**KPOSP* MSG*/            02417100
*            THREAD!!                                                   02417200
*            '" "THREAD"'!!                                             02417300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02417400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02417500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02417600
*        ZMACRET=8;                          /* MACRO ERROR */          02417700
*      END;                                                             02417800
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02417900
*  ZXTHREAD='INPUT';                         /* SET IN/OUTPUT */        02418000
*  XTHREAD='0';                              /* SET DEFAULT */          02418100
*  IF THREAD(1)^=''                          /* CHECK FOR NULL */       02418200
*    THEN                                                               02418300
*      XTHREAD=THREAD(1);                    /* SET XVARIABLE */        02418400
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02418500
*  IF UTILRTN='UTILRTN' ! UTILRTN='()'       /*CHECK ENTRY*/            02418600
*    THEN                                                               02418700
*      DO;                                                              02418800
*        ZMS=' 8, THE "UTILRTN" KEY'!!       /**KOPTP* MSG*/            02418900
*            ' MUST CONTAIN ONE'!!                                      02419000
*            ' (OR MORE) ARGUMENT(S).';                                 02419100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02419200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02419300
*        ZMACRET=8;                          /* MACRO ERROR */          02419400
*      END;                                                             02419500
*  IF NUMBER(UTILRTN)>1                      /* CHECK POSITIONALS */    02419600
*    THEN                                                               02419700
*      DO;                                                              02419800
*        ZMS=' 8, "UTILRTN'!!                /**KPOSP* MSG*/            02419900
*            UTILRTN!!                                                  02420000
*            '" "UTILRTN"'!!                                            02420100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02420200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02420300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02420400
*        ZMACRET=8;                          /* MACRO ERROR */          02420500
*      END;                                                             02420600
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02420700
*  ZXUTILRTN='INPUT';                        /* SET IN/OUTPUT */        02420800
*  XUTILRTN='0';                             /* SET DEFAULT */          02420900
*  IF UTILRTN(1)^=''                         /* CHECK FOR NULL */       02421000
*    THEN                                                               02421100
*      XUTILRTN=UTILRTN(1);                  /* SET XVARIABLE */        02421200
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02421300
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     02421400
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02421500
*  IF TRANSLATE(REQUEST(1))                                             02421600
*              = 'RESOURCE_STATS'            /* CHECK FOR KEYWORD */    02421700
*    THEN                                                               02421800
*      DO;                                                              02421900
*        XREQUEST='RESOURCE_STATS';          /* SET XVARIABLE */        02422000
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    02422100
*          THEN                                                         02422200
*            DO;                                                        02422300
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            02422400
*                  REQUEST!!                                            02422500
*                  '" "REQUEST"'!!                                      02422600
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02422700
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02422800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02422900
*              ZMACRET=8;                    /* MACRO ERROR */          02423000
*            END;                                                       02423100
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02423200
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 02423300
*        IF BUFLIST^=''                      /* CHECK FOR KEY */        02423400
*          THEN                                                         02423500
*            ZCVAL=ZCVAL!!',BUFLIST';        /* INCORRECT KEY USED */   02423600
*        IF BUFLST64^=''                     /* CHECK FOR KEY */        02423700
*          THEN                                                         02423800
*            ZCVAL=ZCVAL!!',BUFLST64';       /* INCORRECT KEY USED */   02423900
*        IF BUFNUM^=''                       /* CHECK FOR KEY */        02424000
*          THEN                                                         02424100
*            ZCVAL=ZCVAL!!',BUFNUM';         /* INCORRECT KEY USED */   02424200
*        IF BUFTYPE^=''                      /* CHECK FOR KEY */        02424300
*          THEN                                                         02424400
*            ZCVAL=ZCVAL!!',BUFTYPE';        /* INCORRECT KEY USED */   02424500
*        IF CSMUSER^=''                      /* CHECK FOR KEY */        02424600
*          THEN                                                         02424700
*            ZCVAL=ZCVAL!!',CSMUSER';        /* INCORRECT KEY USED */   02424800
*        IF GAP^=''                          /* CHECK FOR KEY */        02424900
*          THEN                                                         02425000
*            ZCVAL=ZCVAL!!',GAP';            /* INCORRECT KEY USED */   02425100
*        IF ERRBFLST^=''                     /* CHECK FOR KEY */        02425200
*          THEN                                                         02425300
*            ZCVAL=ZCVAL!!',ERRBFLST';       /* INCORRECT KEY USED */   02425400
*        IF OWNERID^=''                      /* CHECK FOR KEY */        02425500
*          THEN                                                         02425600
*            ZCVAL=ZCVAL!!',OWNERID';        /* INCORRECT KEY USED */   02425700
*        IF COMPID^=''                       /* CHECK FOR KEY */        02425800
*          THEN                                                         02425900
*            ZCVAL=ZCVAL!!',COMPID';         /* INCORRECT KEY USED */   02426000
*        IF COMPUSER^=''                     /* CHECK FOR KEY */        02426100
*          THEN                                                         02426200
*            ZCVAL=ZCVAL!!',COMPUSER';       /* INCORRECT KEY USED */   02426300
*        IF TASKID^=''                       /* CHECK FOR KEY */        02426400
*          THEN                                                         02426500
*            ZCVAL=ZCVAL!!',TASKID';         /* INCORRECT KEY USED */   02426600
*        IF THREAD^=''                       /* CHECK FOR KEY */        02426700
*          THEN                                                         02426800
*            ZCVAL=ZCVAL!!',THREAD';         /* INCORRECT KEY USED */   02426900
*        IF UTILRTN^=''                      /* CHECK FOR KEY */        02427000
*          THEN                                                         02427100
*            ZCVAL=ZCVAL!!',UTILRTN';        /* INCORRECT KEY USED */   02427200
*        IF SKIPBUF^=''                      /* CHECK FOR KEY */        02427300
*          THEN                                                         02427400
*            ZCVAL=ZCVAL!!',SKIPBUF';        /* INCORRECT KEY USED */   02427500
*        IF PAD^=''                          /* CHECK FOR KEY */        02427600
*          THEN                                                         02427700
*            ZCVAL=ZCVAL!!',PAD';            /* INCORRECT KEY USED */   02427800
*        IF PADCHAR^=''                      /* CHECK FOR KEY */        02427900
*          THEN                                                         02428000
*            ZCVAL=ZCVAL!!',PADCHAR';        /* INCORRECT KEY USED */   02428100
*        IF SRCERRL^=''                      /* CHECK FOR KEY */        02428200
*          THEN                                                         02428300
*            ZCVAL=ZCVAL!!',SRCERRL';        /* INCORRECT KEY USED */   02428400
*        IF SRCGAP^=''                       /* CHECK FOR KEY */        02428500
*          THEN                                                         02428600
*            ZCVAL=ZCVAL!!',SRCGAP';         /* INCORRECT KEY USED */   02428700
*        IF SRCLIST^=''                      /* CHECK FOR KEY */        02428800
*          THEN                                                         02428900
*            ZCVAL=ZCVAL!!',SRCLIST';        /* INCORRECT KEY USED */   02429000
*        IF SRCLST64^=''                     /* CHECK FOR KEY */        02429100
*          THEN                                                         02429200
*            ZCVAL=ZCVAL!!',SRCLST64';       /* INCORRECT KEY USED */   02429300
*        IF SRCNUM^=''                       /* CHECK FOR KEY */        02429400
*          THEN                                                         02429500
*            ZCVAL=ZCVAL!!',SRCNUM';         /* INCORRECT KEY USED */   02429600
*        IF TARGERRL^=''                     /* CHECK FOR KEY */        02429700
*          THEN                                                         02429800
*            ZCVAL=ZCVAL!!',TARGERRL';       /* INCORRECT KEY USED */   02429900
*        IF TARGGAP^=''                      /* CHECK FOR KEY */        02430000
*          THEN                                                         02430100
*            ZCVAL=ZCVAL!!',TARGGAP';        /* INCORRECT KEY USED */   02430200
*        IF TARGLIST^=''                     /* CHECK FOR KEY */        02430300
*          THEN                                                         02430400
*            ZCVAL=ZCVAL!!',TARGLIST';       /* INCORRECT KEY USED */   02430500
*        IF TARLST64^=''                     /* CHECK FOR KEY */        02430600
*          THEN                                                         02430700
*            ZCVAL=ZCVAL!!',TARLST64';       /* INCORRECT KEY USED */   02430800
*        IF TARGNUM^=''                      /* CHECK FOR KEY */        02430900
*          THEN                                                         02431000
*            ZCVAL=ZCVAL!!',TARGNUM';        /* INCORRECT KEY USED */   02431100
*        IF BUFSIZE^=''                      /* CHECK FOR KEY */        02431200
*          THEN                                                         02431300
*            ZCVAL=ZCVAL!!',BUFSIZE';        /* INCORRECT KEY USED */   02431400
*        IF BUFSOURC^=''                     /* CHECK FOR KEY */        02431500
*          THEN                                                         02431600
*            ZCVAL=ZCVAL!!',BUFSOURC';       /* INCORRECT KEY USED */   02431700
*        IF BACK^=''                         /* CHECK FOR KEY */        02431800
*          THEN                                                         02431900
*            ZCVAL=ZCVAL!!',BACK';           /* INCORRECT KEY USED */   02432000
*        IF DS_INFO^=''                      /* CHECK FOR KEY */        02432100
*          THEN                                                         02432200
*            ZCVAL=ZCVAL!!',DS_INFO';        /* INCORRECT KEY USED */   02432300
*        IF EXPBUF^=''                       /* CHECK FOR KEY */        02432400
*          THEN                                                         02432500
*            ZCVAL=ZCVAL!!',EXPBUF';         /* INCORRECT KEY USED */   02432600
*        IF INITBUF^=''                      /* CHECK FOR KEY */        02432700
*          THEN                                                         02432800
*            ZCVAL=ZCVAL!!',INITBUF';        /* INCORRECT KEY USED */   02432900
*        IF MINFREE^=''                      /* CHECK FOR KEY */        02433000
*          THEN                                                         02433100
*            ZCVAL=ZCVAL!!',MINFREE';        /* INCORRECT KEY USED */   02433200
*        IF RETPTOKN^=''                     /* CHECK FOR KEY */        02433300
*          THEN                                                         02433400
*            ZCVAL=ZCVAL!!',RETPTOKN';       /* INCORRECT KEY USED */   02433500
*        IF POOLTOKN^=''                     /* CHECK FOR KEY */        02433600
*          THEN                                                         02433700
*            ZCVAL=ZCVAL!!',POOLTOKN';       /* INCORRECT KEY USED */   02433800
*        IF WAIT^=''                         /* CHECK FOR KEY */        02433900
*          THEN                                                         02434000
*            ZCVAL=ZCVAL!!',WAIT';           /* INCORRECT KEY USED */   02434100
*        IF CLEAR^=''                        /* CHECK FOR KEY */        02434200
*          THEN                                                         02434300
*            ZCVAL=ZCVAL!!',CLEAR';          /* INCORRECT KEY USED */   02434400
*        IF FREETO^=''                       /* CHECK FOR KEY */        02434500
*          THEN                                                         02434600
*            ZCVAL=ZCVAL!!',FREETO';         /* INCORRECT KEY USED */   02434700
*        IF FREERTN^=''                      /* CHECK FOR KEY */        02434800
*          THEN                                                         02434900
*            ZCVAL=ZCVAL!!',FREERTN';        /* INCORRECT KEY USED */   02435000
*        IF ZCVAL^=''                                                   02435100
*          THEN                                                         02435200
*            DO;                             /* INCORRECT KEYS USED */  02435300
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            02435400
*              ZMS=' 8, "REQUEST'!!          /**KMEIP* MSG*/            02435500
*                  REQUEST!!'"'!!                                       02435600
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   02435700
*                  ' FOLLOWING KEY(S) "'!!                              02435800
*                  ZCVAL!!'".';                                         02435900
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02436000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02436100
*              ZMACRET=8;                    /* MACRO ERROR */          02436200
*            END;                                                       02436300
*/*PG.KMOUT01 BYPASS CHECK ON OUTPUT KEY PROCESSING -START-----------*/ 02436400
*  IF XMF^='M'                               /* BYPASS IF MF=M */       02436500
*    THEN                                                               02436600
*      DO;                                                              02436700
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02436800
*  IF STATAREA='STATAREA' ! STATAREA='()'    /*CHECK ENTRY*/            02436900
*    THEN                                                               02437000
*      DO;                                                              02437100
*        ZMS=' 8, THE "STATAREA" KEY'!!      /**KOPTP* MSG*/            02437200
*            ' MUST CONTAIN ONE'!!                                      02437300
*            ' (OR MORE) ARGUMENT(S).';                                 02437400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02437500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02437600
*        ZMACRET=8;                          /* MACRO ERROR */          02437700
*      END;                                                             02437800
*  IF NUMBER(STATAREA)>1                     /* CHECK POSITIONALS */    02437900
*    THEN                                                               02438000
*      DO;                                                              02438100
*        ZMS=' 8, "STATAREA'!!               /**KPOSP* MSG*/            02438200
*            STATAREA!!                                                 02438300
*            '" "STATAREA"'!!                                           02438400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02438500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02438600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02438700
*        ZMACRET=8;                          /* MACRO ERROR */          02438800
*      END;                                                             02438900
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02439000
*  IF STATAREA(1)^=''                        /* CHECK FOR NULL */       02439100
*    THEN                                                               02439200
*      DO;                                                              02439300
*        XSTATAREA=STATAREA(1);              /* SET XVARIABLE */        02439400
*        ZXSTATAREA='OUTPUT';                /* SET OUTPUT */           02439500
*      END;                                                             02439600
*  ELSE                                                                 02439700
*    IF ZXSTATAREA^=''                                                  02439800
*      THEN                                                             02439900
*        ZXSTATAREA='';                      /* RESET OUTPUT */         02440000
*/*PG.KMOUT02 BYPASS CHECK ON OUTPUT KEY PROCESSING -END-------------*/ 02440100
*      END;  /**** END OF BYPASS CHECK */                               02440200
*/*PG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02440300
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     02440400
*/*PG.KKCTL06 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02440500
*  IF REQUEST='REQUEST'                                                 02440600
*    ! REQUEST='()'                          /*CHECK ENTRY*/            02440700
*     THEN                                                              02440800
*       DO;                                                             02440900
*              ZMS=' 8, THE "REQUEST" KEY'!! /**KOPTP* MSG*/            02441000
*                  ' MUST CONTAIN ONE'!!                                02441100
*                  ' (OR MORE) ARGUMENT(S).';                           02441200
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02441300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02441400
*              ZMACRET=8;                    /* MACRO ERROR */          02441500
*       END;                                                            02441600
*  ELSE                                                                 02441700
*    DO;                                                                02441800
*      ZXREQUEST='INPUT';                    /* SET IN/OUTPUT */        02441900
*      IF XREQUEST=''                        /* CHECK FOR KEYWORD */    02442000
*        THEN                                                           02442100
*          DO;                               /* KEYWORD NOT ENTERED */  02442200
*            XREQUEST='ASSIGN_BUFFER';       /* SET DEFAULT */          02442300
*            IF REQUEST(1)^=''               /* CHECK FOR KEYWORD */    02442400
*              THEN                                                     02442500
*                DO;                                                    02442600
*                  ZXREQUEST='';             /* RESET IN/OUTPUT */      02442700
*              ZMS=' 8, "REQUEST'!!          /**KUKWP* MSG*/            02442800
*                  REQUEST!!'"'!!                                       02442900
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02443000
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02443100
*                  ' "ASSIGN_BUFFER",'!!     /* VALID KEYWORD */        02443200
*                  ' "CHANGE_OWNER",'!!      /* VALID KEYWORD */        02443300
*                  ' "COPY_DATA",'!!         /* VALID KEYWORD */        02443400
*                  ' "CREATE_POOL",'!!       /* VALID KEYWORD */        02443500
*                  ' "DELETE_POOL",'!!       /* VALID KEYWORD */        02443600
*                  ' "DUMP_INFO",'!!         /* VALID KEYWORD */        02443700
*                  ' "FIX_BUFFER",'!!        /* VALID KEYWORD */        02443800
*                  ' "FREE_BUFFER",'!!       /* VALID KEYWORD */        02443900
*                  ' "GET_BUFFER",'!!        /* VALID KEYWORD */        02444000
*                  ' "PAGE_BUFFER",'!!       /* VALID KEYWORD */        02444100
*                  ' OR "RESOURCE_STATS".';  /* VALID KEYWORD */        02444200
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02444300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02444400
*              ZMACRET=8;                    /* MACRO ERROR */          02444500
*                END;                                                   02444600
*          END;                                                         02444700
*    END;                                                               02444800
*/*PG.KKCTL07 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02444900
*  IF REQUEST(1)=''                          /* CHECK FOR KEYWORD */    02445000
*    THEN                                                               02445100
*      DO;                                                              02445200
*        ZXREQUEST='';                       /* RESET IN/OUTPUT */      02445300
*        ZMS=' 8, THE'!!                     /**KRKWP* MSG*/            02445400
*            ' "REQUEST" KEY AND ITS'!!                                 02445500
*            ' ARGUMENT ARE REQUIRED.'!!                                02445600
*            ' VALID KEYWORD CHOICE(S) ARE:'!!                          02445700
*            ' "ASSIGN_BUFFER",'!!           /* VALID KEYWORD */        02445800
*            ' "CHANGE_OWNER",'!!            /* VALID KEYWORD */        02445900
*            ' "COPY_DATA",'!!               /* VALID KEYWORD */        02446000
*            ' "CREATE_POOL",'!!             /* VALID KEYWORD */        02446100
*            ' "DELETE_POOL",'!!             /* VALID KEYWORD */        02446200
*            ' "DUMP_INFO",'!!               /* VALID KEYWORD */        02446300
*            ' "FIX_BUFFER",'!!              /* VALID KEYWORD */        02446400
*            ' "FREE_BUFFER",'!!             /* VALID KEYWORD */        02446500
*            ' "GET_BUFFER",'!!              /* VALID KEYWORD */        02446600
*            ' "PAGE_BUFFER",'!!             /* VALID KEYWORD */        02446700
*            ' OR "RESOURCE_STATS".';        /* VALID KEYWORD */        02446800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02446900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02447000
*        ZMACRET=8;                          /* MACRO ERROR */          02447100
*      END;                                                             02447200
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02447300
*  IF RETCODE='RETCODE' ! RETCODE='()'       /*CHECK ENTRY*/            02447400
*    THEN                                                               02447500
*      DO;                                                              02447600
*        ZMS=' 8, THE "RETCODE" KEY'!!       /**KOPTP* MSG*/            02447700
*            ' MUST CONTAIN ONE'!!                                      02447800
*            ' (OR MORE) ARGUMENT(S).';                                 02447900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02448000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02448100
*        ZMACRET=8;                          /* MACRO ERROR */          02448200
*      END;                                                             02448300
*  IF NUMBER(RETCODE)>1                      /* CHECK POSITIONALS */    02448400
*    THEN                                                               02448500
*      DO;                                                              02448600
*        ZMS=' 8, "RETCODE'!!                /**KPOSP* MSG*/            02448700
*            RETCODE!!                                                  02448800
*            '" "RETCODE"'!!                                            02448900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02449000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02449100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02449200
*        ZMACRET=8;                          /* MACRO ERROR */          02449300
*      END;                                                             02449400
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02449500
*  IF RETCODE(1)^=''                         /* CHECK FOR NULL */       02449600
*    THEN                                                               02449700
*      DO;                                                              02449800
*        XRETCODE=RETCODE(1);                /* SET XVARIABLE */        02449900
*        ZXRETCODE='OUTPUT';                 /* SET OUTPUT */           02450000
*      END;                                                             02450100
*  ELSE                                                                 02450200
*    IF ZXRETCODE^=''                                                   02450300
*      THEN                                                             02450400
*        ZXRETCODE='';                       /* RESET OUTPUT */         02450500
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02450600
*  IF RSNCODE='RSNCODE' ! RSNCODE='()'       /*CHECK ENTRY*/            02450700
*    THEN                                                               02450800
*      DO;                                                              02450900
*        ZMS=' 8, THE "RSNCODE" KEY'!!       /**KOPTP* MSG*/            02451000
*            ' MUST CONTAIN ONE'!!                                      02451100
*            ' (OR MORE) ARGUMENT(S).';                                 02451200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02451300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02451400
*        ZMACRET=8;                          /* MACRO ERROR */          02451500
*      END;                                                             02451600
*  IF NUMBER(RSNCODE)>1                      /* CHECK POSITIONALS */    02451700
*    THEN                                                               02451800
*      DO;                                                              02451900
*        ZMS=' 8, "RSNCODE'!!                /**KPOSP* MSG*/            02452000
*            RSNCODE!!                                                  02452100
*            '" "RSNCODE"'!!                                            02452200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02452300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02452400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02452500
*        ZMACRET=8;                          /* MACRO ERROR */          02452600
*      END;                                                             02452700
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02452800
*  IF RSNCODE(1)^=''                         /* CHECK FOR NULL */       02452900
*    THEN                                                               02453000
*      DO;                                                              02453100
*        XRSNCODE=RSNCODE(1);                /* SET XVARIABLE */        02453200
*        ZXRSNCODE='OUTPUT';                 /* SET OUTPUT */           02453300
*      END;                                                             02453400
*  ELSE                                                                 02453500
*    IF ZXRSNCODE^=''                                                   02453600
*      THEN                                                             02453700
*        ZXRSNCODE='';                       /* RESET OUTPUT */         02453800
*/*PG.P04 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 02453900
*      END;                                  /* END COMPLETE CHECKING*/ 02454000
*/********************************************************************/ 02454100
*/***PE.MF00 PARTIAL MACRO SYNTAX CHECKING                           */ 02454200
*/********************************************************************/ 02454300
*/*PE.MF01 XMF^='L' & XMFSCK='NOCHECK' ------------------------------*/ 02454400
*  IF XMF^='L' & XMFSCK='NOCHECK'                                       02454500
*    THEN                                                               02454600
*      DO;                                   /* PARTIAL SYNTAX CHECK */ 02454700
*/*PE.KC00 INITIALIZE KEYWORD CONTROL VARIABLES----------------------*/ 02454800
*  XREQUEST='';                        /*ejb rmp93*/                    02454900
*  XBUFTYPE='';                        /*ejb rmp93*/                    02455000
*  XCSMUSER='';                        /*ejb rmp93*/                    02455100
*  XSKIPBUF='';                        /*ejb rmp93*/                    02455200
*  XPAD='';                        /*ejb rmp93*/                        02455300
*  XBUFSOURC='';                        /*ejb rmp93*/                   02455400
*  XBACK='';                        /*ejb rmp93*/                       02455500
*  XWAIT='';                        /*ejb rmp93*/                       02455600
*  XCLEAR='';                        /*ejb rmp93*/                      02455700
*  XFREETO='';                        /*ejb rmp93*/                     02455800
*/*PE.P01 EXCESSIVE POSITIONALS--------------------------------------*/ 02455900
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */    02456000
*    THEN                                                               02456100
*      DO;                                                              02456200
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'!! /**PPOSP* MSG*/            02456300
*            ' "'!!MACLIST!!'"'!!                                       02456400
*            ' CANNOT BE USED.'!!                                       02456500
*            ' NO POSITIONAL ARGUMENTS'!!                               02456600
*            ' ARE ALLOWED.';                                           02456700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02456800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02456900
*        ZMACRET=8;                          /* MACRO ERROR */          02457000
*      END;                                                             02457100
*/*PE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02457200
*  IF TRANSLATE(REQUEST(1))                                             02457300
*              = 'ASSIGN_BUFFER'             /* CHECK FOR KEYWORD */    02457400
*    THEN                                                               02457500
*      DO;                                                              02457600
*        XREQUEST='ASSIGN_BUFFER';           /* SET XVARIABLE */        02457700
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    02457800
*          THEN                                                         02457900
*            DO;                                                        02458000
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            02458100
*                  REQUEST!!                                            02458200
*                  '" "REQUEST"'!!                                      02458300
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02458400
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02458500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02458600
*              ZMACRET=8;                    /* MACRO ERROR */          02458700
*            END;                                                       02458800
*      END;                                                             02458900
*/*PE.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02459000
*  XDUMMY1='';                               /* RESET XVARIABLE */      02459100
*  IF BUFLIST^=''                            /* CHECK ME KEY */         02459200
*    THEN                                                               02459300
*      DO;                                   /* VALID ME KEY */         02459400
*        IF NUMBER(BUFLIST)>1                /* CHECK SUBLISTS */       02459500
*          THEN                                                         02459600
*            DO;                                                        02459700
*              ZMS=' 8, "BUFLIST'!!          /**KPOSP* MSG*/            02459800
*                  BUFLIST!!                                            02459900
*                  '" "BUFLIST"'!!                                      02460000
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02460100
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02460200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02460300
*              ZMACRET=8;                    /* MACRO ERROR */          02460400
*            END;                                                       02460500
*        XDUMMY1='BUFLIST';                  /* SET XVARIABLE */        02460600
*        XBUFLIST=BUFLIST(1);                /* SET XVARIABLE */        02460700
*        ZXDUMMY1='INPUT';                   /* SET IN/OUTPUT */        02460800
*        ZXBUFLIST='INPUT';                  /* SET IN/OUTPUT */        02460900
*        IF BUFLIST(1)=''                    /* CHECK ME KEY */         02461000
*          THEN                                                         02461100
*            DO;                                                        02461200
*              ZXDUMMY1='';                  /* RESET IN/OUTPUT */      02461300
*              ZXBUFLIST='';                 /* RESET IN/OUTPUT */      02461400
*            END;                                                       02461500
*      END;                                                             02461600
*/*PE.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02461700
*  IF BUFLST64^=''                           /* CHECK ME KEY */         02461800
*    THEN                                                               02461900
*      DO;                                                              02462000
*        IF NUMBER(BUFLST64)>1               /* CHECK SUBLISTS */       02462100
*          THEN                                                         02462200
*            DO;                                                        02462300
*              ZMS=' 8, "BUFLST64'!!         /**KPOSP* MSG*/            02462400
*                  BUFLST64!!                                           02462500
*                  '" "BUFLST64"'!!                                     02462600
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02462700
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02462800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02462900
*              ZMACRET=8;                    /* MACRO ERROR */          02463000
*            END;                                                       02463100
*        IF XDUMMY1=''                       /* CHECK XVARIABLE */      02463200
*          THEN                                                         02463300
*            DO;                             /* VALID ME KEY */         02463400
*              XDUMMY1='BUFLST64';           /* SET XVAR1 */            02463500
*              XBUFLST64=BUFLST64(1);        /* SET XVAR2 */            02463600
*              ZXDUMMY1='INPUT';             /* SET IN/OUTPUT */        02463700
*              ZXBUFLST64='INPUT';           /* SET IN/OUTPUT */        02463800
*              IF BUFLST64(1)=''             /* CHECK ME KEY */         02463900
*                THEN                                                   02464000
*                  DO;                                                  02464100
*                    ZXDUMMY1='';            /* RESET IN/OUTPUT */      02464200
*                    ZXBUFLST64='';          /* RESET IN/OUTPUT */      02464300
*                  END;                                                 02464400
*            END;                                                       02464500
*          ELSE                                                         02464600
*            DO;                                                        02464700
*              ZMS=' 8, "BUFLST64'!!         /**KMEKP* MSG*/            02464800
*                  BUFLST64!!'"'!!                                      02464900
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'!!                02465000
*                  XDUMMY1!!                                            02465100
*                  '" KEY.';                                            02465200
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02465300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02465400
*              ZMACRET=8;                    /* MACRO ERROR */          02465500
*            END;                                                       02465600
*      END;                                                             02465700
*/*PE.KMEKY05 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT RESETS--------*/ 02465800
*  IF XDUMMY1=''                             /* CHECK XVARIABLE */      02465900
*    THEN                                                               02466000
*      DO;                                                              02466100
*        XDUMMY1='';                         /* RESET DEFAULT */        02466200
*        ZXDUMMY1='';                        /* RESET IN/OUTPUT */      02466300
*        XBUFLIST='';                        /* RESET DEFAULT */        02466400
*        ZXBUFLIST='';                       /* RESET IN/OUTPUT */      02466500
*      END;                                                             02466600
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02466700
*  IF NUMBER(BUFNUM)>1                       /* CHECK POSITIONALS */    02466800
*    THEN                                                               02466900
*      DO;                                                              02467000
*        ZMS=' 8, "BUFNUM'!!                 /**KPOSP* MSG*/            02467100
*            BUFNUM!!                                                   02467200
*            '" "BUFNUM"'!!                                             02467300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02467400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02467500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02467600
*        ZMACRET=8;                          /* MACRO ERROR */          02467700
*      END;                                                             02467800
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02467900
*  IF BUFNUM(1)^=''                          /* CHECK FOR NULL */       02468000
*    THEN                                                               02468100
*      DO;                                                              02468200
*        XBUFNUM=BUFNUM(1);                  /* SET XVARIABLE */        02468300
*        ZXBUFNUM='INPUT';                   /* SET IN/OUTPUT */        02468400
*      END;                                                             02468500
*/*PE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02468600
*  IF BUFTYPE='BUFTYPE'                      /* CHECK ENTRY */          02468700
*    THEN                                                               02468800
*      DO;                                                              02468900
*        ZMS=' 8, THE "BUFTYPE" KEY'!!       /**KOPTP* MSG*/            02469000
*            ' MUST CONTAIN ONE'!!                                      02469100
*            ' (OR MORE) ARGUMENT(S).';                                 02469200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02469300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02469400
*        ZMACRET=8;                          /* MACRO ERROR */          02469500
*      END;                                                             02469600
*  IF NUMBER(BUFTYPE)>1                      /* CHECK POSITIONALS */    02469700
*    THEN                                                               02469800
*      DO;                                                              02469900
*        ZMS=' 8, "BUFTYPE'!!                /**KPOSP* MSG*/            02470000
*            BUFTYPE!!                                                  02470100
*            '" "BUFTYPE"'!!                                            02470200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02470300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02470400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02470500
*        ZMACRET=8;                          /* MACRO ERROR */          02470600
*      END;                                                             02470700
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02470800
*  IF TRANSLATE(BUFTYPE(1)) = 'SAME'                                    02470900
*    THEN                                                               02471000
*      XBUFTYPE = 'SAME';                    /* SET XVARIABLE */        02471100
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02471200
*  IF TRANSLATE(BUFTYPE(1)) = 'PAGEELIG'                                02471300
*    THEN                                                               02471400
*      XBUFTYPE = 'PAGEELIG';                /* SET XVARIABLE */        02471500
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02471600
*  IF TRANSLATE(BUFTYPE(1)) = 'FIXED'                                   02471700
*    THEN                                                               02471800
*      XBUFTYPE = 'FIXED';                   /* SET XVARIABLE */        02471900
*/*PE.KKWRD06 Additional value checks */                                02472000
*  IF TRANSLATE(BUFTYPE(1)) = 'PAGEABLE'                                02472100
*    THEN                                                               02472200
*      XBUFTYPE = 'PAGEABLE';                /* SET XVARIABLE */        02472300
*/*PE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02472400
*  IF XBUFTYPE^=''                           /* CHECK FOR KEYWORD */    02472500
*    THEN                                                               02472600
*      ZXBUFTYPE='INPUT';                    /* SET IN/OUTPUT */        02472700
*    ELSE                                                               02472800
*      DO;                                   /* KEYWORD NOT ENTERED */  02472900
*        IF BUFTYPE(1)^=''                                              02473000
*          THEN                                                         02473100
*            DO;                                                        02473200
*              ZMS=' 8, "BUFTYPE'!!          /**KUKWP* MSG*/            02473300
*                  BUFTYPE!!'"'!!                                       02473400
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02473500
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02473600
*                  ' "SAME",'!!              /* VALID KEYWORD */        02473700
*                  ' "PAGEELIG",'!!          /* VALID KEYWORD */        02473800
*                  ' OR "FIXED".';           /* VALID KEYWORD */        02473900
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02474000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02474100
*              ZMACRET=8;                    /* MACRO ERROR */          02474200
*            END;                                                       02474300
*      END;                                                             02474400
*/*PE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02474500
*  IF CSMUSER='CSMUSER'                      /* CHECK ENTRY */          02474600
*    THEN                                                               02474700
*      DO;                                                              02474800
*        ZMS=' 8, THE "CSMUSER" KEY'!!       /**KOPTP* MSG*/            02474900
*            ' MUST CONTAIN ONE'!!                                      02475000
*            ' (OR MORE) ARGUMENT(S).';                                 02475100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02475200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02475300
*        ZMACRET=8;                          /* MACRO ERROR */          02475400
*      END;                                                             02475500
*  IF NUMBER(CSMUSER)>1                      /* CHECK POSITIONALS */    02475600
*    THEN                                                               02475700
*      DO;                                                              02475800
*        ZMS=' 8, "CSMUSER'!!                /**KPOSP* MSG*/            02475900
*            CSMUSER!!                                                  02476000
*            '" "CSMUSER"'!!                                            02476100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02476200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02476300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02476400
*        ZMACRET=8;                          /* MACRO ERROR */          02476500
*      END;                                                             02476600
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02476700
*  IF TRANSLATE(CSMUSER(1)) = 'NO'                                      02476800
*    THEN                                                               02476900
*      XCSMUSER = 'NO';                      /* SET XVARIABLE */        02477000
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02477100
*  IF TRANSLATE(CSMUSER(1)) = 'YES'                                     02477200
*    THEN                                                               02477300
*      XCSMUSER = 'YES';                     /* SET XVARIABLE */        02477400
*/*PE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02477500
*  IF XCSMUSER^=''                           /* CHECK FOR KEYWORD */    02477600
*    THEN                                                               02477700
*      ZXCSMUSER='INPUT';                    /* SET IN/OUTPUT */        02477800
*    ELSE                                                               02477900
*      DO;                                   /* KEYWORD NOT ENTERED */  02478000
*        IF CSMUSER(1)^=''                                              02478100
*          THEN                                                         02478200
*            DO;                                                        02478300
*              ZMS=' 8, "CSMUSER'!!          /**KUKWP* MSG*/            02478400
*                  CSMUSER!!'"'!!                                       02478500
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02478600
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02478700
*                  ' "NO"'!!                 /* VALID KEYWORD */        02478800
*                  ' OR "YES".';             /* VALID KEYWORD */        02478900
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02479000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02479100
*              ZMACRET=8;                    /* MACRO ERROR */          02479200
*            END;                                                       02479300
*      END;                                                             02479400
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02479500
*  IF GAP='GAP'                              /* CHECK ENTRY */          02479600
*    THEN                                                               02479700
*      DO;                                                              02479800
*        ZMS=' 8, THE "GAP" KEY'!!           /**KOPTP* MSG*/            02479900
*            ' MUST CONTAIN ONE'!!                                      02480000
*            ' (OR MORE) ARGUMENT(S).';                                 02480100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02480200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02480300
*        ZMACRET=8;                          /* MACRO ERROR */          02480400
*      END;                                                             02480500
*  IF NUMBER(GAP)>1                          /* CHECK POSITIONALS */    02480600
*    THEN                                                               02480700
*      DO;                                                              02480800
*        ZMS=' 8, "GAP'!!                    /**KPOSP* MSG*/            02480900
*            GAP!!                                                      02481000
*            '" "GAP"'!!                                                02481100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02481200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02481300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02481400
*        ZMACRET=8;                          /* MACRO ERROR */          02481500
*      END;                                                             02481600
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02481700
*  IF GAP(1)^=''                             /* CHECK FOR NULL */       02481800
*    THEN                                                               02481900
*      DO;                                                              02482000
*        XGAP=GAP(1);                        /* SET XVARIABLE */        02482100
*        ZXGAP='INPUT';                      /* SET IN/OUTPUT */        02482200
*      END;                                                             02482300
*/*PE.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02482400
*  IF ERRBFLST='ERRBFLST'                    /* CHECK ENTRY */          02482500
*    THEN                                                               02482600
*      DO;                                                              02482700
*        ZMS=' 8, THE "ERRBFLST" KEY'!!      /**KOPTP* MSG*/            02482800
*            ' MUST CONTAIN ONE'!!                                      02482900
*            ' (OR MORE) ARGUMENT(S).';                                 02483000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02483100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02483200
*        ZMACRET=8;                          /* MACRO ERROR */          02483300
*      END;                                                             02483400
*  IF NUMBER(ERRBFLST)>1                     /* CHECK POSITIONALS */    02483500
*    THEN                                                               02483600
*      DO;                                                              02483700
*        ZMS=' 8, "ERRBFLST'!!               /**KPOSP* MSG*/            02483800
*            ERRBFLST!!                                                 02483900
*            '" "ERRBFLST"'!!                                           02484000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02484100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02484200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02484300
*        ZMACRET=8;                          /* MACRO ERROR */          02484400
*      END;                                                             02484500
*/*PE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02484600
*  IF ERRBFLST(1)^=''                        /* CHECK FOR NULL */       02484700
*    THEN                                                               02484800
*      DO;                                                              02484900
*        XERRBFLST=ERRBFLST(1);              /* SET XVARIABLE */        02485000
*        ZXERRBFLST='OUTPUT';                /* SET IN/OUTPUT */        02485100
*      END;                                                             02485200
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02485300
*  IF OWNERID='OWNERID'                      /* CHECK ENTRY */          02485400
*    THEN                                                               02485500
*      DO;                                                              02485600
*        ZMS=' 8, THE "OWNERID" KEY'!!       /**KOPTP* MSG*/            02485700
*            ' MUST CONTAIN ONE'!!                                      02485800
*            ' (OR MORE) ARGUMENT(S).';                                 02485900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02486000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02486100
*        ZMACRET=8;                          /* MACRO ERROR */          02486200
*      END;                                                             02486300
*  IF NUMBER(OWNERID)>1                      /* CHECK POSITIONALS */    02486400
*    THEN                                                               02486500
*      DO;                                                              02486600
*        ZMS=' 8, "OWNERID'!!                /**KPOSP* MSG*/            02486700
*            OWNERID!!                                                  02486800
*            '" "OWNERID"'!!                                            02486900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02487000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02487100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02487200
*        ZMACRET=8;                          /* MACRO ERROR */          02487300
*      END;                                                             02487400
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02487500
*  IF OWNERID(1)^=''                         /* CHECK FOR NULL */       02487600
*    THEN                                                               02487700
*      DO;                                                              02487800
*        XOWNERID=OWNERID(1);                /* SET XVARIABLE */        02487900
*        ZXOWNERID='INPUT';                  /* SET IN/OUTPUT */        02488000
*      END;                                                             02488100
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02488200
*  IF COMPID='COMPID'                        /* CHECK ENTRY */          02488300
*    THEN                                                               02488400
*      DO;                                                              02488500
*        ZMS=' 8, THE "COMPID" KEY'!!        /**KOPTP* MSG*/            02488600
*            ' MUST CONTAIN ONE'!!                                      02488700
*            ' (OR MORE) ARGUMENT(S).';                                 02488800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02488900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02489000
*        ZMACRET=8;                          /* MACRO ERROR */          02489100
*      END;                                                             02489200
*  IF NUMBER(COMPID)>1                       /* CHECK POSITIONALS */    02489300
*    THEN                                                               02489400
*      DO;                                                              02489500
*        ZMS=' 8, "COMPID'!!                 /**KPOSP* MSG*/            02489600
*            COMPID!!                                                   02489700
*            '" "COMPID"'!!                                             02489800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02489900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02490000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02490100
*        ZMACRET=8;                          /* MACRO ERROR */          02490200
*      END;                                                             02490300
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02490400
*  IF COMPID(1)^=''                          /* CHECK FOR NULL */       02490500
*    THEN                                                               02490600
*      DO;                                                              02490700
*        XCOMPID=COMPID(1);                  /* SET XVARIABLE */        02490800
*        ZXCOMPID='INPUT';                   /* SET IN/OUTPUT */        02490900
*      END;                                                             02491000
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02491100
*  IF COMPUSER='COMPUSER'                    /* CHECK ENTRY */          02491200
*    THEN                                                               02491300
*      DO;                                                              02491400
*        ZMS=' 8, THE "COMPUSER" KEY'!!      /**KOPTP* MSG*/            02491500
*            ' MUST CONTAIN ONE'!!                                      02491600
*            ' (OR MORE) ARGUMENT(S).';                                 02491700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02491800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02491900
*        ZMACRET=8;                          /* MACRO ERROR */          02492000
*      END;                                                             02492100
*  IF NUMBER(COMPUSER)>1                     /* CHECK POSITIONALS */    02492200
*    THEN                                                               02492300
*      DO;                                                              02492400
*        ZMS=' 8, "COMPUSER'!!               /**KPOSP* MSG*/            02492500
*            COMPUSER!!                                                 02492600
*            '" "COMPUSER"'!!                                           02492700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02492800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02492900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02493000
*        ZMACRET=8;                          /* MACRO ERROR */          02493100
*      END;                                                             02493200
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02493300
*  IF COMPUSER(1)^=''                        /* CHECK FOR NULL */       02493400
*    THEN                                                               02493500
*      DO;                                                              02493600
*        XCOMPUSER=COMPUSER(1);              /* SET XVARIABLE */        02493700
*        ZXCOMPUSER='INPUT';                 /* SET IN/OUTPUT */        02493800
*      END;                                                             02493900
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02494000
*  IF TASKID='TASKID'                        /* CHECK ENTRY */          02494100
*    THEN                                                               02494200
*      DO;                                                              02494300
*        ZMS=' 8, THE "TASKID" KEY'!!        /**KOPTP* MSG*/            02494400
*            ' MUST CONTAIN ONE'!!                                      02494500
*            ' (OR MORE) ARGUMENT(S).';                                 02494600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02494700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02494800
*        ZMACRET=8;                          /* MACRO ERROR */          02494900
*      END;                                                             02495000
*  IF NUMBER(TASKID)>1                       /* CHECK POSITIONALS */    02495100
*    THEN                                                               02495200
*      DO;                                                              02495300
*        ZMS=' 8, "TASKID'!!                 /**KPOSP* MSG*/            02495400
*            TASKID!!                                                   02495500
*            '" "TASKID"'!!                                             02495600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02495700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02495800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02495900
*        ZMACRET=8;                          /* MACRO ERROR */          02496000
*      END;                                                             02496100
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02496200
*  IF TASKID(1)^=''                          /* CHECK FOR NULL */       02496300
*    THEN                                                               02496400
*      DO;                                                              02496500
*        XTASKID=TASKID(1);                  /* SET XVARIABLE */        02496600
*        ZXTASKID='INPUT';                   /* SET IN/OUTPUT */        02496700
*      END;                                                             02496800
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02496900
*  IF THREAD='THREAD'                        /* CHECK ENTRY */          02497000
*    THEN                                                               02497100
*      DO;                                                              02497200
*        ZMS=' 8, THE "THREAD" KEY'!!        /**KOPTP* MSG*/            02497300
*            ' MUST CONTAIN ONE'!!                                      02497400
*            ' (OR MORE) ARGUMENT(S).';                                 02497500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02497600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02497700
*        ZMACRET=8;                          /* MACRO ERROR */          02497800
*      END;                                                             02497900
*  IF NUMBER(THREAD)>1                       /* CHECK POSITIONALS */    02498000
*    THEN                                                               02498100
*      DO;                                                              02498200
*        ZMS=' 8, "THREAD'!!                 /**KPOSP* MSG*/            02498300
*            THREAD!!                                                   02498400
*            '" "THREAD"'!!                                             02498500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02498600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02498700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02498800
*        ZMACRET=8;                          /* MACRO ERROR */          02498900
*      END;                                                             02499000
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02499100
*  IF THREAD(1)^=''                          /* CHECK FOR NULL */       02499200
*    THEN                                                               02499300
*      DO;                                                              02499400
*        XTHREAD=THREAD(1);                  /* SET XVARIABLE */        02499500
*        ZXTHREAD='INPUT';                   /* SET IN/OUTPUT */        02499600
*      END;                                                             02499700
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02499800
*  IF UTILRTN='UTILRTN'                      /* CHECK ENTRY */          02499900
*    THEN                                                               02500000
*      DO;                                                              02500100
*        ZMS=' 8, THE "UTILRTN" KEY'!!       /**KOPTP* MSG*/            02500200
*            ' MUST CONTAIN ONE'!!                                      02500300
*            ' (OR MORE) ARGUMENT(S).';                                 02500400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02500500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02500600
*        ZMACRET=8;                          /* MACRO ERROR */          02500700
*      END;                                                             02500800
*  IF NUMBER(UTILRTN)>1                      /* CHECK POSITIONALS */    02500900
*    THEN                                                               02501000
*      DO;                                                              02501100
*        ZMS=' 8, "UTILRTN'!!                /**KPOSP* MSG*/            02501200
*            UTILRTN!!                                                  02501300
*            '" "UTILRTN"'!!                                            02501400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02501500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02501600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02501700
*        ZMACRET=8;                          /* MACRO ERROR */          02501800
*      END;                                                             02501900
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02502000
*  IF UTILRTN(1)^=''                         /* CHECK FOR NULL */       02502100
*    THEN                                                               02502200
*      DO;                                                              02502300
*        XUTILRTN=UTILRTN(1);                /* SET XVARIABLE */        02502400
*        ZXUTILRTN='INPUT';                  /* SET IN/OUTPUT */        02502500
*      END;                                                             02502600
*/*PE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02502700
*  IF TRANSLATE(REQUEST(1))                                             02502800
*              = 'CHANGE_OWNER'              /* CHECK FOR KEYWORD */    02502900
*    THEN                                                               02503000
*      DO;                                                              02503100
*        XREQUEST='CHANGE_OWNER';            /* SET XVARIABLE */        02503200
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    02503300
*          THEN                                                         02503400
*            DO;                                                        02503500
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            02503600
*                  REQUEST!!                                            02503700
*                  '" "REQUEST"'!!                                      02503800
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02503900
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02504000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02504100
*              ZMACRET=8;                    /* MACRO ERROR */          02504200
*            END;                                                       02504300
*      END;                                                             02504400
*/*PE.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02504500
*  XDUMMY2='';                               /* RESET XVARIABLE */      02504600
*  IF BUFLIST^=''                            /* CHECK ME KEY */         02504700
*    THEN                                                               02504800
*      DO;                                   /* VALID ME KEY */         02504900
*        IF NUMBER(BUFLIST)>1                /* CHECK SUBLISTS */       02505000
*          THEN                                                         02505100
*            DO;                                                        02505200
*              ZMS=' 8, "BUFLIST'!!          /**KPOSP* MSG*/            02505300
*                  BUFLIST!!                                            02505400
*                  '" "BUFLIST"'!!                                      02505500
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02505600
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02505700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02505800
*              ZMACRET=8;                    /* MACRO ERROR */          02505900
*            END;                                                       02506000
*        XDUMMY2='BUFLIST';                  /* SET XVARIABLE */        02506100
*        XBUFLIST=BUFLIST(1);                /* SET XVARIABLE */        02506200
*        ZXDUMMY2='INPUT';                   /* SET IN/OUTPUT */        02506300
*        ZXBUFLIST='INPUT';                  /* SET IN/OUTPUT */        02506400
*        IF BUFLIST(1)=''                    /* CHECK ME KEY */         02506500
*          THEN                                                         02506600
*            DO;                                                        02506700
*              ZXDUMMY2='';                  /* RESET IN/OUTPUT */      02506800
*              ZXBUFLIST='';                 /* RESET IN/OUTPUT */      02506900
*            END;                                                       02507000
*      END;                                                             02507100
*/*PE.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02507200
*  IF BUFLST64^=''                           /* CHECK ME KEY */         02507300
*    THEN                                                               02507400
*      DO;                                                              02507500
*        IF NUMBER(BUFLST64)>1               /* CHECK SUBLISTS */       02507600
*          THEN                                                         02507700
*            DO;                                                        02507800
*              ZMS=' 8, "BUFLST64'!!         /**KPOSP* MSG*/            02507900
*                  BUFLST64!!                                           02508000
*                  '" "BUFLST64"'!!                                     02508100
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02508200
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02508300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02508400
*              ZMACRET=8;                    /* MACRO ERROR */          02508500
*            END;                                                       02508600
*        IF XDUMMY2=''                       /* CHECK XVARIABLE */      02508700
*          THEN                                                         02508800
*            DO;                             /* VALID ME KEY */         02508900
*              XDUMMY2='BUFLST64';           /* SET XVAR1 */            02509000
*              XBUFLST64=BUFLST64(1);        /* SET XVAR2 */            02509100
*              ZXDUMMY2='INPUT';             /* SET IN/OUTPUT */        02509200
*              ZXBUFLST64='INPUT';           /* SET IN/OUTPUT */        02509300
*              IF BUFLST64(1)=''             /* CHECK ME KEY */         02509400
*                THEN                                                   02509500
*                  DO;                                                  02509600
*                    ZXDUMMY2='';            /* RESET IN/OUTPUT */      02509700
*                    ZXBUFLST64='';          /* RESET IN/OUTPUT */      02509800
*                  END;                                                 02509900
*            END;                                                       02510000
*          ELSE                                                         02510100
*            DO;                                                        02510200
*              ZMS=' 8, "BUFLST64'!!         /**KMEKP* MSG*/            02510300
*                  BUFLST64!!'"'!!                                      02510400
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'!!                02510500
*                  XDUMMY2!!                                            02510600
*                  '" KEY.';                                            02510700
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02510800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02510900
*              ZMACRET=8;                    /* MACRO ERROR */          02511000
*            END;                                                       02511100
*      END;                                                             02511200
*/*PE.KMEKY05 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT RESETS--------*/ 02511300
*  IF XDUMMY2=''                             /* CHECK XVARIABLE */      02511400
*    THEN                                                               02511500
*      DO;                                                              02511600
*        XDUMMY2='';                         /* RESET DEFAULT */        02511700
*        ZXDUMMY2='';                        /* RESET IN/OUTPUT */      02511800
*        XBUFLIST='';                        /* RESET DEFAULT */        02511900
*        ZXBUFLIST='';                       /* RESET IN/OUTPUT */      02512000
*      END;                                                             02512100
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02512200
*  IF NUMBER(BUFNUM)>1                       /* CHECK POSITIONALS */    02512300
*    THEN                                                               02512400
*      DO;                                                              02512500
*        ZMS=' 8, "BUFNUM'!!                 /**KPOSP* MSG*/            02512600
*            BUFNUM!!                                                   02512700
*            '" "BUFNUM"'!!                                             02512800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02512900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02513000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02513100
*        ZMACRET=8;                          /* MACRO ERROR */          02513200
*      END;                                                             02513300
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02513400
*  IF BUFNUM(1)^=''                          /* CHECK FOR NULL */       02513500
*    THEN                                                               02513600
*      DO;                                                              02513700
*        XBUFNUM=BUFNUM(1);                  /* SET XVARIABLE */        02513800
*        ZXBUFNUM='INPUT';                   /* SET IN/OUTPUT */        02513900
*      END;                                                             02514000
*/*PE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02514100
*  IF CSMUSER='CSMUSER'                      /* CHECK ENTRY */          02514200
*    THEN                                                               02514300
*      DO;                                                              02514400
*        ZMS=' 8, THE "CSMUSER" KEY'!!       /**KOPTP* MSG*/            02514500
*            ' MUST CONTAIN ONE'!!                                      02514600
*            ' (OR MORE) ARGUMENT(S).';                                 02514700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02514800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02514900
*        ZMACRET=8;                          /* MACRO ERROR */          02515000
*      END;                                                             02515100
*  IF NUMBER(CSMUSER)>1                      /* CHECK POSITIONALS */    02515200
*    THEN                                                               02515300
*      DO;                                                              02515400
*        ZMS=' 8, "CSMUSER'!!                /**KPOSP* MSG*/            02515500
*            CSMUSER!!                                                  02515600
*            '" "CSMUSER"'!!                                            02515700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02515800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02515900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02516000
*        ZMACRET=8;                          /* MACRO ERROR */          02516100
*      END;                                                             02516200
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02516300
*  IF TRANSLATE(CSMUSER(1)) = 'NO'                                      02516400
*    THEN                                                               02516500
*      XCSMUSER = 'NO';                      /* SET XVARIABLE */        02516600
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02516700
*  IF TRANSLATE(CSMUSER(1)) = 'YES'                                     02516800
*    THEN                                                               02516900
*      XCSMUSER = 'YES';                     /* SET XVARIABLE */        02517000
*/*PE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02517100
*  IF XCSMUSER^=''                           /* CHECK FOR KEYWORD */    02517200
*    THEN                                                               02517300
*      ZXCSMUSER='INPUT';                    /* SET IN/OUTPUT */        02517400
*    ELSE                                                               02517500
*      DO;                                   /* KEYWORD NOT ENTERED */  02517600
*        IF CSMUSER(1)^=''                                              02517700
*          THEN                                                         02517800
*            DO;                                                        02517900
*              ZMS=' 8, "CSMUSER'!!          /**KUKWP* MSG*/            02518000
*                  CSMUSER!!'"'!!                                       02518100
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02518200
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02518300
*                  ' "NO"'!!                 /* VALID KEYWORD */        02518400
*                  ' OR "YES".';             /* VALID KEYWORD */        02518500
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02518600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02518700
*              ZMACRET=8;                    /* MACRO ERROR */          02518800
*            END;                                                       02518900
*      END;                                                             02519000
*/*PE.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02519100
*  IF ERRBFLST='ERRBFLST'                    /* CHECK ENTRY */          02519200
*    THEN                                                               02519300
*      DO;                                                              02519400
*        ZMS=' 8, THE "ERRBFLST" KEY'!!      /**KOPTP* MSG*/            02519500
*            ' MUST CONTAIN ONE'!!                                      02519600
*            ' (OR MORE) ARGUMENT(S).';                                 02519700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02519800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02519900
*        ZMACRET=8;                          /* MACRO ERROR */          02520000
*      END;                                                             02520100
*  IF NUMBER(ERRBFLST)>1                     /* CHECK POSITIONALS */    02520200
*    THEN                                                               02520300
*      DO;                                                              02520400
*        ZMS=' 8, "ERRBFLST'!!               /**KPOSP* MSG*/            02520500
*            ERRBFLST!!                                                 02520600
*            '" "ERRBFLST"'!!                                           02520700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02520800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02520900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02521000
*        ZMACRET=8;                          /* MACRO ERROR */          02521100
*      END;                                                             02521200
*/*PE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02521300
*  IF ERRBFLST(1)^=''                        /* CHECK FOR NULL */       02521400
*    THEN                                                               02521500
*      DO;                                                              02521600
*        XERRBFLST=ERRBFLST(1);              /* SET XVARIABLE */        02521700
*        ZXERRBFLST='OUTPUT';                /* SET IN/OUTPUT */        02521800
*      END;                                                             02521900
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02522000
*  IF GAP='GAP'                              /* CHECK ENTRY */          02522100
*    THEN                                                               02522200
*      DO;                                                              02522300
*        ZMS=' 8, THE "GAP" KEY'!!           /**KOPTP* MSG*/            02522400
*            ' MUST CONTAIN ONE'!!                                      02522500
*            ' (OR MORE) ARGUMENT(S).';                                 02522600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02522700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02522800
*        ZMACRET=8;                          /* MACRO ERROR */          02522900
*      END;                                                             02523000
*  IF NUMBER(GAP)>1                          /* CHECK POSITIONALS */    02523100
*    THEN                                                               02523200
*      DO;                                                              02523300
*        ZMS=' 8, "GAP'!!                    /**KPOSP* MSG*/            02523400
*            GAP!!                                                      02523500
*            '" "GAP"'!!                                                02523600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02523700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02523800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02523900
*        ZMACRET=8;                          /* MACRO ERROR */          02524000
*      END;                                                             02524100
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02524200
*  IF GAP(1)^=''                             /* CHECK FOR NULL */       02524300
*    THEN                                                               02524400
*      DO;                                                              02524500
*        XGAP=GAP(1);                        /* SET XVARIABLE */        02524600
*        ZXGAP='INPUT';                      /* SET IN/OUTPUT */        02524700
*      END;                                                             02524800
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02524900
*  IF OWNERID='OWNERID'                      /* CHECK ENTRY */          02525000
*    THEN                                                               02525100
*      DO;                                                              02525200
*        ZMS=' 8, THE "OWNERID" KEY'!!       /**KOPTP* MSG*/            02525300
*            ' MUST CONTAIN ONE'!!                                      02525400
*            ' (OR MORE) ARGUMENT(S).';                                 02525500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02525600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02525700
*        ZMACRET=8;                          /* MACRO ERROR */          02525800
*      END;                                                             02525900
*  IF NUMBER(OWNERID)>1                      /* CHECK POSITIONALS */    02526000
*    THEN                                                               02526100
*      DO;                                                              02526200
*        ZMS=' 8, "OWNERID'!!                /**KPOSP* MSG*/            02526300
*            OWNERID!!                                                  02526400
*            '" "OWNERID"'!!                                            02526500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02526600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02526700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02526800
*        ZMACRET=8;                          /* MACRO ERROR */          02526900
*      END;                                                             02527000
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02527100
*  IF OWNERID(1)^=''                         /* CHECK FOR NULL */       02527200
*    THEN                                                               02527300
*      DO;                                                              02527400
*        XOWNERID=OWNERID(1);                /* SET XVARIABLE */        02527500
*        ZXOWNERID='INPUT';                  /* SET IN/OUTPUT */        02527600
*      END;                                                             02527700
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02527800
*  IF COMPID='COMPID'                        /* CHECK ENTRY */          02527900
*    THEN                                                               02528000
*      DO;                                                              02528100
*        ZMS=' 8, THE "COMPID" KEY'!!        /**KOPTP* MSG*/            02528200
*            ' MUST CONTAIN ONE'!!                                      02528300
*            ' (OR MORE) ARGUMENT(S).';                                 02528400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02528500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02528600
*        ZMACRET=8;                          /* MACRO ERROR */          02528700
*      END;                                                             02528800
*  IF NUMBER(COMPID)>1                       /* CHECK POSITIONALS */    02528900
*    THEN                                                               02529000
*      DO;                                                              02529100
*        ZMS=' 8, "COMPID'!!                 /**KPOSP* MSG*/            02529200
*            COMPID!!                                                   02529300
*            '" "COMPID"'!!                                             02529400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02529500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02529600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02529700
*        ZMACRET=8;                          /* MACRO ERROR */          02529800
*      END;                                                             02529900
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02530000
*  IF COMPID(1)^=''                          /* CHECK FOR NULL */       02530100
*    THEN                                                               02530200
*      DO;                                                              02530300
*        XCOMPID=COMPID(1);                  /* SET XVARIABLE */        02530400
*        ZXCOMPID='INPUT';                   /* SET IN/OUTPUT */        02530500
*      END;                                                             02530600
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02530700
*  IF COMPUSER='COMPUSER'                    /* CHECK ENTRY */          02530800
*    THEN                                                               02530900
*      DO;                                                              02531000
*        ZMS=' 8, THE "COMPUSER" KEY'!!      /**KOPTP* MSG*/            02531100
*            ' MUST CONTAIN ONE'!!                                      02531200
*            ' (OR MORE) ARGUMENT(S).';                                 02531300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02531400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02531500
*        ZMACRET=8;                          /* MACRO ERROR */          02531600
*      END;                                                             02531700
*  IF NUMBER(COMPUSER)>1                     /* CHECK POSITIONALS */    02531800
*    THEN                                                               02531900
*      DO;                                                              02532000
*        ZMS=' 8, "COMPUSER'!!               /**KPOSP* MSG*/            02532100
*            COMPUSER!!                                                 02532200
*            '" "COMPUSER"'!!                                           02532300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02532400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02532500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02532600
*        ZMACRET=8;                          /* MACRO ERROR */          02532700
*      END;                                                             02532800
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02532900
*  IF COMPUSER(1)^=''                        /* CHECK FOR NULL */       02533000
*    THEN                                                               02533100
*      DO;                                                              02533200
*        XCOMPUSER=COMPUSER(1);              /* SET XVARIABLE */        02533300
*        ZXCOMPUSER='INPUT';                 /* SET IN/OUTPUT */        02533400
*      END;                                                             02533500
*/*PE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02533600
*  IF SKIPBUF='SKIPBUF'                      /* CHECK ENTRY */          02533700
*    THEN                                                               02533800
*      DO;                                                              02533900
*        ZMS=' 8, THE "SKIPBUF" KEY'!!       /**KOPTP* MSG*/            02534000
*            ' MUST CONTAIN ONE'!!                                      02534100
*            ' (OR MORE) ARGUMENT(S).';                                 02534200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02534300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02534400
*        ZMACRET=8;                          /* MACRO ERROR */          02534500
*      END;                                                             02534600
*  IF NUMBER(SKIPBUF)>1                      /* CHECK POSITIONALS */    02534700
*    THEN                                                               02534800
*      DO;                                                              02534900
*        ZMS=' 8, "SKIPBUF'!!                /**KPOSP* MSG*/            02535000
*            SKIPBUF!!                                                  02535100
*            '" "SKIPBUF"'!!                                            02535200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02535300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02535400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02535500
*        ZMACRET=8;                          /* MACRO ERROR */          02535600
*      END;                                                             02535700
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02535800
*  IF TRANSLATE(SKIPBUF(1)) = 'NO'                                      02535900
*    THEN                                                               02536000
*      XSKIPBUF = 'NO';                      /* SET XVARIABLE */        02536100
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02536200
*  IF TRANSLATE(SKIPBUF(1)) = 'YES'                                     02536300
*    THEN                                                               02536400
*      XSKIPBUF = 'YES';                     /* SET XVARIABLE */        02536500
*/*PE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02536600
*  IF XSKIPBUF^=''                           /* CHECK FOR KEYWORD */    02536700
*    THEN                                                               02536800
*      ZXSKIPBUF='INPUT';                    /* SET IN/OUTPUT */        02536900
*    ELSE                                                               02537000
*      DO;                                   /* KEYWORD NOT ENTERED */  02537100
*        IF SKIPBUF(1)^=''                                              02537200
*          THEN                                                         02537300
*            DO;                                                        02537400
*              ZMS=' 8, "SKIPBUF'!!          /**KUKWP* MSG*/            02537500
*                  SKIPBUF!!'"'!!                                       02537600
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02537700
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02537800
*                  ' "NO"'!!                 /* VALID KEYWORD */        02537900
*                  ' OR "YES".';             /* VALID KEYWORD */        02538000
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02538100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02538200
*              ZMACRET=8;                    /* MACRO ERROR */          02538300
*            END;                                                       02538400
*      END;                                                             02538500
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02538600
*  IF TASKID='TASKID'                        /* CHECK ENTRY */          02538700
*    THEN                                                               02538800
*      DO;                                                              02538900
*        ZMS=' 8, THE "TASKID" KEY'!!        /**KOPTP* MSG*/            02539000
*            ' MUST CONTAIN ONE'!!                                      02539100
*            ' (OR MORE) ARGUMENT(S).';                                 02539200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02539300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02539400
*        ZMACRET=8;                          /* MACRO ERROR */          02539500
*      END;                                                             02539600
*  IF NUMBER(TASKID)>1                       /* CHECK POSITIONALS */    02539700
*    THEN                                                               02539800
*      DO;                                                              02539900
*        ZMS=' 8, "TASKID'!!                 /**KPOSP* MSG*/            02540000
*            TASKID!!                                                   02540100
*            '" "TASKID"'!!                                             02540200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02540300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02540400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02540500
*        ZMACRET=8;                          /* MACRO ERROR */          02540600
*      END;                                                             02540700
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02540800
*  IF TASKID(1)^=''                          /* CHECK FOR NULL */       02540900
*    THEN                                                               02541000
*      DO;                                                              02541100
*        XTASKID=TASKID(1);                  /* SET XVARIABLE */        02541200
*        ZXTASKID='INPUT';                   /* SET IN/OUTPUT */        02541300
*      END;                                                             02541400
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02541500
*  IF THREAD='THREAD'                        /* CHECK ENTRY */          02541600
*    THEN                                                               02541700
*      DO;                                                              02541800
*        ZMS=' 8, THE "THREAD" KEY'!!        /**KOPTP* MSG*/            02541900
*            ' MUST CONTAIN ONE'!!                                      02542000
*            ' (OR MORE) ARGUMENT(S).';                                 02542100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02542200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02542300
*        ZMACRET=8;                          /* MACRO ERROR */          02542400
*      END;                                                             02542500
*  IF NUMBER(THREAD)>1                       /* CHECK POSITIONALS */    02542600
*    THEN                                                               02542700
*      DO;                                                              02542800
*        ZMS=' 8, "THREAD'!!                 /**KPOSP* MSG*/            02542900
*            THREAD!!                                                   02543000
*            '" "THREAD"'!!                                             02543100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02543200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02543300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02543400
*        ZMACRET=8;                          /* MACRO ERROR */          02543500
*      END;                                                             02543600
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02543700
*  IF THREAD(1)^=''                          /* CHECK FOR NULL */       02543800
*    THEN                                                               02543900
*      DO;                                                              02544000
*        XTHREAD=THREAD(1);                  /* SET XVARIABLE */        02544100
*        ZXTHREAD='INPUT';                   /* SET IN/OUTPUT */        02544200
*      END;                                                             02544300
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02544400
*  IF UTILRTN='UTILRTN'                      /* CHECK ENTRY */          02544500
*    THEN                                                               02544600
*      DO;                                                              02544700
*        ZMS=' 8, THE "UTILRTN" KEY'!!       /**KOPTP* MSG*/            02544800
*            ' MUST CONTAIN ONE'!!                                      02544900
*            ' (OR MORE) ARGUMENT(S).';                                 02545000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02545100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02545200
*        ZMACRET=8;                          /* MACRO ERROR */          02545300
*      END;                                                             02545400
*  IF NUMBER(UTILRTN)>1                      /* CHECK POSITIONALS */    02545500
*    THEN                                                               02545600
*      DO;                                                              02545700
*        ZMS=' 8, "UTILRTN'!!                /**KPOSP* MSG*/            02545800
*            UTILRTN!!                                                  02545900
*            '" "UTILRTN"'!!                                            02546000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02546100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02546200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02546300
*        ZMACRET=8;                          /* MACRO ERROR */          02546400
*      END;                                                             02546500
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02546600
*  IF UTILRTN(1)^=''                         /* CHECK FOR NULL */       02546700
*    THEN                                                               02546800
*      DO;                                                              02546900
*        XUTILRTN=UTILRTN(1);                /* SET XVARIABLE */        02547000
*        ZXUTILRTN='INPUT';                  /* SET IN/OUTPUT */        02547100
*      END;                                                             02547200
*/*PE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02547300
*  IF TRANSLATE(REQUEST(1))                                             02547400
*              = 'COPY_DATA'                 /* CHECK FOR KEYWORD */    02547500
*    THEN                                                               02547600
*      DO;                                                              02547700
*        XREQUEST='COPY_DATA';               /* SET XVARIABLE */        02547800
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    02547900
*          THEN                                                         02548000
*            DO;                                                        02548100
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            02548200
*                  REQUEST!!                                            02548300
*                  '" "REQUEST"'!!                                      02548400
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02548500
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02548600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02548700
*              ZMACRET=8;                    /* MACRO ERROR */          02548800
*            END;                                                       02548900
*      END;                                                             02549000
*/*PE.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02549100
*  IF TRANSLATE(PAD(1))                                                 02549200
*              = 'NO'                        /* CHECK FOR KEYWORD */    02549300
*    THEN                                                               02549400
*      DO;                                                              02549500
*        XPAD='NO';                          /* SET XVARIABLE */        02549600
*        IF NUMBER(PAD)>1                    /* CHECK POSITIONALS */    02549700
*          THEN                                                         02549800
*            DO;                                                        02549900
*              ZMS=' 8, "PAD'!!              /**KPOSP* MSG*/            02550000
*                  PAD!!                                                02550100
*                  '" "PAD"'!!                                          02550200
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02550300
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02550400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02550500
*              ZMACRET=8;                    /* MACRO ERROR */          02550600
*            END;                                                       02550700
*      END;                                                             02550800
*/*PE.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02550900
*  IF TRANSLATE(PAD(1))                                                 02551000
*              = 'YES'                       /* CHECK FOR KEYWORD */    02551100
*    THEN                                                               02551200
*      DO;                                                              02551300
*        XPAD='YES';                         /* SET XVARIABLE */        02551400
*        IF NUMBER(PAD)>1                    /* CHECK POSITIONALS */    02551500
*          THEN                                                         02551600
*            DO;                                                        02551700
*              ZMS=' 8, "PAD'!!              /**KPOSP* MSG*/            02551800
*                  PAD!!                                                02551900
*                  '" "PAD"'!!                                          02552000
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02552100
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02552200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02552300
*              ZMACRET=8;                    /* MACRO ERROR */          02552400
*            END;                                                       02552500
*      END;                                                             02552600
*/*PE.KXVAR01 NAME, OPT RQD INPUT, KEYS -EXCESSIVE ARGUMENTS---------*/ 02552700
*  IF NUMBER(PADCHAR)>1                      /* CHECK POSITIONALS */    02552800
*    THEN                                                               02552900
*      DO;                                                              02553000
*        ZMS=' 8, "PADCHAR'!!                /**KPOSP* MSG*/            02553100
*            PADCHAR!!                                                  02553200
*            '" "PADCHAR"'!!                                            02553300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02553400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02553500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02553600
*        ZMACRET=8;                          /* MACRO ERROR */          02553700
*      END;                                                             02553800
*/*PE.KXVAR03 NAME, OPT RQD INPUT, KEYS -XVARIABLE-------------------*/ 02553900
*  IF PADCHAR(1)^=''                         /* CHECK FOR NULL */       02554000
*    THEN                                                               02554100
*      DO;                                                              02554200
*        XPADCHAR=PADCHAR(1);                /* SET XVARIABLE */        02554300
*        ZXPADCHAR='INPUT';                  /* SET IN/OUTPUT */        02554400
*      END;                                                             02554500
*/*PE.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02554600
*  IF XPAD^=''                               /* CHECK FOR KEYWORD */    02554700
*    THEN                                                               02554800
*      ZXPAD='INPUT';                        /* SET IN/OUTPUT */        02554900
*    ELSE                                                               02555000
*      DO;                                   /* KEYWORD NOT ENTERED */  02555100
*        IF PAD(1)^=''                       /* CHECK FOR KEYWORD */    02555200
*          THEN                                                         02555300
*            DO;                                                        02555400
*              ZXPAD='';                     /* RESET IN/OUTPUT */      02555500
*              ZMS=' 8, "PAD'!!              /**KUKWP* MSG*/            02555600
*                  PAD!!'"'!!                                           02555700
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02555800
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02555900
*                  ' "NO"'!!                 /* VALID KEYWORD */        02556000
*                  ' OR "YES".';             /* VALID KEYWORD */        02556100
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02556200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02556300
*              ZMACRET=8;                    /* MACRO ERROR */          02556400
*            END;                                                       02556500
*      END;                                                             02556600
*/*PE.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02556700
*  IF SRCERRL='SRCERRL'                      /* CHECK ENTRY */          02556800
*    THEN                                                               02556900
*      DO;                                                              02557000
*        ZMS=' 8, THE "SRCERRL" KEY'!!       /**KOPTP* MSG*/            02557100
*            ' MUST CONTAIN ONE'!!                                      02557200
*            ' (OR MORE) ARGUMENT(S).';                                 02557300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02557400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02557500
*        ZMACRET=8;                          /* MACRO ERROR */          02557600
*      END;                                                             02557700
*  IF NUMBER(SRCERRL)>1                      /* CHECK POSITIONALS */    02557800
*    THEN                                                               02557900
*      DO;                                                              02558000
*        ZMS=' 8, "SRCERRL'!!                /**KPOSP* MSG*/            02558100
*            SRCERRL!!                                                  02558200
*            '" "SRCERRL"'!!                                            02558300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02558400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02558500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02558600
*        ZMACRET=8;                          /* MACRO ERROR */          02558700
*      END;                                                             02558800
*/*PE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02558900
*  IF SRCERRL(1)^=''                         /* CHECK FOR NULL */       02559000
*    THEN                                                               02559100
*      DO;                                                              02559200
*        XSRCERRL=SRCERRL(1);                /* SET XVARIABLE */        02559300
*        ZXSRCERRL='OUTPUT';                 /* SET IN/OUTPUT */        02559400
*      END;                                                             02559500
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02559600
*  IF SRCGAP='SRCGAP'                        /* CHECK ENTRY */          02559700
*    THEN                                                               02559800
*      DO;                                                              02559900
*        ZMS=' 8, THE "SRCGAP" KEY'!!        /**KOPTP* MSG*/            02560000
*            ' MUST CONTAIN ONE'!!                                      02560100
*            ' (OR MORE) ARGUMENT(S).';                                 02560200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02560300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02560400
*        ZMACRET=8;                          /* MACRO ERROR */          02560500
*      END;                                                             02560600
*  IF NUMBER(SRCGAP)>1                       /* CHECK POSITIONALS */    02560700
*    THEN                                                               02560800
*      DO;                                                              02560900
*        ZMS=' 8, "SRCGAP'!!                 /**KPOSP* MSG*/            02561000
*            SRCGAP!!                                                   02561100
*            '" "SRCGAP"'!!                                             02561200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02561300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02561400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02561500
*        ZMACRET=8;                          /* MACRO ERROR */          02561600
*      END;                                                             02561700
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02561800
*  IF SRCGAP(1)^=''                          /* CHECK FOR NULL */       02561900
*    THEN                                                               02562000
*      DO;                                                              02562100
*        XSRCGAP=SRCGAP(1);                  /* SET XVARIABLE */        02562200
*        ZXSRCGAP='INPUT';                   /* SET IN/OUTPUT */        02562300
*      END;                                                             02562400
*/*PE.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02562500
*  XDUMMY3='';                               /* RESET XVARIABLE */      02562600
*  IF SRCLIST^=''                            /* CHECK ME KEY */         02562700
*    THEN                                                               02562800
*      DO;                                   /* VALID ME KEY */         02562900
*        IF NUMBER(SRCLIST)>1                /* CHECK SUBLISTS */       02563000
*          THEN                                                         02563100
*            DO;                                                        02563200
*              ZMS=' 8, "SRCLIST'!!          /**KPOSP* MSG*/            02563300
*                  SRCLIST!!                                            02563400
*                  '" "SRCLIST"'!!                                      02563500
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02563600
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02563700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02563800
*              ZMACRET=8;                    /* MACRO ERROR */          02563900
*            END;                                                       02564000
*        XDUMMY3='SRCLIST';                  /* SET XVARIABLE */        02564100
*        XSRCLIST=SRCLIST(1);                /* SET XVARIABLE */        02564200
*        ZXDUMMY3='INPUT';                   /* SET IN/OUTPUT */        02564300
*        ZXSRCLIST='INPUT';                  /* SET IN/OUTPUT */        02564400
*        IF SRCLIST(1)=''                    /* CHECK ME KEY */         02564500
*          THEN                                                         02564600
*            DO;                                                        02564700
*              ZXDUMMY3='';                  /* RESET IN/OUTPUT */      02564800
*              ZXSRCLIST='';                 /* RESET IN/OUTPUT */      02564900
*            END;                                                       02565000
*      END;                                                             02565100
*/*PE.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02565200
*  IF SRCLST64^=''                           /* CHECK ME KEY */         02565300
*    THEN                                                               02565400
*      DO;                                                              02565500
*        IF NUMBER(SRCLST64)>1               /* CHECK SUBLISTS */       02565600
*          THEN                                                         02565700
*            DO;                                                        02565800
*              ZMS=' 8, "SRCLST64'!!         /**KPOSP* MSG*/            02565900
*                  SRCLST64!!                                           02566000
*                  '" "SRCLST64"'!!                                     02566100
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02566200
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02566300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02566400
*              ZMACRET=8;                    /* MACRO ERROR */          02566500
*            END;                                                       02566600
*        IF XDUMMY3=''                       /* CHECK XVARIABLE */      02566700
*          THEN                                                         02566800
*            DO;                             /* VALID ME KEY */         02566900
*              XDUMMY3='SRCLST64';           /* SET XVAR1 */            02567000
*              XSRCLST64=SRCLST64(1);        /* SET XVAR2 */            02567100
*              ZXDUMMY3='INPUT';             /* SET IN/OUTPUT */        02567200
*              ZXSRCLST64='INPUT';           /* SET IN/OUTPUT */        02567300
*              IF SRCLST64(1)=''             /* CHECK ME KEY */         02567400
*                THEN                                                   02567500
*                  DO;                                                  02567600
*                    ZXDUMMY3='';            /* RESET IN/OUTPUT */      02567700
*                    ZXSRCLST64='';          /* RESET IN/OUTPUT */      02567800
*                  END;                                                 02567900
*            END;                                                       02568000
*          ELSE                                                         02568100
*            DO;                                                        02568200
*              ZMS=' 8, "SRCLST64'!!         /**KMEKP* MSG*/            02568300
*                  SRCLST64!!'"'!!                                      02568400
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'!!                02568500
*                  XDUMMY3!!                                            02568600
*                  '" KEY.';                                            02568700
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02568800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02568900
*              ZMACRET=8;                    /* MACRO ERROR */          02569000
*            END;                                                       02569100
*      END;                                                             02569200
*/*PE.KMEKY05 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT RESETS--------*/ 02569300
*  IF XDUMMY3=''                             /* CHECK XVARIABLE */      02569400
*    THEN                                                               02569500
*      DO;                                                              02569600
*        XDUMMY3='';                         /* RESET DEFAULT */        02569700
*        ZXDUMMY3='';                        /* RESET IN/OUTPUT */      02569800
*        XSRCLIST='';                        /* RESET DEFAULT */        02569900
*        ZXSRCLIST='';                       /* RESET IN/OUTPUT */      02570000
*      END;                                                             02570100
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02570200
*  IF NUMBER(SRCNUM)>1                       /* CHECK POSITIONALS */    02570300
*    THEN                                                               02570400
*      DO;                                                              02570500
*        ZMS=' 8, "SRCNUM'!!                 /**KPOSP* MSG*/            02570600
*            SRCNUM!!                                                   02570700
*            '" "SRCNUM"'!!                                             02570800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02570900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02571000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02571100
*        ZMACRET=8;                          /* MACRO ERROR */          02571200
*      END;                                                             02571300
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02571400
*  IF SRCNUM(1)^=''                          /* CHECK FOR NULL */       02571500
*    THEN                                                               02571600
*      DO;                                                              02571700
*        XSRCNUM=SRCNUM(1);                  /* SET XVARIABLE */        02571800
*        ZXSRCNUM='INPUT';                   /* SET IN/OUTPUT */        02571900
*      END;                                                             02572000
*/*PE.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02572100
*  IF TARGERRL='TARGERRL'                    /* CHECK ENTRY */          02572200
*    THEN                                                               02572300
*      DO;                                                              02572400
*        ZMS=' 8, THE "TARGERRL" KEY'!!      /**KOPTP* MSG*/            02572500
*            ' MUST CONTAIN ONE'!!                                      02572600
*            ' (OR MORE) ARGUMENT(S).';                                 02572700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02572800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02572900
*        ZMACRET=8;                          /* MACRO ERROR */          02573000
*      END;                                                             02573100
*  IF NUMBER(TARGERRL)>1                     /* CHECK POSITIONALS */    02573200
*    THEN                                                               02573300
*      DO;                                                              02573400
*        ZMS=' 8, "TARGERRL'!!               /**KPOSP* MSG*/            02573500
*            TARGERRL!!                                                 02573600
*            '" "TARGERRL"'!!                                           02573700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02573800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02573900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02574000
*        ZMACRET=8;                          /* MACRO ERROR */          02574100
*      END;                                                             02574200
*/*PE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02574300
*  IF TARGERRL(1)^=''                        /* CHECK FOR NULL */       02574400
*    THEN                                                               02574500
*      DO;                                                              02574600
*        XTARGERRL=TARGERRL(1);              /* SET XVARIABLE */        02574700
*        ZXTARGERRL='OUTPUT';                /* SET IN/OUTPUT */        02574800
*      END;                                                             02574900
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02575000
*  IF TARGGAP='TARGGAP'                      /* CHECK ENTRY */          02575100
*    THEN                                                               02575200
*      DO;                                                              02575300
*        ZMS=' 8, THE "TARGGAP" KEY'!!       /**KOPTP* MSG*/            02575400
*            ' MUST CONTAIN ONE'!!                                      02575500
*            ' (OR MORE) ARGUMENT(S).';                                 02575600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02575700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02575800
*        ZMACRET=8;                          /* MACRO ERROR */          02575900
*      END;                                                             02576000
*  IF NUMBER(TARGGAP)>1                      /* CHECK POSITIONALS */    02576100
*    THEN                                                               02576200
*      DO;                                                              02576300
*        ZMS=' 8, "TARGGAP'!!                /**KPOSP* MSG*/            02576400
*            TARGGAP!!                                                  02576500
*            '" "TARGGAP"'!!                                            02576600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02576700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02576800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02576900
*        ZMACRET=8;                          /* MACRO ERROR */          02577000
*      END;                                                             02577100
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02577200
*  IF TARGGAP(1)^=''                         /* CHECK FOR NULL */       02577300
*    THEN                                                               02577400
*      DO;                                                              02577500
*        XTARGGAP=TARGGAP(1);                /* SET XVARIABLE */        02577600
*        ZXTARGGAP='INPUT';                  /* SET IN/OUTPUT */        02577700
*      END;                                                             02577800
*/*PE.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02577900
*  XDUMMY4='';                               /* RESET XVARIABLE */      02578000
*  IF TARGLIST^=''                           /* CHECK ME KEY */         02578100
*    THEN                                                               02578200
*      DO;                                   /* VALID ME KEY */         02578300
*        IF NUMBER(TARGLIST)>1               /* CHECK SUBLISTS */       02578400
*          THEN                                                         02578500
*            DO;                                                        02578600
*              ZMS=' 8, "TARGLIST'!!         /**KPOSP* MSG*/            02578700
*                  TARGLIST!!                                           02578800
*                  '" "TARGLIST"'!!                                     02578900
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02579000
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02579100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02579200
*              ZMACRET=8;                    /* MACRO ERROR */          02579300
*            END;                                                       02579400
*        XDUMMY4='TARGLIST';                 /* SET XVARIABLE */        02579500
*        XTARGLIST=TARGLIST(1);              /* SET XVARIABLE */        02579600
*        ZXDUMMY4='INPUT';                   /* SET IN/OUTPUT */        02579700
*        ZXTARGLIST='INPUT';                 /* SET IN/OUTPUT */        02579800
*        IF TARGLIST(1)=''                   /* CHECK ME KEY */         02579900
*          THEN                                                         02580000
*            DO;                                                        02580100
*              ZXDUMMY4='';                  /* RESET IN/OUTPUT */      02580200
*              ZXTARGLIST='';                /* RESET IN/OUTPUT */      02580300
*            END;                                                       02580400
*      END;                                                             02580500
*/*PE.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02580600
*  IF TARLST64^=''                           /* CHECK ME KEY */         02580700
*    THEN                                                               02580800
*      DO;                                                              02580900
*        IF NUMBER(TARLST64)>1               /* CHECK SUBLISTS */       02581000
*          THEN                                                         02581100
*            DO;                                                        02581200
*              ZMS=' 8, "TARLST64'!!         /**KPOSP* MSG*/            02581300
*                  TARLST64!!                                           02581400
*                  '" "TARLST64"'!!                                     02581500
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02581600
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02581700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02581800
*              ZMACRET=8;                    /* MACRO ERROR */          02581900
*            END;                                                       02582000
*        IF XDUMMY4=''                       /* CHECK XVARIABLE */      02582100
*          THEN                                                         02582200
*            DO;                             /* VALID ME KEY */         02582300
*              XDUMMY4='TARLST64';           /* SET XVAR1 */            02582400
*              XTARLST64=TARLST64(1);        /* SET XVAR2 */            02582500
*              ZXDUMMY4='INPUT';             /* SET IN/OUTPUT */        02582600
*              ZXTARLST64='INPUT';           /* SET IN/OUTPUT */        02582700
*              IF TARLST64(1)=''             /* CHECK ME KEY */         02582800
*                THEN                                                   02582900
*                  DO;                                                  02583000
*                    ZXDUMMY4='';            /* RESET IN/OUTPUT */      02583100
*                    ZXTARLST64='';          /* RESET IN/OUTPUT */      02583200
*                  END;                                                 02583300
*            END;                                                       02583400
*          ELSE                                                         02583500
*            DO;                                                        02583600
*              ZMS=' 8, "TARLST64'!!         /**KMEKP* MSG*/            02583700
*                  TARLST64!!'"'!!                                      02583800
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'!!                02583900
*                  XDUMMY4!!                                            02584000
*                  '" KEY.';                                            02584100
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02584200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02584300
*              ZMACRET=8;                    /* MACRO ERROR */          02584400
*            END;                                                       02584500
*      END;                                                             02584600
*/*PE.KMEKY05 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT RESETS--------*/ 02584700
*  IF XDUMMY4=''                             /* CHECK XVARIABLE */      02584800
*    THEN                                                               02584900
*      DO;                                                              02585000
*        XDUMMY4='';                         /* RESET DEFAULT */        02585100
*        ZXDUMMY4='';                        /* RESET IN/OUTPUT */      02585200
*        XTARGLIST='';                       /* RESET DEFAULT */        02585300
*        ZXTARGLIST='';                      /* RESET IN/OUTPUT */      02585400
*      END;                                                             02585500
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02585600
*  IF NUMBER(TARGNUM)>1                      /* CHECK POSITIONALS */    02585700
*    THEN                                                               02585800
*      DO;                                                              02585900
*        ZMS=' 8, "TARGNUM'!!                /**KPOSP* MSG*/            02586000
*            TARGNUM!!                                                  02586100
*            '" "TARGNUM"'!!                                            02586200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02586300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02586400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02586500
*        ZMACRET=8;                          /* MACRO ERROR */          02586600
*      END;                                                             02586700
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02586800
*  IF TARGNUM(1)^=''                         /* CHECK FOR NULL */       02586900
*    THEN                                                               02587000
*      DO;                                                              02587100
*        XTARGNUM=TARGNUM(1);                /* SET XVARIABLE */        02587200
*        ZXTARGNUM='INPUT';                  /* SET IN/OUTPUT */        02587300
*      END;                                                             02587400
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02587500
*  IF THREAD='THREAD'                        /* CHECK ENTRY */          02587600
*    THEN                                                               02587700
*      DO;                                                              02587800
*        ZMS=' 8, THE "THREAD" KEY'!!        /**KOPTP* MSG*/            02587900
*            ' MUST CONTAIN ONE'!!                                      02588000
*            ' (OR MORE) ARGUMENT(S).';                                 02588100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02588200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02588300
*        ZMACRET=8;                          /* MACRO ERROR */          02588400
*      END;                                                             02588500
*  IF NUMBER(THREAD)>1                       /* CHECK POSITIONALS */    02588600
*    THEN                                                               02588700
*      DO;                                                              02588800
*        ZMS=' 8, "THREAD'!!                 /**KPOSP* MSG*/            02588900
*            THREAD!!                                                   02589000
*            '" "THREAD"'!!                                             02589100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02589200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02589300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02589400
*        ZMACRET=8;                          /* MACRO ERROR */          02589500
*      END;                                                             02589600
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02589700
*  IF THREAD(1)^=''                          /* CHECK FOR NULL */       02589800
*    THEN                                                               02589900
*      DO;                                                              02590000
*        XTHREAD=THREAD(1);                  /* SET XVARIABLE */        02590100
*        ZXTHREAD='INPUT';                   /* SET IN/OUTPUT */        02590200
*      END;                                                             02590300
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02590400
*  IF UTILRTN='UTILRTN'                      /* CHECK ENTRY */          02590500
*    THEN                                                               02590600
*      DO;                                                              02590700
*        ZMS=' 8, THE "UTILRTN" KEY'!!       /**KOPTP* MSG*/            02590800
*            ' MUST CONTAIN ONE'!!                                      02590900
*            ' (OR MORE) ARGUMENT(S).';                                 02591000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02591100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02591200
*        ZMACRET=8;                          /* MACRO ERROR */          02591300
*      END;                                                             02591400
*  IF NUMBER(UTILRTN)>1                      /* CHECK POSITIONALS */    02591500
*    THEN                                                               02591600
*      DO;                                                              02591700
*        ZMS=' 8, "UTILRTN'!!                /**KPOSP* MSG*/            02591800
*            UTILRTN!!                                                  02591900
*            '" "UTILRTN"'!!                                            02592000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02592100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02592200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02592300
*        ZMACRET=8;                          /* MACRO ERROR */          02592400
*      END;                                                             02592500
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02592600
*  IF UTILRTN(1)^=''                         /* CHECK FOR NULL */       02592700
*    THEN                                                               02592800
*      DO;                                                              02592900
*        XUTILRTN=UTILRTN(1);                /* SET XVARIABLE */        02593000
*        ZXUTILRTN='INPUT';                  /* SET IN/OUTPUT */        02593100
*      END;                                                             02593200
*/*PE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02593300
*  IF TRANSLATE(REQUEST(1))                                             02593400
*              = 'CREATE_POOL'               /* CHECK FOR KEYWORD */    02593500
*    THEN                                                               02593600
*      DO;                                                              02593700
*        XREQUEST='CREATE_POOL';             /* SET XVARIABLE */        02593800
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    02593900
*          THEN                                                         02594000
*            DO;                                                        02594100
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            02594200
*                  REQUEST!!                                            02594300
*                  '" "REQUEST"'!!                                      02594400
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02594500
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02594600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02594700
*              ZMACRET=8;                    /* MACRO ERROR */          02594800
*            END;                                                       02594900
*      END;                                                             02595000
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02595100
*  IF NUMBER(BUFSIZE)>1                      /* CHECK POSITIONALS */    02595200
*    THEN                                                               02595300
*      DO;                                                              02595400
*        ZMS=' 8, "BUFSIZE'!!                /**KPOSP* MSG*/            02595500
*            BUFSIZE!!                                                  02595600
*            '" "BUFSIZE"'!!                                            02595700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02595800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02595900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02596000
*        ZMACRET=8;                          /* MACRO ERROR */          02596100
*      END;                                                             02596200
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02596300
*  IF BUFSIZE(1)^=''                         /* CHECK FOR NULL */       02596400
*    THEN                                                               02596500
*      DO;                                                              02596600
*        XBUFSIZE=BUFSIZE(1);                /* SET XVARIABLE */        02596700
*        ZXBUFSIZE='INPUT';                  /* SET IN/OUTPUT */        02596800
*      END;                                                             02596900
*/*PE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02597000
*  IF TRANSLATE(BUFSOURC(1))                                            02597100
*              = 'DSPACE'                    /* CHECK FOR KEYWORD */    02597200
*    THEN                                                               02597300
*      DO;                                                              02597400
*        XBUFSOURC='DSPACE';                 /* SET XVARIABLE */        02597500
*        IF NUMBER(BUFSOURC)>1               /* CHECK POSITIONALS */    02597600
*          THEN                                                         02597700
*            DO;                                                        02597800
*              ZMS=' 8, "BUFSOURC'!!         /**KPOSP* MSG*/            02597900
*                  BUFSOURC!!                                           02598000
*                  '" "BUFSOURC"'!!                                     02598100
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02598200
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02598300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02598400
*              ZMACRET=8;                    /* MACRO ERROR */          02598500
*            END;                                                       02598600
*      END;                                                             02598700
*/*PE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02598800
*  IF BACK='BACK'                            /* CHECK ENTRY */          02598900
*    THEN                                                               02599000
*      DO;                                                              02599100
*        ZMS=' 8, THE "BACK" KEY'!!          /**KOPTP* MSG*/            02599200
*            ' MUST CONTAIN ONE'!!                                      02599300
*            ' (OR MORE) ARGUMENT(S).';                                 02599400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02599500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02599600
*        ZMACRET=8;                          /* MACRO ERROR */          02599700
*      END;                                                             02599800
*  IF NUMBER(BACK)>1                         /* CHECK POSITIONALS */    02599900
*    THEN                                                               02600000
*      DO;                                                              02600100
*        ZMS=' 8, "BACK'!!                   /**KPOSP* MSG*/            02600200
*            BACK!!                                                     02600300
*            '" "BACK"'!!                                               02600400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02600500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02600600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02600700
*        ZMACRET=8;                          /* MACRO ERROR */          02600800
*      END;                                                             02600900
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02601000
*  IF TRANSLATE(BACK(1)) = '31'                                         02601100
*    THEN                                                               02601200
*      XBACK = '31';                         /* SET XVARIABLE */        02601300
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02601400
*  IF TRANSLATE(BACK(1)) = '64'                                         02601500
*    THEN                                                               02601600
*      XBACK = '64';                         /* SET XVARIABLE */        02601700
*/*PE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02601800
*  IF XBACK^=''                              /* CHECK FOR KEYWORD */    02601900
*    THEN                                                               02602000
*      ZXBACK='INPUT';                       /* SET IN/OUTPUT */        02602100
*    ELSE                                                               02602200
*      DO;                                   /* KEYWORD NOT ENTERED */  02602300
*        IF BACK(1)^=''                                                 02602400
*          THEN                                                         02602500
*            DO;                                                        02602600
*              ZMS=' 8, "BACK'!!             /**KUKWP* MSG*/            02602700
*                  BACK!!'"'!!                                          02602800
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02602900
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02603000
*                  ' "31"'!!                 /* VALID KEYWORD */        02603100
*                  ' OR "64".';              /* VALID KEYWORD */        02603200
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02603300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02603400
*              ZMACRET=8;                    /* MACRO ERROR */          02603500
*            END;                                                       02603600
*      END;                                                             02603700
*/*PE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02603800
*  IF TRANSLATE(BUFSOURC(1))                                            02603900
*              = 'ECSA'                      /* CHECK FOR KEYWORD */    02604000
*    THEN                                                               02604100
*      DO;                                                              02604200
*        XBUFSOURC='ECSA';                   /* SET XVARIABLE */        02604300
*        IF NUMBER(BUFSOURC)>1               /* CHECK POSITIONALS */    02604400
*          THEN                                                         02604500
*            DO;                                                        02604600
*              ZMS=' 8, "BUFSOURC'!!         /**KPOSP* MSG*/            02604700
*                  BUFSOURC!!                                           02604800
*                  '" "BUFSOURC"'!!                                     02604900
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02605000
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02605100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02605200
*              ZMACRET=8;                    /* MACRO ERROR */          02605300
*            END;                                                       02605400
*      END;                                                             02605500
*/*PE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02605600
*  IF TRANSLATE(BUFSOURC(1))                                            02605700
*              = 'HVCOMM'                    /* CHECK FOR KEYWORD */    02605800
*    THEN                                                               02605900
*      DO;                                                              02606000
*        XBUFSOURC='HVCOMM';                 /* SET XVARIABLE */        02606100
*        IF NUMBER(BUFSOURC)>1               /* CHECK POSITIONALS */    02606200
*          THEN                                                         02606300
*            DO;                                                        02606400
*              ZMS=' 8, "BUFSOURC'!!         /**KPOSP* MSG*/            02606500
*                  BUFSOURC!!                                           02606600
*                  '" "BUFSOURC"'!!                                     02606700
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02606800
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02606900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02607000
*              ZMACRET=8;                    /* MACRO ERROR */          02607100
*            END;                                                       02607200
*      END;                                                             02607300
*/*PE.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02607400
*  IF XBUFSOURC^=''                          /* CHECK FOR KEYWORD */    02607500
*    THEN                                                               02607600
*      ZXBUFSOURC='INPUT';                   /* SET IN/OUTPUT */        02607700
*    ELSE                                                               02607800
*      DO;                                   /* KEYWORD NOT ENTERED */  02607900
*        IF BUFSOURC(1)^=''                  /* CHECK FOR KEYWORD */    02608000
*          THEN                                                         02608100
*            DO;                                                        02608200
*              ZXBUFSOURC='';                /* RESET IN/OUTPUT */      02608300
*              ZMS=' 8, "BUFSOURC'!!         /**KUKWP* MSG*/            02608400
*                  BUFSOURC!!'"'!!                                      02608500
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02608600
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02608700
*                  ' "DSPACE",'!!            /* VALID KEYWORD */        02608800
*                  ' "ECSA",'!!              /* VALID KEYWORD */        02608900
*                  ' OR "HVCOMM".';          /* VALID KEYWORD */        02609000
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02609100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02609200
*              ZMACRET=8;                    /* MACRO ERROR */          02609300
*            END;                                                       02609400
*      END;                                                             02609500
*/*PE.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02609600
*  IF DS_INFO='DS_INFO'                      /* CHECK ENTRY */          02609700
*    THEN                                                               02609800
*      DO;                                                              02609900
*        ZMS=' 8, THE "DS_INFO" KEY'!!       /**KOPTP* MSG*/            02610000
*            ' MUST CONTAIN ONE'!!                                      02610100
*            ' (OR MORE) ARGUMENT(S).';                                 02610200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02610300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02610400
*        ZMACRET=8;                          /* MACRO ERROR */          02610500
*      END;                                                             02610600
*  IF NUMBER(DS_INFO)>1                      /* CHECK POSITIONALS */    02610700
*    THEN                                                               02610800
*      DO;                                                              02610900
*        ZMS=' 8, "DS_INFO'!!                /**KPOSP* MSG*/            02611000
*            DS_INFO!!                                                  02611100
*            '" "DS_INFO"'!!                                            02611200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02611300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02611400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02611500
*        ZMACRET=8;                          /* MACRO ERROR */          02611600
*      END;                                                             02611700
*/*PE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02611800
*  IF DS_INFO(1)^=''                         /* CHECK FOR NULL */       02611900
*    THEN                                                               02612000
*      DO;                                                              02612100
*        XDS_INFO=DS_INFO(1);                /* SET XVARIABLE */        02612200
*        ZXDS_INFO='OUTPUT';                 /* SET IN/OUTPUT */        02612300
*      END;                                                             02612400
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02612500
*  IF NUMBER(EXPBUF)>1                       /* CHECK POSITIONALS */    02612600
*    THEN                                                               02612700
*      DO;                                                              02612800
*        ZMS=' 8, "EXPBUF'!!                 /**KPOSP* MSG*/            02612900
*            EXPBUF!!                                                   02613000
*            '" "EXPBUF"'!!                                             02613100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02613200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02613300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02613400
*        ZMACRET=8;                          /* MACRO ERROR */          02613500
*      END;                                                             02613600
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02613700
*  IF EXPBUF(1)^=''                          /* CHECK FOR NULL */       02613800
*    THEN                                                               02613900
*      DO;                                                              02614000
*        XEXPBUF=EXPBUF(1);                  /* SET XVARIABLE */        02614100
*        ZXEXPBUF='INPUT';                   /* SET IN/OUTPUT */        02614200
*      END;                                                             02614300
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02614400
*  IF NUMBER(INITBUF)>1                      /* CHECK POSITIONALS */    02614500
*    THEN                                                               02614600
*      DO;                                                              02614700
*        ZMS=' 8, "INITBUF'!!                /**KPOSP* MSG*/            02614800
*            INITBUF!!                                                  02614900
*            '" "INITBUF"'!!                                            02615000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02615100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02615200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02615300
*        ZMACRET=8;                          /* MACRO ERROR */          02615400
*      END;                                                             02615500
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02615600
*  IF INITBUF(1)^=''                         /* CHECK FOR NULL */       02615700
*    THEN                                                               02615800
*      DO;                                                              02615900
*        XINITBUF=INITBUF(1);                /* SET XVARIABLE */        02616000
*        ZXINITBUF='INPUT';                  /* SET IN/OUTPUT */        02616100
*      END;                                                             02616200
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02616300
*  IF NUMBER(MINFREE)>1                      /* CHECK POSITIONALS */    02616400
*    THEN                                                               02616500
*      DO;                                                              02616600
*        ZMS=' 8, "MINFREE'!!                /**KPOSP* MSG*/            02616700
*            MINFREE!!                                                  02616800
*            '" "MINFREE"'!!                                            02616900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02617000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02617100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02617200
*        ZMACRET=8;                          /* MACRO ERROR */          02617300
*      END;                                                             02617400
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02617500
*  IF MINFREE(1)^=''                         /* CHECK FOR NULL */       02617600
*    THEN                                                               02617700
*      DO;                                                              02617800
*        XMINFREE=MINFREE(1);                /* SET XVARIABLE */        02617900
*        ZXMINFREE='INPUT';                  /* SET IN/OUTPUT */        02618000
*      END;                                                             02618100
*/*PE.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02618200
*  IF RETPTOKN='RETPTOKN'                    /* CHECK ENTRY */          02618300
*    THEN                                                               02618400
*      DO;                                                              02618500
*        ZMS=' 8, THE "RETPTOKN" KEY'!!      /**KOPTP* MSG*/            02618600
*            ' MUST CONTAIN ONE'!!                                      02618700
*            ' (OR MORE) ARGUMENT(S).';                                 02618800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02618900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02619000
*        ZMACRET=8;                          /* MACRO ERROR */          02619100
*      END;                                                             02619200
*  IF NUMBER(RETPTOKN)>1                     /* CHECK POSITIONALS */    02619300
*    THEN                                                               02619400
*      DO;                                                              02619500
*        ZMS=' 8, "RETPTOKN'!!               /**KPOSP* MSG*/            02619600
*            RETPTOKN!!                                                 02619700
*            '" "RETPTOKN"'!!                                           02619800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02619900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02620000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02620100
*        ZMACRET=8;                          /* MACRO ERROR */          02620200
*      END;                                                             02620300
*/*PE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02620400
*  IF RETPTOKN(1)^=''                        /* CHECK FOR NULL */       02620500
*    THEN                                                               02620600
*      DO;                                                              02620700
*        XRETPTOKN=RETPTOKN(1);              /* SET XVARIABLE */        02620800
*        ZXRETPTOKN='OUTPUT';                /* SET IN/OUTPUT */        02620900
*      END;                                                             02621000
*/*PE.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02621100
*  IF STATAREA='STATAREA'                    /* CHECK ENTRY */          02621200
*    THEN                                                               02621300
*      DO;                                                              02621400
*        ZMS=' 8, THE "STATAREA" KEY'!!      /**KOPTP* MSG*/            02621500
*            ' MUST CONTAIN ONE'!!                                      02621600
*            ' (OR MORE) ARGUMENT(S).';                                 02621700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02621800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02621900
*        ZMACRET=8;                          /* MACRO ERROR */          02622000
*      END;                                                             02622100
*  IF NUMBER(STATAREA)>1                     /* CHECK POSITIONALS */    02622200
*    THEN                                                               02622300
*      DO;                                                              02622400
*        ZMS=' 8, "STATAREA'!!               /**KPOSP* MSG*/            02622500
*            STATAREA!!                                                 02622600
*            '" "STATAREA"'!!                                           02622700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02622800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02622900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02623000
*        ZMACRET=8;                          /* MACRO ERROR */          02623100
*      END;                                                             02623200
*/*PE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02623300
*  IF STATAREA(1)^=''                        /* CHECK FOR NULL */       02623400
*    THEN                                                               02623500
*      DO;                                                              02623600
*        XSTATAREA=STATAREA(1);              /* SET XVARIABLE */        02623700
*        ZXSTATAREA='OUTPUT';                /* SET IN/OUTPUT */        02623800
*      END;                                                             02623900
*/*PE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02624000
*  IF TRANSLATE(REQUEST(1))                                             02624100
*              = 'DELETE_POOL'               /* CHECK FOR KEYWORD */    02624200
*    THEN                                                               02624300
*      DO;                                                              02624400
*        XREQUEST='DELETE_POOL';             /* SET XVARIABLE */        02624500
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    02624600
*          THEN                                                         02624700
*            DO;                                                        02624800
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            02624900
*                  REQUEST!!                                            02625000
*                  '" "REQUEST"'!!                                      02625100
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02625200
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02625300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02625400
*              ZMACRET=8;                    /* MACRO ERROR */          02625500
*            END;                                                       02625600
*      END;                                                             02625700
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02625800
*  IF NUMBER(POOLTOKN)>1                     /* CHECK POSITIONALS */    02625900
*    THEN                                                               02626000
*      DO;                                                              02626100
*        ZMS=' 8, "POOLTOKN'!!               /**KPOSP* MSG*/            02626200
*            POOLTOKN!!                                                 02626300
*            '" "POOLTOKN"'!!                                           02626400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02626500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02626600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02626700
*        ZMACRET=8;                          /* MACRO ERROR */          02626800
*      END;                                                             02626900
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02627000
*  IF POOLTOKN(1)^=''                        /* CHECK FOR NULL */       02627100
*    THEN                                                               02627200
*      DO;                                                              02627300
*        XPOOLTOKN=POOLTOKN(1);              /* SET XVARIABLE */        02627400
*        ZXPOOLTOKN='INPUT';                 /* SET IN/OUTPUT */        02627500
*      END;                                                             02627600
*/*PE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02627700
*  IF TRANSLATE(REQUEST(1))                                             02627800
*              = 'DUMP_INFO'                 /* CHECK FOR KEYWORD */    02627900
*    THEN                                                               02628000
*      DO;                                                              02628100
*        XREQUEST='DUMP_INFO';               /* SET XVARIABLE */        02628200
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    02628300
*          THEN                                                         02628400
*            DO;                                                        02628500
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            02628600
*                  REQUEST!!                                            02628700
*                  '" "REQUEST"'!!                                      02628800
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02628900
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02629000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02629100
*              ZMACRET=8;                    /* MACRO ERROR */          02629200
*            END;                                                       02629300
*      END;                                                             02629400
*/*PE.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02629500
*  IF DS_INFO='DS_INFO'                      /* CHECK ENTRY */          02629600
*    THEN                                                               02629700
*      DO;                                                              02629800
*        ZMS=' 8, THE "DS_INFO" KEY'!!       /**KOPTP* MSG*/            02629900
*            ' MUST CONTAIN ONE'!!                                      02630000
*            ' (OR MORE) ARGUMENT(S).';                                 02630100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02630200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02630300
*        ZMACRET=8;                          /* MACRO ERROR */          02630400
*      END;                                                             02630500
*  IF NUMBER(DS_INFO)>1                      /* CHECK POSITIONALS */    02630600
*    THEN                                                               02630700
*      DO;                                                              02630800
*        ZMS=' 8, "DS_INFO'!!                /**KPOSP* MSG*/            02630900
*            DS_INFO!!                                                  02631000
*            '" "DS_INFO"'!!                                            02631100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02631200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02631300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02631400
*        ZMACRET=8;                          /* MACRO ERROR */          02631500
*      END;                                                             02631600
*/*PE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02631700
*  IF DS_INFO(1)^=''                         /* CHECK FOR NULL */       02631800
*    THEN                                                               02631900
*      DO;                                                              02632000
*        XDS_INFO=DS_INFO(1);                /* SET XVARIABLE */        02632100
*        ZXDS_INFO='OUTPUT';                 /* SET IN/OUTPUT */        02632200
*      END;                                                             02632300
*/*PE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02632400
*  IF TRANSLATE(REQUEST(1))                                             02632500
*              = 'FIX_BUFFER'                /* CHECK FOR KEYWORD */    02632600
*    THEN                                                               02632700
*      DO;                                                              02632800
*        XREQUEST='FIX_BUFFER';              /* SET XVARIABLE */        02632900
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    02633000
*          THEN                                                         02633100
*            DO;                                                        02633200
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            02633300
*                  REQUEST!!                                            02633400
*                  '" "REQUEST"'!!                                      02633500
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02633600
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02633700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02633800
*              ZMACRET=8;                    /* MACRO ERROR */          02633900
*            END;                                                       02634000
*      END;                                                             02634100
*/*PE.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02634200
*  XDUMMY5='';                               /* RESET XVARIABLE */      02634300
*  IF BUFLIST^=''                            /* CHECK ME KEY */         02634400
*    THEN                                                               02634500
*      DO;                                   /* VALID ME KEY */         02634600
*        IF NUMBER(BUFLIST)>1                /* CHECK SUBLISTS */       02634700
*          THEN                                                         02634800
*            DO;                                                        02634900
*              ZMS=' 8, "BUFLIST'!!          /**KPOSP* MSG*/            02635000
*                  BUFLIST!!                                            02635100
*                  '" "BUFLIST"'!!                                      02635200
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02635300
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02635400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02635500
*              ZMACRET=8;                    /* MACRO ERROR */          02635600
*            END;                                                       02635700
*        XDUMMY5='BUFLIST';                  /* SET XVARIABLE */        02635800
*        XBUFLIST=BUFLIST(1);                /* SET XVARIABLE */        02635900
*        ZXDUMMY5='INPUT';                   /* SET IN/OUTPUT */        02636000
*        ZXBUFLIST='INPUT';                  /* SET IN/OUTPUT */        02636100
*        IF BUFLIST(1)=''                    /* CHECK ME KEY */         02636200
*          THEN                                                         02636300
*            DO;                                                        02636400
*              ZXDUMMY5='';                  /* RESET IN/OUTPUT */      02636500
*              ZXBUFLIST='';                 /* RESET IN/OUTPUT */      02636600
*            END;                                                       02636700
*      END;                                                             02636800
*/*PE.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02636900
*  IF BUFLST64^=''                           /* CHECK ME KEY */         02637000
*    THEN                                                               02637100
*      DO;                                                              02637200
*        IF NUMBER(BUFLST64)>1               /* CHECK SUBLISTS */       02637300
*          THEN                                                         02637400
*            DO;                                                        02637500
*              ZMS=' 8, "BUFLST64'!!         /**KPOSP* MSG*/            02637600
*                  BUFLST64!!                                           02637700
*                  '" "BUFLST64"'!!                                     02637800
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02637900
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02638000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02638100
*              ZMACRET=8;                    /* MACRO ERROR */          02638200
*            END;                                                       02638300
*        IF XDUMMY5=''                       /* CHECK XVARIABLE */      02638400
*          THEN                                                         02638500
*            DO;                             /* VALID ME KEY */         02638600
*              XDUMMY5='BUFLST64';           /* SET XVAR1 */            02638700
*              XBUFLST64=BUFLST64(1);        /* SET XVAR2 */            02638800
*              ZXDUMMY5='INPUT';             /* SET IN/OUTPUT */        02638900
*              ZXBUFLST64='INPUT';           /* SET IN/OUTPUT */        02639000
*              IF BUFLST64(1)=''             /* CHECK ME KEY */         02639100
*                THEN                                                   02639200
*                  DO;                                                  02639300
*                    ZXDUMMY5='';            /* RESET IN/OUTPUT */      02639400
*                    ZXBUFLST64='';          /* RESET IN/OUTPUT */      02639500
*                  END;                                                 02639600
*            END;                                                       02639700
*          ELSE                                                         02639800
*            DO;                                                        02639900
*              ZMS=' 8, "BUFLST64'!!         /**KMEKP* MSG*/            02640000
*                  BUFLST64!!'"'!!                                      02640100
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'!!                02640200
*                  XDUMMY5!!                                            02640300
*                  '" KEY.';                                            02640400
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02640500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02640600
*              ZMACRET=8;                    /* MACRO ERROR */          02640700
*            END;                                                       02640800
*      END;                                                             02640900
*/*PE.KMEKY05 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT RESETS--------*/ 02641000
*  IF XDUMMY5=''                             /* CHECK XVARIABLE */      02641100
*    THEN                                                               02641200
*      DO;                                                              02641300
*        XDUMMY5='';                         /* RESET DEFAULT */        02641400
*        ZXDUMMY5='';                        /* RESET IN/OUTPUT */      02641500
*        XBUFLIST='';                        /* RESET DEFAULT */        02641600
*        ZXBUFLIST='';                       /* RESET IN/OUTPUT */      02641700
*      END;                                                             02641800
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02641900
*  IF NUMBER(BUFNUM)>1                       /* CHECK POSITIONALS */    02642000
*    THEN                                                               02642100
*      DO;                                                              02642200
*        ZMS=' 8, "BUFNUM'!!                 /**KPOSP* MSG*/            02642300
*            BUFNUM!!                                                   02642400
*            '" "BUFNUM"'!!                                             02642500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02642600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02642700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02642800
*        ZMACRET=8;                          /* MACRO ERROR */          02642900
*      END;                                                             02643000
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02643100
*  IF BUFNUM(1)^=''                          /* CHECK FOR NULL */       02643200
*    THEN                                                               02643300
*      DO;                                                              02643400
*        XBUFNUM=BUFNUM(1);                  /* SET XVARIABLE */        02643500
*        ZXBUFNUM='INPUT';                   /* SET IN/OUTPUT */        02643600
*      END;                                                             02643700
*/*PE.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02643800
*  IF ERRBFLST='ERRBFLST'                    /* CHECK ENTRY */          02643900
*    THEN                                                               02644000
*      DO;                                                              02644100
*        ZMS=' 8, THE "ERRBFLST" KEY'!!      /**KOPTP* MSG*/            02644200
*            ' MUST CONTAIN ONE'!!                                      02644300
*            ' (OR MORE) ARGUMENT(S).';                                 02644400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02644500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02644600
*        ZMACRET=8;                          /* MACRO ERROR */          02644700
*      END;                                                             02644800
*  IF NUMBER(ERRBFLST)>1                     /* CHECK POSITIONALS */    02644900
*    THEN                                                               02645000
*      DO;                                                              02645100
*        ZMS=' 8, "ERRBFLST'!!               /**KPOSP* MSG*/            02645200
*            ERRBFLST!!                                                 02645300
*            '" "ERRBFLST"'!!                                           02645400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02645500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02645600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02645700
*        ZMACRET=8;                          /* MACRO ERROR */          02645800
*      END;                                                             02645900
*/*PE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02646000
*  IF ERRBFLST(1)^=''                        /* CHECK FOR NULL */       02646100
*    THEN                                                               02646200
*      DO;                                                              02646300
*        XERRBFLST=ERRBFLST(1);              /* SET XVARIABLE */        02646400
*        ZXERRBFLST='OUTPUT';                /* SET IN/OUTPUT */        02646500
*      END;                                                             02646600
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02646700
*  IF GAP='GAP'                              /* CHECK ENTRY */          02646800
*    THEN                                                               02646900
*      DO;                                                              02647000
*        ZMS=' 8, THE "GAP" KEY'!!           /**KOPTP* MSG*/            02647100
*            ' MUST CONTAIN ONE'!!                                      02647200
*            ' (OR MORE) ARGUMENT(S).';                                 02647300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02647400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02647500
*        ZMACRET=8;                          /* MACRO ERROR */          02647600
*      END;                                                             02647700
*  IF NUMBER(GAP)>1                          /* CHECK POSITIONALS */    02647800
*    THEN                                                               02647900
*      DO;                                                              02648000
*        ZMS=' 8, "GAP'!!                    /**KPOSP* MSG*/            02648100
*            GAP!!                                                      02648200
*            '" "GAP"'!!                                                02648300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02648400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02648500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02648600
*        ZMACRET=8;                          /* MACRO ERROR */          02648700
*      END;                                                             02648800
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02648900
*  IF GAP(1)^=''                             /* CHECK FOR NULL */       02649000
*    THEN                                                               02649100
*      DO;                                                              02649200
*        XGAP=GAP(1);                        /* SET XVARIABLE */        02649300
*        ZXGAP='INPUT';                      /* SET IN/OUTPUT */        02649400
*      END;                                                             02649500
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02649600
*  IF COMPID='COMPID'                        /* CHECK ENTRY */          02649700
*    THEN                                                               02649800
*      DO;                                                              02649900
*        ZMS=' 8, THE "COMPID" KEY'!!        /**KOPTP* MSG*/            02650000
*            ' MUST CONTAIN ONE'!!                                      02650100
*            ' (OR MORE) ARGUMENT(S).';                                 02650200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02650300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02650400
*        ZMACRET=8;                          /* MACRO ERROR */          02650500
*      END;                                                             02650600
*  IF NUMBER(COMPID)>1                       /* CHECK POSITIONALS */    02650700
*    THEN                                                               02650800
*      DO;                                                              02650900
*        ZMS=' 8, "COMPID'!!                 /**KPOSP* MSG*/            02651000
*            COMPID!!                                                   02651100
*            '" "COMPID"'!!                                             02651200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02651300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02651400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02651500
*        ZMACRET=8;                          /* MACRO ERROR */          02651600
*      END;                                                             02651700
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02651800
*  IF COMPID(1)^=''                          /* CHECK FOR NULL */       02651900
*    THEN                                                               02652000
*      DO;                                                              02652100
*        XCOMPID=COMPID(1);                  /* SET XVARIABLE */        02652200
*        ZXCOMPID='INPUT';                   /* SET IN/OUTPUT */        02652300
*      END;                                                             02652400
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02652500
*  IF COMPUSER='COMPUSER'                    /* CHECK ENTRY */          02652600
*    THEN                                                               02652700
*      DO;                                                              02652800
*        ZMS=' 8, THE "COMPUSER" KEY'!!      /**KOPTP* MSG*/            02652900
*            ' MUST CONTAIN ONE'!!                                      02653000
*            ' (OR MORE) ARGUMENT(S).';                                 02653100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02653200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02653300
*        ZMACRET=8;                          /* MACRO ERROR */          02653400
*      END;                                                             02653500
*  IF NUMBER(COMPUSER)>1                     /* CHECK POSITIONALS */    02653600
*    THEN                                                               02653700
*      DO;                                                              02653800
*        ZMS=' 8, "COMPUSER'!!               /**KPOSP* MSG*/            02653900
*            COMPUSER!!                                                 02654000
*            '" "COMPUSER"'!!                                           02654100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02654200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02654300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02654400
*        ZMACRET=8;                          /* MACRO ERROR */          02654500
*      END;                                                             02654600
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02654700
*  IF COMPUSER(1)^=''                        /* CHECK FOR NULL */       02654800
*    THEN                                                               02654900
*      DO;                                                              02655000
*        XCOMPUSER=COMPUSER(1);              /* SET XVARIABLE */        02655100
*        ZXCOMPUSER='INPUT';                 /* SET IN/OUTPUT */        02655200
*      END;                                                             02655300
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02655400
*  IF THREAD='THREAD'                        /* CHECK ENTRY */          02655500
*    THEN                                                               02655600
*      DO;                                                              02655700
*        ZMS=' 8, THE "THREAD" KEY'!!        /**KOPTP* MSG*/            02655800
*            ' MUST CONTAIN ONE'!!                                      02655900
*            ' (OR MORE) ARGUMENT(S).';                                 02656000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02656100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02656200
*        ZMACRET=8;                          /* MACRO ERROR */          02656300
*      END;                                                             02656400
*  IF NUMBER(THREAD)>1                       /* CHECK POSITIONALS */    02656500
*    THEN                                                               02656600
*      DO;                                                              02656700
*        ZMS=' 8, "THREAD'!!                 /**KPOSP* MSG*/            02656800
*            THREAD!!                                                   02656900
*            '" "THREAD"'!!                                             02657000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02657100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02657200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02657300
*        ZMACRET=8;                          /* MACRO ERROR */          02657400
*      END;                                                             02657500
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02657600
*  IF THREAD(1)^=''                          /* CHECK FOR NULL */       02657700
*    THEN                                                               02657800
*      DO;                                                              02657900
*        XTHREAD=THREAD(1);                  /* SET XVARIABLE */        02658000
*        ZXTHREAD='INPUT';                   /* SET IN/OUTPUT */        02658100
*      END;                                                             02658200
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02658300
*  IF UTILRTN='UTILRTN'                      /* CHECK ENTRY */          02658400
*    THEN                                                               02658500
*      DO;                                                              02658600
*        ZMS=' 8, THE "UTILRTN" KEY'!!       /**KOPTP* MSG*/            02658700
*            ' MUST CONTAIN ONE'!!                                      02658800
*            ' (OR MORE) ARGUMENT(S).';                                 02658900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02659000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02659100
*        ZMACRET=8;                          /* MACRO ERROR */          02659200
*      END;                                                             02659300
*  IF NUMBER(UTILRTN)>1                      /* CHECK POSITIONALS */    02659400
*    THEN                                                               02659500
*      DO;                                                              02659600
*        ZMS=' 8, "UTILRTN'!!                /**KPOSP* MSG*/            02659700
*            UTILRTN!!                                                  02659800
*            '" "UTILRTN"'!!                                            02659900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02660000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02660100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02660200
*        ZMACRET=8;                          /* MACRO ERROR */          02660300
*      END;                                                             02660400
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02660500
*  IF UTILRTN(1)^=''                         /* CHECK FOR NULL */       02660600
*    THEN                                                               02660700
*      DO;                                                              02660800
*        XUTILRTN=UTILRTN(1);                /* SET XVARIABLE */        02660900
*        ZXUTILRTN='INPUT';                  /* SET IN/OUTPUT */        02661000
*      END;                                                             02661100
*/*PE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02661200
*  IF WAIT='WAIT'                            /* CHECK ENTRY */          02661300
*    THEN                                                               02661400
*      DO;                                                              02661500
*        ZMS=' 8, THE "WAIT" KEY'!!          /**KOPTP* MSG*/            02661600
*            ' MUST CONTAIN ONE'!!                                      02661700
*            ' (OR MORE) ARGUMENT(S).';                                 02661800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02661900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02662000
*        ZMACRET=8;                          /* MACRO ERROR */          02662100
*      END;                                                             02662200
*  IF NUMBER(WAIT)>1                         /* CHECK POSITIONALS */    02662300
*    THEN                                                               02662400
*      DO;                                                              02662500
*        ZMS=' 8, "WAIT'!!                   /**KPOSP* MSG*/            02662600
*            WAIT!!                                                     02662700
*            '" "WAIT"'!!                                               02662800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02662900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02663000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02663100
*        ZMACRET=8;                          /* MACRO ERROR */          02663200
*      END;                                                             02663300
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02663400
*  IF TRANSLATE(WAIT(1)) = 'NO'                                         02663500
*    THEN                                                               02663600
*      XWAIT = 'NO';                         /* SET XVARIABLE */        02663700
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02663800
*  IF TRANSLATE(WAIT(1)) = 'YES'                                        02663900
*    THEN                                                               02664000
*      XWAIT = 'YES';                        /* SET XVARIABLE */        02664100
*/*PE.KKWRD06 Additional value checks */                                02664200
*  IF TRANSLATE(WAIT(1)) = 'EXPAND'                                     02664300
*    THEN                                                               02664400
*      XWAIT = 'EXPAND';                     /* SET XVARIABLE */        02664500
*/*PE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02664600
*  IF XWAIT^=''                              /* CHECK FOR KEYWORD */    02664700
*    THEN                                                               02664800
*      ZXWAIT='INPUT';                       /* SET IN/OUTPUT */        02664900
*    ELSE                                                               02665000
*      DO;                                   /* KEYWORD NOT ENTERED */  02665100
*        IF WAIT(1)^=''                                                 02665200
*          THEN                                                         02665300
*            DO;                                                        02665400
*              ZMS=' 8, "WAIT'!!             /**KUKWP* MSG*/            02665500
*                  WAIT!!'"'!!                                          02665600
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02665700
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02665800
*                  ' "NO"'!!                 /* VALID KEYWORD */        02665900
*                  ' OR "YES".';             /* VALID KEYWORD */        02666000
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02666100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02666200
*              ZMACRET=8;                    /* MACRO ERROR */          02666300
*            END;                                                       02666400
*      END;                                                             02666500
*/*PE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02666600
*  IF TRANSLATE(REQUEST(1))                                             02666700
*              = 'FREE_BUFFER'               /* CHECK FOR KEYWORD */    02666800
*    THEN                                                               02666900
*      DO;                                                              02667000
*        XREQUEST='FREE_BUFFER';             /* SET XVARIABLE */        02667100
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    02667200
*          THEN                                                         02667300
*            DO;                                                        02667400
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            02667500
*                  REQUEST!!                                            02667600
*                  '" "REQUEST"'!!                                      02667700
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02667800
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02667900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02668000
*              ZMACRET=8;                    /* MACRO ERROR */          02668100
*            END;                                                       02668200
*      END;                                                             02668300
*/*PE.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02668400
*  XDUMMY6='';                               /* RESET XVARIABLE */      02668500
*  IF BUFLIST^=''                            /* CHECK ME KEY */         02668600
*    THEN                                                               02668700
*      DO;                                   /* VALID ME KEY */         02668800
*        IF NUMBER(BUFLIST)>1                /* CHECK SUBLISTS */       02668900
*          THEN                                                         02669000
*            DO;                                                        02669100
*              ZMS=' 8, "BUFLIST'!!          /**KPOSP* MSG*/            02669200
*                  BUFLIST!!                                            02669300
*                  '" "BUFLIST"'!!                                      02669400
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02669500
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02669600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02669700
*              ZMACRET=8;                    /* MACRO ERROR */          02669800
*            END;                                                       02669900
*        XDUMMY6='BUFLIST';                  /* SET XVARIABLE */        02670000
*        XBUFLIST=BUFLIST(1);                /* SET XVARIABLE */        02670100
*        ZXDUMMY6='INPUT';                   /* SET IN/OUTPUT */        02670200
*        ZXBUFLIST='INPUT';                  /* SET IN/OUTPUT */        02670300
*        IF BUFLIST(1)=''                    /* CHECK ME KEY */         02670400
*          THEN                                                         02670500
*            DO;                                                        02670600
*              ZXDUMMY6='';                  /* RESET IN/OUTPUT */      02670700
*              ZXBUFLIST='';                 /* RESET IN/OUTPUT */      02670800
*            END;                                                       02670900
*      END;                                                             02671000
*/*PE.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02671100
*  IF BUFLST64^=''                           /* CHECK ME KEY */         02671200
*    THEN                                                               02671300
*      DO;                                                              02671400
*        IF NUMBER(BUFLST64)>1               /* CHECK SUBLISTS */       02671500
*          THEN                                                         02671600
*            DO;                                                        02671700
*              ZMS=' 8, "BUFLST64'!!         /**KPOSP* MSG*/            02671800
*                  BUFLST64!!                                           02671900
*                  '" "BUFLST64"'!!                                     02672000
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02672100
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02672200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02672300
*              ZMACRET=8;                    /* MACRO ERROR */          02672400
*            END;                                                       02672500
*        IF XDUMMY6=''                       /* CHECK XVARIABLE */      02672600
*          THEN                                                         02672700
*            DO;                             /* VALID ME KEY */         02672800
*              XDUMMY6='BUFLST64';           /* SET XVAR1 */            02672900
*              XBUFLST64=BUFLST64(1);        /* SET XVAR2 */            02673000
*              ZXDUMMY6='INPUT';             /* SET IN/OUTPUT */        02673100
*              ZXBUFLST64='INPUT';           /* SET IN/OUTPUT */        02673200
*              IF BUFLST64(1)=''             /* CHECK ME KEY */         02673300
*                THEN                                                   02673400
*                  DO;                                                  02673500
*                    ZXDUMMY6='';            /* RESET IN/OUTPUT */      02673600
*                    ZXBUFLST64='';          /* RESET IN/OUTPUT */      02673700
*                  END;                                                 02673800
*            END;                                                       02673900
*          ELSE                                                         02674000
*            DO;                                                        02674100
*              ZMS=' 8, "BUFLST64'!!         /**KMEKP* MSG*/            02674200
*                  BUFLST64!!'"'!!                                      02674300
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'!!                02674400
*                  XDUMMY6!!                                            02674500
*                  '" KEY.';                                            02674600
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02674700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02674800
*              ZMACRET=8;                    /* MACRO ERROR */          02674900
*            END;                                                       02675000
*      END;                                                             02675100
*/*PE.KMEKY05 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT RESETS--------*/ 02675200
*  IF XDUMMY6=''                             /* CHECK XVARIABLE */      02675300
*    THEN                                                               02675400
*      DO;                                                              02675500
*        XDUMMY6='';                         /* RESET DEFAULT */        02675600
*        ZXDUMMY6='';                        /* RESET IN/OUTPUT */      02675700
*        XBUFLIST='';                        /* RESET DEFAULT */        02675800
*        ZXBUFLIST='';                       /* RESET IN/OUTPUT */      02675900
*      END;                                                             02676000
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02676100
*  IF NUMBER(BUFNUM)>1                       /* CHECK POSITIONALS */    02676200
*    THEN                                                               02676300
*      DO;                                                              02676400
*        ZMS=' 8, "BUFNUM'!!                 /**KPOSP* MSG*/            02676500
*            BUFNUM!!                                                   02676600
*            '" "BUFNUM"'!!                                             02676700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02676800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02676900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02677000
*        ZMACRET=8;                          /* MACRO ERROR */          02677100
*      END;                                                             02677200
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02677300
*  IF BUFNUM(1)^=''                          /* CHECK FOR NULL */       02677400
*    THEN                                                               02677500
*      DO;                                                              02677600
*        XBUFNUM=BUFNUM(1);                  /* SET XVARIABLE */        02677700
*        ZXBUFNUM='INPUT';                   /* SET IN/OUTPUT */        02677800
*      END;                                                             02677900
*/*PE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02678000
*  IF CLEAR='CLEAR'                          /* CHECK ENTRY */          02678100
*    THEN                                                               02678200
*      DO;                                                              02678300
*        ZMS=' 8, THE "CLEAR" KEY'!!         /**KOPTP* MSG*/            02678400
*            ' MUST CONTAIN ONE'!!                                      02678500
*            ' (OR MORE) ARGUMENT(S).';                                 02678600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02678700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02678800
*        ZMACRET=8;                          /* MACRO ERROR */          02678900
*      END;                                                             02679000
*  IF NUMBER(CLEAR)>1                        /* CHECK POSITIONALS */    02679100
*    THEN                                                               02679200
*      DO;                                                              02679300
*        ZMS=' 8, "CLEAR'!!                  /**KPOSP* MSG*/            02679400
*            CLEAR!!                                                    02679500
*            '" "CLEAR"'!!                                              02679600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02679700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02679800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02679900
*        ZMACRET=8;                          /* MACRO ERROR */          02680000
*      END;                                                             02680100
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02680200
*  IF TRANSLATE(CLEAR(1)) = 'NO'                                        02680300
*    THEN                                                               02680400
*      XCLEAR = 'NO';                        /* SET XVARIABLE */        02680500
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02680600
*  IF TRANSLATE(CLEAR(1)) = 'YES'                                       02680700
*    THEN                                                               02680800
*      XCLEAR = 'YES';                       /* SET XVARIABLE */        02680900
*/*PE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02681000
*  IF XCLEAR^=''                             /* CHECK FOR KEYWORD */    02681100
*    THEN                                                               02681200
*      ZXCLEAR='INPUT';                      /* SET IN/OUTPUT */        02681300
*    ELSE                                                               02681400
*      DO;                                   /* KEYWORD NOT ENTERED */  02681500
*        IF CLEAR(1)^=''                                                02681600
*          THEN                                                         02681700
*            DO;                                                        02681800
*              ZMS=' 8, "CLEAR'!!            /**KUKWP* MSG*/            02681900
*                  CLEAR!!'"'!!                                         02682000
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02682100
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02682200
*                  ' "NO"'!!                 /* VALID KEYWORD */        02682300
*                  ' OR "YES".';             /* VALID KEYWORD */        02682400
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02682500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02682600
*              ZMACRET=8;                    /* MACRO ERROR */          02682700
*            END;                                                       02682800
*      END;                                                             02682900
*/*PE.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02683000
*  IF ERRBFLST='ERRBFLST'                    /* CHECK ENTRY */          02683100
*    THEN                                                               02683200
*      DO;                                                              02683300
*        ZMS=' 8, THE "ERRBFLST" KEY'!!      /**KOPTP* MSG*/            02683400
*            ' MUST CONTAIN ONE'!!                                      02683500
*            ' (OR MORE) ARGUMENT(S).';                                 02683600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02683700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02683800
*        ZMACRET=8;                          /* MACRO ERROR */          02683900
*      END;                                                             02684000
*  IF NUMBER(ERRBFLST)>1                     /* CHECK POSITIONALS */    02684100
*    THEN                                                               02684200
*      DO;                                                              02684300
*        ZMS=' 8, "ERRBFLST'!!               /**KPOSP* MSG*/            02684400
*            ERRBFLST!!                                                 02684500
*            '" "ERRBFLST"'!!                                           02684600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02684700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02684800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02684900
*        ZMACRET=8;                          /* MACRO ERROR */          02685000
*      END;                                                             02685100
*/*PE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02685200
*  IF ERRBFLST(1)^=''                        /* CHECK FOR NULL */       02685300
*    THEN                                                               02685400
*      DO;                                                              02685500
*        XERRBFLST=ERRBFLST(1);              /* SET XVARIABLE */        02685600
*        ZXERRBFLST='OUTPUT';                /* SET IN/OUTPUT */        02685700
*      END;                                                             02685800
*/*PE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02685900
*  IF FREETO='FREETO'                        /* CHECK ENTRY */          02686000
*    THEN                                                               02686100
*      DO;                                                              02686200
*        ZMS=' 8, THE "FREETO" KEY'!!        /**KOPTP* MSG*/            02686300
*            ' MUST CONTAIN ONE'!!                                      02686400
*            ' (OR MORE) ARGUMENT(S).';                                 02686500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02686600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02686700
*        ZMACRET=8;                          /* MACRO ERROR */          02686800
*      END;                                                             02686900
*  IF NUMBER(FREETO)>1                       /* CHECK POSITIONALS */    02687000
*    THEN                                                               02687100
*      DO;                                                              02687200
*        ZMS=' 8, "FREETO'!!                 /**KPOSP* MSG*/            02687300
*            FREETO!!                                                   02687400
*            '" "FREETO"'!!                                             02687500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02687600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02687700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02687800
*        ZMACRET=8;                          /* MACRO ERROR */          02687900
*      END;                                                             02688000
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02688100
*  IF TRANSLATE(FREETO(1)) = 'USER'                                     02688200
*    THEN                                                               02688300
*      XFREETO = 'USER';                     /* SET XVARIABLE */        02688400
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02688500
*  IF TRANSLATE(FREETO(1)) = 'CSM'                                      02688600
*    THEN                                                               02688700
*      XFREETO = 'CSM';                      /* SET XVARIABLE */        02688800
*/*PE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02688900
*  IF XFREETO^=''                            /* CHECK FOR KEYWORD */    02689000
*    THEN                                                               02689100
*      ZXFREETO='INPUT';                     /* SET IN/OUTPUT */        02689200
*    ELSE                                                               02689300
*      DO;                                   /* KEYWORD NOT ENTERED */  02689400
*        IF FREETO(1)^=''                                               02689500
*          THEN                                                         02689600
*            DO;                                                        02689700
*              ZMS=' 8, "FREETO'!!           /**KUKWP* MSG*/            02689800
*                  FREETO!!'"'!!                                        02689900
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02690000
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02690100
*                  ' "USER"'!!               /* VALID KEYWORD */        02690200
*                  ' OR "CSM".';             /* VALID KEYWORD */        02690300
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02690400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02690500
*              ZMACRET=8;                    /* MACRO ERROR */          02690600
*            END;                                                       02690700
*      END;                                                             02690800
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02690900
*  IF GAP='GAP'                              /* CHECK ENTRY */          02691000
*    THEN                                                               02691100
*      DO;                                                              02691200
*        ZMS=' 8, THE "GAP" KEY'!!           /**KOPTP* MSG*/            02691300
*            ' MUST CONTAIN ONE'!!                                      02691400
*            ' (OR MORE) ARGUMENT(S).';                                 02691500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02691600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02691700
*        ZMACRET=8;                          /* MACRO ERROR */          02691800
*      END;                                                             02691900
*  IF NUMBER(GAP)>1                          /* CHECK POSITIONALS */    02692000
*    THEN                                                               02692100
*      DO;                                                              02692200
*        ZMS=' 8, "GAP'!!                    /**KPOSP* MSG*/            02692300
*            GAP!!                                                      02692400
*            '" "GAP"'!!                                                02692500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02692600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02692700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02692800
*        ZMACRET=8;                          /* MACRO ERROR */          02692900
*      END;                                                             02693000
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02693100
*  IF GAP(1)^=''                             /* CHECK FOR NULL */       02693200
*    THEN                                                               02693300
*      DO;                                                              02693400
*        XGAP=GAP(1);                        /* SET XVARIABLE */        02693500
*        ZXGAP='INPUT';                      /* SET IN/OUTPUT */        02693600
*      END;                                                             02693700
*/*PE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02693800
*  IF SKIPBUF='SKIPBUF'                      /* CHECK ENTRY */          02693900
*    THEN                                                               02694000
*      DO;                                                              02694100
*        ZMS=' 8, THE "SKIPBUF" KEY'!!       /**KOPTP* MSG*/            02694200
*            ' MUST CONTAIN ONE'!!                                      02694300
*            ' (OR MORE) ARGUMENT(S).';                                 02694400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02694500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02694600
*        ZMACRET=8;                          /* MACRO ERROR */          02694700
*      END;                                                             02694800
*  IF NUMBER(SKIPBUF)>1                      /* CHECK POSITIONALS */    02694900
*    THEN                                                               02695000
*      DO;                                                              02695100
*        ZMS=' 8, "SKIPBUF'!!                /**KPOSP* MSG*/            02695200
*            SKIPBUF!!                                                  02695300
*            '" "SKIPBUF"'!!                                            02695400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02695500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02695600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02695700
*        ZMACRET=8;                          /* MACRO ERROR */          02695800
*      END;                                                             02695900
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02696000
*  IF TRANSLATE(SKIPBUF(1)) = 'NO'                                      02696100
*    THEN                                                               02696200
*      XSKIPBUF = 'NO';                      /* SET XVARIABLE */        02696300
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02696400
*  IF TRANSLATE(SKIPBUF(1)) = 'YES'                                     02696500
*    THEN                                                               02696600
*      XSKIPBUF = 'YES';                     /* SET XVARIABLE */        02696700
*/*PE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02696800
*  IF XSKIPBUF^=''                           /* CHECK FOR KEYWORD */    02696900
*    THEN                                                               02697000
*      ZXSKIPBUF='INPUT';                    /* SET IN/OUTPUT */        02697100
*    ELSE                                                               02697200
*      DO;                                   /* KEYWORD NOT ENTERED */  02697300
*        IF SKIPBUF(1)^=''                                              02697400
*          THEN                                                         02697500
*            DO;                                                        02697600
*              ZMS=' 8, "SKIPBUF'!!          /**KUKWP* MSG*/            02697700
*                  SKIPBUF!!'"'!!                                       02697800
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02697900
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02698000
*                  ' "NO"'!!                 /* VALID KEYWORD */        02698100
*                  ' OR "YES".';             /* VALID KEYWORD */        02698200
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02698300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02698400
*              ZMACRET=8;                    /* MACRO ERROR */          02698500
*            END;                                                       02698600
*      END;                                                             02698700
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02698800
*  IF COMPID='COMPID'                        /* CHECK ENTRY */          02698900
*    THEN                                                               02699000
*      DO;                                                              02699100
*        ZMS=' 8, THE "COMPID" KEY'!!        /**KOPTP* MSG*/            02699200
*            ' MUST CONTAIN ONE'!!                                      02699300
*            ' (OR MORE) ARGUMENT(S).';                                 02699400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02699500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02699600
*        ZMACRET=8;                          /* MACRO ERROR */          02699700
*      END;                                                             02699800
*  IF NUMBER(COMPID)>1                       /* CHECK POSITIONALS */    02699900
*    THEN                                                               02700000
*      DO;                                                              02700100
*        ZMS=' 8, "COMPID'!!                 /**KPOSP* MSG*/            02700200
*            COMPID!!                                                   02700300
*            '" "COMPID"'!!                                             02700400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02700500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02700600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02700700
*        ZMACRET=8;                          /* MACRO ERROR */          02700800
*      END;                                                             02700900
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02701000
*  IF COMPID(1)^=''                          /* CHECK FOR NULL */       02701100
*    THEN                                                               02701200
*      DO;                                                              02701300
*        XCOMPID=COMPID(1);                  /* SET XVARIABLE */        02701400
*        ZXCOMPID='INPUT';                   /* SET IN/OUTPUT */        02701500
*      END;                                                             02701600
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02701700
*  IF COMPUSER='COMPUSER'                    /* CHECK ENTRY */          02701800
*    THEN                                                               02701900
*      DO;                                                              02702000
*        ZMS=' 8, THE "COMPUSER" KEY'!!      /**KOPTP* MSG*/            02702100
*            ' MUST CONTAIN ONE'!!                                      02702200
*            ' (OR MORE) ARGUMENT(S).';                                 02702300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02702400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02702500
*        ZMACRET=8;                          /* MACRO ERROR */          02702600
*      END;                                                             02702700
*  IF NUMBER(COMPUSER)>1                     /* CHECK POSITIONALS */    02702800
*    THEN                                                               02702900
*      DO;                                                              02703000
*        ZMS=' 8, "COMPUSER'!!               /**KPOSP* MSG*/            02703100
*            COMPUSER!!                                                 02703200
*            '" "COMPUSER"'!!                                           02703300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02703400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02703500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02703600
*        ZMACRET=8;                          /* MACRO ERROR */          02703700
*      END;                                                             02703800
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02703900
*  IF COMPUSER(1)^=''                        /* CHECK FOR NULL */       02704000
*    THEN                                                               02704100
*      DO;                                                              02704200
*        XCOMPUSER=COMPUSER(1);              /* SET XVARIABLE */        02704300
*        ZXCOMPUSER='INPUT';                 /* SET IN/OUTPUT */        02704400
*      END;                                                             02704500
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02704600
*  IF THREAD='THREAD'                        /* CHECK ENTRY */          02704700
*    THEN                                                               02704800
*      DO;                                                              02704900
*        ZMS=' 8, THE "THREAD" KEY'!!        /**KOPTP* MSG*/            02705000
*            ' MUST CONTAIN ONE'!!                                      02705100
*            ' (OR MORE) ARGUMENT(S).';                                 02705200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02705300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02705400
*        ZMACRET=8;                          /* MACRO ERROR */          02705500
*      END;                                                             02705600
*  IF NUMBER(THREAD)>1                       /* CHECK POSITIONALS */    02705700
*    THEN                                                               02705800
*      DO;                                                              02705900
*        ZMS=' 8, "THREAD'!!                 /**KPOSP* MSG*/            02706000
*            THREAD!!                                                   02706100
*            '" "THREAD"'!!                                             02706200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02706300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02706400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02706500
*        ZMACRET=8;                          /* MACRO ERROR */          02706600
*      END;                                                             02706700
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02706800
*  IF THREAD(1)^=''                          /* CHECK FOR NULL */       02706900
*    THEN                                                               02707000
*      DO;                                                              02707100
*        XTHREAD=THREAD(1);                  /* SET XVARIABLE */        02707200
*        ZXTHREAD='INPUT';                   /* SET IN/OUTPUT */        02707300
*      END;                                                             02707400
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02707500
*  IF UTILRTN='UTILRTN'                      /* CHECK ENTRY */          02707600
*    THEN                                                               02707700
*      DO;                                                              02707800
*        ZMS=' 8, THE "UTILRTN" KEY'!!       /**KOPTP* MSG*/            02707900
*            ' MUST CONTAIN ONE'!!                                      02708000
*            ' (OR MORE) ARGUMENT(S).';                                 02708100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02708200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02708300
*        ZMACRET=8;                          /* MACRO ERROR */          02708400
*      END;                                                             02708500
*  IF NUMBER(UTILRTN)>1                      /* CHECK POSITIONALS */    02708600
*    THEN                                                               02708700
*      DO;                                                              02708800
*        ZMS=' 8, "UTILRTN'!!                /**KPOSP* MSG*/            02708900
*            UTILRTN!!                                                  02709000
*            '" "UTILRTN"'!!                                            02709100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02709200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02709300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02709400
*        ZMACRET=8;                          /* MACRO ERROR */          02709500
*      END;                                                             02709600
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02709700
*  IF UTILRTN(1)^=''                         /* CHECK FOR NULL */       02709800
*    THEN                                                               02709900
*      DO;                                                              02710000
*        XUTILRTN=UTILRTN(1);                /* SET XVARIABLE */        02710100
*        ZXUTILRTN='INPUT';                  /* SET IN/OUTPUT */        02710200
*      END;                                                             02710300
*/*PE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02710400
*  IF TRANSLATE(REQUEST(1))                                             02710500
*              = 'GET_BUFFER'                /* CHECK FOR KEYWORD */    02710600
*    THEN                                                               02710700
*      DO;                                                              02710800
*        XREQUEST='GET_BUFFER';              /* SET XVARIABLE */        02710900
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    02711000
*          THEN                                                         02711100
*            DO;                                                        02711200
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            02711300
*                  REQUEST!!                                            02711400
*                  '" "REQUEST"'!!                                      02711500
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02711600
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02711700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02711800
*              ZMACRET=8;                    /* MACRO ERROR */          02711900
*            END;                                                       02712000
*      END;                                                             02712100
*/*PE.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02712200
*  XDUMMY7='';                               /* RESET XVARIABLE */      02712300
*  IF BUFLIST^=''                            /* CHECK ME KEY */         02712400
*    THEN                                                               02712500
*      DO;                                   /* VALID ME KEY */         02712600
*        IF NUMBER(BUFLIST)>1                /* CHECK SUBLISTS */       02712700
*          THEN                                                         02712800
*            DO;                                                        02712900
*              ZMS=' 8, "BUFLIST'!!          /**KPOSP* MSG*/            02713000
*                  BUFLIST!!                                            02713100
*                  '" "BUFLIST"'!!                                      02713200
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02713300
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02713400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02713500
*              ZMACRET=8;                    /* MACRO ERROR */          02713600
*            END;                                                       02713700
*        XDUMMY7='BUFLIST';                  /* SET XVARIABLE */        02713800
*        XBUFLIST=BUFLIST(1);                /* SET XVARIABLE */        02713900
*        ZXDUMMY7='INPUT';                   /* SET IN/OUTPUT */        02714000
*        ZXBUFLIST='INPUT';                  /* SET IN/OUTPUT */        02714100
*        IF BUFLIST(1)=''                    /* CHECK ME KEY */         02714200
*          THEN                                                         02714300
*            DO;                                                        02714400
*              ZXDUMMY7='';                  /* RESET IN/OUTPUT */      02714500
*              ZXBUFLIST='';                 /* RESET IN/OUTPUT */      02714600
*            END;                                                       02714700
*      END;                                                             02714800
*/*PE.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02714900
*  IF BUFLST64^=''                           /* CHECK ME KEY */         02715000
*    THEN                                                               02715100
*      DO;                                                              02715200
*        IF NUMBER(BUFLST64)>1               /* CHECK SUBLISTS */       02715300
*          THEN                                                         02715400
*            DO;                                                        02715500
*              ZMS=' 8, "BUFLST64'!!         /**KPOSP* MSG*/            02715600
*                  BUFLST64!!                                           02715700
*                  '" "BUFLST64"'!!                                     02715800
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02715900
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02716000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02716100
*              ZMACRET=8;                    /* MACRO ERROR */          02716200
*            END;                                                       02716300
*        IF XDUMMY7=''                       /* CHECK XVARIABLE */      02716400
*          THEN                                                         02716500
*            DO;                             /* VALID ME KEY */         02716600
*              XDUMMY7='BUFLST64';           /* SET XVAR1 */            02716700
*              XBUFLST64=BUFLST64(1);        /* SET XVAR2 */            02716800
*              ZXDUMMY7='INPUT';             /* SET IN/OUTPUT */        02716900
*              ZXBUFLST64='INPUT';           /* SET IN/OUTPUT */        02717000
*              IF BUFLST64(1)=''             /* CHECK ME KEY */         02717100
*                THEN                                                   02717200
*                  DO;                                                  02717300
*                    ZXDUMMY7='';            /* RESET IN/OUTPUT */      02717400
*                    ZXBUFLST64='';          /* RESET IN/OUTPUT */      02717500
*                  END;                                                 02717600
*            END;                                                       02717700
*          ELSE                                                         02717800
*            DO;                                                        02717900
*              ZMS=' 8, "BUFLST64'!!         /**KMEKP* MSG*/            02718000
*                  BUFLST64!!'"'!!                                      02718100
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'!!                02718200
*                  XDUMMY7!!                                            02718300
*                  '" KEY.';                                            02718400
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02718500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02718600
*              ZMACRET=8;                    /* MACRO ERROR */          02718700
*            END;                                                       02718800
*      END;                                                             02718900
*/*PE.KMEKY05 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT RESETS--------*/ 02719000
*  IF XDUMMY7=''                             /* CHECK XVARIABLE */      02719100
*    THEN                                                               02719200
*      DO;                                                              02719300
*        XDUMMY7='';                         /* RESET DEFAULT */        02719400
*        ZXDUMMY7='';                        /* RESET IN/OUTPUT */      02719500
*        XBUFLIST='';                        /* RESET DEFAULT */        02719600
*        ZXBUFLIST='';                       /* RESET IN/OUTPUT */      02719700
*      END;                                                             02719800
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02719900
*  IF NUMBER(BUFNUM)>1                       /* CHECK POSITIONALS */    02720000
*    THEN                                                               02720100
*      DO;                                                              02720200
*        ZMS=' 8, "BUFNUM'!!                 /**KPOSP* MSG*/            02720300
*            BUFNUM!!                                                   02720400
*            '" "BUFNUM"'!!                                             02720500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02720600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02720700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02720800
*        ZMACRET=8;                          /* MACRO ERROR */          02720900
*      END;                                                             02721000
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02721100
*  IF BUFNUM(1)^=''                          /* CHECK FOR NULL */       02721200
*    THEN                                                               02721300
*      DO;                                                              02721400
*        XBUFNUM=BUFNUM(1);                  /* SET XVARIABLE */        02721500
*        ZXBUFNUM='INPUT';                   /* SET IN/OUTPUT */        02721600
*      END;                                                             02721700
*/*PE.KKWRD01 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02721800
*  IF NUMBER(BUFTYPE)>1                      /* CHECK POSITIONALS */    02721900
*    THEN                                                               02722000
*      DO;                                                              02722100
*        ZMS=' 8, "BUFTYPE'!!                /**KPOSP* MSG*/            02722200
*            BUFTYPE!!                                                  02722300
*            '" "BUFTYPE"'!!                                            02722400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02722500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02722600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02722700
*        ZMACRET=8;                          /* MACRO ERROR */          02722800
*      END;                                                             02722900
*/*PE.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02723000
*  IF TRANSLATE(BUFTYPE(1)) = 'PAGEELIG'                                02723100
*    THEN                                                               02723200
*      XBUFTYPE = 'PAGEELIG';                /* SET XVARIABLE */        02723300
*/*PE.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02723400
*  IF TRANSLATE(BUFTYPE(1)) = 'PAGEABLE'                                02723500
*    THEN                                                               02723600
*      XBUFTYPE = 'PAGEABLE';                /* SET XVARIABLE */        02723700
*/*PE.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02723800
*  IF TRANSLATE(BUFTYPE(1)) = 'FIXED'                                   02723900
*    THEN                                                               02724000
*      XBUFTYPE = 'FIXED';                   /* SET XVARIABLE */        02724100
*/*PE.KKWRD03 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02724200
*  IF XBUFTYPE^=''                           /* CHECK FOR KEYWORD */    02724300
*    THEN                                                               02724400
*      ZXBUFTYPE='INPUT';                    /* SET IN/OUTPUT */        02724500
*    ELSE                                                               02724600
*      DO;                                   /* KEYWORD NOT ENTERED */  02724700
*        IF BUFTYPE(1)^=''                                              02724800
*          THEN                                                         02724900
*            DO;                                                        02725000
*              ZMS=' 8, "BUFTYPE'!!          /**KUKWP* MSG*/            02725100
*                  BUFTYPE!!'"'!!                                       02725200
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02725300
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02725400
*                  ' "PAGEELIG",'!!          /* VALID KEYWORD */        02725500
*                  ' "PAGEABLE",'!!          /* VALID KEYWORD */        02725600
*                  ' OR "FIXED".';           /* VALID KEYWORD */        02725700
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02725800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02725900
*              ZMACRET=8;                    /* MACRO ERROR */          02726000
*            END;                                                       02726100
*      END;                                                             02726200
*/*PE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02726300
*  IF CLEAR='CLEAR'                          /* CHECK ENTRY */          02726400
*    THEN                                                               02726500
*      DO;                                                              02726600
*        ZMS=' 8, THE "CLEAR" KEY'!!         /**KOPTP* MSG*/            02726700
*            ' MUST CONTAIN ONE'!!                                      02726800
*            ' (OR MORE) ARGUMENT(S).';                                 02726900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02727000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02727100
*        ZMACRET=8;                          /* MACRO ERROR */          02727200
*      END;                                                             02727300
*  IF NUMBER(CLEAR)>1                        /* CHECK POSITIONALS */    02727400
*    THEN                                                               02727500
*      DO;                                                              02727600
*        ZMS=' 8, "CLEAR'!!                  /**KPOSP* MSG*/            02727700
*            CLEAR!!                                                    02727800
*            '" "CLEAR"'!!                                              02727900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02728000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02728100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02728200
*        ZMACRET=8;                          /* MACRO ERROR */          02728300
*      END;                                                             02728400
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02728500
*  IF TRANSLATE(CLEAR(1)) = 'NO'                                        02728600
*    THEN                                                               02728700
*      XCLEAR = 'NO';                        /* SET XVARIABLE */        02728800
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02728900
*  IF TRANSLATE(CLEAR(1)) = 'YES'                                       02729000
*    THEN                                                               02729100
*      XCLEAR = 'YES';                       /* SET XVARIABLE */        02729200
*/*PE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02729300
*  IF XCLEAR^=''                             /* CHECK FOR KEYWORD */    02729400
*    THEN                                                               02729500
*      ZXCLEAR='INPUT';                      /* SET IN/OUTPUT */        02729600
*    ELSE                                                               02729700
*      DO;                                   /* KEYWORD NOT ENTERED */  02729800
*        IF CLEAR(1)^=''                                                02729900
*          THEN                                                         02730000
*            DO;                                                        02730100
*              ZMS=' 8, "CLEAR'!!            /**KUKWP* MSG*/            02730200
*                  CLEAR!!'"'!!                                         02730300
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02730400
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02730500
*                  ' "NO"'!!                 /* VALID KEYWORD */        02730600
*                  ' OR "YES".';             /* VALID KEYWORD */        02730700
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02730800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02730900
*              ZMACRET=8;                    /* MACRO ERROR */          02731000
*            END;                                                       02731100
*      END;                                                             02731200
*/*PE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02731300
*  IF CSMUSER='CSMUSER'                      /* CHECK ENTRY */          02731400
*    THEN                                                               02731500
*      DO;                                                              02731600
*        ZMS=' 8, THE "CSMUSER" KEY'!!       /**KOPTP* MSG*/            02731700
*            ' MUST CONTAIN ONE'!!                                      02731800
*            ' (OR MORE) ARGUMENT(S).';                                 02731900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02732000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02732100
*        ZMACRET=8;                          /* MACRO ERROR */          02732200
*      END;                                                             02732300
*  IF NUMBER(CSMUSER)>1                      /* CHECK POSITIONALS */    02732400
*    THEN                                                               02732500
*      DO;                                                              02732600
*        ZMS=' 8, "CSMUSER'!!                /**KPOSP* MSG*/            02732700
*            CSMUSER!!                                                  02732800
*            '" "CSMUSER"'!!                                            02732900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02733000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02733100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02733200
*        ZMACRET=8;                          /* MACRO ERROR */          02733300
*      END;                                                             02733400
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02733500
*  IF TRANSLATE(CSMUSER(1)) = 'NO'                                      02733600
*    THEN                                                               02733700
*      XCSMUSER = 'NO';                      /* SET XVARIABLE */        02733800
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02733900
*  IF TRANSLATE(CSMUSER(1)) = 'YES'                                     02734000
*    THEN                                                               02734100
*      XCSMUSER = 'YES';                     /* SET XVARIABLE */        02734200
*/*PE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02734300
*  IF XCSMUSER^=''                           /* CHECK FOR KEYWORD */    02734400
*    THEN                                                               02734500
*      ZXCSMUSER='INPUT';                    /* SET IN/OUTPUT */        02734600
*    ELSE                                                               02734700
*      DO;                                   /* KEYWORD NOT ENTERED */  02734800
*        IF CSMUSER(1)^=''                                              02734900
*          THEN                                                         02735000
*            DO;                                                        02735100
*              ZMS=' 8, "CSMUSER'!!          /**KUKWP* MSG*/            02735200
*                  CSMUSER!!'"'!!                                       02735300
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02735400
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02735500
*                  ' "NO"'!!                 /* VALID KEYWORD */        02735600
*                  ' OR "YES".';             /* VALID KEYWORD */        02735700
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02735800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02735900
*              ZMACRET=8;                    /* MACRO ERROR */          02736000
*            END;                                                       02736100
*      END;                                                             02736200
*/*PE.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02736300
*  IF ERRBFLST='ERRBFLST'                    /* CHECK ENTRY */          02736400
*    THEN                                                               02736500
*      DO;                                                              02736600
*        ZMS=' 8, THE "ERRBFLST" KEY'!!      /**KOPTP* MSG*/            02736700
*            ' MUST CONTAIN ONE'!!                                      02736800
*            ' (OR MORE) ARGUMENT(S).';                                 02736900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02737000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02737100
*        ZMACRET=8;                          /* MACRO ERROR */          02737200
*      END;                                                             02737300
*  IF NUMBER(ERRBFLST)>1                     /* CHECK POSITIONALS */    02737400
*    THEN                                                               02737500
*      DO;                                                              02737600
*        ZMS=' 8, "ERRBFLST'!!               /**KPOSP* MSG*/            02737700
*            ERRBFLST!!                                                 02737800
*            '" "ERRBFLST"'!!                                           02737900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02738000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02738100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02738200
*        ZMACRET=8;                          /* MACRO ERROR */          02738300
*      END;                                                             02738400
*/*PE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02738500
*  IF ERRBFLST(1)^=''                        /* CHECK FOR NULL */       02738600
*    THEN                                                               02738700
*      DO;                                                              02738800
*        XERRBFLST=ERRBFLST(1);              /* SET XVARIABLE */        02738900
*        ZXERRBFLST='OUTPUT';                /* SET IN/OUTPUT */        02739000
*      END;                                                             02739100
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02739200
*  IF FREERTN='FREERTN'                      /* CHECK ENTRY */          02739300
*    THEN                                                               02739400
*      DO;                                                              02739500
*        ZMS=' 8, THE "FREERTN" KEY'!!       /**KOPTP* MSG*/            02739600
*            ' MUST CONTAIN ONE'!!                                      02739700
*            ' (OR MORE) ARGUMENT(S).';                                 02739800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02739900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02740000
*        ZMACRET=8;                          /* MACRO ERROR */          02740100
*      END;                                                             02740200
*  IF NUMBER(FREERTN)>1                      /* CHECK POSITIONALS */    02740300
*    THEN                                                               02740400
*      DO;                                                              02740500
*        ZMS=' 8, "FREERTN'!!                /**KPOSP* MSG*/            02740600
*            FREERTN!!                                                  02740700
*            '" "FREERTN"'!!                                            02740800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02740900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02741000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02741100
*        ZMACRET=8;                          /* MACRO ERROR */          02741200
*      END;                                                             02741300
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02741400
*  IF FREERTN(1)^=''                         /* CHECK FOR NULL */       02741500
*    THEN                                                               02741600
*      DO;                                                              02741700
*        XFREERTN=FREERTN(1);                /* SET XVARIABLE */        02741800
*        ZXFREERTN='INPUT';                  /* SET IN/OUTPUT */        02741900
*      END;                                                             02742000
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02742100
*  IF GAP='GAP'                              /* CHECK ENTRY */          02742200
*    THEN                                                               02742300
*      DO;                                                              02742400
*        ZMS=' 8, THE "GAP" KEY'!!           /**KOPTP* MSG*/            02742500
*            ' MUST CONTAIN ONE'!!                                      02742600
*            ' (OR MORE) ARGUMENT(S).';                                 02742700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02742800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02742900
*        ZMACRET=8;                          /* MACRO ERROR */          02743000
*      END;                                                             02743100
*  IF NUMBER(GAP)>1                          /* CHECK POSITIONALS */    02743200
*    THEN                                                               02743300
*      DO;                                                              02743400
*        ZMS=' 8, "GAP'!!                    /**KPOSP* MSG*/            02743500
*            GAP!!                                                      02743600
*            '" "GAP"'!!                                                02743700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02743800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02743900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02744000
*        ZMACRET=8;                          /* MACRO ERROR */          02744100
*      END;                                                             02744200
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02744300
*  IF GAP(1)^=''                             /* CHECK FOR NULL */       02744400
*    THEN                                                               02744500
*      DO;                                                              02744600
*        XGAP=GAP(1);                        /* SET XVARIABLE */        02744700
*        ZXGAP='INPUT';                      /* SET IN/OUTPUT */        02744800
*      END;                                                             02744900
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02745000
*  IF OWNERID='OWNERID'                      /* CHECK ENTRY */          02745100
*    THEN                                                               02745200
*      DO;                                                              02745300
*        ZMS=' 8, THE "OWNERID" KEY'!!       /**KOPTP* MSG*/            02745400
*            ' MUST CONTAIN ONE'!!                                      02745500
*            ' (OR MORE) ARGUMENT(S).';                                 02745600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02745700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02745800
*        ZMACRET=8;                          /* MACRO ERROR */          02745900
*      END;                                                             02746000
*  IF NUMBER(OWNERID)>1                      /* CHECK POSITIONALS */    02746100
*    THEN                                                               02746200
*      DO;                                                              02746300
*        ZMS=' 8, "OWNERID'!!                /**KPOSP* MSG*/            02746400
*            OWNERID!!                                                  02746500
*            '" "OWNERID"'!!                                            02746600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02746700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02746800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02746900
*        ZMACRET=8;                          /* MACRO ERROR */          02747000
*      END;                                                             02747100
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02747200
*  IF OWNERID(1)^=''                         /* CHECK FOR NULL */       02747300
*    THEN                                                               02747400
*      DO;                                                              02747500
*        XOWNERID=OWNERID(1);                /* SET XVARIABLE */        02747600
*        ZXOWNERID='INPUT';                  /* SET IN/OUTPUT */        02747700
*      END;                                                             02747800
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02747900
*  IF COMPID='COMPID'                        /* CHECK ENTRY */          02748000
*    THEN                                                               02748100
*      DO;                                                              02748200
*        ZMS=' 8, THE "COMPID" KEY'!!        /**KOPTP* MSG*/            02748300
*            ' MUST CONTAIN ONE'!!                                      02748400
*            ' (OR MORE) ARGUMENT(S).';                                 02748500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02748600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02748700
*        ZMACRET=8;                          /* MACRO ERROR */          02748800
*      END;                                                             02748900
*  IF NUMBER(COMPID)>1                       /* CHECK POSITIONALS */    02749000
*    THEN                                                               02749100
*      DO;                                                              02749200
*        ZMS=' 8, "COMPID'!!                 /**KPOSP* MSG*/            02749300
*            COMPID!!                                                   02749400
*            '" "COMPID"'!!                                             02749500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02749600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02749700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02749800
*        ZMACRET=8;                          /* MACRO ERROR */          02749900
*      END;                                                             02750000
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02750100
*  IF COMPID(1)^=''                          /* CHECK FOR NULL */       02750200
*    THEN                                                               02750300
*      DO;                                                              02750400
*        XCOMPID=COMPID(1);                  /* SET XVARIABLE */        02750500
*        ZXCOMPID='INPUT';                   /* SET IN/OUTPUT */        02750600
*      END;                                                             02750700
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02750800
*  IF COMPUSER='COMPUSER'                    /* CHECK ENTRY */          02750900
*    THEN                                                               02751000
*      DO;                                                              02751100
*        ZMS=' 8, THE "COMPUSER" KEY'!!      /**KOPTP* MSG*/            02751200
*            ' MUST CONTAIN ONE'!!                                      02751300
*            ' (OR MORE) ARGUMENT(S).';                                 02751400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02751500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02751600
*        ZMACRET=8;                          /* MACRO ERROR */          02751700
*      END;                                                             02751800
*  IF NUMBER(COMPUSER)>1                     /* CHECK POSITIONALS */    02751900
*    THEN                                                               02752000
*      DO;                                                              02752100
*        ZMS=' 8, "COMPUSER'!!               /**KPOSP* MSG*/            02752200
*            COMPUSER!!                                                 02752300
*            '" "COMPUSER"'!!                                           02752400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02752500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02752600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02752700
*        ZMACRET=8;                          /* MACRO ERROR */          02752800
*      END;                                                             02752900
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02753000
*  IF COMPUSER(1)^=''                        /* CHECK FOR NULL */       02753100
*    THEN                                                               02753200
*      DO;                                                              02753300
*        XCOMPUSER=COMPUSER(1);              /* SET XVARIABLE */        02753400
*        ZXCOMPUSER='INPUT';                 /* SET IN/OUTPUT */        02753500
*      END;                                                             02753600
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02753700
*  IF NUMBER(POOLTOKN)>1                     /* CHECK POSITIONALS */    02753800
*    THEN                                                               02753900
*      DO;                                                              02754000
*        ZMS=' 8, "POOLTOKN'!!               /**KPOSP* MSG*/            02754100
*            POOLTOKN!!                                                 02754200
*            '" "POOLTOKN"'!!                                           02754300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02754400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02754500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02754600
*        ZMACRET=8;                          /* MACRO ERROR */          02754700
*      END;                                                             02754800
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02754900
*  IF POOLTOKN(1)^=''                        /* CHECK FOR NULL */       02755000
*    THEN                                                               02755100
*      DO;                                                              02755200
*        XPOOLTOKN=POOLTOKN(1);              /* SET XVARIABLE */        02755300
*        ZXPOOLTOKN='INPUT';                 /* SET IN/OUTPUT */        02755400
*      END;                                                             02755500
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02755600
*  IF TASKID='TASKID'                        /* CHECK ENTRY */          02755700
*    THEN                                                               02755800
*      DO;                                                              02755900
*        ZMS=' 8, THE "TASKID" KEY'!!        /**KOPTP* MSG*/            02756000
*            ' MUST CONTAIN ONE'!!                                      02756100
*            ' (OR MORE) ARGUMENT(S).';                                 02756200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02756300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02756400
*        ZMACRET=8;                          /* MACRO ERROR */          02756500
*      END;                                                             02756600
*  IF NUMBER(TASKID)>1                       /* CHECK POSITIONALS */    02756700
*    THEN                                                               02756800
*      DO;                                                              02756900
*        ZMS=' 8, "TASKID'!!                 /**KPOSP* MSG*/            02757000
*            TASKID!!                                                   02757100
*            '" "TASKID"'!!                                             02757200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02757300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02757400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02757500
*        ZMACRET=8;                          /* MACRO ERROR */          02757600
*      END;                                                             02757700
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02757800
*  IF TASKID(1)^=''                          /* CHECK FOR NULL */       02757900
*    THEN                                                               02758000
*      DO;                                                              02758100
*        XTASKID=TASKID(1);                  /* SET XVARIABLE */        02758200
*        ZXTASKID='INPUT';                   /* SET IN/OUTPUT */        02758300
*      END;                                                             02758400
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02758500
*  IF THREAD='THREAD'                        /* CHECK ENTRY */          02758600
*    THEN                                                               02758700
*      DO;                                                              02758800
*        ZMS=' 8, THE "THREAD" KEY'!!        /**KOPTP* MSG*/            02758900
*            ' MUST CONTAIN ONE'!!                                      02759000
*            ' (OR MORE) ARGUMENT(S).';                                 02759100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02759200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02759300
*        ZMACRET=8;                          /* MACRO ERROR */          02759400
*      END;                                                             02759500
*  IF NUMBER(THREAD)>1                       /* CHECK POSITIONALS */    02759600
*    THEN                                                               02759700
*      DO;                                                              02759800
*        ZMS=' 8, "THREAD'!!                 /**KPOSP* MSG*/            02759900
*            THREAD!!                                                   02760000
*            '" "THREAD"'!!                                             02760100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02760200
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02760300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02760400
*        ZMACRET=8;                          /* MACRO ERROR */          02760500
*      END;                                                             02760600
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02760700
*  IF THREAD(1)^=''                          /* CHECK FOR NULL */       02760800
*    THEN                                                               02760900
*      DO;                                                              02761000
*        XTHREAD=THREAD(1);                  /* SET XVARIABLE */        02761100
*        ZXTHREAD='INPUT';                   /* SET IN/OUTPUT */        02761200
*      END;                                                             02761300
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02761400
*  IF UTILRTN='UTILRTN'                      /* CHECK ENTRY */          02761500
*    THEN                                                               02761600
*      DO;                                                              02761700
*        ZMS=' 8, THE "UTILRTN" KEY'!!       /**KOPTP* MSG*/            02761800
*            ' MUST CONTAIN ONE'!!                                      02761900
*            ' (OR MORE) ARGUMENT(S).';                                 02762000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02762100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02762200
*        ZMACRET=8;                          /* MACRO ERROR */          02762300
*      END;                                                             02762400
*  IF NUMBER(UTILRTN)>1                      /* CHECK POSITIONALS */    02762500
*    THEN                                                               02762600
*      DO;                                                              02762700
*        ZMS=' 8, "UTILRTN'!!                /**KPOSP* MSG*/            02762800
*            UTILRTN!!                                                  02762900
*            '" "UTILRTN"'!!                                            02763000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02763100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02763200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02763300
*        ZMACRET=8;                          /* MACRO ERROR */          02763400
*      END;                                                             02763500
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02763600
*  IF UTILRTN(1)^=''                         /* CHECK FOR NULL */       02763700
*    THEN                                                               02763800
*      DO;                                                              02763900
*        XUTILRTN=UTILRTN(1);                /* SET XVARIABLE */        02764000
*        ZXUTILRTN='INPUT';                  /* SET IN/OUTPUT */        02764100
*      END;                                                             02764200
*/*PE.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02764300
*  IF WAIT='WAIT'                            /* CHECK ENTRY */          02764400
*    THEN                                                               02764500
*      DO;                                                              02764600
*        ZMS=' 8, THE "WAIT" KEY'!!          /**KOPTP* MSG*/            02764700
*            ' MUST CONTAIN ONE'!!                                      02764800
*            ' (OR MORE) ARGUMENT(S).';                                 02764900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02765000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02765100
*        ZMACRET=8;                          /* MACRO ERROR */          02765200
*      END;                                                             02765300
*  IF NUMBER(WAIT)>1                         /* CHECK POSITIONALS */    02765400
*    THEN                                                               02765500
*      DO;                                                              02765600
*        ZMS=' 8, "WAIT'!!                   /**KPOSP* MSG*/            02765700
*            WAIT!!                                                     02765800
*            '" "WAIT"'!!                                               02765900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02766000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02766100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02766200
*        ZMACRET=8;                          /* MACRO ERROR */          02766300
*      END;                                                             02766400
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02766500
*  IF TRANSLATE(WAIT(1)) = 'NO'                                         02766600
*    THEN                                                               02766700
*      XWAIT = 'NO';                         /* SET XVARIABLE */        02766800
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02766900
*  IF TRANSLATE(WAIT(1)) = 'YES'                                        02767000
*    THEN                                                               02767100
*      XWAIT = 'YES';                        /* SET XVARIABLE */        02767200
*/*PE.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02767300
*  IF TRANSLATE(WAIT(1)) = 'EXPAND'                                     02767400
*    THEN                                                               02767500
*      XWAIT = 'EXPAND';                     /* SET XVARIABLE */        02767600
*/*PE.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02767700
*  IF XWAIT^=''                              /* CHECK FOR KEYWORD */    02767800
*    THEN                                                               02767900
*      ZXWAIT='INPUT';                       /* SET IN/OUTPUT */        02768000
*    ELSE                                                               02768100
*      DO;                                   /* KEYWORD NOT ENTERED */  02768200
*        IF WAIT(1)^=''                                                 02768300
*          THEN                                                         02768400
*            DO;                                                        02768500
*              ZMS=' 8, "WAIT'!!             /**KUKWP* MSG*/            02768600
*                  WAIT!!'"'!!                                          02768700
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02768800
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02768900
*                  ' "NO",'!!                /* VALID KEYWORD */        02769000
*                  ' "YES",'!!               /* VALID KEYWORD */        02769100
*                  ' OR "EXPAND".';          /* VALID KEYWORD */        02769200
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02769300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02769400
*              ZMACRET=8;                    /* MACRO ERROR */          02769500
*            END;                                                       02769600
*      END;                                                             02769700
*/*PE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02769800
*  IF TRANSLATE(REQUEST(1))                                             02769900
*              = 'PAGE_BUFFER'               /* CHECK FOR KEYWORD */    02770000
*    THEN                                                               02770100
*      DO;                                                              02770200
*        XREQUEST='PAGE_BUFFER';             /* SET XVARIABLE */        02770300
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    02770400
*          THEN                                                         02770500
*            DO;                                                        02770600
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            02770700
*                  REQUEST!!                                            02770800
*                  '" "REQUEST"'!!                                      02770900
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02771000
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02771100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02771200
*              ZMACRET=8;                    /* MACRO ERROR */          02771300
*            END;                                                       02771400
*      END;                                                             02771500
*/*PE.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02771600
*  XDUMMY8='';                               /* RESET XVARIABLE */      02771700
*  IF BUFLIST^=''                            /* CHECK ME KEY */         02771800
*    THEN                                                               02771900
*      DO;                                   /* VALID ME KEY */         02772000
*        IF NUMBER(BUFLIST)>1                /* CHECK SUBLISTS */       02772100
*          THEN                                                         02772200
*            DO;                                                        02772300
*              ZMS=' 8, "BUFLIST'!!          /**KPOSP* MSG*/            02772400
*                  BUFLIST!!                                            02772500
*                  '" "BUFLIST"'!!                                      02772600
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02772700
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02772800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02772900
*              ZMACRET=8;                    /* MACRO ERROR */          02773000
*            END;                                                       02773100
*        XDUMMY8='BUFLIST';                  /* SET XVARIABLE */        02773200
*        XBUFLIST=BUFLIST(1);                /* SET XVARIABLE */        02773300
*        ZXDUMMY8='INPUT';                   /* SET IN/OUTPUT */        02773400
*        ZXBUFLIST='INPUT';                  /* SET IN/OUTPUT */        02773500
*        IF BUFLIST(1)=''                    /* CHECK ME KEY */         02773600
*          THEN                                                         02773700
*            DO;                                                        02773800
*              ZXDUMMY8='';                  /* RESET IN/OUTPUT */      02773900
*              ZXBUFLIST='';                 /* RESET IN/OUTPUT */      02774000
*            END;                                                       02774100
*      END;                                                             02774200
*/*PE.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 02774300
*  IF BUFLST64^=''                           /* CHECK ME KEY */         02774400
*    THEN                                                               02774500
*      DO;                                                              02774600
*        IF NUMBER(BUFLST64)>1               /* CHECK SUBLISTS */       02774700
*          THEN                                                         02774800
*            DO;                                                        02774900
*              ZMS=' 8, "BUFLST64'!!         /**KPOSP* MSG*/            02775000
*                  BUFLST64!!                                           02775100
*                  '" "BUFLST64"'!!                                     02775200
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02775300
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02775400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02775500
*              ZMACRET=8;                    /* MACRO ERROR */          02775600
*            END;                                                       02775700
*        IF XDUMMY8=''                       /* CHECK XVARIABLE */      02775800
*          THEN                                                         02775900
*            DO;                             /* VALID ME KEY */         02776000
*              XDUMMY8='BUFLST64';           /* SET XVAR1 */            02776100
*              XBUFLST64=BUFLST64(1);        /* SET XVAR2 */            02776200
*              ZXDUMMY8='INPUT';             /* SET IN/OUTPUT */        02776300
*              ZXBUFLST64='INPUT';           /* SET IN/OUTPUT */        02776400
*              IF BUFLST64(1)=''             /* CHECK ME KEY */         02776500
*                THEN                                                   02776600
*                  DO;                                                  02776700
*                    ZXDUMMY8='';            /* RESET IN/OUTPUT */      02776800
*                    ZXBUFLST64='';          /* RESET IN/OUTPUT */      02776900
*                  END;                                                 02777000
*            END;                                                       02777100
*          ELSE                                                         02777200
*            DO;                                                        02777300
*              ZMS=' 8, "BUFLST64'!!         /**KMEKP* MSG*/            02777400
*                  BUFLST64!!'"'!!                                      02777500
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'!!                02777600
*                  XDUMMY8!!                                            02777700
*                  '" KEY.';                                            02777800
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02777900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02778000
*              ZMACRET=8;                    /* MACRO ERROR */          02778100
*            END;                                                       02778200
*      END;                                                             02778300
*/*PE.KMEKY05 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT RESETS--------*/ 02778400
*  IF XDUMMY8=''                             /* CHECK XVARIABLE */      02778500
*    THEN                                                               02778600
*      DO;                                                              02778700
*        XDUMMY8='';                         /* RESET DEFAULT */        02778800
*        ZXDUMMY8='';                        /* RESET IN/OUTPUT */      02778900
*        XBUFLIST='';                        /* RESET DEFAULT */        02779000
*        ZXBUFLIST='';                       /* RESET IN/OUTPUT */      02779100
*      END;                                                             02779200
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02779300
*  IF NUMBER(BUFNUM)>1                       /* CHECK POSITIONALS */    02779400
*    THEN                                                               02779500
*      DO;                                                              02779600
*        ZMS=' 8, "BUFNUM'!!                 /**KPOSP* MSG*/            02779700
*            BUFNUM!!                                                   02779800
*            '" "BUFNUM"'!!                                             02779900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02780000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02780100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02780200
*        ZMACRET=8;                          /* MACRO ERROR */          02780300
*      END;                                                             02780400
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 02780500
*  IF BUFNUM(1)^=''                          /* CHECK FOR NULL */       02780600
*    THEN                                                               02780700
*      DO;                                                              02780800
*        XBUFNUM=BUFNUM(1);                  /* SET XVARIABLE */        02780900
*        ZXBUFNUM='INPUT';                   /* SET IN/OUTPUT */        02781000
*      END;                                                             02781100
*/*PE.KKWRD01 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02781200
*  IF NUMBER(BUFTYPE)>1                      /* CHECK POSITIONALS */    02781300
*    THEN                                                               02781400
*      DO;                                                              02781500
*        ZMS=' 8, "BUFTYPE'!!                /**KPOSP* MSG*/            02781600
*            BUFTYPE!!                                                  02781700
*            '" "BUFTYPE"'!!                                            02781800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02781900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02782000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02782100
*        ZMACRET=8;                          /* MACRO ERROR */          02782200
*      END;                                                             02782300
*/*PE.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02782400
*  IF TRANSLATE(BUFTYPE(1)) = 'PAGEELIG'                                02782500
*    THEN                                                               02782600
*      XBUFTYPE = 'PAGEELIG';                /* SET XVARIABLE */        02782700
*/*PE.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02782800
*  IF TRANSLATE(BUFTYPE(1)) = 'PAGEABLE'                                02782900
*    THEN                                                               02783000
*      XBUFTYPE = 'PAGEABLE';                /* SET XVARIABLE */        02783100
*/*PE.KKWRD03 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 02783200
*  IF XBUFTYPE^=''                           /* CHECK FOR KEYWORD */    02783300
*    THEN                                                               02783400
*      ZXBUFTYPE='INPUT';                    /* SET IN/OUTPUT */        02783500
*    ELSE                                                               02783600
*      DO;                                   /* KEYWORD NOT ENTERED */  02783700
*        IF BUFTYPE(1)^=''                                              02783800
*          THEN                                                         02783900
*            DO;                                                        02784000
*              ZMS=' 8, "BUFTYPE'!!          /**KUKWP* MSG*/            02784100
*                  BUFTYPE!!'"'!!                                       02784200
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02784300
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02784400
*                  ' "PAGEELIG"'!!           /* VALID KEYWORD */        02784500
*                  ' OR "PAGEABLE".';        /* VALID KEYWORD */        02784600
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02784700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02784800
*              ZMACRET=8;                    /* MACRO ERROR */          02784900
*            END;                                                       02785000
*      END;                                                             02785100
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02785200
*  IF GAP='GAP'                              /* CHECK ENTRY */          02785300
*    THEN                                                               02785400
*      DO;                                                              02785500
*        ZMS=' 8, THE "GAP" KEY'!!           /**KOPTP* MSG*/            02785600
*            ' MUST CONTAIN ONE'!!                                      02785700
*            ' (OR MORE) ARGUMENT(S).';                                 02785800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02785900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02786000
*        ZMACRET=8;                          /* MACRO ERROR */          02786100
*      END;                                                             02786200
*  IF NUMBER(GAP)>1                          /* CHECK POSITIONALS */    02786300
*    THEN                                                               02786400
*      DO;                                                              02786500
*        ZMS=' 8, "GAP'!!                    /**KPOSP* MSG*/            02786600
*            GAP!!                                                      02786700
*            '" "GAP"'!!                                                02786800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02786900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02787000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02787100
*        ZMACRET=8;                          /* MACRO ERROR */          02787200
*      END;                                                             02787300
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02787400
*  IF GAP(1)^=''                             /* CHECK FOR NULL */       02787500
*    THEN                                                               02787600
*      DO;                                                              02787700
*        XGAP=GAP(1);                        /* SET XVARIABLE */        02787800
*        ZXGAP='INPUT';                      /* SET IN/OUTPUT */        02787900
*      END;                                                             02788000
*/*PE.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02788100
*  IF ERRBFLST='ERRBFLST'                    /* CHECK ENTRY */          02788200
*    THEN                                                               02788300
*      DO;                                                              02788400
*        ZMS=' 8, THE "ERRBFLST" KEY'!!      /**KOPTP* MSG*/            02788500
*            ' MUST CONTAIN ONE'!!                                      02788600
*            ' (OR MORE) ARGUMENT(S).';                                 02788700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02788800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02788900
*        ZMACRET=8;                          /* MACRO ERROR */          02789000
*      END;                                                             02789100
*  IF NUMBER(ERRBFLST)>1                     /* CHECK POSITIONALS */    02789200
*    THEN                                                               02789300
*      DO;                                                              02789400
*        ZMS=' 8, "ERRBFLST'!!               /**KPOSP* MSG*/            02789500
*            ERRBFLST!!                                                 02789600
*            '" "ERRBFLST"'!!                                           02789700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02789800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02789900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02790000
*        ZMACRET=8;                          /* MACRO ERROR */          02790100
*      END;                                                             02790200
*/*PE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02790300
*  IF ERRBFLST(1)^=''                        /* CHECK FOR NULL */       02790400
*    THEN                                                               02790500
*      DO;                                                              02790600
*        XERRBFLST=ERRBFLST(1);              /* SET XVARIABLE */        02790700
*        ZXERRBFLST='OUTPUT';                /* SET IN/OUTPUT */        02790800
*      END;                                                             02790900
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02791000
*  IF COMPID='COMPID'                        /* CHECK ENTRY */          02791100
*    THEN                                                               02791200
*      DO;                                                              02791300
*        ZMS=' 8, THE "COMPID" KEY'!!        /**KOPTP* MSG*/            02791400
*            ' MUST CONTAIN ONE'!!                                      02791500
*            ' (OR MORE) ARGUMENT(S).';                                 02791600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02791700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02791800
*        ZMACRET=8;                          /* MACRO ERROR */          02791900
*      END;                                                             02792000
*  IF NUMBER(COMPID)>1                       /* CHECK POSITIONALS */    02792100
*    THEN                                                               02792200
*      DO;                                                              02792300
*        ZMS=' 8, "COMPID'!!                 /**KPOSP* MSG*/            02792400
*            COMPID!!                                                   02792500
*            '" "COMPID"'!!                                             02792600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02792700
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02792800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02792900
*        ZMACRET=8;                          /* MACRO ERROR */          02793000
*      END;                                                             02793100
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02793200
*  IF COMPID(1)^=''                          /* CHECK FOR NULL */       02793300
*    THEN                                                               02793400
*      DO;                                                              02793500
*        XCOMPID=COMPID(1);                  /* SET XVARIABLE */        02793600
*        ZXCOMPID='INPUT';                   /* SET IN/OUTPUT */        02793700
*      END;                                                             02793800
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02793900
*  IF COMPUSER='COMPUSER'                    /* CHECK ENTRY */          02794000
*    THEN                                                               02794100
*      DO;                                                              02794200
*        ZMS=' 8, THE "COMPUSER" KEY'!!      /**KOPTP* MSG*/            02794300
*            ' MUST CONTAIN ONE'!!                                      02794400
*            ' (OR MORE) ARGUMENT(S).';                                 02794500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02794600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02794700
*        ZMACRET=8;                          /* MACRO ERROR */          02794800
*      END;                                                             02794900
*  IF NUMBER(COMPUSER)>1                     /* CHECK POSITIONALS */    02795000
*    THEN                                                               02795100
*      DO;                                                              02795200
*        ZMS=' 8, "COMPUSER'!!               /**KPOSP* MSG*/            02795300
*            COMPUSER!!                                                 02795400
*            '" "COMPUSER"'!!                                           02795500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02795600
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02795700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02795800
*        ZMACRET=8;                          /* MACRO ERROR */          02795900
*      END;                                                             02796000
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02796100
*  IF COMPUSER(1)^=''                        /* CHECK FOR NULL */       02796200
*    THEN                                                               02796300
*      DO;                                                              02796400
*        XCOMPUSER=COMPUSER(1);              /* SET XVARIABLE */        02796500
*        ZXCOMPUSER='INPUT';                 /* SET IN/OUTPUT */        02796600
*      END;                                                             02796700
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02796800
*  IF THREAD='THREAD'                        /* CHECK ENTRY */          02796900
*    THEN                                                               02797000
*      DO;                                                              02797100
*        ZMS=' 8, THE "THREAD" KEY'!!        /**KOPTP* MSG*/            02797200
*            ' MUST CONTAIN ONE'!!                                      02797300
*            ' (OR MORE) ARGUMENT(S).';                                 02797400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02797500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02797600
*        ZMACRET=8;                          /* MACRO ERROR */          02797700
*      END;                                                             02797800
*  IF NUMBER(THREAD)>1                       /* CHECK POSITIONALS */    02797900
*    THEN                                                               02798000
*      DO;                                                              02798100
*        ZMS=' 8, "THREAD'!!                 /**KPOSP* MSG*/            02798200
*            THREAD!!                                                   02798300
*            '" "THREAD"'!!                                             02798400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02798500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02798600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02798700
*        ZMACRET=8;                          /* MACRO ERROR */          02798800
*      END;                                                             02798900
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02799000
*  IF THREAD(1)^=''                          /* CHECK FOR NULL */       02799100
*    THEN                                                               02799200
*      DO;                                                              02799300
*        XTHREAD=THREAD(1);                  /* SET XVARIABLE */        02799400
*        ZXTHREAD='INPUT';                   /* SET IN/OUTPUT */        02799500
*      END;                                                             02799600
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 02799700
*  IF UTILRTN='UTILRTN'                      /* CHECK ENTRY */          02799800
*    THEN                                                               02799900
*      DO;                                                              02800000
*        ZMS=' 8, THE "UTILRTN" KEY'!!       /**KOPTP* MSG*/            02800100
*            ' MUST CONTAIN ONE'!!                                      02800200
*            ' (OR MORE) ARGUMENT(S).';                                 02800300
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02800400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02800500
*        ZMACRET=8;                          /* MACRO ERROR */          02800600
*      END;                                                             02800700
*  IF NUMBER(UTILRTN)>1                      /* CHECK POSITIONALS */    02800800
*    THEN                                                               02800900
*      DO;                                                              02801000
*        ZMS=' 8, "UTILRTN'!!                /**KPOSP* MSG*/            02801100
*            UTILRTN!!                                                  02801200
*            '" "UTILRTN"'!!                                            02801300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02801400
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02801500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02801600
*        ZMACRET=8;                          /* MACRO ERROR */          02801700
*      END;                                                             02801800
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 02801900
*  IF UTILRTN(1)^=''                         /* CHECK FOR NULL */       02802000
*    THEN                                                               02802100
*      DO;                                                              02802200
*        XUTILRTN=UTILRTN(1);                /* SET XVARIABLE */        02802300
*        ZXUTILRTN='INPUT';                  /* SET IN/OUTPUT */        02802400
*      END;                                                             02802500
*/*PE.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02802600
*  IF TRANSLATE(REQUEST(1))                                             02802700
*              = 'RESOURCE_STATS'            /* CHECK FOR KEYWORD */    02802800
*    THEN                                                               02802900
*      DO;                                                              02803000
*        XREQUEST='RESOURCE_STATS';          /* SET XVARIABLE */        02803100
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    02803200
*          THEN                                                         02803300
*            DO;                                                        02803400
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            02803500
*                  REQUEST!!                                            02803600
*                  '" "REQUEST"'!!                                      02803700
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        02803800
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02803900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02804000
*              ZMACRET=8;                    /* MACRO ERROR */          02804100
*            END;                                                       02804200
*      END;                                                             02804300
*/*PE.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02804400
*  IF STATAREA='STATAREA'                    /* CHECK ENTRY */          02804500
*    THEN                                                               02804600
*      DO;                                                              02804700
*        ZMS=' 8, THE "STATAREA" KEY'!!      /**KOPTP* MSG*/            02804800
*            ' MUST CONTAIN ONE'!!                                      02804900
*            ' (OR MORE) ARGUMENT(S).';                                 02805000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02805100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02805200
*        ZMACRET=8;                          /* MACRO ERROR */          02805300
*      END;                                                             02805400
*  IF NUMBER(STATAREA)>1                     /* CHECK POSITIONALS */    02805500
*    THEN                                                               02805600
*      DO;                                                              02805700
*        ZMS=' 8, "STATAREA'!!               /**KPOSP* MSG*/            02805800
*            STATAREA!!                                                 02805900
*            '" "STATAREA"'!!                                           02806000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02806100
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02806200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02806300
*        ZMACRET=8;                          /* MACRO ERROR */          02806400
*      END;                                                             02806500
*/*PE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02806600
*  IF STATAREA(1)^=''                        /* CHECK FOR NULL */       02806700
*    THEN                                                               02806800
*      DO;                                                              02806900
*        XSTATAREA=STATAREA(1);              /* SET XVARIABLE */        02807000
*        ZXSTATAREA='OUTPUT';                /* SET IN/OUTPUT */        02807100
*      END;                                                             02807200
*/*PE.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 02807300
*  IF XREQUEST^=''                           /* CHECK FOR KEYWORD */    02807400
*    THEN                                                               02807500
*      ZXREQUEST='INPUT';                    /* SET IN/OUTPUT */        02807600
*    ELSE                                                               02807700
*      DO;                                   /* KEYWORD NOT ENTERED */  02807800
*        IF REQUEST(1)^=''                   /* CHECK FOR KEYWORD */    02807900
*          THEN                                                         02808000
*            DO;                                                        02808100
*              ZXREQUEST='';                 /* RESET IN/OUTPUT */      02808200
*              ZMS=' 8, "REQUEST'!!          /**KUKWP* MSG*/            02808300
*                  REQUEST!!'"'!!                                       02808400
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              02808500
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    02808600
*                  ' "ASSIGN_BUFFER",'!!     /* VALID KEYWORD */        02808700
*                  ' "CHANGE_OWNER",'!!      /* VALID KEYWORD */        02808800
*                  ' "COPY_DATA",'!!         /* VALID KEYWORD */        02808900
*                  ' "CREATE_POOL",'!!       /* VALID KEYWORD */        02809000
*                  ' "DELETE_POOL",'!!       /* VALID KEYWORD */        02809100
*                  ' "DUMP_INFO",'!!         /* VALID KEYWORD */        02809200
*                  ' "FIX_BUFFER",'!!        /* VALID KEYWORD */        02809300
*                  ' "FREE_BUFFER",'!!       /* VALID KEYWORD */        02809400
*                  ' "GET_BUFFER",'!!        /* VALID KEYWORD */        02809500
*                  ' "PAGE_BUFFER",'!!       /* VALID KEYWORD */        02809600
*                  ' OR "RESOURCE_STATS".';  /* VALID KEYWORD */        02809700
*              ANS MSG('?IVTCSM ---> '!!ZMS);                           02809800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          02809900
*              ZMACRET=8;                    /* MACRO ERROR */          02810000
*            END;                                                       02810100
*      END;                                                             02810200
*/*PE.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02810300
*  IF RETCODE='RETCODE'                      /* CHECK ENTRY */          02810400
*    THEN                                                               02810500
*      DO;                                                              02810600
*        ZMS=' 8, THE "RETCODE" KEY'!!       /**KOPTP* MSG*/            02810700
*            ' MUST CONTAIN ONE'!!                                      02810800
*            ' (OR MORE) ARGUMENT(S).';                                 02810900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02811000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02811100
*        ZMACRET=8;                          /* MACRO ERROR */          02811200
*      END;                                                             02811300
*  IF NUMBER(RETCODE)>1                      /* CHECK POSITIONALS */    02811400
*    THEN                                                               02811500
*      DO;                                                              02811600
*        ZMS=' 8, "RETCODE'!!                /**KPOSP* MSG*/            02811700
*            RETCODE!!                                                  02811800
*            '" "RETCODE"'!!                                            02811900
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02812000
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02812100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02812200
*        ZMACRET=8;                          /* MACRO ERROR */          02812300
*      END;                                                             02812400
*/*PE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02812500
*  IF RETCODE(1)^=''                         /* CHECK FOR NULL */       02812600
*    THEN                                                               02812700
*      DO;                                                              02812800
*        XRETCODE=RETCODE(1);                /* SET XVARIABLE */        02812900
*        ZXRETCODE='OUTPUT';                 /* SET IN/OUTPUT */        02813000
*      END;                                                             02813100
*/*PE.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 02813200
*  IF RSNCODE='RSNCODE'                      /* CHECK ENTRY */          02813300
*    THEN                                                               02813400
*      DO;                                                              02813500
*        ZMS=' 8, THE "RSNCODE" KEY'!!       /**KOPTP* MSG*/            02813600
*            ' MUST CONTAIN ONE'!!                                      02813700
*            ' (OR MORE) ARGUMENT(S).';                                 02813800
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02813900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02814000
*        ZMACRET=8;                          /* MACRO ERROR */          02814100
*      END;                                                             02814200
*  IF NUMBER(RSNCODE)>1                      /* CHECK POSITIONALS */    02814300
*    THEN                                                               02814400
*      DO;                                                              02814500
*        ZMS=' 8, "RSNCODE'!!                /**KPOSP* MSG*/            02814600
*            RSNCODE!!                                                  02814700
*            '" "RSNCODE"'!!                                            02814800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              02814900
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02815000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02815100
*        ZMACRET=8;                          /* MACRO ERROR */          02815200
*      END;                                                             02815300
*/*PE.KXVAR03 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 02815400
*  IF RSNCODE(1)^=''                         /* CHECK FOR NULL */       02815500
*    THEN                                                               02815600
*      DO;                                                              02815700
*        XRSNCODE=RSNCODE(1);                /* SET XVARIABLE */        02815800
*        ZXRSNCODE='OUTPUT';                 /* SET IN/OUTPUT */        02815900
*      END;                                                             02816000
*/*PE.MF02 XMF^='L' & XMFSCK='NOCHECK' ------------------------------*/ 02816100
*      END;                                  /* END PARTIAL CHECK */    02816200
*/********************************************************************/ 02816300
*/***PE.MR01 GENERATE CODE IF ZMACRET=0                              */ 02816400
*/********************************************************************/ 02816500
*  IF ZMACRET = 0                                                       02816600
*    THEN                                                               02816700
*      DO;                                                              02816800
*/********************************************************************/ 02816900
*/***PE.PR01 PRINT CONTROLS, DEFAULT IS YES                          */ 02817000
*/********************************************************************/ 02817100
*  ANS(MACCONC!!'LIST PUSH NOECHO;') NORESCAN COL(MACLMAR);             02817200
*  IF ZPRINT='NO'                            /* PRINT IS OFF */         02817300
*    THEN                                                               02817400
*      ANS(MACCONC!!'LIST OFF NOECHO;') NORESCAN COL(MACLMAR);          02817500
*    ELSE                                                               02817600
*      ANS(MACCONC!!'LIST ON NOECHO;')  NORESCAN COL(MACLMAR);          02817700
*/********************************************************************/ 02817800
*/*PE.DO02 OUTER MACRO DO STATEMENT----------------------------------*/ 02817900
*  IF XMF^='L'                                                          02818000
*    THEN                                                               02818100
*      ANS('DO; /* IVTCSM-PLISTVER */')                                 02818200
*          NORESCAN COL(MACLMAR);                                       02818300
*/*MCMPLS01 RFY 15*/                                                    02818400
*  IF XMF^='L' & ZMACRET = 0                                            02818500
*    THEN                                                               02818600
*      ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);                   02818700
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  02818800
*  IF XREQUEST='' & XMF='E' THEN             /* CHECK FOR KEYWORD */    02818900
*      DO;                                                              02819000
*        ZMS=' 8, THE'!!                                                02819100
*            ' "REQUEST" KEY AND ITS ARGUMENT'!!                        02819200
*            ' ARE REQUIRED.'!!                                         02819300
*            ' VALID KEYWORD CHOICE(S) ARE:'!!                          02819400
*            ' "ASSIGN_BUFFER",'!!           /* VALID KEYWORD */        02819500
*            ' "CHANGE_OWNER",'!!            /* VALID KEYWORD */        02819600
*            ' "COPY_DATA",'!!               /* VALID KEYWORD */        02819700
*            ' "CREATE_POOL",'!!             /* VALID KEYWORD */        02819800
*            ' "DELETE_POOL",'!!             /* VALID KEYWORD */        02819900
*            ' "DUMP_INFO",'!!               /* VALID KEYWORD */        02820000
*            ' "FIX_BUFFER",'!!              /* VALID KEYWORD */        02820100
*            ' "FREE_BUFFER",'!!             /* VALID KEYWORD */        02820200
*            ' "GET_BUFFER",'!!              /* VALID KEYWORD */        02820300
*            ' "PAGE_BUFFER",'!!             /* VALID KEYWORD */        02820400
*            ' OR "RESOURCE_STATS".';        /* VALID KEYWORD */        02820500
*        ANS MSG('?IVTCSM ---> '!!ZMS);                                 02820600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                02820700
*        ZMACRET=8;                          /* MACRO ERROR */          02820800
*      END;                                                             02820900
*  IF SYSAM64='YES' & XBUFLIST^='' THEN               /* @33A*/         02821000
*   DO;                                               /* @33A*/         02821100
*    ZMS=' 8, BUFLIST not permitted for AMODE(64)';   /* @33A*/         02821200
*    ANS MSG('?IVTCSM ---> '!!ZMS);                   /* @33A*/         02821300
*    ANS(COMMENT(ZMS)) COL(MACLMAR);                  /* @33A*/         02821400
*    ZMACRET=8;                                       /* @33A*/         02821500
*   END;                                              /* @33A*/         02821600
*  IF SYSAM64^='YES' & XBUFLST64^='' THEN             /* @33A*/         02821700
*   DO;                                               /* @33A*/         02821800
*    ZMS=' 8, BUFLST64 only permitted for AMODE(64)'; /* @33A*/         02821900
*    ANS MSG('?IVTCSM ---> '!!ZMS);                   /* @33A*/         02822000
*    ANS(COMMENT(ZMS)) COL(MACLMAR);                  /* @33A*/         02822100
*    ZMACRET=8;                                       /* @33A*/         02822200
*   END;                                              /* @33A*/         02822300
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  02822400
*/*PL.LL01 ?IVTCSM MF=L PARAMETER LIST-------------------------------*/ 02822500
*  IF XMF='L'                                                           02822600
*    THEN                                                               02822700
*      DO;                                                              02822800
*        ANS('DCL 1 '!!XMFCTRL!!' '!!XMFATTR!!', '!!                    02822900
*            '/* ?IVTCSM PARM LIST*/')                                  02823000
*            NORESCAN COL(MACLMAR);                                     02823100
*/*PL.LL02  XVERSION FIXED(8) INPUT----------------------------------*/ 02823200
*        ANS('2 '!!XMFCTRL!!                                            02823300
*            '_XVERSION FIXED(8), '!!                                   02823400
*            '/* INPUT XVERSION*/')                                     02823500
*            NORESCAN COL(MACLMAR+2);                                   02823600
*/*PL.LL04  XBUFSOURC FIXED(8) INPUT---------------------------------*/ 02823700
*        ANS('2 '!!XMFCTRL!!                                            02823800
*            '_XBUFSOURC FIXED(8), '!!                                  02823900
*            '/* '!!ZXBUFSOURC!!                                        02824000
*            ' XBUFSOURC */')                                           02824100
*            NORESCAN COL(MACLMAR+2);                                   02824200
*/*PL.LL04  XBUFTYPE FIXED(8) INPUT----------------------------------*/ 02824300
*        ANS('2 '!!XMFCTRL!!                                            02824400
*            '_XBUFTYPE FIXED(8), '!!                                   02824500
*            '/* '!!ZXBUFTYPE!!                                         02824600
*            ' XBUFTYPE */')                                            02824700
*            NORESCAN COL(MACLMAR+2);                                   02824800
*/*PL.LL04  XCLEAR FIXED(8) INPUT------------------------------------*/ 02824900
*        ANS('2 '!!XMFCTRL!!                                            02825000
*            '_XCLEAR FIXED(8), '!!                                     02825100
*            '/* '!!ZXCLEAR!!                                           02825200
*            ' XCLEAR */')                                              02825300
*            NORESCAN COL(MACLMAR+2);                                   02825400
*/*PL.LL04  XWAIT FIXED(8) INPUT-------------------------------------*/ 02825500
*        ANS('2 '!!XMFCTRL!!                                            02825600
*            '_XWAIT FIXED(8), '!!                                      02825700
*            '/* '!!ZXWAIT!!                                            02825800
*            ' XWAIT */')                                               02825900
*            NORESCAN COL(MACLMAR+2);                                   02826000
*/*PL.LL04  XFREETO FIXED(8) INPUT-----------------------------------*/ 02826100
*        ANS('2 '!!XMFCTRL!!                                            02826200
*            '_XFREETO FIXED(8), '!!                                    02826300
*            '/* '!!ZXFREETO!!                                          02826400
*            ' XFREETO */')                                             02826500
*            NORESCAN COL(MACLMAR+2);                                   02826600
*/*PL.LL13  XOWNERID FIXED(16) INPUT---------------------------------*/ 02826700
*        ANS('2 '!!XMFCTRL                                              02826800
*         !! '_XOWNERID FIXED(16), '                                    02826900
*         !! '/* '!!ZXOWNERID                                           02827000
*         !! ' XOWNERID */'                                             02827100
*            ) NORESCAN COL(MACLMAR+2);                                 02827200
*/*PL.LL04  XREQUEST FIXED(31) INPUT---------------------------------*/ 02827300
*        ANS('2 '!!XMFCTRL!!                                            02827400
*            '_XREQUEST FIXED(31), '!!                                  02827500
*            '/* '!!ZXREQUEST!!                                         02827600
*            ' XREQUEST */')                                            02827700
*            NORESCAN COL(MACLMAR+2);                                   02827800
*/*PL.LL13  XBUFSIZE FIXED(31) INPUT---------------------------------*/ 02827900
*        ANS('2 '!!XMFCTRL                                              02828000
*         !! '_XBUFSIZE FIXED(31), '                                    02828100
*         !! '/* '!!ZXBUFSIZE                                           02828200
*         !! ' XBUFSIZE */'                                             02828300
*            ) NORESCAN COL(MACLMAR+2);                                 02828400
*/*PL.LL13  XINITBUF FIXED(31) INPUT---------------------------------*/ 02828500
*        ANS('2 '!!XMFCTRL                                              02828600
*         !! '_XINITBUF FIXED(31), '                                    02828700
*         !! '/* '!!ZXINITBUF                                           02828800
*         !! ' XINITBUF */'                                             02828900
*            ) NORESCAN COL(MACLMAR+2);                                 02829000
*/*PL.LL13  XMINFREE FIXED(31) INPUT---------------------------------*/ 02829100
*        ANS('2 '!!XMFCTRL                                              02829200
*         !! '_XMINFREE FIXED(31), '                                    02829300
*         !! '/* '!!ZXMINFREE                                           02829400
*         !! ' XMINFREE */'                                             02829500
*            ) NORESCAN COL(MACLMAR+2);                                 02829600
*/*PL.LL13  XEXPBUF FIXED(31) INPUT----------------------------------*/ 02829700
*        ANS('2 '!!XMFCTRL                                              02829800
*         !! '_XEXPBUF FIXED(31), '                                     02829900
*         !! '/* '!!ZXEXPBUF                                            02830000
*         !! ' XEXPBUF */'                                              02830100
*            ) NORESCAN COL(MACLMAR+2);                                 02830200
*/*PL.LL13  XBUFNUM FIXED(31) INPUT----------------------------------*/ 02830300
*        ANS('2 '!!XMFCTRL                                              02830400
*         !! '_XBUFNUM FIXED(31), '                                     02830500
*         !! '/* '!!ZXBUFNUM                                            02830600
*         !! ' XBUFNUM */'                                              02830700
*            ) NORESCAN COL(MACLMAR+2);                                 02830800
*/*PL.LL13  XBUFLIST PTR(31) INPUT NAME------------------------------*/ 02830900
*        ANS('2 '!!XMFCTRL                                              02831000
*         !! '_XBUFLIST PTR(31), '                                      02831100
*         !! '/* '!!ZXBUFLIST                                           02831200
*         !! ' XBUFLIST */'                                             02831300
*            ) NORESCAN COL(MACLMAR+2);                                 02831400
*/*PL.LL13  XERRBFLST FIXED(31) OUTPUT-------------------------------*/ 02831500
*        ANS('2 '!!XMFCTRL                                              02831600
*         !! '_XERRBFLST FIXED(31), '                                   02831700
*         !! '/* '!!ZXERRBFLST                                          02831800
*         !! ' XERRBFLST */'                                            02831900
*            ) NORESCAN COL(MACLMAR+2);                                 02832000
*/*PL.LL13  XTASKID PTR(31) INPUT------------------------------------*/ 02832100
*        ANS('2 '!!XMFCTRL                                              02832200
*         !! '_XTASKID PTR(31), '                                       02832300
*         !! '/* '!!ZXTASKID                                            02832400
*         !! ' XTASKID */'                                              02832500
*            ) NORESCAN COL(MACLMAR+2);                                 02832600
*/*PL.LL13  XFREERTN PTR(31) INPUT-----------------------------------*/ 02832700
*        ANS('2 '!!XMFCTRL                                              02832800
*         !! '_XFREERTN PTR(31), '                                      02832900
*         !! '/* '!!ZXFREERTN                                           02833000
*         !! ' XFREERTN */'                                             02833100
*            ) NORESCAN COL(MACLMAR+2);                                 02833200
*/*PL.LL13  XGAP FIXED(31) INPUT-------------------------------------*/ 02833300
*        ANS('2 '!!XMFCTRL                                              02833400
*         !! '_XGAP FIXED(31), '                                        02833500
*         !! '/* '!!ZXGAP                                               02833600
*         !! ' XGAP */'                                                 02833700
*            ) NORESCAN COL(MACLMAR+2);                                 02833800
*/*PL.LL13  XSRCGAP FIXED(31) INPUT----------------------------------*/ 02833900
*        ANS('2 '!!XMFCTRL                                              02834000
*         !! '_XSRCGAP FIXED(31), '                                     02834100
*         !! '/* '!!ZXSRCGAP                                            02834200
*         !! ' XSRCGAP */'                                              02834300
*            ) NORESCAN COL(MACLMAR+2);                                 02834400
*/*PL.LL13  XTARGGAP FIXED(31) INPUT---------------------------------*/ 02834500
*        ANS('2 '!!XMFCTRL                                              02834600
*         !! '_XTARGGAP FIXED(31), '                                    02834700
*         !! '/* '!!ZXTARGGAP                                           02834800
*         !! ' XTARGGAP */'                                             02834900
*            ) NORESCAN COL(MACLMAR+2);                                 02835000
*/*PL.LL13  XSRCNUM FIXED(31) INPUT----------------------------------*/ 02835100
*        ANS('2 '!!XMFCTRL                                              02835200
*         !! '_XSRCNUM FIXED(31), '                                     02835300
*         !! '/* '!!ZXSRCNUM                                            02835400
*         !! ' XSRCNUM */'                                              02835500
*            ) NORESCAN COL(MACLMAR+2);                                 02835600
*/*PL.LL13  XTARGNUM FIXED(31) INPUT---------------------------------*/ 02835700
*        ANS('2 '!!XMFCTRL                                              02835800
*         !! '_XTARGNUM FIXED(31), '                                    02835900
*         !! '/* '!!ZXTARGNUM                                           02836000
*         !! ' XTARGNUM */'                                             02836100
*            ) NORESCAN COL(MACLMAR+2);                                 02836200
*/*PL.LL13  XSRCLIST PTR(31) INPUT NAME------------------------------*/ 02836300
*        ANS('2 '!!XMFCTRL                                              02836400
*         !! '_XSRCLIST PTR(31), '                                      02836500
*         !! '/* '!!ZXSRCLIST                                           02836600
*         !! ' XSRCLIST */'                                             02836700
*            ) NORESCAN COL(MACLMAR+2);                                 02836800
*/*PL.LL13  XTARGLIST PTR(31) INPUT NAME-----------------------------*/ 02836900
*        ANS('2 '!!XMFCTRL                                              02837000
*         !! '_XTARGLIST PTR(31), '                                     02837100
*         !! '/* '!!ZXTARGLIST                                          02837200
*         !! ' XTARGLIST */'                                            02837300
*            ) NORESCAN COL(MACLMAR+2);                                 02837400
*/*PL.LL13  XSRCERRL FIXED(31) OUTPUT--------------------------------*/ 02837500
*        ANS('2 '!!XMFCTRL                                              02837600
*         !! '_XSRCERRL FIXED(31), '                                    02837700
*         !! '/* '!!ZXSRCERRL                                           02837800
*         !! ' XSRCERRL */'                                             02837900
*            ) NORESCAN COL(MACLMAR+2);                                 02838000
*/*PL.LL13  XTARGERRL FIXED(31) OUTPUT-------------------------------*/ 02838100
*        ANS('2 '!!XMFCTRL                                              02838200
*         !! '_XTARGERRL FIXED(31), '                                   02838300
*         !! '/* '!!ZXTARGERRL                                          02838400
*         !! ' XTARGERRL */'                                            02838500
*            ) NORESCAN COL(MACLMAR+2);                                 02838600
*/*PL.LL13  XUTILRTN FIXED(32) INPUT---------------------------------*/ 02838700
*        ANS('2 '!!XMFCTRL                                              02838800
*         !! '_XUTILRTN FIXED(32), '                                    02838900
*         !! '/* '!!ZXUTILRTN                                           02839000
*         !! ' XUTILRTN */'                                             02839100
*            ) NORESCAN COL(MACLMAR+2);                                 02839200
*/*PL.LL13  XDS_INFO PTR(31) OUTPUT----------------------------------*/ 02839300
*        ANS('2 '!!XMFCTRL                                              02839400
*         !! '_XDS_INFO PTR(31), '                                      02839500
*         !! '/* '!!ZXDS_INFO                                           02839600
*         !! ' XDS_INFO */'                                             02839700
*            ) NORESCAN COL(MACLMAR+2);                                 02839800
*/*PL.LL13  XSTATAREA PTR(31) OUTPUT---------------------------------*/ 02839900
*        ANS('2 '!!XMFCTRL                                              02840000
*         !! '_XSTATAREA PTR(31), '                                     02840100
*         !! '/* '!!ZXSTATAREA                                          02840200
*         !! ' XSTATAREA */'                                            02840300
*            ) NORESCAN COL(MACLMAR+2);                                 02840400
*/*PL.LL13  XTHREAD CHAR(4) INPUT------------------------------------*/ 02840500
*        ANS('2 '!!XMFCTRL                                              02840600
*         !! '_XTHREAD CHAR(4), '                                       02840700
*         !! '/* '!!ZXTHREAD                                            02840800
*         !! ' XTHREAD */'                                              02840900
*            ) NORESCAN COL(MACLMAR+2);                                 02841000
*/*PL.LL13  XPADCHAR CHAR(1) INPUT-----------------------------------*/ 02841100
*        ANS('2 '!!XMFCTRL                                              02841200
*         !! '_XPADCHAR CHAR(1), '                                      02841300
*         !! '/* '!!ZXPADCHAR                                           02841400
*         !! ' XPADCHAR */'                                             02841500
*            ) NORESCAN COL(MACLMAR+2);                                 02841600
*/*PL.LL04  XPAD FIXED(8) INPUT--------------------------------------*/ 02841700
*        ANS('2 '!!XMFCTRL!!                                            02841800
*            '_XPAD FIXED(8), '!!                                       02841900
*            '/* '!!ZXPAD!!                                             02842000
*            ' XPAD */')                                                02842100
*            NORESCAN COL(MACLMAR+2);                                   02842200
*/*PL.LL13  XPOOLTOKN CHAR(10) INPUT---------------------------------*/ 02842300
*        ANS('2 '!!XMFCTRL                                              02842400
*         !! '_XPOOLTOKN CHAR(10), '                                    02842500
*         !! '/* '!!ZXPOOLTOKN                                          02842600
*         !! ' XPOOLTOKN */'                                            02842700
*            ) NORESCAN COL(MACLMAR+2);                                 02842800
*/*PL.LL04  XSKIPBUF FIXED(8) INPUT----------------------------------*/ 02842900
*        ANS('2 '!!XMFCTRL!!                                            02843000
*            '_XSKIPBUF FIXED(8), '!!                                   02843100
*            '/* '!!ZXSKIPBUF!!                                         02843200
*            ' XSKIPBUF */')                                            02843300
*            NORESCAN COL(MACLMAR+2);                                   02843400
*/*PL.LL04  XCSMUSER FIXED(8) INPUT----------------------------------*/ 02843500
*        ANS('2 '!!XMFCTRL!!                                            02843600
*            '_XCSMUSER FIXED(8), '!!                                   02843700
*            '/* '!!ZXCSMUSER!!                                         02843800
*            ' XCSMUSER */')                                            02843900
*            NORESCAN COL(MACLMAR+2);                                   02844000
*/*PL.LL04  XFLAGS1 BIT(8) FIELD_LABEL-------------------------------*/ 02844100
*        ANS('2 '!!XMFCTRL!!                                            02844200
*            '_XFLAGS1 BIT(8), '!!                                      02844300
*            '/* FIELD_LABEL */')                                       02844400
*            NORESCAN COL(MACLMAR+2);                                   02844500
*/*PL.LL09 BIT 1XXXXXXX----------------------------------------------*/ 02844600
*          ANS('3 '!!XMFCTRL!!                                          02844700
*              '_XBACK64 BIT(1), '!!                                    02844800
*              '/* BIT */')                                             02844900
*              NORESCAN COL(MACLMAR+2);                                 02845000
*/*PL.LL10 RESERVED BIT----------------------------------------------*/ 02845100
*          ANS('3 '!!XMFCTRL!!                                          02845200
*              '_XFLAGS1_RSVD1 BIT(7), '!!                              02845300
*              '/* BIT */')                                             02845400
*              NORESCAN COL(MACLMAR+2);                                 02845500
*/*PL.LL13  XRSV001 CHAR(1) RESERVED---------------------------------*/ 02845600
*        ANS('2 '!!XMFCTRL                                              02845700
*         !! '_XRSV001 CHAR(1), '                                       02845800
*         !! '/* RESERVED */'                                           02845900
*            ) NORESCAN COL(MACLMAR+2);                                 02846000
*/*PL.LPVER01 -------------------------------------------------------*/ 02846100
*  IF XPLISTVER>=1                                                      02846200
*    THEN                                                               02846300
*      DO;                                                              02846400
*/*PL.LL13  XCOMPID FIXED(8) INPUT-----------------------------------*/ 02846500
*        ANS('2 '!!XMFCTRL                                              02846600
*         !! '_XCOMPID FIXED(8), '                                      02846700
*         !! '/* '!!ZXCOMPID                                            02846800
*         !! ' XCOMPID */'                                              02846900
*            ) NORESCAN COL(MACLMAR+2);                                 02847000
*/*PL.LPVER02 -------------------------------------------------------*/ 02847100
*      END;                                                             02847200
*/*PL.LPVER01 -------------------------------------------------------*/ 02847300
*  IF XPLISTVER>=1                                                      02847400
*    THEN                                                               02847500
*      DO;                                                              02847600
*/*PL.LL13  XRSV002 CHAR(3) RESERVED---------------------------------*/ 02847700
*        ANS('2 '!!XMFCTRL                                              02847800
*         !! '_XRSV002 CHAR(3), '                                       02847900
*         !! '/* RESERVED */'                                           02848000
*            ) NORESCAN COL(MACLMAR+2);                                 02848100
*/*PL.LPVER02 -------------------------------------------------------*/ 02848200
*      END;                                                             02848300
*/*PL.LPVER01 -------------------------------------------------------*/ 02848400
*  IF XPLISTVER>=1                                                      02848500
*    THEN                                                               02848600
*      DO;                                                              02848700
*/*PL.LL13  XCOMPUSER CHAR(4) INPUT----------------------------------*/ 02848800
*        ANS('2 '!!XMFCTRL                                              02848900
*         !! '_XCOMPUSER CHAR(4), '                                     02849000
*         !! '/* '!!ZXCOMPUSER                                          02849100
*         !! ' XCOMPUSER */'                                            02849200
*            ) NORESCAN COL(MACLMAR+2);                                 02849300
*/*PL.LPVER02 -------------------------------------------------------*/ 02849400
*      END;                                                             02849500
*/*PL.LPVER01 -------------------------------------------------------*/ 02849600
*  IF XPLISTVER>=1                                                      02849700
*    THEN                                                               02849800
*      DO;                                                              02849900
*/*PL.LL13  XRSV003 CHAR(8) RESERVED---------------------------------*/ 02850000
*        ANS('2 '!!XMFCTRL                                              02850100
*         !! '_XRSV003 CHAR(8), '                                       02850200
*         !! '/* RESERVED */'                                           02850300
*            ) NORESCAN COL(MACLMAR+2);                                 02850400
*/*PL.LPVER02 -------------------------------------------------------*/ 02850500
*      END;                                                             02850600
*/*PL.LPVER01 -------------------------------------------------------*/ 02850700
*  IF XPLISTVER>=2                                                      02850800
*    THEN                                                               02850900
*      DO;                                                              02851000
*/*PL.LL13  XRSV004 CHAR(4) RESERVED---------------------------------*/ 02851100
*        ANS('2 '!!XMFCTRL                                              02851200
*         !! '_XRSV004 CHAR(4), '                                       02851300
*         !! '/* RESERVED */'                                           02851400
*            ) NORESCAN COL(MACLMAR+2);                                 02851500
*/*PL.LPVER02 -------------------------------------------------------*/ 02851600
*      END;                                                             02851700
*/*PL.LPVER01 -------------------------------------------------------*/ 02851800
*  IF XPLISTVER>=2                                                      02851900
*    THEN                                                               02852000
*      DO;                                                              02852100
*/*PL.LL13 ADDR64 XBUFLST64 PTR(64) INPUT ADDR64---------------------*/ 02852200
*        ANS('2 '!!XMFCTRL                                              02852300
*         !! '_XBUFLST64_ADDR64 PTR(64), '                              02852400
*         !! '/* '!!ZXBUFLST64_ADDR64                                   02852500
*         !! ' XBUFLST64_ADDR64 */'                                     02852600
*            ) NORESCAN COL(MACLMAR+2);                                 02852700
*/*PL.LPVER02 -------------------------------------------------------*/ 02852800
*      END;                                                             02852900
*/*PL.LPVER01 -------------------------------------------------------*/ 02853000
*  IF XPLISTVER>=2                                                      02853100
*    THEN                                                               02853200
*      DO;                                                              02853300
*/*PL.LL13 ADDR64 XSRCLST64 PTR(64) INPUT ADDR64---------------------*/ 02853400
*        ANS('2 '!!XMFCTRL                                              02853500
*         !! '_XSRCLST64_ADDR64 PTR(64), '                              02853600
*         !! '/* '!!ZXSRCLST64_ADDR64                                   02853700
*         !! ' XSRCLST64_ADDR64 */'                                     02853800
*            ) NORESCAN COL(MACLMAR+2);                                 02853900
*/*PL.LPVER02 -------------------------------------------------------*/ 02854000
*      END;                                                             02854100
*/*PL.LPVER01 -------------------------------------------------------*/ 02854200
*  IF XPLISTVER>=2                                                      02854300
*    THEN                                                               02854400
*      DO;                                                              02854500
*/*PL.LL13 ADDR64 XTARLST64 PTR(64) INPUT ADDR64---------------------*/ 02854600
*        ANS('2 '!!XMFCTRL                                              02854700
*         !! '_XTARLST64_ADDR64 PTR(64), '                              02854800
*         !! '/* '!!ZXTARLST64_ADDR64                                   02854900
*         !! ' XTARLST64_ADDR64 */'                                     02855000
*            ) NORESCAN COL(MACLMAR+2);                                 02855100
*/*PL.LPVER02 -------------------------------------------------------*/ 02855200
*      END;                                                             02855300
*/*PL.L01 XPOOLTOKN DEFINED-----------------------------------------*/  02855400
*        ANS('1 * DEF('!!XMFCTRL!!                                      02855500
*            '_XPOOLTOKN), '!!                                          02855600
*            '/* DEFINED */')                                           02855700
*            NORESCAN COL(MACLMAR);                                     02855800
*/*PL.LL13  XRETPTOKN CHAR(10) OUTPUT--------------------------------*/ 02855900
*        ANS('2 '!!XMFCTRL                                              02856000
*         !! '_XRETPTOKN CHAR(10), '                                    02856100
*         !! '/* '!!ZXRETPTOKN                                          02856200
*         !! ' XRETPTOKN */'                                            02856300
*            ) NORESCAN COL(MACLMAR+2);                                 02856400
*/*PL.LL18 ----------------------------------------------------------*/ 02856500
*        ANS('2 * CHAR(0);')                                            02856600
*            NORESCAN COL(MACLMAR+2);                                   02856700
*/*PL.LL15 XBUFSOURC.ECSA--------------------------------------------*/ 02856800
*        ANS('DCL '!!XMFCTRL!!                                          02856900
*            '_XBUFSOURC_ECSA FIXED(8) '!!                              02857000
*            'CONSTANT(128); '!!                                        02857100
*            '/* XBUFSOURC */')                                         02857200
*            NORESCAN COL(MACLMAR+2);                                   02857300
*/*PL.LL15 XBUFSOURC.DSPACE------------------------------------------*/ 02857400
*        ANS('DCL '!!XMFCTRL!!                                          02857500
*            '_XBUFSOURC_DSPACE FIXED(8) '!!                            02857600
*            'CONSTANT(64); '!!                                         02857700
*            '/* XBUFSOURC */')                                         02857800
*            NORESCAN COL(MACLMAR+2);                                   02857900
*/*PL.LL15 XBUFSOURC.HVCOMM------------------------------------------*/ 02858000
*        ANS('DCL '!!XMFCTRL!!                                          02858100
*            '_XBUFSOURC_HVCOMM FIXED(8) '!!                            02858200
*            'CONSTANT(8); '!!                                          02858300
*            '/* XBUFSOURC */')                                         02858400
*            NORESCAN COL(MACLMAR+2);                                   02858500
*/*PL.LL15 XBUFTYPE.SAME---------------------------------------------*/ 02858600
*        ANS('DCL '!!XMFCTRL!!                                          02858700
*            '_XBUFTYPE_SAME FIXED(8) '!!                               02858800
*            'CONSTANT(0); '!!                                          02858900
*            '/* XBUFTYPE */')                                          02859000
*            NORESCAN COL(MACLMAR+2);                                   02859100
*/*PL.LL15 XBUFTYPE.FIXED--------------------------------------------*/ 02859200
*        ANS('DCL '!!XMFCTRL!!                                          02859300
*            '_XBUFTYPE_FIXED FIXED(8) '!!                              02859400
*            'CONSTANT(128); '!!                                        02859500
*            '/* XBUFTYPE */')                                          02859600
*            NORESCAN COL(MACLMAR+2);                                   02859700
*/*PL.LL15 XBUFTYPE.PAGEABLE-----------------------------------------*/ 02859800
*        ANS('DCL '!!XMFCTRL!!                                          02859900
*            '_XBUFTYPE_PAGEABLE FIXED(8) '!!                           02860000
*            'CONSTANT(64); '!!                                         02860100
*            '/* XBUFTYPE */')                                          02860200
*            NORESCAN COL(MACLMAR+2);                                   02860300
*/*PL.LL15 XBUFTYPE.PAGEELIG-----------------------------------------*/ 02860400
*        ANS('DCL '!!XMFCTRL!!                                          02860500
*            '_XBUFTYPE_PAGEELIG FIXED(8) '!!                           02860600
*            'CONSTANT(32); '!!                                         02860700
*            '/* XBUFTYPE */')                                          02860800
*            NORESCAN COL(MACLMAR+2);                                   02860900
*/*PL.LL15 XCLEAR.NO-------------------------------------------------*/ 02861000
*        ANS('DCL '!!XMFCTRL!!                                          02861100
*            '_XCLEAR_NO FIXED(8) '!!                                   02861200
*            'CONSTANT(0); '!!                                          02861300
*            '/* XCLEAR */')                                            02861400
*            NORESCAN COL(MACLMAR+2);                                   02861500
*/*PL.LL15 XCLEAR.YES------------------------------------------------*/ 02861600
*        ANS('DCL '!!XMFCTRL!!                                          02861700
*            '_XCLEAR_YES FIXED(8) '!!                                  02861800
*            'CONSTANT(128); '!!                                        02861900
*            '/* XCLEAR */')                                            02862000
*            NORESCAN COL(MACLMAR+2);                                   02862100
*/*PL.LL15 XWAIT.NO--------------------------------------------------*/ 02862200
*        ANS('DCL '!!XMFCTRL!!                                          02862300
*            '_XWAIT_NO FIXED(8) '!!                                    02862400
*            'CONSTANT(0); '!!                                          02862500
*            '/* XWAIT */')                                             02862600
*            NORESCAN COL(MACLMAR+2);                                   02862700
*/*PL.LL15 XWAIT.YES-------------------------------------------------*/ 02862800
*        ANS('DCL '!!XMFCTRL!!                                          02862900
*            '_XWAIT_YES FIXED(8) '!!                                   02863000
*            'CONSTANT(128); '!!                                        02863100
*            '/* XWAIT */')                                             02863200
*            NORESCAN COL(MACLMAR+2);                                   02863300
*/*PL.LL15 XWAIT.EXPAND----------------------------------------------*/ 02863400
*        ANS('DCL '!!XMFCTRL!!                                          02863500
*            '_XWAIT_EXPAND FIXED(8) '!!                                02863600
*            'CONSTANT(64); '!!                                         02863700
*            '/* XWAIT */')                                             02863800
*            NORESCAN COL(MACLMAR+2);                                   02863900
*/*PL.LL15 XFREETO.USER----------------------------------------------*/ 02864000
*        ANS('DCL '!!XMFCTRL!!                                          02864100
*            '_XFREETO_USER FIXED(8) '!!                                02864200
*            'CONSTANT(128); '!!                                        02864300
*            '/* XFREETO */')                                           02864400
*            NORESCAN COL(MACLMAR+2);                                   02864500
*/*PL.LL15 XFREETO.CSM-----------------------------------------------*/ 02864600
*        ANS('DCL '!!XMFCTRL!!                                          02864700
*            '_XFREETO_CSM FIXED(8) '!!                                 02864800
*            'CONSTANT(64); '!!                                         02864900
*            '/* XFREETO */')                                           02865000
*            NORESCAN COL(MACLMAR+2);                                   02865100
*/*PL.LL15 XREQUEST.CREATE_POOL--------------------------------------*/ 02865200
*        ANS('DCL '!!XMFCTRL!!                                          02865300
*            '_XREQUEST_CREATE_POOL FIXED(31) '!!                       02865400
*            'CONSTANT(0); '!!                                          02865500
*            '/* XREQUEST */')                                          02865600
*            NORESCAN COL(MACLMAR+2);                                   02865700
*/*PL.LL15 XREQUEST.DELETE_POOL--------------------------------------*/ 02865800
*        ANS('DCL '!!XMFCTRL!!                                          02865900
*            '_XREQUEST_DELETE_POOL FIXED(31) '!!                       02866000
*            'CONSTANT(1); '!!                                          02866100
*            '/* XREQUEST */')                                          02866200
*            NORESCAN COL(MACLMAR+2);                                   02866300
*/*PL.LL15 XREQUEST.GET_BUFFER---------------------------------------*/ 02866400
*        ANS('DCL '!!XMFCTRL!!                                          02866500
*            '_XREQUEST_GET_BUFFER FIXED(31) '!!                        02866600
*            'CONSTANT(2); '!!                                          02866700
*            '/* XREQUEST */')                                          02866800
*            NORESCAN COL(MACLMAR+2);                                   02866900
*/*PL.LL15 XREQUEST.FREE_BUFFER--------------------------------------*/ 02867000
*        ANS('DCL '!!XMFCTRL!!                                          02867100
*            '_XREQUEST_FREE_BUFFER FIXED(31) '!!                       02867200
*            'CONSTANT(3); '!!                                          02867300
*            '/* XREQUEST */')                                          02867400
*            NORESCAN COL(MACLMAR+2);                                   02867500
*/*PL.LL15 XREQUEST.ASSIGN_BUFFER------------------------------------*/ 02867600
*        ANS('DCL '!!XMFCTRL!!                                          02867700
*            '_XREQUEST_ASSIGN_BUFFER FIXED(31) '!!                     02867800
*            'CONSTANT(4); '!!                                          02867900
*            '/* XREQUEST */')                                          02868000
*            NORESCAN COL(MACLMAR+2);                                   02868100
*/*PL.LL15 XREQUEST.DUMP_INFO----------------------------------------*/ 02868200
*        ANS('DCL '!!XMFCTRL!!                                          02868300
*            '_XREQUEST_DUMP_INFO FIXED(31) '!!                         02868400
*            'CONSTANT(5); '!!                                          02868500
*            '/* XREQUEST */')                                          02868600
*            NORESCAN COL(MACLMAR+2);                                   02868700
*/*PL.LL15 XREQUEST.FIX_BUFFER---------------------------------------*/ 02868800
*        ANS('DCL '!!XMFCTRL!!                                          02868900
*            '_XREQUEST_FIX_BUFFER FIXED(31) '!!                        02869000
*            'CONSTANT(6); '!!                                          02869100
*            '/* XREQUEST */')                                          02869200
*            NORESCAN COL(MACLMAR+2);                                   02869300
*/*PL.LL15 XREQUEST.PAGE_BUFFER--------------------------------------*/ 02869400
*        ANS('DCL '!!XMFCTRL!!                                          02869500
*            '_XREQUEST_PAGE_BUFFER FIXED(31) '!!                       02869600
*            'CONSTANT(7); '!!                                          02869700
*            '/* XREQUEST */')                                          02869800
*            NORESCAN COL(MACLMAR+2);                                   02869900
*/*PL.LL15 XREQUEST.RESOURCE_STATS-----------------------------------*/ 02870000
*        ANS('DCL '!!XMFCTRL!!                                          02870100
*            '_XREQUEST_RESOURCE_STATS FIXED(31) '!!                    02870200
*            'CONSTANT(8); '!!                                          02870300
*            '/* XREQUEST */')                                          02870400
*            NORESCAN COL(MACLMAR+2);                                   02870500
*/*PL.LL15 XREQUEST.COPY_DATA----------------------------------------*/ 02870600
*        ANS('DCL '!!XMFCTRL!!                                          02870700
*            '_XREQUEST_COPY_DATA FIXED(31) '!!                         02870800
*            'CONSTANT(9); '!!                                          02870900
*            '/* XREQUEST */')                                          02871000
*            NORESCAN COL(MACLMAR+2);                                   02871100
*/*PL.LL15 XREQUEST.CHANGE_OWNER-------------------------------------*/ 02871200
*        ANS('DCL '!!XMFCTRL!!                                          02871300
*            '_XREQUEST_CHANGE_OWNER FIXED(31) '!!                      02871400
*            'CONSTANT(100); '!!                                        02871500
*            '/* XREQUEST */')                                          02871600
*            NORESCAN COL(MACLMAR+2);                                   02871700
*/*PL.LL15 XPAD.NO---------------------------------------------------*/ 02871800
*        ANS('DCL '!!XMFCTRL!!                                          02871900
*            '_XPAD_NO FIXED(8) '!!                                     02872000
*            'CONSTANT(0); '!!                                          02872100
*            '/* XPAD */')                                              02872200
*            NORESCAN COL(MACLMAR+2);                                   02872300
*/*PL.LL15 XPAD.YES--------------------------------------------------*/ 02872400
*        ANS('DCL '!!XMFCTRL!!                                          02872500
*            '_XPAD_YES FIXED(8) '!!                                    02872600
*            'CONSTANT(128); '!!                                        02872700
*            '/* XPAD */')                                              02872800
*            NORESCAN COL(MACLMAR+2);                                   02872900
*/*PL.LL15 XSKIPBUF.NO-----------------------------------------------*/ 02873000
*        ANS('DCL '!!XMFCTRL!!                                          02873100
*            '_XSKIPBUF_NO FIXED(8) '!!                                 02873200
*            'CONSTANT(0); '!!                                          02873300
*            '/* XSKIPBUF */')                                          02873400
*            NORESCAN COL(MACLMAR+2);                                   02873500
*/*PL.LL15 XSKIPBUF.YES----------------------------------------------*/ 02873600
*        ANS('DCL '!!XMFCTRL!!                                          02873700
*            '_XSKIPBUF_YES FIXED(8) '!!                                02873800
*            'CONSTANT(128); '!!                                        02873900
*            '/* XSKIPBUF */')                                          02874000
*            NORESCAN COL(MACLMAR+2);                                   02874100
*/*PL.LL15 XCSMUSER.NO-----------------------------------------------*/ 02874200
*        ANS('DCL '!!XMFCTRL!!                                          02874300
*            '_XCSMUSER_NO FIXED(8) '!!                                 02874400
*            'CONSTANT(0); '!!                                          02874500
*            '/* XCSMUSER */')                                          02874600
*            NORESCAN COL(MACLMAR+2);                                   02874700
*/*PL.LL15 XCSMUSER.YES----------------------------------------------*/ 02874800
*        ANS('DCL '!!XMFCTRL!!                                          02874900
*            '_XCSMUSER_YES FIXED(8) '!!                                02875000
*            'CONSTANT(128); '!!                                        02875100
*            '/* XCSMUSER */')                                          02875200
*            NORESCAN COL(MACLMAR+2);                                   02875300
*/*PL.LL17 END OF MF=L PARAMETER LIST--------------------------------*/ 02875400
*      END;                                                             02875500
*/*PL.L01 MACRO WORK VARIABLES---------------------------------------*/ 02875600
*  DCL ZPRMLINE CHAR;          /* ZPRM ARRAY ENTRY ACCUMULATOR      */  02875700
*  DEACT ZPRMLINE;                                                      02875800
*  DCL ZNDX CHAR;              /* UNIQUE LIST STRUCTURE NAME        */  02875900
*  DEACT ZNDX;                                                          02876000
*  ZNDX=MACINDEX;              /* MACINDEX                          */  02876100
*  DCL XVERSION CHAR;                                                   02876200
*  DEACT XVERSION;                                                      02876300
*/*PL.L02 ?IVTCSM PARAMETER LIST-------------------------------------*/ 02876400
*  IF XMF^='L'                                                          02876500
*    THEN                                                               02876600
*      DO;                                                              02876700
*/*PL.L03 ?IVTCSM PARAMETER LIST-------------------------------------*/ 02876800
*        IF XMF='S'                                                     02876900
*          THEN                                                         02877000
*            XMFCTRL='#ZPLIST';                                         02877100
*/*PL.L04 ?IVTCSM PARAMETER LIST-------------------------------------*/ 02877200
*        ZPRMLINE='DCL 1 #Z'!!ZNDX!!' DEF('!!                           02877300
*                 XMFCTRL!!'),'!!                                       02877400
*                 ' /* ?IVTCSM PARM LIST*/';                            02877500
*/*PL.L05  XVERSION FIXED(8) INPUT-----------------------------------*/ 02877600
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02877700
*                 '_XVERSION FIXED(8), '!!                              02877800
*                 '/* INPUT XVERSION*/';                                02877900
*/*PL.L08  XBUFSOURC FIXED(8) INPUT----------------------------------*/ 02878000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02878100
*                 '_XBUFSOURC FIXED(8), '!!                             02878200
*                 '/* '!!ZXBUFSOURC!!                                   02878300
*                 ' XBUFSOURC */';                                      02878400
*/*PL.L08  XBUFTYPE FIXED(8) INPUT-----------------------------------*/ 02878500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02878600
*                 '_XBUFTYPE FIXED(8), '!!                              02878700
*                 '/* '!!ZXBUFTYPE!!                                    02878800
*                 ' XBUFTYPE */';                                       02878900
*/*PL.L08  XCLEAR FIXED(8) INPUT-------------------------------------*/ 02879000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02879100
*                 '_XCLEAR FIXED(8), '!!                                02879200
*                 '/* '!!ZXCLEAR!!                                      02879300
*                 ' XCLEAR */';                                         02879400
*/*PL.L08  XWAIT FIXED(8) INPUT--------------------------------------*/ 02879500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02879600
*                 '_XWAIT FIXED(8), '!!                                 02879700
*                 '/* '!!ZXWAIT!!                                       02879800
*                 ' XWAIT */';                                          02879900
*/*PL.L08  XFREETO FIXED(8) INPUT------------------------------------*/ 02880000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02880100
*                 '_XFREETO FIXED(8), '!!                               02880200
*                 '/* '!!ZXFREETO!!                                     02880300
*                 ' XFREETO */';                                        02880400
*/*PL.L08  XOWNERID FIXED(16) INPUT----------------------------------*/ 02880500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02880600
*                 '_XOWNERID FIXED(16), '!!                             02880700
*                 '/* '!!ZXOWNERID!!                                    02880800
*                 ' XOWNERID */';                                       02880900
*/*PL.L08  XREQUEST FIXED(31) INPUT----------------------------------*/ 02881000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02881100
*                 '_XREQUEST FIXED(31), '!!                             02881200
*                 '/* '!!ZXREQUEST!!                                    02881300
*                 ' XREQUEST */';                                       02881400
*/*PL.L08  XBUFSIZE FIXED(31) INPUT----------------------------------*/ 02881500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02881600
*                 '_XBUFSIZE FIXED(31), '!!                             02881700
*                 '/* '!!ZXBUFSIZE!!                                    02881800
*                 ' XBUFSIZE */';                                       02881900
*/*PL.L08  XINITBUF FIXED(31) INPUT----------------------------------*/ 02882000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02882100
*                 '_XINITBUF FIXED(31), '!!                             02882200
*                 '/* '!!ZXINITBUF!!                                    02882300
*                 ' XINITBUF */';                                       02882400
*/*PL.L08  XMINFREE FIXED(31) INPUT----------------------------------*/ 02882500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02882600
*                 '_XMINFREE FIXED(31), '!!                             02882700
*                 '/* '!!ZXMINFREE!!                                    02882800
*                 ' XMINFREE */';                                       02882900
*/*PL.L08  XEXPBUF FIXED(31) INPUT-----------------------------------*/ 02883000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02883100
*                 '_XEXPBUF FIXED(31), '!!                              02883200
*                 '/* '!!ZXEXPBUF!!                                     02883300
*                 ' XEXPBUF */';                                        02883400
*/*PL.L08  XBUFNUM FIXED(31) INPUT-----------------------------------*/ 02883500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02883600
*                 '_XBUFNUM FIXED(31), '!!                              02883700
*                 '/* '!!ZXBUFNUM!!                                     02883800
*                 ' XBUFNUM */';                                        02883900
*/*PL.L08  XBUFLIST PTR(31) INPUT NAME-------------------------------*/ 02884000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02884100
*                 '_XBUFLIST PTR(31), '!!                               02884200
*                 '/* '!!ZXBUFLIST!!                                    02884300
*                 ' XBUFLIST */';                                       02884400
*/*PL.L08  XERRBFLST FIXED(31) OUTPUT--------------------------------*/ 02884500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02884600
*                 '_XERRBFLST FIXED(31), '!!                            02884700
*                 '/* '!!ZXERRBFLST!!                                   02884800
*                 ' XERRBFLST */';                                      02884900
*/*PL.L08  XTASKID PTR(31) INPUT-------------------------------------*/ 02885000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02885100
*                 '_XTASKID PTR(31), '!!                                02885200
*                 '/* '!!ZXTASKID!!                                     02885300
*                 ' XTASKID */';                                        02885400
*/*PL.L08  XFREERTN PTR(31) INPUT------------------------------------*/ 02885500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02885600
*                 '_XFREERTN PTR(31), '!!                               02885700
*                 '/* '!!ZXFREERTN!!                                    02885800
*                 ' XFREERTN */';                                       02885900
*/*PL.L08  XGAP FIXED(31) INPUT--------------------------------------*/ 02886000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02886100
*                 '_XGAP FIXED(31), '!!                                 02886200
*                 '/* '!!ZXGAP!!                                        02886300
*                 ' XGAP */';                                           02886400
*/*PL.L08  XSRCGAP FIXED(31) INPUT-----------------------------------*/ 02886500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02886600
*                 '_XSRCGAP FIXED(31), '!!                              02886700
*                 '/* '!!ZXSRCGAP!!                                     02886800
*                 ' XSRCGAP */';                                        02886900
*/*PL.L08  XTARGGAP FIXED(31) INPUT----------------------------------*/ 02887000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02887100
*                 '_XTARGGAP FIXED(31), '!!                             02887200
*                 '/* '!!ZXTARGGAP!!                                    02887300
*                 ' XTARGGAP */';                                       02887400
*/*PL.L08  XSRCNUM FIXED(31) INPUT-----------------------------------*/ 02887500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02887600
*                 '_XSRCNUM FIXED(31), '!!                              02887700
*                 '/* '!!ZXSRCNUM!!                                     02887800
*                 ' XSRCNUM */';                                        02887900
*/*PL.L09  XTARGNUM FIXED(31) INPUT----------------------------------*/ 02888000
*        ZPRMNUM=ZPRMNUM+1;                                             02888100
*        ZPRM(ZPRMNUM)=ZPRMLINE!!' 2 #Z'!!ZNDX!!                        02888200
*            '_XTARGNUM FIXED(31), '!!                                  02888300
*            '/* '!!ZXTARGNUM!!                                         02888400
*            ' XTARGNUM */';                                            02888500
*        ZPRMLINE='';                                                   02888600
*/*PL.L08  XSRCLIST PTR(31) INPUT NAME-------------------------------*/ 02888700
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02888800
*                 '_XSRCLIST PTR(31), '!!                               02888900
*                 '/* '!!ZXSRCLIST!!                                    02889000
*                 ' XSRCLIST */';                                       02889100
*/*PL.L08  XTARGLIST PTR(31) INPUT NAME------------------------------*/ 02889200
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02889300
*                 '_XTARGLIST PTR(31), '!!                              02889400
*                 '/* '!!ZXTARGLIST!!                                   02889500
*                 ' XTARGLIST */';                                      02889600
*/*PL.L08  XSRCERRL FIXED(31) OUTPUT---------------------------------*/ 02889700
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02889800
*                 '_XSRCERRL FIXED(31), '!!                             02889900
*                 '/* '!!ZXSRCERRL!!                                    02890000
*                 ' XSRCERRL */';                                       02890100
*/*PL.L08  XTARGERRL FIXED(31) OUTPUT--------------------------------*/ 02890200
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02890300
*                 '_XTARGERRL FIXED(31), '!!                            02890400
*                 '/* '!!ZXTARGERRL!!                                   02890500
*                 ' XTARGERRL */';                                      02890600
*/*PL.L08  XUTILRTN FIXED(32) INPUT----------------------------------*/ 02890700
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02890800
*                 '_XUTILRTN FIXED(32), '!!                             02890900
*                 '/* '!!ZXUTILRTN!!                                    02891000
*                 ' XUTILRTN */';                                       02891100
*/*PL.L08  XDS_INFO PTR(31) OUTPUT-----------------------------------*/ 02891200
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02891300
*                 '_XDS_INFO PTR(31), '!!                               02891400
*                 '/* '!!ZXDS_INFO!!                                    02891500
*                 ' XDS_INFO */';                                       02891600
*/*PL.L08  XSTATAREA PTR(31) OUTPUT----------------------------------*/ 02891700
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02891800
*                 '_XSTATAREA PTR(31), '!!                              02891900
*                 '/* '!!ZXSTATAREA!!                                   02892000
*                 ' XSTATAREA */';                                      02892100
*/*PL.L08  XTHREAD CHAR(4) INPUT-------------------------------------*/ 02892200
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02892300
*                 '_XTHREAD CHAR(4), '!!                                02892400
*                 '/* '!!ZXTHREAD!!                                     02892500
*                 ' XTHREAD */';                                        02892600
*/*PL.L08  XPADCHAR CHAR(1) INPUT------------------------------------*/ 02892700
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02892800
*                 '_XPADCHAR CHAR(1), '!!                               02892900
*                 '/* '!!ZXPADCHAR!!                                    02893000
*                 ' XPADCHAR */';                                       02893100
*/*PL.L08  XPAD FIXED(8) INPUT---------------------------------------*/ 02893200
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02893300
*                 '_XPAD FIXED(8), '!!                                  02893400
*                 '/* '!!ZXPAD!!                                        02893500
*                 ' XPAD */';                                           02893600
*/*PL.L08  XPOOLTOKN CHAR(10) INPUT----------------------------------*/ 02893700
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02893800
*                 '_XPOOLTOKN CHAR(10), '!!                             02893900
*                 '/* '!!ZXPOOLTOKN!!                                   02894000
*                 ' XPOOLTOKN */';                                      02894100
*/*PL.L08  XSKIPBUF FIXED(8) INPUT-----------------------------------*/ 02894200
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02894300
*                 '_XSKIPBUF FIXED(8), '!!                              02894400
*                 '/* '!!ZXSKIPBUF!!                                    02894500
*                 ' XSKIPBUF */';                                       02894600
*/*PL.L08  XCSMUSER FIXED(8) INPUT-----------------------------------*/ 02894700
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02894800
*                 '_XCSMUSER FIXED(8), '!!                              02894900
*                 '/* '!!ZXCSMUSER!!                                    02895000
*                 ' XCSMUSER */';                                       02895100
*/*PL.L08  XFLAGS1 BIT(8) FIELD_LABEL--------------------------------*/ 02895200
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02895300
*                 '_XFLAGS1 BIT(8), '!!                                 02895400
*                 '/* FIELD_LABEL */';                                  02895500
*/*PL.L08  XRSV001 CHAR(1) RESERVED----------------------------------*/ 02895600
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02895700
*                 '_XRSV001 CHAR(1), '!!                                02895800
*                 '/* RESERVED */';                                     02895900
*/*PL.LPVER03 -------------------------------------------------------*/ 02896000
*  IF XPLISTVER>=1                                                      02896100
*    THEN                                                               02896200
*      DO;                                                              02896300
*/*PL.L08  XCOMPID FIXED(8) INPUT------------------------------------*/ 02896400
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02896500
*                 '_XCOMPID FIXED(8), '!!                               02896600
*                 '/* '!!ZXCOMPID!!                                     02896700
*                 ' XCOMPID */';                                        02896800
*/*PL.LPVER04 -------------------------------------------------------*/ 02896900
*      END;                                                             02897000
*/*PL.LPVER03 -------------------------------------------------------*/ 02897100
*  IF XPLISTVER>=1                                                      02897200
*    THEN                                                               02897300
*      DO;                                                              02897400
*/*PL.L08  XRSV002 CHAR(3) RESERVED----------------------------------*/ 02897500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02897600
*                 '_XRSV002 CHAR(3), '!!                                02897700
*                 '/* RESERVED */';                                     02897800
*/*PL.LPVER04 -------------------------------------------------------*/ 02897900
*      END;                                                             02898000
*/*PL.LPVER03 -------------------------------------------------------*/ 02898100
*  IF XPLISTVER>=1                                                      02898200
*    THEN                                                               02898300
*      DO;                                                              02898400
*/*PL.L08  XCOMPUSER CHAR(4) INPUT-----------------------------------*/ 02898500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02898600
*                 '_XCOMPUSER CHAR(4), '!!                              02898700
*                 '/* '!!ZXCOMPUSER!!                                   02898800
*                 ' XCOMPUSER */';                                      02898900
*/*PL.LPVER04 -------------------------------------------------------*/ 02899000
*      END;                                                             02899100
*/*PL.LPVER03 -------------------------------------------------------*/ 02899200
*  IF XPLISTVER>=1                                                      02899300
*    THEN                                                               02899400
*      DO;                                                              02899500
*/*PL.L08  XRSV003 CHAR(8) RESERVED----------------------------------*/ 02899600
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02899700
*                 '_XRSV003 CHAR(8), '!!                                02899800
*                 '/* RESERVED */';                                     02899900
*/*PL.LPVER04 -------------------------------------------------------*/ 02900000
*      END;                                                             02900100
*/*PL.LPVER03 -------------------------------------------------------*/ 02900200
*  IF XPLISTVER>=2                                                      02900300
*    THEN                                                               02900400
*      DO;                                                              02900500
*/*PL.L08  XRSV004 CHAR(4) RESERVED----------------------------------*/ 02900600
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02900700
*                 '_XRSV004 CHAR(4), '!!                                02900800
*                 '/* RESERVED */';                                     02900900
*/*PL.LPVER04 -------------------------------------------------------*/ 02901000
*      END;                                                             02901100
*/*PL.LPVER03 -------------------------------------------------------*/ 02901200
*  IF XPLISTVER>=2                                                      02901300
*    THEN                                                               02901400
*      DO;                                                              02901500
*/*PL.L08 ADDR64 XBUFLST64 PTR(64) INPUT ADDR64----------------------*/ 02901600
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02901700
*                 '_XBUFLST64_ADDR64 PTR(64), '!!                       02901800
*                 '/* '!!ZXBUFLST64_ADDR64!!                            02901900
*                 ' XBUFLST64_ADDR64 */';                               02902000
*/*PL.LPVER04 -------------------------------------------------------*/ 02902100
*      END;                                                             02902200
*/*PL.LPVER03 -------------------------------------------------------*/ 02902300
*  IF XPLISTVER>=2                                                      02902400
*    THEN                                                               02902500
*      DO;                                                              02902600
*/*PL.L09 ADDR64 XSRCLST64 PTR(64) INPUT ADDR64----------------------*/ 02902700
*        ZPRMNUM=ZPRMNUM+1;                                             02902800
*        ZPRM(ZPRMNUM)=ZPRMLINE!!' 2 #Z'!!ZNDX!!                        02902900
*            '_XSRCLST64_ADDR64 PTR(64), '!!                            02903000
*            '/* '!!ZXSRCLST64_ADDR64!!                                 02903100
*            ' XSRCLST64_ADDR64 */';                                    02903200
*        ZPRMLINE='';                                                   02903300
*/*PL.LPVER04 -------------------------------------------------------*/ 02903400
*      END;                                                             02903500
*/*PL.LPVER03 -------------------------------------------------------*/ 02903600
*  IF XPLISTVER>=2                                                      02903700
*    THEN                                                               02903800
*      DO;                                                              02903900
*/*PL.L08 ADDR64 XTARLST64 PTR(64) INPUT ADDR64----------------------*/ 02904000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02904100
*                 '_XTARLST64_ADDR64 PTR(64), '!!                       02904200
*                 '/* '!!ZXTARLST64_ADDR64!!                            02904300
*                 ' XTARLST64_ADDR64 */';                               02904400
*/*PL.LPVER04 -------------------------------------------------------*/ 02904500
*      END;                                                             02904600
*/*PL.P01 XPOOLTOKN DEFINED-----------------------------------------*/  02904700
*        ZPRMLINE=ZPRMLINE!!                                            02904800
*            ' 1 * DEF(#Z'!!ZNDX!!                                      02904900
*            '_XPOOLTOKN), '!!                                          02905000
*            '/* DEFINED */';                                           02905100
*/*PL.L08  XRETPTOKN CHAR(10) OUTPUT---------------------------------*/ 02905200
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             02905300
*                 '_XRETPTOKN CHAR(10), '!!                             02905400
*                 '/* '!!ZXRETPTOKN!!                                   02905500
*                 ' XRETPTOKN */';                                      02905600
*/*PL.L11 CONSTANT TO ENSURE THAT LIST FORM IS LONG ENOUGH ----------*/ 02905700
*        ZPRMNUM=ZPRMNUM+1;                                             02905800
*        ZPRM(ZPRMNUM)=ZPRMLINE!!' 2 * CHAR(0);';                       02905900
*        IF XPLISTVER^=0                                                02906000
*           & XMF^='S'                                                  02906100
*          THEN                                                         02906200
*            DO;                                                        02906300
*              ZPRMNUM=ZPRMNUM+1;                                       02906400
*              ZPRM(ZPRMNUM)=                                           02906500
*               'DCL #Z'!!ZNDX!!'_LENCHECK FIXED(32) CONSTANT('!!       02906600
*               'LENGTH('!!XMFCTRL!!')-LENGTH(#Z'!!ZNDX!!'));'!!        02906700
*               '/* CONSTANT TO ENSURE THAT THE LIST FORM'!!            02906800
*               ' IS LONG ENOUGH */';                                   02906900
*            END;                                                       02907000
*/*PL.L12 PARAMETER LIST SIZE----------------------------------------*/ 02907100
*        ZPLLEN=116;                                                    02907200
*        IF XPLISTVER>=1                                                02907300
*          THEN                                                         02907400
*            ZPLLEN=132;                                                02907500
*        IF XPLISTVER>=2                                                02907600
*          THEN                                                         02907700
*            ZPLLEN=160;                                                02907800
*        IF ZPRMMAX<ZPLLEN                                              02907900
*           & XMF^='E'                                                  02908000
*           & XMF^='M'                                                  02908100
*          THEN                                                         02908200
*            ZPRMMAX=ZPLLEN;                                            02908300
*/*PL.L13 -----------------------------------------------------------*/ 02908400
*      END;                                                             02908500
*/*PI.L01 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 02908600
*  IF XMF^='L'                                                          02908700
*    THEN                                                               02908800
*      DO;                                                              02908900
*        ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);               02909000
*/*PI.L03 CLEAR PARAMETER LIST --------------------------------------*/ 02909100
*  IF XMFSCK='COMPLETE'                                                 02909200
*    THEN                                                               02909300
*            ANS('#Z'!!ZNDX!!'=''''B;'!!                                02909400
*                '/* CLEAR PARAMETER AREA */')                          02909500
*                NORESCAN COL(MACLMAR);                                 02909600
*/*PI.L05B XVERSION FIXED(8)-----------------------------------------*/ 02909700
*        IF (XPLISTVER^=0 &                                             02909800
*            XMFSCK='COMPLETE')!                                        02909900
*           (PLISTVER^='' &                                             02910000
*            XMFSCK^='COMPLETE')                                        02910100
*          THEN                                                         02910200
*            ANS('#Z'!!ZNDX!!'_XVERSION='!!CHAR(XPLISTVER)!!'; '!!      02910300
*                '/* XVERSION FIXED(8) */')                             02910400
*                NORESCAN COL(MACLMAR);                                 02910500
*/*PI.L06 XBUFSOURC FIXED(8)-----------------------------------------*/ 02910600
*        ZW='';                                                         02910700
*        ZMS='';                                                        02910800
*/*PI.L12 XBUFSOURC FIXED(8)-----------------------------------------*/ 02910900
*        IF XBUFSOURC='ECSA'                                            02911000
*          THEN                                                         02911100
*            ZW='128';                                                  02911200
*/*PI.L12 XBUFSOURC FIXED(8)-----------------------------------------*/ 02911300
*        IF XBUFSOURC='DSPACE'                                          02911400
*          THEN                                                         02911500
*            ZW='64';                                                   02911600
*/*PI.L12 XBUFSOURC FIXED(8)-----------------------------------------*/ 02911700
*        IF XBUFSOURC='HVCOMM'                                          02911800
*          THEN                                                         02911900
*            ZW='8';                                                    02912000
*/*PI.L13 XBUFSOURC FIXED(8)-----------------------------------------*/ 02912100
*        IF ZW^=''                                                      02912200
*          & (ZW^='0' ! XMFSCK^='COMPLETE')                             02912300
*          THEN                                                         02912400
*            ANS('#Z'!!ZNDX!!'_XBUFSOURC='!!                            02912500
*                ZW!!'; '!!                                             02912600
*                '/* XBUFSOURC FIXED(8) */')                            02912700
*                NORESCAN COL(MACLMAR);                                 02912800
*/*PI.L06 XBUFTYPE FIXED(8)------------------------------------------*/ 02912900
*        ZW='';                                                         02913000
*        ZMS='';                                                        02913100
*/*PI.L12 XBUFTYPE FIXED(8)------------------------------------------*/ 02913200
*        IF XBUFTYPE='SAME'                                             02913300
*          THEN                                                         02913400
*            ZW='0';                                                    02913500
*/*PI.L12 XBUFTYPE FIXED(8)------------------------------------------*/ 02913600
*        IF XBUFTYPE='FIXED'                                            02913700
*          THEN                                                         02913800
*            ZW='128';                                                  02913900
*/*PI.L12 XBUFTYPE FIXED(8)------------------------------------------*/ 02914000
*        IF XBUFTYPE='PAGEABLE'                                         02914100
*          THEN                                                         02914200
*            ZW='64';                                                   02914300
*/*PI.L12 XBUFTYPE FIXED(8)------------------------------------------*/ 02914400
*        IF XBUFTYPE='PAGEELIG'                                         02914500
*          THEN                                                         02914600
*            ZW='32';                                                   02914700
*/*PI.L13 XBUFTYPE FIXED(8)------------------------------------------*/ 02914800
*        IF ZW^=''                                                      02914900
*          & (ZW^='0' ! XMFSCK^='COMPLETE')                             02915000
*          THEN                                                         02915100
*            ANS('#Z'!!ZNDX!!'_XBUFTYPE='!!                             02915200
*                ZW!!'; '!!                                             02915300
*                '/* XBUFTYPE FIXED(8) */')                             02915400
*                NORESCAN COL(MACLMAR);                                 02915500
*/*PI.L06 XCLEAR FIXED(8)--------------------------------------------*/ 02915600
*        ZW='';                                                         02915700
*        ZMS='';                                                        02915800
*/*PI.L12 XCLEAR FIXED(8)--------------------------------------------*/ 02915900
*        IF XCLEAR='NO'                                                 02916000
*          THEN                                                         02916100
*            ZW='0';                                                    02916200
*/*PI.L12 XCLEAR FIXED(8)--------------------------------------------*/ 02916300
*        IF XCLEAR='YES'                                                02916400
*          THEN                                                         02916500
*            ZW='128';                                                  02916600
*/*PI.L13 XCLEAR FIXED(8)--------------------------------------------*/ 02916700
*        IF ZW^=''                                                      02916800
*          & (ZW^='0' ! XMFSCK^='COMPLETE')                             02916900
*          THEN                                                         02917000
*            ANS('#Z'!!ZNDX!!'_XCLEAR='!!                               02917100
*                ZW!!'; '!!                                             02917200
*                '/* XCLEAR FIXED(8) */')                               02917300
*                NORESCAN COL(MACLMAR);                                 02917400
*/*PI.L06 XWAIT FIXED(8)---------------------------------------------*/ 02917500
*        ZW='';                                                         02917600
*        ZMS='';                                                        02917700
*/*PI.L12 XWAIT FIXED(8)---------------------------------------------*/ 02917800
*        IF XWAIT='NO'                                                  02917900
*          THEN                                                         02918000
*            ZW='0';                                                    02918100
*/*PI.L12 XWAIT FIXED(8)---------------------------------------------*/ 02918200
*        IF XWAIT='YES'                                                 02918300
*          THEN                                                         02918400
*            ZW='128';                                                  02918500
*/*PI.L12 XWAIT FIXED(8)---------------------------------------------*/ 02918600
*        IF XWAIT='EXPAND'                                              02918700
*          THEN                                                         02918800
*            ZW='64';                                                   02918900
*/*PI.L13 XWAIT FIXED(8)---------------------------------------------*/ 02919000
*        IF ZW^=''                                                      02919100
*          & (ZW^='0' ! XMFSCK^='COMPLETE')                             02919200
*          THEN                                                         02919300
*            ANS('#Z'!!ZNDX!!'_XWAIT='!!                                02919400
*                ZW!!'; '!!                                             02919500
*                '/* XWAIT FIXED(8) */')                                02919600
*                NORESCAN COL(MACLMAR);                                 02919700
*/*PI.L06 XFREETO FIXED(8)-------------------------------------------*/ 02919800
*        ZW='';                                                         02919900
*        ZMS='';                                                        02920000
*/*PI.L12 XFREETO FIXED(8)-------------------------------------------*/ 02920100
*        IF XFREETO='USER'                                              02920200
*          THEN                                                         02920300
*            ZW='128';                                                  02920400
*/*PI.L12 XFREETO FIXED(8)-------------------------------------------*/ 02920500
*        IF XFREETO='CSM'                                               02920600
*          THEN                                                         02920700
*            ZW='64';                                                   02920800
*/*PI.L13 XFREETO FIXED(8)-------------------------------------------*/ 02920900
*        IF ZW^=''                                                      02921000
*          & (ZW^='0' ! XMFSCK^='COMPLETE')                             02921100
*          THEN                                                         02921200
*            ANS('#Z'!!ZNDX!!'_XFREETO='!!                              02921300
*                ZW!!'; '!!                                             02921400
*                '/* XFREETO FIXED(8) */')                              02921500
*                NORESCAN COL(MACLMAR);                                 02921600
*/*PI.L14 CHECK FOR * AS THE FIXED(16) ARGUMENT----------------------*/ 02921700
*        IF TRANSLATE(XOWNERID)                                         02921800
*                    = '0'                                              02921900
*           & XMFSCK='COMPLETE'                                         02922000
*          THEN                                                         02922100
*            ZXOWNERID='';                   /* RESET INPUT/INOUT */    02922200
*/*PI.L17 XOWNERID FIXED(16)-----------------------------------------*/ 02922300
*        IF ZXOWNERID='INPUT' !                                         02922400
*           ZXOWNERID='INOUT'                                           02922500
*          THEN                                                         02922600
*            DO;                                                        02922700
*            IF (TRANSLATE(XOWNERID)                                    02922800
*                     ='0' & XMFSCK^='COMPLETE')                        02922900
*              THEN                                                     02923000
*                ANS('#Z'!!ZNDX!!'_XOWNERID=0;'!!                       02923100
*                    '/* XOWNERID FIXED(16) */')                        02923200
*                    NORESCAN COL(MACLMAR);                             02923300
*            IF TRANSLATE(XOWNERID)                                     02923400
*                    ^='0'                                              02923500
*              THEN                                                     02923600
*                ANS('#Z'!!ZNDX!!'_XOWNERID='!!                         02923700
*                    XOWNERID!!';'!!                                    02923800
*                    '/* XOWNERID FIXED(16) */')                        02923900
*                    NORESCAN COL(MACLMAR);                             02924000
*            END;                                                       02924100
*/*PI.L06 XREQUEST FIXED(31)-----------------------------------------*/ 02924200
*        ZW='';                                                         02924300
*        ZMS='';                                                        02924400
*/*PI.L12 XREQUEST FIXED(31)-----------------------------------------*/ 02924500
*        IF XREQUEST='CREATE_POOL'                                      02924600
*          THEN                                                         02924700
*            ZW='0';                                                    02924800
*/*PI.L12 XREQUEST FIXED(31)-----------------------------------------*/ 02924900
*        IF XREQUEST='DELETE_POOL'                                      02925000
*          THEN                                                         02925100
*            ZW='1';                                                    02925200
*/*PI.L12 XREQUEST FIXED(31)-----------------------------------------*/ 02925300
*        IF XREQUEST='GET_BUFFER'                                       02925400
*          THEN                                                         02925500
*            ZW='2';                                                    02925600
*/*PI.L12 XREQUEST FIXED(31)-----------------------------------------*/ 02925700
*        IF XREQUEST='FREE_BUFFER'                                      02925800
*          THEN                                                         02925900
*            ZW='3';                                                    02926000
*/*PI.L12 XREQUEST FIXED(31)-----------------------------------------*/ 02926100
*        IF XREQUEST='ASSIGN_BUFFER'                                    02926200
*          THEN                                                         02926300
*            ZW='4';                                                    02926400
*/*PI.L12 XREQUEST FIXED(31)-----------------------------------------*/ 02926500
*        IF XREQUEST='DUMP_INFO'                                        02926600
*          THEN                                                         02926700
*            ZW='5';                                                    02926800
*/*PI.L12 XREQUEST FIXED(31)-----------------------------------------*/ 02926900
*        IF XREQUEST='FIX_BUFFER'                                       02927000
*          THEN                                                         02927100
*            ZW='6';                                                    02927200
*/*PI.L12 XREQUEST FIXED(31)-----------------------------------------*/ 02927300
*        IF XREQUEST='PAGE_BUFFER'                                      02927400
*          THEN                                                         02927500
*            ZW='7';                                                    02927600
*/*PI.L12 XREQUEST FIXED(31)-----------------------------------------*/ 02927700
*        IF XREQUEST='RESOURCE_STATS'                                   02927800
*          THEN                                                         02927900
*            ZW='8';                                                    02928000
*/*PI.L12 XREQUEST FIXED(31)-----------------------------------------*/ 02928100
*        IF XREQUEST='COPY_DATA'                                        02928200
*          THEN                                                         02928300
*            ZW='9';                                                    02928400
*/*PI.L12 XREQUEST FIXED(31)-----------------------------------------*/ 02928500
*        IF XREQUEST='CHANGE_OWNER'                                     02928600
*          THEN                                                         02928700
*            ZW='100';                                                  02928800
*/*PI.L13 XREQUEST FIXED(31)-----------------------------------------*/ 02928900
*        IF ZW^=''                                                      02929000
*          & (ZW^='0' ! XMFSCK^='COMPLETE')                             02929100
*          THEN                                                         02929200
*            ANS('#Z'!!ZNDX!!'_XREQUEST='!!                             02929300
*                ZW!!'; '!!                                             02929400
*                '/* XREQUEST FIXED(31) */')                            02929500
*                NORESCAN COL(MACLMAR);                                 02929600
*/*PI.L17 XBUFSIZE FIXED(31)-----------------------------------------*/ 02929700
*        IF ZXBUFSIZE='INPUT' !                                         02929800
*           ZXBUFSIZE='INOUT'                                           02929900
*          THEN                                                         02930000
*            ANS('#Z'!!ZNDX!!'_XBUFSIZE='!!                             02930100
*                XBUFSIZE!!';'!!                                        02930200
*                '/* XBUFSIZE FIXED(31) */')                            02930300
*                NORESCAN COL(MACLMAR);                                 02930400
*/*PI.L17 XINITBUF FIXED(31)-----------------------------------------*/ 02930500
*        IF ZXINITBUF='INPUT' !                                         02930600
*           ZXINITBUF='INOUT'                                           02930700
*          THEN                                                         02930800
*            ANS('#Z'!!ZNDX!!'_XINITBUF='!!                             02930900
*                XINITBUF!!';'!!                                        02931000
*                '/* XINITBUF FIXED(31) */')                            02931100
*                NORESCAN COL(MACLMAR);                                 02931200
*/*PI.L17 XMINFREE FIXED(31)-----------------------------------------*/ 02931300
*        IF ZXMINFREE='INPUT' !                                         02931400
*           ZXMINFREE='INOUT'                                           02931500
*          THEN                                                         02931600
*            ANS('#Z'!!ZNDX!!'_XMINFREE='!!                             02931700
*                XMINFREE!!';'!!                                        02931800
*                '/* XMINFREE FIXED(31) */')                            02931900
*                NORESCAN COL(MACLMAR);                                 02932000
*/*PI.L17 XEXPBUF FIXED(31)------------------------------------------*/ 02932100
*        IF ZXEXPBUF='INPUT' !                                          02932200
*           ZXEXPBUF='INOUT'                                            02932300
*          THEN                                                         02932400
*            ANS('#Z'!!ZNDX!!'_XEXPBUF='!!                              02932500
*                XEXPBUF!!';'!!                                         02932600
*                '/* XEXPBUF FIXED(31) */')                             02932700
*                NORESCAN COL(MACLMAR);                                 02932800
*/*PI.L17 XBUFNUM FIXED(31)------------------------------------------*/ 02932900
*        IF ZXBUFNUM='INPUT' !                                          02933000
*           ZXBUFNUM='INOUT'                                            02933100
*          THEN                                                         02933200
*            ANS('#Z'!!ZNDX!!'_XBUFNUM='!!                              02933300
*                XBUFNUM!!';'!!                                         02933400
*                '/* XBUFNUM FIXED(31) */')                             02933500
*                NORESCAN COL(MACLMAR);                                 02933600
*/*PI.L23 XBUFLIST NAME----------------------------------------------*/ 02933700
*        IF ZXBUFLIST^=''                                               02933800
*          THEN                                                         02933900
*            ANS('#Z'!!ZNDX!!'_XBUFLIST='!!                             02934000
*                'ADDR('!!XBUFLIST!!');'!!                              02934100
*                '/* XBUFLIST NAME */')                                 02934200
*                NORESCAN COL(MACLMAR);                                 02934300
*/*PI.L14 CHECK FOR * AS THE PTR(31) ARGUMENT------------------------*/ 02934400
*        IF TRANSLATE(XTASKID)                                          02934500
*                    = '0'                                              02934600
*           & XMFSCK='COMPLETE'                                         02934700
*          THEN                                                         02934800
*            ZXTASKID='';                    /* RESET INPUT/INOUT */    02934900
*/*PI.L17 XTASKID PTR(31)--------------------------------------------*/ 02935000
*        IF ZXTASKID='INPUT' !                                          02935100
*           ZXTASKID='INOUT'                                            02935200
*          THEN                                                         02935300
*            DO;                                                        02935400
*            IF (TRANSLATE(XTASKID)                                     02935500
*                     ='0' & XMFSCK^='COMPLETE')                        02935600
*              THEN                                                     02935700
*                ANS('#Z'!!ZNDX!!'_XTASKID=0;'!!                        02935800
*                    '/* XTASKID PTR(31) */')                           02935900
*                    NORESCAN COL(MACLMAR);                             02936000
*            IF TRANSLATE(XTASKID)                                      02936100
*                    ^='0'                                              02936200
*              THEN                                                     02936300
*                ANS('#Z'!!ZNDX!!'_XTASKID='!!                          02936400
*                    XTASKID!!';'!!                                     02936500
*                    '/* XTASKID PTR(31) */')                           02936600
*                    NORESCAN COL(MACLMAR);                             02936700
*            END;                                                       02936800
*/*PI.L14 CHECK FOR * AS THE PTR(31) ARGUMENT------------------------*/ 02936900
*        IF TRANSLATE(XFREERTN)                                         02937000
*                    = 'CSM'                                            02937100
*           & XMFSCK='COMPLETE'                                         02937200
*          THEN                                                         02937300
*            ZXFREERTN='';                   /* RESET INPUT/INOUT */    02937400
*/*PI.L17 XFREERTN PTR(31)-------------------------------------------*/ 02937500
*        IF ZXFREERTN='INPUT' !                                         02937600
*           ZXFREERTN='INOUT'                                           02937700
*          THEN                                                         02937800
*            DO;                                                        02937900
*            IF (TRANSLATE(XFREERTN)                                    02938000
*                     ='CSM' & XMFSCK^='COMPLETE')                      02938100
*              THEN                                                     02938200
*                ANS('#Z'!!ZNDX!!'_XFREERTN=0;'!!                       02938300
*                    '/* XFREERTN PTR(31) */')                          02938400
*                    NORESCAN COL(MACLMAR);                             02938500
*            IF TRANSLATE(XFREERTN)                                     02938600
*                    ^='CSM'                                            02938700
*              THEN                                                     02938800
*                ANS('#Z'!!ZNDX!!'_XFREERTN='!!                         02938900
*                    XFREERTN!!';'!!                                    02939000
*                    '/* XFREERTN PTR(31) */')                          02939100
*                    NORESCAN COL(MACLMAR);                             02939200
*            END;                                                       02939300
*/*PI.L14 CHECK FOR * AS THE FIXED(31) ARGUMENT----------------------*/ 02939400
*        IF TRANSLATE(XGAP)                                             02939500
*                    = '0'                                              02939600
*           & XMFSCK='COMPLETE'                                         02939700
*          THEN                                                         02939800
*            ZXGAP='';                       /* RESET INPUT/INOUT */    02939900
*/*PI.L17 XGAP FIXED(31)---------------------------------------------*/ 02940000
*        IF ZXGAP='INPUT' !                                             02940100
*           ZXGAP='INOUT'                                               02940200
*          THEN                                                         02940300
*            DO;                                                        02940400
*            IF (TRANSLATE(XGAP)                                        02940500
*                     ='0' & XMFSCK^='COMPLETE')                        02940600
*              THEN                                                     02940700
*                ANS('#Z'!!ZNDX!!'_XGAP=0;'!!                           02940800
*                    '/* XGAP FIXED(31) */')                            02940900
*                    NORESCAN COL(MACLMAR);                             02941000
*            IF TRANSLATE(XGAP)                                         02941100
*                    ^='0'                                              02941200
*              THEN                                                     02941300
*                ANS('#Z'!!ZNDX!!'_XGAP='!!                             02941400
*                    XGAP!!';'!!                                        02941500
*                    '/* XGAP FIXED(31) */')                            02941600
*                    NORESCAN COL(MACLMAR);                             02941700
*            END;                                                       02941800
*/*PI.L14 CHECK FOR * AS THE FIXED(31) ARGUMENT----------------------*/ 02941900
*        IF TRANSLATE(XSRCGAP)                                          02942000
*                    = '0'                                              02942100
*           & XMFSCK='COMPLETE'                                         02942200
*          THEN                                                         02942300
*            ZXSRCGAP='';                    /* RESET INPUT/INOUT */    02942400
*/*PI.L17 XSRCGAP FIXED(31)------------------------------------------*/ 02942500
*        IF ZXSRCGAP='INPUT' !                                          02942600
*           ZXSRCGAP='INOUT'                                            02942700
*          THEN                                                         02942800
*            DO;                                                        02942900
*            IF (TRANSLATE(XSRCGAP)                                     02943000
*                     ='0' & XMFSCK^='COMPLETE')                        02943100
*              THEN                                                     02943200
*                ANS('#Z'!!ZNDX!!'_XSRCGAP=0;'!!                        02943300
*                    '/* XSRCGAP FIXED(31) */')                         02943400
*                    NORESCAN COL(MACLMAR);                             02943500
*            IF TRANSLATE(XSRCGAP)                                      02943600
*                    ^='0'                                              02943700
*              THEN                                                     02943800
*                ANS('#Z'!!ZNDX!!'_XSRCGAP='!!                          02943900
*                    XSRCGAP!!';'!!                                     02944000
*                    '/* XSRCGAP FIXED(31) */')                         02944100
*                    NORESCAN COL(MACLMAR);                             02944200
*            END;                                                       02944300
*/*PI.L14 CHECK FOR * AS THE FIXED(31) ARGUMENT----------------------*/ 02944400
*        IF TRANSLATE(XTARGGAP)                                         02944500
*                    = '0'                                              02944600
*           & XMFSCK='COMPLETE'                                         02944700
*          THEN                                                         02944800
*            ZXTARGGAP='';                   /* RESET INPUT/INOUT */    02944900
*/*PI.L17 XTARGGAP FIXED(31)-----------------------------------------*/ 02945000
*        IF ZXTARGGAP='INPUT' !                                         02945100
*           ZXTARGGAP='INOUT'                                           02945200
*          THEN                                                         02945300
*            DO;                                                        02945400
*            IF (TRANSLATE(XTARGGAP)                                    02945500
*                     ='0' & XMFSCK^='COMPLETE')                        02945600
*              THEN                                                     02945700
*                ANS('#Z'!!ZNDX!!'_XTARGGAP=0;'!!                       02945800
*                    '/* XTARGGAP FIXED(31) */')                        02945900
*                    NORESCAN COL(MACLMAR);                             02946000
*            IF TRANSLATE(XTARGGAP)                                     02946100
*                    ^='0'                                              02946200
*              THEN                                                     02946300
*                ANS('#Z'!!ZNDX!!'_XTARGGAP='!!                         02946400
*                    XTARGGAP!!';'!!                                    02946500
*                    '/* XTARGGAP FIXED(31) */')                        02946600
*                    NORESCAN COL(MACLMAR);                             02946700
*            END;                                                       02946800
*/*PI.L17 XSRCNUM FIXED(31)------------------------------------------*/ 02946900
*        IF ZXSRCNUM='INPUT' !                                          02947000
*           ZXSRCNUM='INOUT'                                            02947100
*          THEN                                                         02947200
*            ANS('#Z'!!ZNDX!!'_XSRCNUM='!!                              02947300
*                XSRCNUM!!';'!!                                         02947400
*                '/* XSRCNUM FIXED(31) */')                             02947500
*                NORESCAN COL(MACLMAR);                                 02947600
*/*PI.L17 XTARGNUM FIXED(31)-----------------------------------------*/ 02947700
*        IF ZXTARGNUM='INPUT' !                                         02947800
*           ZXTARGNUM='INOUT'                                           02947900
*          THEN                                                         02948000
*            ANS('#Z'!!ZNDX!!'_XTARGNUM='!!                             02948100
*                XTARGNUM!!';'!!                                        02948200
*                '/* XTARGNUM FIXED(31) */')                            02948300
*                NORESCAN COL(MACLMAR);                                 02948400
*/*PI.L23 XSRCLIST NAME----------------------------------------------*/ 02948500
*        IF ZXSRCLIST^=''                                               02948600
*          THEN                                                         02948700
*            ANS('#Z'!!ZNDX!!'_XSRCLIST='!!                             02948800
*                'ADDR('!!XSRCLIST!!');'!!                              02948900
*                '/* XSRCLIST NAME */')                                 02949000
*                NORESCAN COL(MACLMAR);                                 02949100
*/*PI.L23 XTARGLIST NAME---------------------------------------------*/ 02949200
*        IF ZXTARGLIST^=''                                              02949300
*          THEN                                                         02949400
*            ANS('#Z'!!ZNDX!!'_XTARGLIST='!!                            02949500
*                'ADDR('!!XTARGLIST!!');'!!                             02949600
*                '/* XTARGLIST NAME */')                                02949700
*                NORESCAN COL(MACLMAR);                                 02949800
*/*PI.L14 CHECK FOR * AS THE FIXED(32) ARGUMENT----------------------*/ 02949900
*        IF TRANSLATE(XUTILRTN)                                         02950000
*                    = '0'                                              02950100
*           & XMFSCK='COMPLETE'                                         02950200
*          THEN                                                         02950300
*            ZXUTILRTN='';                   /* RESET INPUT/INOUT */    02950400
*/*PI.L17 XUTILRTN FIXED(32)-----------------------------------------*/ 02950500
*        IF ZXUTILRTN='INPUT' !                                         02950600
*           ZXUTILRTN='INOUT'                                           02950700
*          THEN                                                         02950800
*            DO;                                                        02950900
*            IF (TRANSLATE(XUTILRTN)                                    02951000
*                     ='0' & XMFSCK^='COMPLETE')                        02951100
*              THEN                                                     02951200
*                ANS('#Z'!!ZNDX!!'_XUTILRTN=0;'!!                       02951300
*                    '/* XUTILRTN FIXED(32) */')                        02951400
*                    NORESCAN COL(MACLMAR);                             02951500
*            IF TRANSLATE(XUTILRTN)                                     02951600
*                    ^='0'                                              02951700
*              THEN                                                     02951800
*                ANS('#Z'!!ZNDX!!'_XUTILRTN='!!                         02951900
*                    XUTILRTN!!';'!!                                    02952000
*                    '/* XUTILRTN FIXED(32) */')                        02952100
*                    NORESCAN COL(MACLMAR);                             02952200
*            END;                                                       02952300
*/*PI.L14 CHECK FOR * AS THE CHAR(4) ARGUMENT------------------------*/ 02952400
*        IF TRANSLATE(XTHREAD)                                          02952500
*                    = '0'                                              02952600
*           & XMFSCK='COMPLETE'                                         02952700
*          THEN                                                         02952800
*            ZXTHREAD='';                    /* RESET INPUT/INOUT */    02952900
*/*PI.L21 XTHREAD NAME CHAR(4)---------------------------------------*/ 02953000
*        IF ZXTHREAD='INPUT' !                                          02953100
*           ZXTHREAD='INOUT'                                            02953200
*          THEN                                                         02953300
*            DO;                                                        02953400
*            IF (TRANSLATE(XTHREAD)                                     02953500
*                     ='0' & XMFSCK^='COMPLETE')                        02953600
*              THEN                                                     02953700
*                ANS('#Z'!!ZNDX!!'_XTHREAD=''''B;'!!                    02953800
*                    '/* XTHREAD CHAR(4) */')                           02953900
*                    NORESCAN COL(MACLMAR);                             02954000
*            IF TRANSLATE(XTHREAD)                                      02954100
*                    ^='0'                                              02954200
*              THEN                                                     02954300
*                ANS('#Z'!!ZNDX!!'_XTHREAD='!!                          02954400
*                    XTHREAD!!';'!!                                     02954500
*                    '/* XTHREAD CHAR(4) */')                           02954600
*                    NORESCAN COL(MACLMAR);                             02954700
*            END;                                                       02954800
*/*PI.L21 XPADCHAR NAME CHAR(1)--------------------------------------*/ 02954900
*        IF ZXPADCHAR='INPUT' !                                         02955000
*           ZXPADCHAR='INOUT'                                           02955100
*          THEN                                                         02955200
*            ANS('#Z'!!ZNDX!!'_XPADCHAR='!!                             02955300
*                XPADCHAR!!';'!!                                        02955400
*                '/* XPADCHAR CHAR(1) */')                              02955500
*                NORESCAN COL(MACLMAR);                                 02955600
*/*PI.L06 XPAD FIXED(8)----------------------------------------------*/ 02955700
*        ZW='';                                                         02955800
*        ZMS='';                                                        02955900
*/*PI.L12 XPAD FIXED(8)----------------------------------------------*/ 02956000
*        IF XPAD='NO'                                                   02956100
*          THEN                                                         02956200
*            ZW='0';                                                    02956300
*/*PI.L12 XPAD FIXED(8)----------------------------------------------*/ 02956400
*        IF XPAD='YES'                                                  02956500
*          THEN                                                         02956600
*            ZW='128';                                                  02956700
*/*PI.L13 XPAD FIXED(8)----------------------------------------------*/ 02956800
*        IF ZW^=''                                                      02956900
*          & (ZW^='0' ! XMFSCK^='COMPLETE')                             02957000
*          THEN                                                         02957100
*            ANS('#Z'!!ZNDX!!'_XPAD='!!                                 02957200
*                ZW!!'; '!!                                             02957300
*                '/* XPAD FIXED(8) */')                                 02957400
*                NORESCAN COL(MACLMAR);                                 02957500
*/*PI.L21 XPOOLTOKN NAME CHAR(10)------------------------------------*/ 02957600
*        IF ZXPOOLTOKN='INPUT' !                                        02957700
*           ZXPOOLTOKN='INOUT'                                          02957800
*          THEN                                                         02957900
*            ANS('#Z'!!ZNDX!!'_XPOOLTOKN='!!                            02958000
*                XPOOLTOKN!!';'!!                                       02958100
*                '/* XPOOLTOKN CHAR(10) */')                            02958200
*                NORESCAN COL(MACLMAR);                                 02958300
*/*PI.L06 XSKIPBUF FIXED(8)------------------------------------------*/ 02958400
*        ZW='';                                                         02958500
*        ZMS='';                                                        02958600
*/*PI.L12 XSKIPBUF FIXED(8)------------------------------------------*/ 02958700
*        IF XSKIPBUF='NO'                                               02958800
*          THEN                                                         02958900
*            ZW='0';                                                    02959000
*/*PI.L12 XSKIPBUF FIXED(8)------------------------------------------*/ 02959100
*        IF XSKIPBUF='YES'                                              02959200
*          THEN                                                         02959300
*            ZW='128';                                                  02959400
*/*PI.L13 XSKIPBUF FIXED(8)------------------------------------------*/ 02959500
*        IF ZW^=''                                                      02959600
*          & (ZW^='0' ! XMFSCK^='COMPLETE')                             02959700
*          THEN                                                         02959800
*            ANS('#Z'!!ZNDX!!'_XSKIPBUF='!!                             02959900
*                ZW!!'; '!!                                             02960000
*                '/* XSKIPBUF FIXED(8) */')                             02960100
*                NORESCAN COL(MACLMAR);                                 02960200
*/*PI.L06 XCSMUSER FIXED(8)------------------------------------------*/ 02960300
*        ZW='';                                                         02960400
*        ZMS='';                                                        02960500
*/*PI.L12 XCSMUSER FIXED(8)------------------------------------------*/ 02960600
*        IF XCSMUSER='NO'                                               02960700
*          THEN                                                         02960800
*            ZW='0';                                                    02960900
*/*PI.L12 XCSMUSER FIXED(8)------------------------------------------*/ 02961000
*        IF XCSMUSER='YES'                                              02961100
*          THEN                                                         02961200
*            ZW='128';                                                  02961300
*/*PI.L13 XCSMUSER FIXED(8)------------------------------------------*/ 02961400
*        IF ZW^=''                                                      02961500
*          & (ZW^='0' ! XMFSCK^='COMPLETE')                             02961600
*          THEN                                                         02961700
*            ANS('#Z'!!ZNDX!!'_XCSMUSER='!!                             02961800
*                ZW!!'; '!!                                             02961900
*                '/* XCSMUSER FIXED(8) */')                             02962000
*                NORESCAN COL(MACLMAR);                                 02962100
*/*PI.L06 XFLAGS1 BIT(8)---------------------------------------------*/ 02962200
*        ZW='';                                                         02962300
*        ZMS='';                                                        02962400
*/*PI.L07 XFLAGS1 BIT(8) 1XXXXXXX------------------------------------*/ 02962500
*        IF XBACK='64'                                                  02962600
*          THEN                                                         02962700
*            DO;                                                        02962800
*              ZW=ZW!!'10000000';                                       02962900
*              ZMS=ZMS!!'11111111';                                     02963000
*            END;                                                       02963100
*          ELSE                                                         02963200
*            DO;                                                        02963300
*              ZW=ZW!!'00000000';                                       02963400
*              IF ZXBACK^=''                                            02963500
*                THEN                                                   02963600
*                  ZMS=ZMS!!'01111111';                                 02963700
*                ELSE                                                   02963800
*                  ZMS=ZMS!!'11111111';                                 02963900
*            END;                                                       02964000
*/*PI.L09 XFLAGS1 BIT(8)---------------------------------------------*/ 02964100
*        IF XMFSCK='NOCHECK'                                            02964200
*          THEN                                                         02964300
*            IF INDEX(ZMS,'0')^=0                                       02964400
*              THEN                                                     02964500
*                ANS('#Z'!!ZNDX!!'_XFLAGS1='!!                          02964600
*                    '#Z'!!ZNDX!!'_XFLAGS1 & '!!                        02964700
*                    ''''!!ZMS!!'''B; '!!                               02964800
*                    '/* BIT(8) */')                                    02964900
*                    NORESCAN COL(MACLMAR);                             02965000
*        IF INDEX(ZW,'1')^=0                                            02965100
*          THEN                                                         02965200
*            ANS('#Z'!!ZNDX!!'_XFLAGS1='!!                              02965300
*                '#Z'!!ZNDX!!'_XFLAGS1 ! '!!                            02965400
*                ''''!!ZW!!'''B; '!!                                    02965500
*                '/* BIT(8) */')                                        02965600
*                NORESCAN COL(MACLMAR);                                 02965700
*/*PI.LPVER01 -------------------------------------------------------*/ 02965800
*  IF XPLISTVER>=1                                                      02965900
*    THEN                                                               02966000
*      DO;                                                              02966100
*/*PI.L14 CHECK FOR * AS THE FIXED(8) ARGUMENT-----------------------*/ 02966200
*        IF TRANSLATE(XCOMPID)                                          02966300
*                    = '0'                                              02966400
*           & XMFSCK='COMPLETE'                                         02966500
*          THEN                                                         02966600
*            ZXCOMPID='';                    /* RESET INPUT/INOUT */    02966700
*/*PI.L17 XCOMPID FIXED(8)-------------------------------------------*/ 02966800
*        IF ZXCOMPID='INPUT' !                                          02966900
*           ZXCOMPID='INOUT'                                            02967000
*          THEN                                                         02967100
*            DO;                                                        02967200
*            IF (TRANSLATE(XCOMPID)                                     02967300
*                     ='0' & XMFSCK^='COMPLETE')                        02967400
*              THEN                                                     02967500
*                ANS('#Z'!!ZNDX!!'_XCOMPID=0;'!!                        02967600
*                    '/* XCOMPID FIXED(8) */')                          02967700
*                    NORESCAN COL(MACLMAR);                             02967800
*            IF TRANSLATE(XCOMPID)                                      02967900
*                    ^='0'                                              02968000
*              THEN                                                     02968100
*                ANS('#Z'!!ZNDX!!'_XCOMPID='!!                          02968200
*                    XCOMPID!!';'!!                                     02968300
*                    '/* XCOMPID FIXED(8) */')                          02968400
*                    NORESCAN COL(MACLMAR);                             02968500
*            END;                                                       02968600
*/*PI.LPVER02 -------------------------------------------------------*/ 02968700
*      END;                                                             02968800
*/*PI.LPVER01 -------------------------------------------------------*/ 02968900
*  IF XPLISTVER>=1                                                      02969000
*    THEN                                                               02969100
*      DO;                                                              02969200
*/*PI.L14 CHECK FOR * AS THE CHAR(4) ARGUMENT------------------------*/ 02969300
*        IF TRANSLATE(XCOMPUSER)                                        02969400
*                    = '0'                                              02969500
*           & XMFSCK='COMPLETE'                                         02969600
*          THEN                                                         02969700
*            ZXCOMPUSER='';                  /* RESET INPUT/INOUT */    02969800
*/*PI.L21 XCOMPUSER NAME CHAR(4)-------------------------------------*/ 02969900
*        IF ZXCOMPUSER='INPUT' !                                        02970000
*           ZXCOMPUSER='INOUT'                                          02970100
*          THEN                                                         02970200
*            DO;                                                        02970300
*            IF (TRANSLATE(XCOMPUSER)                                   02970400
*                     ='0' & XMFSCK^='COMPLETE')                        02970500
*              THEN                                                     02970600
*                ANS('#Z'!!ZNDX!!'_XCOMPUSER=''''B;'!!                  02970700
*                    '/* XCOMPUSER CHAR(4) */')                         02970800
*                    NORESCAN COL(MACLMAR);                             02970900
*            IF TRANSLATE(XCOMPUSER)                                    02971000
*                    ^='0'                                              02971100
*              THEN                                                     02971200
*                ANS('#Z'!!ZNDX!!'_XCOMPUSER='!!                        02971300
*                    XCOMPUSER!!';'!!                                   02971400
*                    '/* XCOMPUSER CHAR(4) */')                         02971500
*                    NORESCAN COL(MACLMAR);                             02971600
*            END;                                                       02971700
*/*PI.LPVER02 -------------------------------------------------------*/ 02971800
*      END;                                                             02971900
*/*PI.LPVER01 -------------------------------------------------------*/ 02972000
*  IF XPLISTVER>=2                                                      02972100
*    THEN                                                               02972200
*      DO;                                                              02972300
*/*PI.L15 ADDR64(XBUFLST64) CHAR(256)--------------------------------*/ 02972400
*        IF ZXBUFLST64^=''                                              02972500
*          THEN                                                         02972600
*            ANS('#Z'!!ZNDX!!'_XBUFLST64_ADDR64='!!                     02972700
*                'ADDR('!!XBUFLST64!!');'!!                             02972800
*                '/* ADDR64 XBUFLST64 CHAR(256) */')                    02972900
*                NORESCAN COL(MACLMAR);                                 02973000
*/*PI.LPVER02 -------------------------------------------------------*/ 02973100
*      END;                                                             02973200
*/*PI.LPVER01 -------------------------------------------------------*/ 02973300
*  IF XPLISTVER>=2                                                      02973400
*    THEN                                                               02973500
*      DO;                                                              02973600
*/*PI.L15 ADDR64(XSRCLST64) CHAR(256)--------------------------------*/ 02973700
*        IF ZXSRCLST64^=''                                              02973800
*          THEN                                                         02973900
*            ANS('#Z'!!ZNDX!!'_XSRCLST64_ADDR64='!!                     02974000
*                'ADDR('!!XSRCLST64!!');'!!                             02974100
*                '/* ADDR64 XSRCLST64 CHAR(256) */')                    02974200
*                NORESCAN COL(MACLMAR);                                 02974300
*/*PI.LPVER02 -------------------------------------------------------*/ 02974400
*      END;                                                             02974500
*/*PI.LPVER01 -------------------------------------------------------*/ 02974600
*  IF XPLISTVER>=2                                                      02974700
*    THEN                                                               02974800
*      DO;                                                              02974900
*/*PI.L15 ADDR64(XTARLST64) CHAR(256)--------------------------------*/ 02975000
*        IF ZXTARLST64^=''                                              02975100
*          THEN                                                         02975200
*            ANS('#Z'!!ZNDX!!'_XTARLST64_ADDR64='!!                     02975300
*                'ADDR('!!XTARLST64!!');'!!                             02975400
*                '/* ADDR64 XTARLST64 CHAR(256) */')                    02975500
*                NORESCAN COL(MACLMAR);                                 02975600
*/*PI.LPVER02 -------------------------------------------------------*/ 02975700
*      END;                                                             02975800
*/*PI.L29 NOT MF=M MACRO FORM----------------------------------------*/ 02975900
*        IF XMF^='M'                                                    02976000
*          THEN                                                         02976100
*            DO;                                                        02976200
*/*PI.L31 INVOKE FUNCTION--------------------------------------------*/ 02976300
*              IF NUMBER(RSNCODE)>0                                     02976400
*                THEN                                                   02976500
*                  ANS('RFY GPR00F RSTD;') NORESCAN COL(MACLMAR);       02976600
*              IF NUMBER(RETCODE)>0                                     02976700
*                THEN                                                   02976800
*                  ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);       02976900
*              ANS('RFY GPR01P RSTD;') NORESCAN COL(MACLMAR);           02977000
*                    IF SYSAM64 = 'YES' THEN                            02977100
*              ANS('G64R01P=ADDR(#Z'!!ZNDX!!');'!!                      02977200
*                  '/* PARAMETER LIST */')                              02977300
*                  NORESCAN COL(MACLMAR);                               02977400
*                    ELSE                                               02977500
*              ANS('GPR01P=ADDR(#Z'!!ZNDX!!');'!!                       02977600
*                  '/* PARAMETER LIST */')                              02977700
*                  NORESCAN COL(MACLMAR);                               02977800
*              IF SYSASCE^='P'                                          02977900
*                THEN                                                   02978000
*                  ANS('SAR(GPR01P,ALET(#Z'!!ZNDX!!'));'!!              02978100
*                      '/* PARAMETER LIST AR */')                       02978200
*                      NORESCAN COL(MACLMAR);                           02978300
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  02978400
*ANS('RFY (GPR00F,GPR15F) RSTD;') NORESCAN COL(MACLMAR+2);              02978500
*ANS('GEN CODE SETS(GPR00F,GPR15F) REFS(GPR01P);')                      02978600
*  NORESCAN COL(MACLMAR+2);                                             02978700
*IF SYSAM64 = 'YES' THEN                                                02978800
*  GOTO PSWMOD64;                   /* Process 64-bit request    @31A*/ 02978900
*ANS('             L    15,16(0,0)     CVT address')                    02979000
*  NORESCAN COL(MACGLMAR);                                              02979100
*ANS('             L    15,140(,15)    ECVT address')                   02979200
*  NORESCAN COL(MACGLMAR);                                              02979300
*ANS('             ICM  15,15,200(15)  CSM structure address')          02979400
*  NORESCAN COL(MACGLMAR);                                              02979500
*ANS('             BZ   NSRV'!!MACINDEX!!                               02979600
*    '       CSM structure not anchored')                               02979700
*  NORESCAN COL(MACGLMAR);                                              02979800
*IF XREQUEST = 'CHANGE_OWNER' THEN DO;                                  02979900
*ANS('             L    15,12(,15)'!!                                   02980000
*    '     Change Owner Service Address')                               02980100
*  NORESCAN COL(MACGLMAR);                                              02980200
*ANS('             BALR 14,15          Call Change Owner service')      02980300
*  NORESCAN COL(MACGLMAR);                                              02980400
*END;                                                                   02980500
*ELSE IF XREQUEST = 'GET_BUFFER' THEN DO;                               02980600
*ANS("      TM   49(15),B'10000000'"!!                                  02980700
*    "     Check for performance update")                               02980800
*  NORESCAN COL(MACGLMAR);                                              02980900
*ANS('      BNO  GPFM'!!MACINDEX!!                                      02981000
*    '     No performance update')                                      02981100
*  NORESCAN COL(MACGLMAR);                                              02981200
*ANS('             L    15,36(,15)'!!                                   02981300
*    '     Get Buffer Service Address')                                 02981400
*  NORESCAN COL(MACGLMAR);                                              02981500
*ANS('             BALR 14,15          Call Get Buffer service')        02981600
*  NORESCAN COL(MACGLMAR);                                              02981700
*ANS('             B    DONE'!!MACINDEX)                                02981800
*  NORESCAN COL(MACGLMAR);                                              02981900
*ANS('GPFM'!!MACINDEX!!'     EQU *')                                    02982000
*  NORESCAN COL(MACGLMAR);                                              02982100
*ANS('             L    15,8(,15)      CSM service address')            02982200
*  NORESCAN COL(MACGLMAR);                                              02982300
*ANS('             BALR 14,15          Call CSM service')               02982400
*  NORESCAN COL(MACGLMAR);                                              02982500
*END;                                                                   02982600
*ELSE IF XREQUEST = 'FREE_BUFFER' THEN DO;                              02982700
*ANS("      TM   49(15),B'10000000'"!!                                  02982800
*    "     Check for performance update")                               02982900
*  NORESCAN COL(MACGLMAR);                                              02983000
*ANS('      BNO  FPFM'!!MACINDEX!!                                      02983100
*    '     No performance update')                                      02983200
*  NORESCAN COL(MACGLMAR);                                              02983300
*ANS('             L    15,40(,15)'!!                                   02983400
*    '     Free Buffer Service Address')                                02983500
*  NORESCAN COL(MACGLMAR);                                              02983600
*ANS('             BALR 14,15          Call Free Buffer service')       02983700
*  NORESCAN COL(MACGLMAR);                                              02983800
*ANS('             B    DONE'!!MACINDEX)                                02983900
*  NORESCAN COL(MACGLMAR);                                              02984000
*ANS('FPFM'!!MACINDEX!!'     EQU *')                                    02984100
*  NORESCAN COL(MACGLMAR);                                              02984200
*ANS('             L    15,8(,15)      CSM service address')            02984300
*  NORESCAN COL(MACGLMAR);                                              02984400
*ANS('             BALR 14,15          Call CSM service')               02984500
*  NORESCAN COL(MACGLMAR);                                              02984600
*END;                                                                   02984700
*ELSE DO;                                                               02984800
*ANS('             L    15,8(,15)      CSM service address')            02984900
*  NORESCAN COL(MACGLMAR);                                              02985000
*ANS('             BALR 14,15          Call CSM service')               02985100
*  NORESCAN COL(MACGLMAR);                                              02985200
*END;                                                                   02985300
*ANS('             B    DONE'!!MACINDEX)                                02985400
*  NORESCAN COL(MACGLMAR);                                              02985500
*IF XREQUEST = 'CREATE_POOL' THEN DO;                                   02985600
*ANS('NSRV'!!MACINDEX!!'     EQU *')                                    02985700
*  NORESCAN COL(MACGLMAR);                                              02985800
*ANS('             LR   14,1           Save parameter list address')    02985900
*  NORESCAN COL(MACGLMAR);                                              02986000
*ANS('             LOAD EP=IVTSMCBF    Obtain CSM service address')     02986100
*  NORESCAN COL(MACGLMAR);                                              02986200
*ANS('             LR   15,0           Set CSM service address')        02986300
*  NORESCAN COL(MACGLMAR);                                              02986400
*ANS('             LR   1,14           Restore parameter list address') 02986500
*  NORESCAN COL(MACGLMAR);                                              02986600
*ANS('             BALR 14,15          Call CSM service')               02986700
*  NORESCAN COL(MACGLMAR);                                              02986800
*END;                                                                   02986900
*ELSE DO;                                                               02987000
*ANS('NSRV'!!MACINDEX!!'     EQU *')                                    02987100
*  NORESCAN COL(MACGLMAR);                                              02987200
*ANS('             LA   15,4           Set error return code')          02987300
*  NORESCAN COL(MACGLMAR);                                              02987400
*ANS('             LA   0,2            Set error reason code')          02987500
*  NORESCAN COL(MACGLMAR);                                              02987600
*END;                                                                   02987700
*GOTO ALLDONE;                      /*                           @31A*/ 02987800
*PSWMOD64:                          /*                           @31A*/ 02987900
*ANS('             LG   15,72(0,0)     CVT address')                    02988000
*  NORESCAN COL(MACGLMAR);          /*                           @31A*/ 02988100
*ANS('             LLGT 15,140(,15)    ECVT address')                   02988200
*  NORESCAN COL(MACGLMAR);          /*                           @31A*/ 02988300
*ANS('             ICM  15,15,200(15)  CSM structure address')          02988400
*  NORESCAN COL(MACGLMAR);          /*                           @31A*/ 02988500
*ANS('             BZ   NSRV'!!MACINDEX!!                               02988600
*    '       CSM structure not anchored')                               02988700
*  NORESCAN COL(MACGLMAR);          /*                           @31A*/ 02988800
*IF XREQUEST = 'CHANGE_OWNER' THEN DO; /*                        @31A*/ 02988900
*ANS('             LLGT 15,64(,15)'!!                                   02989000
*    '     Change Owner Service Address')                               02989100
*  NORESCAN COL(MACGLMAR);          /* Get IVTSM6CO address      @31A*/ 02989200
*ANS('             BASR 14,15          Call Change Owner service')      02989300
*  NORESCAN COL(MACGLMAR);          /* Call IVTSM6CO             @31A*/ 02989400
*END;                               /*                           @31A*/ 02989500
*ELSE IF XREQUEST = 'GET_BUFFER' THEN DO; /*                     @31A*/ 02989600
*ANS('             LLGT 15,56(,15)'!!                                   02989700
*    '     Get Buffer Service Address')                                 02989800
*  NORESCAN COL(MACGLMAR);          /* Get IVTSM6GB address      @31A*/ 02989900
*ANS('             BASR 14,15          Call Get Buffer service')        02990000
*  NORESCAN COL(MACGLMAR);          /* Call IVTSM6GB             @31A*/ 02990100
*END;                               /*                           @31A*/ 02990200
*ELSE IF XREQUEST = 'FREE_BUFFER' THEN DO; /*                    @31A*/ 02990300
*ANS('             LLGT 15,60(,15)'!!                                   02990400
*    '     Free Buffer Service Address')                                02990500
*  NORESCAN COL(MACGLMAR);          /* Get IVTSM6FB address      @31A*/ 02990600
*ANS('             BASR 14,15          Call Free Buffer service')       02990700
*  NORESCAN COL(MACGLMAR);          /* Call IVTSM6FB             @31A*/ 02990800
*END;                                                                   02990900
*ELSE DO;                           /* Other requests            @31A*/ 02991000
*ANS('             LLGT 15,52(,15)     CSM service address')            02991100
*  NORESCAN COL(MACGLMAR);          /* Get IVTSM6BF address      @31A*/ 02991200
*ANS('             BASR 14,15          Call CSM service')               02991300
*  NORESCAN COL(MACGLMAR);          /* Call IVTSM6BF             @31A*/ 02991400
*END;                               /*                           @31A*/ 02991500
*ANS('             B    DONE'!!MACINDEX)                                02991600
*  NORESCAN COL(MACGLMAR);          /*                           @31A*/ 02991700
*IF XREQUEST = 'CREATE_POOL' THEN DO; /*                         @31A*/ 02991800
*ANS('NSRV'!!MACINDEX!!'     EQU *')                                    02991900
*  NORESCAN COL(MACGLMAR);          /*                           @31A*/ 02992000
*ANS('             LGR   14,1          Save parameter list address')    02992100
*  NORESCAN COL(MACGLMAR);          /*                           @31A*/ 02992200
*ANS('             LOAD EP=IVTSM6BF    Obtain CSM service address')     02992300
*  NORESCAN COL(MACGLMAR);          /* Load IVTSM6BF module      @31A*/ 02992400
*ANS('             LGR   15,0          Set CSM service address')        02992500
*  NORESCAN COL(MACGLMAR);          /* Get IVTSM6BF address      @31A*/ 02992600
*ANS('             LGR   1,14        Restore parameter list address')   02992700
*  NORESCAN COL(MACGLMAR);          /*                           @31A*/ 02992800
*ANS("             NILL  15,X'FFFE'   Clear low order bit  ")           02992900
*  NORESCAN COL(MACGLMAR);          /*                      @31A @34C*/ 02993000
*ANS('             BASR 14,15          Call CSM service')               02993100
*  NORESCAN COL(MACGLMAR);          /* Call IVTSM6BF             @31A*/ 02993200
*END;                               /*                           @31A*/ 02993300
*ELSE DO;                           /*                           @31A*/ 02993400
*ANS('NSRV'!!MACINDEX!!'     EQU *')                                    02993500
*  NORESCAN COL(MACGLMAR);          /*                           @31A*/ 02993600
*ANS('             LA   15,4           Set error return code')          02993700
*  NORESCAN COL(MACGLMAR);          /*                           @31A*/ 02993800
*ANS('             LA   0,2            Set error reason code')          02993900
*  NORESCAN COL(MACGLMAR);          /*                           @31A*/ 02994000
*END;                                                                   02994100
*ALLDONE:                           /*                           @31A*/ 02994200
*ANS('DONE'!!MACINDEX!!'     EQU *')                                    02994300
*  NORESCAN COL(MACGLMAR);                                              02994400
*ANS('@ENDGEN;') NORESCAN COL(MACLMAR+2);                               02994500
*ANS('RFY (GPR00F,GPR15F) UNRSTD;') NORESCAN COL(MACLMAR+2);            02994600
*IF INDEX(EHAREGS,'00F') = 0 THEN     /* No register 0 yet...        */ 02994700
*  EHAREGS=EHAREGS!!'00F';            /* Using register 0            */ 02994800
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  02994900
*              ANS('RFY GPR01P UNRSTD;') NORESCAN COL(MACLMAR);         02995000
*/*PO.L03 XERRBFLST FIXED(31)----------------------------------------*/ 02995100
*              IF ZXERRBFLST='OUTPUT' !                                 02995200
*                 ZXERRBFLST='INOUT'                                    02995300
*                THEN                                                   02995400
*                  ANS(XERRBFLST!!                                      02995500
*                      '=#Z'!!ZNDX!!'_XERRBFLST;'!!                     02995600
*                      '/* XERRBFLST FIXED(31) */')                     02995700
*                      NORESCAN COL(MACLMAR);                           02995800
*/*PO.L03 XSRCERRL FIXED(31)-----------------------------------------*/ 02995900
*              IF ZXSRCERRL='OUTPUT' !                                  02996000
*                 ZXSRCERRL='INOUT'                                     02996100
*                THEN                                                   02996200
*                  ANS(XSRCERRL!!                                       02996300
*                      '=#Z'!!ZNDX!!'_XSRCERRL;'!!                      02996400
*                      '/* XSRCERRL FIXED(31) */')                      02996500
*                      NORESCAN COL(MACLMAR);                           02996600
*/*PO.L03 XTARGERRL FIXED(31)----------------------------------------*/ 02996700
*              IF ZXTARGERRL='OUTPUT' !                                 02996800
*                 ZXTARGERRL='INOUT'                                    02996900
*                THEN                                                   02997000
*                  ANS(XTARGERRL!!                                      02997100
*                      '=#Z'!!ZNDX!!'_XTARGERRL;'!!                     02997200
*                      '/* XTARGERRL FIXED(31) */')                     02997300
*                      NORESCAN COL(MACLMAR);                           02997400
*/*PO.L02 XDS_INFO PTR(31)-------------------------------------------*/ 02997500
*              IF ZXDS_INFO='OUTPUT' !                                  02997600
*                 ZXDS_INFO='INOUT'                                     02997700
*                THEN                                                   02997800
*                  ANS(XDS_INFO!!                                       02997900
*                      '=#Z'!!ZNDX!!'_XDS_INFO;'!!                      02998000
*                      '/* XDS_INFO PTR(31) */')                        02998100
*                      NORESCAN COL(MACLMAR);                           02998200
*/*PO.L02 XSTATAREA PTR(31)------------------------------------------*/ 02998300
*              IF ZXSTATAREA='OUTPUT' !                                 02998400
*                 ZXSTATAREA='INOUT'                                    02998500
*                THEN                                                   02998600
*                  ANS(XSTATAREA!!                                      02998700
*                      '=#Z'!!ZNDX!!'_XSTATAREA;'!!                     02998800
*                      '/* XSTATAREA PTR(31) */')                       02998900
*                      NORESCAN COL(MACLMAR);                           02999000
*/*PO.L05 XRETPTOKN CHAR(10)-----------------------------------------*/ 02999100
*              IF ZXRETPTOKN='OUTPUT' !                                 02999200
*                 ZXRETPTOKN='INOUT'                                    02999300
*                THEN                                                   02999400
*                  ANS(XRETPTOKN!!                                      02999500
*                      '=#Z'!!ZNDX!!'_XRETPTOKN;'!!                     02999600
*                      '/* XRETPTOKN CHAR(10) */')                      02999700
*                      NORESCAN COL(MACLMAR);                           02999800
*/*PO.L08 XRETCODE RETURN CODE---------------------------------------*/ 02999900
*              IF NUMBER(RETCODE)>0                                     03000000
*                THEN                                                   03000100
*                    ANS(XRETCODE!!                                     03000200
*                     '=GPR15F; /* SET RETURN CODE */')                 03000300
*                      NORESCAN COL(MACLMAR);                           03000400
*/*PO.L09 XRSNCODE REASON CODE---------------------------------------*/ 03000500
*              IF NUMBER(RSNCODE)>0                                     03000600
*                THEN                                                   03000700
*                    ANS(XRSNCODE!!                                     03000800
*                     '=GPR00F; /* SET REASON CODE */')                 03000900
*                      NORESCAN COL(MACLMAR);                           03001000
*/*PO.L10 REMOVE REGISTER RESTRICTIONS-------------------------------*/ 03001100
*              IF NUMBER(RSNCODE)>0                                     03001200
*                THEN                                                   03001300
*              ANS('RFY GPR00F UNRSTD;') NORESCAN COL(MACLMAR);         03001400
*              IF NUMBER(RETCODE)>0                                     03001500
*                THEN                                                   03001600
*              ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);         03001700
*/*PO.L11 END OF FUNCTION INVOCATION---------------------------------*/ 03001800
*            END;                                                       03001900
*/*PO.L12 END OF PARAMETER LIST PROCESSING---------------------------*/ 03002000
*      END;                                                             03002100
*/*PO.L13 IVTCSM USAGE INDICATOR-------------------------------------*/ 03002200
*  ZIVTCSM='YES';                            /* SET IVTCSM USED */      03002300
*/*PO.L15 END OF EXECUTABLE IVTCSM-PLISTVER MACRO--------------------*/ 03002400
*  IF XMF^='L'                                                          03002500
*    THEN                                                               03002600
*      ANS('END; /* IVTCSM-PLISTVER */')                                03002700
*          NORESCAN COL(MACLMAR);                                       03002800
*/*PO.L16 RESTORE PRINT CONTROLS-------------------------------------*/ 03002900
*  ANS(MACCONC!!'LIST POP NOECHO;') NORESCAN COL(MACLMAR);              03003000
*/*PO.L17 END OF IVTCSM MACRO----------------------------------------*/ 03003100
*  ANS(MACCONC!!'SPACE;') NORESCAN COL(MACLMAR);                        03003200
*  ANS(' ') NORESCAN COL(MACLMAR);                                      03003300
*/*******************************************************************/  03003400
*/*  PO.L18 END OF CODE TO BE BYPASSED WHEN ZMACRET ^= 0            */  03003500
*/*******************************************************************/  03003600
*      END;                                                             03003700
*/*******************************************************************/  03003800
*/*  MVS ONLY     -CHECK IF AMG PARM LISTS ARE PRESENT              */  03003900
*/*               -ROUND MAX AMG PARM LIST TO DOUBLEWORD MULTIPLES  */  03004000
*/*******************************************************************/  03004100
*  IF ZPRMNUM>0                   /* NUMBER OF AMG PARM LIST ENTRIES*/  03004200
*    THEN                                                               03004300
*      DO;                                                              03004400
*        ZPRMMAX=((ZPRMMAX+7)/8)*8; /* ROUND PARM LIST SIZE UP TO       03004500
*                                      DOUBLEWORD MULTIPLES        */   03004600
*/*******************************************************************/  03004700
*/*  MVS -GENERATE PARM LIST DCL TO OVERLAY ?EPILOG'S ILIST AREA    */  03004800
*/*******************************************************************/  03004900
*        IF XMF ^= 'M' & XMF ^= 'E'                                     03005000
*          THEN                                                         03005100
*            DO;                                                        03005200
*              IF INDEX(EHALIST,',AMG,')=0 /* HAS DECLARE BEEN DONE?*/  03005300
*                THEN                                                   03005400
*                  DO;                                                  03005500
*                    ANS('?EPILOG                                       03005600
*                        STRING(''DCL #ZPLIST DEF(ILIST);'');');        03005700
*                    EHALIST=EHALIST!!',AMG,';                          03005800
*                  END;                                                 03005900
*            END;                                                       03006000
*/*******************************************************************/  03006100
*/*  MVS  -EXTRACT PARM LISTS FROM AMG GLOBAL MACRO ARRAYS          */  03006200
*/*******************************************************************/  03006300
*        IF XMF ^= 'M' & XMF ^= 'E'                                     03006400
*          THEN                                                         03006500
*            DO;                                                        03006600
*              IF ZPRMMAX>EHAMAXLEN                                     03006700
*                THEN                                                   03006800
*                  EHAMAXLEN=ZPRMMAX; /* SET MAX PARM LIST SIZE     */  03006900
*            END;                                                       03007000
*        DO ZI=1 TO ZPRMNUM; /* EXTRACT AMG PARM LISTS               */ 03007100
*          ANS('?EPILOG STRING('''!!ZPRM(ZI)!!''');')                   03007200
*              COL(MACLMAR);                                            03007300
*        END;                                                           03007400
*      END;                                                             03007500
*/*-----------------------------------------------------------------*/  03007600
*/*  MVS  -ENSURE THAT GPRS NEEDED BY AMG MACROS WILL BE PROVIDED   */  03007700
*/*        BY ?EPILOG                                               */  03007800
*/*-----------------------------------------------------------------*/  03007900
*        IF INDEX(EHAREGS,'01P')=0                                      03008000
*          THEN                                                         03008100
*            EHAREGS=EHAREGS!!'01P'; /* GPR01P                      */  03008200
*        IF INDEX(EHAREGS,'00F')=0                                      03008300
*          & NUMBER(RSNCODE)>0                                          03008400
*          THEN                                                         03008500
*            EHAREGS=EHAREGS!!'00F'; /* GPR00F                      */  03008600
*        IF INDEX(EHAREGS,'15F')=0                                      03008700
*          THEN                                                         03008800
*            EHAREGS=EHAREGS!!'15F'; /* GPR15F                      */  03008900
*        IF SYSALVL > 1 THEN                                            03009000
*        DO;                                                            03009100
*          IF INDEX(EHAREGS64,'00F')=0 THEN                             03009200
*            EHAREGS64 = EHAREGS64 !! '00F';                            03009300
*          IF INDEX(EHAREGS64,'01P')=0 THEN                             03009400
*            EHAREGS64 = EHAREGS64 !! '01P';                            03009500
*          IF INDEX(EHAREGS64,'15F')=0 THEN                             03009600
*            EHAREGS64 = EHAREGS64 !! '15F';                            03009700
*        END;                                                           03009800
*  RETURN CODE(ZMACRET);                                                03009900
*%END IVTCSM;                                                           03010000
