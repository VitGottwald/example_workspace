*/***  Start of Specifications for IEAMSYMP  *************************/ 00000100
*/*                                                                  */ 00000200
*/*01* Descriptive Name: Static Symbol Service Parameter List        */ 00000400
*/*02*   Acronym:    SYMP                                            */ 00000500
*/*                                                                  */ 00000600
*/*01* Macro Name: IEAMSYMP                                          */ 00000700
*/*                                                                  */ 00000800
*/*01* Dsect Name: Caller supplied                                   */ 00000900
*/*                                                                  */ 00001000
*/*01* Component:  Supervisor Control (SC1C5)                        */ 00001100
*/*                                                                  */ 00001200
*/*01* PROPRIETARY STATEMENT =                                       */ 00001300
*/*                                                                  */ 00001400
*/*    LICENSED MATERIALS - PROPERTY OF IBM                          */ 00001500
*/*    5650-ZOS COPYRIGHT IBM CORP. 1994, 2015                       */ 00001600
*/*                                                                  */ 00001700
*/*01* STATUS = HBB77A0                                              */ 00001800
*/*                                                                  */ 00001900
*/*01* EXTERNAL CLASSIFICATION: PI                                   */ 00002006
*/*                                                                  */ 00002100
*/*01* END OF EXTERNAL CLASSIFICATION:                               */ 00002200
*/*                                                                  */ 00002300
*/*01* FUNCTION= IEAMSYMP contains the mapping of the parameters     */ 00002400
*/*    used for communication between IPCS exits and the Static      */ 00002500
*/*    Symbol Service Parameter List.                                */ 00002600
*/*                                                                  */ 00002700
*/*01* Eye Catcher: SYMP                                             */ 00002800
*/*02*   Offset:      0                                              */ 00002900
*/*02*   Length:      4                                              */ 00003000
*/*                                                                  */ 00003100
*/*01*  STORAGE ATTRIBUTES: None                                     */ 00003200
*/*02*    Residency: At direction of caller                          */ 00003400
*/*                                                                  */ 00003500
*/*01* Size:       128 bytes                                         */ 00003600
*/*                                                                  */ 00003700
*/*01* Created by:    Caller                                         */ 00003800
*/*                                                                  */ 00004000
*/*01* POINTED TO BY: Invocation dependant                           */ 00004100
*/*                                                                  */ 00004200
*/*01* SERIALIZATION: None                                           */ 00004300
*/*                                                                  */ 00004400
*/*01* METHOD OF ACCESS:                                             */ 00004500
*/*                                                                  */ 00004600
*/*     PLAS = The macro can expand in a LIST or SUBLIST format.     */ 00004700
*/*                                                                  */ 00004800
*/*       Set macro variable EHBENDCHAR to comma or semicolon.       */ 00004900
*/*       Defaults to semicolon for LIST form and must be set        */ 00005000
*/*       for the SUBLIST form.  For example:                        */ 00005100
*/*                                                                  */ 00005200
*/*         %DCL EHBENDCHAR EXTERNAL CHAR                            */ 00005300
*/*         %EHBENDCHAR=','                                          */ 00005400
*/*                                                                  */ 00005500
*/*      LIST FORM    = ?IEAMSYMP MF(LIST,PREFIX,STORCLASS)          */ 00005600
*/*                                                                  */ 00005700
*/*      SUBLIST FORM = ?IEAMSYMP MF(SUBLIST,PREFIX,STORCLASS,LEVEL) */ 00005800
*/*                                                                  */ 00005900
*/*        MF                                                        */ 00006000
*/*       PARM  Meaning                                              */ 00006100
*/*       ----  ---------------------------------------------------  */ 00006200
*/*                                                                  */ 00006300
*/*        1    LIST or L for LIST form                              */ 00006400
*/*             SUBLIST or S for SUBLIST form                        */ 00006500
*/*                                                                  */ 00006600
*/*        2    PREFIX is from 1 to 4 alpha-numeric starting with    */ 00006700
*/*             an alpha character. e.g. 'SYMP'                      */ 00006800
*/*                                                                  */ 00006900
*/*        3    STORAGE CLASS and initialization attribute           */ 00007000
*/*             COMPLETE keyword will cause initial values to        */ 00007100
*/*             be generated.  Default storage class with COMPLETE   */ 00007200
*/*             is STATIC LOCAL.  Can specify BASED, DEFINED ...     */ 00007300
*/*             BASED and DEFINED are not valid with SUBLIST.        */ 00007400
*/*                                                                  */ 00007500
*/*        4    Structure level number to start with.  This can      */ 00007600
*/*             only be specified on the SUBLIST form.               */ 00007700
*/*                                                                  */ 00007800
*/*    ASM = The assembler format takes the form                     */ 00007900
*/*                                                                  */ 00008000
*/*          LABEL  IEAMSYMP DSECT=YES                               */ 00008100
*/*                                NO                                */ 00008200
*/*                                                                  */ 00008300
*/*          The LABEL is used as the prefix for all the             */ 00008400
*/*          field names.  The label cannot exceed 4 characters.     */ 00008500
*/*          For example code 'SYMP   IEAMSYMP DSECT=YES'            */ 00008600
*/*                                                                  */ 00008700
*/*          DSECT=YES will cause a DSECT to be generated.           */ 00008800
*/*                    The initial values will be ignored.           */ 00008900
*/*                                                                  */ 00009000
*/*          DSECT=NO  will cause a set of initialized DCs           */ 00009100
*/*                    to be generated.                              */ 00009200
*/*                                                                  */ 00009300
*/*01* NOTES = None                                                  */ 00009400
*/*                                                                  */ 00009500
*/*01* DEPENDENCIES = This macro requires external macro variables   */ 00009600
*/*                   be declared in one of the two following ways:  */ 00009700
*/*                                                                  */ 00009800
*/*                   1. Use the BLSRPROC macro to generate the      */ 00009900
*/*                      PROC statement and macro declares.          */ 00010000
*/*                                                                  */ 00010100
*/*                   2. Use the BLSRMAC0 macro to generate only     */ 00010200
*/*                      the declares.                               */ 00010300
*/*02*   CHARACTER CODE DEPENDENCIES = None                          */ 00010400
*/*                                                                  */ 00010500
*/*01* RESTRICTIONS = None                                           */ 00010600
*/*                                                                  */ 00010700
*/*01* REGISTER CONVENTIONS = None                                   */ 00010800
*/*                                                                  */ 00010900
*/* ---------------------------------------------------------------- */ 00011000
*/*                                                                  */ 00011100
*/*01* CHANGE-ACTIVITY=                                              */ 00011200
*/*                                                                  */ 00011300
*/* $L0=CLONE    HBB5520  940602  PD16EJ: Cloning Support            */ 00011400
*/* $P1=PN71292  HBB5520  940908  PD16H5: Showhdr Support            */ 00011500
*/* $L1=ME24482  HBB7790  120723  PD00XB: &LABEL                     */ 00011600
*/* $L2=LONGSYM  HBB77A0  140228  PD00XB: Long symbols               */ 00011706
*/*                                                                  */ 00011806
*/* END OF SPECIFICATIONS FOR IEAMSYMP ******************************** 00011906
         MACRO                                                          00012006
&LABEL   IEAMSYMP &DSECT=YES                                       @L1C 00012106
         LCLC  &P                                                  @L1A 00013000
&P       SETC  '&LABEL'                                            @L1A 00014000
         AIF   ('&LABEL' NE '').HAVELAB                            @L1A 00015000
&P       SETC  'SYMP'                                              @L1A 00016000
.HAVELAB ANOP                                                      @L1A 00016100
         IEZBITS ,                Define symbolic bits                  00016200
         AIF   ('&DSECT' EQ 'NO').L010 No DSECT statement               00016300
&P       DSECT ,                  IPCS name service parameter list      00016400
         AGO   .L020              Define structure of record            00016500
.L010    ANOP  ,                  No DSECT statement                    00016600
         DS    0D                 Align on doubleword boundary          00016700
&P       DS    0CL128             IPCS name service parameter list      00016800
.L020    ANOP  ,                  Define structure of record            00016900
&P.000   DS    0C                 Begin IEAMSYMP                        00017000
&P.ID    DS    0CL6               Static Symbol service parameter      *00017100
                                  identifier                            00017200
&P.IDC   DC    CL4'SYMP'          SYMP acronym                          00017300
&P.IDL   DC    CL1'1'             SYMP level indicator                 *00017400
                                  Set to '2' if using SYMBOL16 /       *00017504
                                  SUBTEXT44.                       @L2C 00017604
         DC    CL1' '             Reserved                              00017704
         DC    CL2' '             Reserved                              00017804
&P.MODN  DC    CL8' '             The name of the module requesting the*00017904
                                  service                               00018004
&P.SYMBOL  DC  CL8' '             The input SYMBOL to be translated.   *00018104
                                  Used when IDL is "1".            @L2C 00018204
         DC    CL12' '            Reserved                              00018304
         ORG   &P.SYMBOL                                           @L2A 00018404
&P.SYMBOL16 DC CL16' '            The 16-byte symbol                   *00018504
                                  Used when IDL is "2".            @L2A 00018604
         ORG   &P.SYMBOL+20                                        @L2A 00018704
&P.PFLG  DS    0BL2               Processing flags                      00018804
&P.PFL1  DC    BL1'0'             First byte of flags (input)           00018904
&P.FNOT  EQU   BIT0               No output requested                   00019004
*                                 Set by caller, not housekept          00019104
*                                                                       00019204
*                                                                       00019304
&P.PFL2  DC    BL1'0'             Second byte of flags (output)         00019404
&P.SYMBOLNOTFOUND EQU BIT0        Requested Symbol not found            00019504
&P.SYSTEMDEFINED EQU BIT1         System defined symbol                 00019604
&P.MISSINGSTORAGE EQU BIT2        Missing storage                       00019704
&P.LOGICALERROR EQU BIT3          Logical Error In Data                 00019804
&P.SUBTEXT DC  CL10' '            The output Subtext.                  *00019904
                                  Used when IDL is "1".            @L2C 00020004
         DC    CL12' '            Reserved                              00020104
&P.SUBTEXTLENGTH DC  F'0'         Length of Subtext                     00020204
&P.SYMBOLNUMBER  DC  F'0'         Position of symbol in Table           00020304
&P.TOTALSYMBOLS  DC  F'0'         Total number of symbols in Table      00020404
&P.RBAD  DC    A(0)               Reference Block Address               00020504
&P.Subtext44 DC XL44'00'          The output Subtext.                  *00020604
                                  Used when IDL is "2".            @L2C 00020704
         DC    XL8'00'            Reserved                         @L2C 00020804
&P.999   DS    0C                 End IEAMSYMP                          00020904
         MEND  ,                  End assembler macro IEAMSYMP       */ 00024400
*                                                                       00024500
*%IEAMSYMP:                         /* SYMDEF service parameter list */ 00024600
*   MACRO KEYS(MF);                 /*                               */ 00024700
*/*------------------------------------------------------------------*/ 00024800
*/* Define Macro-Variables                                           */ 00024900
*/*------------------------------------------------------------------*/ 00025000
*                                                                       00025100
*   DECLARE                         /* External macro variables      */ 00025200
*     ELSRSYMP CHARACTER EXTERNAL,  /* IEAMSYMP global data          */ 00025300
*     EHBENDCHAR CHARACTER EXTERNAL, /* Final punctuation            */ 00025400
*     EHBBLRPENDESS CHARACTER EXTERNAL, /* Deferred macro requests   */ 00025500
*                                                                       00025600
*     EHBLVL1  CHARACTER EXTERNAL,  /* First level number            */ 00025700
*     EHBLVL2  CHARACTER EXTERNAL,  /* Second level number           */ 00025800
*     EHBLVL3  CHARACTER EXTERNAL,  /* Third level number            */ 00025900
*     EHBLVL4  CHARACTER EXTERNAL,  /* Fourth level number           */ 00026000
*     EHBMF1   CHARACTER EXTERNAL,  /* Macro form                    */ 00026100
*     EHBMF2   CHARACTER EXTERNAL,  /* Prefix characters             */ 00026200
*     EHBMF3   CHARACTER EXTERNAL,  /* Scope/storage class           */ 00026300
*     EHBMF3A  CHARACTER EXTERNAL,  /* Complete initialization flag  */ 00026400
*                                                                       00026500
*     BLSRENDDECLARE CHARACTER EXTERNAL, /* Deferred declarations    */ 00026600
*                                                                       00026700
*     EHBCOL1  FIXED EXTERNAL,      /* First indentation column      */ 00026800
*     EHBCOL2  FIXED EXTERNAL,      /* Second indentation column     */ 00026900
*     EHBCOL3  FIXED EXTERNAL,      /* Third indentation column      */ 00027000
*     EHBCOL4  FIXED EXTERNAL,      /* Fourth indentation column     */ 00027100
*     EHBCSECT CHARACTER EXTERNAL,  /* CSECT name                    */ 00027200
*     EHBRC    FIXED EXTERNAL;      /* Macro return code             */ 00027300
*   DEACTIVATE ELSRSYMP,BLSRENDDECLARE; /* Prevent accidents         */ 00027400
*   DECLARE                         /* Internal macro variables      */ 00027500
*     CENDCHAR CHARACTER INTERNAL,  /* Final punctuation             */ 00027600
*     CLVL2    CHARACTER INTERNAL,  /* Second level number           */ 00027700
*     CLVL3    CHARACTER INTERNAL,  /* Third level number            */ 00027800
*     CLVL4    CHARACTER INTERNAL,  /* Fourth level number           */ 00027900
*     CMF1     CHARACTER INTERNAL,  /* Macro form                    */ 00028000
*     CMF2     CHARACTER INTERNAL,  /* Prefix characters             */ 00028100
*     CMF3A    CHARACTER INTERNAL,  /* Complete initialization flag  */ 00028200
*                                                                       00028300
*     CQCOMPLETE CHARACTER INTERNAL, /* Literal                      */ 00028400
*     CQINITIAL CHARACTER INTERNAL, /* Literal                       */ 00028500
*     FCOL2    FIXED INTERNAL,      /* Second indentation column     */ 00028600
*     FCOL3    FIXED INTERNAL,      /* Third indentation column      */ 00028700
*     FCOL4    FIXED INTERNAL,      /* Fourth indentation column     */ 00028800
*     FRC      FIXED INTERNAL,      /* Macro return code             */ 00028900
*     F1       FIXED INTERNAL;      /* Utility variable              */ 00029000
*   DEACTIVATE CENDCHAR,CLVL2,CLVL3,CLVL4,CMF1,CMF2,CMF3A,CQCOMPLETE,   00029100
*       CQINITIAL,FCOL2,FCOL3,FCOL4,FRC,F1; /* Prevent accidents     */ 00029200
*   CQINITIAL = ' INITIAL(';        /* Literal                       */ 00029300
*   CQCOMPLETE = 'COMPLETE';        /* Literal                       */ 00029400
*/*------------------------------------------------------------------*/ 00029500
*/* Invoke BLRMF (analyze the MF keyword and set global variables).  */ 00029600
*/*------------------------------------------------------------------*/ 00029700
*                                                                       00029800
*   ANSWER('?'!!MACLABEL!!'BLRMF('!!MF!!') FORMS(L,S);'); /*         */ 00029900
*   FRC = EHBRC;                    /* Macro return code             */ 00030000
*   IF FRC > 8 THEN                 /* BLRMF return code             */ 00030100
*     GO TO EXITSYMP;               /* Error detected, exit          */ 00030200
*   CENDCHAR = EHBENDCHAR;          /* Final punctuation             */ 00030300
*   EHBENDCHAR = ',';               /* Final punctuation             */ 00030400
*   CLVL2 = EHBLVL2;                /* Second level number           */ 00030500
*   CLVL3 = EHBLVL3;                /* Third level number            */ 00030600
*   CLVL4 = EHBLVL4;                /* Fourth level number           */ 00030700
*   CMF1 = EHBMF1;                  /* Macro form                    */ 00030800
*   CMF2 = EHBMF2;                  /* Prefix characters             */ 00030900
*   CMF3A = EHBMF3A;                /* Complete initialization flag     00031000
*                                                                    */ 00031100
*   FCOL2 = EHBCOL2;                /* Second indentation column     */ 00031200
*   FCOL3 = EHBCOL3;                /* Third indentation column      */ 00031300
*   FCOL4 = EHBCOL4;                /* Fourth indentation column     */ 00031400
*   BLSRENDDECLARE = BLSRENDDECLARE !! CMF2 !!                          00031500
*       'SYMP CHAR(6) CONSTANT(''SYMP1 ''),' !!                         00031600
*       '/*SYMP identifier constant used to fill in SYMPID.*/';         00031700
*                                                                       00031800
*/*------------------------------------------------------------------*/ 00031900
*/* Generate the main level declaration for the structure.           */ 00032000
*/*------------------------------------------------------------------*/ 00032100
*                                                                       00032200
*   IF CMF1 = 'LIST' THEN           /* List form                     */ 00032300
*     ANSWER('DECLARE/*IEAMSYMP #MD90xxx*/') COLUMN(5); /*           */ 00032400
*   ANSWER(EHBLVL1!!CMF2!!' BOUNDARY(WORD)'!!EHBMF3!!',/*IEAMSYMP'!!    00032500
*       MACLIST!!' '!!MACKEYS!!'*/') COLUMN(EHBCOL1);                   00032600
*/*------------------------------------------------------------------*/ 00032700
*/* Generate text for the elements of the substructure.              */ 00032800
*/*------------------------------------------------------------------*/ 00032900
*                                                                       00033000
*   ANSWER(CLVL2!!CMF2!!'ID CHAR(6)') COLUMN(FCOL2); /*              */ 00033100
*   IF CMF3A = CQCOMPLETE THEN      /*                               */ 00033200
*     ANSWER(CQINITIAL!!'''SYMP1'')');                                  00033300
*   ANSWER(',/*SYMDEF service parameter list identifier*/');            00033400
*   ANSWER(CLVL3!!CMF2!!'IDC CHARACTER(4),/*SYMP acronym*/') COLUMN(    00033500
*       FCOL3);                                                         00033600
*   ANSWER(CLVL3!!CMF2!!'IDL CHARACTER(1),/*SYMP level indicator ' !!   00033701
*    ' Set to ''1'' if using symbol, ''2'' if using symbol16. */')      00033801
*       COLUMN(FCOL3);                                        /* @L2C*/ 00033901
*   ANSWER(CLVL3!!'*   CHARACTER(1),/*Reserved*/') COLUMN(FCOL3);       00034001
*   ANSWER(CLVL2!!'*   CHARACTER(2),/*Reserved*/') COLUMN(FCOL2);       00034101
*                                                                       00034201
*/*--Module name-----------------------------------------------------*/ 00034301
*                                                                       00034401
*   ANSWER(CLVL2!!CMF2!!'MODN CHAR(8)') COLUMN(FCOL2); /*            */ 00034501
*   IF CMF3A = CQCOMPLETE THEN      /*                               */ 00034601
*     IF LENGTH(EHBCSECT) >= 8 THEN /* CSECT name defined by BLRPROC    00034701
*                                                                    */ 00034801
*       ANSWER(CQINITIAL!!QUOTE(EHBCSECT(1:8))!!')'); /*             */ 00034901
*     ELSE                          /* No token specified            */ 00035001
*       ANSWER(CQINITIAL!!'''        '')'); /* Default is blanks     */ 00035101
*   ANSWER(',/*Name of module requesting the service*/'); /*         */ 00035201
*                                                                       00035301
*/*--Symbol----------------------------------------------------------*/ 00035401
*                                                                       00035501
*   ANSWER(CLVL2!!CMF2!!'Symbol16 CHAR(16)') COLUMN(FCOL2);   /* @L2C*/ 00035601
*   IF CMF3A = CQCOMPLETE THEN                                          00035701
*     ANSWER(CQINITIAL!!''' '')');                                      00035801
*   ANSWER(',/* 16-byte symbol name, excluding ampersand and ' !!       00035901
*          'period. Use only when IDL is set to 2 */');       /* @L2C*/ 00036001
*   ANSWER(CLVL3!!CMF2!!'Symbol CHAR(8)') COLUMN(FCOL2);      /* @L2C*/ 00036101
*   ANSWER(',/* Symbol Name, excluding ampersand and period */');       00036201
*   ANSWER(CLVL2!!'* CHAR(4)') COLUMN(FCOL2);                 /* @L2C*/ 00036301
*   IF CMF3A = CQCOMPLETE THEN                                          00036401
*     ANSWER(CQINITIAL!!''' '')');                                      00036501
*   ANSWER(',/* Reserved */');                                          00036601
*                                                                       00036701
*/*--Flag bytes------------------------------------------------------*/ 00036801
*                                                                       00036901
*   ANSWER(CLVL2!!CMF2!!'PFLG BIT(16),/*Processing flags*/') COLUMN(    00037001
*       FCOL3);                                                         00037101
*                                                                       00037201
*   ANSWER(CLVL3!!CMF2!!'PFL1 BIT(8)') COLUMN(FCOL3);                   00037301
*   IF CMF3A = CQCOMPLETE THEN      /* Initialization required?      */ 00037401
*     ANSWER(CQINITIAL!!'''00''X)');                                    00037501
*   ANSWER(',/*First flag byte (input) */');                            00037601
*   ANSWER(CLVL4!!CMF2!!'FNOT BIT(1),/*No output requested*/') COLUMN(  00037701
*       FCOL4);                                                         00037801
*   ANSWER(CLVL4!!'* BIT(7),/*Reserved*/') COLUMN(FCOL4);               00037901
*                                                                       00038001
*   ANSWER(CLVL3!!CMF2!!'PFL2 BIT(8)') COLUMN(FCOL3);                   00038101
*   IF CMF3A = CQCOMPLETE THEN      /* Initialization required?      */ 00038201
*     ANSWER(CQINITIAL!!'''00''X)');                                    00038301
*   ANSWER(',/*Second flag byte (output) */');                          00038401
*   ANSWER(CLVL4!!CMF2!!'SymbolNotFound BIT(1),/*Symbol not found*/')   00038501
*       COLUMN(FCOL4);                                                  00038601
*   ANSWER(CLVL4!!CMF2!!'SystemDefined BIT(1),'!!                       00038701
*         '/*System Defined Symbol*/')                                  00038801
*       COLUMN(FCOL4);                                                  00038901
*   ANSWER(CLVL4!!CMF2!!'MissingStorage BIT(1),/*Missing storage*/')    00039001
*       COLUMN(FCOL4);                                                  00039101
*   ANSWER(CLVL4!!CMF2!!'LogicalError BIT(1), '!!                       00039201
*         '/* Logical error in data */')                                00039301
*       COLUMN(FCOL4);                                                  00039401
*   ANSWER(CLVL4!!'* BIT(4),/*Reserved*/') COLUMN(FCOL4);               00039501
*                                                                       00039601
*/*--SubText---------------------------------------------------------*/ 00039701
*                                                                       00039801
*   ANSWER(CLVL2!!CMF2!!'SubText CHAR(10)') COLUMN(FCOL2);              00039901
*   IF CMF3A = CQCOMPLETE THEN                                          00040001
*     ANSWER(CQINITIAL!!''' '')');                                      00040101
*   ANSWER(',/* SubText assigned to this symbol IDL=''1'' */');         00040204
*   ANSWER(CLVL2!!' * CHAR(12)') COLUMN(FCOL2);                         00040301
*   IF CMF3A = CQCOMPLETE THEN                                          00040401
*     ANSWER(CQINITIAL!!''' '')');                                      00040501
*   ANSWER(',/* Reserved */');                                          00040601
*   ANSWER(CLVL2!!CMF2!!'SubTextLength FIXED(31)') COLUMN(FCOL2);       00040701
*   IF CMF3A = CQCOMPLETE THEN                                          00040801
*     ANSWER(CQINITIAL!!'''00000000''X)');                              00040901
*   ANSWER(',/* Length of the Subtext */');                             00041001
*                                                                       00041101
*/*--SymbolNum-------------------------------------------------------*/ 00041201
*                                                                       00041301
*   ANSWER(CLVL2!!CMF2!!'SymbolNumber FIXED(32)') COLUMN(FCOL2);        00041401
*   IF CMF3A = CQCOMPLETE THEN                                          00041501
*     ANSWER(CQINITIAL!!'''00000000''X)');                              00041601
*   ANSWER(',/*Position of Symbol in Table*/');                         00041701
*                                                                       00041801
*/*--TotalSymbols----------------------------------------------------*/ 00041901
*                                                                       00042001
*   ANSWER(CLVL2!!CMF2!!'TotalSymbols FIXED(32)') COLUMN(FCOL2);        00042101
*   IF CMF3A = CQCOMPLETE THEN                                          00042201
*     ANSWER(CQINITIAL!!'''00000000''X)');                              00042301
*   ANSWER(',/*Total number of symbols in Table*/');                    00042401
*                                                                       00042501
*/*--RBAD------------------------------------------------------------*/ 00042601
*                                                                       00042701
*   ANSWER(CLVL2!!CMF2!!'RBAD PTR(31)') COLUMN(FCOL2);                  00042801
*   IF CMF3A = CQCOMPLETE THEN                                          00042901
*     ANSWER(CQINITIAL!!'''00000000''X)');                              00043001
*   ANSWER(',/*Referenced Block Address*/');                            00043101
*                                                                       00043201
*/*--Reserved space--------------------------------------------------*/ 00043301
*                                                                       00043401
*   ANSWER(CLVL2!!CMF2!!'SubText44 CHAR(44)') COLUMN(FCOL2);  /* @L2A*/ 00043505
*   IF CMF3A = CQCOMPLETE THEN                                /* @L2A*/ 00043605
*     ANSWER(CQINITIAL!!''' '')');                            /* @L2A*/ 00043705
*   ANSWER(',/* SubText assigned to this symbol IDL=''2'' */');  /*     00043905
*                                                                @L2A*/ 00044005
*                                                                       00044101
*/*--Reserved space--------------------------------------------------*/ 00044204
*                                                                       00044304
*   ANSWER(CLVL2!!CMF2!!'RSVD CHAR(8)') COLUMN(FCOL2);        /* @L2C*/ 00044405
*   IF CMF3A = CQCOMPLETE THEN                                          00044504
*     ANSWER(CQINITIAL!!''' '')');                                      00044604
*   ANSWER(',/*Reserved*/');                                            00044704
*                                                                       00044804
*/*--End Of Parameter List-------------------------------------------*/ 00044904
*                                                                       00045004
*   ANSWER(CLVL2!!CMF2!!'999 CHARACTER(0)'!!CENDCHAR!!                  00045104
*       '/*IEAMSYMP #MD90xxx*/') COLUMN(FCOL2);                         00045204
*   IF CENDCHAR = ';' THEN                                              00045304
*     ANSWER('?BLSR002;');          /* Process deferred declarations    00045404
*                                                                    */ 00045504
*   ANSWER('?BLR003(IEAMSYMP,'!!CHAR(EHBRC)!!');'); /*               */ 00045604
*EXITSYMP:                                                              00045704
*   RETURN CODE(FRC);               /*                               */ 00045804
*   %END IEAMSYMP;                                                      00046004
