* % IEFSJDKY: MACRO KEYS(PRFX,INFORET,UNALLOC);                         00010000
*/** START OF SPECIFICATIONS *****************************************/ 00020000
*/*                                                                  */ 00030000
*/*    MACRO NAME = IEFSJDKY                                     @P4C*/ 00040000
*/*                                                                  */ 00050000
*/*    DESCRIPTIVE NAME = Scheduler JCL Facility (SJF) /             */ 00060000
*/*                       Dynamic Allocation keys                    */ 00070000
*/*                                                                  */ 00080000
*/*01* PROPRIETARY STATEMENT=                                        */ 00090000
*/***PROPRIETARY_STATEMENT********************************************/ 00100000
*/*                                                                  */ 00110000
*/*    PROPRIETARY STATEMENT =                                       */ 00120000
*/*                                                                  */ 00130000
*/*     LICENSED MATERIALS - PROPERTY OF IBM                         */ 00140000
*/*     5650-ZOS COPYRIGHT IBM CORP. 1987, 2021                      */ 00150000
*/*                                                                  */ 00160000
*/*    STATUS= HBB77D0                                               */ 00170000
*/*                                                                  */ 00180000
*/***END_OF_PROPRIETARY_STATEMENT*************************************/ 00190000
*/*                                                                  */ 00200000
*/*    FUNCTION = This macro provides the constants for JDT defined  */ 00210000
*/*               keywords needed by the caller of Dynamic           */ 00220000
*/*               Allocation.                                        */ 00230000
*/*                                                                  */ 00240000
*/*01* EXTERNAL CLASSIFICATION:                                  @L6A*/ 00250000
*/*02* DMTI: BASE                                                @L6A*/ 00260000
*/*02* GUPI: INCLUDE                                             @L6A*/ 00270000
*/*01* END OF EXTERNAL CLASSIFICATION:                           @L6A*/ 00280000
*/*                                                                  */ 00290000
*/*    NOTES =                                                   @L3A*/ 00300000
*/*                                                              @L3A*/ 00310000
*/*        Bilingual Mapping Macro (PL/AS and BAL)               @L3A*/ 00320000
*/*                                                              @L3A*/ 00330000
*/*        Any new JDT defined DD keyword should be defined in this  */ 00340000
*/*        mapping in order to allow both IEFZB4D2 and IEFSJKEY to   */ 00350000
*/*        include this.                                         @L3M*/ 00360000
*/*                                                                  */ 00370000
*/*        Review any new key added to this macro to determine   @L6A*/ 00380000
*/*        if it should be listed in IEFSJKEY as a PSPI key.     @L6A*/ 00390000
*/*                                                                  */ 00400000
*/*        There are three separate definition sections for the  @L3A*/ 00410000
*/*        keys in this macro:                                   @L3A*/ 00420000
*/*          Allocation   -  x'8000' range; default list; 'SJVL' @L3A*/ 00430000
*/*                          mask indicators are displayed only  @L3A*/ 00440000
*/*                          with this set (see PRFX keyword).   @L3A*/ 00450000
*/*          Retrieval    -  x'C000' range                       @L3A*/ 00460000
*/*          Unallocation -  x'8000' range, but specially        @L3A*/ 00470000
*/*                          defined by Allocation component     @L3A*/ 00480000
*/*          Retrieval Input - x'8000' range, but specially      @L4A*/ 00490000
*/*                          defined by Allocation component     @L4A*/ 00500000
*/*                                                                  */ 00510000
*/*    MODULE TYPE = MACRO                                           */ 00520000
*/*                                                                  */ 00530000
*/*    INVOCATION =                                                  */ 00540000
*/*                                                                  */ 00550000
*/*        PL/S -                                                    */ 00560000
*/* ?IEFSJDKY PRFX(1 to 4 chars) INFORET(YES!NO) UNALLOC(YES!NO) @L3C*/ 00570000
*/*                                                                  */ 00580000
*/*           PL/S invokers must include the EPILOG macro.       @L3A*/ 00590000
*/*           The invoker of the IEFSJDKY macro may wish to      @L3A*/ 00600000
*/*           avoid using a line comment with the macro          @L3A*/ 00610000
*/*           invocation because the comment will appear after   @L3A*/ 00620000
*/*           the key definitions.                               @L3A*/ 00630000
*/*                                                                  */ 00640000
*/*        BAL  -                                                    */ 00650000
*/* IEFSJDKY PRFX= 1 to 4 chars, INFORET=YES!NO, UNALLOC=YES!NO  @L3C*/ 00660000
*/*                                                                  */ 00670000
*/*    PARAMETER DESCRIPTION =                                   @L3A*/ 00680000
*/*                                                                  */ 00690000
*/*      PARAMETER = PRFX                                        @L3A*/ 00700000
*/*                                                                  */ 00710000
*/*        DESCRIPTION = Specifies 1 to 4 characters that will   @L3A*/ 00720000
*/*                      be used as the first characters of the  @L3A*/ 00730000
*/*                      labels defined in this macro.  When     @L3A*/ 00740000
*/*                      PRFX is specified as something other    @L3A*/ 00750000
*/*                      than 'SJKY', the 'SJVL' mask indicators @L3A*/ 00760000
*/*                      are not expanded.                       @L3A*/ 00770000
*/*                      When PRFX is specified as 'DIN' and     @L4A*/ 00780000
*/*                      INFORET is specified as 'YES', the      @L4A*/ 00790000
*/*                      keys that can be used to supply input   @L4A*/ 00800000
*/*                      to Information Retrieval will be        @L4A*/ 00810000
*/*                      generated.                              @L4A*/ 00820000
*/*                                                                  */ 00830000
*/*                                                                  */ 00840000
*/*        TYPE = Keyword                                        @L3A*/ 00850000
*/*                                                                  */ 00860000
*/*        FORM = 1 to 4 character constant                      @L3A*/ 00870000
*/*                                                                  */ 00880000
*/*        DEFAULT = SJKY                                        @L3A*/ 00890000
*/*                                                                  */ 00900000
*/*      PARAMETER = INFORET                                     @L3A*/ 00910000
*/*                                                                  */ 00920000
*/*        DESCRIPTION = Specifies whether or not the retrieval  @L3A*/ 00930000
*/*                      form of the keys (x'C000' range) be     @L3A*/ 00940000
*/*                      used.  When INFORET is specified as     @L4C*/ 00950000
*/*                      'YES' and PRFX is specified as 'DIN'    @L4A*/ 00960000
*/*                      the Information Retrieval input keys    @L4A*/ 00970000
*/*                      will be generated (x'8000' range).      @L4A*/ 00980000
*/*                                                                  */ 00990000
*/*        TYPE = Keyword                                        @L3A*/ 01000000
*/*                                                                  */ 01010000
*/*        FORM = Character value 'YES' to get retrieval keys,   @L3A*/ 01020000
*/*               or 'NO' to get default allocation keys or      @L3A*/ 01030000
*/*               another specified set.                         @L3A*/ 01040000
*/*                                                                  */ 01050000
*/*        DEFAULT = NO                                          @L3A*/ 01060000
*/*                                                                  */ 01070000
*/*      PARAMETER = UNALLOC                                     @L3A*/ 01080000
*/*                                                                  */ 01090000
*/*        DESCRIPTION = Specifies whether or not the            @L3A*/ 01100000
*/*                      unallocation set of keys (x'8000'       @L3A*/ 01110000
*/*                      range) defined by Allocation component  @L3A*/ 01120000
*/*                      be used.                                @L3A*/ 01130000
*/*                                                                  */ 01140000
*/*        TYPE = Keyword                                        @L3A*/ 01150000
*/*                                                                  */ 01160000
*/*        FORM = Character value 'YES' to get unallocation keys,@L3A*/ 01170000
*/*               or 'NO' to get default allocation keys or      @L3A*/ 01180000
*/*               another specified set.                         @L3A*/ 01190000
*/*                                                                  */ 01200000
*/*        DEFAULT = NO                                          @L3A*/ 01210000
*/*                                                                  */ 01220000
*/*    PARAMETER INTERDEPENDENCIES =                             @L3A*/ 01230000
*/*           - PRFX may be specified with either of the other   @L3A*/ 01240000
*/*             two keywords.                                    @L3A*/ 01250000
*/*           - INFORET and UNALLOC may both be specified, but   @L3A*/ 01260000
*/*             only if both do not indicate YES.                @L3A*/ 01270000
*/*           - To generate the Information Retrieval input      @L4A*/ 01280000
*/*             keys, INFORET must be specified as 'YES' and     @L4A*/ 01290000
*/*             PRFX must be specified as 'DIN'.                 @L4A*/ 01300000
*/*                                                                  */ 01310000
*/*    RESTRICTIONS =                                            @L4A*/ 01320000
*/*           - The information retrieval input keys (generated  @L4A*/ 01330000
*/*             when INFORET=YES and PRFX=DIN) will generate     @L4A*/ 01340000
*/*             some 8 character constant names.  This means     @L4A*/ 01350000
*/*             that if the caller specifies a prefix longer     @L4A*/ 01360000
*/*             than 3 characters, constants longer than 8       @L4A*/ 01370000
*/*             characters will be generated.                    @L4A*/ 01380000
*/*                                                                  */ 01390000
*/*    DSECT NAME = None                                         @P4A*/ 01400000
*/*                                                                  */ 01410000
*/*    EYE CATCHER = None                                        @P4A*/ 01420000
*/*     OFFSET = N/A                                             @P4A*/ 01430000
*/*     LENGTH = N/A                                             @P4A*/ 01440000
*/*                                                                  */ 01450000
*/*    CREATED BY = N/A                                          @L3A*/ 01460000
*/*                                                                  */ 01470000
*/*    POINTED TO BY = N/A                                       @L3A*/ 01480000
*/*                                                                  */ 01490000
*/*    DELETED BY = N/A                                          @L3A*/ 01500000
*/*                                                                  */ 01510000
*/*    SERIALIZATION = None                                      @L3A*/ 01520000
*/*                                                                  */ 01530000
*/*    STORAGE ATTRIBUTES = None                                 @P4C*/ 01540000
*/*                                                                  */ 01550000
*/*      ALLOCATION METHOD = N/A                                 @P4A*/ 01560000
*/*      SUBPOOL           = N/A                                 @P4A*/ 01570000
*/*      KEY               = N/A                                 @P4A*/ 01580000
*/*      RESIDENCY         = N/A                                 @P4A*/ 01590000
*/*      SIZE              = N/A                                 @P4A*/ 01600000
*/*      FREQUENCY         = N/A                                 @P4A*/ 01610000
*/*                                                                  */ 01620000
*/*    COMPONENT =  Scheduler JCL Facility (BB131)               @L6C*/ 01630000
*/*                                                                  */ 01640000
*/*    DISTRIBUTION LIBRARY = AMACLIB                            @L3A*/ 01650000
*/*                                                                  */ 01660000
*/*    MESSAGES =                                                @L3A*/ 01670000
*/*   MNOTE 12,'AHA0010 IEFSJDKY ERROR:  INFORET=YES AND UNALLOC=YES */ 01680000
*/*             ARE MUTUALLY EXCLUSIVE.'                         @L3A*/ 01690000
*/*                                                                  */ 01700000
*/*    CHANGE ACTIVITY = L0,P1,P2,L1,D1,L2,L3,L4,D2,01,L5,L6     @L6C*/ 01710000
*/*                                                                  */ 01720000
*/* $L0= SMSSTG2 JBB2223 870520 PDN4: STOR MGMT SUBSYS STG2 SUPT @L0A*/ 01730000
*/* $P1= PC20266 JBB2223 870520 PDN4: STOR MGMT SUBSYS STG2 SUPT @P1A*/ 01740000
*/* $P2= PC20307 JBB2223 870629 PDN4: STOR MGMT SUBSYS STG2 SUPT @P2A*/ 01750000
*/* $L1= ILIBS   JBB3311 880302 PDJY: ILIB Support               @L1A*/ 01760000
*/* $D1= DCR0018 JBB3313 880809 PDY1: Add CNTL                   @D1A*/ 01770000
*/* $P3= PGP0139 JBB3313 881215 PDY1: PTM 139                    @P3A*/ 01780000
*/* $L2= EMVS2   HBB4410 880905 PDKK: Enterprise II - ESI        @L2A*/ 01790000
*/* $L3= EMVS2   HBB4410 881216 PDZ1: Enterprise II - ESI        @L3A*/ 01800000
*/* $L4= POSIX   HBB4430 911028 PDCL: OPEN/MVS Support           @L4A*/ 01810000
*/* $D2= DKB0084 HBB4430 920429 PDCL: OPEN/MVS Support           @D2A*/ 01820000
*/* $01= OW02403 HBB5510 940225 PDH1: OPEN/MVS Support           @01A*/ 01830000
*/* $L5= SDSHS   HBB5520 930920 PDCL: VSAM RLS Support           @L5A*/ 01840000
*/* $L6= UU      JBB5522 950622 PDBN: xSAM access to HFS         @L6A*/ 01850000
*/* $02= OW24652 HBB4430 970528 PDRR: LGSTREAM Support           @02A*/ 01860000
*/* $P4= PVT0160 HBB6606 970131 PDDH: SHOWHDR Compliance         @P4A*/ 01870000
*/* $03= OW32524 JBB6607 980501 PDDH: Planform 1728/1780 Support @03A*/ 01880000
*/* $04= OW44540 HBB7705 000501 PDOH: BLKSZLIM Support           @04A*/ 01890000
*/* $P5= PYV0012 HBB7707 011106 PDNN: Added DINRPCDS             @P5A*/ 01900000
*/* $L7= IH2     HBB7720 040131 PDOO: >64K track file size       @L7A*/ 01910000
*/*                                   support                    @L7A*/ 01920000
*/* $L8= TapeEnc HBB7740 060430 PDHV: Tape Encryption (Ventana4) @L8A*/ 01930000
*/*                                   support.                   @L8A*/ 01940000
*/* $P6= ME06663 HBB7740 060610 PDHV: Support Ventana4 DCR       @P6A*/ 01950000
*/* $P7= ME07220 HBB7740 060718 PDHV: Correct Ventana4 values    @P7A*/ 01960000
*/* $P8= ME08486 HBB7740 070110 PDOO: Fixed Copyright            @P8A*/ 01970000
*/* $L9= ME13876 HBB7760 080630 PDHV: Extended ATTRibutes Support    */ 01980000
*/*                                   for EAV2                   @L9A*/ 01990000
*/* $P9= ME14782 HBB7760 081025 PDTY: Change to SJKYEATT         @P9A*/ 02000000
*/* $05= OA25280 HBB7730 090120 PDHV: FILEDATA RECORD support        */ 02010000
*/*                                   Early rollup of OA25280    @05A*/ 02020000
*/* $LA= SMSR13D HBB7780 100331 PDHV: SMS Dependencies               */ 02030000
*/*                                   FREEVOL JCL keyword            */ 02040000
*/*                                   Feature ME18889            @LAA*/ 02050000
*/* $LB=BatchMod HBB7780 100630 PDHV: Batch Modernization            */ 02060000
*/*                                   Second parm on SPIN            */ 02070000
*/*                                   Feature ME19435            @LBA*/ 02080000
*/* $PA= ME19497 HBB7780 100714 PDHV: Fix constants              @PAA*/ 02090000
*/* $LC=JCLSYMB  HBB7790 110531 PDTY: JCL Symbolic Improvements      */ 02100000
*/*                                   Support SYMLIST on DD          */ 02110000
*/*                                   Feature ME21626            @LCA*/ 02120000
*/* $LD=SMSDEP2  HBB7790 120531 PDHV: SMS dependencies               */ 02130000
*/*                                   DD keyword MAXGENS, second     */ 02140000
*/*                                   parm on DSNTYPE                */ 02150000
*/*                                   Feature ME24145            @LDA*/ 02160000
*/* $LE=ME25483  HBB7790 130114 PDTA: GDGORDER JCL keyword           */ 02170000
*/*                                   Feature ME25483            @LEA*/ 02180000
*/* $PB=ME25675  HBB7790 130201 PDTA: Missing SYMLIST inforetrieval  */ 02190000
*/*                                   key                        @PBA*/ 02200000
*/* $06=OA42747  HBB7790 130730 PDTA: Misc corrections (TRSQ)    @06A*/ 02210000
*/* $LF=RODASD   HBB77B0 160330 PDHV: Read-only DASD support         */ 02220000
*/*                                   Work item W0114010         @LFA*/ 02230000
*/* $07=OA51076  HBB77A0 161231 PDHV: SMS dependency                 */ 02231000
*/*                                   Support DSKEYLBL           @07A*/ 02232000
*/* $LG=W383457  HBB77D0 200805 PDTA: Inforetrieval EATTR support    */ 02233000
*/*                                                              @LGA*/ 02234000
*/*                                                                  */ 02235000
*/** END OF SPECIFICATIONS *******************************************/ 02236000
*/* A 000000-999999                                              @L0A*/ 02237000
*/* C Eliminated branch to labels, to avoid duplicate labels     @P1A*/ 02238000
*/*   when invoked twice in the same module                      @P1A*/ 02239000
*/* C Changed to an executable macro, since DO/END statements    @P2A*/ 02240000
*/*   are not allowed in non-executable macros in a PLS3         @P2A*/ 02250000
*/*   environment                                                @P2A*/ 02260000
*/* A Support for new DSNTYPE keyword                            @L1A*/ 02270000
*/* A Add CNTL key                                               @D1A*/ 02280000
*/* D Deleted duplicated lines from rebase                       @P3A*/ 02290000
*/* A Support for new SPIN and SEGMENT Keywords                  @L2A*/ 02300000
*/* A Support for the UNALLOC request on the invocation.         @L3A*/ 02310000
*/* A Support for PATHOPTS, PATHMODE, PATH, PATHDISP keywords    @L4A*/ 02320000
*/* A Support for PIPE and HFS on DSNTYPE keyword                @L4A*/ 02330000
*/* C Changed constant definitions for SJVLRDON and SJVLWDON     @D2A*/ 02340000
*/*   on the PATHOPTS keyword                                    @D2A*/ 02350000
*/* A Support for OSYNC on PATHOPTS keyword                      @01A*/ 02360000
*/* A Added definition of the RLS keyword                        @L5A*/ 02370000
*/* A Defined FILEDATA keyword and external classification.      @L6A*/ 02380000
*/* A Added definition of the LGSTREAM Keyword                   @02A*/ 02390000
*/* A Added SHOWHDR details in prologue                          @P4A*/ 02400000
*/* A Added definition of the RLS=CRE option                     @03A*/ 02410000
*/* A Added definition of the CCSID Keyword                      @03A*/ 02420000
*/* A Added definition of the BLKSZLIM Keyword.                  @04A*/ 02430000
*/* A Added another assembler definition for x'C01B' since the   @P5A*/ 02440000
*/*   definition that is there now (CNDS) does not match the     @P5A*/ 02450000
*/*   PLX version.  The incorrect current version was left       @P5A*/ 02460000
*/*   since there may be some people who are using it.           @P5A*/ 02470000
*/* A Add support for EXTREQ, EXTPREF, BASIC and LARGE on the    @L7A*/ 02480000
*/*   DSNTYPE keyword.                                           @L7A*/ 02490000
*/* A Add support for KEYLABL1, KEYLABL2, KEYENCD1 and KEYENCD2  @L8A*/ 02500000
*/*   keywords for Ventana4 Tape Encryption support              @L8A*/ 02510000
*/* A Change values for KEYENCD1 and KEYENCD2                    @P6A*/ 02520000
*/* A Change equates for KEYLABL1, KEYLABL2, KEYENCD1, KEYENCD2  @P7A*/ 02530000
*/* A Add support for EATTR keyword with values NO and OPT -     @L9A*/ 02540000
*/*   for EAV2                                                   @L9A*/ 02550000
*/* C Change the PLX name of EATTR variable from SJKYEATTR to    @P9A*/ 02560000
*/*   SJKYEATT to avoid the conflict with the assembler name.    @P9A*/ 02570000
*/* A Add FILEDATA=RECORD for BSAM/QSAM                          @05A*/ 02580000
*/* A Add FREEVOL=END!EOV support                                @LAA*/ 02590000
*/* A Support SPIN interval (xxxxSPI2) for Batch Modernization   @LBA*/ 02600000
*/* A Correct SPIN key constants                                 @PAA*/ 02610000
*/* A Add SYMLIST=(symbol,..) support on DD statement            @LCA*/ 02620000
*/* C Added MAXGENS keyword on DD statement (for PDSEs) and      @LDA*/ 02630000
*/*   second parm (call it dsntype version) on DSNTYPE           @LDA*/ 02640000
*/* C Added GDGORDER keyword on DD statement                     @LEA*/ 02650000
*/* C Added SYMLIST information retrieval key                    @PBA*/ 02660000
*/* C Move allocation keys to allocation section. Removed        @06A*/ 02670000
*/*   comments about OA42358, as these are only applicable at    @06A*/ 02680000
*/*   HBB7790.                                                   @06A*/ 02690000
*/* A Declare SJKYROAC/SJKYROA2 keys and values for              @LFA*/ 02700000
*/*   ROACCESS (Read only DASD)                                  @LFA*/ 02710000
*/* A Add support for DSKEYLBL                                   @07A*/ 02720000
*/* A Add support for inforetrieval keyword for EATTR.           @LGA*/ 02730000
*/*******************************************************************/  02740000
*/*                                                                 */  02750000
*/*  Declaration of external macro variables                        */  02760000
*/*                                                                 */  02770000
*/**************************************************************@L3A*/  02780000
*                                                                       02790000
*DCL EHARC FIXED EXT;             /* Return code                @L3A*/  02800000
*                                                                       02810000
*EHARC=0;                         /* Initialize the return code @L3A*/  02820000
*/*******************************************************************/  02830000
*/*                                                                 */  02840000
*/*  Declaration of internal macro variables                        */  02850000
*/*                                                                 */  02860000
*/*******************************************************************/  02870000
*DCL ICOMCOL FIXED;                   /* Beginning column for           02880000
*                                        comments                   */  02890000
*DCL PREFIX CHAR;                     /* Prefix for variable name       02900000
*                                        of key declares            */  02910000
*DCL WHICHKEYS CHAR;                  /* Variable to indicate which     02920000
*                                        set of keys to process @L3A*/  02930000
*DCL IERRMSG CHAR;                    /* Error message          @L3A*/  02940000
*/********************************************************************/ 02950000
*/*                                                                  */ 02960000
*/* Initialize macro variables                                       */ 02970000
*/*                                                                  */ 02980000
*/********************************************************************/ 02990000
*ICOMCOL=MACRMAR-35;                  /* Set comment column         */  03000000
* IF NUMBER(PRFX) = 0 THEN PREFIX = 'SJKY';                             03010000
*  ELSE PREFIX = PRFX(1);                                               03020000
*/********************************************************************/ 03030000
*/*                                                                  */ 03040000
*/*          KEY CONSTANTS FOR 'DD'                                  */ 03050000
*/*                                                                  */ 03060000
*/********************************************************************/ 03070000
* IF ((NUMBER(UNALLOC)^=0) & (UNALLOC(1)='YES')) &                      03080000
*    ((NUMBER(INFORET)^=0) & (INFORET(1)='YES')) THEN                   03090000
*    WHICHKEYS = 'OVERONE';                               /*     @L3A*/ 03100000
*  ELSE                                                   /*     @L3A*/ 03110000
*    IF (NUMBER(INFORET)^=0) & (INFORET(1)='YES')  THEN                 03120000
*       WHICHKEYS = 'INFORET';                            /*     @L3A*/ 03130000
*     ELSE                                                /*     @L3A*/ 03140000
*       IF (NUMBER(UNALLOC)^=0) & (UNALLOC(1)='YES')  THEN              03150000
*          WHICHKEYS = 'UNALLOC';                         /*     @L3A*/ 03160000
*        ELSE                                             /*     @L3A*/ 03170000
*          WHICHKEYS = 'ALLOC';                           /*     @L3A*/ 03180000
* IF (WHICHKEYS = 'OVERONE') THEN DO; /* Mutual exclusive combo. @L3A*/ 03190000
*    EHARC = 12;                  /* Set error return code       @L3A*/ 03200000
*    IERRMSG = 'AHA0010 IEFSJDKY ERROR:  INFORET=YES AND ' !!           03210000
*              'UNALLOC=YES ARE MUTUALLY EXCLUSIVE.'; /* Prime          03220000
*                                                  message area  @L3A*/ 03230000
*    ANSWER MSG(IERRMSG) NORESCAN;  /* Put out message           @L3A*/ 03240000
*    ANSWER(COMMENT(IERRMSG)) COLUMN(10) NORESCAN;        /*     @L3A*/ 03250000
*    END;                         /* End mutual exclusive combo. @L3A*/ 03260000
*  ELSE                                                   /*     @L3A*/ 03270000
*   IF (WHICHKEYS = 'INFORET') THEN  DO;  /* Info retrieval keys @L3A*/ 03280000
*    IF (PREFIX = 'DIN') THEN        /* Prefix for info retrieval       03290000
*                                       input keys specified     @L4A*/ 03300000
*     DO;                  /* Generate info retrieval input keys @L4A*/ 03310000
*      ANSWER(COMMENT('SJF DD INFORMATION RETRIEVAL INPUT KEYS'))       03320000
*        COLUMN(MACCOL+2) NORESCAN; /* Generate comment line     @L4A*/ 03330000
*      ANSWER('DCL '!!PREFIX!!'PATH BIT(16) CONSTANT(''8017''X);')      03340000
*        COLUMN(MACCOL+2) NORESCAN; /* Generate PATH key         @L4A*/ 03350000
*      ANSWER(COMMENT('PATH')) COLUMN(ICOMCOL) NORESCAN; /* Generate    03360000
*                                             comment line       @L4A*/ 03370000
*                                                                       03380000
*     END;                 /* Generate info retrieval input keys @L4A*/ 03390000
*    ELSE                  /* Prefix not specified as 'DIN'      @L4A*/ 03400000
*     DO;                  /* Generate info retrieval keys       @L4A*/ 03410000
*ANSWER(COMMENT('SJF DD INFORMATION RETRIEVAL KEYS'))                   03420000
*   COLUMN(MACCOL+2) NORESCAN;                             /*    @L3A*/ 03430000
*ANSWER('DCL '!!PREFIX!!'CNTL BIT(16) CONSTANT(''C003''X);')            03440000
*   COLUMN(MACCOL+2) NORESCAN;         /*                        @D1A*/ 03450000
*ANSWER(COMMENT('CNTL')) COLUMN(ICOMCOL) NORESCAN; /*            @D1A*/ 03460000
*ANSWER('DCL '!!PREFIX!!'STCL BIT(16) CONSTANT(''C004''X);')            03470000
*   COLUMN(MACCOL+2) NORESCAN;                                          03480000
*ANSWER(COMMENT('STORCLAS')) COLUMN(ICOMCOL) NORESCAN;                  03490000
*ANSWER('DCL '!!PREFIX!!'MGCL BIT(16) CONSTANT(''C005''X);')            03500000
*   COLUMN(MACCOL+2) NORESCAN;                                          03510000
*ANSWER(COMMENT('MGMTCLAS')) COLUMN(ICOMCOL) NORESCAN;                  03520000
*ANSWER('DCL '!!PREFIX!!'DACL BIT(16) CONSTANT(''C006''X);')            03530000
*   COLUMN(MACCOL+2) NORESCAN;                                          03540000
*ANSWER(COMMENT('DATACLAS')) COLUMN(ICOMCOL) NORESCAN;                  03550000
*ANSWER('DCL '!!PREFIX!!'RECO BIT(16) CONSTANT(''C00B''X);')            03560000
*   COLUMN(MACCOL+2) NORESCAN;                                          03570000
*ANSWER(COMMENT('RECORG')) COLUMN(ICOMCOL) NORESCAN;                    03580000
*ANSWER('DCL '!!PREFIX!!'KEYO BIT(16) CONSTANT(''C00C''X);')            03590000
*   COLUMN(MACCOL+2) NORESCAN;                                          03600000
*ANSWER(COMMENT('KEYOFF')) COLUMN(ICOMCOL) NORESCAN;                    03610000
*ANSWER('DCL '!!PREFIX!!'REFD BIT(16) CONSTANT(''C00D''X);')            03620000
*   COLUMN(MACCOL+2) NORESCAN;                                          03630000
*ANSWER(COMMENT('REFDD')) COLUMN(ICOMCOL) NORESCAN;                     03640000
*ANSWER('DCL '!!PREFIX!!'SECM BIT(16) CONSTANT(''C00E''X);')            03650000
*   COLUMN(MACCOL+2) NORESCAN;                                          03660000
*ANSWER(COMMENT('SECMODEL')) COLUMN(ICOMCOL) NORESCAN;                  03670000
*ANSWER('DCL '!!PREFIX!!'LIKE BIT(16) CONSTANT(''C00F''X);')            03680000
*   COLUMN(MACCOL+2) NORESCAN;                                          03690000
*ANSWER(COMMENT('LIKE')) COLUMN(ICOMCOL) NORESCAN;                      03700000
*ANSWER('DCL '!!PREFIX!!'AVGR BIT(16) CONSTANT(''C010''X);')            03710000
*   COLUMN(MACCOL+2) NORESCAN;                                          03720000
*ANSWER(COMMENT('AVGREC')) COLUMN(ICOMCOL) NORESCAN;                    03730000
*ANSWER('DCL '!!PREFIX!!'DSNT BIT(16) CONSTANT(''C012''X);')            03740000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @L1A*/ 03750000
*ANSWER(COMMENT('DSNTYPE')) COLUMN(ICOMCOL) NORESCAN;     /*     @L1A*/ 03760000
*ANSWER('DCL '!!PREFIX!!'SPIN BIT(16) CONSTANT(''C013''X);')            03770000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @L2A*/ 03780000
*ANSWER(COMMENT('SPIN'))    COLUMN(ICOMCOL) NORESCAN;     /*     @L2A*/ 03790000
*ANSWER('DCL '!!PREFIX!!'SEGM BIT(16) CONSTANT(''C014''X);')            03800000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @L2A*/ 03810000
*ANSWER(COMMENT('SEGMENT')) COLUMN(ICOMCOL) NORESCAN;     /*     @L2A*/ 03820000
*                                                                       03830000
*ANSWER('DCL '!!PREFIX!!'PATH BIT(16) CONSTANT(''C017''X);')            03840000
*   COLUMN(MACCOL+2) NORESCAN;  /* Generate PATH key             @L4A*/ 03850000
*ANSWER(COMMENT('PATH')) COLUMN(ICOMCOL) NORESCAN; /* Generate          03860000
*                                                  PATH comment  @L4A*/ 03870000
*                                                                       03880000
*ANSWER('DCL '!!PREFIX!!'POPT BIT(16) CONSTANT(''C018''X);')            03890000
*   COLUMN(MACCOL+2) NORESCAN;  /* Generate PATHOPTS key         @L4A*/ 03900000
*ANSWER(COMMENT('PATHOPTS')) COLUMN(ICOMCOL) NORESCAN; /* Generate      03910000
*                                              PATHOPTS comment  @L4A*/ 03920000
*                                                                       03930000
*ANSWER('DCL '!!PREFIX!!'PMDE BIT(16) CONSTANT(''C019''X);')            03940000
*   COLUMN(MACCOL+2) NORESCAN;  /* Generate PATHMODE key         @L4A*/ 03950000
*ANSWER(COMMENT('PATHMODE')) COLUMN(ICOMCOL) NORESCAN; /* Generate      03960000
*                                              PATHMODE comment  @L4A*/ 03970000
*                                                                       03980000
*ANSWER('DCL '!!PREFIX!!'PNDS BIT(16) CONSTANT(''C01A''X);')            03990000
*   COLUMN(MACCOL+2) NORESCAN;       /* Generate PATHDISP key for       04000000
*                                       normal disposition       @L4A*/ 04010000
*ANSWER(COMMENT('PATHDISP - Normal disposition')) COLUMN(ICOMCOL)       04020000
*   NORESCAN;             /* Generate normal disposition comment @L4A*/ 04030000
*                                                                       04040000
*ANSWER('DCL '!!PREFIX!!'PCDS BIT(16) CONSTANT(''C01B''X);')            04050000
*   COLUMN(MACCOL+2) NORESCAN;       /* Generate PATHDISP key for       04060000
*                                       conditional disposition  @L4A*/ 04070000
*ANSWER(COMMENT('PATHDISP - Conditional disposition')) COLUMN(ICOMCOL)  04080000
*   NORESCAN;        /* Generate conditional disposition comment @L4A*/ 04090000
*                                                                       04100000
*ANSWER('DCL '!!PREFIX!!'FDAT BIT(16) CONSTANT(''C01D''X);')            04110000
*   COLUMN(MACCOL+2) NORESCAN;       /* Generate FILEDATA key    @L6A*/ 04120000
*ANSWER(COMMENT('FILEDATA - File organization')) COLUMN(ICOMCOL)        04130000
*   NORESCAN;        /* Generate FILEDATA comment                @L6A*/ 04140000
*                                                                       04150000
*ANSWER('DCL '!!PREFIX!!'EATT BIT(16) CONSTANT(''C028''X);')            04160000
*   COLUMN(MACCOL+2) NORESCAN;       /* Generate EATTR    key    @LGA*/ 04170000
*ANSWER(COMMENT('EATT - EATTR Extended Attributes for data sets'))      04180000
*   COLUMN(ICOMCOL) NORESCAN; /* Generate EATTR comment          @LGA*/ 04190000
*                                                                       04200000
*ANSWER('DCL '!!PREFIX!!'SPI2 BIT(16) CONSTANT(''C02A''X);')            04210000
*   COLUMN(MACCOL+2) NORESCAN;       /* Generate SPIN2    key    @L6A*/ 04220000
*ANSWER(COMMENT('SPI2 - SPIN interval')) COLUMN(ICOMCOL)                04230000
*   NORESCAN;        /* Generate SPIN interval comment           @L6A*/ 04231000
*                                                                       04232000
*ANSWER('DCL '!!PREFIX!!'SYML BIT(16) CONSTANT(''C02B''X);')            04233000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @PBA*/ 04234000
*ANSWER(COMMENT('SYML - SYMLIST '))  COLUMN(ICOMCOL)                    04235000
*   NORESCAN;                  /* Generate comment for SYMLIST   @PBA*/ 04236000
*                                                                       04237000
*ANSWER('DCL '!!PREFIX!!'DSNV BIT(16) CONSTANT(''C02C''X);')            04238000
*   COLUMN(MACCOL+2) NORESCAN;       /* Generate DSNTYPE vers    @LDA*/ 04239000
*ANSWER(COMMENT('DSNV - DSNTYPE version')) COLUMN(ICOMCOL)              04240000
*   NORESCAN;        /* Generate DSNTYPE vers  comment           @LDA*/ 04250000
*                                                                       04260000
*ANSWER('DCL '!!PREFIX!!'MAXG BIT(16) CONSTANT(''C02D''X);')            04270000
*   COLUMN(MACCOL+2) NORESCAN;       /* Generate MAXGENS key     @LDA*/ 04280000
*ANSWER(COMMENT('MAXG - MAXGENS'))                                      04290000
*   COLUMN(ICOMCOL) NORESCAN; /* Generate MAXGENS comment        @06C*/ 04300000
*                                                                       04310000
*ANSWER('DCL '!!PREFIX!!'GDGO BIT(16) CONSTANT(''C02E''X);')            04320000
*   COLUMN(MACCOL+2) NORESCAN;       /* Generate GDGORDER key    @LEA*/ 04330000
*ANSWER(COMMENT('GDGO - GDGORDER')) COLUMN(ICOMCOL)                     04340000
*   NORESCAN;        /* Generate GDGORDER comment                @LEA*/ 04350000
*                                                                       04360000
*ANSWER('DCL '!!PREFIX!!'ROAC BIT(16) CONSTANT(''C030''X);')            04370000
*   COLUMN(MACCOL+2) NORESCAN;       /* Generate ROACCESS key    @LFA*/ 04380000
*ANSWER(COMMENT('ROAC - first parm of ROACCESS')) COLUMN(ICOMCOL)       04390000
*   NORESCAN;        /* Generate ROACCESS comment                @LFA*/ 04400000
*                                                                       04410000
*ANSWER('DCL '!!PREFIX!!'ROA2 BIT(16) CONSTANT(''C031''X);')            04420000
*   COLUMN(MACCOL+2) NORESCAN;       /* Generate ROACCESS key    @LFA*/ 04430000
*ANSWER(COMMENT('ROA2 - second parm of ROACCESS')) COLUMN(ICOMCOL)      04440000
*   NORESCAN;        /* Generate ROACCESS comment                @LFA*/ 04450000
*                                                                       04460000
*ANSWER('DCL '!!PREFIX!!'DKYL BIT(16) CONSTANT(''C032''X);')            04470000
*   COLUMN(MACCOL+2) NORESCAN;       /* Generate DSKEYLBL key    @07A*/ 04480000
*ANSWER(COMMENT('DKYL - DSKEYLBL               ')) COLUMN(ICOMCOL)      04490000
*   NORESCAN;        /* Generate DSKEYLBL comment                @07A*/ 04500000
*                                                                       04510000
*ANSWER SKIP;                                             /*     @L3A*/ 04520000
*     END;                 /* Generate info retrieval keys       @L4A*/ 04530000
*    END;                             /* End info retrieval keys @L3A*/ 04540000
*                                                                       04550000
*  ELSE                                                   /*     @L3A*/ 04560000
*    IF (WHICHKEYS = 'UNALLOC') THEN  DO; /* Unalloc keys        @L3A*/ 04570000
*ANSWER(COMMENT('SJF DD UNALLOCATION KEYS'))                            04580000
*   COLUMN(MACCOL+2) NORESCAN;                             /*    @L3A*/ 04590000
*ANSWER('DCL '!!PREFIX!!'SPIN BIT(16) CONSTANT(''8013''X);')            04600000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @L3A*/ 04610000
*ANSWER(COMMENT('SPIN'))    COLUMN(ICOMCOL) NORESCAN;     /*     @L3A*/ 04620000
*IF PREFIX='SJKY' THEN DO;                                /*     @L3A*/ 04630000
*ANSWER(COMMENT('Values for SPIN keyword')) COLUMN(MACCOL+2)            04640000
*NORESCAN;                                                /*     @L3A*/ 04650000
*ANSWER('DCL SJVLSPUN BIT(8) CONSTANT(''80''X);')                       04660000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @L3A*/ 04670000
*ANSWER(COMMENT('UNALLOC')) COLUMN(ICOMCOL) NORESCAN;     /*     @L3A*/ 04680000
*ANSWER('DCL SJVLSPNO BIT(8) CONSTANT(''40''X);')                       04690000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @L3A*/ 04700000
*ANSWER(COMMENT('NO'))  COLUMN(ICOMCOL) NORESCAN;         /*     @L3A*/ 04710000
*ANSWER SKIP;                                             /*     @L3A*/ 04720000
*END;                                                                   04730000
*                                                                       04740000
*ANSWER('DCL '!!PREFIX!!'PATH BIT(16) CONSTANT(''8017''X);')            04750000
*   COLUMN(MACCOL+2) NORESCAN;         /* Generate PATH key      @L4A*/ 04760000
*ANSWER(COMMENT('PATH'))    COLUMN(ICOMCOL) NORESCAN; /* Generate       04770000
*                                         PATH comment           @L4A*/ 04780000
*                                                                       04790000
*ANSWER('DCL '!!PREFIX!!'OVPDS BIT(16) CONSTANT(''801A''X);')           04800000
*   COLUMN(MACCOL+2) NORESCAN;         /* Generate PATHDISP for         04810000
*                                         override disposition   @L4A*/ 04820000
*ANSWER(COMMENT('PATHDISP - Override Disposition'))                     04830000
*  COLUMN(ICOMCOL) NORESCAN;              /* Generate comment for       04840000
*                                             override PATHDISP  @L4A*/ 04850000
*ANSWER SKIP;                                             /*     @L4A*/ 04860000
*IF PREFIX='SJKY' THEN         /* Check prefix to determine if          04870000
*                                 parameter constants needed     @L4A*/ 04880000
* DO;                          /* Generate parameter constants   @L4A*/ 04890000
*  ANSWER(COMMENT('Values for PATHDISP - Override Disposition'))        04900000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate comment for constants @L4A*/ 04910000
*  ANSWER('DCL SJVLKEEP BIT(8) CONSTANT(''08''X);')                     04920000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for KEEP     @L4A*/ 04930000
*  ANSWER(COMMENT('KEEP')) COLUMN(ICOMCOL) NORESCAN; /* Generate        04940000
*                                       comment for KEEP         @L4A*/ 04950000
*  ANSWER('DCL SJVLDELE BIT(8) CONSTANT(''04''X);')                     04960000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for DELETE   @L4A*/ 04970000
*  ANSWER(COMMENT('DELETE')) COLUMN(ICOMCOL) NORESCAN; /* Generate      04980000
*                                        comment for DELETE      @L4A*/ 04990000
* END;                         /* Generate parameter constants   @L4A*/ 05000000
*ANSWER('DCL '!!PREFIX!!'SPI2 BIT(16) CONSTANT(''802A''X);')            05010000
*   COLUMN(MACCOL+2) NORESCAN;         /* Generate SPIN interval        05020000
*                                                                @L4A*/ 05030000
*ANSWER(COMMENT('SPIN INTERVAL                  '))                     05040000
*  COLUMN(ICOMCOL) NORESCAN;              /* Generate comment for       05050000
*                                             SPIN interval      @L4A*/ 05060000
*ANSWER SKIP;                                             /*     @L4A*/ 05070000
*      END;                            /* End unalloc keys       @L3A*/ 05080000
*                                                                       05090000
*ELSE DO;                              /* Allocation keys        @L3A*/ 05100000
*ANSWER(COMMENT('SJF DD ALLOCATION KEYS'))                              05110000
*   COLUMN(MACCOL+2) NORESCAN;                             /*    @L3A*/ 05120000
*ANSWER('DCL '!!PREFIX!!'CNTL BIT(16) CONSTANT(''8003''X);')            05130000
*   COLUMN(MACCOL+2) NORESCAN;         /*                        @D1A*/ 05140000
*ANSWER(COMMENT('CNTL')) COLUMN(ICOMCOL) NORESCAN; /*            @D1A*/ 05150000
*ANSWER('DCL '!!PREFIX!!'STCL BIT(16) CONSTANT(''8004''X);')            05160000
*   COLUMN(MACCOL+2) NORESCAN;                                          05170000
*ANSWER(COMMENT('STORCLAS')) COLUMN(ICOMCOL) NORESCAN;                  05180000
*ANSWER('DCL '!!PREFIX!!'MGCL BIT(16) CONSTANT(''8005''X);')            05190000
*   COLUMN(MACCOL+2) NORESCAN;                                          05200000
*ANSWER(COMMENT('MGMTCLAS')) COLUMN(ICOMCOL) NORESCAN;                  05210000
*ANSWER('DCL '!!PREFIX!!'DACL BIT(16) CONSTANT(''8006''X);')            05220000
*   COLUMN(MACCOL+2) NORESCAN;                                          05230000
*ANSWER(COMMENT('DATACLAS')) COLUMN(ICOMCOL) NORESCAN;                  05240000
*ANSWER('DCL '!!PREFIX!!'RECO BIT(16) CONSTANT(''800B''X);')            05250000
*   COLUMN(MACCOL+2) NORESCAN;                                          05260000
*ANSWER(COMMENT('RECORG')) COLUMN(ICOMCOL) NORESCAN;                    05270000
*IF PREFIX='SJKY' THEN DO;                                              05280000
*ANSWER(COMMENT('Values for RECORG keyword')) COLUMN(MACCOL+2)          05290000
*NORESCAN;                                                              05300000
*ANSWER('DCL SJVLROKS BIT(8) CONSTANT(''80''X);')                       05310000
*   COLUMN(MACCOL+2) NORESCAN;                                          05320000
*ANSWER(COMMENT('KS - Key Sequence')) COLUMN(ICOMCOL) NORESCAN;         05330000
*ANSWER('DCL SJVLROES BIT(8) CONSTANT(''40''X);')                       05340000
*   COLUMN(MACCOL+2) NORESCAN;                                          05350000
*ANSWER(COMMENT('ES - Entry Sequence')) COLUMN(ICOMCOL) NORESCAN;       05360000
*ANSWER('DCL SJVLRORR BIT(8) CONSTANT(''20''X);')                       05370000
*   COLUMN(MACCOL+2) NORESCAN;                                          05380000
*ANSWER(COMMENT('RR - Relative Record')) COLUMN(ICOMCOL) NORESCAN;      05390000
*ANSWER('DCL SJVLROLS BIT(8) CONSTANT(''10''X);')                       05400000
*   COLUMN(MACCOL+2) NORESCAN;                                          05410000
*ANSWER(COMMENT('LS - Linear Space')) COLUMN(ICOMCOL) NORESCAN;         05420000
*END;                                                                   05430000
*ANSWER('DCL '!!PREFIX!!'KEYO BIT(16) CONSTANT(''800C''X);')            05440000
*   COLUMN(MACCOL+2) NORESCAN;                                          05450000
*ANSWER(COMMENT('KEYOFF')) COLUMN(ICOMCOL) NORESCAN;                    05460000
*ANSWER('DCL '!!PREFIX!!'REFD BIT(16) CONSTANT(''800D''X);')            05470000
*   COLUMN(MACCOL+2) NORESCAN;                                          05480000
*ANSWER(COMMENT('REFDD')) COLUMN(ICOMCOL) NORESCAN;                     05490000
*ANSWER('DCL '!!PREFIX!!'SECM BIT(16) CONSTANT(''800E''X);')            05500000
*   COLUMN(MACCOL+2) NORESCAN;                                          05510000
*ANSWER(COMMENT('SECMODEL')) COLUMN(ICOMCOL) NORESCAN;                  05520000
*IF PREFIX='SJKY' THEN DO;                                              05530000
*ANSWER(COMMENT('Values for SECMODEL keyword')) COLUMN(MACCOL+2)        05540000
*NORESCAN;                                                              05550000
*ANSWER('DCL SJVLGENR BIT(8) CONSTANT(''80''X);')                       05560000
*   COLUMN(MACCOL+2) NORESCAN;                                          05570000
*ANSWER(COMMENT('GENERIC option')) COLUMN(ICOMCOL) NORESCAN;            05580000
*END;                                                                   05590000
*ANSWER('DCL '!!PREFIX!!'LIKE BIT(16) CONSTANT(''800F''X);')            05600000
*   COLUMN(MACCOL+2) NORESCAN;                                          05610000
*ANSWER(COMMENT('LIKE')) COLUMN(ICOMCOL) NORESCAN;                      05620000
*ANSWER('DCL '!!PREFIX!!'AVGR BIT(16) CONSTANT(''8010''X);')            05630000
*   COLUMN(MACCOL+2) NORESCAN;                                          05640000
*ANSWER(COMMENT('AVGREC')) COLUMN(ICOMCOL) NORESCAN;                    05650000
*IF PREFIX='SJKY' THEN DO;                                              05660000
*ANSWER(COMMENT('Values for AVGREC keyword')) COLUMN(MACCOL+2)          05670000
*NORESCAN;                                                              05680000
*ANSWER('DCL SJVLARUN BIT(8) CONSTANT(''80''X);')                       05690000
*   COLUMN(MACCOL+2) NORESCAN;                                          05700000
*ANSWER(COMMENT('U - Unit (ie times 1)')) COLUMN(ICOMCOL) NORESCAN;     05710000
*ANSWER('DCL SJVLARKI BIT(8) CONSTANT(''40''X);')                       05720000
*   COLUMN(MACCOL+2) NORESCAN;                                          05730000
*ANSWER(COMMENT('K - Kilo (ie times 1000)')) COLUMN(ICOMCOL) NORESCAN;  05740000
*ANSWER('DCL SJVLARME BIT(8) CONSTANT(''20''X);')                       05750000
*   COLUMN(MACCOL+2) NORESCAN;                                          05760000
*ANSWER(COMMENT('M - Mega (ie times 1 million)')) COLUMN(ICOMCOL)       05770000
*NORESCAN;                                                              05780000
*END;                                                                   05790000
*ANSWER('DCL '!!PREFIX!!'DSNT BIT(16) CONSTANT(''8012''X);')            05800000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @L1A*/ 05810000
*ANSWER(COMMENT('DSNTYPE')) COLUMN(ICOMCOL) NORESCAN;     /*     @L1A*/ 05820000
*IF PREFIX='SJKY' THEN DO;                                /*     @L1A*/ 05830000
*ANSWER(COMMENT('Values for DSNTYPE keyword')) COLUMN(MACCOL+2)         05840000
*NORESCAN;                                                /*     @L1A*/ 05850000
*ANSWER('DCL SJVLDTLI BIT(8) CONSTANT(''80''X);')                       05860000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @L1A*/ 05870000
*ANSWER(COMMENT('LIBRARY')) COLUMN(ICOMCOL) NORESCAN;     /*     @L1A*/ 05880000
*ANSWER('DCL SJVLDTPD BIT(8) CONSTANT(''40''X);')                       05890000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @L1A*/ 05900000
*ANSWER(COMMENT('PDS')) COLUMN(ICOMCOL) NORESCAN;         /*     @L1A*/ 05910000
*ANSWER('DCL SJVLPIPE BIT(8) CONSTANT(''20''X);')                       05920000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for PIPE     @L4A*/ 05930000
*ANSWER(COMMENT('PIPE')) COLUMN(ICOMCOL) NORESCAN; /* Generate          05940000
*                                              comment for PIPE  @L4A*/ 05950000
*ANSWER('DCL SJVLHFSI BIT(8) CONSTANT(''10''X);')                       05960000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for HFS      @L4A*/ 05970000
*ANSWER(COMMENT('HFS')) COLUMN(ICOMCOL) NORESCAN; /* Generate           05980000
*                                              comment for HFS   @L4A*/ 05990000
*ANSWER('DCL SJVLEXR  BIT(8) CONSTANT(''08''X);')                       06000000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for EXTREQ   @L7A*/ 06010000
*ANSWER(COMMENT('EXTREQ')) COLUMN(ICOMCOL) NORESCAN; /* Generate        06020000
*                                           comment for EXTREQ   @L7A*/ 06030000
*ANSWER('DCL SJVLEXP  BIT(8) CONSTANT(''04''X);')                       06040000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for EXTPREF  @L7A*/ 06050000
*ANSWER(COMMENT('EXTPREF')) COLUMN(ICOMCOL) NORESCAN; /* Generate       06060000
*                                           comment for EXTPREF  @L7A*/ 06070000
*ANSWER('DCL SJVLBASC BIT(8) CONSTANT(''02''X);')                       06080000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for BASIC    @L7A*/ 06090000
*ANSWER(COMMENT('BASIC')) COLUMN(ICOMCOL) NORESCAN; /* Generate         06100000
*                                              comment for BASIC @L7A*/ 06110000
*ANSWER('DCL SJVLLARG BIT(8) CONSTANT(''01''X);')                       06120000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for LARGE    @L7A*/ 06130000
*ANSWER(COMMENT('LARGE')) COLUMN(ICOMCOL) NORESCAN; /* Generate         06140000
*                                              comment for LARGE @L7A*/ 06150000
*END;                                                                   06160000
*ANSWER('DCL '!!PREFIX!!'SPIN BIT(16) CONSTANT(''8013''X);')            06170000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @L2A*/ 06180000
*ANSWER(COMMENT('SPIN'))    COLUMN(ICOMCOL) NORESCAN;     /*     @L2A*/ 06190000
*IF PREFIX='SJKY' THEN DO;                                /*     @L2A*/ 06200000
*ANSWER(COMMENT('Values for SPIN keyword')) COLUMN(MACCOL+2)            06210000
*NORESCAN;                                                /*     @L2A*/ 06220000
*ANSWER('DCL SJVLSPUN BIT(8) CONSTANT(''80''X);')                       06230000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @L2A*/ 06240000
*ANSWER(COMMENT('UNALLOC')) COLUMN(ICOMCOL) NORESCAN;     /*     @L2A*/ 06250000
*ANSWER('DCL SJVLSPNO BIT(8) CONSTANT(''40''X);')                       06260000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @L2A*/ 06270000
*ANSWER(COMMENT('NO'))  COLUMN(ICOMCOL) NORESCAN;         /*     @L2A*/ 06280000
*END;                                                                   06290000
*ANSWER('DCL '!!PREFIX!!'SEGM BIT(16) CONSTANT(''8014''X);')            06300000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @L2A*/ 06310000
*ANSWER(COMMENT('SEGMENT')) COLUMN(ICOMCOL) NORESCAN;     /*     @L2A*/ 06320000
*                                                                       06330000
*ANSWER('DCL '!!PREFIX!!'PATH BIT(16) CONSTANT(''8017''X);')            06340000
*   COLUMN(MACCOL+2) NORESCAN;  /* Generate PATH key             @L4A*/ 06350000
*ANSWER(COMMENT('PATH')) COLUMN(ICOMCOL) NORESCAN; /* Generate          06360000
*                                                  PATH comment  @L4A*/ 06370000
*                                                                       06380000
*ANSWER('DCL '!!PREFIX!!'POPT BIT(16) CONSTANT(''8018''X);')            06390000
*   COLUMN(MACCOL+2) NORESCAN;  /* Generate PATHOPTS key         @L4A*/ 06400000
*ANSWER(COMMENT('PATHOPTS')) COLUMN(ICOMCOL) NORESCAN; /* Generate      06410000
*                                              PATHOPTS comment  @L4A*/ 06420000
*IF PREFIX='SJKY' THEN         /* Check prefix to determine if          06430000
*                                 parameter constants needed     @L4A*/ 06440000
* DO;                          /* Generate parameter constants   @L4A*/ 06450000
*  ANSWER(COMMENT('Values for PATHOPTS'))                               06460000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate comment for constants @L4A*/ 06470000
*  ANSWER('DCL SJVLSYNC BIT(32) CONSTANT(''00000100''X);')              06480000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for OSYNC    @01A*/ 06490000
*  ANSWER(COMMENT('OSYNC')) COLUMN(ICOMCOL) NORESCAN; /* Generate       06500000
*                                       comment for OSYNC        @01A*/ 06510000
*  ANSWER('DCL SJVLCEXL BIT(32) CONSTANT(''000000C0''X);')              06520000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for OCREXCL  @L4A*/ 06530000
*  ANSWER(COMMENT('OCREXCL')) COLUMN(ICOMCOL) NORESCAN; /* Generate     06540000
*                                       comment for OCREXCL      @L4A*/ 06550000
*  ANSWER('DCL SJVLCREA BIT(32) CONSTANT(''00000080''X);')              06560000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for OCREAT   @L4A*/ 06570000
*  ANSWER(COMMENT('OCREAT')) COLUMN(ICOMCOL) NORESCAN; /* Generate      06580000
*                                       comment for OCREAT       @L4A*/ 06590000
*  ANSWER('DCL SJVLEXCL BIT(32) CONSTANT(''00000040''X);')              06600000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for OEXCL    @L4A*/ 06610000
*  ANSWER(COMMENT('OEXCL')) COLUMN(ICOMCOL) NORESCAN; /* Generate       06620000
*                                       comment for OEXCL        @L4A*/ 06630000
*  ANSWER('DCL SJVLNOCT BIT(32) CONSTANT(''00000020''X);')              06640000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for ONOCT    @L4A*/ 06650000
*  ANSWER(COMMENT('ONOCT')) COLUMN(ICOMCOL) NORESCAN; /* Generate       06660000
*                                       comment for ONOCT        @L4A*/ 06670000
*  ANSWER('DCL SJVLTRUN BIT(32) CONSTANT(''00000010''X);')              06680000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for OTRUNC   @L4A*/ 06690000
*  ANSWER(COMMENT('OTRUNC')) COLUMN(ICOMCOL) NORESCAN; /* Generate      06700000
*                                       comment for OTRUNC       @L4A*/ 06710000
*  ANSWER('DCL SJVLAPPE BIT(32) CONSTANT(''00000008''X);')              06720000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for OAPPEND  @L4A*/ 06730000
*  ANSWER(COMMENT('OAPPEND')) COLUMN(ICOMCOL) NORESCAN; /* Generate     06740000
*                                       comment for OAPPEND      @L4A*/ 06750000
*  ANSWER('DCL SJVLNBLK BIT(32) CONSTANT(''00000004''X);')              06760000
*   COLUMN(MACCOL+2) NORESCAN;           /* Generate constant for       06770000
*                                           ONONBLOCK            @L4A*/ 06780000
*  ANSWER(COMMENT('ONONBLOCK')) COLUMN(ICOMCOL) NORESCAN; /*            06790000
*                               Generate comment for ONONBLOCK   @L4A*/ 06800000
*  ANSWER('DCL SJVLRDWR BIT(32) CONSTANT(''00000003''X);')              06810000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for ORDWR    @L4A*/ 06820000
*  ANSWER(COMMENT('ORDWR')) COLUMN(ICOMCOL) NORESCAN; /* Generate       06830000
*                                       comment for ORDWR        @L4A*/ 06840000
*  ANSWER('DCL SJVLRDON BIT(32) CONSTANT(''00000002''X);')              06850000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for ORDONLY  @D2C*/ 06860000
*  ANSWER(COMMENT('ORDONLY')) COLUMN(ICOMCOL) NORESCAN; /* Generate     06870000
*                                       comment for ORDONLY      @L4A*/ 06880000
*  ANSWER('DCL SJVLWDON BIT(32) CONSTANT(''00000001''X);')              06890000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for OWRONLY  @D2C*/ 06900000
*  ANSWER(COMMENT('OWRONLY')) COLUMN(ICOMCOL) NORESCAN; /* Generate     06910000
*                                       comment for OWRONLY      @L4A*/ 06920000
* END;                         /* Generate parameter constants   @L4A*/ 06930000
*                                                                       06940000
*ANSWER('DCL '!!PREFIX!!'PMDE BIT(16) CONSTANT(''8019''X);')            06950000
*   COLUMN(MACCOL+2) NORESCAN;  /* Generate PATHMODE key         @L4A*/ 06960000
*ANSWER(COMMENT('PATHMODE')) COLUMN(ICOMCOL) NORESCAN; /* Generate      06970000
*                                              PATHMODE comment  @L4A*/ 06980000
*IF PREFIX='SJKY' THEN         /* Check prefix to determine if          06990000
*                                 parameter constants needed     @L4A*/ 07000000
* DO;                          /* Generate parameter constants   @L4A*/ 07010000
*  ANSWER(COMMENT('Values for PATHMODE'))                               07020000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate comment for constants @L4A*/ 07030000
*  ANSWER('DCL SJVLSUID BIT(32) CONSTANT(''00000800''X);')              07040000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for SISUID   @L4A*/ 07050000
*  ANSWER(COMMENT('SISUID')) COLUMN(ICOMCOL) NORESCAN; /* Generate      07060000
*                                       comment for SISUID       @L4A*/ 07070000
*  ANSWER('DCL SJVLSGID BIT(32) CONSTANT(''00000400''X);')              07080000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for SISGID   @L4A*/ 07090000
*  ANSWER(COMMENT('SISGID')) COLUMN(ICOMCOL) NORESCAN; /* Generate      07100000
*                                       comment for SSIGID       @L4A*/ 07110000
*  ANSWER('DCL SJVLRUSR BIT(32) CONSTANT(''00000100''X);')              07120000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for SIRUSR   @L4A*/ 07130000
*  ANSWER(COMMENT('SIRUSR')) COLUMN(ICOMCOL) NORESCAN; /* Generate      07140000
*                                       comment for SIRUSR       @L4A*/ 07150000
*  ANSWER('DCL SJVLWUSR BIT(32) CONSTANT(''00000080''X);')              07160000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for SIWUSR   @L4A*/ 07170000
*  ANSWER(COMMENT('SIWUSR')) COLUMN(ICOMCOL) NORESCAN; /* Generate      07180000
*                                       comment for SIWUSR       @L4A*/ 07190000
*  ANSWER('DCL SJVLXUSR BIT(32) CONSTANT(''00000040''X);')              07200000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for SIXUSR   @L4A*/ 07210000
*  ANSWER(COMMENT('SIXUSR')) COLUMN(ICOMCOL) NORESCAN; /* Generate      07220000
*                                       comment for SIXUSR       @L4A*/ 07230000
*  ANSWER('DCL SJVLRWXU BIT(32) CONSTANT(''000001C0''X);')              07240000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for SIRWXU   @L4A*/ 07250000
*  ANSWER(COMMENT('SIRWXU')) COLUMN(ICOMCOL) NORESCAN; /* Generate      07260000
*                                       comment for SIRWXU       @L4A*/ 07270000
*  ANSWER('DCL SJVLRGRP BIT(32) CONSTANT(''00000020''X);')              07280000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for SIRGRP   @L4A*/ 07290000
*  ANSWER(COMMENT('SIRGRP')) COLUMN(ICOMCOL) NORESCAN; /* Generate      07300000
*                                       comment for SIRGRP       @L4A*/ 07310000
*  ANSWER('DCL SJVLWGRP BIT(32) CONSTANT(''00000010''X);')              07320000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for SIWGRP   @L4A*/ 07330000
*  ANSWER(COMMENT('SIWGRP')) COLUMN(ICOMCOL) NORESCAN; /* Generate      07340000
*                                       comment for SIWGRP       @L4A*/ 07350000
*  ANSWER('DCL SJVLXGRP BIT(32) CONSTANT(''00000008''X);')              07360000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for SIXGRP   @L4A*/ 07370000
*  ANSWER(COMMENT('SIXGRP')) COLUMN(ICOMCOL) NORESCAN; /* Generate      07380000
*                                       comment for SIXGRP       @L4A*/ 07390000
*  ANSWER('DCL SJVLRWXG BIT(32) CONSTANT(''00000038''X);')              07400000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for SIRWXG   @L4A*/ 07410000
*  ANSWER(COMMENT('SIRWXG')) COLUMN(ICOMCOL) NORESCAN; /* Generate      07420000
*                                       comment for SIRWXG       @L4A*/ 07430000
*  ANSWER('DCL SJVLROTH BIT(32) CONSTANT(''00000004''X);')              07440000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for SIROTH   @L4A*/ 07450000
*  ANSWER(COMMENT('SIROTH')) COLUMN(ICOMCOL) NORESCAN; /* Generate      07460000
*                                       comment for SIROTH       @L4A*/ 07470000
*  ANSWER('DCL SJVLWOTH BIT(32) CONSTANT(''00000002''X);')              07480000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for SIWOTH   @L4A*/ 07490000
*  ANSWER(COMMENT('SIWOTH')) COLUMN(ICOMCOL) NORESCAN; /* Generate      07500000
*                                       comment for SIWOTH       @L4A*/ 07510000
*  ANSWER('DCL SJVLXOTH BIT(32) CONSTANT(''00000001''X);')              07520000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for SIXOTH   @L4A*/ 07530000
*  ANSWER(COMMENT('SIXOTH')) COLUMN(ICOMCOL) NORESCAN; /* Generate      07540000
*                                       comment for SIXOTH       @L4A*/ 07550000
*  ANSWER('DCL SJVLRWXO BIT(32) CONSTANT(''00000007''X);')              07560000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for SIRWXO   @L4A*/ 07570000
*  ANSWER(COMMENT('SIRWXO')) COLUMN(ICOMCOL) NORESCAN; /* Generate      07580000
*                                       comment for SIRWXO       @L4A*/ 07590000
* END;                         /* Generate parameter constants   @L4A*/ 07600000
*                                                                       07610000
*ANSWER('DCL '!!PREFIX!!'PNDS BIT(16) CONSTANT(''801A''X);')            07620000
*   COLUMN(MACCOL+2) NORESCAN;       /* Generate PATHDISP key for       07630000
*                                       normal disposition       @L4A*/ 07640000
*ANSWER(COMMENT('PATHDISP - Normal disposition')) COLUMN(ICOMCOL)       07650000
*   NORESCAN;             /* Generate normal disposition comment @L4A*/ 07660000
*ANSWER('DCL '!!PREFIX!!'PCDS BIT(16) CONSTANT(''801B''X);')            07670000
*   COLUMN(MACCOL+2) NORESCAN;       /* Generate PATHDISP key for       07680000
*                                       conditional disposition  @L4A*/ 07690000
*ANSWER(COMMENT('PATHDISP - Conditional disposition')) COLUMN(ICOMCOL)  07700000
*   NORESCAN;        /* Generate conditional disposition comment @L4A*/ 07710000
*IF PREFIX='SJKY' THEN         /* Check prefix to determine if          07720000
*                                 parameter constants needed     @L4A*/ 07730000
* DO;                          /* Generate parameter constants   @L4A*/ 07740000
*  ANSWER(COMMENT('Values for PATHDISP'))                               07750000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate comment for constants @L4A*/ 07760000
*  ANSWER('DCL SJVLKEEP BIT(8) CONSTANT(''08''X);')                     07770000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for KEEP     @L4A*/ 07780000
*  ANSWER(COMMENT('KEEP')) COLUMN(ICOMCOL) NORESCAN; /* Generate        07790000
*                                       comment for KEEP         @L4A*/ 07800000
*  ANSWER('DCL SJVLDELE BIT(8) CONSTANT(''04''X);')                     07810000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for DELETE   @L4A*/ 07820000
*  ANSWER(COMMENT('DELETE')) COLUMN(ICOMCOL) NORESCAN; /* Generate      07830000
*                                        comment for DELETE      @L4A*/ 07840000
* END;                         /* Generate parameter constants   @L4A*/ 07850000
*ANSWER('DCL '!!PREFIX!!'RLS BIT(16) CONSTANT(''801C''X);')             07860000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate RLS key               @L5A*/ 07870000
*ANSWER(COMMENT('RLS - Record Level Sharing')) COLUMN(ICOMCOL)          07880000
*   NORESCAN;                  /* Generate comment for RLS       @L5A*/ 07890000
*IF PREFIX='SJKY' THEN         /* Check prefix to determine if          07900000
*                                 parameter constants needed     @L5A*/ 07910000
* DO;                          /* Generate parameter constants   @L5A*/ 07920000
*  ANSWER(COMMENT('Values for RLS'))                                    07930000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate comment for constants @L5A*/ 07940000
*  ANSWER('DCL SJVLNRI  BIT(8) CONSTANT(''80''X);')                     07950000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for NRI      @L5A*/ 07960000
*  ANSWER(COMMENT('NRI')) COLUMN(ICOMCOL) NORESCAN; /* Generate         07970000
*                                       comment for NRI          @L5A*/ 07980000
*  ANSWER('DCL SJVLCR   BIT(8) CONSTANT(''40''X);')                     07990000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for CR       @L5A*/ 08000000
*  ANSWER(COMMENT('CR')) COLUMN(ICOMCOL) NORESCAN; /* Generate          08010000
*                                        comment for CR          @L5A*/ 08020000
*  ANSWER('DCL SJVLCRE  BIT(8) CONSTANT(''20''X);')                     08030000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for CRE      @03A*/ 08040000
*  ANSWER(COMMENT('CRE')) COLUMN(ICOMCOL) NORESCAN; /* Generate         08050000
*                                        comment for CRE         @03A*/ 08060000
* END;                         /* Generate parameter constants   @L5A*/ 08070000
*ANSWER('DCL '!!PREFIX!!'FDAT BIT(16) CONSTANT(''801D''X);')            08080000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate FILEDATA key          @L6A*/ 08090000
*ANSWER(COMMENT('FILEDATA - File organization')) COLUMN(ICOMCOL)        08100000
*   NORESCAN;                  /* Generate comment for FILEDATA  @L6A*/ 08110000
*IF PREFIX='SJKY' THEN         /* Check prefix to determine if          08120000
*                                 parameter constants needed     @L6A*/ 08130000
* DO;                          /* Generate parameter constants   @L6A*/ 08140000
*  ANSWER(COMMENT('Values for FILEDATA'))                               08150000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate comment for constants @L6A*/ 08160000
*  ANSWER('DCL SJVLBIN  BIT(8) CONSTANT(''80''X);')                     08170000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for BINARY   @L6A*/ 08180000
*  ANSWER(COMMENT('BINARY')) COLUMN(ICOMCOL) NORESCAN; /* Generate      08190000
*                                       comment for BINARY       @L6A*/ 08200000
*  ANSWER('DCL SJVLTEXT BIT(8) CONSTANT(''40''X);')                     08210000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for TEXT     @L6A*/ 08220000
*  ANSWER(COMMENT('TEXT')) COLUMN(ICOMCOL) NORESCAN; /* Generate        08230000
*                                        comment for TEXT        @L6A*/ 08240000
*  ANSWER('DCL SJVLREC  BIT(8) CONSTANT(''20''X);')                     08250000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for RECORD   @05A*/ 08260000
*  ANSWER(COMMENT('RECORD')) COLUMN(ICOMCOL) NORESCAN; /* Generate      08270000
*                                        comment for RECORD      @05A*/ 08280000
* END;                         /* Generate parameter constants   @L6A*/ 08290000
*ANSWER('DCL '!!PREFIX!!'LGST BIT(16) CONSTANT(''801F''X);')            08300000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @02A*/ 08310000
*ANSWER(COMMENT('LGSTREAM - VSAM RLS LOG STREAM ')) COLUMN(ICOMCOL)     08320000
*   NORESCAN;                  /* Generate comment for LGSTREAM  @02A*/ 08330000
*ANSWER('DCL '!!PREFIX!!'DCCS BIT(16) CONSTANT(''8020''X);')            08340000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @03A*/ 08350000
*ANSWER(COMMENT('CCSID - Coded Character Set Identifier '))             08360000
*   COLUMN(ICOMCOL) NORESCAN;  /* Generate comment for CCSID     @03A*/ 08370000
*ANSWER('DCL '!!PREFIX!!'BSLM BIT(16) CONSTANT(''8022''X);')            08380000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @04A*/ 08390000
*ANSWER(COMMENT('BLKSZLIM - Block Size Limit '))                        08400000
*   COLUMN(ICOMCOL) NORESCAN;  /* Generate comment for BLKSZLIM  @04A*/ 08410000
*ANSWER('DCL '!!PREFIX!!'KYL1 BIT(16) CONSTANT(''8023''X);')            08420000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @L8A*/ 08430000
*ANSWER(COMMENT('KEYLABL1 - Tape Encryption Key Label 1      '))        08440000
*   COLUMN(ICOMCOL) NORESCAN;  /* Generate comment for KEYLABL1  @L8A*/ 08450000
*ANSWER('DCL '!!PREFIX!!'KYL2 BIT(16) CONSTANT(''8024''X);')            08460000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @L8A*/ 08470000
*ANSWER(COMMENT('KEYLABL2 - Tape Encryption Key Label 2      '))        08480000
*   COLUMN(ICOMCOL) NORESCAN;  /* Generate comment for KEYLABL2  @L8A*/ 08490000
*ANSWER('DCL '!!PREFIX!!'KYC1 BIT(16) CONSTANT(''8025''X);')            08500000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @L8A*/ 08510000
*ANSWER(COMMENT('KEYENCD1 - Tape Encryption Key Encoding 1   '))        08520000
*   COLUMN(ICOMCOL) NORESCAN;  /* Generate comment for KEYENCD1  @L8A*/ 08530000
*IF PREFIX='SJKY' THEN         /* Check prefix to determine if          08540000
*                                 parameter constants needed     @P7A*/ 08550000
* DO;                          /* Generate parameter constants   @P7A*/ 08560000
*  ANSWER(COMMENT('Values for SJVLKYC1'))                               08570000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate comment for constants @P7A*/ 08580000
*  ANSWER('DCL SJVLKE1L BIT(8) CONSTANT(''D3''X);')                     08590000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for LABEL    @P7A*/ 08600000
*  ANSWER(COMMENT('LABEL')) COLUMN(ICOMCOL) NORESCAN; /* Generate       08610000
*                                       comment for LABEL        @P7A*/ 08620000
*  ANSWER('DCL SJVLKE1H BIT(8) CONSTANT(''C8''X);')                     08630000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for HASH     @P7A*/ 08640000
*  ANSWER(COMMENT('HASH')) COLUMN(ICOMCOL) NORESCAN; /* Generate        08650000
*                                        comment for HASH        @P7A*/ 08660000
* END;                         /* Generate parameter constants   @P7A*/ 08670000
*ANSWER('DCL '!!PREFIX!!'KYC2 BIT(16) CONSTANT(''8026''X);')            08680000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @L8A*/ 08690000
*ANSWER(COMMENT('KEYENCD2 - Tape Encryption Key Encoding 2   '))        08700000
*   COLUMN(ICOMCOL) NORESCAN;  /* Generate comment for KEYENCD2  @L8A*/ 08710000
*IF PREFIX='SJKY' THEN         /* Check prefix to determine if          08720000
*                                 parameter constants needed     @P7A*/ 08730000
* DO;                          /* Generate parameter constants   @P7A*/ 08740000
*  ANSWER(COMMENT('Values for SJVLKYC2'))                               08750000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate comment for constants @P7A*/ 08760000
*  ANSWER('DCL SJVLKE2L BIT(8) CONSTANT(''D3''X);')                     08770000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for LABEL    @P7A*/ 08780000
*  ANSWER(COMMENT('LABEL')) COLUMN(ICOMCOL) NORESCAN; /* Generate       08790000
*                                       comment for LABEL        @P7A*/ 08800000
*  ANSWER('DCL SJVLKE2H BIT(8) CONSTANT(''C8''X);')                     08810000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for HASH     @P7A*/ 08820000
*  ANSWER(COMMENT('HASH')) COLUMN(ICOMCOL) NORESCAN; /* Generate        08830000
*                                        comment for HASH        @P7A*/ 08840000
* END;                         /* Generate parameter constants   @P7A*/ 08850000
*ANSWER('DCL '!!PREFIX!!'EATT BIT(16) CONSTANT(''8028''X);')            08860000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @P9C*/ 08870000
*ANSWER(COMMENT('EATTR - Extended Attributes for data sets'))           08880000
*   COLUMN(ICOMCOL) NORESCAN;  /* Generate comment for EATTR     @L9A*/ 08890000
*IF PREFIX='SJKY' THEN         /* Check prefix to determine if          08900000
*                                 parameter constants needed     @L9A*/ 08910000
* DO;                          /* Generate parameter constants   @L9A*/ 08920000
*  ANSWER(COMMENT('Values for SJVLEATT'))                               08930000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate comment for constants @L9A*/ 08940000
*  ANSWER('DCL SJVLEATN BIT(8) CONSTANT(''01''X);')                     08950000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for NO       @L9A*/ 08960000
*  ANSWER(COMMENT('NO')) COLUMN(ICOMCOL) NORESCAN; /* Generate          08970000
*                                       comment for EATTR-NO     @L9A*/ 08980000
*  ANSWER('DCL SJVLEATO BIT(8) CONSTANT(''02''X);')                     08990000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for OPT      @L9A*/ 09000000
*  ANSWER(COMMENT('OPT')) COLUMN(ICOMCOL) NORESCAN; /* Generate         09010000
*                                       comment for EATTR-OPT    @L9A*/ 09020000
* END;                         /* Generate parameter constants   @L9A*/ 09030000
*ANSWER('DCL '!!PREFIX!!'FRVL BIT(16) CONSTANT(''8029''X);')            09040000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @LAA*/ 09050000
*ANSWER(COMMENT('FREEVOL - FREEVOL for tape volumes       '))           09060000
*   COLUMN(ICOMCOL) NORESCAN;  /* Generate comment for FREEVOL   @LAA*/ 09070000
*IF PREFIX='SJKY' THEN         /* Check prefix to determine if          09080000
*                                 parameter constants needed     @LAA*/ 09090000
* DO;                          /* Generate parameter constants   @LAA*/ 09100000
*  ANSWER(COMMENT('Values for SJVLFRVL'))                               09110000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate comment for constants @LAA*/ 09120000
*  ANSWER('DCL SJVLFRVE BIT(8) CONSTANT(''01''X);')                     09130000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for END      @LAA*/ 09140000
*  ANSWER(COMMENT('END')) COLUMN(ICOMCOL) NORESCAN; /* Generate         09150000
*                                       comment for FREEVOL-END  @LAA*/ 09160000
*  ANSWER('DCL SJVLFRVV BIT(8) CONSTANT(''02''X);')                     09170000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for EOV      @LAA*/ 09180000
*  ANSWER(COMMENT('EOV')) COLUMN(ICOMCOL) NORESCAN; /* Generate         09190000
*                                       comment for FREEVOL-EOV  @LAA*/ 09200000
* END;                         /* Generate parameter constants   @LAA*/ 09210000
*                                                                       09220000
*ANSWER('DCL '!!PREFIX!!'SPI2 BIT(16) CONSTANT(''802A''X);'); /* @LBA*/ 09230000
*ANSWER(COMMENT('SPI2 - SPIN interval for SYSOUT'))                     09240000
*   COLUMN(ICOMCOL) NORESCAN;  /* Generate comment for SPIN-INT  @LBA*/ 09250000
*                                                                       09260000
*ANSWER('DCL '!!PREFIX!!'SYML BIT(16) CONSTANT(''802B''X);')            09270000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @LCA*/ 09280000
*ANSWER(COMMENT('SYMLIST ON DD STATEMENT '))  COLUMN(ICOMCOL)           09290000
*   NORESCAN;                  /* Generate comment for SYMLIST   @LCA*/ 09300000
*                                                                       09310000
*ANSWER('DCL '!!PREFIX!!'DSNV BIT(16) CONSTANT(''802C''X);')            09320000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @LDA*/ 09330000
*ANSWER(COMMENT('DSNTYPE VERSION on DD statement '))  COLUMN(ICOMCOL)   09340000
*   NORESCAN;                  /* Generate comment for DSNTYPE   @LDA*/ 09350000
*                                                                       09360000
*ANSWER('DCL '!!PREFIX!!'MAXG BIT(16) CONSTANT(''802D''X);')            09370000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @LDA*/ 09380000
*ANSWER(COMMENT('MAXGENS'))                                             09390000
*  COLUMN(ICOMCOL) NORESCAN;   /* Generate comment for MAXGENS   @06C*/ 09400000
*                                                                       09410000
*ANSWER('DCL '!!PREFIX!!'GDGO BIT(16) CONSTANT(''802E''X);')            09420000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate GDGORDER key          @LEA*/ 09430000
*ANSWER(COMMENT('GDGORDER - GDG-ALL concatenation order'))              09440000
*   COLUMN(ICOMCOL) NORESCAN;  /* Generate comment for GDGORDER  @LEA*/ 09450000
*IF PREFIX='SJKY' THEN         /* Check prefix to determine if          09460000
*                                 parameter constants needed     @LEA*/ 09470000
* DO;                          /* Generate parameter constants   @LEA*/ 09480000
*  ANSWER(COMMENT('Values for GDGORDER'))                               09490000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate comment for constants @LEA*/ 09500000
*  ANSWER('DCL SJVLGDGC BIT(8) CONSTANT(''80''X);')                     09510000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for USECATLG @LEA*/ 09520000
*  ANSWER(COMMENT('USECATLG')) COLUMN(ICOMCOL) NORESCAN; /* Generate    09530000
*                                       comment for USECATLG     @LEA*/ 09540000
*  ANSWER('DCL SJVLGDGL BIT(8) CONSTANT(''40''X);')                     09550000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for LIFO     @LEA*/ 09560000
*  ANSWER(COMMENT('LIFO')) COLUMN(ICOMCOL) NORESCAN; /* Generate        09570000
*                                        comment for LIFO        @LEA*/ 09580000
*  ANSWER('DCL SJVLGDGF BIT(8) CONSTANT(''20''X);')                     09590000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for FIFO     @LEA*/ 09600000
*  ANSWER(COMMENT('FIFO')) COLUMN(ICOMCOL) NORESCAN; /* Generate        09610000
*                                        comment for FIFO        @LEA*/ 09620000
* END;                         /* Generate parameter constants   @LEA*/ 09630000
*                                                                       09640000
*ANSWER('DCL '!!PREFIX!!'ROAC BIT(16) CONSTANT(''8030''X);')            09650000
*   COLUMN(MACCOL+2) NORESCAN;  /* Generate ROACCESS first parm  @LFA*/ 09660000
*ANSWER(COMMENT('ROAC - ROACCESS')) COLUMN(ICOMCOL)                     09670000
*           NORESCAN;          /* Generate     ROACCESS comment  @LFA*/ 09680000
*IF PREFIX='SJKY' THEN         /* Check prefix to determine if          09690000
*                                 parameter constants needed     @LFA*/ 09700000
* DO;                          /* Generate parameter constants   @LFA*/ 09710000
*  ANSWER(COMMENT('Values for ROACCESS'))                               09720000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate comment for constants @LFA*/ 09730000
*  ANSWER('DCL SJVLROAC_ALLOW   BIT(8) CONSTANT(''01''X);')             09740000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for ROACCESS @LFA*/ 09750000
*  ANSWER('DCL SJVLROAC_DISALLOW  BIT(8) CONSTANT(''02''X);')           09760000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for ROACCESS @LFA*/ 09770000
* END;                         /* Generate parameter constants   @LFA*/ 09780000
*                                                                       09790000
*ANSWER('DCL '!!PREFIX!!'ROA2 BIT(16) CONSTANT(''8031''X);')            09800000
*   COLUMN(MACCOL+2) NORESCAN;  /* Generate ROACCESS second parm @LFA*/ 09810000
*ANSWER(COMMENT('ROA2 - ROACCESS')) COLUMN(ICOMCOL)                     09820000
*           NORESCAN;          /* Generate     ROACCESS comment  @LFA*/ 09830000
*IF PREFIX='SJKY' THEN         /* Check prefix to determine if          09840000
*                                 parameter constants needed     @LFA*/ 09850000
* DO;                          /* Generate parameter constants   @LFA*/ 09860000
*  ANSWER(COMMENT('Values for ROACCESS second parm'))                   09870000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate comment for constants @LFA*/ 09880000
*  ANSWER('DCL SJVLROA2_EXTLOCK   BIT(8) CONSTANT(''01''X);')           09890000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for ROACCESS @LFA*/ 09900000
*  ANSWER('DCL SJVLROA2_TRKLOCK  BIT(8) CONSTANT(''02''X);')            09910000
*   COLUMN(MACCOL+2) NORESCAN; /* Generate constant for ROACCESS @LFA*/ 09920000
* END;                         /* Generate parameter constants   @LFA*/ 09930000
*                                                                       09940000
*                                                                       09950000
*ANSWER('DCL '!!PREFIX!!'DKYL BIT(16) CONSTANT(''8032''X);')            09960000
*   COLUMN(MACCOL+2) NORESCAN;                            /*     @07A*/ 09970000
*ANSWER(COMMENT('DSKEYLBL - Data set key encryption Label    '))        09980000
*   COLUMN(ICOMCOL) NORESCAN;  /* Generate comment for DSKEYLBL  @07A*/ 09981000
*ANSWER SKIP;                                             /*     @L3A*/ 09982000
*END;                                  /* End allocation keys    @L3A*/ 09983000
* % END IEFSJDKY;                                                       09984000
* % GOTO ENDMAC;                       /*                               09985000
         MACRO                                                          09986000
         IEFSJDKY &PRFX=SJKY,                                          +09987000
               &INFORET=NO,                                            +09988000
               &UNALLOC=NO                                              09989000
         AIF   (('&INFORET' EQ 'YES') AND ('&UNALLOC' EQ 'YES')).ERR2   09990000
         AIF   ('&INFORET' EQ 'YES').INFODCL                       @L3A 10000000
         AIF   ('&UNALLOC' EQ 'YES').UNALLDC                       @L3A 10010000
*        SJF DD ALLOCATION KEYS                               *    @L3A 10020000
&PRFX.CNTL EQU   X'8003'        CNTL                               @D1A 10030000
&PRFX.STCL EQU   X'8004'        STORCLAS                                10040000
&PRFX.MGCL EQU   X'8005'        MGMTCLAS                                10050000
&PRFX.DACL EQU   X'8006'        DATACLAS                                10060000
&PRFX.RECO EQU   X'800B'        RECORG                                  10070000
          AIF   ('&PRFX' NE 'SJKY').SKIP1                               10080000
* Values for RECORG keyword                                             10090000
SJVLROKS  EQU   X'80'           KS - Key sequence                       10100000
SJVLROES  EQU   X'40'           ES - Entry sequence                     10110000
SJVLRORR  EQU   X'20'           RR - Relative record                    10120000
SJVLROLS  EQU   X'10'           LS - Linear space                       10130000
.SKIP1     ANOP                                                         10140000
&PRFX.KEYO EQU   X'800C'       KEYOFF                                   10150000
&PRFX.REFD EQU   X'800D'       REFDD                                    10160000
&PRFX.SECM EQU   X'800E'       SECMODEL                                 10170000
          AIF   ('&PRFX' NE 'SJKY').SKIP2                               10180000
* Value for GENERIC option of SECMODEL (parameter #2)                   10190000
SJVLGENR  EQU   X'80'           Generic option                          10200000
.SKIP2     ANOP                                                         10210000
&PRFX.LIKE EQU   X'800F'        LIKE                                    10220000
&PRFX.AVGR EQU   X'8010'        AVGREC                                  10230000
          AIF   ('&PRFX' NE 'SJKY').SKIP3                               10240000
* Values for AVGREC keyword                                             10250000
SJVLARUN  EQU   X'80'           U - units (ie times 1)                  10260000
SJVLARKI  EQU   X'40'           K - kilo  (ie times 1000)               10270000
SJVLARME  EQU   X'20'           M - Mega  (ie times 1 million)          10280000
.SKIP3     ANOP                                                  @L1M   10290000
&PRFX.DSNT EQU   X'8012'        DSNTYPE                          @L1A   10300000
          AIF   ('&PRFX' NE 'SJKY').SKIP4                        @L1A   10310000
* Values for DSNTYPE keyword                                     @L1A   10320000
SJVLDTLI  EQU   X'80'           LIBRARY                          @L1A   10330000
SJVLDTPD  EQU   X'40'           PDS                              @L1A   10340000
SJVLPIPE  EQU   X'20'           PIPE                             @L4C   10350000
SJVLHFSI  EQU   X'10'           HFS                              @L4C   10360000
SJVLEXR   EQU   X'08'           EXTREQ                           @L7A   10370000
SJVLEXP   EQU   X'04'           EXTPREF                          @L7A   10380000
SJVLBASC  EQU   X'02'           BASIC                            @L7A   10390000
SJVLLARG  EQU   X'01'           LARGE                            @L7A   10400000
.SKIP4    ANOP                                                   @L2M   10410000
&PRFX.SPIN EQU   X'8013'        SPIN                             @L2A   10420000
          AIF   ('&PRFX' NE 'SJKY').SKIP5                        @L2A   10430000
* Values for SPIN keyword                                        @L2A   10440000
SJVLSPUN  EQU   X'80'           UNALLOC                          @L2A   10450000
SJVLSPNO  EQU   X'40'           NO                               @L2A   10460000
.SKIP5    ANOP                                                          10470000
&PRFX.SEGM EQU   X'8014'        SEGMENT                          @L2A   10480000
*                                                                  @L4A 10490000
&PRFX.PATH EQU   X'8017'        PATH                               @L4A 10500000
*                                                                  @L4A 10510000
&PRFX.POPT EQU   X'8018'        PATHOPTS                           @L4A 10520000
          AIF   ('&PRFX' NE 'SJKY').SKIP6                          @L4A 10530000
* Values for PATHOPTS keyword                                      @L4A 10540000
SJVLSYNC  EQU   X'00000100'     OSYNC                              @01A 10550000
SJVLCEXL  EQU   X'000000C0'     OCREXCL                            @L4A 10560000
SJVLCREA  EQU   X'00000080'     OCREAT                             @L4A 10570000
SJVLEXCL  EQU   X'00000040'     OEXCL                              @L4A 10580000
SJVLNOCT  EQU   X'00000020'     ONOCTTY                            @L4A 10590000
SJVLTRUN  EQU   X'00000010'     OTRUNC                             @L4A 10600000
SJVLAPPE  EQU   X'00000008'     OAPPEND                            @L4A 10610000
SJVLNBLK  EQU   X'00000004'     ONONBLOCK                          @L4A 10620000
SJVLRDWR  EQU   X'00000003'     ORDWR                              @L4A 10630000
SJVLRDON  EQU   X'00000002'     ORDONLY                            @D2C 10640000
SJVLWDON  EQU   X'00000001'     OWRONLY                            @D2C 10650000
*                                                                  @L4A 10660000
.SKIP6    ANOP                                                     @L4A 10670000
&PRFX.PMDE EQU   X'8019'        PATHMODE                           @L4A 10680000
          AIF   ('&PRFX' NE 'SJKY').SKIP7                          @L4A 10690000
* Values for PATHMODE keyword                                      @L4A 10700000
SJVLSUID  EQU   X'00000800'     SISUID                             @L4A 10710000
SJVLSGID  EQU   X'00000400'     SISGID                             @L4A 10720000
SJVLRUSR  EQU   X'00000100'     SIRUSR                             @L4A 10730000
SJVLWUSR  EQU   X'00000080'     SIWUSR                             @L4A 10740000
SJVLXUSR  EQU   X'00000040'     SIXUSR                             @L4A 10750000
SJVLRWXU  EQU   X'000001C0'     SIRWXU                             @L4A 10760000
SJVLRGRP  EQU   X'00000020'     SIRGRP                             @L4A 10770000
SJVLWGRP  EQU   X'00000010'     SIWGRP                             @L4A 10780000
SJVLXGRP  EQU   X'00000008'     SIXGRP                             @L4A 10790000
SJVLRWXG  EQU   X'00000038'     SIRWXG                             @L4A 10800000
SJVLROTH  EQU   X'00000004'     SIROTH                             @L4A 10810000
SJVLWOTH  EQU   X'00000002'     SIWOTH                             @L4A 10820000
SJVLXOTH  EQU   X'00000001'     SIXOTH                             @L4A 10830000
SJVLRWXO  EQU   X'00000007'     SIRWXO                             @L4A 10840000
*                                                                  @L4A 10850000
.SKIP7    ANOP                                                     @L4A 10860000
&PRFX.PNDS EQU   X'801A'        PATHDISP - Normal Disposition      @L4A 10870000
&PRFX.PCDS EQU   X'801B'        PATHDISP - Conditional Disposition @L4A 10880000
          AIF   ('&PRFX' NE 'SJKY').SKIP8                          @L4A 10890000
* Values for PATHDISP keyword                                      @L4A 10900000
SJVLKEEP  EQU   X'08'           KEEP                               @L4A 10910000
SJVLDELE  EQU   X'04'           DELETE                             @L4A 10920000
.SKIP8   ANOP                                                      @L4A 10930000
&PRFX.RLS  EQU   X'801C'        RLS - Record Level Sharing         @L5A 10940000
          AIF   ('&PRFX' NE 'SJKY').SKIP9                          @L5A 10950000
* Values for RLS keyword                                           @L5A 10960000
SJVLNRI   EQU   X'80'           NRI                                @L5A 10970000
SJVLCR    EQU   X'40'           CR                                 @L5A 10980000
SJVLCRE   EQU   X'20'           CRE                                @03A 10990000
.SKIP9   ANOP                                                      @L5A 11000000
&PRFX.FDAT EQU   X'801D'        FILEDATA - file organization       @L6A 11010000
          AIF   ('&PRFX' NE 'SJKY').SKIP10                         @L6A 11020000
* Values for FILEDATA keyword                                      @L6A 11030000
SJVLBIN   EQU   X'80'           BINARY                             @L6A 11040000
SJVLTEXT  EQU   X'40'           TEXT                               @L6A 11050000
SJVLREC   EQU   X'20'           RECORD                             @05A 11060000
.SKIP10  ANOP                                                      @L6A 11070000
&PRFX.LGST EQU   X'801F'        LGSTREAM                           @02A 11080000
&PRFX.DCCS EQU   X'8020'        CCSID                              @03A 11090000
&PRFX.BSLM EQU   X'8022'        BLKSZLIM                           @04A 11100000
&PRFX.KYL1 EQU   X'8023'        KEYLABL1                           @P7C 11110000
&PRFX.KYL2 EQU   X'8024'        KEYLABL2                           @P7C 11120000
&PRFX.KYC1 EQU   X'8025'        KEYENCD1                           @P7C 11130000
          AIF   ('&PRFX' NE 'SJKY').SKIP11                         @L8A 11140000
* Values for KEYENCD1 keyword                                      @L8A 11150000
SJVLKE1L  EQU   X'D3'           L - Label encoding                 @P6C 11160000
SJVLKE1H  EQU   X'C8'           H - Hash encoding                  @P6C 11170000
.SKIP11    ANOP                                                  @L8A   11180000
&PRFX.KYC2 EQU   X'8026'        KEYENCD2                           @P7C 11190000
          AIF   ('&PRFX' NE 'SJKY').SKIP12                         @L8A 11200000
* Values for KEYENCD2 keyword                                      @L8A 11210000
SJVLKE2L  EQU   X'D3'           L - Label encoding                 @P6C 11220000
SJVLKE2H  EQU   X'C8'           H - Hash encoding                  @P6C 11230000
.SKIP12    ANOP                                                  @L8A   11240000
&PRFX.EATT EQU   X'8028'        EATTR                              @L9A 11250000
          AIF   ('&PRFX' NE 'SJKY').SKIP13                         @L9A 11260000
* Values for EATTR keyword                                         @L9A 11270000
SJVLEATN  EQU   X'01'           0000 0001b - NO                    @L9A 11280000
SJVLEATO  EQU   X'02'           0000 0010b - OPT                   @L9A 11290000
.SKIP13    ANOP                                                    @LAA 11300000
&PRFX.FRVL EQU   X'8029'        FREEVOL                            @LAA 11310000
          AIF   ('&PRFX' NE 'SJKY').SKIP14                         @LAA 11320000
* Values for FREEVOL keyword                                       @LAA 11330000
SJVLFRVE  EQU   X'01'           0000 0001b - END                   @LAA 11340000
SJVLFRVV  EQU   X'02'           0000 0010b - EOV                   @LAA 11350000
.SKIP14    ANOP                                                    @LAA 11360000
&PRFX.SPI2 EQU   X'802A'        SPIN second parm, SPIN INTERVAL    @PAC 11370000
&PRFX.SYML EQU   X'802B'        SYMLIST ON DD                      @06M 11380000
&PRFX.DSNV EQU   X'802C'        DSNTYPE version                    @06M 11390000
&PRFX.MAXG EQU   X'802D'        MAXGENS                            @06C 11400000
&PRFX.GDGO EQU   X'802E'        GDGORDER - GDG-all concatenation order *11410000
                                                                   @06M 11420000
          AIF   ('&PRFX' NE 'SJKY').SKIPG1                         @06M 11430000
* Values for GDGORDER keyword                                      @06M 11440000
SJVLGDGC  EQU   X'80'           USECATLG                           @06M 11450000
SJVLGDGL  EQU   X'40'           LIFO                               @06M 11460000
SJVLGDGF  EQU   X'20'           FIFO                               @06M 11470000
.SKIPG1  ANOP                                                      @06M 11480000
&PRFX.ROAC EQU   X'8030'        ROACCESS - read-only access        @LFA 11490000
          AIF   ('&PRFX' NE 'SJKY').SKIPROAC1                      @LFA 11500000
* Values for ROACCESS first parm keyword                           @LFA 11510000
SJVLROAC_ALLOW     EQU   X'01'   ROACCESS ALLOW                    @LFA 11520000
SJVLROAC_DISALLOW  EQU   X'02'   ROACCESS DISALLOW                 @LFA 11530000
.SKIPROAC1 ANOP                                                    @LFA 11540000
&PRFX.ROA2 EQU   X'8031'        ROACCESS - second parm             @LFA 11550000
          AIF   ('&PRFX' NE 'SJKY').SKIPROAC2                      @LFA 11560000
* Values for ROACCESS second parm keyword                          @LFA 11570000
SJVLROA2_EXTLOCK   EQU   X'01'   ROACCESS Extent serialization     @LFA 11580000
SJVLROA2_TRKLOCK   EQU   X'02'   ROACCESS Track serialization      @LFA 11590000
.SKIPROAC2 ANOP                                                    @LFA 11600000
.SKIP15    ANOP                                                    @LBA 11610000
&PRFX.DKYL EQU   X'8032'        DSKEYLBL - Data set encryption     @07A 11620000
*                               key label                          @07A 11630000
         AGO  .MEND                                                @L3C 11640000
.UNALLDC ANOP                                                      @L3A 11650000
*******  SJF DD UNALLOCATION KEYS  ******************************  @L3A 11660000
&PRFX.SPIN EQU   X'8013'        SPIN                               @L3A 11670000
          AIF   ('&PRFX' NE 'SJKY').SKSPIN                       @L3A   11680000
* Values for SPIN keyword                                        @L3A   11690000
SJVLSPUN  EQU   X'80'           UNALLOC                          @L3A   11700000
SJVLSPNO  EQU   X'40'           NO                               @L3A   11710000
.SKSPIN  ANOP                                                      @L3A 11720000
*                                                                       11730000
&PRFX.PATH EQU   X'8017'        PATH                               @L4A 11740000
*                                                                       11750000
&PRFX.OVPDS EQU   X'801A'        PATHDISP - Override Disposition   @L4A 11760000
         AIF   ('&PRFX' NE 'SJKY').SKIPU1                          @L4A 11770000
* Values for PATHDISP - Override Disposition                       @L4A 11780000
SJVLKEEP  EQU   X'08'           KEEP                               @L4A 11790000
SJVLDELE  EQU   X'04'           DELETE                             @L4A 11800000
.SKIPU1  ANOP                                                      @L4A 11810000
&PRFX.SPI2 EQU   X'802A'        SPIN                               @PAC 11820000
         AGO   .MEND                                               @L3A 11830000
.INFODCL ANOP                                                           11840000
         AIF   ('&PRFX' EQ 'DIN').INFOINP                          @L4A 11850000
*        SJF DD INFORMATION RETRIEVAL KEYS                    *    @L3A 11860000
&PRFX.CNTL EQU   X'C003'        CNTL                               @D1A 11870000
&PRFX.STCL EQU   X'C004'        STORCLAS                                11880000
&PRFX.MGCL EQU   X'C005'        MGMTCLAS                                11890000
&PRFX.DACL EQU   X'C006'        DATACLAS                                11900000
&PRFX.RECO EQU   X'C00B'        RECORG                                  11910000
&PRFX.KEYO EQU   X'C00C'        KEYOFF                                  11920000
&PRFX.REFD EQU   X'C00D'        REFDD                                   11930000
&PRFX.SECM EQU   X'C00E'        SECMODEL                                11940000
&PRFX.LIKE EQU   X'C00F'        LIKE                                    11950000
&PRFX.AVGR EQU   X'C010'        AVGREC                                  11960000
&PRFX.DSNT EQU   X'C012'        DSNTYPE                           @L1A  11970000
&PRFX.SPIN EQU   X'C013'        SPIN                              @L2A  11980000
&PRFX.SEGM EQU   X'C014'        SEGMENT                           @L2A  11990000
&PRFX.PATH EQU   X'C017'        PATH                               @L4A 12000000
&PRFX.POPT EQU   X'C018'        PATHOPTS                           @L4A 12010000
&PRFX.PMDE EQU   X'C019'        PATHMODE                           @L4A 12020000
&PRFX.PNDS EQU   X'C01A'        NORMAL PATHDISP                    @L4A 12030000
&PRFX.CNDS EQU   X'C01B'        CONDITIONAL PATHDISP               @L4A 12040000
&PRFX.PCDS EQU   X'C01B'        CONDITIONAL PATHDISP               @P5A 12050000
&PRFX.FDAT EQU   X'C01D'        FILEDATA                           @L6A 12060000
&PRFX.EATT EQU   X'C028'        EATTR                              @LGA 12070000
&PRFX.SPI2 EQU   X'C02A'        SPIN interval                      @LBA 12080000
&PRFX.SYML EQU   X'C02B'        SYMLIST                            @PBA 12090000
&PRFX.DSNV EQU   X'C02C'        DSNTYPE version                    @LDA 12100000
&PRFX.MAXG EQU   X'C02D'        MAXGENS                            @06C 12110000
&PRFX.GDGO EQU   X'C02E'        GDGORDER                           @LEA 12120000
&PRFX.ROAC EQU   X'C030'        ROACCESS - first parm              @LFA 12130000
&PRFX.ROA2 EQU   X'C031'        ROACCESS - second parm             @LFA 12140000
&PRFX.DKYL EQU   X'C032'        DSKEYLBL                           @07A 12150000
         AGO   .MEND                                               @L3A 12160000
.INFOINP ANOP                                                           12170000
*        SJF DD INFORMATION RETRIEVAL INPUT KEYS              *    @L4A 12180000
&PRFX.PATH EQU   X'8017'        PATH                               @L4A 12190000
         AGO   .MEND                                               @L4A 12200000
.ERR2    ANOP                                                      @L3A 12210000
         MNOTE 12,'AHA0010 IEFSJDKY ERROR:  INFORET=YES AND UNALLOC=YES+12220000
                ARE MUTUALLY EXCLUSIVE.'                           @L3A 12230000
.MEND    ANOP                                                      @L3C 12240000
         MEND                                                           12250000
**/                                                                     12260000
* %ENDMAC: ;                           /* Target of GOTO - Branch       12270000
*                                         around ASSEMBLER portion   */ 12280000
