*%IEFSSI: MACRO KEYS(SUBNAME,REQUEST,CONSNAME,INITRTN,INITPARM,         00000100
*                 INITPLEN,INTOKEN,COMMAND,REQDSUB,EVENTRTN,OUTTOKEN,   00000200
*                 SUBDATA1,SUBDATA2,WORKAREA,WORKASP,RETCODE,RSNCODE,   00000300
*                 COM,PLISTVER,MF);                                     00000400
*/**** START OF SPECIFICATIONS **************************************** 00000500
*                                                                     * 00000600
*                                                                     * 00000700
*01* MACRO NAME:  IEFSSI                                -10/24/16-<1> * 00000800
*                                                                     * 00000900
*                                                                     * 00001000
*01* DESCRIPTIVE NAME:  Dynamic Subsystem Interface Macro             * 00001100
*                                                                     * 00001200
*01* PROPRIETARY STATEMENT:                                           * 00001300
*                                                                     * 00001400
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00001500
*     5650-ZOS COPYRIGHT IBM CORP. 1994, 2017                         * 00001600
*                                                                     * 00001700
* STATUS= HBB77B0                                                     * 00001800
*                                                                     * 00001900
*                                                                     * 00002000
*                                                                     * 00002100
*01* FUNCTION:                                                        * 00002200
*                                                                     * 00002300
*      Use the IEFSSI macro to dynamically control a subsystem.       * 00002400
*                                                                     * 00002500
*01* EXTERNAL CLASSIFICATION:  PI                                     * 00002600
*                                                                     * 00002700
*01* END OF EXTERNAL CLASSIFICATION:                                  * 00002800
*                                                                     * 00002900
*01* ENVIRONMENT:                                                     * 00003000
*                                                                     * 00003100
*                                                                     * 00003200
*      Minimum authorization: No authorization is required to use the * 00003300
*                        QUERY service.  All other services require   * 00003400
*                        one of the following:                        * 00003500
*                                                                     * 00003600
*                                                                     * 00003700
*                        o   Supervisor state                         * 00003800
*                                                                     * 00003900
*                        o   Any system PSW key                       * 00004000
*                                                                     * 00004100
*                        o   PSW key mask permitting use of any       * 00004200
*                            system key                               * 00004300
*                                                                     * 00004400
*                        o   APF authorization.                       * 00004500
*                                                                     * 00004600
*                                                                     * 00004700
*                                                                     * 00004800
*      Dispatchable unit mode: Task mode.                             * 00004900
*                                                                     * 00005000
*      Cross Memory Mode: PASN=HASN=SASN.                             * 00005100
*                                                                     * 00005200
*      AMODE:            24- or 31-bit.                               * 00005300
*                                                                     * 00005400
*      ASC mode:         Primary or Access Register.                  * 00005500
*                                                                     * 00005600
*      Interrupt status: Enabled for I/O and external interrupts.     * 00005700
*                                                                     * 00005800
*      Locks:            No locks held.                               * 00005900
*                                                                     * 00006000
*      Control parameters: Control parameters must be in the primary  * 00006100
*                        address space.                               * 00006200
*                                                                     * 00006300
*                                                                     * 00006400
*                                                                     * 00006500
*01* PROGRAMMING REQUIREMENTS:                                        * 00006600
*                                                                     * 00006700
*    Before issuing the IEFSSI macro the caller must have included    * 00006800
*    the following system control blocks:                             * 00006900
*                                                                     * 00007000
*                                                                     * 00007100
*    o   CVT (mapped by macro CVT)                                    * 00007200
*                                                                     * 00007300
*    o   JESCT (mapped by macro IEFJESCT)                             * 00007400
*                                                                     * 00007500
*                                                                     * 00007600
*                                                                     * 00007700
*    If using this macro in a reentrant routine, the list form of the * 00007800
*    macro must be coded in order to use the execute form.            * 00007900
*                                                                     * 00008000
*    In a PL/X routine, the caller must invoke the ?EPILOG macro.     * 00008100
*                                                                     * 00008200
*    The caller must include the IEFJSRC macro to define the Dynamic  * 00008300
*    SSI return and reason codes.                                     * 00008400
*                                                                     * 00008500
*    If issuing a QUERY request, the caller must include the IEFJSQRY * 00008600
*    macro to map the QUERY output.                                   * 00008700
*                                                                     * 00008800
*    To use the ACTIVATE or SWAP services, the subsystem must have    * 00008900
*    created at least 1 SSI-managed vector table using the IEFSSVT    * 00009000
*    macro.                                                           * 00009100
*                                                                     * 00009200
*01* RESTRICTIONS:                                                    * 00009300
*                                                                     * 00009400
*    The caller may not have an EUT FRR established.                  * 00009500
*                                                                     * 00009600
*01* INPUT REGISTER INFORMATION:                                      * 00009700
*                                                                     * 00009800
*    There are no input register requirements for issuing the IEFSSI  * 00009900
*    macro.                                                           * 00010000
*                                                                     * 00010100
*01* OUTPUT REGISTER INFORMATION:                                     * 00010200
*                                                                     * 00010300
*    When control returns to the caller, the GPRs contain:            * 00010400
*                                                                     * 00010500
*                                                                     * 00010600
*    REGISTER  CONTENTS                                               * 00010700
*                                                                     * 00010800
*    0         Reason code                                            * 00010900
*                                                                     * 00011000
*    1         Used as work register by the system                    * 00011100
*                                                                     * 00011200
*    2-13      Unchanged                                              * 00011300
*                                                                     * 00011400
*    14        Used as work register by the system                    * 00011500
*                                                                     * 00011600
*    15        Return code                                            * 00011700
*                                                                     * 00011800
*                                                                     * 00011900
*                                                                     * 00012000
*    When control returns to the caller, the ARs contain:             * 00012100
*                                                                     * 00012200
*                                                                     * 00012300
*    REGISTER  CONTENTS                                               * 00012400
*                                                                     * 00012500
*    0-1       Used as work registers by the system                   * 00012600
*                                                                     * 00012700
*    2-13      Unchanged                                              * 00012800
*                                                                     * 00012900
*    14-15     Used as work registers by the system                   * 00013000
*                                                                     * 00013100
*                                                                     * 00013200
*                                                                     * 00013300
*01* PERFORMANCE IMPLICATIONS:                                        * 00013400
*                                                                     * 00013500
*    None.                                                            * 00013600
*                                                                     * 00013700
*01* SYNTAX:                                                          * 00013800
*                                                                     * 00013900
*Ýxlabel¨  IEFSSI     SUBNAME=xsubname                                * 00014000
*                  Ð ,REQUEST=ADD                                     * 00014100
*                  !    Ý,CONSNAME=»xconsname!0º¨                     * 00014200
*                  !    Ý,INITRTN=»xinitrtn!NO_INITRTNº               * 00014300
*                  !        Ý,INITPARM=»xinitparm!NO_INITPARMº        * 00014400
*                  !             ,INITPLEN=xinitplen¨¨                * 00014500
*                  Ô ,REQUEST=ACTIVATE                                * 00014600
*                  !    Ý,INTOKEN=»xintoken!NO_INPUT_TOKENº¨          * 00014700
*                  Ô ,REQUEST=OPTIONS                                 * 00014800
*                  !    Ý,COMMAND=»NO!YESº¨                           * 00014900
*                  !    Ý,REQDSUB=»MSTR!PRIº¨                         * 00015000
*                  !    Ý,EVENTRTN=»xeventrtn!NO_EVENTRTNº¨           * 00015100
*                  Ô ,REQUEST=DEACTIVATE                              * 00015200
*                  !    Ý,OUTTOKEN=xouttoken¨                         * 00015300
*                  Ô ,REQUEST=SWAP                                    * 00015400
*                  !    Ý,INTOKEN=»xintoken!NO_INPUT_TOKENº¨          * 00015500
*                  !    Ý,OUTTOKEN=xouttoken¨                         * 00015600
*                  Ô ,REQUEST=PUT                                     * 00015700
*                  !   Ð ,SUBDATA1=xsubdata1                          * 00015800
*                  !   ¿ ,SUBDATA2=xsubdata2                          * 00015900
*                  Ô ,REQUEST=GET                                     * 00016000
*                  !   Ð ,SUBDATA1=Ýxsubdata1¨                        * 00016100
*                  !   ¿ ,SUBDATA2=Ýxsubdata2¨                        * 00016200
*                  ¿ ,REQUEST=QUERY                                   * 00016300
*                        ,WORKAREA=xworkarea                          * 00016400
*                       Ý,WORKASP=»xworkasp!0º¨                       * 00016500
*                   Ý,RETCODE=xretcode¨                               * 00016600
*                   Ý,RSNCODE=xrsncode¨                               * 00016700
*                   Ý,COM=»xcom!NULLº¨                                * 00016800
*                   Ý,PLISTVER=»xplistver!IMPLIED_VERSIONº¨           * 00016900
*                  ÐÝ,MF=S¨                                           * 00017000
*                  ÔÝ,MF=(L,xmfctrl»,xmfattr!0Dº)¨                    * 00017100
*                  ¿Ý,MF=(E,xmfctrl»,COMPLETEº)¨                      * 00017200
*                                                                     * 00017300
*                                                                     * 00017400
*      Where:                                                         * 00017500
*                                                                     * 00017600
*                                                                     * 00017700
*      Ýxlabel¨                                                       * 00017800
*          is an optional symbol, starting in column 1, that is the   * 00017900
*          name on the IEFSSI macro invocation.  The name must        * 00018000
*          conform to the rules for an ordinary assembler language    * 00018100
*          symbol.                                                    * 00018200
*          DEFAULT: No name.                                          * 00018300
*                                                                     * 00018400
*                                                                     * 00018500
*                                                                     * 00018600
*                                                                     * 00018700
*      SUBNAME(xsubname)                                              * 00018800
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00018900
*          only) of a required 4 character input containing the       * 00019000
*          subsystem name.  The subsystem name may contain any EBCDIC * 00019100
*          characters other than blank ('40'x) or null ('00'x).       * 00019200
*                                                                     * 00019300
*          NOTE:  If the subsystem will be started, its name must     * 00019400
*                 meet the requirements for the name of a started     * 00019500
*                 task.                                               * 00019600
*                                                                     * 00019700
*                                                                     * 00019800
*          If the length of the subsystem name is less than 4         * 00019900
*          characters, it must be padded to the right with blanks or  * 00020000
*          nulls.                                                     * 00020100
*                                                                     * 00020200
*          For REQUEST=QUERY, the name may contain the wildcard       * 00020300
*          characters '*' and '?' to request information about        * 00020400
*          multiple subsystems.  The wildcard characters have the     * 00020500
*          following meanings:                                        * 00020600
*                                                                     * 00020700
*                                                                     * 00020800
*          o   '*' matches 0 or more characters                       * 00020900
*                                                                     * 00021000
*          o   '?' matches exactly 1 character.                       * 00021100
*                                                                     * 00021200
*                                                                     * 00021300
*          A SUBNAME value of ']PRI' can be used to indicate that     * 00021400
*          information is to be returned for the primary subsystem.   * 00021500
*          A value of '*' can be used to indicate that information is * 00021600
*          to be returned for all subsystems.                         * 00021700
*                                                                     * 00021800
*                                                                     * 00021900
*                                                                     * 00022000
*                                                                     * 00022100
*       REQUEST(»ADD!ACTIVATE!OPTIONS!DEACTIVATE!SWAP!PUT!GET!QUERYº) * 00022200
*                                                                     * 00022300
*          is a required keyword input that specifies the action to   * 00022400
*          be performed.                                              * 00022500
*                                                                     * 00022600
*                                                                     * 00022700
*           REQUEST(ADD)                                              * 00022800
*              Use the ADD request to dynamically define a subsystem  * 00022900
*              to the system.                                         * 00023000
*                                                                     * 00023100
*              Only subsystems that have been defined using the       * 00023200
*              keyword format IEFSSNxx parmlib member, the IEFSSI     * 00023300
*              REQUEST=ADD macro, or the SETSSI ADD system command    * 00023400
*              can use the following SSI services.                    * 00023500
*                                                                     * 00023600
*                                                                     * 00023700
*              o   Macros                                             * 00023800
*                                                                     * 00023900
*                                                                     * 00024000
*                  IEFSSI REQUEST=ACTIVATE     Activate subsystem     * 00024100
*                                                                     * 00024200
*                  IEFSSI REQUEST=DEACTIVATE   Deactivate subsystem   * 00024300
*                                                                     * 00024400
*                  IEFSSI REQUEST=OPTIONS      Define subsystem       * 00024500
*                                              options                * 00024600
*                                                                     * 00024700
*                  IEFSSI REQUEST=SWAP         Exchange subsystem     * 00024800
*                                              vector tables          * 00024900
*                                                                     * 00025000
*                  IEFSSI REQUEST=GET          Get data               * 00025100
*                                                                     * 00025200
*                  IEFSSI REQUEST=PUT          Put data               * 00025300
*                                                                     * 00025400
*                  IEFSSVT                     Process subsystem      * 00025500
*                                              vector tables          * 00025600
*                                                                     * 00025700
*                                                                     * 00025800
*                                                                     * 00025900
*              o   System commands                                    * 00026000
*                                                                     * 00026100
*                                                                     * 00026200
*                  SETSSI ACTIVATE             Activate subsystem     * 00026300
*                                                                     * 00026400
*                  SETSSI DEACTIVATE           Deactivate subsystem   * 00026500
*                                                                     * 00026600
*                                                                     * 00026700
*                                                                     * 00026800
*                                                                     * 00026900
*                                                                     * 00027000
*                                                                     * 00027100
*              ÝCONSNAME(»xconsname!0º)¨                              * 00027200
*                  is the name (RS-type) (or address in register      * 00027300
*                  (2)-(12) ASM only) of an optional 8 character      * 00027400
*                  input specifying the name of the console to which  * 00027500
*                  any messages issued by the SSI as part of          * 00027600
*                  initialization processing are to be written.  This * 00027700
*                  console name will also be passed to the routine    * 00027800
*                  named on the INITRTN keyword if it is specified.   * 00027900
*                                                                     * 00028000
*                  If CONSNAME is not specified, the SSI will issue   * 00028100
*                  messages to the master console.                    * 00028200
*                  DEFAULT: 0                                         * 00028300
*                                                                     * 00028400
*                                                                     * 00028500
*                                                                     * 00028600
*                                                                     * 00028700
*              ÝINITRTN(»xinitrtn!NO_INITRTNº)                        * 00028800
*                  is the name (RS-type) (or address in register      * 00028900
*                  (2)-(12) ASM only) of an optional 8 character      * 00029000
*                  input that specifies the name of a subsystem       * 00029100
*                  initialization routine.  The routine:              * 00029200
*                                                                     * 00029300
*                                                                     * 00029400
*                  o   Receives control in supervisor state key 0.    * 00029500
*                                                                     * 00029600
*                  o   Runs in the caller's address space.            * 00029700
*                                                                     * 00029800
*                  o   Must be accessible through the link list or    * 00029900
*                      link pack area.                                * 00030000
*                                                                     * 00030100
*                                                                     * 00030200
*                                                                     * 00030300
*                  Any initialization routine name that is less than  * 00030400
*                  8 characters must be padded to the right with      * 00030500
*                  blanks.                                            * 00030600
*                  DEFAULT: NO_INITRTN                                * 00030700
*                                                                     * 00030800
*                                                                     * 00030900
*                  ÝINITPARM(»xinitparm!NO_INITPARMº)                 * 00031000
*                      is the name (RS-type) (or address in register  * 00031100
*                      (2)-(12) ASM only) of an optional 60 character * 00031200
*                      input that contains a parameter string that is * 00031300
*                      passed to the subsystem initialization         * 00031400
*                      routine.  The parameter string is of variable  * 00031500
*                      length, from 1 to 60 characters.  The INITPLEN * 00031600
*                      keyword specifies the actual length of the     * 00031700
*                      passed parameter.  The INITPARM keyword is     * 00031800
*                      only applicable if the INITRTN keyword is      * 00031900
*                      specified.                                     * 00032000
*                      DEFAULT: NO_INITPARM                           * 00032100
*                                                                     * 00032200
*                                                                     * 00032300
*                      INITPLEN(xinitplen)¨¨                          * 00032400
*                          is the name (RS-type) (or address in       * 00032500
*                          register (2)-(12) ASM only) of a required  * 00032600
*                          fullword input that contains the length of * 00032700
*                          the parameter string to be passed to the   * 00032800
*                          subsystem initialization routine.  The     * 00032900
*                          INITPLEN keyword must be specified if the  * 00033000
*                          INITPARM keyword is specified.  The length * 00033100
*                          must be between 1 and 60 characters        * 00033200
*                          inclusive, or the subsystem initialization * 00033300
*                          routine will not be invoked.               * 00033400
*                                                                     * 00033500
*                                                                     * 00033600
*                                                                     * 00033700
*                                                                     * 00033800
*                                                                     * 00033900
*                                                                     * 00034000
*                                                                     * 00034100
*           REQUEST(ACTIVATE)                                         * 00034200
*              The ACTIVATE request is used to dynamically activate a * 00034300
*              subsystem so that its function routines are available  * 00034400
*              to process function requests.  The subsystem that      * 00034500
*              issues the IEFSSI REQUEST=ACTIVATE macro must do the   * 00034600
*              following before invoking the macro:                   * 00034700
*                                                                     * 00034800
*                                                                     * 00034900
*              o   Be defined to the system.                          * 00035000
*                                                                     * 00035100
*              o   Ensure that a subsystem vector table has been      * 00035200
*                  built using the IEFSSVT CREATE service.            * 00035300
*                                                                     * 00035400
*                                                                     * 00035500
*                                                                     * 00035600
*              The ACTIVATE request may also be used to reactivate a  * 00035700
*              subsystem that has been deactivated.  The reactivation * 00035800
*              may be done with the same subsystem vector table that  * 00035900
*              has been previously deactivated or with a new          * 00036000
*              subsystem vector table.                                * 00036100
*                                                                     * 00036200
*                                                                     * 00036300
*              ÝINTOKEN(»xintoken!NO_INPUT_TOKENº)¨                   * 00036400
*                  is the name (RS-type) (or address in register      * 00036500
*                  (2)-(12) ASM only) of an optional 32 bit input     * 00036600
*                  that specifies the token representing the          * 00036700
*                  subsystem vector table to be used in activating    * 00036800
*                  the subsystem.  The function routines associated   * 00036900
*                  with the subsystem vector table will be made       * 00037000
*                  available for processing requests.  The token must * 00037100
*                  be one that was returned by the IEFSSVT create     * 00037200
*                  service, an IEFSSI REQUEST=DEACTIVATE macro        * 00037300
*                  request, or an IEFSSI REQUEST=SWAP request.        * 00037400
*                                                                     * 00037500
*                  If the INTOKEN keyword is omitted, a subsystem     * 00037600
*                  vector table will be chosen as follows:            * 00037700
*                                                                     * 00037800
*                                                                     * 00037900
*                  1.  The most recently active SSI-managed vector    * 00038000
*                      table                                          * 00038100
*                                                                     * 00038200
*                  2.  If no remaining vector table has ever been     * 00038300
*                      activated, the last SSI-managed vector table   * 00038400
*                      created.                                       * 00038500
*                                                                     * 00038600
*                                                                     * 00038700
*                  An SSI-managed vector table is a vector table      * 00038800
*                  created with the IEFSSVT CREATE service.           * 00038900
*                  DEFAULT: NO_INPUT_TOKEN                            * 00039000
*                                                                     * 00039100
*                                                                     * 00039200
*                                                                     * 00039300
*           REQUEST(OPTIONS)                                          * 00039400
*              The OPTIONS request is used to define a set of         * 00039500
*              optional subsystem characteristics.  The following     * 00039600
*              subsystem options are set using this macro:            * 00039700
*                                                                     * 00039800
*                                                                     * 00039900
*              o   Whether the subsystem responds to SETSSI system    * 00040000
*                  commands                                           * 00040100
*                                                                     * 00040200
*              o   The subsystem (MSTR or primary) under which the    * 00040300
*                  invoking subsystem will start.                     * 00040400
*                                                                     * 00040500
*                                                                     * 00040600
*                                                                     * 00040700
*              These optional characteristics cannot be set with an   * 00040800
*              IEFSSNxx parmlib entry or by the SETSSI system         * 00040900
*              command.                                               * 00041000
*                                                                     * 00041100
*              If the OPTIONS service is invoked multiple times for a * 00041200
*              single subsystem, the most recent invocation           * 00041300
*              determines the resulting characteristics.  The         * 00041400
*              defaults listed for the keywords below apply to the    * 00041500
*              first invocation.  If a keyword is not specified on a  * 00041600
*              subsequent invocation, the corresponding subsystem     * 00041700
*              characteristic retains the value assigned by the last  * 00041800
*              invocation that specified the keyword.                 * 00041900
*                                                                     * 00042000
*                                                                     * 00042100
*              ÝCOMMAND(»NO!YESº)¨                                    * 00042200
*                  is an optional keyword input that specifies        * 00042300
*                  whether the subsystem responds to the following    * 00042400
*                  system commands:                                   * 00042500
*                                                                     * 00042600
*                                                                     * 00042700
*                  o   SETSSI ACTIVATE                                * 00042800
*                                                                     * 00042900
*                  o   SETSSI DEACTIVATE                              * 00043000
*                                                                     * 00043100
*                                                                     * 00043200
*                                                                     * 00043300
*                  A COMMAND option of YES should be specified only   * 00043400
*                  if the subsystem can tolerate the processing       * 00043500
*                  associated with each command.                      * 00043600
*                  DEFAULT: NO                                        * 00043700
*                                                                     * 00043800
*                                                                     * 00043900
*                  COMMAND(NO)                                        * 00044000
*                      The subsystem does not allow SETSSI commands.  * 00044100
*                                                                     * 00044200
*                  COMMAND(YES)                                       * 00044300
*                      The subsystem allows SETSSI commands.          * 00044400
*                                                                     * 00044500
*                                                                     * 00044600
*                                                                     * 00044700
*                                                                     * 00044800
*                                                                     * 00044900
*                                                                     * 00045000
*              ÝREQDSUB(»MSTR!PRIº)¨                                  * 00045100
*                  is an optional keyword input specifying whether a  * 00045200
*                  START 'subsystem' command will cause the subsystem * 00045300
*                  to start under control of the MSTR subsystem or    * 00045400
*                  the primary subsystem (JES).                       * 00045500
*                                                                     * 00045600
*                  When the procedure name on a START command matches * 00045700
*                  a defined subsystem name, the procedure being      * 00045800
*                  started is recognized as a subsystem.  If the      * 00045900
*                  START command does not specify the SUB= keyword,   * 00046000
*                  the subsystem will be started under control of the * 00046100
*                  subsystem identified by the REQDSUB keyword.       * 00046200
*                  DEFAULT: MSTR                                      * 00046300
*                                                                     * 00046400
*                                                                     * 00046500
*                  REQDSUB(MSTR)                                      * 00046600
*                      The subsystem specified does not require the   * 00046700
*                      services of the primary subsystem, and will    * 00046800
*                      start under the MSTR subsystem.                * 00046900
*                                                                     * 00047000
*                  REQDSUB(PRI)                                       * 00047100
*                      The subsystem specified requires the services  * 00047200
*                      of the primary subsystem and must start under  * 00047300
*                      its control.  If a START 'subsystem' command   * 00047400
*                      is issued before the primary subsystem is      * 00047500
*                      available, the START command will fail.        * 00047600
*                                                                     * 00047700
*                                                                     * 00047800
*                                                                     * 00047900
*                                                                     * 00048000
*                                                                     * 00048100
*                                                                     * 00048200
*              ÝEVENTRTN(»xeventrtn!NO_EVENTRTNº)¨                    * 00048300
*                  is the name (RS-type) (or address in register      * 00048400
*                  (2)-(12) ASM only) of an optional 8 character      * 00048500
*                  input that specifies the name of a subsystem event * 00048600
*                  notification routine.  The routine:                * 00048700
*                                                                     * 00048800
*                                                                     * 00048900
*                  o   Receives control in supervisor state key 0.    * 00049000
*                                                                     * 00049100
*                  o   Runs in the caller's address space.            * 00049200
*                                                                     * 00049300
*                  o   Must be accessible through the link list or    * 00049400
*                      link pack area.                                * 00049500
*                                                                     * 00049600
*                                                                     * 00049700
*                                                                     * 00049800
*                  Any routine name that is less than 8 characters    * 00049900
*                  must be padded to the right with blanks.           * 00050000
*                  DEFAULT: NO_EVENTRTN                               * 00050100
*                                                                     * 00050200
*                                                                     * 00050300
*                                                                     * 00050400
*           REQUEST(DEACTIVATE)                                       * 00050500
*              Use the DEACTIVATE request to deactivate a subsystem.  * 00050600
*              This stops any new function requests from being passed * 00050700
*              to the subsystem's function routines.                  * 00050800
*                                                                     * 00050900
*              After being deactivated, a subsystem may reactivate    * 00051000
*              itself using the same or a different subsystem vector  * 00051100
*              table.                                                 * 00051200
*                                                                     * 00051300
*                                                                     * 00051400
*              ÝOUTTOKEN(xouttoken)¨                                  * 00051500
*                  is the name (RS-type) (or address in register      * 00051600
*                  (2)-(12) ASM only) of an optional 32 bit output    * 00051700
*                  where the token representing the subsystem vector  * 00051800
*                  table to be deactivated will be returned.          * 00051900
*                                                                     * 00052000
*                  This token may be used in a subsequent ACTIVATE    * 00052100
*                  request to reactivate the subsystem using the same * 00052200
*                  subsystem vector table.                            * 00052300
*                                                                     * 00052400
*                                                                     * 00052500
*                                                                     * 00052600
*           REQUEST(SWAP)                                             * 00052700
*              Use the SWAP request to replace the subsystem vector   * 00052800
*              table currently being used to route function requests  * 00052900
*              with a new one, as an atomic operation.  This has the  * 00053000
*              effect of deactivating the current subsystem vector    * 00053100
*              table and immediately reactivating the subsystem with  * 00053200
*              a new subsystem vector table.  At all times during the * 00053300
*              execution of the SWAP request, the subsystem will be   * 00053400
*              able to respond to function requests, assuming it was  * 00053500
*              initially active.                                      * 00053600
*                                                                     * 00053700
*              Once a SWAP request has been used to switch subsystem  * 00053800
*              vector tables, it is possible for a subsequent SWAP    * 00053900
*              request to be used to switch the subsystem vector      * 00054000
*              table again, in effect restoring the old function      * 00054100
*              routines.                                              * 00054200
*                                                                     * 00054300
*              A SWAP request targeting an inactive subsystem will be * 00054400
*              treated as an ACTIVATE request but will receive return * 00054500
*              code IEFSSI_WARNING (4).                               * 00054600
*                                                                     * 00054700
*                                                                     * 00054800
*              ÝINTOKEN(»xintoken!NO_INPUT_TOKENº)¨                   * 00054900
*                  is the name (RS-type) (or address in register      * 00055000
*                  (2)-(12) ASM only) of an optional 32 bit input     * 00055100
*                  that specifies the token representing the          * 00055200
*                  subsystem vector table to be used in activating    * 00055300
*                  the subsystem.  The function routines associated   * 00055400
*                  with the subsystem vector table will immediately   * 00055500
*                  be made available for processing requests.  The    * 00055600
*                  token must be one that was returned by the IEFSSVT * 00055700
*                  create service, an IEFSSI REQUEST=DEACTIVATE macro * 00055800
*                  request, or a previous IEFSSI REQUEST=SWAP         * 00055900
*                  request.  If INTOKEN is omitted, the inactive      * 00056000
*                  SSI-managed vector table will be used, provided    * 00056100
*                  that the subsystem has one.  (An SSI-managed       * 00056200
*                  vector table is a vector table created with the    * 00056300
*                  IEFSSVT CREATE service).                           * 00056400
*                  DEFAULT: NO_INPUT_TOKEN                            * 00056500
*                                                                     * 00056600
*                                                                     * 00056700
*                                                                     * 00056800
*                                                                     * 00056900
*              ÝOUTTOKEN(xouttoken)¨                                  * 00057000
*                  is the name (RS-type) (or address in register      * 00057100
*                  (2)-(12) ASM only) of an optional 32 bit output    * 00057200
*                  where the token of the subsystem vector table to   * 00057300
*                  be deactivated will be returned.                   * 00057400
*                                                                     * 00057500
*                  This token may be used in a subsequent SWAP        * 00057600
*                  request to reactivate the subsystem using the same * 00057700
*                  subsystem vector table.                            * 00057800
*                                                                     * 00057900
*                                                                     * 00058000
*                                                                     * 00058100
*           REQUEST(PUT)                                              * 00058200
*              Use the PUT request to store subsystem-defined data    * 00058300
*              for the subsystem.  Two non-contiguous fullword fields * 00058400
*              are available for subsystem data.  A typical use for   * 00058500
*              these fields is to anchor subsystem specific control   * 00058600
*              blocks.                                                * 00058700
*                                                                     * 00058800
*                                                                     * 00058900
*              The following is a group of keys.  At least one must   * 00059000
*              be specified.                                          * 00059100
*                                                                     * 00059200
*                                                                     * 00059300
*              SUBDATA1(xsubdata1)                                    * 00059400
*                  is the name (RS-type) (or address in register      * 00059500
*                  (2)-(12) ASM only) of a 4 character input area     * 00059600
*                  containing the first 4 bytes of subsystem-specific * 00059700
*                  information.                                       * 00059800
*                                                                     * 00059900
*              SUBDATA2(xsubdata2)                                    * 00060000
*                  is the name (RS-type) (or address in register      * 00060100
*                  (2)-(12) ASM only) of a 4 character input area     * 00060200
*                  containing the second 4 bytes of                   * 00060300
*                  subsystem-specific information.                    * 00060400
*                                                                     * 00060500
*                                                                     * 00060600
*                                                                     * 00060700
*              End of group of keys.                                  * 00060800
*                                                                     * 00060900
*                                                                     * 00061000
*           REQUEST(GET)                                              * 00061100
*              Use the GET request to retrieve subsystem-defined data * 00061200
*              previously stored using IEFSSI REQUEST=PUT.            * 00061300
*                                                                     * 00061400
*                                                                     * 00061500
*              The following is a group of keys.  At least one must   * 00061600
*              be specified.                                          * 00061700
*                                                                     * 00061800
*                                                                     * 00061900
*              SUBDATA1(Ýxsubdata1¨)                                  * 00062000
*                  is the name (RS-type) (or address in register      * 00062100
*                  (2)-(12) ASM only) of a 4 character output area to * 00062200
*                  return the first 4 bytes of subsystem-specific     * 00062300
*                  information identified by the SUBDATA1 keyword on  * 00062400
*                  a previous IEFSSI REQUEST=PUT request.             * 00062500
*                                                                     * 00062600
*              SUBDATA2(Ýxsubdata2¨)                                  * 00062700
*                  is the name (RS-type) (or address in register      * 00062800
*                  (2)-(12) ASM only) of a 4 character output area to * 00062900
*                  return the second 4 bytes of subsystem-specific    * 00063000
*                  information identified by the SUBDATA2 keyword on  * 00063100
*                  a previous IEFSSI REQUEST=PUT request.             * 00063200
*                                                                     * 00063300
*                                                                     * 00063400
*                                                                     * 00063500
*              End of group of keys.                                  * 00063600
*                                                                     * 00063700
*                                                                     * 00063800
*           REQUEST(QUERY)                                            * 00063900
*              Use the QUERY request to obtain information about a    * 00064000
*              currently defined subsystem.  Information for any      * 00064100
*              subsystem can be obtained by specifying the            * 00064200
*              subsystem's name in the SUBNAME parameter.             * 00064300
*              Information for the primary subsystem can be obtained  * 00064400
*              by specifying a SUBNAME value of ']PRI'.  The          * 00064500
*              following information is returned:                     * 00064600
*                                                                     * 00064700
*                                                                     * 00064800
*              o   Subsystem status (active or inactive)              * 00064900
*                                                                     * 00065000
*              o   Whether the subsystem is dynamic                   * 00065100
*                                                                     * 00065200
*              o   Whether the subsystem responds to SETSSI commands  * 00065300
*                                                                     * 00065400
*              o   The list of function codes supported by all        * 00065500
*                  SSI-managed vector tables associated with the      * 00065600
*                  subsystem, or by the currently active vector table * 00065700
*                  if the subsystem has no SSI-managed vector tables. * 00065800
*                                                                     * 00065900
*                                                                     * 00066000
*              The output from this request is mapped by macro        * 00066100
*              IEFJSQRY.                                              * 00066200
*                                                                     * 00066300
*              The QUERY request can be used to obtain information    * 00066400
*              for multiple subsystems by using wildcard characters   * 00066500
*              as described for the SUBNAME keyword.  Subsystems will * 00066600
*              be listed in broadcast order (the order in which they  * 00066700
*              receive a broadcast SSI request).                      * 00066800
*                                                                     * 00066900
*                                                                     * 00067000
*              WORKAREA(xworkarea)                                    * 00067100
*                  is the name (RS-type) (or address in register      * 00067200
*                  (2)-(12) ASM only) of a required pointer output    * 00067300
*                  that will contain the address of the subsystem     * 00067400
*                  information returned by the QUERY request.  The    * 00067500
*                  output area is mapped by macro IEFJSQRY.  The      * 00067600
*                  length of the output area is contained in field    * 00067700
*                  JQRYLEN of the mapping.                            * 00067800
*                                                                     * 00067900
*                                                                     * 00068000
*                                                                     * 00068100
*                                                                     * 00068200
*              ÝWORKASP(»xworkasp!0º)¨                                * 00068300
*                  is the name (RS-type) (or address in register      * 00068400
*                  (2)-(12) ASM only) of an optional byte input       * 00068500
*                  specifying the subpool used by the SSI to obtain a * 00068600
*                  work area for the returned subsystem information.  * 00068700
*                  The caller is responsible for freeing this work    * 00068800
*                  area.  It is recommended that a job- or            * 00068900
*                  task-related subpool be used.  In the event that   * 00069000
*                  the caller does not free the returned area, this   * 00069100
*                  will allow the associated storage to be freed by   * 00069200
*                  the system at job or task termination.  If WORKASP * 00069300
*                  is not specified, the caller's subpool zero will   * 00069400
*                  be used.  Storage for the query information will   * 00069500
*                  be obtained above the 16M line if the specified    * 00069600
*                  subpool permits; AMODE 24 callers must switch into * 00069700
*                  AMODE 31 to address this storage.                  * 00069800
*                                                                     * 00069900
*                  Unauthorized callers may request storage only in   * 00070000
*                  unauthorized subpools (0-127, 131, or 132).        * 00070100
*                  DEFAULT: 0                                         * 00070200
*                                                                     * 00070300
*                                                                     * 00070400
*                                                                     * 00070500
*                                                                     * 00070600
*                                                                     * 00070700
*                                                                     * 00070800
*                                                                     * 00070900
*                                                                     * 00071000
*      ÝRETCODE(xretcode)¨                                            * 00071100
*          is the name (RS-type) of an optional fullword output       * 00071200
*          variable (or register (2)-(12) or (15) ASM only) into      * 00071300
*          which the return code is to be copied from GPR 15.  If you * 00071400
*          specify 15, GPR15, REG15, or R15 (within or without        * 00071500
*          parentheses), the value will be left in GPR 15.            * 00071600
*                                                                     * 00071700
*                                                                     * 00071800
*                                                                     * 00071900
*                                                                     * 00072000
*      ÝRSNCODE(xrsncode)¨                                            * 00072100
*          is the name (RS-type) of an optional fullword output       * 00072200
*          variable into which the reason code is to be copied from   * 00072300
*          GPR 0.  If you specify 0, 00, GPR0, GPR00, REG0, REG00, or * 00072400
*          R0 (within or without parentheses), the value will be left * 00072500
*          in GPR 0.                                                  * 00072600
*                                                                     * 00072700
*                                                                     * 00072800
*                                                                     * 00072900
*                                                                     * 00073000
*      ÝCOM(»xcom!NULLº)¨                                             * 00073100
*          is an optional character input  that will appear in the    * 00073200
*          block comment before the macro invocation echo. It can be  * 00073300
*          used to comment the macro invocation.  The comment string  * 00073400
*          must be enclosed in quotes if it contains any lower case   * 00073500
*          characters.                                                * 00073600
*          DEFAULT: NULL                                              * 00073700
*                                                                     * 00073800
*                                                                     * 00073900
*                                                                     * 00074000
*                                                                     * 00074100
*      ÝPLISTVER(»xplistver!IMPLIED_VERSIONº)¨                        * 00074200
*          is an optional byte input decimal value in the "1-1" range * 00074300
*          that specifies the macro version.  PLISTVER is the only    * 00074400
*          key allowed on the list form of MF and determines which    * 00074500
*          parameter list is generated.  Note that MAX may be         * 00074600
*          specified instead of a number, and the parameter list will * 00074700
*          be of the largest size currently supported. This size may  * 00074800
*          grow from release to release (thus possibly affecting the  * 00074900
*          amount of storage needed by your program).  If your        * 00075000
*          program can tolerate this, IBM recommends that you always  * 00075100
*          specify MAX when creating the list form parameter list as  * 00075200
*          that will ensure that the list form parameter list is      * 00075300
*          always long enough to hold whatever parameters might be    * 00075400
*          specified on the execute form.                             * 00075500
*          DEFAULT: IMPLIED_VERSION.  When PLISTVER is omitted, the   * 00075600
*          default is the lowest version which allows all of the      * 00075700
*          parameters specified on the invocation to be processed.    * 00075800
*                                                                     * 00075900
*                                                                     * 00076000
*                                                                     * 00076100
*                                                                     * 00076200
*      ÝMF(»S!L!Eº)¨                                                  * 00076300
*          is an optional keyword input which specifies the macro     * 00076400
*          form.                                                      * 00076500
*          DEFAULT: S                                                 * 00076600
*                                                                     * 00076700
*                                                                     * 00076800
*          ÝMF(S)¨                                                    * 00076900
*              specifies the standard form of the macro.  The "S"     * 00077000
*              form generates code to put the parameters into the     * 00077100
*              parameter list and invoke the desired service.  Full   * 00077200
*              checking for required macro keys is done along with    * 00077300
*              supplying defaults for omitted optional parameters.    * 00077400
*              The ?EPILOG macro must be invoked at the end of the    * 00077500
*              module.                                                * 00077600
*                                                                     * 00077700
*              For assembly language code modules, the "S" form       * 00077800
*              generates code to put the parameters into an in-line   * 00077900
*              parameter list and invoke the desired service.  Full   * 00078000
*              checking for required macro keys is done along with    * 00078100
*              supplying defaults for omitted optional parameters.    * 00078200
*                                                                     * 00078300
*          ÝMF(L,xmfctrl»,xmfattr!BDY(DWORD)º)¨                       * 00078400
*              specifies the list form of the macro.  The "L" form    * 00078500
*              defines an area to be used for the parameter list.     * 00078600
*              Only the PLISTVER key may be specified on the          * 00078700
*              invocation.  All other macro parameters are flagged as * 00078800
*              errors.  If PLISTVER is not specified, the original    * 00078900
*              parameter list definition is used.                     * 00079000
*                                                                     * 00079100
*            ,xmfctrl                                                 * 00079200
*              is a required input.  It is the name of a storage area * 00079300
*              for the parameter list.                                * 00079400
*                                                                     * 00079500
*            »,xmfattr!BDY(DWORD)º                                    * 00079600
*              is an optional 60 character input string that varies   * 00079700
*              from 1 to 60 characters. Use it to force boundary      * 00079800
*              alignment of the parameter list. Use only 0F or 0D     * 00079900
*              (assembler-only).                                      * 00080000
*              DEFAULT: 0D for Assembler, BDY(DWORD) for PL/X, which  * 00080100
*              forces the parameter list to a doubleword boundary.    * 00080200
*                                                                     * 00080300
*          ÝMF(E,xmfctrl»,COMPLETEº)¨                                 * 00080400
*              specifies the execute form of the macro.  The "E" form * 00080500
*              generates code to put the parameters into the          * 00080600
*              parameter list specified by xmfctrl and provides full  * 00080700
*              syntax checking with default setting.                  * 00080800
*                                                                     * 00080900
*            ,xmfctrl                                                 * 00081000
*              is a required input.  It is the name (RS-type) (or     * 00081100
*              address in register (1)-(12) ASM only) of a storage    * 00081200
*              area for the parameter list.                           * 00081300
*                                                                     * 00081400
*            »,COMPLETEº                                              * 00081500
*              is an optional keyword input which specifies the       * 00081600
*              degree of macro parameter syntax checking.             * 00081700
*              DEFAULT: COMPLETE                                      * 00081800
*                                                                     * 00081900
*                                                                     * 00082000
*              COMPLETE                                               * 00082100
*                  Checking for required macro keys is done and       * 00082200
*                  defaults are supplied for omitted optional         * 00082300
*                  parameters.                                        * 00082400
*                                                                     * 00082500
*                                                                     * 00082600
*                                                                     * 00082700
*                                                                     * 00082800
*                                                                     * 00082900
*                                                                     * 00083000
*                                                                     * 00083100
*01* ABEND CODES:                                                     * 00083200
*                                                                     * 00083300
*                                                                     * 00083400
*       8C5       Refer to MVS/ESA System Codes for an explanation    * 00083500
*                 and programmer responses.                           * 00083600
*                                                                     * 00083700
*                                                                     * 00083800
*                                                                     * 00083900
*01* RETURN CODES:                                                    * 00084000
*                                                                     * 00084100
*                                                                     * 00084200
*                 Return codes are documented in mapping macro        * 00084300
*                 IEFJSRC.                                            * 00084400
*                                                                     * 00084500
*                                                                     * 00084600
*                                                                     * 00084700
*01* REASON CODES:                                                    * 00084800
*                                                                     * 00084900
*       Reason codes are documented in mapping macro IEFJSRC.         * 00085000
*                                                                     * 00085100
*01* MODULE TYPE:  ASSEM-PL/X MACRO                                   * 00085200
*                                                                     * 00085300
*02*   PROCESSOR:  ASSEM-PL/X                                         * 00085400
*                                                                     * 00085500
*01* COMPONENT:  SC1B6                                                * 00085600
*                                                                     * 00085700
*01* DISTRIBUTION LIBRARY: AMACLIB                                    * 00085800
*                                                                     * 00085900
*01* MACRO USAGE NOTES:                                               * 00086000
*                                                                     * 00086100
*                                                                     * 00086200
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00086300
*        global macro variable.  Any value other than 'NO' will       * 00086400
*        result in the macro expansion being printed.  The default is * 00086500
*        'YES'.  The following examples illustrate how the ZPRINT     * 00086600
*        variable should be set.                                      * 00086700
*                                                                     * 00086800
*                    GBLC &ZPRINT                                     * 00086900
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00087000
*                                                                     * 00087100
*                                                                     * 00087200
*    2.  All  keys currently contained in the IEFSSI macro correspond * 00087300
*        to  version 1.  If you specify PLISTVER, use a value of 1 or * 00087400
*        MAX.                                                         * 00087500
*                                                                     * 00087600
*                                                                     * 00087700
*                                                                     * 00087800
*                                                                     * 00087900
*01* CHANGE ACTIVITY:                                                 * 00088000
*                                                                     * 00088100
*   Flag LineItem  FMID    Date   ID    Comment                       * 00088200
*                                                                     * 00088300
*    $L0=SSIDP    HBB5520 931109 PDBN:  Dynamic SSI                   * 00088400
*    $D1=DN70009  HBB5520 940210 PDBN:  Dynamic SSI                   * 00088500
*    $P1=PN70105  HBB5520 940210 PDBN:  Dynamic SSI                   * 00088600
*    $D2=DN70027  HBB5520 940310 PDBN:  Dynamic SSI                   * 00088700
*    $D3=DN70025  HBB5520 940414 PDBN:  Dynamic SSI                   * 00088800
*    $D4=DN70037  HBB5520 940505 PDBN:  Dynamic SSI                   * 00088900
*    $P2=PN70937  HBB5520 940908 PDBN:  Dynamic SSI                   * 00089000
*    $P3=ME18813  HBB7780 100305 PDXB:  Avoid null basereg            * 00089100
*    $L1=SSIDEL   HBB77A0 140601 PDTA:  SSI DELETE support Feature    * 00089200
*                                         ME26721                     * 00089300
*    $P4=W121740  HBB77B0 160715 PDTA:  Jumpify                       * 00089400
****** END OF SPECIFICATIONS *****************************************/ 00089500
*/********************************************************************* 00089600
         MACRO                                                          00089700
&XLABEL  IEFSSI &SUBNAME=,&REQUEST=,&CONSNAME=,&INITRTN=,&INITPARM=,   *00089800
               &INITPLEN=,&INTOKEN=,&COMMAND=,&REQDSUB=,&EVENTRTN=,    *00089900
               &OUTTOKEN=,&SUBDATA1=,&SUBDATA2=,&WORKAREA=,&WORKASP=,  *00090000
               &RETCODE=,&RSNCODE=,&COM=,&PLISTVER=,&MF=                00090100
.*                                                                      00090200
*                MACDATE -10/24/16-<1>                                  00090300
.*                                                                      00090400
.*******************************************************************    00090500
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00090600
.*******************************************************************    00090700
                GBLC  &ZPRINT     YES=PRINT NO=NO PRINT                 00090800
                GBLC  &ZTEST      YES=TEST NO=NO TEST                   00090900
                GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX           00091000
.*                                                                      00091100
                GBLC  &ZIEFSSI    YES=MACRO USED AT LEAST ONCE          00091200
.*******************************************************************    00091300
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00091400
.*******************************************************************    00091500
                LCLC  &ZMS        ERROR MESSAGE WORK AREA               00091600
                LCLC  &ZCNDX      SYSNDX CHARACTERS                     00091700
                LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED            00091800
                LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR           00091900
                LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE           00092000
                LCLA  &ZAWRK      USED AS A WORK AREA                   00092100
                LCLA  &ZASIZ      USED FOR SIZE OF VALUE                00092200
                LCLA  &ZN         NUMERIC WORK VARIABLE                 00092300
                LCLC  &ZC         CHARACTER WORK VARIABLE               00092400
                LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE           00092500
                LCLA  &ZTLA       VALUE TOO LONG VARIABLE               00092600
                LCLC  &ZMAC_G     "G" or null                           00092700
&ZMAC_G         SETC  ''                                                00092800
                LCLC  &ZMAC_LR                                          00092900
&ZMAC_LR        SETC  'LR'                                              00093000
                LCLC  &ZMAC_L                                           00093100
&ZMAC_L         SETC  'L'                                               00093200
                LCLC  &ZMAC_ST                                          00093300
&ZMAC_ST        SETC  'ST'                                              00093400
                LCLC  &ZMAC_LLGT                                        00093500
&ZMAC_LLGT      SETC  'L'                                               00093600
                LCLC  &ZMAC_LGR                                         00093700
&ZMAC_LGR       SETC  'LR'                                              00093800
                LCLC  &ZMAC_LG                                          00093900
&ZMAC_LG        SETC  'L'                                               00094000
                LCLC  &ZMAC_STG                                         00094100
&ZMAC_STG       SETC  'ST'                                              00094200
                LCLA  &ZMACRET    MACRO RETURN CODE                     00094300
&ZMACRET        SETA  0           ASSUME NO ERRORS                      00094400
.*                                                                      00094500
                LCLC  &ZCSYSLIST(255)           NONXKEY, POS ARRAY      00094600
                LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()            00094700
                LCLA  &ZPLLEN     PARAMETER LIST LENGTH                 00094800
                LCLC  &ZENDBASEPL               End of base PL          00094900
                LCLA  &ZPLWORKA   PARAMETER LIST LENGTH                 00095000
.*******************************************************************    00095100
.***AB.04  MACRO VARIABLES FOR RANGES AND SETS OF ARGUMENTS             00095200
.*******************************************************************    00095300
                LCLA  &ZI         INDEX FOR ARRAY                       00095400
                LCLA  &ZJ         INDEX FOR PARMS                       00095500
                LCLA  &ZK         INDEX FOR PARSE                       00095600
                LCLA  &ZLO        LOW RANGE VALUE                       00095700
                LCLA  &ZHI        HIGH RANGE VALUE                      00095800
                LCLC  &ZW         WORK AREA FOR PARM                    00095900
.********************************************************************   00096000
.***AB.05  INVOKE MVS MACROS TO CONTROL CODE GENERATION                 00096100
.********************************************************************   00096200
                GBLC  &SYSSPLV    SP LEVEL 1,2,3 -SPLEVEL               00096300
                GBLC  &SYSASCE    SYSTEM STATE P ANY AR-SYSSTATE        00096400
                GBLA  &SYSALVL    SYSSTATE ARCHLVL                      00096500
                GBLC  &SYSAM64    SYSSTATE AMODE64                      00096600
.*                                                                      00096700
                AIF   (K'&SYSASCE GT 0).ZSYS4   SYS STATE DEFINED       00096800
                AIF   (K'&SYSSPLV GT 0).ZSYS2   SP LEVEL DEFINED        00096900
                SPLEVEL  TEST                                           00097000
.ZSYS2          ANOP  ,                                                 00097100
                AIF   ('&SYSSPLV' EQ '1').ZSYS3  PRE SP 3.1             00097200
                AIF   ('&SYSSPLV' EQ '2').ZSYS3  PRE SP 3.1             00097300
                SYSSTATE TEST                                           00097400
                AGO   .ZSYS4                                            00097500
.ZSYS3          ANOP  ,                                                 00097600
&SYSASCE        SETC  'P'         ASSUME SYSSTATE PRIMARY               00097700
.ZSYS4          ANOP  ,                                                 00097800
                AIF   ('&SYSAM64' NE 'YES').ZSYSN64                     00097900
&ZMAC_LLGT      SETC 'LLGT'                                             00098000
&ZMAC_LGR       SETC 'LGR'                                              00098100
&ZMAC_LG        SETC 'LG'                                               00098200
&ZMAC_STG       SETC 'STG'                                              00098300
.ZSYSN64        ANOP  ,                                                 00098400
.*******************************************************************    00098500
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00098600
.*******************************************************************    00098700
                LCLC  &XSUBNAME   ++ NAME                               00098800
                LCLC  &XREQUEST   ++ VALUE                              00098900
                LCLC  &XCONSNAME  ++ NAME                               00099000
                LCLC  &XINITRTN   ++ NAME                               00099100
                LCLC  &XINITPARM  ++ NAME                               00099200
                LCLC  &XINITPLEN  ++ NAME                               00099300
                LCLC  &XINTOKEN   ++ NAME                               00099400
                LCLC  &XCOMMAND   ++ VALUE                              00099500
                LCLC  &XREQDSUB   ++ VALUE                              00099600
                LCLC  &XEVENTRTN  ++ NAME                               00099700
                LCLC  &XOUTTOKEN  ++ NAME                               00099800
                LCLC  &XSUBDATA1  ++ NAME                               00099900
                LCLC  &XSUBDATA2  ++ NAME                               00100000
                LCLC  &XWORKAREA  ++ NAME                               00100100
                LCLC  &XWORKASP   ++ NAME                               00100200
                LCLC  &XRETCODE   ++ NAME                               00100300
                LCLC  &XRSNCODE   ++ NAME                               00100400
                LCLC  &XCOM       ++ VALUE                              00100500
                LCLA  &XPLISTVER  ++ VALUE                              00100600
                LCLC  &XMF        ++ VALUE                              00100700
                LCLC  &XMFCTRL    ++ NAME                               00100800
                LCLC  &XMFATTR    ++ VALUE                              00100900
                LCLC  &XMFSCK     ++ VALUE                              00101000
.*******************************************************************    00101100
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00101200
.*******************************************************************    00101300
                LCLC  &ZXSUBNAME  ++ INPUT NAME                         00101400
                LCLC  &ZXREQUEST  ++ INPUT VALUE                        00101500
                LCLC  &ZXCONSNAME               ++ INPUT NAME           00101600
                LCLC  &ZXINITRTN  ++ INPUT NAME                         00101700
                LCLC  &ZXINITPARM               ++ INPUT NAME           00101800
                LCLC  &ZXINITPLEN               ++ INPUT NAME           00101900
                LCLC  &ZXINTOKEN  ++ INPUT NAME                         00102000
                LCLC  &ZXCOMMAND  ++ INPUT VALUE                        00102100
                LCLC  &ZXREQDSUB  ++ INPUT VALUE                        00102200
                LCLC  &ZXEVENTRTN               ++ INPUT NAME           00102300
                LCLC  &ZXOUTTOKEN               ++ OUTPUT NAME          00102400
                LCLC  &ZXSUBDATA1               ++ INPUT NAME           00102500
                LCLC  &ZXSUBDATA2               ++ INPUT NAME           00102600
                LCLC  &ZXWORKAREA               ++ OUTPUT NAME          00102700
                LCLC  &ZXWORKASP  ++ INPUT NAME                         00102800
                LCLC  &ZXRETCODE  ++ OUTPUT NAME                        00102900
                LCLC  &ZXRSNCODE  ++ OUTPUT NAME                        00103000
                LCLC  &ZXCOM      ++ INPUT VALUE                        00103100
                LCLC  &ZXPLISTVER               ++ INPUT VALUE          00103200
                LCLC  &ZXMF       ++ INPUT VALUE                        00103300
                LCLC  &ZXMFCTRL   ++ INPUT NAME                         00103400
                LCLC  &ZXMFATTR   ++ INPUT VALUE                        00103500
                LCLC  &ZXMFSCK    ++ INPUT VALUE                        00103600
.********************************************************************   00103700
.***AC.PLV01  PROCESS PLISTVER                                      *   00103800
.********************************************************************   00103900
&XPLISTVER      SETA  1                                                 00104000
                AIF   (K'&PLISTVER(1) LE 0).ZPLV0                       00104100
                AIF   ('&PLISTVER(1)' NE 'MAX').ZPLV0                   00104200
&XPLISTVER      SETA  1                                                 00104300
.ZPLV0          ANOP  ,                                                 00104400
.*                                                                      00104500
                AIF   (K'&PLISTVER(1) LE 0).ZPVCKE                      00104600
                AIF   ('&PLISTVER(1)' EQ 'IMPLIED_VERSION').ZPVCKE      00104700
                AIF   ('&PLISTVER(1)' EQ 'MAX').ZPVCKE                  00104800
.*-------------------------------------------------------------------   00104900
                AIF   (N'&PLISTVER LE 1).ZPVCK3  CK NUM                 00105000
&ZMS            SETC  '"PLISTVER='                                      00105100
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00105200
&ZMS            SETC  '&ZMS "PLISTVER"'                                 00105300
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00105400
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00105500
                AGO   .ZPVCK2                                           00105600
.ZPVCK3         ANOP  ,                                                 00105700
.*-------------------------------------------------------------------   00105800
                AIF   ('&PLISTVER'(1,1) NE '(').ZPVCK2                  00105900
&ZMS            SETC  '"PLISTVER='                                      00106000
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00106100
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00106200
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00106300
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00106400
                AGO   .ZPVCKE                                           00106500
.ZPVCK2         ANOP  ,                                                 00106600
.*-------------------------------------------------------------------   00106700
&ZCVAL          SETC  '&PLISTVER(1)'                                    00106800
                AIF   ('&ZCVAL'(1,1) EQ '(').ZPVCKE  IN GPR             00106900
                AIF   (T'&ZCVAL NE 'N').ZPVCK6  NUMERIC ERR             00107000
&ZN             SETA   &PLISTVER(1)        CONVERT TO ARITHMETIC        00107100
                AIF   (&ZN LT 1).ZPVCK6    TOO LOW                      00107200
                AIF   (&ZN LE 1).ZPVCK4A   NOT HIGH                     00107300
.ZPVCK6         ANOP  ,                                                 00107400
&ZMS            SETC  '"PLISTVER='                                      00107500
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00107600
&ZMS            SETC  '&ZMS THE RANGE IS "1-1"'                         00107700
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00107800
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00107900
&XPLISTVER      SETA  1                                                 00108000
                AGO   .ZPVCKE                                           00108100
.*-------------------------------------------------------------------   00108200
.ZPVCK4A        ANOP  ,                                                 00108300
                AIF   (&ZN GE &XPLISTVER).ZPVCK4                        00108400
&ZMS            SETC  'PLISTVER='                                       00108500
&ZMS            SETC  '&ZMS.&PLISTVER(1)'                               00108600
&ZMS            SETC  '&ZMS., BUT PLISTVER OF'                          00108700
&ZMS            SETC  '&ZMS &XPLISTVER'                                 00108800
                MNOTE 8,' &ZMS IS REQUIRED.'                            00108900
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00109000
                AGO   .ZPVCK5                                           00109100
.ZPVCK4         ANOP  ,                                                 00109200
&XPLISTVER      SETA  &PLISTVER(1)                                      00109300
.ZPVCK5         ANOP  ,                                                 00109400
.ZPVCKE         ANOP  ,                                                 00109500
.********************************************************************   00109600
.***AG.MF01 PROCESS MF MACRO FORMS                                      00109700
.********************************************************************   00109800
                ACTR  10000                                             00109900
.*------------------------------------------------------------------    00110000
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00110100
&XMF            SETC  ''          INITIALIZE XVARIABLE                  00110200
.*-------------------------------------------------------------------   00110300
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00110400
.ZG80           ANOP  ,                                                 00110500
&ZTLC           SETC 'S'                                                00110600
                AIF   ('&MF(1)' NE '&ZTLC').ZG81                        00110700
&XMF            SETC  'S'         SET KEYWORD                           00110800
                AIF   (N'&MF LE 1).ZG80A        CK NUM                  00110900
&ZMS            SETC  '"MF='                                            00111000
&ZMS            SETC  '&ZMS.&MF"'                                       00111100
&ZMS            SETC  '&ZMS "MF"'                                       00111200
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00111300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00111400
.ZG80A          ANOP  ,                                                 00111500
.*-------------------------------------------------------------------   00111600
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00111700
.ZG81           ANOP  ,                                                 00111800
&ZTLC           SETC 'L'                                                00111900
                AIF   ('&MF(1)' NE '&ZTLC').ZG88                        00112000
&XMF            SETC  'L'         SET KEYWORD                           00112100
                AIF   (N'&MF LE 3).ZG81A        CK NUM                  00112200
&ZMS            SETC  '"MF='                                            00112300
&ZMS            SETC  '&ZMS.&MF"'                                       00112400
&ZMS            SETC  '&ZMS "MF"'                                       00112500
                MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'              00112600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00112700
.ZG81A          ANOP  ,                                                 00112800
.*-------------------------------------------------------------------   00112900
.***AG.KKCTL08 -MF(L) SPECIAL CHECK                                     00113000
                AIF   (N'&SYSLIST NE 0).ZG81B   POSITIONALS?            00113100
                AIF   ('&SUBNAME' NE '').ZG81B  KEYS?                   00113200
                AIF   ('&REQUEST' NE '').ZG81B  KEYS?                   00113300
                AIF   ('&CONSNAME' NE '').ZG81B  KEYS?                  00113400
                AIF   ('&INITRTN' NE '').ZG81B  KEYS?                   00113500
                AIF   ('&INITPARM' NE '').ZG81B  KEYS?                  00113600
                AIF   ('&INITPLEN' NE '').ZG81B  KEYS?                  00113700
                AIF   ('&INTOKEN' NE '').ZG81B  KEYS?                   00113800
                AIF   ('&COMMAND' NE '').ZG81B  KEYS?                   00113900
                AIF   ('&REQDSUB' NE '').ZG81B  KEYS?                   00114000
                AIF   ('&EVENTRTN' NE '').ZG81B  KEYS?                  00114100
                AIF   ('&OUTTOKEN' NE '').ZG81B  KEYS?                  00114200
                AIF   ('&SUBDATA1' NE '').ZG81B  KEYS?                  00114300
                AIF   ('&SUBDATA2' NE '').ZG81B  KEYS?                  00114400
                AIF   ('&WORKAREA' NE '').ZG81B  KEYS?                  00114500
                AIF   ('&WORKASP' NE '').ZG81B  KEYS?                   00114600
                AIF   ('&RETCODE' NE '').ZG81B  KEYS?                   00114700
                AIF   ('&RSNCODE' NE '').ZG81B  KEYS?                   00114800
                AIF   ('&COM' NE '').ZG81B      KEYS?                   00114900
                AGO    .ZG81C     INVOCATION OKAY                       00115000
.ZG81B          ANOP  ,                                                 00115100
&ZMS            SETC  'THE "L" FORM OF "MF"'                            00115200
&ZMS            SETC  '&ZMS CAN ONLY HAVE'                              00115300
&ZMS            SETC  '&ZMS THE "PLISTVER" KEY'                         00115400
                MNOTE 8,' &ZMS SPECIFIED ON THE INVOCATION.'            00115500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00115600
.ZG81C          ANOP  ,                                                 00115700
.*-------------------------------------------------------------------   00115800
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00115900
&ZXMFCTRL       SETC  'INPUT'     SET IN/OUTPUT                         00116000
&XMFCTRL        SETC  '&MF(2,1)'  SET XVARIABLE                         00116100
                AIF   (N'&MF(2) GT 1).ZG83B     MULTI                   00116200
&XMFCTRL        SETC  '&MF(2)'    SET XVARIABLE                         00116300
.ZG83B          AIF   (K'&MF(2) GT 0).ZG83C                             00116400
&ZXMFCTRL       SETC  ''          RESET IN/OUTPUT                       00116500
&ZMS            SETC  'WHEN "L" IS SPECIFIED'                           00116600
&ZMS            SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'               00116700
                MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                      00116800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00116900
.ZG83C          ANOP  ,                                                 00117000
.*-------------------------------------------------------------------   00117100
.***AG.KCK01 NAME, OPT RQD INPUT, POS(2) -GPR NOT ALLOWED               00117200
                AIF   (K'&ZXMFCTRL LE 0).ZG83P  NOT I/O                 00117300
                AIF   ('&XMFCTRL'(1,1) NE '(').ZG83P                    00117400
&ZXMFCTRL       SETC  ''          RESET IN/OUTPUT                       00117500
&ZMS            SETC  '"MF='                                            00117600
&ZMS            SETC  '&ZMS.&MF"'                                       00117700
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00117800
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 2.'                 00117900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00118000
.ZG83P          ANOP  ,                                                 00118100
.*-------------------------------------------------------------------   00118200
.***AG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE                      00118300
&ZXMFATTR       SETC  'INPUT'     SET IN/OUTPUT                         00118400
&XMFATTR        SETC  '0D'                                              00118500
                AIF   (K'&MF(3) LE 0).ZG86B     PARM                    00118600
&XMFATTR        SETC  '&MF(3,1)'  SET XVARIABLE                         00118700
                AIF   (N'&MF(3) GT 1).ZG86B     MULTI                   00118800
&XMFATTR        SETC  '&MF(3)'    SET XVARIABLE                         00118900
.ZG86B          ANOP  ,                                                 00119000
.*-------------------------------------------------------------------   00119100
.***AG.KCK01 VALUE, OPT INPUT, POS(3) -GPR NOT ALLOWED                  00119200
                AIF   (K'&ZXMFATTR LE 0).ZG86P  NOT I/O                 00119300
                AIF   ('&XMFATTR'(1,1) NE '(').ZG86P                    00119400
&ZXMFATTR       SETC  ''          RESET IN/OUTPUT                       00119500
&ZMS            SETC  '"MF='                                            00119600
&ZMS            SETC  '&ZMS.&MF"'                                       00119700
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00119800
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 3.'                 00119900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00120000
.ZG86P          ANOP  ,                                                 00120100
.*-------------------------------------------------------------------   00120200
.***AG.KCK03 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH                 00120300
                AIF   (K'&ZXMFATTR LE 0).ZG86S  NOT I/O                 00120400
                AIF   (K'&XMFATTR LE 60).ZG86S  LNG OK                  00120500
&ZXMFATTR       SETC  ''          RESET IN/OUTPUT                       00120600
&ZMS            SETC  '"MF='                                            00120700
&ZMS            SETC  '&ZMS.&MF"'                                       00120800
&ZMS            SETC  '&ZMS ARGUMENT 3 EXCEEDS THE MAXIMUM'             00120900
                MNOTE 8,' &ZMS LENGTH OF 60 CHARACTERS.'                00121000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00121100
.ZG86S          ANOP  ,                                                 00121200
.*-------------------------------------------------------------------   00121300
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00121400
.ZG88           ANOP  ,                                                 00121500
&ZTLC           SETC 'E'                                                00121600
                AIF   ('&MF(1)' NE '&ZTLC').ZG96                        00121700
&XMF            SETC  'E'         SET KEYWORD                           00121800
                AIF   (N'&MF LE 3).ZG88A        CK NUM                  00121900
&ZMS            SETC  '"MF='                                            00122000
&ZMS            SETC  '&ZMS.&MF"'                                       00122100
&ZMS            SETC  '&ZMS "MF"'                                       00122200
                MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'              00122300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00122400
.ZG88A          ANOP  ,                                                 00122500
.*-------------------------------------------------------------------   00122600
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00122700
&ZXMFCTRL       SETC  'INPUT'     SET IN/OUTPUT                         00122800
&XMFCTRL        SETC  '&MF(2,1)'  SET XVARIABLE                         00122900
                AIF   (N'&MF(2) GT 1).ZG90B     MULTI                   00123000
&XMFCTRL        SETC  '&MF(2)'    SET XVARIABLE                         00123100
.ZG90B          AIF   (K'&MF(2) GT 0).ZG90C                             00123200
&ZXMFCTRL       SETC  ''          RESET IN/OUTPUT                       00123300
&ZMS            SETC  'WHEN "E" IS SPECIFIED'                           00123400
&ZMS            SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'               00123500
                MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                      00123600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00123700
.ZG90C          ANOP  ,                                                 00123800
.*-------------------------------------------------------------------   00123900
.***AG.KCK02 NAME, OPT RQD INPUT, POS(2) -GPR OUT OF RANGE              00124000
                AIF   (K'&ZXMFCTRL LE 0).ZG90R  NOT I/O                 00124100
                AIF   ('&XMFCTRL'(1,1) NE '(').ZG90R                    00124200
&ZCGPR          SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)                        00124300
                AIF   ('&ZCGPR'(1,1) NE '0').ZG90P                      00124400
                AIF   (K'&ZCGPR GT 2).ZG90Q                             00124500
                AIF   ('&ZCGPR' EQ '0').ZG90Q                           00124600
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00124700
                AIF   (T'&ZCGPR NE 'N').ZG90Q   INVALID REG NAME        00124800
.ZG90P          ANOP  ,                                                 00124900
                AIF   (T'&ZCGPR NE 'N').ZG90R   NON NUMERIC             00125000
                AIF   ('&ZCGPR' LT '1').ZG90Q                           00125100
                AIF   ('&ZCGPR' LE '12').ZG90R                          00125200
.ZG90Q          ANOP  ,                                                 00125300
&ZMS            SETC  '"MF='                                            00125400
&ZMS            SETC  '&ZMS.&MF"'                                       00125500
&ZMS            SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'         00125600
                MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'                  00125700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00125800
.ZG90R          ANOP  ,                                                 00125900
.*-------------------------------------------------------------------   00126000
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00126100
&XMFSCK         SETC  ''          INITIALIZE XVARIABLE                  00126200
.ZG94A   AIF   ('&MF(3)' NE 'COMPLETE').ZG95A                           00126300
&XMFSCK         SETC  'COMPLETE'  SET KEYWORD                           00126400
.*-------------------------------------------------------------------   00126500
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00126600
.ZG95A          AIF   (K'&XMFSCK GT 0).ZG95C    KEYWORD                 00126700
                AIF   (K'&MF(3) LE 0).ZG95B                             00126800
&ZMS            SETC  '"MF='                                            00126900
&ZMS            SETC  '&ZMS.&MF"'                                       00127000
&ZMS            SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '         00127100
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00127200
&ZMS            SETC  '&ZMS "COMPLETE".'                                00127300
                MNOTE 8,' &ZMS '                                        00127400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00127500
.ZG95B          ANOP  ,                                                 00127600
&XMFSCK         SETC  'COMPLETE'  SET DEFAULT KEYWORD                   00127700
.ZG95C          ANOP  ,                                                 00127800
&ZXMFSCK        SETC  'INPUT'     SET IN/OUTPUT                         00127900
.*------------------------------------------------------------------    00128000
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00128100
.ZG96           ANOP  ,                                                 00128200
&ZXMF           SETC  'INPUT'     SET IN/OUTPUT                         00128300
                AIF   (K'&XMF GT 0).ZG96E       VALID ARG               00128400
                AIF   (T'&MF EQ 'O').ZG96D      OMITTED                 00128500
&ZASYSLNDX      SETA  0                                                 00128600
.ZG96A          ANOP  ,           POSITIONAL MACRO KEY                  00128700
&ZASYSLNDX      SETA  &ZASYSLNDX+1                                      00128800
                AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG96C                  00128900
&ZTLC           SETC 'MF'                                               00129000
                AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG96A         00129100
.ZG96B          ANOP  ,                                                 00129200
&ZXMF           SETC  ''          RESET IN/OUTPUT                       00129300
&ZMS            SETC  'THE "MF" KEY'                                    00129400
&ZMS            SETC  '&ZMS MUST CONTAIN ONE'                           00129500
                MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                  00129600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00129700
                AGO   .ZG96E                                            00129800
.ZG96C          ANOP  ,                                                 00129900
&ZXMF           SETC  ''          RESET IN/OUTPUT                       00130000
&ZMS            SETC  '"MF='                                            00130100
&ZMS            SETC  '&ZMS.&MF"'                                       00130200
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00130300
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00130400
&ZMS            SETC  '&ZMS "S",'                                       00130500
&ZMS            SETC  '&ZMS "L",'                                       00130600
&ZMS            SETC  '&ZMS OR "E".'                                    00130700
                MNOTE 8,' &ZMS '                                        00130800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00130900
                AGO   .ZG96E                                            00131000
.ZG96D          ANOP  ,                                                 00131100
&XMF            SETC  'S'         SET DEFAULT KEYWORD                   00131200
&XMFSCK         SETC  'COMPLETE'  COMPLETE CHECKING                     00131300
.ZG96E          ANOP  ,                                                 00131400
.********************************************************************   00131500
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00131600
.********************************************************************   00131700
                ACTR  10000                                             00131800
.*-------------------------------------------------------------------   00131900
.***AG.MF03 MF=(SLE)                                                    00132000
                AIF   ('&XMF' EQ 'L').ZGMFX                             00132100
.*----------------------------------------------------------------***   00132200
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00132300
                AIF   (N'&SUBNAME LE 1).ZG2A    CK NUM                  00132400
&ZMS            SETC  '"SUBNAME='                                       00132500
&ZMS            SETC  '&ZMS.&SUBNAME"'                                  00132600
&ZMS            SETC  '&ZMS "SUBNAME"'                                  00132700
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00132800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00132900
.ZG2A           ANOP  ,                                                 00133000
.*-------------------------------------------------------------------   00133100
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00133200
&ZXSUBNAME      SETC  'INPUT'     SET IN/OUTPUT                         00133300
&XSUBNAME       SETC  '&SUBNAME(1)'             SET XVARIABLE           00133400
                AIF   (N'&SUBNAME GT 1).ZG2B    MULTI                   00133500
&XSUBNAME       SETC  '&SUBNAME'  SET XVARIABLE                         00133600
.ZG2B           AIF   (K'&SUBNAME(1) GT 0).ZG2C                         00133700
&ZXSUBNAME      SETC  ''          RESET IN/OUTPUT                       00133800
&ZMS            SETC  ' '                                               00133900
&ZMS            SETC  '&ZMS "SUBNAME" KEY AND ITS'                      00134000
                MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                  00134100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00134200
.ZG2C           ANOP  ,                                                 00134300
.*-------------------------------------------------------------------   00134400
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00134500
                AIF   (K'&ZXSUBNAME LE 0).ZG2R  NOT I/O                 00134600
                AIF   ('&XSUBNAME'(1,1) NE '(').ZG2R                    00134700
&ZCGPR          SETC  '&XSUBNAME'(2,K'&XSUBNAME-2)                      00134800
                AIF   ('&ZCGPR'(1,1) NE '0').ZG2P                       00134900
                AIF   (K'&ZCGPR GT 2).ZG2Q                              00135000
                AIF   ('&ZCGPR' EQ '0').ZG2Q                            00135100
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00135200
                AIF   (T'&ZCGPR NE 'N').ZG2Q    INVALID REG NAME        00135300
.ZG2P           ANOP  ,                                                 00135400
                AIF   (T'&ZCGPR NE 'N').ZG2R    NON NUMERIC             00135500
                AIF   ('&ZCGPR' LT '2').ZG2Q                            00135600
                AIF   ('&ZCGPR' LE '12').ZG2R                           00135700
.ZG2Q           ANOP  ,                                                 00135800
&ZMS            SETC  '"SUBNAME='                                       00135900
&ZMS            SETC  '&ZMS.&SUBNAME"'                                  00136000
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00136100
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00136200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00136300
.ZG2R           ANOP  ,                                                 00136400
.*------------------------------------------------------------------    00136500
.***AG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00136600
&XREQUEST       SETC  ''          INITIALIZE XVARIABLE                  00136700
.*-------------------------------------------------------------------   00136800
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00136900
.ZG6            ANOP  ,                                                 00137000
                AIF   (K'&REQUEST(1) LE 0).ZG6A                         00137100
&ZTLC           SETC 'ADD'                                              00137200
                AIF   ('&REQUEST(1)' NE '&ZTLC').ZG19                   00137300
&XREQUEST       SETC  'ADD'       SET KEYWORD                           00137400
                AIF   (N'&REQUEST LE 1).ZG6A    CK NUM                  00137500
&ZMS            SETC  '"REQUEST='                                       00137600
&ZMS            SETC  '&ZMS.&REQUEST"'                                  00137700
&ZMS            SETC  '&ZMS "REQUEST"'                                  00137800
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00137900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00138000
.ZG6A           ANOP  ,                                                 00138100
.*------------------------------------------------------------------    00138200
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00138300
&ZCVAL          SETC ''           CLEAR ERROR KEY ACCUMULATOR           00138400
.ZG6A0          AIF   (K'&INTOKEN LE 0).ZG6A1   OK                      00138500
&ZCVAL          SETC '&ZCVAL INTOKEN'           INCORRECT KEY USED      00138600
.ZG6A1          AIF   (K'&COMMAND LE 0).ZG6A2   OK                      00138700
&ZCVAL          SETC '&ZCVAL COMMAND'           INCORRECT KEY USED      00138800
.ZG6A2          AIF   (K'&REQDSUB LE 0).ZG6A3   OK                      00138900
&ZCVAL          SETC '&ZCVAL REQDSUB'           INCORRECT KEY USED      00139000
.ZG6A3          AIF   (K'&EVENTRTN LE 0).ZG6A4  OK                      00139100
&ZCVAL          SETC '&ZCVAL EVENTRTN'          INCORRECT KEY USED      00139200
.ZG6A4          AIF   (K'&OUTTOKEN LE 0).ZG6A5  OK                      00139300
&ZCVAL          SETC '&ZCVAL OUTTOKEN'          INCORRECT KEY USED      00139400
.ZG6A5          AIF   (K'&SUBDATA1 LE 0).ZG6A6  OK                      00139500
&ZCVAL          SETC '&ZCVAL SUBDATA1'          INCORRECT KEY USED      00139600
.ZG6A6          AIF   (K'&SUBDATA2 LE 0).ZG6A7  OK                      00139700
&ZCVAL          SETC '&ZCVAL SUBDATA2'          INCORRECT KEY USED      00139800
.ZG6A7          AIF   (K'&WORKAREA LE 0).ZG6A8  OK                      00139900
&ZCVAL          SETC '&ZCVAL WORKAREA'          INCORRECT KEY USED      00140000
.ZG6A8          AIF   (K'&WORKASP LE 0).ZG6A9   OK                      00140100
&ZCVAL          SETC '&ZCVAL WORKASP'           INCORRECT KEY USED      00140200
.ZG6A9          AIF   (K'&ZCVAL LE 0).ZG6A10    OK                      00140300
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00140400
&ZMS            SETC  '"REQUEST'                                        00140500
&ZMS            SETC  '&ZMS.=&REQUEST"'                                 00140600
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00140700
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00140800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00140900
.ZG6A10         ANOP  ,                                                 00141000
.*----------------------------------------------------------------***   00141100
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00141200
                AIF   (N'&CONSNAME LE 1).ZG8A   CK NUM                  00141300
&ZMS            SETC  '"CONSNAME='                                      00141400
&ZMS            SETC  '&ZMS.&CONSNAME"'                                 00141500
&ZMS            SETC  '&ZMS "CONSNAME"'                                 00141600
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00141700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00141800
.ZG8A           ANOP  ,                                                 00141900
.*-------------------------------------------------------------------   00142000
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00142100
&ZXCONSNAME     SETC  'INPUT'     SET IN/OUTPUT                         00142200
&XCONSNAME      SETC  '0'                                               00142300
                AIF   (K'&CONSNAME(1) LE 0).ZG8B  PARM                  00142400
&XCONSNAME      SETC  '&CONSNAME(1)'            SET XVARIABLE           00142500
                AIF   (N'&CONSNAME GT 1).ZG8B   MULTI                   00142600
&XCONSNAME      SETC  '&CONSNAME'               SET XVARIABLE           00142700
.ZG8B           ANOP  ,                                                 00142800
.*-------------------------------------------------------------------   00142900
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00143000
                AIF   (K'&ZXCONSNAME LE 0).ZG8R  NOT I/O                00143100
                AIF   ('&XCONSNAME'(1,1) NE '(').ZG8R                   00143200
&ZCGPR          SETC  '&XCONSNAME'(2,K'&XCONSNAME-2)                    00143300
                AIF   ('&ZCGPR'(1,1) NE '0').ZG8P                       00143400
                AIF   (K'&ZCGPR GT 2).ZG8Q                              00143500
                AIF   ('&ZCGPR' EQ '0').ZG8Q                            00143600
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00143700
                AIF   (T'&ZCGPR NE 'N').ZG8Q    INVALID REG NAME        00143800
.ZG8P           ANOP  ,                                                 00143900
                AIF   (T'&ZCGPR NE 'N').ZG8R    NON NUMERIC             00144000
                AIF   ('&ZCGPR' LT '2').ZG8Q                            00144100
                AIF   ('&ZCGPR' LE '12').ZG8R                           00144200
.ZG8Q           ANOP  ,                                                 00144300
&ZMS            SETC  '"CONSNAME='                                      00144400
&ZMS            SETC  '&ZMS.&CONSNAME"'                                 00144500
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00144600
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00144700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00144800
.ZG8R           ANOP  ,                                                 00144900
.*----------------------------------------------------------------***   00145000
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00145100
                AIF   (N'&INITRTN LE 1).ZG11A   CK NUM                  00145200
&ZMS            SETC  '"INITRTN='                                       00145300
&ZMS            SETC  '&ZMS.&INITRTN"'                                  00145400
&ZMS            SETC  '&ZMS "INITRTN"'                                  00145500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00145600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00145700
.ZG11A          ANOP  ,                                                 00145800
.*-------------------------------------------------------------------   00145900
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00146000
&ZXINITRTN      SETC  'INPUT'     SET IN/OUTPUT                         00146100
&XINITRTN       SETC  'NO_INITRTN'                                      00146200
                AIF   (K'&INITRTN(1) LE 0).ZG11B  PARM                  00146300
&XINITRTN       SETC  '&INITRTN(1)'             SET XVARIABLE           00146400
                AIF   (N'&INITRTN GT 1).ZG11B   MULTI                   00146500
&XINITRTN       SETC  '&INITRTN'  SET XVARIABLE                         00146600
.ZG11B          ANOP  ,                                                 00146700
.*-------------------------------------------------------------------   00146800
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00146900
                AIF   (K'&ZXINITRTN LE 0).ZG11R  NOT I/O                00147000
         AIF   ('&XINITRTN' EQ 'NO_INITRTN').ZG11R                      00147100
                AIF   ('&XINITRTN'(1,1) NE '(').ZG11R                   00147200
&ZCGPR          SETC  '&XINITRTN'(2,K'&XINITRTN-2)                      00147300
                AIF   ('&ZCGPR'(1,1) NE '0').ZG11P                      00147400
                AIF   (K'&ZCGPR GT 2).ZG11Q                             00147500
                AIF   ('&ZCGPR' EQ '0').ZG11Q                           00147600
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00147700
                AIF   (T'&ZCGPR NE 'N').ZG11Q   INVALID REG NAME        00147800
.ZG11P          ANOP  ,                                                 00147900
                AIF   (T'&ZCGPR NE 'N').ZG11R   NON NUMERIC             00148000
                AIF   ('&ZCGPR' LT '2').ZG11Q                           00148100
                AIF   ('&ZCGPR' LE '12').ZG11R                          00148200
.ZG11Q          ANOP  ,                                                 00148300
&ZMS            SETC  '"INITRTN='                                       00148400
&ZMS            SETC  '&ZMS.&INITRTN"'                                  00148500
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00148600
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00148700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00148800
.ZG11R          ANOP  ,                                                 00148900
.*----------------------------------------------------------------***   00149000
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00149100
                AIF   (N'&INITPARM LE 1).ZG13A  CK NUM                  00149200
&ZMS            SETC  '"INITPARM='                                      00149300
&ZMS            SETC  '&ZMS.&INITPARM"'                                 00149400
&ZMS            SETC  '&ZMS "INITPARM"'                                 00149500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00149600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00149700
.ZG13A          ANOP  ,                                                 00149800
.*-------------------------------------------------------------------   00149900
.***AG.KXVAR17 NAME, OPT INPUT, KEYS -XVARIABLE                         00150000
&XINITPARM      SETC  'NO_INITPARM'             SET DEFAULT             00150100
                AIF   (K'&INITPARM(1) LE 0).ZG13C  PARM                 00150200
&XINITPARM      SETC  '&INITPARM(1)'            SET XVARIABLE           00150300
                AIF   (N'&INITPARM GT 1).ZG13B  MULTI                   00150400
&XINITPARM      SETC  '&INITPARM'               SET XVARIABLE           00150500
.ZG13B          AIF   (K'&INITRTN(1) GT 0).ZG13C  KEY                   00150600
&ZMS            SETC  '"INITPARM'                                       00150700
&ZMS            SETC  '&ZMS.=&INITPARM"'                                00150800
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00150900
&ZMS            SETC  '&ZMS '                                           00151000
&ZMS            SETC  '&ZMS "INITRTN"'                                  00151100
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00151200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00151300
.ZG13C          ANOP  ,                                                 00151400
&ZXINITPARM     SETC  'INPUT'     SET IN/OUTPUT                         00151500
.*-------------------------------------------------------------------   00151600
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00151700
                AIF   (K'&ZXINITPARM LE 0).ZG13R  NOT I/O               00151800
         AIF   ('&XINITPARM' EQ 'NO_INITPARM').ZG13R                    00151900
                AIF   ('&XINITPARM'(1,1) NE '(').ZG13R                  00152000
&ZCGPR          SETC  '&XINITPARM'(2,K'&XINITPARM-2)                    00152100
                AIF   ('&ZCGPR'(1,1) NE '0').ZG13P                      00152200
                AIF   (K'&ZCGPR GT 2).ZG13Q                             00152300
                AIF   ('&ZCGPR' EQ '0').ZG13Q                           00152400
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00152500
                AIF   (T'&ZCGPR NE 'N').ZG13Q   INVALID REG NAME        00152600
.ZG13P          ANOP  ,                                                 00152700
                AIF   (T'&ZCGPR NE 'N').ZG13R   NON NUMERIC             00152800
                AIF   ('&ZCGPR' LT '2').ZG13Q                           00152900
                AIF   ('&ZCGPR' LE '12').ZG13R                          00153000
.ZG13Q          ANOP  ,                                                 00153100
&ZMS            SETC  '"INITPARM='                                      00153200
&ZMS            SETC  '&ZMS.&INITPARM"'                                 00153300
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00153400
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00153500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00153600
.ZG13R          ANOP  ,                                                 00153700
.*----------------------------------------------------------------***   00153800
.***AG.KXVAR05 NAME, OPT RQD INPUT, KEYS -XVARIABLE KEY                 00153900
                AIF   (N'&INITPLEN LE 1).ZG15A  CK NUM                  00154000
&ZMS            SETC  '"INITPLEN='                                      00154100
&ZMS            SETC  '&ZMS.&INITPLEN"'                                 00154200
&ZMS            SETC  '&ZMS "INITPLEN"'                                 00154300
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00154400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00154500
.ZG15A          ANOP  ,                                                 00154600
.*-------------------------------------------------------------------   00154700
.***AG.KXVAR09 NAME, OPT RQD INPUT, KEYS -XVARIABLE                     00154800
&ZXINITPLEN     SETC  'INPUT'     SET IN/OUTPUT                         00154900
&XINITPLEN      SETC  '&INITPLEN(1)'            SET XVARIABLE           00155000
                AIF   (N'&INITPLEN GT 1).ZG15B  MULTI                   00155100
&XINITPLEN      SETC  '&INITPLEN'               SET XVARIABLE           00155200
.ZG15B          AIF   (K'&INITPARM(1) GT 0).ZG15C  KEY                  00155300
                AIF   (K'&INITPLEN(1) LE 0).ZG15D  PARM                 00155400
&ZMS            SETC  '"INITPLEN'                                       00155500
&ZMS            SETC  '&ZMS.=&INITPLEN"'                                00155600
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00155700
&ZMS            SETC  '&ZMS '                                           00155800
&ZMS            SETC  '&ZMS "INITPARM"'                                 00155900
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00156000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00156100
                AGO   .ZG15E                                            00156200
.*                                                                      00156300
.ZG15C          AIF   (K'&INITPLEN(1) GT 0).ZG15E  PARM                 00156400
&ZXINITPLEN     SETC  ''          RESET IN/OUTPUT                       00156500
&ZMS            SETC  'WHEN "INITPARM" IS SPECIFIED'                    00156600
&ZMS            SETC  '&ZMS , "INITPLEN" KEY AND ITS'                   00156700
                MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                  00156800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00156900
.ZG15D          ANOP  ,                                                 00157000
&XINITPLEN      SETC  '0'         SET DEFAULT                           00157100
.ZG15E          ANOP  ,                                                 00157200
.*-------------------------------------------------------------------   00157300
.***AG.KCK02 NAME, OPT RQD INPUT, KEYS -GPR OUT OF RANGE                00157400
                AIF   (K'&ZXINITPLEN LE 0).ZG15R  NOT I/O               00157500
                AIF   ('&XINITPLEN'(1,1) NE '(').ZG15R                  00157600
&ZCGPR          SETC  '&XINITPLEN'(2,K'&XINITPLEN-2)                    00157700
                AIF   ('&ZCGPR'(1,1) NE '0').ZG15P                      00157800
                AIF   (K'&ZCGPR GT 2).ZG15Q                             00157900
                AIF   ('&ZCGPR' EQ '0').ZG15Q                           00158000
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00158100
                AIF   (T'&ZCGPR NE 'N').ZG15Q   INVALID REG NAME        00158200
.ZG15P          ANOP  ,                                                 00158300
                AIF   (T'&ZCGPR NE 'N').ZG15R   NON NUMERIC             00158400
                AIF   ('&ZCGPR' LT '2').ZG15Q                           00158500
                AIF   ('&ZCGPR' LE '12').ZG15R                          00158600
.ZG15Q          ANOP  ,                                                 00158700
&ZMS            SETC  '"INITPLEN='                                      00158800
&ZMS            SETC  '&ZMS.&INITPLEN"'                                 00158900
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00159000
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00159100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00159200
.ZG15R          ANOP  ,                                                 00159300
.*-------------------------------------------------------------------   00159400
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00159500
.ZG19           ANOP  ,                                                 00159600
&ZTLC           SETC 'ACTIVATE'                                         00159700
                AIF   ('&REQUEST(1)' NE '&ZTLC').ZG23                   00159800
&XREQUEST       SETC  'ACTIVATE'  SET KEYWORD                           00159900
                AIF   (N'&REQUEST LE 1).ZG19A   CK NUM                  00160000
&ZMS            SETC  '"REQUEST='                                       00160100
&ZMS            SETC  '&ZMS.&REQUEST"'                                  00160200
&ZMS            SETC  '&ZMS "REQUEST"'                                  00160300
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00160400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00160500
.ZG19A          ANOP  ,                                                 00160600
.*------------------------------------------------------------------    00160700
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00160800
&ZCVAL          SETC ''           CLEAR ERROR KEY ACCUMULATOR           00160900
.ZG19A0         AIF   (K'&CONSNAME LE 0).ZG19A1  OK                     00161000
&ZCVAL          SETC '&ZCVAL CONSNAME'          INCORRECT KEY USED      00161100
.ZG19A1         AIF   (K'&INITRTN LE 0).ZG19A2  OK                      00161200
&ZCVAL          SETC '&ZCVAL INITRTN'           INCORRECT KEY USED      00161300
.ZG19A2         AIF   (K'&INITPARM LE 0).ZG19A3  OK                     00161400
&ZCVAL          SETC '&ZCVAL INITPARM'          INCORRECT KEY USED      00161500
.ZG19A3         AIF   (K'&INITPLEN LE 0).ZG19A4  OK                     00161600
&ZCVAL          SETC '&ZCVAL INITPLEN'          INCORRECT KEY USED      00161700
.ZG19A4         AIF   (K'&COMMAND LE 0).ZG19A5  OK                      00161800
&ZCVAL          SETC '&ZCVAL COMMAND'           INCORRECT KEY USED      00161900
.ZG19A5         AIF   (K'&REQDSUB LE 0).ZG19A6  OK                      00162000
&ZCVAL          SETC '&ZCVAL REQDSUB'           INCORRECT KEY USED      00162100
.ZG19A6         AIF   (K'&EVENTRTN LE 0).ZG19A7  OK                     00162200
&ZCVAL          SETC '&ZCVAL EVENTRTN'          INCORRECT KEY USED      00162300
.ZG19A7         AIF   (K'&OUTTOKEN LE 0).ZG19A8  OK                     00162400
&ZCVAL          SETC '&ZCVAL OUTTOKEN'          INCORRECT KEY USED      00162500
.ZG19A8         AIF   (K'&SUBDATA1 LE 0).ZG19A9  OK                     00162600
&ZCVAL          SETC '&ZCVAL SUBDATA1'          INCORRECT KEY USED      00162700
.ZG19A9         AIF   (K'&SUBDATA2 LE 0).ZG19A10  OK                    00162800
&ZCVAL          SETC '&ZCVAL SUBDATA2'          INCORRECT KEY USED      00162900
.ZG19A10        AIF   (K'&WORKAREA LE 0).ZG19A11  OK                    00163000
&ZCVAL          SETC '&ZCVAL WORKAREA'          INCORRECT KEY USED      00163100
.ZG19A11        AIF   (K'&WORKASP LE 0).ZG19A12  OK                     00163200
&ZCVAL          SETC '&ZCVAL WORKASP'           INCORRECT KEY USED      00163300
.ZG19A12        AIF   (K'&ZCVAL LE 0).ZG19A13   OK                      00163400
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00163500
&ZMS            SETC  '"REQUEST'                                        00163600
&ZMS            SETC  '&ZMS.=&REQUEST"'                                 00163700
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00163800
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00163900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00164000
.ZG19A13        ANOP  ,                                                 00164100
.*----------------------------------------------------------------***   00164200
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00164300
                AIF   (N'&INTOKEN LE 1).ZG21A   CK NUM                  00164400
&ZMS            SETC  '"INTOKEN='                                       00164500
&ZMS            SETC  '&ZMS.&INTOKEN"'                                  00164600
&ZMS            SETC  '&ZMS "INTOKEN"'                                  00164700
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00164800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00164900
.ZG21A          ANOP  ,                                                 00165000
.*-------------------------------------------------------------------   00165100
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00165200
&ZXINTOKEN      SETC  'INPUT'     SET IN/OUTPUT                         00165300
&XINTOKEN       SETC  'NO_INPUT_TOKEN'                                  00165400
                AIF   (K'&INTOKEN(1) LE 0).ZG21B  PARM                  00165500
&XINTOKEN       SETC  '&INTOKEN(1)'             SET XVARIABLE           00165600
                AIF   (N'&INTOKEN GT 1).ZG21B   MULTI                   00165700
&XINTOKEN       SETC  '&INTOKEN'  SET XVARIABLE                         00165800
.ZG21B          ANOP  ,                                                 00165900
.*-------------------------------------------------------------------   00166000
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00166100
                AIF   (K'&ZXINTOKEN LE 0).ZG21R  NOT I/O                00166200
         AIF   ('&XINTOKEN' EQ 'NO_INPUT_TOKEN').ZG21R                  00166300
                AIF   ('&XINTOKEN'(1,1) NE '(').ZG21R                   00166400
&ZCGPR          SETC  '&XINTOKEN'(2,K'&XINTOKEN-2)                      00166500
                AIF   ('&ZCGPR'(1,1) NE '0').ZG21P                      00166600
                AIF   (K'&ZCGPR GT 2).ZG21Q                             00166700
                AIF   ('&ZCGPR' EQ '0').ZG21Q                           00166800
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00166900
                AIF   (T'&ZCGPR NE 'N').ZG21Q   INVALID REG NAME        00167000
.ZG21P          ANOP  ,                                                 00167100
                AIF   (T'&ZCGPR NE 'N').ZG21R   NON NUMERIC             00167200
                AIF   ('&ZCGPR' LT '2').ZG21Q                           00167300
                AIF   ('&ZCGPR' LE '12').ZG21R                          00167400
.ZG21Q          ANOP  ,                                                 00167500
&ZMS            SETC  '"INTOKEN='                                       00167600
&ZMS            SETC  '&ZMS.&INTOKEN"'                                  00167700
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00167800
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00167900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00168000
.ZG21R          ANOP  ,                                                 00168100
.*-------------------------------------------------------------------   00168200
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00168300
.ZG23           ANOP  ,                                                 00168400
&ZTLC           SETC 'OPTIONS'                                          00168500
                AIF   ('&REQUEST(1)' NE '&ZTLC').ZG37                   00168600
&XREQUEST       SETC  'OPTIONS'   SET KEYWORD                           00168700
                AIF   (N'&REQUEST LE 1).ZG23A   CK NUM                  00168800
&ZMS            SETC  '"REQUEST='                                       00168900
&ZMS            SETC  '&ZMS.&REQUEST"'                                  00169000
&ZMS            SETC  '&ZMS "REQUEST"'                                  00169100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00169200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00169300
.ZG23A          ANOP  ,                                                 00169400
.*------------------------------------------------------------------    00169500
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00169600
&ZCVAL          SETC ''           CLEAR ERROR KEY ACCUMULATOR           00169700
.ZG23A0         AIF   (K'&CONSNAME LE 0).ZG23A1  OK                     00169800
&ZCVAL          SETC '&ZCVAL CONSNAME'          INCORRECT KEY USED      00169900
.ZG23A1         AIF   (K'&INITRTN LE 0).ZG23A2  OK                      00170000
&ZCVAL          SETC '&ZCVAL INITRTN'           INCORRECT KEY USED      00170100
.ZG23A2         AIF   (K'&INITPARM LE 0).ZG23A3  OK                     00170200
&ZCVAL          SETC '&ZCVAL INITPARM'          INCORRECT KEY USED      00170300
.ZG23A3         AIF   (K'&INITPLEN LE 0).ZG23A4  OK                     00170400
&ZCVAL          SETC '&ZCVAL INITPLEN'          INCORRECT KEY USED      00170500
.ZG23A4         AIF   (K'&INTOKEN LE 0).ZG23A5  OK                      00170600
&ZCVAL          SETC '&ZCVAL INTOKEN'           INCORRECT KEY USED      00170700
.ZG23A5         AIF   (K'&OUTTOKEN LE 0).ZG23A6  OK                     00170800
&ZCVAL          SETC '&ZCVAL OUTTOKEN'          INCORRECT KEY USED      00170900
.ZG23A6         AIF   (K'&SUBDATA1 LE 0).ZG23A7  OK                     00171000
&ZCVAL          SETC '&ZCVAL SUBDATA1'          INCORRECT KEY USED      00171100
.ZG23A7         AIF   (K'&SUBDATA2 LE 0).ZG23A8  OK                     00171200
&ZCVAL          SETC '&ZCVAL SUBDATA2'          INCORRECT KEY USED      00171300
.ZG23A8         AIF   (K'&WORKAREA LE 0).ZG23A9  OK                     00171400
&ZCVAL          SETC '&ZCVAL WORKAREA'          INCORRECT KEY USED      00171500
.ZG23A9         AIF   (K'&WORKASP LE 0).ZG23A10  OK                     00171600
&ZCVAL          SETC '&ZCVAL WORKASP'           INCORRECT KEY USED      00171700
.ZG23A10        AIF   (K'&ZCVAL LE 0).ZG23A11   OK                      00171800
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00171900
&ZMS            SETC  '"REQUEST'                                        00172000
&ZMS            SETC  '&ZMS.=&REQUEST"'                                 00172100
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00172200
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00172300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00172400
.ZG23A11        ANOP  ,                                                 00172500
.*----------------------------------------------------------------***   00172600
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00172700
                AIF   (N'&COMMAND LE 1).ZG25A   CK NUM                  00172800
&ZMS            SETC  '"COMMAND='                                       00172900
&ZMS            SETC  '&ZMS.&COMMAND"'                                  00173000
&ZMS            SETC  '&ZMS "COMMAND"'                                  00173100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00173200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00173300
.ZG25A          ANOP  ,                                                 00173400
.*-------------------------------------------------------------------   00173500
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00173600
&XCOMMAND       SETC  ''          INITIALIZE XVARIABLE                  00173700
.ZG26A   AIF   ('&COMMAND(1)' NE 'NO').ZG27A                            00173800
&XCOMMAND       SETC  'NO'        SET KEYWORD                           00173900
.*-------------------------------------------------------------------   00174000
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00174100
.ZG27A   AIF   ('&COMMAND(1)' NE 'YES').ZG28A                           00174200
&XCOMMAND       SETC  'YES'       SET KEYWORD                           00174300
.*-------------------------------------------------------------------   00174400
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00174500
.ZG28A          AIF   (K'&XCOMMAND GT 0).ZG28C  KEYWORD                 00174600
                AIF   (K'&COMMAND(1) LE 0).ZG28B                        00174700
&ZMS            SETC  '"COMMAND='                                       00174800
&ZMS            SETC  '&ZMS.&COMMAND"'                                  00174900
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00175000
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00175100
&ZMS            SETC  '&ZMS "NO"'                                       00175200
&ZMS            SETC  '&ZMS OR "YES".'                                  00175300
                MNOTE 8,' &ZMS '                                        00175400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00175500
.ZG28B          ANOP  ,                                                 00175600
&XCOMMAND       SETC  'NO'        SET DEFAULT KEYWORD                   00175700
.ZG28C          ANOP  ,                                                 00175800
&ZXCOMMAND      SETC  'INPUT'     SET IN/OUTPUT                         00175900
.*----------------------------------------------------------------***   00176000
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00176100
                AIF   (N'&REQDSUB LE 1).ZG30A   CK NUM                  00176200
&ZMS            SETC  '"REQDSUB='                                       00176300
&ZMS            SETC  '&ZMS.&REQDSUB"'                                  00176400
&ZMS            SETC  '&ZMS "REQDSUB"'                                  00176500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00176600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00176700
.ZG30A          ANOP  ,                                                 00176800
.*-------------------------------------------------------------------   00176900
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00177000
&XREQDSUB       SETC  ''          INITIALIZE XVARIABLE                  00177100
.ZG31A   AIF   ('&REQDSUB(1)' NE 'MSTR').ZG32A                          00177200
&XREQDSUB       SETC  'MSTR'      SET KEYWORD                           00177300
.*-------------------------------------------------------------------   00177400
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00177500
.ZG32A   AIF   ('&REQDSUB(1)' NE 'PRI').ZG33A                           00177600
&XREQDSUB       SETC  'PRI'       SET KEYWORD                           00177700
.*-------------------------------------------------------------------   00177800
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00177900
.ZG33A          AIF   (K'&XREQDSUB GT 0).ZG33C  KEYWORD                 00178000
                AIF   (K'&REQDSUB(1) LE 0).ZG33B                        00178100
&ZMS            SETC  '"REQDSUB='                                       00178200
&ZMS            SETC  '&ZMS.&REQDSUB"'                                  00178300
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00178400
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00178500
&ZMS            SETC  '&ZMS "MSTR"'                                     00178600
&ZMS            SETC  '&ZMS OR "PRI".'                                  00178700
                MNOTE 8,' &ZMS '                                        00178800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00178900
.ZG33B          ANOP  ,                                                 00179000
&XREQDSUB       SETC  'MSTR'      SET DEFAULT KEYWORD                   00179100
.ZG33C          ANOP  ,                                                 00179200
&ZXREQDSUB      SETC  'INPUT'     SET IN/OUTPUT                         00179300
.*----------------------------------------------------------------***   00179400
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00179500
                AIF   (N'&EVENTRTN LE 1).ZG35A  CK NUM                  00179600
&ZMS            SETC  '"EVENTRTN='                                      00179700
&ZMS            SETC  '&ZMS.&EVENTRTN"'                                 00179800
&ZMS            SETC  '&ZMS "EVENTRTN"'                                 00179900
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00180000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00180100
.ZG35A          ANOP  ,                                                 00180200
.*-------------------------------------------------------------------   00180300
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00180400
&ZXEVENTRTN     SETC  'INPUT'     SET IN/OUTPUT                         00180500
&XEVENTRTN      SETC  'NO_EVENTRTN'                                     00180600
                AIF   (K'&EVENTRTN(1) LE 0).ZG35B  PARM                 00180700
&XEVENTRTN      SETC  '&EVENTRTN(1)'            SET XVARIABLE           00180800
                AIF   (N'&EVENTRTN GT 1).ZG35B  MULTI                   00180900
&XEVENTRTN      SETC  '&EVENTRTN'               SET XVARIABLE           00181000
.ZG35B          ANOP  ,                                                 00181100
.*-------------------------------------------------------------------   00181200
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00181300
                AIF   (K'&ZXEVENTRTN LE 0).ZG35R  NOT I/O               00181400
         AIF   ('&XEVENTRTN' EQ 'NO_EVENTRTN').ZG35R                    00181500
                AIF   ('&XEVENTRTN'(1,1) NE '(').ZG35R                  00181600
&ZCGPR          SETC  '&XEVENTRTN'(2,K'&XEVENTRTN-2)                    00181700
                AIF   ('&ZCGPR'(1,1) NE '0').ZG35P                      00181800
                AIF   (K'&ZCGPR GT 2).ZG35Q                             00181900
                AIF   ('&ZCGPR' EQ '0').ZG35Q                           00182000
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00182100
                AIF   (T'&ZCGPR NE 'N').ZG35Q   INVALID REG NAME        00182200
.ZG35P          ANOP  ,                                                 00182300
                AIF   (T'&ZCGPR NE 'N').ZG35R   NON NUMERIC             00182400
                AIF   ('&ZCGPR' LT '2').ZG35Q                           00182500
                AIF   ('&ZCGPR' LE '12').ZG35R                          00182600
.ZG35Q          ANOP  ,                                                 00182700
&ZMS            SETC  '"EVENTRTN='                                      00182800
&ZMS            SETC  '&ZMS.&EVENTRTN"'                                 00182900
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00183000
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00183100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00183200
.ZG35R          ANOP  ,                                                 00183300
.*-------------------------------------------------------------------   00183400
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00183500
.ZG37           ANOP  ,                                                 00183600
&ZTLC           SETC 'DEACTIVATE'                                       00183700
                AIF   ('&REQUEST(1)' NE '&ZTLC').ZG41                   00183800
&XREQUEST       SETC  'DEACTIVATE'              SET KEYWORD             00183900
                AIF   (N'&REQUEST LE 1).ZG37A   CK NUM                  00184000
&ZMS            SETC  '"REQUEST='                                       00184100
&ZMS            SETC  '&ZMS.&REQUEST"'                                  00184200
&ZMS            SETC  '&ZMS "REQUEST"'                                  00184300
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00184400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00184500
.ZG37A          ANOP  ,                                                 00184600
.*------------------------------------------------------------------    00184700
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00184800
&ZCVAL          SETC ''           CLEAR ERROR KEY ACCUMULATOR           00184900
.ZG37A0         AIF   (K'&CONSNAME LE 0).ZG37A1  OK                     00185000
&ZCVAL          SETC '&ZCVAL CONSNAME'          INCORRECT KEY USED      00185100
.ZG37A1         AIF   (K'&INITRTN LE 0).ZG37A2  OK                      00185200
&ZCVAL          SETC '&ZCVAL INITRTN'           INCORRECT KEY USED      00185300
.ZG37A2         AIF   (K'&INITPARM LE 0).ZG37A3  OK                     00185400
&ZCVAL          SETC '&ZCVAL INITPARM'          INCORRECT KEY USED      00185500
.ZG37A3         AIF   (K'&INITPLEN LE 0).ZG37A4  OK                     00185600
&ZCVAL          SETC '&ZCVAL INITPLEN'          INCORRECT KEY USED      00185700
.ZG37A4         AIF   (K'&INTOKEN LE 0).ZG37A5  OK                      00185800
&ZCVAL          SETC '&ZCVAL INTOKEN'           INCORRECT KEY USED      00185900
.ZG37A5         AIF   (K'&COMMAND LE 0).ZG37A6  OK                      00186000
&ZCVAL          SETC '&ZCVAL COMMAND'           INCORRECT KEY USED      00186100
.ZG37A6         AIF   (K'&REQDSUB LE 0).ZG37A7  OK                      00186200
&ZCVAL          SETC '&ZCVAL REQDSUB'           INCORRECT KEY USED      00186300
.ZG37A7         AIF   (K'&EVENTRTN LE 0).ZG37A8  OK                     00186400
&ZCVAL          SETC '&ZCVAL EVENTRTN'          INCORRECT KEY USED      00186500
.ZG37A8         AIF   (K'&SUBDATA1 LE 0).ZG37A9  OK                     00186600
&ZCVAL          SETC '&ZCVAL SUBDATA1'          INCORRECT KEY USED      00186700
.ZG37A9         AIF   (K'&SUBDATA2 LE 0).ZG37A10  OK                    00186800
&ZCVAL          SETC '&ZCVAL SUBDATA2'          INCORRECT KEY USED      00186900
.ZG37A10        AIF   (K'&WORKAREA LE 0).ZG37A11  OK                    00187000
&ZCVAL          SETC '&ZCVAL WORKAREA'          INCORRECT KEY USED      00187100
.ZG37A11        AIF   (K'&WORKASP LE 0).ZG37A12  OK                     00187200
&ZCVAL          SETC '&ZCVAL WORKASP'           INCORRECT KEY USED      00187300
.ZG37A12        AIF   (K'&ZCVAL LE 0).ZG37A13   OK                      00187400
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00187500
&ZMS            SETC  '"REQUEST'                                        00187600
&ZMS            SETC  '&ZMS.=&REQUEST"'                                 00187700
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00187800
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00187900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00188000
.ZG37A13        ANOP  ,                                                 00188100
.*----------------------------------------------------------------***   00188200
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00188300
                AIF   (N'&OUTTOKEN LE 1).ZG39A  CK NUM                  00188400
&ZMS            SETC  '"OUTTOKEN='                                      00188500
&ZMS            SETC  '&ZMS.&OUTTOKEN"'                                 00188600
&ZMS            SETC  '&ZMS "OUTTOKEN"'                                 00188700
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00188800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00188900
.ZG39A          ANOP  ,                                                 00189000
.*-------------------------------------------------------------------   00189100
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00189200
                AIF   (K'&OUTTOKEN(1) LE 0).ZG39C  NO PARM              00189300
&ZXOUTTOKEN     SETC  'OUTPUT'    SET OUTPUT                            00189400
&XOUTTOKEN      SETC  '&OUTTOKEN(1)'            SET XVARIABLE           00189500
                AIF   (N'&OUTTOKEN GT 1).ZG39C                          00189600
&XOUTTOKEN      SETC  '&OUTTOKEN'               SET XVARIABLE           00189700
.ZG39C          ANOP  ,                                                 00189800
.*-------------------------------------------------------------------   00189900
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00190000
                AIF   (K'&ZXOUTTOKEN LE 0).ZG39R  NOT I/O               00190100
                AIF   ('&XOUTTOKEN'(1,1) NE '(').ZG39R                  00190200
&ZCGPR          SETC  '&XOUTTOKEN'(2,K'&XOUTTOKEN-2)                    00190300
                AIF   ('&ZCGPR'(1,1) NE '0').ZG39P                      00190400
                AIF   (K'&ZCGPR GT 2).ZG39Q                             00190500
                AIF   ('&ZCGPR' EQ '0').ZG39Q                           00190600
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00190700
                AIF   (T'&ZCGPR NE 'N').ZG39Q   INVALID REG NAME        00190800
.ZG39P          ANOP  ,                                                 00190900
                AIF   (T'&ZCGPR NE 'N').ZG39R   NON NUMERIC             00191000
                AIF   ('&ZCGPR' LT '2').ZG39Q                           00191100
                AIF   ('&ZCGPR' LE '12').ZG39R                          00191200
.ZG39Q          ANOP  ,                                                 00191300
&ZMS            SETC  '"OUTTOKEN='                                      00191400
&ZMS            SETC  '&ZMS.&OUTTOKEN"'                                 00191500
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00191600
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00191700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00191800
.ZG39R          ANOP  ,                                                 00191900
.*-------------------------------------------------------------------   00192000
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00192100
.ZG41           ANOP  ,                                                 00192200
&ZTLC           SETC 'SWAP'                                             00192300
                AIF   ('&REQUEST(1)' NE '&ZTLC').ZG48                   00192400
&XREQUEST       SETC  'SWAP'      SET KEYWORD                           00192500
                AIF   (N'&REQUEST LE 1).ZG41A   CK NUM                  00192600
&ZMS            SETC  '"REQUEST='                                       00192700
&ZMS            SETC  '&ZMS.&REQUEST"'                                  00192800
&ZMS            SETC  '&ZMS "REQUEST"'                                  00192900
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00193000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00193100
.ZG41A          ANOP  ,                                                 00193200
.*------------------------------------------------------------------    00193300
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00193400
&ZCVAL          SETC ''           CLEAR ERROR KEY ACCUMULATOR           00193500
.ZG41A0         AIF   (K'&CONSNAME LE 0).ZG41A1  OK                     00193600
&ZCVAL          SETC '&ZCVAL CONSNAME'          INCORRECT KEY USED      00193700
.ZG41A1         AIF   (K'&INITRTN LE 0).ZG41A2  OK                      00193800
&ZCVAL          SETC '&ZCVAL INITRTN'           INCORRECT KEY USED      00193900
.ZG41A2         AIF   (K'&INITPARM LE 0).ZG41A3  OK                     00194000
&ZCVAL          SETC '&ZCVAL INITPARM'          INCORRECT KEY USED      00194100
.ZG41A3         AIF   (K'&INITPLEN LE 0).ZG41A4  OK                     00194200
&ZCVAL          SETC '&ZCVAL INITPLEN'          INCORRECT KEY USED      00194300
.ZG41A4         AIF   (K'&COMMAND LE 0).ZG41A5  OK                      00194400
&ZCVAL          SETC '&ZCVAL COMMAND'           INCORRECT KEY USED      00194500
.ZG41A5         AIF   (K'&REQDSUB LE 0).ZG41A6  OK                      00194600
&ZCVAL          SETC '&ZCVAL REQDSUB'           INCORRECT KEY USED      00194700
.ZG41A6         AIF   (K'&EVENTRTN LE 0).ZG41A7  OK                     00194800
&ZCVAL          SETC '&ZCVAL EVENTRTN'          INCORRECT KEY USED      00194900
.ZG41A7         AIF   (K'&SUBDATA1 LE 0).ZG41A8  OK                     00195000
&ZCVAL          SETC '&ZCVAL SUBDATA1'          INCORRECT KEY USED      00195100
.ZG41A8         AIF   (K'&SUBDATA2 LE 0).ZG41A9  OK                     00195200
&ZCVAL          SETC '&ZCVAL SUBDATA2'          INCORRECT KEY USED      00195300
.ZG41A9         AIF   (K'&WORKAREA LE 0).ZG41A10  OK                    00195400
&ZCVAL          SETC '&ZCVAL WORKAREA'          INCORRECT KEY USED      00195500
.ZG41A10        AIF   (K'&WORKASP LE 0).ZG41A11  OK                     00195600
&ZCVAL          SETC '&ZCVAL WORKASP'           INCORRECT KEY USED      00195700
.ZG41A11        AIF   (K'&ZCVAL LE 0).ZG41A12   OK                      00195800
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00195900
&ZMS            SETC  '"REQUEST'                                        00196000
&ZMS            SETC  '&ZMS.=&REQUEST"'                                 00196100
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00196200
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00196300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00196400
.ZG41A12        ANOP  ,                                                 00196500
.*----------------------------------------------------------------***   00196600
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00196700
                AIF   (N'&INTOKEN LE 1).ZG43A   CK NUM                  00196800
&ZMS            SETC  '"INTOKEN='                                       00196900
&ZMS            SETC  '&ZMS.&INTOKEN"'                                  00197000
&ZMS            SETC  '&ZMS "INTOKEN"'                                  00197100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00197200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00197300
.ZG43A          ANOP  ,                                                 00197400
.*-------------------------------------------------------------------   00197500
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00197600
&ZXINTOKEN      SETC  'INPUT'     SET IN/OUTPUT                         00197700
&XINTOKEN       SETC  'NO_INPUT_TOKEN'                                  00197800
                AIF   (K'&INTOKEN(1) LE 0).ZG43B  PARM                  00197900
&XINTOKEN       SETC  '&INTOKEN(1)'             SET XVARIABLE           00198000
                AIF   (N'&INTOKEN GT 1).ZG43B   MULTI                   00198100
&XINTOKEN       SETC  '&INTOKEN'  SET XVARIABLE                         00198200
.ZG43B          ANOP  ,                                                 00198300
.*-------------------------------------------------------------------   00198400
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00198500
                AIF   (K'&ZXINTOKEN LE 0).ZG43R  NOT I/O                00198600
         AIF   ('&XINTOKEN' EQ 'NO_INPUT_TOKEN').ZG43R                  00198700
                AIF   ('&XINTOKEN'(1,1) NE '(').ZG43R                   00198800
&ZCGPR          SETC  '&XINTOKEN'(2,K'&XINTOKEN-2)                      00198900
                AIF   ('&ZCGPR'(1,1) NE '0').ZG43P                      00199000
                AIF   (K'&ZCGPR GT 2).ZG43Q                             00199100
                AIF   ('&ZCGPR' EQ '0').ZG43Q                           00199200
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00199300
                AIF   (T'&ZCGPR NE 'N').ZG43Q   INVALID REG NAME        00199400
.ZG43P          ANOP  ,                                                 00199500
                AIF   (T'&ZCGPR NE 'N').ZG43R   NON NUMERIC             00199600
                AIF   ('&ZCGPR' LT '2').ZG43Q                           00199700
                AIF   ('&ZCGPR' LE '12').ZG43R                          00199800
.ZG43Q          ANOP  ,                                                 00199900
&ZMS            SETC  '"INTOKEN='                                       00200000
&ZMS            SETC  '&ZMS.&INTOKEN"'                                  00200100
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00200200
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00200300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00200400
.ZG43R          ANOP  ,                                                 00200500
.*----------------------------------------------------------------***   00200600
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00200700
                AIF   (N'&OUTTOKEN LE 1).ZG46A  CK NUM                  00200800
&ZMS            SETC  '"OUTTOKEN='                                      00200900
&ZMS            SETC  '&ZMS.&OUTTOKEN"'                                 00201000
&ZMS            SETC  '&ZMS "OUTTOKEN"'                                 00201100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00201200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00201300
.ZG46A          ANOP  ,                                                 00201400
.*-------------------------------------------------------------------   00201500
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00201600
                AIF   (K'&OUTTOKEN(1) LE 0).ZG46C  NO PARM              00201700
&ZXOUTTOKEN     SETC  'OUTPUT'    SET OUTPUT                            00201800
&XOUTTOKEN      SETC  '&OUTTOKEN(1)'            SET XVARIABLE           00201900
                AIF   (N'&OUTTOKEN GT 1).ZG46C                          00202000
&XOUTTOKEN      SETC  '&OUTTOKEN'               SET XVARIABLE           00202100
.ZG46C          ANOP  ,                                                 00202200
.*-------------------------------------------------------------------   00202300
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00202400
                AIF   (K'&ZXOUTTOKEN LE 0).ZG46R  NOT I/O               00202500
                AIF   ('&XOUTTOKEN'(1,1) NE '(').ZG46R                  00202600
&ZCGPR          SETC  '&XOUTTOKEN'(2,K'&XOUTTOKEN-2)                    00202700
                AIF   ('&ZCGPR'(1,1) NE '0').ZG46P                      00202800
                AIF   (K'&ZCGPR GT 2).ZG46Q                             00202900
                AIF   ('&ZCGPR' EQ '0').ZG46Q                           00203000
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00203100
                AIF   (T'&ZCGPR NE 'N').ZG46Q   INVALID REG NAME        00203200
.ZG46P          ANOP  ,                                                 00203300
                AIF   (T'&ZCGPR NE 'N').ZG46R   NON NUMERIC             00203400
                AIF   ('&ZCGPR' LT '2').ZG46Q                           00203500
                AIF   ('&ZCGPR' LE '12').ZG46R                          00203600
.ZG46Q          ANOP  ,                                                 00203700
&ZMS            SETC  '"OUTTOKEN='                                      00203800
&ZMS            SETC  '&ZMS.&OUTTOKEN"'                                 00203900
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00204000
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00204100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00204200
.ZG46R          ANOP  ,                                                 00204300
.*-------------------------------------------------------------------   00204400
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00204500
.ZG48           ANOP  ,                                                 00204600
&ZTLC           SETC 'PUT'                                              00204700
                AIF   ('&REQUEST(1)' NE '&ZTLC').ZG53                   00204800
&XREQUEST       SETC  'PUT'       SET KEYWORD                           00204900
                AIF   (N'&REQUEST LE 1).ZG48A   CK NUM                  00205000
&ZMS            SETC  '"REQUEST='                                       00205100
&ZMS            SETC  '&ZMS.&REQUEST"'                                  00205200
&ZMS            SETC  '&ZMS "REQUEST"'                                  00205300
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00205400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00205500
.ZG48A          ANOP  ,                                                 00205600
.*------------------------------------------------------------------    00205700
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00205800
&ZCVAL          SETC ''           CLEAR ERROR KEY ACCUMULATOR           00205900
.ZG48A0         AIF   (K'&CONSNAME LE 0).ZG48A1  OK                     00206000
&ZCVAL          SETC '&ZCVAL CONSNAME'          INCORRECT KEY USED      00206100
.ZG48A1         AIF   (K'&INITRTN LE 0).ZG48A2  OK                      00206200
&ZCVAL          SETC '&ZCVAL INITRTN'           INCORRECT KEY USED      00206300
.ZG48A2         AIF   (K'&INITPARM LE 0).ZG48A3  OK                     00206400
&ZCVAL          SETC '&ZCVAL INITPARM'          INCORRECT KEY USED      00206500
.ZG48A3         AIF   (K'&INITPLEN LE 0).ZG48A4  OK                     00206600
&ZCVAL          SETC '&ZCVAL INITPLEN'          INCORRECT KEY USED      00206700
.ZG48A4         AIF   (K'&INTOKEN LE 0).ZG48A5  OK                      00206800
&ZCVAL          SETC '&ZCVAL INTOKEN'           INCORRECT KEY USED      00206900
.ZG48A5         AIF   (K'&COMMAND LE 0).ZG48A6  OK                      00207000
&ZCVAL          SETC '&ZCVAL COMMAND'           INCORRECT KEY USED      00207100
.ZG48A6         AIF   (K'&REQDSUB LE 0).ZG48A7  OK                      00207200
&ZCVAL          SETC '&ZCVAL REQDSUB'           INCORRECT KEY USED      00207300
.ZG48A7         AIF   (K'&EVENTRTN LE 0).ZG48A8  OK                     00207400
&ZCVAL          SETC '&ZCVAL EVENTRTN'          INCORRECT KEY USED      00207500
.ZG48A8         AIF   (K'&OUTTOKEN LE 0).ZG48A9  OK                     00207600
&ZCVAL          SETC '&ZCVAL OUTTOKEN'          INCORRECT KEY USED      00207700
.ZG48A9         AIF   (K'&WORKAREA LE 0).ZG48A10  OK                    00207800
&ZCVAL          SETC '&ZCVAL WORKAREA'          INCORRECT KEY USED      00207900
.ZG48A10        AIF   (K'&WORKASP LE 0).ZG48A11  OK                     00208000
&ZCVAL          SETC '&ZCVAL WORKASP'           INCORRECT KEY USED      00208100
.ZG48A11        AIF   (K'&ZCVAL LE 0).ZG48A12   OK                      00208200
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00208300
&ZMS            SETC  '"REQUEST'                                        00208400
&ZMS            SETC  '&ZMS.=&REQUEST"'                                 00208500
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00208600
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00208700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00208800
.ZG48A12        ANOP  ,                                                 00208900
.*----------------------------------------------------------------***   00209000
.***AG.KMGRP05 NAME,  INPUT, ME GROUP -XVARIABLE KEY                    00209100
                AIF   (N'&SUBDATA1 LE 1).ZG50A  CK NUM                  00209200
&ZMS            SETC  '"SUBDATA1='                                      00209300
&ZMS            SETC  '&ZMS.&SUBDATA1"'                                 00209400
&ZMS            SETC  '&ZMS "SUBDATA1"'                                 00209500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00209600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00209700
.ZG50A          ANOP  ,                                                 00209800
.*-------------------------------------------------------------------   00209900
.***AG.KMGRP06 NAME,  INPUT, ME GROUP -XVARIABLE                        00210000
&ZXSUBDATA1     SETC  'INPUT'     SET IN/OUTPUT                         00210100
&XSUBDATA1      SETC  '&SUBDATA1(1)'            SET XVARIABLE           00210200
                AIF   (N'&SUBDATA1 GT 1).ZG50B                          00210300
&XSUBDATA1      SETC  '&SUBDATA1'               SET XVARIABLE           00210400
.ZG50B          AIF   (K'&SUBDATA1(1) GT 0).ZG50C                       00210500
&ZXSUBDATA1     SETC  ''          RESET IN/OUTPUT                       00210600
.ZG50C          ANOP  ,                                                 00210700
.*-------------------------------------------------------------------   00210800
.***AG.KCK02 NAME,  INPUT, ME GROUP -GPR OUT OF RANGE                   00210900
                AIF   (K'&ZXSUBDATA1 LE 0).ZG50R  NOT I/O               00211000
                AIF   ('&XSUBDATA1'(1,1) NE '(').ZG50R                  00211100
&ZCGPR          SETC  '&XSUBDATA1'(2,K'&XSUBDATA1-2)                    00211200
                AIF   ('&ZCGPR'(1,1) NE '0').ZG50P                      00211300
                AIF   (K'&ZCGPR GT 2).ZG50Q                             00211400
                AIF   ('&ZCGPR' EQ '0').ZG50Q                           00211500
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00211600
                AIF   (T'&ZCGPR NE 'N').ZG50Q   INVALID REG NAME        00211700
.ZG50P          ANOP  ,                                                 00211800
                AIF   (T'&ZCGPR NE 'N').ZG50R   NON NUMERIC             00211900
                AIF   ('&ZCGPR' LT '2').ZG50Q                           00212000
                AIF   ('&ZCGPR' LE '12').ZG50R                          00212100
.ZG50Q          ANOP  ,                                                 00212200
&ZMS            SETC  '"SUBDATA1='                                      00212300
&ZMS            SETC  '&ZMS.&SUBDATA1"'                                 00212400
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00212500
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00212600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00212700
.ZG50R          ANOP  ,                                                 00212800
.*----------------------------------------------------------------***   00212900
.***AG.KMGRP05 NAME,  INPUT, ME GROUP -XVARIABLE KEY                    00213000
                AIF   (N'&SUBDATA2 LE 1).ZG51A  CK NUM                  00213100
&ZMS            SETC  '"SUBDATA2='                                      00213200
&ZMS            SETC  '&ZMS.&SUBDATA2"'                                 00213300
&ZMS            SETC  '&ZMS "SUBDATA2"'                                 00213400
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00213500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00213600
.ZG51A          ANOP  ,                                                 00213700
.*-------------------------------------------------------------------   00213800
.***AG.KMGRP06 NAME,  INPUT, ME GROUP -XVARIABLE                        00213900
&ZXSUBDATA2     SETC  'INPUT'     SET IN/OUTPUT                         00214000
&XSUBDATA2      SETC  '&SUBDATA2(1)'            SET XVARIABLE           00214100
                AIF   (N'&SUBDATA2 GT 1).ZG51B                          00214200
&XSUBDATA2      SETC  '&SUBDATA2'               SET XVARIABLE           00214300
.ZG51B          AIF   (K'&SUBDATA2(1) GT 0).ZG51C                       00214400
&ZXSUBDATA2     SETC  ''          RESET IN/OUTPUT                       00214500
.ZG51C          ANOP  ,                                                 00214600
.*-------------------------------------------------------------------   00214700
.***AG.KCK02 NAME,  INPUT, ME GROUP -GPR OUT OF RANGE                   00214800
                AIF   (K'&ZXSUBDATA2 LE 0).ZG51R  NOT I/O               00214900
                AIF   ('&XSUBDATA2'(1,1) NE '(').ZG51R                  00215000
&ZCGPR          SETC  '&XSUBDATA2'(2,K'&XSUBDATA2-2)                    00215100
                AIF   ('&ZCGPR'(1,1) NE '0').ZG51P                      00215200
                AIF   (K'&ZCGPR GT 2).ZG51Q                             00215300
                AIF   ('&ZCGPR' EQ '0').ZG51Q                           00215400
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00215500
                AIF   (T'&ZCGPR NE 'N').ZG51Q   INVALID REG NAME        00215600
.ZG51P          ANOP  ,                                                 00215700
                AIF   (T'&ZCGPR NE 'N').ZG51R   NON NUMERIC             00215800
                AIF   ('&ZCGPR' LT '2').ZG51Q                           00215900
                AIF   ('&ZCGPR' LE '12').ZG51R                          00216000
.ZG51Q          ANOP  ,                                                 00216100
&ZMS            SETC  '"SUBDATA2='                                      00216200
&ZMS            SETC  '&ZMS.&SUBDATA2"'                                 00216300
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00216400
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00216500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00216600
.ZG51R          ANOP  ,                                                 00216700
.*-------------------------------------------------------------------   00216800
.***AG.KMGRP11 NAME,  INPUT, ME GROUP -AT LEAST ONE SPECIFIED           00216900
&ZCVAL          SETC ''           ERROR KEY FIELD                       00217000
                AIF   (K'&XSUBDATA1 GT 0).ZG52J                         00217100
&ZCVAL          SETC '&ZCVAL,SUBDATA1'          NOT USED KEY            00217200
                AIF   (K'&XSUBDATA2 GT 0).ZG52J                         00217300
&ZCVAL          SETC '&ZCVAL,SUBDATA2'          NOT USED KEY            00217400
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00217500
&ZMS            SETC  'ONE OR MORE OF THE'                              00217600
&ZMS            SETC  '&ZMS FOLLOWING KEY(S) IS REQUIRED: '             00217700
&ZMS            SETC  '&ZMS "SUBDATA1",'                                00217800
                MNOTE 8,' &ZMS " SUBDATA2".'                            00217900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00218000
.ZG52J          ANOP  ,                                                 00218100
.ZG52K          ANOP  ,                                                 00218200
.*-------------------------------------------------------------------   00218300
.***AG.KCK02 NAME,  INPUT, ME GROUP -GPR OUT OF RANGE                   00218400
                AIF   (K'&ZXSUBDATA2 LE 0).ZG52R  NOT I/O               00218500
                AIF   ('&XSUBDATA2'(1,1) NE '(').ZG52R                  00218600
&ZCGPR          SETC  '&XSUBDATA2'(2,K'&XSUBDATA2-2)                    00218700
                AIF   ('&ZCGPR'(1,1) NE '0').ZG52P                      00218800
                AIF   (K'&ZCGPR GT 2).ZG52Q                             00218900
                AIF   ('&ZCGPR' EQ '0').ZG52Q                           00219000
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00219100
                AIF   (T'&ZCGPR NE 'N').ZG52Q   INVALID REG NAME        00219200
.ZG52P          ANOP  ,                                                 00219300
                AIF   (T'&ZCGPR NE 'N').ZG52R   NON NUMERIC             00219400
                AIF   ('&ZCGPR' LT '2').ZG52Q                           00219500
                AIF   ('&ZCGPR' LE '12').ZG52R                          00219600
.ZG52Q          ANOP  ,                                                 00219700
&ZMS            SETC  '"SUBDATA2='                                      00219800
&ZMS            SETC  '&ZMS.&SUBDATA2"'                                 00219900
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00220000
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00220100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00220200
.ZG52R          ANOP  ,                                                 00220300
.*-------------------------------------------------------------------   00220400
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00220500
.ZG53           ANOP  ,                                                 00220600
&ZTLC           SETC 'GET'                                              00220700
                AIF   ('&REQUEST(1)' NE '&ZTLC').ZG58                   00220800
&XREQUEST       SETC  'GET'       SET KEYWORD                           00220900
                AIF   (N'&REQUEST LE 1).ZG53A   CK NUM                  00221000
&ZMS            SETC  '"REQUEST='                                       00221100
&ZMS            SETC  '&ZMS.&REQUEST"'                                  00221200
&ZMS            SETC  '&ZMS "REQUEST"'                                  00221300
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00221400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00221500
.ZG53A          ANOP  ,                                                 00221600
.*------------------------------------------------------------------    00221700
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00221800
&ZCVAL          SETC ''           CLEAR ERROR KEY ACCUMULATOR           00221900
.ZG53A0         AIF   (K'&CONSNAME LE 0).ZG53A1  OK                     00222000
&ZCVAL          SETC '&ZCVAL CONSNAME'          INCORRECT KEY USED      00222100
.ZG53A1         AIF   (K'&INITRTN LE 0).ZG53A2  OK                      00222200
&ZCVAL          SETC '&ZCVAL INITRTN'           INCORRECT KEY USED      00222300
.ZG53A2         AIF   (K'&INITPARM LE 0).ZG53A3  OK                     00222400
&ZCVAL          SETC '&ZCVAL INITPARM'          INCORRECT KEY USED      00222500
.ZG53A3         AIF   (K'&INITPLEN LE 0).ZG53A4  OK                     00222600
&ZCVAL          SETC '&ZCVAL INITPLEN'          INCORRECT KEY USED      00222700
.ZG53A4         AIF   (K'&INTOKEN LE 0).ZG53A5  OK                      00222800
&ZCVAL          SETC '&ZCVAL INTOKEN'           INCORRECT KEY USED      00222900
.ZG53A5         AIF   (K'&COMMAND LE 0).ZG53A6  OK                      00223000
&ZCVAL          SETC '&ZCVAL COMMAND'           INCORRECT KEY USED      00223100
.ZG53A6         AIF   (K'&REQDSUB LE 0).ZG53A7  OK                      00223200
&ZCVAL          SETC '&ZCVAL REQDSUB'           INCORRECT KEY USED      00223300
.ZG53A7         AIF   (K'&EVENTRTN LE 0).ZG53A8  OK                     00223400
&ZCVAL          SETC '&ZCVAL EVENTRTN'          INCORRECT KEY USED      00223500
.ZG53A8         AIF   (K'&OUTTOKEN LE 0).ZG53A9  OK                     00223600
&ZCVAL          SETC '&ZCVAL OUTTOKEN'          INCORRECT KEY USED      00223700
.ZG53A9         AIF   (K'&WORKAREA LE 0).ZG53A10  OK                    00223800
&ZCVAL          SETC '&ZCVAL WORKAREA'          INCORRECT KEY USED      00223900
.ZG53A10        AIF   (K'&WORKASP LE 0).ZG53A11  OK                     00224000
&ZCVAL          SETC '&ZCVAL WORKASP'           INCORRECT KEY USED      00224100
.ZG53A11        AIF   (K'&ZCVAL LE 0).ZG53A12   OK                      00224200
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00224300
&ZMS            SETC  '"REQUEST'                                        00224400
&ZMS            SETC  '&ZMS.=&REQUEST"'                                 00224500
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00224600
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00224700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00224800
.ZG53A12        ANOP  ,                                                 00224900
.*----------------------------------------------------------------***   00225000
.***AG.KMGRP05 NAME,  OUTPUT, ME GROUP -XVARIABLE KEY                   00225100
                AIF   (N'&SUBDATA1 LE 1).ZG55A  CK NUM                  00225200
&ZMS            SETC  '"SUBDATA1='                                      00225300
&ZMS            SETC  '&ZMS.&SUBDATA1"'                                 00225400
&ZMS            SETC  '&ZMS "SUBDATA1"'                                 00225500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00225600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00225700
.ZG55A          ANOP  ,                                                 00225800
.*-------------------------------------------------------------------   00225900
.***AG.KMGRP06 NAME,  OUTPUT, ME GROUP -XVARIABLE                       00226000
&ZXSUBDATA1     SETC  'OUTPUT'    SET IN/OUTPUT                         00226100
&XSUBDATA1      SETC  '&SUBDATA1(1)'            SET XVARIABLE           00226200
                AIF   (N'&SUBDATA1 GT 1).ZG55B                          00226300
&XSUBDATA1      SETC  '&SUBDATA1'               SET XVARIABLE           00226400
.ZG55B          AIF   (K'&SUBDATA1(1) GT 0).ZG55C                       00226500
&ZXSUBDATA1     SETC  ''          RESET IN/OUTPUT                       00226600
.ZG55C          ANOP  ,                                                 00226700
.*-------------------------------------------------------------------   00226800
.***AG.KCK02 NAME,  OUTPUT, ME GROUP -GPR OUT OF RANGE                  00226900
                AIF   (K'&ZXSUBDATA1 LE 0).ZG55R  NOT I/O               00227000
                AIF   ('&XSUBDATA1'(1,1) NE '(').ZG55R                  00227100
&ZCGPR          SETC  '&XSUBDATA1'(2,K'&XSUBDATA1-2)                    00227200
                AIF   ('&ZCGPR'(1,1) NE '0').ZG55P                      00227300
                AIF   (K'&ZCGPR GT 2).ZG55Q                             00227400
                AIF   ('&ZCGPR' EQ '0').ZG55Q                           00227500
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00227600
                AIF   (T'&ZCGPR NE 'N').ZG55Q   INVALID REG NAME        00227700
.ZG55P          ANOP  ,                                                 00227800
                AIF   (T'&ZCGPR NE 'N').ZG55R   NON NUMERIC             00227900
                AIF   ('&ZCGPR' LT '2').ZG55Q                           00228000
                AIF   ('&ZCGPR' LE '12').ZG55R                          00228100
.ZG55Q          ANOP  ,                                                 00228200
&ZMS            SETC  '"SUBDATA1='                                      00228300
&ZMS            SETC  '&ZMS.&SUBDATA1"'                                 00228400
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00228500
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00228600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00228700
.ZG55R          ANOP  ,                                                 00228800
.*----------------------------------------------------------------***   00228900
.***AG.KMGRP05 NAME,  OUTPUT, ME GROUP -XVARIABLE KEY                   00229000
                AIF   (N'&SUBDATA2 LE 1).ZG56A  CK NUM                  00229100
&ZMS            SETC  '"SUBDATA2='                                      00229200
&ZMS            SETC  '&ZMS.&SUBDATA2"'                                 00229300
&ZMS            SETC  '&ZMS "SUBDATA2"'                                 00229400
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00229500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00229600
.ZG56A          ANOP  ,                                                 00229700
.*-------------------------------------------------------------------   00229800
.***AG.KMGRP06 NAME,  OUTPUT, ME GROUP -XVARIABLE                       00229900
&ZXSUBDATA2     SETC  'OUTPUT'    SET IN/OUTPUT                         00230000
&XSUBDATA2      SETC  '&SUBDATA2(1)'            SET XVARIABLE           00230100
                AIF   (N'&SUBDATA2 GT 1).ZG56B                          00230200
&XSUBDATA2      SETC  '&SUBDATA2'               SET XVARIABLE           00230300
.ZG56B          AIF   (K'&SUBDATA2(1) GT 0).ZG56C                       00230400
&ZXSUBDATA2     SETC  ''          RESET IN/OUTPUT                       00230500
.ZG56C          ANOP  ,                                                 00230600
.*-------------------------------------------------------------------   00230700
.***AG.KCK02 NAME,  OUTPUT, ME GROUP -GPR OUT OF RANGE                  00230800
                AIF   (K'&ZXSUBDATA2 LE 0).ZG56R  NOT I/O               00230900
                AIF   ('&XSUBDATA2'(1,1) NE '(').ZG56R                  00231000
&ZCGPR          SETC  '&XSUBDATA2'(2,K'&XSUBDATA2-2)                    00231100
                AIF   ('&ZCGPR'(1,1) NE '0').ZG56P                      00231200
                AIF   (K'&ZCGPR GT 2).ZG56Q                             00231300
                AIF   ('&ZCGPR' EQ '0').ZG56Q                           00231400
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00231500
                AIF   (T'&ZCGPR NE 'N').ZG56Q   INVALID REG NAME        00231600
.ZG56P          ANOP  ,                                                 00231700
                AIF   (T'&ZCGPR NE 'N').ZG56R   NON NUMERIC             00231800
                AIF   ('&ZCGPR' LT '2').ZG56Q                           00231900
                AIF   ('&ZCGPR' LE '12').ZG56R                          00232000
.ZG56Q          ANOP  ,                                                 00232100
&ZMS            SETC  '"SUBDATA2='                                      00232200
&ZMS            SETC  '&ZMS.&SUBDATA2"'                                 00232300
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00232400
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00232500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00232600
.ZG56R          ANOP  ,                                                 00232700
.*-------------------------------------------------------------------   00232800
.***AG.KMGRP11 NAME,  OUTPUT, ME GROUP -AT LEAST ONE SPECIFIED          00232900
&ZCVAL          SETC ''           ERROR KEY FIELD                       00233000
                AIF   (K'&XSUBDATA1 GT 0).ZG57J                         00233100
&ZCVAL          SETC '&ZCVAL,SUBDATA1'          NOT USED KEY            00233200
                AIF   (K'&XSUBDATA2 GT 0).ZG57J                         00233300
&ZCVAL          SETC '&ZCVAL,SUBDATA2'          NOT USED KEY            00233400
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00233500
&ZMS            SETC  'ONE OR MORE OF THE'                              00233600
&ZMS            SETC  '&ZMS FOLLOWING KEY(S) IS REQUIRED: '             00233700
&ZMS            SETC  '&ZMS "SUBDATA1",'                                00233800
                MNOTE 8,' &ZMS " SUBDATA2".'                            00233900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00234000
.ZG57J          ANOP  ,                                                 00234100
.ZG57K          ANOP  ,                                                 00234200
.*-------------------------------------------------------------------   00234300
.***AG.KCK02 NAME,  OUTPUT, ME GROUP -GPR OUT OF RANGE                  00234400
                AIF   (K'&ZXSUBDATA2 LE 0).ZG57R  NOT I/O               00234500
                AIF   ('&XSUBDATA2'(1,1) NE '(').ZG57R                  00234600
&ZCGPR          SETC  '&XSUBDATA2'(2,K'&XSUBDATA2-2)                    00234700
                AIF   ('&ZCGPR'(1,1) NE '0').ZG57P                      00234800
                AIF   (K'&ZCGPR GT 2).ZG57Q                             00234900
                AIF   ('&ZCGPR' EQ '0').ZG57Q                           00235000
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00235100
                AIF   (T'&ZCGPR NE 'N').ZG57Q   INVALID REG NAME        00235200
.ZG57P          ANOP  ,                                                 00235300
                AIF   (T'&ZCGPR NE 'N').ZG57R   NON NUMERIC             00235400
                AIF   ('&ZCGPR' LT '2').ZG57Q                           00235500
                AIF   ('&ZCGPR' LE '12').ZG57R                          00235600
.ZG57Q          ANOP  ,                                                 00235700
&ZMS            SETC  '"SUBDATA2='                                      00235800
&ZMS            SETC  '&ZMS.&SUBDATA2"'                                 00235900
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00236000
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00236100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00236200
.ZG57R          ANOP  ,                                                 00236300
.*-------------------------------------------------------------------   00236400
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00236500
.ZG58           ANOP  ,                                                 00236600
&ZTLC           SETC 'QUERY'                                            00236700
                AIF   ('&REQUEST(1)' NE '&ZTLC').ZG65                   00236800
&XREQUEST       SETC  'QUERY'     SET KEYWORD                           00236900
                AIF   (N'&REQUEST LE 1).ZG58A   CK NUM                  00237000
&ZMS            SETC  '"REQUEST='                                       00237100
&ZMS            SETC  '&ZMS.&REQUEST"'                                  00237200
&ZMS            SETC  '&ZMS "REQUEST"'                                  00237300
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00237400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00237500
.ZG58A          ANOP  ,                                                 00237600
.*------------------------------------------------------------------    00237700
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00237800
&ZCVAL          SETC ''           CLEAR ERROR KEY ACCUMULATOR           00237900
.ZG58A0         AIF   (K'&CONSNAME LE 0).ZG58A1  OK                     00238000
&ZCVAL          SETC '&ZCVAL CONSNAME'          INCORRECT KEY USED      00238100
.ZG58A1         AIF   (K'&INITRTN LE 0).ZG58A2  OK                      00238200
&ZCVAL          SETC '&ZCVAL INITRTN'           INCORRECT KEY USED      00238300
.ZG58A2         AIF   (K'&INITPARM LE 0).ZG58A3  OK                     00238400
&ZCVAL          SETC '&ZCVAL INITPARM'          INCORRECT KEY USED      00238500
.ZG58A3         AIF   (K'&INITPLEN LE 0).ZG58A4  OK                     00238600
&ZCVAL          SETC '&ZCVAL INITPLEN'          INCORRECT KEY USED      00238700
.ZG58A4         AIF   (K'&INTOKEN LE 0).ZG58A5  OK                      00238800
&ZCVAL          SETC '&ZCVAL INTOKEN'           INCORRECT KEY USED      00238900
.ZG58A5         AIF   (K'&COMMAND LE 0).ZG58A6  OK                      00239000
&ZCVAL          SETC '&ZCVAL COMMAND'           INCORRECT KEY USED      00239100
.ZG58A6         AIF   (K'&REQDSUB LE 0).ZG58A7  OK                      00239200
&ZCVAL          SETC '&ZCVAL REQDSUB'           INCORRECT KEY USED      00239300
.ZG58A7         AIF   (K'&EVENTRTN LE 0).ZG58A8  OK                     00239400
&ZCVAL          SETC '&ZCVAL EVENTRTN'          INCORRECT KEY USED      00239500
.ZG58A8         AIF   (K'&OUTTOKEN LE 0).ZG58A9  OK                     00239600
&ZCVAL          SETC '&ZCVAL OUTTOKEN'          INCORRECT KEY USED      00239700
.ZG58A9         AIF   (K'&SUBDATA1 LE 0).ZG58A10  OK                    00239800
&ZCVAL          SETC '&ZCVAL SUBDATA1'          INCORRECT KEY USED      00239900
.ZG58A10        AIF   (K'&SUBDATA2 LE 0).ZG58A11  OK                    00240000
&ZCVAL          SETC '&ZCVAL SUBDATA2'          INCORRECT KEY USED      00240100
.ZG58A11        AIF   (K'&ZCVAL LE 0).ZG58A12   OK                      00240200
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00240300
&ZMS            SETC  '"REQUEST'                                        00240400
&ZMS            SETC  '&ZMS.=&REQUEST"'                                 00240500
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00240600
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00240700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00240800
.ZG58A12        ANOP  ,                                                 00240900
.*----------------------------------------------------------------***   00241000
.***AG.KXVAR05 NAME, RQD OUTPUT, KEYS -XVARIABLE KEY                    00241100
                AIF   (N'&WORKAREA LE 1).ZG60A  CK NUM                  00241200
&ZMS            SETC  '"WORKAREA='                                      00241300
&ZMS            SETC  '&ZMS.&WORKAREA"'                                 00241400
&ZMS            SETC  '&ZMS "WORKAREA"'                                 00241500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00241600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00241700
.ZG60A          ANOP  ,                                                 00241800
.*-------------------------------------------------------------------   00241900
.***AG.KXVAR06 NAME, RQD OUTPUT, KEYS -XVARIABLE                        00242000
&ZXWORKAREA     SETC  'OUTPUT'    SET IN/OUTPUT                         00242100
&XWORKAREA      SETC  '&WORKAREA(1)'            SET XVARIABLE           00242200
                AIF   (N'&WORKAREA GT 1).ZG60B  MULTI                   00242300
&XWORKAREA      SETC  '&WORKAREA'               SET XVARIABLE           00242400
.ZG60B          AIF   (K'&WORKAREA(1) GT 0).ZG60C                       00242500
&ZXWORKAREA     SETC  ''          RESET IN/OUTPUT                       00242600
&ZMS            SETC  ' '                                               00242700
&ZMS            SETC  '&ZMS "WORKAREA" KEY AND ITS'                     00242800
                MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                  00242900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00243000
.ZG60C          ANOP  ,                                                 00243100
.*-------------------------------------------------------------------   00243200
.***AG.KCK02 NAME, RQD OUTPUT, KEYS -GPR OUT OF RANGE                   00243300
                AIF   (K'&ZXWORKAREA LE 0).ZG60R  NOT I/O               00243400
                AIF   ('&XWORKAREA'(1,1) NE '(').ZG60R                  00243500
&ZCGPR          SETC  '&XWORKAREA'(2,K'&XWORKAREA-2)                    00243600
                AIF   ('&ZCGPR'(1,1) NE '0').ZG60P                      00243700
                AIF   (K'&ZCGPR GT 2).ZG60Q                             00243800
                AIF   ('&ZCGPR' EQ '0').ZG60Q                           00243900
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00244000
                AIF   (T'&ZCGPR NE 'N').ZG60Q   INVALID REG NAME        00244100
.ZG60P          ANOP  ,                                                 00244200
                AIF   (T'&ZCGPR NE 'N').ZG60R   NON NUMERIC             00244300
                AIF   ('&ZCGPR' LT '2').ZG60Q                           00244400
                AIF   ('&ZCGPR' LE '12').ZG60R                          00244500
.ZG60Q          ANOP  ,                                                 00244600
&ZMS            SETC  '"WORKAREA='                                      00244700
&ZMS            SETC  '&ZMS.&WORKAREA"'                                 00244800
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00244900
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00245000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00245100
.ZG60R          ANOP  ,                                                 00245200
.*----------------------------------------------------------------***   00245300
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00245400
                AIF   (N'&WORKASP LE 1).ZG63A   CK NUM                  00245500
&ZMS            SETC  '"WORKASP='                                       00245600
&ZMS            SETC  '&ZMS.&WORKASP"'                                  00245700
&ZMS            SETC  '&ZMS "WORKASP"'                                  00245800
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00245900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00246000
.ZG63A          ANOP  ,                                                 00246100
.*-------------------------------------------------------------------   00246200
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00246300
&ZXWORKASP      SETC  'INPUT'     SET IN/OUTPUT                         00246400
&XWORKASP       SETC  '0'                                               00246500
                AIF   (K'&WORKASP(1) LE 0).ZG63B  PARM                  00246600
&XWORKASP       SETC  '&WORKASP(1)'             SET XVARIABLE           00246700
                AIF   (N'&WORKASP GT 1).ZG63B   MULTI                   00246800
&XWORKASP       SETC  '&WORKASP'  SET XVARIABLE                         00246900
.ZG63B          ANOP  ,                                                 00247000
.*-------------------------------------------------------------------   00247100
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00247200
                AIF   (K'&ZXWORKASP LE 0).ZG63R  NOT I/O                00247300
                AIF   ('&XWORKASP'(1,1) NE '(').ZG63R                   00247400
&ZCGPR          SETC  '&XWORKASP'(2,K'&XWORKASP-2)                      00247500
                AIF   ('&ZCGPR'(1,1) NE '0').ZG63P                      00247600
                AIF   (K'&ZCGPR GT 2).ZG63Q                             00247700
                AIF   ('&ZCGPR' EQ '0').ZG63Q                           00247800
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00247900
                AIF   (T'&ZCGPR NE 'N').ZG63Q   INVALID REG NAME        00248000
.ZG63P          ANOP  ,                                                 00248100
                AIF   (T'&ZCGPR NE 'N').ZG63R   NON NUMERIC             00248200
                AIF   ('&ZCGPR' LT '2').ZG63Q                           00248300
                AIF   ('&ZCGPR' LE '12').ZG63R                          00248400
.ZG63Q          ANOP  ,                                                 00248500
&ZMS            SETC  '"WORKASP='                                       00248600
&ZMS            SETC  '&ZMS.&WORKASP"'                                  00248700
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00248800
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00248900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00249000
.ZG63R          ANOP  ,                                                 00249100
.*------------------------------------------------------------------    00249200
.***AG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00249300
.ZG65           ANOP  ,                                                 00249400
&ZXREQUEST      SETC  'INPUT'     SET IN/OUTPUT                         00249500
                AIF   (K'&XREQUEST GT 0).ZG65E  VALID ARG               00249600
                AIF   (T'&REQUEST EQ 'O').ZG65D  OMITTED                00249700
&ZASYSLNDX      SETA  0                                                 00249800
.ZG65A          ANOP  ,           POSITIONAL MACRO KEY                  00249900
&ZASYSLNDX      SETA  &ZASYSLNDX+1                                      00250000
                AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG65C                  00250100
&ZTLC           SETC 'REQUEST'                                          00250200
                AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG65A         00250300
.ZG65B          ANOP  ,                                                 00250400
&ZXREQUEST      SETC  ''          RESET IN/OUTPUT                       00250500
&ZMS            SETC  'THE "REQUEST" KEY'                               00250600
&ZMS            SETC  '&ZMS MUST CONTAIN ONE'                           00250700
                MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                  00250800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00250900
                AGO   .ZG65E                                            00251000
.ZG65C          ANOP  ,                                                 00251100
&ZXREQUEST      SETC  ''          RESET IN/OUTPUT                       00251200
&ZMS            SETC  '"REQUEST='                                       00251300
&ZMS            SETC  '&ZMS.&REQUEST"'                                  00251400
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00251500
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00251600
&ZMS            SETC  '&ZMS "ADD",'                                     00251700
&ZMS            SETC  '&ZMS "ACTIVATE",'                                00251800
&ZMS            SETC  '&ZMS "OPTIONS",'                                 00251900
&ZMS            SETC  '&ZMS "DEACTIVATE",'                              00252000
&ZMS            SETC  '&ZMS "SWAP",'                                    00252100
&ZMS            SETC  '&ZMS "PUT",'                                     00252200
&ZMS            SETC  '&ZMS "GET",'                                     00252300
&ZMS            SETC  '&ZMS OR "QUERY".'                                00252400
                MNOTE 8,' &ZMS '                                        00252500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00252600
                AGO   .ZG65E                                            00252700
.ZG65D          ANOP  ,                                                 00252800
&XREQUEST       SETC  'ADD'       SET DEFAULT KEYWORD                   00252900
.ZG65E          ANOP  ,                                                 00253000
.*------------------------------------------------------------------    00253100
.***AG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00253200
                AIF   (K'&REQUEST(1) GT 0).ZG65F  PARM                  00253300
&XREQUEST       SETC  ''          ENSURE NULL KEYWORD                   00253400
&ZXREQUEST      SETC  ''          RESET IN/OUTPUT                       00253500
&ZMS            SETC  'THE'                                             00253600
&ZMS            SETC  '&ZMS "REQUEST" KEY AND ITS'                      00253700
&ZMS            SETC  '&ZMS ARGUMENT ARE REQUIRED.'                     00253800
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00253900
&ZMS            SETC  '&ZMS "ADD",'                                     00254000
&ZMS            SETC  '&ZMS "ACTIVATE",'                                00254100
&ZMS            SETC  '&ZMS "OPTIONS",'                                 00254200
&ZMS            SETC  '&ZMS "DEACTIVATE",'                              00254300
&ZMS            SETC  '&ZMS "SWAP",'                                    00254400
&ZMS            SETC  '&ZMS "PUT",'                                     00254500
&ZMS            SETC  '&ZMS "GET",'                                     00254600
&ZMS            SETC  '&ZMS OR "QUERY".'                                00254700
                MNOTE 8,' &ZMS '                                        00254800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00254900
.ZG65F          ANOP  ,                                                 00255000
.*----------------------------------------------------------------***   00255100
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00255200
                AIF   (N'&RETCODE LE 1).ZG67A   CK NUM                  00255300
&ZMS            SETC  '"RETCODE='                                       00255400
&ZMS            SETC  '&ZMS.&RETCODE"'                                  00255500
&ZMS            SETC  '&ZMS "RETCODE"'                                  00255600
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00255700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00255800
.ZG67A          ANOP  ,                                                 00255900
.*-------------------------------------------------------------------   00256000
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00256100
                AIF   (K'&RETCODE(1) LE 0).ZG67C  NO PARM               00256200
&ZXRETCODE      SETC  'OUTPUT'    SET OUTPUT                            00256300
&XRETCODE       SETC  '&RETCODE(1)'             SET XVARIABLE           00256400
                AIF   (N'&RETCODE GT 1).ZG67C                           00256500
&XRETCODE       SETC  '&RETCODE'  SET XVARIABLE                         00256600
.ZG67C          ANOP  ,                                                 00256700
.*-------------------------------------------------------------------   00256800
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00256900
                AIF   (K'&ZXRETCODE LE 0).ZG67R  NOT I/O                00257000
                AIF   ('&XRETCODE'(1,1) NE '(').ZG67R                   00257100
&ZCGPR          SETC  '&XRETCODE'(2,K'&XRETCODE-2)                      00257200
                AIF   ('&ZCGPR'(1,1) NE '0').ZG67P                      00257300
                AIF   (K'&ZCGPR GT 2).ZG67Q                             00257400
                AIF   ('&ZCGPR' EQ '0').ZG67Q                           00257500
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00257600
                AIF   (T'&ZCGPR NE 'N').ZG67Q   INVALID REG NAME        00257700
.ZG67P          ANOP  ,                                                 00257800
                AIF   (T'&ZCGPR NE 'N').ZG67R   NON NUMERIC             00257900
                AIF   ('&ZCGPR' EQ '15').ZG67R                          00258000
                AIF   ('&ZCGPR' LT '2').ZG67Q                           00258100
                AIF   ('&ZCGPR' LE '12').ZG67R                          00258200
.ZG67Q          ANOP  ,                                                 00258300
&ZMS            SETC  '"RETCODE='                                       00258400
&ZMS            SETC  '&ZMS.&RETCODE"'                                  00258500
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00258600
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12) OR (15).'          00258700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00258800
.ZG67R          ANOP  ,                                                 00258900
.*----------------------------------------------------------------***   00259000
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00259100
                AIF   (N'&RSNCODE LE 1).ZG70A   CK NUM                  00259200
&ZMS            SETC  '"RSNCODE='                                       00259300
&ZMS            SETC  '&ZMS.&RSNCODE"'                                  00259400
&ZMS            SETC  '&ZMS "RSNCODE"'                                  00259500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00259600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00259700
.ZG70A          ANOP  ,                                                 00259800
.*-------------------------------------------------------------------   00259900
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00260000
                AIF   (K'&RSNCODE(1) LE 0).ZG70C  NO PARM               00260100
&ZXRSNCODE      SETC  'OUTPUT'    SET OUTPUT                            00260200
&XRSNCODE       SETC  '&RSNCODE(1)'             SET XVARIABLE           00260300
                AIF   (N'&RSNCODE GT 1).ZG70C                           00260400
&XRSNCODE       SETC  '&RSNCODE'  SET XVARIABLE                         00260500
.ZG70C          ANOP  ,                                                 00260600
.*-------------------------------------------------------------------   00260700
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00260800
                AIF   (K'&ZXRSNCODE LE 0).ZG70R  NOT I/O                00260900
                AIF   ('&XRSNCODE'(1,1) NE '(').ZG70R                   00261000
&ZCGPR          SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                      00261100
                AIF   ('&ZCGPR'(1,1) NE '0').ZG70P                      00261200
                AIF   (K'&ZCGPR GT 2).ZG70Q                             00261300
                AIF   ('&ZCGPR' EQ '0').ZG70R                           00261400
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00261500
                AIF   (T'&ZCGPR NE 'N').ZG70Q   INVALID REG NAME        00261600
.ZG70P          ANOP  ,                                                 00261700
                AIF   (T'&ZCGPR NE 'N').ZG70R   NON NUMERIC             00261800
                AIF   ('&ZCGPR' EQ '0').ZG70R                           00261900
                AIF   ('&ZCGPR' LT '2').ZG70Q                           00262000
                AIF   ('&ZCGPR' LE '12').ZG70R                          00262100
.ZG70Q          ANOP  ,                                                 00262200
&ZMS            SETC  '"RSNCODE='                                       00262300
&ZMS            SETC  '&ZMS.&RSNCODE"'                                  00262400
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00262500
                MNOTE 8,' &ZMS IN THE RANGE (0) OR (2)-(12).'           00262600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00262700
.ZG70R          ANOP  ,                                                 00262800
.*----------------------------------------------------------------***   00262900
.***AG.KXVAR05 VALUE, OPT INPUT, KEYS -XVARIABLE KEY                    00263000
                AIF   (N'&COM LE 1).ZG73A       CK NUM                  00263100
&ZMS            SETC  '"COM='                                           00263200
&ZMS            SETC  '&ZMS.&COM"'                                      00263300
&ZMS            SETC  '&ZMS "COM"'                                      00263400
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00263500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00263600
.ZG73A          ANOP  ,                                                 00263700
.*-------------------------------------------------------------------   00263800
.***AG.KXVAR13 VALUE, OPT INPUT, KEYS -XVARIABLE                        00263900
&ZXCOM          SETC  'INPUT'     SET IN/OUTPUT                         00264000
&XCOM           SETC  'NULL'                                            00264100
                AIF   (K'&COM(1) LE 0).ZG73B    PARM                    00264200
&XCOM           SETC  '&COM(1)'   SET XVARIABLE                         00264300
                AIF   (N'&COM GT 1).ZG73B       MULTI                   00264400
&XCOM           SETC  '&COM'      SET XVARIABLE                         00264500
.ZG73B          ANOP  ,                                                 00264600
.*-------------------------------------------------------------------   00264700
.***AG.KCK01 VALUE, OPT INPUT, KEYS -GPR NOT ALLOWED                    00264800
                AIF   (K'&ZXCOM LE 0).ZG73P     NOT I/O                 00264900
                AIF   ('&XCOM' EQ 'NULL').ZG73P                         00265000
                AIF   ('&XCOM'(1,1) NE '(').ZG73P                       00265100
&ZXCOM          SETC  ''          RESET IN/OUTPUT                       00265200
&ZMS            SETC  '"COM='                                           00265300
&ZMS            SETC  '&ZMS.&COM"'                                      00265400
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00265500
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00265600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00265700
.ZG73P          ANOP  ,                                                 00265800
.*-------------------------------------------------------------------   00265900
.***AG.KCK03 VALUE, OPT INPUT, KEYS -CHARACTER LENGTH                   00266000
                AIF   (K'&ZXCOM LE 0).ZG73S     NOT I/O                 00266100
                AIF   ('&XCOM' EQ 'NULL').ZG73S                         00266200
                AIF   (K'&XCOM LE 256).ZG73S    LNG OK                  00266300
&ZXCOM          SETC  ''          RESET IN/OUTPUT                       00266400
&ZMS            SETC  '"COM='                                           00266500
&ZMS            SETC  '&ZMS.&COM"'                                      00266600
&ZMS            SETC  '&ZMS ARGUMENT 1 EXCEEDS THE MAXIMUM'             00266700
                MNOTE 8,' &ZMS LENGTH OF 256 CHARACTERS.'               00266800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00266900
.ZG73S          ANOP  ,                                                 00267000
.******************************************************************     00267100
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00267200
.******************************************************************     00267300
                ACTR  10000                                             00267400
.*----------------------------------------------------------------***   00267500
.***AH.P02 EXTRA POSITIONALS                                            00267600
                AIF   (N'&SYSLIST LE 0).ZGLISTX  NO EXTRAS              00267700
                AIF   (N'&SYSLIST NE 2).ZGLISTX1  NOT NULL              00267800
                AIF   ('&SYSLIST(1)' NE '').ZGLISTX1  NOT NULL          00267900
                AIF   ('&SYSLIST(2)' EQ '').ZGLISTX  NOT NULL           00268000
.ZGLISTX1       ANOP  ,                                                 00268100
&ZCVAL          SETC  ''          ERROR FIELD                           00268200
&ZAWRK          SETA  0           POSITIONAL NUMBER                     00268300
.ZGLIST2        ANOP  ,                                                 00268400
&ZAWRK          SETA  &ZAWRK+1    NEXT POSITIONAL                       00268500
                AIF   (&ZAWRK GT N'&SYSLIST).ZGLIST3  DONE              00268600
&ZCVAL          SETC '&ZCVAL,&SYSLIST(&ZAWRK)'  EXTRA                   00268700
                AGO   .ZGLIST2                                          00268800
.*                                                                      00268900
.ZGLIST3        ANOP  ,                                                 00269000
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)     STRIP COMMA             00269100
&ZMS            SETC  'POSITIONAL ARGUMENT(S),'                         00269200
&ZMS            SETC  '&ZMS "&ZCVAL"'                                   00269300
&ZMS            SETC  '&ZMS CANNOT BE USED.'                            00269400
&ZMS            SETC  '&ZMS NO POSITIONAL ARGUMENTS'                    00269500
                MNOTE 8,' &ZMS ARE ALLOWED.'                            00269600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00269700
.ZGLISTX        ANOP  ,                                                 00269800
&ZASYSLNDX      SETA  0                                                 00269900
.*-------------------------------------------------------------------   00270000
.***AG.MF04 MF=(SLE)                                                    00270100
.ZGMFX          ANOP  ,           END OF FULL SYNTAX CHECK              00270200
.*******************************************************************    00270300
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       00270400
.*******************************************************************    00270500
                AIF   (&ZMACRET NE 0).ZLX2      ERROR DETECTED          00270600
.*******************************************************************    00270700
.***AE.01  START OF IEFSSI MACRO CODE                                   00270800
.*******************************************************************    00270900
                LCLC  &M0M0001                 NAME                     00271000
&M0M0001        SETC  '&XLABEL'                SET NAME                 00271100
                AIF   (K'&XLABEL NE 0).XLAB2                            00271200
&M0M0001        SETC  'M00M&SYSNDX'            DEFAULT NAME             00271300
.*                                                                      00271400
.XLAB2          ANOP  ,                                                 00271500
                AIF   ('&XMF' EQ 'L').XLAB3                             00271600
&M0M0001 DS    0H                             IEFSSI-1                  00271700
.XLAB3          ANOP  ,                                                 00271800
.*******************************************************************    00271900
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              00272000
.*******************************************************************    00272100
              PUSH  PRINT                                               00272200
                AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON        00272300
                PRINT OFF         ++ PR01                               00272400
                AGO   .ZPRNTXX                                          00272500
.ZPRINTX        PRINT ON                                                00272600
.ZPRNTXX        ANOP  ,                                                 00272700
.********************************************************************   00272800
.***AL.L01 INTERNAL ARRAY TO PRODUCE FORMATTED CODE                     00272900
.********************************************************************   00273000
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       00273100
                      LCLA  &ZOPN1         INVOCATION INDEX             00273200
                      LCLC  &ZOPL(4095)    LABEL                        00273300
                      LCLC  &ZOPO(4095)    OPERATION                    00273400
                      LCLC  &ZOPV(4095)    VALUE                        00273500
                      LCLC  &ZOPD(4095)    DESCRIPTION                  00273600
.*                                                                      00273700
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     00273800
.******************************************************************     00273900
.***AL.L10 IEFSSI FMT=LIST MF=S!L PARAMETERS                            00274000
.******************************************************************     00274100
                      AIF   ('&XMF' EQ 'L').ZLMFSL2                     00274200
                      AIF   ('&XMF' NE 'S').ZLMFSLX                     00274300
&XMFCTRL              SETC  '#Z'.'&SYSNDX'.'A'                          00274400
&XMFATTR              SETC  '0D'                                        00274500
.*                                                                      00274600
&ZOPN                 SETA  &ZOPN+1                                     00274700
&ZOPL(&ZOPN)          SETC  ' '                                         00274800
                      AIF   (&SYSALVL NE 0).ZALVL6A                     00274900
&ZOPO(&ZOPN)          SETC  'B'                                         00275000
&ZOPV(&ZOPN)          SETC  '&XMFCTRL.S'                                00275100
                      AGO   .ZALVL6B                                    00275200
.ZALVL6A              ANOP                                              00275300
&ZOPO(&ZOPN)          SETC  'CNOP'                                      00275400
&ZOPV(&ZOPN)          SETC  '4,8'                                       00275500
&ZOPN                 SETA  &ZOPN+1                                     00275600
&ZOPL(&ZOPN)          SETC  ' '                                         00275700
&ZOPO(&ZOPN)          SETC  'BRAS'                                      00275800
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL.S'                              00275900
.ZALVL6B              ANOP                                              00276000
&ZOPD(&ZOPN)          SETC  '++ IEFSSI ARG PARMS'                       00276100
.*                                                                      00276200
&ZOPN                 SETA  &ZOPN+1                                     00276300
&ZOPL(&ZOPN)          SETC  ' '                                         00276400
&ZOPO(&ZOPN)          SETC  'SPACE'                                     00276500
&ZOPV(&ZOPN)          SETC  '1'                                         00276600
&ZOPD(&ZOPN)          SETC  ' '                                         00276700
.*                                                                      00276800
.ZLMFSL2              ANOP  ,                                           00276900
.*-------------------------------------------------------------------   00277000
.***AM.L00  IEFSSI FMT=LIST name                                        00277100
                      AIF   ('&XMF' NE 'L').ZLMFSL2M                    00277200
&ZOPN                 SETA &ZOPN+1                                      00277300
&ZOPL(&ZOPN)          SETC '&M0M0001'                                   00277400
&ZOPO(&ZOPN)          SETC 'EQU'                                        00277500
&ZOPV(&ZOPN)          SETC '&XMFCTRL'                                   00277600
&ZOPD(&ZOPN)          SETC '++ IEFSSI NAME'                             00277700
.ZLMFSL2M             ANOP  ,                                           00277800
.*-------------------------------------------------------------------   00277900
.***AM.L01  IEFSSI FMT=LIST PARAMETERS                                  00278000
&ZOPN                 SETA &ZOPN+1                                      00278100
&ZOPL(&ZOPN)          SETC '&XMFCTRL'                                   00278200
&ZOPO(&ZOPN)          SETC 'DS'                                         00278300
&ZOPV(&ZOPN)          SETC '&XMFATTR'                                   00278400
&ZOPD(&ZOPN)          SETC '++ IEFSSI PARM LIST'                        00278500
.*-------------------------------------------------------------------   00278600
.***AM.L09  XSSI_PLIST_ID CL4                                           00278700
&ZOPN                 SETA &ZOPN+1                                      00278800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSSI_PLIST_ID'                    00278900
&ZOPO(&ZOPN)          SETC 'DS'                                         00279000
&ZOPV(&ZOPN)          SETC 'CL4'                                        00279100
&ZOPD(&ZOPN)          SETC '++ CONSTANT '                               00279200
.*-------------------------------------------------------------------   00279300
.***AM.L09  XPLISTLEN XL2                                               00279400
&ZOPN                 SETA &ZOPN+1                                      00279500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPLISTLEN'                        00279600
&ZOPO(&ZOPN)          SETC 'DS'                                         00279700
&ZOPV(&ZOPN)          SETC 'XL2'                                        00279800
&ZOPD(&ZOPN)          SETC '++ INPUT '                                  00279900
.*-------------------------------------------------------------------   00280000
.***AM.L02 XVERSION XL1                                                 00280100
&ZOPN                 SETA &ZOPN+1                                      00280200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XVERSION'                         00280300
&ZOPO(&ZOPN)          SETC 'DS'                                         00280400
&ZOPV(&ZOPN)          SETC 'XL1'                                        00280500
&ZOPD(&ZOPN)          SETC '++ INPUT XVERSION'                          00280600
.*-------------------------------------------------------------------   00280700
.***AM.L09  XRSV0001 CL1                                                00280800
&ZOPN                 SETA &ZOPN+1                                      00280900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0001'                         00281000
&ZOPO(&ZOPN)          SETC 'DS'                                         00281100
&ZOPV(&ZOPN)          SETC 'CL1'                                        00281200
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00281300
.*-------------------------------------------------------------------   00281400
.***AM.L09  XSUBNAME CL4                                                00281500
&ZOPN                 SETA &ZOPN+1                                      00281600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSUBNAME'                         00281700
&ZOPO(&ZOPN)          SETC 'DS'                                         00281800
&ZOPV(&ZOPN)          SETC 'CL4'                                        00281900
&ZOPD(&ZOPN)          SETC '++ &ZXSUBNAME '                             00282000
.*-------------------------------------------------------------------   00282100
.***AM.L09  XRSV0002 CL4                                                00282200
&ZOPN                 SETA &ZOPN+1                                      00282300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0002'                         00282400
&ZOPO(&ZOPN)          SETC 'DS'                                         00282500
&ZOPV(&ZOPN)          SETC 'CL4'                                        00282600
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00282700
.*-------------------------------------------------------------------   00282800
.***AM.L03 XREQUEST_TYPE BL.16                                          00282900
&ZOPN                 SETA &ZOPN+1                                      00283000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XREQUEST_TYPE'                    00283100
&ZOPO(&ZOPN)          SETC 'DS'                                         00283200
&ZOPV(&ZOPN)          SETC 'BL.16'                                      00283300
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'                             00283400
.*                                                                      00283500
&ZOPN                 SETA  &ZOPN+1                                     00283600
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_ADD'                    00283700
&ZOPO(&ZOPN)          SETC  'EQU'                                       00283800
&ZOPV(&ZOPN)          SETC  'B''1000000000000000'''                     00283900
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00284000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ADD'                          00284100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00284200
.*                                                                      00284300
&ZOPN                 SETA  &ZOPN+1                                     00284400
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_ACTIVATE'               00284500
&ZOPO(&ZOPN)          SETC  'EQU'                                       00284600
&ZOPV(&ZOPN)          SETC  'B''0100000000000000'''                     00284700
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00284800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).ACTIVATE'                     00284900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00285000
.*                                                                      00285100
&ZOPN                 SETA  &ZOPN+1                                     00285200
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_DEACTIVATE'             00285300
&ZOPO(&ZOPN)          SETC  'EQU'                                       00285400
&ZOPV(&ZOPN)          SETC  'B''0010000000000000'''                     00285500
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00285600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).DEACTIVATE'                   00285700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00285800
.*                                                                      00285900
&ZOPN                 SETA  &ZOPN+1                                     00286000
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_SWAP'                   00286100
&ZOPO(&ZOPN)          SETC  'EQU'                                       00286200
&ZOPV(&ZOPN)          SETC  'B''0000100000000000'''                     00286300
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00286400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).SWAP'                         00286500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00286600
.*                                                                      00286700
&ZOPN                 SETA  &ZOPN+1                                     00286800
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_OPTIONS'                00286900
&ZOPO(&ZOPN)          SETC  'EQU'                                       00287000
&ZOPV(&ZOPN)          SETC  'B''0000010000000000'''                     00287100
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00287200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).OPTIONS'                      00287300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00287400
.*                                                                      00287500
&ZOPN                 SETA  &ZOPN+1                                     00287600
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_PUT'                    00287700
&ZOPO(&ZOPN)          SETC  'EQU'                                       00287800
&ZOPV(&ZOPN)          SETC  'B''0000001000000000'''                     00287900
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00288000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).PUT'                          00288100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00288200
.*                                                                      00288300
&ZOPN                 SETA  &ZOPN+1                                     00288400
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_GET'                    00288500
&ZOPO(&ZOPN)          SETC  'EQU'                                       00288600
&ZOPV(&ZOPN)          SETC  'B''0000000100000000'''                     00288700
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00288800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).GET'                          00288900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00289000
.*                                                                      00289100
&ZOPN                 SETA  &ZOPN+1                                     00289200
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQUEST_QUERY'                  00289300
&ZOPO(&ZOPN)          SETC  'EQU'                                       00289400
&ZOPV(&ZOPN)          SETC  'B''0000000010000000'''                     00289500
&ZOPD(&ZOPN)          SETC  '++ XREQUEST.'                              00289600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).QUERY'                        00289700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00289800
.*-------------------------------------------------------------------   00289900
.***AM.L03 XMISC_FLAGS BL.16                                            00290000
&ZOPN                 SETA &ZOPN+1                                      00290100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XMISC_FLAGS'                      00290200
&ZOPO(&ZOPN)          SETC 'DS'                                         00290300
&ZOPV(&ZOPN)          SETC 'BL.16'                                      00290400
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'                             00290500
.*                                                                      00290600
&ZOPN                 SETA  &ZOPN+1                                     00290700
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_REQDSUB'                 00290800
&ZOPO(&ZOPN)          SETC  'EQU'                                       00290900
&ZOPV(&ZOPN)          SETC  'B''1000000000000000'''                     00291000
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               00291100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).REQDSUB'                      00291200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00291300
.*                                                                      00291400
&ZOPN                 SETA  &ZOPN+1                                     00291500
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_COMMAND'                 00291600
&ZOPO(&ZOPN)          SETC  'EQU'                                       00291700
&ZOPV(&ZOPN)          SETC  'B''0100000000000000'''                     00291800
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               00291900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).COMMAND'                      00292000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00292100
.*                                                                      00292200
&ZOPN                 SETA  &ZOPN+1                                     00292300
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_SUBDATA1'                00292400
&ZOPO(&ZOPN)          SETC  'EQU'                                       00292500
&ZOPV(&ZOPN)          SETC  'B''0010000000000000'''                     00292600
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               00292700
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).SUBDATA1'                     00292800
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00292900
.*                                                                      00293000
&ZOPN                 SETA  &ZOPN+1                                     00293100
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_SUBDATA2'                00293200
&ZOPO(&ZOPN)          SETC  'EQU'                                       00293300
&ZOPV(&ZOPN)          SETC  'B''0001000000000000'''                     00293400
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               00293500
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).SUBDATA2'                     00293600
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00293700
.*                                                                      00293800
&ZOPN                 SETA  &ZOPN+1                                     00293900
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XREQDSUB_MSTR'                   00294000
&ZOPO(&ZOPN)          SETC  'EQU'                                       00294100
&ZOPV(&ZOPN)          SETC  'B''0000001000000000'''                     00294200
&ZOPD(&ZOPN)          SETC  '++ XREQDSUB.'                              00294300
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).MSTR'                         00294400
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00294500
.*                                                                      00294600
&ZOPN                 SETA  &ZOPN+1                                     00294700
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XCOMMAND_YES'                    00294800
&ZOPO(&ZOPN)          SETC  'EQU'                                       00294900
&ZOPV(&ZOPN)          SETC  'B''0000000100000000'''                     00295000
&ZOPD(&ZOPN)          SETC  '++ XCOMMAND.'                              00295100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).YES'                          00295200
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00295300
.*                                                                      00295400
&ZOPN                 SETA  &ZOPN+1                                     00295500
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._KEYUSED_EVENTRTN'                00295600
&ZOPO(&ZOPN)          SETC  'EQU'                                       00295700
&ZOPV(&ZOPN)          SETC  'B''0000000010000000'''                     00295800
&ZOPD(&ZOPN)          SETC  '++ KEYUSED.'                               00295900
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).EVENTRTN'                     00296000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00296100
.*-------------------------------------------------------------------   00296200
.***AM.L09  XCONSNAME CL8                                               00296300
&ZOPN                 SETA &ZOPN+1                                      00296400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XCONSNAME'                        00296500
&ZOPO(&ZOPN)          SETC 'DS'                                         00296600
&ZOPV(&ZOPN)          SETC 'CL8'                                        00296700
&ZOPD(&ZOPN)          SETC '++ &ZXCONSNAME '                            00296800
.*-------------------------------------------------------------------   00296900
.***AM.L09  XINITRTN CL8                                                00297000
&ZOPN                 SETA &ZOPN+1                                      00297100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XINITRTN'                         00297200
&ZOPO(&ZOPN)          SETC 'DS'                                         00297300
&ZOPV(&ZOPN)          SETC 'CL8'                                        00297400
&ZOPD(&ZOPN)          SETC '++ &ZXINITRTN '                             00297500
.*-------------------------------------------------------------------   00297600
.***AM.L09 ADDR XINITPARM A                                             00297700
&ZOPN                 SETA &ZOPN+1                                      00297800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XINITPARM_ADDR'                   00297900
&ZOPO(&ZOPN)          SETC 'DS'                                         00298000
&ZOPV(&ZOPN)          SETC 'A'                                          00298100
&ZOPD(&ZOPN)          SETC '++ &ZXINITPARM ADDR'                        00298200
.*-------------------------------------------------------------------   00298300
.***AM.L09  XINITPLEN F                                                 00298400
&ZOPN                 SETA &ZOPN+1                                      00298500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XINITPLEN'                        00298600
&ZOPO(&ZOPN)          SETC 'DS'                                         00298700
&ZOPV(&ZOPN)          SETC 'F'                                          00298800
&ZOPD(&ZOPN)          SETC '++ &ZXINITPLEN '                            00298900
.*-------------------------------------------------------------------   00299000
.***AM.L09  XEVENTRTN CL8                                               00299100
&ZOPN                 SETA &ZOPN+1                                      00299200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XEVENTRTN'                        00299300
&ZOPO(&ZOPN)          SETC 'DS'                                         00299400
&ZOPV(&ZOPN)          SETC 'CL8'                                        00299500
&ZOPD(&ZOPN)          SETC '++ &ZXEVENTRTN '                            00299600
.*-------------------------------------------------------------------   00299700
.***AM.L09  XINTOKEN BL.32                                              00299800
&ZOPN                 SETA &ZOPN+1                                      00299900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XINTOKEN'                         00300000
&ZOPO(&ZOPN)          SETC 'DS'                                         00300100
&ZOPV(&ZOPN)          SETC 'BL.32'                                      00300200
&ZOPD(&ZOPN)          SETC '++ &ZXINTOKEN '                             00300300
.*-------------------------------------------------------------------   00300400
.***AM.L09  XWORKASP XL1                                                00300500
&ZOPN                 SETA &ZOPN+1                                      00300600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XWORKASP'                         00300700
&ZOPO(&ZOPN)          SETC 'DS'                                         00300800
&ZOPV(&ZOPN)          SETC 'XL1'                                        00300900
&ZOPD(&ZOPN)          SETC '++ &ZXWORKASP '                             00301000
.*-------------------------------------------------------------------   00301100
.***AM.L09  XRSV0004 CL3                                                00301200
&ZOPN                 SETA &ZOPN+1                                      00301300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0004'                         00301400
&ZOPO(&ZOPN)          SETC 'DS'                                         00301500
&ZOPV(&ZOPN)          SETC 'CL3'                                        00301600
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00301700
.*-------------------------------------------------------------------   00301800
.***AM.L09  XRSV0008 CL20                                               00301900
&ZOPN                 SETA &ZOPN+1                                      00302000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0008'                         00302100
&ZOPO(&ZOPN)          SETC 'DS'                                         00302200
&ZOPV(&ZOPN)          SETC 'CL20'                                       00302300
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00302400
.*-------------------------------------------------------------------   00302500
.***AM.L09  XRSV0005 CL4                                                00302600
&ZOPN                 SETA &ZOPN+1                                      00302700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0005'                         00302800
&ZOPO(&ZOPN)          SETC 'DS'                                         00302900
&ZOPV(&ZOPN)          SETC 'CL4'                                        00303000
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00303100
.*-------------------------------------------------------------------   00303200
.***AM.L09  XOUTTOKEN BL.32                                             00303300
&ZOPN                 SETA &ZOPN+1                                      00303400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XOUTTOKEN'                        00303500
&ZOPO(&ZOPN)          SETC 'DS'                                         00303600
&ZOPV(&ZOPN)          SETC 'BL.32'                                      00303700
&ZOPD(&ZOPN)          SETC '++ &ZXOUTTOKEN '                            00303800
.*-------------------------------------------------------------------   00303900
.***AM.L09  XWORKAREA A                                                 00304000
&ZOPN                 SETA &ZOPN+1                                      00304100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XWORKAREA'                        00304200
&ZOPO(&ZOPN)          SETC 'DS'                                         00304300
&ZOPV(&ZOPN)          SETC 'A'                                          00304400
&ZOPD(&ZOPN)          SETC '++ &ZXWORKAREA '                            00304500
.*-------------------------------------------------------------------   00304600
.***AM.L09  XSUBDATA1 CL4                                               00304700
&ZOPN                 SETA &ZOPN+1                                      00304800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSUBDATA1'                        00304900
&ZOPO(&ZOPN)          SETC 'DS'                                         00305000
&ZOPV(&ZOPN)          SETC 'CL4'                                        00305100
&ZOPD(&ZOPN)          SETC '++ &ZXSUBDATA1 '                            00305200
.*-------------------------------------------------------------------   00305300
.***AM.L09  XSUBDATA2 CL4                                               00305400
&ZOPN                 SETA &ZOPN+1                                      00305500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSUBDATA2'                        00305600
&ZOPO(&ZOPN)          SETC 'DS'                                         00305700
&ZOPV(&ZOPN)          SETC 'CL4'                                        00305800
&ZOPD(&ZOPN)          SETC '++ &ZXSUBDATA2 '                            00305900
.*-------------------------------------------------------------------   00306000
.***AM.L09  XRSV0006 CL4                                                00306100
&ZOPN                 SETA &ZOPN+1                                      00306200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV0006'                         00306300
&ZOPO(&ZOPN)          SETC 'DS'                                         00306400
&ZOPV(&ZOPN)          SETC 'CL4'                                        00306500
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00306600
.*-------------------------------------------------------------------   00306700
.***AM.L09  XPLISTPTR A                                                 00306800
&ZOPN                 SETA &ZOPN+1                                      00306900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPLISTPTR'                        00307000
&ZOPO(&ZOPN)          SETC 'DS'                                         00307100
&ZOPV(&ZOPN)          SETC 'A'                                          00307200
&ZOPD(&ZOPN)          SETC '++ INPUT '                                  00307300
.*-------------------------------------------------------------------   00307400
.***AM.L10 END OF IEFSSI LIST PARAMETERS                                00307500
&ZOPN                 SETA &ZOPN+1                                      00307600
&ZOPL(&ZOPN)          SETC '&XMFCTRL.L'                                 00307700
&ZOPO(&ZOPN)          SETC 'EQU'                                        00307800
&ZOPV(&ZOPN)          SETC '*-&XMFCTRL'                                 00307900
&ZOPD(&ZOPN)          SETC '++ LENGTH OF PLIST'                         00308000
.*                                                                      00308100
&ZOPN                 SETA &ZOPN+1                                      00308200
&ZOPL(&ZOPN)          SETC ' '                                          00308300
&ZOPO(&ZOPN)          SETC 'SPACE'                                      00308400
&ZOPV(&ZOPN)          SETC '1'                                          00308500
&ZOPD(&ZOPN)          SETC ' '                                          00308600
.*-------------------------------------------------------------------   00308700
.***AL.L12 IEFSSI FMT=LIST MF=S!L PARAMETERS                            00308800
                      AIF   ('&XMF' EQ 'L').ZMFLX  DONE IF MF=L         00308900
.*                                                                      00309000
&ZOPN                 SETA  &ZOPN+1                                     00309100
&ZOPL(&ZOPN)          SETC  '&XMFCTRL.S'                                00309200
&ZOPO(&ZOPN)          SETC  'DC'                                        00309300
&ZOPV(&ZOPN)          SETC  '0H''0'''                                   00309400
&ZOPD(&ZOPN)          SETC  '++ IEFSSI ARG PARMS'                       00309500
.*                                                                      00309600
.ZLMFSLX              ANOP  ,                                           00309700
.*-------------------------------------------------------------------   00309800
.***AL.L13 SET ZPLLEN TO ITS APPROPRIATE VALUE                          00309900
&ZPLLEN               SETA 108                                          00310000
.*                                                                      00310100
.******************************************************************     00310200
.***AI.L01 IEFSSI FMT=LIST FILL IN PARAMETER AREA                       00310300
.******************************************************************     00310400
                      ACTR  10000                                       00310500
&ZCVAL                SETC  'LA'           ASSUME XA MODE               00310600
                      AIF   ('&SYSASCE' EQ 'P').ZIMFXA  SYSSTATE PRI    00310700
&ZCVAL                SETC  'LAE'          XAX MODE                     00310800
.ZIMFXA               ANOP ,                                            00310900
.*                                                                      00311000
                      AIF   ('&XMFCTRL'(1,1) NE '(').ZIMFN2  NOT GPR    00311100
&ZCGPR                SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)  GET GPR         00311200
                      AIF   ('&ZCGPR' EQ 'GPR1').ZIMFNX                 00311300
                      AIF   ('&ZCGPR' EQ 'GPR01').ZIMFNX                00311400
                      AIF   ('&ZCGPR' EQ 'REG1').ZIMFNX                 00311500
                      AIF   ('&ZCGPR' EQ 'REG01').ZIMFNX                00311600
                      AIF   ('&ZCGPR' EQ 'R1').ZIMFNX                   00311700
                      AIF   ('&ZCGPR' EQ '1').ZIMFNX                    00311800
                      AIF   ('&ZCGPR' EQ '01').ZIMFNX                   00311900
&ZOPN                 SETA  &ZOPN+1                                     00312000
&ZOPL(&ZOPN)          SETC  ' '                                         00312100
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00312200
&ZOPV(&ZOPN)          SETC  '1,0(,&ZCGPR)'                              00312300
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00312400
                      AGO   .ZIMFNX                                     00312500
.*                                                                      00312600
.ZIMFN2               ANOP ,                                            00312700
                      AIF   (&SYSALVL EQ 0).ZIMFNX1                     00312800
                      AIF   ('&XMF' NE 'S').ZIMFNX1                     00312900
                      AIF   ('&ZCVAL' NE 'LAE').ZIMFNX                  00313000
&ZOPN                 SETA  &ZOPN+1                                     00313100
&ZOPL(&ZOPN)          SETC  ' '                                         00313200
&ZOPO(&ZOPN)          SETC  'LAE'                                       00313300
&ZOPV(&ZOPN)          SETC  '1,0(1,0)'                                  00313400
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00313500
                      AGO   .ZIMFNX                                     00313600
.ZIMFNX1              ANOP ,                                            00313700
&ZOPN                 SETA  &ZOPN+1                                     00313800
&ZOPL(&ZOPN)          SETC  ' '                                         00313900
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00314000
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL'                                00314100
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00314200
.ZIMFNX               ANOP ,                                            00314300
.********************************************************************   00314400
.***AI.L02 IEFSSI FMT=LIST INITIALIZE PARAMETER AREA                    00314500
.********************************************************************   00314600
.***AI.L03 MF=(SLE)                                                     00314700
                      AIF   ('&XMF' EQ 'L').ZIMFLX                      00314800
.*                                                                      00314900
&ZOPN                 SETA  &ZOPN+1                                     00315000
&ZOPL(&ZOPN)          SETC  ' '                                         00315100
&ZOPO(&ZOPN)          SETC  'XC'                                        00315200
&ZOPV(&ZOPN)          SETC  '0(&ZPLLEN,1),0(1)'                         00315300
&ZOPD(&ZOPN)          SETC  '++ INITIALIZE'                             00315400
.ZIMFLX               ANOP  ,                                           00315500
.*-------------------------------------------------------------------   00315600
.***AI.L60 XSSI_PLIST_ID CL4                                            00315700
&ZOPN                 SETA  &ZOPN+1                                     00315800
&ZOPL(&ZOPN)          SETC  ' '                                         00315900
&ZOPO(&ZOPN)          SETC  'MVC'                                       00316000
&ZOPV(&ZOPN)          SETC  '0(4,1),=CL4''SIPL'''                       00316100
&ZOPD(&ZOPN)          SETC  '++ CL4 CONSTANT'                           00316200
.*-------------------------------------------------------------------   00316300
.***AI.L04 XPLISTLEN XL2                                                00316400
&ZOPN                 SETA  &ZOPN+1                                     00316500
&ZOPL(&ZOPN)          SETC  ' '                                         00316600
&ZOPO(&ZOPN)          SETC  'MVC'                                       00316700
&ZOPV(&ZOPN)          SETC  '4(2,1),=AL2(&ZPLLEN)'                      00316800
&ZOPD(&ZOPN)          SETC  '++ INPUT XPLISTLEN XL2'                    00316900
.*-------------------------------------------------------------------   00317000
.***AI.L04B XVERSION XL1                                                00317100
                      AIF   (&XPLISTVER EQ 0).ZIMFVZ                    00317200
&ZOPN                 SETA  &ZOPN+1                                     00317300
&ZOPL(&ZOPN)          SETC  ' '                                         00317400
&ZOPO(&ZOPN)          SETC  'MVI'                                       00317500
&ZOPV(&ZOPN)          SETC  '6(1),&XPLISTVER'                           00317600
&ZOPD(&ZOPN)          SETC  '++ INPUT XVERSION XL1'                     00317700
.ZIMFVZ               ANOP  ,                                           00317800
.*-------------------------------------------------------------------   00317900
.***AI.L25  XSUBNAME CL4                                                00318000
                      AIF   ('&ZXSUBNAME' EQ '').ZI5E                   00318100
                      AIF   ('&ZXSUBNAME' EQ 'OUTPUT').ZI5E             00318200
&ZCGPR                SETC  '&XSUBNAME'                                 00318300
.*                                                                      00318400
                      AIF   ('&XSUBNAME'(1,1) NE '(').ZI5B              00318500
&ZCGPR   SETC  '0('.'&XSUBNAME'(2,K'&XSUBNAME-2).')'                    00318600
.ZI5B                 ANOP  ,                                           00318700
.*                                                                      00318800
&ZOPN                 SETA  &ZOPN+1                                     00318900
&ZOPL(&ZOPN)          SETC  ' '                                         00319000
&ZOPO(&ZOPN)          SETC  'MVC'                                       00319100
&ZOPV(&ZOPN)          SETC  '8(4,1),&ZCGPR'                             00319200
&ZOPD(&ZOPN)          SETC  '++ &ZXSUBNAME XSUBNAME'                    00319300
.*                                                                      00319400
.ZI5E                 ANOP  ,                                           00319500
.*-------------------------------------------------------------------   00319600
.***AI.L05 XREQUEST_TYPE BL2                                            00319700
&ZW                   SETC  ''                                          00319800
&ZCLNG                SETC  ''             RESET BIT ON FLAG            00319900
.*-------------------------------------------------------------------   00320000
.***AI.L08 XREQUEST_TYPE "ADD"                                          00320100
.***      BL2'1XXXXXXXXXXXXXXX'                                         00320200
         AIF   ('&XREQUEST' NE 'ADD').ZI8A                              00320300
&ZW                   SETC  '&ZW.1'                                     00320400
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00320500
                      AGO   .ZI8C                                       00320600
.*                                                                      00320700
.ZI8A                 ANOP  ,                                           00320800
&ZW                   SETC  '&ZW.0'                                     00320900
.ZI8C                 ANOP  ,                                           00321000
.*-------------------------------------------------------------------   00321100
.***AI.L08 XREQUEST_TYPE "ACTIVATE"                                     00321200
.***      BL2'X1XXXXXXXXXXXXXX'                                         00321300
         AIF   ('&XREQUEST' NE 'ACTIVATE').ZI9A                         00321400
&ZW                   SETC  '&ZW.1'                                     00321500
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00321600
                      AGO   .ZI9C                                       00321700
.*                                                                      00321800
.ZI9A                 ANOP  ,                                           00321900
&ZW                   SETC  '&ZW.0'                                     00322000
.ZI9C                 ANOP  ,                                           00322100
.*-------------------------------------------------------------------   00322200
.***AI.L08 XREQUEST_TYPE "DEACTIVATE"                                   00322300
.***      BL2'XX1XXXXXXXXXXXXX'                                         00322400
         AIF   ('&XREQUEST' NE 'DEACTIVATE').ZI10A                      00322500
&ZW                   SETC  '&ZW.1'                                     00322600
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00322700
                      AGO   .ZI10C                                      00322800
.*                                                                      00322900
.ZI10A                ANOP  ,                                           00323000
&ZW                   SETC  '&ZW.0'                                     00323100
.ZI10C                ANOP  ,                                           00323200
.*-------------------------------------------------------------------   00323300
.***AI.L08 XREQUEST_TYPE "SWAP"                                         00323400
.***      BL2'XXXX1XXXXXXXXXXX'                                         00323500
         AIF   ('&XREQUEST' NE 'SWAP').ZI11A                            00323600
&ZW                   SETC  '&ZW.01'                                    00323700
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00323800
                      AGO   .ZI11C                                      00323900
.*                                                                      00324000
.ZI11A                ANOP  ,                                           00324100
&ZW                   SETC  '&ZW.00'                                    00324200
.ZI11C                ANOP  ,                                           00324300
.*-------------------------------------------------------------------   00324400
.***AI.L08 XREQUEST_TYPE "OPTIONS"                                      00324500
.***      BL2'XXXXX1XXXXXXXXXX'                                         00324600
         AIF   ('&XREQUEST' NE 'OPTIONS').ZI12A                         00324700
&ZW                   SETC  '&ZW.1'                                     00324800
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00324900
                      AGO   .ZI12C                                      00325000
.*                                                                      00325100
.ZI12A                ANOP  ,                                           00325200
&ZW                   SETC  '&ZW.0'                                     00325300
.ZI12C                ANOP  ,                                           00325400
.*-------------------------------------------------------------------   00325500
.***AI.L08 XREQUEST_TYPE "PUT"                                          00325600
.***      BL2'XXXXXX1XXXXXXXXX'                                         00325700
         AIF   ('&XREQUEST' NE 'PUT').ZI13A                             00325800
&ZW                   SETC  '&ZW.1'                                     00325900
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00326000
                      AGO   .ZI13C                                      00326100
.*                                                                      00326200
.ZI13A                ANOP  ,                                           00326300
&ZW                   SETC  '&ZW.0'                                     00326400
.ZI13C                ANOP  ,                                           00326500
.*-------------------------------------------------------------------   00326600
.***AI.L08 XREQUEST_TYPE "GET"                                          00326700
.***      BL2'XXXXXXX1XXXXXXXX'                                         00326800
         AIF   ('&XREQUEST' NE 'GET').ZI14A                             00326900
&ZW                   SETC  '&ZW.1'                                     00327000
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00327100
                      AGO   .ZI14C                                      00327200
.*                                                                      00327300
.ZI14A                ANOP  ,                                           00327400
&ZW                   SETC  '&ZW.0'                                     00327500
.ZI14C                ANOP  ,                                           00327600
.*-------------------------------------------------------------------   00327700
.***AI.L08 XREQUEST_TYPE "QUERY"                                        00327800
.***      BL2'XXXXXXXX1XXXXXXX'                                         00327900
         AIF   ('&XREQUEST' NE 'QUERY').ZI15A                           00328000
&ZW                   SETC  '&ZW.10000000'                              00328100
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00328200
                      AGO   .ZI15C                                      00328300
.*                                                                      00328400
.ZI15A                ANOP  ,                                           00328500
&ZW                   SETC  '&ZW.00000000'                              00328600
.ZI15C                ANOP  ,                                           00328700
.*-------------------------------------------------------------------   00328800
.***AI.L10 XREQUEST_TYPE BL2                                            00328900
                      AIF   ('&ZCLNG' NE 'YES').ZI15E  ALL ZERO BITS    00329000
&ZOPN                 SETA  &ZOPN+1                                     00329100
&ZOPL(&ZOPN)          SETC  ' '                                         00329200
&ZOPO(&ZOPN)          SETC  'OC'                                        00329300
&ZOPV(&ZOPN)          SETC  '16(2,1),=BL2''&ZW'''                       00329400
&ZOPD(&ZOPN)          SETC  '++ INPUT BL2'                              00329500
.ZI15E                ANOP  ,                                           00329600
.*-------------------------------------------------------------------   00329700
.***AI.L05 XMISC_FLAGS BL2                                              00329800
&ZW                   SETC  ''                                          00329900
&ZCLNG                SETC  ''             RESET BIT ON FLAG            00330000
.*-------------------------------------------------------------------   00330100
.***AI.L08 XMISC_FLAGS "REQDSUB"                                        00330200
.***      BL2'1XXXXXXXXXXXXXXX'                                         00330300
         AIF   ('&REQDSUB' EQ '').ZI17A                                 00330400
&ZW                   SETC  '&ZW.1'                                     00330500
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00330600
                      AGO   .ZI17C                                      00330700
.*                                                                      00330800
.ZI17A                ANOP  ,                                           00330900
&ZW                   SETC  '&ZW.0'                                     00331000
.ZI17C                ANOP  ,                                           00331100
.*-------------------------------------------------------------------   00331200
.***AI.L08 XMISC_FLAGS "COMMAND"                                        00331300
.***      BL2'X1XXXXXXXXXXXXXX'                                         00331400
         AIF   ('&COMMAND' EQ '').ZI18A                                 00331500
&ZW                   SETC  '&ZW.1'                                     00331600
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00331700
                      AGO   .ZI18C                                      00331800
.*                                                                      00331900
.ZI18A                ANOP  ,                                           00332000
&ZW                   SETC  '&ZW.0'                                     00332100
.ZI18C                ANOP  ,                                           00332200
.*-------------------------------------------------------------------   00332300
.***AI.L08 XMISC_FLAGS "SUBDATA1"                                       00332400
.***      BL2'XX1XXXXXXXXXXXXX'                                         00332500
         AIF   ('&SUBDATA1' EQ '').ZI19A                                00332600
&ZW                   SETC  '&ZW.1'                                     00332700
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00332800
                      AGO   .ZI19C                                      00332900
.*                                                                      00333000
.ZI19A                ANOP  ,                                           00333100
&ZW                   SETC  '&ZW.0'                                     00333200
.ZI19C                ANOP  ,                                           00333300
.*-------------------------------------------------------------------   00333400
.***AI.L08 XMISC_FLAGS "SUBDATA2"                                       00333500
.***      BL2'XXX1XXXXXXXXXXXX'                                         00333600
         AIF   ('&SUBDATA2' EQ '').ZI20A                                00333700
&ZW                   SETC  '&ZW.1'                                     00333800
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00333900
                      AGO   .ZI20C                                      00334000
.*                                                                      00334100
.ZI20A                ANOP  ,                                           00334200
&ZW                   SETC  '&ZW.0'                                     00334300
.ZI20C                ANOP  ,                                           00334400
.*-------------------------------------------------------------------   00334500
.***AI.L08 XMISC_FLAGS "MSTR"                                           00334600
.***      BL2'XXXXXX1XXXXXXXXX'                                         00334700
         AIF   ('&XREQDSUB' NE 'MSTR').ZI21A                            00334800
&ZW                   SETC  '&ZW.001'                                   00334900
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00335000
                      AGO   .ZI21C                                      00335100
.*                                                                      00335200
.ZI21A                ANOP  ,                                           00335300
&ZW                   SETC  '&ZW.000'                                   00335400
.ZI21C                ANOP  ,                                           00335500
.*-------------------------------------------------------------------   00335600
.***AI.L08 XMISC_FLAGS "YES"                                            00335700
.***      BL2'XXXXXXX1XXXXXXXX'                                         00335800
         AIF   ('&XCOMMAND' NE 'YES').ZI22A                             00335900
&ZW                   SETC  '&ZW.1'                                     00336000
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00336100
                      AGO   .ZI22C                                      00336200
.*                                                                      00336300
.ZI22A                ANOP  ,                                           00336400
&ZW                   SETC  '&ZW.0'                                     00336500
.ZI22C                ANOP  ,                                           00336600
.*-------------------------------------------------------------------   00336700
.***AI.L08 XMISC_FLAGS "EVENTRTN"                                       00336800
.***      BL2'XXXXXXXX1XXXXXXX'                                         00336900
         AIF   ('&EVENTRTN' EQ '').ZI23A                                00337000
&ZW                   SETC  '&ZW.10000000'                              00337100
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00337200
                      AGO   .ZI23C                                      00337300
.*                                                                      00337400
.ZI23A                ANOP  ,                                           00337500
&ZW                   SETC  '&ZW.00000000'                              00337600
.ZI23C                ANOP  ,                                           00337700
.*-------------------------------------------------------------------   00337800
.***AI.L10 XMISC_FLAGS BL2                                              00337900
                      AIF   ('&ZCLNG' NE 'YES').ZI23E  ALL ZERO BITS    00338000
&ZOPN                 SETA  &ZOPN+1                                     00338100
&ZOPL(&ZOPN)          SETC  ' '                                         00338200
&ZOPO(&ZOPN)          SETC  'OC'                                        00338300
&ZOPV(&ZOPN)          SETC  '18(2,1),=BL2''&ZW'''                       00338400
&ZOPD(&ZOPN)          SETC  '++ INPUT BL2'                              00338500
.ZI23E                ANOP  ,                                           00338600
.*-------------------------------------------------------------------   00338700
.***AI.L25  XCONSNAME CL8                                               00338800
                      AIF   ('&ZXCONSNAME' EQ '').ZI24E                 00338900
                      AIF   ('&ZXCONSNAME' EQ 'OUTPUT').ZI24E           00339000
&ZCGPR                SETC  '&XCONSNAME'                                00339100
         AIF   ('&XCONSNAME' EQ '0').ZI24E                              00339200
         AIF   ('&XCONSNAME' EQ '0').ZI24E                              00339300
.*                                                                      00339400
                      AIF   ('&XCONSNAME'(1,1) NE '(').ZI24B            00339500
&ZCGPR   SETC  '0('.'&XCONSNAME'(2,K'&XCONSNAME-2).')'                  00339600
                      AGO   .ZI24D                                      00339700
.ZI24B                ANOP  ,                                           00339800
.*                                                                      00339900
                      AIF   ('&CONSNAME(1)' EQ '').ZI24I                00340000
&ZC                   SETC  '0'                                         00340100
                      AIF   ('&XCONSNAME' NE '&ZC').ZI24C               00340200
.ZI24I                ANOP  ,                                           00340300
&ZCGPR                SETC  '=CL8''&XCONSNAME'''                        00340400
.ZI24C                ANOP  ,                                           00340500
.*                                                                      00340600
.ZI24D                ANOP  ,                                           00340700
.*                                                                      00340800
&ZOPN                 SETA  &ZOPN+1                                     00340900
&ZOPL(&ZOPN)          SETC  ' '                                         00341000
&ZOPO(&ZOPN)          SETC  'MVC'                                       00341100
&ZOPV(&ZOPN)          SETC  '20(8,1),&ZCGPR'                            00341200
&ZOPD(&ZOPN)          SETC  '++ &ZXCONSNAME XCONSNAME'                  00341300
.*                                                                      00341400
.ZI24E                ANOP  ,                                           00341500
.*-------------------------------------------------------------------   00341600
.***AI.L18  XINITRTN CL8                                                00341700
         AIF   ('&XINITRTN' NE 'NO_INITRTN').ZI25                       00341800
&ZXINITRTN            SETC  ''             RESET INPUT/OUTPUT           00341900
.ZI25                 ANOP  ,                                           00342000
.*-------------------------------------------------------------------   00342100
.***AI.L25  XINITRTN CL8                                                00342200
                      AIF   ('&ZXINITRTN' EQ '').ZI25E                  00342300
                      AIF   ('&ZXINITRTN' EQ 'OUTPUT').ZI25E            00342400
&ZCGPR                SETC  '&XINITRTN'                                 00342500
.*                                                                      00342600
                      AIF   ('&XINITRTN'(1,1) NE '(').ZI25B             00342700
&ZCGPR   SETC  '0('.'&XINITRTN'(2,K'&XINITRTN-2).')'                    00342800
.ZI25B                ANOP  ,                                           00342900
.*                                                                      00343000
&ZOPN                 SETA  &ZOPN+1                                     00343100
&ZOPL(&ZOPN)          SETC  ' '                                         00343200
&ZOPO(&ZOPN)          SETC  'MVC'                                       00343300
&ZOPV(&ZOPN)          SETC  '28(8,1),&ZCGPR'                            00343400
&ZOPD(&ZOPN)          SETC  '++ &ZXINITRTN XINITRTN'                    00343500
.*                                                                      00343600
.ZI25E                ANOP  ,                                           00343700
.*-------------------------------------------------------------------   00343800
.***AI.L18 ADDR XINITPARM A                                             00343900
         AIF   ('&XINITPARM' NE 'NO_INITPARM').ZI26                     00344000
&ZXINITPARM           SETC  ''             RESET INPUT/OUTPUT           00344100
.ZI26                 ANOP  ,                                           00344200
.*-------------------------------------------------------------------   00344300
.***AI.L19 ADDR XINITPARM A                                             00344400
                      AIF   ('&ZXINITPARM' EQ '').ZI26H                 00344500
&ZCLNG                SETC  '&XINITPARM'                                00344600
&ZCGPR                SETC  '14'                                        00344700
         AIF   ('&XINITPARM'(1,1) EQ '(').ZI26F  IN GPR                 00344800
.*                                                                      00344900
&ZOPN                 SETA  &ZOPN+1                                     00345000
&ZOPL(&ZOPN)          SETC  ' '                                         00345100
&ZOPO(&ZOPN)          SETC  'LA'                                        00345200
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             00345300
&ZOPD(&ZOPN)          SETC  '++ &ZXINITPARM XINITPARM'                  00345400
.*                                                                      00345500
                      AGO   .ZI26G                                      00345600
.*                                                                      00345700
.ZI26F                ANOP  ,                                           00345800
&ZCGPR   SETC  '&XINITPARM'(2,K'&XINITPARM-2)                           00345900
.*                                                                      00346000
.ZI26G                ANOP  ,                                           00346100
.*                                                                      00346200
&ZOPN                 SETA  &ZOPN+1                                     00346300
&ZOPL(&ZOPN)          SETC  ' '                                         00346400
&ZOPO(&ZOPN)          SETC  'ST'                                        00346500
&ZOPV(&ZOPN)          SETC  '&ZCGPR,36(,1)'                             00346600
&ZOPD(&ZOPN)          SETC  '++ &ZXINITPARM XINITPARM'                  00346700
.*                                                                      00346800
.ZI26H                ANOP  ,                                           00346900
.*-------------------------------------------------------------------   00347000
.***AI.L25  XINITPLEN F                                                 00347100
                      AIF   ('&ZXINITPLEN' EQ '').ZI27E                 00347200
                      AIF   ('&ZXINITPLEN' EQ 'OUTPUT').ZI27E           00347300
&ZCGPR                SETC  '&XINITPLEN'                                00347400
.*                                                                      00347500
                      AIF   ('&XINITPLEN'(1,1) NE '(').ZI27B            00347600
&ZCGPR   SETC  '0('.'&XINITPLEN'(2,K'&XINITPLEN-2).')'                  00347700
                      AGO   .ZI27D                                      00347800
.ZI27B                ANOP  ,                                           00347900
.*                                                                      00348000
&ZC                   SETC  '&XINITPLEN'(1,1)                           00348100
                      AIF   (T'&ZC NE 'N').ZI27D                        00348200
&ZC                   SETC  '&XINITPLEN'                                00348300
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI27D               00348400
&ZCGPR                SETC  '=FL4''&XINITPLEN'''                        00348500
.*                                                                      00348600
.ZI27D                ANOP  ,                                           00348700
.*                                                                      00348800
&ZOPN                 SETA  &ZOPN+1                                     00348900
&ZOPL(&ZOPN)          SETC  ' '                                         00349000
&ZOPO(&ZOPN)          SETC  'MVC'                                       00349100
&ZOPV(&ZOPN)          SETC  '40(4,1),&ZCGPR'                            00349200
&ZOPD(&ZOPN)          SETC  '++ &ZXINITPLEN XINITPLEN'                  00349300
.*                                                                      00349400
.ZI27E                ANOP  ,                                           00349500
.*-------------------------------------------------------------------   00349600
.***AI.L18  XEVENTRTN CL8                                               00349700
         AIF   ('&XEVENTRTN' NE 'NO_EVENTRTN').ZI28                     00349800
&ZXEVENTRTN           SETC  ''             RESET INPUT/OUTPUT           00349900
.ZI28                 ANOP  ,                                           00350000
.*-------------------------------------------------------------------   00350100
.***AI.L25  XEVENTRTN CL8                                               00350200
                      AIF   ('&ZXEVENTRTN' EQ '').ZI28E                 00350300
                      AIF   ('&ZXEVENTRTN' EQ 'OUTPUT').ZI28E           00350400
&ZCGPR                SETC  '&XEVENTRTN'                                00350500
.*                                                                      00350600
                      AIF   ('&XEVENTRTN'(1,1) NE '(').ZI28B            00350700
&ZCGPR   SETC  '0('.'&XEVENTRTN'(2,K'&XEVENTRTN-2).')'                  00350800
.ZI28B                ANOP  ,                                           00350900
.*                                                                      00351000
&ZOPN                 SETA  &ZOPN+1                                     00351100
&ZOPL(&ZOPN)          SETC  ' '                                         00351200
&ZOPO(&ZOPN)          SETC  'MVC'                                       00351300
&ZOPV(&ZOPN)          SETC  '44(8,1),&ZCGPR'                            00351400
&ZOPD(&ZOPN)          SETC  '++ &ZXEVENTRTN XEVENTRTN'                  00351500
.*                                                                      00351600
.ZI28E                ANOP  ,                                           00351700
.*-------------------------------------------------------------------   00351800
.***AI.L18  XINTOKEN XL4                                                00351900
         AIF   ('&XINTOKEN' NE 'NO_INPUT_TOKEN').ZI29                   00352000
&ZXINTOKEN            SETC  ''             RESET INPUT/OUTPUT           00352100
.ZI29                 ANOP  ,                                           00352200
.*-------------------------------------------------------------------   00352300
.***AI.L25  XINTOKEN XL4                                                00352400
                      AIF   ('&ZXINTOKEN' EQ '').ZI29E                  00352500
                      AIF   ('&ZXINTOKEN' EQ 'OUTPUT').ZI29E            00352600
&ZCGPR                SETC  '&XINTOKEN'                                 00352700
.*                                                                      00352800
                      AIF   ('&XINTOKEN'(1,1) NE '(').ZI29B             00352900
&ZCGPR   SETC  '0('.'&XINTOKEN'(2,K'&XINTOKEN-2).')'                    00353000
                      AGO   .ZI29D                                      00353100
.ZI29B                ANOP  ,                                           00353200
.*                                                                      00353300
&ZC                   SETC  '&XINTOKEN'(1,1)                            00353400
                      AIF   (T'&ZC NE 'N').ZI29D                        00353500
&ZC                   SETC  '&XINTOKEN'                                 00353600
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI29D               00353700
&ZCGPR                SETC  '=BL4''&XINTOKEN'''                         00353800
.*                                                                      00353900
.ZI29D                ANOP  ,                                           00354000
.*                                                                      00354100
&ZOPN                 SETA  &ZOPN+1                                     00354200
&ZOPL(&ZOPN)          SETC  ' '                                         00354300
&ZOPO(&ZOPN)          SETC  'MVC'                                       00354400
&ZOPV(&ZOPN)          SETC  '52(4,1),&ZCGPR'                            00354500
&ZOPD(&ZOPN)          SETC  '++ &ZXINTOKEN XINTOKEN'                    00354600
.*                                                                      00354700
.ZI29E                ANOP  ,                                           00354800
.*-------------------------------------------------------------------   00354900
.***AI.L25  XWORKASP XL1                                                00355000
                      AIF   ('&ZXWORKASP' EQ '').ZI30E                  00355100
                      AIF   ('&ZXWORKASP' EQ 'OUTPUT').ZI30E            00355200
&ZCGPR                SETC  '&XWORKASP'                                 00355300
         AIF   ('&XWORKASP' EQ '0').ZI30E                               00355400
         AIF   ('&XWORKASP' EQ '0').ZI30E                               00355500
.*                                                                      00355600
                      AIF   ('&XWORKASP'(1,1) NE '(').ZI30B             00355700
&ZCGPR   SETC  '0('.'&XWORKASP'(2,K'&XWORKASP-2).')'                    00355800
                      AGO   .ZI30D                                      00355900
.ZI30B                ANOP  ,                                           00356000
.*                                                                      00356100
&ZC                   SETC  '&XWORKASP'(1,1)                            00356200
                      AIF   (T'&ZC NE 'N').ZI30D                        00356300
&ZC                   SETC  '&XWORKASP'                                 00356400
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI30D               00356500
&ZCGPR                SETC  '=AL1(&XWORKASP)'                           00356600
.*                                                                      00356700
.ZI30D                ANOP  ,                                           00356800
.*                                                                      00356900
&ZOPN                 SETA  &ZOPN+1                                     00357000
&ZOPL(&ZOPN)          SETC  ' '                                         00357100
&ZOPO(&ZOPN)          SETC  'MVC'                                       00357200
&ZOPV(&ZOPN)          SETC  '56(1,1),&ZCGPR'                            00357300
&ZOPD(&ZOPN)          SETC  '++ &ZXWORKASP XWORKASP'                    00357400
.*                                                                      00357500
.ZI30E                ANOP  ,                                           00357600
.*-------------------------------------------------------------------   00357700
.***AI.L25  XSUBDATA1 CL4                                               00357800
                      AIF   ('&ZXSUBDATA1' EQ '').ZI36E                 00357900
                      AIF   ('&ZXSUBDATA1' EQ 'OUTPUT').ZI36E           00358000
&ZCGPR                SETC  '&XSUBDATA1'                                00358100
.*                                                                      00358200
                      AIF   ('&XSUBDATA1'(1,1) NE '(').ZI36B            00358300
&ZCGPR   SETC  '0('.'&XSUBDATA1'(2,K'&XSUBDATA1-2).')'                  00358400
.ZI36B                ANOP  ,                                           00358500
.*                                                                      00358600
&ZOPN                 SETA  &ZOPN+1                                     00358700
&ZOPL(&ZOPN)          SETC  ' '                                         00358800
&ZOPO(&ZOPN)          SETC  'MVC'                                       00358900
&ZOPV(&ZOPN)          SETC  '92(4,1),&ZCGPR'                            00359000
&ZOPD(&ZOPN)          SETC  '++ &ZXSUBDATA1 XSUBDATA1'                  00359100
.*                                                                      00359200
.ZI36E                ANOP  ,                                           00359300
.*-------------------------------------------------------------------   00359400
.***AI.L25  XSUBDATA2 CL4                                               00359500
                      AIF   ('&ZXSUBDATA2' EQ '').ZI37E                 00359600
                      AIF   ('&ZXSUBDATA2' EQ 'OUTPUT').ZI37E           00359700
&ZCGPR                SETC  '&XSUBDATA2'                                00359800
.*                                                                      00359900
                      AIF   ('&XSUBDATA2'(1,1) NE '(').ZI37B            00360000
&ZCGPR   SETC  '0('.'&XSUBDATA2'(2,K'&XSUBDATA2-2).')'                  00360100
.ZI37B                ANOP  ,                                           00360200
.*                                                                      00360300
&ZOPN                 SETA  &ZOPN+1                                     00360400
&ZOPL(&ZOPN)          SETC  ' '                                         00360500
&ZOPO(&ZOPN)          SETC  'MVC'                                       00360600
&ZOPV(&ZOPN)          SETC  '96(4,1),&ZCGPR'                            00360700
&ZOPD(&ZOPN)          SETC  '++ &ZXSUBDATA2 XSUBDATA2'                  00360800
.*                                                                      00360900
.ZI37E                ANOP  ,                                           00361000
.*-------------------------------------------------------------------   00361100
.***AI.C01 RESTORE ADDR OF PARM LIST PTR                                00361200
.*                                                                      00361300
&ZOPN                 SETA  &ZOPN+1                                     00361400
&ZOPL(&ZOPN)          SETC  ' '                                         00361500
&ZOPO(&ZOPN)          SETC  'ST'                                        00361600
&ZOPV(&ZOPN)          SETC  '1,104(,1)'                                 00361700
&ZOPD(&ZOPN)          SETC  '++ STORE ADDR OF PARM LIST'                00361800
.*                                                                      00361900
&ZOPN                 SETA  &ZOPN+1                                     00362000
&ZOPL(&ZOPN)          SETC  ' '                                         00362100
&ZOPO(&ZOPN)          SETC  'LA'                                        00362200
&ZOPV(&ZOPN)          SETC  '1,104(,1)'                                 00362300
&ZOPD(&ZOPN)          SETC  '++ LOAD ADDR OF PARM LIST PTR INTO R1'     00362400
.*-------------------------------------------------------------------   00362500
&ZOPN1                SETA &ZOPN                                        00362600
.*******************************************************************    00362700
.***  PROCESS IEFSSI OUTPUT PARAMETERS                                  00362800
.*******************************************************************    00362900
                      ACTR  10000                                       00363000
.OUTKEYSP             ANOP  ,                                           00363100
.*                                                                      00363200
&ZOPN                 SETA  &ZOPN+1                                     00363300
&ZOPL(&ZOPN)          SETC  ' '                                         00363400
&ZOPO(&ZOPN)          SETC  'L'                                         00363500
&ZOPV(&ZOPN)          SETC  '1,0(,1)'                                   00363600
&ZOPD(&ZOPN)          SETC  '++ RESTORE ADDR OF PARM LIST'              00363700
.*                                                                      00363800
.NOOUTKEY             ANOP  ,                                           00363900
.*------------------------------------------------------------------    00364000
.***AO.L02 XOUTTOKEN XL4                                                00364100
         AIF   ('&ZXOUTTOKEN' EQ 'OUTPUT').ZO34A  OUTPUT                00364200
         AIF   ('&ZXOUTTOKEN' NE 'INOUT').ZO34C  INOUT                  00364300
.ZO34A    AIF   ('&XOUTTOKEN'(1,1) NE '(').ZO34B  ADDR IN GPR           00364400
&ZCGPR   SETC  '&XOUTTOKEN'(2,K'&XOUTTOKEN-2)                           00364500
&ZOPN                 SETA  &ZOPN+1                                     00364600
&ZOPL(&ZOPN)          SETC  ' '                                         00364700
&ZOPO(&ZOPN)          SETC  'MVC'                                       00364800
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),84(1)'                         00364900
&ZOPD(&ZOPN)          SETC  '++ XOUTTOKEN XL4'                          00365000
                      AGO   .ZO34C                                      00365100
.*                                                                      00365200
.ZO34B                ANOP  ,                                           00365300
&ZAWRK   SETA  K'&XOUTTOKEN                                             00365400
         AIF   ('&XOUTTOKEN'(&ZAWRK,1) NE ')').ZO34G                    00365500
&ZN      SETA  2                                                        00365600
.ZO34H    ANOP                                                          00365700
         AIF   (&ZN GE &ZAWRK).ZO34G                                    00365800
         AIF   ('&XOUTTOKEN'(&ZN,1) NE '(').ZO34I                       00365900
&ZC      SETC  '&XOUTTOKEN'(1,&ZN).'4'.','                              00366000
&ZC      SETC  '&ZC'.'&XOUTTOKEN'(&ZN+1,&ZAWRK-&ZN).',84(1)'            00366100
         AGO   .ZO34J                                                   00366200
.ZO34I    ANOP                                                          00366300
&ZN      SETA  &ZN+1                                                    00366400
         AGO   .ZO34H                                                   00366500
.ZO34G    ANOP                                                          00366600
&ZC      SETC  '&XOUTTOKEN.(4),84(1)'                                   00366700
.ZO34J    ANOP                                                          00366800
&ZOPN                 SETA  &ZOPN+1                                     00366900
&ZOPL(&ZOPN)          SETC  ' '                                         00367000
&ZOPO(&ZOPN)          SETC  'MVC'                                       00367100
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00367200
&ZOPD(&ZOPN)          SETC  '++ XOUTTOKEN XL4'                          00367300
.ZO34C                ANOP  ,                                           00367400
.*------------------------------------------------------------------    00367500
.***AO.L02 XWORKAREA A                                                  00367600
         AIF   ('&ZXWORKAREA' EQ 'OUTPUT').ZO35A  OUTPUT                00367700
         AIF   ('&ZXWORKAREA' NE 'INOUT').ZO35C  INOUT                  00367800
.ZO35A    AIF   ('&XWORKAREA'(1,1) NE '(').ZO35B  ADDR IN GPR           00367900
&ZCGPR   SETC  '&XWORKAREA'(2,K'&XWORKAREA-2)                           00368000
&ZOPN                 SETA  &ZOPN+1                                     00368100
&ZOPL(&ZOPN)          SETC  ' '                                         00368200
&ZOPO(&ZOPN)          SETC  'MVC'                                       00368300
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),88(1)'                         00368400
&ZOPD(&ZOPN)          SETC  '++ XWORKAREA A'                            00368500
                      AGO   .ZO35C                                      00368600
.*                                                                      00368700
.ZO35B                ANOP  ,                                           00368800
&ZAWRK   SETA  K'&XWORKAREA                                             00368900
         AIF   ('&XWORKAREA'(&ZAWRK,1) NE ')').ZO35G                    00369000
&ZN      SETA  2                                                        00369100
.ZO35H    ANOP                                                          00369200
         AIF   (&ZN GE &ZAWRK).ZO35G                                    00369300
         AIF   ('&XWORKAREA'(&ZN,1) NE '(').ZO35I                       00369400
&ZC      SETC  '&XWORKAREA'(1,&ZN).'4'.','                              00369500
&ZC      SETC  '&ZC'.'&XWORKAREA'(&ZN+1,&ZAWRK-&ZN).',88(1)'            00369600
         AGO   .ZO35J                                                   00369700
.ZO35I    ANOP                                                          00369800
&ZN      SETA  &ZN+1                                                    00369900
         AGO   .ZO35H                                                   00370000
.ZO35G    ANOP                                                          00370100
&ZC      SETC  '&XWORKAREA.(4),88(1)'                                   00370200
.ZO35J    ANOP                                                          00370300
&ZOPN                 SETA  &ZOPN+1                                     00370400
&ZOPL(&ZOPN)          SETC  ' '                                         00370500
&ZOPO(&ZOPN)          SETC  'MVC'                                       00370600
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00370700
&ZOPD(&ZOPN)          SETC  '++ XWORKAREA A'                            00370800
.ZO35C                ANOP  ,                                           00370900
.*------------------------------------------------------------------    00371000
.***AO.L02 XSUBDATA1 CL4                                                00371100
         AIF   ('&ZXSUBDATA1' EQ 'OUTPUT').ZO36A  OUTPUT                00371200
         AIF   ('&ZXSUBDATA1' NE 'INOUT').ZO36C  INOUT                  00371300
.ZO36A    AIF   ('&XSUBDATA1'(1,1) NE '(').ZO36B  ADDR IN GPR           00371400
&ZCGPR   SETC  '&XSUBDATA1'(2,K'&XSUBDATA1-2)                           00371500
&ZOPN                 SETA  &ZOPN+1                                     00371600
&ZOPL(&ZOPN)          SETC  ' '                                         00371700
&ZOPO(&ZOPN)          SETC  'MVC'                                       00371800
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),92(1)'                         00371900
&ZOPD(&ZOPN)          SETC  '++ XSUBDATA1 CL4'                          00372000
                      AGO   .ZO36C                                      00372100
.*                                                                      00372200
.ZO36B                ANOP  ,                                           00372300
&ZAWRK   SETA  K'&XSUBDATA1                                             00372400
         AIF   ('&XSUBDATA1'(&ZAWRK,1) NE ')').ZO36G                    00372500
&ZN      SETA  2                                                        00372600
.ZO36H    ANOP                                                          00372700
         AIF   (&ZN GE &ZAWRK).ZO36G                                    00372800
         AIF   ('&XSUBDATA1'(&ZN,1) NE '(').ZO36I                       00372900
&ZC      SETC  '&XSUBDATA1'(1,&ZN).'4'.','                              00373000
&ZC      SETC  '&ZC'.'&XSUBDATA1'(&ZN+1,&ZAWRK-&ZN).',92(1)'            00373100
         AGO   .ZO36J                                                   00373200
.ZO36I    ANOP                                                          00373300
&ZN      SETA  &ZN+1                                                    00373400
         AGO   .ZO36H                                                   00373500
.ZO36G    ANOP                                                          00373600
&ZC      SETC  '&XSUBDATA1.(4),92(1)'                                   00373700
.ZO36J    ANOP                                                          00373800
&ZOPN                 SETA  &ZOPN+1                                     00373900
&ZOPL(&ZOPN)          SETC  ' '                                         00374000
&ZOPO(&ZOPN)          SETC  'MVC'                                       00374100
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00374200
&ZOPD(&ZOPN)          SETC  '++ XSUBDATA1 CL4'                          00374300
.ZO36C                ANOP  ,                                           00374400
.*------------------------------------------------------------------    00374500
.***AO.L02 XSUBDATA2 CL4                                                00374600
         AIF   ('&ZXSUBDATA2' EQ 'OUTPUT').ZO37A  OUTPUT                00374700
         AIF   ('&ZXSUBDATA2' NE 'INOUT').ZO37C  INOUT                  00374800
.ZO37A    AIF   ('&XSUBDATA2'(1,1) NE '(').ZO37B  ADDR IN GPR           00374900
&ZCGPR   SETC  '&XSUBDATA2'(2,K'&XSUBDATA2-2)                           00375000
&ZOPN                 SETA  &ZOPN+1                                     00375100
&ZOPL(&ZOPN)          SETC  ' '                                         00375200
&ZOPO(&ZOPN)          SETC  'MVC'                                       00375300
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),96(1)'                         00375400
&ZOPD(&ZOPN)          SETC  '++ XSUBDATA2 CL4'                          00375500
                      AGO   .ZO37C                                      00375600
.*                                                                      00375700
.ZO37B                ANOP  ,                                           00375800
&ZAWRK   SETA  K'&XSUBDATA2                                             00375900
         AIF   ('&XSUBDATA2'(&ZAWRK,1) NE ')').ZO37G                    00376000
&ZN      SETA  2                                                        00376100
.ZO37H    ANOP                                                          00376200
         AIF   (&ZN GE &ZAWRK).ZO37G                                    00376300
         AIF   ('&XSUBDATA2'(&ZN,1) NE '(').ZO37I                       00376400
&ZC      SETC  '&XSUBDATA2'(1,&ZN).'4'.','                              00376500
&ZC      SETC  '&ZC'.'&XSUBDATA2'(&ZN+1,&ZAWRK-&ZN).',96(1)'            00376600
         AGO   .ZO37J                                                   00376700
.ZO37I    ANOP                                                          00376800
&ZN      SETA  &ZN+1                                                    00376900
         AGO   .ZO37H                                                   00377000
.ZO37G    ANOP                                                          00377100
&ZC      SETC  '&XSUBDATA2.(4),96(1)'                                   00377200
.ZO37J    ANOP                                                          00377300
&ZOPN                 SETA  &ZOPN+1                                     00377400
&ZOPL(&ZOPN)          SETC  ' '                                         00377500
&ZOPO(&ZOPN)          SETC  'MVC'                                       00377600
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00377700
&ZOPD(&ZOPN)          SETC  '++ XSUBDATA2 CL4'                          00377800
.ZO37C                ANOP  ,                                           00377900
.*******************************************************************    00378000
.***AO.X02  RETURN CODE PROCESSING                                      00378100
.*******************************************************************    00378200
                      AIF   (N'&RETCODE LE 0).ZMRETX                    00378300
                      AIF   ('&XRETCODE'(1,1) EQ '(').ZMRET2            00378400
                      AIF   ('&XRETCODE' EQ 'GPR15').ZMRETX             00378500
                      AIF   ('&XRETCODE' EQ 'REG15').ZMRETX             00378600
                      AIF   ('&XRETCODE' EQ 'R15').ZMRETX               00378700
                      AIF   ('&XRETCODE' EQ '15').ZMRETX                00378800
&ZOPN                 SETA  &ZOPN+1                                     00378900
&ZOPL(&ZOPN)          SETC  ' '                                         00379000
&ZOPO(&ZOPN)          SETC  'ST'                                        00379100
&ZOPV(&ZOPN)          SETC  '15,&XRETCODE'                              00379200
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00379300
                      AGO   .ZMRETX                                     00379400
.*                                                                      00379500
.ZMRET2               ANOP  ,                                           00379600
&ZCGPR                SETC  '&XRETCODE'(2,K'&XRETCODE-2)                00379700
                      AIF   ('&ZCGPR' EQ 'GPR15').ZMRETX                00379800
                      AIF   ('&ZCGPR' EQ 'REG15').ZMRETX                00379900
                      AIF   ('&ZCGPR' EQ 'R15').ZMRETX                  00380000
                      AIF   ('&ZCGPR' EQ '15').ZMRETX                   00380100
&ZOPN                 SETA  &ZOPN+1                                     00380200
&ZOPL(&ZOPN)          SETC  ' '                                         00380300
&ZOPO(&ZOPN)          SETC  '&ZMAC_LR'                                  00380400
&ZOPV(&ZOPN)          SETC  '&ZCGPR,15'                                 00380500
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00380600
.ZMRETX               ANOP  ,                                           00380700
.*******************************************************************    00380800
.***AO.X03  REASON CODE PROCESSING                                      00380900
.*******************************************************************    00381000
                      AIF   (N'&RSNCODE LE 0).ZMRSNX                    00381100
                      AIF   ('&XRSNCODE'(1,1) EQ '(').ZMRSN2            00381200
                      AIF   ('&XRSNCODE' EQ 'GPR0').ZMRSNX              00381300
                      AIF   ('&XRSNCODE' EQ 'GPR00').ZMRSNX             00381400
                      AIF   ('&XRSNCODE' EQ 'REG0').ZMRSNX              00381500
                      AIF   ('&XRSNCODE' EQ 'REG00').ZMRSNX             00381600
                      AIF   ('&XRSNCODE' EQ 'R0').ZMRSNX                00381700
                      AIF   ('&XRSNCODE' EQ '0').ZMRSNX                 00381800
                      AIF   ('&XRSNCODE' EQ '00').ZMRSNX                00381900
&ZOPN                 SETA  &ZOPN+1                                     00382000
&ZOPL(&ZOPN)          SETC  ' '                                         00382100
&ZOPO(&ZOPN)          SETC  'ST'                                        00382200
&ZOPV(&ZOPN)          SETC  '0,&XRSNCODE'                               00382300
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00382400
                      AGO   .ZMRSNX                                     00382500
.*                                                                      00382600
.ZMRSN2               ANOP  ,                                           00382700
&ZCGPR                SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                00382800
                      AIF   ('&ZCGPR' EQ 'GPR0').ZMRSNX                 00382900
                      AIF   ('&ZCGPR' EQ 'GPR00').ZMRSNX                00383000
                      AIF   ('&ZCGPR' EQ 'REG0').ZMRSNX                 00383100
                      AIF   ('&ZCGPR' EQ 'REG00').ZMRSNX                00383200
                      AIF   ('&ZCGPR' EQ 'R0').ZMRSNX                   00383300
                      AIF   ('&ZCGPR' EQ '0').ZMRSNX                    00383400
                      AIF   ('&ZCGPR' EQ '00').ZMRSNX                   00383500
&ZOPN                 SETA  &ZOPN+1                                     00383600
&ZOPL(&ZOPN)          SETC  ' '                                         00383700
&ZOPO(&ZOPN)          SETC  '&ZMAC_LR'                                  00383800
&ZOPV(&ZOPN)          SETC  '&ZCGPR,0'                                  00383900
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00384000
.ZMRSNX               ANOP  ,                                           00384100
.*******************************************************************    00384200
.***AO.X04  LABEL FOR MF=L PROCESSING                                   00384300
.*******************************************************************    00384400
.ZMFLX                ANOP  ,              MF=L PROCESSING              00384500
.*******************************************************************    00384600
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               00384700
.*******************************************************************    00384800
                      ACTR  10000                                       00384900
.*                                                                      00385000
                      LCLA  &ZLC           COLUMN POSITION              00385100
                      LCLA  &ZOPX          LIST TABLE INDEX             00385200
                      LCLC  &ZLL           LABEL                        00385300
                      LCLC  &ZLOP          OPERATION                    00385400
                      LCLC  &ZLV           VALUE                        00385500
                      LCLC  &ZLD           DESCRIPTION                  00385600
.*                                                                      00385700
&ZOPX                 SETA  1                                           00385800
.ZL2                  AIF   (&ZOPX GT &ZOPN1).ZLX  B IF DONE            00385900
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00386000
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00386100
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00386200
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00386300
                      AIF   (K'&ZLD LE 0).ZL5                           00386400
&ZLC                  SETA  35             COMMENT COLUMN               00386500
                      AIF   ('&ZLD'(1,1) NE '*').ZL3                    00386600
&ZLC                  SETA  33             COMMMENT COLUMN              00386700
.ZL3                  AIF   (K'&ZLV GE &ZLC-16-1).ZL4                   00386800
&ZLV                  SETC  '&ZLV'.' '                                  00386900
                      AGO   .ZL3                                        00387000
.*                                                                      00387100
.ZL4                  ANOP  ,                                           00387200
&ZLV                  SETC  '&ZLV'.' '                                  00387300
.ZL5                  ANOP  ,                                           00387400
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00387500
.*                                                                      00387600
&ZLL     &ZLOP &ZLV                                                     00387700
.*                                                                      00387800
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00387900
                      AGO   .ZL2           CONTINUE LOOPING             00388000
.*                                                                      00388100
.ZLX                  ANOP  ,                                           00388200
                      AIF   ('&XMF' EQ 'L').ZLINKX  MF=L                00388300
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00388400
.********************************************************************** 00388500
.* If this is an OPTIONS request, ensure that at least one of the  @P1A 00388600
.* associated keys was specified.   (AMG can't do this.)           @P1A 00388700
.********************************************************************** 00388800
         AIF   ('&XREQUEST' NE 'OPTIONS').INVOKE                        00388900
         AIF   (N'&COMMAND GT 0).INVOKE                                 00389000
         AIF   (N'&REQDSUB GT 0).INVOKE                                 00389100
         AIF   (N'&EVENTRTN GT 0).INVOKE                                00389200
&ZMS     SETC  'ONE OR MORE OF THE'                                     00389300
&ZMS     SETC  '&ZMS FOLLOWING KEY(S) IS REQUIRED: '                    00389400
&ZMS     SETC  '&ZMS "REQDSUB",'                                        00389500
         MNOTE 8,' &ZMS " COMMAND",'                                    00389600
         MNOTE 8,' &ZMS " EVENTRTN".'                                   00389700
&ZMACRET SETA  8                       SET MACRO ERROR RETURN CODE      00389800
.INVOKE  ANOP                                                           00389900
.********************************************************************** 00390000
.* Invoke IEFSSI service                                                00390100
.********************************************************************** 00390200
         L     15,16(0,0)              CVT address                 @P3C 00390300
         USING CVT,15                                                   00390400
         L     15,CVTJESCT             JESCT address                    00390500
         USING JESCT,15                                                 00390600
         L     15,JESCTEXT             JESCT pageable extension         00390700
         USING JESPEXT,15                                               00390800
         L     15,JESSSIPC             IEFSSI PC number                 00390900
         DROP  15                                                       00391000
         LTR   15,15                   Test whether service available   00391100
         JZ    #NSSI&SYSNDX                                        @P4C 00391200
         PC    0(15)                   Process service request          00391300
         J     #SSI&SYSNDX                                         @P4C 00391400
#NSSI&SYSNDX  DS  0H                                                    00391500
         LA    15,IEFSSI_UNAVAILABLE   Indicate service not available   00391600
#SSI&SYSNDX   DS  0H                                                    00391700
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00391800
.ZLINKX               ANOP  ,                                           00391900
.*******************************************************************    00392000
.***AP.X01  FORMAT GENERATED CODE                                       00392100
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            00392200
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00392300
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00392400
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00392500
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00392600
                      AIF   (K'&ZLD LE 0).ZL51                          00392700
&ZLC                  SETA  35             COMMENT COLUMN               00392800
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   00392900
&ZLC                  SETA  33             COMMENT COLUMN               00393000
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  00393100
&ZLV                  SETC  '&ZLV'.' '                                  00393200
                      AGO   .ZL31                                       00393300
.*                                                                      00393400
.ZL41                 ANOP  ,                                           00393500
&ZLV                  SETC  '&ZLV'.' '                                  00393600
.ZL51                 ANOP  ,                                           00393700
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00393800
.*                                                                      00393900
&ZLL     &ZLOP &ZLV                                                     00394000
.*                                                                      00394100
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00394200
                      AGO   .ZL21          CONTINUE LOOPING             00394300
.*                                                                      00394400
.ZLX1                 ANOP  ,                                           00394500
.*******************************************************************    00394600
.***AP.X02  END OF IEFSSI MACRO                                         00394700
&ZIEFSSI              SETC  'YES'          SET IEFSSI USED              00394800
         POP   PRINT                                                    00394900
*                                            IEFSSI-1                   00395000
         SPACE 1                                                        00395100
.ZLX2                 ANOP  ,                                           00395200
         MEND                                                           00395300
**********************************************************************/ 00395400
*/**** START OF SPECIFICATIONS **************************************** 00395500
*                                                                     * 00395600
*                                                                     * 00395700
*01* MACRO NAME:  IEFSSI                                -10/24/16-<1> * 00395800
*                                                                     * 00395900
*                                                                     * 00396000
*01* DESCRIPTIVE NAME:  Dynamic Subsystem Interface Macro             * 00396100
*                                                                     * 00396200
*01* PROPRIETARY STATEMENT:                                           * 00396300
*                                                                     * 00396400
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00396500
*     5650-ZOS COPYRIGHT IBM CORP. 1994, 2017                         * 00396600
*                                                                     * 00396700
* STATUS= HBB77B0                                                     * 00396800
*                                                                     * 00396900
*                                                                     * 00397000
*                                                                     * 00397100
*01* FUNCTION:                                                        * 00397200
*       See the IEFSSI macro prologue for details.                    * 00397300
*                                                                     * 00397400
*01* INPUT:                                                           * 00397500
*                                                                     * 00397600
*            ?IEFSSI     SUBNAME(xsubname)                            * 00397700
*                      Ð REQUEST(ADD)                                 * 00397800
*                      !    ÝCONSNAME(»xconsname!0º)¨                 * 00397900
*                      !    ÝINITRTN(»xinitrtn!NO_INITRTNº)           * 00398000
*                      !        ÝINITPARM(»xinitparm!NO_INITPARMº)    * 00398100
*                      !             INITPLEN(xinitplen)¨¨            * 00398200
*                      Ô REQUEST(ACTIVATE)                            * 00398300
*                      !    ÝINTOKEN(»xintoken!NO_INPUT_TOKENº)¨      * 00398400
*                      Ô REQUEST(OPTIONS)                             * 00398500
*                      !    ÝCOMMAND(»NO!YESº)¨                       * 00398600
*                      !    ÝREQDSUB(»MSTR!PRIº)¨                     * 00398700
*                      !    ÝEVENTRTN(»xeventrtn!NO_EVENTRTNº)¨       * 00398800
*                      Ô REQUEST(DEACTIVATE)                          * 00398900
*                      !    ÝOUTTOKEN(xouttoken)¨                     * 00399000
*                      Ô REQUEST(SWAP)                                * 00399100
*                      !    ÝINTOKEN(»xintoken!NO_INPUT_TOKENº)¨      * 00399200
*                      !    ÝOUTTOKEN(xouttoken)¨                     * 00399300
*                      Ô REQUEST(PUT)                                 * 00399400
*                      !   Ð SUBDATA1(xsubdata1)                      * 00399500
*                      !   ¿ SUBDATA2(xsubdata2)                      * 00399600
*                      Ô REQUEST(GET)                                 * 00399700
*                      !   Ð SUBDATA1(Ýxsubdata1¨)                    * 00399800
*                      !   ¿ SUBDATA2(Ýxsubdata2¨)                    * 00399900
*                      ¿ REQUEST(QUERY)                               * 00400000
*                            WORKAREA(xworkarea)                      * 00400100
*                           ÝWORKASP(»xworkasp!0º)¨                   * 00400200
*                       ÝRETCODE(xretcode)¨                           * 00400300
*                       ÝRSNCODE(xrsncode)¨                           * 00400400
*                       ÝCOM(»xcom!NULLº)¨                            * 00400500
*                       ÝPLISTVER(»xplistver!IMPLIED_VERSIONº)¨       * 00400600
*                      ÐÝMF(S)¨                                       * 00400700
*                      ÔÝMF(L,xmfctrl»,xmfattr!BDY(DWORD)º)¨          * 00400800
*                      ¿ÝMF(E,xmfctrl»,COMPLETEº)¨                    * 00400900
*                                                                     * 00401000
****** END OF SPECIFICATIONS *****************************************/ 00401100
*/*PB.ECHO02 ECHO MACRO COMMENT--------------------------------------*/ 00401200
*  IF COM^=''                                                           00401300
*    THEN                                                               00401400
*      DO;                                                              00401500
*        IF INDEX(COM(1),'''')=1                                        00401600
*          THEN                                                         00401700
*            ANS('/* '!!COM(1,2:LENGTH                                  00401800
*                     (COM(1))-1)!!'*/')                                00401900
*            NORESCAN COL(MACLMAR+5);  /* COMMENT ECHO */               00402000
*          ELSE                                                         00402100
*            ANS('/* '!!COM(1)!!'*/')                                   00402200
*            NORESCAN COL(MACLMAR+5);  /* COMMENT ECHO */               00402300
*        ANS('@SPACE;')                                                 00402400
*            NORESCAN COL(MACLMAR);  /* COMMENT ECHO */                 00402500
*      END;                                                             00402600
*/*PB.ECHO03 START OF MACRO INVOCATION ECHO--------------------------*/ 00402700
*  ANS('/* ? IEFSSI '!!MACLIST!!' ')                                    00402800
*      NORESCAN COL(MACLMAR+5);    /* START ECHO */                     00402900
*                                                                       00403000
*  DCL ZELO  FIXED;                                                     00403100
*  DCL ZECOL FIXED;                                                     00403200
*                                                                       00403300
*  ZELO=1;     /* STARTING COLUMN */                                    00403400
*  DO WHILE ZELO<=LENGTH(MACKEYS);  /* PARENTHSIS SCAN */               00403500
*    IF INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),'COM(') =1 !                00403600
*       INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),' COM(')=1 !                00403700
*       INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),'COM(') =1 !                00403800
*       INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),' COM(')=1                  00403900
*      THEN                                                             00404000
*        DO;   /* CLOSING PARENTHESIS */                                00404100
*          ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');              00404200
*          IF ZECOL>0                                                   00404300
*            THEN                                                       00404400
*              ZELO=ZELO+ZECOL;    /* SKIP TEXT */                      00404500
*            ELSE                                                       00404600
*              ZELO=LENGTH(MACKEYS)+1;  /* NO CLOSING ")" */            00404700
*        END;                                                           00404800
*      ELSE                                                             00404900
*        DO;                                                            00405000
*          ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');              00405100
*          IF ZECOL>0                                                   00405200
*            THEN                                                       00405300
*              DO;                 /* PARENTHESIS FOUND */              00405400
*                ANS(MACKEYS(ZELO:ZELO+ZECOL-1)!!' ')                   00405500
*                   NORESCAN COL(MACLMAR+5);                            00405600
*                ZELO=ZELO+ZECOL;  /* NEXT PORTION */                   00405700
*              END;                                                     00405800
*            ELSE                                                       00405900
*              DO;                 /* REMAINING KEYS */                 00406000
*                ANS(MACKEYS(ZELO:LENGTH(MACKEYS)))                     00406100
*                   NORESCAN COL(MACLMAR+5);                            00406200
*                ZELO=LENGTH(MACKEYS)+1;                                00406300
*              END;                                                     00406400
*        END;                                                           00406500
*  END;                                                                 00406600
*/*PB.ECHO05 END OF MACRO INVOCATION ECHO----------------------------*/ 00406700
*  ANS(' -10/24/16-1- */')                                              00406800
*      NORESCAN COL(MACLMAR+5);    /* END ECHO */                       00406900
*/********************************************************************/ 00407000
*/*PV.DCL01 MACRO DECLARES AND CODE GENERATION CONTROLS              */ 00407100
*/********************************************************************/ 00407200
*  DCL ZPRINT  EXTERNAL; DEACT ZPRINT; /* YES=PRINT, NO=NO PRINT     */ 00407300
*  DCL ZTEST   EXTERNAL; DEACT ZTEST;  /* YES=TEST, NO=NO TEST       */ 00407400
*  DCL ZSYSTEM EXTERNAL; DEACT ZSYSTEM;/* PCCODE10, MVS, SAK, VM     */ 00407500
*                                                                       00407600
*  DCL   ZIEFSSI CHAR EXTERNAL; /* YES=USED AT LEAST ONCE          */   00407700
*  DEACT ZIEFSSI;                                                       00407800
*                                                                       00407900
*  DCL ZMACRET FIXED; DEACT ZMACRET;                                    00408000
*  ZMACRET=0;                   /* MACRO COMPILE RETURN CODE         */ 00408100
*                                                                       00408200
*  DCL ZMS CHAR;   DEACT ZMS;   /* ERROR MESSAGE                     */ 00408300
*  DCL ZCVAL CHAR; DEACT ZCVAL; /* ERROR MESSAGE WORK AREA           */ 00408400
*                                                                       00408500
*  DCL ZI FIXED;  DEACT ZI;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00408600
*  DCL ZJ FIXED;  DEACT ZJ;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00408700
*  DCL ZK FIXED;  DEACT ZK;     /* INDEX FOR RANGE COLON (:)         */ 00408800
*  DCL ZL FIXED;  DEACT ZL;     /* INDEX FOR RANGE VALUE CHECKING    */ 00408900
*  DCL ZLO FIXED; DEACT ZLO;    /* LOW RANGE VALUE                   */ 00409000
*  DCL ZHI FIXED; DEACT ZHI;    /* HIGH RANGE VALUE                  */ 00409100
*  DCL ZW CHAR;   DEACT ZW;     /* WORK AREA FOR RANGE VALUE SUBLIST */ 00409200
*  DCL ZN FIXED;  DEACT ZN;     /* NUMERIC WORK VARIABLE             */ 00409300
*  DCL ZC CHAR;   DEACT ZC;     /* CHARACTER WORK VARIABLE           */ 00409400
*  DCL ZMAXINVOCLEN FIXED; DEACT ZMAXINVOCLEN;  /* INVOCATION LENGTH */ 00409500
*  DCL ZPLLEN FIXED; DEACT ZPLLEN;        /* PARAMETER LIST LENGTH   */ 00409600
*                                                                       00409700
*  DCL ZPRMMAX FIXED;           /* MAXIMUM PARM LIST SIZE            */ 00409800
*  DCL ZPRMNUM FIXED;           /* PARAMETER ARRAY INDEX             */ 00409900
*  DCL ZPRM(100);               /* PARAMETER ENTRY                   */ 00410000
*  DCL EHAMAXLEN FIXED EXTERNAL;   /* MAX ILIST SIZE FOR PARM LISTS  */ 00410100
*  DCL EHAREGS CHARACTER EXTERNAL; /* REG DCLS                       */ 00410200
*  DCL EHAREGS64 CHARACTER EXTERNAL; /* REG DCLS                     */ 00410300
*  DCL EHALIST CHARACTER EXTERNAL; /* STANDARD PARM LIST GENERATION  */ 00410400
*/*******************************************************************/  00410500
*/*PV.XVAR01 DECLARE ALL MACRO PARAMETER VARIABLES                  */  00410600
*/*******************************************************************/  00410700
*  DCL XSUBNAME;  DEACT XSUBNAME;  /***PV.XVAR02 INPUT NAME */          00410800
*  DCL ZXSUBNAME; DEACT ZXSUBNAME;  /***INPUT/OUTPUT CONTROL */         00410900
*  DCL XREQUEST;  DEACT XREQUEST;  /***PV.XVAR02 INPUT VALUE */         00411000
*  DCL ZXREQUEST; DEACT ZXREQUEST;  /***INPUT/OUTPUT CONTROL */         00411100
*  DCL XCONSNAME;  DEACT XCONSNAME;  /***PV.XVAR02 INPUT NAME */        00411200
*  DCL ZXCONSNAME; DEACT ZXCONSNAME;  /***INPUT/OUTPUT CONTROL */       00411300
*  DCL XINITRTN;  DEACT XINITRTN;  /***PV.XVAR02 INPUT NAME */          00411400
*  DCL ZXINITRTN; DEACT ZXINITRTN;  /***INPUT/OUTPUT CONTROL */         00411500
*  DCL XINITPARM;  DEACT XINITPARM;  /***PV.XVAR02 INPUT NAME */        00411600
*  DCL ZXINITPARM; DEACT ZXINITPARM;  /***INPUT/OUTPUT CONTROL */       00411700
*  DCL XINITPLEN;  DEACT XINITPLEN;  /***PV.XVAR02 INPUT NAME */        00411800
*  DCL ZXINITPLEN; DEACT ZXINITPLEN;  /***INPUT/OUTPUT CONTROL */       00411900
*  DCL XINTOKEN;  DEACT XINTOKEN;  /***PV.XVAR02 INPUT NAME */          00412000
*  DCL ZXINTOKEN; DEACT ZXINTOKEN;  /***INPUT/OUTPUT CONTROL */         00412100
*  DCL XCOMMAND;  DEACT XCOMMAND;  /***PV.XVAR02 INPUT VALUE */         00412200
*  DCL ZXCOMMAND; DEACT ZXCOMMAND;  /***INPUT/OUTPUT CONTROL */         00412300
*  DCL XREQDSUB;  DEACT XREQDSUB;  /***PV.XVAR02 INPUT VALUE */         00412400
*  DCL ZXREQDSUB; DEACT ZXREQDSUB;  /***INPUT/OUTPUT CONTROL */         00412500
*  DCL XEVENTRTN;  DEACT XEVENTRTN;  /***PV.XVAR02 INPUT NAME */        00412600
*  DCL ZXEVENTRTN; DEACT ZXEVENTRTN;  /***INPUT/OUTPUT CONTROL */       00412700
*  DCL XOUTTOKEN;  DEACT XOUTTOKEN;  /***PV.XVAR02 OUTPUT NAME */       00412800
*  DCL ZXOUTTOKEN; DEACT ZXOUTTOKEN;  /***INPUT/OUTPUT CONTROL */       00412900
*  DCL XSUBDATA1;  DEACT XSUBDATA1;  /***PV.XVAR02 INPUT NAME */        00413000
*  DCL ZXSUBDATA1; DEACT ZXSUBDATA1;  /***INPUT/OUTPUT CONTROL */       00413100
*  DCL XSUBDATA2;  DEACT XSUBDATA2;  /***PV.XVAR02 INPUT NAME */        00413200
*  DCL ZXSUBDATA2; DEACT ZXSUBDATA2;  /***INPUT/OUTPUT CONTROL */       00413300
*  DCL XWORKAREA;  DEACT XWORKAREA;  /***PV.XVAR02 OUTPUT NAME */       00413400
*  DCL ZXWORKAREA; DEACT ZXWORKAREA;  /***INPUT/OUTPUT CONTROL */       00413500
*  DCL XWORKASP;  DEACT XWORKASP;  /***PV.XVAR02 INPUT NAME */          00413600
*  DCL ZXWORKASP; DEACT ZXWORKASP;  /***INPUT/OUTPUT CONTROL */         00413700
*  DCL XRETCODE;  DEACT XRETCODE;  /***PV.XVAR02 OUTPUT NAME */         00413800
*  DCL ZXRETCODE; DEACT ZXRETCODE;  /***INPUT/OUTPUT CONTROL */         00413900
*  DCL XRSNCODE;  DEACT XRSNCODE;  /***PV.XVAR02 OUTPUT NAME */         00414000
*  DCL ZXRSNCODE; DEACT ZXRSNCODE;  /***INPUT/OUTPUT CONTROL */         00414100
*  DCL XCOM;  DEACT XCOM;          /***PV.XVAR02 INPUT VALUE */         00414200
*  DCL ZXCOM; DEACT ZXCOM;         /***INPUT/OUTPUT CONTROL */          00414300
*  DCL XPLISTVER FIXED;  DEACT XPLISTVER;  /***PV.XVAR02 INPUT VALUE */ 00414400
*  DCL ZXPLISTVER; DEACT ZXPLISTVER;  /***INPUT/OUTPUT CONTROL */       00414500
*  DCL XMF;  DEACT XMF;            /***PV.XVAR02 INPUT VALUE */         00414600
*  DCL ZXMF; DEACT ZXMF;           /***INPUT/OUTPUT CONTROL */          00414700
*  DCL XMFCTRL;  DEACT XMFCTRL;    /***PV.XVAR02 INPUT NAME */          00414800
*  DCL ZXMFCTRL; DEACT ZXMFCTRL;   /***INPUT/OUTPUT CONTROL */          00414900
*  DCL XMFATTR;  DEACT XMFATTR;    /***PV.XVAR02 INPUT VALUE */         00415000
*  DCL ZXMFATTR; DEACT ZXMFATTR;   /***INPUT/OUTPUT CONTROL */          00415100
*  DCL XMFSCK;  DEACT XMFSCK;      /***PV.XVAR02 INPUT VALUE */         00415200
*  DCL ZXMFSCK; DEACT ZXMFSCK;     /***INPUT/OUTPUT CONTROL */          00415300
*/********************************************************************/ 00415400
*/***PC.PLV01  PROCESS PLISTVER                                      */ 00415500
*/********************************************************************/ 00415600
*  IF PLISTVER(1) = 'MAX' THEN                                          00415700
*    XPLISTVER=1;                                                       00415800
*  ELSE                                                                 00415900
*    XPLISTVER=1;                                                       00416000
*  IF PLISTVER^=''                                                      00416100
*     & PLISTVER(1)^='IMPLIED_VERSION'                                  00416200
*     & PLISTVER(1)^='MAX'                                              00416300
*    THEN                                                               00416400
*      DO;                                                              00416500
*                                                                       00416600
*        ZCVAL='';                           /* ERROR FLAG */           00416700
*        IF PLISTVER='PLISTVER' ! PLISTVER='()'  /*CHECK ENTRY*/        00416800
*          THEN                                                         00416900
*            DO;                                                        00417000
*              ZMS=' 8, THE "PLISTVER" KEY'!! /**KOPTP* MSG*/           00417100
*                  ' MUST CONTAIN ONE'!!                                00417200
*                  ' (OR MORE) ARGUMENT(S).';                           00417300
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00417400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00417500
*              ZMACRET=8;                    /* MACRO ERROR */          00417600
*              ZCVAL='NO_ARGUMENT';                                     00417700
*            END;                                                       00417800
*        IF NUMBER(PLISTVER)>1               /* CHECK POSITIONALS */    00417900
*          THEN                                                         00418000
*            DO;                                                        00418100
*              ZMS=' 8, "PLISTVER'!!         /**KPOSP* MSG*/            00418200
*                  PLISTVER!!                                           00418300
*                  '" "PLISTVER"'!!                                     00418400
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00418500
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00418600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00418700
*              ZMACRET=8;                    /* MACRO ERROR */          00418800
*            END;                                                       00418900
*                                                                       00419000
*        ZC=PLISTVER(1);                                                00419100
*        DO ZL=1 TO LENGTH(ZC);              /* MUST BE NUMBER */       00419200
*          IF ZC(ZL:ZL)<'0' !                /* MUST BE NUMERIC */      00419300
*             ZC(ZL:ZL)>'9'                  /* MUST BE NUMERIC */      00419400
*            THEN                                                       00419500
*              ZCVAL='NUMERIC';              /* NUMERIC ERROR */        00419600
*        END;                                                           00419700
*        IF ZCVAL=''                                                    00419800
*          THEN                                                         00419900
*            DO;                             /* CHECK RANGE LIMITS */   00420000
*            IF FIXED(PLISTVER(1))>=XPLISTVER                           00420100
*              THEN                                                     00420200
*                XPLISTVER=FIXED(PLISTVER(1));                          00420300
*              ELSE                                                     00420400
*                DO;                                                    00420500
*              ZMS=' 8, PLISTVER='!!         /**KVALP* MSG*/            00420600
*                    PLISTVER(1)!!                                      00420700
*                  ', BUT PLISTVER OF '!!                               00420800
*                    CHAR(XPLISTVER)!!                                  00420900
*                  ' IS REQUIRED.';                                     00421000
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00421100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00421200
*              ZMACRET=8;                    /* MACRO ERROR */          00421300
*                END;                                                   00421400
*              IF XPLISTVER<1 !              /* LOW LIMIT */            00421500
*                 XPLISTVER>1                /* HIGH LIMIT */           00421600
*                THEN                                                   00421700
*                  ZCVAL='RANGE';            /* RANGE ERROR */          00421800
*            END;                                                       00421900
*        IF ZCVAL^=''                                                   00422000
*          THEN                                                         00422100
*            DO;                             /* RANGE ERROR */          00422200
*              ZXPLISTVER='';                /* RESET IN/OUTPUT */      00422300
*              ZMS=' 8, "PLISTVER '!!        /**KRNGP* MSG*/            00422400
*                  PLISTVER!!                                           00422500
*                  '" THE RANGE IS "1-1"'!!                             00422600
*                  ' FOR ARGUMENT 1.';                                  00422700
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00422800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00422900
*              ZMACRET=8;                    /* MACRO ERROR */          00423000
*            END;                                                       00423100
*      END;                                                             00423200
*                                                                       00423300
*/********************************************************************/ 00423400
*/***PG.MF01  PROCESS MF MACRO FORMS                                 */ 00423500
*/********************************************************************/ 00423600
*/*PG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00423700
*  XMF='';                                                              00423800
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00423900
*  IF MF(1)='S'                              /* CHECK FOR KEYWORD */    00424000
*    THEN                                                               00424100
*      DO;                                                              00424200
*        XMF='S';                            /* SET XVARIABLE */        00424300
*        IF NUMBER(MF)>1                     /* CHECK POSITIONALS */    00424400
*          THEN                                                         00424500
*            DO;                                                        00424600
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00424700
*                  MF!!                                                 00424800
*                  '" "MF"'!!                                           00424900
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00425000
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00425100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00425200
*              ZMACRET=8;                    /* MACRO ERROR */          00425300
*            END;                                                       00425400
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00425500
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00425600
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00425700
*  IF MF(1)='L'                              /* CHECK FOR KEYWORD */    00425800
*    THEN                                                               00425900
*      DO;                                                              00426000
*        XMF='L';                            /* SET XVARIABLE */        00426100
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00426200
*          THEN                                                         00426300
*            DO;                                                        00426400
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00426500
*                  MF!!                                                 00426600
*                  '" "MF"'!!                                           00426700
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00426800
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00426900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00427000
*              ZMACRET=8;                    /* MACRO ERROR */          00427100
*            END;                                                       00427200
*/*PG.KKCTL10 -MF(L) SPECIAL CHECK-----------------------------------*/ 00427300
*        ZMAXINVOCLEN = LENGTH(MF) + 2;                                 00427400
*        IF PLISTVER ^= ''                                              00427500
*          THEN                                                         00427600
*            ZMAXINVOCLEN=ZMAXINVOCLEN + LENGTH(PLISTVER) + 8;          00427700
*        IF LENGTH(MACKEYS) > ZMAXINVOCLEN !                            00427800
*           MACLIST ^= ''                    /* CHECK FOR OTHER PARMS*/ 00427900
*          THEN                                                         00428000
*            DO;                                                        00428100
*              ZMS=' 8, THE "L" FORM OF "MF"'!! /**MFLP* MSG*/          00428200
*                  ' CAN ONLY HAVE'!!                                   00428300
*                  ' THE "PLISTVER" KEY'!!                              00428400
*                  ' SPECIFIED ON THE INVOCATION.';                     00428500
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00428600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00428700
*              ZMACRET=8;                    /* MACRO ERROR */          00428800
*            END;                                                       00428900
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00429000
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00429100
*  IF MF(2)=''                               /* CHECK FOR NULL */       00429200
*   THEN                                                                00429300
*    DO;                                     /* KEY IS REQUIRED */      00429400
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00429500
*        ZMS=' 8, WHEN "L" IS SPECIFIED'!!                              00429600
*            ' FOR THE "MF" KEY, POSITIONAL'!!                          00429700
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00429800
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00429900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00430000
*        ZMACRET=8;                          /* MACRO ERROR */          00430100
*    END;                                                               00430200
*  ELSE                                                                 00430300
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00430400
*/*PG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE--------------------*/ 00430500
*  ZXMFATTR='INPUT';                         /* SET IN/OUTPUT */        00430600
*  XMFATTR='BDY(DWORD)';                     /* SET DEFAULT */          00430700
*  IF MF(3)^=''                              /* CHECK FOR NULL */       00430800
*    THEN                                                               00430900
*      XMFATTR=MF(3);                        /* SET XVARIABLE */        00431000
*/*PG.KCK01 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH---------------*/ 00431100
*  IF ZXMFATTR^='' &                         /* NOT IN/OUTPUT */        00431200
*     LENGTH(XMFATTR)>60                                                00431300
*    THEN                                                               00431400
*      DO;                                                              00431500
*        ZXMFATTR='';                        /* RESET IN/OUTPUT */      00431600
*        ZMS=' 8, "MF'!!                     /**KLNGP* MSG*/            00431700
*            MF!!                                                       00431800
*            '" ARGUMENT 3 EXCEEDS THE MAXIMUM'!!                       00431900
*            ' LENGTH OF 60 CHARACTERS. ';                              00432000
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00432100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00432200
*        ZMACRET=8;                          /* MACRO ERROR */          00432300
*      END;                                                             00432400
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00432500
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00432600
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00432700
*  IF MF(1)='E'                              /* CHECK FOR KEYWORD */    00432800
*    THEN                                                               00432900
*      DO;                                                              00433000
*        XMF='E';                            /* SET XVARIABLE */        00433100
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00433200
*          THEN                                                         00433300
*            DO;                                                        00433400
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00433500
*                  MF!!                                                 00433600
*                  '" "MF"'!!                                           00433700
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00433800
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00433900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00434000
*              ZMACRET=8;                    /* MACRO ERROR */          00434100
*            END;                                                       00434200
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00434300
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00434400
*  IF MF(2)=''                               /* CHECK FOR NULL */       00434500
*   THEN                                                                00434600
*    DO;                                     /* KEY IS REQUIRED */      00434700
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00434800
*        ZMS=' 8, WHEN "E" IS SPECIFIED'!!                              00434900
*            ' FOR THE "MF" KEY, POSITIONAL'!!                          00435000
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00435100
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00435200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00435300
*        ZMACRET=8;                          /* MACRO ERROR */          00435400
*    END;                                                               00435500
*  ELSE                                                                 00435600
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00435700
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00435800
*  XMFSCK='';                                /* RESET XVARIABLE */      00435900
*  IF MF(3) = 'COMPLETE'                                                00436000
*    THEN                                                               00436100
*      XMFSCK = 'COMPLETE';                  /* SET XVARIABLE */        00436200
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00436300
*  ZXMFSCK='INPUT';                          /* SET IN/OUTPUT */        00436400
*  IF XMFSCK=''                              /* CHECK FOR KEYWORD */    00436500
*    THEN                                                               00436600
*      DO;                                   /* KEYWORD NOT ENTERED */  00436700
*        XMFSCK='COMPLETE';                  /* SET DEFAULT */          00436800
*        IF MF(3)^=''                                                   00436900
*          THEN                                                         00437000
*            DO;                                                        00437100
*              ZXMFSCK='';                   /* RESET IN/OUTPUT */      00437200
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/            00437300
*                  MF!!'"'!!                                            00437400
*                  ' ARGUMENT 3 IS AN UNKNOWN KEYWORD. '!!              00437500
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00437600
*                  ' "COMPLETE".';           /* VALID KEYWORD */        00437700
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00437800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00437900
*              ZMACRET=8;                    /* MACRO ERROR */          00438000
*            END;                                                       00438100
*      END;                                                             00438200
*/*PG.KKCTL05 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00438300
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00438400
*/*PG.KKCTL06 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00438500
*  IF MF='MF'                                                           00438600
*    ! MF='()'                               /*CHECK ENTRY*/            00438700
*     THEN                                                              00438800
*       DO;                                                             00438900
*              ZMS=' 8, THE "MF" KEY'!!      /**KOPTP* MSG*/            00439000
*                  ' MUST CONTAIN ONE'!!                                00439100
*                  ' (OR MORE) ARGUMENT(S).';                           00439200
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00439300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00439400
*              ZMACRET=8;                    /* MACRO ERROR */          00439500
*       END;                                                            00439600
*  ELSE                                                                 00439700
*    DO;                                                                00439800
*      ZXMF='INPUT';                         /* SET IN/OUTPUT */        00439900
*      IF XMF=''                             /* CHECK FOR KEYWORD */    00440000
*        THEN                                                           00440100
*          DO;                               /* KEYWORD NOT ENTERED */  00440200
*            XMF='S';                        /* SET DEFAULT */          00440300
*            XMFSCK='COMPLETE';              /* COMPLETE CHECKING */    00440400
*            IF MF(1)^=''                    /* CHECK FOR KEYWORD */    00440500
*              THEN                                                     00440600
*                DO;                                                    00440700
*                  ZXMF='';                  /* RESET IN/OUTPUT */      00440800
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/            00440900
*                  MF!!'"'!!                                            00441000
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00441100
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00441200
*                  ' "S",'!!                 /* VALID KEYWORD */        00441300
*                  ' "L",'!!                 /* VALID KEYWORD */        00441400
*                  ' OR "E".';               /* VALID KEYWORD */        00441500
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00441600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00441700
*              ZMACRET=8;                    /* MACRO ERROR */          00441800
*                END;                                                   00441900
*          END;                                                         00442000
*    END;                                                               00442100
*/********************************************************************/ 00442200
*/***PD.P01 FULL DEFAULT CHECKING                                    */ 00442300
*/********************************************************************/ 00442400
*  IF PLISTVER=''                                                       00442500
*     ! PLISTVER(1)='IMPLIED_VERSION'                                   00442600
*    THEN                                                               00442700
*      ZC='ON';                              /* DEFAULT FLAG ON */      00442800
*    ELSE                                                               00442900
*      ZC='OFF';                             /* DEFAULT FLAG OFF */     00443000
*/********************************************************************/ 00443100
*/***PD.P02 DEFAULT ECHO                                             */ 00443200
*/********************************************************************/ 00443300
*/*PD.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00443400
*  IF XMF^='L'                                                          00443500
*    THEN                                                               00443600
*      DO;                                   /* FULL SYNTAX CHECK */    00443700
*        ANS('/*DEFAULT(S): */')                                        00443800
*           NORESCAN COL(MACLMAR+5);                                    00443900
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00444000
*  IF REQUEST(1)='ADD' !                     /* CHECK FOR KEYWORD */    00444100
*     REQUEST(1)=''                          /* CHECK FOR NULL */       00444200
*    THEN                                                               00444300
*      DO;                                                              00444400
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00444500
*  XCONSNAME='';                                                        00444600
*  IF CONSNAME(1)=''                                                    00444700
*    THEN                                                               00444800
*      DO;                                                              00444900
*        XCONSNAME='0';                      /* SET DEFAULT */          00445000
*        ZC='ON';                            /* DEFAULT FLAG ON */      00445100
*      END;                                                             00445200
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00445300
*  IF XCONSNAME^=''                                                     00445400
*    THEN DO;                                                           00445500
*      ANS('/* CONSNAME('!!                                             00445600
*          XCONSNAME!!                                                  00445700
*          ')*/')                                                       00445800
*          NORESCAN COL(MACLMAR+5);                                     00445900
*      XCONSNAME = '';                                                  00446000
*    END;                                                               00446100
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00446200
*  XINITRTN='';                                                         00446300
*  IF INITRTN(1)=''                                                     00446400
*    THEN                                                               00446500
*      DO;                                                              00446600
*        XINITRTN='NO_INITRTN';              /* SET DEFAULT */          00446700
*        ZC='ON';                            /* DEFAULT FLAG ON */      00446800
*      END;                                                             00446900
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00447000
*  IF XINITRTN^=''                                                      00447100
*    THEN DO;                                                           00447200
*      ANS('/* INITRTN('!!                                              00447300
*          XINITRTN!!                                                   00447400
*          ')*/')                                                       00447500
*          NORESCAN COL(MACLMAR+5);                                     00447600
*      XINITRTN = '';                                                   00447700
*    END;                                                               00447800
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00447900
*  XINITPARM='';                                                        00448000
*  IF INITPARM(1)=''                                                    00448100
*    THEN                                                               00448200
*      DO;                                                              00448300
*        XINITPARM='NO_INITPARM';            /* SET DEFAULT */          00448400
*        ZC='ON';                            /* DEFAULT FLAG ON */      00448500
*      END;                                                             00448600
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00448700
*  IF XINITPARM^=''                                                     00448800
*    THEN DO;                                                           00448900
*      ANS('/* INITPARM('!!                                             00449000
*          XINITPARM!!                                                  00449100
*          ')*/')                                                       00449200
*          NORESCAN COL(MACLMAR+5);                                     00449300
*      XINITPARM = '';                                                  00449400
*    END;                                                               00449500
*/*PD.KXVAR01 NAME, OPT RQD INPUT, KEYS -XVARIABLE-------------------*/ 00449600
*  XINITPLEN='';                                                        00449700
*  IF INITPLEN(1)=''                                                    00449800
*    THEN                                                               00449900
*      DO;                                                              00450000
*        XINITPLEN='0';                      /* SET DEFAULT */          00450100
*        ZC='ON';                            /* DEFAULT FLAG ON */      00450200
*      END;                                                             00450300
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00450400
*  IF XINITPLEN^=''                                                     00450500
*    THEN DO;                                                           00450600
*      ANS('/* INITPLEN('!!                                             00450700
*          XINITPLEN!!                                                  00450800
*          ')*/')                                                       00450900
*          NORESCAN COL(MACLMAR+5);                                     00451000
*      XINITPLEN = '';                                                  00451100
*    END;                                                               00451200
*/*PD.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00451300
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00451400
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00451500
*  IF REQUEST(1)='ACTIVATE'                  /* CHECK FOR KEYWORD */    00451600
*    THEN                                                               00451700
*      DO;                                                              00451800
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00451900
*  XINTOKEN='';                                                         00452000
*  IF INTOKEN(1)=''                                                     00452100
*    THEN                                                               00452200
*      DO;                                                              00452300
*        XINTOKEN='NO_INPUT_TOKEN';          /* SET DEFAULT */          00452400
*        ZC='ON';                            /* DEFAULT FLAG ON */      00452500
*      END;                                                             00452600
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00452700
*  IF XINTOKEN^=''                                                      00452800
*    THEN DO;                                                           00452900
*      ANS('/* INTOKEN('!!                                              00453000
*          XINTOKEN!!                                                   00453100
*          ')*/')                                                       00453200
*          NORESCAN COL(MACLMAR+5);                                     00453300
*      XINTOKEN = '';                                                   00453400
*    END;                                                               00453500
*/*PD.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00453600
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00453700
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00453800
*  IF REQUEST(1)='OPTIONS'                   /* CHECK FOR KEYWORD */    00453900
*    THEN                                                               00454000
*      DO;                                                              00454100
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00454200
*  XCOMMAND='NO';                            /* RESET XVARIABLE */      00454300
*  IF COMMAND(1)=''                                                     00454400
*    THEN                                                               00454500
*        ZC='ON';                            /* DEFAULT FLAG ON */      00454600
*  IF COMMAND(1)='NO'                                                   00454700
*    THEN                                                               00454800
*        XCOMMAND='';                        /* SET XVARIABLE */        00454900
*  IF COMMAND(1)='YES'                                                  00455000
*    THEN                                                               00455100
*        XCOMMAND='';                        /* SET XVARIABLE */        00455200
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00455300
*  IF XCOMMAND^=''                                                      00455400
*    THEN DO;                                                           00455500
*      ANS('/* COMMAND('!!                                              00455600
*          XCOMMAND!!                                                   00455700
*          ')*/')                                                       00455800
*          NORESCAN COL(MACLMAR+5);                                     00455900
*      XCOMMAND = '';                                                   00456000
*    END;                                                               00456100
*/*PD.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00456200
*  XREQDSUB='MSTR';                          /* RESET XVARIABLE */      00456300
*  IF REQDSUB(1)=''                                                     00456400
*    THEN                                                               00456500
*        ZC='ON';                            /* DEFAULT FLAG ON */      00456600
*  IF REQDSUB(1)='MSTR'                                                 00456700
*    THEN                                                               00456800
*        XREQDSUB='';                        /* SET XVARIABLE */        00456900
*  IF REQDSUB(1)='PRI'                                                  00457000
*    THEN                                                               00457100
*        XREQDSUB='';                        /* SET XVARIABLE */        00457200
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00457300
*  IF XREQDSUB^=''                                                      00457400
*    THEN DO;                                                           00457500
*      ANS('/* REQDSUB('!!                                              00457600
*          XREQDSUB!!                                                   00457700
*          ')*/')                                                       00457800
*          NORESCAN COL(MACLMAR+5);                                     00457900
*      XREQDSUB = '';                                                   00458000
*    END;                                                               00458100
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00458200
*  XEVENTRTN='';                                                        00458300
*  IF EVENTRTN(1)=''                                                    00458400
*    THEN                                                               00458500
*      DO;                                                              00458600
*        XEVENTRTN='NO_EVENTRTN';            /* SET DEFAULT */          00458700
*        ZC='ON';                            /* DEFAULT FLAG ON */      00458800
*      END;                                                             00458900
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00459000
*  IF XEVENTRTN^=''                                                     00459100
*    THEN DO;                                                           00459200
*      ANS('/* EVENTRTN('!!                                             00459300
*          XEVENTRTN!!                                                  00459400
*          ')*/')                                                       00459500
*          NORESCAN COL(MACLMAR+5);                                     00459600
*      XEVENTRTN = '';                                                  00459700
*    END;                                                               00459800
*/*PD.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00459900
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00460000
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00460100
*  IF REQUEST(1)='SWAP'                      /* CHECK FOR KEYWORD */    00460200
*    THEN                                                               00460300
*      DO;                                                              00460400
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00460500
*  XINTOKEN='';                                                         00460600
*  IF INTOKEN(1)=''                                                     00460700
*    THEN                                                               00460800
*      DO;                                                              00460900
*        XINTOKEN='NO_INPUT_TOKEN';          /* SET DEFAULT */          00461000
*        ZC='ON';                            /* DEFAULT FLAG ON */      00461100
*      END;                                                             00461200
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00461300
*  IF XINTOKEN^=''                                                      00461400
*    THEN DO;                                                           00461500
*      ANS('/* INTOKEN('!!                                              00461600
*          XINTOKEN!!                                                   00461700
*          ')*/')                                                       00461800
*          NORESCAN COL(MACLMAR+5);                                     00461900
*      XINTOKEN = '';                                                   00462000
*    END;                                                               00462100
*/*PD.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00462200
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00462300
*/*PD.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00462400
*  IF REQUEST(1)='QUERY'                     /* CHECK FOR KEYWORD */    00462500
*    THEN                                                               00462600
*      DO;                                                              00462700
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00462800
*  XWORKASP='';                                                         00462900
*  IF WORKASP(1)=''                                                     00463000
*    THEN                                                               00463100
*      DO;                                                              00463200
*        XWORKASP='0';                       /* SET DEFAULT */          00463300
*        ZC='ON';                            /* DEFAULT FLAG ON */      00463400
*      END;                                                             00463500
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00463600
*  IF XWORKASP^=''                                                      00463700
*    THEN DO;                                                           00463800
*      ANS('/* WORKASP('!!                                              00463900
*          XWORKASP!!                                                   00464000
*          ')*/')                                                       00464100
*          NORESCAN COL(MACLMAR+5);                                     00464200
*      XWORKASP = '';                                                   00464300
*    END;                                                               00464400
*/*PD.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00464500
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00464600
*/*PD.KXVAR01 VALUE, OPT INPUT, KEYS -XVARIABLE----------------------*/ 00464700
*  XCOM='';                                                             00464800
*  IF COM(1)=''                                                         00464900
*    THEN                                                               00465000
*      DO;                                                              00465100
*        XCOM=' ';                           /* SET DEFAULT */          00465200
*        ZC='ON';                            /* DEFAULT FLAG ON */      00465300
*      END;                                                             00465400
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00465500
*  IF XCOM^=''                                                          00465600
*    THEN DO;                                                           00465700
*      ANS('/* COM('!!                                                  00465800
*          XCOM!!                                                       00465900
*          ')*/')                                                       00466000
*          NORESCAN COL(MACLMAR+5);                                     00466100
*      XCOM = '';                                                       00466200
*    END;                                                               00466300
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00466400
*  IF PLISTVER=''                                                       00466500
*    THEN DO;                                                           00466600
*      ANS('/* PLISTVER('!!                                             00466700
*          CHAR(XPLISTVER)!!                                            00466800
*          ')*/')                                                       00466900
*          NORESCAN COL(MACLMAR+5);                                     00467000
*    END;                                                               00467100
*  IF ZC='OFF'                               /*NO DEFAULTS TAKEN */     00467200
*    THEN                                                               00467300
*      ANS('/* NONE. */')                                               00467400
*         NORESCAN COL(MACLMAR+5);                                      00467500
*/*PD.P04 END DEFAULT ECHO ------------------------------------------*/ 00467600
*      END;                                                             00467700
*/********************************************************************/ 00467800
*/*PB.SYSL01 INVOKE SP LEVEL AND SYSTEM STATE MACROS                 */ 00467900
*/********************************************************************/ 00468000
*  DCL SYSSPLV CHAR EXTERNAL; DEACT SYSSPLV;/* SPLEVEL 1,2,3         */ 00468100
*  DCL SYSASCE CHAR EXTERNAL; DEACT SYSASCE;/* STATE ANY P AR */        00468200
*  DCL SYSAM64 CHAR EXTERNAL; DEACT SYSAM64;                            00468300
*  DCL SYSALVL FIXED EXTERNAL; DEACT SYSALVL;                           00468400
*                                                                       00468500
*  IF SYSASCE=''                                                        00468600
*    THEN                                                               00468700
*      DO;                                                              00468800
*        IF SYSSPLV=''                                                  00468900
*          THEN                                                         00469000
*            ANS('?SPLEVEL  (TEST);') COL(MACLMAR);                     00469100
*        IF SYSSPLV^='1' & SYSSPLV^='2'                                 00469200
*          THEN                                                         00469300
*            ANS('?SYSSTATE (TEST);') COL(MACLMAR);                     00469400
*          ELSE                                                         00469500
*            SYSASCE='P';                    /* SYSSTATE DEFAULT*/      00469600
*      END;                                                             00469700
*/********************************************************************/ 00469800
*/***PG.P01 FULL MACRO SYNTAX CHECKING                               */ 00469900
*/********************************************************************/ 00470000
*/*PG.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00470100
*  IF XMF^='L'                                                          00470200
*    THEN                                                               00470300
*      DO;                                   /* FULL SYNTAX CHECK */    00470400
*/*PG.P03 EXCESSIVE POSITIONAL ARGUMENTS-----------------------------*/ 00470500
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */    00470600
*    THEN                                                               00470700
*      DO;                                                              00470800
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'!! /**PPOSP* MSG*/            00470900
*            ' "'!!MACLIST!!'"'!!                                       00471000
*            ' CANNOT BE USED.'!!                                       00471100
*            ' NO POSITIONAL ARGUMENTS'!!                               00471200
*            ' ARE ALLOWED.';                                           00471300
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00471400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00471500
*        ZMACRET=8;                          /* MACRO ERROR */          00471600
*      END;                                                             00471700
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00471800
*  IF NUMBER(SUBNAME)>1                      /* CHECK POSITIONALS */    00471900
*    THEN                                                               00472000
*      DO;                                                              00472100
*        ZMS=' 8, "SUBNAME'!!                /**KPOSP* MSG*/            00472200
*            SUBNAME!!                                                  00472300
*            '" "SUBNAME"'!!                                            00472400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00472500
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00472600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00472700
*        ZMACRET=8;                          /* MACRO ERROR */          00472800
*      END;                                                             00472900
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00473000
*  XSUBNAME=SUBNAME(1);                      /* SET XVARIABLE */        00473100
*  IF SUBNAME(1)=''                          /* CHECK FOR NULL */       00473200
*   THEN                                                                00473300
*    DO;                                     /* KEY IS REQUIRED */      00473400
*        ZXSUBNAME='';                       /* RESET IN/OUTPUT */      00473500
*        ZMS=' 8,  '!!                                                  00473600
*            ' "SUBNAME" KEY AND ITS'!!                                 00473700
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00473800
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00473900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00474000
*        ZMACRET=8;                          /* MACRO ERROR */          00474100
*    END;                                                               00474200
*  ELSE                                                                 00474300
*    ZXSUBNAME='INPUT';                      /* SET IN/OUTPUT */        00474400
*/*PG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00474500
*  XREQUEST='';                                                         00474600
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00474700
*  IF REQUEST(1)='ADD'                       /* CHECK FOR KEYWORD */    00474800
*     ! REQUEST(1)=''                        /* CHECK FOR NULL */       00474900
*    THEN                                                               00475000
*      DO;                                                              00475100
*        XREQUEST='ADD';                     /* SET XVARIABLE */        00475200
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    00475300
*          THEN                                                         00475400
*            DO;                                                        00475500
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            00475600
*                  REQUEST!!                                            00475700
*                  '" "REQUEST"'!!                                      00475800
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00475900
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00476000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00476100
*              ZMACRET=8;                    /* MACRO ERROR */          00476200
*            END;                                                       00476300
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00476400
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00476500
*        IF INTOKEN^=''                      /* CHECK FOR KEY */        00476600
*          THEN                                                         00476700
*            ZCVAL=ZCVAL!!',INTOKEN';        /* INCORRECT KEY USED */   00476800
*        IF COMMAND^=''                      /* CHECK FOR KEY */        00476900
*          THEN                                                         00477000
*            ZCVAL=ZCVAL!!',COMMAND';        /* INCORRECT KEY USED */   00477100
*        IF REQDSUB^=''                      /* CHECK FOR KEY */        00477200
*          THEN                                                         00477300
*            ZCVAL=ZCVAL!!',REQDSUB';        /* INCORRECT KEY USED */   00477400
*        IF EVENTRTN^=''                     /* CHECK FOR KEY */        00477500
*          THEN                                                         00477600
*            ZCVAL=ZCVAL!!',EVENTRTN';       /* INCORRECT KEY USED */   00477700
*        IF OUTTOKEN^=''                     /* CHECK FOR KEY */        00477800
*          THEN                                                         00477900
*            ZCVAL=ZCVAL!!',OUTTOKEN';       /* INCORRECT KEY USED */   00478000
*        IF SUBDATA1^=''                     /* CHECK FOR KEY */        00478100
*          THEN                                                         00478200
*            ZCVAL=ZCVAL!!',SUBDATA1';       /* INCORRECT KEY USED */   00478300
*        IF SUBDATA2^=''                     /* CHECK FOR KEY */        00478400
*          THEN                                                         00478500
*            ZCVAL=ZCVAL!!',SUBDATA2';       /* INCORRECT KEY USED */   00478600
*        IF WORKAREA^=''                     /* CHECK FOR KEY */        00478700
*          THEN                                                         00478800
*            ZCVAL=ZCVAL!!',WORKAREA';       /* INCORRECT KEY USED */   00478900
*        IF WORKASP^=''                      /* CHECK FOR KEY */        00479000
*          THEN                                                         00479100
*            ZCVAL=ZCVAL!!',WORKASP';        /* INCORRECT KEY USED */   00479200
*        IF ZCVAL^=''                                                   00479300
*          THEN                                                         00479400
*            DO;                             /* INCORRECT KEYS USED */  00479500
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00479600
*              ZMS=' 8, "REQUEST'!!          /**KMEIP* MSG*/            00479700
*                  REQUEST!!'"'!!                                       00479800
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   00479900
*                  ' FOLLOWING KEY(S) "'!!                              00480000
*                  ZCVAL!!'".';                                         00480100
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00480200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00480300
*              ZMACRET=8;                    /* MACRO ERROR */          00480400
*            END;                                                       00480500
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00480600
*  IF CONSNAME='CONSNAME' ! CONSNAME='()'    /*CHECK ENTRY*/            00480700
*    THEN                                                               00480800
*      DO;                                                              00480900
*        ZMS=' 8, THE "CONSNAME" KEY'!!      /**KOPTP* MSG*/            00481000
*            ' MUST CONTAIN ONE'!!                                      00481100
*            ' (OR MORE) ARGUMENT(S).';                                 00481200
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00481300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00481400
*        ZMACRET=8;                          /* MACRO ERROR */          00481500
*      END;                                                             00481600
*  IF NUMBER(CONSNAME)>1                     /* CHECK POSITIONALS */    00481700
*    THEN                                                               00481800
*      DO;                                                              00481900
*        ZMS=' 8, "CONSNAME'!!               /**KPOSP* MSG*/            00482000
*            CONSNAME!!                                                 00482100
*            '" "CONSNAME"'!!                                           00482200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00482300
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00482400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00482500
*        ZMACRET=8;                          /* MACRO ERROR */          00482600
*      END;                                                             00482700
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00482800
*  ZXCONSNAME='INPUT';                       /* SET IN/OUTPUT */        00482900
*  XCONSNAME='0';                            /* SET DEFAULT */          00483000
*  IF CONSNAME(1)^=''                        /* CHECK FOR NULL */       00483100
*    THEN                                                               00483200
*      XCONSNAME=CONSNAME(1);                /* SET XVARIABLE */        00483300
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00483400
*  IF INITRTN='INITRTN' ! INITRTN='()'       /*CHECK ENTRY*/            00483500
*    THEN                                                               00483600
*      DO;                                                              00483700
*        ZMS=' 8, THE "INITRTN" KEY'!!       /**KOPTP* MSG*/            00483800
*            ' MUST CONTAIN ONE'!!                                      00483900
*            ' (OR MORE) ARGUMENT(S).';                                 00484000
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00484100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00484200
*        ZMACRET=8;                          /* MACRO ERROR */          00484300
*      END;                                                             00484400
*  IF NUMBER(INITRTN)>1                      /* CHECK POSITIONALS */    00484500
*    THEN                                                               00484600
*      DO;                                                              00484700
*        ZMS=' 8, "INITRTN'!!                /**KPOSP* MSG*/            00484800
*            INITRTN!!                                                  00484900
*            '" "INITRTN"'!!                                            00485000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00485100
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00485200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00485300
*        ZMACRET=8;                          /* MACRO ERROR */          00485400
*      END;                                                             00485500
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00485600
*  ZXINITRTN='INPUT';                        /* SET IN/OUTPUT */        00485700
*  XINITRTN='NO_INITRTN';                    /* SET DEFAULT */          00485800
*  IF INITRTN(1)^=''                         /* CHECK FOR NULL */       00485900
*    THEN                                                               00486000
*      XINITRTN=INITRTN(1);                  /* SET XVARIABLE */        00486100
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00486200
*  IF INITPARM='INITPARM' ! INITPARM='()'    /*CHECK ENTRY*/            00486300
*    THEN                                                               00486400
*      DO;                                                              00486500
*        ZMS=' 8, THE "INITPARM" KEY'!!      /**KOPTP* MSG*/            00486600
*            ' MUST CONTAIN ONE'!!                                      00486700
*            ' (OR MORE) ARGUMENT(S).';                                 00486800
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00486900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00487000
*        ZMACRET=8;                          /* MACRO ERROR */          00487100
*      END;                                                             00487200
*  IF NUMBER(INITPARM)>1                     /* CHECK POSITIONALS */    00487300
*    THEN                                                               00487400
*      DO;                                                              00487500
*        ZMS=' 8, "INITPARM'!!               /**KPOSP* MSG*/            00487600
*            INITPARM!!                                                 00487700
*            '" "INITPARM"'!!                                           00487800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00487900
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00488000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00488100
*        ZMACRET=8;                          /* MACRO ERROR */          00488200
*      END;                                                             00488300
*/*PG.KXVAR19 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00488400
*  ZXINITPARM='INPUT';                       /* SET IN/OUTPUT */        00488500
*  XINITPARM='NO_INITPARM';                  /* SET DEFAULT */          00488600
*  IF INITPARM(1)^=''                        /* CHECK FOR PARMS */      00488700
*    THEN                                                               00488800
*      XINITPARM=INITPARM(1);                /* SET XVARIABLE */        00488900
*  IF INITRTN(1)='' &                        /* CHECK FOR KEY */        00489000
*     INITPARM(1)^=''                        /* CHECK FOR PARMS */      00489100
*    THEN                                                               00489200
*      DO;                                                              00489300
*        ZMS=' 8, "INITPARM'!!               /**KDEPP* MSG*/            00489400
*            INITPARM!!'"'!!                                            00489500
*            ' CAN ONLY BE SPECIFIED IF'!!                              00489600
*            ' '!!                                                      00489700
*            ' "INITRTN"'!!                                             00489800
*            ' IS ALSO SPECIFIED.';                                     00489900
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00490000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00490100
*        ZMACRET=8;                          /* MACRO ERROR */          00490200
*      END;                                                             00490300
*/*PG.KXVAR01 NAME, OPT RQD INPUT, KEYS -EXCESSIVE ARGUMENTS---------*/ 00490400
*  IF NUMBER(INITPLEN)>1                     /* CHECK POSITIONALS */    00490500
*    THEN                                                               00490600
*      DO;                                                              00490700
*        ZMS=' 8, "INITPLEN'!!               /**KPOSP* MSG*/            00490800
*            INITPLEN!!                                                 00490900
*            '" "INITPLEN"'!!                                           00491000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00491100
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00491200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00491300
*        ZMACRET=8;                          /* MACRO ERROR */          00491400
*      END;                                                             00491500
*/*PG.KXVAR07 NAME, OPT RQD INPUT, KEYS -XVARIABLE-------------------*/ 00491600
*  ZXINITPLEN='INPUT';                       /* SET IN/OUTPUT*/         00491700
*  XINITPLEN=INITPLEN(1);                    /* SET XVARIABLE */        00491800
*  IF INITPARM(1)=''                         /* CHECK KEY */            00491900
*    THEN                                                               00492000
*      DO;                                                              00492100
*        IF INITPLEN(1)=''                   /* CHECK PARM */           00492200
*          THEN                                                         00492300
*            ZXINITPLEN='';                  /* RESET IN/OUTPUT*/       00492400
*          ELSE                                                         00492500
*            DO;                                                        00492600
*            ZMS=' 8, "INITPLEN'!!           /**KDEPP* MSG*/            00492700
*                INITPLEN!!'"'!!                                        00492800
*                ' CAN ONLY BE SPECIFIED IF'!!                          00492900
*                ' '!!                                                  00493000
*                ' "INITPARM"'!!                                        00493100
*                ' IS ALSO SPECIFIED.';                                 00493200
*            ANS MSG('?IEFSSI ---> '!!ZMS);                             00493300
*            ANS(COMMENT(ZMS)) COL(MACLMAR);                            00493400
*            ZMACRET=8;                      /* MACRO ERROR */          00493500
*            END;                                                       00493600
*      END;                                                             00493700
*    ELSE                                                               00493800
*      IF INITPLEN(1)=''                     /* CHECK PARM */           00493900
*        THEN                                                           00494000
*          DO;                                                          00494100
*            ZXINITPLEN='';                  /* RESET IN/OUTPUT*/       00494200
*            ZMS=' 8, WHEN "INITPARM" IS SPECIFIED'!!                   00494300
*                ' , "INITPLEN" KEY AND ITS'!!                          00494400
*                ' ARGUMENT ARE REQUIRED.';  /**KRQDP* MSG*/            00494500
*            ANS MSG('?IEFSSI ---> '!!ZMS);                             00494600
*            ANS(COMMENT(ZMS)) COL(MACLMAR);                            00494700
*            ZMACRET=8;                      /* MACRO ERROR */          00494800
*          END;                                                         00494900
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00495000
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00495100
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00495200
*  IF REQUEST(1)='ACTIVATE'                  /* CHECK FOR KEYWORD */    00495300
*    THEN                                                               00495400
*      DO;                                                              00495500
*        XREQUEST='ACTIVATE';                /* SET XVARIABLE */        00495600
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    00495700
*          THEN                                                         00495800
*            DO;                                                        00495900
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            00496000
*                  REQUEST!!                                            00496100
*                  '" "REQUEST"'!!                                      00496200
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00496300
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00496400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00496500
*              ZMACRET=8;                    /* MACRO ERROR */          00496600
*            END;                                                       00496700
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00496800
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00496900
*        IF CONSNAME^=''                     /* CHECK FOR KEY */        00497000
*          THEN                                                         00497100
*            ZCVAL=ZCVAL!!',CONSNAME';       /* INCORRECT KEY USED */   00497200
*        IF INITRTN^=''                      /* CHECK FOR KEY */        00497300
*          THEN                                                         00497400
*            ZCVAL=ZCVAL!!',INITRTN';        /* INCORRECT KEY USED */   00497500
*        IF INITPARM^=''                     /* CHECK FOR KEY */        00497600
*          THEN                                                         00497700
*            ZCVAL=ZCVAL!!',INITPARM';       /* INCORRECT KEY USED */   00497800
*        IF INITPLEN^=''                     /* CHECK FOR KEY */        00497900
*          THEN                                                         00498000
*            ZCVAL=ZCVAL!!',INITPLEN';       /* INCORRECT KEY USED */   00498100
*        IF COMMAND^=''                      /* CHECK FOR KEY */        00498200
*          THEN                                                         00498300
*            ZCVAL=ZCVAL!!',COMMAND';        /* INCORRECT KEY USED */   00498400
*        IF REQDSUB^=''                      /* CHECK FOR KEY */        00498500
*          THEN                                                         00498600
*            ZCVAL=ZCVAL!!',REQDSUB';        /* INCORRECT KEY USED */   00498700
*        IF EVENTRTN^=''                     /* CHECK FOR KEY */        00498800
*          THEN                                                         00498900
*            ZCVAL=ZCVAL!!',EVENTRTN';       /* INCORRECT KEY USED */   00499000
*        IF OUTTOKEN^=''                     /* CHECK FOR KEY */        00499100
*          THEN                                                         00499200
*            ZCVAL=ZCVAL!!',OUTTOKEN';       /* INCORRECT KEY USED */   00499300
*        IF SUBDATA1^=''                     /* CHECK FOR KEY */        00499400
*          THEN                                                         00499500
*            ZCVAL=ZCVAL!!',SUBDATA1';       /* INCORRECT KEY USED */   00499600
*        IF SUBDATA2^=''                     /* CHECK FOR KEY */        00499700
*          THEN                                                         00499800
*            ZCVAL=ZCVAL!!',SUBDATA2';       /* INCORRECT KEY USED */   00499900
*        IF WORKAREA^=''                     /* CHECK FOR KEY */        00500000
*          THEN                                                         00500100
*            ZCVAL=ZCVAL!!',WORKAREA';       /* INCORRECT KEY USED */   00500200
*        IF WORKASP^=''                      /* CHECK FOR KEY */        00500300
*          THEN                                                         00500400
*            ZCVAL=ZCVAL!!',WORKASP';        /* INCORRECT KEY USED */   00500500
*        IF ZCVAL^=''                                                   00500600
*          THEN                                                         00500700
*            DO;                             /* INCORRECT KEYS USED */  00500800
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00500900
*              ZMS=' 8, "REQUEST'!!          /**KMEIP* MSG*/            00501000
*                  REQUEST!!'"'!!                                       00501100
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   00501200
*                  ' FOLLOWING KEY(S) "'!!                              00501300
*                  ZCVAL!!'".';                                         00501400
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00501500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00501600
*              ZMACRET=8;                    /* MACRO ERROR */          00501700
*            END;                                                       00501800
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00501900
*  IF INTOKEN='INTOKEN' ! INTOKEN='()'       /*CHECK ENTRY*/            00502000
*    THEN                                                               00502100
*      DO;                                                              00502200
*        ZMS=' 8, THE "INTOKEN" KEY'!!       /**KOPTP* MSG*/            00502300
*            ' MUST CONTAIN ONE'!!                                      00502400
*            ' (OR MORE) ARGUMENT(S).';                                 00502500
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00502600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00502700
*        ZMACRET=8;                          /* MACRO ERROR */          00502800
*      END;                                                             00502900
*  IF NUMBER(INTOKEN)>1                      /* CHECK POSITIONALS */    00503000
*    THEN                                                               00503100
*      DO;                                                              00503200
*        ZMS=' 8, "INTOKEN'!!                /**KPOSP* MSG*/            00503300
*            INTOKEN!!                                                  00503400
*            '" "INTOKEN"'!!                                            00503500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00503600
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00503700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00503800
*        ZMACRET=8;                          /* MACRO ERROR */          00503900
*      END;                                                             00504000
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00504100
*  ZXINTOKEN='INPUT';                        /* SET IN/OUTPUT */        00504200
*  XINTOKEN='NO_INPUT_TOKEN';                /* SET DEFAULT */          00504300
*  IF INTOKEN(1)^=''                         /* CHECK FOR NULL */       00504400
*    THEN                                                               00504500
*      XINTOKEN=INTOKEN(1);                  /* SET XVARIABLE */        00504600
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00504700
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00504800
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00504900
*  IF REQUEST(1)='OPTIONS'                   /* CHECK FOR KEYWORD */    00505000
*    THEN                                                               00505100
*      DO;                                                              00505200
*        XREQUEST='OPTIONS';                 /* SET XVARIABLE */        00505300
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    00505400
*          THEN                                                         00505500
*            DO;                                                        00505600
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            00505700
*                  REQUEST!!                                            00505800
*                  '" "REQUEST"'!!                                      00505900
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00506000
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00506100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00506200
*              ZMACRET=8;                    /* MACRO ERROR */          00506300
*            END;                                                       00506400
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00506500
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00506600
*        IF CONSNAME^=''                     /* CHECK FOR KEY */        00506700
*          THEN                                                         00506800
*            ZCVAL=ZCVAL!!',CONSNAME';       /* INCORRECT KEY USED */   00506900
*        IF INITRTN^=''                      /* CHECK FOR KEY */        00507000
*          THEN                                                         00507100
*            ZCVAL=ZCVAL!!',INITRTN';        /* INCORRECT KEY USED */   00507200
*        IF INITPARM^=''                     /* CHECK FOR KEY */        00507300
*          THEN                                                         00507400
*            ZCVAL=ZCVAL!!',INITPARM';       /* INCORRECT KEY USED */   00507500
*        IF INITPLEN^=''                     /* CHECK FOR KEY */        00507600
*          THEN                                                         00507700
*            ZCVAL=ZCVAL!!',INITPLEN';       /* INCORRECT KEY USED */   00507800
*        IF INTOKEN^=''                      /* CHECK FOR KEY */        00507900
*          THEN                                                         00508000
*            ZCVAL=ZCVAL!!',INTOKEN';        /* INCORRECT KEY USED */   00508100
*        IF OUTTOKEN^=''                     /* CHECK FOR KEY */        00508200
*          THEN                                                         00508300
*            ZCVAL=ZCVAL!!',OUTTOKEN';       /* INCORRECT KEY USED */   00508400
*        IF SUBDATA1^=''                     /* CHECK FOR KEY */        00508500
*          THEN                                                         00508600
*            ZCVAL=ZCVAL!!',SUBDATA1';       /* INCORRECT KEY USED */   00508700
*        IF SUBDATA2^=''                     /* CHECK FOR KEY */        00508800
*          THEN                                                         00508900
*            ZCVAL=ZCVAL!!',SUBDATA2';       /* INCORRECT KEY USED */   00509000
*        IF WORKAREA^=''                     /* CHECK FOR KEY */        00509100
*          THEN                                                         00509200
*            ZCVAL=ZCVAL!!',WORKAREA';       /* INCORRECT KEY USED */   00509300
*        IF WORKASP^=''                      /* CHECK FOR KEY */        00509400
*          THEN                                                         00509500
*            ZCVAL=ZCVAL!!',WORKASP';        /* INCORRECT KEY USED */   00509600
*        IF ZCVAL^=''                                                   00509700
*          THEN                                                         00509800
*            DO;                             /* INCORRECT KEYS USED */  00509900
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00510000
*              ZMS=' 8, "REQUEST'!!          /**KMEIP* MSG*/            00510100
*                  REQUEST!!'"'!!                                       00510200
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   00510300
*                  ' FOLLOWING KEY(S) "'!!                              00510400
*                  ZCVAL!!'".';                                         00510500
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00510600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00510700
*              ZMACRET=8;                    /* MACRO ERROR */          00510800
*            END;                                                       00510900
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00511000
*  IF COMMAND='COMMAND'                      /* CHECK ENTRY */          00511100
*    THEN                                                               00511200
*      DO;                                                              00511300
*        ZMS=' 8, THE "COMMAND" KEY'!!       /**KOPTP* MSG*/            00511400
*            ' MUST CONTAIN ONE'!!                                      00511500
*            ' (OR MORE) ARGUMENT(S).';                                 00511600
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00511700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00511800
*        ZMACRET=8;                          /* MACRO ERROR */          00511900
*      END;                                                             00512000
*  IF NUMBER(COMMAND)>1                      /* CHECK POSITIONALS */    00512100
*    THEN                                                               00512200
*      DO;                                                              00512300
*        ZMS=' 8, "COMMAND'!!                /**KPOSP* MSG*/            00512400
*            COMMAND!!                                                  00512500
*            '" "COMMAND"'!!                                            00512600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00512700
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00512800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00512900
*        ZMACRET=8;                          /* MACRO ERROR */          00513000
*      END;                                                             00513100
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00513200
*  XCOMMAND='';                              /* RESET XVARIABLE */      00513300
*  IF COMMAND(1) = 'NO'                                                 00513400
*    THEN                                                               00513500
*      XCOMMAND = 'NO';                      /* SET XVARIABLE */        00513600
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00513700
*  IF COMMAND(1) = 'YES'                                                00513800
*    THEN                                                               00513900
*      XCOMMAND = 'YES';                     /* SET XVARIABLE */        00514000
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00514100
*  ZXCOMMAND='INPUT';                        /* SET IN/OUTPUT */        00514200
*  IF XCOMMAND=''                            /* CHECK FOR KEYWORD */    00514300
*    THEN                                                               00514400
*      DO;                                   /* KEYWORD NOT ENTERED */  00514500
*        XCOMMAND='NO';                      /* SET DEFAULT */          00514600
*        IF COMMAND(1)^=''                                              00514700
*          THEN                                                         00514800
*            DO;                                                        00514900
*              ZXCOMMAND='';                 /* RESET IN/OUTPUT */      00515000
*              ZMS=' 8, "COMMAND'!!          /**KUKWP* MSG*/            00515100
*                  COMMAND!!'"'!!                                       00515200
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00515300
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00515400
*                  ' "NO"'!!                 /* VALID KEYWORD */        00515500
*                  ' OR "YES".';             /* VALID KEYWORD */        00515600
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00515700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00515800
*              ZMACRET=8;                    /* MACRO ERROR */          00515900
*            END;                                                       00516000
*      END;                                                             00516100
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00516200
*  IF REQDSUB='REQDSUB'                      /* CHECK ENTRY */          00516300
*    THEN                                                               00516400
*      DO;                                                              00516500
*        ZMS=' 8, THE "REQDSUB" KEY'!!       /**KOPTP* MSG*/            00516600
*            ' MUST CONTAIN ONE'!!                                      00516700
*            ' (OR MORE) ARGUMENT(S).';                                 00516800
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00516900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00517000
*        ZMACRET=8;                          /* MACRO ERROR */          00517100
*      END;                                                             00517200
*  IF NUMBER(REQDSUB)>1                      /* CHECK POSITIONALS */    00517300
*    THEN                                                               00517400
*      DO;                                                              00517500
*        ZMS=' 8, "REQDSUB'!!                /**KPOSP* MSG*/            00517600
*            REQDSUB!!                                                  00517700
*            '" "REQDSUB"'!!                                            00517800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00517900
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00518000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00518100
*        ZMACRET=8;                          /* MACRO ERROR */          00518200
*      END;                                                             00518300
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00518400
*  XREQDSUB='';                              /* RESET XVARIABLE */      00518500
*  IF REQDSUB(1) = 'MSTR'                                               00518600
*    THEN                                                               00518700
*      XREQDSUB = 'MSTR';                    /* SET XVARIABLE */        00518800
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00518900
*  IF REQDSUB(1) = 'PRI'                                                00519000
*    THEN                                                               00519100
*      XREQDSUB = 'PRI';                     /* SET XVARIABLE */        00519200
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00519300
*  ZXREQDSUB='INPUT';                        /* SET IN/OUTPUT */        00519400
*  IF XREQDSUB=''                            /* CHECK FOR KEYWORD */    00519500
*    THEN                                                               00519600
*      DO;                                   /* KEYWORD NOT ENTERED */  00519700
*        XREQDSUB='MSTR';                    /* SET DEFAULT */          00519800
*        IF REQDSUB(1)^=''                                              00519900
*          THEN                                                         00520000
*            DO;                                                        00520100
*              ZXREQDSUB='';                 /* RESET IN/OUTPUT */      00520200
*              ZMS=' 8, "REQDSUB'!!          /**KUKWP* MSG*/            00520300
*                  REQDSUB!!'"'!!                                       00520400
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00520500
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00520600
*                  ' "MSTR"'!!               /* VALID KEYWORD */        00520700
*                  ' OR "PRI".';             /* VALID KEYWORD */        00520800
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00520900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00521000
*              ZMACRET=8;                    /* MACRO ERROR */          00521100
*            END;                                                       00521200
*      END;                                                             00521300
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00521400
*  IF EVENTRTN='EVENTRTN' ! EVENTRTN='()'    /*CHECK ENTRY*/            00521500
*    THEN                                                               00521600
*      DO;                                                              00521700
*        ZMS=' 8, THE "EVENTRTN" KEY'!!      /**KOPTP* MSG*/            00521800
*            ' MUST CONTAIN ONE'!!                                      00521900
*            ' (OR MORE) ARGUMENT(S).';                                 00522000
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00522100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00522200
*        ZMACRET=8;                          /* MACRO ERROR */          00522300
*      END;                                                             00522400
*  IF NUMBER(EVENTRTN)>1                     /* CHECK POSITIONALS */    00522500
*    THEN                                                               00522600
*      DO;                                                              00522700
*        ZMS=' 8, "EVENTRTN'!!               /**KPOSP* MSG*/            00522800
*            EVENTRTN!!                                                 00522900
*            '" "EVENTRTN"'!!                                           00523000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00523100
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00523200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00523300
*        ZMACRET=8;                          /* MACRO ERROR */          00523400
*      END;                                                             00523500
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00523600
*  ZXEVENTRTN='INPUT';                       /* SET IN/OUTPUT */        00523700
*  XEVENTRTN='NO_EVENTRTN';                  /* SET DEFAULT */          00523800
*  IF EVENTRTN(1)^=''                        /* CHECK FOR NULL */       00523900
*    THEN                                                               00524000
*      XEVENTRTN=EVENTRTN(1);                /* SET XVARIABLE */        00524100
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00524200
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00524300
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00524400
*  IF REQUEST(1)='DEACTIVATE'                /* CHECK FOR KEYWORD */    00524500
*    THEN                                                               00524600
*      DO;                                                              00524700
*        XREQUEST='DEACTIVATE';              /* SET XVARIABLE */        00524800
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    00524900
*          THEN                                                         00525000
*            DO;                                                        00525100
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            00525200
*                  REQUEST!!                                            00525300
*                  '" "REQUEST"'!!                                      00525400
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00525500
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00525600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00525700
*              ZMACRET=8;                    /* MACRO ERROR */          00525800
*            END;                                                       00525900
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00526000
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00526100
*        IF CONSNAME^=''                     /* CHECK FOR KEY */        00526200
*          THEN                                                         00526300
*            ZCVAL=ZCVAL!!',CONSNAME';       /* INCORRECT KEY USED */   00526400
*        IF INITRTN^=''                      /* CHECK FOR KEY */        00526500
*          THEN                                                         00526600
*            ZCVAL=ZCVAL!!',INITRTN';        /* INCORRECT KEY USED */   00526700
*        IF INITPARM^=''                     /* CHECK FOR KEY */        00526800
*          THEN                                                         00526900
*            ZCVAL=ZCVAL!!',INITPARM';       /* INCORRECT KEY USED */   00527000
*        IF INITPLEN^=''                     /* CHECK FOR KEY */        00527100
*          THEN                                                         00527200
*            ZCVAL=ZCVAL!!',INITPLEN';       /* INCORRECT KEY USED */   00527300
*        IF INTOKEN^=''                      /* CHECK FOR KEY */        00527400
*          THEN                                                         00527500
*            ZCVAL=ZCVAL!!',INTOKEN';        /* INCORRECT KEY USED */   00527600
*        IF COMMAND^=''                      /* CHECK FOR KEY */        00527700
*          THEN                                                         00527800
*            ZCVAL=ZCVAL!!',COMMAND';        /* INCORRECT KEY USED */   00527900
*        IF REQDSUB^=''                      /* CHECK FOR KEY */        00528000
*          THEN                                                         00528100
*            ZCVAL=ZCVAL!!',REQDSUB';        /* INCORRECT KEY USED */   00528200
*        IF EVENTRTN^=''                     /* CHECK FOR KEY */        00528300
*          THEN                                                         00528400
*            ZCVAL=ZCVAL!!',EVENTRTN';       /* INCORRECT KEY USED */   00528500
*        IF SUBDATA1^=''                     /* CHECK FOR KEY */        00528600
*          THEN                                                         00528700
*            ZCVAL=ZCVAL!!',SUBDATA1';       /* INCORRECT KEY USED */   00528800
*        IF SUBDATA2^=''                     /* CHECK FOR KEY */        00528900
*          THEN                                                         00529000
*            ZCVAL=ZCVAL!!',SUBDATA2';       /* INCORRECT KEY USED */   00529100
*        IF WORKAREA^=''                     /* CHECK FOR KEY */        00529200
*          THEN                                                         00529300
*            ZCVAL=ZCVAL!!',WORKAREA';       /* INCORRECT KEY USED */   00529400
*        IF WORKASP^=''                      /* CHECK FOR KEY */        00529500
*          THEN                                                         00529600
*            ZCVAL=ZCVAL!!',WORKASP';        /* INCORRECT KEY USED */   00529700
*        IF ZCVAL^=''                                                   00529800
*          THEN                                                         00529900
*            DO;                             /* INCORRECT KEYS USED */  00530000
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00530100
*              ZMS=' 8, "REQUEST'!!          /**KMEIP* MSG*/            00530200
*                  REQUEST!!'"'!!                                       00530300
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   00530400
*                  ' FOLLOWING KEY(S) "'!!                              00530500
*                  ZCVAL!!'".';                                         00530600
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00530700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00530800
*              ZMACRET=8;                    /* MACRO ERROR */          00530900
*            END;                                                       00531000
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00531100
*  IF OUTTOKEN='OUTTOKEN' ! OUTTOKEN='()'    /*CHECK ENTRY*/            00531200
*    THEN                                                               00531300
*      DO;                                                              00531400
*        ZMS=' 8, THE "OUTTOKEN" KEY'!!      /**KOPTP* MSG*/            00531500
*            ' MUST CONTAIN ONE'!!                                      00531600
*            ' (OR MORE) ARGUMENT(S).';                                 00531700
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00531800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00531900
*        ZMACRET=8;                          /* MACRO ERROR */          00532000
*      END;                                                             00532100
*  IF NUMBER(OUTTOKEN)>1                     /* CHECK POSITIONALS */    00532200
*    THEN                                                               00532300
*      DO;                                                              00532400
*        ZMS=' 8, "OUTTOKEN'!!               /**KPOSP* MSG*/            00532500
*            OUTTOKEN!!                                                 00532600
*            '" "OUTTOKEN"'!!                                           00532700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00532800
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00532900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00533000
*        ZMACRET=8;                          /* MACRO ERROR */          00533100
*      END;                                                             00533200
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00533300
*  IF OUTTOKEN(1)^=''                        /* CHECK FOR NULL */       00533400
*    THEN                                                               00533500
*      DO;                                                              00533600
*        XOUTTOKEN=OUTTOKEN(1);              /* SET XVARIABLE */        00533700
*        ZXOUTTOKEN='OUTPUT';                /* SET OUTPUT */           00533800
*      END;                                                             00533900
*  ELSE                                                                 00534000
*    IF ZXOUTTOKEN^=''                                                  00534100
*      THEN                                                             00534200
*        ZXOUTTOKEN='';                      /* RESET OUTPUT */         00534300
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00534400
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00534500
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00534600
*  IF REQUEST(1)='SWAP'                      /* CHECK FOR KEYWORD */    00534700
*    THEN                                                               00534800
*      DO;                                                              00534900
*        XREQUEST='SWAP';                    /* SET XVARIABLE */        00535000
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    00535100
*          THEN                                                         00535200
*            DO;                                                        00535300
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            00535400
*                  REQUEST!!                                            00535500
*                  '" "REQUEST"'!!                                      00535600
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00535700
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00535800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00535900
*              ZMACRET=8;                    /* MACRO ERROR */          00536000
*            END;                                                       00536100
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00536200
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00536300
*        IF CONSNAME^=''                     /* CHECK FOR KEY */        00536400
*          THEN                                                         00536500
*            ZCVAL=ZCVAL!!',CONSNAME';       /* INCORRECT KEY USED */   00536600
*        IF INITRTN^=''                      /* CHECK FOR KEY */        00536700
*          THEN                                                         00536800
*            ZCVAL=ZCVAL!!',INITRTN';        /* INCORRECT KEY USED */   00536900
*        IF INITPARM^=''                     /* CHECK FOR KEY */        00537000
*          THEN                                                         00537100
*            ZCVAL=ZCVAL!!',INITPARM';       /* INCORRECT KEY USED */   00537200
*        IF INITPLEN^=''                     /* CHECK FOR KEY */        00537300
*          THEN                                                         00537400
*            ZCVAL=ZCVAL!!',INITPLEN';       /* INCORRECT KEY USED */   00537500
*        IF COMMAND^=''                      /* CHECK FOR KEY */        00537600
*          THEN                                                         00537700
*            ZCVAL=ZCVAL!!',COMMAND';        /* INCORRECT KEY USED */   00537800
*        IF REQDSUB^=''                      /* CHECK FOR KEY */        00537900
*          THEN                                                         00538000
*            ZCVAL=ZCVAL!!',REQDSUB';        /* INCORRECT KEY USED */   00538100
*        IF EVENTRTN^=''                     /* CHECK FOR KEY */        00538200
*          THEN                                                         00538300
*            ZCVAL=ZCVAL!!',EVENTRTN';       /* INCORRECT KEY USED */   00538400
*        IF SUBDATA1^=''                     /* CHECK FOR KEY */        00538500
*          THEN                                                         00538600
*            ZCVAL=ZCVAL!!',SUBDATA1';       /* INCORRECT KEY USED */   00538700
*        IF SUBDATA2^=''                     /* CHECK FOR KEY */        00538800
*          THEN                                                         00538900
*            ZCVAL=ZCVAL!!',SUBDATA2';       /* INCORRECT KEY USED */   00539000
*        IF WORKAREA^=''                     /* CHECK FOR KEY */        00539100
*          THEN                                                         00539200
*            ZCVAL=ZCVAL!!',WORKAREA';       /* INCORRECT KEY USED */   00539300
*        IF WORKASP^=''                      /* CHECK FOR KEY */        00539400
*          THEN                                                         00539500
*            ZCVAL=ZCVAL!!',WORKASP';        /* INCORRECT KEY USED */   00539600
*        IF ZCVAL^=''                                                   00539700
*          THEN                                                         00539800
*            DO;                             /* INCORRECT KEYS USED */  00539900
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00540000
*              ZMS=' 8, "REQUEST'!!          /**KMEIP* MSG*/            00540100
*                  REQUEST!!'"'!!                                       00540200
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   00540300
*                  ' FOLLOWING KEY(S) "'!!                              00540400
*                  ZCVAL!!'".';                                         00540500
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00540600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00540700
*              ZMACRET=8;                    /* MACRO ERROR */          00540800
*            END;                                                       00540900
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00541000
*  IF INTOKEN='INTOKEN' ! INTOKEN='()'       /*CHECK ENTRY*/            00541100
*    THEN                                                               00541200
*      DO;                                                              00541300
*        ZMS=' 8, THE "INTOKEN" KEY'!!       /**KOPTP* MSG*/            00541400
*            ' MUST CONTAIN ONE'!!                                      00541500
*            ' (OR MORE) ARGUMENT(S).';                                 00541600
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00541700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00541800
*        ZMACRET=8;                          /* MACRO ERROR */          00541900
*      END;                                                             00542000
*  IF NUMBER(INTOKEN)>1                      /* CHECK POSITIONALS */    00542100
*    THEN                                                               00542200
*      DO;                                                              00542300
*        ZMS=' 8, "INTOKEN'!!                /**KPOSP* MSG*/            00542400
*            INTOKEN!!                                                  00542500
*            '" "INTOKEN"'!!                                            00542600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00542700
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00542800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00542900
*        ZMACRET=8;                          /* MACRO ERROR */          00543000
*      END;                                                             00543100
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00543200
*  ZXINTOKEN='INPUT';                        /* SET IN/OUTPUT */        00543300
*  XINTOKEN='NO_INPUT_TOKEN';                /* SET DEFAULT */          00543400
*  IF INTOKEN(1)^=''                         /* CHECK FOR NULL */       00543500
*    THEN                                                               00543600
*      XINTOKEN=INTOKEN(1);                  /* SET XVARIABLE */        00543700
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00543800
*  IF OUTTOKEN='OUTTOKEN' ! OUTTOKEN='()'    /*CHECK ENTRY*/            00543900
*    THEN                                                               00544000
*      DO;                                                              00544100
*        ZMS=' 8, THE "OUTTOKEN" KEY'!!      /**KOPTP* MSG*/            00544200
*            ' MUST CONTAIN ONE'!!                                      00544300
*            ' (OR MORE) ARGUMENT(S).';                                 00544400
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00544500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00544600
*        ZMACRET=8;                          /* MACRO ERROR */          00544700
*      END;                                                             00544800
*  IF NUMBER(OUTTOKEN)>1                     /* CHECK POSITIONALS */    00544900
*    THEN                                                               00545000
*      DO;                                                              00545100
*        ZMS=' 8, "OUTTOKEN'!!               /**KPOSP* MSG*/            00545200
*            OUTTOKEN!!                                                 00545300
*            '" "OUTTOKEN"'!!                                           00545400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00545500
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00545600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00545700
*        ZMACRET=8;                          /* MACRO ERROR */          00545800
*      END;                                                             00545900
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00546000
*  IF OUTTOKEN(1)^=''                        /* CHECK FOR NULL */       00546100
*    THEN                                                               00546200
*      DO;                                                              00546300
*        XOUTTOKEN=OUTTOKEN(1);              /* SET XVARIABLE */        00546400
*        ZXOUTTOKEN='OUTPUT';                /* SET OUTPUT */           00546500
*      END;                                                             00546600
*  ELSE                                                                 00546700
*    IF ZXOUTTOKEN^=''                                                  00546800
*      THEN                                                             00546900
*        ZXOUTTOKEN='';                      /* RESET OUTPUT */         00547000
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00547100
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00547200
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00547300
*  IF REQUEST(1)='PUT'                       /* CHECK FOR KEYWORD */    00547400
*    THEN                                                               00547500
*      DO;                                                              00547600
*        XREQUEST='PUT';                     /* SET XVARIABLE */        00547700
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    00547800
*          THEN                                                         00547900
*            DO;                                                        00548000
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            00548100
*                  REQUEST!!                                            00548200
*                  '" "REQUEST"'!!                                      00548300
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00548400
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00548500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00548600
*              ZMACRET=8;                    /* MACRO ERROR */          00548700
*            END;                                                       00548800
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00548900
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00549000
*        IF CONSNAME^=''                     /* CHECK FOR KEY */        00549100
*          THEN                                                         00549200
*            ZCVAL=ZCVAL!!',CONSNAME';       /* INCORRECT KEY USED */   00549300
*        IF INITRTN^=''                      /* CHECK FOR KEY */        00549400
*          THEN                                                         00549500
*            ZCVAL=ZCVAL!!',INITRTN';        /* INCORRECT KEY USED */   00549600
*        IF INITPARM^=''                     /* CHECK FOR KEY */        00549700
*          THEN                                                         00549800
*            ZCVAL=ZCVAL!!',INITPARM';       /* INCORRECT KEY USED */   00549900
*        IF INITPLEN^=''                     /* CHECK FOR KEY */        00550000
*          THEN                                                         00550100
*            ZCVAL=ZCVAL!!',INITPLEN';       /* INCORRECT KEY USED */   00550200
*        IF INTOKEN^=''                      /* CHECK FOR KEY */        00550300
*          THEN                                                         00550400
*            ZCVAL=ZCVAL!!',INTOKEN';        /* INCORRECT KEY USED */   00550500
*        IF COMMAND^=''                      /* CHECK FOR KEY */        00550600
*          THEN                                                         00550700
*            ZCVAL=ZCVAL!!',COMMAND';        /* INCORRECT KEY USED */   00550800
*        IF REQDSUB^=''                      /* CHECK FOR KEY */        00550900
*          THEN                                                         00551000
*            ZCVAL=ZCVAL!!',REQDSUB';        /* INCORRECT KEY USED */   00551100
*        IF EVENTRTN^=''                     /* CHECK FOR KEY */        00551200
*          THEN                                                         00551300
*            ZCVAL=ZCVAL!!',EVENTRTN';       /* INCORRECT KEY USED */   00551400
*        IF OUTTOKEN^=''                     /* CHECK FOR KEY */        00551500
*          THEN                                                         00551600
*            ZCVAL=ZCVAL!!',OUTTOKEN';       /* INCORRECT KEY USED */   00551700
*        IF WORKAREA^=''                     /* CHECK FOR KEY */        00551800
*          THEN                                                         00551900
*            ZCVAL=ZCVAL!!',WORKAREA';       /* INCORRECT KEY USED */   00552000
*        IF WORKASP^=''                      /* CHECK FOR KEY */        00552100
*          THEN                                                         00552200
*            ZCVAL=ZCVAL!!',WORKASP';        /* INCORRECT KEY USED */   00552300
*        IF ZCVAL^=''                                                   00552400
*          THEN                                                         00552500
*            DO;                             /* INCORRECT KEYS USED */  00552600
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00552700
*              ZMS=' 8, "REQUEST'!!          /**KMEIP* MSG*/            00552800
*                  REQUEST!!'"'!!                                       00552900
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   00553000
*                  ' FOLLOWING KEY(S) "'!!                              00553100
*                  ZCVAL!!'".';                                         00553200
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00553300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00553400
*              ZMACRET=8;                    /* MACRO ERROR */          00553500
*            END;                                                       00553600
*/*PG.KMGRP01 NAME,  INPUT, ME GROUP -EXCESSIVE ARGUMENTS ---------- */ 00553700
*  IF SUBDATA1='SUBDATA1'                    /* CHECK ENTRY */          00553800
*    THEN                                                               00553900
*      DO;                                                              00554000
*        ZMS=' 8, THE "SUBDATA1" KEY'!!      /**KOPTP* MSG*/            00554100
*            ' MUST CONTAIN ONE'!!                                      00554200
*            ' (OR MORE) ARGUMENT(S).';                                 00554300
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00554400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00554500
*        ZMACRET=8;                          /* MACRO ERROR */          00554600
*      END;                                                             00554700
*  IF NUMBER(SUBDATA1)>1                     /* CHECK POSITIONALS */    00554800
*    THEN                                                               00554900
*      DO;                                                              00555000
*        ZMS=' 8, "SUBDATA1'!!               /**KPOSP* MSG*/            00555100
*            SUBDATA1!!                                                 00555200
*            '" "SUBDATA1"'!!                                           00555300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00555400
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00555500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00555600
*        ZMACRET=8;                          /* MACRO ERROR */          00555700
*      END;                                                             00555800
*/*PG.KMGRP03 NAME,  INPUT, ME GROUP -XVARIABLE -------------------- */ 00555900
*  ZXSUBDATA1='INPUT';                       /* SET IN/OUTPUT */        00556000
*  XSUBDATA1=SUBDATA1(1);                    /* SET XVARIABLE */        00556100
*  IF SUBDATA1(1)=''                         /* CHECK FOR NULL */       00556200
*    THEN                                                               00556300
*        ZXSUBDATA1='';                      /* RESET IN/OUTPUT */      00556400
*/*PG.KMGRP01 NAME,  INPUT, ME GROUP -EXCESSIVE ARGUMENTS ---------- */ 00556500
*  IF SUBDATA2='SUBDATA2'                    /* CHECK ENTRY */          00556600
*    THEN                                                               00556700
*      DO;                                                              00556800
*        ZMS=' 8, THE "SUBDATA2" KEY'!!      /**KOPTP* MSG*/            00556900
*            ' MUST CONTAIN ONE'!!                                      00557000
*            ' (OR MORE) ARGUMENT(S).';                                 00557100
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00557200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00557300
*        ZMACRET=8;                          /* MACRO ERROR */          00557400
*      END;                                                             00557500
*  IF NUMBER(SUBDATA2)>1                     /* CHECK POSITIONALS */    00557600
*    THEN                                                               00557700
*      DO;                                                              00557800
*        ZMS=' 8, "SUBDATA2'!!               /**KPOSP* MSG*/            00557900
*            SUBDATA2!!                                                 00558000
*            '" "SUBDATA2"'!!                                           00558100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00558200
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00558300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00558400
*        ZMACRET=8;                          /* MACRO ERROR */          00558500
*      END;                                                             00558600
*/*PG.KMGRP03 NAME,  INPUT, ME GROUP -XVARIABLE -------------------- */ 00558700
*  ZXSUBDATA2='INPUT';                       /* SET IN/OUTPUT */        00558800
*  XSUBDATA2=SUBDATA2(1);                    /* SET XVARIABLE */        00558900
*  IF SUBDATA2(1)=''                         /* CHECK FOR NULL */       00559000
*    THEN                                                               00559100
*        ZXSUBDATA2='';                      /* RESET IN/OUTPUT */      00559200
*/*PG.KMGRP11 NAME,  INPUT, ME GROUP -AT LEAST ONE SPECIFIED ------- */ 00559300
*  IF SUBDATA1='' &                                                     00559400
*     SUBDATA2=''                                                       00559500
*    THEN                                                               00559600
*      DO;                                   /* SPECIFY GROUP */        00559700
*        ZMS=' 8, ONE OR MORE OF THE'!!      /**MGRPP* MSG*/            00559800
*            ' FOLLOWING KEY(S) IS REQUIRED: "'!!                       00559900
*            'SUBDATA1,'!!                                              00560000
*            ' SUBDATA2'!!'".';                                         00560100
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00560200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00560300
*        ZMACRET=8;                          /* MACRO ERROR */          00560400
*      END;                                                             00560500
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00560600
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00560700
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00560800
*  IF REQUEST(1)='GET'                       /* CHECK FOR KEYWORD */    00560900
*    THEN                                                               00561000
*      DO;                                                              00561100
*        XREQUEST='GET';                     /* SET XVARIABLE */        00561200
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    00561300
*          THEN                                                         00561400
*            DO;                                                        00561500
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            00561600
*                  REQUEST!!                                            00561700
*                  '" "REQUEST"'!!                                      00561800
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00561900
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00562000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00562100
*              ZMACRET=8;                    /* MACRO ERROR */          00562200
*            END;                                                       00562300
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00562400
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00562500
*        IF CONSNAME^=''                     /* CHECK FOR KEY */        00562600
*          THEN                                                         00562700
*            ZCVAL=ZCVAL!!',CONSNAME';       /* INCORRECT KEY USED */   00562800
*        IF INITRTN^=''                      /* CHECK FOR KEY */        00562900
*          THEN                                                         00563000
*            ZCVAL=ZCVAL!!',INITRTN';        /* INCORRECT KEY USED */   00563100
*        IF INITPARM^=''                     /* CHECK FOR KEY */        00563200
*          THEN                                                         00563300
*            ZCVAL=ZCVAL!!',INITPARM';       /* INCORRECT KEY USED */   00563400
*        IF INITPLEN^=''                     /* CHECK FOR KEY */        00563500
*          THEN                                                         00563600
*            ZCVAL=ZCVAL!!',INITPLEN';       /* INCORRECT KEY USED */   00563700
*        IF INTOKEN^=''                      /* CHECK FOR KEY */        00563800
*          THEN                                                         00563900
*            ZCVAL=ZCVAL!!',INTOKEN';        /* INCORRECT KEY USED */   00564000
*        IF COMMAND^=''                      /* CHECK FOR KEY */        00564100
*          THEN                                                         00564200
*            ZCVAL=ZCVAL!!',COMMAND';        /* INCORRECT KEY USED */   00564300
*        IF REQDSUB^=''                      /* CHECK FOR KEY */        00564400
*          THEN                                                         00564500
*            ZCVAL=ZCVAL!!',REQDSUB';        /* INCORRECT KEY USED */   00564600
*        IF EVENTRTN^=''                     /* CHECK FOR KEY */        00564700
*          THEN                                                         00564800
*            ZCVAL=ZCVAL!!',EVENTRTN';       /* INCORRECT KEY USED */   00564900
*        IF OUTTOKEN^=''                     /* CHECK FOR KEY */        00565000
*          THEN                                                         00565100
*            ZCVAL=ZCVAL!!',OUTTOKEN';       /* INCORRECT KEY USED */   00565200
*        IF WORKAREA^=''                     /* CHECK FOR KEY */        00565300
*          THEN                                                         00565400
*            ZCVAL=ZCVAL!!',WORKAREA';       /* INCORRECT KEY USED */   00565500
*        IF WORKASP^=''                      /* CHECK FOR KEY */        00565600
*          THEN                                                         00565700
*            ZCVAL=ZCVAL!!',WORKASP';        /* INCORRECT KEY USED */   00565800
*        IF ZCVAL^=''                                                   00565900
*          THEN                                                         00566000
*            DO;                             /* INCORRECT KEYS USED */  00566100
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00566200
*              ZMS=' 8, "REQUEST'!!          /**KMEIP* MSG*/            00566300
*                  REQUEST!!'"'!!                                       00566400
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   00566500
*                  ' FOLLOWING KEY(S) "'!!                              00566600
*                  ZCVAL!!'".';                                         00566700
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00566800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00566900
*              ZMACRET=8;                    /* MACRO ERROR */          00567000
*            END;                                                       00567100
*/*PG.KMGRP01 NAME,  OUTPUT, ME GROUP -EXCESSIVE ARGUMENTS --------- */ 00567200
*  IF SUBDATA1='SUBDATA1'                    /* CHECK ENTRY */          00567300
*    THEN                                                               00567400
*      DO;                                                              00567500
*        ZMS=' 8, THE "SUBDATA1" KEY'!!      /**KOPTP* MSG*/            00567600
*            ' MUST CONTAIN ONE'!!                                      00567700
*            ' (OR MORE) ARGUMENT(S).';                                 00567800
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00567900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00568000
*        ZMACRET=8;                          /* MACRO ERROR */          00568100
*      END;                                                             00568200
*  IF NUMBER(SUBDATA1)>1                     /* CHECK POSITIONALS */    00568300
*    THEN                                                               00568400
*      DO;                                                              00568500
*        ZMS=' 8, "SUBDATA1'!!               /**KPOSP* MSG*/            00568600
*            SUBDATA1!!                                                 00568700
*            '" "SUBDATA1"'!!                                           00568800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00568900
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00569000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00569100
*        ZMACRET=8;                          /* MACRO ERROR */          00569200
*      END;                                                             00569300
*/*PG.KMGRP03 NAME,  OUTPUT, ME GROUP -XVARIABLE ------------------- */ 00569400
*  ZXSUBDATA1='OUTPUT';                      /* SET IN/OUTPUT */        00569500
*  XSUBDATA1=SUBDATA1(1);                    /* SET XVARIABLE */        00569600
*  IF SUBDATA1(1)=''                         /* CHECK FOR NULL */       00569700
*    THEN                                                               00569800
*        ZXSUBDATA1='';                      /* RESET IN/OUTPUT */      00569900
*/*PG.KMGRP01 NAME,  OUTPUT, ME GROUP -EXCESSIVE ARGUMENTS --------- */ 00570000
*  IF SUBDATA2='SUBDATA2'                    /* CHECK ENTRY */          00570100
*    THEN                                                               00570200
*      DO;                                                              00570300
*        ZMS=' 8, THE "SUBDATA2" KEY'!!      /**KOPTP* MSG*/            00570400
*            ' MUST CONTAIN ONE'!!                                      00570500
*            ' (OR MORE) ARGUMENT(S).';                                 00570600
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00570700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00570800
*        ZMACRET=8;                          /* MACRO ERROR */          00570900
*      END;                                                             00571000
*  IF NUMBER(SUBDATA2)>1                     /* CHECK POSITIONALS */    00571100
*    THEN                                                               00571200
*      DO;                                                              00571300
*        ZMS=' 8, "SUBDATA2'!!               /**KPOSP* MSG*/            00571400
*            SUBDATA2!!                                                 00571500
*            '" "SUBDATA2"'!!                                           00571600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00571700
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00571800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00571900
*        ZMACRET=8;                          /* MACRO ERROR */          00572000
*      END;                                                             00572100
*/*PG.KMGRP03 NAME,  OUTPUT, ME GROUP -XVARIABLE ------------------- */ 00572200
*  ZXSUBDATA2='OUTPUT';                      /* SET IN/OUTPUT */        00572300
*  XSUBDATA2=SUBDATA2(1);                    /* SET XVARIABLE */        00572400
*  IF SUBDATA2(1)=''                         /* CHECK FOR NULL */       00572500
*    THEN                                                               00572600
*        ZXSUBDATA2='';                      /* RESET IN/OUTPUT */      00572700
*/*PG.KMGRP11 NAME,  OUTPUT, ME GROUP -AT LEAST ONE SPECIFIED ------ */ 00572800
*  IF SUBDATA1='' &                                                     00572900
*     SUBDATA2=''                                                       00573000
*    THEN                                                               00573100
*      DO;                                   /* SPECIFY GROUP */        00573200
*        ZMS=' 8, ONE OR MORE OF THE'!!      /**MGRPP* MSG*/            00573300
*            ' FOLLOWING KEY(S) IS REQUIRED: "'!!                       00573400
*            'SUBDATA1,'!!                                              00573500
*            ' SUBDATA2'!!'".';                                         00573600
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00573700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00573800
*        ZMACRET=8;                          /* MACRO ERROR */          00573900
*      END;                                                             00574000
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00574100
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00574200
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00574300
*  IF REQUEST(1)='QUERY'                     /* CHECK FOR KEYWORD */    00574400
*    THEN                                                               00574500
*      DO;                                                              00574600
*        XREQUEST='QUERY';                   /* SET XVARIABLE */        00574700
*        IF NUMBER(REQUEST)>1                /* CHECK POSITIONALS */    00574800
*          THEN                                                         00574900
*            DO;                                                        00575000
*              ZMS=' 8, "REQUEST'!!          /**KPOSP* MSG*/            00575100
*                  REQUEST!!                                            00575200
*                  '" "REQUEST"'!!                                      00575300
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00575400
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00575500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00575600
*              ZMACRET=8;                    /* MACRO ERROR */          00575700
*            END;                                                       00575800
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00575900
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00576000
*        IF CONSNAME^=''                     /* CHECK FOR KEY */        00576100
*          THEN                                                         00576200
*            ZCVAL=ZCVAL!!',CONSNAME';       /* INCORRECT KEY USED */   00576300
*        IF INITRTN^=''                      /* CHECK FOR KEY */        00576400
*          THEN                                                         00576500
*            ZCVAL=ZCVAL!!',INITRTN';        /* INCORRECT KEY USED */   00576600
*        IF INITPARM^=''                     /* CHECK FOR KEY */        00576700
*          THEN                                                         00576800
*            ZCVAL=ZCVAL!!',INITPARM';       /* INCORRECT KEY USED */   00576900
*        IF INITPLEN^=''                     /* CHECK FOR KEY */        00577000
*          THEN                                                         00577100
*            ZCVAL=ZCVAL!!',INITPLEN';       /* INCORRECT KEY USED */   00577200
*        IF INTOKEN^=''                      /* CHECK FOR KEY */        00577300
*          THEN                                                         00577400
*            ZCVAL=ZCVAL!!',INTOKEN';        /* INCORRECT KEY USED */   00577500
*        IF COMMAND^=''                      /* CHECK FOR KEY */        00577600
*          THEN                                                         00577700
*            ZCVAL=ZCVAL!!',COMMAND';        /* INCORRECT KEY USED */   00577800
*        IF REQDSUB^=''                      /* CHECK FOR KEY */        00577900
*          THEN                                                         00578000
*            ZCVAL=ZCVAL!!',REQDSUB';        /* INCORRECT KEY USED */   00578100
*        IF EVENTRTN^=''                     /* CHECK FOR KEY */        00578200
*          THEN                                                         00578300
*            ZCVAL=ZCVAL!!',EVENTRTN';       /* INCORRECT KEY USED */   00578400
*        IF OUTTOKEN^=''                     /* CHECK FOR KEY */        00578500
*          THEN                                                         00578600
*            ZCVAL=ZCVAL!!',OUTTOKEN';       /* INCORRECT KEY USED */   00578700
*        IF SUBDATA1^=''                     /* CHECK FOR KEY */        00578800
*          THEN                                                         00578900
*            ZCVAL=ZCVAL!!',SUBDATA1';       /* INCORRECT KEY USED */   00579000
*        IF SUBDATA2^=''                     /* CHECK FOR KEY */        00579100
*          THEN                                                         00579200
*            ZCVAL=ZCVAL!!',SUBDATA2';       /* INCORRECT KEY USED */   00579300
*        IF ZCVAL^=''                                                   00579400
*          THEN                                                         00579500
*            DO;                             /* INCORRECT KEYS USED */  00579600
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00579700
*              ZMS=' 8, "REQUEST'!!          /**KMEIP* MSG*/            00579800
*                  REQUEST!!'"'!!                                       00579900
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   00580000
*                  ' FOLLOWING KEY(S) "'!!                              00580100
*                  ZCVAL!!'".';                                         00580200
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00580300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00580400
*              ZMACRET=8;                    /* MACRO ERROR */          00580500
*            END;                                                       00580600
*/*PG.KXVAR01 NAME, RQD OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00580700
*  IF NUMBER(WORKAREA)>1                     /* CHECK POSITIONALS */    00580800
*    THEN                                                               00580900
*      DO;                                                              00581000
*        ZMS=' 8, "WORKAREA'!!               /**KPOSP* MSG*/            00581100
*            WORKAREA!!                                                 00581200
*            '" "WORKAREA"'!!                                           00581300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00581400
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00581500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00581600
*        ZMACRET=8;                          /* MACRO ERROR */          00581700
*      END;                                                             00581800
*/*PG.KXVAR03 NAME, RQD OUTPUT, KEYS -XVARIABLE----------------------*/ 00581900
*  XWORKAREA=WORKAREA(1);                    /* SET XVARIABLE */        00582000
*  IF WORKAREA(1)=''                         /* CHECK FOR NULL */       00582100
*   THEN                                                                00582200
*    DO;                                     /* KEY IS REQUIRED */      00582300
*        ZXWORKAREA='';                      /* RESET IN/OUTPUT */      00582400
*        ZMS=' 8,  '!!                                                  00582500
*            ' "WORKAREA" KEY AND ITS'!!                                00582600
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00582700
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00582800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00582900
*        ZMACRET=8;                          /* MACRO ERROR */          00583000
*    END;                                                               00583100
*  ELSE                                                                 00583200
*    ZXWORKAREA='OUTPUT';                    /* SET IN/OUTPUT */        00583300
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00583400
*  IF WORKASP='WORKASP' ! WORKASP='()'       /*CHECK ENTRY*/            00583500
*    THEN                                                               00583600
*      DO;                                                              00583700
*        ZMS=' 8, THE "WORKASP" KEY'!!       /**KOPTP* MSG*/            00583800
*            ' MUST CONTAIN ONE'!!                                      00583900
*            ' (OR MORE) ARGUMENT(S).';                                 00584000
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00584100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00584200
*        ZMACRET=8;                          /* MACRO ERROR */          00584300
*      END;                                                             00584400
*  IF NUMBER(WORKASP)>1                      /* CHECK POSITIONALS */    00584500
*    THEN                                                               00584600
*      DO;                                                              00584700
*        ZMS=' 8, "WORKASP'!!                /**KPOSP* MSG*/            00584800
*            WORKASP!!                                                  00584900
*            '" "WORKASP"'!!                                            00585000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00585100
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00585200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00585300
*        ZMACRET=8;                          /* MACRO ERROR */          00585400
*      END;                                                             00585500
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00585600
*  ZXWORKASP='INPUT';                        /* SET IN/OUTPUT */        00585700
*  XWORKASP='0';                             /* SET DEFAULT */          00585800
*  IF WORKASP(1)^=''                         /* CHECK FOR NULL */       00585900
*    THEN                                                               00586000
*      XWORKASP=WORKASP(1);                  /* SET XVARIABLE */        00586100
*/*PG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00586200
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00586300
*/*PG.KKCTL06 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00586400
*  IF REQUEST='REQUEST'                                                 00586500
*    ! REQUEST='()'                          /*CHECK ENTRY*/            00586600
*     THEN                                                              00586700
*       DO;                                                             00586800
*              ZMS=' 8, THE "REQUEST" KEY'!! /**KOPTP* MSG*/            00586900
*                  ' MUST CONTAIN ONE'!!                                00587000
*                  ' (OR MORE) ARGUMENT(S).';                           00587100
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00587200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00587300
*              ZMACRET=8;                    /* MACRO ERROR */          00587400
*       END;                                                            00587500
*  ELSE                                                                 00587600
*    DO;                                                                00587700
*      ZXREQUEST='INPUT';                    /* SET IN/OUTPUT */        00587800
*      IF XREQUEST=''                        /* CHECK FOR KEYWORD */    00587900
*        THEN                                                           00588000
*          DO;                               /* KEYWORD NOT ENTERED */  00588100
*            XREQUEST='ADD';                 /* SET DEFAULT */          00588200
*            IF REQUEST(1)^=''               /* CHECK FOR KEYWORD */    00588300
*              THEN                                                     00588400
*                DO;                                                    00588500
*                  ZXREQUEST='';             /* RESET IN/OUTPUT */      00588600
*              ZMS=' 8, "REQUEST'!!          /**KUKWP* MSG*/            00588700
*                  REQUEST!!'"'!!                                       00588800
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00588900
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00589000
*                  ' "ADD",'!!               /* VALID KEYWORD */        00589100
*                  ' "ACTIVATE",'!!          /* VALID KEYWORD */        00589200
*                  ' "OPTIONS",'!!           /* VALID KEYWORD */        00589300
*                  ' "DEACTIVATE",'!!        /* VALID KEYWORD */        00589400
*                  ' "SWAP",'!!              /* VALID KEYWORD */        00589500
*                  ' "PUT",'!!               /* VALID KEYWORD */        00589600
*                  ' "GET",'!!               /* VALID KEYWORD */        00589700
*                  ' OR "QUERY".';           /* VALID KEYWORD */        00589800
*              ANS MSG('?IEFSSI ---> '!!ZMS);                           00589900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00590000
*              ZMACRET=8;                    /* MACRO ERROR */          00590100
*                END;                                                   00590200
*          END;                                                         00590300
*    END;                                                               00590400
*/*PG.KKCTL07 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00590500
*  IF REQUEST(1)=''                          /* CHECK FOR KEYWORD */    00590600
*    THEN                                                               00590700
*      DO;                                                              00590800
*        ZXREQUEST='';                       /* RESET IN/OUTPUT */      00590900
*        ZMS=' 8, THE'!!                     /**KRKWP* MSG*/            00591000
*            ' "REQUEST" KEY AND ITS'!!                                 00591100
*            ' ARGUMENT ARE REQUIRED.'!!                                00591200
*            ' VALID KEYWORD CHOICE(S) ARE:'!!                          00591300
*            ' "ADD",'!!                     /* VALID KEYWORD */        00591400
*            ' "ACTIVATE",'!!                /* VALID KEYWORD */        00591500
*            ' "OPTIONS",'!!                 /* VALID KEYWORD */        00591600
*            ' "DEACTIVATE",'!!              /* VALID KEYWORD */        00591700
*            ' "SWAP",'!!                    /* VALID KEYWORD */        00591800
*            ' "PUT",'!!                     /* VALID KEYWORD */        00591900
*            ' "GET",'!!                     /* VALID KEYWORD */        00592000
*            ' OR "QUERY".';                 /* VALID KEYWORD */        00592100
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00592200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00592300
*        ZMACRET=8;                          /* MACRO ERROR */          00592400
*      END;                                                             00592500
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00592600
*  IF RETCODE='RETCODE' ! RETCODE='()'       /*CHECK ENTRY*/            00592700
*    THEN                                                               00592800
*      DO;                                                              00592900
*        ZMS=' 8, THE "RETCODE" KEY'!!       /**KOPTP* MSG*/            00593000
*            ' MUST CONTAIN ONE'!!                                      00593100
*            ' (OR MORE) ARGUMENT(S).';                                 00593200
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00593300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00593400
*        ZMACRET=8;                          /* MACRO ERROR */          00593500
*      END;                                                             00593600
*  IF NUMBER(RETCODE)>1                      /* CHECK POSITIONALS */    00593700
*    THEN                                                               00593800
*      DO;                                                              00593900
*        ZMS=' 8, "RETCODE'!!                /**KPOSP* MSG*/            00594000
*            RETCODE!!                                                  00594100
*            '" "RETCODE"'!!                                            00594200
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00594300
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00594400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00594500
*        ZMACRET=8;                          /* MACRO ERROR */          00594600
*      END;                                                             00594700
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00594800
*  IF RETCODE(1)^=''                         /* CHECK FOR NULL */       00594900
*    THEN                                                               00595000
*      DO;                                                              00595100
*        XRETCODE=RETCODE(1);                /* SET XVARIABLE */        00595200
*        ZXRETCODE='OUTPUT';                 /* SET OUTPUT */           00595300
*      END;                                                             00595400
*  ELSE                                                                 00595500
*    IF ZXRETCODE^=''                                                   00595600
*      THEN                                                             00595700
*        ZXRETCODE='';                       /* RESET OUTPUT */         00595800
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00595900
*  IF RSNCODE='RSNCODE' ! RSNCODE='()'       /*CHECK ENTRY*/            00596000
*    THEN                                                               00596100
*      DO;                                                              00596200
*        ZMS=' 8, THE "RSNCODE" KEY'!!       /**KOPTP* MSG*/            00596300
*            ' MUST CONTAIN ONE'!!                                      00596400
*            ' (OR MORE) ARGUMENT(S).';                                 00596500
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00596600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00596700
*        ZMACRET=8;                          /* MACRO ERROR */          00596800
*      END;                                                             00596900
*  IF NUMBER(RSNCODE)>1                      /* CHECK POSITIONALS */    00597000
*    THEN                                                               00597100
*      DO;                                                              00597200
*        ZMS=' 8, "RSNCODE'!!                /**KPOSP* MSG*/            00597300
*            RSNCODE!!                                                  00597400
*            '" "RSNCODE"'!!                                            00597500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00597600
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00597700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00597800
*        ZMACRET=8;                          /* MACRO ERROR */          00597900
*      END;                                                             00598000
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00598100
*  IF RSNCODE(1)^=''                         /* CHECK FOR NULL */       00598200
*    THEN                                                               00598300
*      DO;                                                              00598400
*        XRSNCODE=RSNCODE(1);                /* SET XVARIABLE */        00598500
*        ZXRSNCODE='OUTPUT';                 /* SET OUTPUT */           00598600
*      END;                                                             00598700
*  ELSE                                                                 00598800
*    IF ZXRSNCODE^=''                                                   00598900
*      THEN                                                             00599000
*        ZXRSNCODE='';                       /* RESET OUTPUT */         00599100
*/*PG.KXVAR01 VALUE, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00599200
*  IF COM='COM' ! COM='()'                   /*CHECK ENTRY*/            00599300
*    THEN                                                               00599400
*      DO;                                                              00599500
*        ZMS=' 8, THE "COM" KEY'!!           /**KOPTP* MSG*/            00599600
*            ' MUST CONTAIN ONE'!!                                      00599700
*            ' (OR MORE) ARGUMENT(S).';                                 00599800
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00599900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00600000
*        ZMACRET=8;                          /* MACRO ERROR */          00600100
*      END;                                                             00600200
*  IF NUMBER(COM)>1                          /* CHECK POSITIONALS */    00600300
*    THEN                                                               00600400
*      DO;                                                              00600500
*        ZMS=' 8, "COM'!!                    /**KPOSP* MSG*/            00600600
*            COM!!                                                      00600700
*            '" "COM"'!!                                                00600800
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00600900
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00601000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00601100
*        ZMACRET=8;                          /* MACRO ERROR */          00601200
*      END;                                                             00601300
*/*PG.KXVAR13 VALUE, OPT INPUT, KEYS -XVARIABLE----------------------*/ 00601400
*  ZXCOM='INPUT';                            /* SET IN/OUTPUT */        00601500
*  XCOM='NULL';                              /* SET DEFAULT */          00601600
*  IF COM(1)^=''                             /* CHECK FOR NULL */       00601700
*    THEN                                                               00601800
*      XCOM=COM(1);                          /* SET XVARIABLE */        00601900
*/*PG.KCK01 VALUE, OPT INPUT, KEYS -CHARACTER LENGTH-----------------*/ 00602000
*  IF ZXCOM^='' &                            /* NOT IN/OUTPUT */        00602100
*     XCOM^='NULL' &                         /* NOT STAR DEFAULT */     00602200
*     LENGTH(XCOM)>256                                                  00602300
*    THEN                                                               00602400
*      DO;                                                              00602500
*        ZXCOM='';                           /* RESET IN/OUTPUT */      00602600
*        ZMS=' 8, "COM'!!                    /**KLNGP* MSG*/            00602700
*            COM!!                                                      00602800
*            '" ARGUMENT 1 EXCEEDS THE MAXIMUM'!!                       00602900
*            ' LENGTH OF 256 CHARACTERS. ';                             00603000
*        ANS MSG('?IEFSSI ---> '!!ZMS);                                 00603100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00603200
*        ZMACRET=8;                          /* MACRO ERROR */          00603300
*      END;                                                             00603400
*/*PG.P04 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00603500
*      END;                                  /* END COMPLETE CHECKING*/ 00603600
*/********************************************************************/ 00603700
*/***PE.MR01 GENERATE CODE IF ZMACRET=0                              */ 00603800
*/********************************************************************/ 00603900
*  IF ZMACRET = 0                                                       00604000
*    THEN                                                               00604100
*      DO;                                                              00604200
*/********************************************************************/ 00604300
*/***PE.PR01 PRINT CONTROLS, DEFAULT IS YES                          */ 00604400
*/********************************************************************/ 00604500
*  ANS(MACCONC!!'LIST PUSH;') NORESCAN COL(MACLMAR);                    00604600
*  IF ZPRINT='NO'                            /* PRINT IS OFF */         00604700
*    THEN                                                               00604800
*      ANS(MACCONC!!'LIST OFF;') NORESCAN COL(MACLMAR);                 00604900
*    ELSE                                                               00605000
*      ANS(MACCONC!!'LIST ON;')  NORESCAN COL(MACLMAR);                 00605100
*/********************************************************************/ 00605200
*/*PE.DO02 OUTER MACRO DO STATEMENT----------------------------------*/ 00605300
*  IF XMF^='L'                                                          00605400
*    THEN                                                               00605500
*      ANS('DO; /* IEFSSI-PLISTVER */')                                 00605600
*          NORESCAN COL(MACLMAR);                                       00605700
*/*PL.LL01 ?IEFSSI MF=L PARAMETER LIST-------------------------------*/ 00605800
*  IF XMF='L'                                                           00605900
*    THEN                                                               00606000
*      DO;                                                              00606100
*        ANS('DCL 1 '!!XMFCTRL!!' '!!XMFATTR!!', '!!                    00606200
*            '/* ?IEFSSI PARM LIST*/')                                  00606300
*            NORESCAN COL(MACLMAR);                                     00606400
*/*PL.LL13  XSSI_PLIST_ID CHAR(4) CONSTANT---------------------------*/ 00606500
*        ANS('2 '!!XMFCTRL                                              00606600
*         !! '_XSSI_PLIST_ID CHAR(4), '                                 00606700
*         !! '/* '!!ZXSSI_PLIST_ID                                      00606800
*         !! ' XSSI_PLIST_ID */'                                        00606900
*            ) NORESCAN COL(MACLMAR+2);                                 00607000
*/*PL.LL02  XPLISTLEN FIXED(16) BDY(BYTE) INPUT----------------------*/ 00607100
*        ANS('2 '!!XMFCTRL!!                                            00607200
*            '_XPLISTLEN FIXED(16) BDY(BYTE), '!!                       00607300
*            '/* INPUT XPLISTLEN*/')                                    00607400
*            NORESCAN COL(MACLMAR+2);                                   00607500
*/*PL.LL02  XVERSION FIXED(8) INPUT----------------------------------*/ 00607600
*        ANS('2 '!!XMFCTRL!!                                            00607700
*            '_XVERSION FIXED(8), '!!                                   00607800
*            '/* INPUT XVERSION*/')                                     00607900
*            NORESCAN COL(MACLMAR+2);                                   00608000
*/*PL.LL13  XRSV0001 CHAR(1) RESERVED--------------------------------*/ 00608100
*        ANS('2 '!!XMFCTRL                                              00608200
*         !! '_XRSV0001 CHAR(1), '                                      00608300
*         !! '/* RESERVED */'                                           00608400
*            ) NORESCAN COL(MACLMAR+2);                                 00608500
*/*PL.LL13  XSUBNAME CHAR(4) INPUT-----------------------------------*/ 00608600
*        ANS('2 '!!XMFCTRL                                              00608700
*         !! '_XSUBNAME CHAR(4), '                                      00608800
*         !! '/* '!!ZXSUBNAME                                           00608900
*         !! ' XSUBNAME */'                                             00609000
*            ) NORESCAN COL(MACLMAR+2);                                 00609100
*/*PL.LL13  XRSV0002 CHAR(4) RESERVED--------------------------------*/ 00609200
*        ANS('2 '!!XMFCTRL                                              00609300
*         !! '_XRSV0002 CHAR(4), '                                      00609400
*         !! '/* RESERVED */'                                           00609500
*            ) NORESCAN COL(MACLMAR+2);                                 00609600
*/*PL.LL04  XREQUEST_TYPE BIT(16) FIELD_LABEL------------------------*/ 00609700
*        ANS('2 '!!XMFCTRL!!                                            00609800
*            '_XREQUEST_TYPE BIT(16), '!!                               00609900
*            '/* FIELD_LABEL */')                                       00610000
*            NORESCAN COL(MACLMAR+2);                                   00610100
*/*PL.LL09 BIT 1XXXXXXXXXXXXXXX--------------------------------------*/ 00610200
*          ANS('3 '!!XMFCTRL!!                                          00610300
*              '_XREQUEST_ADD BIT(1), '!!                               00610400
*              '/* BIT */')                                             00610500
*              NORESCAN COL(MACLMAR+2);                                 00610600
*/*PL.LL09 BIT X1XXXXXXXXXXXXXX--------------------------------------*/ 00610700
*          ANS('3 '!!XMFCTRL!!                                          00610800
*              '_XREQUEST_ACTIVATE BIT(1), '!!                          00610900
*              '/* BIT */')                                             00611000
*              NORESCAN COL(MACLMAR+2);                                 00611100
*/*PL.LL09 BIT XX1XXXXXXXXXXXXX--------------------------------------*/ 00611200
*          ANS('3 '!!XMFCTRL!!                                          00611300
*              '_XREQUEST_DEACTIVATE BIT(1), '!!                        00611400
*              '/* BIT */')                                             00611500
*              NORESCAN COL(MACLMAR+2);                                 00611600
*/*PL.LL06 RESERVED BIT----------------------------------------------*/ 00611700
*          ANS('3 '!!XMFCTRL!!                                          00611800
*              '_XREQUEST_TYPE_RSVD1 BIT(1), '!!                        00611900
*              '/* BIT */')                                             00612000
*              NORESCAN COL(MACLMAR+2);                                 00612100
*/*PL.LL09 BIT XXXX1XXXXXXXXXXX--------------------------------------*/ 00612200
*          ANS('3 '!!XMFCTRL!!                                          00612300
*              '_XREQUEST_SWAP BIT(1), '!!                              00612400
*              '/* BIT */')                                             00612500
*              NORESCAN COL(MACLMAR+2);                                 00612600
*/*PL.LL09 BIT XXXXX1XXXXXXXXXX--------------------------------------*/ 00612700
*          ANS('3 '!!XMFCTRL!!                                          00612800
*              '_XREQUEST_OPTIONS BIT(1), '!!                           00612900
*              '/* BIT */')                                             00613000
*              NORESCAN COL(MACLMAR+2);                                 00613100
*/*PL.LL09 BIT XXXXXX1XXXXXXXXX--------------------------------------*/ 00613200
*          ANS('3 '!!XMFCTRL!!                                          00613300
*              '_XREQUEST_PUT BIT(1), '!!                               00613400
*              '/* BIT */')                                             00613500
*              NORESCAN COL(MACLMAR+2);                                 00613600
*/*PL.LL09 BIT XXXXXXX1XXXXXXXX--------------------------------------*/ 00613700
*          ANS('3 '!!XMFCTRL!!                                          00613800
*              '_XREQUEST_GET BIT(1), '!!                               00613900
*              '/* BIT */')                                             00614000
*              NORESCAN COL(MACLMAR+2);                                 00614100
*/*PL.LL09 BIT XXXXXXXX1XXXXXXX--------------------------------------*/ 00614200
*          ANS('3 '!!XMFCTRL!!                                          00614300
*              '_XREQUEST_QUERY BIT(1), '!!                             00614400
*              '/* BIT */')                                             00614500
*              NORESCAN COL(MACLMAR+2);                                 00614600
*/*PL.LL10 RESERVED BIT----------------------------------------------*/ 00614700
*          ANS('3 '!!XMFCTRL!!                                          00614800
*              '_XREQUEST_TYPE_RSVD2 BIT(7), '!!                        00614900
*              '/* BIT */')                                             00615000
*              NORESCAN COL(MACLMAR+2);                                 00615100
*/*PL.LL04  XMISC_FLAGS BIT(16) FIELD_LABEL--------------------------*/ 00615200
*        ANS('2 '!!XMFCTRL!!                                            00615300
*            '_XMISC_FLAGS BIT(16), '!!                                 00615400
*            '/* FIELD_LABEL */')                                       00615500
*            NORESCAN COL(MACLMAR+2);                                   00615600
*/*PL.LL09 BIT 1XXXXXXXXXXXXXXX--------------------------------------*/ 00615700
*          ANS('3 '!!XMFCTRL!!                                          00615800
*              '_KEYUSED_REQDSUB BIT(1), '!!                            00615900
*              '/* BIT */')                                             00616000
*              NORESCAN COL(MACLMAR+2);                                 00616100
*/*PL.LL09 BIT X1XXXXXXXXXXXXXX--------------------------------------*/ 00616200
*          ANS('3 '!!XMFCTRL!!                                          00616300
*              '_KEYUSED_COMMAND BIT(1), '!!                            00616400
*              '/* BIT */')                                             00616500
*              NORESCAN COL(MACLMAR+2);                                 00616600
*/*PL.LL09 BIT XX1XXXXXXXXXXXXX--------------------------------------*/ 00616700
*          ANS('3 '!!XMFCTRL!!                                          00616800
*              '_KEYUSED_SUBDATA1 BIT(1), '!!                           00616900
*              '/* BIT */')                                             00617000
*              NORESCAN COL(MACLMAR+2);                                 00617100
*/*PL.LL09 BIT XXX1XXXXXXXXXXXX--------------------------------------*/ 00617200
*          ANS('3 '!!XMFCTRL!!                                          00617300
*              '_KEYUSED_SUBDATA2 BIT(1), '!!                           00617400
*              '/* BIT */')                                             00617500
*              NORESCAN COL(MACLMAR+2);                                 00617600
*/*PL.LL06 RESERVED BIT----------------------------------------------*/ 00617700
*          ANS('3 '!!XMFCTRL!!                                          00617800
*              '_XMISC_FLAGS_RSVD1 BIT(2), '!!                          00617900
*              '/* BIT */')                                             00618000
*              NORESCAN COL(MACLMAR+2);                                 00618100
*/*PL.LL09 BIT XXXXXX1XXXXXXXXX--------------------------------------*/ 00618200
*          ANS('3 '!!XMFCTRL!!                                          00618300
*              '_XREQDSUB_MSTR BIT(1), '!!                              00618400
*              '/* BIT */')                                             00618500
*              NORESCAN COL(MACLMAR+2);                                 00618600
*/*PL.LL09 BIT XXXXXXX1XXXXXXXX--------------------------------------*/ 00618700
*          ANS('3 '!!XMFCTRL!!                                          00618800
*              '_XCOMMAND_YES BIT(1), '!!                               00618900
*              '/* BIT */')                                             00619000
*              NORESCAN COL(MACLMAR+2);                                 00619100
*/*PL.LL09 BIT XXXXXXXX1XXXXXXX--------------------------------------*/ 00619200
*          ANS('3 '!!XMFCTRL!!                                          00619300
*              '_KEYUSED_EVENTRTN BIT(1), '!!                           00619400
*              '/* BIT */')                                             00619500
*              NORESCAN COL(MACLMAR+2);                                 00619600
*/*PL.LL10 RESERVED BIT----------------------------------------------*/ 00619700
*          ANS('3 '!!XMFCTRL!!                                          00619800
*              '_XMISC_FLAGS_RSVD2 BIT(7), '!!                          00619900
*              '/* BIT */')                                             00620000
*              NORESCAN COL(MACLMAR+2);                                 00620100
*/*PL.LL13  XCONSNAME CHAR(8) INPUT----------------------------------*/ 00620200
*        ANS('2 '!!XMFCTRL                                              00620300
*         !! '_XCONSNAME CHAR(8), '                                     00620400
*         !! '/* '!!ZXCONSNAME                                          00620500
*         !! ' XCONSNAME */'                                            00620600
*            ) NORESCAN COL(MACLMAR+2);                                 00620700
*/*PL.LL13  XINITRTN CHAR(8) INPUT-----------------------------------*/ 00620800
*        ANS('2 '!!XMFCTRL                                              00620900
*         !! '_XINITRTN CHAR(8), '                                      00621000
*         !! '/* '!!ZXINITRTN                                           00621100
*         !! ' XINITRTN */'                                             00621200
*            ) NORESCAN COL(MACLMAR+2);                                 00621300
*/*PL.LL13 ADDR XINITPARM PTR(31) INPUT ADDR-------------------------*/ 00621400
*        ANS('2 '!!XMFCTRL                                              00621500
*         !! '_XINITPARM_ADDR PTR(31), '                                00621600
*         !! '/* '!!ZXINITPARM_ADDR                                     00621700
*         !! ' XINITPARM_ADDR */'                                       00621800
*            ) NORESCAN COL(MACLMAR+2);                                 00621900
*/*PL.LL13  XINITPLEN FIXED(31) INPUT--------------------------------*/ 00622000
*        ANS('2 '!!XMFCTRL                                              00622100
*         !! '_XINITPLEN FIXED(31), '                                   00622200
*         !! '/* '!!ZXINITPLEN                                          00622300
*         !! ' XINITPLEN */'                                            00622400
*            ) NORESCAN COL(MACLMAR+2);                                 00622500
*/*PL.LL13  XEVENTRTN CHAR(8) INPUT----------------------------------*/ 00622600
*        ANS('2 '!!XMFCTRL                                              00622700
*         !! '_XEVENTRTN CHAR(8), '                                     00622800
*         !! '/* '!!ZXEVENTRTN                                          00622900
*         !! ' XEVENTRTN */'                                            00623000
*            ) NORESCAN COL(MACLMAR+2);                                 00623100
*/*PL.LL13  XINTOKEN BIT(32) INPUT-----------------------------------*/ 00623200
*        ANS('2 '!!XMFCTRL                                              00623300
*         !! '_XINTOKEN BIT(32), '                                      00623400
*         !! '/* '!!ZXINTOKEN                                           00623500
*         !! ' XINTOKEN */'                                             00623600
*            ) NORESCAN COL(MACLMAR+2);                                 00623700
*/*PL.LL13  XWORKASP FIXED(8) INPUT----------------------------------*/ 00623800
*        ANS('2 '!!XMFCTRL                                              00623900
*         !! '_XWORKASP FIXED(8), '                                     00624000
*         !! '/* '!!ZXWORKASP                                           00624100
*         !! ' XWORKASP */'                                             00624200
*            ) NORESCAN COL(MACLMAR+2);                                 00624300
*/*PL.LL13  XRSV0004 CHAR(3) RESERVED--------------------------------*/ 00624400
*        ANS('2 '!!XMFCTRL                                              00624500
*         !! '_XRSV0004 CHAR(3), '                                      00624600
*         !! '/* RESERVED */'                                           00624700
*            ) NORESCAN COL(MACLMAR+2);                                 00624800
*/*PL.LL13  XRSV0008 CHAR(20) RESERVED-------------------------------*/ 00624900
*        ANS('2 '!!XMFCTRL                                              00625000
*         !! '_XRSV0008 CHAR(20), '                                     00625100
*         !! '/* RESERVED */'                                           00625200
*            ) NORESCAN COL(MACLMAR+2);                                 00625300
*/*PL.LL13  XRSV0005 CHAR(4) RESERVED--------------------------------*/ 00625400
*        ANS('2 '!!XMFCTRL                                              00625500
*         !! '_XRSV0005 CHAR(4), '                                      00625600
*         !! '/* RESERVED */'                                           00625700
*            ) NORESCAN COL(MACLMAR+2);                                 00625800
*/*PL.LL13  XOUTTOKEN BIT(32) OUTPUT---------------------------------*/ 00625900
*        ANS('2 '!!XMFCTRL                                              00626000
*         !! '_XOUTTOKEN BIT(32), '                                     00626100
*         !! '/* '!!ZXOUTTOKEN                                          00626200
*         !! ' XOUTTOKEN */'                                            00626300
*            ) NORESCAN COL(MACLMAR+2);                                 00626400
*/*PL.LL13  XWORKAREA PTR(31) OUTPUT---------------------------------*/ 00626500
*        ANS('2 '!!XMFCTRL                                              00626600
*         !! '_XWORKAREA PTR(31), '                                     00626700
*         !! '/* '!!ZXWORKAREA                                          00626800
*         !! ' XWORKAREA */'                                            00626900
*            ) NORESCAN COL(MACLMAR+2);                                 00627000
*/*PL.LL13  XSUBDATA1 CHAR(4) INPUT----------------------------------*/ 00627100
*        ANS('2 '!!XMFCTRL                                              00627200
*         !! '_XSUBDATA1 CHAR(4), '                                     00627300
*         !! '/* '!!ZXSUBDATA1                                          00627400
*         !! ' XSUBDATA1 */'                                            00627500
*            ) NORESCAN COL(MACLMAR+2);                                 00627600
*/*PL.LL13  XSUBDATA2 CHAR(4) INPUT----------------------------------*/ 00627700
*        ANS('2 '!!XMFCTRL                                              00627800
*         !! '_XSUBDATA2 CHAR(4), '                                     00627900
*         !! '/* '!!ZXSUBDATA2                                          00628000
*         !! ' XSUBDATA2 */'                                            00628100
*            ) NORESCAN COL(MACLMAR+2);                                 00628200
*/*PL.LL13  XRSV0006 CHAR(4) RESERVED--------------------------------*/ 00628300
*        ANS('2 '!!XMFCTRL                                              00628400
*         !! '_XRSV0006 CHAR(4), '                                      00628500
*         !! '/* RESERVED */'                                           00628600
*            ) NORESCAN COL(MACLMAR+2);                                 00628700
*/*PL.LL13  XPLISTPTR PTR(31) INPUT----------------------------------*/ 00628800
*        ANS('2 '!!XMFCTRL                                              00628900
*         !! '_XPLISTPTR PTR(31), '                                     00629000
*         !! '/* '!!ZXPLISTPTR                                          00629100
*         !! ' XPLISTPTR */'                                            00629200
*            ) NORESCAN COL(MACLMAR+2);                                 00629300
*/*PL.LL18 ----------------------------------------------------------*/ 00629400
*        ANS('2 * CHAR(0);')                                            00629500
*            NORESCAN COL(MACLMAR+2);                                   00629600
*/*PL.LL17 END OF MF=L PARAMETER LIST--------------------------------*/ 00629700
*      END;                                                             00629800
*/*PL.L01 MACRO WORK VARIABLES---------------------------------------*/ 00629900
*  DCL ZPRMLINE CHAR;          /* ZPRM ARRAY ENTRY ACCUMULATOR      */  00630000
*  DEACT ZPRMLINE;                                                      00630100
*  DCL ZNDX CHAR;              /* UNIQUE LIST STRUCTURE NAME        */  00630200
*  DEACT ZNDX;                                                          00630300
*  ZNDX=MACINDEX;              /* MACINDEX                          */  00630400
*  DCL XVERSION CHAR;                                                   00630500
*  DEACT XVERSION;                                                      00630600
*/*PL.L02 ?IEFSSI PARAMETER LIST-------------------------------------*/ 00630700
*  IF XMF^='L'                                                          00630800
*    THEN                                                               00630900
*      DO;                                                              00631000
*/*PL.L03 ?IEFSSI PARAMETER LIST-------------------------------------*/ 00631100
*        IF XMF='S'                                                     00631200
*          THEN                                                         00631300
*            XMFCTRL='#ZPLIST';                                         00631400
*/*PL.L04 ?IEFSSI PARAMETER LIST-------------------------------------*/ 00631500
*        ZPRMLINE='DCL 1 #Z'!!ZNDX!!' DEF('!!                           00631600
*                 XMFCTRL!!'),'!!                                       00631700
*                 ' /* ?IEFSSI PARM LIST*/';                            00631800
*/*PL.L08  XSSI_PLIST_ID CHAR(4) CONSTANT----------------------------*/ 00631900
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00632000
*                 '_XSSI_PLIST_ID CHAR(4), '!!                          00632100
*                 '/* '!!ZXSSI_PLIST_ID!!                               00632200
*                 ' XSSI_PLIST_ID */';                                  00632300
*/*PL.L05  XPLISTLEN FIXED(16) BDY(BYTE) INPUT-----------------------*/ 00632400
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00632500
*                 '_XPLISTLEN FIXED(16) BDY(BYTE), '!!                  00632600
*                 '/* INPUT XPLISTLEN*/';                               00632700
*/*PL.L05  XVERSION FIXED(8) INPUT-----------------------------------*/ 00632800
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00632900
*                 '_XVERSION FIXED(8), '!!                              00633000
*                 '/* INPUT XVERSION*/';                                00633100
*/*PL.L08  XRSV0001 CHAR(1) RESERVED---------------------------------*/ 00633200
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00633300
*                 '_XRSV0001 CHAR(1), '!!                               00633400
*                 '/* RESERVED */';                                     00633500
*/*PL.L08  XSUBNAME CHAR(4) INPUT------------------------------------*/ 00633600
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00633700
*                 '_XSUBNAME CHAR(4), '!!                               00633800
*                 '/* '!!ZXSUBNAME!!                                    00633900
*                 ' XSUBNAME */';                                       00634000
*/*PL.L08  XRSV0002 CHAR(4) RESERVED---------------------------------*/ 00634100
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00634200
*                 '_XRSV0002 CHAR(4), '!!                               00634300
*                 '/* RESERVED */';                                     00634400
*/*PL.L08  XREQUEST_TYPE BIT(16) FIELD_LABEL-------------------------*/ 00634500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00634600
*                 '_XREQUEST_TYPE BIT(16), '!!                          00634700
*                 '/* FIELD_LABEL */';                                  00634800
*/*PL.L08  XMISC_FLAGS BIT(16) FIELD_LABEL---------------------------*/ 00634900
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00635000
*                 '_XMISC_FLAGS BIT(16), '!!                            00635100
*                 '/* FIELD_LABEL */';                                  00635200
*/*PL.L08  XCONSNAME CHAR(8) INPUT-----------------------------------*/ 00635300
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00635400
*                 '_XCONSNAME CHAR(8), '!!                              00635500
*                 '/* '!!ZXCONSNAME!!                                   00635600
*                 ' XCONSNAME */';                                      00635700
*/*PL.L08  XINITRTN CHAR(8) INPUT------------------------------------*/ 00635800
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00635900
*                 '_XINITRTN CHAR(8), '!!                               00636000
*                 '/* '!!ZXINITRTN!!                                    00636100
*                 ' XINITRTN */';                                       00636200
*/*PL.L08 ADDR XINITPARM PTR(31) INPUT ADDR--------------------------*/ 00636300
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00636400
*                 '_XINITPARM_ADDR PTR(31), '!!                         00636500
*                 '/* '!!ZXINITPARM_ADDR!!                              00636600
*                 ' XINITPARM_ADDR */';                                 00636700
*/*PL.L08  XINITPLEN FIXED(31) INPUT---------------------------------*/ 00636800
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00636900
*                 '_XINITPLEN FIXED(31), '!!                            00637000
*                 '/* '!!ZXINITPLEN!!                                   00637100
*                 ' XINITPLEN */';                                      00637200
*/*PL.L08  XEVENTRTN CHAR(8) INPUT-----------------------------------*/ 00637300
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00637400
*                 '_XEVENTRTN CHAR(8), '!!                              00637500
*                 '/* '!!ZXEVENTRTN!!                                   00637600
*                 ' XEVENTRTN */';                                      00637700
*/*PL.L08  XINTOKEN BIT(32) INPUT------------------------------------*/ 00637800
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00637900
*                 '_XINTOKEN BIT(32), '!!                               00638000
*                 '/* '!!ZXINTOKEN!!                                    00638100
*                 ' XINTOKEN */';                                       00638200
*/*PL.L08  XWORKASP FIXED(8) INPUT-----------------------------------*/ 00638300
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00638400
*                 '_XWORKASP FIXED(8), '!!                              00638500
*                 '/* '!!ZXWORKASP!!                                    00638600
*                 ' XWORKASP */';                                       00638700
*/*PL.L08  XRSV0004 CHAR(3) RESERVED---------------------------------*/ 00638800
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00638900
*                 '_XRSV0004 CHAR(3), '!!                               00639000
*                 '/* RESERVED */';                                     00639100
*/*PL.L08  XRSV0008 CHAR(20) RESERVED--------------------------------*/ 00639200
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00639300
*                 '_XRSV0008 CHAR(20), '!!                              00639400
*                 '/* RESERVED */';                                     00639500
*/*PL.L08  XRSV0005 CHAR(4) RESERVED---------------------------------*/ 00639600
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00639700
*                 '_XRSV0005 CHAR(4), '!!                               00639800
*                 '/* RESERVED */';                                     00639900
*/*PL.L08  XOUTTOKEN BIT(32) OUTPUT----------------------------------*/ 00640000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00640100
*                 '_XOUTTOKEN BIT(32), '!!                              00640200
*                 '/* '!!ZXOUTTOKEN!!                                   00640300
*                 ' XOUTTOKEN */';                                      00640400
*/*PL.L08  XWORKAREA PTR(31) OUTPUT----------------------------------*/ 00640500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00640600
*                 '_XWORKAREA PTR(31), '!!                              00640700
*                 '/* '!!ZXWORKAREA!!                                   00640800
*                 ' XWORKAREA */';                                      00640900
*/*PL.L09  XSUBDATA1 CHAR(4) INPUT-----------------------------------*/ 00641000
*        ZPRMNUM=ZPRMNUM+1;                                             00641100
*        ZPRM(ZPRMNUM)=ZPRMLINE!!' 2 #Z'!!ZNDX!!                        00641200
*            '_XSUBDATA1 CHAR(4), '!!                                   00641300
*            '/* '!!ZXSUBDATA1!!                                        00641400
*            ' XSUBDATA1 */';                                           00641500
*        ZPRMLINE='';                                                   00641600
*/*PL.L08  XSUBDATA2 CHAR(4) INPUT-----------------------------------*/ 00641700
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00641800
*                 '_XSUBDATA2 CHAR(4), '!!                              00641900
*                 '/* '!!ZXSUBDATA2!!                                   00642000
*                 ' XSUBDATA2 */';                                      00642100
*/*PL.L08  XRSV0006 CHAR(4) RESERVED---------------------------------*/ 00642200
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00642300
*                 '_XRSV0006 CHAR(4), '!!                               00642400
*                 '/* RESERVED */';                                     00642500
*/*PL.L08  XPLISTPTR PTR(31) INPUT-----------------------------------*/ 00642600
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00642700
*                 '_XPLISTPTR PTR(31), '!!                              00642800
*                 '/* '!!ZXPLISTPTR!!                                   00642900
*                 ' XPLISTPTR */';                                      00643000
*/*PL.L11 CONSTANT TO ENSURE THAT LIST FORM IS LONG ENOUGH ----------*/ 00643100
*        ZPRMNUM=ZPRMNUM+1;                                             00643200
*        ZPRM(ZPRMNUM)=ZPRMLINE!!' 2 * CHAR(0);';                       00643300
*        IF XPLISTVER^=1                                                00643400
*           & XMF^='S'                                                  00643500
*          THEN                                                         00643600
*            DO;                                                        00643700
*              ZPRMNUM=ZPRMNUM+1;                                       00643800
*              ZPRM(ZPRMNUM)=                                           00643900
*               'DCL #Z'!!ZNDX!!'_LENCHECK FIXED(32) CONSTANT('!!       00644000
*               'LENGTH('!!XMFCTRL!!')-LENGTH(#Z'!!ZNDX!!'));'!!        00644100
*               '/* CONSTANT TO ENSURE THAT THE LIST FORM'!!            00644200
*               ' IS LONG ENOUGH */';                                   00644300
*            END;                                                       00644400
*/*PL.L12 PARAMETER LIST SIZE----------------------------------------*/ 00644500
*        ZPLLEN=108;                                                    00644600
*        IF ZPRMMAX<ZPLLEN                                              00644700
*           & XMF^='E'                                                  00644800
*          THEN                                                         00644900
*            ZPRMMAX=ZPLLEN;                                            00645000
*/*PL.L13 -----------------------------------------------------------*/ 00645100
*      END;                                                             00645200
*/*PI.L01 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00645300
*  IF XMF^='L'                                                          00645400
*    THEN                                                               00645500
*      DO;                                                              00645600
*/*PI.L03 CLEAR PARAMETER LIST --------------------------------------*/ 00645700
*            ANS('#Z'!!ZNDX!!'=''''B;'!!                                00645800
*                '/* CLEAR PARAMETER AREA */')                          00645900
*                NORESCAN COL(MACLMAR);                                 00646000
*/*PI.L28 XSSI_PLIST_ID  CHAR(4)-------------------------------------*/ 00646100
*        ANS('#Z'!!ZNDX!!'_XSSI_PLIST_ID=''SIPL'';'!!                   00646200
*            '/* XSSI_PLIST_ID CHAR(4) CONSTANT */')                    00646300
*            NORESCAN COL(MACLMAR);                                     00646400
*/*PI.L05C XPLISTLEN FIXED(16)---------------------------------------*/ 00646500
*        ANS('#Z'!!ZNDX!!'_XPLISTLEN=LENGTH(#Z'!!ZNDX!!');'!!           00646600
*            '/* XPLISTLEN FIXED(16) */')                               00646700
*            NORESCAN COL(MACLMAR);                                     00646800
*/*PI.L05B XVERSION FIXED(8)-----------------------------------------*/ 00646900
*        IF XPLISTVER^=0                                                00647000
*          THEN                                                         00647100
*            ANS('#Z'!!ZNDX!!'_XVERSION='!!CHAR(XPLISTVER)!!'; '!!      00647200
*                '/* XVERSION FIXED(8) */')                             00647300
*                NORESCAN COL(MACLMAR);                                 00647400
*/*PI.L21 XSUBNAME NAME CHAR(4)--------------------------------------*/ 00647500
*        IF ZXSUBNAME='INPUT' !                                         00647600
*           ZXSUBNAME='INOUT'                                           00647700
*          THEN                                                         00647800
*            ANS('#Z'!!ZNDX!!'_XSUBNAME='!!                             00647900
*                XSUBNAME!!';'!!                                        00648000
*                '/* XSUBNAME CHAR(4) */')                              00648100
*                NORESCAN COL(MACLMAR);                                 00648200
*/*PI.L06 XREQUEST_TYPE BIT(16)--------------------------------------*/ 00648300
*        ZW='';                                                         00648400
*        ZMS='';                                                        00648500
*/*PI.L07 XREQUEST_TYPE BIT(16) 1XXXXXXXXXXXXXXX---------------------*/ 00648600
*        IF XREQUEST='ADD'                                              00648700
*          THEN                                                         00648800
*            ZW=ZW!!'1';                                                00648900
*          ELSE                                                         00649000
*            ZW=ZW!!'0';                                                00649100
*/*PI.L07 XREQUEST_TYPE BIT(16) X1XXXXXXXXXXXXXX---------------------*/ 00649200
*        IF XREQUEST='ACTIVATE'                                         00649300
*          THEN                                                         00649400
*            ZW=ZW!!'1';                                                00649500
*          ELSE                                                         00649600
*            ZW=ZW!!'0';                                                00649700
*/*PI.L07 XREQUEST_TYPE BIT(16) XX1XXXXXXXXXXXXX---------------------*/ 00649800
*        IF XREQUEST='DEACTIVATE'                                       00649900
*          THEN                                                         00650000
*            ZW=ZW!!'1';                                                00650100
*          ELSE                                                         00650200
*            ZW=ZW!!'0';                                                00650300
*/*PI.L07 XREQUEST_TYPE BIT(16) XXXX1XXXXXXXXXXX---------------------*/ 00650400
*        IF XREQUEST='SWAP'                                             00650500
*          THEN                                                         00650600
*            ZW=ZW!!'01';                                               00650700
*          ELSE                                                         00650800
*            ZW=ZW!!'00';                                               00650900
*/*PI.L07 XREQUEST_TYPE BIT(16) XXXXX1XXXXXXXXXX---------------------*/ 00651000
*        IF XREQUEST='OPTIONS'                                          00651100
*          THEN                                                         00651200
*            ZW=ZW!!'1';                                                00651300
*          ELSE                                                         00651400
*            ZW=ZW!!'0';                                                00651500
*/*PI.L07 XREQUEST_TYPE BIT(16) XXXXXX1XXXXXXXXX---------------------*/ 00651600
*        IF XREQUEST='PUT'                                              00651700
*          THEN                                                         00651800
*            ZW=ZW!!'1';                                                00651900
*          ELSE                                                         00652000
*            ZW=ZW!!'0';                                                00652100
*/*PI.L07 XREQUEST_TYPE BIT(16) XXXXXXX1XXXXXXXX---------------------*/ 00652200
*        IF XREQUEST='GET'                                              00652300
*          THEN                                                         00652400
*            ZW=ZW!!'1';                                                00652500
*          ELSE                                                         00652600
*            ZW=ZW!!'0';                                                00652700
*/*PI.L07 XREQUEST_TYPE BIT(16) XXXXXXXX1XXXXXXX---------------------*/ 00652800
*        IF XREQUEST='QUERY'                                            00652900
*          THEN                                                         00653000
*            ZW=ZW!!'10000000';                                         00653100
*          ELSE                                                         00653200
*            ZW=ZW!!'00000000';                                         00653300
*/*PI.L09 XREQUEST_TYPE BIT(16)--------------------------------------*/ 00653400
*        IF INDEX(ZW,'1')^=0                                            00653500
*          THEN                                                         00653600
*            ANS('#Z'!!ZNDX!!'_XREQUEST_TYPE='!!                        00653700
*                '#Z'!!ZNDX!!'_XREQUEST_TYPE ! '!!                      00653800
*                ''''!!ZW!!'''B; '!!                                    00653900
*                '/* BIT(16) */')                                       00654000
*                NORESCAN COL(MACLMAR);                                 00654100
*/*PI.L06 XMISC_FLAGS BIT(16)----------------------------------------*/ 00654200
*        ZW='';                                                         00654300
*        ZMS='';                                                        00654400
*/*PI.L07 XMISC_FLAGS BIT(16) 1XXXXXXXXXXXXXXX-----------------------*/ 00654500
*        IF REQDSUB^=''                                                 00654600
*          THEN                                                         00654700
*            ZW=ZW!!'1';                                                00654800
*          ELSE                                                         00654900
*            ZW=ZW!!'0';                                                00655000
*/*PI.L07 XMISC_FLAGS BIT(16) X1XXXXXXXXXXXXXX-----------------------*/ 00655100
*        IF COMMAND^=''                                                 00655200
*          THEN                                                         00655300
*            ZW=ZW!!'1';                                                00655400
*          ELSE                                                         00655500
*            ZW=ZW!!'0';                                                00655600
*/*PI.L07 XMISC_FLAGS BIT(16) XX1XXXXXXXXXXXXX-----------------------*/ 00655700
*        IF SUBDATA1^=''                                                00655800
*          THEN                                                         00655900
*            ZW=ZW!!'1';                                                00656000
*          ELSE                                                         00656100
*            ZW=ZW!!'0';                                                00656200
*/*PI.L07 XMISC_FLAGS BIT(16) XXX1XXXXXXXXXXXX-----------------------*/ 00656300
*        IF SUBDATA2^=''                                                00656400
*          THEN                                                         00656500
*            ZW=ZW!!'1';                                                00656600
*          ELSE                                                         00656700
*            ZW=ZW!!'0';                                                00656800
*/*PI.L07 XMISC_FLAGS BIT(16) XXXXXX1XXXXXXXXX-----------------------*/ 00656900
*        IF XREQDSUB='MSTR'                                             00657000
*          THEN                                                         00657100
*            ZW=ZW!!'001';                                              00657200
*          ELSE                                                         00657300
*            ZW=ZW!!'000';                                              00657400
*/*PI.L07 XMISC_FLAGS BIT(16) XXXXXXX1XXXXXXXX-----------------------*/ 00657500
*        IF XCOMMAND='YES'                                              00657600
*          THEN                                                         00657700
*            ZW=ZW!!'1';                                                00657800
*          ELSE                                                         00657900
*            ZW=ZW!!'0';                                                00658000
*/*PI.L07 XMISC_FLAGS BIT(16) XXXXXXXX1XXXXXXX-----------------------*/ 00658100
*        IF EVENTRTN^=''                                                00658200
*          THEN                                                         00658300
*            ZW=ZW!!'10000000';                                         00658400
*          ELSE                                                         00658500
*            ZW=ZW!!'00000000';                                         00658600
*/*PI.L09 XMISC_FLAGS BIT(16)----------------------------------------*/ 00658700
*        IF INDEX(ZW,'1')^=0                                            00658800
*          THEN                                                         00658900
*            ANS('#Z'!!ZNDX!!'_XMISC_FLAGS='!!                          00659000
*                '#Z'!!ZNDX!!'_XMISC_FLAGS ! '!!                        00659100
*                ''''!!ZW!!'''B; '!!                                    00659200
*                '/* BIT(16) */')                                       00659300
*                NORESCAN COL(MACLMAR);                                 00659400
*/*PI.L21 XCONSNAME NAME CHAR(8)-------------------------------------*/ 00659500
*        IF ZXCONSNAME='INPUT' !                                        00659600
*           ZXCONSNAME='INOUT'                                          00659700
*          THEN                                                         00659800
*            IF XCONSNAME^='0'                                          00659900
*              THEN                                                     00660000
*                ANS('#Z'!!ZNDX!!'_XCONSNAME='!!                        00660100
*                    XCONSNAME!!';'!!                                   00660200
*                    '/* XCONSNAME CHAR(8) */')                         00660300
*                    NORESCAN COL(MACLMAR);                             00660400
*/*PI.L14 CHECK FOR * AS THE CHAR(8) ARGUMENT------------------------*/ 00660500
*        IF XINITRTN='NO_INITRTN'                                       00660600
*          THEN                                                         00660700
*            ZXINITRTN='';                   /* RESET INPUT/INOUT */    00660800
*/*PI.L21 XINITRTN NAME CHAR(8)--------------------------------------*/ 00660900
*        IF ZXINITRTN='INPUT' !                                         00661000
*           ZXINITRTN='INOUT'                                           00661100
*          THEN                                                         00661200
*            ANS('#Z'!!ZNDX!!'_XINITRTN='!!                             00661300
*                XINITRTN!!';'!!                                        00661400
*                '/* XINITRTN CHAR(8) */')                              00661500
*                NORESCAN COL(MACLMAR);                                 00661600
*/*PI.L14 CHECK FOR * AS THE CHAR(60) ARGUMENT-----------------------*/ 00661700
*        IF XINITPARM='NO_INITPARM'                                     00661800
*          THEN                                                         00661900
*            ZXINITPARM='';                  /* RESET INPUT/INOUT */    00662000
*/*PI.L15 ADDR(XINITPARM) CHAR(60)-----------------------------------*/ 00662100
*        IF ZXINITPARM^=''                                              00662200
*          THEN                                                         00662300
*            ANS('#Z'!!ZNDX!!'_XINITPARM_ADDR='!!                       00662400
*                'ADDR('!!XINITPARM!!');'!!                             00662500
*                '/* ADDR XINITPARM CHAR(60) */')                       00662600
*                NORESCAN COL(MACLMAR);                                 00662700
*/*PI.L17 XINITPLEN FIXED(31)----------------------------------------*/ 00662800
*        IF ZXINITPLEN='INPUT' !                                        00662900
*           ZXINITPLEN='INOUT'                                          00663000
*          THEN                                                         00663100
*            ANS('#Z'!!ZNDX!!'_XINITPLEN='!!                            00663200
*                XINITPLEN!!';'!!                                       00663300
*                '/* XINITPLEN FIXED(31) */')                           00663400
*                NORESCAN COL(MACLMAR);                                 00663500
*/*PI.L14 CHECK FOR * AS THE CHAR(8) ARGUMENT------------------------*/ 00663600
*        IF XEVENTRTN='NO_EVENTRTN'                                     00663700
*          THEN                                                         00663800
*            ZXEVENTRTN='';                  /* RESET INPUT/INOUT */    00663900
*/*PI.L21 XEVENTRTN NAME CHAR(8)-------------------------------------*/ 00664000
*        IF ZXEVENTRTN='INPUT' !                                        00664100
*           ZXEVENTRTN='INOUT'                                          00664200
*          THEN                                                         00664300
*            ANS('#Z'!!ZNDX!!'_XEVENTRTN='!!                            00664400
*                XEVENTRTN!!';'!!                                       00664500
*                '/* XEVENTRTN CHAR(8) */')                             00664600
*                NORESCAN COL(MACLMAR);                                 00664700
*/*PI.L14 CHECK FOR * AS THE BIT(32) ARGUMENT------------------------*/ 00664800
*        IF XINTOKEN='NO_INPUT_TOKEN'                                   00664900
*          THEN                                                         00665000
*            ZXINTOKEN='';                   /* RESET INPUT/INOUT */    00665100
*/*PI.L19 XINTOKEN NAME BIT(32)--------------------------------------*/ 00665200
*        IF ZXINTOKEN='INPUT' !                                         00665300
*           ZXINTOKEN='INOUT'                                           00665400
*          THEN                                                         00665500
*            IF (XINTOKEN(1:1)^='0' &                                   00665600
*               XINTOKEN(1:1)^='1')                                     00665700
*              THEN                                                     00665800
*                ANS('#Z'!!ZNDX!!'_XINTOKEN='!!                         00665900
*                    XINTOKEN!!';'!!                                    00666000
*                    '/* XINTOKEN BIT(32) */')                          00666100
*                    NORESCAN COL(MACLMAR);                             00666200
*              ELSE                                                     00666300
*                ANS('#Z'!!ZNDX!!'_XINTOKEN='!!                         00666400
*                    ''''!!XINTOKEN!!'''B;'!!                           00666500
*                    '/* XINTOKEN BIT(32) */')                          00666600
*                    NORESCAN COL(MACLMAR);                             00666700
*/*PI.L17 XWORKASP FIXED(8)------------------------------------------*/ 00666800
*        IF ZXWORKASP='INPUT' !                                         00666900
*           ZXWORKASP='INOUT'                                           00667000
*          THEN                                                         00667100
*            IF XWORKASP^='0'                                           00667200
*              THEN                                                     00667300
*                ANS('#Z'!!ZNDX!!'_XWORKASP='!!                         00667400
*                    XWORKASP!!';'!!                                    00667500
*                    '/* XWORKASP FIXED(8) */')                         00667600
*                    NORESCAN COL(MACLMAR);                             00667700
*/*PI.L21 XSUBDATA1 NAME CHAR(4)-------------------------------------*/ 00667800
*        IF ZXSUBDATA1='INPUT' !                                        00667900
*           ZXSUBDATA1='INOUT'                                          00668000
*          THEN                                                         00668100
*            ANS('#Z'!!ZNDX!!'_XSUBDATA1='!!                            00668200
*                XSUBDATA1!!';'!!                                       00668300
*                '/* XSUBDATA1 CHAR(4) */')                             00668400
*                NORESCAN COL(MACLMAR);                                 00668500
*/*PI.L21 XSUBDATA2 NAME CHAR(4)-------------------------------------*/ 00668600
*        IF ZXSUBDATA2='INPUT' !                                        00668700
*           ZXSUBDATA2='INOUT'                                          00668800
*          THEN                                                         00668900
*            ANS('#Z'!!ZNDX!!'_XSUBDATA2='!!                            00669000
*                XSUBDATA2!!';'!!                                       00669100
*                '/* XSUBDATA2 CHAR(4) */')                             00669200
*                NORESCAN COL(MACLMAR);                                 00669300
*/*PI.L31 INVOKE FUNCTION--------------------------------------------*/ 00669400
*              IF NUMBER(RSNCODE)>0                                     00669500
*                THEN                                                   00669600
*                  ANS('RFY GPR00F RSTD;') NORESCAN COL(MACLMAR);       00669700
*              IF NUMBER(RETCODE)>0                                     00669800
*                THEN                                                   00669900
*                  ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);       00670000
*              ANS('RFY GPR01P RSTD;') NORESCAN COL(MACLMAR);           00670100
*              ANS('#Z'!!ZNDX!!'_XPLISTPTR=ADDR(#Z'!!ZNDX!!');'!!       00670200
*                  '/* STORE PARM LIST ADDR */')                        00670300
*                  NORESCAN COL(MACLMAR);                               00670400
*              ANS('GPR01P=ADDR(#Z'!!ZNDX!!'_XPLISTPTR);'!!             00670500
*                  '/* LOAD PARM LIST ADDR INTO R1*/')                  00670600
*                  NORESCAN COL(MACLMAR);                               00670700
*              IF SYSASCE^='P'                                          00670800
*                THEN                                                   00670900
*                  ANS('SAR(GPR01P,ALET(#Z'!!ZNDX!!'));'!!              00671000
*                      '/* PARAMETER LIST AR */')                       00671100
*                      NORESCAN COL(MACLMAR);                           00671200
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00671300
*/********************************************************************/ 00671400
*/* If this is an OPTIONS request, ensure that at least one of   @P1A*/ 00671500
*/* the associated keys was specified.   (AMG can't do this.)    @P1A*/ 00671600
*/********************************************************************/ 00671700
*IF (XREQUEST = 'OPTIONS' &                                             00671800
*    (REQDSUB = '' & COMMAND='' & EVENTRTN='')) THEN                    00671900
*  DO;                              /* Issue error message           */ 00672000
*    ZMS=' 8, ONE OR MORE OF THE FOLLOWING KEY(S) IS REQUIRED: ' !!     00672100
*        '"REQDSUB, COMMAND, EVENTRTN"';                                00672200
*    ANS MSG('?IEFSSVTI ---> '!!ZMS);                                   00672300
*    ANS(COMMENT(ZMS)) COL(MACLMAR);                                    00672400
*    ZMACRET=8;                     /* Macro error                   */ 00672500
*  END;                             /* Issue error message           */ 00672600
*/********************************************************************/ 00672700
*/* Invoke IEFSSI service routine                                    */ 00672800
*/********************************************************************/ 00672900
*DCL EHAMAPS CHAR EXT;              /*                           @P2A*/ 00673000
*IF INDEX(EHAMAPS,'XM@')=0 THEN                                         00673100
*    EHAMAPS=EHAMAPS!!'XM@,';       /*                           @P2A*/ 00673200
*                                                                       00673300
*ANS('RFY GPR15F RSTD;') NOSCAN COL(MACCOL+2);                          00673400
*ANS('IF (XM@CVT->CVTJESCT->JESCTEXT->JESSSIPC ^= 0) THEN')             00673500
*   NOSCAN COL(MACCOL+2);           /*                           @P4C*/ 00673600
*ANS('/* Test whether service available */') NOSCAN COL(37);            00673700
*                                                                       00673800
*ANS('PC(XM@CVT->CVTJESCT->JESCTEXT->JESSSIPC);')                       00673900
*    NOSCAN COL(MACCOL+4);          /*                           @P4C*/ 00674000
*ANS('/* Process service request */') NOSCAN COL(37);                   00674100
*                                                                       00674200
*ANS('ELSE') NOSCAN COL(MACCOL+2);                            /* @P4C*/ 00674300
*ANS('/* Service not available */') NOSCAN COL(37);                     00674400
*                                                                       00674500
*ANS('GPR15F = IEFSSI_UNAVAILABLE;') NOSCAN COL(MACCOL+4);    /* @P4C*/ 00674600
*ANS('/* Indicate service not available */') NOSCAN COL(37);            00674700
*ANS('RFY GPR15F UNRSTD;') NOSCAN COL(MACCOL+2);                        00674800
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00674900
*              ANS('RFY GPR01P UNRSTD;') NORESCAN COL(MACLMAR);         00675000
*/*PO.L04 XOUTTOKEN BIT(32)------------------------------------------*/ 00675100
*              IF ZXOUTTOKEN='OUTPUT' !                                 00675200
*                 ZXOUTTOKEN='INOUT'                                    00675300
*                THEN                                                   00675400
*                  ANS(XOUTTOKEN!!                                      00675500
*                      '=#Z'!!ZNDX!!'_XOUTTOKEN;'!!                     00675600
*                      '/* XOUTTOKEN BIT(32) */')                       00675700
*                      NORESCAN COL(MACLMAR);                           00675800
*/*PO.L02 XWORKAREA PTR(31)------------------------------------------*/ 00675900
*              IF ZXWORKAREA='OUTPUT' !                                 00676000
*                 ZXWORKAREA='INOUT'                                    00676100
*                THEN                                                   00676200
*                  ANS(XWORKAREA!!                                      00676300
*                      '=#Z'!!ZNDX!!'_XWORKAREA;'!!                     00676400
*                      '/* XWORKAREA PTR(31) */')                       00676500
*                      NORESCAN COL(MACLMAR);                           00676600
*/*PO.L05 XSUBDATA1 CHAR(4)------------------------------------------*/ 00676700
*              IF ZXSUBDATA1='OUTPUT' !                                 00676800
*                 ZXSUBDATA1='INOUT'                                    00676900
*                THEN                                                   00677000
*                  ANS(XSUBDATA1!!                                      00677100
*                      '=#Z'!!ZNDX!!'_XSUBDATA1;'!!                     00677200
*                      '/* XSUBDATA1 CHAR(4) */')                       00677300
*                      NORESCAN COL(MACLMAR);                           00677400
*/*PO.L05 XSUBDATA2 CHAR(4)------------------------------------------*/ 00677500
*              IF ZXSUBDATA2='OUTPUT' !                                 00677600
*                 ZXSUBDATA2='INOUT'                                    00677700
*                THEN                                                   00677800
*                  ANS(XSUBDATA2!!                                      00677900
*                      '=#Z'!!ZNDX!!'_XSUBDATA2;'!!                     00678000
*                      '/* XSUBDATA2 CHAR(4) */')                       00678100
*                      NORESCAN COL(MACLMAR);                           00678200
*/*PO.L08 XRETCODE RETURN CODE---------------------------------------*/ 00678300
*              IF NUMBER(RETCODE)>0                                     00678400
*                THEN                                                   00678500
*                    ANS(XRETCODE!!                                     00678600
*                     '=GPR15F; /* SET RETURN CODE */')                 00678700
*                      NORESCAN COL(MACLMAR);                           00678800
*/*PO.L09 XRSNCODE REASON CODE---------------------------------------*/ 00678900
*              IF NUMBER(RSNCODE)>0                                     00679000
*                THEN                                                   00679100
*                    ANS(XRSNCODE!!                                     00679200
*                     '=GPR00F; /* SET REASON CODE */')                 00679300
*                      NORESCAN COL(MACLMAR);                           00679400
*/*PO.L10 REMOVE REGISTER RESTRICTIONS-------------------------------*/ 00679500
*              IF NUMBER(RSNCODE)>0                                     00679600
*                THEN                                                   00679700
*              ANS('RFY GPR00F UNRSTD;') NORESCAN COL(MACLMAR);         00679800
*              IF NUMBER(RETCODE)>0                                     00679900
*                THEN                                                   00680000
*              ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);         00680100
*/*PO.L12 END OF PARAMETER LIST PROCESSING---------------------------*/ 00680200
*      END;                                                             00680300
*/*PO.L13 IEFSSI USAGE INDICATOR-------------------------------------*/ 00680400
*  ZIEFSSI='YES';                            /* SET IEFSSI USED */      00680500
*/*PO.L15 END OF EXECUTABLE IEFSSI-PLISTVER MACRO--------------------*/ 00680600
*  IF XMF^='L'                                                          00680700
*    THEN                                                               00680800
*      ANS('END; /* IEFSSI-PLISTVER */')                                00680900
*          NORESCAN COL(MACLMAR);                                       00681000
*/*PO.L16 RESTORE PRINT CONTROLS-------------------------------------*/ 00681100
*  ANS(MACCONC!!'LIST POP;') NORESCAN COL(MACLMAR);                     00681200
*/*PO.L17 END OF IEFSSI MACRO----------------------------------------*/ 00681300
*  ANS(MACCONC!!'SPACE;') NORESCAN COL(MACLMAR);                        00681400
*  ANS(' ') NORESCAN COL(MACLMAR);                                      00681500
*/*******************************************************************/  00681600
*/*  PO.L18 END OF CODE TO BE BYPASSED WHEN ZMACRET ^= 0            */  00681700
*/*******************************************************************/  00681800
*      END;                                                             00681900
*/*******************************************************************/  00682000
*/*  MVS ONLY     -CHECK IF AMG PARM LISTS ARE PRESENT              */  00682100
*/*               -ROUND MAX AMG PARM LIST TO DOUBLEWORD MULTIPLES  */  00682200
*/*******************************************************************/  00682300
*  IF ZPRMNUM>0                   /* NUMBER OF AMG PARM LIST ENTRIES*/  00682400
*    THEN                                                               00682500
*      DO;                                                              00682600
*        ZPRMMAX=((ZPRMMAX+7)/8)*8; /* ROUND PARM LIST SIZE UP TO       00682700
*                                      DOUBLEWORD MULTIPLES        */   00682800
*/*******************************************************************/  00682900
*/*  MVS -GENERATE PARM LIST DCL TO OVERLAY ?EPILOG'S ILIST AREA    */  00683000
*/*******************************************************************/  00683100
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00683200
*          THEN                                                         00683300
*            DO;                                                        00683400
*              IF INDEX(EHALIST,',AMG,')=0 /* HAS DECLARE BEEN DONE?*/  00683500
*                THEN                                                   00683600
*                  DO;                                                  00683700
*                    ANS('?EPILOG                                       00683800
*                        STRING(''DCL #ZPLIST DEF(ILIST);'');');        00683900
*                    EHALIST=EHALIST!!',AMG,';                          00684000
*                  END;                                                 00684100
*            END;                                                       00684200
*/*******************************************************************/  00684300
*/*  MVS  -EXTRACT PARM LISTS FROM AMG GLOBAL MACRO ARRAYS          */  00684400
*/*******************************************************************/  00684500
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00684600
*          THEN                                                         00684700
*            DO;                                                        00684800
*              IF ZPRMMAX>EHAMAXLEN                                     00684900
*                THEN                                                   00685000
*                  EHAMAXLEN=ZPRMMAX; /* SET MAX PARM LIST SIZE     */  00685100
*            END;                                                       00685200
*        DO ZI=1 TO ZPRMNUM; /* EXTRACT AMG PARM LISTS               */ 00685300
*          ANS('?EPILOG STRING('''!!ZPRM(ZI)!!''');')                   00685400
*              COL(MACLMAR);                                            00685500
*        END;                                                           00685600
*      END;                                                             00685700
*/*-----------------------------------------------------------------*/  00685800
*/*  MVS  -ENSURE THAT GPRS NEEDED BY AMG MACROS WILL BE PROVIDED   */  00685900
*/*        BY ?EPILOG                                               */  00686000
*/*-----------------------------------------------------------------*/  00686100
*        IF INDEX(EHAREGS,'01P')=0                                      00686200
*          THEN                                                         00686300
*            EHAREGS=EHAREGS!!'01P'; /* GPR01P                      */  00686400
*        IF INDEX(EHAREGS,'00F')=0                                      00686500
*          & NUMBER(RSNCODE)>0                                          00686600
*          THEN                                                         00686700
*            EHAREGS=EHAREGS!!'00F'; /* GPR00F                      */  00686800
*        IF INDEX(EHAREGS,'15F')=0                                      00686900
*          THEN                                                         00687000
*            EHAREGS=EHAREGS!!'15F'; /* GPR15F                      */  00687100
*  RETURN CODE(ZMACRET);                                                00687200
*%END IEFSSI;                                                           00687300
