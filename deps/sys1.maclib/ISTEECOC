#ifndef __isteecoc_h                                                            
#define __isteecoc_h                                                            
                                                                                
 /********************************************************************/         
 /*                                                                  */         
 /* CONTROL BLOCK NAME: ISTEECOC                                     */         
 /*                                                                  */         
 /* DESCRIPTIVE NAME:   NMI Enterprise Extender Connection Mapping   */         
 /*                                                                  */         
 /* Copyright: Licensed Materials - Property of IBM                  */         
 /*            5650-ZOS                                              */         
 /*            Copyright IBM Corp. 2003, 2015                        */         
 /* Status:    CSV2R2                                                */         
 /*                                                                  */         
 /* FUNCTION: Maps the record formats returned in response to        */         
 /*           an Network Management Enterprise Extender Connection   */         
 /*           request. The records that are returned are:            */         
 /*             (1) EE Connection Record Data (one per EE            */         
 /*                 connection being reported)                       */         
 /*                                                                  */         
 /* STORAGE USED FOR CONTROL BLOCK:                                  */         
 /*                                                                  */         
 /*    ALLOCATED BY:                                                 */         
 /*                                                                  */         
 /*    FREED BY:                                                     */         
 /*                                                                  */         
 /*    POINTED TO BY:                                                */         
 /*                                                                  */         
 /*    TYPE:                                                         */         
 /*                                                                  */         
 /* ALIGNMENT:                                                       */         
 /*       This control block MUST be on a DWORD boundary.            */         
 /*                                                                  */         
 /* OPERATING SYSTEM SPECIFICS:                                      */         
 /*                                                                  */         
 /* NOTES: None                                                      */         
 /*                                                                  */         
 /* SERIALIZATION CONCERNS:                                          */         
 /*                                                                  */         
 /*                                                                  */         
 /* LIST RECOMPILE MODULES:                                          */         
 /*                                                                  */         
 /* CHANGE ACTIVITY:                                                 */         
 /*                                                                  */         
 /* $MAC(ISTEECOC),COMP(MGMTSVC),PROD(VTAM): NMI Enterprise Extender */         
 /*                                          Connection Mapping      */         
 /*                                                                  */         
 /* Flag Reason   Release  Date   Origin    Description              */         
 /* ---- -------- -------- ------ --------  ------------------------ */         
 /* $Q0= R16EEMGT CSV1R5   030311 SMOONEN : EEHPR information service*/         
 /* $Q1= D132554  R16EEMGT 030505 SMOONEN : Eyecatchers, sequence #s */         
 /* $  = D132928  X16BASE  031013 RKunkel : Fix copyright statements */         
 /* $H1= RCSNAEEH CSV1R12  090902 HARISHS : EE Health verification   */         
 /* $H2= RCSNAEEH CSV1R12  091208 PatBrown: EE Health verification   */         
 /* $31= 18242    RFBASE   131120 HARISHS : Fix the length of the    */         
 /*                                         EEConnHP_Route_Table_Name*/         
 /*                                                                  */         
 /********************************************************************/         
                                                                                
#ifdef __cplusplus                                                              
      extern "C" {                                                              
#endif                                                                          
                                                                                
#pragma pack(1)                     /* Align structures at bytes     */         
                                                                                
#include <netinet/in.h>                                                         
#include <isteehnc.h>                                                           
                                                                                
/*********************************************************************/         
/* Enterprise Extender Connection Data Block                         */         
/*********************************************************************/         
                                                                                
typedef struct {                                                                
  unsigned int   EEConn_Eye;        /* EE Connection ID (EECO)   @Q1C*/         
  unsigned int   EEConn_Len;        /* Overall length of this record */         
  short          EEConn_Rsvd;       /* Reserved                      */         
  unsigned short EEConn_NumTriplets;/* Number of triplets defined               
                                       for this record               */         
  EEHNMRecordTriplet EEConn_StTriplet; /* First triplet                         
                                          defines the static section */         
  EEHNMRecordTriplet EEConn_HnTriplet; /* Second triplet                        
                                          defines the associated                
                                          hostname section(s)        */         
  EEHNMRecordTriplet EEConn_VNTriplet; /* Third triplet                         
                                          defines the VRN section    */         
  EEHNMRecordTriplet EEConn_PUTriplet; /* Fourth triplet                        
                                          defines the list of                   
                                          associated RTP PU names    */         
  EEHNMRecordTriplet EEConn_VERTriplet; /* Fifth triplet defines the            
                                           health verification                  
                                           section               @H1A*/         
  EEHNMRecordTriplet EEConn_PBRTriplet; /* Sixth triplet defines the            
                                           health verification PBR              
                                           section               @H1A*/         
} EEConnRecord;                                                                 
                                                                                
/*********************************************************************/         
/* Enterprise Extender Connection static information section         */         
/*********************************************************************/         
                                                                                
typedef struct {                                                                
  union {                                                                       
    struct in6_addr EEConnS_Local_IPv6_Address; /* Local IPv6 address*/         
    struct {                                                                    
      char           RsvdÝ12¨;              /* Pad                   */         
      struct in_addr Address;               /* Local IPv4 address    */         
    } EEConnS_Local_IPv4_Address;                                               
  } EEConnS_Local_Address;                                                      
                                                                                
  char           EEConnS_Rsvd1Ý12¨;         /* Reserved              */         
                                                                                
  union {                                                                       
    struct in6_addr EEConnS_Remote_IPv6_Address; /* Remote IPv6 addr */         
    struct {                                                                    
      char           RsvdÝ12¨;              /* Pad                   */         
      struct in_addr Address;               /* Remote IPv4 address   */         
    } EEConnS_Remote_IPv4_Address;                                              
  } EEConnS_Remote_Address;                                                     
                                                                                
  char           EEConnS_Rsvd2Ý12¨;         /* Reserved              */         
                                                                                
  char           EEConnS_Stack_NameÝ8¨; /* Enterprise Extender                  
                                           TCP/IP stack name         */         
  char           EEConnS_Line_NameÝ8¨;  /* Enterprise Extender                  
                                           Line Name                 */         
  char           EEConnS_PU_NameÝ8¨;/* Enterprise Extender PU Name   */         
  unsigned char  EEConnS_Remote_SAP;/* Remote SAP                    */         
  unsigned char  EEConnS_Local_SAP; /* Local SAP                     */         
                                                                                
  struct {                                                                      
    unsigned int EEConnS_IPv6_Address :1;   /* Local and Remote                 
                                               addresses are IPv6:              
                                               1 - Both IPv6 Address            
                                               0 - Both IPv4 Address */         
    unsigned int EEConnS_Dynamic_PU   :1;   /* Dynamic PU indicator             
                                               1 - Dynamic                      
                                               0 - Predefined        */         
    unsigned int EEConnS_KEEPACT      :1;   /* KEEPACT boolean flag  */         
    unsigned int EEConnS_DWINOP       :1;   /* DWINOP  boolean flag  */         
    unsigned int EEConnS_FlagsRsvd    :4;   /* Reserved              */         
  } EEConnS_Flags;                                                              
                                                                                
  unsigned char  EEConnS_REDIAL_Cnt;/* EE Redial Count               */         
  short          EEConnS_REDIAL_Dly;/* EE Redial Delay in seconds    */         
                                                                                
  struct {                                                                      
    unsigned int EEConnS_FUDP_Storage_Error :1; /* FUDP storage error           
                                                                 @H1A*/         
    unsigned int EEConnS_PBR_Error :1;   /* PBR error            @H1A*/         
    unsigned int EEConnS_Sense_received :1; /* Sense code        @H1A*/         
    unsigned int EEConnS_No_response :1; /* No response          @H1A*/         
    unsigned int EEConnS_Error_code  :1; /* Error code           @H1A*/         
    unsigned int EEConnS_Storage_error :1; /* VTAM Storage error @H1A*/         
    unsigned int EEConnS_Send_error :1;  /* Unable to send probe @H1A*/         
    unsigned int EEConnS_No_Route :1;    /* No route             @H1A*/         
  } EEConnS_Ver_Failed_Flag;        /* EE Health Verification error             
                                       indicators                @H1A*/         
  struct {                                                                      
    unsigned int EEConnS_No_LDLC_Probe_Support :1; /* EE connection             
                                       partner does not appear to               
                                       support EE LDLC Probe signals            
                                                                 @H2A*/         
    unsigned int EEConnS_Ver_Failed_Flag2Rsvd  :7;   /* Reserved @H2A*/         
  } EEConnS_Ver_Failed_Flag2;       /* EE Health Verification error             
                                       indicators                @H2A*/         
  unsigned int   EEConnS_Total_LULU_Count;  /* Count of LU-LU sessions          
                                               on RTP pipes using this          
                                               EE connection         */         
    /******************************************************************         
      Outbound Data Transfer Information by Priority:                           
         Low                                                                    
         Medium                                                                 
         High                                                                   
         Network                                                                
         Signal                                                                 
    ******************************************************************/         
                                                                                
  struct {                                                                      
    unsigned long long  EEConnS_SNA_Bytes_Sent_L;  /* Total number of           
                                       bytes sent over this EE                  
                                       connection - LOW priority.               
                                       This includes the data bytes             
                                       along with NLH, THDR and FID5 */         
    unsigned long long  EEConnS_NLPOut_Info_L;     /* Count of NLPs             
                                       sent outbound - LOW priority  */         
    unsigned long long  EEConnS_NLPOut_Rxmt_Info_L;/* Count of NLPs             
                                       retransmitted outbound -                 
                                       LOW priority                  */         
                                                                                
    unsigned long long  EEConnS_SNA_Bytes_Sent_M;  /* Total number of           
                                       bytes sent over this EE                  
                                       connection - MEDIUM priority.            
                                       This includes the data bytes             
                                       along with NLH, THDR and FID5 */         
    unsigned long long  EEConnS_NLPOut_Info_M;     /* Count of NLPs             
                                       sent outbound - MEDIUM                   
                                       priority                      */         
    unsigned long long  EEConnS_NLPOut_Rxmt_Info_M;/* Count of NLPs             
                                       retransmitted outbound -                 
                                       MEDIUM priority               */         
                                                                                
    unsigned long long  EEConnS_SNA_Bytes_Sent_H;  /* Total number of           
                                       bytes sent over this EE                  
                                       connection - HIGH priority.              
                                       This includes the data bytes             
                                       along with NLH, THDR and FID5 */         
    unsigned long long  EEConnS_NLPOut_Info_H;     /* Count of NLPs             
                                       sent outbound - HIGH priority */         
    unsigned long long  EEConnS_NLPOut_Rxmt_Info_H;/* Count of NLPs             
                                       retransmitted outbound -                 
                                       HIGH priority                 */         
                                                                                
    unsigned long long  EEConnS_SNA_Bytes_Sent_N;  /* Total number of           
                                       bytes sent over this EE                  
                                       connection - NETWORK priority.           
                                       This includes the data bytes             
                                       along with NLH, THDR and FID5 */         
    unsigned long long  EEConnS_NLPOut_Info_N;     /* Count of NLPs             
                                       sent outbound - NETWORK                  
                                       priority                      */         
    unsigned long long  EEConnS_NLPOut_Rxmt_Info_N;/* Count of NLPs             
                                       retransmitted outbound -                 
                                       NETWORK priority              */         
                                                                                
    unsigned long long  EEConnS_SNA_Bytes_Sent_S;  /* Total number of           
                                       bytes sent over this EE                  
                                       connection - SIGNAL priority.            
                                       This includes the data bytes             
                                       along with NLH, THDR and FID5 */         
    unsigned long long  EEConnS_NLPOut_Info_S;     /* Count of NLPs             
                                       sent outbound - SIGNAL                   
                                       priority                      */         
    unsigned long long  EEConnS_NLPOut_Rxmt_Info_S;/* Count of NLPs             
                                       retransmitted outbound -                 
                                       SIGNAL priority               */         
                                                                                
    unsigned long long  EEConnS_SNA_Bytes_Sent_A;  /* Total number of           
                                       bytes sent over this EE                  
                                       connection - ALL priorities              
                                       This includes the data bytes             
                                       along with NLH, THDR and FID5 */         
    unsigned long long  EEConnS_NLPOut_Info_A;     /* Count of NLPs             
                                       sent outbound - ALL priorities*/         
    unsigned long long  EEConnS_NLPOut_Rxmt_Info_A;/* Count of NLPs             
                                       retransmitted outbound -                 
                                       ALL priorities                */         
  } EEConnS_Data_Transfer_Info_OutBound;                                        
                                                                                
    /******************************************************************         
      Inbound Data Transfer Information by Priority:                            
         Low                                                                    
         Medium                                                                 
         High                                                                   
         Network                                                                
         Signal                                                                 
    ******************************************************************/         
  struct {                                                                      
    unsigned long long  EEConnS_SNA_Bytes_Rcv_L;   /* Total number              
                                       of bytes received over this              
                                       EE connection - LOW priority.            
                                       This includes data bytes along           
                                       with NLH, THDR and FID5       */         
    unsigned long long  EEConnS_NLPIn_Info_L;      /* Count of NLPs             
                                       received inbound - LOW                   
                                       priority                      */         
                                                                                
    unsigned long long  EEConnS_SNA_Bytes_Rcv_M;   /* Total number              
                                       of bytes received over this              
                                       EE connection - MEDIUM priority.         
                                       This includes data bytes along           
                                       with NLH, THDR and FID5       */         
    unsigned long long  EEConnS_NLPIn_Info_M;      /* Count of NLPs             
                                       received inbound - MEDIUM                
                                       priority                      */         
                                                                                
    unsigned long long  EEConnS_SNA_Bytes_Rcv_H;   /* Total number              
                                       of bytes received over this              
                                       EE connection - HIGH priority.           
                                       This includes data bytes along           
                                       with NLH, THDR and FID5       */         
    unsigned long long  EEConnS_NLPIn_Info_H;      /* Count of NLPs             
                                       received inbound - HIGH                  
                                       priority                      */         
                                                                                
    unsigned long long  EEConnS_SNA_Bytes_Rcv_N;   /* Total number              
                                       of bytes received over this              
                                       EE connection - NETWORK                  
                                       priority.  This includes data            
                                       bytes along with NLH, THDR and           
                                       FID5                          */         
    unsigned long long  EEConnS_NLPIn_Info_N;      /* Count of NLPs             
                                       received inbound - NETWORK               
                                       priority                      */         
                                                                                
    unsigned long long  EEConnS_SNA_Bytes_Rcv_S;   /* Total number              
                                       of bytes received over this              
                                       EE connection - SIGNAL priority.         
                                       This includes data bytes along           
                                       with NLH, THDR and FID5       */         
    unsigned long long  EEConnS_NLPIn_Info_S;      /* Count of NLPs             
                                       received inbound - SIGNAL                
                                       priority                      */         
                                                                                
    unsigned long long  EEConnS_SNA_Bytes_Rcv_A;   /* Total number              
                                       of bytes received over this              
                                       EE connection - ALL priorities.          
                                       This includes data bytes along           
                                       with NLH, THDR and FID5       */         
    unsigned long long  EEConnS_NLPIn_Info_A;      /* Count of NLPs             
                                       received inbound - ALL                   
                                       priorities                    */         
  } EEConnS_Data_Transfer_Info_InBound;                                         
                                                                                
  unsigned long long EEConnS_Connection_Act_TOD;   /* TOD the EE                
                                       connection was activated      */         
                                                                                
  unsigned short EEConnS_Num_SRQRETRY_GT_One;  /* Number of times               
                                       this connection has had signal           
                                       responses require more than              
                                       one retry.                    */         
  unsigned short EEConnS_Num_SRQRETRY_EQ_Max;  /* Number of times               
                                       this connection has had signal           
                                       responses require the maximum            
                                       allowable retries.            */         
  unsigned long long EEConnS_HVER_TOD; /* TOD when EE health                    
                                       verification info received               
                                       from the remote partner   @H1A*/         
  unsigned long long EEConnS_HVER_SUCCESS_TOD; /* TOD when last EE              
                                       health verification was                  
                                       successful                @H1A*/         
  unsigned long long EEConnS_HVER_FAIL_TOD; /* TOD when last EE health          
                                       verification failed       @H1A*/         
  } EEConn_StaticData;                                                          
                                                                                
/*********************************************************************/         
/* Enterprise Extender Connection Associated Hostname section        */         
/*********************************************************************/         
                                                                                
typedef struct {                                                                
  struct {                          /* Hostname indicators           */         
    unsigned int EEConnH_Usage :1;  /* Local vs. Remote hostname                
                                       '1'B - hostname was used to              
                                          obtain remote IP address              
                                       '0'B - hostname was used to              
                                          obtain local IP address    */         
    unsigned int EEConnH_Rsvd  :7;  /* Unused                        */         
  } EEConnH_Flags;                                                              
                                                                                
  unsigned char EEConnH_Length;     /* Actual length of the hostname            
                                       being reported. For convenience,         
                                       the section will always have             
                                       space for a maximum sized                
                                       hostname                      */         
  char          EEConnH_HostÝ64¨;   /* Hostname being reported       */         
} EEConn_HostnameData;                                                          
                                                                                
/*********************************************************************/         
/* Enterprise Extender Connection Associated VRN section             */         
/*********************************************************************/         
                                                                                
typedef struct {                                                                
  struct {                          /* Header data                   */         
    struct {                        /* VRN data indicators           */         
      unsigned int EEConnV_Type :1; /* VRN type being reported:                 
                                       '1'B - Global VRN                        
                                       '0'B - Local  VRN             */         
      unsigned int EEConnV_Rsvd :7; /* Unused                        */         
    } EEConnV_Flags;                                                            
  } EEConnV_Header;                                                             
                                                                                
  /* Following the header is the Virtual Routing Node Name.  The     */         
  /* length of the name is obtained from the total length of the     */         
  /* VRN section, as shown in the record triplet, less the length    */         
  /* of the section header.                                          */         
                                                                                
} EEConn_VRNData;                                                               
                                                                                
/*********************************************************************/         
/* Enterprise Extender Connection Associated RTP PU name section     */         
/*********************************************************************/         
                                                                                
typedef struct {                                                                
  char EEConnP_NameÝ8¨;             /* RTP PU name, right-padded with           
                                       blanks.                       */         
} EEConn_RTPPUDATA;                                                             
                                                                                
                                                                                
/*********************************************************************/         
/* Enterprise Extender Connection Health Verification section        */         
/*********************************************************************/         
                                                                                
                                                                                
typedef struct {                    /* EE Health verification section           
                                                                 @H1A*/         
  struct {                          /* EE Health Common data     @H1A*/         
    unsigned int EEConnHV_Rsvd;     /* Reserved                  @H1A*/         
    char EEConnHV_IntfNameÝ16¨;     /* Interface Name            @H1A*/         
    char EEConnHV_IntfTypeÝ16¨;     /* Interface Type            @H1A*/         
    unsigned char EEConnHV_Rsvd1;   /* Reserved                  @H1A*/         
                                                                                
    struct {                                                                    
      unsigned int EEConnHV_NoRoute :1; /* No route to destination              
                                       from the local EE TCP/IP stack           
                                                                 @H1A*/         
      unsigned int EEConnHV_NoStorage :1; /* FastUDP encountered                
                                       storage shortage          @H1A*/         
      unsigned int EEConnHV_PBR :1; /* Policy Based routing used for            
                                       EE health verificatin     @H1A*/         
      unsigned int EEConnHV_Rsvd2 :5; /* Available               @H1A*/         
    } EEConnHV_Common_Flags;        /* Common Flags              @H1A*/         
                                                                                
    unsigned char EEConnHV_TotalRoutes; /* Total routes found by                
                                       TCP/IP                    @H1A*/         
    char EEConnHV_Rsvd3Ý9¨;         /* Available                 @H1A*/         
  } EEConnHV_COMMON_DATA;           /* EE Health common data     @H1A*/         
                                                                                
  struct {                          /* All five ports            @H1A*/         
    unsigned char EEConnHV_Rsvd4;   /* Reserved                  @H1A*/         
                                                                                
    struct {                        /* Port flags                @H1A*/         
      unsigned int EEConnHV_Success :1; /* Success test over this               
                                       port                      @H1A*/         
      unsigned int EEConnHV_Expired :1; /* EE health ver time                   
                                       expired                   @H1A*/         
      unsigned int EEConnHV_PBR_NOTRY :1; /* 1=no test because of               
                                       policy based routing                     
                                       definitions               @H1A*/         
      unsigned int EEConnHV_PBR_NoRoute :1; /*  1=no test because               
                                       there was not route calculated           
                                       for this port             @H1A*/         
      unsigned int EEConnHV_Hop_Limit :1; /* Unable to reach the                
                                       destination               @H1A*/         
      unsigned int EEConnHV_Route_Loop :1; /* Detected a looping                
                                       route, test was terminated               
                                                                 @H1A*/         
      unsigned int EEConnHV_Rsvd5 :2; /* Available               @H1A*/         
    } EEConnHV_PORT_Flags;          /* Port flags                @H1A*/         
                                                                                
    unsigned char EEConnHV_Rsvd6Ý2¨; /* Reserved                 @H1A*/         
    unsigned int EEConnHV_Sense;    /* Reserved                  @H1A*/         
                                                                                
    struct {                        /* EE Health Hop information @H1A*/         
      union {                       /* IPv4 or IPv6 address      @H1A*/         
        struct in6_addr EEConnHV_IPv6; /* IPv6 address           @H1A*/         
        struct {                    /* IPv4 address struct       @H1A*/         
          struct in_addr Address;   /* IPv4 address              @H1A*/         
          char EEConnHV_Rsvd7Ý12¨;  /* Pad                       @H1A*/         
        } EEConnHV_IPv4;            /* IPv4 address struct       @H1A*/         
      } EEConnHV_IPADDR;            /* IPv4 or IPv6 address      @H1A*/         
                                                                                
      short EEConnHV_RTT;           /* Round Trip Time           @H1A*/         
      unsigned char EEConnHV_Attempts; /* Number of Attempts     @H1A*/         
      unsigned char EEConnHV_Error_Type; /* ICMP or ICMPv6 Error Type           
                                                                 @H1A*/         
      unsigned char EEConnHV_Error_Code; /* ICMP or IPMPv6 Error Code           
                                                                 @H1A*/         
      unsigned char EEConnHV_Rsvd8Ý3¨; /* Reserved               @H1A*/         
    } EEConnHV_HOP_DATA;            /* EE Health Hop information @H1A*/         
                                                                                
  } EEConnHV_PORT_DATAÝ5¨;          /* All five ports data       @H1A*/         
                                                                                
} EEConn_VERData;                   /* EE Health verification section           
                                                                 @H1A*/         
                                                                                
/********************************************************************/          
/* Enterprise Extender Connection PBR data for Health Verification  */          
/* section                                                      @H1A*/          
/********************************************************************/          
                                                                                
typedef struct {                    /* EE Health verification PBR               
                                       section                   @H1A*/         
                                                                                
  struct {                          /* Routing Rules             @H1A*/         
    char EEConnHP_Routing_Rule_Name_InfoÝ32¨; /* When EEConnHV_PBR=1            
                                       this is the routing rule name            
                                       for each of the EE ports  @H1A*/         
  } EEConnHP_Routing_Rule_NameÝ5¨;  /* For all five ports        @H1A*/         
                                                                                
  struct {                          /* Route Table names         @H1A*/         
    char EEConnHP_Route_Table_Name_InfoÝ8¨; /* When EEConnHV_PBR=1              
                                       this is the route table names            
                                       being used for each of the EE            
                                       ports                @H1A @31C*/         
  } EEConnHP_Route_Table_NameÝ5¨;   /* For all five ports        @H1A*/         
                                                                                
} EEConn_PBRData;                   /* EE Health verification PBR               
                                       data                      @H1A*/         
                                                                                
/*********************************************************************/         
/* Eyecatcher constants for EE Connection records                    */         
/*********************************************************************/         
                                                                                
const unsigned int EEConn_ID        /* EE connection record (EECO)   */         
             = 0xC5C5C3D6;                                     /*@Q1C*/         
                                                                                
/*********************************************************************/         
/* Constants for Triplet counts for the EE Connection record         */         
/*********************************************************************/         
                                                                                
const int  EEConn_TripletCnt = 6;   /* EE conn rcd has 6 triplets               
                                                                @H1C*/          
                                                                                
#ifdef __cplusplus                                                              
      }   /* extern "C" */                                                      
#endif                                                                          
                                                                                
#pragma pack(reset)                 /* Return to prior alignment     */         
                                                                                
#endif   /* __isteecoc_h */                                                     
                                                                                
