*%IWMWSYSQ: MACRO KEYS(SYSINFO_BLOCK,ANSLEN,QUERYLEN,EXTENDED_DATA,     00000100
*                 RETCODE,RSNCODE,PLISTVER,MF);                         00000200
*/**** START OF SPECIFICATIONS **************************************** 00000300
*                                                                     * 00000400
*                                                                     * 00000500
*01* MACRO NAME:  IWMWSYSQ                              -06/06/22-<3> * 00000600
*                                                                     * 00000700
*                                                                     * 00000800
*01* DESCRIPTIVE NAME:  Query System Information                      * 00000900
*                                                                     * 00001000
*01* PROPRIETARY STATEMENT:                                           * 00001100
*                                                                     * 00001200
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00001300
*     5694-A01 (C) COPYRIGHT IBM CORP. 1994, 2007                     * 00001400
*                                                                     * 00001500
* STATUS= HBB7740                                                     * 00001600
*                                                                     * 00001700
*                                                                     * 00001800
*                                                                     * 00001900
*01* FUNCTION:                                                        * 00002000
*                                                                     * 00002100
*                                                                     * 00002200
*      The purpose of this service is to query information about the  * 00002300
*      systems in the sysplex that are in goal mode.  This service    * 00002400
*      returns a list of systems running in goal mode and information * 00002500
*      related to available CPU capacity and resource constraint      * 00002600
*      status.                                                        * 00002700
*                                                                     * 00002800
*      The caller of IWMWSYSQ must provide storage to contain all of  * 00002900
*      the system information. This storage area must reside in the   * 00003000
*      caller's primary address space.                                * 00003100
*                                                                     * 00003200
*      It is possible that the storage required by IWMWSYSQ may       * 00003300
*      change such that multiple IWMWSYSQ calls are required to       * 00003400
*      obtain data.  IWMWSYSQ users should take this into account     * 00003500
*      when obtaining the amount of storage that the IWMWSYSQ service * 00003600
*      can use.                                                       * 00003700
*                                                                     * 00003800
*      If the caller does not provide enough storage to contain all   * 00003900
*      of the system information, this service will return a          * 00004000
*      return/reason code pair indicating that the input              * 00004100
*      SYSINFO_BLOCK is too small. Output data about the amount of    * 00004200
*      storage required (QUERYLEN) will be set to reflect the         * 00004300
*      required SYSINFO_BLOCK size.  However, no system capacity      * 00004400
*      information is returned.                                       * 00004500
*                                                                     * 00004600
*      Applications that schedule work across multiple systems in an  * 00004700
*      MVS sysplex can use this service to                            * 00004800
*                                                                     * 00004900
*                                                                     * 00005000
*      o   Locate the "best" (fastest or most idle) system in a       * 00005100
*          sysplex for scheduling specific work                       * 00005200
*                                                                     * 00005300
*      o   Avoid scheduling additional work to systems already        * 00005400
*          critically overloaded                                      * 00005500
*                                                                     * 00005600
*      o   Factor WLM business importance level information into      * 00005700
*          scheduling decisions                                       * 00005800
*                                                                     * 00005900
*                                                                     * 00006000
*                                                                     * 00006100
*      The output of this service is a data area mapped by the        * 00006200
*      IWMWSYSI macro, that provides a point-in-time snapshot of each * 00006300
*      system WLM is managing in the sysplex.  A scheduling           * 00006400
*      application can interpret and use this information to schedule * 00006500
*      one or more types of work to systems with specific operating   * 00006600
*      characteristics.  Some examples of operating characteristics   * 00006700
*      you can identify with IWMWSYSQ are                             * 00006800
*                                                                     * 00006900
*                                                                     * 00007000
*      o   FASTEST CP SPEED - use the IWMWSYSI data area to identify  * 00007100
*          the system having the fastest single CP speed.             * 00007200
*                                                                     * 00007300
*      o   MULTI-PROCESSING CAPABILITY - use the IWMWSYSI data area   * 00007400
*          to identify the number of online CPs on each available     * 00007500
*          system.                                                    * 00007600
*                                                                     * 00007700
*      o   IDLE CAPACITY - use the IWMWSYSI data area to identify the * 00007800
*          system with the greatest idle capacity.                    * 00007900
*                                                                     * 00008000
*                                                                     * 00008100
*                                                                     * 00008200
*      If a scheduling application can identify the IMPORTANCE LEVEL  * 00008300
*      of the work it schedules the application can use IWMWSYSI to   * 00008400
*      select the most appropriate system.  IWMWSYSI provides a       * 00008500
*      vector containing the amount of capacity consumed at each      * 00008600
*      importance level on each system.  Thus, if an application is   * 00008700
*      scheduling importance level 3 work, it can use IWMWSYSI to     * 00008800
*      identify the system that has the most capacity that is either  * 00008900
*      idle or is handling importance level 4 or lower work.          * 00009000
*                                                                     * 00009100
*      An important use of a scheduling application is to avoid       * 00009200
*      placing additional work on systems experiencing contention.    * 00009300
*      IWMWSYSI provides an indicator for each system that, if on,    * 00009400
*      signifies that the system should be avoided for scheduling     * 00009500
*      additional work.  This contention indicator is set if a        * 00009600
*      auxilliary storage, fixed storage, or SQA shortage exists.     * 00009700
*      Also, if work to be scheduled may consume large quantities of  * 00009800
*      CSA, you can use IWMWSYSI to determine the amount of CSA and   * 00009900
*      ECSA that is available on each system.                         * 00010000
*                                                                     * 00010100
*      Note that:                                                     * 00010200
*                                                                     * 00010300
*                                                                     * 00010400
*      o   Multiple applications may simultaneously use the same      * 00010500
*          IWMWSYSQ information to make work scheduling decisions.    * 00010600
*          These multiple applications will have no direct            * 00010700
*          cooperation and will compete for the available systems.    * 00010800
*          It is recommended that before an application schedules a   * 00010900
*          large amount of work it activate a small quantity of work, * 00011000
*          wait for a built-in delay, and then use IWMWSYSQ to        * 00011100
*          determine the effect of the added work before scheduling   * 00011200
*          the additional work.                                       * 00011300
*                                                                     * 00011400
*                                                                     * 00011500
*                                                                     * 00011600
*01* EXTERNAL CLASSIFICATION:  PSPI                                   * 00011700
*                                                                     * 00011800
*01* END OF EXTERNAL CLASSIFICATION:                                  * 00011900
*                                                                     * 00012000
*01* ENVIRONMENT:                                                     * 00012100
*                                                                     * 00012200
*                                                                     * 00012300
*      Dispatchable unit mode: Task mode.                             * 00012400
*                                                                     * 00012500
*      Minimum authorization: Problem state.  Any PSW key.            * 00012600
*                                                                     * 00012700
*      Cross Memory Mode: Any PASN, any HASN, any SASN.               * 00012800
*                                                                     * 00012900
*      AMODE:            31-bit.                                      * 00013000
*                                                                     * 00013100
*      ASC mode:         Primary or Access Register.                  * 00013200
*                                                                     * 00013300
*      Interrupt status: Enabled for I/O and external interrupts.     * 00013400
*                                                                     * 00013500
*      Locks:            No locks held.                               * 00013600
*                                                                     * 00013700
*      Control parameters: Control parameters must be in the primary  * 00013800
*                        address space.                               * 00013900
*                                                                     * 00014000
*                                                                     * 00014100
*                                                                     * 00014200
*01* PROGRAMMING REQUIREMENTS:                                        * 00014300
*                                                                     * 00014400
*                                                                     * 00014500
*    1.  The macro CVT must be included to use this macro.            * 00014600
*                                                                     * 00014700
*    2.  The macro IWMYCON must be included to use this macro.        * 00014800
*                                                                     * 00014900
*    3.  The macro IWMPB must be in the library concatenation, since  * 00015000
*        it is included by IWMYCON.                                   * 00015100
*                                                                     * 00015200
*    4.  Note that the high order halfword of register 0, and the     * 00015300
*        reason code variable when specified, may be non-zero and     * 00015400
*        represents diagnostic data which is NOT part of the external * 00015500
*        interface.  The high order halfword should thus be excluded  * 00015600
*        from comparison with the reason code values described above. * 00015700
*        The constant, IWMRSNCODE_MASK_CONST defined in IWMYCON, may  * 00015800
*        be used for this purpose.                                    * 00015900
*                                                                     * 00016000
*                                                                     * 00016100
*                                                                     * 00016200
*01* RESTRICTIONS:                                                    * 00016300
*                                                                     * 00016400
*                                                                     * 00016500
*    1.  This macro may not be used prior to the completion of WLM    * 00016600
*        address space initialization.                                * 00016700
*                                                                     * 00016800
*                                                                     * 00016900
*                                                                     * 00017000
*01* INPUT REGISTER INFORMATION:                                      * 00017100
*                                                                     * 00017200
*    Before issuing the IWMWSYSQ macro, the caller does not have to   * 00017300
*    place any information into any register unless using it in       * 00017400
*    register notation for a particular parameter, or using it as a   * 00017500
*    base register.                                                   * 00017600
*                                                                     * 00017700
*01* OUTPUT REGISTER INFORMATION:                                     * 00017800
*                                                                     * 00017900
*    When control returns to the caller, the GPRs contain:            * 00018000
*                                                                     * 00018100
*                                                                     * 00018200
*    REGISTER  CONTENTS                                               * 00018300
*                                                                     * 00018400
*    0         Reason code if GR15 return code is non-zero            * 00018500
*                                                                     * 00018600
*    1         Used as work register by the system                    * 00018700
*                                                                     * 00018800
*    2-13      Unchanged                                              * 00018900
*                                                                     * 00019000
*    14        Used as work registers by the system                   * 00019100
*                                                                     * 00019200
*    15        Return code                                            * 00019300
*                                                                     * 00019400
*                                                                     * 00019500
*                                                                     * 00019600
*    When control returns to the caller, the ARs contain:             * 00019700
*                                                                     * 00019800
*                                                                     * 00019900
*    REGISTER  CONTENTS                                               * 00020000
*                                                                     * 00020100
*    0-1       Used as work registers by the system                   * 00020200
*                                                                     * 00020300
*    2-13      Unchanged                                              * 00020400
*                                                                     * 00020500
*    14-15     Used as work registers by the system                   * 00020600
*                                                                     * 00020700
*                                                                     * 00020800
*                                                                     * 00020900
*    Some callers depend on register contents remaining the same      * 00021000
*    before and after issuing a service.  If the system changes the   * 00021100
*    contents of registers on which the caller depends, the caller    * 00021200
*    must save them before issuing the service, and restore them      * 00021300
*    after the system returns control.                                * 00021400
*                                                                     * 00021500
*01* PERFORMANCE IMPLICATIONS:                                        * 00021600
*                                                                     * 00021700
*    None                                                             * 00021800
*                                                                     * 00021900
*01* SYNTAX:                                                          * 00022000
*                                                                     * 00022100
*Ýxlabel¨  IWMWSYSQ     SYSINFO_BLOCK                                 * 00022200
*                                     =xsysinfo_block                 * 00022300
*                      ,ANSLEN=xanslen                                * 00022400
*                      ,QUERYLEN=xquerylen                            * 00022500
*                    ÐÝ,EXTENDED_DATA=NO¨                             * 00022600
*                    ¿Ý,EXTENDED_DATA=YES¨                            * 00022700
*                     Ý,RETCODE=xretcode¨                             * 00022800
*                     Ý,RSNCODE=xrsncode¨                             * 00022900
*                     Ý,PLISTVER=»xplistver!IMPLIED_VERSIONº¨         * 00023000
*                    ÐÝ,MF=S¨                                         * 00023100
*                    ÔÝ,MF=(L,xmfctrl»,xmfattr!0Dº)¨                  * 00023200
*                    ¿Ý,MF=(E,xmfctrl»,COMPLETEº)¨                    * 00023300
*                                                                     * 00023400
*                                                                     * 00023500
*      Where:                                                         * 00023600
*                                                                     * 00023700
*                                                                     * 00023800
*      Ýxlabel¨                                                       * 00023900
*          is an optional symbol, starting in column 1, that is the   * 00024000
*          name on the IWMWSYSQ macro invocation.  The name must      * 00024100
*          conform to the rules for an ordinary assembler language    * 00024200
*          symbol.                                                    * 00024300
*          DEFAULT: No name.                                          * 00024400
*                                                                     * 00024500
*                                                                     * 00024600
*                                                                     * 00024700
*                                                                     * 00024800
*      SYSINFO_BLOCK(xsysinfo_block)                                  * 00024900
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00025000
*          only) of a required pointer input that contains the        * 00025100
*          address of an output area to contain information provided  * 00025200
*          by this service.  The format of this area is mapped by     * 00025300
*          IWMWSYSI and should only be considered valid upon return   * 00025400
*          code zero from this service.                               * 00025500
*                                                                     * 00025600
*                                                                     * 00025700
*                                                                     * 00025800
*                                                                     * 00025900
*      ANSLEN(xanslen)                                                * 00026000
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00026100
*          only) of a required fullword input which contains the      * 00026200
*          length of the SYSINFO_BLOCK in bytes.                      * 00026300
*                                                                     * 00026400
*                                                                     * 00026500
*                                                                     * 00026600
*                                                                     * 00026700
*      QUERYLEN(xquerylen)                                            * 00026800
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00026900
*          only) of a required fullword output variable which         * 00027000
*          contains the output area size that must be provided by the * 00027100
*          caller to contain all of the active systems in the sysplex * 00027200
*          that are in goal mode (i.e. the amount of data returned by * 00027300
*          the IWMWSYSQ service).                                     * 00027400
*                                                                     * 00027500
*                                                                     * 00027600
*                                                                     * 00027700
*                                                                     * 00027800
*      ÝEXTENDED_DATA(»NO!YESº)¨                                      * 00027900
*          is an optional keyword input which describes whether the   * 00028000
*          format of the output area named by SYSINFO_BLOCK includes  * 00028100
*          the extended section or not (see IWMWSYSI).                * 00028200
*          DEFAULT: NO                                                * 00028300
*                                                                     * 00028400
*                                                                     * 00028500
*          ÝEXTENDED_DATA(NO)¨                                        * 00028600
*                                                                     * 00028700
*              indicates that the format of the output area named by  * 00028800
*              SYSINFO_BLOCK includes only the standard information   * 00028900
*              mapped by the SYSI, which consists of an array of      * 00029000
*              entries described by SYSI_Entry                        * 00029100
*                                                                     * 00029200
*          ÝEXTENDED_DATA(YES)¨                                       * 00029300
*                                                                     * 00029400
*              indicates that the format of the output area given by  * 00029500
*              SYSINFO_BLOCK includes first the standard information  * 00029600
*              mapped by the SYSI, which consists of an array of      * 00029700
*              entries described by SYSI_Entry, followed immediately  * 00029800
*              by the header for the extension section and another    * 00029900
*              array of entries described by SYSI_EXT_Entry.          * 00030000
*                                                                     * 00030100
*              EXTENDED_DATA is only available to callers of the      * 00030200
*              IWMWSYSQ service when invoked on a system running zOS  * 00030300
*              R1.9 or higher.                                        * 00030400
*                                                                     * 00030500
*                                                                     * 00030600
*                                                                     * 00030700
*                                                                     * 00030800
*                                                                     * 00030900
*                                                                     * 00031000
*      ÝRETCODE(xretcode)¨                                            * 00031100
*          is the name (RS-type) of an optional fullword output       * 00031200
*          variable (or register (2)-(12) ASM only) into which the    * 00031300
*          return code is to be copied from GPR 15.                   * 00031400
*                                                                     * 00031500
*                                                                     * 00031600
*                                                                     * 00031700
*                                                                     * 00031800
*      ÝRSNCODE(xrsncode)¨                                            * 00031900
*          is the name (RS-type) of an optional fullword output       * 00032000
*          variable (or register (2)-(12) ASM only) into which the    * 00032100
*          reason code is to be copied from GPR 0.                    * 00032200
*                                                                     * 00032300
*                                                                     * 00032400
*                                                                     * 00032500
*                                                                     * 00032600
*      ÝPLISTVER(»xplistver!IMPLIED_VERSIONº)¨                        * 00032700
*          is an optional byte input decimal value in the "2-3" range * 00032800
*          that specifies the macro version.  PLISTVER is the only    * 00032900
*          key allowed on the list form of MF and determines which    * 00033000
*          parameter list is generated.  The macro keys associated    * 00033100
*          with each supported version of the macro are listed in     * 00033200
*          MACRO USAGE NOTE 2.  Note that MAX may be specified        * 00033300
*          instead of a number, and the parameter list will be of the * 00033400
*          largest size currently supported. This size may grow from  * 00033500
*          release to release (thus possibly affecting the amount of  * 00033600
*          storage needed by your program).  If your program can      * 00033700
*          tolerate this, IBM recommends that you always specify MAX  * 00033800
*          when creating the list form parameter list as that will    * 00033900
*          ensure that the list form parameter list is always long    * 00034000
*          enough to hold whatever parameters might be specified on   * 00034100
*          the execute form.                                          * 00034200
*          DEFAULT: IMPLIED_VERSION.  When PLISTVER is omitted, the   * 00034300
*          default is the lowest version which allows all of the      * 00034400
*          parameters specified on the invocation to be processed.    * 00034500
*                                                                     * 00034600
*                                                                     * 00034700
*                                                                     * 00034800
*                                                                     * 00034900
*      ÝMF(»S!L!Eº)¨                                                  * 00035000
*          is an optional keyword input which specifies the macro     * 00035100
*          form.                                                      * 00035200
*          DEFAULT: S                                                 * 00035300
*                                                                     * 00035400
*                                                                     * 00035500
*          ÝMF(S)¨                                                    * 00035600
*              specifies the standard form of the macro.  The "S"     * 00035700
*              form generates code to put the parameters into the     * 00035800
*              parameter list and invoke the desired service.  Full   * 00035900
*              checking for required macro keys is done along with    * 00036000
*              supplying defaults for omitted optional parameters.    * 00036100
*              The ?EPILOG macro must be invoked at the end of the    * 00036200
*              module.                                                * 00036300
*                                                                     * 00036400
*              For assembly language code modules, the "S" form       * 00036500
*              generates code to put the parameters into an in-line   * 00036600
*              parameter list and invoke the desired service.  Full   * 00036700
*              checking for required macro keys is done along with    * 00036800
*              supplying defaults for omitted optional parameters.    * 00036900
*                                                                     * 00037000
*          ÝMF(L,xmfctrl»,xmfattr!BDY(DWORD)º)¨                       * 00037100
*              specifies the list form of the macro.  The "L" form    * 00037200
*              defines an area to be used for the parameter list.     * 00037300
*              Only the PLISTVER key may be specified on the          * 00037400
*              invocation.  All other macro parameters are flagged as * 00037500
*              errors.  If PLISTVER is not specified, the original    * 00037600
*              parameter list definition is used.                     * 00037700
*                                                                     * 00037800
*            ,xmfctrl                                                 * 00037900
*              is a required input.  It is the name of a storage area * 00038000
*              for the parameter list.                                * 00038100
*                                                                     * 00038200
*            »,xmfattr!BDY(DWORD)º                                    * 00038300
*              is an optional 60 character input string that varies   * 00038400
*              from 1 to 60 characters. Use it to force boundary      * 00038500
*              alignment of the parameter list. Use only 0F or 0D     * 00038600
*              (assembler-only).                                      * 00038700
*              DEFAULT: 0D for Assembler, BDY(DWORD) for PL/X, which  * 00038800
*              forces the parameter list to a doubleword boundary.    * 00038900
*                                                                     * 00039000
*          ÝMF(E,xmfctrl»,COMPLETEº)¨                                 * 00039100
*              specifies the execute form of the macro.  The "E" form * 00039200
*              generates code to put the parameters into the          * 00039300
*              parameter list specified by xmfctrl and provides full  * 00039400
*              syntax checking with default setting.                  * 00039500
*                                                                     * 00039600
*            ,xmfctrl                                                 * 00039700
*              is a required input.  It is the name (RS-type) (or     * 00039800
*              address in register (1)-(12) ASM only) of a storage    * 00039900
*              area for the parameter list.                           * 00040000
*                                                                     * 00040100
*            »,COMPLETEº                                              * 00040200
*              is an optional keyword input which specifies the       * 00040300
*              degree of macro parameter syntax checking.             * 00040400
*              DEFAULT: COMPLETE                                      * 00040500
*                                                                     * 00040600
*                                                                     * 00040700
*              COMPLETE                                               * 00040800
*                  Checking for required macro keys is done and       * 00040900
*                  defaults are supplied for omitted optional         * 00041000
*                  parameters.                                        * 00041100
*                                                                     * 00041200
*                                                                     * 00041300
*                                                                     * 00041400
*                                                                     * 00041500
*                                                                     * 00041600
*                                                                     * 00041700
*                                                                     * 00041800
*01* ABEND CODES:  None.                                              * 00041900
*                                                                     * 00042000
*01* RETURN CODES:                                                    * 00042100
*                                                                     * 00042200
*                                                                     * 00042300
*            0    Name: IwmRetCodeOk                                  * 00042400
*                                                                     * 00042500
*                 Meaning: Successful completion.                     * 00042600
*                                                                     * 00042700
*                 Action: None required.                              * 00042800
*                                                                     * 00042900
*            4    Name: IwmRetCodeWarning                             * 00043000
*                                                                     * 00043100
*                 Meaning: Successful completion, unusual conditions  * 00043200
*                 noted.                                              * 00043300
*                                                                     * 00043400
*                                                                     * 00043500
*                 HEX REASON  MEANING/ACTION                          * 00043600
*                 CODE                                                * 00043700
*                                                                     * 00043800
*                 xxxx040A    Name: IwmRsnCodeOutputAreaTooSmall      * 00043900
*                                                                     * 00044000
*                             Meaning:  The output area supplied is   * 00044100
*                             too small to receive all the available  * 00044200
*                             information.                            * 00044300
*                                                                     * 00044400
*                             Action: None required.  If necessary,   * 00044500
*                             reinvoke the service with an output     * 00044600
*                             area of sufficient size (returned in    * 00044700
*                             QUERYLEN) to receive all information.   * 00044800
*                                                                     * 00044900
*                 xxxx0420    Name: IwmRsnCodeSysInfoIncomplete       * 00045000
*                                                                     * 00045100
*                             Meaning:  System capacity data for one  * 00045200
*                             or more systems running in goal mode is * 00045300
*                             unavailable when the IWMWSYSQ service   * 00045400
*                             is invoked.                             * 00045500
*                                                                     * 00045600
*                             Action: None required.  If necessary,   * 00045700
*                             wait a few minutes and reinvoke the     * 00045800
*                             service to receive all information.     * 00045900
*                                                                     * 00046000
*                                                                     * 00046100
*                                                                     * 00046200
*            8    Name: IwmRetCodeInvocError                          * 00046300
*                                                                     * 00046400
*                 Meaning: Invalid invocation environment or          * 00046500
*                 parameters.                                         * 00046600
*                                                                     * 00046700
*                                                                     * 00046800
*                 HEX REASON  MEANING/ACTION                          * 00046900
*                 CODE                                                * 00047000
*                                                                     * 00047100
*                 xxxx0801    Name: IwmRsnCodeSrbMode                 * 00047200
*                                                                     * 00047300
*                             Meaning: Caller is in SRB mode.         * 00047400
*                                                                     * 00047500
*                             Action: Avoid requesting this function  * 00047600
*                             while in SRB mode.                      * 00047700
*                                                                     * 00047800
*                 xxxx0803    Name: IwmRsnCodeDisabled                * 00047900
*                                                                     * 00048000
*                             Meaning: Caller is disabled.            * 00048100
*                                                                     * 00048200
*                             Action: Avoid requesting this function  * 00048300
*                             while disabled.                         * 00048400
*                                                                     * 00048500
*                 xxxx0804    Name: IwmRsnCodeLocked                  * 00048600
*                                                                     * 00048700
*                             Meaning: Caller is locked.              * 00048800
*                                                                     * 00048900
*                             Action: Avoid requesting this function  * 00049000
*                             while locked.                           * 00049100
*                                                                     * 00049200
*                 xxxx080B    Name: IwmRsnCodeBadPl                   * 00049300
*                                                                     * 00049400
*                             Meaning:  Error accessing parameter     * 00049500
*                             list.                                   * 00049600
*                                                                     * 00049700
*                             Action: Check for possible storage      * 00049800
*                             overlay.                                * 00049900
*                                                                     * 00050000
*                 xxxx0823    Name: IwmRsnCodeDatoff                  * 00050100
*                                                                     * 00050200
*                             Meaning: Caller invoked service while   * 00050300
*                             DATOFF                                  * 00050400
*                                                                     * 00050500
*                             Action: Avoid requesting this function  * 00050600
*                             in this environment.                    * 00050700
*                                                                     * 00050800
*                 xxxx0824    Name: IwmRsnCodeAmode24                 * 00050900
*                                                                     * 00051000
*                             Meaning: Caller invoked service but was * 00051100
*                             in 24 bit addressing mode.              * 00051200
*                                                                     * 00051300
*                             Action: Request this function only when * 00051400
*                             you are in 31 bit addressing mode.      * 00051500
*                                                                     * 00051600
*                 xxxx0828    Name: IwmRsnCodeBadVersion              * 00051700
*                                                                     * 00051800
*                             Meaning: Version number in parameter    * 00051900
*                             list is not valid or the length         * 00052000
*                             specified is incorrect.                 * 00052100
*                                                                     * 00052200
*                             Action: Check for possible storage      * 00052300
*                             overlay of the parameter list.          * 00052400
*                                                                     * 00052500
*                 xxxx083C    Name: IwmRsnCodeMissingAcro             * 00052600
*                                                                     * 00052700
*                             Meaning:  Required parameter list       * 00052800
*                             acronym (eye catcher) not found or a    * 00052900
*                             zero SYSINFO_BLOCK pointer is found to  * 00053000
*                             be associated with a non-zero ANSLEN.   * 00053100
*                                                                     * 00053200
*                             Action: Check for possible storage      * 00053300
*                             overlay of the parameter list after     * 00053400
*                             ensuring that the acronym was correctly * 00053500
*                             set.                                    * 00053600
*                                                                     * 00053700
*                                                                     * 00053800
*                                                                     * 00053900
*            C    Name: IwmRetCodeEnvError                            * 00054000
*                                                                     * 00054100
*                 Meaning: Environmental error.                       * 00054200
*                                                                     * 00054300
*                                                                     * 00054400
*                 HEX REASON  MEANING/ACTION                          * 00054500
*                 CODE                                                * 00054600
*                                                                     * 00054700
*                 xxxx0C12    Name: IwmRsnNoGoalModeSystems           * 00054800
*                                                                     * 00054900
*                             Meaning: There are no goal mode systems * 00055000
*                             in the sysplex                          * 00055100
*                                                                     * 00055200
*                             Action: No action required.             * 00055300
*                                                                     * 00055400
*                                                                     * 00055500
*                                                                     * 00055600
*            10   Name: IwmRetCodeCompError                           * 00055700
*                                                                     * 00055800
*                 Meaning: Component error.                           * 00055900
*                                                                     * 00056000
*                 Action: No action required.  The function may be    * 00056100
*                 successful if invoked again.                        * 00056200
*                                                                     * 00056300
*                                                                     * 00056400
*                                                                     * 00056500
*01* REASON CODES:                                                    * 00056600
*                                                                     * 00056700
*       A unique reason code will be returned whenever the return     * 00056800
*       code is non-zero.  Reason codes, as appropriate, are defined  * 00056900
*       under their corresponding return code.  Reason code and       * 00057000
*       return code constants are defined within IWMYCON.  Note that  * 00057100
*       the high order halfword of register 0, and the reason code    * 00057200
*       variable when specified, may be non-zero and represents       * 00057300
*       diagnostic data which is NOT part of the external interface.  * 00057400
*       The high order halfword should thus be excluded from          * 00057500
*       comparison with the reason code values described above.  The  * 00057600
*       constant, IWMRSNCODE_MASK_CONST defined in IWMYCON, may be    * 00057700
*       used for this purpose.                                        * 00057800
*                                                                     * 00057900
*01* MODULE TYPE:  ASSEM-PL/X MACRO                                   * 00058000
*                                                                     * 00058100
*02*   PROCESSOR:  ASSEM-PL/X                                         * 00058200
*                                                                     * 00058300
*01* COMPONENT:  SCWLM                                                * 00058400
*                                                                     * 00058500
*01* DISTRIBUTION LIBRARY: AMACLIB                                    * 00058600
*                                                                     * 00058700
*01* EXAMPLES:                                                        * 00058800
*                                                                     * 00058900
*    To query system information:                                     * 00059000
*                                                                     * 00059100
*      IWMWSYSQ SYSINFO_BLOCK=SYSINFO,ANSLEN=ANSLEN,         X        * 00059200
*            QUERYLEN=QUERYLEN,RETCODE=RC,RSNCODE=RSN                 * 00059300
*                                                                     * 00059400
*    Where the following are declared:                                * 00059500
*                                                                     * 00059600
*      SYSINFO  DS    F             SYSINFO_BLOCK address             * 00059700
*      ANSLEN   DS    F             Length of the SYSINFO_BLOCK area  * 00059800
*      QUERYLEN DS    F             Query length                      * 00059900
*      RC       DS    F             Return code                       * 00060000
*      RSN      DS    F             Reason code                       * 00060100
*                                                                     * 00060200
*                                                                     * 00060300
*01* MACRO USAGE NOTES:                                               * 00060400
*                                                                     * 00060500
*                                                                     * 00060600
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00060700
*        global macro variable.  Any value other than 'NO' will       * 00060800
*        result in the macro expansion being printed.  The default is * 00060900
*        'YES'.  The following examples illustrate how the ZPRINT     * 00061000
*        variable should be set.                                      * 00061100
*                                                                     * 00061200
*                    GBLC &ZPRINT                                     * 00061300
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00061400
*                                                                     * 00061500
*                                                                     * 00061600
*    2.  The IWMWSYSQ macro supports multiple versions. The macro key * 00061700
*        list  below  contains the version level in which the key was * 00061800
*        first  introduced.  Positionals  are  identified by the word * 00061900
*        'Positional'  followed by the numeric value of its position. * 00062000
*        Nested  positionals  are  preceded  by their outer key.  The * 00062100
*        lowest value represents the original version and the highest * 00062200
*        value  represents  the  most  recent version of the IWMWSYSQ * 00062300
*        macro.    When  specifying  PLISTVER,  be sure that it is at * 00062400
*        least  as high as the highest version number of all the keys * 00062500
*        being used.                                                  * 00062600
*                                                                     * 00062700
*        VERSION   KEY                                                * 00062800
*                                                                     * 00062900
*              2      ANSLEN                                          * 00063000
*                     QUERYLEN                                        * 00063100
*                     SYSINFO_BLOCK                                   * 00063200
*              3      EXTENDED_DATA                                   * 00063300
*                                                                     * 00063400
*                                                                     * 00063500
*                                                                     * 00063600
*01* CHANGE ACTIVITY:                                                 * 00063700
*                                                                     * 00063800
*   Flag LineItem  FMID    Date   ID    Comment                       * 00063900
*                                                                     * 00064000
*    $L0=ARM      HBB5520 930310 PDV1:  Automatic Restart Manager.    * 00064100
*    $L1=WLMP     HBB6603 960510 PDB9RK:  Externalize IWMWSYSQ        * 00064200
*                                         service. Change version     * 00064300
*                                         level from 1 to 2 because   * 00064400
*                                         of incompatible changes.    * 00064500
*    $P1=OA03618  HBB7709 030714 3241MB:  Change PLISTVER default to  * 00064600
*                                         2 since this is the only    * 00064700
*                                         allowed value for PLISTVER. * 00064800
*    $L2=LZAAP3A  HBB7740 060628 3241NN:  Add new parameter           * 00064900
*                                         extended_data and PLISTVER  * 00065000
*                                         3.                          * 00065100
****** END OF SPECIFICATIONS *****************************************/ 00065200
*/********************************************************************* 00065300
         MACRO                                                          00065400
&XLABEL  IWMWSYSQ &SYSINFO_BLOCK=,&ANSLEN=,&QUERYLEN=,&EXTENDED_DATA=, *00065500
               &RETCODE=,&RSNCODE=,&PLISTVER=,&MF=                      00065600
.*                                                                      00065700
*                   MACDATE -06/06/22-<3>                               00065800
.*                                                                      00065900
.*******************************************************************    00066000
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00066100
.*******************************************************************    00066200
                   GBLC  &ZPRINT     YES=PRINT NO=NO PRINT              00066300
                   GBLC  &ZTEST      YES=TEST NO=NO TEST                00066400
                   GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX        00066500
.*                                                                      00066600
                   GBLC  &ZIWMWSYSQ  YES=MACRO USED AT LEAST ONCE       00066700
.*******************************************************************    00066800
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00066900
.*******************************************************************    00067000
                   LCLC  &ZMS        ERROR MESSAGE WORK AREA            00067100
                   LCLC  &ZCNDX      SYSNDX CHARACTERS                  00067200
                   LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED         00067300
                   LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR        00067400
                   LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE        00067500
                   LCLA  &ZAWRK      USED AS A WORK AREA                00067600
                   LCLA  &ZASIZ      USED FOR SIZE OF VALUE             00067700
                   LCLA  &ZN         NUMERIC WORK VARIABLE              00067800
                   LCLC  &ZC         CHARACTER WORK VARIABLE            00067900
                   LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE        00068000
                   LCLA  &ZTLA       VALUE TOO LONG VARIABLE            00068100
                   LCLC  &ZMAC_G     "G" or null                        00068200
&ZMAC_G            SETC  ''                                             00068300
                   LCLC  &ZMAC_LR                                       00068400
&ZMAC_LR           SETC  'LR'                                           00068500
                   LCLC  &ZMAC_L                                        00068600
&ZMAC_L            SETC  'L'                                            00068700
                   LCLC  &ZMAC_ST                                       00068800
&ZMAC_ST           SETC  'ST'                                           00068900
                   LCLA  &ZMACRET    MACRO RETURN CODE                  00069000
&ZMACRET           SETA  0           ASSUME NO ERRORS                   00069100
.*                                                                      00069200
                   LCLC  &ZCSYSLIST(255)        NONXKEY, POS ARRAY      00069300
                   LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()         00069400
                   LCLA  &ZPLLEN     PARAMETER LIST LENGTH              00069500
                   LCLC  &ZENDBASEPL            End of base PL          00069600
                   LCLA  &ZPLWORKA   PARAMETER LIST LENGTH              00069700
.*******************************************************************    00069800
.***AB.04  MACRO VARIABLES FOR RANGES AND SETS OF ARGUMENTS             00069900
.*******************************************************************    00070000
                   LCLA  &ZI         INDEX FOR ARRAY                    00070100
                   LCLA  &ZJ         INDEX FOR PARMS                    00070200
                   LCLA  &ZK         INDEX FOR PARSE                    00070300
                   LCLA  &ZLO        LOW RANGE VALUE                    00070400
                   LCLA  &ZHI        HIGH RANGE VALUE                   00070500
                   LCLC  &ZW         WORK AREA FOR PARM                 00070600
.********************************************************************   00070700
.***AB.05  INVOKE MVS MACROS TO CONTROL CODE GENERATION                 00070800
.********************************************************************   00070900
                   GBLC  &SYSSPLV    SP LEVEL 1,2,3 -SPLEVEL            00071000
                   GBLC  &SYSASCE    SYSTEM STATE P ANY AR-SYSSTATE     00071100
                   GBLA  &SYSALVL    SYSSTATE ARCHLVL                   00071200
                   GBLC  &SYSAM64    SYSSTATE AMODE64                   00071300
.*                                                                      00071400
                   AIF   (K'&SYSASCE GT 0).ZSYS4  SYS STATE DEFINED     00071500
                   AIF   (K'&SYSSPLV GT 0).ZSYS2  SP LEVEL DEFINED      00071600
                   SPLEVEL  TEST                                        00071700
.ZSYS2             ANOP  ,                                              00071800
                   AIF   ('&SYSSPLV' EQ '1').ZSYS3  PRE SP 3.1          00071900
                   AIF   ('&SYSSPLV' EQ '2').ZSYS3  PRE SP 3.1          00072000
                   SYSSTATE TEST                                        00072100
                   AGO   .ZSYS4                                         00072200
.ZSYS3             ANOP  ,                                              00072300
&SYSASCE           SETC  'P'         ASSUME SYSSTATE PRIMARY            00072400
.ZSYS4             ANOP  ,                                              00072500
.*******************************************************************    00072600
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00072700
.*******************************************************************    00072800
                   LCLC  &XSYSINFO_BLOCK        ++ NAME                 00072900
                   LCLC  &XANSLEN    ++ NAME                            00073000
                   LCLC  &XQUERYLEN  ++ NAME                            00073100
                   LCLC  &XEXTENDED_DATA        ++ VALUE                00073200
                   LCLC  &XRETCODE   ++ NAME                            00073300
                   LCLC  &XRSNCODE   ++ NAME                            00073400
                   LCLA  &XPLISTVER  ++ VALUE                           00073500
                   LCLC  &XMF        ++ VALUE                           00073600
                   LCLC  &XMFCTRL    ++ NAME                            00073700
                   LCLC  &XMFATTR    ++ VALUE                           00073800
                   LCLC  &XMFSCK     ++ VALUE                           00073900
.*******************************************************************    00074000
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00074100
.*******************************************************************    00074200
                   LCLC  &ZXSYSINFO_BLOCK       ++ INPUT NAME           00074300
                   LCLC  &ZXANSLEN   ++ INPUT NAME                      00074400
                   LCLC  &ZXQUERYLEN            ++ OUTPUT NAME          00074500
                   LCLC  &ZXEXTENDED_DATA       ++ INPUT VALUE          00074600
                   LCLC  &ZXRETCODE  ++ OUTPUT NAME                     00074700
                   LCLC  &ZXRSNCODE  ++ OUTPUT NAME                     00074800
                   LCLC  &ZXPLISTVER            ++ INPUT VALUE          00074900
                   LCLC  &ZXMF       ++ INPUT VALUE                     00075000
                   LCLC  &ZXMFCTRL   ++ INPUT NAME                      00075100
                   LCLC  &ZXMFATTR   ++ INPUT VALUE                     00075200
                   LCLC  &ZXMFSCK    ++ INPUT VALUE                     00075300
.********************************************************************   00075400
.***AC.PLV01  PROCESS PLISTVER                                      *   00075500
.********************************************************************   00075600
&XPLISTVER      SETA  2                                                 00075700
                AIF   (K'&PLISTVER(1) LE 0).ZPLV0                       00075800
                AIF   ('&PLISTVER(1)' NE 'MAX').ZPLV0                   00075900
&XPLISTVER      SETA  3                                                 00076000
.ZPLV0          ANOP  ,                                                 00076100
.*                                                                      00076200
                AIF   ('&EXTENDED_DATA' EQ '').ZPLV1E                   00076300
                AIF   (&XPLISTVER GE 3).ZPLV1E                          00076400
&XPLISTVER      SETA  3                                                 00076500
.ZPLV1E         ANOP  ,                                                 00076600
.*                                                                      00076700
                AIF   (K'&PLISTVER(1) LE 0).ZPVCKE                      00076800
                AIF   ('&PLISTVER(1)' EQ 'IMPLIED_VERSION').ZPVCKE      00076900
                AIF   ('&PLISTVER(1)' EQ 'MAX').ZPVCKE                  00077000
.*-------------------------------------------------------------------   00077100
                AIF   (N'&PLISTVER LE 1).ZPVCK3  CK NUM                 00077200
&ZMS            SETC  '"PLISTVER='                                      00077300
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00077400
&ZMS            SETC  '&ZMS "PLISTVER"'                                 00077500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00077600
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00077700
                AGO   .ZPVCK2                                           00077800
.ZPVCK3         ANOP  ,                                                 00077900
.*-------------------------------------------------------------------   00078000
                AIF   ('&PLISTVER'(1,1) NE '(').ZPVCK2                  00078100
&ZMS            SETC  '"PLISTVER='                                      00078200
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00078300
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00078400
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00078500
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00078600
                AGO   .ZPVCKE                                           00078700
.ZPVCK2         ANOP  ,                                                 00078800
.*-------------------------------------------------------------------   00078900
&ZCVAL          SETC  '&PLISTVER(1)'                                    00079000
                AIF   ('&ZCVAL'(1,1) EQ '(').ZPVCKE  IN GPR             00079100
                AIF   (T'&ZCVAL NE 'N').ZPVCK6  NUMERIC ERR             00079200
&ZN             SETA   &PLISTVER(1)        CONVERT TO ARITHMETIC        00079300
                AIF   (&ZN LT 2).ZPVCK6    TOO LOW                      00079400
                AIF   (&ZN LE 3).ZPVCK4A   NOT HIGH                     00079500
.ZPVCK6         ANOP  ,                                                 00079600
&ZMS            SETC  '"PLISTVER='                                      00079700
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00079800
&ZMS            SETC  '&ZMS THE RANGE IS "2-3"'                         00079900
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00080000
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00080100
&XPLISTVER      SETA  3                                                 00080200
                AGO   .ZPVCKE                                           00080300
.*-------------------------------------------------------------------   00080400
.ZPVCK4A        ANOP  ,                                                 00080500
                AIF   (&ZN GE &XPLISTVER).ZPVCK4                        00080600
&ZMS            SETC  'PLISTVER='                                       00080700
&ZMS            SETC  '&ZMS.&PLISTVER(1)'                               00080800
&ZMS            SETC  '&ZMS., BUT PLISTVER OF'                          00080900
&ZMS            SETC  '&ZMS &XPLISTVER'                                 00081000
                MNOTE 8,' &ZMS IS REQUIRED.'                            00081100
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00081200
                AGO   .ZPVCK5                                           00081300
.ZPVCK4         ANOP  ,                                                 00081400
&XPLISTVER      SETA  &PLISTVER(1)                                      00081500
.ZPVCK5         ANOP  ,                                                 00081600
.ZPVCKE         ANOP  ,                                                 00081700
.********************************************************************   00081800
.***AG.MF01 PROCESS MF MACRO FORMS                                      00081900
.********************************************************************   00082000
                   ACTR  10000                                          00082100
.*------------------------------------------------------------------    00082200
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00082300
&XMF               SETC  ''          INITIALIZE XVARIABLE               00082400
.*-------------------------------------------------------------------   00082500
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00082600
.ZG26              ANOP  ,                                              00082700
&ZTLC              SETC 'S'                                             00082800
                   AIF   ('&MF(1)' NE '&ZTLC').ZG27                     00082900
&XMF               SETC  'S'         SET KEYWORD                        00083000
                   AIF   (N'&MF LE 1).ZG26A     CK NUM                  00083100
&ZMS               SETC  '"MF='                                         00083200
&ZMS               SETC  '&ZMS.&MF"'                                    00083300
&ZMS               SETC  '&ZMS "MF"'                                    00083400
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00083500
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00083600
.ZG26A             ANOP  ,                                              00083700
.*-------------------------------------------------------------------   00083800
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00083900
.ZG27              ANOP  ,                                              00084000
&ZTLC              SETC 'L'                                             00084100
                   AIF   ('&MF(1)' NE '&ZTLC').ZG34                     00084200
&XMF               SETC  'L'         SET KEYWORD                        00084300
                   AIF   (N'&MF LE 3).ZG27A     CK NUM                  00084400
&ZMS               SETC  '"MF='                                         00084500
&ZMS               SETC  '&ZMS.&MF"'                                    00084600
&ZMS               SETC  '&ZMS "MF"'                                    00084700
                   MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'           00084800
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00084900
.ZG27A             ANOP  ,                                              00085000
.*-------------------------------------------------------------------   00085100
.***AG.KKCTL08 -MF(L) SPECIAL CHECK                                     00085200
                   AIF   (N'&SYSLIST NE 0).ZG27B  POSITIONALS?          00085300
                   AIF   ('&SYSINFO_BLOCK' NE '').ZG27B  KEYS?          00085400
                   AIF   ('&ANSLEN' NE '').ZG27B  KEYS?                 00085500
                   AIF   ('&QUERYLEN' NE '').ZG27B  KEYS?               00085600
                   AIF   ('&EXTENDED_DATA' NE '').ZG27B  KEYS?          00085700
                   AIF   ('&RETCODE' NE '').ZG27B  KEYS?                00085800
                   AIF   ('&RSNCODE' NE '').ZG27B  KEYS?                00085900
                   AGO    .ZG27C     INVOCATION OKAY                    00086000
.ZG27B             ANOP  ,                                              00086100
&ZMS               SETC  'THE "L" FORM OF "MF"'                         00086200
&ZMS               SETC  '&ZMS CAN ONLY HAVE'                           00086300
&ZMS               SETC  '&ZMS THE "PLISTVER" KEY'                      00086400
                   MNOTE 8,' &ZMS SPECIFIED ON THE INVOCATION.'         00086500
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00086600
.ZG27C             ANOP  ,                                              00086700
.*-------------------------------------------------------------------   00086800
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00086900
&ZXMFCTRL          SETC  'INPUT'     SET IN/OUTPUT                      00087000
&XMFCTRL           SETC  '&MF(2,1)'  SET XVARIABLE                      00087100
                   AIF   (N'&MF(2) GT 1).ZG29B  MULTI PARMS             00087200
&XMFCTRL           SETC  '&MF(2)'    SET XVARIABLE                      00087300
.ZG29B             AIF   (K'&MF(2) GT 0).ZG29C                          00087400
&ZXMFCTRL          SETC  ''          RESET IN/OUTPUT                    00087500
&ZMS               SETC  'WHEN "L" IS SPECIFIED'                        00087600
&ZMS               SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'            00087700
                   MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                   00087800
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00087900
.ZG29C             ANOP  ,                                              00088000
.*-------------------------------------------------------------------   00088100
.***AG.KCK01 NAME, OPT RQD INPUT, POS(2) -GPR NOT ALLOWED               00088200
                   AIF   (K'&ZXMFCTRL LE 0).ZG29P  NOT I/O              00088300
                   AIF   ('&XMFCTRL'(1,1) NE '(').ZG29P                 00088400
&ZXMFCTRL          SETC  ''          RESET IN/OUTPUT                    00088500
&ZMS               SETC  '"MF='                                         00088600
&ZMS               SETC  '&ZMS.&MF"'                                    00088700
&ZMS               SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'      00088800
                   MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 2.'              00088900
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00089000
.ZG29P             ANOP  ,                                              00089100
.*-------------------------------------------------------------------   00089200
.***AG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE                      00089300
&ZXMFATTR          SETC  'INPUT'     SET IN/OUTPUT                      00089400
&XMFATTR           SETC  '0D'                                           00089500
                   AIF   (K'&MF(3) LE 0).ZG32B  PARM                    00089600
&XMFATTR           SETC  '&MF(3,1)'  SET XVARIABLE                      00089700
                   AIF   (N'&MF(3) GT 1).ZG32B  MULTI                   00089800
&XMFATTR           SETC  '&MF(3)'    SET XVARIABLE                      00089900
.ZG32B             ANOP  ,                                              00090000
.*-------------------------------------------------------------------   00090100
.***AG.KCK01 VALUE, OPT INPUT, POS(3) -GPR NOT ALLOWED                  00090200
                   AIF   (K'&ZXMFATTR LE 0).ZG32P  NOT I/O              00090300
                   AIF   ('&XMFATTR'(1,1) NE '(').ZG32P                 00090400
&ZXMFATTR          SETC  ''          RESET IN/OUTPUT                    00090500
&ZMS               SETC  '"MF='                                         00090600
&ZMS               SETC  '&ZMS.&MF"'                                    00090700
&ZMS               SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'      00090800
                   MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 3.'              00090900
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00091000
.ZG32P             ANOP  ,                                              00091100
.*-------------------------------------------------------------------   00091200
.***AG.KCK03 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH                 00091300
                   AIF   (K'&ZXMFATTR LE 0).ZG32S  NOT I/O              00091400
                   AIF   (K'&XMFATTR LE 60).ZG32S  LNG OK               00091500
&ZXMFATTR          SETC  ''          RESET IN/OUTPUT                    00091600
&ZMS               SETC  '"MF='                                         00091700
&ZMS               SETC  '&ZMS.&MF"'                                    00091800
&ZMS               SETC  '&ZMS ARGUMENT 3 EXCEEDS THE MAXIMUM'          00091900
                   MNOTE 8,' &ZMS LENGTH OF 60 CHARACTERS.'             00092000
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00092100
.ZG32S             ANOP  ,                                              00092200
.*-------------------------------------------------------------------   00092300
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00092400
.ZG34              ANOP  ,                                              00092500
&ZTLC              SETC 'E'                                             00092600
                   AIF   ('&MF(1)' NE '&ZTLC').ZG42                     00092700
&XMF               SETC  'E'         SET KEYWORD                        00092800
                   AIF   (N'&MF LE 3).ZG34A     CK NUM                  00092900
&ZMS               SETC  '"MF='                                         00093000
&ZMS               SETC  '&ZMS.&MF"'                                    00093100
&ZMS               SETC  '&ZMS "MF"'                                    00093200
                   MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'           00093300
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00093400
.ZG34A             ANOP  ,                                              00093500
.*-------------------------------------------------------------------   00093600
.***AG.KXVAR06 NAME, OPT RQD INPUT, POS(2) -XVARIABLE                   00093700
&ZXMFCTRL          SETC  'INPUT'     SET IN/OUTPUT                      00093800
&XMFCTRL           SETC  '&MF(2,1)'  SET XVARIABLE                      00093900
                   AIF   (N'&MF(2) GT 1).ZG36B  MULTI PARMS             00094000
&XMFCTRL           SETC  '&MF(2)'    SET XVARIABLE                      00094100
.ZG36B             AIF   (K'&MF(2) GT 0).ZG36C                          00094200
&ZXMFCTRL          SETC  ''          RESET IN/OUTPUT                    00094300
&ZMS               SETC  'WHEN "E" IS SPECIFIED'                        00094400
&ZMS               SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'            00094500
                   MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                   00094600
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00094700
.ZG36C             ANOP  ,                                              00094800
.*-------------------------------------------------------------------   00094900
.***AG.KCK02 NAME, OPT RQD INPUT, POS(2) -GPR OUT OF RANGE              00095000
                   AIF   (K'&ZXMFCTRL LE 0).ZG36R  NOT I/O              00095100
                   AIF   ('&XMFCTRL'(1,1) NE '(').ZG36R                 00095200
&ZCGPR             SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)                     00095300
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG36P                   00095400
                   AIF   (K'&ZCGPR GT 2).ZG36Q                          00095500
                   AIF   ('&ZCGPR' EQ '0').ZG36Q                        00095600
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00095700
                   AIF   (T'&ZCGPR NE 'N').ZG36Q  INVALID REG NAME      00095800
.ZG36P             ANOP  ,                                              00095900
                   AIF   (T'&ZCGPR NE 'N').ZG36R  NON NUMERIC           00096000
                   AIF   ('&ZCGPR' LT '1').ZG36Q                        00096100
                   AIF   ('&ZCGPR' LE '12').ZG36R                       00096200
.ZG36Q             ANOP  ,                                              00096300
&ZMS               SETC  '"MF='                                         00096400
&ZMS               SETC  '&ZMS.&MF"'                                    00096500
&ZMS               SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'      00096600
                   MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'               00096700
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00096800
.ZG36R             ANOP  ,                                              00096900
.*-------------------------------------------------------------------   00097000
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00097100
&XMFSCK            SETC  ''          INITIALIZE XVARIABLE               00097200
.ZG40A   AIF   ('&MF(3)' NE 'COMPLETE').ZG41A                           00097300
&XMFSCK            SETC  'COMPLETE'  SET KEYWORD                        00097400
.*-------------------------------------------------------------------   00097500
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00097600
.ZG41A             AIF   (K'&XMFSCK GT 0).ZG41C  KEYWORD                00097700
                   AIF   (K'&MF(3) LE 0).ZG41B                          00097800
&ZMS               SETC  '"MF='                                         00097900
&ZMS               SETC  '&ZMS.&MF"'                                    00098000
&ZMS               SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '      00098100
&ZMS               SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'            00098200
&ZMS               SETC  '&ZMS "COMPLETE".'                             00098300
                   MNOTE 8,' &ZMS '                                     00098400
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00098500
.ZG41B             ANOP  ,                                              00098600
&XMFSCK            SETC  'COMPLETE'  SET DEFAULT KEYWORD                00098700
.ZG41C             ANOP  ,                                              00098800
&ZXMFSCK           SETC  'INPUT'     SET IN/OUTPUT                      00098900
.*------------------------------------------------------------------    00099000
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00099100
.ZG42              ANOP  ,                                              00099200
&ZXMF              SETC  'INPUT'     SET IN/OUTPUT                      00099300
                   AIF   (K'&XMF GT 0).ZG42E    VALID ARG               00099400
                   AIF   (T'&MF EQ 'O').ZG42D   OMITTED                 00099500
&ZASYSLNDX         SETA  0                                              00099600
.ZG42A             ANOP  ,           POSITIONAL MACRO KEY               00099700
&ZASYSLNDX         SETA  &ZASYSLNDX+1                                   00099800
                   AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG42C               00099900
&ZTLC              SETC 'MF'                                            00100000
                   AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG42A      00100100
.ZG42B             ANOP  ,                                              00100200
&ZXMF              SETC  ''          RESET IN/OUTPUT                    00100300
&ZMS               SETC  'THE "MF" KEY'                                 00100400
&ZMS               SETC  '&ZMS MUST CONTAIN ONE'                        00100500
                   MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'               00100600
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00100700
                   AGO   .ZG42E                                         00100800
.ZG42C             ANOP  ,                                              00100900
&ZXMF              SETC  ''          RESET IN/OUTPUT                    00101000
&ZMS               SETC  '"MF='                                         00101100
&ZMS               SETC  '&ZMS.&MF"'                                    00101200
&ZMS               SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '      00101300
&ZMS               SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'            00101400
&ZMS               SETC  '&ZMS "S",'                                    00101500
&ZMS               SETC  '&ZMS "L",'                                    00101600
&ZMS               SETC  '&ZMS OR "E".'                                 00101700
                   MNOTE 8,' &ZMS '                                     00101800
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00101900
                   AGO   .ZG42E                                         00102000
.ZG42D             ANOP  ,                                              00102100
&XMF               SETC  'S'         SET DEFAULT KEYWORD                00102200
&XMFSCK            SETC  'COMPLETE'  COMPLETE CHECKING                  00102300
.ZG42E             ANOP  ,                                              00102400
.********************************************************************   00102500
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00102600
.********************************************************************   00102700
                   ACTR  10000                                          00102800
.*-------------------------------------------------------------------   00102900
.***AG.MF03 MF=(SLE)                                                    00103000
                   AIF   ('&XMF' EQ 'L').ZGMFX                          00103100
.*----------------------------------------------------------------***   00103200
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00103300
                   AIF   (N'&SYSINFO_BLOCK LE 1).ZG2A  CK NUM           00103400
&ZMS               SETC  '"SYSINFO_BLOCK='                              00103500
&ZMS               SETC  '&ZMS.&SYSINFO_BLOCK"'                         00103600
&ZMS               SETC  '&ZMS "SYSINFO_BLOCK"'                         00103700
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00103800
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00103900
.ZG2A              ANOP  ,                                              00104000
.*-------------------------------------------------------------------   00104100
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00104200
&ZXSYSINFO_BLOCK   SETC  'INPUT'     SET IN/OUTPUT                      00104300
&XSYSINFO_BLOCK    SETC  '&SYSINFO_BLOCK(1)'    SET XVARIABLE           00104400
                   AIF   (N'&SYSINFO_BLOCK GT 1).ZG2B  MULTI PARMS      00104500
&XSYSINFO_BLOCK    SETC  '&SYSINFO_BLOCK'       SET XVARIABLE           00104600
.ZG2B              AIF   (K'&SYSINFO_BLOCK(1) GT 0).ZG2C                00104700
&ZXSYSINFO_BLOCK   SETC  ''          RESET IN/OUTPUT                    00104800
&ZMS               SETC  ' '                                            00104900
&ZMS               SETC  '&ZMS "SYSINFO_BLOCK" KEY AND ITS'             00105000
                   MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'               00105100
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00105200
.ZG2C              ANOP  ,                                              00105300
.*-------------------------------------------------------------------   00105400
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00105500
                   AIF   (K'&ZXSYSINFO_BLOCK LE 0).ZG2R  NOT I/O        00105600
                   AIF   ('&XSYSINFO_BLOCK'(1,1) NE '(').ZG2R           00105700
&ZCGPR             SETC  '&XSYSINFO_BLOCK'(2,K'&XSYSINFO_BLOCK-2)       00105800
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG2P                    00105900
                   AIF   (K'&ZCGPR GT 2).ZG2Q                           00106000
                   AIF   ('&ZCGPR' EQ '0').ZG2Q                         00106100
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00106200
                   AIF   (T'&ZCGPR NE 'N').ZG2Q  INVALID REG NAME       00106300
.ZG2P              ANOP  ,                                              00106400
                   AIF   (T'&ZCGPR NE 'N').ZG2R  NON NUMERIC            00106500
                   AIF   ('&ZCGPR' LT '2').ZG2Q                         00106600
                   AIF   ('&ZCGPR' LE '12').ZG2R                        00106700
.ZG2Q              ANOP  ,                                              00106800
&ZMS               SETC  '"SYSINFO_BLOCK='                              00106900
&ZMS               SETC  '&ZMS.&SYSINFO_BLOCK"'                         00107000
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00107100
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00107200
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00107300
.ZG2R              ANOP  ,                                              00107400
.*----------------------------------------------------------------***   00107500
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00107600
                   AIF   (N'&ANSLEN LE 1).ZG5A  CK NUM                  00107700
&ZMS               SETC  '"ANSLEN='                                     00107800
&ZMS               SETC  '&ZMS.&ANSLEN"'                                00107900
&ZMS               SETC  '&ZMS "ANSLEN"'                                00108000
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00108100
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00108200
.ZG5A              ANOP  ,                                              00108300
.*-------------------------------------------------------------------   00108400
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00108500
&ZXANSLEN          SETC  'INPUT'     SET IN/OUTPUT                      00108600
&XANSLEN           SETC  '&ANSLEN(1)'           SET XVARIABLE           00108700
                   AIF   (N'&ANSLEN GT 1).ZG5B  MULTI PARMS             00108800
&XANSLEN           SETC  '&ANSLEN'   SET XVARIABLE                      00108900
.ZG5B              AIF   (K'&ANSLEN(1) GT 0).ZG5C                       00109000
&ZXANSLEN          SETC  ''          RESET IN/OUTPUT                    00109100
&ZMS               SETC  ' '                                            00109200
&ZMS               SETC  '&ZMS "ANSLEN" KEY AND ITS'                    00109300
                   MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'               00109400
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00109500
.ZG5C              ANOP  ,                                              00109600
.*-------------------------------------------------------------------   00109700
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00109800
                   AIF   (K'&ZXANSLEN LE 0).ZG5R  NOT I/O               00109900
                   AIF   ('&XANSLEN'(1,1) NE '(').ZG5R                  00110000
&ZCGPR             SETC  '&XANSLEN'(2,K'&XANSLEN-2)                     00110100
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG5P                    00110200
                   AIF   (K'&ZCGPR GT 2).ZG5Q                           00110300
                   AIF   ('&ZCGPR' EQ '0').ZG5Q                         00110400
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00110500
                   AIF   (T'&ZCGPR NE 'N').ZG5Q  INVALID REG NAME       00110600
.ZG5P              ANOP  ,                                              00110700
                   AIF   (T'&ZCGPR NE 'N').ZG5R  NON NUMERIC            00110800
                   AIF   ('&ZCGPR' LT '2').ZG5Q                         00110900
                   AIF   ('&ZCGPR' LE '12').ZG5R                        00111000
.ZG5Q              ANOP  ,                                              00111100
&ZMS               SETC  '"ANSLEN='                                     00111200
&ZMS               SETC  '&ZMS.&ANSLEN"'                                00111300
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00111400
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00111500
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00111600
.ZG5R              ANOP  ,                                              00111700
.*----------------------------------------------------------------***   00111800
.***AG.KXVAR05 NAME, RQD OUTPUT, KEYS -XVARIABLE KEY                    00111900
                   AIF   (N'&QUERYLEN LE 1).ZG8A  CK NUM                00112000
&ZMS               SETC  '"QUERYLEN='                                   00112100
&ZMS               SETC  '&ZMS.&QUERYLEN"'                              00112200
&ZMS               SETC  '&ZMS "QUERYLEN"'                              00112300
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00112400
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00112500
.ZG8A              ANOP  ,                                              00112600
.*-------------------------------------------------------------------   00112700
.***AG.KXVAR06 NAME, RQD OUTPUT, KEYS -XVARIABLE                        00112800
&ZXQUERYLEN        SETC  'OUTPUT'    SET IN/OUTPUT                      00112900
&XQUERYLEN         SETC  '&QUERYLEN(1)'         SET XVARIABLE           00113000
                   AIF   (N'&QUERYLEN GT 1).ZG8B  MULTI PARMS           00113100
&XQUERYLEN         SETC  '&QUERYLEN'            SET XVARIABLE           00113200
.ZG8B              AIF   (K'&QUERYLEN(1) GT 0).ZG8C                     00113300
&ZXQUERYLEN        SETC  ''          RESET IN/OUTPUT                    00113400
&ZMS               SETC  ' '                                            00113500
&ZMS               SETC  '&ZMS "QUERYLEN" KEY AND ITS'                  00113600
                   MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'               00113700
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00113800
.ZG8C              ANOP  ,                                              00113900
.*-------------------------------------------------------------------   00114000
.***AG.KCK02 NAME, RQD OUTPUT, KEYS -GPR OUT OF RANGE                   00114100
                   AIF   (K'&ZXQUERYLEN LE 0).ZG8R  NOT I/O             00114200
                   AIF   ('&XQUERYLEN'(1,1) NE '(').ZG8R                00114300
&ZCGPR             SETC  '&XQUERYLEN'(2,K'&XQUERYLEN-2)                 00114400
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG8P                    00114500
                   AIF   (K'&ZCGPR GT 2).ZG8Q                           00114600
                   AIF   ('&ZCGPR' EQ '0').ZG8Q                         00114700
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00114800
                   AIF   (T'&ZCGPR NE 'N').ZG8Q  INVALID REG NAME       00114900
.ZG8P              ANOP  ,                                              00115000
                   AIF   (T'&ZCGPR NE 'N').ZG8R  NON NUMERIC            00115100
                   AIF   ('&ZCGPR' LT '2').ZG8Q                         00115200
                   AIF   ('&ZCGPR' LE '12').ZG8R                        00115300
.ZG8Q              ANOP  ,                                              00115400
&ZMS               SETC  '"QUERYLEN='                                   00115500
&ZMS               SETC  '&ZMS.&QUERYLEN"'                              00115600
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00115700
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00115800
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00115900
.ZG8R              ANOP  ,                                              00116000
.*------------------------------------------------------------------    00116100
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00116200
&XEXTENDED_DATA    SETC  ''          INITIALIZE XVARIABLE               00116300
.*-------------------------------------------------------------------   00116400
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00116500
.ZG12              ANOP  ,                                              00116600
                   AIF   (K'&EXTENDED_DATA(1) LE 0).ZG12A               00116700
&ZTLC              SETC 'NO'                                            00116800
                   AIF   ('&EXTENDED_DATA(1)' NE '&ZTLC').ZG13          00116900
&XEXTENDED_DATA    SETC  'NO'        SET KEYWORD                        00117000
                   AIF   (N'&EXTENDED_DATA LE 1).ZG12A  CK NUM          00117100
&ZMS               SETC  '"EXTENDED_DATA='                              00117200
&ZMS               SETC  '&ZMS.&EXTENDED_DATA"'                         00117300
&ZMS               SETC  '&ZMS "EXTENDED_DATA"'                         00117400
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00117500
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00117600
.ZG12A             ANOP  ,                                              00117700
.*-------------------------------------------------------------------   00117800
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00117900
.ZG13              ANOP  ,                                              00118000
&ZTLC              SETC 'YES'                                           00118100
                   AIF   ('&EXTENDED_DATA(1)' NE '&ZTLC').ZG14          00118200
&XEXTENDED_DATA    SETC  'YES'       SET KEYWORD                        00118300
                   AIF   (N'&EXTENDED_DATA LE 1).ZG13A  CK NUM          00118400
&ZMS               SETC  '"EXTENDED_DATA='                              00118500
&ZMS               SETC  '&ZMS.&EXTENDED_DATA"'                         00118600
&ZMS               SETC  '&ZMS "EXTENDED_DATA"'                         00118700
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00118800
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00118900
.ZG13A             ANOP  ,                                              00119000
.*------------------------------------------------------------------    00119100
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00119200
.ZG14              ANOP  ,                                              00119300
&ZXEXTENDED_DATA   SETC  'INPUT'     SET IN/OUTPUT                      00119400
                   AIF   (K'&XEXTENDED_DATA GT 0).ZG14E  VALID ARG      00119500
                   AIF   (T'&EXTENDED_DATA EQ 'O').ZG14D  OMITTED       00119600
&ZASYSLNDX         SETA  0                                              00119700
.ZG14A             ANOP  ,           POSITIONAL MACRO KEY               00119800
&ZASYSLNDX         SETA  &ZASYSLNDX+1                                   00119900
                   AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG14C               00120000
&ZTLC              SETC 'EXTENDED_DATA'                                 00120100
                   AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG14A      00120200
.ZG14B             ANOP  ,                                              00120300
&ZXEXTENDED_DATA   SETC  ''          RESET IN/OUTPUT                    00120400
&ZMS               SETC  'THE "EXTENDED_DATA" KEY'                      00120500
&ZMS               SETC  '&ZMS MUST CONTAIN ONE'                        00120600
                   MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'               00120700
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00120800
                   AGO   .ZG14E                                         00120900
.ZG14C             ANOP  ,                                              00121000
&ZXEXTENDED_DATA   SETC  ''          RESET IN/OUTPUT                    00121100
&ZMS               SETC  '"EXTENDED_DATA='                              00121200
&ZMS               SETC  '&ZMS.&EXTENDED_DATA"'                         00121300
&ZMS               SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '      00121400
&ZMS               SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'            00121500
&ZMS               SETC  '&ZMS "NO"'                                    00121600
&ZMS               SETC  '&ZMS OR "YES".'                               00121700
                   MNOTE 8,' &ZMS '                                     00121800
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00121900
                   AGO   .ZG14E                                         00122000
.ZG14D             ANOP  ,                                              00122100
&XEXTENDED_DATA    SETC  'NO'        SET DEFAULT KEYWORD                00122200
.ZG14E             ANOP  ,                                              00122300
.*----------------------------------------------------------------***   00122400
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00122500
                   AIF   (N'&RETCODE LE 1).ZG16A  CK NUM                00122600
&ZMS               SETC  '"RETCODE='                                    00122700
&ZMS               SETC  '&ZMS.&RETCODE"'                               00122800
&ZMS               SETC  '&ZMS "RETCODE"'                               00122900
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00123000
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00123100
.ZG16A             ANOP  ,                                              00123200
.*-------------------------------------------------------------------   00123300
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00123400
                   AIF   (K'&RETCODE(1) LE 0).ZG16C  NO PARM            00123500
&ZXRETCODE         SETC  'OUTPUT'    SET OUTPUT                         00123600
&XRETCODE          SETC  '&RETCODE(1)'          SET XVARIABLE           00123700
                   AIF   (N'&RETCODE GT 1).ZG16C                        00123800
&XRETCODE          SETC  '&RETCODE'  SET XVARIABLE                      00123900
.ZG16C             ANOP  ,                                              00124000
.*-------------------------------------------------------------------   00124100
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00124200
                   AIF   (K'&ZXRETCODE LE 0).ZG16R  NOT I/O             00124300
                   AIF   ('&XRETCODE'(1,1) NE '(').ZG16R                00124400
&ZCGPR             SETC  '&XRETCODE'(2,K'&XRETCODE-2)                   00124500
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG16P                   00124600
                   AIF   (K'&ZCGPR GT 2).ZG16Q                          00124700
                   AIF   ('&ZCGPR' EQ '0').ZG16Q                        00124800
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00124900
                   AIF   (T'&ZCGPR NE 'N').ZG16Q  INVALID REG NAME      00125000
.ZG16P             ANOP  ,                                              00125100
                   AIF   (T'&ZCGPR NE 'N').ZG16R  NON NUMERIC           00125200
                   AIF   ('&ZCGPR' LT '2').ZG16Q                        00125300
                   AIF   ('&ZCGPR' LE '12').ZG16R                       00125400
.ZG16Q             ANOP  ,                                              00125500
&ZMS               SETC  '"RETCODE='                                    00125600
&ZMS               SETC  '&ZMS.&RETCODE"'                               00125700
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00125800
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00125900
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00126000
.ZG16R             ANOP  ,                                              00126100
.*----------------------------------------------------------------***   00126200
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00126300
                   AIF   (N'&RSNCODE LE 1).ZG19A  CK NUM                00126400
&ZMS               SETC  '"RSNCODE='                                    00126500
&ZMS               SETC  '&ZMS.&RSNCODE"'                               00126600
&ZMS               SETC  '&ZMS "RSNCODE"'                               00126700
                   MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'            00126800
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00126900
.ZG19A             ANOP  ,                                              00127000
.*-------------------------------------------------------------------   00127100
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00127200
                   AIF   (K'&RSNCODE(1) LE 0).ZG19C  NO PARM            00127300
&ZXRSNCODE         SETC  'OUTPUT'    SET OUTPUT                         00127400
&XRSNCODE          SETC  '&RSNCODE(1)'          SET XVARIABLE           00127500
                   AIF   (N'&RSNCODE GT 1).ZG19C                        00127600
&XRSNCODE          SETC  '&RSNCODE'  SET XVARIABLE                      00127700
.ZG19C             ANOP  ,                                              00127800
.*-------------------------------------------------------------------   00127900
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00128000
                   AIF   (K'&ZXRSNCODE LE 0).ZG19R  NOT I/O             00128100
                   AIF   ('&XRSNCODE'(1,1) NE '(').ZG19R                00128200
&ZCGPR             SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                   00128300
                   AIF   ('&ZCGPR'(1,1) NE '0').ZG19P                   00128400
                   AIF   (K'&ZCGPR GT 2).ZG19Q                          00128500
                   AIF   ('&ZCGPR' EQ '0').ZG19Q                        00128600
&ZCGPR             SETC  '&ZCGPR'(2,1)                                  00128700
                   AIF   (T'&ZCGPR NE 'N').ZG19Q  INVALID REG NAME      00128800
.ZG19P             ANOP  ,                                              00128900
                   AIF   (T'&ZCGPR NE 'N').ZG19R  NON NUMERIC           00129000
                   AIF   ('&ZCGPR' LT '2').ZG19Q                        00129100
                   AIF   ('&ZCGPR' LE '12').ZG19R                       00129200
.ZG19Q             ANOP  ,                                              00129300
&ZMS               SETC  '"RSNCODE='                                    00129400
&ZMS               SETC  '&ZMS.&RSNCODE"'                               00129500
&ZMS               SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'      00129600
                   MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'               00129700
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00129800
.ZG19R             ANOP  ,                                              00129900
.******************************************************************     00130000
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00130100
.******************************************************************     00130200
                   ACTR  10000                                          00130300
.*----------------------------------------------------------------***   00130400
.***AH.P02 EXTRA POSITIONALS                                            00130500
                   AIF   (N'&SYSLIST LE 0).ZGLISTX  NO EXTRAS           00130600
                   AIF   (N'&SYSLIST NE 2).ZGLISTX1  NOT NULL           00130700
                   AIF   ('&SYSLIST(1)' NE '').ZGLISTX1  NOT NULL       00130800
                   AIF   ('&SYSLIST(2)' EQ '').ZGLISTX  NOT NULL        00130900
.ZGLISTX1          ANOP  ,                                              00131000
&ZCVAL             SETC  ''          ERROR FIELD                        00131100
&ZAWRK             SETA  0           POSITIONAL NUMBER                  00131200
.ZGLIST2           ANOP  ,                                              00131300
&ZAWRK             SETA  &ZAWRK+1    NEXT POSITIONAL                    00131400
                   AIF   (&ZAWRK GT N'&SYSLIST).ZGLIST3  DONE           00131500
&ZCVAL             SETC '&ZCVAL,&SYSLIST(&ZAWRK)'  EXTRA                00131600
                   AGO   .ZGLIST2                                       00131700
.*                                                                      00131800
.ZGLIST3           ANOP  ,                                              00131900
&ZCVAL             SETC '&ZCVAL'(2,K'&ZCVAL-1)  STRIP COMMA             00132000
&ZMS               SETC  'POSITIONAL ARGUMENT(S),'                      00132100
&ZMS               SETC  '&ZMS "&ZCVAL"'                                00132200
&ZMS               SETC  '&ZMS CANNOT BE USED.'                         00132300
&ZMS               SETC  '&ZMS NO POSITIONAL ARGUMENTS'                 00132400
                   MNOTE 8,' &ZMS ARE ALLOWED.'                         00132500
&ZMACRET           SETA  8           SET MACRO ERROR RETURN CODE        00132600
.ZGLISTX           ANOP  ,                                              00132700
&ZASYSLNDX         SETA  0                                              00132800
.*-------------------------------------------------------------------   00132900
.***AG.MF04 MF=(SLE)                                                    00133000
.ZGMFX             ANOP  ,           END OF FULL SYNTAX CHECK           00133100
.*******************************************************************    00133200
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       00133300
.*******************************************************************    00133400
                   AIF   (&ZMACRET NE 0).ZLX2   ERROR DETECTED          00133500
.*******************************************************************    00133600
.***AE.01  START OF IWMWSYSQ MACRO CODE                                 00133700
.*******************************************************************    00133800
                   LCLC  &M0M0001                 NAME                  00133900
&M0M0001           SETC  '&XLABEL'                SET NAME              00134000
                   AIF   (K'&XLABEL NE 0).XLAB2                         00134100
&M0M0001           SETC  'M00M&SYSNDX'            DEFAULT NAME          00134200
.*                                                                      00134300
.XLAB2             ANOP  ,                                              00134400
                   AIF   ('&XMF' EQ 'L').XLAB3                          00134500
&M0M0001 DS    0H                             IWMWSYSQ-3                00134600
.XLAB3             ANOP  ,                                              00134700
.*******************************************************************    00134800
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              00134900
.*******************************************************************    00135000
              PUSH  PRINT                                               00135100
                   AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON     00135200
                   PRINT OFF         ++ PR01                            00135300
                   AGO   .ZPRNTXX                                       00135400
.ZPRINTX           PRINT ON                                             00135500
.ZPRNTXX           ANOP  ,                                              00135600
.********************************************************************   00135700
.***AL.L01 INTERNAL ARRAY TO PRODUCE FORMATTED CODE                     00135800
.********************************************************************   00135900
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       00136000
                      LCLA  &ZOPN1         INVOCATION INDEX             00136100
                      LCLC  &ZOPL(4095)    LABEL                        00136200
                      LCLC  &ZOPO(4095)    OPERATION                    00136300
                      LCLC  &ZOPV(4095)    VALUE                        00136400
                      LCLC  &ZOPD(4095)    DESCRIPTION                  00136500
.*                                                                      00136600
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     00136700
.******************************************************************     00136800
.***AL.L10 IWMWSYSQ FMT=LIST MF=S!L PARAMETERS                          00136900
.******************************************************************     00137000
                      AIF   ('&XMF' EQ 'L').ZLMFSL2                     00137100
                      AIF   ('&XMF' NE 'S').ZLMFSLX                     00137200
&XMFCTRL              SETC  '#Z'.'&SYSNDX'.'A'                          00137300
&XMFATTR              SETC  '0D'                                        00137400
.*                                                                      00137500
&ZOPN                 SETA  &ZOPN+1                                     00137600
&ZOPL(&ZOPN)          SETC  ' '                                         00137700
                      AIF   (&SYSALVL NE 0).ZALVL6A                     00137800
&ZOPO(&ZOPN)          SETC  'B'                                         00137900
&ZOPV(&ZOPN)          SETC  '&XMFCTRL.S'                                00138000
                      AGO   .ZALVL6B                                    00138100
.ZALVL6A              ANOP                                              00138200
&ZOPO(&ZOPN)          SETC  'CNOP'                                      00138300
&ZOPV(&ZOPN)          SETC  '4,8'                                       00138400
&ZOPN                 SETA  &ZOPN+1                                     00138500
&ZOPL(&ZOPN)          SETC  ' '                                         00138600
&ZOPO(&ZOPN)          SETC  'BRAS'                                      00138700
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL.S'                              00138800
.ZALVL6B              ANOP                                              00138900
&ZOPD(&ZOPN)          SETC  '++ IWMWSYSQ ARG PARMS'                     00139000
.*                                                                      00139100
&ZOPN                 SETA  &ZOPN+1                                     00139200
&ZOPL(&ZOPN)          SETC  ' '                                         00139300
&ZOPO(&ZOPN)          SETC  'SPACE'                                     00139400
&ZOPV(&ZOPN)          SETC  '1'                                         00139500
&ZOPD(&ZOPN)          SETC  ' '                                         00139600
.*                                                                      00139700
.ZLMFSL2              ANOP  ,                                           00139800
.*-------------------------------------------------------------------   00139900
.***AM.L00  IWMWSYSQ FMT=LIST name                                      00140000
                      AIF   ('&XMF' NE 'L').ZLMFSL2M                    00140100
&ZOPN                 SETA &ZOPN+1                                      00140200
&ZOPL(&ZOPN)          SETC '&M0M0001'                                   00140300
&ZOPO(&ZOPN)          SETC 'EQU'                                        00140400
&ZOPV(&ZOPN)          SETC '&XMFCTRL'                                   00140500
&ZOPD(&ZOPN)          SETC '++ IWMWSYSQ NAME'                           00140600
.ZLMFSL2M             ANOP  ,                                           00140700
.*-------------------------------------------------------------------   00140800
.***AM.L01  IWMWSYSQ FMT=LIST PARAMETERS                                00140900
&ZOPN                 SETA &ZOPN+1                                      00141000
&ZOPL(&ZOPN)          SETC '&XMFCTRL'                                   00141100
&ZOPO(&ZOPN)          SETC 'DS'                                         00141200
&ZOPV(&ZOPN)          SETC '&XMFATTR'                                   00141300
&ZOPD(&ZOPN)          SETC '++ IWMWSYSQ PARM LIST'                      00141400
.*-------------------------------------------------------------------   00141500
.***AM.L09  XACRO CL4                                                   00141600
&ZOPN                 SETA &ZOPN+1                                      00141700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XACRO'                            00141800
&ZOPO(&ZOPN)          SETC 'DS'                                         00141900
&ZOPV(&ZOPN)          SETC 'CL4'                                        00142000
&ZOPD(&ZOPN)          SETC '++ CONSTANT '                               00142100
.*-------------------------------------------------------------------   00142200
.***AM.L02 XVERSION XL1                                                 00142300
&ZOPN                 SETA &ZOPN+1                                      00142400
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XVERSION'                         00142500
&ZOPO(&ZOPN)          SETC 'DS'                                         00142600
&ZOPV(&ZOPN)          SETC 'XL1'                                        00142700
&ZOPD(&ZOPN)          SETC '++ INPUT XVERSION'                          00142800
.*-------------------------------------------------------------------   00142900
.***AM.L09  XRSV001 CL1                                                 00143000
&ZOPN                 SETA &ZOPN+1                                      00143100
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV001'                          00143200
&ZOPO(&ZOPN)          SETC 'DS'                                         00143300
&ZOPV(&ZOPN)          SETC 'CL1'                                        00143400
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00143500
.*-------------------------------------------------------------------   00143600
.***AM.L09  XPLISTLEN XL2                                               00143700
&ZOPN                 SETA &ZOPN+1                                      00143800
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XPLISTLEN'                        00143900
&ZOPO(&ZOPN)          SETC 'DS'                                         00144000
&ZOPV(&ZOPN)          SETC 'XL2'                                        00144100
&ZOPD(&ZOPN)          SETC '++ INPUT '                                  00144200
.*-------------------------------------------------------------------   00144300
.***AM.L09  XANSLEN F                                                   00144400
&ZOPN                 SETA &ZOPN+1                                      00144500
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XANSLEN'                          00144600
&ZOPO(&ZOPN)          SETC 'DS'                                         00144700
&ZOPV(&ZOPN)          SETC 'F'                                          00144800
&ZOPD(&ZOPN)          SETC '++ &ZXANSLEN '                              00144900
.*-------------------------------------------------------------------   00145000
.***AM.L09  XQUERYLEN F                                                 00145100
&ZOPN                 SETA &ZOPN+1                                      00145200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XQUERYLEN'                        00145300
&ZOPO(&ZOPN)          SETC 'DS'                                         00145400
&ZOPV(&ZOPN)          SETC 'F'                                          00145500
&ZOPD(&ZOPN)          SETC '++ &ZXQUERYLEN '                            00145600
.*-------------------------------------------------------------------   00145700
.***AM.L09  XRSV002 CL4                                                 00145800
&ZOPN                 SETA &ZOPN+1                                      00145900
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV002'                          00146000
&ZOPO(&ZOPN)          SETC 'DS'                                         00146100
&ZOPV(&ZOPN)          SETC 'CL4'                                        00146200
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00146300
.*-------------------------------------------------------------------   00146400
.***AM.L09  XSYSINFO_BLOCK A                                            00146500
&ZOPN                 SETA &ZOPN+1                                      00146600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSYSINFO_BLOCK'                   00146700
&ZOPO(&ZOPN)          SETC 'DS'                                         00146800
&ZOPV(&ZOPN)          SETC 'A'                                          00146900
&ZOPD(&ZOPN)          SETC '++ &ZXSYSINFO_BLOCK '                       00147000
.*-------------------------------------------------------------------   00147100
.***AM.L09  XRSV003 CL4                                                 00147200
&ZOPN                 SETA &ZOPN+1                                      00147300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV003'                          00147400
&ZOPO(&ZOPN)          SETC 'DS'                                         00147500
&ZOPV(&ZOPN)          SETC 'CL4'                                        00147600
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00147700
.*-------------------------------------------------------------------   00147800
.***AM.L09  XRSV004 CL4                                                 00147900
&ZOPN                 SETA &ZOPN+1                                      00148000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV004'                          00148100
&ZOPO(&ZOPN)          SETC 'DS'                                         00148200
&ZOPV(&ZOPN)          SETC 'CL4'                                        00148300
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00148400
.*-------------------------------------------------------------------   00148500
.***AM.MLM2 SAVED LOCATION COUNTER                                      00148600
                      AIF  (&XPLISTVER GE 3).ZL11LA                     00148700
                      AIF  ('&ZENDBASEPL' NE '').ZL11LA                 00148800
&ZENDBASEPL           SETC 'YES'                                        00148900
&ZOPN                 SETA &ZOPN+1                                      00149000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._PL_END'                           00149100
&ZOPO(&ZOPN)          SETC 'EQU'                                        00149200
&ZOPV(&ZOPN)          SETC '*'                                          00149300
&ZOPD(&ZOPN)          SETC '++ END OF BASE PLIST'                       00149400
.ZL11LA               ANOP  ,                                           00149500
.*-------------------------------------------------------------------   00149600
.***AM.LVER1                                                            00149700
                      AIF  (&XPLISTVER LT 3).ZL11L                      00149800
.*-------------------------------------------------------------------   00149900
.*-------------------------------------------------------------------   00150000
.***AM.L03 XSCQ_OPTIONS BL.8                                            00150100
&ZOPN                 SETA &ZOPN+1                                      00150200
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XSCQ_OPTIONS'                     00150300
&ZOPO(&ZOPN)          SETC 'DS'                                         00150400
&ZOPV(&ZOPN)          SETC 'BL.8'                                       00150500
&ZOPD(&ZOPN)          SETC '++ FIELD_LABEL'                             00150600
.*-------------------------------------------------------------------   00150700
.***AM.LVER2                                                            00150800
.ZL11L                ANOP  ,                                           00150900
.*-------------------------------------------------------------------   00151000
.*-------------------------------------------------------------------   00151100
.***AM.LVER1                                                            00151200
                      AIF  (&XPLISTVER LT 3).ZL12L                      00151300
.*-------------------------------------------------------------------   00151400
.*                                                                      00151500
&ZOPN                 SETA  &ZOPN+1                                     00151600
&ZOPL(&ZOPN)          SETC  '&XMFCTRL._XEXTENDED_DATA_YES'              00151700
&ZOPO(&ZOPN)          SETC  'EQU'                                       00151800
&ZOPV(&ZOPN)          SETC  'B''10000000'''                             00151900
&ZOPD(&ZOPN)          SETC  '++ XEXTENDED_DATA.'                        00152000
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN).YES'                          00152100
&ZOPD(&ZOPN)          SETC  '&ZOPD(&ZOPN) KEYWORD'                      00152200
.*-------------------------------------------------------------------   00152300
.***AM.LVER2                                                            00152400
.ZL12L                ANOP  ,                                           00152500
.*-------------------------------------------------------------------   00152600
.*-------------------------------------------------------------------   00152700
.***AM.LVER1                                                            00152800
                      AIF  (&XPLISTVER LT 3).ZL13L                      00152900
.*-------------------------------------------------------------------   00153000
.*-------------------------------------------------------------------   00153100
.***AM.L09  XRSV005 CL3                                                 00153200
&ZOPN                 SETA &ZOPN+1                                      00153300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSV005'                          00153400
&ZOPO(&ZOPN)          SETC 'DS'                                         00153500
&ZOPV(&ZOPN)          SETC 'CL3'                                        00153600
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00153700
.*-------------------------------------------------------------------   00153800
.***AM.LVER2                                                            00153900
.ZL13L                ANOP  ,                                           00154000
.*-------------------------------------------------------------------   00154100
.*-------------------------------------------------------------------   00154200
.***AM.L10 END OF IWMWSYSQ LIST PARAMETERS                              00154300
&ZOPN                 SETA &ZOPN+1                                      00154400
&ZOPL(&ZOPN)          SETC '&XMFCTRL.L'                                 00154500
&ZOPO(&ZOPN)          SETC 'EQU'                                        00154600
&ZOPV(&ZOPN)          SETC '*-&XMFCTRL'                                 00154700
&ZOPD(&ZOPN)          SETC '++ LENGTH OF PLIST'                         00154800
.*                                                                      00154900
&ZOPN                 SETA &ZOPN+1                                      00155000
&ZOPL(&ZOPN)          SETC ' '                                          00155100
&ZOPO(&ZOPN)          SETC 'SPACE'                                      00155200
&ZOPV(&ZOPN)          SETC '1'                                          00155300
&ZOPD(&ZOPN)          SETC ' '                                          00155400
.*-------------------------------------------------------------------   00155500
.***AL.L12 IWMWSYSQ FMT=LIST MF=S!L PARAMETERS                          00155600
                      AIF   ('&XMF' EQ 'L').ZMFLX  DONE IF MF=L         00155700
.*                                                                      00155800
&ZOPN                 SETA  &ZOPN+1                                     00155900
&ZOPL(&ZOPN)          SETC  '&XMFCTRL.S'                                00156000
&ZOPO(&ZOPN)          SETC  'DC'                                        00156100
&ZOPV(&ZOPN)          SETC  '0H''0'''                                   00156200
&ZOPD(&ZOPN)          SETC  '++ IWMWSYSQ ARG PARMS'                     00156300
.*                                                                      00156400
.ZLMFSLX              ANOP  ,                                           00156500
.*-------------------------------------------------------------------   00156600
.***AL.L13 SET ZPLLEN TO ITS APPROPRIATE VALUE                          00156700
&ZPLLEN               SETA 32                                           00156800
.*                                                                      00156900
                      AIF  (&XPLISTVER LT 3).ZLLEN2Z                    00157000
&ZPLLEN               SETA 36                                           00157100
.ZLLEN2Z              ANOP  ,                                           00157200
.*                                                                      00157300
.******************************************************************     00157400
.***AI.L01 IWMWSYSQ FMT=LIST FILL IN PARAMETER AREA                     00157500
.******************************************************************     00157600
                      ACTR  10000                                       00157700
&ZCVAL                SETC  'LA'           ASSUME XA MODE               00157800
                      AIF   ('&SYSASCE' EQ 'P').ZIMFXA  SYSSTATE PRI    00157900
&ZCVAL                SETC  'LAE'          XAX MODE                     00158000
.ZIMFXA               ANOP ,                                            00158100
.*                                                                      00158200
                      AIF   ('&XMFCTRL'(1,1) NE '(').ZIMFN2  NOT GPR    00158300
&ZCGPR                SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)  GET GPR         00158400
                      AIF   ('&ZCGPR' EQ 'GPR1').ZIMFNX                 00158500
                      AIF   ('&ZCGPR' EQ 'GPR01').ZIMFNX                00158600
                      AIF   ('&ZCGPR' EQ 'REG1').ZIMFNX                 00158700
                      AIF   ('&ZCGPR' EQ 'REG01').ZIMFNX                00158800
                      AIF   ('&ZCGPR' EQ 'R1').ZIMFNX                   00158900
                      AIF   ('&ZCGPR' EQ '1').ZIMFNX                    00159000
                      AIF   ('&ZCGPR' EQ '01').ZIMFNX                   00159100
&ZOPN                 SETA  &ZOPN+1                                     00159200
&ZOPL(&ZOPN)          SETC  ' '                                         00159300
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00159400
&ZOPV(&ZOPN)          SETC  '1,0(,&ZCGPR)'                              00159500
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00159600
                      AGO   .ZIMFNX                                     00159700
.*                                                                      00159800
.ZIMFN2               ANOP ,                                            00159900
                      AIF   (&SYSALVL EQ 0).ZIMFNX1                     00160000
                      AIF   ('&XMF' NE 'S').ZIMFNX1                     00160100
                      AIF   ('&ZCVAL' NE 'LAE').ZIMFNX                  00160200
&ZOPN                 SETA  &ZOPN+1                                     00160300
&ZOPL(&ZOPN)          SETC  ' '                                         00160400
&ZOPO(&ZOPN)          SETC  'LAE'                                       00160500
&ZOPV(&ZOPN)          SETC  '1,0(1,0)'                                  00160600
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00160700
                      AGO   .ZIMFNX                                     00160800
.ZIMFNX1              ANOP ,                                            00160900
&ZOPN                 SETA  &ZOPN+1                                     00161000
&ZOPL(&ZOPN)          SETC  ' '                                         00161100
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00161200
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL'                                00161300
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00161400
.ZIMFNX               ANOP ,                                            00161500
.********************************************************************   00161600
.***AI.L02 IWMWSYSQ FMT=LIST INITIALIZE PARAMETER AREA                  00161700
.********************************************************************   00161800
.***AI.L03 MF=(SLE)                                                     00161900
                      AIF   ('&XMF' EQ 'L').ZIMFLX                      00162000
.*                                                                      00162100
&ZOPN                 SETA  &ZOPN+1                                     00162200
&ZOPL(&ZOPN)          SETC  ' '                                         00162300
&ZOPO(&ZOPN)          SETC  'XC'                                        00162400
&ZOPV(&ZOPN)          SETC  '0(&ZPLLEN,1),0(1)'                         00162500
&ZOPD(&ZOPN)          SETC  '++ INITIALIZE'                             00162600
.ZIMFLX               ANOP  ,                                           00162700
.*-------------------------------------------------------------------   00162800
.***AI.L60 XACRO CL4                                                    00162900
&ZOPN                 SETA  &ZOPN+1                                     00163000
&ZOPL(&ZOPN)          SETC  ' '                                         00163100
&ZOPO(&ZOPN)          SETC  'MVC'                                       00163200
&ZOPV(&ZOPN)          SETC  '0(4,1),=CL4''SCQP'''                       00163300
&ZOPD(&ZOPN)          SETC  '++ CL4 CONSTANT'                           00163400
.*-------------------------------------------------------------------   00163500
.***AI.L04B XVERSION XL1                                                00163600
                      AIF   (&XPLISTVER EQ 0).ZIMFVZ                    00163700
&ZOPN                 SETA  &ZOPN+1                                     00163800
&ZOPL(&ZOPN)          SETC  ' '                                         00163900
&ZOPO(&ZOPN)          SETC  'MVI'                                       00164000
&ZOPV(&ZOPN)          SETC  '4(1),&XPLISTVER'                           00164100
&ZOPD(&ZOPN)          SETC  '++ INPUT XVERSION XL1'                     00164200
.ZIMFVZ               ANOP  ,                                           00164300
.*-------------------------------------------------------------------   00164400
.***AI.L04 XPLISTLEN XL2                                                00164500
&ZOPN                 SETA  &ZOPN+1                                     00164600
&ZOPL(&ZOPN)          SETC  ' '                                         00164700
&ZOPO(&ZOPN)          SETC  'MVC'                                       00164800
&ZOPV(&ZOPN)          SETC  '6(2,1),=AL2(&ZPLLEN)'                      00164900
&ZOPD(&ZOPN)          SETC  '++ INPUT XPLISTLEN XL2'                    00165000
.*-------------------------------------------------------------------   00165100
.***AI.L25  XANSLEN F                                                   00165200
                      AIF   ('&ZXANSLEN' EQ '').ZI5E                    00165300
                      AIF   ('&ZXANSLEN' EQ 'OUTPUT').ZI5E              00165400
&ZCGPR                SETC  '&XANSLEN'                                  00165500
.*                                                                      00165600
                      AIF   ('&XANSLEN'(1,1) NE '(').ZI5B               00165700
&ZCGPR   SETC  '0('.'&XANSLEN'(2,K'&XANSLEN-2).')'                      00165800
                      AGO   .ZI5D                                       00165900
.ZI5B                 ANOP  ,                                           00166000
.*                                                                      00166100
&ZC                   SETC  '&XANSLEN'(1,1)                             00166200
                      AIF   (T'&ZC NE 'N').ZI5D                         00166300
&ZC                   SETC  '&XANSLEN'                                  00166400
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI5D                00166500
&ZCGPR                SETC  '=FL4''&XANSLEN'''                          00166600
.*                                                                      00166700
.ZI5D                 ANOP  ,                                           00166800
.*                                                                      00166900
&ZOPN                 SETA  &ZOPN+1                                     00167000
&ZOPL(&ZOPN)          SETC  ' '                                         00167100
&ZOPO(&ZOPN)          SETC  'MVC'                                       00167200
&ZOPV(&ZOPN)          SETC  '8(4,1),&ZCGPR'                             00167300
&ZOPD(&ZOPN)          SETC  '++ &ZXANSLEN XANSLEN'                      00167400
.*                                                                      00167500
.ZI5E                 ANOP  ,                                           00167600
.*-------------------------------------------------------------------   00167700
.***AI.L25  XSYSINFO_BLOCK AL4                                          00167800
                      AIF   ('&ZXSYSINFO_BLOCK' EQ '').ZI8E             00167900
                      AIF   ('&ZXSYSINFO_BLOCK' EQ 'OUTPUT').ZI8E       00168000
&ZCGPR                SETC  '&XSYSINFO_BLOCK'                           00168100
.*                                                                      00168200
                      AIF   ('&XSYSINFO_BLOCK'(1,1) NE '(').ZI8B        00168300
&ZCGPR   SETC  '0('.'&XSYSINFO_BLOCK'(2,K'&XSYSINFO_BLOCK-2).')'        00168400
                      AGO   .ZI8D                                       00168500
.ZI8B                 ANOP  ,                                           00168600
.*                                                                      00168700
&ZC                   SETC  '&XSYSINFO_BLOCK'(1,1)                      00168800
                      AIF   (T'&ZC NE 'N').ZI8D                         00168900
&ZC                   SETC  '&XSYSINFO_BLOCK'                           00169000
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI8D                00169100
&ZCGPR                SETC  '=AL4(&XSYSINFO_BLOCK)'                     00169200
.*                                                                      00169300
.ZI8D                 ANOP  ,                                           00169400
.*                                                                      00169500
&ZOPN                 SETA  &ZOPN+1                                     00169600
&ZOPL(&ZOPN)          SETC  ' '                                         00169700
&ZOPO(&ZOPN)          SETC  'MVC'                                       00169800
&ZOPV(&ZOPN)          SETC  '20(4,1),&ZCGPR'                            00169900
&ZOPD(&ZOPN)          SETC  '++ &ZXSYSINFO_BLOCK XSYSINFO_BLOCK'        00170000
.*                                                                      00170100
.ZI8E                 ANOP  ,                                           00170200
.*-------------------------------------------------------------------   00170300
.***AI.LVER01                                                           00170400
                      AIF  (&XPLISTVER LT 3).ZI11Z                      00170500
.*-------------------------------------------------------------------   00170600
.***AI.L05 XSCQ_OPTIONS BL1                                             00170700
&ZW                   SETC  ''                                          00170800
&ZCLNG                SETC  ''             RESET BIT ON FLAG            00170900
.*-------------------------------------------------------------------   00171000
.***AI.LVER02                                                           00171100
.ZI11Z                ANOP  ,                                           00171200
.*-------------------------------------------------------------------   00171300
.***AI.LVER01                                                           00171400
                      AIF  (&XPLISTVER LT 3).ZI12Z                      00171500
.*-------------------------------------------------------------------   00171600
.***AI.L08 XSCQ_OPTIONS "YES"                                           00171700
.***      BL1'1XXXXXXX'                                                 00171800
         AIF   ('&XEXTENDED_DATA' NE 'YES').ZI12A                       00171900
&ZW                   SETC  '&ZW.10000000'                              00172000
&ZCLNG                SETC  'YES'          SET BIT ON FLAG              00172100
                      AGO   .ZI12C                                      00172200
.*                                                                      00172300
.ZI12A                ANOP  ,                                           00172400
&ZW                   SETC  '&ZW.00000000'                              00172500
.ZI12C                ANOP  ,                                           00172600
.*-------------------------------------------------------------------   00172700
.***AI.L11 XSCQ_OPTIONS BL1                                             00172800
                      AIF   ('&ZCLNG' NE 'YES').ZI12E  ALL ZERO BITS    00172900
&ZOPN                 SETA  &ZOPN+1                                     00173000
&ZOPL(&ZOPN)          SETC  ' '                                         00173100
&ZOPO(&ZOPN)          SETC  'OI'                                        00173200
&ZOPV(&ZOPN)          SETC  '32(1),B''&ZW'''                            00173300
&ZOPD(&ZOPN)          SETC  '++ INPUT BL1'                              00173400
.ZI12E                ANOP  ,                                           00173500
.*-------------------------------------------------------------------   00173600
.***AI.LVER02                                                           00173700
.ZI12Z                ANOP  ,                                           00173800
.*-------------------------------------------------------------------   00173900
.***AI.LVER01                                                           00174000
                      AIF  (&XPLISTVER LT 3).ZI13Z                      00174100
.*-------------------------------------------------------------------   00174200
.***AI.LVER02                                                           00174300
.ZI13Z                ANOP  ,                                           00174400
.*-------------------------------------------------------------------   00174500
&ZOPN1                SETA &ZOPN                                        00174600
.*******************************************************************    00174700
.***  PROCESS IWMWSYSQ OUTPUT PARAMETERS                                00174800
.*******************************************************************    00174900
                      ACTR  10000                                       00175000
.*------------------------------------------------------------------    00175100
.***AO.L02 XQUERYLEN F                                                  00175200
         AIF   ('&ZXQUERYLEN' EQ 'OUTPUT').ZO6A  OUTPUT                 00175300
         AIF   ('&ZXQUERYLEN' NE 'INOUT').ZO6C  INOUT                   00175400
.ZO6A    AIF   ('&XQUERYLEN'(1,1) NE '(').ZO6B  ADDR IN GPR             00175500
&ZCGPR   SETC  '&XQUERYLEN'(2,K'&XQUERYLEN-2)                           00175600
&ZOPN                 SETA  &ZOPN+1                                     00175700
&ZOPL(&ZOPN)          SETC  ' '                                         00175800
&ZOPO(&ZOPN)          SETC  'MVC'                                       00175900
&ZOPV(&ZOPN)          SETC  '0(4,&ZCGPR),12(1)'                         00176000
&ZOPD(&ZOPN)          SETC  '++ XQUERYLEN F'                            00176100
                      AGO   .ZO6C                                       00176200
.*                                                                      00176300
.ZO6B                 ANOP  ,                                           00176400
&ZAWRK   SETA  K'&XQUERYLEN                                             00176500
         AIF   ('&XQUERYLEN'(&ZAWRK,1) NE ')').ZO6G                     00176600
&ZN      SETA  2                                                        00176700
.ZO6H    ANOP                                                           00176800
         AIF   (&ZN GE &ZAWRK).ZO6G                                     00176900
         AIF   ('&XQUERYLEN'(&ZN,1) NE '(').ZO6I                        00177000
&ZC      SETC  '&XQUERYLEN'(1,&ZN).'4'.','                              00177100
&ZC      SETC  '&ZC'.'&XQUERYLEN'(&ZN+1,&ZAWRK-&ZN).',12(1)'            00177200
         AGO   .ZO6J                                                    00177300
.ZO6I    ANOP                                                           00177400
&ZN      SETA  &ZN+1                                                    00177500
         AGO   .ZO6H                                                    00177600
.ZO6G    ANOP                                                           00177700
&ZC      SETC  '&XQUERYLEN.(4),12(1)'                                   00177800
.ZO6J    ANOP                                                           00177900
&ZOPN                 SETA  &ZOPN+1                                     00178000
&ZOPL(&ZOPN)          SETC  ' '                                         00178100
&ZOPO(&ZOPN)          SETC  'MVC'                                       00178200
&ZOPV(&ZOPN)          SETC  '&ZC'                                       00178300
&ZOPD(&ZOPN)          SETC  '++ XQUERYLEN F'                            00178400
.ZO6C                 ANOP  ,                                           00178500
.*******************************************************************    00178600
.***AO.X02  RETURN CODE PROCESSING                                      00178700
.*******************************************************************    00178800
                      AIF   (N'&RETCODE LE 0).ZMRETX                    00178900
                      AIF   ('&XRETCODE'(1,1) EQ '(').ZMRET2            00179000
                      AIF   ('&XRETCODE' EQ 'GPR15').ZMRETX             00179100
                      AIF   ('&XRETCODE' EQ 'REG15').ZMRETX             00179200
                      AIF   ('&XRETCODE' EQ 'R15').ZMRETX               00179300
                      AIF   ('&XRETCODE' EQ '15').ZMRETX                00179400
&ZOPN                 SETA  &ZOPN+1                                     00179500
&ZOPL(&ZOPN)          SETC  ' '                                         00179600
&ZOPO(&ZOPN)          SETC  'ST'                                        00179700
&ZOPV(&ZOPN)          SETC  '15,&XRETCODE'                              00179800
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00179900
                      AGO   .ZMRETX                                     00180000
.*                                                                      00180100
.ZMRET2               ANOP  ,                                           00180200
&ZCGPR                SETC  '&XRETCODE'(2,K'&XRETCODE-2)                00180300
                      AIF   ('&ZCGPR' EQ 'GPR15').ZMRETX                00180400
                      AIF   ('&ZCGPR' EQ 'REG15').ZMRETX                00180500
                      AIF   ('&ZCGPR' EQ 'R15').ZMRETX                  00180600
                      AIF   ('&ZCGPR' EQ '15').ZMRETX                   00180700
&ZOPN                 SETA  &ZOPN+1                                     00180800
&ZOPL(&ZOPN)          SETC  ' '                                         00180900
&ZOPO(&ZOPN)          SETC  '&ZMAC_LR'                                  00181000
&ZOPV(&ZOPN)          SETC  '&ZCGPR,15'                                 00181100
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00181200
.ZMRETX               ANOP  ,                                           00181300
.*******************************************************************    00181400
.***AO.X03  REASON CODE PROCESSING                                      00181500
.*******************************************************************    00181600
                      AIF   (N'&RSNCODE LE 0).ZMRSNX                    00181700
                      AIF   ('&XRSNCODE'(1,1) EQ '(').ZMRSN2            00181800
                      AIF   ('&XRSNCODE' EQ 'GPR0').ZMRSNX              00181900
                      AIF   ('&XRSNCODE' EQ 'GPR00').ZMRSNX             00182000
                      AIF   ('&XRSNCODE' EQ 'REG0').ZMRSNX              00182100
                      AIF   ('&XRSNCODE' EQ 'REG00').ZMRSNX             00182200
                      AIF   ('&XRSNCODE' EQ 'R0').ZMRSNX                00182300
                      AIF   ('&XRSNCODE' EQ '0').ZMRSNX                 00182400
                      AIF   ('&XRSNCODE' EQ '00').ZMRSNX                00182500
&ZOPN                 SETA  &ZOPN+1                                     00182600
&ZOPL(&ZOPN)          SETC  ' '                                         00182700
&ZOPO(&ZOPN)          SETC  'ST'                                        00182800
&ZOPV(&ZOPN)          SETC  '0,&XRSNCODE'                               00182900
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00183000
                      AGO   .ZMRSNX                                     00183100
.*                                                                      00183200
.ZMRSN2               ANOP  ,                                           00183300
&ZCGPR                SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                00183400
                      AIF   ('&ZCGPR' EQ 'GPR0').ZMRSNX                 00183500
                      AIF   ('&ZCGPR' EQ 'GPR00').ZMRSNX                00183600
                      AIF   ('&ZCGPR' EQ 'REG0').ZMRSNX                 00183700
                      AIF   ('&ZCGPR' EQ 'REG00').ZMRSNX                00183800
                      AIF   ('&ZCGPR' EQ 'R0').ZMRSNX                   00183900
                      AIF   ('&ZCGPR' EQ '0').ZMRSNX                    00184000
                      AIF   ('&ZCGPR' EQ '00').ZMRSNX                   00184100
&ZOPN                 SETA  &ZOPN+1                                     00184200
&ZOPL(&ZOPN)          SETC  ' '                                         00184300
&ZOPO(&ZOPN)          SETC  '&ZMAC_LR'                                  00184400
&ZOPV(&ZOPN)          SETC  '&ZCGPR,0'                                  00184500
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00184600
.ZMRSNX               ANOP  ,                                           00184700
.*******************************************************************    00184800
.***AO.X04  LABEL FOR MF=L PROCESSING                                   00184900
.*******************************************************************    00185000
.ZMFLX                ANOP  ,              MF=L PROCESSING              00185100
.*******************************************************************    00185200
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               00185300
.*******************************************************************    00185400
                      ACTR  10000                                       00185500
.*                                                                      00185600
                      LCLA  &ZLC           COLUMN POSITION              00185700
                      LCLA  &ZOPX          LIST TABLE INDEX             00185800
                      LCLC  &ZLL           LABEL                        00185900
                      LCLC  &ZLOP          OPERATION                    00186000
                      LCLC  &ZLV           VALUE                        00186100
                      LCLC  &ZLD           DESCRIPTION                  00186200
.*                                                                      00186300
&ZOPX                 SETA  1                                           00186400
.ZL2                  AIF   (&ZOPX GT &ZOPN1).ZLX  B IF DONE            00186500
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00186600
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00186700
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00186800
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00186900
                      AIF   (K'&ZLD LE 0).ZL5                           00187000
&ZLC                  SETA  35             COMMENT COLUMN               00187100
                      AIF   ('&ZLD'(1,1) NE '*').ZL3                    00187200
&ZLC                  SETA  33             COMMMENT COLUMN              00187300
.ZL3                  AIF   (K'&ZLV GE &ZLC-16-1).ZL4                   00187400
&ZLV                  SETC  '&ZLV'.' '                                  00187500
                      AGO   .ZL3                                        00187600
.*                                                                      00187700
.ZL4                  ANOP  ,                                           00187800
&ZLV                  SETC  '&ZLV'.' '                                  00187900
.ZL5                  ANOP  ,                                           00188000
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00188100
.*                                                                      00188200
&ZLL     &ZLOP &ZLV                                                     00188300
.*                                                                      00188400
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00188500
                      AGO   .ZL2           CONTINUE LOOPING             00188600
.*                                                                      00188700
.ZLX                  ANOP  ,                                           00188800
                      AIF   ('&XMF' EQ 'L').ZLINKX  MF=L                00188900
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00189000
     L     14,16(0,0)              GET CVT ADDRESS                      00189100
     L     14,772(14,0)            GET SFT ADDRESS                      00189200
     L     14,380(14,0)            GET LX FOR SERVICE ROUTINE           00189300
     LA    15,27                   GET EX FOR SERVICE ROUTINE           00189400
     OR    14,15                   GET PC NUMBER                        00189500
     PC    0(14)                                                        00189600
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00189700
.ZLINKX               ANOP  ,                                           00189800
.*******************************************************************    00189900
.***AP.X01  FORMAT GENERATED CODE                                       00190000
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            00190100
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00190200
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00190300
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00190400
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00190500
                      AIF   (K'&ZLD LE 0).ZL51                          00190600
&ZLC                  SETA  35             COMMENT COLUMN               00190700
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   00190800
&ZLC                  SETA  33             COMMENT COLUMN               00190900
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  00191000
&ZLV                  SETC  '&ZLV'.' '                                  00191100
                      AGO   .ZL31                                       00191200
.*                                                                      00191300
.ZL41                 ANOP  ,                                           00191400
&ZLV                  SETC  '&ZLV'.' '                                  00191500
.ZL51                 ANOP  ,                                           00191600
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00191700
.*                                                                      00191800
&ZLL     &ZLOP &ZLV                                                     00191900
.*                                                                      00192000
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00192100
                      AGO   .ZL21          CONTINUE LOOPING             00192200
.*                                                                      00192300
.ZLX1                 ANOP  ,                                           00192400
.*******************************************************************    00192500
.***AP.X02  END OF IWMWSYSQ MACRO                                       00192600
&ZIWMWSYSQ            SETC  'YES'          SET IWMWSYSQ USED            00192700
         POP   PRINT                                                    00192800
*                                            IWMWSYSQ-3                 00192900
         SPACE 1                                                        00193000
.ZLX2                 ANOP  ,                                           00193100
         MEND                                                           00193200
**********************************************************************/ 00193300
*/**** START OF SPECIFICATIONS **************************************** 00193400
*                                                                     * 00193500
*                                                                     * 00193600
*01* MACRO NAME:  IWMWSYSQ                              -06/06/22-<3> * 00193700
*                                                                     * 00193800
*                                                                     * 00193900
*01* DESCRIPTIVE NAME:  Query System Information                      * 00194000
*                                                                     * 00194100
*01* PROPRIETARY STATEMENT:                                           * 00194200
*                                                                     * 00194300
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00194400
*     5694-A01 (C) COPYRIGHT IBM CORP. 1994, 2007                     * 00194500
*                                                                     * 00194600
* STATUS= HBB7740                                                     * 00194700
*                                                                     * 00194800
*                                                                     * 00194900
*                                                                     * 00195000
*01* FUNCTION:                                                        * 00195100
*       See the IWMWSYSQ macro prologue for details.                  * 00195200
*                                                                     * 00195300
*01* INPUT:                                                           * 00195400
*                                                                     * 00195500
*            ?IWMWSYSQ     SYSINFO_BLOCK                              * 00195600
*                                        (xsysinfo_block)             * 00195700
*                          ANSLEN(xanslen)                            * 00195800
*                          QUERYLEN(xquerylen)                        * 00195900
*                        ÐÝEXTENDED_DATA(NO)¨                         * 00196000
*                        ¿ÝEXTENDED_DATA(YES)¨                        * 00196100
*                         ÝRETCODE(xretcode)¨                         * 00196200
*                         ÝRSNCODE(xrsncode)¨                         * 00196300
*                         ÝPLISTVER(»xplistver!IMPLIED_VERSIONº)¨     * 00196400
*                        ÐÝMF(S)¨                                     * 00196500
*                        ÔÝMF(L,xmfctrl»,xmfattr!BDY(DWORD)º)¨        * 00196600
*                        ¿ÝMF(E,xmfctrl»,COMPLETEº)¨                  * 00196700
*                                                                     * 00196800
****** END OF SPECIFICATIONS *****************************************/ 00196900
*/*PB.ECHO01 MACRO INVOCATION ECHO-----------------------------------*/ 00197000
*  ANS('@SPACE;') NORESCAN COL(MACLMAR);                                00197100
*  ANS('/* ? IWMWSYSQ '!!MACLIST!!' ')                                  00197200
*      NORESCAN COL(MACLMAR+5);    /* START ECHO */                     00197300
*                                                                       00197400
*  DCL ZELO  FIXED;                                                     00197500
*  DCL ZECOL FIXED;                                                     00197600
*                                                                       00197700
*  ZELO=1;     /* STARTING COLUMN */                                    00197800
*  DO WHILE ZELO<=LENGTH(MACKEYS);  /* PARENTHSIS SCAN */               00197900
*    ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');                    00198000
*    IF ZECOL>0                                                         00198100
*      THEN                                                             00198200
*        DO;   /* PARENTHESIS FOUND */                                  00198300
*          ANS(MACKEYS(ZELO:ZELO+ZECOL-1)!!' ')                         00198400
*             NORESCAN COL(MACLMAR+5);                                  00198500
*          ZELO=ZELO+ZECOL;        /* NEXT PORTION */                   00198600
*        END;                                                           00198700
*      ELSE                                                             00198800
*        DO;   /* REMAINING KEYS */                                     00198900
*          ANS(MACKEYS(ZELO:LENGTH(MACKEYS)))                           00199000
*             NORESCAN COL(MACLMAR+5);                                  00199100
*          ZELO=LENGTH(MACKEYS)+1;                                      00199200
*        END;                                                           00199300
*  END;                                                                 00199400
*  ANS(' -06/06/22-3- */')                                              00199500
*      NORESCAN COL(MACLMAR+5);    /* END ECHO */                       00199600
*/********************************************************************/ 00199700
*/*PV.DCL01 MACRO DECLARES AND CODE GENERATION CONTROLS              */ 00199800
*/********************************************************************/ 00199900
*  DCL ZPRINT  EXTERNAL; DEACT ZPRINT; /* YES=PRINT, NO=NO PRINT     */ 00200000
*  DCL ZTEST   EXTERNAL; DEACT ZTEST;  /* YES=TEST, NO=NO TEST       */ 00200100
*  DCL ZSYSTEM EXTERNAL; DEACT ZSYSTEM;/* PCCODE10, MVS, SAK, VM     */ 00200200
*                                                                       00200300
*  DCL   ZIWMWSYSQ CHAR EXTERNAL; /* YES=USED AT LEAST ONCE          */ 00200400
*  DEACT ZIWMWSYSQ;                                                     00200500
*                                                                       00200600
*  DCL ZMACRET FIXED; DEACT ZMACRET;                                    00200700
*  ZMACRET=0;                   /* MACRO COMPILE RETURN CODE         */ 00200800
*                                                                       00200900
*  DCL ZMS CHAR;   DEACT ZMS;   /* ERROR MESSAGE                     */ 00201000
*  DCL ZCVAL CHAR; DEACT ZCVAL; /* ERROR MESSAGE WORK AREA           */ 00201100
*                                                                       00201200
*  DCL ZI FIXED;  DEACT ZI;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00201300
*  DCL ZJ FIXED;  DEACT ZJ;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00201400
*  DCL ZK FIXED;  DEACT ZK;     /* INDEX FOR RANGE COLON (:)         */ 00201500
*  DCL ZL FIXED;  DEACT ZL;     /* INDEX FOR RANGE VALUE CHECKING    */ 00201600
*  DCL ZLO FIXED; DEACT ZLO;    /* LOW RANGE VALUE                   */ 00201700
*  DCL ZHI FIXED; DEACT ZHI;    /* HIGH RANGE VALUE                  */ 00201800
*  DCL ZW CHAR;   DEACT ZW;     /* WORK AREA FOR RANGE VALUE SUBLIST */ 00201900
*  DCL ZN FIXED;  DEACT ZN;     /* NUMERIC WORK VARIABLE             */ 00202000
*  DCL ZC CHAR;   DEACT ZC;     /* CHARACTER WORK VARIABLE           */ 00202100
*  DCL ZMAXINVOCLEN FIXED; DEACT ZMAXINVOCLEN;  /* INVOCATION LENGTH */ 00202200
*  DCL ZPLLEN FIXED; DEACT ZPLLEN;        /* PARAMETER LIST LENGTH   */ 00202300
*                                                                       00202400
*  DCL ZPRMMAX FIXED;           /* MAXIMUM PARM LIST SIZE            */ 00202500
*  DCL ZPRMNUM FIXED;           /* PARAMETER ARRAY INDEX             */ 00202600
*  DCL ZPRM(100);               /* PARAMETER ENTRY                   */ 00202700
*  DCL EHAMAXLEN FIXED EXTERNAL;   /* MAX ILIST SIZE FOR PARM LISTS  */ 00202800
*  DCL EHAREGS CHARACTER EXTERNAL; /* REG DCLS                       */ 00202900
*  DCL EHAREGS64 CHARACTER EXTERNAL; /* REG DCLS                     */ 00203000
*  DCL EHALIST CHARACTER EXTERNAL; /* STANDARD PARM LIST GENERATION  */ 00203100
*/*******************************************************************/  00203200
*/*PV.XVAR01 DECLARE ALL MACRO PARAMETER VARIABLES                  */  00203300
*/*******************************************************************/  00203400
*  DCL   XSYSINFO_BLOCK;           /***PV.XVAR03 INPUT NAME */          00203500
*  DEACT XSYSINFO_BLOCK;           /***PV.XVAR03 INPUT NAME */          00203600
*  DCL   ZXSYSINFO_BLOCK;          /***INPUT/OUTPUT CONTROL */          00203700
*  DEACT ZXSYSINFO_BLOCK;          /***INPUT/OUTPUT CONTROL */          00203800
*  DCL XANSLEN;  DEACT XANSLEN;    /***PV.XVAR02 INPUT NAME */          00203900
*  DCL ZXANSLEN; DEACT ZXANSLEN;   /***INPUT/OUTPUT CONTROL */          00204000
*  DCL XQUERYLEN;  DEACT XQUERYLEN;  /***PV.XVAR02 OUTPUT NAME */       00204100
*  DCL ZXQUERYLEN; DEACT ZXQUERYLEN;  /***INPUT/OUTPUT CONTROL */       00204200
*  DCL   XEXTENDED_DATA;           /***PV.XVAR03 INPUT VALUE */         00204300
*  DEACT XEXTENDED_DATA;           /***PV.XVAR03 INPUT VALUE */         00204400
*  DCL   ZXEXTENDED_DATA;          /***INPUT/OUTPUT CONTROL */          00204500
*  DEACT ZXEXTENDED_DATA;          /***INPUT/OUTPUT CONTROL */          00204600
*  DCL XRETCODE;  DEACT XRETCODE;  /***PV.XVAR02 OUTPUT NAME */         00204700
*  DCL ZXRETCODE; DEACT ZXRETCODE;  /***INPUT/OUTPUT CONTROL */         00204800
*  DCL XRSNCODE;  DEACT XRSNCODE;  /***PV.XVAR02 OUTPUT NAME */         00204900
*  DCL ZXRSNCODE; DEACT ZXRSNCODE;  /***INPUT/OUTPUT CONTROL */         00205000
*  DCL XPLISTVER FIXED;  DEACT XPLISTVER;  /***PV.XVAR02 INPUT VALUE */ 00205100
*  DCL ZXPLISTVER; DEACT ZXPLISTVER;  /***INPUT/OUTPUT CONTROL */       00205200
*  DCL XMF;  DEACT XMF;            /***PV.XVAR02 INPUT VALUE */         00205300
*  DCL ZXMF; DEACT ZXMF;           /***INPUT/OUTPUT CONTROL */          00205400
*  DCL XMFCTRL;  DEACT XMFCTRL;    /***PV.XVAR02 INPUT NAME */          00205500
*  DCL ZXMFCTRL; DEACT ZXMFCTRL;   /***INPUT/OUTPUT CONTROL */          00205600
*  DCL XMFATTR;  DEACT XMFATTR;    /***PV.XVAR02 INPUT VALUE */         00205700
*  DCL ZXMFATTR; DEACT ZXMFATTR;   /***INPUT/OUTPUT CONTROL */          00205800
*  DCL XMFSCK;  DEACT XMFSCK;      /***PV.XVAR02 INPUT VALUE */         00205900
*  DCL ZXMFSCK; DEACT ZXMFSCK;     /***INPUT/OUTPUT CONTROL */          00206000
*/********************************************************************/ 00206100
*/***PC.PLV01  PROCESS PLISTVER                                      */ 00206200
*/********************************************************************/ 00206300
*  IF TRANSLATE(PLISTVER(1)) = 'MAX' THEN                               00206400
*    XPLISTVER=3;                                                       00206500
*  ELSE                                                                 00206600
*    XPLISTVER=2;                                                       00206700
*  IF EXTENDED_DATA^='' & XPLISTVER<3                                   00206800
*    THEN                                                               00206900
*      XPLISTVER=3;                                                     00207000
*  IF PLISTVER^=''                                                      00207100
*     & TRANSLATE(PLISTVER(1))^='IMPLIED_VERSION'                       00207200
*     & TRANSLATE(PLISTVER(1))^='MAX'                                   00207300
*    THEN                                                               00207400
*      DO;                                                              00207500
*                                                                       00207600
*        ZCVAL='';                           /* ERROR FLAG */           00207700
*        IF PLISTVER='PLISTVER' ! PLISTVER='()'  /*CHECK ENTRY*/        00207800
*          THEN                                                         00207900
*            DO;                                                        00208000
*              ZMS=' 8, THE "PLISTVER" KEY'!! /**KOPTP* MSG*/           00208100
*                  ' MUST CONTAIN ONE'!!                                00208200
*                  ' (OR MORE) ARGUMENT(S).';                           00208300
*              ANS MSG('?IWMWSYSQ ---> '!!ZMS);                         00208400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00208500
*              ZMACRET=8;                    /* MACRO ERROR */          00208600
*              ZCVAL='NO_ARGUMENT';                                     00208700
*            END;                                                       00208800
*        IF NUMBER(PLISTVER)>1               /* CHECK POSITIONALS */    00208900
*          THEN                                                         00209000
*            DO;                                                        00209100
*              ZMS=' 8, "PLISTVER'!!         /**KPOSP* MSG*/            00209200
*                  PLISTVER!!                                           00209300
*                  '" "PLISTVER"'!!                                     00209400
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00209500
*              ANS MSG('?IWMWSYSQ ---> '!!ZMS);                         00209600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00209700
*              ZMACRET=8;                    /* MACRO ERROR */          00209800
*            END;                                                       00209900
*                                                                       00210000
*        ZC=PLISTVER(1);                                                00210100
*        DO ZL=1 TO LENGTH(ZC);              /* MUST BE NUMBER */       00210200
*          IF ZC(ZL:ZL)<'0' !                /* MUST BE NUMERIC */      00210300
*             ZC(ZL:ZL)>'9'                  /* MUST BE NUMERIC */      00210400
*            THEN                                                       00210500
*              ZCVAL='NUMERIC';              /* NUMERIC ERROR */        00210600
*        END;                                                           00210700
*        IF ZCVAL=''                                                    00210800
*          THEN                                                         00210900
*            DO;                             /* CHECK RANGE LIMITS */   00211000
*            IF FIXED(PLISTVER(1))>=XPLISTVER                           00211100
*              THEN                                                     00211200
*                XPLISTVER=FIXED(PLISTVER(1));                          00211300
*              ELSE                                                     00211400
*                DO;                                                    00211500
*              ZMS=' 8, PLISTVER='!!         /**KVALP* MSG*/            00211600
*                    PLISTVER(1)!!                                      00211700
*                  ', BUT PLISTVER OF '!!                               00211800
*                    CHAR(XPLISTVER)!!                                  00211900
*                  ' IS REQUIRED.';                                     00212000
*              ANS MSG('?IWMWSYSQ ---> '!!ZMS);                         00212100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00212200
*              ZMACRET=8;                    /* MACRO ERROR */          00212300
*                END;                                                   00212400
*              IF XPLISTVER<2 !              /* LOW LIMIT */            00212500
*                 XPLISTVER>3                /* HIGH LIMIT */           00212600
*                THEN                                                   00212700
*                  ZCVAL='RANGE';            /* RANGE ERROR */          00212800
*            END;                                                       00212900
*        IF ZCVAL^=''                                                   00213000
*          THEN                                                         00213100
*            DO;                             /* RANGE ERROR */          00213200
*              ZXPLISTVER='';                /* RESET IN/OUTPUT */      00213300
*              ZMS=' 8, "PLISTVER '!!        /**KRNGP* MSG*/            00213400
*                  PLISTVER!!                                           00213500
*                  '" THE RANGE IS "2-3"'!!                             00213600
*                  ' FOR ARGUMENT 1.';                                  00213700
*              ANS MSG('?IWMWSYSQ ---> '!!ZMS);                         00213800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00213900
*              ZMACRET=8;                    /* MACRO ERROR */          00214000
*            END;                                                       00214100
*      END;                                                             00214200
*                                                                       00214300
*/********************************************************************/ 00214400
*/***PG.MF01  PROCESS MF MACRO FORMS                                 */ 00214500
*/********************************************************************/ 00214600
*/*PG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00214700
*  XMF='';                                                              00214800
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00214900
*  IF TRANSLATE(MF(1))                                                  00215000
*              = 'S'                         /* CHECK FOR KEYWORD */    00215100
*    THEN                                                               00215200
*      DO;                                                              00215300
*        XMF='S';                            /* SET XVARIABLE */        00215400
*        IF NUMBER(MF)>1                     /* CHECK POSITIONALS */    00215500
*          THEN                                                         00215600
*            DO;                                                        00215700
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00215800
*                  MF!!                                                 00215900
*                  '" "MF"'!!                                           00216000
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00216100
*              ANS MSG('?IWMWSYSQ ---> '!!ZMS);                         00216200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00216300
*              ZMACRET=8;                    /* MACRO ERROR */          00216400
*            END;                                                       00216500
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00216600
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00216700
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00216800
*  IF TRANSLATE(MF(1))                                                  00216900
*              = 'L'                         /* CHECK FOR KEYWORD */    00217000
*    THEN                                                               00217100
*      DO;                                                              00217200
*        XMF='L';                            /* SET XVARIABLE */        00217300
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00217400
*          THEN                                                         00217500
*            DO;                                                        00217600
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00217700
*                  MF!!                                                 00217800
*                  '" "MF"'!!                                           00217900
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00218000
*              ANS MSG('?IWMWSYSQ ---> '!!ZMS);                         00218100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00218200
*              ZMACRET=8;                    /* MACRO ERROR */          00218300
*            END;                                                       00218400
*/*PG.KKCTL10 -MF(L) SPECIAL CHECK-----------------------------------*/ 00218500
*        ZMAXINVOCLEN = LENGTH(MF) + 2;                                 00218600
*        IF PLISTVER ^= ''                                              00218700
*          THEN                                                         00218800
*            ZMAXINVOCLEN=ZMAXINVOCLEN + LENGTH(PLISTVER) + 8;          00218900
*        IF LENGTH(MACKEYS) > ZMAXINVOCLEN !                            00219000
*           MACLIST ^= ''                    /* CHECK FOR OTHER PARMS*/ 00219100
*          THEN                                                         00219200
*            DO;                                                        00219300
*              ZMS=' 8, THE "L" FORM OF "MF"'!! /**MFLP* MSG*/          00219400
*                  ' CAN ONLY HAVE'!!                                   00219500
*                  ' THE "PLISTVER" KEY'!!                              00219600
*                  ' SPECIFIED ON THE INVOCATION.';                     00219700
*              ANS MSG('?IWMWSYSQ ---> '!!ZMS);                         00219800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00219900
*              ZMACRET=8;                    /* MACRO ERROR */          00220000
*            END;                                                       00220100
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00220200
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00220300
*  IF MF(2)=''                               /* CHECK FOR NULL */       00220400
*   THEN                                                                00220500
*    DO;                                     /* KEY IS REQUIRED */      00220600
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00220700
*        ZMS=' 8, WHEN "L" IS SPECIFIED'!!                              00220800
*            ' FOR THE "MF" KEY, POSITIONAL'!!                          00220900
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00221000
*        ANS MSG('?IWMWSYSQ ---> '!!ZMS);                               00221100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00221200
*        ZMACRET=8;                          /* MACRO ERROR */          00221300
*    END;                                                               00221400
*  ELSE                                                                 00221500
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00221600
*/*PG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE--------------------*/ 00221700
*  ZXMFATTR='INPUT';                         /* SET IN/OUTPUT */        00221800
*  XMFATTR='BDY(DWORD)';                     /* SET DEFAULT */          00221900
*  IF MF(3)^=''                              /* CHECK FOR NULL */       00222000
*    THEN                                                               00222100
*      XMFATTR=MF(3);                        /* SET XVARIABLE */        00222200
*/*PG.KCK01 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH---------------*/ 00222300
*  IF ZXMFATTR^='' &                         /* NOT IN/OUTPUT */        00222400
*     LENGTH(XMFATTR)>60                                                00222500
*    THEN                                                               00222600
*      DO;                                                              00222700
*        ZXMFATTR='';                        /* RESET IN/OUTPUT */      00222800
*        ZMS=' 8, "MF'!!                     /**KLNGP* MSG*/            00222900
*            MF!!                                                       00223000
*            '" ARGUMENT 3 EXCEEDS THE MAXIMUM'!!                       00223100
*            ' LENGTH OF 60 CHARACTERS. ';                              00223200
*        ANS MSG('?IWMWSYSQ ---> '!!ZMS);                               00223300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00223400
*        ZMACRET=8;                          /* MACRO ERROR */          00223500
*      END;                                                             00223600
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00223700
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00223800
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00223900
*  IF TRANSLATE(MF(1))                                                  00224000
*              = 'E'                         /* CHECK FOR KEYWORD */    00224100
*    THEN                                                               00224200
*      DO;                                                              00224300
*        XMF='E';                            /* SET XVARIABLE */        00224400
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00224500
*          THEN                                                         00224600
*            DO;                                                        00224700
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00224800
*                  MF!!                                                 00224900
*                  '" "MF"'!!                                           00225000
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00225100
*              ANS MSG('?IWMWSYSQ ---> '!!ZMS);                         00225200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00225300
*              ZMACRET=8;                    /* MACRO ERROR */          00225400
*            END;                                                       00225500
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/ 00225600
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00225700
*  IF MF(2)=''                               /* CHECK FOR NULL */       00225800
*   THEN                                                                00225900
*    DO;                                     /* KEY IS REQUIRED */      00226000
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00226100
*        ZMS=' 8, WHEN "E" IS SPECIFIED'!!                              00226200
*            ' FOR THE "MF" KEY, POSITIONAL'!!                          00226300
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00226400
*        ANS MSG('?IWMWSYSQ ---> '!!ZMS);                               00226500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00226600
*        ZMACRET=8;                          /* MACRO ERROR */          00226700
*    END;                                                               00226800
*  ELSE                                                                 00226900
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00227000
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00227100
*  XMFSCK='';                                /* RESET XVARIABLE */      00227200
*  IF TRANSLATE(MF(3))                                                  00227300
*              = 'COMPLETE'                  /* CHECK FOR KEYWORD */    00227400
*    THEN                                                               00227500
*      XMFSCK = 'COMPLETE';                  /* SET XVARIABLE */        00227600
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00227700
*  ZXMFSCK='INPUT';                          /* SET IN/OUTPUT */        00227800
*  IF XMFSCK=''                              /* CHECK FOR KEYWORD */    00227900
*    THEN                                                               00228000
*      DO;                                   /* KEYWORD NOT ENTERED */  00228100
*        XMFSCK='COMPLETE';                  /* SET DEFAULT */          00228200
*        IF MF(3)^=''                                                   00228300
*          THEN                                                         00228400
*            DO;                                                        00228500
*              ZXMFSCK='';                   /* RESET IN/OUTPUT */      00228600
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/            00228700
*                  MF!!'"'!!                                            00228800
*                  ' ARGUMENT 3 IS AN UNKNOWN KEYWORD. '!!              00228900
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00229000
*                  ' "COMPLETE".';           /* VALID KEYWORD */        00229100
*              ANS MSG('?IWMWSYSQ ---> '!!ZMS);                         00229200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00229300
*              ZMACRET=8;                    /* MACRO ERROR */          00229400
*            END;                                                       00229500
*      END;                                                             00229600
*/*PG.KKCTL05 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00229700
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00229800
*/*PG.KKCTL06 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00229900
*  IF MF='MF'                                                           00230000
*    ! MF='()'                               /*CHECK ENTRY*/            00230100
*     THEN                                                              00230200
*       DO;                                                             00230300
*              ZMS=' 8, THE "MF" KEY'!!      /**KOPTP* MSG*/            00230400
*                  ' MUST CONTAIN ONE'!!                                00230500
*                  ' (OR MORE) ARGUMENT(S).';                           00230600
*              ANS MSG('?IWMWSYSQ ---> '!!ZMS);                         00230700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00230800
*              ZMACRET=8;                    /* MACRO ERROR */          00230900
*       END;                                                            00231000
*  ELSE                                                                 00231100
*    DO;                                                                00231200
*      ZXMF='INPUT';                         /* SET IN/OUTPUT */        00231300
*      IF XMF=''                             /* CHECK FOR KEYWORD */    00231400
*        THEN                                                           00231500
*          DO;                               /* KEYWORD NOT ENTERED */  00231600
*            XMF='S';                        /* SET DEFAULT */          00231700
*            XMFSCK='COMPLETE';              /* COMPLETE CHECKING */    00231800
*            IF MF(1)^=''                    /* CHECK FOR KEYWORD */    00231900
*              THEN                                                     00232000
*                DO;                                                    00232100
*                  ZXMF='';                  /* RESET IN/OUTPUT */      00232200
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/            00232300
*                  MF!!'"'!!                                            00232400
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00232500
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00232600
*                  ' "S",'!!                 /* VALID KEYWORD */        00232700
*                  ' "L",'!!                 /* VALID KEYWORD */        00232800
*                  ' OR "E".';               /* VALID KEYWORD */        00232900
*              ANS MSG('?IWMWSYSQ ---> '!!ZMS);                         00233000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00233100
*              ZMACRET=8;                    /* MACRO ERROR */          00233200
*                END;                                                   00233300
*          END;                                                         00233400
*    END;                                                               00233500
*/********************************************************************/ 00233600
*/***PD.P01 FULL DEFAULT CHECKING                                    */ 00233700
*/********************************************************************/ 00233800
*  IF PLISTVER=''                                                       00233900
*     ! PLISTVER(1)='IMPLIED_VERSION'                                   00234000
*    THEN                                                               00234100
*      ZC='ON';                              /* DEFAULT FLAG ON */      00234200
*    ELSE                                                               00234300
*      ZC='OFF';                             /* DEFAULT FLAG OFF */     00234400
*/********************************************************************/ 00234500
*/***PD.P02 DEFAULT ECHO                                             */ 00234600
*/********************************************************************/ 00234700
*/*PD.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00234800
*  IF XMF^='L'                                                          00234900
*    THEN                                                               00235000
*      DO;                                   /* FULL SYNTAX CHECK */    00235100
*        ANS('/*DEFAULT(S): */')                                        00235200
*           NORESCAN COL(MACLMAR+5);                                    00235300
*/*PD.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00235400
*  IF XPLISTVER>=3                                                      00235500
*    THEN                                                               00235600
*      DO;                                                              00235700
*  IF EXTENDED_DATA(1)=''                                               00235800
*    THEN                                                               00235900
*      DO;                                                              00236000
*        ANS('/*EXTENDED_DATA(NO)*/')                                   00236100
*            NORESCAN COL(MACLMAR+5);                                   00236200
*        ZC='ON';                            /* DEFAULT FLAG ON */      00236300
*      END;                                                             00236400
*      END;                                                             00236500
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00236600
*  IF PLISTVER=''                                                       00236700
*    THEN DO;                                                           00236800
*      ANS('/* PLISTVER('!!                                             00236900
*          CHAR(XPLISTVER)!!                                            00237000
*          ')*/')                                                       00237100
*          NORESCAN COL(MACLMAR+5);                                     00237200
*    END;                                                               00237300
*  IF ZC='OFF'                               /*NO DEFAULTS TAKEN */     00237400
*    THEN                                                               00237500
*      ANS('/* NONE. */')                                               00237600
*         NORESCAN COL(MACLMAR+5);                                      00237700
*/*PD.P04 END DEFAULT ECHO ------------------------------------------*/ 00237800
*      END;                                                             00237900
*/********************************************************************/ 00238000
*/*PB.SYSL01 INVOKE SP LEVEL AND SYSTEM STATE MACROS                 */ 00238100
*/********************************************************************/ 00238200
*  DCL SYSSPLV CHAR EXTERNAL; DEACT SYSSPLV;/* SPLEVEL 1,2,3         */ 00238300
*  DCL SYSASCE CHAR EXTERNAL; DEACT SYSASCE;/* STATE ANY P AR */        00238400
*  DCL SYSAM64 CHAR EXTERNAL; DEACT SYSAM64;                            00238500
*  DCL SYSALVL FIXED EXTERNAL; DEACT SYSALVL;                           00238600
*                                                                       00238700
*  IF SYSASCE=''                                                        00238800
*    THEN                                                               00238900
*      DO;                                                              00239000
*        IF SYSSPLV=''                                                  00239100
*          THEN                                                         00239200
*            ANS('?SPLEVEL  (TEST);') COL(MACLMAR);                     00239300
*        IF SYSSPLV^='1' & SYSSPLV^='2'                                 00239400
*          THEN                                                         00239500
*            ANS('?SYSSTATE (TEST);') COL(MACLMAR);                     00239600
*          ELSE                                                         00239700
*            SYSASCE='P';                    /* SYSSTATE DEFAULT*/      00239800
*      END;                                                             00239900
*/********************************************************************/ 00240000
*/***PG.P01 FULL MACRO SYNTAX CHECKING                               */ 00240100
*/********************************************************************/ 00240200
*/*PG.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00240300
*  IF XMF^='L'                                                          00240400
*    THEN                                                               00240500
*      DO;                                   /* FULL SYNTAX CHECK */    00240600
*/*PG.P03 EXCESSIVE POSITIONAL ARGUMENTS-----------------------------*/ 00240700
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */    00240800
*    THEN                                                               00240900
*      DO;                                                              00241000
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'!! /**PPOSP* MSG*/            00241100
*            ' "'!!MACLIST!!'"'!!                                       00241200
*            ' CANNOT BE USED.'!!                                       00241300
*            ' NO POSITIONAL ARGUMENTS'!!                               00241400
*            ' ARE ALLOWED.';                                           00241500
*        ANS MSG('?IWMWSYSQ ---> '!!ZMS);                               00241600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00241700
*        ZMACRET=8;                          /* MACRO ERROR */          00241800
*      END;                                                             00241900
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00242000
*  IF NUMBER(SYSINFO_BLOCK)>1                /* CHECK POSITIONALS */    00242100
*    THEN                                                               00242200
*      DO;                                                              00242300
*        ZMS=' 8, "SYSINFO_BLOCK'!!          /**KPOSP* MSG*/            00242400
*            SYSINFO_BLOCK!!                                            00242500
*            '" "SYSINFO_BLOCK"'!!                                      00242600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00242700
*        ANS MSG('?IWMWSYSQ ---> '!!ZMS);                               00242800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00242900
*        ZMACRET=8;                          /* MACRO ERROR */          00243000
*      END;                                                             00243100
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00243200
*  XSYSINFO_BLOCK=SYSINFO_BLOCK(1);          /* SET XVARIABLE */        00243300
*  IF SYSINFO_BLOCK(1)=''                    /* CHECK FOR NULL */       00243400
*   THEN                                                                00243500
*    DO;                                     /* KEY IS REQUIRED */      00243600
*        ZXSYSINFO_BLOCK='';                 /* RESET IN/OUTPUT */      00243700
*        ZMS=' 8,  '!!                                                  00243800
*            ' "SYSINFO_BLOCK" KEY AND ITS'!!                           00243900
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00244000
*        ANS MSG('?IWMWSYSQ ---> '!!ZMS);                               00244100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00244200
*        ZMACRET=8;                          /* MACRO ERROR */          00244300
*    END;                                                               00244400
*  ELSE                                                                 00244500
*    ZXSYSINFO_BLOCK='INPUT';                /* SET IN/OUTPUT */        00244600
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00244700
*  IF NUMBER(ANSLEN)>1                       /* CHECK POSITIONALS */    00244800
*    THEN                                                               00244900
*      DO;                                                              00245000
*        ZMS=' 8, "ANSLEN'!!                 /**KPOSP* MSG*/            00245100
*            ANSLEN!!                                                   00245200
*            '" "ANSLEN"'!!                                             00245300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00245400
*        ANS MSG('?IWMWSYSQ ---> '!!ZMS);                               00245500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00245600
*        ZMACRET=8;                          /* MACRO ERROR */          00245700
*      END;                                                             00245800
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00245900
*  XANSLEN=ANSLEN(1);                        /* SET XVARIABLE */        00246000
*  IF ANSLEN(1)=''                           /* CHECK FOR NULL */       00246100
*   THEN                                                                00246200
*    DO;                                     /* KEY IS REQUIRED */      00246300
*        ZXANSLEN='';                        /* RESET IN/OUTPUT */      00246400
*        ZMS=' 8,  '!!                                                  00246500
*            ' "ANSLEN" KEY AND ITS'!!                                  00246600
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00246700
*        ANS MSG('?IWMWSYSQ ---> '!!ZMS);                               00246800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00246900
*        ZMACRET=8;                          /* MACRO ERROR */          00247000
*    END;                                                               00247100
*  ELSE                                                                 00247200
*    ZXANSLEN='INPUT';                       /* SET IN/OUTPUT */        00247300
*/*PG.KXVAR01 NAME, RQD OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00247400
*  IF NUMBER(QUERYLEN)>1                     /* CHECK POSITIONALS */    00247500
*    THEN                                                               00247600
*      DO;                                                              00247700
*        ZMS=' 8, "QUERYLEN'!!               /**KPOSP* MSG*/            00247800
*            QUERYLEN!!                                                 00247900
*            '" "QUERYLEN"'!!                                           00248000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00248100
*        ANS MSG('?IWMWSYSQ ---> '!!ZMS);                               00248200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00248300
*        ZMACRET=8;                          /* MACRO ERROR */          00248400
*      END;                                                             00248500
*/*PG.KXVAR03 NAME, RQD OUTPUT, KEYS -XVARIABLE----------------------*/ 00248600
*  XQUERYLEN=QUERYLEN(1);                    /* SET XVARIABLE */        00248700
*  IF QUERYLEN(1)=''                         /* CHECK FOR NULL */       00248800
*   THEN                                                                00248900
*    DO;                                     /* KEY IS REQUIRED */      00249000
*        ZXQUERYLEN='';                      /* RESET IN/OUTPUT */      00249100
*        ZMS=' 8,  '!!                                                  00249200
*            ' "QUERYLEN" KEY AND ITS'!!                                00249300
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00249400
*        ANS MSG('?IWMWSYSQ ---> '!!ZMS);                               00249500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00249600
*        ZMACRET=8;                          /* MACRO ERROR */          00249700
*    END;                                                               00249800
*  ELSE                                                                 00249900
*    ZXQUERYLEN='OUTPUT';                    /* SET IN/OUTPUT */        00250000
*/*PG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00250100
*  XEXTENDED_DATA='';                                                   00250200
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00250300
*  IF TRANSLATE(EXTENDED_DATA(1))                                       00250400
*              = 'NO'                        /* CHECK FOR KEYWORD */    00250500
*     ! EXTENDED_DATA(1)=''                  /* CHECK FOR NULL */       00250600
*    THEN                                                               00250700
*      DO;                                                              00250800
*        XEXTENDED_DATA='NO';                /* SET XVARIABLE */        00250900
*        IF NUMBER(EXTENDED_DATA)>1          /* CHECK POSITIONALS */    00251000
*          THEN                                                         00251100
*            DO;                                                        00251200
*              ZMS=' 8, "EXTENDED_DATA'!!    /**KPOSP* MSG*/            00251300
*                  EXTENDED_DATA!!                                      00251400
*                  '" "EXTENDED_DATA"'!!                                00251500
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00251600
*              ANS MSG('?IWMWSYSQ ---> '!!ZMS);                         00251700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00251800
*              ZMACRET=8;                    /* MACRO ERROR */          00251900
*            END;                                                       00252000
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00252100
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00252200
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00252300
*  IF TRANSLATE(EXTENDED_DATA(1))                                       00252400
*              = 'YES'                       /* CHECK FOR KEYWORD */    00252500
*    THEN                                                               00252600
*      DO;                                                              00252700
*        XEXTENDED_DATA='YES';               /* SET XVARIABLE */        00252800
*        IF NUMBER(EXTENDED_DATA)>1          /* CHECK POSITIONALS */    00252900
*          THEN                                                         00253000
*            DO;                                                        00253100
*              ZMS=' 8, "EXTENDED_DATA'!!    /**KPOSP* MSG*/            00253200
*                  EXTENDED_DATA!!                                      00253300
*                  '" "EXTENDED_DATA"'!!                                00253400
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00253500
*              ANS MSG('?IWMWSYSQ ---> '!!ZMS);                         00253600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00253700
*              ZMACRET=8;                    /* MACRO ERROR */          00253800
*            END;                                                       00253900
*/*PG.KKCTL05 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00254000
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00254100
*/*PG.KKCTL06 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00254200
*  IF EXTENDED_DATA='EXTENDED_DATA'                                     00254300
*    ! EXTENDED_DATA='()'                    /*CHECK ENTRY*/            00254400
*     THEN                                                              00254500
*       DO;                                                             00254600
*              ZMS=' 8, THE "EXTENDED_DATA" KEY'!! /**KOPTP* MSG*/      00254700
*                  ' MUST CONTAIN ONE'!!                                00254800
*                  ' (OR MORE) ARGUMENT(S).';                           00254900
*              ANS MSG('?IWMWSYSQ ---> '!!ZMS);                         00255000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00255100
*              ZMACRET=8;                    /* MACRO ERROR */          00255200
*       END;                                                            00255300
*  ELSE                                                                 00255400
*    DO;                                                                00255500
*      ZXEXTENDED_DATA='INPUT';              /* SET IN/OUTPUT */        00255600
*      IF XEXTENDED_DATA=''                  /* CHECK FOR KEYWORD */    00255700
*        THEN                                                           00255800
*          DO;                               /* KEYWORD NOT ENTERED */  00255900
*            XEXTENDED_DATA='NO';            /* SET DEFAULT */          00256000
*            IF EXTENDED_DATA(1)^=''         /* CHECK FOR KEYWORD */    00256100
*              THEN                                                     00256200
*                DO;                                                    00256300
*                  ZXEXTENDED_DATA='';       /* RESET IN/OUTPUT */      00256400
*              ZMS=' 8, "EXTENDED_DATA'!!    /**KUKWP* MSG*/            00256500
*                  EXTENDED_DATA!!'"'!!                                 00256600
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00256700
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00256800
*                  ' "NO"'!!                 /* VALID KEYWORD */        00256900
*                  ' OR "YES".';             /* VALID KEYWORD */        00257000
*              ANS MSG('?IWMWSYSQ ---> '!!ZMS);                         00257100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00257200
*              ZMACRET=8;                    /* MACRO ERROR */          00257300
*                END;                                                   00257400
*          END;                                                         00257500
*    END;                                                               00257600
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00257700
*  IF RETCODE='RETCODE' ! RETCODE='()'       /*CHECK ENTRY*/            00257800
*    THEN                                                               00257900
*      DO;                                                              00258000
*        ZMS=' 8, THE "RETCODE" KEY'!!       /**KOPTP* MSG*/            00258100
*            ' MUST CONTAIN ONE'!!                                      00258200
*            ' (OR MORE) ARGUMENT(S).';                                 00258300
*        ANS MSG('?IWMWSYSQ ---> '!!ZMS);                               00258400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00258500
*        ZMACRET=8;                          /* MACRO ERROR */          00258600
*      END;                                                             00258700
*  IF NUMBER(RETCODE)>1                      /* CHECK POSITIONALS */    00258800
*    THEN                                                               00258900
*      DO;                                                              00259000
*        ZMS=' 8, "RETCODE'!!                /**KPOSP* MSG*/            00259100
*            RETCODE!!                                                  00259200
*            '" "RETCODE"'!!                                            00259300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00259400
*        ANS MSG('?IWMWSYSQ ---> '!!ZMS);                               00259500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00259600
*        ZMACRET=8;                          /* MACRO ERROR */          00259700
*      END;                                                             00259800
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00259900
*  IF RETCODE(1)^=''                         /* CHECK FOR NULL */       00260000
*    THEN                                                               00260100
*      DO;                                                              00260200
*        XRETCODE=RETCODE(1);                /* SET XVARIABLE */        00260300
*        ZXRETCODE='OUTPUT';                 /* SET OUTPUT */           00260400
*      END;                                                             00260500
*  ELSE                                                                 00260600
*    IF ZXRETCODE^=''                                                   00260700
*      THEN                                                             00260800
*        ZXRETCODE='';                       /* RESET OUTPUT */         00260900
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00261000
*  IF RSNCODE='RSNCODE' ! RSNCODE='()'       /*CHECK ENTRY*/            00261100
*    THEN                                                               00261200
*      DO;                                                              00261300
*        ZMS=' 8, THE "RSNCODE" KEY'!!       /**KOPTP* MSG*/            00261400
*            ' MUST CONTAIN ONE'!!                                      00261500
*            ' (OR MORE) ARGUMENT(S).';                                 00261600
*        ANS MSG('?IWMWSYSQ ---> '!!ZMS);                               00261700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00261800
*        ZMACRET=8;                          /* MACRO ERROR */          00261900
*      END;                                                             00262000
*  IF NUMBER(RSNCODE)>1                      /* CHECK POSITIONALS */    00262100
*    THEN                                                               00262200
*      DO;                                                              00262300
*        ZMS=' 8, "RSNCODE'!!                /**KPOSP* MSG*/            00262400
*            RSNCODE!!                                                  00262500
*            '" "RSNCODE"'!!                                            00262600
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00262700
*        ANS MSG('?IWMWSYSQ ---> '!!ZMS);                               00262800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00262900
*        ZMACRET=8;                          /* MACRO ERROR */          00263000
*      END;                                                             00263100
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/ 00263200
*  IF RSNCODE(1)^=''                         /* CHECK FOR NULL */       00263300
*    THEN                                                               00263400
*      DO;                                                              00263500
*        XRSNCODE=RSNCODE(1);                /* SET XVARIABLE */        00263600
*        ZXRSNCODE='OUTPUT';                 /* SET OUTPUT */           00263700
*      END;                                                             00263800
*  ELSE                                                                 00263900
*    IF ZXRSNCODE^=''                                                   00264000
*      THEN                                                             00264100
*        ZXRSNCODE='';                       /* RESET OUTPUT */         00264200
*/*PG.P04 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00264300
*      END;                                  /* END COMPLETE CHECKING*/ 00264400
*/********************************************************************/ 00264500
*/***PE.MR01 GENERATE CODE IF ZMACRET=0                              */ 00264600
*/********************************************************************/ 00264700
*  IF ZMACRET = 0                                                       00264800
*    THEN                                                               00264900
*      DO;                                                              00265000
*/********************************************************************/ 00265100
*/***PE.PR01 PRINT CONTROLS, DEFAULT IS YES                          */ 00265200
*/********************************************************************/ 00265300
*  ANS(MACCONC!!'LIST PUSH NOECHO;') NORESCAN COL(MACLMAR);             00265400
*  IF ZPRINT='NO'                            /* PRINT IS OFF */         00265500
*    THEN                                                               00265600
*      ANS(MACCONC!!'LIST OFF NOECHO;') NORESCAN COL(MACLMAR);          00265700
*    ELSE                                                               00265800
*      ANS(MACCONC!!'LIST ON NOECHO;')  NORESCAN COL(MACLMAR);          00265900
*/********************************************************************/ 00266000
*/*PE.DO02 OUTER MACRO DO STATEMENT----------------------------------*/ 00266100
*  IF XMF^='L'                                                          00266200
*    THEN                                                               00266300
*      ANS('DO; /* IWMWSYSQ-PLISTVER */')                               00266400
*          NORESCAN COL(MACLMAR);                                       00266500
*/*PL.LL01 ?IWMWSYSQ MF=L PARAMETER LIST-----------------------------*/ 00266600
*  IF XMF='L'                                                           00266700
*    THEN                                                               00266800
*      DO;                                                              00266900
*        ANS('DCL 1 '!!XMFCTRL!!' '!!XMFATTR!!', '!!                    00267000
*            '/* ?IWMWSYSQ PARM LIST*/')                                00267100
*            NORESCAN COL(MACLMAR);                                     00267200
*/*PL.LL13  XACRO CHAR(4) CONSTANT-----------------------------------*/ 00267300
*        ANS('2 '!!XMFCTRL                                              00267400
*         !! '_XACRO CHAR(4), '                                         00267500
*         !! '/* '!!ZXACRO                                              00267600
*         !! ' XACRO */'                                                00267700
*            ) NORESCAN COL(MACLMAR+2);                                 00267800
*/*PL.LL02  XVERSION FIXED(8) INPUT----------------------------------*/ 00267900
*        ANS('2 '!!XMFCTRL!!                                            00268000
*            '_XVERSION FIXED(8), '!!                                   00268100
*            '/* INPUT XVERSION*/')                                     00268200
*            NORESCAN COL(MACLMAR+2);                                   00268300
*/*PL.LL13  XRSV001 CHAR(1) RESERVED---------------------------------*/ 00268400
*        ANS('2 '!!XMFCTRL                                              00268500
*         !! '_XRSV001 CHAR(1), '                                       00268600
*         !! '/* RESERVED */'                                           00268700
*            ) NORESCAN COL(MACLMAR+2);                                 00268800
*/*PL.LL02  XPLISTLEN FIXED(16) BDY(BYTE) INPUT----------------------*/ 00268900
*        ANS('2 '!!XMFCTRL!!                                            00269000
*            '_XPLISTLEN FIXED(16) BDY(BYTE), '!!                       00269100
*            '/* INPUT XPLISTLEN*/')                                    00269200
*            NORESCAN COL(MACLMAR+2);                                   00269300
*/*PL.LL13  XANSLEN FIXED(31) INPUT----------------------------------*/ 00269400
*        ANS('2 '!!XMFCTRL                                              00269500
*         !! '_XANSLEN FIXED(31), '                                     00269600
*         !! '/* '!!ZXANSLEN                                            00269700
*         !! ' XANSLEN */'                                              00269800
*            ) NORESCAN COL(MACLMAR+2);                                 00269900
*/*PL.LL13  XQUERYLEN FIXED(31) OUTPUT-------------------------------*/ 00270000
*        ANS('2 '!!XMFCTRL                                              00270100
*         !! '_XQUERYLEN FIXED(31), '                                   00270200
*         !! '/* '!!ZXQUERYLEN                                          00270300
*         !! ' XQUERYLEN */'                                            00270400
*            ) NORESCAN COL(MACLMAR+2);                                 00270500
*/*PL.LL13  XRSV002 CHAR(4) RESERVED---------------------------------*/ 00270600
*        ANS('2 '!!XMFCTRL                                              00270700
*         !! '_XRSV002 CHAR(4), '                                       00270800
*         !! '/* RESERVED */'                                           00270900
*            ) NORESCAN COL(MACLMAR+2);                                 00271000
*/*PL.LL13  XSYSINFO_BLOCK PTR(31) INPUT-----------------------------*/ 00271100
*        ANS('2 '!!XMFCTRL                                              00271200
*         !! '_XSYSINFO_BLOCK PTR(31), '                                00271300
*         !! '/* '!!ZXSYSINFO_BLOCK                                     00271400
*         !! ' XSYSINFO_BLOCK */'                                       00271500
*            ) NORESCAN COL(MACLMAR+2);                                 00271600
*/*PL.LL13  XRSV003 CHAR(4) RESERVED---------------------------------*/ 00271700
*        ANS('2 '!!XMFCTRL                                              00271800
*         !! '_XRSV003 CHAR(4), '                                       00271900
*         !! '/* RESERVED */'                                           00272000
*            ) NORESCAN COL(MACLMAR+2);                                 00272100
*/*PL.LL13  XRSV004 CHAR(4) RESERVED---------------------------------*/ 00272200
*        ANS('2 '!!XMFCTRL                                              00272300
*         !! '_XRSV004 CHAR(4), '                                       00272400
*         !! '/* RESERVED */'                                           00272500
*            ) NORESCAN COL(MACLMAR+2);                                 00272600
*/*PL.LPVER01 -------------------------------------------------------*/ 00272700
*  IF XPLISTVER>=3                                                      00272800
*    THEN                                                               00272900
*      DO;                                                              00273000
*/*PL.LL04  XSCQ_OPTIONS BIT(8) FIELD_LABEL--------------------------*/ 00273100
*        ANS('2 '!!XMFCTRL!!                                            00273200
*            '_XSCQ_OPTIONS BIT(8), '!!                                 00273300
*            '/* FIELD_LABEL */')                                       00273400
*            NORESCAN COL(MACLMAR+2);                                   00273500
*/*PL.LPVER02 -------------------------------------------------------*/ 00273600
*      END;                                                             00273700
*/*PL.LPVER01 -------------------------------------------------------*/ 00273800
*  IF XPLISTVER>=3                                                      00273900
*    THEN                                                               00274000
*      DO;                                                              00274100
*/*PL.LL09 BIT 1XXXXXXX----------------------------------------------*/ 00274200
*          ANS('3 '!!XMFCTRL!!                                          00274300
*              '_XEXTENDED_DATA_YES BIT(1), '!!                         00274400
*              '/* BIT */')                                             00274500
*              NORESCAN COL(MACLMAR+2);                                 00274600
*/*PL.LL10 RESERVED BIT----------------------------------------------*/ 00274700
*          ANS('3 '!!XMFCTRL!!                                          00274800
*              '_XSCQ_OPTIONS_RSVD1 BIT(7), '!!                         00274900
*              '/* BIT */')                                             00275000
*              NORESCAN COL(MACLMAR+2);                                 00275100
*/*PL.LPVER02 -------------------------------------------------------*/ 00275200
*      END;                                                             00275300
*/*PL.LPVER01 -------------------------------------------------------*/ 00275400
*  IF XPLISTVER>=3                                                      00275500
*    THEN                                                               00275600
*      DO;                                                              00275700
*/*PL.LL13  XRSV005 CHAR(3) RESERVED---------------------------------*/ 00275800
*        ANS('2 '!!XMFCTRL                                              00275900
*         !! '_XRSV005 CHAR(3), '                                       00276000
*         !! '/* RESERVED */'                                           00276100
*            ) NORESCAN COL(MACLMAR+2);                                 00276200
*/*PL.LPVER02 -------------------------------------------------------*/ 00276300
*      END;                                                             00276400
*/*PL.LL18 ----------------------------------------------------------*/ 00276500
*        ANS('2 * CHAR(0);')                                            00276600
*            NORESCAN COL(MACLMAR+2);                                   00276700
*/*PL.LL17 END OF MF=L PARAMETER LIST--------------------------------*/ 00276800
*      END;                                                             00276900
*/*PL.L01 MACRO WORK VARIABLES---------------------------------------*/ 00277000
*  DCL ZPRMLINE CHAR;          /* ZPRM ARRAY ENTRY ACCUMULATOR      */  00277100
*  DEACT ZPRMLINE;                                                      00277200
*  DCL ZNDX CHAR;              /* UNIQUE LIST STRUCTURE NAME        */  00277300
*  DEACT ZNDX;                                                          00277400
*  ZNDX=MACINDEX;              /* MACINDEX                          */  00277500
*  DCL XVERSION CHAR;                                                   00277600
*  DEACT XVERSION;                                                      00277700
*/*PL.L02 ?IWMWSYSQ PARAMETER LIST-----------------------------------*/ 00277800
*  IF XMF^='L'                                                          00277900
*    THEN                                                               00278000
*      DO;                                                              00278100
*/*PL.L03 ?IWMWSYSQ PARAMETER LIST-----------------------------------*/ 00278200
*        IF XMF='S'                                                     00278300
*          THEN                                                         00278400
*            XMFCTRL='#ZPLIST';                                         00278500
*/*PL.L04 ?IWMWSYSQ PARAMETER LIST-----------------------------------*/ 00278600
*        ZPRMLINE='DCL 1 #Z'!!ZNDX!!' DEF('!!                           00278700
*                 XMFCTRL!!'),'!!                                       00278800
*                 ' /* ?IWMWSYSQ PARM LIST*/';                          00278900
*/*PL.L08  XACRO CHAR(4) CONSTANT------------------------------------*/ 00279000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00279100
*                 '_XACRO CHAR(4), '!!                                  00279200
*                 '/* '!!ZXACRO!!                                       00279300
*                 ' XACRO */';                                          00279400
*/*PL.L05  XVERSION FIXED(8) INPUT-----------------------------------*/ 00279500
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00279600
*                 '_XVERSION FIXED(8), '!!                              00279700
*                 '/* INPUT XVERSION*/';                                00279800
*/*PL.L08  XRSV001 CHAR(1) RESERVED----------------------------------*/ 00279900
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00280000
*                 '_XRSV001 CHAR(1), '!!                                00280100
*                 '/* RESERVED */';                                     00280200
*/*PL.L05  XPLISTLEN FIXED(16) BDY(BYTE) INPUT-----------------------*/ 00280300
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00280400
*                 '_XPLISTLEN FIXED(16) BDY(BYTE), '!!                  00280500
*                 '/* INPUT XPLISTLEN*/';                               00280600
*/*PL.L08  XANSLEN FIXED(31) INPUT-----------------------------------*/ 00280700
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00280800
*                 '_XANSLEN FIXED(31), '!!                              00280900
*                 '/* '!!ZXANSLEN!!                                     00281000
*                 ' XANSLEN */';                                        00281100
*/*PL.L08  XQUERYLEN FIXED(31) OUTPUT--------------------------------*/ 00281200
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00281300
*                 '_XQUERYLEN FIXED(31), '!!                            00281400
*                 '/* '!!ZXQUERYLEN!!                                   00281500
*                 ' XQUERYLEN */';                                      00281600
*/*PL.L08  XRSV002 CHAR(4) RESERVED----------------------------------*/ 00281700
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00281800
*                 '_XRSV002 CHAR(4), '!!                                00281900
*                 '/* RESERVED */';                                     00282000
*/*PL.L08  XSYSINFO_BLOCK PTR(31) INPUT------------------------------*/ 00282100
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00282200
*                 '_XSYSINFO_BLOCK PTR(31), '!!                         00282300
*                 '/* '!!ZXSYSINFO_BLOCK!!                              00282400
*                 ' XSYSINFO_BLOCK */';                                 00282500
*/*PL.L08  XRSV003 CHAR(4) RESERVED----------------------------------*/ 00282600
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00282700
*                 '_XRSV003 CHAR(4), '!!                                00282800
*                 '/* RESERVED */';                                     00282900
*/*PL.L08  XRSV004 CHAR(4) RESERVED----------------------------------*/ 00283000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00283100
*                 '_XRSV004 CHAR(4), '!!                                00283200
*                 '/* RESERVED */';                                     00283300
*/*PL.LPVER03 -------------------------------------------------------*/ 00283400
*  IF XPLISTVER>=3                                                      00283500
*    THEN                                                               00283600
*      DO;                                                              00283700
*/*PL.L08  XSCQ_OPTIONS BIT(8) FIELD_LABEL---------------------------*/ 00283800
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00283900
*                 '_XSCQ_OPTIONS BIT(8), '!!                            00284000
*                 '/* FIELD_LABEL */';                                  00284100
*/*PL.LPVER04 -------------------------------------------------------*/ 00284200
*      END;                                                             00284300
*/*PL.LPVER03 -------------------------------------------------------*/ 00284400
*  IF XPLISTVER>=3                                                      00284500
*    THEN                                                               00284600
*      DO;                                                              00284700
*/*PL.L08  XRSV005 CHAR(3) RESERVED----------------------------------*/ 00284800
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00284900
*                 '_XRSV005 CHAR(3), '!!                                00285000
*                 '/* RESERVED */';                                     00285100
*/*PL.LPVER04 -------------------------------------------------------*/ 00285200
*      END;                                                             00285300
*/*PL.L11 CONSTANT TO ENSURE THAT LIST FORM IS LONG ENOUGH ----------*/ 00285400
*        ZPRMNUM=ZPRMNUM+1;                                             00285500
*        ZPRM(ZPRMNUM)=ZPRMLINE!!' 2 * CHAR(0);';                       00285600
*        IF XPLISTVER^=2                                                00285700
*           & XMF^='S'                                                  00285800
*          THEN                                                         00285900
*            DO;                                                        00286000
*              ZPRMNUM=ZPRMNUM+1;                                       00286100
*              ZPRM(ZPRMNUM)=                                           00286200
*               'DCL #Z'!!ZNDX!!'_LENCHECK FIXED(32) CONSTANT('!!       00286300
*               'LENGTH('!!XMFCTRL!!')-LENGTH(#Z'!!ZNDX!!'));'!!        00286400
*               '/* CONSTANT TO ENSURE THAT THE LIST FORM'!!            00286500
*               ' IS LONG ENOUGH */';                                   00286600
*            END;                                                       00286700
*/*PL.L12 PARAMETER LIST SIZE----------------------------------------*/ 00286800
*        ZPLLEN=32;                                                     00286900
*        IF XPLISTVER>=3                                                00287000
*          THEN                                                         00287100
*            ZPLLEN=36;                                                 00287200
*        IF ZPRMMAX<ZPLLEN                                              00287300
*           & XMF^='E'                                                  00287400
*          THEN                                                         00287500
*            ZPRMMAX=ZPLLEN;                                            00287600
*/*PL.L13 -----------------------------------------------------------*/ 00287700
*      END;                                                             00287800
*/*PI.L01 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00287900
*  IF XMF^='L'                                                          00288000
*    THEN                                                               00288100
*      DO;                                                              00288200
*/*PI.L03 CLEAR PARAMETER LIST --------------------------------------*/ 00288300
*            ANS('#Z'!!ZNDX!!'=''''B;'!!                                00288400
*                '/* CLEAR PARAMETER AREA */')                          00288500
*                NORESCAN COL(MACLMAR);                                 00288600
*/*PI.L28 XACRO  CHAR(4)---------------------------------------------*/ 00288700
*        ANS('#Z'!!ZNDX!!'_XACRO=''SCQP'';'!!                           00288800
*            '/* XACRO CHAR(4) CONSTANT */')                            00288900
*            NORESCAN COL(MACLMAR);                                     00289000
*/*PI.L05B XVERSION FIXED(8)-----------------------------------------*/ 00289100
*        IF XPLISTVER^=0                                                00289200
*          THEN                                                         00289300
*            ANS('#Z'!!ZNDX!!'_XVERSION='!!CHAR(XPLISTVER)!!'; '!!      00289400
*                '/* XVERSION FIXED(8) */')                             00289500
*                NORESCAN COL(MACLMAR);                                 00289600
*/*PI.L05C XPLISTLEN FIXED(16)---------------------------------------*/ 00289700
*        ANS('#Z'!!ZNDX!!'_XPLISTLEN=LENGTH(#Z'!!ZNDX!!');'!!           00289800
*            '/* XPLISTLEN FIXED(16) */')                               00289900
*            NORESCAN COL(MACLMAR);                                     00290000
*/*PI.L17 XANSLEN FIXED(31)------------------------------------------*/ 00290100
*        IF ZXANSLEN='INPUT' !                                          00290200
*           ZXANSLEN='INOUT'                                            00290300
*          THEN                                                         00290400
*            ANS('#Z'!!ZNDX!!'_XANSLEN='!!                              00290500
*                XANSLEN!!';'!!                                         00290600
*                '/* XANSLEN FIXED(31) */')                             00290700
*                NORESCAN COL(MACLMAR);                                 00290800
*/*PI.L17 XSYSINFO_BLOCK PTR(31)-------------------------------------*/ 00290900
*        IF ZXSYSINFO_BLOCK='INPUT' !                                   00291000
*           ZXSYSINFO_BLOCK='INOUT'                                     00291100
*          THEN                                                         00291200
*            ANS('#Z'!!ZNDX!!'_XSYSINFO_BLOCK='!!                       00291300
*                XSYSINFO_BLOCK!!';'!!                                  00291400
*                '/* XSYSINFO_BLOCK PTR(31) */')                        00291500
*                NORESCAN COL(MACLMAR);                                 00291600
*/*PI.LPVER01 -------------------------------------------------------*/ 00291700
*  IF XPLISTVER>=3                                                      00291800
*    THEN                                                               00291900
*      DO;                                                              00292000
*/*PI.L06 XSCQ_OPTIONS BIT(8)----------------------------------------*/ 00292100
*        ZW='';                                                         00292200
*        ZMS='';                                                        00292300
*/*PI.LPVER02 -------------------------------------------------------*/ 00292400
*      END;                                                             00292500
*/*PI.LPVER01 -------------------------------------------------------*/ 00292600
*  IF XPLISTVER>=3                                                      00292700
*    THEN                                                               00292800
*      DO;                                                              00292900
*/*PI.L07 XSCQ_OPTIONS BIT(8) 1XXXXXXX-------------------------------*/ 00293000
*        IF XEXTENDED_DATA='YES'                                        00293100
*          THEN                                                         00293200
*            ZW=ZW!!'10000000';                                         00293300
*          ELSE                                                         00293400
*            ZW=ZW!!'00000000';                                         00293500
*/*PI.L09 XSCQ_OPTIONS BIT(8)----------------------------------------*/ 00293600
*        IF INDEX(ZW,'1')^=0                                            00293700
*          THEN                                                         00293800
*            ANS('#Z'!!ZNDX!!'_XSCQ_OPTIONS='!!                         00293900
*                '#Z'!!ZNDX!!'_XSCQ_OPTIONS ! '!!                       00294000
*                ''''!!ZW!!'''B; '!!                                    00294100
*                '/* BIT(8) */')                                        00294200
*                NORESCAN COL(MACLMAR);                                 00294300
*/*PI.LPVER02 -------------------------------------------------------*/ 00294400
*      END;                                                             00294500
*/*PI.L31 INVOKE FUNCTION--------------------------------------------*/ 00294600
*              IF NUMBER(RSNCODE)>0                                     00294700
*                THEN                                                   00294800
*                  ANS('RFY GPR00F RSTD;') NORESCAN COL(MACLMAR);       00294900
*              ANS('RFY GPR01P RSTD;') NORESCAN COL(MACLMAR);           00295000
*              ANS('GPR01P=ADDR(#Z'!!ZNDX!!');'!!                       00295100
*                  '/* PARAMETER LIST */')                              00295200
*                  NORESCAN COL(MACLMAR);                               00295300
*              IF SYSASCE^='P'                                          00295400
*                THEN                                                   00295500
*                  ANS('SAR(GPR01P,ALET(#Z'!!ZNDX!!'));'!!              00295600
*                      '/* PARAMETER LIST AR */')                       00295700
*                      NORESCAN COL(MACLMAR);                           00295800
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00295900
       ANS COL(MACLMAR)                                                 00296000
     ('PC(XM@(96)!27); /* Invoke service routine */');                  00296100
     DCL EHAMAPS CHAR EXTERNAL;                                         00296200
     IF INDEX(EHAMAPS,'XM@')=0 THEN                                     00296300
      EHAMAPS=EHAMAPS!!'XM@,';                                          00296400
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00296500
*              ANS('RFY GPR01P UNRSTD;') NORESCAN COL(MACLMAR);         00296600
*              IF NUMBER(RETCODE)>0                                     00296700
*                THEN                                                   00296800
*                  ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);       00296900
*/*PO.L03 XQUERYLEN FIXED(31)----------------------------------------*/ 00297000
*              IF ZXQUERYLEN='OUTPUT' !                                 00297100
*                 ZXQUERYLEN='INOUT'                                    00297200
*                THEN                                                   00297300
*                  ANS(XQUERYLEN!!                                      00297400
*                      '=#Z'!!ZNDX!!'_XQUERYLEN;'!!                     00297500
*                      '/* XQUERYLEN FIXED(31) */')                     00297600
*                      NORESCAN COL(MACLMAR);                           00297700
*/*PO.L08 XRETCODE RETURN CODE---------------------------------------*/ 00297800
*              IF NUMBER(RETCODE)>0                                     00297900
*                THEN                                                   00298000
*                    ANS(XRETCODE!!                                     00298100
*                     '=GPR15F; /* SET RETURN CODE */')                 00298200
*                      NORESCAN COL(MACLMAR);                           00298300
*/*PO.L09 XRSNCODE REASON CODE---------------------------------------*/ 00298400
*              IF NUMBER(RSNCODE)>0                                     00298500
*                THEN                                                   00298600
*                    ANS(XRSNCODE!!                                     00298700
*                     '=GPR00F; /* SET REASON CODE */')                 00298800
*                      NORESCAN COL(MACLMAR);                           00298900
*/*PO.L10 REMOVE REGISTER RESTRICTIONS-------------------------------*/ 00299000
*              IF NUMBER(RSNCODE)>0                                     00299100
*                THEN                                                   00299200
*              ANS('RFY GPR00F UNRSTD;') NORESCAN COL(MACLMAR);         00299300
*              IF NUMBER(RETCODE)>0                                     00299400
*                THEN                                                   00299500
*              ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);         00299600
*/*PO.L12 END OF PARAMETER LIST PROCESSING---------------------------*/ 00299700
*      END;                                                             00299800
*/*PO.L13 IWMWSYSQ USAGE INDICATOR-----------------------------------*/ 00299900
*  ZIWMWSYSQ='YES';                          /* SET IWMWSYSQ USED */    00300000
*/*PO.L15 END OF EXECUTABLE IWMWSYSQ-PLISTVER MACRO------------------*/ 00300100
*  IF XMF^='L'                                                          00300200
*    THEN                                                               00300300
*      ANS('END; /* IWMWSYSQ-PLISTVER */')                              00300400
*          NORESCAN COL(MACLMAR);                                       00300500
*/*PO.L16 RESTORE PRINT CONTROLS-------------------------------------*/ 00300600
*  ANS(MACCONC!!'LIST POP NOECHO;') NORESCAN COL(MACLMAR);              00300700
*/*PO.L17 END OF IWMWSYSQ MACRO--------------------------------------*/ 00300800
*  ANS(MACCONC!!'SPACE;') NORESCAN COL(MACLMAR);                        00300900
*  ANS(' ') NORESCAN COL(MACLMAR);                                      00301000
*/*******************************************************************/  00301100
*/*  PO.L18 END OF CODE TO BE BYPASSED WHEN ZMACRET ^= 0            */  00301200
*/*******************************************************************/  00301300
*      END;                                                             00301400
*/*******************************************************************/  00301500
*/*  MVS ONLY     -CHECK IF AMG PARM LISTS ARE PRESENT              */  00301600
*/*               -ROUND MAX AMG PARM LIST TO DOUBLEWORD MULTIPLES  */  00301700
*/*******************************************************************/  00301800
*  IF ZPRMNUM>0                   /* NUMBER OF AMG PARM LIST ENTRIES*/  00301900
*    THEN                                                               00302000
*      DO;                                                              00302100
*        ZPRMMAX=((ZPRMMAX+7)/8)*8; /* ROUND PARM LIST SIZE UP TO       00302200
*                                      DOUBLEWORD MULTIPLES        */   00302300
*/*******************************************************************/  00302400
*/*  MVS -GENERATE PARM LIST DCL TO OVERLAY ?EPILOG'S ILIST AREA    */  00302500
*/*******************************************************************/  00302600
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00302700
*          THEN                                                         00302800
*            DO;                                                        00302900
*              IF INDEX(EHALIST,',AMG,')=0 /* HAS DECLARE BEEN DONE?*/  00303000
*                THEN                                                   00303100
*                  DO;                                                  00303200
*                    ANS('?EPILOG                                       00303300
*                        STRING(''DCL #ZPLIST DEF(ILIST);'');');        00303400
*                    EHALIST=EHALIST!!',AMG,';                          00303500
*                  END;                                                 00303600
*            END;                                                       00303700
*/*******************************************************************/  00303800
*/*  MVS  -EXTRACT PARM LISTS FROM AMG GLOBAL MACRO ARRAYS          */  00303900
*/*******************************************************************/  00304000
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00304100
*          THEN                                                         00304200
*            DO;                                                        00304300
*              IF ZPRMMAX>EHAMAXLEN                                     00304400
*                THEN                                                   00304500
*                  EHAMAXLEN=ZPRMMAX; /* SET MAX PARM LIST SIZE     */  00304600
*            END;                                                       00304700
*        DO ZI=1 TO ZPRMNUM; /* EXTRACT AMG PARM LISTS               */ 00304800
*          ANS('?EPILOG STRING('''!!ZPRM(ZI)!!''');')                   00304900
*              COL(MACLMAR);                                            00305000
*        END;                                                           00305100
*      END;                                                             00305200
*/*-----------------------------------------------------------------*/  00305300
*/*  MVS  -ENSURE THAT GPRS NEEDED BY AMG MACROS WILL BE PROVIDED   */  00305400
*/*        BY ?EPILOG                                               */  00305500
*/*-----------------------------------------------------------------*/  00305600
*        IF INDEX(EHAREGS,'01P')=0                                      00305700
*          THEN                                                         00305800
*            EHAREGS=EHAREGS!!'01P'; /* GPR01P                      */  00305900
*        IF INDEX(EHAREGS,'00F')=0                                      00306000
*          & NUMBER(RSNCODE)>0                                          00306100
*          THEN                                                         00306200
*            EHAREGS=EHAREGS!!'00F'; /* GPR00F                      */  00306300
*        IF INDEX(EHAREGS,'15F')=0                                      00306400
*          & NUMBER(RETCODE)>0                                          00306500
*          THEN                                                         00306600
*            EHAREGS=EHAREGS!!'15F'; /* GPR15F                      */  00306700
*  RETURN CODE(ZMACRET);                                                00306800
*%END IWMWSYSQ;                                                         00306900
