*                                                                       00001000
* %DCL CSVMODI_INCLUDED CHAR EXT;                                       00002000
* %DEACTIVATE CSVMODI_INCLUDED;                                         00003000
* %IF CSVMODI_INCLUDED = '' %THEN                                       00004000
* %DO;                                                                  00005000
*/* Macro made bi-lingual on 20125. CBGEN compile date 20027         */ 00006000
*% /*                                                                   00007000
         MACRO                                                          00008000
         CSVMODI &DSECT=YES,&LIST=YES,&TITLE=YES,&MODI_HEADER=YES,     *00009000
               &MODI_1=COND,&MODI_2=COND,&MODI_SEGLEN=COND,            *00010000
               &MODI_SEGADDR=COND,&MODI64_1=COND,&MODI_3=COND,         *00011000
               &MODI_4=COND,&MODI_5=COND                                00012000
         GBLC  &CSVMODI_INCLUDED                                        00013000
         GBLC  &ZCBPRINT                                                00014000
&CSVMODI_INCLUDED SETC 'YES'                                            00015000
         AIF   ('&LIST' EQ 'NONE').P0                                   00016000
         AIF   ('&TITLE' EQ 'NO').P5                                    00017000
 TITLE   'CSVMODI  - Contents module information                    '   00018000
.P5      ANOP                                                           00019000
**/ CSVMODI_1:;                                                         00020000
*/* START OF SPECIFICATIONS ******************************************* 00021000
*                                                                    */ 00022000
*/***PROPRIETARY_STATEMENT********************************************/ 00023000
*/*                                                                  */ 00024000
*/*01* PROPRIETARY STATEMENT =                                       */ 00025000
*/*      LICENSED MATERIALS - PROPERTY OF IBM                        */ 00026000
*/*      5650-ZOS COPYRIGHT IBM CORP. 1990, 2021                     */ 00027000
*/*                                                                  */ 00028000
*/* STATUS= HBB77D0                                                  */ 00029000
*/*                                                                  */ 00030000
*/***END_OF_PROPRIETARY_STATEMENT*************************************/ 00031000
*/*                                                                     00032000
*01* DESCRIPTIVE NAME:  Contents module information                     00033000
*02*  ACRONYM:  MODI                                                    00034000
*                                                                       00035000
*01* MACRO NAME:  CSVMODI                                               00036000
*                                                                       00037000
*01* EXTERNAL CLASSIFICATION:                                           00038000
*02*   PI: BASE                                                         00039000
*02*   NOTPI: FIELDS                                                    00040000
*             MODI_DIAG                                                 00041000
*             MODI_PATHTOKEN                                            00042000
*01* END OF EXTERNAL CLASSIFICATION:                                    00043000
*                                                                       00044000
*01* DSECT NAME:                                                        00045000
*     MODI_HEADER MODI_1 MODI_2 MODI_3 MODI_4 MODI_5                    00046000
*     MODI_SEGLEN MODI_SEGADDR                                          00047000
*                                                                       00048000
*01* COMPONENT:  Contents Supervision (SC1CJ)                           00049000
*                                                                       00050000
*01* EYE-CATCHER:  MODI                                                 00051000
*02*  OFFSET: 0                                                         00052000
*02*  LENGTH: 4                                                         00053000
*                                                                       00054000
*01* STORAGE ATTRIBUTES:                                                00055000
*02*  SUBPOOL: 0                                                        00056000
*02*  KEY:  User                                                        00057000
*                                                                       00058000
*01* SIZE:                                                              00059000
*                MODI64_1     -- X'0018' bytes                          00060000
*                MODI_HEADER  -- X'004C' bytes                          00061000
*                MODI_1       -- X'004C' bytes                          00062000
*                MODI_2       -- X'000C' bytes                          00063000
*                MODI_3       -- X'0020' bytes                          00064000
*                MODI_4       -- X'0004' bytes                          00065000
*                MODI_5       -- X'0008' bytes                          00066000
*                MODI_SEGLEN  -- X'0004' bytes                          00067000
*                MODI_SEGADDR -- X'0004' bytes                          00068000
*                                                                       00069000
*01* CREATED BY:                                                        00070000
*     CSVINFO service                                                   00071000
*                                                                       00072000
*01* POINTED TO BY:                                                     00073000
*     This is a mapping for a parameter to the user routine             00074000
*     called by the CSVINFO service (CSVINFOM).  When the               00075000
*     user routine gets control, register 1 points to a                 00076000
*     pointer to this information.                                      00077000
*                                                                       00078000
*01* SERIALIZATION:                                                     00079000
*     Local lock for Job Pack Q and CMS lock for LPA for                00080000
*     callers that are Supervisor state and PSW key 0.                  00081000
*                                                                       00082000
*01* FUNCTION:                                                          00083000
*02* To provide information associated with an entry point.             00084000
*                                                                       00085000
*01* METHOD OF ACCESS:                                                  00086000
*                                                                       00087000
*02*  ASM: DSECTS are produced.                                         00088000
*          Usings are required for MODI_HEADER                          00089000
*          and for individual sections (MODI_1, MODI_2 ...).            00090000
*                                                                       00091000
*     Default: DSECT=YES,MODI_HEADER=YES,MODI_1=COND,MODI_2=COND,       00092000
*              MODI_3=COND,MODI_4=COND,MODI_5=COND,                     00093000
*              MODI_SEGLEN=COND,MODI_SEGADDR=COND                       00094000
*     Notes: name=YES  => expand                                        00095000
*            name=NO   => do not expand                                 00096000
*            name=COND => expand only if DSECT=YES                      00097000
*                                                                       00098000
*                                                                       00099000
*                                                                       00100000
*02*  PL/AS:                                                            00101000
*      %INCLUDE SYSLIB(CSVMODI)                                         00102000
*                                                                       00103000
*01* DELETED BY: CSVINFO                                                00104000
*                                                                       00105000
*01* FREQUENCY: 1 per CSVINFO invocation.                               00106000
*                                                                       00107000
*01* DEPENDENCIES: None                                                 00108000
*                                                                       00109000
*01* DISTRIBUTION LIBRARY: AMACLIB                                      00110000
*                                                                       00111000
*01* CHANGE ACTIVITY:                                                   00112000
*   $L0 = PGMSP , HBB4430, 920318, PD34CA: Introduce CSVINFO      @L0A  00113000
*   $L1 = PGMSP , HBB4430, 920429, PD34EP: Add LOOP_LIMIT code    @L1A  00114000
*   $L2 = PGMSP , HBB4430, 920429, PD34NP: Add flags              @L2A  00115000
*   $L3 = PGMSP , HBB4430, 920729, PD34NP: Add MODI_USED_BY_RACF  @L3A  00116000
*   $D1 = PGMSP , HBB4430, 920617, PD34EP: Add INELIGIBLE_RB code @D1A  00117000
*                                          Add MIPR_FAILED code   @D1A  00118000
*   $P1 = PKBxxxx,HBB4430, 920618, PD34CA: Fix assembler problem        00119000
*                                          caused by double declares    00120000
*                                          for variables named x_LEN    00121000
*   $P2 = PKB3942,HBB4430, 920729, PD34NP: Multiple extents             00122000
*   $01 = OW02434,HBB4430, 940523, PD34DH: Add MODI_RB_LOOP code  @01A  00123000
*   $P3 = PN71686,HBB5520, 941006, PD00KC: Add EXTERNAL CLASSIFICATION  00124000
*                                          statement to prolog          00125000
*   $P4 = PSY0546,JBB6604, 970326, PD00XB: Document MODI_2 better       00126000
*   $L4 =64BITCSV HBB7703  981204  PD00XB: ESAME                        00127000
*   $L5 =64BITCSV HBB7706  010101  PD00XB: PADS                         00128000
*   $L6 =PADS2    HBB7707  010920  PD00XB: PADS                         00129000
*   $02 = OA03480 HBB7707  040227  PD00KC: RacfDirtyForMain bit   @02A  00130000
*   $L7 =ME04784  HBB7730  051001  PD00XB: DSKEY                        00131000
*   $L8 =ME10719  HBB7750  070801  PD00XB: PATHTOKEN                    00132000
*   $L9 =ME11053  HBB7750  070901  PD00XB: LPA pathname                 00133000
*   $LA =LONGPARM HBB7790  120115  PD00XB: LongParmOK                   00134000
*   $LB =RMODE64  HBB77B0  150901  PD00XB: RMODE 64                     00135000
*                                                                       00136000
* END OF SPECIFICATIONS **********************************************/ 00137000
*% /*                                                                   00138000
.P0      ANOP                                                           00139000
         AIF   ('&ZCBPRINT' EQ 'NO').P1                                 00140000
         AIF   ('&LIST' EQ 'YES').P2                                    00141000
.P1      ANOP                                                           00142000
         PUSH  PRINT                                                    00143000
         PRINT OFF                                                      00144000
.P2      ANOP                                                           00145000
         AIF   ('&MODI_HEADER' EQ 'NO').L0002                           00146000
         AIF   ('&DSECT' EQ 'YES').L0003                                00147000
         AIF   ('&MODI_HEADER' NE 'YES').L0002                          00148000
.L0003   ANOP                                                           00149000
*                                                                       00150000
* ********************************************************************  00151000
* *                                                                  *  00152000
* *  Tell CBGEN to generate lengths for x named x_LLL.  This         *  00153000
* *  prevents a conflict with the declared names.  The default       *  00154000
* *  is x_LEN (e.g. MODI_1_LEN).                                     *  00155000
* *                                                                     00156000
* ********************************************************************  00157000
*                                                                       00158000
*                                                                       00159000
         AIF   ('&DSECT' EQ 'YES').L0004                                00160000
MODI_HEADER DS 0F                                                       00161000
         AGO   .L0005                                                   00162000
.L0004   ANOP                                                           00163000
MODI_HEADER DSECT                                                       00164000
.L0005   ANOP                                                           00165000
MODI_EYECATCHER DS CL4   = 'MODI'                                       00166000
MODI_USERDATA DS CL16    Copy of CSVINFO USERDATA                       00167000
MODI_ABDPL DS  A         Address of ABDUMP parmlist                     00168000
MODI_SECTIONS DS CL52    Addresses and lengths of sections              00169000
         ORG   MODI_SECTIONS                                            00170000
MODI_1_PTR DS  A         Address of the 1st section                     00171000
MODI_1_LEN DS  F         Length of the 1st section                      00172000
MODI_2_PTR DS  A         Address of the 2nd section                     00173000
MODI_2_LEN DS  F         Length of the 2nd section                      00174000
MODI_3_PTR DS  A         Address of the 3rd section                     00175000
MODI_3_LEN DS  F         Length of the 3rd section                      00176000
MODI_4_PTR DS  A         Address of the 4th section                     00177000
MODI_4_LEN DS  F         Length of the 4th section                      00178000
MODI_5_PTR DS  A         Address of the 5th section                     00179000
MODI_5_LEN DS  F         Length of the 5th section                      00180000
MODI_FLAGS DS  BL4       Flags                                          00181000
         ORG   MODI_FLAGS                                               00182000
MODI_FLAGS_BYTE0 DS B                                                   00183000
*  Bit definitions:                                                     00184000
MODI_NO_MODI_2 EQU X'80' The MODI_2 data could not be accessed from    *00185000
                         the dump                                       00186000
MODI_NO_MODI_3 EQU X'40' The MODI_3 data could not be accessed from    *00187000
                         the dump                                       00188000
MODI_NO_MODI_4 EQU X'20' The MODI_4 data could not be accessed from    *00189000
                         the dump                                       00190000
MODI_NO_MODI_5 EQU X'10' The MODI_5 data could not be accessed from    *00191000
                         the dump                                       00192000
MODI_NO_MODI_EPNAME EQU X'08' The MODI_EPNAME field could not be       *00193000
                         accessed from the dump                         00194000
MODI_NO_MODI64_1 EQU X'04' The MODI64_1 data could not be accessed      00195000
MODI_NO_MODI_DYNLPAPATHNAME EQU X'02' The MODI_DynlpaPathnameLen and   *00196000
                         MODI_DynlpaPathnameAddr fields could not be   *00197000
                         determined from the dump                       00198000
         DS    BL3       Reserved                                       00199000
MODI64_1_PTR DS A        Address of the 1st 64-bit section              00200000
MODI64_1_LEN DS F        Length of the 1st 64-bit section               00201000
MODI_HEADER_LLL EQU *-MODI_HEADER                                       00202000
.L0002   ANOP                                                           00203000
         AIF   ('&MODI_1' EQ 'NO').L0006                                00204000
         AIF   ('&DSECT' EQ 'YES').L0007                                00205000
         AIF   ('&MODI_1' NE 'YES').L0006                               00206000
.L0007   ANOP                                                           00207000
*                                                                       00208000
*      ***************************************************************  00209000
*      *                                                             *  00210000
*      * Module entry point and attributes                           *  00211000
*      *                                                             *  00212000
*      ***************************************************************  00213000
*                                                                       00214000
*                                                                       00215000
         AIF   ('&DSECT' EQ 'YES').L0008                                00216000
MODI_1   DS    0F                                                       00217000
         AGO   .L0009                                                   00218000
.L0008   ANOP                                                           00219000
MODI_1   DSECT                                                          00220000
.L0009   ANOP                                                           00221000
MODI_RB@ DS    A         If the module is reentrant, this field        *00222000
                         contains the address of the last RB that      *00223000
                         controlled the module. If the module is       *00224000
                         serially reusable, this field contains the    *00225000
                         address of the RB at the top of the Waiting   *00226000
                         queue. If the module was requested only       *00227000
                         through LOAD macro instructions, contains     *00228000
                         ZERO.                                          00229000
MODI_8_BYTE_NAME DS CL8  8 byte module name. This field does not       *00230000
                         contain the module name if MODI_PATHNAME is   *00231000
                         set on. In that case, this field contains an  *00232000
                         EBCDIC value indicating this is a pathname    *00233000
                         and the pathname is contained in MODI_EPNAME.  00234000
MODI_ENT@ DS   A         Module's relocated entry point address. If    *00235000
                         the entry point address does not fit in 31    *00236000
                         bits, a value of X'7FFFFBAD' is provided. The *00237000
                         MODI_ENT field has the full information.       00238000
         ORG   MODI_ENT@                                                00239000
MODI_ENT@BYTES0TO2 DS CL3 First bytes of ENT@                           00240000
*  Bit definitions:                                                     00241000
MODI_AMODE EQU X'80'     Routine runs in 31 bit mode                    00242000
MODI_AMODE31 EQU X'80'   Routine runs in 31 bit mode                    00243000
MODI_ENT@BYTE3 DS CL1    Last byte of ENT@                              00244000
*  Bit definitions:                                                     00245000
MODI_AMODE64 EQU X'01'   Routine runs in 64 bit mode                    00246000
         ORG   MODI_ENT@+4                                              00247000
         DS    CL4       Reserved                                       00248000
MODI_USE_CT DS AL2       Value contains the TOTAL MODULE USE COUNT      00249000
MODI_ATTR1 DS  CL1       First byte of attributes                       00250000
*  Bit definitions:                                                     00251000
MODI_EOM EQU   X'80'     ON=Delete module at memory termination         00252000
MODI_IDENTIFY EQU X'40'  This entry point was created via IDENTIFY      00253000
MODI_RACDTY EQU X'20'    ON=Module was loaded by 'dirty' task           00254000
MODI_PLPA EQU  X'08'     ON=The module resides in PLPA                  00255000
MODI_GLOBAL EQU X'04'    ON = Module is loaded to GLOBAL                00256000
MODI_CONTAM EQU X'02'    ON = Module is contaminated. A module is      *00257000
                         considered contaminated if it is from an APF  *00258000
                         authorized library, but was fetched into      *00259000
                         subpool 251 (it is not reentrant) by a NON    *00260000
                         authorized caller.                             00261000
MODI_USED_BY_RACF EQU X'01' For use by external security manager (for  *00262000
                         RACF: user has execute authority to module)    00263000
MODI_SP  DS    CL1       Module subpool ID                              00264000
MODI_ATTR2 DS  CL1       Attribute flags                                00265000
*  Bit definitions:                                                     00266000
MODI_NIP EQU   X'80'     This module was loaded by NIP or is a         *00267000
                         FIXED/MODIFIED LPA module                      00268000
MODI_NOT_IN_CORE EQU X'40' Module is in process of being LOADed         00269000
MODI_REENT EQU X'20'     Module is REENTRABLE                           00270000
MODI_SER_REUS EQU X'10'  Module is SERIALLY REUSABLE                    00271000
MODI_NON_FUNC EQU X'08'  Module is NOT reentrant, and NOT reusable,    *00272000
                         and has been used once                         00273000
MODI_MINOR EQU X'04'     This is a MINOR entry point                    00274000
MODI_SP251 EQU X'02'     This module was loaded into subpool 251        00275000
MODI_NOT_LOADABLE_ONLY EQU X'01' Module is NOT LOADABLE-ONLY            00276000
MODI_ATTR3 DS  CL1       Third attribute field                          00277000
*  Bit definitions:                                                     00278000
MODI_SP_ZERO EQU X'80'   Module is in SUBPOOL ZERO                      00279000
MODI_ANY_MODE EQU X'08'  Routine runs in ANY mode                       00280000
MODI_OVERLAY EQU X'04'   Module is in OVERLAY FORMAT                    00281000
MODI_AUTH_LIB EQU X'02'  This module came from an APF authorized       *00282000
                         library (a library listed in the APF table)    00283000
MODI_AUTH_MOD EQU X'01'  This module is an authorized module           *00284000
                         (linkedited with AC=1)                         00285000
MODI_ATTR4 DS  CL1       Fourth attribute field                         00286000
*  Bit definitions:                                                     00287000
MODI_PATHNAME EQU X'80'  This module has an OpenMVS path name. The     *00288000
                         MODI_8_BYTE_NAME field contains an EBCDIC     *00289000
                         value indicating this is a pathname, and      *00290000
                         MODI_EPNAME contains the full path name.       00291000
MODI_LONGPARMOK EQU X'40' Longparm is accepted                          00292000
MODI_SPLIT EQU X'20'     This bit is never, and has never been, set     00293000
MODI_RTLS EQU  X'08'     This bit is no longer ever set                 00294000
MODI_DLPA EQU  X'04'     Dynamic LPA                                    00295000
MODI_PROTP EQU X'02'     Only whole pages are page-protected, as       *00296000
                         opposed to the entire module. Or module added *00297000
                         by CSVDYLPA BYADDR=YES so page protection     *00298000
                         state is not known. Only on for dynamic LPA   *00299000
                         CDE.                                           00300000
         DS    CL1       RESERVED                                       00301000
MODI_XATTR1 DS CL8       Extended attributes                            00302000
         ORG   MODI_XATTR1                                              00303000
MODI_XATTR1_BYTE0 DS CL1                                                00304000
MODI_XATTR1_BYTE1 DS CL1                                                00305000
MODI_XATTR1_BYTE2 DS CL1                                                00306000
*  Bit definitions:                                                     00307000
MODI_XATTR1_BASICPROGRAM EQU X'80'                                      00308000
MODI_XATTR1_MAINPROGRAM EQU X'40'                                       00309000
MODI_XATTR1_DIRTYFORMAIN EQU X'20'                                      00310000
MODI_XATTR1_BYTE3 DS CL1                                                00311000
MODI_XATTR1_BYTE4 DS CL1                                                00312000
MODI_XATTR1_BYTE5 DS CL1                                                00313000
MODI_XATTR1_BYTE6 DS CL1                                                00314000
MODI_XATTR1_BYTE7 DS CL1                                                00315000
MODI_DIAG DS   A         Not part of the intended interface             00316000
MODI_ENT@64 DS CL8       Module's relocated 64-bit EPA                  00317000
         ORG   MODI_ENT@64                                              00318000
MODI_ENT@64BYTES0TO3 DS CL4 First 4 bytes                               00319000
MODI_ENT@64BYTES4TO7 DS CL4 Next 4 bytes                                00320000
         ORG   MODI_ENT@64BYTES4TO7                                     00321000
MODI_ENT@64BYTE4 DS CL1  Byte 4                                         00322000
*  Bit definitions:                                                     00323000
MODI_ENT@64_AMODE31 EQU X'80' When this is on and MODI_ENT@64_AMODE64  *00324000
                         is off, the routine is AMODE 64. When this is *00325000
                         off and MODI_ENT@64_AMODE64 is off, the       *00326000
                         routine is AMODE 24.                           00327000
MODI_ENT@64BYTES5TO6 DS CL2 Bytes 5-6                                   00328000
MODI_ENT@64BYTE7 DS CL1  Byte 7                                         00329000
*  Bit definitions:                                                     00330000
MODI_ENT@64_AMODE64 EQU X'01' When this is on, the the routine is      *00331000
                         AMODE 64.                                      00332000
         ORG   MODI_ENT@64+8                                            00333000
MODI_DSKEY DS  CL8       The data set key. This is used internally to  *00334000
                         help to identify uniquely the data set from   *00335000
                         which the module was fetched. The format of   *00336000
                         the key is not part of the programming        *00337000
                         interface. A value of 0 indicates that the    *00338000
                         data set key was not available.                00339000
MODI_PATHTOKEN DS CL12   The path token. It is valid only when         *00340000
                         MODI_PATHNAME is on. This field is for IBM    *00341000
                         use only.                                      00342000
         DS    CL2                                                      00343000
MODI_DYNLPAPATHNAMELEN DS H Length of path name for a dynamic LPA      *00344000
                         module. Valid only when not 0                  00345000
MODI_DYNLPAPATHNAMEADDR DS A Address of path name for a dynamic LPA    *00346000
                         module. Valid only when field                 *00347000
                         MODI_DynlpaPathnameLen is not 0                00348000
MODI_1_LLL EQU *-MODI_1                                                 00349000
.L0006   ANOP                                                           00350000
         AIF   ('&MODI_2' EQ 'NO').L000A                                00351000
         AIF   ('&DSECT' EQ 'YES').L000B                                00352000
         AIF   ('&MODI_2' NE 'YES').L000A                               00353000
.L000B   ANOP                                                           00354000
*                                                                       00355000
*      ***************************************************************  00356000
*      *                                                             *  00357000
*      * Module length and load address for each segment. When the   *  00358000
*      * number of relocation factors is greater than one, you must  *  00359000
*      * use the MODI_SEGLEN and MODI_SEGADDR mappings to reference  *  00360000
*      * the lengths and addresses. In all cases, the format of the  *  00361000
*      * area is: - The number of relocation factors - All the       *  00362000
*      * lengths (one for each relocation factor) - All the addresses*  00363000
*      * (one for each relocation factor)                            *  00364000
*      *                                                             *  00365000
*      ***************************************************************  00366000
*                                                                       00367000
*                                                                       00368000
         AIF   ('&DSECT' EQ 'YES').L000C                                00369000
MODI_2   DS    0F                                                       00370000
         AGO   .L000D                                                   00371000
.L000C   ANOP                                                           00372000
MODI_2   DSECT                                                          00373000
.L000D   ANOP                                                           00374000
MODI_RELOC_FAC_NUM DS F  Number of relocation factors                   00375000
MODI_MOD_LEN DS F        Length of module                               00376000
MODI_LOAD@ DS  A         Address of where module was loaded. If the    *00377000
                         load point address does not fit in 31 bits, a *00378000
                         value of X'7FFFFBAD' is provided. The         *00379000
                         MODI64_1 area has the full information.        00380000
MODI_2_LLL EQU *-MODI_2                                                 00381000
.L000A   ANOP                                                           00382000
         AIF   ('&MODI_SEGLEN' EQ 'NO').L000E                           00383000
         AIF   ('&DSECT' EQ 'YES').L000F                                00384000
         AIF   ('&MODI_SEGLEN' NE 'YES').L000E                          00385000
MODI_SEGLEN DS 0F        The first length is located at offset 4 from  *00386000
                         the beginning of the MODI_2 area               00387000
         AGO   .L0010                                                   00388000
.L000F   ANOP                                                           00389000
MODI_SEGLEN DSECT        The first length is located at offset 4 from  *00390000
                         the beginning of the MODI_2 area               00391000
.L0010   ANOP                                                           00392000
MODI_SEGMENT_LEN DS F    Array of module segment lengths. If the       *00393000
                         corresponding address does not fit in 31      *00394000
                         bits, a value of 1 is provided. The MODI64_1  *00395000
                         area has the full information.                 00396000
MODI_SEGLEN_LLL EQU *-MODI_SEGLEN                                       00397000
.L000E   ANOP                                                           00398000
         AIF   ('&MODI_SEGADDR' EQ 'NO').L0011                          00399000
         AIF   ('&DSECT' EQ 'YES').L0012                                00400000
         AIF   ('&MODI_SEGADDR' NE 'YES').L0011                         00401000
MODI_SEGADDR DS 0F       The first address is located at offset 4 plus *00402000
                         the length of the area for the lengths (which *00403000
                         is 4 * number of relocation factors)           00404000
         AGO   .L0013                                                   00405000
.L0012   ANOP                                                           00406000
MODI_SEGADDR DSECT       The first address is located at offset 4 plus *00407000
                         the length of the area for the lengths (which *00408000
                         is 4 * number of relocation factors)           00409000
.L0013   ANOP                                                           00410000
MODI_SEGMENT_ADDR DS A   Array of module addresses. If the address     *00411000
                         does not fit in 31 bits, a value of           *00412000
                         X'7FFFFBAD' is provided. The MODI64_1 area    *00413000
                         has the full information.                      00414000
MODI_SEGADDR_LLL EQU *-MODI_SEGADDR                                     00415000
.L0011   ANOP                                                           00416000
         AIF   ('&MODI64_1' EQ 'NO').L0014                              00417000
         AIF   ('&DSECT' EQ 'YES').L0015                                00418000
         AIF   ('&MODI64_1' NE 'YES').L0014                             00419000
.L0015   ANOP                                                           00420000
*                                                                       00421000
*      ***************************************************************  00422000
*      *                                                             *  00423000
*      * The format in all cases is - The number of relocation       *  00424000
*      * factors - The entries - Each entry consists of the address  *  00425000
*      * followed by the length                                      *  00426000
*      *                                                             *  00427000
*      ***************************************************************  00428000
*                                                                       00429000
*                                                                       00430000
         AIF   ('&DSECT' EQ 'YES').L0016                                00431000
MODI64_1 DS    0F                                                       00432000
         AGO   .L0017                                                   00433000
.L0016   ANOP                                                           00434000
MODI64_1 DSECT                                                          00435000
.L0017   ANOP                                                           00436000
MODI64_1_HEADER DS CL8                                                  00437000
         ORG   MODI64_1_HEADER                                          00438000
MODI64_RELOC_FAC_NUM DS F Number of relocation factors                  00439000
MODI64_RSVD DS CL4       Reserved                                       00440000
MODI64_XTLST_ENTRY DS CL16 Extent list entry                            00441000
         ORG   MODI64_XTLST_ENTRY                                       00442000
MODI64_XTLST_SEGMENT_ADDR DS CL8                                        00443000
         ORG   MODI64_XTLST_SEGMENT_ADDR                                00444000
MODI64_XTLST_SEGMENT_ADDR_H DS CL4                                      00445000
MODI64_XTLST_SEGMENT_ADDR_L DS CL4                                      00446000
MODI64_XTLST_SEGMENT_LEN DS CL8                                         00447000
         ORG   MODI64_XTLST_SEGMENT_LEN                                 00448000
MODI64_XTLST_SEGMENT_LEN_H DS CL4                                       00449000
MODI64_XTLST_SEGMENT_LEN_L DS CL4                                       00450000
MODI64_1_LLL EQU *-MODI64_1                                             00451000
.L0014   ANOP                                                           00452000
         AIF   ('&MODI_3' EQ 'NO').L0018                                00453000
         AIF   ('&DSECT' EQ 'YES').L0019                                00454000
         AIF   ('&MODI_3' NE 'YES').L0018                               00455000
.L0019   ANOP                                                           00456000
*                                                                       00457000
*      ***************************************************************  00458000
*      *                                                             *  00459000
*      * Module name and auxiliary information                       *  00460000
*      *                                                             *  00461000
*      ***************************************************************  00462000
*                                                                       00463000
*                                                                       00464000
         AIF   ('&DSECT' EQ 'YES').L001A                                00465000
MODI_3   DS    0F                                                       00466000
         AGO   .L001B                                                   00467000
.L001A   ANOP                                                           00468000
MODI_3   DSECT                                                          00469000
.L001B   ANOP                                                           00470000
MODI_NAME_LEN DS H       Length of the name                             00471000
MODI_ASID DS   BL2       ASID of address space in which this module    *00472000
                         was originally loaded. In an OpenMVS forked   *00473000
                         environment, this may not equal the current   *00474000
                         child address space ASID.                      00475000
MODI_PROVIDER_ID DS F    Provider Identifier                            00476000
MODI_PROVIDER_DATA DS CL16 Provider Data                                00477000
MODI_EPTOKEN DS CL8      Entry point token                              00478000
MODI_EPNAME DS 0C        Entry point name. The length of the name is   *00479000
                         in MODI_NAME_LEN. For OpenMVS modules this    *00480000
                         field contains the full OpenMVS pathname.      00481000
MODI_3_LLL EQU *-MODI_3                                                 00482000
.L0018   ANOP                                                           00483000
         AIF   ('&MODI_4' EQ 'NO').L001C                                00484000
         AIF   ('&DSECT' EQ 'YES').L001D                                00485000
         AIF   ('&MODI_4' NE 'YES').L001C                               00486000
.L001D   ANOP                                                           00487000
*                                                                       00488000
*      ***************************************************************  00489000
*      *                                                             *  00490000
*      * LOAD information                                            *  00491000
*      *                                                             *  00492000
*      ***************************************************************  00493000
*                                                                       00494000
*                                                                       00495000
         AIF   ('&DSECT' EQ 'YES').L001E                                00496000
MODI_4   DS    0H                                                       00497000
         AGO   .L001F                                                   00498000
.L001E   ANOP                                                           00499000
MODI_4   DSECT                                                          00500000
.L001F   ANOP                                                           00501000
MODI_LOAD_COUNT DS H     The total number of requests for the module   *00502000
                         via the LOAD macro                             00503000
MODI_LOAD_SYSCOUNT DS H  The number of system requests for the module  *00504000
                         via the LOAD macro                             00505000
MODI_4_LLL EQU *-MODI_4                                                 00506000
.L001C   ANOP                                                           00507000
         AIF   ('&MODI_5' EQ 'NO').L0020                                00508000
         AIF   ('&DSECT' EQ 'YES').L0021                                00509000
         AIF   ('&MODI_5' NE 'YES').L0020                               00510000
.L0021   ANOP                                                           00511000
*                                                                       00512000
*      ***************************************************************  00513000
*      *                                                             *  00514000
*      * MAJOR name - this section contains the Major name when then *  00515000
*      * current entry point is a minor (MODI_MINOR = 1)             *  00516000
*      *                                                             *  00517000
*      ***************************************************************  00518000
*                                                                       00519000
*                                                                       00520000
         AIF   ('&DSECT' EQ 'YES').L0022                                00521000
MODI_5   DS    0X                                                       00522000
         AGO   .L0023                                                   00523000
.L0022   ANOP                                                           00524000
MODI_5   DSECT                                                          00525000
.L0023   ANOP                                                           00526000
MODI_8_BYTE_MAJOR_NAME DS CL8 The 8 byte major name for a minor entry  *00527000
                         point                                          00528000
*                                                                       00529000
*    *****************************************************************  00530000
*    *                                                               *  00531000
*    * Eyecatcher for MODI_HEADER                                    *  00532000
*    *                                                               *  00533000
*    *****************************************************************  00534000
*                                                                       00535000
*                                                                       00536000
MODI_TEXT EQU  C'MODI'   Eyecatcher                                     00537000
*                                                                       00538000
*    *****************************************************************  00539000
*    *                                                               *  00540000
*    * Return codes for service module                               *  00541000
*    *                                                               *  00542000
*    *****************************************************************  00543000
*                                                                       00544000
*                                                                       00545000
MODI_OK  EQU   0         Module processing occurred normally            00546000
MODI_NOINFO EQU 4        There was no module information to return      00547000
MODI_CALLER EQU 8        Processing terminated with a nonzero return   *00548000
                         code from the caller's subroutine              00549000
MODI_LOCKS EQU 12        Locks needed to process the CSVINFO request   *00550000
                         could not be obtained                          00551000
MODI_INVALID_INPUT EQU 16 Processing terminated unexpectedly when      *00552000
                         invalid caller input was encountered           00553000
MODI_NOTAVAIL EQU 20     The CSVINFO service routine is not available   00554000
MODI_NOTRETRIEVED EQU 24 Processing terminated because requested       *00555000
                         information could not be retrieved from the   *00556000
                         dump                                           00557000
MODI_UNEXPECTED EQU 28   Processing terminated unexpectedly             00558000
MODI_BELOW430 EQU 32     A system at a level lower than 4.3.0 was      *00559000
                         trying to use the CSVINFO service              00560000
MODI_BAD_PARMLIST EQU 36 The CSVINFO parameter list is not valid with  *00561000
                         the level of CSVINFO service on the system     00562000
MODI_LOOP_LIMIT EQU 40   The CSVINFO service has exceeded a large      *00563000
                         threshold value for the number of times the   *00564000
                         MIPR is invoked on a single call.              00565000
MODI_INELIGIBLE_RB EQU 44 The RB supplied via RBADDR as input for      *00566000
                         FUNC(RB) was not a PRB or SVRB.                00567000
MODI_MIPR_FAILED EQU 48  The supplied MIPR routine failed.              00568000
MODI_RB_LOOP EQU 52      The RB supplied via RBADDR as input for       *00569000
                         FUNC(RB) has resulted in the CSVINFO service  *00570000
                         exceeding the expected number of iterations   *00571000
                         through an RB chain.                           00572000
MODI_5_LLL EQU *-MODI_5                                                 00573000
.L0020   ANOP                                                           00574000
         AIF   ('&ZCBPRINT' EQ 'NO').P3                                 00575000
         AIF   ('&LIST' EQ 'YES').P4                                    00576000
.P3      ANOP                                                           00577000
         POP   PRINT                                                    00578000
.P4      ANOP                                                           00579000
.P_EXIT  ANOP                                                           00580000
         MEND                                                           00581000
**/ CSVMODI_2:;                                                         00582000
* %CSVMODI_INCLUDED = 'YES';                                            00583000
* %DCL ZCBPRINT CHAR EXT;                                               00584000
* %DEACTIVATE ZCBPRINT;                                                 00585000
* %DCL CSVMODI_LIST CHAR EXT;                                           00586000
* %DEACTIVATE CSVMODI_LIST;                                             00587000
* %IF CSVMODI_LIST = 'NO' !                                             00588000
*    ZCBPRINT = 'NO' %THEN                                              00589000
* %DO;                                                                  00590000
*   @LIST PUSH NOECHO;                                                  00591000
*   @LIST NOASSEMBLE NOECHO;                                            00592000
*   @LIST OFF C NOECHO;                                                 00593000
* %END;                                                                 00594000
*/* Start of PL/X Source                                             */ 00595000
*/********************************************************************/ 00596000
*/*                                                                  */ 00597000
*/*  Tell CBGEN to generate lengths for x named x_LLL.  This         */ 00598000
*/*  prevents a conflict with the declared names.  The default       */ 00599000
*/*  is x_LEN (e.g. MODI_1_LEN).                                     */ 00600000
*/*                                                              @P1A*/ 00601000
*/********************************************************************/ 00602000
*@LOGIC;                                                                00603000
*#PRAGMA TOOL=CBGEN.                                                    00604000
*#LENGTHSUFFIX._LLL                                                     00605000
*#USEORG.                                                               00606000
*#LINE.]?SYSSTATE ARCHLVL(2);                                           00607000
*#LINE.%INCLUDE SYSLIB(CSVMODI);                                        00608000
*#EPRAGMA.                                                              00609000
*@ENDLOGIC;                                                             00610000
* ?ASAXMAC SetEsameInfo;                                                00611000
*/********************************************************************/ 00612000
*/*                                                                  */ 00613000
*/*Contents Module Information                                       */ 00614000
*/*                                                                  */ 00615000
*/********************************************************************/ 00616000
*                                                                       00617000
*   DECLARE                                                             00618000
*                                                                       00619000
*     /***************************************************************/ 00620000
*     /*                                                             */ 00621000
*     /* Pointers and lengths of other sections Note: any of the     */ 00622000
*     /* following may be 0.                                         */ 00623000
*     /*                                                             */ 00624000
*     /***************************************************************/ 00625000
*                                                                       00626000
*     1    MODI_HEADER BASED,                                           00627000
*      2    MODI_EYECATCHER CHAR(4), /* = 'MODI'                     */ 00628000
*      2    MODI_USERDATA CHAR(16), /* Copy of CSVINFO USERDATA      */ 00629000
*      2    MODI_ABDPL PTR(31),     /* Address of ABDUMP parmlist    */ 00630000
*      2    MODI_SECTIONS,          /* Addresses and lengths of         00631000
*                                      sections                      */ 00632000
*       3    MODI_1_PTR PTR(31),    /* Address of the 1st section    */ 00633000
*       3    MODI_1_LEN FIXED(31),  /* Length of the 1st section     */ 00634000
*       3    MODI_2_PTR PTR(31),    /* Address of the 2nd section    */ 00635000
*       3    MODI_2_LEN FIXED(31),  /* Length of the 2nd section     */ 00636000
*       3    MODI_3_PTR PTR(31),    /* Address of the 3rd section    */ 00637000
*       3    MODI_3_LEN FIXED(31),  /* Length of the 3rd section     */ 00638000
*       3    MODI_4_PTR PTR(31),    /* Address of the 4th section    */ 00639000
*       3    MODI_4_LEN FIXED(31),  /* Length of the 4th section     */ 00640000
*       3    MODI_5_PTR PTR(31),    /* Address of the 5th section    */ 00641000
*       3    MODI_5_LEN FIXED(31),  /* Length of the 5th section     */ 00642000
*       3    MODI_FLAGS BIT(32),    /* Flags                     @L2A*/ 00643000
*        5    MODI_FLAGS_Byte0 BIt(8),                                  00644000
*          7  MODI_NO_MODI_2 BIT(1), /* The MODI_2 data could not be    00645000
*                                      accessed from the dump    @L2A*/ 00646000
*          7  MODI_NO_MODI_3 BIT(1), /* The MODI_3 data could not be    00647000
*                                      accessed from the dump    @L2A*/ 00648000
*          7  MODI_NO_MODI_4 BIT(1), /* The MODI_4 data could not be    00649000
*                                      accessed from the dump    @L2A*/ 00650000
*          7  MODI_NO_MODI_5 BIT(1), /* The MODI_5 data could not be    00651000
*                                      accessed from the dump    @L2A*/ 00652000
*          7  MODI_NO_MODI_EPNAME BIT(1), /* The MODI_EPNAME field      00653000
*                                      could not be accessed from the   00654000
*                                      dump                      @L2A*/ 00655000
*          7  MODI_NO_MODI64_1 BIT(1),  /* The MODI64_1 data could not  00656000
*                                      be accessed               @L5A*/ 00657000
*          7  MODI_NO_MODI_DynlpaPathname BIT(1), /*                    00658000
*                                      The MODI_DynlpaPathnameLen and   00659000
*                                      MODI_DynlpaPathnameAddr fields   00660000
*                                      could not be determined from     00661000
*                                      the dump                  @L9C*/ 00662000
*          7  * BIT(1),             /* Reserved                  @L9C*/ 00663000
*        5    * BIT(24),            /* Reserved                  @L2A*/ 00664000
*       3    MODI64_1_PTR PTR(31),  /* Address of the 1st 64-bit        00665000
*                                                        section @L5A*/ 00666000
*       3    MODI64_1_LEN FIXED(31), /* Length of the 1st 64-bit        00667000
*                                                        section @L5A*/ 00668000
*                                                                       00669000
*     /***************************************************************/ 00670000
*     /*                                                             */ 00671000
*     /* Module entry point and attributes                           */ 00672000
*     /*                                                             */ 00673000
*     /***************************************************************/ 00674000
*                                                                       00675000
*     1    MODI_1   BASED(MODI_1_PTR), /*                            */ 00676000
*      2    MODI_RB@ PTR(31),       /* If the module is reentrant,      00677000
*                                      this field contains the          00678000
*                                      address of the last RB that      00679000
*                                      controlled the module. If the    00680000
*                                      module is serially reusable,     00681000
*                                      this field contains the          00682000
*                                      address of the RB at the top     00683000
*                                      of the Waiting queue. If the     00684000
*                                      module was requested only        00685000
*                                      through LOAD macro               00686000
*                                      instructions, contains ZERO.  */ 00687000
*      2    MODI_8_BYTE_NAME CHAR(8), /* 8 byte module name. This       00688000
*                                      field does not contain the       00689000
*                                      module name if MODI_PATHNAME     00690000
*                                      is set on. In that case, this    00691000
*                                      field contains an EBCDIC value   00692000
*                                      indicating this is a pathname    00693000
*                                      and the pathname is contained    00694000
*                                      in MODI_EPNAME.               */ 00695000
*      2    MODI_ENT@ PTR(31),      /* Module's relocated entry point   00696000
*                                      address. If the entry point      00697000
*                                      address does not fit in 31 bits, 00698000
*                                      a value of X'7FFFFBAD' is        00699000
*                                      provided. The MODI_ENT@64 field  00700000
*                                      has the full information. @LBC*/ 00701000
*       3    MODI_ENT@BYTES0TO2 CHAR(3), /* First bytes of ENT@  @L4A*/ 00702000
*         4  MODI_AMODE BIT(1),     /* Routine runs in 31 bit mode   */ 00703000
*           5 MODI_AMODE31 BIT(1),  /* Routine runs in 31 bit mode      00704000
*                                                                @L4A*/ 00705000
*       3    MODI_ENT@BYTE3 CHAR(1),  /* Last byte of ENT@       @L4A*/ 00706000
*         4  * BIT(7),              /*                               */ 00707000
*         4  MODI_AMODE64 BIT(1),   /* Routine runs in 64 bit mode      00708000
*                                                                @L4A*/ 00709000
*      2    *        CHAR(4),       /* Reserved                      */ 00710000
*      2    MODI_USE_CT PTR(15),    /* Value contains the TOTAL         00711000
*                                      MODULE USE COUNT              */ 00712000
*      2    MODI_ATTR1 CHAR(1),     /* First byte of attributes      */ 00713000
*       3    MODI_EOM BIT(1),       /* ON=Delete module at memory       00714000
*                                      termination                   */ 00715000
*       3    MODI_IDENTIFY BIT(1),  /* This entry point was created     00716000
*                                      via IDENTIFY                  */ 00717000
*       3    MODI_RACDTY BIT(1),    /* ON=Module was loaded by          00718000
*                                      'dirty' task                  */ 00719000
*       3    *        BIT(1),       /* Reserved                      */ 00720000
*       3    MODI_PLPA BIT(1),      /* ON=The module resides in PLPA */ 00721000
*       3    MODI_GLOBAL BIT(1),    /* ON = Module is loaded to         00722000
*                                      GLOBAL                        */ 00723000
*       3    MODI_CONTAM BIT(1),    /* ON = Module is contaminated. A   00724000
*                                      module is considered             00725000
*                                      contaminated if it is from an    00726000
*                                      APF authorized library, but      00727000
*                                      was fetched into subpool 251     00728000
*                                      (it is not reentrant) by a NON   00729000
*                                      authorized caller.            */ 00730000
*       3    MODI_USED_BY_RACF BIT(1), /* For use by external security  00731000
*                                      manager (for RACF: user has      00732000
*                                      execute authority to module)     00733000
*                                                                @L3A*/ 00734000
*      2    MODI_SP  CHAR(1),       /* Module subpool ID             */ 00735000
*      2    MODI_ATTR2 CHAR(1),     /* Attribute flags               */ 00736000
*       3    MODI_NIP BIT(1),       /* This module was loaded by NIP    00737000
*                                      or is a FIXED/MODIFIED LPA       00738000
*                                      module                        */ 00739000
*       3    MODI_NOT_IN_CORE BIT(1), /* Module is in process of        00740000
*                                      being LOADed                  */ 00741000
*       3    MODI_REENT BIT(1),     /* Module is REENTRABLE          */ 00742000
*       3    MODI_SER_REUS BIT(1),  /* Module is SERIALLY REUSABLE   */ 00743000
*       3    MODI_NON_FUNC BIT(1),  /* Module is NOT reentrant, and     00744000
*                                      NOT reusable, and has been       00745000
*                                      used once                     */ 00746000
*       3    MODI_MINOR BIT(1),     /* This is a MINOR entry point   */ 00747000
*       3    MODI_SP251 BIT(1),     /* This module was loaded into      00748000
*                                      subpool 251                   */ 00749000
*       3    MODI_NOT_LOADABLE_ONLY BIT(1), /* Module is NOT            00750000
*                                      LOADABLE-ONLY                 */ 00751000
*      2    MODI_ATTR3 CHAR(1),     /* Third attribute field         */ 00752000
*       3    MODI_SP_ZERO BIT(1),   /* Module is in SUBPOOL ZERO     */ 00753000
*       3    *        BIT(1),       /* Reserved                      */ 00754000
*       3    *        BIT(1),       /* Reserved                      */ 00755000
*       3    *        BIT(1),       /* Reserved                      */ 00756000
*       3    MODI_ANY_MODE BIT(1),  /* Routine runs in ANY mode      */ 00757000
*       3    MODI_OVERLAY BIT(1),   /* Module is in OVERLAY FORMAT   */ 00758000
*       3    MODI_AUTH_LIB BIT(1),  /* This module came from an APF     00759000
*                                      authorized library (a library    00760000
*                                      listed in the APF table)      */ 00761000
*       3    MODI_AUTH_MOD BIT(1),  /* This module is an authorized     00762000
*                                      module (linkedited with AC=1) */ 00763000
*      2    MODI_ATTR4 CHAR(1),     /* Fourth attribute field        */ 00764000
*       3    MODI_PATHNAME BIT(1),  /* This module has an OpenMVS       00765000
*                                      path name. The                   00766000
*                                      MODI_8_BYTE_NAME field           00767000
*                                      contains an EBCDIC value         00768000
*                                      indicating this is a pathname,   00769000
*                                      and MODI_EPNAME contains the     00770000
*                                      full path name.               */ 00771000
*       3    MODI_LongParmOK BIT(1), /* Longparm is accepted     @LAA*/ 00772000
*       3    MODI_SPLIT BIT(1),     /* This bit is never, and has       00773000
*                                      never been, set               */ 00774000
*       3    * BIT(1),              /* RESERVED                      */ 00775000
*       3    MODI_RTLS BIT(1),      /* This bit is no longer ever set   00776000
*                                                                    */ 00777000
*       3    MODI_DLPA BIT(1),      /* Dynamic LPA                   */ 00778000
*       3    MODI_PROTP BIT(1),     /* Only whole pages are             00779000
*                     page-protected, as opposed to the entire module.  00780000
*                     Or module added by CSVDYLPA BYADDR=YES so page    00781000
*                     protection state is not known. Only on for        00782000
*                     dynamic LPA CDE.                               */ 00783000
*       3    * BIT(1),              /* RESERVED                      */ 00784000
*      2    *        CHAR(1),       /* RESERVED                      */ 00785000
*      2    MODI_XATTR1 CHAR(8),    /* Extended attributes       @L5A*/ 00786000
*        3  MODI_XATTR1_BYTE0 CHAR(1),  /*                       @L5A*/ 00787000
*        3  MODI_XATTR1_BYTE1 CHAR(1),  /*                       @L5A*/ 00788000
*        3  MODI_XATTR1_BYTE2 CHAR(1),  /*                       @L5A*/ 00789000
*          5 MODI_XATTR1_BasicProgram BIT(1),                 /* @L6A*/ 00790000
*          5 MODI_XATTR1_MainProgram BIT(1),                  /* @L6A*/ 00791000
*          5 MODI_XATTR1_DirtyForMain BIT(1),                 /* @02A*/ 00792000
*        3  MODI_XATTR1_BYTE3 CHAR(1),  /*                       @L5A*/ 00793000
*        3  MODI_XATTR1_BYTE4 CHAR(1),  /*                       @L5A*/ 00794000
*        3  MODI_XATTR1_BYTE5 CHAR(1),  /*                       @L5A*/ 00795000
*        3  MODI_XATTR1_BYTE6 CHAR(1),  /*                       @L5A*/ 00796000
*        3  MODI_XATTR1_BYTE7 CHAR(1),  /*                       @L5A*/ 00797000
*      2    MODI_DIAG Ptr(31),      /* Not part of the intended         00798000
*                                      interface                 @LBA*/ 00799000
*      2    MODI_ENT@64 AsaxmacP64, /* Module's relocated 64-bit        00800000
*                                      EPA                       @L5A*/ 00801000
*       3    MODI_ENT@64BYTES0TO3 CHAR(4), /* First 4 bytes      @L5A*/ 00802000
*       3    MODI_ENT@64BYTES4TO7 CHAR(4), /* Next 4 bytes       @L5A*/ 00803000
*        4   MODI_ENT@64BYTE4 CHAR(1),     /* Byte 4             @L5A*/ 00804000
*         5  MODI_ENT@64_AMODE31 BIT(1),  /* When this is on and        00805000
*                                      MODI_ENT@64_AMODE64 is off,      00806000
*                                      the routine is AMODE 64.         00807000
*                                            When this is off and       00808000
*                                      MODI_ENT@64_AMODE64 is off,      00809000
*                                      the routine is AMODE 24.  @L5A*/ 00810000
*        4   MODI_ENT@64BYTES5TO6 CHAR(2), /* Bytes 5-6          @L5A*/ 00811000
*        4   MODI_ENT@64BYTE7 CHAR(1),     /* Byte 7             @L5A*/ 00812000
*         5  * BIT(7),              /*                               */ 00813000
*         5  MODI_ENT@64_AMODE64 BIT(1),  /* When this is on, the       00814000
*                                      the routine is AMODE 64.  @L5A*/ 00815000
*      2    MODI_DSKEY CHAR(8),     /* The data set key. This is used   00816000
*                                      internally to help to identify   00817000
*                                      uniquely the data set from which 00818000
*                                      the module was fetched. The      00819000
*                                      format of the key is not part    00820000
*                                      of the programming interface.    00821000
*                                      A value of 0 indicates that      00822000
*                                      the data set key was not         00823000
*                                      available.                @L7A*/ 00824000
*      2    MODI_PATHTOKEN CHAR(12),/* The path token. It is valid      00825000
*                                      only when MODI_PATHNAME is on.   00826000
*                                      This field is for IBM use only.  00827000
*                                                                @L8A*/ 00828000
*      2    * CHAR(2),                                                  00829000
*      2    MODI_DynlpaPathnameLEN FIXED(15), /*                        00830000
*                                      Length of path name for a        00831000
*                                      dynamic LPA module.              00832000
*                                      Valid only when not 0     @L9A*/ 00833000
*      2    MODI_DynlpaPathnameADDR PTR(31), /*                         00834000
*                                      Address of path name for a       00835000
*                                      dynamic LPA module.              00836000
*                                      Valid only when field            00837000
*                                      MODI_DynlpaPathnameLen is not    00838000
*                                      0                         @L9A*/ 00839000
*                                                                       00840000
*     /***************************************************************/ 00841000
*     /*                                                             */ 00842000
*     /* Module length and load address for each segment.            */ 00843000
*     /* When the number of relocation factors is greater than       */ 00844000
*     /* one, you must use the MODI_SEGLEN and MODI_SEGADDR          */ 00845000
*     /* mappings to reference the lengths and addresses.            */ 00846000
*     /* In all cases, the format of the area is:                    */ 00847000
*     /* - The number of relocation factors                          */ 00848000
*     /* - All the lengths (one for each relocation factor)          */ 00849000
*     /* - All the addresses (one for each relocation factor)        */ 00850000
*     /*                                                             */ 00851000
*     /***************************************************************/ 00852000
*                                                                       00853000
*     1    MODI_2   BASED(MODI_2_PTR), /*                            */ 00854000
*      2    MODI_RELOC_FAC_NUM FIXED(31), /* Number of relocation       00855000
*                                      factors                       */ 00856000
*      2    MODI_MOD_LEN FIXED(31), /* Length of module              */ 00857000
*      2    MODI_LOAD@ PTR(31),     /* Address of where module was      00858000
*                                      loaded. If the load point        00859000
*                                      address does not fit in 31 bits, 00860000
*                                      a value of X'7FFFFBAD' is        00861000
*                                      provided. The MODI64_1 area has  00862000
*                                      the full information.     @LBC*/ 00863000
*                                                                       00864000
*     1 MODI_SEGLEN BASED(ADDR(MODI_MOD_LEN)), /* The first length is   00865000
*                                      located at offset 4 from the     00866000
*                                      beginning of the MODI_2 area     00867000
*                                                                    */ 00868000
*      2 MODI_SEGMENT_LEN(*) FIXED(31), /* Array of module              00869000
*                                      segment lengths. If the          00870000
*                                      corresponding address does not   00871000
*                                      fit in 31 bits,                  00872000
*                                      a value of 1 is provided. The    00873000
*                                      MODI64_1 area has the full       00874000
*                                      information.              @LBC*/ 00875000
*                                                                       00876000
*     1 MODI_SEGADDR BASED(ADDR(MODI_MOD_LEN)+LENGTH(MODI_MOD_LEN)*     00877000
*           MODI_RELOC_FAC_NUM),    /* The first address is located     00878000
*                                      at offset 4 plus the length of   00879000
*                                      the area for the lengths         00880000
*                                      (which is 4 * number of          00881000
*                                      relocation factors)           */ 00882000
*                                                                       00883000
*      2 MODI_SEGMENT_ADDR(*) PTR(31), /* Array of module addresses.    00884000
*                                      If the address does not          00885000
*                                      fit in 31 bits,                  00886000
*                                      a value of X'7FFFFBAD' is        00887000
*                                      provided. The MODI64_1 area has  00888000
*                                      the full information.     @LBC*/ 00889000
*                                                                       00890000
*                                                                       00891000
*     /***************************************************************/ 00892000
*     /*                                                             */ 00893000
*     /* The format in all cases is                                  */ 00894000
*     /* - The number of relocation factors                          */ 00895000
*     /* - The entries                                               */ 00896000
*     /* - Each entry consists of the address followed by the length */ 00897000
*     /*                                                             */ 00898000
*     /***************************************************************/ 00899000
*                                                                       00900000
*     1    MODI64_1 BASED(MODI64_1_PTR), /*                      @L5A*/ 00901000
*      2    MODI64_1_HEADER,             /*                      @L5A*/ 00902000
*        3  MODI64_RELOC_FAC_NUM FIXED(31), /* Number of relocation     00903000
*                                      factors                   @L5a*/ 00904000
*        3  MODI64_RSVD CHAR(4),       /* Reserved               @L5A*/ 00905000
*      2    MODI64_XTLST_ENTRY(*),     /* Extent list entry      @L5A*/ 00906000
*        3  MODI64_XTLST_SEGMENT_ADDR AsaxmacP64,  /*            @L5A*/ 00907000
*          5 MODI64_XTLST_SEGMENT_ADDR_H CHAR(4),  /*            @L5A*/ 00908000
*          5 MODI64_XTLST_SEGMENT_ADDR_L CHAR(4),  /*            @L5A*/ 00909000
*        3  MODI64_XTLST_SEGMENT_LEN  AsaxmacF63,  /*            @L5A*/ 00910000
*          5 MODI64_XTLST_SEGMENT_LEN_H CHAR(4),   /*            @L5A*/ 00911000
*          5 MODI64_XTLST_SEGMENT_LEN_L CHAR(4),   /*            @L5A*/ 00912000
*                                                                       00913000
*     /***************************************************************/ 00914000
*     /*                                                             */ 00915000
*     /* Module name and auxiliary information                       */ 00916000
*     /*                                                             */ 00917000
*     /***************************************************************/ 00918000
*                                                                       00919000
*     1    MODI_3   BASED(MODI_3_PTR), /*                            */ 00920000
*      2    MODI_NAME_LEN FIXED(15), /* Length of the name           */ 00921000
*      2    MODI_ASID BIT(16),      /* ASID of address space in which   00922000
*                                      this module was originally       00923000
*                                      loaded. In an OpenMVS forked     00924000
*                                      environment, this may not equal  00925000
*                                      the current child address space  00926000
*                                      ASID.                         */ 00927000
*      2    MODI_PROVIDER_ID FIXED(31), /* Provider Identifier       */ 00928000
*      2    MODI_PROVIDER_DATA CHAR(16), /* Provider Data            */ 00929000
*      2    MODI_EPTOKEN CHAR(8),   /* Entry point token             */ 00930000
*      2    MODI_EPNAME CHAR(0),    /* Entry point name. The length     00931000
*                                      of the name is in                00932000
*                                      MODI_NAME_LEN. For OpenMVS       00933000
*                                      modules this field contains      00934000
*                                      the full OpenMVS pathname.    */ 00935000
*                                                                       00936000
*     /***************************************************************/ 00937000
*     /*                                                             */ 00938000
*     /* LOAD information                                            */ 00939000
*     /*                                                             */ 00940000
*     /***************************************************************/ 00941000
*                                                                       00942000
*     1    MODI_4   BASED(MODI_4_PTR), /*                            */ 00943000
*      2    MODI_LOAD_COUNT FIXED(15), /* The total number of           00944000
*                                      requests for the module via      00945000
*                                      the LOAD macro                */ 00946000
*      2    MODI_LOAD_SYSCOUNT FIXED(15), /* The number of system       00947000
*                                      requests for the module via      00948000
*                                      the LOAD macro                */ 00949000
*                                                                       00950000
*     /***************************************************************/ 00951000
*     /*                                                             */ 00952000
*     /* MAJOR name - this section contains the Major name when then */ 00953000
*     /* current entry point is a minor (MODI_MINOR = 1)             */ 00954000
*     /*                                                             */ 00955000
*     /***************************************************************/ 00956000
*                                                                       00957000
*     1    MODI_5   BASED(MODI_5_PTR), /*                            */ 00958000
*      2    MODI_8_BYTE_MAJOR_NAME CHAR(8); /* The 8 byte major name    00959000
*                                      for a minor entry point       */ 00960000
*                                                                       00961000
*   /*****************************************************************/ 00962000
*   /*                                                               */ 00963000
*   /* Eyecatcher for MODI_HEADER                                    */ 00964000
*   /*                                                               */ 00965000
*   /*****************************************************************/ 00966000
*                                                                       00967000
*   DECLARE                                                             00968000
*     MODI_TEXT CHAR(4) CONSTANT('MODI'); /* Eyecatcher              */ 00969000
*                                                                       00970000
*   /*****************************************************************/ 00971000
*   /*                                                               */ 00972000
*   /* Return codes for service module                               */ 00973000
*   /*                                                               */ 00974000
*   /*****************************************************************/ 00975000
*                                                                       00976000
*   DECLARE                                                             00977000
*     MODI_OK  CONSTANT(0),         /* Module processing occurred       00978000
*                                      normally                      */ 00979000
*     MODI_NOINFO CONSTANT(4),      /* There was no module              00980000
*                                      information to return         */ 00981000
*     MODI_CALLER CONSTANT(8),      /* Processing terminated with a     00982000
*                                      nonzero return code from the     00983000
*                                      caller's subroutine           */ 00984000
*     MODI_LOCKS CONSTANT(12),      /* Locks needed to process the      00985000
*                                      CSVINFO request could not be     00986000
*                                      obtained                      */ 00987000
*     MODI_INVALID_INPUT CONSTANT(16), /* Processing terminated         00988000
*                                      unexpectedly when invalid        00989000
*                                      caller input was encountered  */ 00990000
*     MODI_NOTAVAIL     CONSTANT(20), /* The CSVINFO service routine    00991000
*                                        is not available            */ 00992000
*     MODI_NOTRETRIEVED CONSTANT(24), /* Processing terminated because  00993000
*                                      requested information could      00994000
*                                      not be retrieved from the dump*/ 00995000
*     MODI_UNEXPECTED CONSTANT(28), /* Processing terminated            00996000
*                                      unexpectedly                  */ 00997000
*     MODI_BELOW430 CONSTANT(32),   /* A system at a level lower than   00998000
*                                      4.3.0 was trying to use the      00999000
*                                      CSVINFO service               */ 01000000
*     MODI_BAD_PARMLIST CONSTANT(36), /* The CSVINFO parameter list is  01001000
*                                      not valid with the level of      01002000
*                                      CSVINFO service on the system */ 01003000
*     MODI_LOOP_LIMIT   CONSTANT(40), /* The CSVINFO service has        01004000
*                                      exceeded a large threshold value 01005000
*                                      for the number of times the MIPR 01006000
*                                      is invoked on a single call.     01007000
*                                                                @L1A*/ 01008000
*     MODI_INELIGIBLE_RB CONSTANT(44), /* The RB supplied via RBADDR    01009000
*                                         as input for FUNC(RB) was     01010000
*                                         not a PRB or SVRB.     @D1A*/ 01011000
*     MODI_MIPR_FAILED  CONSTANT(48),  /* The supplied MIPR routine     01012000
*                                         failed.                @D1A*/ 01013000
*     MODI_RB_LOOP  CONSTANT(52); /* The RB supplied via RBADDR as      01014000
*                                    input for FUNC(RB) has resulted    01015000
*                                    in the CSVINFO service exceeding   01016000
*                                    the expected number of iterations  01017000
*                                    through an RB chain.        @01A*/ 01018000
*/* End of PL/X Source                                               */ 01019000
* %IF CSVMODI_LIST = 'NO' !                                             01020000
*    ZCBPRINT = 'NO' %THEN                                              01021000
* %DO;                                                                  01022000
*   @LIST POP NOECHO;                                                   01023000
* %END;                                                                 01024000
* %END;                                                                 01025000
