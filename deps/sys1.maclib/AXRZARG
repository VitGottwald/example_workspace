*                                                                       00001000
* %DCL AXRZARG_INCLUDED CHAR EXT;                                       00002000
* %DEACTIVATE AXRZARG_INCLUDED;                                         00003000
* %IF AXRZARG_INCLUDED = '' %THEN                                       00004000
* %DO;                                                                  00005000
*/* Macro made bi-lingual on 20238. CBGEN compile date 20027         */ 00006000
*% /*                                                                   00007000
         MACRO                                                          00008000
         AXRZARG &DSECT=YES,&LIST=YES,&TITLE=YES,&AXRARGLST=YES,       *00009000
               &AXRARGENTRY=COND,&AXRDIAG=COND,&AXRRXLHEADER=COND,     *00010000
               &AXRRXLENTRY=COND                                        00011000
         GBLC  &AXRZARG_INCLUDED                                        00012000
         GBLC  &ZCBPRINT                                                00013000
&AXRZARG_INCLUDED SETC 'YES'                                            00014000
         AIF   ('&LIST' EQ 'NONE').P0                                   00015000
         AIF   ('&TITLE' EQ 'NO').P5                                    00016000
 TITLE   'AXRZARG  - AXR Argument/Variable list mapping              '  00017000
.P5      ANOP                                                           00018000
**/ AXRZARG_1:;                                                         00019000
*/****START OF SPECIFICATIONS****************************************** 00020000
*                                                                       00021000
*    $MAC (AXRZARG) COMP(SCAXR) PROD(HBB77SR):                          00022000
*                                                                       00023000
*                                                                       00024000
*01* MACRO NAME: AXRZARG                                                00025000
*                                                                       00026000
*01* DSECT NAME: N/A                                                    00027000
*                                                                       00028000
*01* DESCRIPTIVE NAME: AXR Argument/Variable list mapping               00029000
*                                                                       00030000
*02*   ACRONYM: ARGL or VARL                                            00031000
*                                                                    */ 00032000
*/*01* PROPRIETARY STATEMENT=                                        */ 00033000
*/***PROPRIETARY_STATEMENT********************************************/ 00034000
*/*                                                                  */ 00035000
*/*                                                                  */ 00036000
*/*   LICENSED MATERIALS - PROPERTY OF IBM                           */ 00037000
*/*   5650-ZOS     COPYRIGHT IBM CORP. 2007,2021                     */ 00038000
*/*                                                                  */ 00039000
*/* STATUS= HBB77D0                                                  */ 00040000
*/*                                                                  */ 00041000
*/***END_OF_PROPRIETARY_STATEMENT*************************************/ 00042000
*/*                                                                     00043000
*01* EXTERNAL CLASSIFICATION:                                           00044000
*                                                                       00045000
*02* PI:   BASE                                                         00046000
*                                                                       00047000
*02* NOTPI: FIELDS AXREXIT                                              00048000
*                                                                       00049000
*01* END OF EXTERNAL CLASSIFICATION:                                    00050000
*                                                                       00051000
*01* FUNCTION:                                                          00052000
*                                                                       00053000
*    Contains System REXX external control blocks, including            00054000
*    mappings of the argument/variable list and                         00055000
*    the DIAG area for the AXREXX service.                              00056000
*                                                                       00057000
*                                                                       00058000
*01* METHOD OF ACCESS:                                                  00059000
*                                                                       00060000
*02*   PLAS:                                                            00061000
*                                                                       00062000
*        %INCLUDE SYSLIB(AXRZARG)                                       00063000
*                                                                       00064000
*                                                                       00065000
*02*   ASM:                                                             00066000
*        Inclusion will create a DSECT                                  00067000
*                                                                       00068000
*                                                                       00069000
*01* SIZE: N/A                                                          00070000
*            AXRARGLST    -- X'0010' bytes                              00071000
*            AXRARGENTRY  -- X'0028' bytes                              00072000
*            AXRDIAG      -- X'0028' bytes                              00073000
*            AXRRXLHEADER -- X'0018' bytes                              00074000
*            AXRRXLENTRY  -- X'0040' bytes                              00075000
*                                                                       00076000
*01* POINTED TO BY: N/A                                                 00077000
*                                                                       00078000
*01* CREATED BY: Caller of AXREXX                                       00079000
*                                                                       00080000
*01* DELETED BY: Caller of AXREXX                                       00081000
*                                                                       00082000
*01* STORAGE ATTRIBUTES:                                                00083000
*02*   SUBPOOL: Any                                                     00084000
*02*   KEY: ANY                                                         00085000
*02*   RESIDENCY: Callers address space above or below the bar          00086000
*                                                                       00087000
*01* FREQUENCY: 1 PER Rexx Request                                      00088000
*                                                                       00089000
*01* SERIALIZATION: N/A                                                 00090000
*                                                                       00091000
*01* DEPENDENCIES: None                                                 00092000
*                                                                       00093000
*01* NOTES: None                                                        00094000
*                                                                       00095000
*                                                                       00096000
*01* COMPONENT: System Rexx (SCAXR)                                     00097000
*                                                                       00098000
*01* DISTRIBUTION LIBRARY:  AMACLIB                                     00099000
*                                                                       00100000
*01* EYE-CATCHER: ARGL or VARL                                          00101000
*02*   OFFSET:  0                                                       00102000
*02*   LENGTH:  4                                                       00103000
*                                                                       00104000
*01* CHANGE-ACTIVITY:                                                   00105000
*                                                                       00106000
*  $L0=AXR      HBB77BR 050101 PD00CS: AXR                              00107000
*  $L1=AXR      HBB77BR 051001 PD00CS: AXR                              00108000
*  $L2=AXR      HBB77BR 060115 PD00CS: AXR                              00109000
*  $P1=ME05641  HBB77BR 060301 PD00CS: Add AxrExitCpuTime               00110000
*  $L3=AXR      HBB77BR 060715 PD00CS: Modify Diag area.  Modify        00111000
*                                      reason codes                     00112000
*  $L4=AXR      HBB77BR 060715 PD00CS: Modify Diag area.  Modify        00113000
*                                      reason codes                     00114000
*  $L5=AXR      HBB77BR 060815 PD00CS: Reason code updates              00115000
*  $P2=ME07163  HBB77BR 060915 PD00CS: Reason code updates              00116000
*  $P3=ME07871  HBB77BR 060930 PD00CS: Reason code updates              00117000
*  $P4=SR00012  HBB77BR 061020 PD00CS: Reason code updates              00118000
*  $P5=ME08296  HBB77BR 061115 PD00CS: Add AxrRsnCodeMask               00119000
*  $P6=ME08365  HBB77BR 070102 PD00CS: Reason code updates              00120000
*  $P7=ME09167  HBB77BR 070215 PD00CS: Doc updates                      00121000
*  $P8=ME09555  HBB77BR 070310 PD00CS: Reason code updates              00122000
*  $P9=ME09578  HBB77BR 070314 PD00CS: Reason code updates              00123000
*  $PA=ME08862  HBB77BR 070314 PD00CS: Reason code updates              00124000
*  $PB=ME08760  HBB77BR 070320 PD00CS: Reason code updates              00125000
*  $PC=ME09755  HBB77BR 070324 PD00CS: Reason code updates              00126000
*  $PD=ME09830  HBB77BR 070328 PD00CS: Reason code updates              00127000
*  $PE=ME11571  HBB7750 071018 PD00WT: Reason code updates              00128000
*  $L6=SYSREXX  HBB7760 080415 PD00CS: Rexxlib                          00129000
*  $PF=ME13754  HBB7760 080715 PD00CS: New version of DIAG              00130000
*  $PG=ME15068  HBB7760 081130 PD00CS: Modify RXL                       00131000
*  $PH=ME14976  HBB7760 090115 PD00CS: Update reason codes              00132000
*  $PI=ME15232  HBB7760 090115 PD00CS: Update reason codes              00133000
*  $L7=ENH7A0   HBB77A0 131207 PD00CS: StopTso                          00134000
*     =ENH7A0   HBB77A0 140120 PD00CS: Stop AXR                         00135000
*  $PJ=WI385638 HBB77D0 200826 PD00XB: CBGC                             00136000
****END OF SPECIFICATIONS*********************************************/ 00137000
*% /*                                                                   00138000
.P0      ANOP                                                           00139000
         AIF   ('&ZCBPRINT' EQ 'NO').P1                                 00140000
         AIF   ('&LIST' EQ 'YES').P2                                    00141000
.P1      ANOP                                                           00142000
         PUSH  PRINT                                                    00143000
         PRINT OFF                                                      00144000
.P2      ANOP                                                           00145000
         AIF   ('&AXRARGLST' EQ 'NO').L0002                             00146000
         AIF   ('&DSECT' EQ 'YES').L0003                                00147000
         AIF   ('&AXRARGLST' NE 'YES').L0002                            00148000
AXRARGLST DS   0H                                                       00149000
         AGO   .L0004                                                   00150000
.L0003   ANOP                                                           00151000
AXRARGLST DSECT                                                         00152000
.L0004   ANOP                                                           00153000
AXRARGLSTID DS CL4       Use AxrArgLstAcro for REXXArgLst and          *00154000
                         AxrVarLstAcro for REXXVarLst                   00155000
AXRARGLSTVER DS X                                                       00156000
AXRARGLSTRSV1 DS CL3     Reserved - must be 0                           00157000
AXRARGLSTNUMBER DS H     Number of arguments                            00158000
AXRARGLSTENTRYINERROR DS H Output argument in error                     00159000
AXRARGLSTRSV2 DS CL4     Reserved - must be 0                           00160000
AXRARGLSTEND DS 0C                                                      00161000
AXRARGLSTACRO EQU C'ARGL'                                               00162000
AXRVARLSTACRO EQU C'VARL'                                               00163000
AXRARGLSTCURVER EQU 0                                                   00164000
AXRARGLSTVER0 EQU 0      Version 0                                      00165000
AXRARGLST_LEN EQU *-AXRARGLST                                           00166000
.L0002   ANOP                                                           00167000
         AIF   ('&AXRARGENTRY' EQ 'NO').L0005                           00168000
         AIF   ('&DSECT' EQ 'YES').L0006                                00169000
         AIF   ('&AXRARGENTRY' NE 'YES').L0005                          00170000
.L0006   ANOP                                                           00171000
*                                                                       00172000
*    *****************************************************************  00173000
*    *                                                               *  00174000
*    * 1 or more ArgLst entries follow                               *  00175000
*    *                                                               *  00176000
*    *****************************************************************  00177000
*                                                                       00178000
*                                                                       00179000
         AIF   ('&DSECT' EQ 'YES').L0007                                00180000
AXRARGENTRY DS 0D                                                       00181000
         AGO   .L0008                                                   00182000
.L0007   ANOP                                                           00183000
AXRARGENTRY DSECT                                                       00184000
.L0008   ANOP                                                           00185000
AXRARGADDR DS  AD        Address of argument                            00186000
         ORG   AXRARGADDR                                               00187000
AXRARGADDRHIGH DS F      High half of address                           00188000
AXRARGADDRLOW DS A       Low half of address                            00189000
AXRARGNAMEADDR DS AD     Address of the name of the argument. This is  *00190000
                         required for all variables and output         *00191000
                         arguments                                      00192000
         ORG   AXRARGNAMEADDR                                           00193000
AXRARGNAMEADDRHIGH DS F  High half of address                           00194000
AXRARGNAMEADDRLOW DS A   Low half of address                            00195000
AXRARGLENGTH DS F        Length of arg/var in bytes                     00196000
AXRARGALET DS  F         Alet of arg/var                                00197000
AXRARGNAMEALET DS F      Alet of name of arg/var                        00198000
AXRARGOUTLENGTH DS F     Length of the arg/var copied to the buffer of *00199000
                         the caller. Set by system REXX. For HexString *00200000
                         type, this value is in hex digits. For        *00201000
                         BitString type, this value is in bits. For    *00202000
                         type char, this value is in bytes. For        *00203000
                         numeric values, the input length is returned   00204000
AXRARGNAMELENGTH DS X    Length of argument name in bytes               00205000
AXRARGTYPE DS  X         Type of arg i.e. signed, unsigned, char, bit  *00206000
                         or hex. See constant definitions               00207000
AXRARGINPUTFLGS1 DS B                                                   00208000
*  Bit definitions:                                                     00209000
AXRARGINPUT EQU X'80'    Input argument                                 00210000
AXRARGOUTPUT EQU X'40'   Output argument                                00211000
AXRARGRES1 EQU X'3F'     Reserved - must be 0                           00212000
AXRARGRES2 DS  CL5       Reserved - must be 0                           00213000
AXRARGEND DS   0C        End of entry                                   00214000
AXRARGTYPESIGNED EQU 1   Argument is signed type. Valid lengths are 4  *00215000
                         and 8 (in bytes)                               00216000
AXRARGTYPEUNSIGNED EQU 2 Argument is unsigned type. Valid lengths are  *00217000
                         4 and 8 (in bytes)                             00218000
AXRARGTYPECHAR EQU 3     Argument is character type. Length must be    *00219000
                         less than or equal to 512 bytes                00220000
AXRARGTYPEBITSTRING EQU 4 Argument is bit string type. Length must be  *00221000
                         less than or equal to 32 bits                  00222000
AXRARGTYPEHEXSTRING EQU 5 Argument is hex string type. Length must be  *00223000
                         less than or equal to 512 hex digits           00224000
AXRDIAGACRO EQU C'AXRD'  Acronym for the AXRDiag                        00225000
AXRDIAGVER0 EQU 0        Original version of AXRDIAG                    00226000
AXRDIAGVER1 EQU 1        Version 1 of AXRDiag                           00227000
AXRDIAGCURVER EQU 1      Current version of AXRDIAG                     00228000
AXRARGENTRY_LEN EQU *-AXRARGENTRY                                       00229000
.L0005   ANOP                                                           00230000
         AIF   ('&AXRDIAG' EQ 'NO').L0009                               00231000
         AIF   ('&DSECT' EQ 'YES').L000A                                00232000
         AIF   ('&AXRDIAG' NE 'YES').L0009                              00233000
AXRDIAG  DS    0F                                                       00234000
         AGO   .L000B                                                   00235000
.L000A   ANOP                                                           00236000
AXRDIAG  DSECT                                                          00237000
.L000B   ANOP                                                           00238000
AXRDIAGHEADER DS CL4                                                    00239000
         ORG   AXRDIAGHEADER                                            00240000
AXRDIAGVER DS  X                                                        00241000
AXRDIAGFLGS1 DS B                                                       00242000
*  Bit definitions:                                                     00243000
AXRDIAGNOEXECRETCODE EQU X'80' When on, indicates that AXREXX was      *00244000
                         unable to obtain a return code from the exec, *00245000
                         because the exec did not return one or        *00246000
                         because it was too small, large or could not  *00247000
                         be converted to binary                         00248000
         DS    CL2                                                      00249000
AXRDIAGDATA DS CL20                                                     00250000
         ORG   AXRDIAGDATA                                              00251000
AXRDIAGEXECRETCODE DS F  Return code from exec                          00252000
AXRDIAG1 DS    F                                                        00253000
AXRDIAG2 DS    F                                                        00254000
AXRDIAG3 DS    F                                                        00255000
AXRDIAG4 DS    F                                                        00256000
AXRDIAGID DS   CL4       Eye-catcher                                    00257000
         DS    CL12      Reserved                                       00258000
*                                                                       00259000
* ****************************************************************** *  00260000
* * The REXXLIB output parameter is mapped by the AxrRxlHeader       *  00261000
* * followed by one or more AxrRxlEntry(s) - one for each data set   *  00262000
* * in the REXXLIB concatenation.                                    *  00263000
* ****************************************************************** *  00264000
*                                                                       00265000
*                                                                       00266000
AXRRXLACRO EQU C'AXRR'                                                  00267000
AXRRXLVER0 EQU 0                                                        00268000
AXRDIAG_LEN EQU *-AXRDIAG                                               00269000
.L0009   ANOP                                                           00270000
         AIF   ('&AXRRXLHEADER' EQ 'NO').L000C                          00271000
         AIF   ('&DSECT' EQ 'YES').L000D                                00272000
         AIF   ('&AXRRXLHEADER' NE 'YES').L000C                         00273000
AXRRXLHEADER DS 0D                                                      00274000
         AGO   .L000E                                                   00275000
.L000D   ANOP                                                           00276000
AXRRXLHEADER DSECT                                                      00277000
.L000E   ANOP                                                           00278000
AXRRXLID DS    CL4                                                      00279000
AXRRXLLEN DS   F         Length of AxrRxlHeader - use this to access   *00280000
                         the first entry                                00281000
AXRRXLCONCATNUM DS F     Number of datasets in the concatenation        00282000
AXRRXLTOTALLEN DS F      Length of the entire output including         *00283000
                         AxrRxlHeader and any AxrRxlEntry(s) that      *00284000
                         follow                                         00285000
AXRRXLVER DS   X         Version                                        00286000
         DS    CL7       Reserved                                       00287000
*                                                                       00288000
* ****************************************************************** *  00289000
* * Use AxrRxlEntryLen to access the next AxrRxlEntry from the       *  00290000
* * prior one.                                                       *  00291000
* ****************************************************************** *  00292000
*                                                                       00293000
*                                                                       00294000
AXRRXLENTRYACRO EQU C'RXLE'                                             00295000
AXRRXLHEADER_LEN EQU *-AXRRXLHEADER                                     00296000
.L000C   ANOP                                                           00297000
         AIF   ('&AXRRXLENTRY' EQ 'NO').L000F                           00298000
         AIF   ('&DSECT' EQ 'YES').L0010                                00299000
         AIF   ('&AXRRXLENTRY' NE 'YES').L000F                          00300000
AXRRXLENTRY DS 0D                                                       00301000
         AGO   .L0011                                                   00302000
.L0010   ANOP                                                           00303000
AXRRXLENTRY DSECT                                                       00304000
.L0011   ANOP                                                           00305000
AXRRXLENTRYID DS CL4                                                    00306000
AXRRXLENTRYLEN DS F      Length of a single entry - use this to access *00307000
                         the next entry                                 00308000
AXRRXLDSNAMELEN DS H     Length of data set name                        00309000
AXRRXLDSNAME DS CL44     Data set name                                  00310000
AXRRXLVOLSERLEN DS H     Length of volser                               00311000
AXRRXLVOLSER DS CL6      Volser                                         00312000
         DS    CL2       Reserved                                       00313000
AXRRSNCODEMASK EQU X'0000FFFF' Mask to isolate external reason code.    00314000
*                                                                       00315000
*   AXREXX Return and Reason Code definitions                           00316000
*                                                                       00317000
*                                                                       00318000
AXRRETCODEOK EQU X'00000000' Meaning: AXREXX request successful.       *00319000
                         Action: None required. If RexxDiag was        *00320000
                         specified, AXRDIAG1, AXRDIAG2, AXRDIAG3 and   *00321000
                         AXRDIAG4 contain the message ids of any       *00322000
                         messages beginning with IRX (REXX) or IKJ     *00323000
                         (TSO) that were issued when processing the    *00324000
                         exec. The format of the message id is packed  *00325000
                         decimal with the sign bits shifted out. A 1   *00326000
                         in the high order byte distinguishes an IKJ   *00327000
                         message from an IRX message.                   00328000
AXRRETCODEERROR EQU X'00000008' Meaning: The AXREXX request failed due *00329000
                         to a user error. Action: Refer to the action  *00330000
                         provided with the specific reason code.        00331000
AXRNOFRRALLOWED EQU X'00000801' Meaning: Caller invoked AXREXX with an *00332000
                         FRR. Action: Remove the FRR and then invoke   *00333000
                         AXREXX.                                        00334000
AXRNOLOCKSALLOWED EQU X'00000802' Meaning: Caller invoked AXREXX       *00335000
                         holding a lock. Action: Free the lock and     *00336000
                         then invoke AXREXX.                            00337000
AXRNOTTCBMODE EQU X'00000803' Meaning: Caller was not running as a     *00338000
                         task. Action: Move the invocation of AXREXX   *00339000
                         under a task.                                  00340000
AXRNOTAUTHORIZED EQU X'00000804' Meaning: Caller is not APF            *00341000
                         authorized, running in a system key or in     *00342000
                         supervisor state. Action: Avoid invoking      *00343000
                         AXREXX in this environment.                    00344000
AXRNOTENABLED EQU X'00000805' Meaning: Caller is disabled. Action:     *00345000
                         Avoid invoking AXREXX in this environment.     00346000
AXRREXXARGSCANNOTACCESS EQU X'00000806' Meaning: The RexxArgs          *00347000
                         parameter is not accessible. Action: Verify   *00348000
                         that the RexxArgs parameter is accessible and *00349000
                         in the key in which AXREXX was invoked.        00350000
AXRARGCANNOTACCESS EQU X'00000807' Meaning: An argument in the         *00351000
                         argument list cannot be accessed. Action:     *00352000
                         Refer to AxrArgLstEntryInError in the         *00353000
                         RexxArgs parameter to determine the index of  *00354000
                         the argument that was not accessible. Ensure  *00355000
                         that AxrArgAddr and AxrArgAlet contain the    *00356000
                         address and alet of the argument. Ensure that *00357000
                         the argument is in the same key as the        *00358000
                         invoker.                                       00359000
AXRARGBADLENGTH EQU X'00000808' Meaning: The length of an argument is  *00360000
                         not valid. Action: Refer to                   *00361000
                         AxrArgLstEntryInError in the RexxArgs         *00362000
                         parameter to determine the index of the       *00363000
                         argument whose length was incorrect. Correct  *00364000
                         AxrArgLength.                                  00365000
AXRARGBADTYPE EQU X'00000809' Meaning: Type of an argument is invalid. *00366000
                         Action: Refer to AxrArgLstEntryInError in the *00367000
                         RexxArgs parameter to determine the index of  *00368000
                         the argument whose type is incorrect. Correct *00369000
                         AxrArgType with one of the valid types listed *00370000
                         in AXRZARG.                                    00371000
AXRPLISTCANNOTACCESS EQU X'0000080A' Meaning: The input parameter list *00372000
                         was not accessible Action: Verify that the    *00373000
                         input parameter list is in the same key as    *00374000
                         the invoker. Verify that it is accessible.     00375000
AXRARGTOOMANY EQU X'0000080B' Meaning: Too many arguments were         *00376000
                         specified. Action: Verify the contents of     *00377000
                         AxrArgLstNumber in the RexxArgs parameter.    *00378000
                         The maximum possible value is 20.              00379000
AXRARGBADNUMERIC EQU X'0000080C' Meaning: An output argument from a    *00380000
                         REXX exec is not numeric. Action: Refer to    *00381000
                         AxrArgLstEntryInError in the RexxArgs         *00382000
                         parameter for the index of the invalid        *00383000
                         argument. Make sure that the REXX exec did    *00384000
                         not return a value in scientific notation.     00385000
AXRARGBADBITSTRING EQU X'0000080D' Meaning: An output argument from a  *00386000
                         REXX exec is not a bit string. Action: Refer  *00387000
                         to AxrArgLstEntryInError in the RexxArgs      *00388000
                         parameter for the index of the invalid        *00389000
                         argument. Correct the exec or change          *00390000
                         AxrArgType.                                    00391000
AXRARGBADHEXSTRING EQU X'0000080E' Meaning: An output argument from a  *00392000
                         REXX exec is not a hex string. Action: Refer  *00393000
                         to AxrArgLstEntryInError in the RexxArgs      *00394000
                         parameter for the index of the invalid        *00395000
                         argument. Correct the exec or change          *00396000
                         AxrArgType.                                    00397000
AXRARGBADNAMELENGTH EQU X'00000810' Meaning: The length of the name of *00398000
                         an argument is too long. Action: Refer to     *00399000
                         AxrArgLstEntryInError in the RexxArgs         *00400000
                         parameter for the index of the invalid        *00401000
                         argument. Correct AxrArgNameLength.            00402000
AXRNOTABLETOALLOCATEREXXINDSN EQU X'00000811' Meaning: System REXX was *00403000
                         unable to allocate the REXXINDsn dataset.     *00404000
                         Action: The return and reason codes from      *00405000
                         DYNALLOC are inserted into AXRDIAG1 and       *00406000
                         AXRDIAG2 in the RexxDiag parameter. Look up   *00407000
                         the return/reason codes in the z/OS MVS       *00408000
                         Authorized Assembler Services Guide. Look in  *00409000
                         the System Log for any messages that were     *00410000
                         issued by DYNALLOC.                            00411000
AXRNOTABLETOALLOCATEREXXOUTDSN EQU X'00000812' Meaning: System REXX    *00412000
                         was unable to allocate the RexxOutDsn         *00413000
                         dataset. Action: The return and reason codes  *00414000
                         from DYNALLOC are inserted into AXRDIAG1 and  *00415000
                         AXRDIAG2 in the RexxDiag parameter. Look up   *00416000
                         the return/reason codes in the z/OS MVS       *00417000
                         Authorized Assembler Services Guide. Look in  *00418000
                         the System Log for any messages that were     *00419000
                         issued by DYNALLOC.                            00420000
AXRUTOKENCANNOTACCESS EQU X'00000813' Meaning: Unable to access the    *00421000
                         Utoken input parameter. Action: Ensure that   *00422000
                         the Utoken input parameter is in the key of   *00423000
                         the AXREXX invoker and that it is accessible.  00424000
AXRREXXINDSNCANNOTACCESS EQU X'00000814' Meaning: Unable to access the *00425000
                         RexxInDsn input parameter. Action: Ensure     *00426000
                         that the RexxInDsn input parameter is in the  *00427000
                         key of the AXREXX invoker and that it is      *00428000
                         accessible.                                    00429000
AXRREXXOUTDSNCANNOTACCESS EQU X'00000815' Meaning: Unable to access    *00430000
                         the RexxOutDsn input parameter. Action:       *00431000
                         Ensure that the RexxOutDsn input parameter is *00432000
                         in the key of the AXREXX invoker and that it  *00433000
                         is accessible.                                 00434000
AXRREXXVARSCANNOTACCESS EQU X'00000816' Meaning: The RexxVars          *00435000
                         parameter is not accessible. Action: Verify   *00436000
                         that the RexxVars parameter is accessible and *00437000
                         in the key in which AXREXX was invoked.        00438000
AXRBADTIMEINT EQU X'00000817' Meaning: The value of the Timeint        *00439000
                         keyword is invalid. Action: Ensure that the   *00440000
                         value of the TimeInt keyword is less than     *00441000
                         21474536 seconds.                              00442000
AXRARGBADACRONYM EQU X'00000818' Meaning: The acronym for the RexxArgs *00443000
                         keyword is incorrect. Action: Ensure that     *00444000
                         AxrArgLstId is set to AxrArgLstAcro.           00445000
AXRVARBADACRONYM EQU X'00000819' Meaning: The acronym for the RexxVars *00446000
                         keyword is incorrect. Action: Ensure that     *00447000
                         AxrArgLstId is set to AxrVarLstAcro.           00448000
AXRARGBADVERSION EQU X'0000081A' Meaning: The version for the RexxArgs *00449000
                         keyword is incorrect. Action: Ensure that     *00450000
                         version is one that is supported.              00451000
AXRVARBADVERSION EQU X'0000081B' Meaning: The version for the RexxVars *00452000
                         keyword is incorrect. Action: Ensure that the *00453000
                         version is one that is supported.              00454000
AXRVARTOOMANY EQU X'0000081C' Meaning: Too many variables were         *00455000
                         specified. Action: Verify the contents of     *00456000
                         AxrArgLstNumber in the RexxVars parameter.    *00457000
                         The maximum possible value is 256.             00458000
AXRVARBADNUMERIC EQU X'0000081D' Meaning: An output variable from a    *00459000
                         REXX exec is not numeric. Action: Refer to    *00460000
                         AxrArgLstEntryInError in the RexxVars         *00461000
                         parameter for the index of the invalid        *00462000
                         variable. Make sure that the REXX exec did    *00463000
                         not return a value in scientific notation.     00464000
AXRVARBADBITSTRING EQU X'0000081E' Meaning: An output variable from a  *00465000
                         REXX exec is not a bit string. Action: Refer  *00466000
                         to AxrArgLstEntryInError in the RexxVars      *00467000
                         parameter for the index of the invalid        *00468000
                         variable. Correct the exec or change          *00469000
                         AxrArgType.                                    00470000
AXRVARBADHEXSTRING EQU X'0000081F' Meaning: An output variable from a  *00471000
                         REXX exec is not a hex string. Action: Refer  *00472000
                         to AxrArgLstEntryInError in the RexxVars      *00473000
                         parameter for the index of the invalid        *00474000
                         variable. Correct the exec or change          *00475000
                         AxrArgType.                                    00476000
AXRVARBADNAMELENGTH EQU X'00000820' Meaning: The length of the name of *00477000
                         a variable is too long. Action: Refer to      *00478000
                         AxrArgLstEntryInError in the RexxVars         *00479000
                         parameter for the index of the invalid        *00480000
                         variable. Correct AxrArgNameLength.            00481000
AXRVARBADTYPE EQU X'00000821' Meaning: The type specification for a    *00482000
                         variable is invalid. Action: Refer to         *00483000
                         AxrArgLstEntryInError in the RexxVars         *00484000
                         parameter for the index of the invalid        *00485000
                         variable. Correct AxrArgType with one of the  *00486000
                         valid types listed in AXRZARG.                 00487000
AXRVARCANNOTACCESS EQU X'00000822' Meaning: A variable could not be    *00488000
                         accessed. Action: Refer to                    *00489000
                         AxrArgLstEntryInError in the RexxVars         *00490000
                         parameter for the index of the variable that  *00491000
                         could not be accessed. Ensure that AxrArgAddr *00492000
                         and AxrArgAlet contain the address and alet   *00493000
                         of the variable. Ensure that the variable is  *00494000
                         in the same key as the invoker.                00495000
AXRVARBADLENGTH EQU X'00000823' Meaning: The length of a variable was  *00496000
                         invalid. Action: Refer to                     *00497000
                         AxrArgLstEntryInError in the RexxVars         *00498000
                         parameter for the index of the variable whose *00499000
                         length is invalid. Correct AxrArgLength.       00500000
AXRARGLSTRSVNOTZERO EQU X'00000824' Meaning: A reserved field in the   *00501000
                         AXRARGLST mapping was non-zero for the        *00502000
                         RexxArgs AXREXX parameter. Action: Clear the  *00503000
                         reserved fields in the AXRARGLST mapping.      00504000
AXRVARLSTRSVNOTZERO EQU X'00000825' Meaning: A reserved field in the   *00505000
                         AXRARGLST mapping was non-zero for the        *00506000
                         RexxVars AXREXX parameter. Action: Clear the  *00507000
                         reserved fields in the AXRARGLST mapping.      00508000
AXRNOTABLETOUNALLOCATEREXXINDSN EQU X'00000826'                         00509000
*                                                                       00510000
*                                      Meaning: A bad return code was   00511000
*                                      returned from DYNALLOC when      00512000
*                                      attempting to unallocate the     00513000
*                                      RexxinDsn dataset. Action: The   00514000
*                                      return and reason codes from     00515000
*                                      DYNALLOC are inserted into       00516000
*                                      AXRDIAG1 and AXRDIAG2 in the     00517000
*                                      RexxDiag parameter. Look in      00518000
*                                      the System Log for any           00519000
*                                      messages that DYNALLOC may       00520000
*                                      have issued.                     00521000
*                                                                       00522000
AXRNOTABLETOUNALLOCATEREXXOUTDSN EQU X'00000827'                        00523000
*                                                                       00524000
*                                      Meaning: A bad return code was   00525000
*                                      returned from DYNALLOC when      00526000
*                                      attempting to unallocate the     00527000
*                                      RexxOutDsn dataset. Action:      00528000
*                                      The return and reason codes      00529000
*                                      from DYNALLOC are inserted       00530000
*                                      into AXRDIAG1 and AXRDIAG2 in    00531000
*                                      the RexxDiag parameter. Look     00532000
*                                      in the System Log for any        00533000
*                                      messages that DYNALLOC may       00534000
*                                      have issued.                     00535000
*                                                                       00536000
AXREXECSYNTAXERROR EQU X'00000828' Meaning: A syntax error or some     *00537000
                         other run time error was encountered during   *00538000
                         the execution of a REXX exec. Action: The     *00539000
                         REXX interpreter issues one or more error     *00540000
                         messages that indicate the offending line     *00541000
                         number. If RexxOutDsn is specified, look at   *00542000
                         the dataset for the message. If RexxOutDsn is *00543000
                         not specified but ConsData is specified, look *00544000
                         at the console or the system log. If RexxDiag *00545000
                         is specified, AXRDIAG1 contains the number of  00546000
*                        the error which corresponds to an IRXnnnI     *00547000
                         message, AXRDIAG2 contains the line number    *00548000
                         where the error occurred and AXRDIAG3 and     *00549000
                         AXRDIAG4 contain the message ids of the last  *00550000
                         two IRX or IKJ messages that were issued      *00551000
                         before the exec completed. All of these       *00552000
                         values are in packed decimal format with the  *00553000
                         sign bits shifted out. A 1 in the high order  *00554000
                         byte distinguishes an IKJ message from an IRX *00555000
                         message.                                       00556000
AXRARGNUMERICTOOBIG EQU X'0000082A' Meaning: The value of an output    *00557000
                         argument was either too large or too small    *00558000
                         (negative) to be represented in the storage   *00559000
                         area that was passed. Action: Inspect         *00560000
                         AxrArgLstEntryInError in the RexxArgs         *00561000
                         parameter for the index of the argument that  *00562000
                         caused the error.                              00563000
AXRVARNOEXIST EQU X'0000082B' Meaning: The output variable was not set *00564000
                         in the exec. Action: Inspect                  *00565000
                         AxrArgLstEntryInError in the RexxVars         *00566000
                         parameter for the index of the variable that  *00567000
                         caused the error. Determine why this variable *00568000
                         was not set in the exec.                       00569000
AXRARGNOEXIST EQU X'0000082C' Meaning: The output argument was not set *00570000
                         in the exec. Action: Inspect                  *00571000
                         AxrArgLstEntryInError in the RexxArgs         *00572000
                         parameter for the index of the argument that  *00573000
                         caused the error. Determine why this argument *00574000
                         was not set in the exec.                       00575000
AXRVARTOOLONG EQU X'0000082D' Meaning: The buffer of the client could  *00576000
                         not accommodate the value of the variable.    *00577000
                         Action: Inspect AxrArgLstEntryInError in the  *00578000
                         RexxVars parameter for the index of the       *00579000
                         variable that caused the error. Increase the  *00580000
                         size of the output variable or ensure that    *00581000
                         the variable's size can be accommodated by    *00582000
                         the passed buffer.                             00583000
AXRARGTOOLONG EQU X'0000082E' Meaning: The buffer of the client could  *00584000
                         not accommodate the value of the argument.    *00585000
                         Action: Inspect AxrArgLstEntryInError in the  *00586000
                         RexxArgs parameter for the index of the       *00587000
                         argument that caused the error. Increase the  *00588000
                         size of the output argument or ensure that    *00589000
                         the argument's size can be accommodated by    *00590000
                         the passed buffer.                             00591000
AXRVARBADNAME EQU X'0000082F' Meaning: The name of a variable was not  *00592000
                         acceptable to REXX. Action: Inspect           *00593000
                         AxrArgLstEntryInError in the RexxVars         *00594000
                         parameter for the index of the variable that  *00595000
                         caused the error. Correct the name.            00596000
AXRARGBADNAME EQU X'00000830' Meaning: The name of an argument was not *00597000
                         acceptable to REXX. Action: Inspect           *00598000
                         AxrArgLstEntryInError in the RexxArgs         *00599000
                         parameter for the index of the argument that  *00600000
                         caused the error. Correct the name.            00601000
AXRVARNUMERICTOOBIG EQU X'00000831' Meaning: The value of an output    *00602000
                         variable was either too large or too small    *00603000
                         (negative) to be represented in the storage   *00604000
                         area that was passed. Action: Inspect         *00605000
                         AxrArgLstEntryInError in the RexxVars         *00606000
                         parameter for the index of the variable that  *00607000
                         caused the error.                              00608000
AXRARGNAMECANNOTACCESS EQU X'00000832' Meaning: The argument name was  *00609000
                         not accessible. Action: Inspect               *00610000
                         AxrArgLstEntryInError in the RexxArgs         *00611000
                         parameter for the index of the argument that  *00612000
                         caused the error. Ensure that AxrArgNameAddr  *00613000
                         and AxrArgNameAlet contain the address and    *00614000
                         alet of the argument name. Ensure that the    *00615000
                         argument name is in the same key as the       *00616000
                         invoker.                                       00617000
AXRVARNAMECANNOTACCESS EQU X'00000833' Meaning: The variable name was  *00618000
                         inaccessible and caused a program check when  *00619000
                         System REXX attempted to access. Action:      *00620000
                         Inspect AxrArgLstEntryInError in the RexxVars *00621000
                         parameter for the index of the variable that  *00622000
                         caused the error. Ensure that AxrArgNameAddr  *00623000
                         and AxrArgNameAlet contain the address and    *00624000
                         alet of the variable name. Ensure that the    *00625000
                         variable name is in the same key as the       *00626000
                         invoker.                                       00627000
AXRDIAGCANNOTACCESS EQU X'00000835' Meaning: The value of the RexxDiag *00628000
                         parameter was not accessible. Action: Ensure  *00629000
                         the RexxDiag parameter is in the same key as  *00630000
                         the invoker. Correct the RexxDiag parameter.   00631000
AXRARGNEITHERINOROUT EQU X'00000837' Meaning: A REXX argument is       *00632000
                         neither an input or output argument. Action:  *00633000
                         Inspect AxrArgLstEntryInError in the RexxArgs *00634000
                         parameter for the index of the offending      *00635000
                         argument and set either AXRArgInput,          *00636000
                         AXRArgOutput or both in the argument list     *00637000
                         entry.                                         00638000
AXRVARNEITHERINOROUT EQU X'00000838' Meaning: A REXX variable is       *00639000
                         neither an input or output variable. Action:  *00640000
                         Inspect AxrArgLstEntryInError in the RexxVars *00641000
                         parameter for the index of the offending      *00642000
                         variable and set either AXRArgInput,          *00643000
                         AXRArgOutput or both in the entry in variable *00644000
                         list entry.                                    00645000
AXRARGBADUNSIGNED EQU X'00000839' Meaning: An unsigned output argument *00646000
                         returned from REXX was prefixed with a sign.  *00647000
                         Action: AxrArgLstEntryInError in the RexxArgs *00648000
                         parameter contains the index of the invalid   *00649000
                         argument. Correct the REXX exec to return an  *00650000
                         unsigned value or change the argument to      *00651000
                         signed.                                        00652000
AXRVARBADUNSIGNED EQU X'0000083A' Meaning: An unsigned output variable *00653000
                         returned from REXX was prefixed with a sign.  *00654000
                         Action: AxrArgLstEntryInError in the RexxVars *00655000
                         parameter contains the index of the invalid   *00656000
                         variable. Change the exec to return an        *00657000
                         unsigned value or change the variable to be   *00658000
                         signed.                                        00659000
AXRBADCONSOLENAME EQU X'0000083B' Meaning: The specified CONSNAME      *00660000
                         parameter was syntactically incorrect.        *00661000
                         Action: Correct the syntax of the CONSNAME    *00662000
                         parameter so that it is a syntactically valid *00663000
                         console name.                                  00664000
AXRREXXINNOTAUTH EQU X'0000083E' Meaning: Invoker is not SAF           *00665000
                         authorized to the dataset name specified on   *00666000
                         the RexxInDsn keyword. Action: Either change  *00667000
                         the dataset name or change the security       *00668000
                         environment so that the dataset can be        *00669000
                         accessed.                                      00670000
AXRREXXOUTNOTAUTH EQU X'0000083F' Meaning: Invoker is not SAF          *00671000
                         authorized to the dataset name specified on   *00672000
                         the RexxOutDsn keyword. Action: Either change *00673000
                         the dataset name or change the security       *00674000
                         environment so that the dataset can be        *00675000
                         accessed.                                      00676000
AXRREXXINDSNBAD EQU X'00000840' Meaning: The RexxInDsn specification   *00677000
                         is not syntactically correct. Action: Correct *00678000
                         the input so that it is a valid dataset name.  00679000
AXRREXXOUTDSNBAD EQU X'00000841' Meaning: The RexxOutDsn specification *00680000
                         is not syntactically correct. Action: Correct *00681000
                         the input so that it is a valid dataset name.  00682000
AXRRACROUTEBAD EQU X'00000842' Meaning: RACROUTE VERIFY returned a bad *00683000
                         return code when attempting to create a       *00684000
                         security environment prior to running the     *00685000
                         REXX exec. Action: The SAF return code in     *00686000
                         stored in AXRDIAG1. The RACF return and       *00687000
                         reason codes are stored in AXRDIAG2 and       *00688000
                         AXRDIAG3 respectively (all in the REXXDiag    *00689000
                         parameter). Certain types of address spaces   *00690000
                         do not have a legitimate security environment *00691000
                         and as such the AXREXX invoker may have to     00692000
*                        provide a different UTOKEN or use             *00693000
                         SECURITY=BYAXRUSER.                            00694000
AXRREXXOUTCANNOTOPEN EQU X'00000843' Meaning: A failure occurred when  *00695000
                         attempting to open the dataset specified by   *00696000
                         RexxOutDsn. Action: The return code from      *00697000
                         IRXINOUT is set in AXRDIAG1 in the RexxDiag   *00698000
                         parameter and is documented in z/OS TSO/E     *00699000
                         REXX Reference. Additionally, the REXX        *00700000
                         interpreter may issue messages describing the *00701000
                         error.                                         00702000
AXRREXXINCANNOTOPEN EQU X'00000844' Meaning: A failure occurred when   *00703000
                         attempting to open the dataset specified by   *00704000
                         RexxInDsn. Action: The return code from       *00705000
                         IRXINOUT is set in AXRDIAG1 in the RexxDiag   *00706000
                         parameter and is documented in the z/OS TSO/E *00707000
                         REXX Reference. Additionally, the REXX        *00708000
                         interpreter may issue messages describing the *00709000
                         error.                                         00710000
AXRBADREQUEST EQU X'00000846' Meaning: The AXREXX input pararmeter     *00711000
                         list is incorrect. An invalid request type is *00712000
                         specified. Action: Determine why the AXREXX   *00713000
                         input parameter list is incorrect.             00714000
AXRARGRSVNOTZERO EQU X'00000847' Meaning: A reserved field in the      *00715000
                         AXRARGENTRY mapping was non-zero for the      *00716000
                         RexxArgs AXREXX parameter. Action:            *00717000
                         AxrArgLstEntryInError in the RexxArgs         *00718000
                         parameter contains the index of the entry     *00719000
                         that caused the error. Clear the reserved     *00720000
                         fields.                                        00721000
AXRVARRSVNOTZERO EQU X'00000848' Meaning: A reserved field in the      *00722000
                         AXRARGENTRY mapping was non-zero for the      *00723000
                         RexxVars AXREXX parameter. Action:            *00724000
                         AxrArgLstEntryInError in the RexxVars         *00725000
                         parameter contains the index of the entry     *00726000
                         that caused the error. Clear the reserved     *00727000
                         fields.                                        00728000
AXRBADREQTOKEN EQU X'00000849' Meaning: For a CANCEL request, the      *00729000
                         input Request Token is invalid. Action:       *00730000
                         Correct the invocation to provide a valid     *00731000
                         Request Token.                                 00732000
AXRREXXINNOTSEQ EQU X'0000084A' Meaning: RexxInDsn is a PDS, but       *00733000
                         RexxInMemName is not specified. Action:       *00734000
                         Specify RexxInMemname keyword or change       *00735000
                         RexxInDsn.                                     00736000
AXRREXXINNOTPDS EQU X'0000084B' Meaning: RexxInMemname is specified    *00737000
                         but RexxInDsn is not a PDS. Action: Remove    *00738000
                         RexxInMemname or specify a PDS for RexxInDsn.  00739000
AXRREXXOUTNOTSEQ EQU X'0000084C' Meaning: RexxOutDsn is a PDS, but     *00740000
                         RexxOutMemName is not specified. Action:      *00741000
                         Specify the RexxOutMemName keyword or change  *00742000
                         RexxOutDsn.                                    00743000
AXRREXXOUTNOTPDS EQU X'0000084D' Meaning: RexxOutMemname is specified  *00744000
                         but RexxOutDsn is not a PDS. Action: Remove   *00745000
                         the RexxOutMemName keyword or change the      *00746000
                         specification of RexxOutDsn to a PDS.          00747000
AXRREXXINNOMEMBER EQU X'0000084E' Meaning: RexxInMemname does not      *00748000
                         exist in the dataset specified by RexxInDsn.  *00749000
                         Action: Either create the member or specify a *00750000
                         different RexxInDsn dataset name.              00751000
AXRVARBADVALUE EQU X'00000850' Meaning: The value of an input variable *00752000
                         was not acceptable to REXX. Action: Inspect   *00753000
                         AxrArgLstEntryInError in the RexxVars         *00754000
                         parameter for the index of the variable that  *00755000
                         caused the error.                              00756000
AXREXECNOTFOUND EQU X'00000851' Meaning: The exec was not found in the *00757000
                         System REXX library. Action: Correct the      *00758000
                         spelling of the exec in the NAME keyword.      00759000
AXRVAROUTBADVALUE EQU X'00000852' Meaning: The value of an output      *00760000
                         variable was not acceptable to REXX. Action:  *00761000
                         Inspect AxrArgLstEntryInError in the RexxVars *00762000
                         parameter for the index of the variable that  *00763000
                         caused the error.                              00764000
AXRARGOUTBADVALUE EQU X'00000853' Meaning: The value of an output      *00765000
                         argument was not acceptable to REXX. Action:  *00766000
                         Inspect AxrArgLstEntryInError in the RexxArgs *00767000
                         parameter for the index of the argument that  *00768000
                         caused the error.                              00769000
AXRPARMLISTBADALET EQU X'00000854' Meaning: The ALET of the parmlist   *00770000
                         is invalid. Action: Correct the Alet.          00771000
AXRUTOKENBADALET EQU X'00000855' Meaning: The ALET of the UTOKEN       *00772000
                         parameter is invalid. Action: Correct the     *00773000
                         Alet.                                          00774000
AXRREXXARGSBADALET EQU X'00000856' Meaning: The ALET of the REXXARGS   *00775000
                         parameter is invalid. Action: Correct the     *00776000
                         Alet.                                          00777000
AXRREXXVARSBADALET EQU X'00000857' Meaning: The ALET of the REXXVARS   *00778000
                         parameter is invalid. Action: Correct the     *00779000
                         Alet.                                          00780000
AXRREXXINDSNBADALET EQU X'00000858' Meaning: The ALET of the REXXINDSN *00781000
                         parameter is invalid. Action: Correct the     *00782000
                         Alet.                                          00783000
AXRREXXOUTDSNBADALET EQU X'00000859' Meaning: The ALET of the          *00784000
                         REXXOUTDSN parameter is invalid. Action:      *00785000
                         Correct the Alet.                              00786000
AXRREXXDIAGBADALET EQU X'0000085A' Meaning: The ALET of the REXXDIAG   *00787000
                         parameter is invalid. Action: Correct the     *00788000
                         Alet.                                          00789000
AXRARGBADALET EQU X'0000085B' Meaning: The ALET of the argument entry  *00790000
                         is invalid. Action: Refer to                  *00791000
                         AxrArgLstEntryInError in the RexxArgs         *00792000
                         parameter to determine the index of the       *00793000
                         argument entry whose alet was incorrect.      *00794000
                         Correct AxrArgAlet.                            00795000
AXRARGNAMEBADALET EQU X'0000085C' Meaning: The ALET of the argument    *00796000
                         entry name is invalid. Action: Refer to       *00797000
                         AxrArgLstEntryInError in the RexxArgs         *00798000
                         parameter to determine the index of the       *00799000
                         argument entry name whose alet was incorrect. *00800000
                         Correct AxrArgNameAlet.                        00801000
AXRVARBADALET EQU X'0000085D' Meaning: The ALET of the variable entry  *00802000
                         is invalid. Action: Refer to                  *00803000
                         AxrArgLstEntryInError in the RexxVars         *00804000
                         parameter to determine the index of the       *00805000
                         variable entry whose alet was incorrect.      *00806000
                         Correct AxrArgAlet.                            00807000
AXRVARNAMEBADALET EQU X'0000085E' Meaning: The ALET of the variable    *00808000
                         entry name is invalid. Action: Refer to       *00809000
                         AxrArgLstEntryInError in the RexxVars         *00810000
                         parameter to determine the index of the       *00811000
                         variable entry name whose alet was incorrect. *00812000
                         Correct AxrArgNameAlet.                        00813000
AXRREXXLIBBADALET EQU X'0000085F' Meaning: The ALET of the Rexxlib is  *00814000
                         invalid. Action: Correct the alet.             00815000
AXRBADREXXLIBLEN EQU X'00000860' Meaning: The length specified by      *00816000
                         RexxlibLen keyword is invalid. Action:        *00817000
                         RexxlibLen must be greater than or equal to   *00818000
                         20480.                                         00819000
AXRBADREXXLIB EQU X'00000861' Meaning: A program check occured when    *00820000
                         attempting to access the parameter specified  *00821000
                         by the REXXLIB keyword. Action: Correct the   *00822000
                         Rexxlib keyword.                               00823000
AXRRETCODEENVERROR EQU X'0000000C' Meaning: Environmental error        *00824000
                         Action: Refer to the action provided with the *00825000
                         specific reason code.                          00826000
AXRNOTACTIVE EQU X'00000C01' Meaning: Function is not available.       *00827000
                         Either the AXR address space has terminated   *00828000
                         or has not initialized. Action: Avoid         *00829000
                         requesting this function until the ENF signal *00830000
                         for AXR initialization is issued or message   *00831000
                         AXR0102I is issued. If the AXR address space  *00832000
                         has terminated, it needs to be restarted.      00833000
AXRARGNOSTORAGE EQU X'00000C02' Meaning: No storage is available for a *00834000
                         REXX argument or variable. Action: Reissue    *00835000
                         the AXREXX request after requests that are in *00836000
                         progress complete.                             00837000
AXRALLREQBLOCKSINUSE EQU X'00000C03' Meaning: All the storage          *00838000
                         available to represent REXX requests is in    *00839000
                         use. Action: Reissue the AXREXX request after *00840000
                         requests that are in progress complete.        00841000
AXRTOOMANYREXXREQS EQU X'00000C04' Meaning: The threshold of           *00842000
                         active/waiting REXX requests has been         *00843000
                         exceeded. Action: System REXX will issue ENF  *00844000
                         signal (65) with a qualifier of '10000000'x   *00845000
                         to indicate that it has begun accepting new   *00846000
                         requests. The AXREXX invoker can listen for   *00847000
                         this signal.                                   00848000
AXRBADIWMEREG EQU X'00000C05' Meaning: A bad return code was returned  *00849000
                         from IWMEREG. The return code and reason      *00850000
                         codes from IWMEREG are placed in AXRDIAG1 and *00851000
                         AXRDIAG2 in the RexxDiag parameter            *00852000
                         respectively. Action: Examine the return and  *00853000
                         reason codes from IWMEREG. If no diagnosis is *00854000
                         possible, contact IBM Service.                 00855000
AXRASCREFAILED EQU X'00000C06' Meaning: An attempt to create a server  *00856000
                         address space to run the exec failed. Action: *00857000
                         The return and reason codes from ASCRE are    *00858000
                         stored AxrDiag1 and AxrDiag2 in the RexxDiag  *00859000
                         parameter.                                     00860000
AXRREQCANCELLED EQU X'00000C07' Meaning: The request was cancelled.    *00861000
                         Action: None.                                  00862000
AXREXECREXXENVERROR EQU X'00000C08' Meaning: The REXX Interpreter was  *00863000
                         unable to run the exec. Action: The REXX      *00864000
                         Interpreter issues one or more messages       *00865000
                         describing the problem. If RexxOutDsn was     *00866000
                         specified, look in the dataset for the        *00867000
                         messages. If ConsData was specified and       *00868000
                         RexxOutDsn was not specified, look at the     *00869000
                         console or the system log. If RexxDiag was    *00870000
                         specified, AXRDIAG1, AXRDIAG2, AXRDIAG3 and   *00871000
                         AXRDIAG4 contain the message ids of any        00872000
*                        messages beginning with IRX (REXX) or IKJ     *00873000
                         (TSO) that were issued. The format of the     *00874000
                         message id is packed decimal with the sign    *00875000
                         bits shifted out. A 1 in the high order byte  *00876000
                         distinguishes an IKJ message from an IRX      *00877000
                         message.                                       00878000
AXRBADAXRUSER EQU X'00000C09' Meaning: AXRUSER was improperly defined  *00879000
                         in parmlib member AXR00. Action: Correct      *00880000
                         AXR00 and restart System REXX.                 00881000
AXRTIMEINTEXPIRED EQU X'00000C0A' Meaning: The input time limit        *00882000
                         expired before the exec completed. Action:    *00883000
                         Increase the time limit or modify the exec.    00884000
AXRREQNOTACTIVE EQU X'00000C0B' Meaning: For a CANCEL request, the     *00885000
                         request to be cancelled is no longer active.  *00886000
                         Action: None.                                  00887000
AXRREQALREADYCANCELLED EQU X'00000C0C' Meaning: For a CANCEL request,  *00888000
                         the request to be cancelled is already        *00889000
                         cancelled. Action: None.                       00890000
AXRREXXOUTFAIL EQU X'00000C0D' Meaning: An failure occurred when       *00891000
                         attempting to process the dataset specified   *00892000
                         by the RexxOutDsn parameter. If the failure   *00893000
                         was due to an abend, the abend code is is     *00894000
                         saved in AXRDIAG1 and the abend reason code   *00895000
                         is saved in AXRDIAG2 in the RexxDiag          *00896000
                         parameter. No dump is taken. Action: Look up  *00897000
                         the abend and reason code in z/OS MVS System  *00898000
                         Codes to determine the proper action.          00899000
AXRREXXINFAIL EQU X'00000C0E' Meaning: A failure occurred when         *00900000
                         attempting to process the dataset specified   *00901000
                         by the RexxInDsn parameter. If the failure    *00902000
                         was due to an abend, the abend code is saved  *00903000
                         in AXRDIAG1 and the abend reason code is      *00904000
                         saved in AXRDIAG2 of the RexxDiag parameter.  *00905000
                         No dump is taken. Action: Look up the abend   *00906000
                         and reason code in z/OS MVS System Codes to   *00907000
                         determine the proper action.                   00908000
AXRBADIWMECREA EQU X'00000C0F' Meaning: A bad return code was returned *00909000
                         from IWMECREA. The return code and reason     *00910000
                         codes from IWMESQRY and the return and reason *00911000
                         codes from IWMECREA are placed in AXRDIAG1,   *00912000
                         AXRDIAG2, AXRDIAG3 and AXRDIAG4 respectively  *00913000
                         of the RexxDiag parameter. Action: Inspect    *00914000
                         the return/reason codes from IWMESQRY and     *00915000
                         IWMECREA and look up in the z/OS MVS          *00916000
                         Programming: Workload Management Services. If *00917000
                         the problem cannot be resolved, contact IBM    00918000
*                        Service.                                       00919000
AXRTOOMANYEXTENTS EQU X'00000C10' Meaning: The number of extents for   *00920000
                         all data sets in the REXXLIB concatenation    *00921000
                         exceeds the system limit. SYSREXX cannot      *00922000
                         process any more execs. Action: SYSREXX must  *00923000
                         be stopped. The REXXLIB concatenation must    *00924000
                         then be modified so that the number of        *00925000
                         extents is reduced below the system limit.    *00926000
                         SYSREXX may then be restarted.                 00927000
AXRSTOPTSO EQU X'00000C11' Meaning: MODIFY AXR,SYSREXX STOPTSO was     *00928000
                         invoked to disable TSO=YES processing.        *00929000
                         Action: The request is rejected. To restart   *00930000
                         TSO=YES processing, the following operator    *00931000
                         command must be issued: MODIFY AXR,SYSREXX    *00932000
                         STARTTSO.                                      00933000
AXRSTOPINPROGRESS EQU X'00000C12' Meaning: The STOP AXR command was    *00934000
                         invoked and is being processed. Action: The   *00935000
                         request is rejected. System REXX must be      *00936000
                         restarted before AXREXX can be invoked.        00937000
AXRRETCODECOMPERROR EQU X'00000010' Meaning: Unexpected failure.       *00938000
                         Action: Refer to the action provided with the *00939000
                         specific reason code.                          00940000
AXRREXXSERVERABENDED EQU X'00001001' Meaning: An abend occurred after  *00941000
                         the REXX server began processing the request. *00942000
                         Action: A dump is taken. Contact IBM service.  00943000
AXRBADSERVERRC EQU X'00001002' Meaning: A unexpected return code was   *00944000
                         returned from the REXX server. Action: A dump *00945000
                         is taken. Contact IBM service.                 00946000
AXRREXXCLIENTABENDED EQU X'00001003' Meaning: An abend occurred before *00947000
                         the request was passed to the REXX Server or  *00948000
                         after the request was processed by the REXX   *00949000
                         server. Action: A dump is taken. Contact IBM  *00950000
                         service.                                       00951000
AXREXITABENDED EQU X'00001007' Meaning: An abend occurred in a System  *00952000
                         REXX defined exit which is given control from *00953000
                         the REXX Interpreter. Action: A dump is       *00954000
                         taken. Contact IBM service.                    00955000
AXRADDRSPACETERM EQU X'0000100B' Meaning: The address space created to *00956000
                         run an exec either terminated prior to        *00957000
                         running the exec or during the execution of   *00958000
                         the exec. Action: If the address space was    *00959000
                         cancelled then there is no action. If the     *00960000
                         address space was terminated unexpectedly     *00961000
                         then contact IBM Service.                      00962000
AXRCANCELABENDED EQU X'0000100D' Meaning: An attempt to cancel a       *00963000
                         request resulted in an abend. A dump is       *00964000
                         taken. Action: Contact IBM service.            00965000
AXRREXXINTERPRETERABEND EQU X'0000100F' Meaning: Either the REXX       *00966000
                         interpreter abended or was percolated to.     *00967000
                         Action: Refer to the RexxDiag parameter.      *00968000
                         AxrDiag1 contains either 100 for a user abend *00969000
                         or 104 for a system abend. AxrDiag2 contains  *00970000
                         the abend code. A system dump may be          *00971000
                         produced.                                      00972000
AXRRXLENTRY_LEN EQU *-AXRRXLENTRY                                       00973000
.L000F   ANOP                                                           00974000
         AIF   ('&ZCBPRINT' EQ 'NO').P3                                 00975000
         AIF   ('&LIST' EQ 'YES').P4                                    00976000
.P3      ANOP                                                           00977000
         POP   PRINT                                                    00978000
.P4      ANOP                                                           00979000
.P_EXIT  ANOP                                                           00980000
         MEND                                                           00981000
**/ AXRZARG_2:;                                                         00982000
* %AXRZARG_INCLUDED = 'YES';                                            00983000
* %DCL ZCBPRINT CHAR EXT;                                               00984000
* %DEACTIVATE ZCBPRINT;                                                 00985000
* %DCL AXRZARG_LIST CHAR EXT;                                           00986000
* %DEACTIVATE AXRZARG_LIST;                                             00987000
* %IF AXRZARG_LIST = 'NO' !                                             00988000
*    ZCBPRINT = 'NO' %THEN                                              00989000
* %DO;                                                                  00990000
*   @LIST PUSH NOECHO;                                                  00991000
*   @LIST NOASSEMBLE NOECHO;                                            00992000
*   @LIST OFF C NOECHO;                                                 00993000
* %END;                                                                 00994000
*/* Start of PL/X Source                                             */ 00995000
*                                                                       00996000
*       DECLARE                                                         00997000
*         1    AXRARGLst TYPE,                                          00998000
*           3    AxrArgLstId CHAR(4),   /* Use AxrArgLstAcro for        00999000
*                                          REXXArgLst and               01000000
*                                          AxrVarLstAcro for            01001000
*                                          REXXVarLst            @L1A*/ 01002000
*           3    AxrArgLstVer FIXED(8),                                 01003000
*           3    AxrArgLstRsv1 CHAR(3), /* Reserved - must be 0  @P7C*/ 01004000
*           3    AXRARGLstNumber FIXED(16),/* Number of arguments    */ 01005000
*           3    AXRARGLstEntryInError FIXED(16),/* Output argument in  01006000
*                                      error                         */ 01007000
*           3    AxrArgLstRsv2 CHAR(4), /* Reserved - must be 0  @P7C*/ 01008000
*           3    AxrArgLstEnd CHAR(0);                                  01009000
*       DCL AxrArgLstAcro CHAR(4) CONSTANT('ARGL');                     01010000
*       DCL AxrVarLstAcro CHAR(4) CONSTANT('VARL');                     01011000
*       DCL AxrArgLstCurVer FIXED(8) CONSTANT(0);                       01012000
*       DCL AxrArgLstVer0 FIXED(8) CONSTANT(0); /* Version 0     @P8A*/ 01013000
*       /*************************************************************/ 01014000
*       /*                                                           */ 01015000
*       /* 1 or more ArgLst entries follow                           */ 01016000
*       /*                                                           */ 01017000
*       /*************************************************************/ 01018000
*                                                                       01019000
*       DECLARE                                                         01020000
*         1    AXRARGEntry TYPE,                                        01021000
*           3    AXRARGAddr PTR(64), /* Address of argument          */ 01022000
*             5    AXRARGAddrHigh FIXED(32), /* High half of address */ 01023000
*             5    AXRARGAddrLow PTR(31), /* Low half of address     */ 01024000
*           3    AXRARGNameAddr PTR(64), /* Address of the name of      01025000
*                                      the argument.  This is           01026000
*                                      required for all variables       01027000
*                                      and output arguments          */ 01028000
*             5    AXRARGNameAddrHigh FIXED(32), /* High half of        01029000
*                                      address                       */ 01030000
*             5    AXRARGNameAddrLow PTR(31), /* Low half of address */ 01031000
*           3    AXRARGLength FIXED(32), /* Length of arg/var in        01032000
*                                          bytes                     */ 01033000
*           3    AXRARGAlet FIXED(32), /* Alet of arg/var            */ 01034000
*           3    AXRARGNameAlet FIXED(32), /* Alet of name of arg/var*/ 01035000
*           3    AXRARGOutLength FIXED(32), /* Length of the arg/var    01036000
*                                        copied to the buffer of the    01037000
*                                        caller.  Set by system REXX.   01038000
*                                        For HexString type, this       01039000
*                                        value is in hex digits.  For   01040000
*                                        BitString type, this value     01041000
*                                        is in bits.  For type char,    01042000
*                                        this value is in bytes.  For   01043000
*                                        numeric values, the input      01044000
*                                        length is returned          */ 01045000
*           3    AXRARGNameLength FIXED(8), /* Length of argument       01046000
*                                      name in bytes                 */ 01047000
*           3    AXRARGType FIXED(8), /* Type of arg i.e. signed,       01048000
*                                      unsigned, char, bit or hex.      01049000
*                                      See constant definitions      */ 01050000
*           3    AXRARGInputFlgs1 BIT(8),                               01051000
*             5    AXRARGInput BIT(1), /* Input argument             */ 01052000
*             5    AXRARGOutput BIT(1), /* Output argument           */ 01053000
*             5    AxrArgRes1 BIT(6), /* Reserved - must be 0    @P6C*/ 01054000
*           3    AXRARGRes2 CHAR(5), /* Reserved - must be 0         */ 01055000
*           3    AXRARGEnd CHAR(0); /* End of entry                  */ 01056000
*       DECLARE                                                         01057000
*         AXRARGTypeSigned FIXED(8) CONSTANT(1); /* Argument is         01058000
*                                      signed type. Valid lengths are   01059000
*                                      4 and 8 (in bytes)            */ 01060000
*       DECLARE                                                         01061000
*         AXRARGTypeUnSigned FIXED(8) CONSTANT(2); /* Argument is       01062000
*                                      unsigned type. Valid lengths     01063000
*                                      are 4 and 8 (in bytes)        */ 01064000
*       DECLARE                                                         01065000
*         AXRARGTypeChar FIXED(8) CONSTANT(3); /* Argument is           01066000
*                                      character type. Length must be   01067000
*                                      less than or equal to 512        01068000
*                                      bytes                         */ 01069000
*       DECLARE                                                         01070000
*         AXRARGTypeBITString FIXED(8) CONSTANT(4); /* Argument is bit  01071000
*                                      string type. Length must be      01072000
*                                      less than  or equal to 32 bits   01073000
*                                                                    */ 01074000
*                                                                       01075000
*       DECLARE                                                         01076000
*         AXRARGTypeHexString FIXED(8) CONSTANT(5); /* Argument is hex  01077000
*                                      string  type. Length must be     01078000
*                                      less than  or equal to 512       01079000
*                                      hex digits                    */ 01080000
*       DECLARE                                                         01081000
*         AxrDiagAcro CHAR(4) CONSTANT('AXRD');  /* Acronym for the     01082000
*                                       AXRDiag                  @L6A*/ 01083000
*       DECLARE                                                         01084000
*         AxrDiagVer0 FIXED(8) CONSTANT(0);      /* Original version    01085000
*                                       of AXRDIAG               @PFA*/ 01086000
*       DECLARE                                                         01087000
*         AxrDiagVer1 FIXED(8) CONSTANT(1);      /* Version 1 of        01088000
*                                       AXRDiag                  @PFA*/ 01089000
*       DECLARE                                                         01090000
*         AxrDiagCurVer FIXED(8) CONSTANT(AxrDiagVer1); /* Current      01091000
*                                       version of AXRDIAG       @PFA*/ 01092000
*       DECLARE                                                         01093000
*         1    AXRDiag  TYPE,                                           01094000
*           3    AxrDiagHeader,                                         01095000
*             5    AXRDiagVer FIXED(8), /*                       @PFC*/ 01096000
*             5    AXRDiagFlgs1 BIT(8),                                 01097000
*               7  AxrDiagNoExecRetCode BIT(1), /* When on, indicates   01098000
*                                      that AXREXX was unable to        01099000
*                                      obtain a return code from        01100000
*                                      the exec, because the            01101000
*                                      exec did not return one or       01102000
*                                      because it was too small, large  01103000
*                                      or could not be converted        01104000
*                                      to binary                     */ 01105000
*             5    * CHAR(2),                                           01106000
*           3  AxrDiagData,                                             01107000
*            5  AxrDiagExecRetcode FIXED(31), /* Return code from exec  01108000
*                                                                @L3A*/ 01109000
*            5  AxrDiag1 FIXED(31),                                     01110000
*            5  AxrDiag2 FIXED(31),                                     01111000
*            5  AxrDiag3 FIXED(31),                                     01112000
*            5  AxrDiag4 FIXED(31),                                     01113000
*           3 AxrDiagId CHAR(4),    /* Eye-catcher               @L6A*/ 01114000
*           3 * CHAR(12)            /* Reserved                  @L3A*/ 01115000
*             ;                                                         01116000
*                                                                       01117000
*/*******************************************************************/  01118000
*/* The REXXLIB output parameter is mapped by the AxrRxlHeader      */  01119000
*/* followed by one or more AxrRxlEntry(s) - one for each data set  */  01120000
*/* in the REXXLIB concatenation.                                   */  01121000
*/*******************************************************************/  01122000
*                                                                       01123000
*                                                                       01124000
*   DCL AxrRxlAcro CHAR(4) CONSTANT('AXRR'); /*              @PIC*/     01125000
*   DCL AxrRxlVer0 FIXED(8) CONSTANT(0); /*                  @PHA*/     01126000
*   DCL 1 AxrRxlHeader TYPE BDY(DWORD)                                  01127000
*         ,3 AxrRxlId CHAR(4)                                           01128000
*         ,3 AxrRxlLen FIXED(32)   /* Length of  AxrRxlHeader - use     01129000
*                                     this to access the first          01130000
*                                     entry                     @PGC*/  01131000
*         ,3 AxrRxlConcatNum FIXED(32) /* Number of datasets in the     01132000
*                                    concatenation           @L6A*/     01133000
*         ,3 AxrRxlTotalLen FIXED(32) /* Length of the entire output    01134000
*                                     including AxrRxlHeader and any    01135000
*                                     AxrRxlEntry(s) that follow @L6A*/ 01136000
*         ,3 AxrRxlVer FIXED(8)      /* Version              @PHA*/     01137000
*         ,3 * CHAR(7)               /* Reserved             @PHA*/     01138000
*          ;                                                            01139000
*/*******************************************************************/  01140000
*/* Use AxrRxlEntryLen to access the next AxrRxlEntry from the      */  01141000
*/* prior one.                                                      */  01142000
*/*******************************************************************/  01143000
*   DCL AxrRxlEntryAcro CHAR(4) CONSTANT('RXLE');                       01144000
*   DCL 1 AxrRxlEntry TYPE BDY(DWORD)                                   01145000
*         ,3 AxrRxlEntryId CHAR(4)                                      01146000
*         ,3 AxrRxlEntryLen FIXED(32) /* Length of a single entry -     01147000
*                                    use this to access the next        01148000
*                                    entry                       @L6A*/ 01149000
*         ,3 AxrRxlDsnameLen FIXED(16) /* Length of data set name       01150000
*                                                                @L6A*/ 01151000
*         ,3 AxrRxlDsname CHAR(44)  /* Data set name             @L6A*/ 01152000
*         ,3 AxrRxlVolserLen FIXED(16) /* Length of volser       @L6A*/ 01153000
*         ,3 AxrRxlVolser CHAR(6)   /* Volser                    @L6A*/ 01154000
*         ,3 * CHAR(2)              /* Reserved                  @L6A*/ 01155000
*         ,3 * CHAR(0) BDY(DWORD)   /*                           @L6A*/ 01156000
*        ;                          /*                           @L6A*/ 01157000
*                                                                       01158000
*       DECLARE                                                         01159000
*         1 AxrExit TYPE,                                               01160000
*            3 AxrExitId CHAR(4),   /* Acronym                       */ 01161000
*            3 AxrExitVer FIXED(8), /* Current version is 0          */ 01162000
*            3 *  CHAR(3),          /* Reserved                      */ 01163000
*            3 AxrExitExecName CHAR(8),  /* Name of exec             */ 01164000
*            3 AxrExitNumberOfArgs FIXED(32),                           01165000
*            3 AxrExitArgLst@  PTR(31), /* Address of the Argument      01166000
*                                      list                          */ 01167000
*            3 AxrExitNumberOfVars FIXED(32),                           01168000
*            3 AxrExitVarLst@  PTR(31), /* Address of the Variable list 01169000
*                                      of the caller                 */ 01170000
*                                                                       01171000
*            3 AxrExitRetCode FIXED(31), /* Retcode from AXREXX service 01172000
*                                                                    */ 01173000
*            3 AxrExitRsnCode FIXED(31), /* Rsncode from AXREXX service 01174000
*                                                                    */ 01175000
*            3 AxrExitRexxIn@ PTR(31), /* Address of RexxInDsn   @L1A*/ 01176000
*            3 AxrExitRexxOut@ PTR(31), /* Address of RexxInDsn  @L1A*/ 01177000
*            3 AxrExitCpuTime CHAR(8), /* Total cpu time used for       01178000
*                                         the exec               @P1A*/ 01179000
*            3 AxrExitDiag  ISA(AxrDiag); /* Diag area from AXREXX      01180000
*                                           service                  */ 01181000
*       DECLARE AxrExitAcro CHAR(4) CONSTANT('EXPL');                   01182000
*                                                                       01183000
* DCL AxrRsnCodeMask BIT(32) CONSTANT('0000FFFF'X);   /* Mask to        01184000
*                              isolate external reason code.     @P5A*/ 01185000
*                                                                       01186000
*                                                                       01187000
*/* AXREXX Return and Reason Code definitions                        */ 01188000
*DCL AxrRetCodeOK BIT(32) Constant('00000000'X) ; /*                    01189000
*                        Meaning: AXREXX request successful.            01190000
*                        Action: None required. If RexxDiag was         01191000
*                        specified, AXRDIAG1, AXRDIAG2, AXRDIAG3 and    01192000
*                        AXRDIAG4 contain the message ids of any        01193000
*                        messages beginning with IRX (REXX) or IKJ      01194000
*                        (TSO) that were issued when processing the     01195000
*                        exec. The format of the message id is packed   01196000
*                        decimal with the sign bits shifted out. A 1 in 01197000
*                        the high order byte distinguishes an IKJ       01198000
*                        message from an IRX message.                */ 01199000
*DCL AxrRetcodeError BIT(32) Constant('00000008'X) ; /*                 01200000
*                        Meaning: The AXREXX request failed due to a    01201000
*                        user error.                                    01202000
*                        Action: Refer to the action provided with the  01203000
*                        specific reason code.                       */ 01204000
*DCL AXRNoFrrAllowed BIT(32) Constant('00000801'X) ; /*                 01205000
*                        Meaning: Caller invoked AXREXX with an FRR.    01206000
*                        Action: Remove the FRR and then invoke AXREXX. 01207000
*                                                                    */ 01208000
*DCL AXRNoLocksAllowed BIT(32) Constant('00000802'X) ; /*               01209000
*                        Meaning: Caller invoked AXREXX holding a lock. 01210000
*                        Action: Free the lock and then invoke AXREXX.  01211000
*                                                                    */ 01212000
*DCL AXRNotTcbMode BIT(32) Constant('00000803'X) ; /*                   01213000
*                        Meaning: Caller was not running as a task.     01214000
*                        Action: Move the invocation of AXREXX under a  01215000
*                        task.                                       */ 01216000
*DCL AXRNotAuthorized BIT(32) Constant('00000804'X) ; /*                01217000
*                        Meaning: Caller is not APF authorized, running 01218000
*                        in a system key or in supervisor state.        01219000
*                        Action: Avoid invoking AXREXX in this          01220000
*                        environment.                                */ 01221000
*DCL AXRNotEnabled BIT(32) Constant('00000805'X) ; /*                   01222000
*                        Meaning: Caller is disabled.                   01223000
*                        Action: Avoid invoking AXREXX in this          01224000
*                        environment.                                */ 01225000
*DCL AXRRexxArgsCannotAccess BIT(32) Constant('00000806'X) ; /*         01226000
*                        Meaning: The RexxArgs parameter is not         01227000
*                        accessible.                                    01228000
*                        Action: Verify that the RexxArgs parameter is  01229000
*                        accessible and in the key in which AXREXX was  01230000
*                        invoked.                                    */ 01231000
*DCL AXRArgCannotAccess BIT(32) Constant('00000807'X) ; /*              01232000
*                        Meaning: An argument in the argument list      01233000
*                        cannot be accessed.                            01234000
*                        Action: Refer to AxrArgLstEntryInError in the  01235000
*                        RexxArgs parameter to determine the index of   01236000
*                        the argument that was not accessible. Ensure   01237000
*                        that AxrArgAddr and AxrArgAlet contain the     01238000
*                        address and alet of the argument. Ensure that  01239000
*                        the argument is in the same key as the         01240000
*                        invoker.                                    */ 01241000
*DCL AxrArgBadLength BIT(32) Constant('00000808'X) ; /*                 01242000
*                        Meaning: The length of an argument is not      01243000
*                        valid.                                         01244000
*                        Action: Refer to AxrArgLstEntryInError in the  01245000
*                        RexxArgs parameter to determine the index of   01246000
*                        the argument whose length was incorrect.       01247000
*                        Correct AxrArgLength.                       */ 01248000
*DCL AxrArgBadType BIT(32) Constant('00000809'X) ; /*                   01249000
*                        Meaning: Type of an argument is invalid.       01250000
*                        Action: Refer to AxrArgLstEntryInError in the  01251000
*                        RexxArgs parameter to determine the index of   01252000
*                        the argument whose type is incorrect. Correct  01253000
*                        AxrArgType with one of the valid types listed  01254000
*                        in AXRZARG.                                 */ 01255000
*DCL AXRPlistCannotAccess BIT(32) Constant('0000080A'X) ; /*            01256000
*                        Meaning: The input parameter list was not      01257000
*                        accessible                                     01258000
*                        Action: Verify that the input parameter list   01259000
*                        is in the same key as the invoker. Verify that 01260000
*                        it is accessible.                           */ 01261000
*DCL AxrArgTooMany BIT(32) Constant('0000080B'X) ; /*                   01262000
*                        Meaning: Too many arguments were specified.    01263000
*                        Action: Verify the contents of AxrArgLstNumber 01264000
*                        in the RexxArgs parameter. The maximum         01265000
*                        possible value is 20.                       */ 01266000
*DCL AxrArgBadNumeric BIT(32) Constant('0000080C'X) ; /*                01267000
*                        Meaning: An output argument from a REXX exec   01268000
*                        is not numeric.                                01269000
*                        Action: Refer to AxrArgLstEntryInError in the  01270000
*                        RexxArgs parameter for the index of the        01271000
*                        invalid argument. Make sure that the REXX exec 01272000
*                        did not return a value in scientific notation. 01273000
*                                                                    */ 01274000
*DCL AXRArgBadBitString BIT(32) Constant('0000080D'X) ; /*              01275000
*                        Meaning: An output argument from a REXX exec   01276000
*                        is not a bit string.                           01277000
*                        Action: Refer to AxrArgLstEntryInError in the  01278000
*                        RexxArgs parameter for the index of the        01279000
*                        invalid argument. Correct the exec or change   01280000
*                        AxrArgType.                                 */ 01281000
*DCL AXRArgBadHexString BIT(32) Constant('0000080E'X) ; /*              01282000
*                        Meaning: An output argument from a REXX exec   01283000
*                        is not a hex string.                           01284000
*                        Action: Refer to AxrArgLstEntryInError in the  01285000
*                        RexxArgs parameter for the index of the        01286000
*                        invalid argument. Correct the exec or change   01287000
*                        AxrArgType.                                 */ 01288000
*DCL AXRArgBadNameLength BIT(32) Constant('00000810'X) ; /*             01289000
*                        Meaning: The length of the name of an argument 01290000
*                        is too long.                                   01291000
*                        Action: Refer to AxrArgLstEntryInError in the  01292000
*                        RexxArgs parameter for the index of the        01293000
*                        invalid argument. Correct AxrArgNameLength. */ 01294000
*DCL AXRNotAbleToAllocateRexxInDsn BIT(32) Constant('00000811'X) ; /*   01295000
*                        Meaning: System REXX was unable to allocate    01296000
*                        the REXXINDsn dataset.                         01297000
*                        Action: The return and reason codes from       01298000
*                        DYNALLOC are inserted into AXRDIAG1 and        01299000
*                        AXRDIAG2 in the RexxDiag parameter. Look up    01300000
*                        the return/reason codes in the z/OS MVS        01301000
*                        Authorized Assembler Services Guide. Look in   01302000
*                        the System Log for any messages that were      01303000
*                        issued by DYNALLOC.                         */ 01304000
*DCL AXRNotAbleToAllocateRexxOutDsn BIT(32) Constant('00000812'X) ; /*  01305000
*                        Meaning: System REXX was unable to allocate    01306000
*                        the RexxOutDsn dataset.                        01307000
*                        Action: The return and reason codes from       01308000
*                        DYNALLOC are inserted into AXRDIAG1 and        01309000
*                        AXRDIAG2 in the RexxDiag parameter. Look up    01310000
*                        the return/reason codes in the z/OS MVS        01311000
*                        Authorized Assembler Services Guide. Look in   01312000
*                        the System Log for any messages that were      01313000
*                        issued by DYNALLOC.                         */ 01314000
*DCL AXRUtokenCannotAccess BIT(32) Constant('00000813'X) ; /*           01315000
*                        Meaning: Unable to access the Utoken input     01316000
*                        parameter.                                     01317000
*                        Action: Ensure that the Utoken input parameter 01318000
*                        is in the key of the AXREXX invoker and that   01319000
*                        it is accessible.                           */ 01320000
*DCL AXRRexxInDsnCannotAccess BIT(32) Constant('00000814'X) ; /*        01321000
*                        Meaning: Unable to access the RexxInDsn input  01322000
*                        parameter.                                     01323000
*                        Action: Ensure that the RexxInDsn input        01324000
*                        parameter is in the key of the AXREXX invoker  01325000
*                        and that it is accessible.                  */ 01326000
*DCL AXRRexxOutDsnCannotAccess BIT(32) Constant('00000815'X) ; /*       01327000
*                        Meaning: Unable to access the RexxOutDsn input 01328000
*                        parameter.                                     01329000
*                        Action: Ensure that the RexxOutDsn input       01330000
*                        parameter is in the key of the AXREXX invoker  01331000
*                        and that it is accessible.                  */ 01332000
*DCL AXRRexxVarsCannotAccess BIT(32) Constant('00000816'X) ; /*         01333000
*                        Meaning: The RexxVars parameter is not         01334000
*                        accessible.                                    01335000
*                        Action: Verify that the RexxVars parameter is  01336000
*                        accessible and in the key in which AXREXX was  01337000
*                        invoked.                                    */ 01338000
*DCL AXRBadTimeInt BIT(32) Constant('00000817'X) ; /*                   01339000
*                        Meaning: The value of the Timeint keyword is   01340000
*                        invalid.                                       01341000
*                        Action: Ensure that the value of the TimeInt   01342000
*                        keyword is less than 21474536 seconds.      */ 01343000
*DCL AXRArgBadAcronym BIT(32) Constant('00000818'X) ; /*                01344000
*                        Meaning: The acronym for the RexxArgs keyword  01345000
*                        is incorrect.                                  01346000
*                        Action: Ensure that AxrArgLstId is set to      01347000
*                        AxrArgLstAcro.                              */ 01348000
*DCL AXRVarBadAcronym BIT(32) Constant('00000819'X) ; /*                01349000
*                        Meaning: The acronym for the RexxVars keyword  01350000
*                        is incorrect.                                  01351000
*                        Action: Ensure that AxrArgLstId is set to      01352000
*                        AxrVarLstAcro.                              */ 01353000
*DCL AXRArgBadVersion BIT(32) Constant('0000081A'X) ; /*                01354000
*                        Meaning: The version for the RexxArgs keyword  01355000
*                        is incorrect.                                  01356000
*                        Action: Ensure that version is one that is     01357000
*                        supported.                                  */ 01358000
*DCL AXRVarBadVersion BIT(32) Constant('0000081B'X) ; /*                01359000
*                        Meaning: The version for the RexxVars keyword  01360000
*                        is incorrect.                                  01361000
*                        Action: Ensure that the version is one that is 01362000
*                        supported.                                  */ 01363000
*DCL AxrVarTooMany BIT(32) Constant('0000081C'X) ; /*                   01364000
*                        Meaning: Too many variables were specified.    01365000
*                        Action: Verify the contents of AxrArgLstNumber 01366000
*                        in the RexxVars parameter. The maximum         01367000
*                        possible value is 256.                      */ 01368000
*DCL AxrVarBadNumeric BIT(32) Constant('0000081D'X) ; /*                01369000
*                        Meaning: An output variable from a REXX exec   01370000
*                        is not numeric.                                01371000
*                        Action: Refer to AxrArgLstEntryInError in the  01372000
*                        RexxVars parameter for the index of the        01373000
*                        invalid variable. Make sure that the REXX exec 01374000
*                        did not return a value in scientific notation. 01375000
*                                                                    */ 01376000
*DCL AXRVarBadBitString BIT(32) Constant('0000081E'X) ; /*              01377000
*                        Meaning: An output variable from a REXX exec   01378000
*                        is not a bit string.                           01379000
*                        Action: Refer to AxrArgLstEntryInError in the  01380000
*                        RexxVars parameter for the index of the        01381000
*                        invalid variable. Correct the exec or change   01382000
*                        AxrArgType.                                 */ 01383000
*DCL AXRVarBadHexString BIT(32) Constant('0000081F'X) ; /*              01384000
*                        Meaning: An output variable from a REXX exec   01385000
*                        is not a hex string.                           01386000
*                        Action: Refer to AxrArgLstEntryInError in the  01387000
*                        RexxVars parameter for the index of the        01388000
*                        invalid variable. Correct the exec or change   01389000
*                        AxrArgType.                                 */ 01390000
*DCL AXRVarBadNameLength BIT(32) Constant('00000820'X) ; /*             01391000
*                        Meaning: The length of the name of a variable  01392000
*                        is too long.                                   01393000
*                        Action: Refer to AxrArgLstEntryInError in the  01394000
*                        RexxVars parameter for the index of the        01395000
*                        invalid variable. Correct AxrArgNameLength. */ 01396000
*DCL AXRVarBadType BIT(32) Constant('00000821'X) ; /*                   01397000
*                        Meaning: The type specification for a variable 01398000
*                        is invalid.                                    01399000
*                        Action: Refer to AxrArgLstEntryInError in the  01400000
*                        RexxVars parameter for the index of the        01401000
*                        invalid variable. Correct AxrArgType with one  01402000
*                        of the valid types listed in AXRZARG.       */ 01403000
*DCL AXRVarCannotAccess BIT(32) Constant('00000822'X) ; /*              01404000
*                        Meaning: A variable could not be accessed.     01405000
*                        Action: Refer to AxrArgLstEntryInError in the  01406000
*                        RexxVars parameter for the index of the        01407000
*                        variable that could not be accessed. Ensure    01408000
*                        that AxrArgAddr and AxrArgAlet contain the     01409000
*                        address and alet of the variable. Ensure that  01410000
*                        the variable is in the same key as the         01411000
*                        invoker.                                    */ 01412000
*DCL AXRVarBadLength BIT(32) Constant('00000823'X) ; /*                 01413000
*                        Meaning: The length of a variable was invalid. 01414000
*                        Action: Refer to AxrArgLstEntryInError in the  01415000
*                        RexxVars parameter for the index of the        01416000
*                        variable whose length is invalid. Correct      01417000
*                        AxrArgLength.                               */ 01418000
*DCL AXRArgLstRsvNotZero BIT(32) Constant('00000824'X) ; /*             01419000
*                        Meaning: A reserved field in the AXRARGLST     01420000
*                        mapping was non-zero for the RexxArgs AXREXX   01421000
*                        parameter.                                     01422000
*                        Action: Clear the reserved fields in the       01423000
*                        AXRARGLST mapping.                          */ 01424000
*DCL AXRVarLstRsvNotZero BIT(32) Constant('00000825'X) ; /*             01425000
*                        Meaning: A reserved field in the AXRARGLST     01426000
*                        mapping was non-zero for the RexxVars AXREXX   01427000
*                        parameter.                                     01428000
*                        Action: Clear the reserved fields in the       01429000
*                        AXRARGLST mapping.                          */ 01430000
*DCL AXRNotAbleToUnallocateRexxInDsn BIT(32) Constant('00000826'X) ; /* 01431000
*                        Meaning: A bad return code was returned from   01432000
*                        DYNALLOC when attempting to unallocate the     01433000
*                        RexxinDsn dataset.                             01434000
*                        Action: The return and reason codes from       01435000
*                        DYNALLOC are inserted into AXRDIAG1 and        01436000
*                        AXRDIAG2 in the RexxDiag parameter. Look in    01437000
*                        the System Log for any messages that DYNALLOC  01438000
*                        may have issued.                            */ 01439000
*DCL AXRNotAbleToUnallocateRexxOutDsn BIT(32) Constant('00000827'X)     01440000
*                        ; /*                                           01441000
*                        Meaning: A bad return code was returned from   01442000
*                        DYNALLOC when attempting to unallocate the     01443000
*                        RexxOutDsn dataset.                            01444000
*                        Action: The return and reason codes from       01445000
*                        DYNALLOC are inserted into AXRDIAG1 and        01446000
*                        AXRDIAG2 in the RexxDiag parameter. Look in    01447000
*                        the System Log for any messages that DYNALLOC  01448000
*                        may have issued.                            */ 01449000
*DCL AXRExecSyntaxError BIT(32) Constant('00000828'X) ; /*              01450000
*                        Meaning: A syntax error or some other run time 01451000
*                        error was encountered during the execution of  01452000
*                        a REXX exec.                                   01453000
*                        Action: The REXX interpreter issues one or     01454000
*                        more error messages that indicate the          01455000
*                        offending line number. If RexxOutDsn is        01456000
*                        specified, look at the dataset for the         01457000
*                        message. If RexxOutDsn is not specified but    01458000
*                        ConsData is specified, look at the console or  01459000
*                        the system log. If RexxDiag is specified,      01460000
*                        AXRDIAG1 contains the number of the error      01461000
*                        which corresponds to an IRXnnnI message,       01462000
*                        AXRDIAG2 contains the line number where the    01463000
*                        error occurred and AXRDIAG3 and AXRDIAG4       01464000
*                        contain the message ids of the last two IRX or 01465000
*                        IKJ messages that were issued before the exec  01466000
*                        completed. All of these values are in packed   01467000
*                        decimal format with the sign bits shifted out. 01468000
*                        A 1 in the high order byte distinguishes an    01469000
*                        IKJ message from an IRX message.            */ 01470000
*DCL AXRArgNumericTooBig BIT(32) Constant('0000082A'X) ; /*             01471000
*                        Meaning: The value of an output argument was   01472000
*                        either too large or too small (negative) to be 01473000
*                        represented in the storage area that was       01474000
*                        passed.                                        01475000
*                        Action: Inspect AxrArgLstEntryInError in the   01476000
*                        RexxArgs parameter for the index of the        01477000
*                        argument that caused the error.             */ 01478000
*DCL AXRVarNoExist BIT(32) Constant('0000082B'X) ; /*                   01479000
*                        Meaning: The output variable was not set in    01480000
*                        the exec.                                      01481000
*                        Action: Inspect AxrArgLstEntryInError in the   01482000
*                        RexxVars parameter for the index of the        01483000
*                        variable that caused the error. Determine why  01484000
*                        this variable was not set in the exec.      */ 01485000
*DCL AXRArgNoExist BIT(32) Constant('0000082C'X) ; /*                   01486000
*                        Meaning: The output argument was not set in    01487000
*                        the exec.                                      01488000
*                        Action: Inspect AxrArgLstEntryInError in the   01489000
*                        RexxArgs parameter for the index of the        01490000
*                        argument that caused the error. Determine why  01491000
*                        this argument was not set in the exec.      */ 01492000
*DCL AXRVarTooLong BIT(32) Constant('0000082D'X) ; /*                   01493000
*                        Meaning: The buffer of the client could not    01494000
*                        accommodate the value of the variable.         01495000
*                        Action: Inspect AxrArgLstEntryInError in the   01496000
*                        RexxVars parameter for the index of the        01497000
*                        variable that caused the error. Increase the   01498000
*                        size of the output variable or ensure that the 01499000
*                        variable's size can be accommodated by the     01500000
*                        passed buffer.                              */ 01501000
*DCL AXRArgTooLong BIT(32) Constant('0000082E'X) ; /*                   01502000
*                        Meaning: The buffer of the client could not    01503000
*                        accommodate the value of the argument.         01504000
*                        Action: Inspect AxrArgLstEntryInError in the   01505000
*                        RexxArgs parameter for the index of the        01506000
*                        argument that caused the error. Increase the   01507000
*                        size of the output argument or ensure that the 01508000
*                        argument's size can be accommodated by the     01509000
*                        passed buffer.                              */ 01510000
*DCL AXRVarBadName BIT(32) Constant('0000082F'X) ; /*                   01511000
*                        Meaning: The name of a variable was not        01512000
*                        acceptable to REXX.                            01513000
*                        Action: Inspect AxrArgLstEntryInError in the   01514000
*                        RexxVars parameter for the index of the        01515000
*                        variable that caused the error. Correct the    01516000
*                        name.                                       */ 01517000
*DCL AXRArgBadName BIT(32) Constant('00000830'X) ; /*                   01518000
*                        Meaning: The name of an argument was not       01519000
*                        acceptable to REXX.                            01520000
*                        Action: Inspect AxrArgLstEntryInError in the   01521000
*                        RexxArgs parameter for the index of the        01522000
*                        argument that caused the error. Correct the    01523000
*                        name.                                       */ 01524000
*DCL AXRVarNumericTooBig BIT(32) Constant('00000831'X) ; /*             01525000
*                        Meaning: The value of an output variable was   01526000
*                        either too large or too small (negative) to be 01527000
*                        represented in the storage area that was       01528000
*                        passed.                                        01529000
*                        Action: Inspect AxrArgLstEntryInError in the   01530000
*                        RexxVars parameter for the index of the        01531000
*                        variable that caused the error.             */ 01532000
*DCL AXRArgNameCannotAccess BIT(32) Constant('00000832'X) ; /*          01533000
*                        Meaning: The argument name was not accessible. 01534000
*                        Action: Inspect AxrArgLstEntryInError in the   01535000
*                        RexxArgs parameter for the index of the        01536000
*                        argument that caused the error. Ensure that    01537000
*                        AxrArgNameAddr and AxrArgNameAlet contain the  01538000
*                        address and alet of the argument name. Ensure  01539000
*                        that the argument name is in the same key as   01540000
*                        the invoker.                                */ 01541000
*DCL AXRVarNameCannotAccess BIT(32) Constant('00000833'X) ; /*          01542000
*                        Meaning: The variable name was inaccessible    01543000
*                        and caused a program check when System REXX    01544000
*                        attempted to access.                           01545000
*                        Action: Inspect AxrArgLstEntryInError in the   01546000
*                        RexxVars parameter for the index of the        01547000
*                        variable that caused the error. Ensure that    01548000
*                        AxrArgNameAddr and AxrArgNameAlet contain the  01549000
*                        address and alet of the variable name. Ensure  01550000
*                        that the variable name is in the same key as   01551000
*                        the invoker.                                */ 01552000
*DCL AXRDiagCannotAccess BIT(32) Constant('00000835'X) ; /*             01553000
*                        Meaning: The value of the RexxDiag parameter   01554000
*                        was not accessible.                            01555000
*                        Action: Ensure the RexxDiag parameter is in    01556000
*                        the same key as the invoker. Correct the       01557000
*                        RexxDiag parameter.                         */ 01558000
*DCL AXRArgNeitherInOrOut BIT(32) Constant('00000837'X) ; /*            01559000
*                        Meaning: A REXX argument is neither an input   01560000
*                        or output argument.                            01561000
*                        Action: Inspect AxrArgLstEntryInError in the   01562000
*                        RexxArgs parameter for the index of the        01563000
*                        offending argument and set either AXRArgInput, 01564000
*                        AXRArgOutput or both in the argument list      01565000
*                        entry.                                      */ 01566000
*DCL AXRVarNeitherInOrOut BIT(32) Constant('00000838'X) ; /*            01567000
*                        Meaning: A REXX variable is neither an input   01568000
*                        or output variable.                            01569000
*                        Action: Inspect AxrArgLstEntryInError in the   01570000
*                        RexxVars parameter for the index of the        01571000
*                        offending variable and set either AXRArgInput, 01572000
*                        AXRArgOutput or both in the entry in variable  01573000
*                        list entry.                                 */ 01574000
*DCL AXRArgBadUnsigned BIT(32) Constant('00000839'X) ; /*               01575000
*                        Meaning: An unsigned output argument returned  01576000
*                        from REXX was prefixed with a sign.            01577000
*                        Action: AxrArgLstEntryInError in the RexxArgs  01578000
*                        parameter contains the index of the invalid    01579000
*                        argument. Correct the REXX exec to return an   01580000
*                        unsigned value or change the argument to       01581000
*                        signed.                                     */ 01582000
*DCL AXRVarBadUnsigned BIT(32) Constant('0000083A'X) ; /*               01583000
*                        Meaning: An unsigned output variable returned  01584000
*                        from REXX was prefixed with a sign.            01585000
*                        Action: AxrArgLstEntryInError in the RexxVars  01586000
*                        parameter contains the index of the invalid    01587000
*                        variable. Change the exec to return an         01588000
*                        unsigned value or change the variable to be    01589000
*                        signed.                                     */ 01590000
*DCL AXRBadConsoleName BIT(32) Constant('0000083B'X) ; /*               01591000
*                        Meaning: The specified CONSNAME parameter was  01592000
*                        syntactically incorrect.                       01593000
*                        Action: Correct the syntax of the CONSNAME     01594000
*                        parameter so that it is a syntactically valid  01595000
*                        console name.                               */ 01596000
*DCL AXRRexxInNotAuth BIT(32) Constant('0000083E'X) ; /*                01597000
*                        Meaning: Invoker is not SAF authorized to the  01598000
*                        dataset name specified on the RexxInDsn        01599000
*                        keyword.                                       01600000
*                        Action: Either change the dataset name or      01601000
*                        change the security environment so that the    01602000
*                        dataset can be accessed.                    */ 01603000
*DCL AXRRexxOutNotAuth BIT(32) Constant('0000083F'X) ; /*               01604000
*                        Meaning: Invoker is not SAF authorized to the  01605000
*                        dataset name specified on the RexxOutDsn       01606000
*                        keyword.                                       01607000
*                        Action: Either change the dataset name or      01608000
*                        change the security environment so that the    01609000
*                        dataset can be accessed.                    */ 01610000
*DCL AXRRexxInDsnBad BIT(32) Constant('00000840'X) ; /*                 01611000
*                        Meaning: The RexxInDsn specification is not    01612000
*                        syntactically correct.                         01613000
*                        Action: Correct the input so that it is a      01614000
*                        valid dataset name.                         */ 01615000
*DCL AXRRexxOutDsnBad BIT(32) Constant('00000841'X) ; /*                01616000
*                        Meaning: The RexxOutDsn specification is not   01617000
*                        syntactically correct.                         01618000
*                        Action: Correct the input so that it is a      01619000
*                        valid dataset name.                         */ 01620000
*DCL AXRRacrouteBad BIT(32) Constant('00000842'X) ; /*                  01621000
*                        Meaning: RACROUTE VERIFY returned a bad return 01622000
*                        code when attempting to create a security      01623000
*                        environment prior to running the REXX exec.    01624000
*                        Action: The SAF return code in stored in       01625000
*                        AXRDIAG1. The RACF return and reason codes are 01626000
*                        stored in AXRDIAG2 and AXRDIAG3 respectively   01627000
*                        (all in the REXXDiag parameter). Certain types 01628000
*                        of address spaces do not have a legitimate     01629000
*                        security environment and as such the AXREXX    01630000
*                        invoker may have to provide a different UTOKEN 01631000
*                        or use SECURITY=BYAXRUSER.                  */ 01632000
*DCL AXRRexxOutCannotOpen BIT(32) Constant('00000843'X) ; /*            01633000
*                        Meaning: A failure occurred when attempting to 01634000
*                        open the dataset specified by RexxOutDsn.      01635000
*                        Action: The return code from IRXINOUT is set   01636000
*                        in AXRDIAG1 in the RexxDiag parameter and is   01637000
*                        documented in z/OS TSO/E REXX Reference.       01638000
*                        Additionally, the REXX interpreter may issue   01639000
*                        messages describing the error.              */ 01640000
*DCL AXRRexxInCannotOpen BIT(32) Constant('00000844'X) ; /*             01641000
*                        Meaning: A failure occurred when attempting to 01642000
*                        open the dataset specified by RexxInDsn.       01643000
*                        Action: The return code from IRXINOUT is set   01644000
*                        in AXRDIAG1 in the RexxDiag parameter and is   01645000
*                        documented in the z/OS TSO/E REXX Reference.   01646000
*                        Additionally, the REXX interpreter may issue   01647000
*                        messages describing the error.              */ 01648000
*DCL AXRBadRequest BIT(32) Constant('00000846'X) ; /*                   01649000
*                        Meaning: The AXREXX input pararmeter list is   01650000
*                        incorrect. An invalid request type is          01651000
*                        specified.                                     01652000
*                        Action: Determine why the AXREXX input         01653000
*                        parameter list is incorrect.                */ 01654000
*DCL AXRArgRsvNotZero BIT(32) Constant('00000847'X) ; /*                01655000
*                        Meaning: A reserved field in the AXRARGENTRY   01656000
*                        mapping was non-zero for the RexxArgs AXREXX   01657000
*                        parameter.                                     01658000
*                        Action: AxrArgLstEntryInError in the RexxArgs  01659000
*                        parameter contains the index of the entry that 01660000
*                        caused the error. Clear the reserved fields.   01661000
*                                                                    */ 01662000
*DCL AXRVarRsvNotZero BIT(32) Constant('00000848'X) ; /*                01663000
*                        Meaning: A reserved field in the AXRARGENTRY   01664000
*                        mapping was non-zero for the RexxVars AXREXX   01665000
*                        parameter.                                     01666000
*                        Action: AxrArgLstEntryInError in the RexxVars  01667000
*                        parameter contains the index of the entry that 01668000
*                        caused the error. Clear the reserved fields.   01669000
*                                                                    */ 01670000
*DCL AXRBadReqToken BIT(32) Constant('00000849'X) ; /*                  01671000
*                        Meaning: For a CANCEL request, the input       01672000
*                        Request Token is invalid.                      01673000
*                        Action: Correct the invocation to provide a    01674000
*                        valid Request Token.                        */ 01675000
*DCL AXRRexxInNotSeq BIT(32) Constant('0000084A'X) ; /*                 01676000
*                        Meaning: RexxInDsn is a PDS, but RexxInMemName 01677000
*                        is not specified.                              01678000
*                        Action: Specify RexxInMemname keyword or       01679000
*                        change RexxInDsn.                           */ 01680000
*DCL AXRRexxInNotPDS BIT(32) Constant('0000084B'X) ; /*                 01681000
*                        Meaning: RexxInMemname is specified but        01682000
*                        RexxInDsn is not a PDS.                        01683000
*                        Action: Remove RexxInMemname or specify a PDS  01684000
*                        for RexxInDsn.                              */ 01685000
*DCL AXRRexxOutNotSeq BIT(32) Constant('0000084C'X) ; /*                01686000
*                        Meaning: RexxOutDsn is a PDS, but              01687000
*                        RexxOutMemName is not specified.               01688000
*                        Action: Specify the RexxOutMemName keyword or  01689000
*                        change RexxOutDsn.                          */ 01690000
*DCL AXRRexxOutNotPDS BIT(32) Constant('0000084D'X) ; /*                01691000
*                        Meaning: RexxOutMemname is specified but       01692000
*                        RexxOutDsn is not a PDS.                       01693000
*                        Action: Remove the RexxOutMemName keyword or   01694000
*                        change the specification of RexxOutDsn to a    01695000
*                        PDS.                                        */ 01696000
*DCL AXRRexxInNoMember BIT(32) Constant('0000084E'X) ; /*               01697000
*                        Meaning: RexxInMemname does not exist in the   01698000
*                        dataset specified by RexxInDsn.                01699000
*                        Action: Either create the member or specify a  01700000
*                        different RexxInDsn dataset name.           */ 01701000
*DCL AXRVarBadValue BIT(32) Constant('00000850'X) ; /*                  01702000
*                        Meaning: The value of an input variable was    01703000
*                        not acceptable to REXX.                        01704000
*                        Action: Inspect AxrArgLstEntryInError in the   01705000
*                        RexxVars parameter for the index of the        01706000
*                        variable that caused the error.             */ 01707000
*DCL AXRExecNotFound BIT(32) Constant('00000851'X) ; /*                 01708000
*                        Meaning: The exec was not found in the System  01709000
*                        REXX library.                                  01710000
*                        Action: Correct the spelling of the exec in    01711000
*                        the NAME keyword.                           */ 01712000
*DCL AXRVarOutBadValue BIT(32) Constant('00000852'X) ; /*               01713000
*                        Meaning: The value of an output variable was   01714000
*                        not acceptable to REXX.                        01715000
*                        Action: Inspect AxrArgLstEntryInError in the   01716000
*                        RexxVars parameter for the index of the        01717000
*                        variable that caused the error.             */ 01718000
*DCL AXRArgOutBadValue BIT(32) Constant('00000853'X) ; /*               01719000
*                        Meaning: The value of an output argument was   01720000
*                        not acceptable to REXX.                        01721000
*                        Action: Inspect AxrArgLstEntryInError in the   01722000
*                        RexxArgs parameter for the index of the        01723000
*                        argument that caused the error.             */ 01724000
*DCL AXRParmlistBadAlet BIT(32) Constant('00000854'X) ; /*              01725000
*                        Meaning: The ALET of the parmlist is invalid.  01726000
*                        Action: Correct the Alet.                   */ 01727000
*DCL AXRUtokenBadAlet BIT(32) Constant('00000855'X) ; /*                01728000
*                        Meaning: The ALET of the UTOKEN parameter is   01729000
*                        invalid.                                       01730000
*                        Action: Correct the Alet.                   */ 01731000
*DCL AXRRexxArgsBadAlet BIT(32) Constant('00000856'X) ; /*              01732000
*                        Meaning: The ALET of the REXXARGS parameter is 01733000
*                        invalid.                                       01734000
*                        Action: Correct the Alet.                   */ 01735000
*DCL AXRRexxVarsBadAlet BIT(32) Constant('00000857'X) ; /*              01736000
*                        Meaning: The ALET of the REXXVARS parameter is 01737000
*                        invalid.                                       01738000
*                        Action: Correct the Alet.                   */ 01739000
*DCL AXRRexxInDsnBadAlet BIT(32) Constant('00000858'X) ; /*             01740000
*                        Meaning: The ALET of the REXXINDSN parameter   01741000
*                        is invalid.                                    01742000
*                        Action: Correct the Alet.                   */ 01743000
*DCL AXRRexxOutDsnBadAlet BIT(32) Constant('00000859'X) ; /*            01744000
*                        Meaning: The ALET of the REXXOUTDSN parameter  01745000
*                        is invalid.                                    01746000
*                        Action: Correct the Alet.                   */ 01747000
*DCL AXRRexxDiagBadAlet BIT(32) Constant('0000085A'X) ; /*              01748000
*                        Meaning: The ALET of the REXXDIAG parameter is 01749000
*                        invalid.                                       01750000
*                        Action: Correct the Alet.                   */ 01751000
*DCL AXRArgBadAlet BIT(32) Constant('0000085B'X) ; /*                   01752000
*                        Meaning: The ALET of the argument entry is     01753000
*                        invalid.                                       01754000
*                        Action: Refer to AxrArgLstEntryInError in the  01755000
*                        RexxArgs parameter to determine the index of   01756000
*                        the argument entry whose alet was incorrect.   01757000
*                        Correct AxrArgAlet.                         */ 01758000
*DCL AXRArgNameBadAlet BIT(32) Constant('0000085C'X) ; /*               01759000
*                        Meaning: The ALET of the argument entry name   01760000
*                        is invalid.                                    01761000
*                        Action: Refer to AxrArgLstEntryInError in the  01762000
*                        RexxArgs parameter to determine the index of   01763000
*                        the argument entry name whose alet was         01764000
*                        incorrect. Correct AxrArgNameAlet.          */ 01765000
*DCL AXRVarBadAlet BIT(32) Constant('0000085D'X) ; /*                   01766000
*                        Meaning: The ALET of the variable entry is     01767000
*                        invalid.                                       01768000
*                        Action: Refer to AxrArgLstEntryInError in the  01769000
*                        RexxVars parameter to determine the index of   01770000
*                        the variable entry whose alet was incorrect.   01771000
*                        Correct AxrArgAlet.                         */ 01772000
*DCL AXRVarNameBadAlet BIT(32) Constant('0000085E'X) ; /*               01773000
*                        Meaning: The ALET of the variable entry name   01774000
*                        is invalid.                                    01775000
*                        Action: Refer to AxrArgLstEntryInError in the  01776000
*                        RexxVars parameter to determine the index of   01777000
*                        the variable entry name whose alet was         01778000
*                        incorrect. Correct AxrArgNameAlet.          */ 01779000
*DCL AXRRexxlibBadAlet BIT(32) Constant('0000085F'X) ; /*               01780000
*                        Meaning: The ALET of the Rexxlib is invalid.   01781000
*                        Action: Correct the alet.                   */ 01782000
*DCL AXRBadRexxlibLen BIT(32) Constant('00000860'X) ; /*                01783000
*                        Meaning: The length specified by RexxlibLen    01784000
*                        keyword is invalid.                            01785000
*                        Action: RexxlibLen must be greater than or     01786000
*                        equal to 20480.                             */ 01787000
*DCL AXRBadRexxlib BIT(32) Constant('00000861'X) ; /*                   01788000
*                        Meaning: A program check occured when          01789000
*                        attempting to access the parameter specified   01790000
*                        by the REXXLIB keyword.                        01791000
*                        Action: Correct the Rexxlib keyword.        */ 01792000
*DCL AxrRetcodeEnvError BIT(32) Constant('0000000C'X) ; /*              01793000
*                        Meaning: Environmental error                   01794000
*                        Action: Refer to the action provided with the  01795000
*                        specific reason code.                       */ 01796000
*DCL AxrNotActive BIT(32) Constant('00000C01'X) ; /*                    01797000
*                        Meaning: Function is not available. Either the 01798000
*                        AXR address space has terminated or has not    01799000
*                        initialized.                                   01800000
*                        Action: Avoid requesting this function until   01801000
*                        the ENF signal for AXR initialization is       01802000
*                        issued or message AXR0102I is issued. If the   01803000
*                        AXR address space has terminated, it needs to  01804000
*                        be restarted.                               */ 01805000
*DCL AxrArgNoStorage BIT(32) Constant('00000C02'X) ; /*                 01806000
*                        Meaning: No storage is available for a REXX    01807000
*                        argument or variable.                          01808000
*                        Action: Reissue the AXREXX request after       01809000
*                        requests that are in progress complete.     */ 01810000
*DCL AXRAllReqBlocksInUse BIT(32) Constant('00000C03'X) ; /*            01811000
*                        Meaning: All the storage available to          01812000
*                        represent REXX requests is in use.             01813000
*                        Action: Reissue the AXREXX request after       01814000
*                        requests that are in progress complete.     */ 01815000
*DCL AXRTooManyRexxReqs BIT(32) Constant('00000C04'X) ; /*              01816000
*                        Meaning: The threshold of active/waiting REXX  01817000
*                        requests has been exceeded.                    01818000
*                        Action: System REXX will issue ENF signal (65) 01819000
*                        with a qualifier of '10000000'x to indicate    01820000
*                        that it has begun accepting new requests. The  01821000
*                        AXREXX invoker can listen for this signal.  */ 01822000
*DCL AXRBadIWMEREG BIT(32) Constant('00000C05'X) ; /*                   01823000
*                        Meaning: A bad return code was returned from   01824000
*                        IWMEREG. The return code and reason codes from 01825000
*                        IWMEREG are placed in AXRDIAG1 and AXRDIAG2 in 01826000
*                        the RexxDiag parameter respectively.           01827000
*                        Action: Examine the return and reason codes    01828000
*                        from IWMEREG. If no diagnosis is possible,     01829000
*                        contact IBM Service.                        */ 01830000
*DCL AXRAscreFailed BIT(32) Constant('00000C06'X) ; /*                  01831000
*                        Meaning: An attempt to create a server address 01832000
*                        space to run the exec failed.                  01833000
*                        Action: The return and reason codes from ASCRE 01834000
*                        are stored AxrDiag1 and AxrDiag2 in the        01835000
*                        RexxDiag parameter.                         */ 01836000
*DCL AXRReqCancelled BIT(32) Constant('00000C07'X) ; /*                 01837000
*                        Meaning: The request was cancelled.            01838000
*                        Action: None.                               */ 01839000
*DCL AXRExecRexxEnvError BIT(32) Constant('00000C08'X) ; /*             01840000
*                        Meaning: The REXX Interpreter was unable to    01841000
*                        run the exec.                                  01842000
*                        Action: The REXX Interpreter issues one or     01843000
*                        more messages describing the problem. If       01844000
*                        RexxOutDsn was specified, look in the dataset  01845000
*                        for the messages. If ConsData was specified    01846000
*                        and RexxOutDsn was not specified, look at the  01847000
*                        console or the system log. If RexxDiag was     01848000
*                        specified, AXRDIAG1, AXRDIAG2, AXRDIAG3 and    01849000
*                        AXRDIAG4 contain the message ids of any        01850000
*                        messages beginning with IRX (REXX) or IKJ      01851000
*                        (TSO) that were issued. The format of the      01852000
*                        message id is packed decimal with the sign     01853000
*                        bits shifted out. A 1 in the high order byte   01854000
*                        distinguishes an IKJ message from an IRX       01855000
*                        message.                                    */ 01856000
*DCL AXRBadAxruser BIT(32) Constant('00000C09'X) ; /*                   01857000
*                        Meaning: AXRUSER was improperly defined in     01858000
*                        parmlib member AXR00.                          01859000
*                        Action: Correct AXR00 and restart System REXX. 01860000
*                                                                    */ 01861000
*DCL AXRTimeIntExpired BIT(32) Constant('00000C0A'X) ; /*               01862000
*                        Meaning: The input time limit expired before   01863000
*                        the exec completed.                            01864000
*                        Action: Increase the time limit or modify the  01865000
*                        exec.                                       */ 01866000
*DCL AXRReqNotActive BIT(32) Constant('00000C0B'X) ; /*                 01867000
*                        Meaning: For a CANCEL request, the request to  01868000
*                        be cancelled is no longer active.              01869000
*                        Action: None.                               */ 01870000
*DCL AXRReqAlreadyCancelled BIT(32) Constant('00000C0C'X) ; /*          01871000
*                        Meaning: For a CANCEL request, the request to  01872000
*                        be cancelled is already cancelled.             01873000
*                        Action: None.                               */ 01874000
*DCL AXRRexxOutFail BIT(32) Constant('00000C0D'X) ; /*                  01875000
*                        Meaning: An failure occurred when attempting   01876000
*                        to process the dataset specified by the        01877000
*                        RexxOutDsn parameter. If the failure was due   01878000
*                        to an abend, the abend code is is saved in     01879000
*                        AXRDIAG1 and the abend reason code is saved in 01880000
*                        AXRDIAG2 in the RexxDiag parameter. No dump is 01881000
*                        taken.                                         01882000
*                        Action: Look up the abend and reason code in   01883000
*                        z/OS MVS System Codes to determine the proper  01884000
*                        action.                                     */ 01885000
*DCL AXRRexxInFail BIT(32) Constant('00000C0E'X) ; /*                   01886000
*                        Meaning: A failure occurred when attempting to 01887000
*                        process the dataset specified by the RexxInDsn 01888000
*                        parameter. If the failure was due to an abend, 01889000
*                        the abend code is saved in AXRDIAG1 and the    01890000
*                        abend reason code is saved in AXRDIAG2 of the  01891000
*                        RexxDiag parameter. No dump is taken.          01892000
*                        Action: Look up the abend and reason code in   01893000
*                        z/OS MVS System Codes to determine the proper  01894000
*                        action.                                     */ 01895000
*DCL AXRBadIWMECREA BIT(32) Constant('00000C0F'X) ; /*                  01896000
*                        Meaning: A bad return code was returned from   01897000
*                        IWMECREA. The return code and reason codes     01898000
*                        from IWMESQRY and the return and reason codes  01899000
*                        from IWMECREA are placed in AXRDIAG1,          01900000
*                        AXRDIAG2, AXRDIAG3 and AXRDIAG4 respectively   01901000
*                        of the RexxDiag parameter.                     01902000
*                        Action: Inspect the return/reason codes from   01903000
*                        IWMESQRY and IWMECREA and look up in the z/OS  01904000
*                        MVS Programming: Workload Management Services. 01905000
*                        If the problem cannot be resolved, contact IBM 01906000
*                        Service.                                    */ 01907000
*DCL AXRTooManyExtents BIT(32) Constant('00000C10'X) ; /*               01908000
*                        Meaning: The number of extents for all data    01909000
*                        sets in the REXXLIB concatenation exceeds the  01910000
*                        system limit. SYSREXX cannot process any more  01911000
*                        execs.                                         01912000
*                        Action: SYSREXX must be stopped. The REXXLIB   01913000
*                        concatenation must then be modified so that    01914000
*                        the number of extents is reduced below the     01915000
*                        system limit. SYSREXX may then be restarted.   01916000
*                                                                    */ 01917000
*DCL AXRStopTSO BIT(32) Constant('00000C11'X) ; /*                      01918000
*                        Meaning: MODIFY AXR,SYSREXX STOPTSO was        01919000
*                        invoked to disable TSO=YES processing.         01920000
*                        Action: The request is rejected. To restart    01921000
*                        TSO=YES processing, the following operator     01922000
*                        command must be issued: MODIFY AXR,SYSREXX     01923000
*                        STARTTSO.                                   */ 01924000
*DCL AXRStopInProgress BIT(32) Constant('00000C12'X) ; /*               01925000
*                        Meaning: The STOP AXR command was invoked and  01926000
*                        is being processed.                            01927000
*                        Action: The request is rejected. System REXX   01928000
*                        must be restarted before AXREXX can be         01929000
*                        invoked.                                    */ 01930000
*DCL AxrRetcodeCompError BIT(32) Constant('00000010'X) ; /*             01931000
*                        Meaning: Unexpected failure.                   01932000
*                        Action: Refer to the action provided with the  01933000
*                        specific reason code.                       */ 01934000
*DCL AxrRexxServerAbended BIT(32) Constant('00001001'X) ; /*            01935000
*                        Meaning: An abend occurred after the REXX      01936000
*                        server began processing the request.           01937000
*                        Action: A dump is taken. Contact IBM service.  01938000
*                                                                    */ 01939000
*DCL AxrBadServerRC BIT(32) Constant('00001002'X) ; /*                  01940000
*                        Meaning: A unexpected return code was returned 01941000
*                        from the REXX server.                          01942000
*                        Action: A dump is taken. Contact IBM service.  01943000
*                                                                    */ 01944000
*DCL AXRRexxClientAbended BIT(32) Constant('00001003'X) ; /*            01945000
*                        Meaning: An abend occurred before the request  01946000
*                        was passed to the REXX Server or after the     01947000
*                        request was processed by the REXX server.      01948000
*                        Action: A dump is taken. Contact IBM service.  01949000
*                                                                    */ 01950000
*DCL AXRExitAbended BIT(32) Constant('00001007'X) ; /*                  01951000
*                        Meaning: An abend occurred in a System REXX    01952000
*                        defined exit which is given control from the   01953000
*                        REXX Interpreter.                              01954000
*                        Action: A dump is taken. Contact IBM service.  01955000
*                                                                    */ 01956000
*DCL AXRAddrSpaceTerm BIT(32) Constant('0000100B'X) ; /*                01957000
*                        Meaning: The address space created to run an   01958000
*                        exec either terminated prior to running the    01959000
*                        exec or during the execution of the exec.      01960000
*                        Action: If the address space was cancelled     01961000
*                        then there is no action. If the address space  01962000
*                        was terminated unexpectedly then contact IBM   01963000
*                        Service.                                    */ 01964000
*DCL AXRCancelAbended BIT(32) Constant('0000100D'X) ; /*                01965000
*                        Meaning: An attempt to cancel a request        01966000
*                        resulted in an abend. A dump is taken.         01967000
*                        Action: Contact IBM service.                */ 01968000
*DCL AXRRexxInterpreterAbend BIT(32) Constant('0000100F'X) ; /*         01969000
*                        Meaning: Either the REXX interpreter abended   01970000
*                        or was percolated to.                          01971000
*                        Action: Refer to the RexxDiag parameter.       01972000
*                        AxrDiag1 contains either 100 for a user abend  01973000
*                        or 104 for a system abend. AxrDiag2 contains   01974000
*                        the abend code. A system dump may be produced. 01975000
*                                                                    */ 01976000
*/* End of AXREXX Return and Reason Code definitions                 */ 01977000
* @LOGIC;                                                               01978000
* #PRAGMA TOOL=CBGEN.                                                   01979000
* #USEORG.                                                              01980000
* #DELETE.AXREXIT                                                       01981000
* #DELETE.AXREXITACRO                                                   01982000
* #EPRAGMA.                                                             01983000
* @ENDLOGIC;                                                            01984000
*/* End of PL/X Source                                               */ 01985000
* %IF AXRZARG_LIST = 'NO' !                                             01986000
*    ZCBPRINT = 'NO' %THEN                                              01987000
* %DO;                                                                  01988000
*   @LIST POP NOECHO;                                                   01989000
* %END;                                                                 01990000
* %END;                                                                 01991000
