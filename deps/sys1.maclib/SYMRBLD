*/**** START OF SPECIFICATIONS **************************************** 00000100
*                                                                     * 00000200
*                                                                     * 00000300
*01* MACRO NAME:  SYMRBLD                               -09/20/01-<0> * 00000400
*                                                                     * 00000500
*                                                                     * 00000600
*01* DESCRIPTIVE NAME:  Symptom Record Build                          * 00000700
*                                                                     * 00000800
*01* PROPRIETARY STATEMENT:                                           * 00000900
*                                                                     * 00001000
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00001100
*     5694-A01 (C) COPYRIGHT IBM CORP. 2002                           * 00001200
*                                                                     * 00001300
* STATUS= HBB7707                                                     * 00001400
*                                                                     * 00001500
*                                                                     * 00001600
*                                                                     * 00001700
*01* FUNCTION:                                                        * 00001800
*                                                                     * 00001900
*                                                                     * 00002000
*      The SYMRBLD macro will generate code to build a symptom        * 00002100
*      record.  The SYMRBLD macro is provided in PL/AS and assembler  * 00002200
*      formats.                                                       * 00002300
*                                                                     * 00002400
*      A symptom record is a data area that contains a description of * 00002500
*      a program failure combined with a description of the           * 00002600
*      environment where the failure occurred.  The symptom record    * 00002700
*      consists of six sections.  These sections are numbered 1       * 00002800
*      through 5, including an additional section that is numbered    * 00002900
*      2.1.  The purpose of each section is as follows:               * 00003000
*                                                                     * 00003100
*                                                                     * 00003200
*      o   Section 1 (Environmental Data) - This section is filled in * 00003300
*          by the the SYMREC service.  The environmental data that    * 00003400
*          SYMREC stores in this section includes the CPU model and   * 00003500
*          serial numbers, data and time, name of the customer        * 00003600
*          installation, and the product ID of the control program.   * 00003700
*                                                                     * 00003800
*      o   Section 2 (Control Data) - Section 2 contains the lengths  * 00003900
*          and offsets of the remaining sections.                     * 00004000
*                                                                     * 00004100
*      o   Section 2.1 (Component Data) - Section 2.1 identifies the  * 00004200
*          component in which the error occurred.                     * 00004300
*                                                                     * 00004400
*      o   Section 3 (Primary SDB symptoms) - Section 3 contains the  * 00004500
*          primary string of problem symptoms.  This data may be used * 00004600
*          for duplicate problem recognition.                         * 00004700
*                                                                     * 00004800
*      o   Section 4 (Secondary SDB symptoms) - Section 4 contains    * 00004900
*          any additional diagnostic values saved at the time of the  * 00005000
*          error.                                                     * 00005100
*                                                                     * 00005200
*      o   Section 5 (Variable data) - Section 5 contains diagnostic  * 00005300
*          data in key-length-data format.  This area contains        * 00005400
*          portions of control blocks or parameter lists pertinent to * 00005500
*          the error.                                                 * 00005600
*                                                                     * 00005700
*                                                                     * 00005800
*                                                                     * 00005900
*      Input to the SYMRBLD macro is a storage area for the symptom   * 00006000
*      record (the storage area must reside in the invoker's primary  * 00006100
*      address space), and the diagnostic data for sections 2.1, 3,   * 00006200
*      4, and 5 of the symptom record. The SYMRBLD macro must be      * 00006300
*      invoked several times in order to build a complete symptom     * 00006400
*      record.  The following describes the necessary steps:          * 00006500
*                                                                     * 00006600
*                                                                     * 00006700
*      o   Invoke SYMRBLD with the INITIAL keyword to initialize      * 00006800
*          sections 1 and 2, and provide component data for section   * 00006900
*          2.1.                                                       * 00007000
*                                                                     * 00007100
*      o   Invoke SYMRBLD with the PRIMARY keyword one or more times  * 00007200
*          to store symptoms into section 3.                          * 00007300
*                                                                     * 00007400
*      o   Invoke SYMRBLD with the SECONDARY keyword zero or more     * 00007500
*          times to store symptoms into section 4.                    * 00007600
*                                                                     * 00007700
*      o   Invoke SYMRBLD with the VARIABLE keyword zero or more      * 00007800
*          times to store symptoms into section 5.                    * 00007900
*                                                                     * 00008000
*      o   Invoke SYMRBLD with the COMPLETE keyword to set the        * 00008100
*          lengths of sections 3, 4, and 5 in section 2.1 and         * 00008200
*          optionally pass the symptom record to SYMREC for recording * 00008300
*          to SYS1.LOGREC.                                            * 00008400
*                                                                     * 00008500
*                                                                     * 00008600
*                                                                     * 00008700
*       Note: The same version of SYMRBLD, i.e.,PLAS or assembler,    * 00008800
*      must be used to build all sections of the symptom record.      * 00008900
*                                                                     * 00009000
*                                                                     * 00009100
*      REGISTER USAGE:                                                * 00009200
*                                                                     * 00009300
*                                                                     * 00009400
*      INPUT REGISTERS:                                               * 00009500
*                                                                     * 00009600
*                                                                     * 00009700
*                          GR0-GR12    Undefined                      * 00009800
*                                                                     * 00009900
*                          GR13        Address of a 72 byte savearea  * 00010000
*                                      if the COMPLETE INVOKE=YES     * 00010100
*                                      keywords are specified.        * 00010200
*                                                                     * 00010300
*                          GR14-GR15   Undefined                      * 00010400
*                                                                     * 00010500
*                                                                     * 00010600
*                                                                     * 00010700
*      OUTPUT ENVIRONMENT: Same as on entry                           * 00010800
*                                                                     * 00010900
*      OUTPUT REGISTERS:                                              * 00011000
*                                                                     * 00011100
*                                                                     * 00011200
*                          GR0-GR1     Unpredictable                  * 00011300
*                                                                     * 00011400
*                          GR2-GR13    Unchanged                      * 00011500
*                                                                     * 00011600
*                          GR14-GR15   Unpredictable                  * 00011700
*                                                                     * 00011800
*                                                                     * 00011900
*                                                                     * 00012000
*                                                                     * 00012100
*                                                                     * 00012200
*01* ENVIRONMENT:                                                     * 00012300
*                                                                     * 00012400
*                                                                     * 00012500
*      Dispatchable unit mode: SRB or task mode.                      * 00012600
*                                                                     * 00012700
*      Minimum authorization: Problem or Supervisor state, any key.   * 00012800
*                                                                     * 00012900
*      AMODE:            24- or 31-bit.                               * 00013000
*                                                                     * 00013100
*      ASC mode:         Primary or Access Register.                  * 00013200
*                                                                     * 00013300
*                        Also, secondary and home ASC modes are       * 00013400
*                        supported. The symptom record storage must   * 00013500
*                        reside in primary, or be qualified with a    * 00013600
*                        suitable ALET if running in AR mode, i.e.,   * 00013700
*                        qualified by an ALET of zero.  Enabled or    * 00013800
*                        disabled, locked or unlocked                 * 00013900
*                                                                     * 00014000
*                                                                     * 00014100
*                                                                     * 00014200
*01* EXTERNAL CLASSIFICATION:  GUPI                                   * 00014300
*                                                                     * 00014400
*01* END OF EXTERNAL CLASSIFICATION:                                  * 00014500
*                                                                     * 00014600
*01* SYNTAX:                                                          * 00014700
*                                                                     * 00014800
*Ýxlabel¨  SYMRBLD  Ð  INITIAL                                        * 00014900
*                   !     ,SR=xsr                                     * 00015000
*                   !     ,PRIMLEN=xprimlen                           * 00015100
*                   !    Ý,SECLEN=»xseclen!0º¨                        * 00015200
*                   !    Ý,VARLEN=»xvarlen!0º¨                        * 00015300
*                   !     ,ARCHLEV=»10º                               * 00015400
*                   !    Ý,DAE=»YES!NOº¨                              * 00015500
*                   !    Ý,COMPDSC=»xcompdsc!NO_COMPDSCº¨             * 00015600
*                   !    Ý,PROBLEM=»xproblem!NO_PROBLEMº¨             * 00015700
*                   !    Ý,SERVLEV=»xservlev!NO_SERVICE_LEVELº¨       * 00015800
*                   !    Ý,NOCONVERTS¨                                * 00015900
*                   !   ÐÝ,IBM=NO                                     * 00016000
*                   !   !     ,PROGRAM=xprogram                       * 00016100
*                   !   !     ,PROGLEV=xproglev¨                      * 00016200
*                   !   ¿Ý,IBM=YES                                    * 00016300
*                   !       Ð ,COMPID=xcompid                         * 00016400
*                   !       !     ,COMPLEV=xcomplev                   * 00016500
*                   !       ¿ ,PID=xpid                               * 00016600
*                   !             ,PIDLEVEL=xpidlevel                 * 00016700
*                   !        Ý,SUBSYSTEM=»xsubsystem!NO_SUBSYSTEMº¨¨  * 00016800
*                   Ô ,RESET                                          * 00016900
*                   !     ,SR=xsr                                     * 00017000
*                   !    Ý,PRIMLEN=»xprimlen!OLD_PRIMLENº¨            * 00017100
*                   !    Ý,SECLEN=»xseclen!OLD_SECLENº¨               * 00017200
*                   !    Ý,VARLEN=»xvarlen!OLD_VARLENº¨               * 00017300
*                   Ô ,PRIMARY                                        * 00017400
*                   !    Ý,SR=»xsr!SR_IN_R1º¨                         * 00017500
*                   !    Ý,SDBSTRING=»xsdbstring!NO_SDB_STRINGº       * 00017600
*                   !        Ý,SDBLEN=»xsdblen!DEFINED_LENGTHº¨       * 00017700
*                   !        Ý,SDBLENVAR                              * 00017800
*                   !                    =»xsdblenvar!DEFINED_LENGTHº * 00017900
*                   !                    ¨¨                           * 00018000
*                   !    Ý,SDBKEY=»xsdbkey!NO_SDBKEYº                 * 00018100
*                   !         ,DATA=xdata                             * 00018200
*                   !            Ý,LEN=»xlen!DEFINED_LENGTHº¨         * 00018300
*                   !            Ý,LENVAR=»xlenvar!DEFINED_LENGTHº¨   * 00018400
*                   !            Ý,CONVERT=»NO!YESº¨¨                 * 00018500
*                   !    Ý,TYPE=»TEST!NOTESTº¨                        * 00018600
*                   Ô ,SECONDARY                                      * 00018700
*                   !    Ý,SR=»xsr!SR_IN_R1º¨                         * 00018800
*                   !    Ý,SDBSTRING=»xsdbstring!NO_SDB_STRINGº       * 00018900
*                   !        Ý,SDBLEN=»xsdblen!DEFINED_LENGTHº¨       * 00019000
*                   !        Ý,SDBLENVAR                              * 00019100
*                   !                    =»xsdblenvar!DEFINED_LENGTHº * 00019200
*                   !                    ¨¨                           * 00019300
*                   !    Ý,SDBKEY=»xsdbkey!NO_SDBKEYº                 * 00019400
*                   !         ,DATA=xdata                             * 00019500
*                   !            Ý,LEN=»xlen!DEFINED_LENGTHº¨         * 00019600
*                   !            Ý,LENVAR=»xlenvar!DEFINED_LENGTHº¨   * 00019700
*                   !            Ý,CONVERT=»NO!YESº¨¨                 * 00019800
*                   !    Ý,TYPE=»TEST!NOTESTº¨                        * 00019900
*                   Ô ,VARIABLE                                       * 00020000
*                   !    Ý,SR=»xsr!SR_IN_R1º¨                         * 00020100
*                   !     ,S5KEY=xs5key                               * 00020200
*                   !     ,DATA=xdata                                 * 00020300
*                   !        Ý,LEN=»xlen!DEFINED_LENGTHº¨             * 00020400
*                   !        Ý,LENVAR=»xlenvar!DEFINED_LENGTHº¨       * 00020500
*                   !    Ý,TYPE=»TEST!NOTESTº¨                        * 00020600
*                   ¿ ,COMPLETE                                       * 00020700
*                        Ý,SR=»xsr!SR_IN_R1º¨                         * 00020800
*                       ÐÝ,INVOKE=YES                                 * 00020900
*                       !    Ý,RETCODE=»xretcode!NO_RETURN_CODEº¨     * 00021000
*                       !    Ý,RSNCODE=»xrsncode!NO_REASON_CODEº¨¨    * 00021100
*                       ¿Ý,INVOKE=NO¨                                 * 00021200
*                                                                     * 00021300
*                                                                     * 00021400
*      Where:                                                         * 00021500
*                                                                     * 00021600
*                                                                     * 00021700
*      Ýxlabel¨                                                       * 00021800
*          is an optional symbol, starting in column 1, that is the   * 00021900
*          name on the SYMRBLD macro invocation.  The name must       * 00022000
*          conform to the rules for an ordinary assembler language    * 00022100
*          symbol.                                                    * 00022200
*          DEFAULT: No name.                                          * 00022300
*                                                                     * 00022400
*                                                                     * 00022500
*                                                                     * 00022600
*                                                                     * 00022700
*      The following is a set of mutually exclusive keys.  This set   * 00022800
*      is required; only one key must be specified.                   * 00022900
*                                                                     * 00023000
*                                                                     * 00023100
*      INITIAL                                                        * 00023200
*          Initialization of the symptom record includes setting      * 00023300
*          sections 1, 2, and 2.1 of the symptom record to zero, and  * 00023400
*          initializing the offsets of sections 3, 4, and 5 in        * 00023500
*          section 2.1.                                               * 00023600
*                                                                     * 00023700
*                                                                     * 00023800
*          SR=xsr                                                     * 00023900
*              is a required input.  It is the name (RS-type), or     * 00024000
*              address in register (2)-(12), of the storage area to   * 00024100
*              be used for the symptom record.  The storage area must * 00024200
*              reside in primary or be qualified by an ALET of zero   * 00024300
*              if running in AR mode. SYMRBLD assumes the storage     * 00024400
*              area is on a double word boundary.                     * 00024500
*                                                                     * 00024600
*              The maximum size of the symptom record is 1900 bytes.  * 00024700
*              Sections 1, 2, and 2.1 use 212 bytes of the total 1900 * 00024800
*              bytes.  Sections 3, 4, and 5 can use the remaining     * 00024900
*              1688 bytes.  Use the PRIMLEN, SECLEN and VARLEN        * 00025000
*              keywords to specify the lengths of sections 3, 4, and  * 00025100
*              5 respectively.                                        * 00025200
*                                                                     * 00025300
*              In addition to providing storage for the symptom       * 00025400
*              record, 100 bytes must be provided for a work area,    * 00025500
*              therefore, the maximum amount of storage needed is     * 00025600
*              2000 bytes.                                            * 00025700
*                                                                     * 00025800
*                                                                     * 00025900
*                                                                     * 00026000
*                                                                     * 00026100
*          PRIMLEN=xprimlen                                           * 00026200
*              is the name (RS-type), or address in register          * 00026300
*              (2)-(12), of a required halfword input variable which  * 00026400
*              contains the maximum length in bytes of the primary    * 00026500
*              symptom string.  The length provided must be large     * 00026600
*              enough to contain the primary symptom string.  The     * 00026700
*              following formula can be used to calculate the length  * 00026800
*              of the primary symptom string:  Lengths of all SDBKEYs * 00026900
*              + length of all data provided with the DATA keyword +  * 00027000
*              the number of times SDBKEY is specified + the length   * 00027100
*              of all data specified with the SDBSTRING keyword + the * 00027200
*              number of times the SDBSTRING keyword is provided.     * 00027300
*              Note that the maximum size of the entire symptom       * 00027400
*              record is 1900 bytes.                                  * 00027500
*                                                                     * 00027600
*              The primary symptom string is required by the symptom  * 00027700
*              record architecture, consequently, this field cannot   * 00027800
*              be zero.                                               * 00027900
*                                                                     * 00028000
*                                                                     * 00028100
*                                                                     * 00028200
*                                                                     * 00028300
*          ÝSECLEN=»xseclen!0º¨                                       * 00028400
*              is the name (RS-type), or address in register          * 00028500
*              (2)-(12), of an optional halfword input variable which * 00028600
*              contains the maximum length in bytes of the secondary  * 00028700
*              symptom string.  The length provided must be large     * 00028800
*              enough to contain the secondary symptom string.  The   * 00028900
*              following formula can be used to calculate the length  * 00029000
*              of the secondary symptom string:  Lengths of all       * 00029100
*              SDBKEYs + length of all data provided with the DATA    * 00029200
*              keyword + the number of times SDBKEY is specified +    * 00029300
*              the length of all data specified with the SDBSTRING    * 00029400
*              keyword + the number of times the SDBSTRING keyword is * 00029500
*              provided.  Note that the maximum size of the entire    * 00029600
*              symptom record is 1900 bytes.                          * 00029700
*                                                                     * 00029800
*              The secondary symptom string is not required by the    * 00029900
*              symptom record architecture.  If a length of zero is   * 00030000
*              specified, the secondary symptom string will be        * 00030100
*              ignored.                                               * 00030200
*              DEFAULT: 0                                             * 00030300
*                                                                     * 00030400
*                                                                     * 00030500
*                                                                     * 00030600
*                                                                     * 00030700
*          ÝVARLEN=»xvarlen!0º¨                                       * 00030800
*              is the name (RS-type), or address in register          * 00030900
*              (2)-(12), of an optional halfword input variable which * 00031000
*              contains the maximum length in bytes of the variable   * 00031100
*              data section.  The length provided must be the total   * 00031200
*              length of the variable data items + the number of      * 00031300
*              items * 4. (The 4 is for the 2 byte key (FF00 or F000) * 00031400
*              plus 2 bytes for the length) Note that the maximum     * 00031500
*              size of the entire symptom record is 1900 bytes.       * 00031600
*                                                                     * 00031700
*              The variable data section is not required by the       * 00031800
*              symptom record architecture.  If a length of zero is   * 00031900
*              specified, section 5 will be ignored.                  * 00032000
*              DEFAULT: 0                                             * 00032100
*                                                                     * 00032200
*                                                                     * 00032300
*                                                                     * 00032400
*                                                                     * 00032500
*          ARCHLEV=»10º                                               * 00032600
*              is a required keyword input which indicates the        * 00032700
*              architecture level of the symptom record.              * 00032800
*                                                                     * 00032900
*                                                                     * 00033000
*              ARCHLEV=10                                             * 00033100
*                  Use symptom record architecture level 10.          * 00033200
*                  Currently, this is the only valid architecture     * 00033300
*                  level.                                             * 00033400
*                                                                     * 00033500
*                                                                     * 00033600
*                                                                     * 00033700
*                                                                     * 00033800
*                                                                     * 00033900
*                                                                     * 00034000
*          ÝDAE=»YES!NOº¨                                             * 00034100
*              is an optional keyword input which indicates whether   * 00034200
*              the symptom string is to be used by DAE for dump       * 00034300
*              suppression.                                           * 00034400
*              DEFAULT: YES                                           * 00034500
*                                                                     * 00034600
*                                                                     * 00034700
*              DAE=YES                                                * 00034800
*                  The symptom string is to be used by DAE for dump   * 00034900
*                  suppression.                                       * 00035000
*                                                                     * 00035100
*              DAE=NO                                                 * 00035200
*                  The symptom string is not to be used by DAE for    * 00035300
*                  dump suppression.                                  * 00035400
*                                                                     * 00035500
*                                                                     * 00035600
*                                                                     * 00035700
*                                                                     * 00035800
*                                                                     * 00035900
*                                                                     * 00036000
*          ÝCOMPDSC=»xcompdsc!NO_COMPDSCº¨                            * 00036100
*              is the name (RS-type), or address in register          * 00036200
*              (2)-(12), of an optional 32 character input text       * 00036300
*              description of the failing module's subfunction.       * 00036400
*              (e.g. IOS - IOSB Analysis Routine).                    * 00036500
*              DEFAULT: NO_COMPDSC                                    * 00036600
*                                                                     * 00036700
*                                                                     * 00036800
*                                                                     * 00036900
*                                                                     * 00037000
*          ÝPROBLEM=»xproblem!NO_PROBLEMº¨                            * 00037100
*              is the name (RS-type), or address in register          * 00037200
*              (2)-(12), of an optional 8 character input problem     * 00037300
*              identifier used to associate the symptom record with   * 00037400
*              other symptom records or with other problem            * 00037500
*              indicators.                                            * 00037600
*              DEFAULT: NO_PROBLEM                                    * 00037700
*                                                                     * 00037800
*                                                                     * 00037900
*                                                                     * 00038000
*                                                                     * 00038100
*          ÝSERVLEV=»xservlev!NO_SERVICE_LEVELº¨                      * 00038200
*              is the name (RS-type), or address in register          * 00038300
*              (2)-(12), of an optional 8 character input service     * 00038400
*              level.  This service level is different than the PID   * 00038500
*              and Component release levels.  When the value is       * 00038600
*              provided, the code is normally at a higher level than  * 00038700
*              the release level.  The values of this field may be    * 00038800
*              any information which is indicative of the service     * 00038900
*              level e.g. PTF#, APAR#, FMID, user modification        * 00039000
*              number, etc.                                           * 00039100
*              DEFAULT: NO_SERVICE_LEVEL                              * 00039200
*                                                                     * 00039300
*                                                                     * 00039400
*                                                                     * 00039500
*                                                                     * 00039600
*          ÝNOCONVERTS¨                                               * 00039700
*              Keyword that indicates no data conversion from         * 00039800
*              hexadecimal to EBCDIC will be needed for this symptom  * 00039900
*              record.  Specifying this keyword on an assembler       * 00040000
*              invocation of SYMRBLD will prevent generating          * 00040100
*              unnecessary code.                                      * 00040200
*                                                                     * 00040300
*              If only conversion to decimal EBCDIC will be done,     * 00040400
*              NOCONVERTS can be specified. Note that conversion to   * 00040500
*              decimal EBCDIC is only supported for a hexadecimal     * 00040600
*              user abend code provided with the SDBAB_U SDB key.     * 00040700
*              DEFAULT: CONVERSIONS                                   * 00040800
*                                                                     * 00040900
*                                                                     * 00041000
*                                                                     * 00041100
*                                                                     * 00041200
*          ÝIBM=»NO!YESº¨                                             * 00041300
*              is an optional keyword input which indicates whether   * 00041400
*              the program building the symptom record is an IBM      * 00041500
*              program or not.                                        * 00041600
*              DEFAULT: NO                                            * 00041700
*                                                                     * 00041800
*                                                                     * 00041900
*              ÝIBM=NO                                                * 00042000
*                  specifies that a non-IBM program is building the   * 00042100
*                  symptom record.                                    * 00042200
*                                                                     * 00042300
*                                                                     * 00042400
*                  PROGRAM=xprogram                                   * 00042500
*                      is the name (RS-type), or address in register  * 00042600
*                      (2)-(12), of a required 8 character input      * 00042700
*                      variable that contains the name of the failing * 00042800
*                      program.                                       * 00042900
*                                                                     * 00043000
*                      When this keyword is specified, the            * 00043100
*                      PIDS/aaaaaaaa SDB symptom is automatically put * 00043200
*                      into section 3 of the symptom record.          * 00043300
*                      DEFAULT: NO_PROGRAM                            * 00043400
*                                                                     * 00043500
*                                                                     * 00043600
*                                                                     * 00043700
*                                                                     * 00043800
*                  PROGLEV=xproglev¨                                  * 00043900
*                      is the name (RS-type), or address in register  * 00044000
*                      (2)-(12), of a required 8 character input      * 00044100
*                      variable that specifies the program major      * 00044200
*                      level.                                         * 00044300
*                      DEFAULT: NO_PROGLEV                            * 00044400
*                                                                     * 00044500
*                                                                     * 00044600
*                                                                     * 00044700
*              ÝIBM=YES                                               * 00044800
*                  specifies that an IBM program is building the      * 00044900
*                  symptom record.                                    * 00045000
*                                                                     * 00045100
*                                                                     * 00045200
*                  The following is a set of mutually exclusive keys. * 00045300
*                  This set is required; only one key must be         * 00045400
*                  specified.                                         * 00045500
*                                                                     * 00045600
*                                                                     * 00045700
*                  COMPID=xcompid                                     * 00045800
*                      belongs to a set of mutually exclusive keys.   * 00045900
*                      It is the name (RS-type), or address in        * 00046000
*                      register (2)-(12), of a 9 character input It   * 00046100
*                      designates a component ID without imbedded     * 00046200
*                      punctuation ( e.g. 5752SC1CM).                 * 00046300
*                                                                     * 00046400
*                      When this keyword is specified, the            * 00046500
*                      PIDS/aaaaaaaaa SDB symptom is automatically    * 00046600
*                      put into section 3 of the symptom record.      * 00046700
*                      DEFAULT: NO_COMPID                             * 00046800
*                                                                     * 00046900
*                                                                     * 00047000
*                      COMPLEV=xcomplev                               * 00047100
*                          is the name (RS-type), or address in       * 00047200
*                          register (2)-(12), of a required 4         * 00047300
*                          character input component release level,   * 00047400
*                          left justified.  For example, the MVS BCP  * 00047500
*                          component release level for HBB3310 is     * 00047600
*                          'C10 '.                                    * 00047700
*                          DEFAULT: NO_COMPLEV                        * 00047800
*                                                                     * 00047900
*                                                                     * 00048000
*                                                                     * 00048100
*                  PID=xpid                                           * 00048200
*                      belongs to a set of mutually exclusive keys.   * 00048300
*                      It is the name (RS-type), or address in        * 00048400
*                      register (2)-(12), of an 8 character input It  * 00048500
*                      designates a Program Information Department    * 00048600
*                      (PID) number.  The PID is represented as a 7   * 00048700
*                      character value with no punctuation and 1 byte * 00048800
*                      of padding ( e.g. 5740-CB-1 is given as        * 00048900
*                      '5740CB1 ').  This field is never provided     * 00049000
*                      instead of, or in addition to, the component   * 00049100
*                      ID.  This field should ONLY be specified by    * 00049200
*                      IBM programs which do not have an assigned     * 00049300
*                      component ID.                                  * 00049400
*                                                                     * 00049500
*                      When this keyword is specified, the            * 00049600
*                      PIDS/aaaaaaaa SDB symptom is automatically put * 00049700
*                      into section 3 of the symptom record.          * 00049800
*                      DEFAULT: NO_PID                                * 00049900
*                                                                     * 00050000
*                                                                     * 00050100
*                      PIDLEVEL=xpidlevel                             * 00050200
*                          is the name (RS-type), or address in       * 00050300
*                          register (2)-(12), of a required 8         * 00050400
*                          character input variable which contains    * 00050500
*                          the release level of the program           * 00050600
*                          designated by a Program Information        * 00050700
*                          Department (PID) number.  The format of    * 00050800
*                          this field is VxRxxMxx where x represents  * 00050900
*                          numerical values.  For example, V1R21bbb   * 00051000
*                          is the way to express Version 1, Release   * 00051100
*                          2.1 (no modification number in this        * 00051200
*                          instance).                                 * 00051300
*                          DEFAULT: NO_PIDLEV                         * 00051400
*                                                                     * 00051500
*                                                                     * 00051600
*                                                                     * 00051700
*                                                                     * 00051800
*                                                                     * 00051900
*                  End of a set of mutually exclusive required keys.  * 00052000
*                                                                     * 00052100
*                                                                     * 00052200
*                                                                     * 00052300
*                  ÝSUBSYSTEM=»xsubsystem!NO_SUBSYSTEMº¨¨             * 00052400
*                      is the name (RS-type), or address in register  * 00052500
*                      (2)-(12), of an optional 8 character input     * 00052600
*                      variable which contains the name of a          * 00052700
*                      subsystem.  The intended use of this keyword   * 00052800
*                      is to allow IBM subsystems (e.g., CICS,        * 00052900
*                      VM/GCS) to intercept a symptom record created  * 00053000
*                      by programs which run on the subsystem.  The   * 00053100
*                      subsystem may then provide additional          * 00053200
*                      information to the symptom record.             * 00053300
*                      DEFAULT: NO_SUBSYSTEM                          * 00053400
*                                                                     * 00053500
*                                                                     * 00053600
*                                                                     * 00053700
*                                                                     * 00053800
*                                                                     * 00053900
*                                                                     * 00054000
*                                                                     * 00054100
*      RESET                                                          * 00054200
*          The RESET keyword indicates that the symptom record is to  * 00054300
*          be rebuilt using the same storage and component            * 00054400
*          information that was specified with the INITIAL keyword.   * 00054500
*                                                                     * 00054600
*          The size of the primary, secondary, and variable sections  * 00054700
*          can be changed by specifying new lengths.  Otherwise, the  * 00054800
*          original lengths are used.                                 * 00054900
*                                                                     * 00055000
*          This keyword is useful when the primary, secondary, and    * 00055100
*          variable sections of the symptom record are to be changed, * 00055200
*          but the component information in section 2.1 remains the   * 00055300
*          same.                                                      * 00055400
*                                                                     * 00055500
*                                                                     * 00055600
*          SR=xsr                                                     * 00055700
*              is a required input.  It is the name (RS-type), or     * 00055800
*              address in register (2)-(12), of the storage area to   * 00055900
*              be used for the symptom record.                        * 00056000
*                                                                     * 00056100
*                                                                     * 00056200
*                                                                     * 00056300
*                                                                     * 00056400
*          ÝPRIMLEN=»xprimlen!OLD_PRIMLENº¨                           * 00056500
*              is the name (RS-type), or address in register          * 00056600
*              (2)-(12), of an optional halfword input variable which * 00056700
*              contains the maximum length in bytes of the primary    * 00056800
*              symptom string.  The length provided must be large     * 00056900
*              enough to contain the primary symptom string.  Note    * 00057000
*              that the maximum size of the entire symptom record is  * 00057100
*              1900 bytes.  When this keyword is not specified, the   * 00057200
*              length of the primary symptom string will not change.  * 00057300
*                                                                     * 00057400
*              The primary symptom string is required by the symptom  * 00057500
*              record architecture, consequently, this field cannot   * 00057600
*              be zero.                                               * 00057700
*              DEFAULT: OLD_PRIMLEN                                   * 00057800
*                                                                     * 00057900
*                                                                     * 00058000
*                                                                     * 00058100
*                                                                     * 00058200
*          ÝSECLEN=»xseclen!OLD_SECLENº¨                              * 00058300
*              is the name (RS-type), or address in register          * 00058400
*              (2)-(12), of an optional halfword input variable which * 00058500
*              contains the maximum length in bytes of the secondary  * 00058600
*              symptom string.  The length provided must be large     * 00058700
*              enough to contain the secondary symptom string.  Note  * 00058800
*              that the maximum size of the entire symptom record is  * 00058900
*              1900 bytes.  When this keyword is not specified, the   * 00059000
*              length of the secondary symptom string will not        * 00059100
*              change.                                                * 00059200
*                                                                     * 00059300
*              The secondary symptom string is not required by the    * 00059400
*              symptom record architecture.  If a length of zero is   * 00059500
*              specified, the secondary symptom string will be        * 00059600
*              ignored.                                               * 00059700
*              DEFAULT: OLD_SECLEN                                    * 00059800
*                                                                     * 00059900
*                                                                     * 00060000
*                                                                     * 00060100
*                                                                     * 00060200
*          ÝVARLEN=»xvarlen!OLD_VARLENº¨                              * 00060300
*              is the name (RS-type), or address in register          * 00060400
*              (2)-(12), of an optional halfword input variable which * 00060500
*              contains the maximum length in bytes of the variable   * 00060600
*              data section.  The length provided must be large       * 00060700
*              enough to contain the variable data.  Note that the    * 00060800
*              maximum size of the entire symptom record is 1900      * 00060900
*              bytes.  When this keyword is not specified, the length * 00061000
*              of the variable data section will not change.          * 00061100
*                                                                     * 00061200
*              The variable data section is not required by the       * 00061300
*              symptom record architecture.  If a length of zero is   * 00061400
*              specified, section 5 will be ignored.                  * 00061500
*              DEFAULT: OLD_VARLEN                                    * 00061600
*                                                                     * 00061700
*                                                                     * 00061800
*                                                                     * 00061900
*      PRIMARY                                                        * 00062000
*          This keyword indicates that the symptom data provided is   * 00062100
*          to be concatenated to section 3, the primary symptom       * 00062200
*          string.  The primary symptom string is an EBCDIC character * 00062300
*          string of problem symptoms.  The primary symptom string is * 00062400
*          used for duplicate problem recognition, therefore, the     * 00062500
*          symptom data must be repeatable for each instance of the   * 00062600
*          problem.                                                   * 00062700
*                                                                     * 00062800
*          In most cases the symptom record architecture requires     * 00062900
*          that the PIDS/aaaaaaaaa symptom be in section 3 of the     * 00063000
*          symptom record. Therefore, when the symptom record is      * 00063100
*          initialized by invoking SYMRBLD INITIAL, the symptom is    * 00063200
*          created from the data supplied with either the COMPID,     * 00063300
*          PID, or PROGRAM keyword and is placed as the first symptom * 00063400
*          in section 3.                                              * 00063500
*                                                                     * 00063600
*          The suggested minimum list of symptoms includes:           * 00063700
*                                                                     * 00063800
*                                                                     * 00063900
*          o   Return or Reason code  -  PRCS/aaaaaaaa                * 00064000
*                                                                     * 00064100
*          o   CSECT name  - RIDS/aaaaaaaa                            * 00064200
*                                                                     * 00064300
*          o   Load module name  - RIDS/aaaaaaaa#L                    * 00064400
*                                                                     * 00064500
*                                                                     * 00064600
*                                                                     * 00064700
*          The following restrictions apply to symptoms in the        * 00064800
*          primary symptom string:                                    * 00064900
*                                                                     * 00065000
*                                                                     * 00065100
*          o   The symptom data cannot contain imbedded blanks.  The  * 00065200
*              '#' can be used to substitute for desired blanks.      * 00065300
*                                                                     * 00065400
*          o   The total length of each symptom (key/data) may not    * 00065500
*              exceed 15 characters. The symptom length includes the  * 00065600
*              SDB key, a slash, and the EDCDIC data. (Note that      * 00065700
*              hexadecimal data doubles in length when converted to   * 00065800
*              EBCDIC.)                                               * 00065900
*                                                                     * 00066000
*                                                                     * 00066100
*                                                                     * 00066200
*                                                                     * 00066300
*          ÝSR=»xsr!SR_IN_R1º¨                                        * 00066400
*              is an optional input.  It is the name (RS-type), or    * 00066500
*              address in register (2)-(12), of the storage area to   * 00066600
*              be used for the symptom record.  If the keyword is not * 00066700
*              specified, register 1 is assumed to contain a pointer  * 00066800
*              to the symptom record.                                 * 00066900
*              DEFAULT: SR_IN_R1                                      * 00067000
*                                                                     * 00067100
*                                                                     * 00067200
*                                                                     * 00067300
*                                                                     * 00067400
*          ÝSDBSTRING=»xsdbstring!NO_SDB_STRINGº                      * 00067500
*              is the name (RS-type) of an optional character input   * 00067600
*              string to be added to the primary symptom string. The  * 00067700
*              data is a list of symptoms separated by a blank. A     * 00067800
*              symptom is an SDB key followed by a slash and EBCDIC   * 00067900
*              data.                                                  * 00068000
*                                                                     * 00068100
*              When both the SDBSTRING and SDBKEY keywords are        * 00068200
*              supplied on the same macro invocation, the data        * 00068300
*              provided with the SDBSTRING keyword will be put into   * 00068400
*              the symptom string first.                              * 00068500
*                                                                     * 00068600
*              For example:                                           * 00068700
*                                                                     * 00068800
*                  SYMRBLD PRIMARY,SDBSTRING=S3_DATA                  * 00068900
*                                                                     * 00069000
*                  S3_DATA DC CL41'MS/IEE0001I RIDS/IEAVTRRR          * 00069100
*                                  RIDS/IEAVTRLD#L'                   * 00069200
*                                                                     * 00069300
*              DEFAULT: NO_SDB_STRING                                 * 00069400
*                                                                     * 00069500
*                                                                     * 00069600
*              ÝSDBLEN=»xsdblen!DEFINED_LENGTHº¨                      * 00069700
*                  is  an  optional  halfword input decimal value, or * 00069800
*                  register  (2)-(12),  in the "1-256" range which is * 00069900
*                  the  length  of  the  data  provided.   The SDBLEN * 00070000
*                  keyword  is  mutually exclusive with the SDBLENVAR * 00070100
*                  keyword.                                           * 00070200
*                  DEFAULT: DEFINED_LENGTH                            * 00070300
*                                                                     * 00070400
*                                                                     * 00070500
*                                                                     * 00070600
*                                                                     * 00070700
*              ÝSDBLENVAR=»xsdblenvar!DEFINED_LENGTHº¨¨               * 00070800
*                  is  the  name  (RS-type),  or  address in register * 00070900
*                  (2)-(12),  of  an  optional  halfword  input which * 00071000
*                  contains  the  length  of the data provided.   The * 00071100
*                  length  of the data is assumed to be less than 256 * 00071200
*                  bytes.      The   SDBLENVAR  keyword  is  mutually * 00071300
*                  exclusive with the SDBLEN keyword.                 * 00071400
*                  DEFAULT: DEFINED_LENGTH                            * 00071500
*                                                                     * 00071600
*                                                                     * 00071700
*                                                                     * 00071800
*                                                                     * 00071900
*                                                                     * 00072000
*                                                                     * 00072100
*          ÝSDBKEY=»xsdbkey!NO_SDBKEYº                                * 00072200
*              is an optional character input name from the set of    * 00072300
*              SDB key names documented in the macro usage section or * 00072400
*              an SDB key in single quotes. The SDB key names         * 00072500
*              documented in the macro usage section are in the form  * 00072600
*              SDB followed by the SDB key.  For example: the SDB key * 00072700
*              name for the 'AB/S' SDB key is SDBAB_S.                * 00072800
*              DEFAULT: NO_SDBKEY                                     * 00072900
*                                                                     * 00073000
*                                                                     * 00073100
*              DATA=xdata                                             * 00073200
*                  is a required input.  It is the name (RS-type), or * 00073300
*                  address in register (2)-(12), of the area that     * 00073400
*                  contains the data associated with the key          * 00073500
*                  specified by the SDBKEY keyword.                   * 00073600
*                                                                     * 00073700
*                                                                     * 00073800
*                  ÝLEN=»xlen!DEFINED_LENGTHº¨                        * 00073900
*                      is an optional halfword input decimal value,   * 00074000
*                      or register (2)-(12), in the "1-13" range      * 00074100
*                      which is the length of the data provided.  The * 00074200
*                      LEN keyword is mutually exclusive with the     * 00074300
*                      LENVAR keyword.                                * 00074400
*                      DEFAULT: DEFINED_LENGTH                        * 00074500
*                                                                     * 00074600
*                                                                     * 00074700
*                                                                     * 00074800
*                                                                     * 00074900
*                  ÝLENVAR=»xlenvar!DEFINED_LENGTHº¨                  * 00075000
*                      is the name (RS-type), or address in register  * 00075100
*                      (2)-(12), of an optional halfword input which  * 00075200
*                      contains the length of the data provided.  The * 00075300
*                      length of the data is assumed to be between 1  * 00075400
*                      and 13 bytes.  The LENVAR keyword is mutually  * 00075500
*                      exclusive with the LEN keyword.                * 00075600
*                      DEFAULT: DEFINED_LENGTH                        * 00075700
*                                                                     * 00075800
*                                                                     * 00075900
*                                                                     * 00076000
*                                                                     * 00076100
*                  ÝCONVERT=»NO!YESº¨¨                                * 00076200
*                      is an optional keyword input which indicates 1 * 00076300
*                      to 4 bytes of hexadecimal data specified by    * 00076400
*                      the DATA keyword should be converted to        * 00076500
*                      EBCDIC.  If the length provided is greater     * 00076600
*                      than 4 bytes, the results are unpredictable.   * 00076700
*                                                                     * 00076800
*                      If CONVERT is specified with the user abend    * 00076900
*                      code SDB key, SDBAB_U, the hexadecimal data    * 00077000
*                      will be converted to decimal EBCDIC.           * 00077100
*                      DEFAULT: NO                                    * 00077200
*                                                                     * 00077300
*                                                                     * 00077400
*                      CONVERT=NO                                     * 00077500
*                          The data will not be converted.            * 00077600
*                                                                     * 00077700
*                      CONVERT=YES                                    * 00077800
*                          The data will be converted.                * 00077900
*                                                                     * 00078000
*                                                                     * 00078100
*                                                                     * 00078200
*                                                                     * 00078300
*                                                                     * 00078400
*                                                                     * 00078500
*                                                                     * 00078600
*                                                                     * 00078700
*                                                                     * 00078800
*                                                                     * 00078900
*          ÝTYPE=»TEST!NOTESTº¨                                       * 00079000
*              is an optional keyword input which specifies whether   * 00079100
*              code should be generated to test if the data will fit  * 00079200
*              in the symptom record before storing the data.         * 00079300
*              DEFAULT: TEST                                          * 00079400
*                                                                     * 00079500
*                                                                     * 00079600
*              TYPE=TEST                                              * 00079700
*                  Code will be generated to test if the data will    * 00079800
*                  fit into the symptom record.                       * 00079900
*                                                                     * 00080000
*              TYPE=NOTEST                                            * 00080100
*                  The data and key will be unconditionally moved     * 00080200
*                  into the symptom record.                           * 00080300
*                                                                     * 00080400
*                                                                     * 00080500
*                                                                     * 00080600
*                                                                     * 00080700
*                                                                     * 00080800
*      SECONDARY                                                      * 00080900
*          This keyword indicates that the symptom data provided is   * 00081000
*          to be concatenated to section 4, the secondary symptom     * 00081100
*          string.  The secondary symptom string is an EBCDIC         * 00081200
*          character string of problem symptoms, SDB key/data pairs.  * 00081300
*          The purpose of the secondary symptom string is to save     * 00081400
*          diagnostic data at the time of the error.  This data may   * 00081500
*          not be repeatable for each instance of the problem.        * 00081600
*                                                                     * 00081700
*          The suggested minimum list of symptoms includes:           * 00081800
*                                                                     * 00081900
*                                                                     * 00082000
*          o   Module assembly level -  LVLS/aaa                      * 00082100
*                                                                     * 00082200
*          o   Field name related to the error and contents -         * 00082300
*              FLDS/av10 VALU/Cav8                                    * 00082400
*                                                                     * 00082500
*              Note that binary and hex data can be provided with the * 00082600
*              VALU/B and VALU/H keys.                                * 00082700
*                                                                     * 00082800
*                                                                     * 00082900
*                                                                     * 00083000
*          The following restrictions apply to symptoms in the        * 00083100
*          secondary symptom string:                                  * 00083200
*                                                                     * 00083300
*                                                                     * 00083400
*          o   The symptom data cannot contain imbedded blanks.  The  * 00083500
*              '#' can be used to substitute for desired blanks.      * 00083600
*                                                                     * 00083700
*          o   The total length of each symptom (key/data) may not    * 00083800
*              exceed 15 characters. The symptom length includes the  * 00083900
*              SDB key, a slash, and the EDCDIC data. (Note that      * 00084000
*              hexadecimal data doubles in length when converted to   * 00084100
*              EBCDIC.)                                               * 00084200
*                                                                     * 00084300
*                                                                     * 00084400
*                                                                     * 00084500
*                                                                     * 00084600
*          ÝSR=»xsr!SR_IN_R1º¨                                        * 00084700
*              is an optional input.  It is the name (RS-type), or    * 00084800
*              address in register (2)-(12), of the storage area to   * 00084900
*              be used for the symptom record.  If the keyword is not * 00085000
*              specified, register 1 is assumed to contain a pointer  * 00085100
*              to the symptom record.                                 * 00085200
*              DEFAULT: SR_IN_R1                                      * 00085300
*                                                                     * 00085400
*                                                                     * 00085500
*                                                                     * 00085600
*                                                                     * 00085700
*          ÝSDBSTRING=»xsdbstring!NO_SDB_STRINGº                      * 00085800
*              is the name (RS-type), or address in register          * 00085900
*              (2)-(12), of an optional character input string to be  * 00086000
*              added to the secondary symptom string. The data is a   * 00086100
*              list of symptoms separated by a blank. A symptom is an * 00086200
*              SDB key followed by a slash and EBCDIC data.           * 00086300
*                                                                     * 00086400
*              When both the SDBSTRING and SDBKEY keywords are        * 00086500
*              supplied on the same macro invocation, the data        * 00086600
*              provided with the SDBSTRING keyword will be put into   * 00086700
*              the symptom string first.                              * 00086800
*                                                                     * 00086900
*              For example:                                           * 00087000
*                                                                     * 00087100
*                  SYMRBLD SECONDARY,SDBSTRING=S4_DATA,               * 00087200
*                          SDBKEY=SDBVALU_H,                          * 00087300
*                          DATA=COUNTER,CONVERT                       * 00087400
*                                                                     * 00087500
*                  COUNTER DS F                                       * 00087600
*                  S4_DATA DC CL22'LVLS/C20 FLDS/COUNTER'             * 00087700
*                                                                     * 00087800
*                  Secondary Symptom String:                          * 00087900
*                                                                     * 00088000
*                            LVLS/C20 FLDS/COUNTER VALU/HFFFFFFFF     * 00088100
*                                                                     * 00088200
*              DEFAULT: NO_SDB_STRING                                 * 00088300
*                                                                     * 00088400
*                                                                     * 00088500
*              ÝSDBLEN=»xsdblen!DEFINED_LENGTHº¨                      * 00088600
*                  is  an  optional  halfword input decimal value, or * 00088700
*                  register  (2)-(12),  in the "1-256" range which is * 00088800
*                  the  length  of  the  data  provided.   The SDBLEN * 00088900
*                  keyword  is  mutually exclusive with the SDBLENVAR * 00089000
*                  keyword.                                           * 00089100
*                  DEFAULT: DEFINED_LENGTH                            * 00089200
*                                                                     * 00089300
*                                                                     * 00089400
*                                                                     * 00089500
*                                                                     * 00089600
*              ÝSDBLENVAR=»xsdblenvar!DEFINED_LENGTHº¨¨               * 00089700
*                  is  the  name  (RS-type),  or  address in register * 00089800
*                  (2)-(12),  of  an  optional  halfword  input which * 00089900
*                  contains  the  length  of the data provided.   The * 00090000
*                  length  of the data is assumed to be between 1 and * 00090100
*                  256  bytes.    The  SDBLENVAR  keyword is mutually * 00090200
*                  exclusive with the SDBLEN keyword.                 * 00090300
*                  DEFAULT: DEFINED_LENGTH                            * 00090400
*                                                                     * 00090500
*                                                                     * 00090600
*                                                                     * 00090700
*                                                                     * 00090800
*                                                                     * 00090900
*                                                                     * 00091000
*          ÝSDBKEY=»xsdbkey!NO_SDBKEYº                                * 00091100
*              is an optional character input name from the set of    * 00091200
*              SDB key names documented in the macro usage section or * 00091300
*              an SDB key in single quotes. The SDB key names         * 00091400
*              documented in the macro usage section are in the form  * 00091500
*              SDB followed by the SDB key.  For example: the SDB key * 00091600
*              name for the 'RIDS/' SDB key is SDBRIDS.               * 00091700
*              DEFAULT: NO_SDBKEY                                     * 00091800
*                                                                     * 00091900
*                                                                     * 00092000
*              DATA=xdata                                             * 00092100
*                  is a required input.  It is the name (RS-type), or * 00092200
*                  address in register (2)-(12), of the area that     * 00092300
*                  contains the data associated with the key          * 00092400
*                  specified by the SDBKEY keyword.                   * 00092500
*                                                                     * 00092600
*                                                                     * 00092700
*                  ÝLEN=»xlen!DEFINED_LENGTHº¨                        * 00092800
*                      is an optional halfword input decimal value,   * 00092900
*                      or register (2)-(12), in the "1-13" range      * 00093000
*                      which is the length of the data provided.  The * 00093100
*                      LEN keyword is mutually exclusive with the     * 00093200
*                      LENVAR keyword.                                * 00093300
*                      DEFAULT: DEFINED_LENGTH                        * 00093400
*                                                                     * 00093500
*                                                                     * 00093600
*                                                                     * 00093700
*                                                                     * 00093800
*                  ÝLENVAR=»xlenvar!DEFINED_LENGTHº¨                  * 00093900
*                      is the name (RS-type), or address in register  * 00094000
*                      (2)-(12), of an optional halfword input which  * 00094100
*                      contains the length of the data provided.  The * 00094200
*                      length of the data is assumed to be between 1  * 00094300
*                      and 13 bytes.  The LENVAR keyword is mutually  * 00094400
*                      exclusive with the LEN keyword.                * 00094500
*                      DEFAULT: DEFINED_LENGTH                        * 00094600
*                                                                     * 00094700
*                                                                     * 00094800
*                                                                     * 00094900
*                                                                     * 00095000
*                  ÝCONVERT=»NO!YESº¨¨                                * 00095100
*                      is an optional keyword input which indicates 1 * 00095200
*                      to 4 bytes of hexadecimal data specified by    * 00095300
*                      the DATA keyword should be converted to        * 00095400
*                      EBCDIC.  If the length provided is greater     * 00095500
*                      than 4 bytes, the results are unpredictable.   * 00095600
*                                                                     * 00095700
*                      If CONVERT is specified with the user abend    * 00095800
*                      code SDB key, SDBAB_U, the hexadecimal data    * 00095900
*                      will be converted to decimal EBCDIC.           * 00096000
*                      DEFAULT: NO                                    * 00096100
*                                                                     * 00096200
*                                                                     * 00096300
*                      CONVERT=NO                                     * 00096400
*                          The data will not be converted.            * 00096500
*                                                                     * 00096600
*                      CONVERT=YES                                    * 00096700
*                          The data will be converted.                * 00096800
*                                                                     * 00096900
*                                                                     * 00097000
*                                                                     * 00097100
*                                                                     * 00097200
*                                                                     * 00097300
*                                                                     * 00097400
*                                                                     * 00097500
*                                                                     * 00097600
*                                                                     * 00097700
*                                                                     * 00097800
*          ÝTYPE=»TEST!NOTESTº¨                                       * 00097900
*              is an optional keyword input which specifies whether   * 00098000
*              code should be generated to test if the data will fit  * 00098100
*              in the symptom record before storing the data.         * 00098200
*              DEFAULT: TEST                                          * 00098300
*                                                                     * 00098400
*                                                                     * 00098500
*              TYPE=TEST                                              * 00098600
*                  Code will be generated to test if the data will    * 00098700
*                  fit into the symptom record.                       * 00098800
*                                                                     * 00098900
*              TYPE=NOTEST                                            * 00099000
*                  The data and key will be unconditionally moved     * 00099100
*                  into the symptom record.                           * 00099200
*                                                                     * 00099300
*                                                                     * 00099400
*                                                                     * 00099500
*                                                                     * 00099600
*                                                                     * 00099700
*      VARIABLE                                                       * 00099800
*          This keyword indicates that the symptom data provided is   * 00099900
*          to be concatenated to section 5, the variable data         * 00100000
*          section.  The variable data section is in key/length/data  * 00100100
*          format.  The purpose of the variable data section is to    * 00100200
*          provide additional serviceability data for debugging, for  * 00100300
*          example, a parameter list, a text description of the       * 00100400
*          problem, a portion of a control block, etc...              * 00100500
*                                                                     * 00100600
*          The VARIABLE keyword must be specified once for each       * 00100700
*          symptom provided in key/length/data format.                * 00100800
*                                                                     * 00100900
*                                                                     * 00101000
*          ÝSR=»xsr!SR_IN_R1º¨                                        * 00101100
*              is an optional input.  It is the name (RS-type), or    * 00101200
*              address in register (2)-(12), of the storage area to   * 00101300
*              be used for the symptom record.  If the keyword is not * 00101400
*              specified, register 1 is assumed to contain a pointer  * 00101500
*              to the symptom record.                                 * 00101600
*              DEFAULT: SR_IN_R1                                      * 00101700
*                                                                     * 00101800
*                                                                     * 00101900
*                                                                     * 00102000
*                                                                     * 00102100
*          S5KEY=xs5key                                               * 00102200
*              is a required halfword input symbol or decimal value   * 00102300
*              that is the key which describes the data put in        * 00102400
*              section 5 of the symptom record.  Names for two keys   * 00102500
*              (S5EBCDIC, S5HEX) are described by macro usage note 5. * 00102600
*                                                                     * 00102700
*                                                                     * 00102800
*                                                                     * 00102900
*                                                                     * 00103000
*          DATA=xdata                                                 * 00103100
*              is a required input.  It is the name (RS-type), or     * 00103200
*              address in register (2)-(12), of the area that         * 00103300
*              contains the data associated with the key specified by * 00103400
*              the S5KEY keyword.                                     * 00103500
*                                                                     * 00103600
*                                                                     * 00103700
*              ÝLEN=»xlen!DEFINED_LENGTHº¨                            * 00103800
*                  is an optional halfword input decimal value, or    * 00103900
*                  register (2)-(12), in the "1-256" range which      * 00104000
*                  contains the length of the data provided.  The LEN * 00104100
*                  keyword is mutually exclusive with the LENVAR      * 00104200
*                  keyword.                                           * 00104300
*                  DEFAULT: DEFINED_LENGTH                            * 00104400
*                                                                     * 00104500
*                                                                     * 00104600
*                                                                     * 00104700
*                                                                     * 00104800
*              ÝLENVAR=»xlenvar!DEFINED_LENGTHº¨                      * 00104900
*                  is the name (RS-type), or address in register      * 00105000
*                  (2)-(12), of an optional halfword input which      * 00105100
*                  contains the length of the data provided.  The     * 00105200
*                  length of the data is assumed to be between 1 and  * 00105300
*                  256 bytes.  The LENVAR keyword is mutually         * 00105400
*                  exclusive with the LEN keyword.                    * 00105500
*                  DEFAULT: DEFINED_LENGTH                            * 00105600
*                                                                     * 00105700
*                                                                     * 00105800
*                                                                     * 00105900
*                                                                     * 00106000
*                                                                     * 00106100
*                                                                     * 00106200
*          ÝTYPE=»TEST!NOTESTº¨                                       * 00106300
*              is an optional keyword input which specifies whether   * 00106400
*              code should be generated to test if the data will fit  * 00106500
*              in the symptom record before storing the data.         * 00106600
*              DEFAULT: TEST                                          * 00106700
*                                                                     * 00106800
*                                                                     * 00106900
*              TYPE=TEST                                              * 00107000
*                  Code will be generated to test if the data will    * 00107100
*                  fit into the symptom record.                       * 00107200
*                                                                     * 00107300
*              TYPE=NOTEST                                            * 00107400
*                  The data and key will be unconditionally moved     * 00107500
*                  into the symptom record.                           * 00107600
*                                                                     * 00107700
*                                                                     * 00107800
*                                                                     * 00107900
*                                                                     * 00108000
*                                                                     * 00108100
*      COMPLETE                                                       * 00108200
*          This keyword indicates that the symptom record is          * 00108300
*          complete, and is ready to be passed to the SYMREC service  * 00108400
*          in order to be written to SYS1.LOGREC.                     * 00108500
*                                                                     * 00108600
*          SYMRBLD COMPLETE is REQUIRED before the symptom record can * 00108700
*          be successfully written to SYS1.LOGREC.                    * 00108800
*                                                                     * 00108900
*                                                                     * 00109000
*          ÝSR=»xsr!SR_IN_R1º¨                                        * 00109100
*              is an optional input.  It is the name (RS-type), or    * 00109200
*              address in register (2)-(12), of the storage area to   * 00109300
*              be used for the symptom record.  If the keyword is not * 00109400
*              specified, register 1 is assumed to contain a pointer  * 00109500
*              to the symptom record.                                 * 00109600
*              DEFAULT: SR_IN_R1                                      * 00109700
*                                                                     * 00109800
*                                                                     * 00109900
*                                                                     * 00110000
*                                                                     * 00110100
*          ÝINVOKE=»YES!NOº¨                                          * 00110200
*              is an optional keyword input that indicates whether or * 00110300
*              not to invoke SYMREC.                                  * 00110400
*              DEFAULT: YES                                           * 00110500
*                                                                     * 00110600
*                                                                     * 00110700
*              ÝINVOKE=YES                                            * 00110800
*                  indicates SYMREC should be invoked.                * 00110900
*                                                                     * 00111000
*                                                                     * 00111100
*                  ÝRETCODE=»xretcode!NO_RETURN_CODEº¨                * 00111200
*                      is the name (RS-type) of an optional fullword  * 00111300
*                      input variable, or register (2)-(12), to       * 00111400
*                      contain the return code from the SYMREC        * 00111500
*                      service.                                       * 00111600
*                      DEFAULT: NO_RETURN_CODE                        * 00111700
*                                                                     * 00111800
*                                                                     * 00111900
*                                                                     * 00112000
*                                                                     * 00112100
*                  ÝRSNCODE=»xrsncode!NO_REASON_CODEº¨¨               * 00112200
*                      is the name (RS-type) of an optional fullword  * 00112300
*                      input variable, or register (2)-(12), to       * 00112400
*                      contain the reason code from the SYMREC        * 00112500
*                      service.                                       * 00112600
*                      DEFAULT: NO_REASON_CODE                        * 00112700
*                                                                     * 00112800
*                                                                     * 00112900
*                                                                     * 00113000
*              ÝINVOKE=NO¨                                            * 00113100
*                  indicates SYMREC should not be invoked.            * 00113200
*                                                                     * 00113300
*                                                                     * 00113400
*                                                                     * 00113500
*                                                                     * 00113600
*                                                                     * 00113700
*                                                                     * 00113800
*                                                                     * 00113900
*      End of a set of mutually exclusive required keys.              * 00114000
*                                                                     * 00114100
*                                                                     * 00114200
*01* RETURN CODES:  None.                                             * 00114300
*                                                                     * 00114400
*01* REASON CODES:  None.                                             * 00114500
*                                                                     * 00114600
*01* MODULE TYPE:  ASSEM MACRO                                        * 00114700
*                                                                     * 00114800
*02*   PROCESSOR:  ASSEM                                              * 00114900
*                                                                     * 00115000
*01* COMPONENT:  SCASR                                                * 00115100
*                                                                     * 00115200
*01* DISTRIBUTION LIBRARY: AMACLIB                                    * 00115300
*                                                                     * 00115400
*01* MACRO USAGE NOTES:                                               * 00115500
*                                                                     * 00115600
*                                                                     * 00115700
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00115800
*        global macro variable.  Any value other than 'NO' will       * 00115900
*        result in the macro expansion being printed.  The default is * 00116000
*        'YES'.  The following examples illustrate how the ZPRINT     * 00116100
*        variable should be set.                                      * 00116200
*                                                                     * 00116300
*                    GBLC &ZPRINT                                     * 00116400
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00116500
*                                                                     * 00116600
*    2.  The  ?EPILOG  macro  is  required  by  PLAS  invocations  of * 00116700
*        SYMRBLD.                                                     * 00116800
*                                                                     * 00116900
*    3.  Names  have  been defined for the recommended SDB keys.  The * 00117000
*        names  have been formed by placing 'SDB' in front of the key * 00117100
*        and  replacing  a  slash in the middle of an SDB key with an * 00117200
*        underscore.  Following are the names and descriptions of the * 00117300
*        SDB keys that can be specified with the SDBKEY keyword.  Any * 00117400
*        key  that  is  not in this list can be specified as a quoted * 00117500
*        string.                                                      * 00117600
*                                                                     * 00117700
*        The  following SYMRBLD examples only use the PRIMARY keyword * 00117800
*        indicating  that  the  symptom  will be added to the primary * 00117900
*        symptom  string.   The SECONDARY keyword may be used instead * 00118000
*        of PRIMARY in all of the following examples.                 * 00118100
*                                                                     * 00118200
*        The  following  characters  are used to show the data format * 00118300
*        for each SDB key:                                            * 00118400
*                                                                     * 00118500
*                                                                     * 00118600
*        o   a - Alphameric                                           * 00118700
*                                                                     * 00118800
*        o   n - Numeric                                              * 00118900
*                                                                     * 00119000
*        o   h - Hexadecimal                                          * 00119100
*                                                                     * 00119200
*        o   b - Binary                                               * 00119300
*                                                                     * 00119400
*        o   v - Variable length to the number shown                  * 00119500
*                                                                     * 00119600
*        o   (LZP) - Zero padding on the left is required             * 00119700
*                                                                     * 00119800
*        o   (RZP) - Zero padding on the right is required            * 00119900
*                                                                     * 00120000
*                                                                     * 00120100
*                                                                     * 00120200
*        Name           SDB Key             Description/Example       * 00120300
*        _________________________________________________________    * 00120400
*                                                                     * 00120500
*                                                                     * 00120600
*        SDBAB_S     AB/S      System Abend or program check.         * 00120700
*                                                                     * 00120800
*                              Form: AB/Saaaa                         * 00120900
*                              Example: AB/S00C4                      * 00121000
*                                                                     * 00121100
*                              SYMRBLD PRIMARY,SDBKEY=SDBAB_S,        * 00121200
*                                      DATA=ABEND_C,CONVERT,          * 00121300
*                                      LEN=2                          * 00121400
*                              ABEND_C DC XL2'00C4'                   * 00121500
*        _________________________________________________________    * 00121600
*                                                                     * 00121700
*        SDBAB_U     AB/U      User Abend Code.                       * 00121800
*                                                                     * 00121900
*                              NOTE:  When CONVERT is specified       * 00122000
*                                     for a user abend, the abend     * 00122100
*                                     code is converted from          * 00122200
*                                     hexadecimal to decimal          * 00122300
*                                     EBCDIC.                         * 00122400
*                                                                     * 00122500
*                              Form:    AB/Uaaaa                      * 00122600
*                              Example: AB/U0189                      * 00122700
*                                                                     * 00122800
*                              SYMRBLD PRIMARY,SDBKEY=SDBAB_U,        * 00122900
*                                      DATA=ABEND_C,CONVERT,          * 00123000
*                                      LEN=2                          * 00123100
*                              ABEND_C DC XL2'00BD'                   * 00123200
*        _________________________________________________________    * 00123300
*                                                                     * 00123400
*        SDBADRS     ADRS/     Any software routine/CSECT/program     * 00123500
*                              address, displacement within a         * 00123600
*                              routine, or offset within a field      * 00123700
*                              or control block.                      * 00123800
*                                                                     * 00123900
*                              Form:    ADRS/hhhhhhhh (LZP)           * 00124000
*                              Example: ADRS/0000145E                 * 00124100
*                                                                     * 00124200
*                              SYMRBLD PRIMARY,SDBKEY=SDBADRS,        * 00124300
*                                      DATA=(3),CONVERT,LEN=4         * 00124400
*        _________________________________________________________    * 00124500
*                                                                     * 00124600
*        SDBDEVS     DEVS/     IBM device types                       * 00124700
*                                                                     * 00124800
*                              Generic device types:                  * 00124900
*                              Form:    DEVS/aaa                      * 00125000
*                              Example: DEVS/PRT                      * 00125100
*                                                                     * 00125200
*                              SYMRBLD PRIMARY,SDBKEY=SDBDEVS,        * 00125300
*                                      DATA=PRINTER                   * 00125400
*                              PRINTER DC CL3'PRT'                    * 00125500
*                                                                     * 00125600
*                              Specific device types:                 * 00125700
*                              Form: DEVS/nnnnaaa                     * 00125800
*                              Example: DEVS/3278004                  * 00125900
*                                                                     * 00126000
*                              SYMRBLD PRIMARY,SDBKEY=SDBDEVS,        * 00126100
*                                      DATA=TERMINAL                  * 00126200
*                              TERMINAL DC CL7'3278004'               * 00126300
*                                                                     * 00126400
*                              Some values which may be entered:      * 00126500
*                                                                     * 00126600
*                              AUD (audios)  CHN (channels)           * 00126700
*                              CPU (CPU's)   CTL (control units)      * 00126800
*                              DAS (disks)   KEY (keyboard)           * 00126900
*                              LOC (local)   MIS (misc.)              * 00127000
*                              MOD (modem)   PCH (punch)              * 00127100
*                              PRT (printer) PWR (power)              * 00127200
*                              REM (remote)  RDR (readers)            * 00127300
*                              TAP (tapes)   VID (displays)           * 00127400
*        _________________________________________________________    * 00127500
*                                                                     * 00127600
*        SDBFLDS     FLDS/     A field, control block, or label       * 00127700
*                              involved with the problem. If a        * 00127800
*                              field name is longer than 10           * 00127900
*                              characters, use two keys and           * 00128000
*                              split the name of the field.           * 00128100
*                                                                     * 00128200
*                              Form:     FLDS/av10                    * 00128300
*                              Example:  FLDS/CVTPTR                  * 00128400
*                                                                     * 00128500
*                              SYMRBLD PRIMARY,SDBKEY=SDBFLDS,        * 00128600
*                                      DATA=FIELD                     * 00128700
*                              FIELD DC CL6'CVTPTR'                   * 00128800
*        _________________________________________________________    * 00128900
*                                                                     * 00129000
*         SDBLVLS    LVLS/     The system release or program          * 00129100
*                              product/component level that the       * 00129200
*                              problem occurs on.                     * 00129300
*                                                                     * 00129400
*                              Form:     LVLS/aaa (LZP)               * 00129500
*                              Example:  LVLS/C20 for HBB4410         * 00129600
*                                                                     * 00129700
*                              SYMRBLD PRIMARY,SDBKEY=SDBLVLS,        * 00129800
*                                      DATA=MSYSRLVL,LEN=3            * 00129900
*        _________________________________________________________    * 00130000
*                                                                     * 00130100
*         SDBMS      MS/       Program or device issued message.      * 00130200
*                              If there is no identifier, enter       * 00130300
*                              the message as it appears and          * 00130400
*                              MS/NOID to denote this.                * 00130500
*                                                                     * 00130600
*                              Form:    MS/av12                       * 00130700
*                              Example: MS/IEF244I                    * 00130800
*                                       MS/NOID MS/PRINTER MS/BUSY    * 00130900
*                                                                     * 00131000
*                              SYMRBLD PRIMARY,SDBKEY=SDBMS,          * 00131100
*                                      DATA=MS_ID                     * 00131200
*                              MS_ID DC CL7'IEF244I'                  * 00131300
*        _________________________________________________________    * 00131400
*                                                                     * 00131500
*        SDBOPCS     OPCS/     Software program operation code        * 00131600
*                              (opcodes), I/O read/write command      * 00131700
*                              codes, teleprocessing operation        * 00131800
*                              codes and request codes.               * 00131900
*                                                                     * 00132000
*                              Form:     OPCS/av8                     * 00132100
*                                        OPCS/SVChh                   * 00132200
*                                        OPCS/hh                      * 00132300
*                              Examples:                              * 00132400
*                                 Software: OPCS/MVC or OPCS/BALR     * 00132500
*                                 SVC Call: OPCS/SVC0A                * 00132600
*                                 I/O commands: OPCS/02               * 00132700
*                                 TP Op Codes: OPCS/010201            * 00132800
*                                                                     * 00132900
*                              SYMRBLD PRIMARY,SDBKEY=SDBOPCS,        * 00133000
*                                      DATA=SFT_OPC                   * 00133100
*                              SFT_OPC DC CL4'BALR'                   * 00133200
*        _________________________________________________________    * 00133300
*                                                                     * 00133400
*        SDBOVS      OVS/      Overlaid Storage.                      * 00133500
*                                                                     * 00133600
*                              Form:     OVS/av10                     * 00133700
*                              Example:  OVS/LOW                      * 00133800
*                                        OVS/CORE                     * 00133900
*                                                                     * 00134000
*                              SYMRBLD PRIMARY,SDBKEY=SDBOPCS,        * 00134100
*                                      DATA=STORAGE                   * 00134200
*                              STORAGE DC CL4'CORE'                   * 00134300
*        _________________________________________________________    * 00134400
*                                                                     * 00134500
*        SDBPCSS     PCSS/     Any software statement, JCL,           * 00134600
*                              operator or user commands,             * 00134700
*                              parameters, program language           * 00134800
*                              statements, data set names, library    * 00134900
*                              names, teleprocessing logical and      * 00135000
*                              physical unit names.  Special          * 00135100
*                              characters that are not accepted       * 00135200
*                              are entered by spelling the            * 00135300
*                              function represented. Environments,    * 00135400
*                              process names, procedures or           * 00135500
*                              other symptoms which do not fit        * 00135600
*                              elsewhere. Program function keys or    * 00135700
*                              other operator keys.                   * 00135800
*                                                                     * 00135900
*                              Form:     PCSS/av10                    * 00136000
*                              Example:  PCSS/LPALIB                  * 00136100
*                                        PCSS/ASCRE                   * 00136200
*                                        PCSS/DISPLAY                 * 00136300
*                                        PCSS/PF1                     * 00136400
*                                                                     * 00136500
*                              SYMRBLD PRIMARY,SDBKEY=SDBPCSS,        * 00136600
*                                      DATA=MACRO_NAME                * 00136700
*                              MACRO_NAME DC CL5'ASCRE'               * 00136800
*        _________________________________________________________    * 00136900
*                                                                     * 00137000
*        SDBPIDS     PIDS/     Product identifier.                    * 00137100
*                                                                     * 00137200
*                              NOTE: This key is automatically put    * 00137300
*                                    into the primary symptom         * 00137400
*                                    string by coding the INITIAL     * 00137500
*                                    keyword. If a problem is         * 00137600
*                                    related to more than one         * 00137700
*                                    component or product, then       * 00137800
*                                    the PIDS/ key can be provided    * 00137900
*                                    to identify that component.      * 00138000
*                                                                     * 00138100
*                              Form:     PIDS/aaaaaaaaa  (LZP)        * 00138200
*                              Example:  PIDS/5752SC1CM               * 00138300
*                                        PIDS/5740CB1b                * 00138400
*                                        PIDS/CREATRTN                * 00138500
*                                                                     * 00138600
*                              SYMRBLD PRIMARY SDBKEY=SDBPIDS         * 00138700
*                                              DATA=SYMREC            * 00138800
*                              SYMREC  DC CL9'5752SCASR'              * 00138900
*        _________________________________________________________    * 00139000
*                                                                     * 00139100
*        SDBPRCS     PRCS/     Any program generated return,          * 00139200
*                              reason, step, condition, or device     * 00139300
*                              status code.                           * 00139400
*                                                                     * 00139500
*                              Form:     PRCS/aaaaaaaa  (LZP)         * 00139600
*                              Example:  PRCS/04004008                * 00139700
*                                                                     * 00139800
*                                        PRCS/0000UNIT                * 00139900
*                                        PRCS/000CHECK                * 00140000
*                                                                     * 00140100
*                              SYMRBLD PRIMARY,SDBKEY=SDBPRCS,        * 00140200
*                                      DATA=(GPR00F),CONVERT,         * 00140300
*                                      LEN=4                          * 00140400
*                              GPR00F  EQU  0                         * 00140500
*        _________________________________________________________    * 00140600
*                                                                     * 00140700
*        SDBPTFS     PTFS/     Program temporary fix (PTF) or         * 00140800
*                              APAR associated with the problem.      * 00140900
*                                                                     * 00141000
*                              Form:     PTFS/aaaaaaa (RZP)           * 00141100
*                              Example:  PTFS/UZ00934                 * 00141200
*                                                                     * 00141300
*                              SYMRBLD PRIMARY,SDBKEY=SDBPTFS,        * 00141400
*                                      DATA=FIX                       * 00141500
*                              STORAGE DC CL7'UZ00934'                * 00141600
*                                                                     * 00141700
*        _________________________________________________________    * 00141800
*                                                                     * 00141900
*        SDBPUBS     PUBS/     Publication identifier.                * 00142000
*                                                                     * 00142100
*                              Form:     PUBS/av10                    * 00142200
*                              Example:  PUBS/GC38100807              * 00142300
*                                                                     * 00142400
*                              SYMRBLD PRIMARY,SDBKEY=SDBPUBS,        * 00142500
*                                      DATA=PUB#                      * 00142600
*                              PUB# DC CL10'GC38100807'               * 00142700
*        _________________________________________________________    * 00142800
*                                                                     * 00142900
*        SDBREGS     REGS/     A register number associated with      * 00143000
*                              the problem, followed by the offset    * 00143100
*                              from the PSW.                          * 00143200
*                                                                     * 00143300
*                              NOTE: Conversion for hexadecimal       * 00143400
*                                    to EBCDIC is not supported       * 00143500
*                                    for this keyword.                * 00143600
*                                                                     * 00143700
*                              Form:     REGS/xxhhh                   * 00143800
*                                        xx = register number(hex)    * 00143900
*                                        hhh = offset                 * 00144000
*                                                                     * 00144100
*                              Example:  REGS/02100                   * 00144200
*                                                                     * 00144300
*                              SYMRBLD PRIMARY,SDBKEY=SDBREGS,        * 00144400
*                                      DATA=REG_OFFSET,LEN=5          * 00144500
*                              REG_OFFSET DS CL5                      * 00144600
*                              REG#       DC CL2'02'                  * 00144700
*                              OFFSET     DS CL3'100'                 * 00144800
*        _________________________________________________________    * 00144900
*                                                                     * 00145000
*        SDBREGS_CR  REGS/CR   A control register associated with     * 00145100
*                              the problem. This symptom should be    * 00145200
*                              followed with a symptom containing     * 00145300
*                              the value in the register.             * 00145400
*                                                                     * 00145500
*                              Form:     REGS/CRhh                    * 00145600
*                              Example:  REGS/CR01                    * 00145700
*                                                                     * 00145800
*                              SYMRBLD PRIMARY,SDBKEY=SDBREGS_CR,     * 00145900
*                                      DATA=REG#,LEN=1,CONVERT        * 00146000
*                              REG#       DS FL1                      * 00146100
*        _________________________________________________________    * 00146200
*                                                                     * 00146300
*        SDBREGS_FP  REGS/FP   A floating point register              * 00146400
*                              associated with the problem.  This     * 00146500
*                              symptom should be followed with a      * 00146600
*                              symptom containing the value in the    * 00146700
*                              register.                              * 00146800
*                                                                     * 00146900
*                              Form:     REGS/FPhh                    * 00147000
*                              Example:  REGS/FP01                    * 00147100
*                                                                     * 00147200
*                              SYMRBLD PRIMARY,SDBKEY=SDBREGS_FP,     * 00147300
*                                      DATA=REG#,LEN=1,CONVERT        * 00147400
*                              REG#       DS FL1                      * 00147500
*        _________________________________________________________    * 00147600
*                                                                     * 00147700
*        SDBREGS_GR  REGS/GR   A gereral purpose register             * 00147800
*                              associated with the problem.  This     * 00147900
*                              symptom should be followed with a      * 00148000
*                              symptom containing the value in the    * 00148100
*                              register.                              * 00148200
*                                                                     * 00148300
*                              Form:     REGS/GRhh                    * 00148400
*                              Example:  REGS/GR01                    * 00148500
*                                                                     * 00148600
*                              SYMRBLD PRIMARY,SDBKEY=SDBREGS_GR,     * 00148700
*                                      DATA=REG#,LEN=1,CONVERT        * 00148800
*                              REG#       DS FL1                      * 00148900
*        _________________________________________________________    * 00149000
*                                                                     * 00149100
*        SDBREGS_AR  REGS/AR   An access register associated with     * 00149200
*                              the problem.  This symptom should      * 00149300
*                              be followed with a symptom             * 00149400
*                              containing the value in the            * 00149500
*                              register.                              * 00149600
*                                                                     * 00149700
*                              Form:     REGS/ARhh                    * 00149800
*                              Example:  REGS/AR01                    * 00149900
*                                                                     * 00150000
*                              SYMRBLD PRIMARY,SDBKEY=SDBREGS_AR,     * 00150100
*                                      DATA=REG#,LEN=1,CONVERT        * 00150200
*                              REG#       DS FL1                      * 00150300
*        _________________________________________________________    * 00150400
*                                                                     * 00150500
*        SDBRIDS     RIDS/     Module CSECT name.                     * 00150600
*                                                                     * 00150700
*                              Form:     RIDS/aaaaaaaa                * 00150800
*                              Example:  RIDS/ASRMODUL                * 00150900
*                                                                     * 00151000
*                              SYMRBLD PRIMARY,SDBKEY=SDBRIDS,        * 00151100
*                                      DATA=MOD_NAME                  * 00151200
*                              MOD_NAME DC CL8'ASRMODUL'              * 00151300
*        _________________________________________________________    * 00151400
*                                                                     * 00151500
*        SDBRIDSL    RIDS/     Load module name.                      * 00151600
*                                                                     * 00151700
*                              Form:     RIDS/aaaaaaaa                * 00151800
*                              Example:  RIDS/ASRLOADM#L              * 00151900
*                                                                     * 00152000
*                              SYMRBLD PRIMARY,SDBKEY=SDBRIDSL,       * 00152100
*                                      DATA=LOAD_MOD                  * 00152200
*                              LOAD_MOD DC CL10'ASRLOADM#L'           * 00152300
*        _________________________________________________________    * 00152400
*                                                                     * 00152500
*        SDBRIDSR    RIDS/     Recovery routine CSECT name            * 00152600
*                                                                     * 00152700
*                              Form:     RIDS/aaaaaaaa                * 00152800
*                              Example:  RIDS/ASRRECVR#R              * 00152900
*                                                                     * 00153000
*                              SYMRBLD PRIMARY,SDBKEY=SDBRIDSR,       * 00153100
*                                      DATA=RECV_MOD                  * 00153200
*                              RECV_MOD DC CL10'ASRRECVR#R'           * 00153300
*        _________________________________________________________    * 00153400
*                                                                     * 00153500
*        SDBSIG      SIG/      System or device issued operator       * 00153600
*                              warning signal.                        * 00153700
*                                                                     * 00153800
*                              Form:     SIG/av11                     * 00153900
*                              Example:  SIG/MACHINE SIG/CHECK        * 00154000
*                                        SIG/AUDIBLE SIG/ALARM        * 00154100
*                                                                     * 00154200
*                              SYMRBLD PRIMARY,SDBKEY=SDBSIG,         * 00154300
*                                      DATA=MSG1                      * 00154400
*                              SYMRBLD PRIMARY,SDBKEY=SDBSIG,         * 00154500
*                                      DATA=MSG2                      * 00154600
*                              MSG1  DC CL7'MACHINE'                  * 00154700
*                              MSG2  DC CL5'CHECK'                    * 00154800
*        _________________________________________________________    * 00154900
*                                                                     * 00155000
*        SDBVALU     VALU/     Contents of a register.  This SDB      * 00155100
*                              keyword must be preceded with one      * 00155200
*                              of:  REGS/CRhh, REGS/FPhh, or          * 00155300
*                              REGS/GRhh.                             * 00155400
*                                                                     * 00155500
*                              Form:    VALU/v8                       * 00155600
*                              Example: REGS/GR05 VALU/0000FFFF       * 00155700
*                                                                     * 00155800
*                              SYMRBLD PRIMARY,SDBKEY=SDBREGS_GR,     * 00155900
*                                      DATA=REG5                      * 00156000
*                              SYMRBLD PRIMARY,SDBKEY=SDBVALU,        * 00156100
*                                      DATA=(5),CONVERT,LEN=4         * 00156200
*                              REG5 DC CL2'05'                        * 00156300
*        _________________________________________________________    * 00156400
*                                                                     * 00156500
*        SDBVALU_B   VALU/B    Binary value of a field in error.      * 00156600
*                              This SDB key must be preceded by       * 00156700
*                              the name of the field. The most        * 00156800
*                              appropriate SDB key is FLDS/.          * 00156900
*                                                                     * 00157000
*                              NOTE: Conversion for hexadecimal to    * 00157100
*                                    binary EBCDIC is not provided    * 00157200
*                                    by SYMRBLD.                      * 00157300
*                                                                     * 00157400
*                              Form:    VALU/Bv8                      * 00157500
*                              Example: FLDS/FOOTPRINT                * 00157600
*                                       VALU/B01010000                * 00157700
*                                                                     * 00157800
*                              SYMRBLD PRIMARY,SDBKEY=SDBFLDS,        * 00157900
*                                      DATA=FIELD                     * 00158000
*                              SYMRBLD PRIMARY,SDBKEY=SDBVALU_B,      * 00158100
*                                      DATA=FOOTPRINT,LEN=8           * 00158200
*                                                                     * 00158300
*                              FIELD DC CL9'FOOTPRINT'                * 00158400
*                              FOOTPRINT DC CL8'01010000'             * 00158500
*        _________________________________________________________    * 00158600
*                                                                     * 00158700
*        SDBVALU_C   VALU/C    Character value of a field in          * 00158800
*                              error. This SDB key must be            * 00158900
*                              preceded by the name of the field.     * 00159000
*                              The most appropriate SDB key is        * 00159100
*                              FLDS/.                                 * 00159200
*                                                                     * 00159300
*                              Form: VALU/Cv8                         * 00159400
*                              Example: FLDS/NAME VALU/CABCD          * 00159500
*                                                                     * 00159600
*                              SYMRBLD PRIMARY,SDBKEY=SDBFLDS,        * 00159700
*                                      DATA=FIELD                     * 00159800
*                              SYMRBLD PRIMARY,SDBKEY=SDBVALU_C,      * 00159900
*                                      DATA=NAME,LEN=8                * 00160000
*                              FIELD DC CL4'NAME'                     * 00160100
*                              NAME  DS CL8                           * 00160200
*        _________________________________________________________    * 00160300
*                                                                     * 00160400
*        SDBVALU_H   VALU/H    Hexadecimal value of a field in        * 00160500
*                              error.  This SDB key must be           * 00160600
*                              preceded by the name of the field.     * 00160700
*                              The most appropriate SDB key is        * 00160800
*                              FLDS/.                                 * 00160900
*                                                                     * 00161000
*                              Form:    VALU/Hv8                      * 00161100
*                              Example: FLDS/COUNTER                  * 00161200
*                                       VALU/H0000000F                * 00161300
*                                                                     * 00161400
*                              SYMRBLD PRIMARY,SDBKEY=SDBFLDS,        * 00161500
*                                      DATA=CL7'COUNTER'              * 00161600
*                              SYMRBLD PRIMARY,SDBKEY=SDBVALU_H,      * 00161700
*                                      DATA=COUNTER,LEN=4             * 00161800
*                              FIELD   DC CL7'COUNTER'                * 00161900
*                              COUNTER DS F                           * 00162000
*        _________________________________________________________    * 00162100
*                                                                     * 00162200
*        SDBWS_D     WS/D      System or device-issued disabled       * 00162300
*                              WAIT code.                             * 00162400
*                                                                     * 00162500
*                              Form:    WS/Dhhhh                      * 00162600
*                              Example: WS/D0028                      * 00162700
*                                                                     * 00162800
*                              SYMRBLD PRIMARY,SDBKEY=SDBWS_D,        * 00162900
*                                      DATA=WAIT_CODE,LEN=2,          * 00163000
*                                      CONVERT                        * 00163100
*                              WAIT_CODE DS FL2                       * 00163200
*        _________________________________________________________    * 00163300
*                                                                     * 00163400
*        SDBWS_E     WS/E      System or device-issued enabled        * 00163500
*                              WAIT code.                             * 00163600
*                                                                     * 00163700
*                              Form:    WS/Ehhhh                      * 00163800
*                              Example: WS/E0007                      * 00163900
*                                                                     * 00164000
*                              SYMRBLD PRIMARY,SDBKEY=SDBWS_E         * 00164100
*                                      DATA=WAIT_CODE,LEN=2,          * 00164200
*                                      CONVERT                        * 00164300
*                              WAIT_CODE DC FL2'0007'                 * 00164400
*        _________________________________________________________    * 00164500
*                                                                     * 00164600
*                                                                     * 00164700
*    4.  Following  is  an  example for providing an SDBKEY that does * 00164800
*        not have a name.                                             * 00164900
*                                                                     * 00165000
*                                                                     * 00165100
*                    RECFM/    Record Format.                         * 00165200
*                                                                     * 00165300
*                              Form:    RECFM/fff                     * 00165400
*                              Example: RECFM/FB -  fixed block       * 00165500
*                                       RECFM/VBA - Variable          * 00165600
*                                                   blocked ASA       * 00165700
*                                                                     * 00165800
*                              SYMRBLD PRIMARY,SDBKEY='RECFM/'        * 00165900
*                                      DATA=FORMAT,LEN=3              * 00166000
*                              FORMAT  DC CL3'VBA'                    * 00166100
*                                                                     * 00166200
*    5.  Names  have  been  defined  for two keys that can be used in * 00166300
*        section  5 of the symptom record, the variable data section. * 00166400
*        Any  key  that  is  not in this list can be specified as a 2 * 00166500
*        byte hexadecimal value.                                      * 00166600
*                                                                     * 00166700
*          S5EBCDIC  F000     EBCDIC printable data. Available for    * 00166800
*                             all users.                              * 00166900
*                                                                     * 00167000
*          S5HEX     FF00     Hexadecimal data. Available for all     * 00167100
*                             users.                                  * 00167200
*                                                                     * 00167300
*          Example for providing 20 bytes of control block, CNTL,     * 00167400
*          in section 5:                                              * 00167500
*                                                                     * 00167600
*             SYMRBLD VARIABLE S5KEY=S5HEX,DATA=CNTL,LEN=20           * 00167700
*                                                                     * 00167800
*             CNTL DS 0CL100                                          * 00167900
*                   .                                                 * 00168000
*                   .                                                 * 00168100
*                   .                                                 * 00168200
*                                                                     * 00168300
*                                                                     * 00168400
*                                                                     * 00168500
*                                                                     * 00168600
*01* CHANGE ACTIVITY:                                                 * 00168700
*                                                                     * 00168800
*   Flag LineItem  FMID    Date   ID    Comment                       * 00168900
*                                                                     * 00169000
*    $L0=SYME1    HBB4410 881207 PDBG:  SYMREC Enhancements           * 00169100
*    $D1=DEO1030  HBB4410 890313 PDBG:  Change name from SRBUILD to   * 00169200
*                                         SYMRBLD                     * 00169300
*    $D2=DEO0258  HBB4410 890918 PDBG:  Change fixed 15 length and    * 00169400
*                                         offsets to fixed 16         * 00169500
*    $P1=PEO3066  HBB4410 900105 PDCI:  Correct test for length of    * 00169600
*                                         section 5 data.             * 00169700
*    $01=OW08389  HBB5510 940922 PDXZ:  Add DAE=NO option.            * 00169800
*    $P2=PYV0065  HBB7707 010920 PDKD:  Correct the initial clearing  * 00169900
*                                         of the record.              * 00170000
****** END OF SPECIFICATIONS *****************************************/ 00170100
*/* TLINE 1 *********************************************************** 00170200
         MACRO                                                          00170300
&XLABEL  SYMRBLD &SR=,&PRIMLEN=,&SECLEN=,&VARLEN=,&ARCHLEV=,&DAE=,     *00170400
               &COMPDSC=,&PROBLEM=,&SERVLEV=,&IBM=,&PROGRAM=,&PROGLEV=,*00170500
               &COMPID=,&COMPLEV=,&PID=,&PIDLEVEL=,&SUBSYSTEM=,        *00170600
               &SDBSTRING=,&SDBLEN=,&SDBLENVAR=,&SDBKEY=,&DATA=,&LEN=, *00170700
               &LENVAR=,&CONVERT=,&TYPE=,&S5KEY=,&INVOKE=,&RETCODE=,   *00170800
               &RSNCODE=                                                00170900
.*                                                                      00171000
*                MACDATE -09/20/01-<0>                                  00171100
.*                                                                      00171200
.*******************************************************************    00171300
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00171400
.*******************************************************************    00171500
                GBLC  &ZPRINT     YES=PRINT NO=NO PRINT                 00171600
                GBLC  &ZTEST      YES=TEST NO=NO TEST                   00171700
                GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX           00171800
.*                                                                      00171900
                GBLC  &ZSYMRBLD   YES=MACRO USED AT LEAST ONCE          00172000
.*******************************************************************    00172100
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00172200
.*******************************************************************    00172300
                LCLC  &ZMS        ERROR MESSAGE WORK AREA               00172400
                LCLC  &ZCNDX      LAST THREE SYSNDX CHARACTERS          00172500
                LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED            00172600
                LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR           00172700
                LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE           00172800
                LCLA  &ZAWRK      USED AS A WORK AREA                   00172900
                LCLA  &ZASIZ      USED FOR SIZE OF VALUE                00173000
                LCLA  &ZN         NUMERIC WORK VARIABLE                 00173100
                LCLC  &ZC         CHARACTER WORK VARIABLE               00173200
                LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE           00173300
                LCLA  &ZTLA       VALUE TOO LONG VARIABLE               00173400
                LCLC  &ZMAC_G     "G" or null                           00173500
&ZMAC_G         SETC  ''                                                00173600
                LCLC  &ZMAC_LR                                          00173700
&ZMAC_LR        SETC  'LR'                                              00173800
                LCLC  &ZMAC_L                                           00173900
&ZMAC_L         SETC  'L'                                               00174000
                LCLC  &ZMAC_ST                                          00174100
&ZMAC_ST        SETC  'ST'                                              00174200
                LCLA  &ZMACRET    MACRO RETURN CODE                     00174300
&ZMACRET        SETA  0           ASSUME NO ERRORS                      00174400
.*                                                                      00174500
                LCLC  &ZCSYSLIST(255)           NONXKEY, POS ARRAY      00174600
                LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()            00174700
                LCLA  &ZPLLEN     PARAMETER LIST LENGTH                 00174800
                LCLC  &ZENDBASEPL               End of base PL          00174900
.*******************************************************************    00175000
.***AB.04  MACRO VARIABLES FOR RANGES AND SETS OF ARGUMENTS             00175100
.*******************************************************************    00175200
                LCLA  &ZI         INDEX FOR ARRAY                       00175300
                LCLA  &ZJ         INDEX FOR PARMS                       00175400
                LCLA  &ZK         INDEX FOR PARSE                       00175500
                LCLA  &ZLO        LOW RANGE VALUE                       00175600
                LCLA  &ZHI        HIGH RANGE VALUE                      00175700
                LCLC  &ZW         WORK AREA FOR PARM                    00175800
.*******************************************************************    00175900
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00176000
.*******************************************************************    00176100
                LCLC  &XTEST      ++ VALUE                              00176200
                LCLC  &XINITIAL   ++ VALUE                              00176300
                LCLC  &XSR        ++ NAME                               00176400
                LCLC  &XPRIMLEN   ++ NAME                               00176500
                LCLC  &XSECLEN    ++ NAME                               00176600
                LCLC  &XVARLEN    ++ NAME                               00176700
                LCLC  &XARCHLEV   ++ VALUE                              00176800
                LCLC  &XDAE       ++ VALUE                              00176900
                LCLC  &XCOMPDSC   ++ NAME                               00177000
                LCLC  &XPROBLEM   ++ NAME                               00177100
                LCLC  &XSERVLEV   ++ NAME                               00177200
                LCLC  &XNOCONVERTS              ++ NAME                 00177300
                LCLC  &XIBM       ++ VALUE                              00177400
                LCLC  &XPROGRAM   ++ NAME                               00177500
                LCLC  &XPROGLEV   ++ NAME                               00177600
                LCLC  &XTEST2     ++ NAME                               00177700
                LCLC  &XCOMPID    ++ NAME                               00177800
                LCLC  &XCOMPLEV   ++ NAME                               00177900
                LCLC  &XPID       ++ NAME                               00178000
                LCLC  &XPIDLEVEL  ++ NAME                               00178100
                LCLC  &XSUBSYSTEM               ++ NAME                 00178200
                LCLC  &XRESET     ++ VALUE                              00178300
                LCLC  &XPRIMARY   ++ VALUE                              00178400
                LCLC  &XSDBSTRING               ++ NAME                 00178500
                LCLC  &XSDBLEN    ++ VALUE                              00178600
                LCLC  &XSDBLENVAR               ++ NAME                 00178700
                LCLC  &XSDBKEY    ++ VALUE                              00178800
                LCLC  &XDATA      ++ NAME                               00178900
                LCLC  &XLEN       ++ VALUE                              00179000
                LCLC  &XLENVAR    ++ NAME                               00179100
                LCLC  &XCONVERT   ++ VALUE                              00179200
                LCLC  &XTYPE      ++ VALUE                              00179300
                LCLC  &XSECONDARY               ++ VALUE                00179400
                LCLC  &XVARIABLE  ++ VALUE                              00179500
                LCLC  &XS5KEY     ++ VALUE                              00179600
                LCLC  &XCOMPLETE  ++ VALUE                              00179700
                LCLC  &XINVOKE    ++ VALUE                              00179800
                LCLC  &XRETCODE   ++ NAME                               00179900
                LCLC  &XRSNCODE   ++ NAME                               00180000
.*******************************************************************    00180100
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00180200
.*******************************************************************    00180300
                LCLC  &ZXTEST     ++ INPUT VALUE                        00180400
                LCLC  &ZXINITIAL  ++ INPUT VALUE                        00180500
                LCLC  &ZXSR       ++ INPUT NAME                         00180600
                LCLC  &ZXPRIMLEN  ++ INPUT NAME                         00180700
                LCLC  &ZXSECLEN   ++ INPUT NAME                         00180800
                LCLC  &ZXVARLEN   ++ INPUT NAME                         00180900
                LCLC  &ZXARCHLEV  ++ INPUT VALUE                        00181000
                LCLC  &ZXDAE      ++ INPUT VALUE                        00181100
                LCLC  &ZXCOMPDSC  ++ INPUT NAME                         00181200
                LCLC  &ZXPROBLEM  ++ INPUT NAME                         00181300
                LCLC  &ZXSERVLEV  ++ INPUT NAME                         00181400
                LCLC  &ZXNOCONVERTS             ++ INPUT NAME           00181500
                LCLC  &ZXIBM      ++ INPUT VALUE                        00181600
                LCLC  &ZXPROGRAM  ++ INPUT NAME                         00181700
                LCLC  &ZXPROGLEV  ++ INPUT NAME                         00181800
                LCLC  &ZXTEST2    ++ INPUT NAME                         00181900
                LCLC  &ZXCOMPID   ++ INPUT NAME                         00182000
                LCLC  &ZXCOMPLEV  ++ INPUT NAME                         00182100
                LCLC  &ZXPID      ++ INPUT NAME                         00182200
                LCLC  &ZXPIDLEVEL               ++ INPUT NAME           00182300
                LCLC  &ZXSUBSYSTEM              ++ INPUT NAME           00182400
                LCLC  &ZXRESET    ++ INPUT VALUE                        00182500
                LCLC  &ZXPRIMARY  ++ INPUT VALUE                        00182600
                LCLC  &ZXSDBSTRING              ++ INPUT NAME           00182700
                LCLC  &ZXSDBLEN   ++ INPUT VALUE                        00182800
                LCLC  &ZXSDBLENVAR              ++ INPUT NAME           00182900
                LCLC  &ZXSDBKEY   ++ INPUT VALUE                        00183000
                LCLC  &ZXDATA     ++ INPUT NAME                         00183100
                LCLC  &ZXLEN      ++ INPUT VALUE                        00183200
                LCLC  &ZXLENVAR   ++ INPUT NAME                         00183300
                LCLC  &ZXCONVERT  ++ INPUT VALUE                        00183400
                LCLC  &ZXTYPE     ++ INPUT VALUE                        00183500
                LCLC  &ZXSECONDARY              ++ INPUT VALUE          00183600
                LCLC  &ZXVARIABLE               ++ INPUT VALUE          00183700
                LCLC  &ZXS5KEY    ++ INPUT VALUE                        00183800
                LCLC  &ZXCOMPLETE               ++ INPUT VALUE          00183900
                LCLC  &ZXINVOKE   ++ INPUT VALUE                        00184000
                LCLC  &ZXRETCODE  ++ INPUT NAME                         00184100
                LCLC  &ZXRSNCODE  ++ INPUT NAME                         00184200
.********************************************************************   00184300
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00184400
.********************************************************************   00184500
                ACTR  10000                                             00184600
.*-------------------------------------------------------------------   00184700
.***AG.KMEKY05 VALUE, RQD INPUT, ME KEYS -NO ARGUMENTS                  00184800
&XTEST          SETC  ''          INITIALIZE XVARIABLE                  00184900
&ZASYSLNDX      SETA  0                                                 00185000
.ZG2A           ANOP  ,           POSITIONAL KEY SEARCH                 00185100
&ZASYSLNDX      SETA  &ZASYSLNDX+1              NEXT POSITIONAL         00185200
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG2B  DONE                    00185300
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZG2A             00185400
         AIF   ('&SYSLIST(&ZASYSLNDX)' NE 'INITIAL').ZG2A               00185500
&ZCSYSLIST(&ZASYSLNDX) SETC 'NONXKEY'           KEY IS NON-XKEY         00185600
&ZXTEST         SETC  'INPUT'     SET IN/OUTPUT                         00185700
&XTEST          SETC  'INITIAL'   SET XVARIABLE                         00185800
&ZXINITIAL      SETC  'INPUT'     SET IN/OUTPUT                         00185900
&XINITIAL       SETC  'INITIAL'   SET XVARIABLE PARM                    00186000
.ZG2B           ANOP  ,                                                 00186100
.*-------------------------------------------------------------------   00186200
.***AG.KMEKY06 VALUE, RQD INPUT, ME KEYS -NO ARGUMENTS                  00186300
&ZASYSLNDX      SETA  0                                                 00186400
.ZG60A          ANOP  ,           POSITIONAL KEY SEARCH                 00186500
&ZASYSLNDX      SETA  &ZASYSLNDX+1              NEXT POSITIONAL         00186600
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG60C  DONE                   00186700
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZG60A            00186800
         AIF   ('&SYSLIST(&ZASYSLNDX)' NE 'RESET').ZG60A                00186900
&ZCSYSLIST(&ZASYSLNDX) SETC 'NONXKEY'           KEY IS NON-XKEY         00187000
                AIF   (K'&XTEST LE 0).ZG60B     VALID                   00187100
&ZMS            SETC  '"RESET'    *KMEKA* MNOTE                         00187200
&ZMS            SETC  '&ZMS."'                                          00187300
&ZMS            SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'             00187400
&ZMS            SETC  '&ZMS "&XTEST"'                                   00187500
                MNOTE 8,' &ZMS KEY.'                                    00187600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00187700
                AGO   .ZG60C                                            00187800
.*                                                                      00187900
.ZG60B          ANOP  ,                                                 00188000
&ZXTEST         SETC  'INPUT'     SET IN/OUTPUT                         00188100
&XTEST          SETC  'RESET'     SET XVARIABLE                         00188200
&ZXRESET        SETC  'INPUT'     SET IN/OUTPUT                         00188300
&XRESET         SETC  'RESET'     SET XVARIABLE PARM                    00188400
.ZG60C          ANOP  ,                                                 00188500
.*-------------------------------------------------------------------   00188600
.***AG.KMEKY06 VALUE, RQD INPUT, ME KEYS -NO ARGUMENTS                  00188700
&ZASYSLNDX      SETA  0                                                 00188800
.ZG73A          ANOP  ,           POSITIONAL KEY SEARCH                 00188900
&ZASYSLNDX      SETA  &ZASYSLNDX+1              NEXT POSITIONAL         00189000
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG73C  DONE                   00189100
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZG73A            00189200
         AIF   ('&SYSLIST(&ZASYSLNDX)' NE 'PRIMARY').ZG73A              00189300
&ZCSYSLIST(&ZASYSLNDX) SETC 'NONXKEY'           KEY IS NON-XKEY         00189400
                AIF   (K'&XTEST LE 0).ZG73B     VALID                   00189500
&ZMS            SETC  '"PRIMARY'  *KMEKA* MNOTE                         00189600
&ZMS            SETC  '&ZMS."'                                          00189700
&ZMS            SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'             00189800
&ZMS            SETC  '&ZMS "&XTEST"'                                   00189900
                MNOTE 8,' &ZMS KEY.'                                    00190000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00190100
                AGO   .ZG73C                                            00190200
.*                                                                      00190300
.ZG73B          ANOP  ,                                                 00190400
&ZXTEST         SETC  'INPUT'     SET IN/OUTPUT                         00190500
&XTEST          SETC  'PRIMARY'   SET XVARIABLE                         00190600
&ZXPRIMARY      SETC  'INPUT'     SET IN/OUTPUT                         00190700
&XPRIMARY       SETC  'PRIMARY'   SET XVARIABLE PARM                    00190800
.ZG73C          ANOP  ,                                                 00190900
.*-------------------------------------------------------------------   00191000
.***AG.KMEKY06 VALUE, RQD INPUT, ME KEYS -NO ARGUMENTS                  00191100
&ZASYSLNDX      SETA  0                                                 00191200
.ZG108A         ANOP  ,           POSITIONAL KEY SEARCH                 00191300
&ZASYSLNDX      SETA  &ZASYSLNDX+1              NEXT POSITIONAL         00191400
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG108C  DONE                  00191500
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZG108A           00191600
         AIF   ('&SYSLIST(&ZASYSLNDX)' NE 'SECONDARY').ZG108A           00191700
&ZCSYSLIST(&ZASYSLNDX) SETC 'NONXKEY'           KEY IS NON-XKEY         00191800
                AIF   (K'&XTEST LE 0).ZG108B    VALID                   00191900
&ZMS            SETC  '"SECONDARY'              *KMEKA* MNOTE           00192000
&ZMS            SETC  '&ZMS."'                                          00192100
&ZMS            SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'             00192200
&ZMS            SETC  '&ZMS "&XTEST"'                                   00192300
                MNOTE 8,' &ZMS KEY.'                                    00192400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00192500
                AGO   .ZG108C                                           00192600
.*                                                                      00192700
.ZG108B         ANOP  ,                                                 00192800
&ZXTEST         SETC  'INPUT'     SET IN/OUTPUT                         00192900
&XTEST          SETC  'SECONDARY'               SET XVARIABLE           00193000
&ZXSECONDARY    SETC  'INPUT'     SET IN/OUTPUT                         00193100
&XSECONDARY     SETC  'SECONDARY'               SET XVARIABLE PARM      00193200
.ZG108C         ANOP  ,                                                 00193300
.*-------------------------------------------------------------------   00193400
.***AG.KMEKY06 VALUE, RQD INPUT, ME KEYS -NO ARGUMENTS                  00193500
&ZASYSLNDX      SETA  0                                                 00193600
.ZG143A         ANOP  ,           POSITIONAL KEY SEARCH                 00193700
&ZASYSLNDX      SETA  &ZASYSLNDX+1              NEXT POSITIONAL         00193800
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG143C  DONE                  00193900
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZG143A           00194000
         AIF   ('&SYSLIST(&ZASYSLNDX)' NE 'VARIABLE').ZG143A            00194100
&ZCSYSLIST(&ZASYSLNDX) SETC 'NONXKEY'           KEY IS NON-XKEY         00194200
                AIF   (K'&XTEST LE 0).ZG143B    VALID                   00194300
&ZMS            SETC  '"VARIABLE'               *KMEKA* MNOTE           00194400
&ZMS            SETC  '&ZMS."'                                          00194500
&ZMS            SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'             00194600
&ZMS            SETC  '&ZMS "&XTEST"'                                   00194700
                MNOTE 8,' &ZMS KEY.'                                    00194800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00194900
                AGO   .ZG143C                                           00195000
.*                                                                      00195100
.ZG143B         ANOP  ,                                                 00195200
&ZXTEST         SETC  'INPUT'     SET IN/OUTPUT                         00195300
&XTEST          SETC  'VARIABLE'  SET XVARIABLE                         00195400
&ZXVARIABLE     SETC  'INPUT'     SET IN/OUTPUT                         00195500
&XVARIABLE      SETC  'VARIABLE'  SET XVARIABLE PARM                    00195600
.ZG143C         ANOP  ,                                                 00195700
.*-------------------------------------------------------------------   00195800
.***AG.KMEKY06 VALUE, RQD INPUT, ME KEYS -NO ARGUMENTS                  00195900
&ZASYSLNDX      SETA  0                                                 00196000
.ZG164A         ANOP  ,           POSITIONAL KEY SEARCH                 00196100
&ZASYSLNDX      SETA  &ZASYSLNDX+1              NEXT POSITIONAL         00196200
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG164C  DONE                  00196300
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZG164A           00196400
         AIF   ('&SYSLIST(&ZASYSLNDX)' NE 'COMPLETE').ZG164A            00196500
&ZCSYSLIST(&ZASYSLNDX) SETC 'NONXKEY'           KEY IS NON-XKEY         00196600
                AIF   (K'&XTEST LE 0).ZG164B    VALID                   00196700
&ZMS            SETC  '"COMPLETE'               *KMEKA* MNOTE           00196800
&ZMS            SETC  '&ZMS."'                                          00196900
&ZMS            SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'             00197000
&ZMS            SETC  '&ZMS "&XTEST"'                                   00197100
                MNOTE 8,' &ZMS KEY.'                                    00197200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00197300
                AGO   .ZG164C                                           00197400
.*                                                                      00197500
.ZG164B         ANOP  ,                                                 00197600
&ZXTEST         SETC  'INPUT'     SET IN/OUTPUT                         00197700
&XTEST          SETC  'COMPLETE'  SET XVARIABLE                         00197800
&ZXCOMPLETE     SETC  'INPUT'     SET IN/OUTPUT                         00197900
&XCOMPLETE      SETC  'COMPLETE'  SET XVARIABLE PARM                    00198000
.ZG164C         ANOP  ,                                                 00198100
.*------------------------------------------------------------------    00198200
.***AG.KME4Y09 VALUE, RQD INPUT, ME KEYS -CHECK IF KEY ENTERED          00198300
                AIF   (K'&XTEST GT 0).ZG179B                            00198400
&ZXTEST         SETC  ''          RESET IN/OUTPUT                       00198500
&ZXINITIAL      SETC  ''          RESET IN/OUTPUT                       00198600
&XTEST          SETC  ''          ENSURE NULL                           00198700
&XINITIAL       SETC  ''          ENSURE NULL                           00198800
&ZMS            SETC  'ONE OF THE FOLLOWING'    *KMERA* MNOTE           00198900
&ZMS            SETC  '&ZMS MUTUALLY EXCLUSIVE KEY(S) IS'               00199000
&ZMS            SETC  '&ZMS REQUIRED:'                                  00199100
&ZMS            SETC  '&ZMS "INITIAL",'         VALID ME KEY            00199200
&ZMS            SETC  '&ZMS "RESET",'           VALID ME KEY            00199300
&ZMS            SETC  '&ZMS "PRIMARY",'         VALID ME KEY            00199400
&ZMS            SETC  '&ZMS "SECONDARY",'       VALID ME KEY            00199500
&ZMS            SETC  '&ZMS "VARIABLE",'        VALID ME KEY            00199600
&ZMS            SETC  '&ZMS OR "COMPLETE".'     VALID ME KEY            00199700
                MNOTE 8,' &ZMS '                                        00199800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00199900
.ZG179B         ANOP  ,                                                 00200000
.*-------------------------------------------------------------------   00200100
.***AG.KMEKY13 VALUE, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES          00200200
.ZG2            AIF   ('&XTEST' NE 'INITIAL').ZG60                      00200300
.*-------------------------------------------------------------------   00200400
.***AG.KMEKY14 VALUE, RQD INPUT, ME KEYS -DISALLOWED KEYS               00200500
&ZCVAL          SETC ''           ERROR KEY FIELD                       00200600
.ZG2I0          AIF   (K'&SDBSTRING LE 0).ZG2I1                         00200700
&ZCVAL          SETC '&ZCVAL SDBSTRING'         DISALLOWED KEY          00200800
.ZG2I1          AIF   (K'&SDBLEN LE 0).ZG2I2                            00200900
&ZCVAL          SETC '&ZCVAL SDBLEN'            DISALLOWED KEY          00201000
.ZG2I2          AIF   (K'&SDBLENVAR LE 0).ZG2I3                         00201100
&ZCVAL          SETC '&ZCVAL SDBLENVAR'         DISALLOWED KEY          00201200
.ZG2I3          AIF   (K'&SDBKEY LE 0).ZG2I4                            00201300
&ZCVAL          SETC '&ZCVAL SDBKEY'            DISALLOWED KEY          00201400
.ZG2I4          AIF   (K'&DATA LE 0).ZG2I5                              00201500
&ZCVAL          SETC '&ZCVAL DATA'              DISALLOWED KEY          00201600
.ZG2I5          AIF   (K'&LEN LE 0).ZG2I6                               00201700
&ZCVAL          SETC '&ZCVAL LEN'               DISALLOWED KEY          00201800
.ZG2I6          AIF   (K'&LENVAR LE 0).ZG2I7                            00201900
&ZCVAL          SETC '&ZCVAL LENVAR'            DISALLOWED KEY          00202000
.ZG2I7          AIF   (K'&CONVERT LE 0).ZG2I8                           00202100
&ZCVAL          SETC '&ZCVAL CONVERT'           DISALLOWED KEY          00202200
.ZG2I8          AIF   (K'&TYPE LE 0).ZG2I9                              00202300
&ZCVAL          SETC '&ZCVAL TYPE'              DISALLOWED KEY          00202400
.ZG2I9          AIF   (K'&S5KEY LE 0).ZG2I10                            00202500
&ZCVAL          SETC '&ZCVAL S5KEY'             DISALLOWED KEY          00202600
.ZG2I10         AIF   (K'&INVOKE LE 0).ZG2I11                           00202700
&ZCVAL          SETC '&ZCVAL INVOKE'            DISALLOWED KEY          00202800
.ZG2I11         AIF   (K'&RETCODE LE 0).ZG2I12                          00202900
&ZCVAL          SETC '&ZCVAL RETCODE'           DISALLOWED KEY          00203000
.ZG2I12         AIF   (K'&RSNCODE LE 0).ZG2I13                          00203100
&ZCVAL          SETC '&ZCVAL RSNCODE'           DISALLOWED KEY          00203200
.ZG2I13         AIF   (K'&ZCVAL LE 0).ZG2J      KEY                     00203300
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00203400
&ZMS            SETC  '"INITIAL'  *KMEIA* MNOTE                         00203500
&ZMS            SETC  '&ZMS."'                                          00203600
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00203700
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00203800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00203900
.ZG2J           ANOP  ,                                                 00204000
.*----------------------------------------------------------------***   00204100
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00204200
                AIF   (N'&SR LE 1).ZG4A         CK NUM                  00204300
&ZMS            SETC  '"SR='      *KPOSA* MNOTE                         00204400
&ZMS            SETC  '&ZMS.&SR"'                                       00204500
&ZMS            SETC  '&ZMS "SR"'                                       00204600
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00204700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00204800
.ZG4A           ANOP  ,                                                 00204900
.*-------------------------------------------------------------------   00205000
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00205100
&ZXSR           SETC  'INPUT'     SET IN/OUTPUT                         00205200
&XSR            SETC  '&SR(1)'    SET XVARIABLE                         00205300
                AIF   (N'&SR GT 1).ZG4B         MULTI PARMS             00205400
&XSR            SETC  '&SR'       SET XVARIABLE                         00205500
.ZG4B           AIF   (K'&SR(1) GT 0).ZG4C                              00205600
&ZXSR           SETC  ''          RESET IN/OUTPUT                       00205700
&ZMS            SETC  ' '         *KRQDA*                               00205800
&ZMS            SETC  '&ZMS "SR" KEY AND ITS'                           00205900
                MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                  00206000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00206100
.ZG4C           ANOP  ,                                                 00206200
.*-------------------------------------------------------------------   00206300
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00206400
                AIF   (K'&ZXSR LE 0).ZG4R       NOT I/O                 00206500
                AIF   ('&XSR'(1,1) NE '(').ZG4R                         00206600
&ZCGPR          SETC  '&XSR'(2,K'&XSR-2)                                00206700
                AIF   ('&ZCGPR'(1,1) NE '0').ZG4P                       00206800
                AIF   (K'&ZCGPR GT 2).ZG4Q                              00206900
                AIF   ('&ZCGPR' EQ '0').ZG4Q                            00207000
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00207100
                AIF   (T'&ZCGPR NE 'N').ZG4Q    INVALID REG NAME        00207200
.ZG4P           ANOP  ,                                                 00207300
                AIF   (T'&ZCGPR NE 'N').ZG4R    NON NUMERIC             00207400
                AIF   ('&ZCGPR' LT '2').ZG4Q                            00207500
                AIF   ('&ZCGPR' LE '12').ZG4R                           00207600
.ZG4Q           ANOP  ,                                                 00207700
&ZMS            SETC  '"SR='      *KGPRA* MNOTE                         00207800
&ZMS            SETC  '&ZMS.&SR"'                                       00207900
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00208000
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00208100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00208200
.ZG4R           ANOP  ,                                                 00208300
.*----------------------------------------------------------------***   00208400
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00208500
                AIF   (N'&PRIMLEN LE 1).ZG7A    CK NUM                  00208600
&ZMS            SETC  '"PRIMLEN='               *KPOSA* MNOTE           00208700
&ZMS            SETC  '&ZMS.&PRIMLEN"'                                  00208800
&ZMS            SETC  '&ZMS "PRIMLEN"'                                  00208900
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00209000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00209100
.ZG7A           ANOP  ,                                                 00209200
.*-------------------------------------------------------------------   00209300
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00209400
&ZXPRIMLEN      SETC  'INPUT'     SET IN/OUTPUT                         00209500
&XPRIMLEN       SETC  '&PRIMLEN(1)'             SET XVARIABLE           00209600
                AIF   (N'&PRIMLEN GT 1).ZG7B    MULTI PARMS             00209700
&XPRIMLEN       SETC  '&PRIMLEN'  SET XVARIABLE                         00209800
.ZG7B           AIF   (K'&PRIMLEN(1) GT 0).ZG7C                         00209900
&ZXPRIMLEN      SETC  ''          RESET IN/OUTPUT                       00210000
&ZMS            SETC  ' '         *KRQDA*                               00210100
&ZMS            SETC  '&ZMS "PRIMLEN" KEY AND ITS'                      00210200
                MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                  00210300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00210400
.ZG7C           ANOP  ,                                                 00210500
.*-------------------------------------------------------------------   00210600
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00210700
                AIF   (K'&ZXPRIMLEN LE 0).ZG7R  NOT I/O                 00210800
                AIF   ('&XPRIMLEN'(1,1) NE '(').ZG7R                    00210900
&ZCGPR          SETC  '&XPRIMLEN'(2,K'&XPRIMLEN-2)                      00211000
                AIF   ('&ZCGPR'(1,1) NE '0').ZG7P                       00211100
                AIF   (K'&ZCGPR GT 2).ZG7Q                              00211200
                AIF   ('&ZCGPR' EQ '0').ZG7Q                            00211300
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00211400
                AIF   (T'&ZCGPR NE 'N').ZG7Q    INVALID REG NAME        00211500
.ZG7P           ANOP  ,                                                 00211600
                AIF   (T'&ZCGPR NE 'N').ZG7R    NON NUMERIC             00211700
                AIF   ('&ZCGPR' LT '2').ZG7Q                            00211800
                AIF   ('&ZCGPR' LE '12').ZG7R                           00211900
.ZG7Q           ANOP  ,                                                 00212000
&ZMS            SETC  '"PRIMLEN='               *KGPRA* MNOTE           00212100
&ZMS            SETC  '&ZMS.&PRIMLEN"'                                  00212200
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00212300
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00212400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00212500
.ZG7R           ANOP  ,                                                 00212600
.*----------------------------------------------------------------***   00212700
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00212800
                AIF   (N'&SECLEN LE 1).ZG10A    CK NUM                  00212900
&ZMS            SETC  '"SECLEN='  *KPOSA* MNOTE                         00213000
&ZMS            SETC  '&ZMS.&SECLEN"'                                   00213100
&ZMS            SETC  '&ZMS "SECLEN"'                                   00213200
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00213300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00213400
.ZG10A          ANOP  ,                                                 00213500
.*-------------------------------------------------------------------   00213600
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00213700
&ZXSECLEN       SETC  'INPUT'     SET IN/OUTPUT                         00213800
&XSECLEN        SETC  '0'                                               00213900
                AIF   (K'&SECLEN(1) LE 0).ZG10B  PARM                   00214000
&XSECLEN        SETC  '&SECLEN(1)'              SET XVARIABLE           00214100
                AIF   (N'&SECLEN GT 1).ZG10B    MULTI PARMS             00214200
&XSECLEN        SETC  '&SECLEN'   SET XVARIABLE                         00214300
.ZG10B          ANOP  ,                                                 00214400
.*-------------------------------------------------------------------   00214500
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00214600
                AIF   (K'&ZXSECLEN LE 0).ZG10R  NOT I/O                 00214700
                AIF   ('&XSECLEN'(1,1) NE '(').ZG10R                    00214800
&ZCGPR          SETC  '&XSECLEN'(2,K'&XSECLEN-2)                        00214900
                AIF   ('&ZCGPR'(1,1) NE '0').ZG10P                      00215000
                AIF   (K'&ZCGPR GT 2).ZG10Q                             00215100
                AIF   ('&ZCGPR' EQ '0').ZG10Q                           00215200
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00215300
                AIF   (T'&ZCGPR NE 'N').ZG10Q   INVALID REG NAME        00215400
.ZG10P          ANOP  ,                                                 00215500
                AIF   (T'&ZCGPR NE 'N').ZG10R   NON NUMERIC             00215600
                AIF   ('&ZCGPR' LT '2').ZG10Q                           00215700
                AIF   ('&ZCGPR' LE '12').ZG10R                          00215800
.ZG10Q          ANOP  ,                                                 00215900
&ZMS            SETC  '"SECLEN='  *KGPRA* MNOTE                         00216000
&ZMS            SETC  '&ZMS.&SECLEN"'                                   00216100
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00216200
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00216300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00216400
.ZG10R          ANOP  ,                                                 00216500
.*----------------------------------------------------------------***   00216600
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00216700
                AIF   (N'&VARLEN LE 1).ZG13A    CK NUM                  00216800
&ZMS            SETC  '"VARLEN='  *KPOSA* MNOTE                         00216900
&ZMS            SETC  '&ZMS.&VARLEN"'                                   00217000
&ZMS            SETC  '&ZMS "VARLEN"'                                   00217100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00217200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00217300
.ZG13A          ANOP  ,                                                 00217400
.*-------------------------------------------------------------------   00217500
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00217600
&ZXVARLEN       SETC  'INPUT'     SET IN/OUTPUT                         00217700
&XVARLEN        SETC  '0'                                               00217800
                AIF   (K'&VARLEN(1) LE 0).ZG13B  PARM                   00217900
&XVARLEN        SETC  '&VARLEN(1)'              SET XVARIABLE           00218000
                AIF   (N'&VARLEN GT 1).ZG13B    MULTI PARMS             00218100
&XVARLEN        SETC  '&VARLEN'   SET XVARIABLE                         00218200
.ZG13B          ANOP  ,                                                 00218300
.*-------------------------------------------------------------------   00218400
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00218500
                AIF   (K'&ZXVARLEN LE 0).ZG13R  NOT I/O                 00218600
                AIF   ('&XVARLEN'(1,1) NE '(').ZG13R                    00218700
&ZCGPR          SETC  '&XVARLEN'(2,K'&XVARLEN-2)                        00218800
                AIF   ('&ZCGPR'(1,1) NE '0').ZG13P                      00218900
                AIF   (K'&ZCGPR GT 2).ZG13Q                             00219000
                AIF   ('&ZCGPR' EQ '0').ZG13Q                           00219100
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00219200
                AIF   (T'&ZCGPR NE 'N').ZG13Q   INVALID REG NAME        00219300
.ZG13P          ANOP  ,                                                 00219400
                AIF   (T'&ZCGPR NE 'N').ZG13R   NON NUMERIC             00219500
                AIF   ('&ZCGPR' LT '2').ZG13Q                           00219600
                AIF   ('&ZCGPR' LE '12').ZG13R                          00219700
.ZG13Q          ANOP  ,                                                 00219800
&ZMS            SETC  '"VARLEN='  *KGPRA* MNOTE                         00219900
&ZMS            SETC  '&ZMS.&VARLEN"'                                   00220000
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00220100
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00220200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00220300
.ZG13R          ANOP  ,                                                 00220400
.*----------------------------------------------------------------***   00220500
.***AG.KKWRD01 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00220600
                AIF   (N'&ARCHLEV LE 1).ZG16A   CK NUM                  00220700
&ZMS            SETC  '"ARCHLEV='               *KPOSA* MNOTE           00220800
&ZMS            SETC  '&ZMS.&ARCHLEV"'                                  00220900
&ZMS            SETC  '&ZMS "ARCHLEV"'                                  00221000
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00221100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00221200
.ZG16A          ANOP  ,                                                 00221300
.*-------------------------------------------------------------------   00221400
.***AG.KKWRD02 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00221500
&XARCHLEV       SETC  ''          INITIALIZE XVARIABLE                  00221600
.ZG17A   AIF   ('&ARCHLEV(1)' NE '10').ZG18A                            00221700
&XARCHLEV       SETC  '10'        SET KEYWORD                           00221800
.*-------------------------------------------------------------------   00221900
.***AG.KKWRD03 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00222000
.ZG18A          AIF   (K'&XARCHLEV GT 0).ZG18C  KEYWORD                 00222100
                AIF   (K'&ARCHLEV(1) LE 0).ZG18B                        00222200
&ZMS            SETC  '"ARCHLEV='               *KUKWA* MNOTE           00222300
&ZMS            SETC  '&ZMS.&ARCHLEV"'                                  00222400
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00222500
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00222600
&ZMS            SETC  '&ZMS "10".'                                      00222700
                MNOTE 8,' &ZMS '                                        00222800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00222900
.ZG18B          ANOP  ,                                                 00223000
&XARCHLEV       SETC  '10'        SET DEFAULT KEYWORD                   00223100
.ZG18C          ANOP  ,                                                 00223200
&ZXARCHLEV      SETC  'INPUT'     SET IN/OUTPUT                         00223300
.*-------------------------------------------------------------------   00223400
.***AG.KKWRD04 VALUE, RQD INPUT, ME KEYWORD -SINGLE KEYWORD             00223500
                AIF   (K'&ARCHLEV(1) GT 0).ZG18D  VALID                 00223600
&ZXARCHLEV      SETC  ''          RESET IN/OUTPUT                       00223700
&ZMS            SETC  'THE'                                             00223800
&ZMS            SETC  '&ZMS "ARCHLEV" KEY AND ITS'                      00223900
&ZMS            SETC  '&ZMS ARGUMENT ARE REQUIRED.'                     00224000
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00224100
&ZMS            SETC  '&ZMS "10".'                                      00224200
                MNOTE 8,' &ZMS '                                        00224300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00224400
.ZG18D          ANOP  ,                                                 00224500
.*----------------------------------------------------------------***   00224600
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00224700
                AIF   (N'&DAE LE 1).ZG20A       CK NUM                  00224800
&ZMS            SETC  '"DAE='     *KPOSA* MNOTE                         00224900
&ZMS            SETC  '&ZMS.&DAE"'                                      00225000
&ZMS            SETC  '&ZMS "DAE"'                                      00225100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00225200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00225300
.ZG20A          ANOP  ,                                                 00225400
.*-------------------------------------------------------------------   00225500
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00225600
&XDAE           SETC  ''          INITIALIZE XVARIABLE                  00225700
.ZG21A   AIF   ('&DAE(1)' NE 'YES').ZG22A                               00225800
&XDAE           SETC  'YES'       SET KEYWORD                           00225900
.*-------------------------------------------------------------------   00226000
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00226100
.ZG22A   AIF   ('&DAE(1)' NE 'NO').ZG23A                                00226200
&XDAE           SETC  'NO'        SET KEYWORD                           00226300
.*-------------------------------------------------------------------   00226400
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00226500
.ZG23A          AIF   (K'&XDAE GT 0).ZG23C      KEYWORD                 00226600
                AIF   (K'&DAE(1) LE 0).ZG23B                            00226700
&ZMS            SETC  '"DAE='     *KUKWA* MNOTE                         00226800
&ZMS            SETC  '&ZMS.&DAE"'                                      00226900
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00227000
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00227100
&ZMS            SETC  '&ZMS "YES"'                                      00227200
&ZMS            SETC  '&ZMS OR "NO".'                                   00227300
                MNOTE 8,' &ZMS '                                        00227400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00227500
.ZG23B          ANOP  ,                                                 00227600
&XDAE           SETC  'YES'       SET DEFAULT KEYWORD                   00227700
.ZG23C          ANOP  ,                                                 00227800
&ZXDAE          SETC  'INPUT'     SET IN/OUTPUT                         00227900
.*----------------------------------------------------------------***   00228000
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00228100
                AIF   (N'&COMPDSC LE 1).ZG25A   CK NUM                  00228200
&ZMS            SETC  '"COMPDSC='               *KPOSA* MNOTE           00228300
&ZMS            SETC  '&ZMS.&COMPDSC"'                                  00228400
&ZMS            SETC  '&ZMS "COMPDSC"'                                  00228500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00228600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00228700
.ZG25A          ANOP  ,                                                 00228800
.*-------------------------------------------------------------------   00228900
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00229000
&ZXCOMPDSC      SETC  'INPUT'     SET IN/OUTPUT                         00229100
&XCOMPDSC       SETC  'NO_COMPDSC'                                      00229200
                AIF   (K'&COMPDSC(1) LE 0).ZG25B  PARM                  00229300
&XCOMPDSC       SETC  '&COMPDSC(1)'             SET XVARIABLE           00229400
                AIF   (N'&COMPDSC GT 1).ZG25B   MULTI PARMS             00229500
&XCOMPDSC       SETC  '&COMPDSC'  SET XVARIABLE                         00229600
.ZG25B          ANOP  ,                                                 00229700
.*-------------------------------------------------------------------   00229800
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00229900
                AIF   (K'&ZXCOMPDSC LE 0).ZG25R  NOT I/O                00230000
         AIF   ('&XCOMPDSC' EQ 'NO_COMPDSC').ZG25R                      00230100
                AIF   ('&XCOMPDSC'(1,1) NE '(').ZG25R                   00230200
&ZCGPR          SETC  '&XCOMPDSC'(2,K'&XCOMPDSC-2)                      00230300
                AIF   ('&ZCGPR'(1,1) NE '0').ZG25P                      00230400
                AIF   (K'&ZCGPR GT 2).ZG25Q                             00230500
                AIF   ('&ZCGPR' EQ '0').ZG25Q                           00230600
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00230700
                AIF   (T'&ZCGPR NE 'N').ZG25Q   INVALID REG NAME        00230800
.ZG25P          ANOP  ,                                                 00230900
                AIF   (T'&ZCGPR NE 'N').ZG25R   NON NUMERIC             00231000
                AIF   ('&ZCGPR' LT '2').ZG25Q                           00231100
                AIF   ('&ZCGPR' LE '12').ZG25R                          00231200
.ZG25Q          ANOP  ,                                                 00231300
&ZMS            SETC  '"COMPDSC='               *KGPRA* MNOTE           00231400
&ZMS            SETC  '&ZMS.&COMPDSC"'                                  00231500
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00231600
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00231700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00231800
.ZG25R          ANOP  ,                                                 00231900
.*----------------------------------------------------------------***   00232000
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00232100
                AIF   (N'&PROBLEM LE 1).ZG28A   CK NUM                  00232200
&ZMS            SETC  '"PROBLEM='               *KPOSA* MNOTE           00232300
&ZMS            SETC  '&ZMS.&PROBLEM"'                                  00232400
&ZMS            SETC  '&ZMS "PROBLEM"'                                  00232500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00232600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00232700
.ZG28A          ANOP  ,                                                 00232800
.*-------------------------------------------------------------------   00232900
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00233000
&ZXPROBLEM      SETC  'INPUT'     SET IN/OUTPUT                         00233100
&XPROBLEM       SETC  'NO_PROBLEM'                                      00233200
                AIF   (K'&PROBLEM(1) LE 0).ZG28B  PARM                  00233300
&XPROBLEM       SETC  '&PROBLEM(1)'             SET XVARIABLE           00233400
                AIF   (N'&PROBLEM GT 1).ZG28B   MULTI PARMS             00233500
&XPROBLEM       SETC  '&PROBLEM'  SET XVARIABLE                         00233600
.ZG28B          ANOP  ,                                                 00233700
.*-------------------------------------------------------------------   00233800
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00233900
                AIF   (K'&ZXPROBLEM LE 0).ZG28R  NOT I/O                00234000
         AIF   ('&XPROBLEM' EQ 'NO_PROBLEM').ZG28R                      00234100
                AIF   ('&XPROBLEM'(1,1) NE '(').ZG28R                   00234200
&ZCGPR          SETC  '&XPROBLEM'(2,K'&XPROBLEM-2)                      00234300
                AIF   ('&ZCGPR'(1,1) NE '0').ZG28P                      00234400
                AIF   (K'&ZCGPR GT 2).ZG28Q                             00234500
                AIF   ('&ZCGPR' EQ '0').ZG28Q                           00234600
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00234700
                AIF   (T'&ZCGPR NE 'N').ZG28Q   INVALID REG NAME        00234800
.ZG28P          ANOP  ,                                                 00234900
                AIF   (T'&ZCGPR NE 'N').ZG28R   NON NUMERIC             00235000
                AIF   ('&ZCGPR' LT '2').ZG28Q                           00235100
                AIF   ('&ZCGPR' LE '12').ZG28R                          00235200
.ZG28Q          ANOP  ,                                                 00235300
&ZMS            SETC  '"PROBLEM='               *KGPRA* MNOTE           00235400
&ZMS            SETC  '&ZMS.&PROBLEM"'                                  00235500
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00235600
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00235700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00235800
.ZG28R          ANOP  ,                                                 00235900
.*----------------------------------------------------------------***   00236000
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00236100
                AIF   (N'&SERVLEV LE 1).ZG31A   CK NUM                  00236200
&ZMS            SETC  '"SERVLEV='               *KPOSA* MNOTE           00236300
&ZMS            SETC  '&ZMS.&SERVLEV"'                                  00236400
&ZMS            SETC  '&ZMS "SERVLEV"'                                  00236500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00236600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00236700
.ZG31A          ANOP  ,                                                 00236800
.*-------------------------------------------------------------------   00236900
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00237000
&ZXSERVLEV      SETC  'INPUT'     SET IN/OUTPUT                         00237100
&XSERVLEV       SETC  'NO_SERVICE_LEVEL'                                00237200
                AIF   (K'&SERVLEV(1) LE 0).ZG31B  PARM                  00237300
&XSERVLEV       SETC  '&SERVLEV(1)'             SET XVARIABLE           00237400
                AIF   (N'&SERVLEV GT 1).ZG31B   MULTI PARMS             00237500
&XSERVLEV       SETC  '&SERVLEV'  SET XVARIABLE                         00237600
.ZG31B          ANOP  ,                                                 00237700
.*-------------------------------------------------------------------   00237800
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00237900
                AIF   (K'&ZXSERVLEV LE 0).ZG31R  NOT I/O                00238000
         AIF   ('&XSERVLEV' EQ 'NO_SERVICE_LEVEL').ZG31R                00238100
                AIF   ('&XSERVLEV'(1,1) NE '(').ZG31R                   00238200
&ZCGPR          SETC  '&XSERVLEV'(2,K'&XSERVLEV-2)                      00238300
                AIF   ('&ZCGPR'(1,1) NE '0').ZG31P                      00238400
                AIF   (K'&ZCGPR GT 2).ZG31Q                             00238500
                AIF   ('&ZCGPR' EQ '0').ZG31Q                           00238600
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00238700
                AIF   (T'&ZCGPR NE 'N').ZG31Q   INVALID REG NAME        00238800
.ZG31P          ANOP  ,                                                 00238900
                AIF   (T'&ZCGPR NE 'N').ZG31R   NON NUMERIC             00239000
                AIF   ('&ZCGPR' LT '2').ZG31Q                           00239100
                AIF   ('&ZCGPR' LE '12').ZG31R                          00239200
.ZG31Q          ANOP  ,                                                 00239300
&ZMS            SETC  '"SERVLEV='               *KGPRA* MNOTE           00239400
&ZMS            SETC  '&ZMS.&SERVLEV"'                                  00239500
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00239600
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00239700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00239800
.ZG31R          ANOP  ,                                                 00239900
.*----------------------------------------------------------------***   00240000
.***AG.KXVAR01 NAME, OPT INPUT, KEYS -NO ARGUMENTS                      00240100
&XNOCONVERTS    SETC  ''          RESET XVARIABLE                       00240200
&ZXNOCONVERTS   SETC  ''          RESET IN/OUTPUT                       00240300
&ZASYSLNDX      SETA  0                                                 00240400
.ZG34A          ANOP  ,           POSITIONAL MACRO KEY                  00240500
&ZASYSLNDX      SETA  &ZASYSLNDX+1                                      00240600
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG34B                         00240700
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZG34A            00240800
         AIF   ('&SYSLIST(&ZASYSLNDX)' NE 'NOCONVERTS').ZG34A           00240900
&ZCSYSLIST(&ZASYSLNDX) SETC  'NONXKEY'          POSITIONAL IS MACRO KEY 00241000
&XNOCONVERTS    SETC  'NOCONVERTS'              MACRO KEY FOUND         00241100
&ZXNOCONVERTS   SETC  'INPUT'     SET IN/OUTPUT                         00241200
.ZG34B          ANOP  ,                                                 00241300
.*-------------------------------------------------------------------   00241400
.***AG.KXVAR03 NAME, OPT INPUT, KEYS -NO ARGUMENTS                      00241500
                AIF   (K'&XNOCONVERTS GT 0).ZG34C  KEY ENTERED          00241600
&ZXNOCONVERTS   SETC  'INPUT'     SET IN/OUTPUT                         00241700
&XNOCONVERTS    SETC  'CONVERSIONS'             SET DEFAULT             00241800
.ZG34C          ANOP  ,                                                 00241900
.*------------------------------------------------------------------    00242000
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00242100
&XIBM           SETC  ''          INITIALIZE XVARIABLE                  00242200
.*-------------------------------------------------------------------   00242300
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00242400
.ZG38           ANOP  ,                                                 00242500
                AIF   (K'&IBM(1) LE 0).ZG38A                            00242600
&ZTLC           SETC 'NO'                                               00242700
                AIF   ('&IBM(1)' NE '&ZTLC').ZG45                       00242800
&XIBM           SETC  'NO'        SET KEYWORD                           00242900
                AIF   (N'&IBM LE 1).ZG38A       CK NUM                  00243000
&ZMS            SETC  '"IBM='     *KPOSA* MNOTE                         00243100
&ZMS            SETC  '&ZMS.&IBM"'                                      00243200
&ZMS            SETC  '&ZMS "IBM"'                                      00243300
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00243400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00243500
.ZG38A          ANOP  ,                                                 00243600
.*------------------------------------------------------------------    00243700
.***AG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00243800
&ZCVAL          SETC ''           CLEAR ERROR KEY ACCUMULATOR           00243900
.ZG38A0         AIF   (K'&COMPID LE 0).ZG38A1   OK                      00244000
&ZCVAL          SETC '&ZCVAL COMPID'            INCORRECT KEY USED      00244100
.ZG38A1         AIF   (K'&COMPLEV LE 0).ZG38A2  OK                      00244200
&ZCVAL          SETC '&ZCVAL COMPLEV'           INCORRECT KEY USED      00244300
.ZG38A2         AIF   (K'&PID LE 0).ZG38A3      OK                      00244400
&ZCVAL          SETC '&ZCVAL PID'               INCORRECT KEY USED      00244500
.ZG38A3         AIF   (K'&PIDLEVEL LE 0).ZG38A4  OK                     00244600
&ZCVAL          SETC '&ZCVAL PIDLEVEL'          INCORRECT KEY USED      00244700
.ZG38A4         AIF   (K'&SUBSYSTEM LE 0).ZG38A5  OK                    00244800
&ZCVAL          SETC '&ZCVAL SUBSYSTEM'         INCORRECT KEY USED      00244900
.ZG38A5         AIF   (K'&ZCVAL LE 0).ZG38A6    OK                      00245000
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00245100
&ZMS            SETC  '"IBM'      *KMEIA* MNOTE                         00245200
&ZMS            SETC  '&ZMS.=&IBM"'                                     00245300
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00245400
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00245500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00245600
.ZG38A6         ANOP  ,                                                 00245700
.*----------------------------------------------------------------***   00245800
.***AG.KXVAR05 NAME, OPT RQD INPUT, KEYS -XVARIABLE KEY                 00245900
                AIF   (N'&PROGRAM LE 1).ZG40A   CK NUM                  00246000
&ZMS            SETC  '"PROGRAM='               *KPOSA* MNOTE           00246100
&ZMS            SETC  '&ZMS.&PROGRAM"'                                  00246200
&ZMS            SETC  '&ZMS "PROGRAM"'                                  00246300
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00246400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00246500
.ZG40A          ANOP  ,                                                 00246600
.*-------------------------------------------------------------------   00246700
.***AG.KXVAR06 NAME, OPT RQD INPUT, KEYS -XVARIABLE                     00246800
&ZXPROGRAM      SETC  'INPUT'     SET IN/OUTPUT                         00246900
&XPROGRAM       SETC  '&PROGRAM(1)'             SET XVARIABLE           00247000
                AIF   (N'&PROGRAM GT 1).ZG40B   MULTI PARMS             00247100
&XPROGRAM       SETC  '&PROGRAM'  SET XVARIABLE                         00247200
.ZG40B          AIF   (K'&PROGRAM(1) GT 0).ZG40C                        00247300
&ZXPROGRAM      SETC  ''          RESET IN/OUTPUT                       00247400
&ZMS            SETC  ' '         *KRQDA*                               00247500
&ZMS            SETC  '&ZMS "PROGRAM" KEY AND ITS'                      00247600
                MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                  00247700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00247800
                AGO   .ZG40D                                            00247900
.ZG40C          AIF   ('&XPROGRAM' NE 'NO_PROGRAM').ZG40D               00248000
&ZXPROGRAM      SETC  ''          RESET IN/OUTPUT                       00248100
.ZG40D          ANOP  ,                                                 00248200
.*-------------------------------------------------------------------   00248300
.***AG.KCK02 NAME, OPT RQD INPUT, KEYS -GPR OUT OF RANGE                00248400
                AIF   (K'&ZXPROGRAM LE 0).ZG40R  NOT I/O                00248500
         AIF   ('&XPROGRAM' EQ 'NO_PROGRAM').ZG40R                      00248600
                AIF   ('&XPROGRAM'(1,1) NE '(').ZG40R                   00248700
&ZCGPR          SETC  '&XPROGRAM'(2,K'&XPROGRAM-2)                      00248800
                AIF   ('&ZCGPR'(1,1) NE '0').ZG40P                      00248900
                AIF   (K'&ZCGPR GT 2).ZG40Q                             00249000
                AIF   ('&ZCGPR' EQ '0').ZG40Q                           00249100
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00249200
                AIF   (T'&ZCGPR NE 'N').ZG40Q   INVALID REG NAME        00249300
.ZG40P          ANOP  ,                                                 00249400
                AIF   (T'&ZCGPR NE 'N').ZG40R   NON NUMERIC             00249500
                AIF   ('&ZCGPR' LT '2').ZG40Q                           00249600
                AIF   ('&ZCGPR' LE '12').ZG40R                          00249700
.ZG40Q          ANOP  ,                                                 00249800
&ZMS            SETC  '"PROGRAM='               *KGPRA* MNOTE           00249900
&ZMS            SETC  '&ZMS.&PROGRAM"'                                  00250000
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00250100
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00250200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00250300
.ZG40R          ANOP  ,                                                 00250400
.*----------------------------------------------------------------***   00250500
.***AG.KXVAR05 NAME, OPT RQD INPUT, KEYS -XVARIABLE KEY                 00250600
                AIF   (N'&PROGLEV LE 1).ZG43A   CK NUM                  00250700
&ZMS            SETC  '"PROGLEV='               *KPOSA* MNOTE           00250800
&ZMS            SETC  '&ZMS.&PROGLEV"'                                  00250900
&ZMS            SETC  '&ZMS "PROGLEV"'                                  00251000
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00251100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00251200
.ZG43A          ANOP  ,                                                 00251300
.*-------------------------------------------------------------------   00251400
.***AG.KXVAR06 NAME, OPT RQD INPUT, KEYS -XVARIABLE                     00251500
&ZXPROGLEV      SETC  'INPUT'     SET IN/OUTPUT                         00251600
&XPROGLEV       SETC  '&PROGLEV(1)'             SET XVARIABLE           00251700
                AIF   (N'&PROGLEV GT 1).ZG43B   MULTI PARMS             00251800
&XPROGLEV       SETC  '&PROGLEV'  SET XVARIABLE                         00251900
.ZG43B          AIF   (K'&PROGLEV(1) GT 0).ZG43C                        00252000
&ZXPROGLEV      SETC  ''          RESET IN/OUTPUT                       00252100
&ZMS            SETC  ' '         *KRQDA*                               00252200
&ZMS            SETC  '&ZMS "PROGLEV" KEY AND ITS'                      00252300
                MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                  00252400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00252500
                AGO   .ZG43D                                            00252600
.ZG43C          AIF   ('&XPROGLEV' NE 'NO_PROGLEV').ZG43D               00252700
&ZXPROGLEV      SETC  ''          RESET IN/OUTPUT                       00252800
.ZG43D          ANOP  ,                                                 00252900
.*-------------------------------------------------------------------   00253000
.***AG.KCK02 NAME, OPT RQD INPUT, KEYS -GPR OUT OF RANGE                00253100
                AIF   (K'&ZXPROGLEV LE 0).ZG43R  NOT I/O                00253200
         AIF   ('&XPROGLEV' EQ 'NO_PROGLEV').ZG43R                      00253300
                AIF   ('&XPROGLEV'(1,1) NE '(').ZG43R                   00253400
&ZCGPR          SETC  '&XPROGLEV'(2,K'&XPROGLEV-2)                      00253500
                AIF   ('&ZCGPR'(1,1) NE '0').ZG43P                      00253600
                AIF   (K'&ZCGPR GT 2).ZG43Q                             00253700
                AIF   ('&ZCGPR' EQ '0').ZG43Q                           00253800
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00253900
                AIF   (T'&ZCGPR NE 'N').ZG43Q   INVALID REG NAME        00254000
.ZG43P          ANOP  ,                                                 00254100
                AIF   (T'&ZCGPR NE 'N').ZG43R   NON NUMERIC             00254200
                AIF   ('&ZCGPR' LT '2').ZG43Q                           00254300
                AIF   ('&ZCGPR' LE '12').ZG43R                          00254400
.ZG43Q          ANOP  ,                                                 00254500
&ZMS            SETC  '"PROGLEV='               *KGPRA* MNOTE           00254600
&ZMS            SETC  '&ZMS.&PROGLEV"'                                  00254700
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00254800
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00254900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00255000
.ZG43R          ANOP  ,                                                 00255100
.*-------------------------------------------------------------------   00255200
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00255300
.ZG45           ANOP  ,                                                 00255400
&ZTLC           SETC 'YES'                                              00255500
                AIF   ('&IBM(1)' NE '&ZTLC').ZG59                       00255600
&XIBM           SETC  'YES'       SET KEYWORD                           00255700
                AIF   (N'&IBM LE 1).ZG45A       CK NUM                  00255800
&ZMS            SETC  '"IBM='     *KPOSA* MNOTE                         00255900
&ZMS            SETC  '&ZMS.&IBM"'                                      00256000
&ZMS            SETC  '&ZMS "IBM"'                                      00256100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00256200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00256300
.ZG45A          ANOP  ,                                                 00256400
.*------------------------------------------------------------------    00256500
.***AG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00256600
&ZCVAL          SETC ''           CLEAR ERROR KEY ACCUMULATOR           00256700
.ZG45A0         AIF   (K'&PROGRAM LE 0).ZG45A1  OK                      00256800
&ZCVAL          SETC '&ZCVAL PROGRAM'           INCORRECT KEY USED      00256900
.ZG45A1         AIF   (K'&PROGLEV LE 0).ZG45A2  OK                      00257000
&ZCVAL          SETC '&ZCVAL PROGLEV'           INCORRECT KEY USED      00257100
.ZG45A2         AIF   (K'&ZCVAL LE 0).ZG45A3    OK                      00257200
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00257300
&ZMS            SETC  '"IBM'      *KMEIA* MNOTE                         00257400
&ZMS            SETC  '&ZMS.=&IBM"'                                     00257500
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00257600
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00257700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00257800
.ZG45A3         ANOP  ,                                                 00257900
.*----------------------------------------------------------------***   00258000
.***AG.KMEKY01 NAME, OPT RQD INPUT, ME KEYS -XVARIABLE                  00258100
&XTEST2         SETC  ''          INITIALIZE XVARIABLE                  00258200
                AIF   (K'&COMPID LE 0).ZG47C                            00258300
&ZXTEST2        SETC  'INPUT'     SET IN/OUTPUT                         00258400
&XTEST2         SETC  'COMPID'    SET XVARIABLE                         00258500
&ZXCOMPID       SETC  'INPUT'     SET IN/OUTPUT                         00258600
&XCOMPID        SETC  '&COMPID(1)'              SET XVARIABLE PARM      00258700
                AIF   (N'&COMPID GT 1).ZG47A                            00258800
&XCOMPID        SETC  '&COMPID'   SET XVARIABLE PARM                    00258900
.ZG47A          AIF   (N'&COMPID LE 1).ZG47B    CK NUM                  00259000
&ZMS            SETC  '"COMPID='  *KPOSA* MNOTE                         00259100
&ZMS            SETC  '&ZMS.&COMPID"'                                   00259200
&ZMS            SETC  '&ZMS "COMPID"'                                   00259300
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00259400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00259500
.ZG47B          AIF   (K'&XCOMPID GT 0).ZG47C   ONE PARM                00259600
&ZXTEST2        SETC  ''          RESET IN/OUTPUT                       00259700
&ZXCOMPID       SETC  ''          RESET IN/OUTPUT                       00259800
&ZMS            SETC  ' '         *KRQDA*                               00259900
&ZMS            SETC  '&ZMS "COMPID" KEY AND ITS'                       00260000
                MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                  00260100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00260200
.ZG47C          ANOP  ,                                                 00260300
.*----------------------------------------------------------------***   00260400
.***AG.KMEKY02 NAME, OPT RQD INPUT, ME KEYS -XVARIABLE                  00260500
                AIF   (K'&PID LE 0).ZG51D       NO ME KEY               00260600
                AIF   (N'&PID LE 1).ZG51A       CK NUM                  00260700
&ZMS            SETC  '"PID='     *KPOSA* MNOTE                         00260800
&ZMS            SETC  '&ZMS.&PID"'                                      00260900
&ZMS            SETC  '&ZMS "PID"'                                      00261000
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00261100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00261200
.ZG51A          AIF   (K'&XTEST2 LE 0).ZG51B                            00261300
&ZMS            SETC  '"PID'      *KMEKA* MNOTE                         00261400
&ZMS            SETC  '&ZMS.=&PID"'                                     00261500
&ZMS            SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'             00261600
&ZMS            SETC  '&ZMS "&XTEST2"'                                  00261700
                MNOTE 8,' &ZMS KEY.'                                    00261800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00261900
                AGO   .ZG51D                                            00262000
.*                                                                      00262100
.ZG51B          ANOP  ,                                                 00262200
&ZXTEST2        SETC  'INPUT'     SET IN/OUTPUT                         00262300
&XTEST2         SETC  'PID'       SET XVARIABLE                         00262400
&ZXPID          SETC  'INPUT'     SET IN/OUTPUT                         00262500
&XPID           SETC  '&PID(1)'   SET XVARIABLE PARM                    00262600
                AIF   (N'&PID GT 1).ZG51C                               00262700
&XPID           SETC  '&PID'      SET XVARIABLE PARM                    00262800
.ZG51C          AIF   (K'&XPID GT 0).ZG51D      ONE PARM                00262900
&ZXTEST2        SETC  ''          RESET IN/OUTPUT                       00263000
&ZXPID          SETC  ''          RESET IN/OUTPUT                       00263100
&ZMS            SETC  ' '         *KRQDA*                               00263200
&ZMS            SETC  '&ZMS "PID" KEY AND ITS'                          00263300
                MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                  00263400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00263500
.ZG51D          ANOP  ,                                                 00263600
.*------------------------------------------------------------------    00263700
.***AG.KME4Y09 NAME, OPT RQD INPUT, ME KEYS -CHECK IF KEY ENTERED       00263800
                AIF   (K'&XTEST2 GT 0).ZG55B                            00263900
&ZXTEST2        SETC  ''          RESET IN/OUTPUT                       00264000
&ZXCOMPID       SETC  ''          RESET IN/OUTPUT                       00264100
&XTEST2         SETC  ''          ENSURE NULL                           00264200
&XCOMPID        SETC  ''          ENSURE NULL                           00264300
&ZMS            SETC  'ONE OF THE FOLLOWING'    *KMERA* MNOTE           00264400
&ZMS            SETC  '&ZMS MUTUALLY EXCLUSIVE KEY(S) IS'               00264500
&ZMS            SETC  '&ZMS REQUIRED:'                                  00264600
&ZMS            SETC  '&ZMS "COMPID"'           VALID ME KEY            00264700
&ZMS            SETC  '&ZMS OR "PID".'          VALID ME KEY            00264800
                MNOTE 8,' &ZMS '                                        00264900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00265000
.ZG55B          ANOP  ,                                                 00265100
.*-------------------------------------------------------------------   00265200
.***AG.KMEKY13 NAME, OPT RQD INPUT, ME KEYS -PROCESS DEPENDENCIES       00265300
.ZG47           AIF   ('&XTEST2' NE 'COMPID').ZG51                      00265400
.*-------------------------------------------------------------------   00265500
.***AG.KMEKY14 NAME, OPT RQD INPUT, ME KEYS -DISALLOWED KEYS            00265600
&ZCVAL          SETC ''           ERROR KEY FIELD                       00265700
.ZG47I0         AIF   (K'&PIDLEVEL LE 0).ZG47I1                         00265800
&ZCVAL          SETC '&ZCVAL PIDLEVEL'          DISALLOWED KEY          00265900
.ZG47I1         AIF   (K'&ZCVAL LE 0).ZG47J     KEY                     00266000
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00266100
&ZMS            SETC  '"COMPID'   *KMEIA* MNOTE                         00266200
&ZMS            SETC  '&ZMS.=&COMPID"'                                  00266300
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00266400
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00266500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00266600
.ZG47J          ANOP  ,                                                 00266700
.*-------------------------------------------------------------------   00266800
.***AG.KCK02 NAME, OPT RQD INPUT, ME KEYS -GPR OUT OF RANGE             00266900
                AIF   (K'&ZXCOMPID LE 0).ZG47R  NOT I/O                 00267000
         AIF   ('&XCOMPID' EQ 'NO_COMPID').ZG47R                        00267100
                AIF   ('&XCOMPID'(1,1) NE '(').ZG47R                    00267200
&ZCGPR          SETC  '&XCOMPID'(2,K'&XCOMPID-2)                        00267300
                AIF   ('&ZCGPR'(1,1) NE '0').ZG47P                      00267400
                AIF   (K'&ZCGPR GT 2).ZG47Q                             00267500
                AIF   ('&ZCGPR' EQ '0').ZG47Q                           00267600
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00267700
                AIF   (T'&ZCGPR NE 'N').ZG47Q   INVALID REG NAME        00267800
.ZG47P          ANOP  ,                                                 00267900
                AIF   (T'&ZCGPR NE 'N').ZG47R   NON NUMERIC             00268000
                AIF   ('&ZCGPR' LT '2').ZG47Q                           00268100
                AIF   ('&ZCGPR' LE '12').ZG47R                          00268200
.ZG47Q          ANOP  ,                                                 00268300
&ZMS            SETC  '"COMPID='  *KGPRA* MNOTE                         00268400
&ZMS            SETC  '&ZMS.&COMPID"'                                   00268500
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00268600
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00268700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00268800
.ZG47R          ANOP  ,                                                 00268900
.*----------------------------------------------------------------***   00269000
.***AG.KXVAR05 NAME, OPT RQD INPUT, KEYS -XVARIABLE KEY                 00269100
                AIF   (N'&COMPLEV LE 1).ZG49A   CK NUM                  00269200
&ZMS            SETC  '"COMPLEV='               *KPOSA* MNOTE           00269300
&ZMS            SETC  '&ZMS.&COMPLEV"'                                  00269400
&ZMS            SETC  '&ZMS "COMPLEV"'                                  00269500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00269600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00269700
.ZG49A          ANOP  ,                                                 00269800
.*-------------------------------------------------------------------   00269900
.***AG.KXVAR06 NAME, OPT RQD INPUT, KEYS -XVARIABLE                     00270000
&ZXCOMPLEV      SETC  'INPUT'     SET IN/OUTPUT                         00270100
&XCOMPLEV       SETC  '&COMPLEV(1)'             SET XVARIABLE           00270200
                AIF   (N'&COMPLEV GT 1).ZG49B   MULTI PARMS             00270300
&XCOMPLEV       SETC  '&COMPLEV'  SET XVARIABLE                         00270400
.ZG49B          AIF   (K'&COMPLEV(1) GT 0).ZG49C                        00270500
&ZXCOMPLEV      SETC  ''          RESET IN/OUTPUT                       00270600
&ZMS            SETC  ' '         *KRQDA*                               00270700
&ZMS            SETC  '&ZMS "COMPLEV" KEY AND ITS'                      00270800
                MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                  00270900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00271000
                AGO   .ZG49D                                            00271100
.ZG49C          AIF   ('&XCOMPLEV' NE 'NO_COMPLEV').ZG49D               00271200
&ZXCOMPLEV      SETC  ''          RESET IN/OUTPUT                       00271300
.ZG49D          ANOP  ,                                                 00271400
.*-------------------------------------------------------------------   00271500
.***AG.KCK02 NAME, OPT RQD INPUT, KEYS -GPR OUT OF RANGE                00271600
                AIF   (K'&ZXCOMPLEV LE 0).ZG49R  NOT I/O                00271700
         AIF   ('&XCOMPLEV' EQ 'NO_COMPLEV').ZG49R                      00271800
                AIF   ('&XCOMPLEV'(1,1) NE '(').ZG49R                   00271900
&ZCGPR          SETC  '&XCOMPLEV'(2,K'&XCOMPLEV-2)                      00272000
                AIF   ('&ZCGPR'(1,1) NE '0').ZG49P                      00272100
                AIF   (K'&ZCGPR GT 2).ZG49Q                             00272200
                AIF   ('&ZCGPR' EQ '0').ZG49Q                           00272300
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00272400
                AIF   (T'&ZCGPR NE 'N').ZG49Q   INVALID REG NAME        00272500
.ZG49P          ANOP  ,                                                 00272600
                AIF   (T'&ZCGPR NE 'N').ZG49R   NON NUMERIC             00272700
                AIF   ('&ZCGPR' LT '2').ZG49Q                           00272800
                AIF   ('&ZCGPR' LE '12').ZG49R                          00272900
.ZG49Q          ANOP  ,                                                 00273000
&ZMS            SETC  '"COMPLEV='               *KGPRA* MNOTE           00273100
&ZMS            SETC  '&ZMS.&COMPLEV"'                                  00273200
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00273300
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00273400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00273500
.ZG49R          ANOP  ,                                                 00273600
.*-------------------------------------------------------------------   00273700
.***AG.KMEKY13 NAME, OPT RQD INPUT, ME KEYS -PROCESS DEPENDENCIES       00273800
.ZG51           AIF   ('&XTEST2' NE 'PID').ZG55                         00273900
.*-------------------------------------------------------------------   00274000
.***AG.KMEKY14 NAME, OPT RQD INPUT, ME KEYS -DISALLOWED KEYS            00274100
&ZCVAL          SETC ''           ERROR KEY FIELD                       00274200
.ZG51I0         AIF   (K'&COMPLEV LE 0).ZG51I1                          00274300
&ZCVAL          SETC '&ZCVAL COMPLEV'           DISALLOWED KEY          00274400
.ZG51I1         AIF   (K'&ZCVAL LE 0).ZG51J     KEY                     00274500
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00274600
&ZMS            SETC  '"PID'      *KMEIA* MNOTE                         00274700
&ZMS            SETC  '&ZMS.=&PID"'                                     00274800
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00274900
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00275000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00275100
.ZG51J          ANOP  ,                                                 00275200
.*-------------------------------------------------------------------   00275300
.***AG.KCK02 NAME, OPT RQD INPUT, ME KEYS -GPR OUT OF RANGE             00275400
                AIF   (K'&ZXPID LE 0).ZG51R     NOT I/O                 00275500
         AIF   ('&XPID' EQ 'NO_PID').ZG51R                              00275600
                AIF   ('&XPID'(1,1) NE '(').ZG51R                       00275700
&ZCGPR          SETC  '&XPID'(2,K'&XPID-2)                              00275800
                AIF   ('&ZCGPR'(1,1) NE '0').ZG51P                      00275900
                AIF   (K'&ZCGPR GT 2).ZG51Q                             00276000
                AIF   ('&ZCGPR' EQ '0').ZG51Q                           00276100
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00276200
                AIF   (T'&ZCGPR NE 'N').ZG51Q   INVALID REG NAME        00276300
.ZG51P          ANOP  ,                                                 00276400
                AIF   (T'&ZCGPR NE 'N').ZG51R   NON NUMERIC             00276500
                AIF   ('&ZCGPR' LT '2').ZG51Q                           00276600
                AIF   ('&ZCGPR' LE '12').ZG51R                          00276700
.ZG51Q          ANOP  ,                                                 00276800
&ZMS            SETC  '"PID='     *KGPRA* MNOTE                         00276900
&ZMS            SETC  '&ZMS.&PID"'                                      00277000
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00277100
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00277200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00277300
.ZG51R          ANOP  ,                                                 00277400
.*----------------------------------------------------------------***   00277500
.***AG.KXVAR05 NAME, OPT RQD INPUT, KEYS -XVARIABLE KEY                 00277600
                AIF   (N'&PIDLEVEL LE 1).ZG53A  CK NUM                  00277700
&ZMS            SETC  '"PIDLEVEL='              *KPOSA* MNOTE           00277800
&ZMS            SETC  '&ZMS.&PIDLEVEL"'                                 00277900
&ZMS            SETC  '&ZMS "PIDLEVEL"'                                 00278000
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00278100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00278200
.ZG53A          ANOP  ,                                                 00278300
.*-------------------------------------------------------------------   00278400
.***AG.KXVAR06 NAME, OPT RQD INPUT, KEYS -XVARIABLE                     00278500
&ZXPIDLEVEL     SETC  'INPUT'     SET IN/OUTPUT                         00278600
&XPIDLEVEL      SETC  '&PIDLEVEL(1)'            SET XVARIABLE           00278700
                AIF   (N'&PIDLEVEL GT 1).ZG53B  MULTI PARMS             00278800
&XPIDLEVEL      SETC  '&PIDLEVEL'               SET XVARIABLE           00278900
.ZG53B          AIF   (K'&PIDLEVEL(1) GT 0).ZG53C                       00279000
&ZXPIDLEVEL     SETC  ''          RESET IN/OUTPUT                       00279100
&ZMS            SETC  ' '         *KRQDA*                               00279200
&ZMS            SETC  '&ZMS "PIDLEVEL" KEY AND ITS'                     00279300
                MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                  00279400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00279500
                AGO   .ZG53D                                            00279600
.ZG53C          AIF   ('&XPIDLEVEL' NE 'NO_PIDLEV').ZG53D               00279700
&ZXPIDLEVEL     SETC  ''          RESET IN/OUTPUT                       00279800
.ZG53D          ANOP  ,                                                 00279900
.*-------------------------------------------------------------------   00280000
.***AG.KCK02 NAME, OPT RQD INPUT, KEYS -GPR OUT OF RANGE                00280100
                AIF   (K'&ZXPIDLEVEL LE 0).ZG53R  NOT I/O               00280200
         AIF   ('&XPIDLEVEL' EQ 'NO_PIDLEV').ZG53R                      00280300
                AIF   ('&XPIDLEVEL'(1,1) NE '(').ZG53R                  00280400
&ZCGPR          SETC  '&XPIDLEVEL'(2,K'&XPIDLEVEL-2)                    00280500
                AIF   ('&ZCGPR'(1,1) NE '0').ZG53P                      00280600
                AIF   (K'&ZCGPR GT 2).ZG53Q                             00280700
                AIF   ('&ZCGPR' EQ '0').ZG53Q                           00280800
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00280900
                AIF   (T'&ZCGPR NE 'N').ZG53Q   INVALID REG NAME        00281000
.ZG53P          ANOP  ,                                                 00281100
                AIF   (T'&ZCGPR NE 'N').ZG53R   NON NUMERIC             00281200
                AIF   ('&ZCGPR' LT '2').ZG53Q                           00281300
                AIF   ('&ZCGPR' LE '12').ZG53R                          00281400
.ZG53Q          ANOP  ,                                                 00281500
&ZMS            SETC  '"PIDLEVEL='              *KGPRA* MNOTE           00281600
&ZMS            SETC  '&ZMS.&PIDLEVEL"'                                 00281700
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00281800
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00281900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00282000
.ZG53R          ANOP  ,                                                 00282100
.*-------------------------------------------------------------------   00282200
.***AG.KMEKY15 NAME, OPT RQD INPUT, ME KEYS -END                        00282300
.ZG55           ANOP  ,           END MUTUALLY EXCLUSIVE KEYS           00282400
.*----------------------------------------------------------------***   00282500
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00282600
                AIF   (N'&SUBSYSTEM LE 1).ZG57A  CK NUM                 00282700
&ZMS            SETC  '"SUBSYSTEM='             *KPOSA* MNOTE           00282800
&ZMS            SETC  '&ZMS.&SUBSYSTEM"'                                00282900
&ZMS            SETC  '&ZMS "SUBSYSTEM"'                                00283000
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00283100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00283200
.ZG57A          ANOP  ,                                                 00283300
.*-------------------------------------------------------------------   00283400
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00283500
&ZXSUBSYSTEM    SETC  'INPUT'     SET IN/OUTPUT                         00283600
&XSUBSYSTEM     SETC  'NO_SUBSYSTEM'                                    00283700
                AIF   (K'&SUBSYSTEM(1) LE 0).ZG57B  PARM                00283800
&XSUBSYSTEM     SETC  '&SUBSYSTEM(1)'           SET XVARIABLE           00283900
                AIF   (N'&SUBSYSTEM GT 1).ZG57B  MULTI PARMS            00284000
&XSUBSYSTEM     SETC  '&SUBSYSTEM'              SET XVARIABLE           00284100
.ZG57B          ANOP  ,                                                 00284200
.*-------------------------------------------------------------------   00284300
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00284400
                AIF   (K'&ZXSUBSYSTEM LE 0).ZG57R  NOT I/O              00284500
         AIF   ('&XSUBSYSTEM' EQ 'NO_SUBSYSTEM').ZG57R                  00284600
                AIF   ('&XSUBSYSTEM'(1,1) NE '(').ZG57R                 00284700
&ZCGPR          SETC  '&XSUBSYSTEM'(2,K'&XSUBSYSTEM-2)                  00284800
                AIF   ('&ZCGPR'(1,1) NE '0').ZG57P                      00284900
                AIF   (K'&ZCGPR GT 2).ZG57Q                             00285000
                AIF   ('&ZCGPR' EQ '0').ZG57Q                           00285100
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00285200
                AIF   (T'&ZCGPR NE 'N').ZG57Q   INVALID REG NAME        00285300
.ZG57P          ANOP  ,                                                 00285400
                AIF   (T'&ZCGPR NE 'N').ZG57R   NON NUMERIC             00285500
                AIF   ('&ZCGPR' LT '2').ZG57Q                           00285600
                AIF   ('&ZCGPR' LE '12').ZG57R                          00285700
.ZG57Q          ANOP  ,                                                 00285800
&ZMS            SETC  '"SUBSYSTEM='             *KGPRA* MNOTE           00285900
&ZMS            SETC  '&ZMS.&SUBSYSTEM"'                                00286000
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00286100
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00286200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00286300
.ZG57R          ANOP  ,                                                 00286400
.*------------------------------------------------------------------    00286500
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00286600
.ZG59           ANOP  ,                                                 00286700
&ZXIBM          SETC  'INPUT'     SET IN/OUTPUT                         00286800
                AIF   (K'&XIBM GT 0).ZG59E      VALID ARG               00286900
                AIF   (T'&IBM EQ 'O').ZG59D     OMITTED                 00287000
&ZASYSLNDX      SETA  0                                                 00287100
.ZG59A          ANOP  ,           POSITIONAL MACRO KEY                  00287200
&ZASYSLNDX      SETA  &ZASYSLNDX+1                                      00287300
                AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG59C                  00287400
&ZTLC           SETC 'IBM'                                              00287500
                AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG59A         00287600
.ZG59B          ANOP  ,                                                 00287700
&ZXIBM          SETC  ''          RESET IN/OUTPUT                       00287800
&ZMS            SETC  'THE "IBM" KEY'           *KOPTA* MNOTE           00287900
&ZMS            SETC  '&ZMS MUST CONTAIN ONE'                           00288000
                MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                  00288100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00288200
                AGO   .ZG59E                                            00288300
.ZG59C          ANOP  ,                                                 00288400
&ZXIBM          SETC  ''          RESET IN/OUTPUT                       00288500
&ZMS            SETC  '"IBM='     *KUKWA* MNOTE                         00288600
&ZMS            SETC  '&ZMS.&IBM"'                                      00288700
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00288800
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00288900
&ZMS            SETC  '&ZMS "NO"'                                       00289000
&ZMS            SETC  '&ZMS OR "YES".'                                  00289100
                MNOTE 8,' &ZMS '                                        00289200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00289300
                AGO   .ZG59E                                            00289400
.ZG59D          ANOP  ,                                                 00289500
&XIBM           SETC  'NO'        SET DEFAULT KEYWORD                   00289600
.ZG59E          ANOP  ,                                                 00289700
.*-------------------------------------------------------------------   00289800
.***AG.KMEKY13 VALUE, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES          00289900
.ZG60           AIF   ('&XTEST' NE 'RESET').ZG73                        00290000
.*-------------------------------------------------------------------   00290100
.***AG.KMEKY14 VALUE, RQD INPUT, ME KEYS -DISALLOWED KEYS               00290200
&ZCVAL          SETC ''           ERROR KEY FIELD                       00290300
.ZG60I0         AIF   (K'&ARCHLEV LE 0).ZG60I1                          00290400
&ZCVAL          SETC '&ZCVAL ARCHLEV'           DISALLOWED KEY          00290500
.ZG60I1         AIF   (K'&DAE LE 0).ZG60I2                              00290600
&ZCVAL          SETC '&ZCVAL DAE'               DISALLOWED KEY          00290700
.ZG60I2         AIF   (K'&COMPDSC LE 0).ZG60I3                          00290800
&ZCVAL          SETC '&ZCVAL COMPDSC'           DISALLOWED KEY          00290900
.ZG60I3         AIF   (K'&PROBLEM LE 0).ZG60I4                          00291000
&ZCVAL          SETC '&ZCVAL PROBLEM'           DISALLOWED KEY          00291100
.ZG60I4         AIF   (K'&SERVLEV LE 0).ZG60I5                          00291200
&ZCVAL          SETC '&ZCVAL SERVLEV'           DISALLOWED KEY          00291300
.ZG60I5         AIF   (K'&XNOCONVERTS LE 0).ZG60I6                      00291400
&ZCVAL          SETC '&ZCVAL XNOCONVERTS'       DISALLOWED KEY          00291500
.ZG60I6         AIF   (K'&IBM LE 0).ZG60I7                              00291600
&ZCVAL          SETC '&ZCVAL IBM'               DISALLOWED KEY          00291700
.ZG60I7         AIF   (K'&PROGRAM LE 0).ZG60I8                          00291800
&ZCVAL          SETC '&ZCVAL PROGRAM'           DISALLOWED KEY          00291900
.ZG60I8         AIF   (K'&PROGLEV LE 0).ZG60I9                          00292000
&ZCVAL          SETC '&ZCVAL PROGLEV'           DISALLOWED KEY          00292100
.ZG60I9         AIF   (K'&COMPID LE 0).ZG60I10                          00292200
&ZCVAL          SETC '&ZCVAL COMPID'            DISALLOWED KEY          00292300
.ZG60I10        AIF   (K'&COMPLEV LE 0).ZG60I11                         00292400
&ZCVAL          SETC '&ZCVAL COMPLEV'           DISALLOWED KEY          00292500
.ZG60I11        AIF   (K'&PID LE 0).ZG60I12                             00292600
&ZCVAL          SETC '&ZCVAL PID'               DISALLOWED KEY          00292700
.ZG60I12        AIF   (K'&PIDLEVEL LE 0).ZG60I13                        00292800
&ZCVAL          SETC '&ZCVAL PIDLEVEL'          DISALLOWED KEY          00292900
.ZG60I13        AIF   (K'&SUBSYSTEM LE 0).ZG60I14                       00293000
&ZCVAL          SETC '&ZCVAL SUBSYSTEM'         DISALLOWED KEY          00293100
.ZG60I14        AIF   (K'&SDBSTRING LE 0).ZG60I15                       00293200
&ZCVAL          SETC '&ZCVAL SDBSTRING'         DISALLOWED KEY          00293300
.ZG60I15        AIF   (K'&SDBLEN LE 0).ZG60I16                          00293400
&ZCVAL          SETC '&ZCVAL SDBLEN'            DISALLOWED KEY          00293500
.ZG60I16        AIF   (K'&SDBLENVAR LE 0).ZG60I17                       00293600
&ZCVAL          SETC '&ZCVAL SDBLENVAR'         DISALLOWED KEY          00293700
.ZG60I17        AIF   (K'&SDBKEY LE 0).ZG60I18                          00293800
&ZCVAL          SETC '&ZCVAL SDBKEY'            DISALLOWED KEY          00293900
.ZG60I18        AIF   (K'&DATA LE 0).ZG60I19                            00294000
&ZCVAL          SETC '&ZCVAL DATA'              DISALLOWED KEY          00294100
.ZG60I19        AIF   (K'&LEN LE 0).ZG60I20                             00294200
&ZCVAL          SETC '&ZCVAL LEN'               DISALLOWED KEY          00294300
.ZG60I20        AIF   (K'&LENVAR LE 0).ZG60I21                          00294400
&ZCVAL          SETC '&ZCVAL LENVAR'            DISALLOWED KEY          00294500
.ZG60I21        AIF   (K'&CONVERT LE 0).ZG60I22                         00294600
&ZCVAL          SETC '&ZCVAL CONVERT'           DISALLOWED KEY          00294700
.ZG60I22        AIF   (K'&TYPE LE 0).ZG60I23                            00294800
&ZCVAL          SETC '&ZCVAL TYPE'              DISALLOWED KEY          00294900
.ZG60I23        AIF   (K'&S5KEY LE 0).ZG60I24                           00295000
&ZCVAL          SETC '&ZCVAL S5KEY'             DISALLOWED KEY          00295100
.ZG60I24        AIF   (K'&INVOKE LE 0).ZG60I25                          00295200
&ZCVAL          SETC '&ZCVAL INVOKE'            DISALLOWED KEY          00295300
.ZG60I25        AIF   (K'&RETCODE LE 0).ZG60I26                         00295400
&ZCVAL          SETC '&ZCVAL RETCODE'           DISALLOWED KEY          00295500
.ZG60I26        AIF   (K'&RSNCODE LE 0).ZG60I27                         00295600
&ZCVAL          SETC '&ZCVAL RSNCODE'           DISALLOWED KEY          00295700
.ZG60I27        AIF   (K'&ZCVAL LE 0).ZG60J     KEY                     00295800
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00295900
                AIF  (K'&ZCVAL LE 160).ZG60K                            00296000
&ZCVAL          SETC '&ZCVAL'(1,160)                                    00296100
&ZCVAL          SETC '&ZCVAL....'                                       00296200
.ZG60K          ANOP                                                    00296300
&ZMS            SETC  '"RESET'    *KMEIA* MNOTE                         00296400
&ZMS            SETC  '&ZMS."'                                          00296500
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00296600
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00296700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00296800
.ZG60J          ANOP  ,                                                 00296900
.*----------------------------------------------------------------***   00297000
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00297100
                AIF   (N'&SR LE 1).ZG62A        CK NUM                  00297200
&ZMS            SETC  '"SR='      *KPOSA* MNOTE                         00297300
&ZMS            SETC  '&ZMS.&SR"'                                       00297400
&ZMS            SETC  '&ZMS "SR"'                                       00297500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00297600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00297700
.ZG62A          ANOP  ,                                                 00297800
.*-------------------------------------------------------------------   00297900
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00298000
&ZXSR           SETC  'INPUT'     SET IN/OUTPUT                         00298100
&XSR            SETC  '&SR(1)'    SET XVARIABLE                         00298200
                AIF   (N'&SR GT 1).ZG62B        MULTI PARMS             00298300
&XSR            SETC  '&SR'       SET XVARIABLE                         00298400
.ZG62B          AIF   (K'&SR(1) GT 0).ZG62C                             00298500
&ZXSR           SETC  ''          RESET IN/OUTPUT                       00298600
&ZMS            SETC  ' '         *KRQDA*                               00298700
&ZMS            SETC  '&ZMS "SR" KEY AND ITS'                           00298800
                MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                  00298900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00299000
.ZG62C          ANOP  ,                                                 00299100
.*-------------------------------------------------------------------   00299200
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00299300
                AIF   (K'&ZXSR LE 0).ZG62R      NOT I/O                 00299400
                AIF   ('&XSR'(1,1) NE '(').ZG62R                        00299500
&ZCGPR          SETC  '&XSR'(2,K'&XSR-2)                                00299600
                AIF   ('&ZCGPR'(1,1) NE '0').ZG62P                      00299700
                AIF   (K'&ZCGPR GT 2).ZG62Q                             00299800
                AIF   ('&ZCGPR' EQ '0').ZG62Q                           00299900
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00300000
                AIF   (T'&ZCGPR NE 'N').ZG62Q   INVALID REG NAME        00300100
.ZG62P          ANOP  ,                                                 00300200
                AIF   (T'&ZCGPR NE 'N').ZG62R   NON NUMERIC             00300300
                AIF   ('&ZCGPR' LT '2').ZG62Q                           00300400
                AIF   ('&ZCGPR' LE '12').ZG62R                          00300500
.ZG62Q          ANOP  ,                                                 00300600
&ZMS            SETC  '"SR='      *KGPRA* MNOTE                         00300700
&ZMS            SETC  '&ZMS.&SR"'                                       00300800
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00300900
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00301000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00301100
.ZG62R          ANOP  ,                                                 00301200
.*----------------------------------------------------------------***   00301300
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00301400
                AIF   (N'&PRIMLEN LE 1).ZG65A   CK NUM                  00301500
&ZMS            SETC  '"PRIMLEN='               *KPOSA* MNOTE           00301600
&ZMS            SETC  '&ZMS.&PRIMLEN"'                                  00301700
&ZMS            SETC  '&ZMS "PRIMLEN"'                                  00301800
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00301900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00302000
.ZG65A          ANOP  ,                                                 00302100
.*-------------------------------------------------------------------   00302200
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00302300
&ZXPRIMLEN      SETC  'INPUT'     SET IN/OUTPUT                         00302400
&XPRIMLEN       SETC  'OLD_PRIMLEN'                                     00302500
                AIF   (K'&PRIMLEN(1) LE 0).ZG65B  PARM                  00302600
&XPRIMLEN       SETC  '&PRIMLEN(1)'             SET XVARIABLE           00302700
                AIF   (N'&PRIMLEN GT 1).ZG65B   MULTI PARMS             00302800
&XPRIMLEN       SETC  '&PRIMLEN'  SET XVARIABLE                         00302900
.ZG65B          ANOP  ,                                                 00303000
.*-------------------------------------------------------------------   00303100
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00303200
                AIF   (K'&ZXPRIMLEN LE 0).ZG65R  NOT I/O                00303300
         AIF   ('&XPRIMLEN' EQ 'OLD_PRIMLEN').ZG65R                     00303400
                AIF   ('&XPRIMLEN'(1,1) NE '(').ZG65R                   00303500
&ZCGPR          SETC  '&XPRIMLEN'(2,K'&XPRIMLEN-2)                      00303600
                AIF   ('&ZCGPR'(1,1) NE '0').ZG65P                      00303700
                AIF   (K'&ZCGPR GT 2).ZG65Q                             00303800
                AIF   ('&ZCGPR' EQ '0').ZG65Q                           00303900
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00304000
                AIF   (T'&ZCGPR NE 'N').ZG65Q   INVALID REG NAME        00304100
.ZG65P          ANOP  ,                                                 00304200
                AIF   (T'&ZCGPR NE 'N').ZG65R   NON NUMERIC             00304300
                AIF   ('&ZCGPR' LT '2').ZG65Q                           00304400
                AIF   ('&ZCGPR' LE '12').ZG65R                          00304500
.ZG65Q          ANOP  ,                                                 00304600
&ZMS            SETC  '"PRIMLEN='               *KGPRA* MNOTE           00304700
&ZMS            SETC  '&ZMS.&PRIMLEN"'                                  00304800
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00304900
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00305000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00305100
.ZG65R          ANOP  ,                                                 00305200
.*----------------------------------------------------------------***   00305300
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00305400
                AIF   (N'&SECLEN LE 1).ZG68A    CK NUM                  00305500
&ZMS            SETC  '"SECLEN='  *KPOSA* MNOTE                         00305600
&ZMS            SETC  '&ZMS.&SECLEN"'                                   00305700
&ZMS            SETC  '&ZMS "SECLEN"'                                   00305800
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00305900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00306000
.ZG68A          ANOP  ,                                                 00306100
.*-------------------------------------------------------------------   00306200
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00306300
&ZXSECLEN       SETC  'INPUT'     SET IN/OUTPUT                         00306400
&XSECLEN        SETC  'OLD_SECLEN'                                      00306500
                AIF   (K'&SECLEN(1) LE 0).ZG68B  PARM                   00306600
&XSECLEN        SETC  '&SECLEN(1)'              SET XVARIABLE           00306700
                AIF   (N'&SECLEN GT 1).ZG68B    MULTI PARMS             00306800
&XSECLEN        SETC  '&SECLEN'   SET XVARIABLE                         00306900
.ZG68B          ANOP  ,                                                 00307000
.*-------------------------------------------------------------------   00307100
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00307200
                AIF   (K'&ZXSECLEN LE 0).ZG68R  NOT I/O                 00307300
         AIF   ('&XSECLEN' EQ 'OLD_SECLEN').ZG68R                       00307400
                AIF   ('&XSECLEN'(1,1) NE '(').ZG68R                    00307500
&ZCGPR          SETC  '&XSECLEN'(2,K'&XSECLEN-2)                        00307600
                AIF   ('&ZCGPR'(1,1) NE '0').ZG68P                      00307700
                AIF   (K'&ZCGPR GT 2).ZG68Q                             00307800
                AIF   ('&ZCGPR' EQ '0').ZG68Q                           00307900
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00308000
                AIF   (T'&ZCGPR NE 'N').ZG68Q   INVALID REG NAME        00308100
.ZG68P          ANOP  ,                                                 00308200
                AIF   (T'&ZCGPR NE 'N').ZG68R   NON NUMERIC             00308300
                AIF   ('&ZCGPR' LT '2').ZG68Q                           00308400
                AIF   ('&ZCGPR' LE '12').ZG68R                          00308500
.ZG68Q          ANOP  ,                                                 00308600
&ZMS            SETC  '"SECLEN='  *KGPRA* MNOTE                         00308700
&ZMS            SETC  '&ZMS.&SECLEN"'                                   00308800
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00308900
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00309000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00309100
.ZG68R          ANOP  ,                                                 00309200
.*----------------------------------------------------------------***   00309300
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00309400
                AIF   (N'&VARLEN LE 1).ZG71A    CK NUM                  00309500
&ZMS            SETC  '"VARLEN='  *KPOSA* MNOTE                         00309600
&ZMS            SETC  '&ZMS.&VARLEN"'                                   00309700
&ZMS            SETC  '&ZMS "VARLEN"'                                   00309800
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00309900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00310000
.ZG71A          ANOP  ,                                                 00310100
.*-------------------------------------------------------------------   00310200
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00310300
&ZXVARLEN       SETC  'INPUT'     SET IN/OUTPUT                         00310400
&XVARLEN        SETC  'OLD_VARLEN'                                      00310500
                AIF   (K'&VARLEN(1) LE 0).ZG71B  PARM                   00310600
&XVARLEN        SETC  '&VARLEN(1)'              SET XVARIABLE           00310700
                AIF   (N'&VARLEN GT 1).ZG71B    MULTI PARMS             00310800
&XVARLEN        SETC  '&VARLEN'   SET XVARIABLE                         00310900
.ZG71B          ANOP  ,                                                 00311000
.*-------------------------------------------------------------------   00311100
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00311200
                AIF   (K'&ZXVARLEN LE 0).ZG71R  NOT I/O                 00311300
         AIF   ('&XVARLEN' EQ 'OLD_VARLEN').ZG71R                       00311400
                AIF   ('&XVARLEN'(1,1) NE '(').ZG71R                    00311500
&ZCGPR          SETC  '&XVARLEN'(2,K'&XVARLEN-2)                        00311600
                AIF   ('&ZCGPR'(1,1) NE '0').ZG71P                      00311700
                AIF   (K'&ZCGPR GT 2).ZG71Q                             00311800
                AIF   ('&ZCGPR' EQ '0').ZG71Q                           00311900
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00312000
                AIF   (T'&ZCGPR NE 'N').ZG71Q   INVALID REG NAME        00312100
.ZG71P          ANOP  ,                                                 00312200
                AIF   (T'&ZCGPR NE 'N').ZG71R   NON NUMERIC             00312300
                AIF   ('&ZCGPR' LT '2').ZG71Q                           00312400
                AIF   ('&ZCGPR' LE '12').ZG71R                          00312500
.ZG71Q          ANOP  ,                                                 00312600
&ZMS            SETC  '"VARLEN='  *KGPRA* MNOTE                         00312700
&ZMS            SETC  '&ZMS.&VARLEN"'                                   00312800
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00312900
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00313000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00313100
.ZG71R          ANOP  ,                                                 00313200
.*-------------------------------------------------------------------   00313300
.***AG.KMEKY13 VALUE, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES          00313400
.ZG73           AIF   ('&XTEST' NE 'PRIMARY').ZG108                     00313500
.*-------------------------------------------------------------------   00313600
.***AG.KMEKY14 VALUE, RQD INPUT, ME KEYS -DISALLOWED KEYS               00313700
&ZCVAL          SETC ''           ERROR KEY FIELD                       00313800
.ZG73I0         AIF   (K'&PRIMLEN LE 0).ZG73I1                          00313900
&ZCVAL          SETC '&ZCVAL PRIMLEN'           DISALLOWED KEY          00314000
.ZG73I1         AIF   (K'&SECLEN LE 0).ZG73I2                           00314100
&ZCVAL          SETC '&ZCVAL SECLEN'            DISALLOWED KEY          00314200
.ZG73I2         AIF   (K'&VARLEN LE 0).ZG73I3                           00314300
&ZCVAL          SETC '&ZCVAL VARLEN'            DISALLOWED KEY          00314400
.ZG73I3         AIF   (K'&ARCHLEV LE 0).ZG73I4                          00314500
&ZCVAL          SETC '&ZCVAL ARCHLEV'           DISALLOWED KEY          00314600
.ZG73I4         AIF   (K'&DAE LE 0).ZG73I5                              00314700
&ZCVAL          SETC '&ZCVAL DAE'               DISALLOWED KEY          00314800
.ZG73I5         AIF   (K'&COMPDSC LE 0).ZG73I6                          00314900
&ZCVAL          SETC '&ZCVAL COMPDSC'           DISALLOWED KEY          00315000
.ZG73I6         AIF   (K'&PROBLEM LE 0).ZG73I7                          00315100
&ZCVAL          SETC '&ZCVAL PROBLEM'           DISALLOWED KEY          00315200
.ZG73I7         AIF   (K'&SERVLEV LE 0).ZG73I8                          00315300
&ZCVAL          SETC '&ZCVAL SERVLEV'           DISALLOWED KEY          00315400
.ZG73I8         AIF   (K'&XNOCONVERTS LE 0).ZG73I9                      00315500
&ZCVAL          SETC '&ZCVAL XNOCONVERTS'       DISALLOWED KEY          00315600
.ZG73I9         AIF   (K'&IBM LE 0).ZG73I10                             00315700
&ZCVAL          SETC '&ZCVAL IBM'               DISALLOWED KEY          00315800
.ZG73I10        AIF   (K'&PROGRAM LE 0).ZG73I11                         00315900
&ZCVAL          SETC '&ZCVAL PROGRAM'           DISALLOWED KEY          00316000
.ZG73I11        AIF   (K'&PROGLEV LE 0).ZG73I12                         00316100
&ZCVAL          SETC '&ZCVAL PROGLEV'           DISALLOWED KEY          00316200
.ZG73I12        AIF   (K'&COMPID LE 0).ZG73I13                          00316300
&ZCVAL          SETC '&ZCVAL COMPID'            DISALLOWED KEY          00316400
.ZG73I13        AIF   (K'&COMPLEV LE 0).ZG73I14                         00316500
&ZCVAL          SETC '&ZCVAL COMPLEV'           DISALLOWED KEY          00316600
.ZG73I14        AIF   (K'&PID LE 0).ZG73I15                             00316700
&ZCVAL          SETC '&ZCVAL PID'               DISALLOWED KEY          00316800
.ZG73I15        AIF   (K'&PIDLEVEL LE 0).ZG73I16                        00316900
&ZCVAL          SETC '&ZCVAL PIDLEVEL'          DISALLOWED KEY          00317000
.ZG73I16        AIF   (K'&SUBSYSTEM LE 0).ZG73I17                       00317100
&ZCVAL          SETC '&ZCVAL SUBSYSTEM'         DISALLOWED KEY          00317200
.ZG73I17        AIF   (K'&S5KEY LE 0).ZG73I18                           00317300
&ZCVAL          SETC '&ZCVAL S5KEY'             DISALLOWED KEY          00317400
.ZG73I18        AIF   (K'&INVOKE LE 0).ZG73I19                          00317500
&ZCVAL          SETC '&ZCVAL INVOKE'            DISALLOWED KEY          00317600
.ZG73I19        AIF   (K'&RETCODE LE 0).ZG73I20                         00317700
&ZCVAL          SETC '&ZCVAL RETCODE'           DISALLOWED KEY          00317800
.ZG73I20        AIF   (K'&RSNCODE LE 0).ZG73I21                         00317900
&ZCVAL          SETC '&ZCVAL RSNCODE'           DISALLOWED KEY          00318000
.ZG73I21        AIF   (K'&ZCVAL LE 0).ZG73J     KEY                     00318100
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00318200
&ZMS            SETC  '"PRIMARY'  *KMEIA* MNOTE                         00318300
&ZMS            SETC  '&ZMS."'                                          00318400
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00318500
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00318600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00318700
.ZG73J          ANOP  ,                                                 00318800
.*----------------------------------------------------------------***   00318900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00319000
                AIF   (N'&SR LE 1).ZG75A        CK NUM                  00319100
&ZMS            SETC  '"SR='      *KPOSA* MNOTE                         00319200
&ZMS            SETC  '&ZMS.&SR"'                                       00319300
&ZMS            SETC  '&ZMS "SR"'                                       00319400
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00319500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00319600
.ZG75A          ANOP  ,                                                 00319700
.*-------------------------------------------------------------------   00319800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00319900
&ZXSR           SETC  'INPUT'     SET IN/OUTPUT                         00320000
&XSR            SETC  'SR_IN_R1'                                        00320100
                AIF   (K'&SR(1) LE 0).ZG75B     PARM                    00320200
&XSR            SETC  '&SR(1)'    SET XVARIABLE                         00320300
                AIF   (N'&SR GT 1).ZG75B        MULTI PARMS             00320400
&XSR            SETC  '&SR'       SET XVARIABLE                         00320500
.ZG75B          ANOP  ,                                                 00320600
.*-------------------------------------------------------------------   00320700
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00320800
                AIF   (K'&ZXSR LE 0).ZG75R      NOT I/O                 00320900
         AIF   ('&XSR' EQ 'SR_IN_R1').ZG75R                             00321000
                AIF   ('&XSR'(1,1) NE '(').ZG75R                        00321100
&ZCGPR          SETC  '&XSR'(2,K'&XSR-2)                                00321200
                AIF   ('&ZCGPR'(1,1) NE '0').ZG75P                      00321300
                AIF   (K'&ZCGPR GT 2).ZG75Q                             00321400
                AIF   ('&ZCGPR' EQ '0').ZG75Q                           00321500
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00321600
                AIF   (T'&ZCGPR NE 'N').ZG75Q   INVALID REG NAME        00321700
.ZG75P          ANOP  ,                                                 00321800
                AIF   (T'&ZCGPR NE 'N').ZG75R   NON NUMERIC             00321900
                AIF   ('&ZCGPR' LT '2').ZG75Q                           00322000
                AIF   ('&ZCGPR' LE '12').ZG75R                          00322100
.ZG75Q          ANOP  ,                                                 00322200
&ZMS            SETC  '"SR='      *KGPRA* MNOTE                         00322300
&ZMS            SETC  '&ZMS.&SR"'                                       00322400
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00322500
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00322600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00322700
.ZG75R          ANOP  ,                                                 00322800
.*----------------------------------------------------------------***   00322900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00323000
                AIF   (N'&SDBSTRING LE 1).ZG78A  CK NUM                 00323100
&ZMS            SETC  '"SDBSTRING='             *KPOSA* MNOTE           00323200
&ZMS            SETC  '&ZMS.&SDBSTRING"'                                00323300
&ZMS            SETC  '&ZMS "SDBSTRING"'                                00323400
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00323500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00323600
.ZG78A          ANOP  ,                                                 00323700
.*-------------------------------------------------------------------   00323800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00323900
&ZXSDBSTRING    SETC  'INPUT'     SET IN/OUTPUT                         00324000
&XSDBSTRING     SETC  'NO_SDB_STRING'                                   00324100
                AIF   (K'&SDBSTRING(1) LE 0).ZG78B  PARM                00324200
&XSDBSTRING     SETC  '&SDBSTRING(1)'           SET XVARIABLE           00324300
                AIF   (N'&SDBSTRING GT 1).ZG78B  MULTI PARMS            00324400
&XSDBSTRING     SETC  '&SDBSTRING'              SET XVARIABLE           00324500
.ZG78B          ANOP  ,                                                 00324600
.*-------------------------------------------------------------------   00324700
.***AG.KCK01 NAME, OPT INPUT, KEYS -GPR NOT ALLOWED                     00324800
                AIF   (K'&ZXSDBSTRING LE 0).ZG78P  NOT I/O              00324900
                AIF   ('&XSDBSTRING' EQ 'NO_SDB_STRING').ZG78P          00325000
                AIF   ('&XSDBSTRING'(1,1) NE '(').ZG78P                 00325100
&ZXSDBSTRING    SETC  ''          RESET IN/OUTPUT                       00325200
&ZMS            SETC  '"SDBSTRING='             *KGPRA* MNOTE           00325300
&ZMS            SETC  '&ZMS.&SDBSTRING"'                                00325400
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00325500
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00325600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00325700
.ZG78P          ANOP  ,                                                 00325800
.*----------------------------------------------------------------***   00325900
.***AG.KXVAR05 VALUE, OPT INPUT, KEYS -XVARIABLE KEY                    00326000
                AIF   (N'&SDBLEN LE 1).ZG80A    CK NUM                  00326100
&ZMS            SETC  '"SDBLEN='  *KPOSA* MNOTE                         00326200
&ZMS            SETC  '&ZMS.&SDBLEN"'                                   00326300
&ZMS            SETC  '&ZMS "SDBLEN"'                                   00326400
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00326500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00326600
.ZG80A          ANOP  ,                                                 00326700
.*-------------------------------------------------------------------   00326800
.***AG.KXVAR17 VALUE, OPT INPUT, KEYS -XVARIABLE                        00326900
&XSDBLEN        SETC  'DEFINED_LENGTH'          SET DEFAULT             00327000
                AIF   (K'&SDBLEN(1) LE 0).ZG80C  PARM                   00327100
&XSDBLEN        SETC  '&SDBLEN(1)'              SET XVARIABLE           00327200
                AIF   (N'&SDBLEN GT 1).ZG80B    MULTI PARMS             00327300
&XSDBLEN        SETC  '&SDBLEN'   SET XVARIABLE                         00327400
.ZG80B          AIF   (K'&SDBSTRING(1) GT 0).ZG80C  KEY                 00327500
&ZMS            SETC  '"SDBLEN'   *KDEPA* MNOTE                         00327600
&ZMS            SETC  '&ZMS.=&SDBLEN"'                                  00327700
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00327800
&ZMS            SETC  '&ZMS '                                           00327900
&ZMS            SETC  '&ZMS "SDBSTRING"'                                00328000
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00328100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00328200
.ZG80C          ANOP  ,                                                 00328300
&ZXSDBLEN       SETC  'INPUT'     SET IN/OUTPUT                         00328400
.*-------------------------------------------------------------------   00328500
.***AG.KCK02 VALUE, OPT INPUT, KEYS -GPR OUT OF RANGE                   00328600
                AIF   (K'&ZXSDBLEN LE 0).ZG80R  NOT I/O                 00328700
         AIF   ('&XSDBLEN' EQ 'DEFINED_LENGTH').ZG80R                   00328800
                AIF   ('&XSDBLEN'(1,1) NE '(').ZG80R                    00328900
&ZCGPR          SETC  '&XSDBLEN'(2,K'&XSDBLEN-2)                        00329000
                AIF   ('&ZCGPR'(1,1) NE '0').ZG80P                      00329100
                AIF   (K'&ZCGPR GT 2).ZG80Q                             00329200
                AIF   ('&ZCGPR' EQ '0').ZG80Q                           00329300
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00329400
                AIF   (T'&ZCGPR NE 'N').ZG80Q   INVALID REG NAME        00329500
.ZG80P          ANOP  ,                                                 00329600
                AIF   (T'&ZCGPR NE 'N').ZG80R   NON NUMERIC             00329700
                AIF   ('&ZCGPR' LT '2').ZG80Q                           00329800
                AIF   ('&ZCGPR' LE '12').ZG80R                          00329900
.ZG80Q          ANOP  ,                                                 00330000
&ZMS            SETC  '"SDBLEN='  *KGPRA* MNOTE                         00330100
&ZMS            SETC  '&ZMS.&SDBLEN"'                                   00330200
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00330300
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00330400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00330500
.ZG80R          ANOP  ,                                                 00330600
.*-------------------------------------------------------------------   00330700
.***AG.KCK07 VALUE, OPT INPUT, KEYS -KMG RANGE                          00330800
                AIF   (K'&ZXSDBLEN LE 0).ZG80T  NOT I/O                 00330900
                AIF   ('&XSDBLEN' EQ 'DEFINED_LENGTH').ZG80T            00331000
                AIF   ('&XSDBLEN'(1,1) EQ '(').ZG80T  IN GPR            00331100
                AIF   (T'&XSDBLEN NE 'N').ZG80S  NUMERIC ERR            00331200
&ZASIZ          SETA  &XSDBLEN    CONVERT                               00331300
                AIF   (&ZASIZ LT 1).ZG80S       TOO LOW                 00331400
                AIF   (&ZASIZ LE 256).ZG80T     NOT HIGH                00331500
.ZG80S          ANOP  ,                                                 00331600
&ZXSDBLEN       SETC  ''          RESET IN/OUTPUT                       00331700
&ZMS            SETC  '"SDBLEN='  *KRNGA* MNOTE                         00331800
&ZMS            SETC  '&ZMS.&SDBLEN"'                                   00331900
&ZMS            SETC  '&ZMS THE RANGE IS "1-256"'                       00332000
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00332100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00332200
.ZG80T          ANOP  ,                                                 00332300
.*----------------------------------------------------------------***   00332400
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00332500
                AIF   (N'&SDBLENVAR LE 1).ZG83A  CK NUM                 00332600
&ZMS            SETC  '"SDBLENVAR='             *KPOSA* MNOTE           00332700
&ZMS            SETC  '&ZMS.&SDBLENVAR"'                                00332800
&ZMS            SETC  '&ZMS "SDBLENVAR"'                                00332900
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00333000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00333100
.ZG83A          ANOP  ,                                                 00333200
.*-------------------------------------------------------------------   00333300
.***AG.KXVAR17 NAME, OPT INPUT, KEYS -XVARIABLE                         00333400
&XSDBLENVAR     SETC  'DEFINED_LENGTH'          SET DEFAULT             00333500
                AIF   (K'&SDBLENVAR(1) LE 0).ZG83C  PARM                00333600
&XSDBLENVAR     SETC  '&SDBLENVAR(1)'           SET XVARIABLE           00333700
                AIF   (N'&SDBLENVAR GT 1).ZG83B  MULTI PARMS            00333800
&XSDBLENVAR     SETC  '&SDBLENVAR'              SET XVARIABLE           00333900
.ZG83B          AIF   (K'&SDBSTRING(1) GT 0).ZG83C  KEY                 00334000
&ZMS            SETC  '"SDBLENVAR'              *KDEPA* MNOTE           00334100
&ZMS            SETC  '&ZMS.=&SDBLENVAR"'                               00334200
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00334300
&ZMS            SETC  '&ZMS '                                           00334400
&ZMS            SETC  '&ZMS "SDBSTRING"'                                00334500
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00334600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00334700
.ZG83C          ANOP  ,                                                 00334800
&ZXSDBLENVAR    SETC  'INPUT'     SET IN/OUTPUT                         00334900
.*-------------------------------------------------------------------   00335000
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00335100
                AIF   (K'&ZXSDBLENVAR LE 0).ZG83R  NOT I/O              00335200
         AIF   ('&XSDBLENVAR' EQ 'DEFINED_LENGTH').ZG83R                00335300
                AIF   ('&XSDBLENVAR'(1,1) NE '(').ZG83R                 00335400
&ZCGPR          SETC  '&XSDBLENVAR'(2,K'&XSDBLENVAR-2)                  00335500
                AIF   ('&ZCGPR'(1,1) NE '0').ZG83P                      00335600
                AIF   (K'&ZCGPR GT 2).ZG83Q                             00335700
                AIF   ('&ZCGPR' EQ '0').ZG83Q                           00335800
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00335900
                AIF   (T'&ZCGPR NE 'N').ZG83Q   INVALID REG NAME        00336000
.ZG83P          ANOP  ,                                                 00336100
                AIF   (T'&ZCGPR NE 'N').ZG83R   NON NUMERIC             00336200
                AIF   ('&ZCGPR' LT '2').ZG83Q                           00336300
                AIF   ('&ZCGPR' LE '12').ZG83R                          00336400
.ZG83Q          ANOP  ,                                                 00336500
&ZMS            SETC  '"SDBLENVAR='             *KGPRA* MNOTE           00336600
&ZMS            SETC  '&ZMS.&SDBLENVAR"'                                00336700
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00336800
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00336900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00337000
.ZG83R          ANOP  ,                                                 00337100
.*----------------------------------------------------------------***   00337200
.***AG.KXVAR05 VALUE, OPT INPUT, KEYS -XVARIABLE KEY                    00337300
                AIF   (N'&SDBKEY LE 1).ZG87A    CK NUM                  00337400
&ZMS            SETC  '"SDBKEY='  *KPOSA* MNOTE                         00337500
&ZMS            SETC  '&ZMS.&SDBKEY"'                                   00337600
&ZMS            SETC  '&ZMS "SDBKEY"'                                   00337700
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00337800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00337900
.ZG87A          ANOP  ,                                                 00338000
.*-------------------------------------------------------------------   00338100
.***AG.KXVAR13 VALUE, OPT INPUT, KEYS -XVARIABLE                        00338200
&ZXSDBKEY       SETC  'INPUT'     SET IN/OUTPUT                         00338300
&XSDBKEY        SETC  'NO_SDBKEY'                                       00338400
                AIF   (K'&SDBKEY(1) LE 0).ZG87B  PARM                   00338500
&XSDBKEY        SETC  '&SDBKEY(1)'              SET XVARIABLE           00338600
                AIF   (N'&SDBKEY GT 1).ZG87B    MULTI PARMS             00338700
&XSDBKEY        SETC  '&SDBKEY'   SET XVARIABLE                         00338800
.ZG87B          ANOP  ,                                                 00338900
.*-------------------------------------------------------------------   00339000
.***AG.KCK01 VALUE, OPT INPUT, KEYS -GPR NOT ALLOWED                    00339100
                AIF   (K'&ZXSDBKEY LE 0).ZG87P  NOT I/O                 00339200
                AIF   ('&XSDBKEY' EQ 'NO_SDBKEY').ZG87P                 00339300
                AIF   ('&XSDBKEY'(1,1) NE '(').ZG87P                    00339400
&ZXSDBKEY       SETC  ''          RESET IN/OUTPUT                       00339500
&ZMS            SETC  '"SDBKEY='  *KGPRA* MNOTE                         00339600
&ZMS            SETC  '&ZMS.&SDBKEY"'                                   00339700
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00339800
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00339900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00340000
.ZG87P          ANOP  ,                                                 00340100
.*-------------------------------------------------------------------   00340200
.***AG.KCK03 VALUE, OPT INPUT, KEYS -CHARACTER LENGTH                   00340300
                AIF   (K'&ZXSDBKEY LE 0).ZG87S  NOT I/O                 00340400
                AIF   ('&XSDBKEY' EQ 'NO_SDBKEY').ZG87S                 00340500
                AIF   (K'&XSDBKEY LE 256).ZG87S  LNG OK                 00340600
&ZXSDBKEY       SETC  ''          RESET IN/OUTPUT                       00340700
&ZMS            SETC  '"SDBKEY='  *KLNGA* MNOTE                         00340800
&ZMS            SETC  '&ZMS.&SDBKEY"'                                   00340900
&ZMS            SETC  '&ZMS ARGUMENT 1 EXCEEDS THE MAXIMUM'             00341000
                MNOTE 8,' &ZMS LENGTH OF 256 CHARACTERS.'               00341100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00341200
.ZG87S          ANOP  ,                                                 00341300
.*----------------------------------------------------------------***   00341400
.***AG.KXVAR05 NAME, OPT RQD INPUT, KEYS -XVARIABLE KEY                 00341500
                AIF   (N'&DATA LE 1).ZG89A      CK NUM                  00341600
&ZMS            SETC  '"DATA='    *KPOSA* MNOTE                         00341700
&ZMS            SETC  '&ZMS.&DATA"'                                     00341800
&ZMS            SETC  '&ZMS "DATA"'                                     00341900
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00342000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00342100
.ZG89A          ANOP  ,                                                 00342200
.*-------------------------------------------------------------------   00342300
.***AG.KXVAR09 NAME, OPT RQD INPUT, KEYS -XVARIABLE                     00342400
&ZXDATA         SETC  'INPUT'     SET IN/OUTPUT                         00342500
&XDATA          SETC  '&DATA(1)'  SET XVARIABLE                         00342600
                AIF   (N'&DATA GT 1).ZG89B      MULTI PARMS             00342700
&XDATA          SETC  '&DATA'     SET XVARIABLE                         00342800
.ZG89B          AIF   (K'&SDBKEY(1) GT 0).ZG89C  KEY                    00342900
                AIF   (K'&DATA(1) LE 0).ZG89D   PARM                    00343000
&ZMS            SETC  '"DATA'     *KDEPA* MNOTE                         00343100
&ZMS            SETC  '&ZMS.=&DATA"'                                    00343200
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00343300
&ZMS            SETC  '&ZMS '                                           00343400
&ZMS            SETC  '&ZMS "SDBKEY"'                                   00343500
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00343600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00343700
                AGO   .ZG89E                                            00343800
.*                                                                      00343900
.ZG89C          AIF   (K'&DATA(1) GT 0).ZG89E   PARM                    00344000
&ZXDATA         SETC  ''          RESET IN/OUTPUT                       00344100
&ZMS            SETC  ' '         *KRQDA*                               00344200
&ZMS            SETC  '&ZMS "DATA" KEY AND ITS'                         00344300
                MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                  00344400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00344500
.ZG89D          ANOP  ,                                                 00344600
&XDATA          SETC  '0'         SET DEFAULT                           00344700
.ZG89E          ANOP  ,                                                 00344800
.*-------------------------------------------------------------------   00344900
.***AG.KCK02 NAME, OPT RQD INPUT, KEYS -GPR OUT OF RANGE                00345000
                AIF   (K'&ZXDATA LE 0).ZG89R    NOT I/O                 00345100
                AIF   ('&XDATA'(1,1) NE '(').ZG89R                      00345200
&ZCGPR          SETC  '&XDATA'(2,K'&XDATA-2)                            00345300
                AIF   ('&ZCGPR'(1,1) NE '0').ZG89P                      00345400
                AIF   (K'&ZCGPR GT 2).ZG89Q                             00345500
                AIF   ('&ZCGPR' EQ '0').ZG89Q                           00345600
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00345700
                AIF   (T'&ZCGPR NE 'N').ZG89Q   INVALID REG NAME        00345800
.ZG89P          ANOP  ,                                                 00345900
                AIF   (T'&ZCGPR NE 'N').ZG89R   NON NUMERIC             00346000
                AIF   ('&ZCGPR' LT '2').ZG89Q                           00346100
                AIF   ('&ZCGPR' LE '12').ZG89R                          00346200
.ZG89Q          ANOP  ,                                                 00346300
&ZMS            SETC  '"DATA='    *KGPRA* MNOTE                         00346400
&ZMS            SETC  '&ZMS.&DATA"'                                     00346500
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00346600
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00346700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00346800
.ZG89R          ANOP  ,                                                 00346900
.*----------------------------------------------------------------***   00347000
.***AG.KXVAR05 VALUE, OPT INPUT, KEYS -XVARIABLE KEY                    00347100
                AIF   (N'&LEN LE 1).ZG91A       CK NUM                  00347200
&ZMS            SETC  '"LEN='     *KPOSA* MNOTE                         00347300
&ZMS            SETC  '&ZMS.&LEN"'                                      00347400
&ZMS            SETC  '&ZMS "LEN"'                                      00347500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00347600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00347700
.ZG91A          ANOP  ,                                                 00347800
.*-------------------------------------------------------------------   00347900
.***AG.KXVAR17 VALUE, OPT INPUT, KEYS -XVARIABLE                        00348000
&XLEN           SETC  'DEFINED_LENGTH'          SET DEFAULT             00348100
                AIF   (K'&LEN(1) LE 0).ZG91C    PARM                    00348200
&XLEN           SETC  '&LEN(1)'   SET XVARIABLE                         00348300
                AIF   (N'&LEN GT 1).ZG91B       MULTI PARMS             00348400
&XLEN           SETC  '&LEN'      SET XVARIABLE                         00348500
.ZG91B          AIF   (K'&DATA(1) GT 0).ZG91C   KEY                     00348600
&ZMS            SETC  '"LEN'      *KDEPA* MNOTE                         00348700
&ZMS            SETC  '&ZMS.=&LEN"'                                     00348800
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00348900
&ZMS            SETC  '&ZMS '                                           00349000
&ZMS            SETC  '&ZMS "DATA"'                                     00349100
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00349200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00349300
.ZG91C          ANOP  ,                                                 00349400
&ZXLEN          SETC  'INPUT'     SET IN/OUTPUT                         00349500
.*-------------------------------------------------------------------   00349600
.***AG.KCK02 VALUE, OPT INPUT, KEYS -GPR OUT OF RANGE                   00349700
                AIF   (K'&ZXLEN LE 0).ZG91R     NOT I/O                 00349800
         AIF   ('&XLEN' EQ 'DEFINED_LENGTH').ZG91R                      00349900
                AIF   ('&XLEN'(1,1) NE '(').ZG91R                       00350000
&ZCGPR          SETC  '&XLEN'(2,K'&XLEN-2)                              00350100
                AIF   ('&ZCGPR'(1,1) NE '0').ZG91P                      00350200
                AIF   (K'&ZCGPR GT 2).ZG91Q                             00350300
                AIF   ('&ZCGPR' EQ '0').ZG91Q                           00350400
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00350500
                AIF   (T'&ZCGPR NE 'N').ZG91Q   INVALID REG NAME        00350600
.ZG91P          ANOP  ,                                                 00350700
                AIF   (T'&ZCGPR NE 'N').ZG91R   NON NUMERIC             00350800
                AIF   ('&ZCGPR' LT '2').ZG91Q                           00350900
                AIF   ('&ZCGPR' LE '12').ZG91R                          00351000
.ZG91Q          ANOP  ,                                                 00351100
&ZMS            SETC  '"LEN='     *KGPRA* MNOTE                         00351200
&ZMS            SETC  '&ZMS.&LEN"'                                      00351300
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00351400
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00351500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00351600
.ZG91R          ANOP  ,                                                 00351700
.*-------------------------------------------------------------------   00351800
.***AG.KCK07 VALUE, OPT INPUT, KEYS -KMG RANGE                          00351900
                AIF   (K'&ZXLEN LE 0).ZG91T     NOT I/O                 00352000
                AIF   ('&XLEN' EQ 'DEFINED_LENGTH').ZG91T               00352100
                AIF   ('&XLEN'(1,1) EQ '(').ZG91T  IN GPR               00352200
                AIF   (T'&XLEN NE 'N').ZG91S    NUMERIC ERR             00352300
&ZASIZ          SETA  &XLEN       CONVERT                               00352400
                AIF   (&ZASIZ LT 1).ZG91S       TOO LOW                 00352500
                AIF   (&ZASIZ LE 13).ZG91T      NOT HIGH                00352600
.ZG91S          ANOP  ,                                                 00352700
&ZXLEN          SETC  ''          RESET IN/OUTPUT                       00352800
&ZMS            SETC  '"LEN='     *KRNGA* MNOTE                         00352900
&ZMS            SETC  '&ZMS.&LEN"'                                      00353000
&ZMS            SETC  '&ZMS THE RANGE IS "1-13"'                        00353100
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00353200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00353300
.ZG91T          ANOP  ,                                                 00353400
.*----------------------------------------------------------------***   00353500
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00353600
                AIF   (N'&LENVAR LE 1).ZG94A    CK NUM                  00353700
&ZMS            SETC  '"LENVAR='  *KPOSA* MNOTE                         00353800
&ZMS            SETC  '&ZMS.&LENVAR"'                                   00353900
&ZMS            SETC  '&ZMS "LENVAR"'                                   00354000
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00354100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00354200
.ZG94A          ANOP  ,                                                 00354300
.*-------------------------------------------------------------------   00354400
.***AG.KXVAR17 NAME, OPT INPUT, KEYS -XVARIABLE                         00354500
&XLENVAR        SETC  'DEFINED_LENGTH'          SET DEFAULT             00354600
                AIF   (K'&LENVAR(1) LE 0).ZG94C  PARM                   00354700
&XLENVAR        SETC  '&LENVAR(1)'              SET XVARIABLE           00354800
                AIF   (N'&LENVAR GT 1).ZG94B    MULTI PARMS             00354900
&XLENVAR        SETC  '&LENVAR'   SET XVARIABLE                         00355000
.ZG94B          AIF   (K'&DATA(1) GT 0).ZG94C   KEY                     00355100
&ZMS            SETC  '"LENVAR'   *KDEPA* MNOTE                         00355200
&ZMS            SETC  '&ZMS.=&LENVAR"'                                  00355300
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00355400
&ZMS            SETC  '&ZMS '                                           00355500
&ZMS            SETC  '&ZMS "DATA"'                                     00355600
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00355700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00355800
.ZG94C          ANOP  ,                                                 00355900
&ZXLENVAR       SETC  'INPUT'     SET IN/OUTPUT                         00356000
.*-------------------------------------------------------------------   00356100
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00356200
                AIF   (K'&ZXLENVAR LE 0).ZG94R  NOT I/O                 00356300
         AIF   ('&XLENVAR' EQ 'DEFINED_LENGTH').ZG94R                   00356400
                AIF   ('&XLENVAR'(1,1) NE '(').ZG94R                    00356500
&ZCGPR          SETC  '&XLENVAR'(2,K'&XLENVAR-2)                        00356600
                AIF   ('&ZCGPR'(1,1) NE '0').ZG94P                      00356700
                AIF   (K'&ZCGPR GT 2).ZG94Q                             00356800
                AIF   ('&ZCGPR' EQ '0').ZG94Q                           00356900
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00357000
                AIF   (T'&ZCGPR NE 'N').ZG94Q   INVALID REG NAME        00357100
.ZG94P          ANOP  ,                                                 00357200
                AIF   (T'&ZCGPR NE 'N').ZG94R   NON NUMERIC             00357300
                AIF   ('&ZCGPR' LT '2').ZG94Q                           00357400
                AIF   ('&ZCGPR' LE '12').ZG94R                          00357500
.ZG94Q          ANOP  ,                                                 00357600
&ZMS            SETC  '"LENVAR='  *KGPRA* MNOTE                         00357700
&ZMS            SETC  '&ZMS.&LENVAR"'                                   00357800
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00357900
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00358000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00358100
.ZG94R          ANOP  ,                                                 00358200
.*----------------------------------------------------------------***   00358300
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00358400
                AIF   (N'&CONVERT LE 1).ZG97A   CK NUM                  00358500
&ZMS            SETC  '"CONVERT='               *KPOSA* MNOTE           00358600
&ZMS            SETC  '&ZMS.&CONVERT"'                                  00358700
&ZMS            SETC  '&ZMS "CONVERT"'                                  00358800
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00358900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00359000
.ZG97A          ANOP  ,                                                 00359100
.*-------------------------------------------------------------------   00359200
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00359300
&XCONVERT       SETC  ''          INITIALIZE XVARIABLE                  00359400
.ZG98A   AIF   ('&CONVERT(1)' NE 'NO').ZG99A                            00359500
&XCONVERT       SETC  'NO'        SET KEYWORD                           00359600
.*-------------------------------------------------------------------   00359700
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00359800
.ZG99A   AIF   ('&CONVERT(1)' NE 'YES').ZG100A                          00359900
&XCONVERT       SETC  'YES'       SET KEYWORD                           00360000
.*-------------------------------------------------------------------   00360100
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00360200
.ZG100A         AIF   (K'&XCONVERT GT 0).ZG100C  KEYWORD                00360300
                AIF   (K'&CONVERT(1) LE 0).ZG100B                       00360400
&ZMS            SETC  '"CONVERT='               *KUKWA* MNOTE           00360500
&ZMS            SETC  '&ZMS.&CONVERT"'                                  00360600
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00360700
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00360800
&ZMS            SETC  '&ZMS "NO"'                                       00360900
&ZMS            SETC  '&ZMS OR "YES".'                                  00361000
                MNOTE 8,' &ZMS '                                        00361100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00361200
.ZG100B         ANOP  ,                                                 00361300
&XCONVERT       SETC  'NO'        SET DEFAULT KEYWORD                   00361400
.ZG100C         ANOP  ,                                                 00361500
&ZXCONVERT      SETC  'INPUT'     SET IN/OUTPUT                         00361600
.*-------------------------------------------------------------------   00361700
.***AG.KKWRD06 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00361800
                AIF   (K'&DATA(1) GT 0).ZG100D  KEY                     00361900
                AIF   (K'&CONVERT(1) LE 0).ZG100D  PARM                 00362000
&ZMS            SETC  '"CONVERT'  *KDEPA* MNOTE                         00362100
&ZMS            SETC  '&ZMS.=&CONVERT"'                                 00362200
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00362300
&ZMS            SETC  '&ZMS '                                           00362400
&ZMS            SETC  '&ZMS "DATA"'                                     00362500
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00362600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00362700
.ZG100D         ANOP  ,                                                 00362800
.*----------------------------------------------------------------***   00362900
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00363000
                AIF   (N'&TYPE LE 1).ZG104A     CK NUM                  00363100
&ZMS            SETC  '"TYPE='    *KPOSA* MNOTE                         00363200
&ZMS            SETC  '&ZMS.&TYPE"'                                     00363300
&ZMS            SETC  '&ZMS "TYPE"'                                     00363400
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00363500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00363600
.ZG104A         ANOP  ,                                                 00363700
.*-------------------------------------------------------------------   00363800
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00363900
&XTYPE          SETC  ''          INITIALIZE XVARIABLE                  00364000
.ZG105A   AIF   ('&TYPE(1)' NE 'TEST').ZG106A                           00364100
&XTYPE          SETC  'TEST'      SET KEYWORD                           00364200
.*-------------------------------------------------------------------   00364300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00364400
.ZG106A   AIF   ('&TYPE(1)' NE 'NOTEST').ZG107A                         00364500
&XTYPE          SETC  'NOTEST'    SET KEYWORD                           00364600
.*-------------------------------------------------------------------   00364700
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00364800
.ZG107A         AIF   (K'&XTYPE GT 0).ZG107C    KEYWORD                 00364900
                AIF   (K'&TYPE(1) LE 0).ZG107B                          00365000
&ZMS            SETC  '"TYPE='    *KUKWA* MNOTE                         00365100
&ZMS            SETC  '&ZMS.&TYPE"'                                     00365200
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00365300
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00365400
&ZMS            SETC  '&ZMS "TEST"'                                     00365500
&ZMS            SETC  '&ZMS OR "NOTEST".'                               00365600
                MNOTE 8,' &ZMS '                                        00365700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00365800
.ZG107B         ANOP  ,                                                 00365900
&XTYPE          SETC  'TEST'      SET DEFAULT KEYWORD                   00366000
.ZG107C         ANOP  ,                                                 00366100
&ZXTYPE         SETC  'INPUT'     SET IN/OUTPUT                         00366200
.*-------------------------------------------------------------------   00366300
.***AG.KMEKY13 VALUE, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES          00366400
.ZG108          AIF   ('&XTEST' NE 'SECONDARY').ZG143                   00366500
.*-------------------------------------------------------------------   00366600
.***AG.KMEKY14 VALUE, RQD INPUT, ME KEYS -DISALLOWED KEYS               00366700
&ZCVAL          SETC ''           ERROR KEY FIELD                       00366800
.ZG108I0        AIF   (K'&PRIMLEN LE 0).ZG108I1                         00366900
&ZCVAL          SETC '&ZCVAL PRIMLEN'           DISALLOWED KEY          00367000
.ZG108I1        AIF   (K'&SECLEN LE 0).ZG108I2                          00367100
&ZCVAL          SETC '&ZCVAL SECLEN'            DISALLOWED KEY          00367200
.ZG108I2        AIF   (K'&VARLEN LE 0).ZG108I3                          00367300
&ZCVAL          SETC '&ZCVAL VARLEN'            DISALLOWED KEY          00367400
.ZG108I3        AIF   (K'&ARCHLEV LE 0).ZG108I4                         00367500
&ZCVAL          SETC '&ZCVAL ARCHLEV'           DISALLOWED KEY          00367600
.ZG108I4        AIF   (K'&DAE LE 0).ZG108I5                             00367700
&ZCVAL          SETC '&ZCVAL DAE'               DISALLOWED KEY          00367800
.ZG108I5        AIF   (K'&COMPDSC LE 0).ZG108I6                         00367900
&ZCVAL          SETC '&ZCVAL COMPDSC'           DISALLOWED KEY          00368000
.ZG108I6        AIF   (K'&PROBLEM LE 0).ZG108I7                         00368100
&ZCVAL          SETC '&ZCVAL PROBLEM'           DISALLOWED KEY          00368200
.ZG108I7        AIF   (K'&SERVLEV LE 0).ZG108I8                         00368300
&ZCVAL          SETC '&ZCVAL SERVLEV'           DISALLOWED KEY          00368400
.ZG108I8        AIF   (K'&XNOCONVERTS LE 0).ZG108I9                     00368500
&ZCVAL          SETC '&ZCVAL XNOCONVERTS'       DISALLOWED KEY          00368600
.ZG108I9        AIF   (K'&IBM LE 0).ZG108I10                            00368700
&ZCVAL          SETC '&ZCVAL IBM'               DISALLOWED KEY          00368800
.ZG108I10       AIF   (K'&PROGRAM LE 0).ZG108I11                        00368900
&ZCVAL          SETC '&ZCVAL PROGRAM'           DISALLOWED KEY          00369000
.ZG108I11       AIF   (K'&PROGLEV LE 0).ZG108I12                        00369100
&ZCVAL          SETC '&ZCVAL PROGLEV'           DISALLOWED KEY          00369200
.ZG108I12       AIF   (K'&COMPID LE 0).ZG108I13                         00369300
&ZCVAL          SETC '&ZCVAL COMPID'            DISALLOWED KEY          00369400
.ZG108I13       AIF   (K'&COMPLEV LE 0).ZG108I14                        00369500
&ZCVAL          SETC '&ZCVAL COMPLEV'           DISALLOWED KEY          00369600
.ZG108I14       AIF   (K'&PID LE 0).ZG108I15                            00369700
&ZCVAL          SETC '&ZCVAL PID'               DISALLOWED KEY          00369800
.ZG108I15       AIF   (K'&PIDLEVEL LE 0).ZG108I16                       00369900
&ZCVAL          SETC '&ZCVAL PIDLEVEL'          DISALLOWED KEY          00370000
.ZG108I16       AIF   (K'&SUBSYSTEM LE 0).ZG108I17                      00370100
&ZCVAL          SETC '&ZCVAL SUBSYSTEM'         DISALLOWED KEY          00370200
.ZG108I17       AIF   (K'&S5KEY LE 0).ZG108I18                          00370300
&ZCVAL          SETC '&ZCVAL S5KEY'             DISALLOWED KEY          00370400
.ZG108I18       AIF   (K'&INVOKE LE 0).ZG108I19                         00370500
&ZCVAL          SETC '&ZCVAL INVOKE'            DISALLOWED KEY          00370600
.ZG108I19       AIF   (K'&RETCODE LE 0).ZG108I20                        00370700
&ZCVAL          SETC '&ZCVAL RETCODE'           DISALLOWED KEY          00370800
.ZG108I20       AIF   (K'&RSNCODE LE 0).ZG108I21                        00370900
&ZCVAL          SETC '&ZCVAL RSNCODE'           DISALLOWED KEY          00371000
.ZG108I21       AIF   (K'&ZCVAL LE 0).ZG108J    KEY                     00371100
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00371200
&ZMS            SETC  '"SECONDARY'              *KMEIA* MNOTE           00371300
&ZMS            SETC  '&ZMS."'                                          00371400
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00371500
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00371600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00371700
.ZG108J         ANOP  ,                                                 00371800
.*----------------------------------------------------------------***   00371900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00372000
                AIF   (N'&SR LE 1).ZG110A       CK NUM                  00372100
&ZMS            SETC  '"SR='      *KPOSA* MNOTE                         00372200
&ZMS            SETC  '&ZMS.&SR"'                                       00372300
&ZMS            SETC  '&ZMS "SR"'                                       00372400
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00372500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00372600
.ZG110A         ANOP  ,                                                 00372700
.*-------------------------------------------------------------------   00372800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00372900
&ZXSR           SETC  'INPUT'     SET IN/OUTPUT                         00373000
&XSR            SETC  'SR_IN_R1'                                        00373100
                AIF   (K'&SR(1) LE 0).ZG110B    PARM                    00373200
&XSR            SETC  '&SR(1)'    SET XVARIABLE                         00373300
                AIF   (N'&SR GT 1).ZG110B       MULTI PARMS             00373400
&XSR            SETC  '&SR'       SET XVARIABLE                         00373500
.ZG110B         ANOP  ,                                                 00373600
.*-------------------------------------------------------------------   00373700
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00373800
                AIF   (K'&ZXSR LE 0).ZG110R     NOT I/O                 00373900
         AIF   ('&XSR' EQ 'SR_IN_R1').ZG110R                            00374000
                AIF   ('&XSR'(1,1) NE '(').ZG110R                       00374100
&ZCGPR          SETC  '&XSR'(2,K'&XSR-2)                                00374200
                AIF   ('&ZCGPR'(1,1) NE '0').ZG110P                     00374300
                AIF   (K'&ZCGPR GT 2).ZG110Q                            00374400
                AIF   ('&ZCGPR' EQ '0').ZG110Q                          00374500
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00374600
                AIF   (T'&ZCGPR NE 'N').ZG110Q  INVALID REG NAME        00374700
.ZG110P         ANOP  ,                                                 00374800
                AIF   (T'&ZCGPR NE 'N').ZG110R  NON NUMERIC             00374900
                AIF   ('&ZCGPR' LT '2').ZG110Q                          00375000
                AIF   ('&ZCGPR' LE '12').ZG110R                         00375100
.ZG110Q         ANOP  ,                                                 00375200
&ZMS            SETC  '"SR='      *KGPRA* MNOTE                         00375300
&ZMS            SETC  '&ZMS.&SR"'                                       00375400
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00375500
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00375600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00375700
.ZG110R         ANOP  ,                                                 00375800
.*----------------------------------------------------------------***   00375900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00376000
                AIF   (N'&SDBSTRING LE 1).ZG113A  CK NUM                00376100
&ZMS            SETC  '"SDBSTRING='             *KPOSA* MNOTE           00376200
&ZMS            SETC  '&ZMS.&SDBSTRING"'                                00376300
&ZMS            SETC  '&ZMS "SDBSTRING"'                                00376400
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00376500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00376600
.ZG113A         ANOP  ,                                                 00376700
.*-------------------------------------------------------------------   00376800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00376900
&ZXSDBSTRING    SETC  'INPUT'     SET IN/OUTPUT                         00377000
&XSDBSTRING     SETC  'NO_SDB_STRING'                                   00377100
                AIF   (K'&SDBSTRING(1) LE 0).ZG113B  PARM               00377200
&XSDBSTRING     SETC  '&SDBSTRING(1)'           SET XVARIABLE           00377300
                AIF   (N'&SDBSTRING GT 1).ZG113B  MULTI PARMS           00377400
&XSDBSTRING     SETC  '&SDBSTRING'              SET XVARIABLE           00377500
.ZG113B         ANOP  ,                                                 00377600
.*-------------------------------------------------------------------   00377700
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00377800
                AIF   (K'&ZXSDBSTRING LE 0).ZG113R  NOT I/O             00377900
         AIF   ('&XSDBSTRING' EQ 'NO_SDB_STRING').ZG113R                00378000
                AIF   ('&XSDBSTRING'(1,1) NE '(').ZG113R                00378100
&ZCGPR          SETC  '&XSDBSTRING'(2,K'&XSDBSTRING-2)                  00378200
                AIF   ('&ZCGPR'(1,1) NE '0').ZG113P                     00378300
                AIF   (K'&ZCGPR GT 2).ZG113Q                            00378400
                AIF   ('&ZCGPR' EQ '0').ZG113Q                          00378500
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00378600
                AIF   (T'&ZCGPR NE 'N').ZG113Q  INVALID REG NAME        00378700
.ZG113P         ANOP  ,                                                 00378800
                AIF   (T'&ZCGPR NE 'N').ZG113R  NON NUMERIC             00378900
                AIF   ('&ZCGPR' LT '2').ZG113Q                          00379000
                AIF   ('&ZCGPR' LE '12').ZG113R                         00379100
.ZG113Q         ANOP  ,                                                 00379200
&ZMS            SETC  '"SDBSTRING='             *KGPRA* MNOTE           00379300
&ZMS            SETC  '&ZMS.&SDBSTRING"'                                00379400
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00379500
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00379600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00379700
.ZG113R         ANOP  ,                                                 00379800
.*----------------------------------------------------------------***   00379900
.***AG.KXVAR05 VALUE, OPT INPUT, KEYS -XVARIABLE KEY                    00380000
                AIF   (N'&SDBLEN LE 1).ZG115A   CK NUM                  00380100
&ZMS            SETC  '"SDBLEN='  *KPOSA* MNOTE                         00380200
&ZMS            SETC  '&ZMS.&SDBLEN"'                                   00380300
&ZMS            SETC  '&ZMS "SDBLEN"'                                   00380400
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00380500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00380600
.ZG115A         ANOP  ,                                                 00380700
.*-------------------------------------------------------------------   00380800
.***AG.KXVAR17 VALUE, OPT INPUT, KEYS -XVARIABLE                        00380900
&XSDBLEN        SETC  'DEFINED_LENGTH'          SET DEFAULT             00381000
                AIF   (K'&SDBLEN(1) LE 0).ZG115C  PARM                  00381100
&XSDBLEN        SETC  '&SDBLEN(1)'              SET XVARIABLE           00381200
                AIF   (N'&SDBLEN GT 1).ZG115B   MULTI PARMS             00381300
&XSDBLEN        SETC  '&SDBLEN'   SET XVARIABLE                         00381400
.ZG115B         AIF   (K'&SDBSTRING(1) GT 0).ZG115C  KEY                00381500
&ZMS            SETC  '"SDBLEN'   *KDEPA* MNOTE                         00381600
&ZMS            SETC  '&ZMS.=&SDBLEN"'                                  00381700
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00381800
&ZMS            SETC  '&ZMS '                                           00381900
&ZMS            SETC  '&ZMS "SDBSTRING"'                                00382000
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00382100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00382200
.ZG115C         ANOP  ,                                                 00382300
&ZXSDBLEN       SETC  'INPUT'     SET IN/OUTPUT                         00382400
.*-------------------------------------------------------------------   00382500
.***AG.KCK02 VALUE, OPT INPUT, KEYS -GPR OUT OF RANGE                   00382600
                AIF   (K'&ZXSDBLEN LE 0).ZG115R  NOT I/O                00382700
         AIF   ('&XSDBLEN' EQ 'DEFINED_LENGTH').ZG115R                  00382800
                AIF   ('&XSDBLEN'(1,1) NE '(').ZG115R                   00382900
&ZCGPR          SETC  '&XSDBLEN'(2,K'&XSDBLEN-2)                        00383000
                AIF   ('&ZCGPR'(1,1) NE '0').ZG115P                     00383100
                AIF   (K'&ZCGPR GT 2).ZG115Q                            00383200
                AIF   ('&ZCGPR' EQ '0').ZG115Q                          00383300
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00383400
                AIF   (T'&ZCGPR NE 'N').ZG115Q  INVALID REG NAME        00383500
.ZG115P         ANOP  ,                                                 00383600
                AIF   (T'&ZCGPR NE 'N').ZG115R  NON NUMERIC             00383700
                AIF   ('&ZCGPR' LT '2').ZG115Q                          00383800
                AIF   ('&ZCGPR' LE '12').ZG115R                         00383900
.ZG115Q         ANOP  ,                                                 00384000
&ZMS            SETC  '"SDBLEN='  *KGPRA* MNOTE                         00384100
&ZMS            SETC  '&ZMS.&SDBLEN"'                                   00384200
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00384300
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00384400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00384500
.ZG115R         ANOP  ,                                                 00384600
.*-------------------------------------------------------------------   00384700
.***AG.KCK07 VALUE, OPT INPUT, KEYS -KMG RANGE                          00384800
                AIF   (K'&ZXSDBLEN LE 0).ZG115T  NOT I/O                00384900
                AIF   ('&XSDBLEN' EQ 'DEFINED_LENGTH').ZG115T           00385000
                AIF   ('&XSDBLEN'(1,1) EQ '(').ZG115T  IN GPR           00385100
                AIF   (T'&XSDBLEN NE 'N').ZG115S  NUMERIC ERR           00385200
&ZASIZ          SETA  &XSDBLEN    CONVERT                               00385300
                AIF   (&ZASIZ LT 1).ZG115S      TOO LOW                 00385400
                AIF   (&ZASIZ LE 256).ZG115T    NOT HIGH                00385500
.ZG115S         ANOP  ,                                                 00385600
&ZXSDBLEN       SETC  ''          RESET IN/OUTPUT                       00385700
&ZMS            SETC  '"SDBLEN='  *KRNGA* MNOTE                         00385800
&ZMS            SETC  '&ZMS.&SDBLEN"'                                   00385900
&ZMS            SETC  '&ZMS THE RANGE IS "1-256"'                       00386000
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00386100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00386200
.ZG115T         ANOP  ,                                                 00386300
.*----------------------------------------------------------------***   00386400
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00386500
                AIF   (N'&SDBLENVAR LE 1).ZG118A  CK NUM                00386600
&ZMS            SETC  '"SDBLENVAR='             *KPOSA* MNOTE           00386700
&ZMS            SETC  '&ZMS.&SDBLENVAR"'                                00386800
&ZMS            SETC  '&ZMS "SDBLENVAR"'                                00386900
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00387000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00387100
.ZG118A         ANOP  ,                                                 00387200
.*-------------------------------------------------------------------   00387300
.***AG.KXVAR17 NAME, OPT INPUT, KEYS -XVARIABLE                         00387400
&XSDBLENVAR     SETC  'DEFINED_LENGTH'          SET DEFAULT             00387500
                AIF   (K'&SDBLENVAR(1) LE 0).ZG118C  PARM               00387600
&XSDBLENVAR     SETC  '&SDBLENVAR(1)'           SET XVARIABLE           00387700
                AIF   (N'&SDBLENVAR GT 1).ZG118B  MULTI PARMS           00387800
&XSDBLENVAR     SETC  '&SDBLENVAR'              SET XVARIABLE           00387900
.ZG118B         AIF   (K'&SDBSTRING(1) GT 0).ZG118C  KEY                00388000
&ZMS            SETC  '"SDBLENVAR'              *KDEPA* MNOTE           00388100
&ZMS            SETC  '&ZMS.=&SDBLENVAR"'                               00388200
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00388300
&ZMS            SETC  '&ZMS '                                           00388400
&ZMS            SETC  '&ZMS "SDBSTRING"'                                00388500
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00388600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00388700
.ZG118C         ANOP  ,                                                 00388800
&ZXSDBLENVAR    SETC  'INPUT'     SET IN/OUTPUT                         00388900
.*-------------------------------------------------------------------   00389000
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00389100
                AIF   (K'&ZXSDBLENVAR LE 0).ZG118R  NOT I/O             00389200
         AIF   ('&XSDBLENVAR' EQ 'DEFINED_LENGTH').ZG118R               00389300
                AIF   ('&XSDBLENVAR'(1,1) NE '(').ZG118R                00389400
&ZCGPR          SETC  '&XSDBLENVAR'(2,K'&XSDBLENVAR-2)                  00389500
                AIF   ('&ZCGPR'(1,1) NE '0').ZG118P                     00389600
                AIF   (K'&ZCGPR GT 2).ZG118Q                            00389700
                AIF   ('&ZCGPR' EQ '0').ZG118Q                          00389800
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00389900
                AIF   (T'&ZCGPR NE 'N').ZG118Q  INVALID REG NAME        00390000
.ZG118P         ANOP  ,                                                 00390100
                AIF   (T'&ZCGPR NE 'N').ZG118R  NON NUMERIC             00390200
                AIF   ('&ZCGPR' LT '2').ZG118Q                          00390300
                AIF   ('&ZCGPR' LE '12').ZG118R                         00390400
.ZG118Q         ANOP  ,                                                 00390500
&ZMS            SETC  '"SDBLENVAR='             *KGPRA* MNOTE           00390600
&ZMS            SETC  '&ZMS.&SDBLENVAR"'                                00390700
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00390800
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00390900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00391000
.ZG118R         ANOP  ,                                                 00391100
.*----------------------------------------------------------------***   00391200
.***AG.KXVAR05 VALUE, OPT INPUT, KEYS -XVARIABLE KEY                    00391300
                AIF   (N'&SDBKEY LE 1).ZG122A   CK NUM                  00391400
&ZMS            SETC  '"SDBKEY='  *KPOSA* MNOTE                         00391500
&ZMS            SETC  '&ZMS.&SDBKEY"'                                   00391600
&ZMS            SETC  '&ZMS "SDBKEY"'                                   00391700
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00391800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00391900
.ZG122A         ANOP  ,                                                 00392000
.*-------------------------------------------------------------------   00392100
.***AG.KXVAR13 VALUE, OPT INPUT, KEYS -XVARIABLE                        00392200
&ZXSDBKEY       SETC  'INPUT'     SET IN/OUTPUT                         00392300
&XSDBKEY        SETC  'NO_SDBKEY'                                       00392400
                AIF   (K'&SDBKEY(1) LE 0).ZG122B  PARM                  00392500
&XSDBKEY        SETC  '&SDBKEY(1)'              SET XVARIABLE           00392600
                AIF   (N'&SDBKEY GT 1).ZG122B   MULTI PARMS             00392700
&XSDBKEY        SETC  '&SDBKEY'   SET XVARIABLE                         00392800
.ZG122B         ANOP  ,                                                 00392900
.*-------------------------------------------------------------------   00393000
.***AG.KCK01 VALUE, OPT INPUT, KEYS -GPR NOT ALLOWED                    00393100
                AIF   (K'&ZXSDBKEY LE 0).ZG122P  NOT I/O                00393200
                AIF   ('&XSDBKEY' EQ 'NO_SDBKEY').ZG122P                00393300
                AIF   ('&XSDBKEY'(1,1) NE '(').ZG122P                   00393400
&ZXSDBKEY       SETC  ''          RESET IN/OUTPUT                       00393500
&ZMS            SETC  '"SDBKEY='  *KGPRA* MNOTE                         00393600
&ZMS            SETC  '&ZMS.&SDBKEY"'                                   00393700
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00393800
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00393900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00394000
.ZG122P         ANOP  ,                                                 00394100
.*-------------------------------------------------------------------   00394200
.***AG.KCK03 VALUE, OPT INPUT, KEYS -CHARACTER LENGTH                   00394300
                AIF   (K'&ZXSDBKEY LE 0).ZG122S  NOT I/O                00394400
                AIF   ('&XSDBKEY' EQ 'NO_SDBKEY').ZG122S                00394500
                AIF   (K'&XSDBKEY LE 256).ZG122S  LNG OK                00394600
&ZXSDBKEY       SETC  ''          RESET IN/OUTPUT                       00394700
&ZMS            SETC  '"SDBKEY='  *KLNGA* MNOTE                         00394800
&ZMS            SETC  '&ZMS.&SDBKEY"'                                   00394900
&ZMS            SETC  '&ZMS ARGUMENT 1 EXCEEDS THE MAXIMUM'             00395000
                MNOTE 8,' &ZMS LENGTH OF 256 CHARACTERS.'               00395100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00395200
.ZG122S         ANOP  ,                                                 00395300
.*----------------------------------------------------------------***   00395400
.***AG.KXVAR05 NAME, OPT RQD INPUT, KEYS -XVARIABLE KEY                 00395500
                AIF   (N'&DATA LE 1).ZG124A     CK NUM                  00395600
&ZMS            SETC  '"DATA='    *KPOSA* MNOTE                         00395700
&ZMS            SETC  '&ZMS.&DATA"'                                     00395800
&ZMS            SETC  '&ZMS "DATA"'                                     00395900
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00396000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00396100
.ZG124A         ANOP  ,                                                 00396200
.*-------------------------------------------------------------------   00396300
.***AG.KXVAR09 NAME, OPT RQD INPUT, KEYS -XVARIABLE                     00396400
&ZXDATA         SETC  'INPUT'     SET IN/OUTPUT                         00396500
&XDATA          SETC  '&DATA(1)'  SET XVARIABLE                         00396600
                AIF   (N'&DATA GT 1).ZG124B     MULTI PARMS             00396700
&XDATA          SETC  '&DATA'     SET XVARIABLE                         00396800
.ZG124B         AIF   (K'&SDBKEY(1) GT 0).ZG124C  KEY                   00396900
                AIF   (K'&DATA(1) LE 0).ZG124D  PARM                    00397000
&ZMS            SETC  '"DATA'     *KDEPA* MNOTE                         00397100
&ZMS            SETC  '&ZMS.=&DATA"'                                    00397200
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00397300
&ZMS            SETC  '&ZMS '                                           00397400
&ZMS            SETC  '&ZMS "SDBKEY"'                                   00397500
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00397600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00397700
                AGO   .ZG124E                                           00397800
.*                                                                      00397900
.ZG124C         AIF   (K'&DATA(1) GT 0).ZG124E  PARM                    00398000
&ZXDATA         SETC  ''          RESET IN/OUTPUT                       00398100
&ZMS            SETC  'WHEN "SDBKEY" IS SPECIFIED'  *KRQDA*             00398200
&ZMS            SETC  '&ZMS , "DATA" KEY AND ITS'                       00398300
                MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                  00398400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00398500
.ZG124D         ANOP  ,                                                 00398600
&XDATA          SETC  '0'         SET DEFAULT                           00398700
.ZG124E         ANOP  ,                                                 00398800
.*-------------------------------------------------------------------   00398900
.***AG.KCK02 NAME, OPT RQD INPUT, KEYS -GPR OUT OF RANGE                00399000
                AIF   (K'&ZXDATA LE 0).ZG124R   NOT I/O                 00399100
                AIF   ('&XDATA'(1,1) NE '(').ZG124R                     00399200
&ZCGPR          SETC  '&XDATA'(2,K'&XDATA-2)                            00399300
                AIF   ('&ZCGPR'(1,1) NE '0').ZG124P                     00399400
                AIF   (K'&ZCGPR GT 2).ZG124Q                            00399500
                AIF   ('&ZCGPR' EQ '0').ZG124Q                          00399600
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00399700
                AIF   (T'&ZCGPR NE 'N').ZG124Q  INVALID REG NAME        00399800
.ZG124P         ANOP  ,                                                 00399900
                AIF   (T'&ZCGPR NE 'N').ZG124R  NON NUMERIC             00400000
                AIF   ('&ZCGPR' LT '2').ZG124Q                          00400100
                AIF   ('&ZCGPR' LE '12').ZG124R                         00400200
.ZG124Q         ANOP  ,                                                 00400300
&ZMS            SETC  '"DATA='    *KGPRA* MNOTE                         00400400
&ZMS            SETC  '&ZMS.&DATA"'                                     00400500
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00400600
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00400700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00400800
.ZG124R         ANOP  ,                                                 00400900
.*----------------------------------------------------------------***   00401000
.***AG.KXVAR05 VALUE, OPT INPUT, KEYS -XVARIABLE KEY                    00401100
                AIF   (N'&LEN LE 1).ZG126A      CK NUM                  00401200
&ZMS            SETC  '"LEN='     *KPOSA* MNOTE                         00401300
&ZMS            SETC  '&ZMS.&LEN"'                                      00401400
&ZMS            SETC  '&ZMS "LEN"'                                      00401500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00401600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00401700
.ZG126A         ANOP  ,                                                 00401800
.*-------------------------------------------------------------------   00401900
.***AG.KXVAR17 VALUE, OPT INPUT, KEYS -XVARIABLE                        00402000
&XLEN           SETC  'DEFINED_LENGTH'          SET DEFAULT             00402100
                AIF   (K'&LEN(1) LE 0).ZG126C   PARM                    00402200
&XLEN           SETC  '&LEN(1)'   SET XVARIABLE                         00402300
                AIF   (N'&LEN GT 1).ZG126B      MULTI PARMS             00402400
&XLEN           SETC  '&LEN'      SET XVARIABLE                         00402500
.ZG126B         AIF   (K'&DATA(1) GT 0).ZG126C  KEY                     00402600
&ZMS            SETC  '"LEN'      *KDEPA* MNOTE                         00402700
&ZMS            SETC  '&ZMS.=&LEN"'                                     00402800
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00402900
&ZMS            SETC  '&ZMS '                                           00403000
&ZMS            SETC  '&ZMS "DATA"'                                     00403100
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00403200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00403300
.ZG126C         ANOP  ,                                                 00403400
&ZXLEN          SETC  'INPUT'     SET IN/OUTPUT                         00403500
.*-------------------------------------------------------------------   00403600
.***AG.KCK02 VALUE, OPT INPUT, KEYS -GPR OUT OF RANGE                   00403700
                AIF   (K'&ZXLEN LE 0).ZG126R    NOT I/O                 00403800
         AIF   ('&XLEN' EQ 'DEFINED_LENGTH').ZG126R                     00403900
                AIF   ('&XLEN'(1,1) NE '(').ZG126R                      00404000
&ZCGPR          SETC  '&XLEN'(2,K'&XLEN-2)                              00404100
                AIF   ('&ZCGPR'(1,1) NE '0').ZG126P                     00404200
                AIF   (K'&ZCGPR GT 2).ZG126Q                            00404300
                AIF   ('&ZCGPR' EQ '0').ZG126Q                          00404400
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00404500
                AIF   (T'&ZCGPR NE 'N').ZG126Q  INVALID REG NAME        00404600
.ZG126P         ANOP  ,                                                 00404700
                AIF   (T'&ZCGPR NE 'N').ZG126R  NON NUMERIC             00404800
                AIF   ('&ZCGPR' LT '2').ZG126Q                          00404900
                AIF   ('&ZCGPR' LE '12').ZG126R                         00405000
.ZG126Q         ANOP  ,                                                 00405100
&ZMS            SETC  '"LEN='     *KGPRA* MNOTE                         00405200
&ZMS            SETC  '&ZMS.&LEN"'                                      00405300
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00405400
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00405500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00405600
.ZG126R         ANOP  ,                                                 00405700
.*-------------------------------------------------------------------   00405800
.***AG.KCK07 VALUE, OPT INPUT, KEYS -KMG RANGE                          00405900
                AIF   (K'&ZXLEN LE 0).ZG126T    NOT I/O                 00406000
                AIF   ('&XLEN' EQ 'DEFINED_LENGTH').ZG126T              00406100
                AIF   ('&XLEN'(1,1) EQ '(').ZG126T  IN GPR              00406200
                AIF   (T'&XLEN NE 'N').ZG126S   NUMERIC ERR             00406300
&ZASIZ          SETA  &XLEN       CONVERT                               00406400
                AIF   (&ZASIZ LT 1).ZG126S      TOO LOW                 00406500
                AIF   (&ZASIZ LE 13).ZG126T     NOT HIGH                00406600
.ZG126S         ANOP  ,                                                 00406700
&ZXLEN          SETC  ''          RESET IN/OUTPUT                       00406800
&ZMS            SETC  '"LEN='     *KRNGA* MNOTE                         00406900
&ZMS            SETC  '&ZMS.&LEN"'                                      00407000
&ZMS            SETC  '&ZMS THE RANGE IS "1-13"'                        00407100
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00407200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00407300
.ZG126T         ANOP  ,                                                 00407400
.*----------------------------------------------------------------***   00407500
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00407600
                AIF   (N'&LENVAR LE 1).ZG129A   CK NUM                  00407700
&ZMS            SETC  '"LENVAR='  *KPOSA* MNOTE                         00407800
&ZMS            SETC  '&ZMS.&LENVAR"'                                   00407900
&ZMS            SETC  '&ZMS "LENVAR"'                                   00408000
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00408100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00408200
.ZG129A         ANOP  ,                                                 00408300
.*-------------------------------------------------------------------   00408400
.***AG.KXVAR17 NAME, OPT INPUT, KEYS -XVARIABLE                         00408500
&XLENVAR        SETC  'DEFINED_LENGTH'          SET DEFAULT             00408600
                AIF   (K'&LENVAR(1) LE 0).ZG129C  PARM                  00408700
&XLENVAR        SETC  '&LENVAR(1)'              SET XVARIABLE           00408800
                AIF   (N'&LENVAR GT 1).ZG129B   MULTI PARMS             00408900
&XLENVAR        SETC  '&LENVAR'   SET XVARIABLE                         00409000
.ZG129B         AIF   (K'&DATA(1) GT 0).ZG129C  KEY                     00409100
&ZMS            SETC  '"LENVAR'   *KDEPA* MNOTE                         00409200
&ZMS            SETC  '&ZMS.=&LENVAR"'                                  00409300
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00409400
&ZMS            SETC  '&ZMS '                                           00409500
&ZMS            SETC  '&ZMS "DATA"'                                     00409600
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00409700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00409800
.ZG129C         ANOP  ,                                                 00409900
&ZXLENVAR       SETC  'INPUT'     SET IN/OUTPUT                         00410000
.*-------------------------------------------------------------------   00410100
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00410200
                AIF   (K'&ZXLENVAR LE 0).ZG129R  NOT I/O                00410300
         AIF   ('&XLENVAR' EQ 'DEFINED_LENGTH').ZG129R                  00410400
                AIF   ('&XLENVAR'(1,1) NE '(').ZG129R                   00410500
&ZCGPR          SETC  '&XLENVAR'(2,K'&XLENVAR-2)                        00410600
                AIF   ('&ZCGPR'(1,1) NE '0').ZG129P                     00410700
                AIF   (K'&ZCGPR GT 2).ZG129Q                            00410800
                AIF   ('&ZCGPR' EQ '0').ZG129Q                          00410900
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00411000
                AIF   (T'&ZCGPR NE 'N').ZG129Q  INVALID REG NAME        00411100
.ZG129P         ANOP  ,                                                 00411200
                AIF   (T'&ZCGPR NE 'N').ZG129R  NON NUMERIC             00411300
                AIF   ('&ZCGPR' LT '2').ZG129Q                          00411400
                AIF   ('&ZCGPR' LE '12').ZG129R                         00411500
.ZG129Q         ANOP  ,                                                 00411600
&ZMS            SETC  '"LENVAR='  *KGPRA* MNOTE                         00411700
&ZMS            SETC  '&ZMS.&LENVAR"'                                   00411800
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00411900
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00412000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00412100
.ZG129R         ANOP  ,                                                 00412200
.*----------------------------------------------------------------***   00412300
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00412400
                AIF   (N'&CONVERT LE 1).ZG132A  CK NUM                  00412500
&ZMS            SETC  '"CONVERT='               *KPOSA* MNOTE           00412600
&ZMS            SETC  '&ZMS.&CONVERT"'                                  00412700
&ZMS            SETC  '&ZMS "CONVERT"'                                  00412800
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00412900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00413000
.ZG132A         ANOP  ,                                                 00413100
.*-------------------------------------------------------------------   00413200
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00413300
&XCONVERT       SETC  ''          INITIALIZE XVARIABLE                  00413400
.ZG133A   AIF   ('&CONVERT(1)' NE 'NO').ZG134A                          00413500
&XCONVERT       SETC  'NO'        SET KEYWORD                           00413600
.*-------------------------------------------------------------------   00413700
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00413800
.ZG134A   AIF   ('&CONVERT(1)' NE 'YES').ZG135A                         00413900
&XCONVERT       SETC  'YES'       SET KEYWORD                           00414000
.*-------------------------------------------------------------------   00414100
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00414200
.ZG135A         AIF   (K'&XCONVERT GT 0).ZG135C  KEYWORD                00414300
                AIF   (K'&CONVERT(1) LE 0).ZG135B                       00414400
&ZMS            SETC  '"CONVERT='               *KUKWA* MNOTE           00414500
&ZMS            SETC  '&ZMS.&CONVERT"'                                  00414600
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00414700
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00414800
&ZMS            SETC  '&ZMS "NO"'                                       00414900
&ZMS            SETC  '&ZMS OR "YES".'                                  00415000
                MNOTE 8,' &ZMS '                                        00415100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00415200
.ZG135B         ANOP  ,                                                 00415300
&XCONVERT       SETC  'NO'        SET DEFAULT KEYWORD                   00415400
.ZG135C         ANOP  ,                                                 00415500
&ZXCONVERT      SETC  'INPUT'     SET IN/OUTPUT                         00415600
.*-------------------------------------------------------------------   00415700
.***AG.KKWRD06 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00415800
                AIF   (K'&DATA(1) GT 0).ZG135D  KEY                     00415900
                AIF   (K'&CONVERT(1) LE 0).ZG135D  PARM                 00416000
&ZMS            SETC  '"CONVERT'  *KDEPA* MNOTE                         00416100
&ZMS            SETC  '&ZMS.=&CONVERT"'                                 00416200
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00416300
&ZMS            SETC  '&ZMS '                                           00416400
&ZMS            SETC  '&ZMS "DATA"'                                     00416500
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00416600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00416700
.ZG135D         ANOP  ,                                                 00416800
.*----------------------------------------------------------------***   00416900
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00417000
                AIF   (N'&TYPE LE 1).ZG139A     CK NUM                  00417100
&ZMS            SETC  '"TYPE='    *KPOSA* MNOTE                         00417200
&ZMS            SETC  '&ZMS.&TYPE"'                                     00417300
&ZMS            SETC  '&ZMS "TYPE"'                                     00417400
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00417500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00417600
.ZG139A         ANOP  ,                                                 00417700
.*-------------------------------------------------------------------   00417800
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00417900
&XTYPE          SETC  ''          INITIALIZE XVARIABLE                  00418000
.ZG140A   AIF   ('&TYPE(1)' NE 'TEST').ZG141A                           00418100
&XTYPE          SETC  'TEST'      SET KEYWORD                           00418200
.*-------------------------------------------------------------------   00418300
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00418400
.ZG141A   AIF   ('&TYPE(1)' NE 'NOTEST').ZG142A                         00418500
&XTYPE          SETC  'NOTEST'    SET KEYWORD                           00418600
.*-------------------------------------------------------------------   00418700
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00418800
.ZG142A         AIF   (K'&XTYPE GT 0).ZG142C    KEYWORD                 00418900
                AIF   (K'&TYPE(1) LE 0).ZG142B                          00419000
&ZMS            SETC  '"TYPE='    *KUKWA* MNOTE                         00419100
&ZMS            SETC  '&ZMS.&TYPE"'                                     00419200
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00419300
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00419400
&ZMS            SETC  '&ZMS "TEST"'                                     00419500
&ZMS            SETC  '&ZMS OR "NOTEST".'                               00419600
                MNOTE 8,' &ZMS '                                        00419700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00419800
.ZG142B         ANOP  ,                                                 00419900
&XTYPE          SETC  'TEST'      SET DEFAULT KEYWORD                   00420000
.ZG142C         ANOP  ,                                                 00420100
&ZXTYPE         SETC  'INPUT'     SET IN/OUTPUT                         00420200
.*-------------------------------------------------------------------   00420300
.***AG.KMEKY13 VALUE, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES          00420400
.ZG143          AIF   ('&XTEST' NE 'VARIABLE').ZG164                    00420500
.*-------------------------------------------------------------------   00420600
.***AG.KMEKY14 VALUE, RQD INPUT, ME KEYS -DISALLOWED KEYS               00420700
&ZCVAL          SETC ''           ERROR KEY FIELD                       00420800
.ZG143I0        AIF   (K'&PRIMLEN LE 0).ZG143I1                         00420900
&ZCVAL          SETC '&ZCVAL PRIMLEN'           DISALLOWED KEY          00421000
.ZG143I1        AIF   (K'&SECLEN LE 0).ZG143I2                          00421100
&ZCVAL          SETC '&ZCVAL SECLEN'            DISALLOWED KEY          00421200
.ZG143I2        AIF   (K'&VARLEN LE 0).ZG143I3                          00421300
&ZCVAL          SETC '&ZCVAL VARLEN'            DISALLOWED KEY          00421400
.ZG143I3        AIF   (K'&ARCHLEV LE 0).ZG143I4                         00421500
&ZCVAL          SETC '&ZCVAL ARCHLEV'           DISALLOWED KEY          00421600
.ZG143I4        AIF   (K'&DAE LE 0).ZG143I5                             00421700
&ZCVAL          SETC '&ZCVAL DAE'               DISALLOWED KEY          00421800
.ZG143I5        AIF   (K'&COMPDSC LE 0).ZG143I6                         00421900
&ZCVAL          SETC '&ZCVAL COMPDSC'           DISALLOWED KEY          00422000
.ZG143I6        AIF   (K'&PROBLEM LE 0).ZG143I7                         00422100
&ZCVAL          SETC '&ZCVAL PROBLEM'           DISALLOWED KEY          00422200
.ZG143I7        AIF   (K'&SERVLEV LE 0).ZG143I8                         00422300
&ZCVAL          SETC '&ZCVAL SERVLEV'           DISALLOWED KEY          00422400
.ZG143I8        AIF   (K'&XNOCONVERTS LE 0).ZG143I9                     00422500
&ZCVAL          SETC '&ZCVAL XNOCONVERTS'       DISALLOWED KEY          00422600
.ZG143I9        AIF   (K'&IBM LE 0).ZG143I10                            00422700
&ZCVAL          SETC '&ZCVAL IBM'               DISALLOWED KEY          00422800
.ZG143I10       AIF   (K'&PROGRAM LE 0).ZG143I11                        00422900
&ZCVAL          SETC '&ZCVAL PROGRAM'           DISALLOWED KEY          00423000
.ZG143I11       AIF   (K'&PROGLEV LE 0).ZG143I12                        00423100
&ZCVAL          SETC '&ZCVAL PROGLEV'           DISALLOWED KEY          00423200
.ZG143I12       AIF   (K'&COMPID LE 0).ZG143I13                         00423300
&ZCVAL          SETC '&ZCVAL COMPID'            DISALLOWED KEY          00423400
.ZG143I13       AIF   (K'&COMPLEV LE 0).ZG143I14                        00423500
&ZCVAL          SETC '&ZCVAL COMPLEV'           DISALLOWED KEY          00423600
.ZG143I14       AIF   (K'&PID LE 0).ZG143I15                            00423700
&ZCVAL          SETC '&ZCVAL PID'               DISALLOWED KEY          00423800
.ZG143I15       AIF   (K'&PIDLEVEL LE 0).ZG143I16                       00423900
&ZCVAL          SETC '&ZCVAL PIDLEVEL'          DISALLOWED KEY          00424000
.ZG143I16       AIF   (K'&SUBSYSTEM LE 0).ZG143I17                      00424100
&ZCVAL          SETC '&ZCVAL SUBSYSTEM'         DISALLOWED KEY          00424200
.ZG143I17       AIF   (K'&SDBSTRING LE 0).ZG143I18                      00424300
&ZCVAL          SETC '&ZCVAL SDBSTRING'         DISALLOWED KEY          00424400
.ZG143I18       AIF   (K'&SDBLEN LE 0).ZG143I19                         00424500
&ZCVAL          SETC '&ZCVAL SDBLEN'            DISALLOWED KEY          00424600
.ZG143I19       AIF   (K'&SDBLENVAR LE 0).ZG143I20                      00424700
&ZCVAL          SETC '&ZCVAL SDBLENVAR'         DISALLOWED KEY          00424800
.ZG143I20       AIF   (K'&SDBKEY LE 0).ZG143I21                         00424900
&ZCVAL          SETC '&ZCVAL SDBKEY'            DISALLOWED KEY          00425000
.ZG143I21       AIF   (K'&CONVERT LE 0).ZG143I22                        00425100
&ZCVAL          SETC '&ZCVAL CONVERT'           DISALLOWED KEY          00425200
.ZG143I22       AIF   (K'&INVOKE LE 0).ZG143I23                         00425300
&ZCVAL          SETC '&ZCVAL INVOKE'            DISALLOWED KEY          00425400
.ZG143I23       AIF   (K'&RETCODE LE 0).ZG143I24                        00425500
&ZCVAL          SETC '&ZCVAL RETCODE'           DISALLOWED KEY          00425600
.ZG143I24       AIF   (K'&RSNCODE LE 0).ZG143I25                        00425700
&ZCVAL          SETC '&ZCVAL RSNCODE'           DISALLOWED KEY          00425800
.ZG143I25       AIF   (K'&ZCVAL LE 0).ZG143J    KEY                     00425900
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00426000
                AIF  (K'&ZCVAL LE 160).ZG143K                           00426100
&ZCVAL          SETC '&ZCVAL'(1,160)                                    00426200
&ZCVAL          SETC '&ZCVAL....'                                       00426300
.ZG143K         ANOP                                                    00426400
&ZMS            SETC  '"VARIABLE'               *KMEIA* MNOTE           00426500
&ZMS            SETC  '&ZMS."'                                          00426600
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00426700
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00426800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00426900
.ZG143J         ANOP  ,                                                 00427000
.*----------------------------------------------------------------***   00427100
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00427200
                AIF   (N'&SR LE 1).ZG145A       CK NUM                  00427300
&ZMS            SETC  '"SR='      *KPOSA* MNOTE                         00427400
&ZMS            SETC  '&ZMS.&SR"'                                       00427500
&ZMS            SETC  '&ZMS "SR"'                                       00427600
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00427700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00427800
.ZG145A         ANOP  ,                                                 00427900
.*-------------------------------------------------------------------   00428000
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00428100
&ZXSR           SETC  'INPUT'     SET IN/OUTPUT                         00428200
&XSR            SETC  'SR_IN_R1'                                        00428300
                AIF   (K'&SR(1) LE 0).ZG145B    PARM                    00428400
&XSR            SETC  '&SR(1)'    SET XVARIABLE                         00428500
                AIF   (N'&SR GT 1).ZG145B       MULTI PARMS             00428600
&XSR            SETC  '&SR'       SET XVARIABLE                         00428700
.ZG145B         ANOP  ,                                                 00428800
.*-------------------------------------------------------------------   00428900
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00429000
                AIF   (K'&ZXSR LE 0).ZG145R     NOT I/O                 00429100
         AIF   ('&XSR' EQ 'SR_IN_R1').ZG145R                            00429200
                AIF   ('&XSR'(1,1) NE '(').ZG145R                       00429300
&ZCGPR          SETC  '&XSR'(2,K'&XSR-2)                                00429400
                AIF   ('&ZCGPR'(1,1) NE '0').ZG145P                     00429500
                AIF   (K'&ZCGPR GT 2).ZG145Q                            00429600
                AIF   ('&ZCGPR' EQ '0').ZG145Q                          00429700
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00429800
                AIF   (T'&ZCGPR NE 'N').ZG145Q  INVALID REG NAME        00429900
.ZG145P         ANOP  ,                                                 00430000
                AIF   (T'&ZCGPR NE 'N').ZG145R  NON NUMERIC             00430100
                AIF   ('&ZCGPR' LT '2').ZG145Q                          00430200
                AIF   ('&ZCGPR' LE '12').ZG145R                         00430300
.ZG145Q         ANOP  ,                                                 00430400
&ZMS            SETC  '"SR='      *KGPRA* MNOTE                         00430500
&ZMS            SETC  '&ZMS.&SR"'                                       00430600
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00430700
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00430800
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00430900
.ZG145R         ANOP  ,                                                 00431000
.*----------------------------------------------------------------***   00431100
.***AG.KXVAR05 VALUE, RQD INPUT, KEYS -XVARIABLE KEY                    00431200
                AIF   (N'&S5KEY LE 1).ZG148A    CK NUM                  00431300
&ZMS            SETC  '"S5KEY='   *KPOSA* MNOTE                         00431400
&ZMS            SETC  '&ZMS.&S5KEY"'                                    00431500
&ZMS            SETC  '&ZMS "S5KEY"'                                    00431600
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00431700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00431800
.ZG148A         ANOP  ,                                                 00431900
.*-------------------------------------------------------------------   00432000
.***AG.KXVAR06 VALUE, RQD INPUT, KEYS -XVARIABLE                        00432100
&ZXS5KEY        SETC  'INPUT'     SET IN/OUTPUT                         00432200
&XS5KEY         SETC  '&S5KEY(1)'               SET XVARIABLE           00432300
                AIF   (N'&S5KEY GT 1).ZG148B    MULTI PARMS             00432400
&XS5KEY         SETC  '&S5KEY'    SET XVARIABLE                         00432500
.ZG148B         AIF   (K'&S5KEY(1) GT 0).ZG148C                         00432600
&ZXS5KEY        SETC  ''          RESET IN/OUTPUT                       00432700
&ZMS            SETC  ' '         *KRQDA*                               00432800
&ZMS            SETC  '&ZMS "S5KEY" KEY AND ITS'                        00432900
                MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                  00433000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00433100
.ZG148C         ANOP  ,                                                 00433200
.*-------------------------------------------------------------------   00433300
.***AG.KCK01 VALUE, RQD INPUT, KEYS -GPR NOT ALLOWED                    00433400
                AIF   (K'&ZXS5KEY LE 0).ZG148P  NOT I/O                 00433500
                AIF   ('&XS5KEY'(1,1) NE '(').ZG148P                    00433600
&ZXS5KEY        SETC  ''          RESET IN/OUTPUT                       00433700
&ZMS            SETC  '"S5KEY='   *KGPRA* MNOTE                         00433800
&ZMS            SETC  '&ZMS.&S5KEY"'                                    00433900
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00434000
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00434100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00434200
.ZG148P         ANOP  ,                                                 00434300
.*-------------------------------------------------------------------   00434400
.***AG.KCK06 VALUE, RQD INPUT, KEYS -KMG RANGE OR EQUATE                00434500
                AIF   (K'&ZXS5KEY LE 0).ZG148V  NOT I/O                 00434600
                AIF   ('&XS5KEY'(1,1) EQ '(').ZG148V  IN GPR            00434700
                AIF   ('&XS5KEY'(1,1) EQ '-').ZG148U  INVALID ENTRY     00434800
                AIF   (T'&XS5KEY NE 'N').ZG148S  NON NUMERIC            00434900
&ZAWRK          SETA  &XS5KEY     INITIALIZE ZAWRK                      00435000
&ZCVAL          SETC  '&XS5KEY'   INITIALIZE ZCVAL                      00435100
&ZASIZ          SETA  1                                                 00435200
                AGO   .ZG148TT                                          00435300
.ZG148S         ANOP ,                                                  00435400
&ZCLNG          SETC  '&XS5KEY'(1,K'&XS5KEY-1)                          00435500
                AIF   (T'&ZCLNG EQ 'N').ZG148SS  NUMERIC                00435600
&ZCGPR          SETC  '&XS5KEY'(1,1)            FIRST CHAR              00435700
                AIF   (T'&ZCGPR EQ 'N').ZG148U  NUMERIC ERR             00435800
                AGO   .ZG148V                                           00435900
.*                                                                      00436000
.ZG148SS        ANOP ,                                                  00436100
&ZAWRK          SETA  &ZCLNG      CONVERT                               00436200
&ZCGPR          SETC  '&XS5KEY'(K'&XS5KEY,1)                            00436300
&ZASIZ          SETA  1024                                              00436400
                AIF   ('&ZCGPR' EQ 'K').ZG148T  K FACTOR                00436500
&ZASIZ          SETA  1024*1024                                         00436600
                AIF   ('&ZCGPR' EQ 'M').ZG148T  M FACTOR                00436700
&ZASIZ          SETA  1024*1024*1024                                    00436800
                AIF   ('&ZCGPR' NE 'G').ZG148U  NOT G FACTOR            00436900
.ZG148T         ANOP  ,                                                 00437000
&ZCVAL          SETC  '&ZAWRK*&ZASIZ'           EQUIVALENT NUMBER       00437100
.ZG148TT        ANOP  ,                                                 00437200
&ZN             SETA  65535/&ZASIZ              CONVERT                 00437300
                AIF   (&ZN LT 0).ZG148U         TOO LOW                 00437400
                AIF   (&ZAWRK GT &ZN).ZG148U    TOO HIGH                00437500
&XS5KEY         SETC '&ZCVAL'     SET XVARIABLE NUMBER                  00437600
                AGO   .ZG148V                                           00437700
.*                                                                      00437800
.ZG148U         ANOP  ,                                                 00437900
&ZXS5KEY        SETC  ''          RESET IN/OUTPUT                       00438000
&ZMS            SETC  '"S5KEY='   *KRNGA* MNOTE                         00438100
&ZMS            SETC  '&ZMS.&S5KEY"'                                    00438200
&ZMS            SETC  '&ZMS THE RANGE IS "0-65535"'                     00438300
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00438400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00438500
.ZG148V         ANOP  ,                                                 00438600
.*----------------------------------------------------------------***   00438700
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00438800
                AIF   (N'&DATA LE 1).ZG151A     CK NUM                  00438900
&ZMS            SETC  '"DATA='    *KPOSA* MNOTE                         00439000
&ZMS            SETC  '&ZMS.&DATA"'                                     00439100
&ZMS            SETC  '&ZMS "DATA"'                                     00439200
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00439300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00439400
.ZG151A         ANOP  ,                                                 00439500
.*-------------------------------------------------------------------   00439600
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00439700
&ZXDATA         SETC  'INPUT'     SET IN/OUTPUT                         00439800
&XDATA          SETC  '&DATA(1)'  SET XVARIABLE                         00439900
                AIF   (N'&DATA GT 1).ZG151B     MULTI PARMS             00440000
&XDATA          SETC  '&DATA'     SET XVARIABLE                         00440100
.ZG151B         AIF   (K'&DATA(1) GT 0).ZG151C                          00440200
&ZXDATA         SETC  ''          RESET IN/OUTPUT                       00440300
&ZMS            SETC  ' '         *KRQDA*                               00440400
&ZMS            SETC  '&ZMS "DATA" KEY AND ITS'                         00440500
                MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                  00440600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00440700
.ZG151C         ANOP  ,                                                 00440800
.*-------------------------------------------------------------------   00440900
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00441000
                AIF   (K'&ZXDATA LE 0).ZG151R   NOT I/O                 00441100
                AIF   ('&XDATA'(1,1) NE '(').ZG151R                     00441200
&ZCGPR          SETC  '&XDATA'(2,K'&XDATA-2)                            00441300
                AIF   ('&ZCGPR'(1,1) NE '0').ZG151P                     00441400
                AIF   (K'&ZCGPR GT 2).ZG151Q                            00441500
                AIF   ('&ZCGPR' EQ '0').ZG151Q                          00441600
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00441700
                AIF   (T'&ZCGPR NE 'N').ZG151Q  INVALID REG NAME        00441800
.ZG151P         ANOP  ,                                                 00441900
                AIF   (T'&ZCGPR NE 'N').ZG151R  NON NUMERIC             00442000
                AIF   ('&ZCGPR' LT '2').ZG151Q                          00442100
                AIF   ('&ZCGPR' LE '12').ZG151R                         00442200
.ZG151Q         ANOP  ,                                                 00442300
&ZMS            SETC  '"DATA='    *KGPRA* MNOTE                         00442400
&ZMS            SETC  '&ZMS.&DATA"'                                     00442500
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00442600
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00442700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00442800
.ZG151R         ANOP  ,                                                 00442900
.*----------------------------------------------------------------***   00443000
.***AG.KXVAR05 VALUE, OPT INPUT, KEYS -XVARIABLE KEY                    00443100
                AIF   (N'&LEN LE 1).ZG153A      CK NUM                  00443200
&ZMS            SETC  '"LEN='     *KPOSA* MNOTE                         00443300
&ZMS            SETC  '&ZMS.&LEN"'                                      00443400
&ZMS            SETC  '&ZMS "LEN"'                                      00443500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00443600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00443700
.ZG153A         ANOP  ,                                                 00443800
.*-------------------------------------------------------------------   00443900
.***AG.KXVAR17 VALUE, OPT INPUT, KEYS -XVARIABLE                        00444000
&XLEN           SETC  'DEFINED_LENGTH'          SET DEFAULT             00444100
                AIF   (K'&LEN(1) LE 0).ZG153C   PARM                    00444200
&XLEN           SETC  '&LEN(1)'   SET XVARIABLE                         00444300
                AIF   (N'&LEN GT 1).ZG153B      MULTI PARMS             00444400
&XLEN           SETC  '&LEN'      SET XVARIABLE                         00444500
.ZG153B         AIF   (K'&DATA(1) GT 0).ZG153C  KEY                     00444600
&ZMS            SETC  '"LEN'      *KDEPA* MNOTE                         00444700
&ZMS            SETC  '&ZMS.=&LEN"'                                     00444800
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00444900
&ZMS            SETC  '&ZMS '                                           00445000
&ZMS            SETC  '&ZMS "DATA"'                                     00445100
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00445200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00445300
.ZG153C         ANOP  ,                                                 00445400
&ZXLEN          SETC  'INPUT'     SET IN/OUTPUT                         00445500
.*-------------------------------------------------------------------   00445600
.***AG.KCK02 VALUE, OPT INPUT, KEYS -GPR OUT OF RANGE                   00445700
                AIF   (K'&ZXLEN LE 0).ZG153R    NOT I/O                 00445800
         AIF   ('&XLEN' EQ 'DEFINED_LENGTH').ZG153R                     00445900
                AIF   ('&XLEN'(1,1) NE '(').ZG153R                      00446000
&ZCGPR          SETC  '&XLEN'(2,K'&XLEN-2)                              00446100
                AIF   ('&ZCGPR'(1,1) NE '0').ZG153P                     00446200
                AIF   (K'&ZCGPR GT 2).ZG153Q                            00446300
                AIF   ('&ZCGPR' EQ '0').ZG153Q                          00446400
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00446500
                AIF   (T'&ZCGPR NE 'N').ZG153Q  INVALID REG NAME        00446600
.ZG153P         ANOP  ,                                                 00446700
                AIF   (T'&ZCGPR NE 'N').ZG153R  NON NUMERIC             00446800
                AIF   ('&ZCGPR' LT '2').ZG153Q                          00446900
                AIF   ('&ZCGPR' LE '12').ZG153R                         00447000
.ZG153Q         ANOP  ,                                                 00447100
&ZMS            SETC  '"LEN='     *KGPRA* MNOTE                         00447200
&ZMS            SETC  '&ZMS.&LEN"'                                      00447300
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00447400
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00447500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00447600
.ZG153R         ANOP  ,                                                 00447700
.*-------------------------------------------------------------------   00447800
.***AG.KCK07 VALUE, OPT INPUT, KEYS -KMG RANGE                          00447900
                AIF   (K'&ZXLEN LE 0).ZG153T    NOT I/O                 00448000
                AIF   ('&XLEN' EQ 'DEFINED_LENGTH').ZG153T              00448100
                AIF   ('&XLEN'(1,1) EQ '(').ZG153T  IN GPR              00448200
                AIF   (T'&XLEN NE 'N').ZG153S   NUMERIC ERR             00448300
&ZASIZ          SETA  &XLEN       CONVERT                               00448400
                AIF   (&ZASIZ LT 1).ZG153S      TOO LOW                 00448500
                AIF   (&ZASIZ LE 256).ZG153T    NOT HIGH                00448600
.ZG153S         ANOP  ,                                                 00448700
&ZXLEN          SETC  ''          RESET IN/OUTPUT                       00448800
&ZMS            SETC  '"LEN='     *KRNGA* MNOTE                         00448900
&ZMS            SETC  '&ZMS.&LEN"'                                      00449000
&ZMS            SETC  '&ZMS THE RANGE IS "1-256"'                       00449100
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00449200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00449300
.ZG153T         ANOP  ,                                                 00449400
.*----------------------------------------------------------------***   00449500
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00449600
                AIF   (N'&LENVAR LE 1).ZG156A   CK NUM                  00449700
&ZMS            SETC  '"LENVAR='  *KPOSA* MNOTE                         00449800
&ZMS            SETC  '&ZMS.&LENVAR"'                                   00449900
&ZMS            SETC  '&ZMS "LENVAR"'                                   00450000
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00450100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00450200
.ZG156A         ANOP  ,                                                 00450300
.*-------------------------------------------------------------------   00450400
.***AG.KXVAR17 NAME, OPT INPUT, KEYS -XVARIABLE                         00450500
&XLENVAR        SETC  'DEFINED_LENGTH'          SET DEFAULT             00450600
                AIF   (K'&LENVAR(1) LE 0).ZG156C  PARM                  00450700
&XLENVAR        SETC  '&LENVAR(1)'              SET XVARIABLE           00450800
                AIF   (N'&LENVAR GT 1).ZG156B   MULTI PARMS             00450900
&XLENVAR        SETC  '&LENVAR'   SET XVARIABLE                         00451000
.ZG156B         AIF   (K'&DATA(1) GT 0).ZG156C  KEY                     00451100
&ZMS            SETC  '"LENVAR'   *KDEPA* MNOTE                         00451200
&ZMS            SETC  '&ZMS.=&LENVAR"'                                  00451300
&ZMS            SETC  '&ZMS CAN ONLY BE SPECIFIED IF'                   00451400
&ZMS            SETC  '&ZMS '                                           00451500
&ZMS            SETC  '&ZMS "DATA"'                                     00451600
                MNOTE 8,' &ZMS IS ALSO SPECIFIED.'                      00451700
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00451800
.ZG156C         ANOP  ,                                                 00451900
&ZXLENVAR       SETC  'INPUT'     SET IN/OUTPUT                         00452000
.*-------------------------------------------------------------------   00452100
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00452200
                AIF   (K'&ZXLENVAR LE 0).ZG156R  NOT I/O                00452300
         AIF   ('&XLENVAR' EQ 'DEFINED_LENGTH').ZG156R                  00452400
                AIF   ('&XLENVAR'(1,1) NE '(').ZG156R                   00452500
&ZCGPR          SETC  '&XLENVAR'(2,K'&XLENVAR-2)                        00452600
                AIF   ('&ZCGPR'(1,1) NE '0').ZG156P                     00452700
                AIF   (K'&ZCGPR GT 2).ZG156Q                            00452800
                AIF   ('&ZCGPR' EQ '0').ZG156Q                          00452900
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00453000
                AIF   (T'&ZCGPR NE 'N').ZG156Q  INVALID REG NAME        00453100
.ZG156P         ANOP  ,                                                 00453200
                AIF   (T'&ZCGPR NE 'N').ZG156R  NON NUMERIC             00453300
                AIF   ('&ZCGPR' LT '2').ZG156Q                          00453400
                AIF   ('&ZCGPR' LE '12').ZG156R                         00453500
.ZG156Q         ANOP  ,                                                 00453600
&ZMS            SETC  '"LENVAR='  *KGPRA* MNOTE                         00453700
&ZMS            SETC  '&ZMS.&LENVAR"'                                   00453800
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00453900
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00454000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00454100
.ZG156R         ANOP  ,                                                 00454200
.*----------------------------------------------------------------***   00454300
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00454400
                AIF   (N'&TYPE LE 1).ZG160A     CK NUM                  00454500
&ZMS            SETC  '"TYPE='    *KPOSA* MNOTE                         00454600
&ZMS            SETC  '&ZMS.&TYPE"'                                     00454700
&ZMS            SETC  '&ZMS "TYPE"'                                     00454800
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00454900
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00455000
.ZG160A         ANOP  ,                                                 00455100
.*-------------------------------------------------------------------   00455200
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00455300
&XTYPE          SETC  ''          INITIALIZE XVARIABLE                  00455400
.ZG161A   AIF   ('&TYPE(1)' NE 'TEST').ZG162A                           00455500
&XTYPE          SETC  'TEST'      SET KEYWORD                           00455600
.*-------------------------------------------------------------------   00455700
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00455800
.ZG162A   AIF   ('&TYPE(1)' NE 'NOTEST').ZG163A                         00455900
&XTYPE          SETC  'NOTEST'    SET KEYWORD                           00456000
.*-------------------------------------------------------------------   00456100
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00456200
.ZG163A         AIF   (K'&XTYPE GT 0).ZG163C    KEYWORD                 00456300
                AIF   (K'&TYPE(1) LE 0).ZG163B                          00456400
&ZMS            SETC  '"TYPE='    *KUKWA* MNOTE                         00456500
&ZMS            SETC  '&ZMS.&TYPE"'                                     00456600
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00456700
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00456800
&ZMS            SETC  '&ZMS "TEST"'                                     00456900
&ZMS            SETC  '&ZMS OR "NOTEST".'                               00457000
                MNOTE 8,' &ZMS '                                        00457100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00457200
.ZG163B         ANOP  ,                                                 00457300
&XTYPE          SETC  'TEST'      SET DEFAULT KEYWORD                   00457400
.ZG163C         ANOP  ,                                                 00457500
&ZXTYPE         SETC  'INPUT'     SET IN/OUTPUT                         00457600
.*-------------------------------------------------------------------   00457700
.***AG.KMEKY13 VALUE, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES          00457800
.ZG164          AIF   ('&XTEST' NE 'COMPLETE').ZG179                    00457900
.*-------------------------------------------------------------------   00458000
.***AG.KMEKY14 VALUE, RQD INPUT, ME KEYS -DISALLOWED KEYS               00458100
&ZCVAL          SETC ''           ERROR KEY FIELD                       00458200
.ZG164I0        AIF   (K'&PRIMLEN LE 0).ZG164I1                         00458300
&ZCVAL          SETC '&ZCVAL PRIMLEN'           DISALLOWED KEY          00458400
.ZG164I1        AIF   (K'&SECLEN LE 0).ZG164I2                          00458500
&ZCVAL          SETC '&ZCVAL SECLEN'            DISALLOWED KEY          00458600
.ZG164I2        AIF   (K'&VARLEN LE 0).ZG164I3                          00458700
&ZCVAL          SETC '&ZCVAL VARLEN'            DISALLOWED KEY          00458800
.ZG164I3        AIF   (K'&ARCHLEV LE 0).ZG164I4                         00458900
&ZCVAL          SETC '&ZCVAL ARCHLEV'           DISALLOWED KEY          00459000
.ZG164I4        AIF   (K'&DAE LE 0).ZG164I5                             00459100
&ZCVAL          SETC '&ZCVAL DAE'               DISALLOWED KEY          00459200
.ZG164I5        AIF   (K'&COMPDSC LE 0).ZG164I6                         00459300
&ZCVAL          SETC '&ZCVAL COMPDSC'           DISALLOWED KEY          00459400
.ZG164I6        AIF   (K'&PROBLEM LE 0).ZG164I7                         00459500
&ZCVAL          SETC '&ZCVAL PROBLEM'           DISALLOWED KEY          00459600
.ZG164I7        AIF   (K'&SERVLEV LE 0).ZG164I8                         00459700
&ZCVAL          SETC '&ZCVAL SERVLEV'           DISALLOWED KEY          00459800
.ZG164I8        AIF   (K'&XNOCONVERTS LE 0).ZG164I9                     00459900
&ZCVAL          SETC '&ZCVAL XNOCONVERTS'       DISALLOWED KEY          00460000
.ZG164I9        AIF   (K'&IBM LE 0).ZG164I10                            00460100
&ZCVAL          SETC '&ZCVAL IBM'               DISALLOWED KEY          00460200
.ZG164I10       AIF   (K'&PROGRAM LE 0).ZG164I11                        00460300
&ZCVAL          SETC '&ZCVAL PROGRAM'           DISALLOWED KEY          00460400
.ZG164I11       AIF   (K'&PROGLEV LE 0).ZG164I12                        00460500
&ZCVAL          SETC '&ZCVAL PROGLEV'           DISALLOWED KEY          00460600
.ZG164I12       AIF   (K'&COMPID LE 0).ZG164I13                         00460700
&ZCVAL          SETC '&ZCVAL COMPID'            DISALLOWED KEY          00460800
.ZG164I13       AIF   (K'&COMPLEV LE 0).ZG164I14                        00460900
&ZCVAL          SETC '&ZCVAL COMPLEV'           DISALLOWED KEY          00461000
.ZG164I14       AIF   (K'&PID LE 0).ZG164I15                            00461100
&ZCVAL          SETC '&ZCVAL PID'               DISALLOWED KEY          00461200
.ZG164I15       AIF   (K'&PIDLEVEL LE 0).ZG164I16                       00461300
&ZCVAL          SETC '&ZCVAL PIDLEVEL'          DISALLOWED KEY          00461400
.ZG164I16       AIF   (K'&SUBSYSTEM LE 0).ZG164I17                      00461500
&ZCVAL          SETC '&ZCVAL SUBSYSTEM'         DISALLOWED KEY          00461600
.ZG164I17       AIF   (K'&SDBSTRING LE 0).ZG164I18                      00461700
&ZCVAL          SETC '&ZCVAL SDBSTRING'         DISALLOWED KEY          00461800
.ZG164I18       AIF   (K'&SDBLEN LE 0).ZG164I19                         00461900
&ZCVAL          SETC '&ZCVAL SDBLEN'            DISALLOWED KEY          00462000
.ZG164I19       AIF   (K'&SDBLENVAR LE 0).ZG164I20                      00462100
&ZCVAL          SETC '&ZCVAL SDBLENVAR'         DISALLOWED KEY          00462200
.ZG164I20       AIF   (K'&SDBKEY LE 0).ZG164I21                         00462300
&ZCVAL          SETC '&ZCVAL SDBKEY'            DISALLOWED KEY          00462400
.ZG164I21       AIF   (K'&DATA LE 0).ZG164I22                           00462500
&ZCVAL          SETC '&ZCVAL DATA'              DISALLOWED KEY          00462600
.ZG164I22       AIF   (K'&LEN LE 0).ZG164I23                            00462700
&ZCVAL          SETC '&ZCVAL LEN'               DISALLOWED KEY          00462800
.ZG164I23       AIF   (K'&LENVAR LE 0).ZG164I24                         00462900
&ZCVAL          SETC '&ZCVAL LENVAR'            DISALLOWED KEY          00463000
.ZG164I24       AIF   (K'&CONVERT LE 0).ZG164I25                        00463100
&ZCVAL          SETC '&ZCVAL CONVERT'           DISALLOWED KEY          00463200
.ZG164I25       AIF   (K'&TYPE LE 0).ZG164I26                           00463300
&ZCVAL          SETC '&ZCVAL TYPE'              DISALLOWED KEY          00463400
.ZG164I26       AIF   (K'&S5KEY LE 0).ZG164I27                          00463500
&ZCVAL          SETC '&ZCVAL S5KEY'             DISALLOWED KEY          00463600
.ZG164I27       AIF   (K'&ZCVAL LE 0).ZG164J    KEY                     00463700
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00463800
                AIF  (K'&ZCVAL LE 160).ZG164K                           00463900
&ZCVAL          SETC '&ZCVAL'(1,160)                                    00464000
&ZCVAL          SETC '&ZCVAL....'                                       00464100
.ZG164K         ANOP                                                    00464200
&ZMS            SETC  '"COMPLETE'               *KMEIA* MNOTE           00464300
&ZMS            SETC  '&ZMS."'                                          00464400
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00464500
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00464600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00464700
.ZG164J         ANOP  ,                                                 00464800
.*----------------------------------------------------------------***   00464900
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00465000
                AIF   (N'&SR LE 1).ZG166A       CK NUM                  00465100
&ZMS            SETC  '"SR='      *KPOSA* MNOTE                         00465200
&ZMS            SETC  '&ZMS.&SR"'                                       00465300
&ZMS            SETC  '&ZMS "SR"'                                       00465400
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00465500
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00465600
.ZG166A         ANOP  ,                                                 00465700
.*-------------------------------------------------------------------   00465800
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00465900
&ZXSR           SETC  'INPUT'     SET IN/OUTPUT                         00466000
&XSR            SETC  'SR_IN_R1'                                        00466100
                AIF   (K'&SR(1) LE 0).ZG166B    PARM                    00466200
&XSR            SETC  '&SR(1)'    SET XVARIABLE                         00466300
                AIF   (N'&SR GT 1).ZG166B       MULTI PARMS             00466400
&XSR            SETC  '&SR'       SET XVARIABLE                         00466500
.ZG166B         ANOP  ,                                                 00466600
.*-------------------------------------------------------------------   00466700
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00466800
                AIF   (K'&ZXSR LE 0).ZG166R     NOT I/O                 00466900
         AIF   ('&XSR' EQ 'SR_IN_R1').ZG166R                            00467000
                AIF   ('&XSR'(1,1) NE '(').ZG166R                       00467100
&ZCGPR          SETC  '&XSR'(2,K'&XSR-2)                                00467200
                AIF   ('&ZCGPR'(1,1) NE '0').ZG166P                     00467300
                AIF   (K'&ZCGPR GT 2).ZG166Q                            00467400
                AIF   ('&ZCGPR' EQ '0').ZG166Q                          00467500
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00467600
                AIF   (T'&ZCGPR NE 'N').ZG166Q  INVALID REG NAME        00467700
.ZG166P         ANOP  ,                                                 00467800
                AIF   (T'&ZCGPR NE 'N').ZG166R  NON NUMERIC             00467900
                AIF   ('&ZCGPR' LT '2').ZG166Q                          00468000
                AIF   ('&ZCGPR' LE '12').ZG166R                         00468100
.ZG166Q         ANOP  ,                                                 00468200
&ZMS            SETC  '"SR='      *KGPRA* MNOTE                         00468300
&ZMS            SETC  '&ZMS.&SR"'                                       00468400
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00468500
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00468600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00468700
.ZG166R         ANOP  ,                                                 00468800
.*------------------------------------------------------------------    00468900
.***AG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00469000
&XINVOKE        SETC  ''          INITIALIZE XVARIABLE                  00469100
.*-------------------------------------------------------------------   00469200
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00469300
.ZG170          ANOP  ,                                                 00469400
                AIF   (K'&INVOKE(1) LE 0).ZG170A                        00469500
&ZTLC           SETC 'YES'                                              00469600
                AIF   ('&INVOKE(1)' NE '&ZTLC').ZG177                   00469700
&XINVOKE        SETC  'YES'       SET KEYWORD                           00469800
                AIF   (N'&INVOKE LE 1).ZG170A   CK NUM                  00469900
&ZMS            SETC  '"INVOKE='  *KPOSA* MNOTE                         00470000
&ZMS            SETC  '&ZMS.&INVOKE"'                                   00470100
&ZMS            SETC  '&ZMS "INVOKE"'                                   00470200
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00470300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00470400
.ZG170A         ANOP  ,                                                 00470500
.*----------------------------------------------------------------***   00470600
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00470700
                AIF   (N'&RETCODE LE 1).ZG172A  CK NUM                  00470800
&ZMS            SETC  '"RETCODE='               *KPOSA* MNOTE           00470900
&ZMS            SETC  '&ZMS.&RETCODE"'                                  00471000
&ZMS            SETC  '&ZMS "RETCODE"'                                  00471100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00471200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00471300
.ZG172A         ANOP  ,                                                 00471400
.*-------------------------------------------------------------------   00471500
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00471600
&ZXRETCODE      SETC  'INPUT'     SET IN/OUTPUT                         00471700
&XRETCODE       SETC  'NO_RETURN_CODE'                                  00471800
                AIF   (K'&RETCODE(1) LE 0).ZG172B  PARM                 00471900
&XRETCODE       SETC  '&RETCODE(1)'             SET XVARIABLE           00472000
                AIF   (N'&RETCODE GT 1).ZG172B  MULTI PARMS             00472100
&XRETCODE       SETC  '&RETCODE'  SET XVARIABLE                         00472200
.ZG172B         ANOP  ,                                                 00472300
.*-------------------------------------------------------------------   00472400
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00472500
                AIF   (K'&ZXRETCODE LE 0).ZG172R  NOT I/O               00472600
         AIF   ('&XRETCODE' EQ 'NO_RETURN_CODE').ZG172R                 00472700
                AIF   ('&XRETCODE'(1,1) NE '(').ZG172R                  00472800
&ZCGPR          SETC  '&XRETCODE'(2,K'&XRETCODE-2)                      00472900
                AIF   ('&ZCGPR'(1,1) NE '0').ZG172P                     00473000
                AIF   (K'&ZCGPR GT 2).ZG172Q                            00473100
                AIF   ('&ZCGPR' EQ '0').ZG172Q                          00473200
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00473300
                AIF   (T'&ZCGPR NE 'N').ZG172Q  INVALID REG NAME        00473400
.ZG172P         ANOP  ,                                                 00473500
                AIF   (T'&ZCGPR NE 'N').ZG172R  NON NUMERIC             00473600
                AIF   ('&ZCGPR' LT '2').ZG172Q                          00473700
                AIF   ('&ZCGPR' LE '12').ZG172R                         00473800
.ZG172Q         ANOP  ,                                                 00473900
&ZMS            SETC  '"RETCODE='               *KGPRA* MNOTE           00474000
&ZMS            SETC  '&ZMS.&RETCODE"'                                  00474100
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00474200
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00474300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00474400
.ZG172R         ANOP  ,                                                 00474500
.*----------------------------------------------------------------***   00474600
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00474700
                AIF   (N'&RSNCODE LE 1).ZG175A  CK NUM                  00474800
&ZMS            SETC  '"RSNCODE='               *KPOSA* MNOTE           00474900
&ZMS            SETC  '&ZMS.&RSNCODE"'                                  00475000
&ZMS            SETC  '&ZMS "RSNCODE"'                                  00475100
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00475200
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00475300
.ZG175A         ANOP  ,                                                 00475400
.*-------------------------------------------------------------------   00475500
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00475600
&ZXRSNCODE      SETC  'INPUT'     SET IN/OUTPUT                         00475700
&XRSNCODE       SETC  'NO_REASON_CODE'                                  00475800
                AIF   (K'&RSNCODE(1) LE 0).ZG175B  PARM                 00475900
&XRSNCODE       SETC  '&RSNCODE(1)'             SET XVARIABLE           00476000
                AIF   (N'&RSNCODE GT 1).ZG175B  MULTI PARMS             00476100
&XRSNCODE       SETC  '&RSNCODE'  SET XVARIABLE                         00476200
.ZG175B         ANOP  ,                                                 00476300
.*-------------------------------------------------------------------   00476400
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00476500
                AIF   (K'&ZXRSNCODE LE 0).ZG175R  NOT I/O               00476600
         AIF   ('&XRSNCODE' EQ 'NO_REASON_CODE').ZG175R                 00476700
                AIF   ('&XRSNCODE'(1,1) NE '(').ZG175R                  00476800
&ZCGPR          SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                      00476900
                AIF   ('&ZCGPR'(1,1) NE '0').ZG175P                     00477000
                AIF   (K'&ZCGPR GT 2).ZG175Q                            00477100
                AIF   ('&ZCGPR' EQ '0').ZG175Q                          00477200
&ZCGPR          SETC  '&ZCGPR'(2,1)                                     00477300
                AIF   (T'&ZCGPR NE 'N').ZG175Q  INVALID REG NAME        00477400
.ZG175P         ANOP  ,                                                 00477500
                AIF   (T'&ZCGPR NE 'N').ZG175R  NON NUMERIC             00477600
                AIF   ('&ZCGPR' LT '2').ZG175Q                          00477700
                AIF   ('&ZCGPR' LE '12').ZG175R                         00477800
.ZG175Q         ANOP  ,                                                 00477900
&ZMS            SETC  '"RSNCODE='               *KGPRA* MNOTE           00478000
&ZMS            SETC  '&ZMS.&RSNCODE"'                                  00478100
&ZMS            SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'         00478200
                MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                  00478300
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00478400
.ZG175R         ANOP  ,                                                 00478500
.*-------------------------------------------------------------------   00478600
.***AG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00478700
.ZG177          ANOP  ,                                                 00478800
&ZTLC           SETC 'NO'                                               00478900
                AIF   ('&INVOKE(1)' NE '&ZTLC').ZG178                   00479000
&XINVOKE        SETC  'NO'        SET KEYWORD                           00479100
                AIF   (N'&INVOKE LE 1).ZG177A   CK NUM                  00479200
&ZMS            SETC  '"INVOKE='  *KPOSA* MNOTE                         00479300
&ZMS            SETC  '&ZMS.&INVOKE"'                                   00479400
&ZMS            SETC  '&ZMS "INVOKE"'                                   00479500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00479600
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00479700
.ZG177A         ANOP  ,                                                 00479800
.*------------------------------------------------------------------    00479900
.***AG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00480000
&ZCVAL          SETC ''           CLEAR ERROR KEY ACCUMULATOR           00480100
.ZG177A0        AIF   (K'&RETCODE LE 0).ZG177A1  OK                     00480200
&ZCVAL          SETC '&ZCVAL RETCODE'           INCORRECT KEY USED      00480300
.ZG177A1        AIF   (K'&RSNCODE LE 0).ZG177A2  OK                     00480400
&ZCVAL          SETC '&ZCVAL RSNCODE'           INCORRECT KEY USED      00480500
.ZG177A2        AIF   (K'&ZCVAL LE 0).ZG177A3   OK                      00480600
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)                             00480700
&ZMS            SETC  '"INVOKE'   *KMEIA* MNOTE                         00480800
&ZMS            SETC  '&ZMS.=&INVOKE"'                                  00480900
&ZMS            SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'              00481000
                MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'              00481100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00481200
.ZG177A3        ANOP  ,                                                 00481300
.*------------------------------------------------------------------    00481400
.***AG.KKCTL04 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL           00481500
.ZG178          ANOP  ,                                                 00481600
&ZXINVOKE       SETC  'INPUT'     SET IN/OUTPUT                         00481700
                AIF   (K'&XINVOKE GT 0).ZG178E  VALID ARG               00481800
                AIF   (T'&INVOKE EQ 'O').ZG178D  OMITTED                00481900
&ZASYSLNDX      SETA  0                                                 00482000
.ZG178A         ANOP  ,           POSITIONAL MACRO KEY                  00482100
&ZASYSLNDX      SETA  &ZASYSLNDX+1                                      00482200
                AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG178C                 00482300
&ZTLC           SETC 'INVOKE'                                           00482400
                AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG178A        00482500
.ZG178B         ANOP  ,                                                 00482600
&ZXINVOKE       SETC  ''          RESET IN/OUTPUT                       00482700
&ZMS            SETC  'THE "INVOKE" KEY'        *KOPTA* MNOTE           00482800
&ZMS            SETC  '&ZMS MUST CONTAIN ONE'                           00482900
                MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                  00483000
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00483100
                AGO   .ZG178E                                           00483200
.ZG178C         ANOP  ,                                                 00483300
&ZXINVOKE       SETC  ''          RESET IN/OUTPUT                       00483400
&ZMS            SETC  '"INVOKE='  *KUKWA* MNOTE                         00483500
&ZMS            SETC  '&ZMS.&INVOKE"'                                   00483600
&ZMS            SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '         00483700
&ZMS            SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'               00483800
&ZMS            SETC  '&ZMS "YES"'                                      00483900
&ZMS            SETC  '&ZMS OR "NO".'                                   00484000
                MNOTE 8,' &ZMS '                                        00484100
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00484200
                AGO   .ZG178E                                           00484300
.ZG178D         ANOP  ,                                                 00484400
&XINVOKE        SETC  'YES'       SET DEFAULT KEYWORD                   00484500
.ZG178E         ANOP  ,                                                 00484600
.*-------------------------------------------------------------------   00484700
.***AG.KMEKY15 VALUE, RQD INPUT, ME KEYS -END                           00484800
.ZG179          ANOP  ,           END MUTUALLY EXCLUSIVE KEYS           00484900
.******************************************************************     00485000
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00485100
.******************************************************************     00485200
                ACTR  10000                                             00485300
.*-------------------------------------------------------------------   00485400
.***AH.P03 EXTRA POSITIONALS AMONG NON-X KEYS                           00485500
&ZCVAL          SETC  ''          ERROR FIELD                           00485600
&ZAWRK          SETA  0           POSITIONAL COUNTER                    00485700
&ZASYSLNDX      SETA  0           NON-X KEY COUNTER                     00485800
.ZGLIST2        ANOP  ,                                                 00485900
&ZASYSLNDX      SETA  &ZASYSLNDX+1              NEXT NON-X KEY          00486000
         AIF   (&ZASYSLNDX GT N'&SYSLIST).ZGLIST3  DONE                 00486100
         AIF   ('&ZCSYSLIST(&ZASYSLNDX)' EQ 'NONXKEY').ZGLIST2          00486200
&ZAWRK          SETA  &ZAWRK+1    NEXT POSITIONAL                       00486300
                AIF   (&ZAWRK LE 0).ZGLIST2                             00486400
&ZCVAL          SETC '&ZCVAL,&SYSLIST(&ZASYSLNDX)'  EXTRA               00486500
                AGO   .ZGLIST2                                          00486600
.*                                                                      00486700
.ZGLIST3  AIF  (K'&ZCVAL LE 0).ZGLISTX                                  00486800
&ZCVAL          SETC '&ZCVAL'(2,K'&ZCVAL-1)     STRIP COMMA             00486900
&ZMS            SETC  'POSITIONAL ARGUMENT(S),'  *PPOSA* MNOTE          00487000
&ZMS            SETC  '&ZMS "&ZCVAL"'                                   00487100
&ZMS            SETC  '&ZMS CANNOT BE USED.'                            00487200
&ZMS            SETC  '&ZMS NO POSITIONAL ARGUMENTS'                    00487300
                MNOTE 8,' &ZMS ARE ALLOWED.'                            00487400
&ZMACRET        SETA  8           SET MACRO ERROR RETURN CODE           00487500
.ZGLISTX        ANOP  ,                                                 00487600
&ZASYSLNDX      SETA  0                                                 00487700
.*******************************************************************    00487800
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       00487900
.*******************************************************************    00488000
                AIF   (&ZMACRET NE 0).ZLX2      ERROR DETECTED          00488100
.*******************************************************************    00488200
.***AE.01  START OF SYMRBLD MACRO CODE                                  00488300
.*******************************************************************    00488400
                LCLC  &M0M0001                 NAME                     00488500
&M0M0001        SETC  '&XLABEL'                SET NAME                 00488600
                AIF   (K'&XLABEL NE 0).XLAB2                            00488700
&M0M0001        SETC  'M00M&SYSNDX'            DEFAULT NAME             00488800
.*                                                                      00488900
.XLAB2          ANOP  ,                                                 00489000
&M0M0001 DS    0H                             SYMRBLD-0                 00489100
.*******************************************************************    00489200
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              00489300
.*******************************************************************    00489400
              PUSH  PRINT                                               00489500
                AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON        00489600
                PRINT OFF         ++ PR01                               00489700
                AGO   .ZPRNTXX                                          00489800
.ZPRINTX        PRINT ON                                                00489900
.ZPRNTXX        ANOP  ,                                                 00490000
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00490100
.* Test for len and lenvar being mutually exclusive                     00490200
         AIF   ('&LENVAR' EQ '' OR '&LEN' EQ '').OKME                   00490300
     MNOTE 8,' "LEN" IS MUTUALLY EXCLUSIVE WITH THE "LENVAR" KEY.'      00490400
&ZMACRET SETA  8                                                        00490500
         AGO   .ENDSR                                                   00490600
.OKME    ANOP                                                           00490700
.* Test for SDBLEN and SDBLENvar being mutually exclusive               00490800
         AIF   ('&SDBLENVAR' EQ '' OR '&SDBLEN' EQ '').OKME2            00490900
     MNOTE 8,'"SDBLEN" IS MUTUALLY EXCLUSIVE WITH THE "SDBLENVAR" KEY.' 00491000
&ZMACRET SETA  8                                                        00491100
         AGO   .ENDSR                                                   00491200
.OKME2   ANOP                                                           00491300
     AIF   ('&ZXPRIMARY' NE 'INPUT').T1                                 00491400
     AIF   ('&SDBKEY' NE '' AND '&SDBKEY(1)' NE 'NO_SDBKEY').T1         00491500
     AIF ('&SDBSTRING' NE '' AND '&SDBSTRING(1)' NE 'NO_SDB_STRING').T1 00491600
&TEMPC   SETC 'WHEN "PRIMARY" IS SPECIFIED, THE "SDBKEY" KEY OR '       00491700
&TEMPC   SETC '&TEMPC.THE "SDBSTRING" KEY IS REQUIRED.'                 00491800
      MNOTE 8,' &TEMPC.'                                                00491900
&ZMACRET SETA  8                                                        00492000
         AGO   .ENDSR                                                   00492100
.T1      ANOP                                                           00492200
     AIF   ('&ZXSECONDARY' NE 'INPUT').T2                               00492300
     AIF   ('&SDBKEY' NE '' AND '&SDBKEY(1)' NE 'NO_SDBKEY').T2         00492400
     AIF ('&SDBSTRING' NE '' AND '&SDBSTRING(1)' NE 'NO_SDB_STRING').T2 00492500
&TEMPC   SETC 'WHEN "SECONDARY" IS SPECIFIED, THE "SDBKEY" KEY OR '     00492600
&TEMPC   SETC '&TEMPC.THE "SDBSTRING" KEY IS REQUIRED.'                 00492700
      MNOTE 8,' &TEMPC.'                                                00492800
&ZMACRET SETA  8                                                        00492900
         AGO   .ENDSR                                                   00493000
.T2      ANOP                                                           00493100
.* Test SYSSTATE, if P then set &LA variable to LA, else to LAE         00493200
         GBLC  &SYSASCE                                                 00493300
         SYSSTATE TEST                   Get ASC environment            00493400
&LA      SETC  'LA'                      P/S/H, use LA instruction      00493500
         AIF   ('&SYSASCE' EQ 'P').ASCP  Test for AR environment        00493600
&LA      SETC  'LAE'                     AR mode, use LAE instruction   00493700
.ASCP    ANOP                                                           00493800
          LCLA  &SR2OFF,&SR21OFF,&SR2LEN,&SR21LEN,&SAVEAREA             00493900
          LCLA  &ADSR,&SAVEALEN,&SR3OFF,&SRHEADER                       00494000
          LCLC  &TEMPC,&TEMPCA,&KEYVAL,&CUR,&END,&S,&T1                 00494100
          LCLC  &TEMPC2,&TPID                                           00494200
          LCLA  &KEYLEN,&L1,&TPIDL                                      00494300
&S        SETC  '&SYSNDX'                                               00494400
&ADSR     SETA  0                                                       00494500
&ADSRID   SETA  &ADSR+0                  'SR' record header             00494600
&ADSRFL1  SETA  &ADSR+54                 Offset to FL1             @01A 00494700
&SR2OFF   SETA  64                       Offset to SR2                  00494800
          LCLA &ADSRARID,&ADSRL,&ADSRCSL,&ADSRCSO,&ADSRDBL,&ADSRDBO     00494900
          LCLA &ADSRROSL,&ADSRROSA,&ADSRRONL,&ADSRRONA,&ADSRISL         00495000
          LCLA &ADSRISA                                                 00495100
&ADSRARID SETA &SR2OFF+0                 Architectural level            00495200
&ADSRL    SETA &SR2OFF+2                 Length of SR2                  00495300
&ADSRCSL  SETA &SR2OFF+4                 Length of SR2.1                00495400
&ADSRCSO  SETA &SR2OFF+6                 Offset to SR2.1                00495500
&ADSRDBL  SETA &SR2OFF+8                 Length of SR3                  00495600
&ADSRDBO  SETA &SR2OFF+10                Offset to SR3                  00495700
&ADSRROSL SETA &SR2OFF+12                Length of SR4                  00495800
&ADSRROSA SETA &SR2OFF+14                Offset to SR4                  00495900
&ADSRRONL SETA &SR2OFF+16                Length of SR5                  00496000
&ADSRRONA SETA &SR2OFF+18                Offset to SR5                  00496100
&ADSRISL  SETA &SR2OFF+20                Length of SR6                  00496200
&ADSRISA  SETA &SR2OFF+22                Offset to SR6                  00496300
&SR21OFF  SETA  112                      Offset to SR2.1                00496400
&SR2LEN   SETA  &SR21OFF-&SR2OFF         Length of SR2                  00496500
          LCLA &ADSRC,&ADSRCRL,&ADSRCID,&ADSRFLC,&ADSRLVL,&ADSRPTF      00496600
          LCLA &ADSRPID,&ADSRPIDL,&ADSRCDSC,&ADSRPRID,&ADSRSSID         00496700
&ADSRC    SETA &SR21OFF+0                'SR21' ID                      00496800
&ADSRCRL  SETA &SR21OFF+4                Architectural level            00496900
&ADSRCID  SETA &SR21OFF+6                Component ID                   00497000
&ADSRFLC  SETA &SR21OFF+15               Flags                          00497100
&ADSRLVL  SETA &SR21OFF+16               Component release level        00497200
&ADSRPTF  SETA &SR21OFF+20               Service Level                  00497300
&ADSRPID  SETA &SR21OFF+28               PID                            00497400
&ADSRPIDL SETA &SR21OFF+36               PID level                      00497500
&ADSRCDSC SETA &SR21OFF+44               Component Description          00497600
&ADSRPRID SETA &SR21OFF+84               Program ID                     00497700
&ADSRSSID SETA &SR21OFF+92               Subsystem ID                   00497800
&SR21LEN  SETA  100                      Length of SR2.1                00497900
&SAVEAREA SETA  &SR21OFF+&SR21LEN        Offset to 100-byte Savearea    00498000
&SRHEADER SETA  &SAVEAREA                Length of SR1, SR2, SR2.1      00498100
          LCLA  &SR3CUR,&SR3END,&SR4CUR,&SR4END,&SR5CUR,&SR5END         00498200
          LCLA  &PR@OUT,&PR@OUT1,&PR@HEX,&SRLIST                        00498300
          LCLA  &SR3LEN,&SR4LEN,&SR5LEN,&SR3PLEN                        00498400
&SR3CUR   SETA  &SAVEAREA+0              Current loc for SR3            00498500
&SR3END   SETA  &SAVEAREA+4              End of SR3 section             00498600
&SR4CUR   SETA  &SAVEAREA+8              Current loc for SR4            00498700
&SR4END   SETA  &SAVEAREA+12             End of SR4 section             00498800
&SR5CUR   SETA  &SAVEAREA+16             Current loc for SR5            00498900
&SR5END   SETA  &SAVEAREA+20             End of SR5 section             00499000
&SRLIST   SETA  &SAVEAREA+24             Use for SYMREC List form       00499100
&PR@OUT1  SETA  &SAVEAREA+33             Work area for convert          00499200
&PR@HEX   SETA  &SAVEAREA+40             TR table for convert           00499300
&SR3LEN   SETA  &SAVEAREA+56             Length of primary area         00499400
&SR4LEN   SETA  &SAVEAREA+58             Length of secondary area       00499500
&SR5LEN   SETA  &SAVEAREA+60             Length of variable area        00499600
&SR3PLEN  SETA  &SAVEAREA+62             Length used for PIDS/ part     00499700
&PR@OUT   SETA  &SAVEAREA+68             Work area for convert          00499800
&SAVEALEN SETA  100                                                     00499900
&SR2LEN   SETA  &SR21OFF-&SR2OFF         Length of SR2                  00500000
&SR21LEN  SETA  &SAVEAREA-&SR21OFF       Length of SR2.1                00500100
&SR3OFF   SETA  &SAVEAREA+&SAVEALEN      Offset to SR3                  00500200
.*                                                                      00500300
.* Determine SDB key string and length to use                           00500400
         AIF   ('&XSDBKEY' EQ 'NO_SDBKEY').NOSDB    Is SDBKEY specified 00500500
         AIF   ('&SDBKEY' EQ '').NOSDB    Is SDBKEY specified           00500600
         AIF   ('&SDBKEY'(1,1) EQ '''').QUOSDB Start with quote         00500700
         AIF   ('&SDBKEY' NE 'SDBAB_S').SDB2 Is it AB_S                 00500800
&KEYVAL  SETC  'AB/S'                    Use AB/S                       00500900
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00501000
         AGO   .NOS5                                                    00501100
.SDB2    AIF   ('&SDBKEY' NE 'SDBAB_U').SDB3 Is it AB_U                 00501200
&KEYVAL  SETC  'AB/U'                    Use AB/U                       00501300
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00501400
         AGO   .NOS5                                                    00501500
.SDB3    AIF   ('&SDBKEY' NE 'SDBADRS').SDB4 Is it ADRS                 00501600
&KEYVAL  SETC  'ADRS/'                   Use ADRS/                      00501700
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00501800
         AGO   .NOS5                                                    00501900
.SDB4    AIF   ('&SDBKEY' NE 'SDBBOMS').SDB5 Is it BOMS                 00502000
&KEYVAL  SETC  'BOMS/'                   Use BOMS/                      00502100
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00502200
         AGO   .NOS5                                                    00502300
.SDB5    AIF   ('&SDBKEY' NE 'SDBBPS').SDB6 Is it BPS                   00502400
&KEYVAL  SETC  'BPS/'                    Use BPS/                       00502500
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00502600
         AGO   .NOS5                                                    00502700
.SDB6    AIF   ('&SDBKEY' NE 'SDBCLS').SDB7 Is it CLS                   00502800
&KEYVAL  SETC  'CLS/'                    Use CLS/                       00502900
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00503000
         AGO   .NOS5                                                    00503100
.SDB7    AIF   ('&SDBKEY' NE 'SDBDEVS').SDB8 Is it DEVS                 00503200
&KEYVAL  SETC  'DEVS/'                   Use DEVS/                      00503300
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00503400
         AGO   .NOS5                                                    00503500
.SDB8    AIF   ('&SDBKEY' NE 'SDBECAS').SDB9 Is it ECAS                 00503600
&KEYVAL  SETC  'ECAS/'                   Use ECAS/                      00503700
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00503800
         AGO   .NOS5                                                    00503900
.SDB9    AIF   ('&SDBKEY' NE 'SDBFDS').SDB10 Is it FDS                  00504000
&KEYVAL  SETC  'FDS/'                    Use FDS/                       00504100
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00504200
         AGO   .NOS5                                                    00504300
.SDB10   AIF   ('&SDBKEY' NE 'SDBFEAS').SDB11 Is it FEAS                00504400
&KEYVAL  SETC  'FEAS/'                   Use FEAS/                      00504500
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00504600
         AGO   .NOS5                                                    00504700
.SDB11   AIF   ('&SDBKEY' NE 'SDBFLDS').SDB12 Is it FLDS                00504800
&KEYVAL  SETC  'FLDS/'                   Use FLDS/                      00504900
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00505000
         AGO   .NOS5                                                    00505100
.SDB12   AIF   ('&SDBKEY' NE 'SDBHL_D').SDB13 Is it HD_D                00505200
&KEYVAL  SETC  'HL/D'                    Use HL/D                       00505300
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00505400
         AGO   .NOS5                                                    00505500
.SDB13   AIF   ('&SDBKEY' NE 'SDBHL_S').SDB14 Is it HD_S                00505600
&KEYVAL  SETC  'HL/S'                    Use HL/S                       00505700
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00505800
         AGO   .NOS5                                                    00505900
.SDB14   AIF   ('&SDBKEY' NE 'SDBIOPS').SDB15 Is it IOPS                00506000
&KEYVAL  SETC  'IOPS/'                   Use IOPS/                      00506100
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00506200
         AGO   .NOS5                                                    00506300
.SDB15   AIF   ('&SDBKEY' NE 'SDBLVLS').SDB16 Is it LVLS                00506400
&KEYVAL  SETC  'LVLS/'                   Use LVLS/                      00506500
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00506600
         AGO   .NOS5                                                    00506700
.SDB16   AIF   ('&SDBKEY' NE 'SDBMAUS').SDB17 Is it MAUS                00506800
&KEYVAL  SETC  'MAUS/'                   Use MAUS/                      00506900
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00507000
         AGO   .NOS5                                                    00507100
.SDB17   AIF   ('&SDBKEY' NE 'SDBMEP').SDB18 Is it MEP                  00507200
&KEYVAL  SETC  'MEP/'                    Use MEP/                       00507300
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00507400
         AGO   .NOS5                                                    00507500
.SDB18   AIF   ('&SDBKEY' NE 'SDBMIUS').SDB19 Is it MIUS                00507600
&KEYVAL  SETC  'MIUS/'                   Use MIUS/                      00507700
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00507800
         AGO   .NOS5                                                    00507900
.SDB19   AIF   ('&SDBKEY' NE 'SDBMS').SDB20 Is it MS                    00508000
&KEYVAL  SETC  'MS/'                     Use MS/                        00508100
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00508200
         AGO   .NOS5                                                    00508300
.SDB20   AIF   ('&SDBKEY' NE 'SDBOPCS').SDB21 Is it OPCS                00508400
&KEYVAL  SETC  'OPCS/'                   Use OPCS/                      00508500
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00508600
         AGO   .NOS5                                                    00508700
.SDB21   AIF   ('&SDBKEY' NE 'SDBOVS').SDB22 Is it OVS                  00508800
&KEYVAL  SETC  'OVS/'                    Use OVS/                       00508900
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00509000
         AGO   .NOS5                                                    00509100
.SDB22   AIF   ('&SDBKEY' NE 'SDBPCSS').SDB23 Is it PCSS                00509200
&KEYVAL  SETC  'PCSS/'                   Use PCSS/                      00509300
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00509400
         AGO   .NOS5                                                    00509500
.SDB23   AIF   ('&SDBKEY' NE 'SDBPIDS').SDB24 Is it PIDS                00509600
&KEYVAL  SETC  'PIDS/'                   Use PIDS/                      00509700
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00509800
         AGO   .NOS5                                                    00509900
.SDB24   AIF   ('&SDBKEY' NE 'SDBPNS').SDB25 Is it PNS                  00510000
&KEYVAL  SETC  'PNS/'                    Use PNS/                       00510100
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00510200
         AGO   .NOS5                                                    00510300
.SDB25   AIF   ('&SDBKEY' NE 'SDBPRCS').SDB26 Is it PRCS                00510400
&KEYVAL  SETC  'PRCS/'                     Use PRCS/                    00510500
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00510600
         AGO   .NOS5                                                    00510700
.SDB26   AIF   ('&SDBKEY' NE 'SDBPTFS').SDB27 Is it PTFS                00510800
&KEYVAL  SETC  'PTFS/'                     Use PTFS/                    00510900
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00511000
         AGO   .NOS5                                                    00511100
.SDB27   AIF   ('&SDBKEY' NE 'SDBPUBS').SDB28 Is it PUBS                00511200
&KEYVAL  SETC  'PUBS/'                   Use PUBS/                      00511300
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00511400
         AGO   .NOS5                                                    00511500
.SDB28   AIF   ('&SDBKEY' NE 'SDBPZFS').SDB29 Is it PZFS                00511600
&KEYVAL  SETC  'PZFS/'                   Use PZFS/                      00511700
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00511800
         AGO   .NOS5                                                    00511900
.SDB29   AIF   ('&SDBKEY' NE 'SDBREAS').SDB30 Is it REAS                00512000
&KEYVAL  SETC  'REAS/'                   Use REAS/                      00512100
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00512200
         AGO   .NOS5                                                    00512300
.SDB30   AIF   ('&SDBKEY' NE 'SDBRECFM').SDB31 Is it RECFM              00512400
&KEYVAL  SETC  'RECFM/'                  Use RECFM/                     00512500
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00512600
         AGO   .NOS5                                                    00512700
.SDB31   AIF   ('&SDBKEY' NE 'SDBRECO').SDB32 Is it RECO                00512800
&KEYVAL  SETC  'RECO/'                   Use RECO/                      00512900
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00513000
         AGO   .NOS5                                                    00513100
.SDB32   AIF   ('&SDBKEY' NE 'SDBRECS').SDB33 Is it RECS                00513200
&KEYVAL  SETC  'RECS/'                   Use RECS/                      00513300
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00513400
         AGO   .NOS5                                                    00513500
.SDB33   AIF   ('&SDBKEY' NE 'SDBREGS').SDB34 Is it REGS                00513600
&KEYVAL  SETC  'REGS/'                   Use REGS/                      00513700
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00513800
         AGO   .NOS5                                                    00513900
.SDB34   AIF   ('&SDBKEY' NE 'SDBREGS_CR').SDB35 Is it REGCR            00514000
&KEYVAL  SETC  'REGS/CR'                 Use REGS/CR                    00514100
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00514200
         AGO   .NOS5                                                    00514300
.SDB35   AIF   ('&SDBKEY' NE 'SDBREGS_FP').SDB36 Is it REGFP            00514400
&KEYVAL  SETC  'REGS/FP'                 Use REGS/FP                    00514500
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00514600
         AGO   .NOS5                                                    00514700
.SDB36   AIF   ('&SDBKEY' NE 'SDBREGS_GR').SDB37 Is it REGGR            00514800
&KEYVAL  SETC  'REGS/GR'                 Use REGS/GR                    00514900
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00515000
         AGO   .NOS5                                                    00515100
.SDB37   AIF   ('&SDBKEY' NE 'SDBRIDS').SDB38 Is it RIDS                00515200
&KEYVAL  SETC  'RIDS/'                   Use RIDS/                      00515300
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00515400
         AGO   .NOS5                                                    00515500
.SDB38   AIF   ('&SDBKEY' NE 'SDBRIDSL').SDB39 Is it RIDSL              00515600
&KEYVAL  SETC  'RIDS/'                   Use RIDS/                      00515700
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00515800
         AGO   .NOS5                                                    00515900
.SDB39   AIF   ('&SDBKEY' NE 'SDBRIDSR').SDB40 Is it RIDSR              00516000
&KEYVAL  SETC  'RIDS/'                   Use RIDS/                      00516100
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00516200
         AGO   .NOS5                                                    00516300
.SDB40   AIF   ('&SDBKEY' NE 'SDBRPQS').SDB41 Is it RPQS                00516400
&KEYVAL  SETC  'RPQS/'                   Use RPQS/                      00516500
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00516600
         AGO   .NOS5                                                    00516700
.SDB41   AIF   ('&SDBKEY' NE 'SDBSIG').SDB42 Is it SIG                  00516800
&KEYVAL  SETC  'SIG/'                    Use SIG/                       00516900
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00517000
         AGO   .NOS5                                                    00517100
.SDB42   AIF   ('&SDBKEY' NE 'SDBVALU').SDB43 Is it VALU                00517200
&KEYVAL  SETC  'VALU/'                   Use VALU/                      00517300
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00517400
         AGO   .NOS5                                                    00517500
.SDB43   AIF   ('&SDBKEY' NE 'SDBVALU_B').SDB44 Is it VALUB             00517600
&KEYVAL  SETC  'VALU/B'                  Use VALU/B                     00517700
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00517800
         AGO   .NOS5                                                    00517900
.SDB44   AIF   ('&SDBKEY' NE 'SDBVALU_C').SDB45 Is it VALUC             00518000
&KEYVAL  SETC  'VALU/C'                  Use VALU/C                     00518100
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00518200
         AGO   .NOS5                                                    00518300
.SDB45   AIF   ('&SDBKEY' NE 'SDBVALU_H').SDB46 Is it VALUH             00518400
&KEYVAL  SETC  'VALU/H'                  Use VALU/H                     00518500
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00518600
         AGO   .NOS5                                                    00518700
.SDB46   AIF   ('&SDBKEY' NE 'SDBWS_D').SDB47 Is it WS_D                00518800
&KEYVAL  SETC  'WS/D'                    Use WS/D                       00518900
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00519000
         AGO   .NOS5                                                    00519100
.SDB47   AIF   ('&SDBKEY' NE 'SDBWS_E').SDB48 Is it WS_E                00519200
&KEYVAL  SETC  'WS/E'                    Use WS/E                       00519300
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00519400
         AGO   .NOS5                                                    00519500
.SDB48   AIF   ('&SDBKEY' NE 'SDBREGS_AR').SDB49 Is it REGS_AR          00519600
&KEYVAL  SETC  'REGS/AR'                 Use REGS/AR                    00519700
&KEYLEN  SETA  K'&KEYVAL                 Get length                     00519800
         AGO   .NOS5                                                    00519900
.SDB49   ANOP             ..... no more choices .....                   00520000
        MNOTE 8,' "SDBKEY=&SDBKEY" ARGUMENT 1 IS AN UNKNOWN KEYWORD.'   00520100
&ZMACRET SETA  8                                                        00520200
         AGO   .ENDSR                                                   00520300
.QUOSDB  ANOP                             Starts with quote             00520400
&KEYVAL  SETC  '&SDBKEY'(2,K'&SDBKEY-2)   Get rid of quotes             00520500
&KEYLEN  SETA  K'&SDBKEY-2                Get length                    00520600
         AGO   .NOS5                                                    00520700
.NOSDB   ANOP                                                           00520800
         AIF   ('&XS5KEY' EQ 'NO_S5KEY').NOS5  Is S5KEY specified       00520900
         AIF   ('&S5KEY' EQ '').NOS5  Is S5KEY specified                00521000
         AIF   ('&S5KEY'(1,1) EQ '''').QUOS5  Start with quote          00521100
         AIF   ('&S5KEY' NE 'S5EBCDIC').S51 Is S5EBCDIC specified       00521200
&KEYVAL  SETC  'X''F000'''                Get key                       00521300
&KEYLEN  SETA  2                          Key has length of 2           00521400
         AGO   .NOS5                                                    00521500
.S51     ANOP                                                           00521600
         AIF   ('&S5KEY' NE 'S5HEX').S52      Is S5HEX specified        00521700
&KEYVAL  SETC  'X''FF00'''                Get key                       00521800
&KEYLEN  SETA  2                          Key has length of 2           00521900
         AGO   .NOS5                                                    00522000
.S52     ANOP                                                           00522100
&KEYVAL  SETC  '&S5KEY'                   Get key                       00522200
&KEYLEN  SETA  2                          Key has length of 2           00522300
         AGO   .NOS5                                                    00522400
.QUOS5   ANOP                             Starts with quote             00522500
&KEYVAL  SETC  'X&S5KEY'                  Get rid of quotes             00522600
&KEYLEN  SETA  2                          Get length                    00522700
         AGO   .NOS5                                                    00522800
.NOS5    ANOP                                                           00522900
.*                                                                      00523000
.* Get addressability to SR                                             00523100
.*                                                                      00523200
         AIF   ('&SR' EQ '').SRREGE       SR not specified, use R1      00523300
         AIF   ('&XSR' EQ 'SR_IN_R1').SRREGE Default provided           00523400
         AIF   ('&SR'(1,1) EQ '(').SRREG  Is SR a reg                   00523500
         &LA   1,&SR                      Get SR address                00523600
         AGO   .SRREGE                                                  00523700
.SRREG   ANOP                                                           00523800
&TEMPC   SETC  '&SR'(2,K'&SR-2)                                         00523900
         LR    1,&TEMPC                   Get SR reg                    00524000
         AIF   ('&SYSASCE' EQ 'P').SRREGE                               00524100
         CPYA  1,&TEMPC                   Get SR ALET                   00524200
.SRREGE ANOP                                                            00524300
         AIF   ('&ZXINITIAL' NE 'INPUT').RESET Is INIT specified        00524400
.*If INIT                                                               00524500
.* Zero SR1, SR2, SR2.1                                                 00524600
.*                                                                      00524700
         XC    0(&SRHEADER.,1),0(1)       Clear SR1, SR2, SR2.1         00524800
         XC    &SRHEADER.(100,1),&SRHEADER.(1)  Clear work area    @P2C 00524900
.*                                                                      00525000
.* Initialize known parts of SR, SR2, SR2.1                             00525100
.*                                                                      00525200
.* The following uses the CL4 constant so that an extra literal         00525300
.* is not produced                                                      00525400
         MVC   &ADSRID.(2,1),=CL4'SR21'   Set ID to "SR"                00525500
         AIF   ('&DAE' NE  'NO').SKIPOI   DAE=NO?                  @01A 00525600
         OI    &ADSRFL1.(1),X'04'         Set DAE=NO               @01A 00525700
.SKIPOI  ANOP                                                      @01A 00525800
         MVC   &ADSRC.(4,1),=CL4'SR21'    Set section 2.1 ID            00525900
         MVC   &ADSRCRL.(2,1),=CL2'10'    Set Architecture ID           00526000
&T1      SETC  '&SR2LEN'                                                00526100
         MVC   &ADSRL.(2,1),=FL2'&T1'     Set Length of Section 2       00526200
&T1      SETC  '&SR21LEN'                                               00526300
         MVC   &ADSRCSL.(2,1),=FL2'&T1'   Set Length of Section 2.1     00526400
&T1      SETC  '&SR21OFF'                                               00526500
         MVC   &ADSRCSO.(2,1),=FL2'&T1'   Set Offset to Section 2.1     00526600
&T1      SETC  '&SR3OFF'                                                00526700
         MVC   &ADSRDBO.(2,1),=FL2'&T1'   Set Offset to Section 3       00526800
.* Process SR3                                                          00526900
         AIF   ('&PRIMLEN'(1,1) EQ '(').PLEN0   In a reg?               00527000
         AIF   (T'&XPRIMLEN NE 'N').NONUM1                              00527100
         LA    14,&XPRIMLEN               Get length                    00527200
         AGO   .PLEN1                                                   00527300
.NONUM1  ANOP                                                           00527400
         LH    14,&PRIMLEN(1)             Get Length                    00527500
         AGO   .PLEN1                                                   00527600
.PLEN0   ANOP                             Primlen in a reg              00527700
&TEMPC   SETC  '&PRIMLEN'(2,K'&PRIMLEN-2)                               00527800
         LH    14,0(,&TEMPC.)             Fetch length                  00527900
.PLEN1   ANOP                                                           00528000
         STH   14,&SR3LEN.(,1)            Save length                   00528100
&TPIDL   SETA  0                          Assume no PIDS/               00528200
         AIF   ('&PID' EQ '').PNOPID      See if PID specified          00528300
&TPIDL   SETA  8                          Length of PID                 00528400
&TPID    SETC  '&XPID'                                                  00528500
         AIF   ('&PID'(1,1) NE '(').DOPID In a reg                      00528600
&TPID    SETC  '0&PID'                                                  00528700
         AGO   .DOPID                                                   00528800
.PNOPID  AIF   ('&COMPID' EQ '').PNOCOMP  See if COMPID specified       00528900
&TPIDL   SETA  9                          Length of COMPID              00529000
&TPID    SETC  '&XCOMPID'                                               00529100
         AIF   ('&COMPID'(1,1) NE '(').DOPID In a reg                   00529200
&TPID    SETC  '0&COMPID'                                               00529300
         AGO   .DOPID                                                   00529400
.PNOCOMP ANOP                             Program must be specified     00529500
&TPIDL   SETA  8                          Length of PROGRAM             00529600
&TPID    SETC  '&XPROGRAM'                                              00529700
         AIF   ('&PROGRAM'(1,1) NE '(').DOPID In a reg                  00529800
&TPID    SETC  '0&PROGRAM'                                              00529900
.DOPID   ANOP                                                           00530000
         &LA   15,&SR3OFF.(,1)            Set to start of Primary area  00530100
         AIF   (&TPIDL EQ 0).PNOPIDL                                    00530200
         MVC   0(5,15),=CL5'PIDS/'        Move in required PIDS/        00530300
         MVC   5(&TPIDL.,15),&TPID        Move in PIDS/COMPID/PROGRAM   00530400
&L1      SETA  &TPIDL+5                                                 00530500
         MVI   &L1.(15),C' '              Blank out next character      00530600
&L1      SETA  &L1+1                      Get past blank                00530700
         MVI   &SR3PLEN+1(1),&L1          Save length used for PIDS/    00530800
         LA    0,&L1.(,15)                Get next available position   00530900
         ST    0,&SR3CUR.(,1)             Save position in SR3          00531000
         AGO   .PNOPID2                                                 00531100
.PNOPIDL ST    15,&SR3CUR.(,1)            Save position in SR3          00531200
.PNOPID2 ALR   15,14                      Find end of range             00531300
         ST    15,&SR3END.(,1)            Save end of SR3               00531400
         ST    15,&SR4CUR.(,1)            Also start of SR4             00531500
         LR    0,15                       Copy start of SR4             00531600
         SR    0,1                        Decrease by start of SR       00531700
         STH   0,&ADSRROSA.(,1)           Save offset to SR4            00531800
.* Process SR4                                                          00531900
         AIF   ('&XSECLEN' EQ '0').NOSLEN3 Not specified                00532000
         AIF   ('&SECLEN'(1,1) EQ '(').SLEN0   In a reg                 00532100
         AIF   (T'&XSECLEN NE 'N').SNONUM1                              00532200
         LA    14,&XSECLEN                Get length                    00532300
         AGO   .SLEN1                                                   00532400
.SNONUM1 ANOP                                                           00532500
         LH    14,&SECLEN(1)              Get Length                    00532600
         AGO   .SLEN1                                                   00532700
.SLEN0   ANOP                             Seclen in a reg               00532800
&TEMPC   SETC  '&SECLEN'(2,K'&SECLEN-2)                                 00532900
         LH    14,0(,&TEMPC.)             Fetch length                  00533000
.SLEN1   ANOP                                                           00533100
         STH   14,&SR4LEN.(,1)            Save length                   00533200
         AR    15,14                      Add length                    00533300
.NOSLEN3 ANOP                                                           00533400
         ST    15,&SR4END.(,1)            Save end of SR4               00533500
         ST    15,&SR5CUR.(,1)            Also start of SR5             00533600
         LR    0,15                       Copy start of SR5             00533700
         SR    0,1                        Decrease by start of SR       00533800
         STH   0,&ADSRRONA.(,1)           Save offset to SR5            00533900
.* Process SR5                                                          00534000
         AIF   ('&XVARLEN' EQ '0').NOVLEN3 Not specified                00534100
         AIF   ('&VARLEN'(1,1) EQ '(').VLEN0   In a reg                 00534200
         AIF   (T'&XVARLEN NE 'N').VNONUM1                              00534300
         LA    14,&XVARLEN                Get length                    00534400
         AGO   .VLEN1                                                   00534500
.VNONUM1 ANOP                                                           00534600
         LH    14,&VARLEN(1)              Get Length                    00534700
         AGO   .VLEN1                                                   00534800
.VLEN0   ANOP                             Varlen in a reg               00534900
&TEMPC   SETC  '&VARLEN'(2,K'&VARLEN-2)                                 00535000
         LH    14,0(,&TEMPC.)             Fetch length                  00535100
.VLEN1   ANOP                                                           00535200
         STH   14,&SR5LEN.(,1)            Save length                   00535300
         ALR   15,14                      Find end of range             00535400
.NOVLEN3 ANOP                                                           00535500
         ST    15,&SR5END.(,1)            Save end of SR5               00535600
         AIF   ('&XNOCONVERTS' NE 'CONVERSIONS').NOCONV Convert wanted  00535700
         MVC   &PR@HEX.(16,1),=CL16'0123456789ABCDEF' Set TR string     00535800
.NOCONV  ANOP                                                           00535900
.* Fillin compdsc                                                       00536000
.*   If specified then LAE/MVC                                          00536100
         AIF  ('&XCOMPDSC' EQ 'NO_COMPDSC').NOCDSC  COMPDSC specified   00536200
         AIF  ('&COMPDSC' EQ '').NOCDSC  COMPDSC specified              00536300
&TEMPC   SETC  '&COMPDSC(1)'                                            00536400
         AIF   ('&COMPDSC'(1,1) NE '(').CDSCNR                          00536500
&TEMPC   SETC  '0&COMPDSC'                                              00536600
.CDSCNR  MVC   &ADSRCDSC.(32,1),&TEMPC    Move COMPDSC into SR2.1       00536700
.NOCDSC  ANOP                                                           00536800
.* Fillin problem                                                       00536900
         AIF   ('&XPROBLEM' EQ 'NO_PROBLEM').NOPROB                     00537000
         AIF   ('&PROBLEM' EQ '').NOPROB                                00537100
&TEMPC   SETC  '&PROBLEM(1)'                                            00537200
         AIF   ('&PROBLEM'(1,1) NE '(').PROBNR                          00537300
&TEMPC   SETC  '0&PROBLEM'                                              00537400
.PROBNR  MVC   &ADSRPRID.(8,1),&TEMPC     Move PROBLEM into SR2.1       00537500
.NOPROB  ANOP                                                           00537600
.* Fillin SERVLEV                                                       00537700
         AIF   ('&XSERVLEV' EQ 'NO_SERVICE_LEVEL').NOSERVL              00537800
         AIF   ('&SERVLEV' EQ '').NOSERVL                               00537900
&TEMPC   SETC  '&SERVLEV(1)'                                            00538000
         AIF   ('&SERVLEV'(1,1) NE '(').SERVLNR                         00538100
&TEMPC   SETC  '0&SERVLEV'                                              00538200
.SERVLNR MVC   &ADSRPTF.(8,1),&TEMPC      Move SERVLEV into SR2.1       00538300
.NOSERVL ANOP                                                           00538400
.* Fillin IBM no/yes                                                    00538500
.*   If NO then OI bit                                                  00538600
         AIF   ('&IBM' EQ 'YES').IBMYES                                 00538700
         OI    &ADSRFLC.(1),X'80'         Indicate non-IBM SR           00538800
.IBMYES  ANOP                                                           00538900
.* Fillin Program/Proglev                                               00539000
.*   If specified then LAE/MVC                                          00539100
         AIF   ('&XPROGRAM' EQ 'NO_PROGRAM').NOPRGM                     00539200
         AIF   ('&PROGRAM' EQ '').NOPRGM                                00539300
&TEMPC   SETC  '&PROGRAM(1)'                                            00539400
         AIF   ('&PROGRAM'(1,1) NE '(').PRGMNR                          00539500
&TEMPC   SETC  '0&PROGRAM'                                              00539600
.PRGMNR  MVC   &ADSRPID.(8,1),&TEMPC      Move PROGRAM into SR2.1       00539700
.NOPRGM  ANOP                                                           00539800
         AIF   ('&XPROGLEV' EQ 'NO_PROGLEV').NOPRGL                     00539900
         AIF   ('&PROGLEV' EQ '').NOPRGL                                00540000
&TEMPC   SETC  '&PROGLEV(1)'                                            00540100
         AIF   ('&PROGLEV'(1,1) NE '(').PRGLNR                          00540200
&TEMPC   SETC  '0&PROGLEV'                                              00540300
.PRGLNR  MVC   &ADSRPIDL.(8,1),&TEMPC     Move PROGLEV into SR2.1       00540400
.NOPRGL  ANOP                                                           00540500
.* Fillin Compid/Complev                                                00540600
.*   If specified then LAE/MVC                                          00540700
         AIF   ('&COMPID' EQ '').NOCMPI                                 00540800
&TEMPC   SETC  '&COMPID(1)'                                             00540900
         AIF   ('&COMPID'(1,1) NE '(').CMPINR                           00541000
&TEMPC   SETC  '0&COMPID'                                               00541100
.CMPINR  MVC   &ADSRCID.(9,1),&TEMPC      Move COMPID into SR2.1        00541200
.NOCMPI  ANOP                                                           00541300
         AIF   ('&COMPLEV' EQ '').NOCMPL                                00541400
&TEMPC   SETC  '&COMPLEV(1)'                                            00541500
         AIF   ('&COMPLEV'(1,1) NE '(').CMPLNR                          00541600
&TEMPC   SETC  '0&COMPLEV'                                              00541700
.CMPLNR  MVC   &ADSRLVL.(4,1),&TEMPC      Move COMPLEV into SR2.1       00541800
.NOCMPL  ANOP                                                           00541900
.* Fillin Subsystem                                                     00542000
.*   If specified then LAE/MVC                                          00542100
         AIF   ('&XSUBSYSTEM' EQ 'NO_SUBSYSTEM').NOSUBS                 00542200
         AIF   ('&SUBSYSTEM' EQ '').NOSUBS                              00542300
&TEMPC   SETC  '&SUBSYSTEM(1)'                                          00542400
         AIF   ('&SUBSYSTEM'(1,1) NE '(').SUBSNR                        00542500
&TEMPC   SETC  '0&SUBSYSTEM'                                            00542600
.SUBSNR  MVC   &ADSRSSID.(8,1),&TEMPC     Move SUBSYSTEM into SR2.1     00542700
.NOSUBS  ANOP                                                           00542800
.* Fillin PID/PIDL                                                      00542900
.*   If specified then LAE/MVC                                          00543000
         AIF   ('&PID' EQ '').NOPID                                     00543100
&TEMPC   SETC  '&PID(1)'                                                00543200
         AIF   ('&PID'(1,1) NE '(').PIDNR                               00543300
&TEMPC   SETC  '0&PID'                                                  00543400
.PIDNR   MVC   &ADSRPID.(8,1),&TEMPC      Move PID into SR2.1           00543500
.NOPID   ANOP                                                           00543600
         AIF   ('&PIDLEVEL' EQ '').NOPIDL                               00543700
&TEMPC   SETC  '&PIDLEVEL(1)'                                           00543800
         AIF   ('&PIDLEVEL'(1,1) NE '(').PIDLNR                         00543900
&TEMPC   SETC  '0&PIDLEVEL'                                             00544000
.PIDLNR  MVC   &ADSRPIDL.(8,1),&TEMPC     Move PIDLEVEL into SR2.1      00544100
.NOPIDL  ANOP                                                           00544200
         AGO   .ENDSR                                                   00544300
.RESET   ANOP                                                           00544400
         AIF   ('&ZXRESET' NE 'INPUT').PRIM Is RESET specified          00544500
         AIF   ('&XPRIMLEN' EQ 'OLD_PRIMLEN').RPRIM1                    00544600
         AIF   ('&PRIMLEN'(1,1) EQ '(').RPLEN0  In a reg?               00544700
         AIF   (T'&XPRIMLEN NE 'N').RNONUM1                             00544800
         LA    14,&XPRIMLEN               Get length                    00544900
         AGO   .RPLEN1                                                  00545000
.RNONUM1 ANOP                                                           00545100
         LH    14,&PRIMLEN(1)             Get Length                    00545200
         AGO   .RPLEN1                                                  00545300
.RPLEN0  ANOP                             Primlen in a reg              00545400
&TEMPC   SETC  '&PRIMLEN'(2,K'&PRIMLEN-2)                               00545500
         LH    14,0(,&TEMPC.)             Fetch length                  00545600
.RPLEN1  ANOP                                                           00545700
         STH   14,&SR3LEN.(,1)            Save length                   00545800
         AGO   .RPRIM2                                                  00545900
.RPRIM1  ANOP                                                           00546000
         LH    14,&SR3LEN.(,1)            Fetch length                  00546100
.RPRIM2  ANOP                                                           00546200
         LA    0,&SR3OFF.(,1)             Get to start                  00546300
         AH    0,&SR3PLEN.(,1)            Get past potential PIDS/      00546400
         ST    0,&SR3CUR.(,1)             Save start address            00546500
         &LA   15,&SR3OFF.(14,1)          Find end of range             00546600
         ST    15,&SR3END.(,1)            Save end of SR3               00546700
         ST    15,&SR4CUR.(,1)            Also start of SR4             00546800
         AIF   ('&XPRIMLEN' EQ 'OLD_PRIMLEN').RPNOOFF                   00546900
         LR    0,15                       Copy start of SR4             00547000
         SR    0,1                        Decrease by start of SR       00547100
         STH   0,&ADSRROSA.(,1)           Save offset to SR4            00547200
.RPNOOFF AIF   ('&XSECLEN' EQ 'OLD_SECLEN').RSEC1 Not specified         00547300
         AIF   ('&SECLEN'(1,1) EQ '(').RSLEN0   In a reg                00547400
         AIF   (T'&XSECLEN NE 'N').RSNONUM1                             00547500
         LA    14,&XSECLEN                Get length                    00547600
         AGO   .RSLEN1                                                  00547700
.RSNONUM1 ANOP                                                          00547800
         LH    14,&SECLEN(1)              Get Length                    00547900
         AGO   .RSLEN1                                                  00548000
.RSLEN0  ANOP                             Seclen in a reg               00548100
&TEMPC   SETC  '&SECLEN'(2,K'&SECLEN-2)                                 00548200
         LH    14,0(,&TEMPC.)             Fetch length                  00548300
.RSLEN1  ANOP                                                           00548400
         STH   14,&SR4LEN.(,1)            Save length                   00548500
         AGO   .RSEC2                                                   00548600
.RSEC1   ANOP                                                           00548700
         AH    15,&SR4LEN.(,1)            Add in length                 00548800
         AGO   .NORSLEN3                                                00548900
.RSEC2   ANOP                                                           00549000
         AIF   ('&XSECLEN' EQ '0').NORSLEN3 Don't need to add if 0      00549100
         AR    15,14                      Add length                    00549200
.NORSLEN3 ANOP                                                          00549300
         ST    15,&SR4END.(,1)            Save end of SR4               00549400
         ST    15,&SR5CUR.(,1)            Also start of SR5             00549500
         AIF   ('&XSECLEN' NE 'OLD_SECLEN').RSOFF                       00549600
         AIF   ('&XPRIMLEN' EQ 'OLD_PRIMLEN').RSNOOFF                   00549700
.RSOFF   LR    0,15                       Copy start of SR5             00549800
         SR    0,1                        Decrease by start of SR       00549900
         STH   0,&ADSRRONA.(,1)           Save offset to SR5            00550000
.* Process SR5                                                          00550100
.RSNOOFF AIF   ('&XVARLEN' EQ 'OLD_VARLEN').RVAR1 Not specified         00550200
         AIF   ('&VARLEN'(1,1) EQ '(').RVLEN0   In a reg                00550300
         AIF   (T'&XVARLEN NE 'N').RVNONUM1                             00550400
         LA    14,&XVARLEN                Get length                    00550500
         AGO   .RVLEN1                                                  00550600
.RVNONUM1 ANOP                                                          00550700
         LH    14,&VARLEN(1)              Get Length                    00550800
         AGO   .RVLEN1                                                  00550900
.RVLEN0  ANOP                             Varlen in a reg               00551000
&TEMPC   SETC  '&VARLEN'(2,K'&VARLEN-2)                                 00551100
         LH    14,0(,&TEMPC.)             Fetch length                  00551200
.RVLEN1  ANOP                                                           00551300
         STH   14,&SR5LEN.(,1)            Save length                   00551400
         AGO   .RVAR2                                                   00551500
.RVAR1   ANOP                                                           00551600
         AH    15,&SR5LEN.(,1)            Add length of SR5             00551700
         AGO   .RNOVLEN3                                                00551800
.RVAR2   ANOP                                                           00551900
         AIF   ('&XVARLEN' EQ '0').RNOVLEN3                             00552000
         ALR   15,14                      Find end of range             00552100
.RNOVLEN3 ANOP                                                          00552200
         ST    15,&SR5END.(,1)            Save end of SR5               00552300
         AGO   .ENDSR                                                   00552400
.PRIM    AIF   ('&ZXCOMPLETE' EQ 'INPUT').COMP Is Complete specified    00552500
.*If PRIMARY ! SECONDARY ! VARIABLE                                     00552600
         AIF   ('&ZXPRIMARY' NE 'INPUT').SEC  Is primary specified      00552700
&CUR     SETC  '&SR3CUR'                  Use SR3 section               00552800
&END     SETC  '&SR3END'                                                00552900
         AGO   .ALL                                                     00553000
.SEC     AIF   ('&ZXSECONDARY' NE 'INPUT').VAR  Is secondary specified  00553100
&CUR     SETC  '&SR4CUR'                  Use SR4 section               00553200
&END     SETC  '&SR4END'                                                00553300
         AGO   .ALL                                                     00553400
.VAR     ANOP                             Must be VAR                   00553500
&CUR     SETC  '&SR5CUR'                  Use SR5 section               00553600
&END     SETC  '&SR5END'                                                00553700
.ALL     ANOP                                                           00553800
.*   Length = SDBKEY_LEN + LEN/LENVAR + 1 (for the blank)               00553900
.*     (this also works for k-l-d format for S5key)                     00554000
         L     15,&CUR.(,1)               Get current part              00554100
         AIF   ('&SYSASCE' EQ 'P').NOAR2                                00554200
         CPYA  15,1                       Get ALET too                  00554300
.NOAR2   ANOP                                                           00554400
         AIF   ('&XSDBSTRING' EQ 'NO_SDB_STRING').NOSDBSTR              00554500
         AIF   ('&SDBSTRING' EQ '').NOSDBSTR                            00554600
&T1      SETC  'DEFINED_LENGTH'                                         00554700
       AIF   ('&XSDBLENVAR' NE '&T1' AND '&SDBLENVAR' NE '').DOSDBLENV  00554800
         AIF   ('&XSDBLEN' EQ '&T1').NOSDBLEN Is SDBLEN specified       00554900
         AIF   ('&SDBLEN' EQ '').NOSDBLEN Is SDBLEN specified           00555000
         AIF   ('&SDBLEN'(1,1) EQ '(').SDBLENREG Yes, but in a reg      00555100
         LA    14,&SDBLEN(1)              Get length                    00555200
         AGO   .ENDSDBLEN                                               00555300
.SDBLENREG ANOP                           SDBLEN in a reg               00555400
         LR    14,&SDBLEN(1)              Get length                    00555500
         AGO   .ENDSDBLEN                                               00555600
.DOSDBLENV ANOP                           SDBLENVAR specified           00555700
         AIF   ('&SDBLENVAR'(1,1) EQ '(').SDBLENVREG                    00555800
         LH    14,&SDBLENVAR(1)           Get length                    00555900
         AGO   .ENDSDBLEN                                               00556000
.SDBLENVREG ANOP                          SDBLENVAR in reg              00556100
         LH    14,0&SDBLENVAR             Get length                    00556200
         AGO   .ENDSDBLEN                                               00556300
.NOSDBLEN AIF  ('&XSDBSTRING' EQ 'NO_SDB_STRING').NOSDB9                00556400
          AIF  ('&SDBSTRING' EQ '').NOSDB9                              00556500
         LA    14,L'&SDBSTRING            Use L-con                     00556600
         AGO   .ENDSDBLEN                                               00556700
.NOSDB9  ANOP                             No SDBSTRING keyword          00556800
         SLR   14,14                      Use length of 0               00556900
.ENDSDBLEN ANOP                                                         00557000
.* Calculate total length                                               00557100
.* If test wanted then test for room                                    00557200
.*   If SRncur+Length>SRnend then no room                               00557300
         AIF   ('&XTYPE' NE 'TEST').NOTEST9 Test needed                 00557400
         LA    0,1(14,15)                 Get needed end position       00557500
         C     0,&END.(,1)                Will it fit                   00557600
         BNL   JJ&S                       No, skip fill-in              00557700
.NOTEST9 ANOP                                                           00557800
&TEMPC   SETC  '&SDBSTRING(1)'                                          00557900
         AIF   ('&SDBSTRING'(1,1) NE '(').SDBNR                         00558000
&TEMPC   SETC  '0&SDBSTRING'                                            00558100
.SDBNR   ANOP                                                           00558200
         BCTR  14,0                       Decrement for execute         00558300
         EX    14,MVC3&S                  Move into proper place        00558400
         B     LL&S                       Skip MVC definition           00558500
MVC3&S   MVC   0(*-*,15),&TEMPC           MVC definition for move       00558600
LL&S     DS    0H                                                       00558700
         LA    15,1(14,15)                Update Current pointer        00558800
         MVI   0(15),C' '                 Blank out next position       00558900
         LA    15,1(,15)                  Update Current pointer        00559000
         ST    15,&CUR.(,1)               Save Current pointer          00559100
         AIF   ('&XTYPE' NE 'TEST').NOTEST8  See if TEST was specified  00559200
JJ&S     DS    0H                                                       00559300
.NOTEST8 ANOP                                                           00559400
         AIF   ('&XSDBKEY' EQ 'NO_SDBKEY').ENDSR                        00559500
         AIF   ('&SDBKEY' EQ '').ENDSR                                  00559600
.NOSDBSTR ANOP                                                          00559700
&T1      SETC  'DEFINED_LENGTH'                                         00559800
         AIF   ('&XLENVAR' NE '&T1' AND '&LENVAR' NE '').DOLENV         00559900
         AIF   ('&XLEN' EQ '&T1').NOLEN  Is LEN specified               00560000
         AIF   ('&LEN' EQ '').NOLEN  Is LEN specified                   00560100
         AIF   ('&LEN'(1,1) EQ '(').LENREG  Yes, but in a reg           00560200
         LA    14,&LEN(1)                 Get length                    00560300
         AGO   .ENDLEN                                                  00560400
.LENREG  ANOP                             LEN in a reg                  00560500
         LR    14,&LEN(1)                 Get length                    00560600
         AGO   .ENDLEN                                                  00560700
.DOLENV  ANOP                             LENVAR specified              00560800
         AIF   ('&LENVAR'(1,1) EQ '(').LENVREG                          00560900
         LH    14,&LENVAR(1)              Get length                    00561000
         AGO   .ENDLEN                                                  00561100
.LENVREG ANOP                             LENVAR in reg                 00561200
         LH    14,0&LENVAR                Get length                    00561300
         AGO   .ENDLEN                                                  00561400
.NOLEN   AIF   ('&DATA' EQ '').NODATA     Length not specified          00561500
         LA    14,L'&DATA                 Use L-con                     00561600
         AGO   .ENDLEN                                                  00561700
.NODATA  ANOP                             No DATA keyword               00561800
         SLR   14,14                      Use length of 0               00561900
.ENDLEN  ANOP                                                           00562000
.* Calculate total length                                               00562100
.* If test wanted then test for room                                    00562200
.*   If SRncur+Length>SRnend then no room                               00562300
         AIF   ('&XTYPE' NE 'TEST').NOTEST Test needed                  00562400
         AIF   ('&XS5KEY' EQ 'NO_S5KEY').NOS54                          00562500
         AIF   ('&S5KEY' EQ '').NOS54                                   00562600
&L1      SETA  &KEYLEN+2                                                00562700
         AGO   .TOTLEN                                                  00562800
.NOS54   ANOP                                                           00562900
&L1      SETA  &KEYLEN+1                                                00563000
.TOTLEN  ANOP                                                           00563100
         AIF   ('&XCONVERT' NE 'YES' OR '&KEYVAL' NE 'AB/U').N          00563200
         AIF   ('&XS5KEY' NE 'NO_S5KEY' AND '&S5KEY' NE '').N           00563300
&L1      SETA  &L1+4                                                    00563400
         LA    0,&L1.(,15)                Get needed end position       00563500
         AGO   .NOCONV2                   End position is known         00563600
.N       ANOP                                                           00563700
         LA    0,&L1.(14,15)              Get needed end position       00563800
.NOTABU  ANOP                                                           00563900
         AIF   ('&XCONVERT' NE 'YES').NOCONV2 Convert wanted            00564000
         AR    0,14                       Need more bytes for total     00564100
.NOCONV2 ANOP                                                           00564200
         C     0,&END.(,1)                Will it fit                   00564300
         BH    J&S                        No, skip fill-in              00564400
.NOTEST  ANOP                                                           00564500
.* Move in SDBKEY                                                       00564600
.*   MVC (SRncur,SDBKEY-CHAR)                                           00564700
.*   Update SRncur                                                      00564800
         AIF   ('&XS5KEY' NE 'NO_S5KEY' AND '&S5KEY' NE '').NOMVC       00564900
         AIF   (&KEYLEN NE 1).DOMVC       Key length of 1               00565000
         MVI   0(15),C'&KEYVAL.'          Move in key value             00565100
         AGO   .DONEMVC                                                 00565200
.DOMVC   ANOP                                                           00565300
&T1      SETC  '0(&KEYLEN.,15),=CL&KEYLEN.''&KEYVAL.'''                 00565400
         MVC   &T1                        Move in key value             00565500
.DONEMVC ANOP                                                           00565600
         LA    15,&KEYLEN.(,15)           Update Current pointer        00565700
.* If S5KEY, move in LENGTH                                             00565800
.*   Update SRncur                                                      00565900
.NOMVC   AIF   ('&XS5KEY' EQ 'NO_S5KEY').NOS51 S5KEY being processed    00566000
         AIF   ('&S5KEY' EQ '').NOS51 S5KEY being processed             00566100
         MVC   0(2,15),=AL2(&KEYVAL.)     Move in key value             00566200
         STH   14,2(,15)                  Include length                00566300
         LA    15,4(,15)                  Update Current pointer        00566400
.NOS51   ANOP                                                           00566500
.* Move in DATA                                                         00566600
.*   Convert if needed                                                  00566700
.*   MVC (SRncur,DATA) using execute                                    00566800
.*   Use LEN or LENVAR                                                  00566900
.*   Update SRncur                                                      00567000
&TEMPC   SETC  '&DATA(1)'                                               00567100
&TEMPCA  SETC  '&DATA(1)'                                               00567200
         AIF   ('&DATA'(1,1) NE '(').DATANR                             00567300
&TEMPC   SETC  '0&DATA'                                                 00567400
&TEMPCA  SETC  '&DATA'(2,K'&DATA-2)                                     00567500
&TEMPCA  SETC  '0(,&TEMPCA.)'                                           00567600
.DATANR  ANOP                                                           00567700
         AIF   ('&XCONVERT' NE 'YES').NOCONV3 Convert wanted            00567800
         AIF   ('&KEYVAL' NE 'AB/U').NOABU Not user abend               00567900
         AIF   ('&LEN' NE '2').ABUN2      Not length 2                  00568000
         SLR   0,0                        Clear reg 0                   00568100
         LH    0,&TEMPCA                  Fetch data                    00568200
         AGO   .ABU                                                     00568300
.ABUN2   AIF   ('&LEN' NE '4').ABUN4      Not length 4                  00568400
         L     0,&TEMPCA                  Fetch data                    00568500
         AGO   .ABU                                                     00568600
.ABUN4   ANOP                                                           00568700
         LA    0,1                        Get starting value            00568800
         SLL   0,0(14)                    Calculate 2**Length           00568900
         BCTR  0,0                        Decrement by 1                00569000
         LR    14,0                       Save ICM mask                 00569100
         SLR   0,0                        Clear reg for ICM             00569200
         EX    14,ICM1&S                  Fetch data                    00569300
         B     L&S                        Skip target of execute        00569400
ICM1&S   ICM   0,*-*,&TEMPC               Get AB/U data                 00569500
L&S      DS    0H                                                       00569600
.ABU     ANOP                                                           00569700
         CVD   0,&PR@OUT.(,1)             Get Decimal Equivalent        00569800
&T1      SETC  '&PR@OUT'                                                00569900
         UNPK  &PR@OUT1.(4,1),&T1.(8,1)   Unpack it                     00570000
&L1      SETA  &PR@OUT1+3                                               00570100
         OI    &L1.(1),X'F0'              Make it printable             00570200
         MVC   0(4,15),&PR@OUT1.(1)       Move to user area             00570300
         LA    15,4(,15)                  Update Current pointer        00570400
         AGO   .DONECV1                                                 00570500
.NOABU   ANOP                                                           00570600
         BCTR  14,0                       One less for move             00570700
         EX    14,MVC1&S                  Move data to work area        00570800
&TEMPC2  SETC  '&TEMPC'                   Source for move               00570900
&TEMPC   SETC  '&PR@OUT.(1)'              Source for move               00571000
&T1      SETC  '&PR@OUT'                                                00571100
         UNPK  &T1.(9,1),&PR@OUT1.(5,1)   UNPK the word                 00571200
         TR    &T1.(8,1),&PR@HEX-C'0'(1)  Make it printable             00571300
         LA    14,1(14,14)                Get length to move            00571400
         AGO   .DONCONV                                                 00571500
.NOCONV3 ANOP                                                           00571600
         BCTR  14,0                       Decrement for execute         00571700
.DONCONV ANOP                                                           00571800
         EX    14,MVC2&S                  Move into proper place        00571900
         B     L&S                        Skip MVC definition           00572000
         AIF   ('&XCONVERT' NE 'YES').NOCONV4 Convert wanted            00572100
MVC1&S   MVC   &PR@OUT1.(*-*,1),&TEMPC2   MVC for move to work area     00572200
.NOCONV4 ANOP                                                           00572300
MVC2&S   MVC   0(*-*,15),&TEMPC           MVC definition for move       00572400
L&S      DS    0H                                                       00572500
         LA    15,1(14,15)                Update Current pointer        00572600
.* If SDBKEY, Blank out the next character                              00572700
.*   Update SRncur                                                      00572800
.DONECV1 AIF   ('&XSDBKEY' EQ 'NO_SDBKEY').NOSDB1   SDB key             00572900
         AIF   ('&SDBKEY' EQ '').NOSDB1   SDB key                       00573000
         MVI   0(15),C' '                 Move in blank                 00573100
         LA    15,1(,15)                  Skip 1 for the blank          00573200
.NOSDB1  ANOP                                                           00573300
         ST    15,&CUR.(,1)               Save Current pointer          00573400
         AIF   ('&XTYPE' NE 'TEST').NOTEST2  See if TEST was specified  00573500
J&S      DS    0H                                                       00573600
.NOTEST2 ANOP                                                           00573700
         AGO   .ENDSR                                                   00573800
.COMP    ANOP  ,                         COMPLETE                       00573900
.* Get addressability to SR1 -- R1                                      00574000
.* SR3LEN=SR3CUR-SR3START                                               00574100
         L     0,&SR3CUR.(,1)             Get Current SR3 position      00574200
         SLR   0,1                        Less address to SR1           00574300
         SH    0,&ADSRDBO.(,1)            Less offset to SR3            00574400
         STH   0,&ADSRDBL.(,1)            Save SR3 Length               00574500
.* SR4LEN=SR4CUR-SR4START                                               00574600
         L     0,&SR4CUR.(,1)             Get Current SR4 position      00574700
         SLR   0,1                        Less address to SR1           00574800
         SH    0,&ADSRROSA.(,1)           Less offset to SR4            00574900
         STH   0,&ADSRROSL.(,1)           Save SR4 Length               00575000
.* SR5LEN=SR5CUR-SR5START                                               00575100
         L     0,&SR5CUR.(,1)             Get Current SR5 position      00575200
         SLR   0,1                        Less address to SR1           00575300
         SH    0,&ADSRRONA.(,1)           Less offset to SR5            00575400
         STH   0,&ADSRRONL.(,1)           Save SR5 Length               00575500
         AIF   ('&INVOKE' EQ 'NO').NOSYM  See if SYMREC wanted          00575600
         LR    15,1                       Copy SR address               00575700
*        Invoke SYMREC                                                  00575800
         AIF   ('&SYSASCE' EQ 'P').ASCP2 Skip if primary ASC            00575900
         SAC   0                          Enter Primary for SYMREC      00576000
.ASCP2   ANOP                                                           00576100
         SYMREC SR=0(,15),MF=(E,&SRLIST.(1))                            00576200
         AIF   ('&SYSASCE' EQ 'P').DONESYM Skip if primary ASC          00576300
         SAC   512                        Reset to AR mode              00576400
.DONESYM ANOP                                                           00576500
         AIF   ('&XRETCODE' EQ 'NO_RETURN_CODE').TRYRSN                 00576600
         AIF   ('&RETCODE' EQ '').TRYRSN                                00576700
         AIF   ('&RETCODE'(1,1) EQ '(').RETCREG                         00576800
&TEMPC   SETC  '&RETCODE(1)'                                            00576900
         ST    15,&TEMPC                  Save return code              00577000
         AGO   .TRYRSN                                                  00577100
.RETCREG ANOP                                                           00577200
&TEMPC   SETC  '&RETCODE'(2,K'&RETCODE-2)                               00577300
         LR    &TEMPC,15                                                00577400
.TRYRSN  ANOP                                                           00577500
         AIF   ('&XRSNCODE' EQ 'NO_REASON_CODE').NOSYM                  00577600
         AIF   ('&RSNCODE' EQ '').NOSYM                                 00577700
         AIF   ('&RSNCODE'(1,1) EQ '(').RSNCREG                         00577800
&TEMPC   SETC  '&RSNCODE(1)'                                            00577900
         ST    0,&TEMPC                   Save return code              00578000
         AGO   .NOSYM                                                   00578100
.RSNCREG ANOP                                                           00578200
&TEMPC   SETC  '&RSNCODE'(2,K'&RSNCODE-2)                               00578300
         LR    &TEMPC,0                                                 00578400
.NOSYM   ANOP                                                           00578500
.ENDSR   ANOP                                                           00578600
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00578700
.********************************************************************   00578800
.***AL.A01  INTERNAL ARRAY TO PRODUCE FORMATTED CODE                    00578900
.********************************************************************   00579000
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       00579100
                      LCLA  &ZOPN1         INVOCATION INDEX             00579200
                      LCLC  &ZOPL(4095)    LABEL                        00579300
                      LCLC  &ZOPO(4095)    OPERATION                    00579400
                      LCLC  &ZOPV(4095)    VALUE                        00579500
                      LCLC  &ZOPD(4095)    DESCRIPTION                  00579600
.*                                                                      00579700
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     00579800
.*******************************************************************    00579900
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               00580000
.*******************************************************************    00580100
                      ACTR  10000                                       00580200
.*                                                                      00580300
                      LCLA  &ZLC           COLUMN POSITION              00580400
                      LCLA  &ZOPX          LIST TABLE INDEX             00580500
                      LCLC  &ZLL           LABEL                        00580600
                      LCLC  &ZLOP          OPERATION                    00580700
                      LCLC  &ZLV           VALUE                        00580800
                      LCLC  &ZLD           DESCRIPTION                  00580900
.*                                                                      00581000
&ZOPX                 SETA  1                                           00581100
.*******************************************************************    00581200
.***AP.X01  FORMAT GENERATED CODE                                       00581300
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            00581400
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00581500
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00581600
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00581700
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00581800
                      AIF   (K'&ZLD LE 0).ZL51                          00581900
&ZLC                  SETA  35             COMMENT COLUMN               00582000
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   00582100
&ZLC                  SETA  33             COMMENT COLUMN               00582200
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  00582300
&ZLV                  SETC  '&ZLV'.' '                                  00582400
                      AGO   .ZL31                                       00582500
.*                                                                      00582600
.ZL41                 ANOP  ,                                           00582700
&ZLV                  SETC  '&ZLV'.' '                                  00582800
.ZL51                 ANOP  ,                                           00582900
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00583000
.*                                                                      00583100
&ZLL     &ZLOP &ZLV                                                     00583200
.*                                                                      00583300
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00583400
                      AGO   .ZL21          CONTINUE LOOPING             00583500
.*                                                                      00583600
.ZLX1                 ANOP  ,                                           00583700
.*******************************************************************    00583800
.***AP.X02  END OF SYMRBLD MACRO                                        00583900
&ZSYMRBLD             SETC  'YES'          SET SYMRBLD USED             00584000
         POP   PRINT                                                    00584100
*                                            SYMRBLD-0                  00584200
         SPACE 1                                                        00584300
.ZLX2                 ANOP  ,                                           00584400
         MEND                                                           00584500
**********************************************************************/ 00584600
*/*PB.OC01 INVOKE MACRO---------------------------------------------*/  00584700
*%SYMRBLD: MACRO KEYS(INITIAL,SR,PRIMLEN,SECLEN,VARLEN,ARCHLEV,DAE,     00584800
*                 COMPDSC,PROBLEM,SERVLEV,NOCONVERTS,IBM,PROGRAM,       00584900
*                 PROGLEV,COMPID,COMPLEV,PID,PIDLEVEL,SUBSYSTEM,RESET,  00585000
*                 PRIMARY,SDBSTRING,SDBLEN,SDBLENVAR,SDBKEY,DATA,LEN,   00585100
*                 LENVAR,CONVERT,TYPE,SECONDARY,VARIABLE,S5KEY,         00585200
*                 COMPLETE,INVOKE,RETCODE,RSNCODE);                     00585300
*  ANS('?'!!MACLABEL!!' '!!'SYMRBLP '!!MACLIST!!                        00585400
*         ' '!!MACKEYS!!';') COL(MACLMAR);                              00585500
*%END SYMRBLD;                                                          00585600
