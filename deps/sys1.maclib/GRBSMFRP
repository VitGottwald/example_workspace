*%GRBSMFRP: MACRO KEYS(OPEN,ASSEMBLE,CONVERT,NONE,REQTOKEN,DDNAME,              
*                 FILTLIST,ANSAREAP,ANSAREAL,GET,RSTOKEN,CLOSE,                 
*                 RETCODE,REASCODE,PLISTVER,MF);                                
*/**** START OF SPECIFICATIONS ****************************************         
*                                                                     *         
*                                                                     *         
*01* MACRO NAME:  GRBSMFRP                              -21/02/18-<0> *         
*                                                                     *         
*                                                                     *         
*01* DESCRIPTIVE NAME:  Data Gatherer SMF record retrieval            *         
*                                                                     *         
*01* PROPRIETARY STATEMENT:                                           *         
*                                                                     *         
*     LICENSED MATERIALS - PROPERTY OF IBM                            *         
*     5650-ZOS COPYRIGHT IBM CORP. 2021, 2021                         *         
*                                                                     *         
* STATUS= HRG77D0                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*01* FUNCTION:                                                        *         
*                                                                     *         
*                                                                     *         
*      SMF post-processing applications must be able to retrieve into *         
*      storage SMF records that reside in an SMF data set or SMF log  *         
*      stream. Such applications often face the problem that SMF      *         
*      records that were written on another z/OS release or service   *         
*      level must be either (up-)converted to a higher service level  *         
*      or (down)-converted to an older service level. z/OS Data       *         
*      Gatherer provides a conversion method in the GRBSMFR service   *         
*      that adapts SMF data section lengths and data fields in such a *         
*      way that the calling program can read and understand the       *         
*      converted data. If the SMF records were physically broken by   *         
*      the z/OS Data Gatherer, this service can be used to            *         
*      re-assemble these records into one large logical SMF record.   *         
*                                                                     *         
*      The service GRBSMFR can be invoked to request three functions  *         
*                                                                     *         
*                                                                     *         
*      1.  The OPEN function explores the SMF data set or log-stream  *         
*          and returns information that can be used as input for      *         
*          calling the GET function                                   *         
*                                                                     *         
*      2.  The GET function retrieves either broken, unbroken, or     *         
*          re-assembled SMF records from the SMF data set or          *         
*          log-stream specified in the ddname parameter. If an SMF    *         
*          record is at a different service level than the GRBSMFR    *         
*          service level, the SMF records are converted to the        *         
*          current level before they are re-assembled                 *         
*                                                                     *         
*      3.  The CLOSE function closes the SMF data set or SMF          *         
*          log-stream and cleans up internal work areas               *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*01* EXTERNAL CLASSIFICATION:  PSPI                                   *         
*                                                                     *         
*01* END OF EXTERNAL CLASSIFICATION:                                  *         
*                                                                     *         
*01* ENVIRONMENT:                                                     *         
*                                                                     *         
*                                                                     *         
*      Minimum authorization: Problem state.  Any PSW key.            *         
*                                                                     *         
*      Dispatchable unit mode: Task mode.                             *         
*                                                                     *         
*      Cross Memory Mode: Any PASN, any HASN, any SASN.               *         
*                                                                     *         
*      AMODE:            64-bit.  Code SYSSTATE AMODE64=YES before    *         
*                        invoking this macro.                         *         
*                                                                     *         
*      ASC mode:         Primary.                                     *         
*                                                                     *         
*      Interrupt status: Enabled for I/O and external interrupts.     *         
*                                                                     *         
*      Locks:            No locks held.                               *         
*                                                                     *         
*      Control parameters: Control parameters must be in the primary  *         
*                        address space.                               *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*01* PROGRAMMING REQUIREMENTS:                                        *         
*    Do not link the service module GRBSMFR into your application     *         
*    program.  Code the program to call the service module at run     *         
*    time. How to do this depends on the programming language you     *         
*    use:                                                             *         
*                                                                     *         
*                                                                     *         
*    o   Assembler, use LOAD or LINK macros                           *         
*                                                                     *         
*    o   In PL/I, use FETCH and RELEASE                               *         
*                                                                     *         
*    o   In C, use the fetch built-in function                        *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*01* SYNTAX:                                                          *         
*                                                                     *         
*         ?GRBSMFR   æ OPEN                                          *         
*                       æ ASSEMBLE                                 *         
*                       ó CONVERT                                  *         
*                       ¿ NONE                                     *         
*                         REQTOKEN(xreqtoken)                       *         
*                         DDNAME(xddname)                           *         
*                         FILTLIST(xfiltlist)                       *         
*                         ANSAREAP(xansareap)                       *         
*                         ANSAREAL(xansareal)                       *         
*                    ó GET                                           *         
*                         REQTOKEN(xreqtoken)                       *         
*                         RSTOKEN(xrstoken)                         *         
*                         ANSAREAP(xansareap)                       *         
*                         ANSAREAL(xansareal)                       *         
*                    ¿ CLOSE                                         *         
*                          REQTOKEN(xreqtoken)                        *         
*                     ÝRETCODE(xretcode)¨                             *         
*                     ÝREASCODE(xreascode)¨                           *         
*                     ÝPLISTVER(»xplistver!IMPLIED_VERSIONº)¨       *         
*                    æÝMF(S)¨                                        *         
*                    óÝMF(L,xmfctrl»,xmfattr!BDY(DWORD)º)¨         *         
*                    ¿ÝMF(E,xmfctrl»,COMPLETEº)¨                   *         
*                                                                     *         
*                                                                     *         
*      Where:                                                         *         
*                                                                     *         
*                                                                     *         
*      The following is a set of mutually exclusive keys.  This set   *         
*      is required; only one key must be specified.                   *         
*                                                                     *         
*                                                                     *         
*      OPEN                                                           *         
*          The OPEN function explores the SMF data set or SMF         *         
*          log-stream and returns information that can be used as     *         
*          input for calling the GET function. The OPEN request must  *         
*          be submitted before the first GET request.                 *         
*                                                                     *         
*                                                                     *         
*          The following is a set of mutually exclusive keys.  This   *         
*          set is required; only one key must be specified.           *         
*                                                                     *         
*                                                                     *         
*          ASSEMBLE                                                   *         
*              specifies that SMF records written on a different z/OS *         
*              release or service level must be converted to the SMF  *         
*              record level that is supported by this service. In     *         
*              addition, all broken SMF records are re-assembled into *         
*              one large logical SMF record.                          *         
*                                                                     *         
*          CONVERT                                                    *         
*              specifies that SMF records written on a different z/OS *         
*              release or service level must be converted to the SMF  *         
*              record level that is supported by this service. No SMF *         
*              record re-assembly is done.                            *         
*                                                                     *         
*          NONE                                                       *         
*              specifies that SMF records must be neither converted   *         
*              to another SMF record level nor re-assembled into a    *         
*              large logical SMF record.                              *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*          End of a set of mutually exclusive required keys.          *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*          REQTOKEN(xreqtoken)                                        *         
*              is the name of a required FIXED(31) output in which a  *         
*              request token is returned by the OPEN function. The    *         
*              request token must be used for subsequent GET requests *         
*              and the final CLOSE request.                           *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*          DDNAME(xddname)                                            *         
*              is the name of a required CHAR(8) input which          *         
*              specifies the DDNAME of the SMF data set or SMF        *         
*              log-stream that contains the SMF records to be         *         
*              retrieved. The SMF data set or log-stream can contain  *         
*              broken and unbroken SMF records.                       *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*          FILTLIST(xfiltlist)                                        *         
*              is the name of a required CHAR(40) input which         *         
*              specifies the filter criteria to be applied to the     *         
*              input SMF records. The input SMF records are provided  *         
*              in the SMF data set or SMF log-stream specified by the *         
*              ddname parameter.                                      *         
*                                                                     *         
*              Specify one or more of the following filters:          *         
*                                                                     *         
*                                                                     *         
*              VERSION (BYTE 0-1)                                     *         
*                                                                     *         
*                         2-byte unsigned integer value that          *         
*                        specifies the version of the filter list.    *         
*                        Must be set to 1.                            *         
*                                                                     *         
*              LENGTH (BYTE 2-3)                                      *         
*                                                                     *         
*                         2-byte unsigned integer value that          *         
*                        specifies the length of the filter list.     *         
*                        Must be set to 40.                           *         
*                                                                     *         
*              TYPE (BYTE 4-5)                                        *         
*                                                                     *         
*                         2-byte unsigned integer value that          *         
*                        specifies the SMF type of the records to be  *         
*                        processed                                    *         
*                                                                     *         
*              SUBTYPE (BYTE 6-7)                                     *         
*                                                                     *         
*                         2-byte unsigned integer value that          *         
*                        specifies the SMF subtype of the records to  *         
*                        be processed                                 *         
*                                                                     *         
*              SMFID (BYTE 8-11)                                      *         
*                                                                     *         
*                         4-byte character that specifies the SMF ID  *         
*                        of the z/OS system that has written the SMF  *         
*                        records to be processed                      *         
*                                                                     *         
*              STARTTIME (BYTE 12-25)                                 *         
*                                                                     *         
*                         14-byte character in format YYYYMMDDHHMMSS  *         
*                        that specifies the beginning of the time     *         
*                        interval for which information is requested  *         
*                                                                     *         
*              ENDTIME (BYTE 26-39)                                   *         
*                                                                     *         
*                         14-byte character in format YYYYMMDDHHMMSS  *         
*                        that specifies the end of the time interval  *         
*                        for which information is requested           *         
*                                                                     *         
*                                                                     *         
*              Specify binary zeroes for filters type, subtype and    *         
*              blanks for filters smfid, starttime, endtime if you do *         
*              not want to apply those filters to select input SMF    *         
*              records                                                *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*          ANSAREAP(xansareap)                                        *         
*              is the name of a required CHAR(8) input/output that    *         
*              specifies the 64-bit address of the area to which the  *         
*              GRBSMFR service returns the information requested by   *         
*              the caller. The area must be in the caller's primary   *         
*              address space.                                         *         
*                                                                     *         
*              The answer area contains the SMF Data Set Lookup table *         
*              (DSLT) which consists of a header and one or more data *         
*              sections. Each data section provides the calling       *         
*              program with information about one specific SMF record *         
*              in the SMF data set or SMF log-stream. Only SMF        *         
*              records that match the specified selection criteria    *         
*              are described in DSLT data sections.                   *         
*                                                                     *         
*              DSLT Header                                            *         
*                                                                     *         
*                                                                     *         
*              ACRONYM (BYTE 0-3)                                     *         
*                                                                     *         
*                         is the four-character acronym, DSLT, of the *         
*                        Data Set Lookup table                        *         
*                                                                     *         
*              VERSION (BYTE 4-5)                                     *         
*                                                                     *         
*                         is the version of the Data Set Lookup table *         
*                                                                     *         
*              HEADER LENGTH (BYTE 6-7)                               *         
*                                                                     *         
*                         is the length of the header of the Data Set *         
*                        Lookup table                                 *         
*                                                                     *         
*              TOTAL LENGTH (BYTE 8-11)                               *         
*                                                                     *         
*                         is the total length of the Data Set Lookup  *         
*                        table, including all data sections           *         
*                                                                     *         
*              NUMBER OF DATA SECTIONS (BYTE 12-15)                   *         
*                                                                     *         
*                         is the total number of data sections in the *         
*                        Data Set Lookup table                        *         
*                                                                     *         
*              DATA SECTION LENGTH (BYTE 16-17)                       *         
*                                                                     *         
*                         is the length of one data section           *         
*                                                                     *         
*              '0000'X (BYTE 18-19)                                   *         
*                                                                     *         
*                         Reserved                                    *         
*                                                                     *         
*              NUMBER OF SMF RECORD SETS (BYTE 20-23)                 *         
*                                                                     *         
*                         is the total number of SMF record sets in   *         
*                        the Data Set Lookup table                    *         
*                                                                     *         
*              REQUEST TOKEN (BYTE 24-31)                             *         
*                                                                     *         
*                         is returned by the OPEN function and        *         
*                        connects the Open, Get, and Close requests   *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*              DSLT Data Section                                      *         
*                                                                     *         
*                                                                     *         
*              DSLT RECORD ID (BYTE 0-3)                              *         
*                                                                     *         
*                         is the identifier of the SMF record in the  *         
*                        Data Set Lookup table                        *         
*                                                                     *         
*              SMF RECORD ID (BYTE 4-7)                               *         
*                                                                     *         
*                         is the identifier of the SMF record in the  *         
*                        SMF data set or SMF log-stream               *         
*                                                                     *         
*              RECORD SET TOKEN (BYTE 8-11)                           *         
*                                                                     *         
*                         is the identifier of the SMF record set     *         
*                        which consists of either one unbroken SMF    *         
*                        record or multiple broken records that are   *         
*                        re-assembled into one large logical SMF      *         
*                        record                                       *         
*                                                                     *         
*              BROKEN RECORD NUMBER (BYTE 12-13)                      *         
*                                                                     *         
*                         is the sequence number of the broken SMF    *         
*                        record set identified by record set number   *         
*                                                                     *         
*              TOTAL BROKEN RECORD (BYTE 14-15)                       *         
*                                                                     *         
*                         is the number of broken records that belong *         
*                        to the SMF record set identified by the      *         
*                        record set number                            *         
*                                                                     *         
*              SMF TYPE (BYTE 16-17)                                  *         
*                                                                     *         
*                         is the SMF type as specified in FILTLIST    *         
*                        parameter type                               *         
*                                                                     *         
*              SMF SUBTYPE (BYTE 18-19)                               *         
*                                                                     *         
*                         is the SMF subtype as specified in FILTLIST *         
*                        parameter subtype                            *         
*                                                                     *         
*              SMF ID (BYTE 20-23)                                    *         
*                                                                     *         
*                         is the SMF ID of the z/OS system that wrote *         
*                        the SMF record.  The SMF ID was specified in *         
*                        FILTLIST parameter smfid                     *         
*                                                                     *         
*              INTERVAL START DATE (BYTE 24-27)                       *         
*                                                                     *         
*                         is the start date of the SMF interval in    *         
*                        the form 0CYYDDDx.  The date was specified   *         
*                        in the form YYYYMMDD in FILTLIST parameter   *         
*                        starttime                                    *         
*                                                                     *         
*              INTERVAL START TIME (BYTE 28-31)                       *         
*                                                                     *         
*                         is the start time of the SMF interval in    *         
*                        the form 0HHMMSSx.  The start time was       *         
*                        specified in the form HHMMSS in FILTLIST     *         
*                        parameter starttime                          *         
*                                                                     *         
*              INTERVAL DURATION (BYTE 32-35)                         *         
*                                                                     *         
*                         is the length of the SMF interval in the    *         
*                        form MMSSTTTx                                *         
*                                                                     *         
*              DSLT FLAG (BYTE 36)                                    *         
*                                                                     *         
*                         indicates the validity of Data Set Lookup   *         
*                        table fields. If bit 0 is set, the SMF       *         
*                        subtype in bytes 18-19 of the DSLT is valid. *         
*                        If bit 1 is set, the interval start date,    *         
*                        start time and duration in bytes 24-35 are   *         
*                        valid. Bits 2-7 are not used                 *         
*                                                                     *         
*              SMF RECORD LENGTH (BYTE 38-39)                         *         
*                                                                     *         
*                         is the length of the SMF record             *         
*                                                                     *         
*              SMF RECORD MOVE TIME (BYTE 40-43)                      *         
*                                                                     *         
*                         is the time since midnight, in hundredths   *         
*                        of a second, when the record was moved into  *         
*                        the SMF buffer. In record types 2 and 3,     *         
*                        this is the time when the record was moved   *         
*                        to the dump data set                         *         
*                                                                     *         
*              SMF RECORD MOVE DATE (BYTE 44-47)                      *         
*                                                                     *         
*                         is the date, in the form 0CYYDDDx, when the *         
*                        record was moved into the SMF buffer. In     *         
*                        record types 2 and 3, this is the date when  *         
*                        the record was moved to the dump data set    *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*          ANSAREAL(xansareal)                                        *         
*              is the name of a required FIXED(32) input/output that  *         
*              specifies the length of the allocated answer area.  If *         
*              you do not provide enough space, the service returns   *         
*              in this parameter the length needed for the complete   *         
*              data. The length value returned on OPEN requests is    *         
*              the exact size of the SMF Data Set Lookup table.       *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*      GET                                                            *         
*          The GET function retrieves either broken, unbroken, or     *         
*          re-assembled SMF records from the SMF data set or          *         
*          log-stream specified in the ddname parameter. If an SMF    *         
*          record is at a different service level than this service,  *         
*          the SMF records are converted to the current service level *         
*          before they are re-assembled.                              *         
*                                                                     *         
*          The GET request must be submitted after the OPEN request.  *         
*                                                                     *         
*                                                                     *         
*          REQTOKEN(xreqtoken)                                        *         
*              is the name of a required FIXED(31) input which        *         
*              contains the request token that was returned by the    *         
*              OPEN function                                          *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*          RSTOKEN(xrstoken)                                          *         
*              is the name of a required FIXED(31) input which        *         
*              specifies the record set token that identifies the SMF *         
*              record set that is to be processed by the GET request. *         
*              Valid record set tokens are returned in the answer     *         
*              area of the OPEN request in bytes 8-11 of each data    *         
*              section                                                *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*          ANSAREAP(xansareap)                                        *         
*              is the name of a required CHAR(8) input/output that    *         
*              specifies the 64-bit address of the area to which the  *         
*              service returns the requested information. The area    *         
*              must be in the caller's primary address space. The     *         
*              area contains a 4-byte prefix area that contains the   *         
*              SMF record length followed by exactly one SMF record   *         
*              that is either an unbroken or re-assembled SMF record. *         
*              The first two bytes of the SMF record provide the      *         
*              length of the SMF record if it is not re-assembled. If *         
*              the returned SMF record was re-assembled, bytes 0 and  *         
*              1 of the SMF record are set to zero.                   *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*          ANSAREAL(xansareal)                                        *         
*              is the name of a required FIXED(32) input/output that  *         
*              specifies the length of the allocated answer area.  If *         
*              you do not provide enough space, the service returns   *         
*              in this parameter the length needed for the complete   *         
*              data. The value returned on GET requests is the        *         
*              estimated length of the re-assembled SMF record. The   *         
*              size can only be estimated to avoid re-positioning     *         
*              actions on the SMF data set or log-stream due to       *         
*              unsuccessful read operations.                          *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*      CLOSE                                                          *         
*          The CLOSE function closes the SMF data set or SMF          *         
*          log-stream and cleans up internal work areas.              *         
*                                                                     *         
*          It must be invoked after the last invocation of the GET    *         
*          function for a specific data set or log-stream.            *         
*                                                                     *         
*                                                                     *         
*          REQTOKEN(xreqtoken)                                        *         
*              is the name of a required FIXED(31) input which        *         
*              contains the request token that was returned by the    *         
*              OPEN function                                          *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*      End of a set of mutually exclusive required keys.              *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*      ÝRETCODE(xretcode)¨                                            *         
*          is the name of an optional FIXED(31) output variable that  *         
*          will contain the return code.                              *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*      ÝREASCODE(xreascode)¨                                          *         
*          is the name of an optional FIXED(31) output variable that  *         
*          will contain the reason code.                              *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*      ÝPLISTVER(»xplistver!IMPLIED_VERSIONº)¨                      *         
*          is an optional FIXED(8) input decimal value in the "0-0"   *         
*          range that specifies the macro version.  PLISTVER is the   *         
*          only key allowed on the list form of MF and determines     *         
*          which parameter list is generated.  Note that MAX may be   *         
*          specified instead of a number, and the parameter list will *         
*          be of the largest size currently supported. This size may  *         
*          grow from release to release (thus possibly affecting the  *         
*          amount of storage needed by your program).  If your        *         
*          program can tolerate this, IBM recommends that you always  *         
*          specify MAX when creating the list form parameter list as  *         
*          that will ensure that the list form parameter list is      *         
*          always long enough to hold whatever parameters might be    *         
*          specified on the execute form.                             *         
*          DEFAULT: IMPLIED_VERSION.  When PLISTVER is omitted, the   *         
*          default is the lowest version which allows all of the      *         
*          parameters specified on the invocation to be processed.    *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*      ÝMF(»S!L!Eº)¨                                                *         
*          is an optional keyword input which specifies the macro     *         
*          form.                                                      *         
*          DEFAULT: S                                                 *         
*                                                                     *         
*                                                                     *         
*          ÝMF(S)¨                                                    *         
*              specifies the standard form of the macro.  The "S"     *         
*              form generates code to put the parameters into the     *         
*              parameter list and invoke the desired service.  Full   *         
*              checking for required macro keys is done along with    *         
*              supplying defaults for omitted optional parameters.    *         
*              The ?EPILOG macro must be invoked at the end of the    *         
*              module.                                                *         
*                                                                     *         
*          ÝMF(L,xmfctrl»,xmfattr!BDY(DWORD)º)¨                     *         
*              specifies the list form of the macro.  The "L" form    *         
*              defines an area to be used for the parameter list.     *         
*              Only the PLISTVER key may be specified on the          *         
*              invocation.  All other macro parameters are flagged as *         
*              errors.  If PLISTVER is not specified, the original    *         
*              parameter list definition is used.                     *         
*                                                                     *         
*            ,xmfctrl                                                 *         
*              is a required input.  It is the name of a storage area *         
*              for the parameter list.                                *         
*                                                                     *         
*            »,xmfattr!BDY(DWORD)º                                  *         
*              is an optional CHAR(60) input string that varies from  *         
*              1 to 60 characters. It contains any special attributes *         
*              for the parameter list.                                *         
*              DEFAULT: BDY(DWORD) which forces the parameter list to *         
*              a doubleword boundary.                                 *         
*                                                                     *         
*          ÝMF(E,xmfctrl»,COMPLETEº)¨                               *         
*              specifies the execute form of the macro.  The "E" form *         
*              generates code to put the parameters into the          *         
*              parameter list specified by xmfctrl and provides full  *         
*              syntax checking with default setting.                  *         
*                                                                     *         
*            ,xmfctrl                                                 *         
*              is a required input.  It is the name of a storage area *         
*              for the parameter list.                                *         
*                                                                     *         
*            »,COMPLETEº                                            *         
*              is an optional keyword input which specifies the       *         
*              degree of macro parameter syntax checking.             *         
*              DEFAULT: COMPLETE                                      *         
*                                                                     *         
*                                                                     *         
*              COMPLETE                                               *         
*                  Checking for required macro keys is done and       *         
*                  defaults are supplied for omitted optional         *         
*                  parameters.                                        *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*01* RETURN CODES:                                                    *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                 0         The operation was successful. The         *         
*                           requested data has been stored in the     *         
*                           answer area provided by the calling       *         
*                           program.                                  *         
*                                                                     *         
*                           Reason Codes                              *         
*                                                                     *         
*                                                                     *         
*                           0         Meaning: The operation was      *         
*                                     successful. The answer area     *         
*                                     contains the requested data.    *         
*                                                                     *         
*                                     Action: Continue normal program *         
*                                     execution.                      *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                 4         The returned data may be inconsistent.    *         
*                                                                     *         
*                           Reason Codes                              *         
*                                                                     *         
*                                                                     *         
*                           0         Meaning: No SMF record data was *         
*                                     found that matches the filter   *         
*                                     criteria specified in the       *         
*                                     filter list.                    *         
*                                                                     *         
*                                     Action: Specify other filter    *         
*                                     criteria in the FILTLIST        *         
*                                     parameter or continue normal    *         
*                                     program execution.              *         
*                                                                     *         
*                           4         Meaning: At least one broken    *         
*                                     SMF record was detected in an   *         
*                                     SMF record set that belongs to  *         
*                                     a different time interval or    *         
*                                     was collected on a different    *         
*                                     system than the other records   *         
*                                     in the SMF record set. The      *         
*                                     inconsistent SMF record is      *         
*                                     ignored.                        *         
*                                                                     *         
*                                     Action: Ensure that only        *         
*                                     consistent SMF record sets are  *         
*                                     passed to the service.          *         
*                                                                     *         
*                           8         Meaning: At least one SMF       *         
*                                     record was not converted to the *         
*                                     service level supported by z/OS *         
*                                     Data Gatherer.                  *         
*                                                                     *         
*                                     Action: The service provides    *         
*                                     the calling program with the    *         
*                                     unconverted SMF record in the   *         
*                                     answer area. Contact your       *         
*                                     system administrator and        *         
*                                     request the latest z/OS Data    *         
*                                     Gatherer service to be          *         
*                                     installed.                      *         
*                                                                     *         
*                           12        Meaning: At least one broken    *         
*                                     SMF record was found that       *         
*                                     cannot be reassembled by the    *         
*                                     service.                        *         
*                                                                     *         
*                                     Action: The service provides    *         
*                                     the calling program with the    *         
*                                     broken SMF record in the answer *         
*                                     area.                           *         
*                                                                     *         
*                           16        Meaning: At least one           *         
*                                     incomplete SMF record set was   *         
*                                     found that cannot be            *         
*                                     reassembled by the service.     *         
*                                                                     *         
*                                     Action: The service provides a  *         
*                                     DSLT entry in the answer area.  *         
*                                     The DSLT is supposed to belong  *         
*                                     to the incomplete SMF record    *         
*                                     set. Use the DSLT to determine  *         
*                                     which SMF records are affected  *         
*                                     and remove those records from   *         
*                                     the SMF data set or exclude     *         
*                                     them by using another filter in *         
*                                     the FILTLIST parameter.         *         
*                                                                     *         
*                           20        Meaning: At least one SMF       *         
*                                     record was converted to the     *         
*                                     version or SMF record level     *         
*                                     that is supported by GRBSMFR.   *         
*                                                                     *         
*                                     Action: The service provides    *         
*                                     the calling program with the    *         
*                                     converted SMF record in the     *         
*                                     answer area.                    *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                 8         No data was returned, for example,        *         
*                           because invalid parameters were specified *         
*                           by the caller.                            *         
*                                                                     *         
*                           Reason Codes                              *         
*                                                                     *         
*                                                                     *         
*                           4         Meaning: The answer area        *         
*                                     provided by the calling program *         
*                                     was too small for the service   *         
*                                     to return all the requested     *         
*                                     information.                    *         
*                                                                     *         
*                                     Action: Use the required answer *         
*                                     area length returned by the     *         
*                                     OPEN or GET request to provide  *         
*                                     an answer area large enough to  *         
*                                     contain the reassembled SMF     *         
*                                     record.                         *         
*                                                                     *         
*                           8         Meaning: The start or end time  *         
*                                     in the FILTLIST parameter was   *         
*                                     specified in an invalid format. *         
*                                                                     *         
*                                     Action: Specify start and end   *         
*                                     time in the format              *         
*                                     YYYYMMDDHHMMSS and rerun the    *         
*                                     program.                        *         
*                                                                     *         
*                           12        Meaning: The specified request  *         
*                                     token is invalid.               *         
*                                                                     *         
*                                     Action: Specify the request     *         
*                                     token that was passed back on   *         
*                                     completion of the OPEN request. *         
*                                                                     *         
*                           16        Meaning: The specified record   *         
*                                     set token is invalid.           *         
*                                                                     *         
*                                     Action: Use the DSLT to         *         
*                                     determine a valid SMF record    *         
*                                     set ID and specify the ID as    *         
*                                     SMF record set token.           *         
*                                                                     *         
*                           20        Meaning: The specified request  *         
*                                     type is invalid.                *         
*                                                                     *         
*                                     Action: Specify a request type  *         
*                                     of OPEN, GET, or CLOSE.         *         
*                                                                     *         
*                           24        Meaning: The calling program is *         
*                                     not in task mode.               *         
*                                                                     *         
*                                     Action: Rerun your program in   *         
*                                     the correct mode.               *         
*                                                                     *         
*                           28        Meaning: The calling program is *         
*                                     not enabled.                    *         
*                                                                     *         
*                                     Action: Rerun your program in   *         
*                                     the correct mode.               *         
*                                                                     *         
*                           32        Meaning: The calling program is *         
*                                     not unlocked.                   *         
*                                                                     *         
*                                     Action: Rerun your program in   *         
*                                     the correct mode.               *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                 16        A problem has been detected within SMF    *         
*                           processing.                               *         
*                                                                     *         
*                           Reason Codes                              *         
*                                                                     *         
*                                                                     *         
*                           4         Meaning: The service was unable *         
*                                     to access the SMF data set or   *         
*                                     log stream.                     *         
*                                                                     *         
*                           8         Meaning: Internal error. The    *         
*                                     service was unable to establish *         
*                                     a recovery environment.         *         
*                                                                     *         
*                           12        Meaning: Unexpected error. The  *         
*                                     error recovery routine of the   *         
*                                     service had control.            *         
*                                                                     *         
*                           16        Meaning: Unexpected internal    *         
*                                     error.                          *         
*                                                                     *         
*                           20        Meaning: Unexpected error.      *         
*                                     Number of triplets in SMF       *         
*                                     record is higher than supported *         
*                                     by this service.                *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*01* ABEND CODES:  None.                                              *         
*                                                                     *         
*       None                                                          *         
*                                                                     *         
*01* REASON CODES:                                                    *         
*                                                                     *         
*       See return codes section.                                     *         
*                                                                     *         
*01* MODULE TYPE:  PL/X MACRO                                         *         
*                                                                     *         
*02*   PROCESSOR:  PL/X                                               *         
*                                                                     *         
*01* COMPONENT:  27401                                                *         
*                                                                     *         
*01* DISTRIBUTION LIBRARY: AGRBMAC1                                   *         
*                                                                     *         
*01* MACRO USAGE NOTES:                                               *         
*                                                                     *         
*                                                                     *         
*    1.  Printing of the macro expansion is controlled by the ZPRINT  *         
*        global macro variable.  Any value other than 'NO' will       *         
*        result in the macro expansion being printed.  The default is *         
*        'YES'.  The following examples illustrate how the ZPRINT     *         
*        variable should be set.                                      *         
*                                                                     *         
*            %DECLARE ZPRINT CHARACTER EXTERNAL                       *         
*            %ZPRINT='YES'          %ZPRINT='NO'                      *         
*                                                                     *         
*                                                                     *         
*    2.  All keys currently contained in the GRBSMFR macro correspond *         
*        to  version 0.  If you specify PLISTVER, use a value of 0 or *         
*        MAX.                                                         *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*                                                                     *         
*01* CHANGE ACTIVITY:                                                 *         
*                                                                     *         
*   Flag LineItem  FMID    Date   ID    Comment                       *         
*                                                                     *         
*    $A00=ZOSB     HRG77D0 210218 JKu:  SMF record retrieval service  *         
*    $A01=OA61287  HRG77D0 210609 Mai:  Add environment checks        *         
****** END OF SPECIFICATIONS *****************************************/         
*/*PB.ECHO01 MACRO INVOCATION ECHO-----------------------------------*/         
*  ANS('@SPACE;') NORESCAN COL(MACLMAR);                                        
*  ANS('/* ? GRBSMFR '!!MACLIST!!' ')                                           
*      NORESCAN COL(MACLMAR+5);    /* START ECHO */                             
*                                                                               
*  DCL ZELO  FIXED;                                                             
*  DCL ZECOL FIXED;                                                             
*                                                                               
*  ZELO=1;     /* STARTING COLUMN */                                            
*  DO WHILE ZELO<=LENGTH(MACKEYS);  /* PARENTHSIS SCAN */                       
*    ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');                            
*    IF ZECOL>0                                                                 
*      THEN                                                                     
*        DO;   /* PARENTHESIS FOUND */                                          
*          ANS(MACKEYS(ZELO:ZELO+ZECOL-1)!!' ')                                 
*             NORESCAN COL(MACLMAR+5);                                          
*          ZELO=ZELO+ZECOL;        /* NEXT PORTION */                           
*        END;                                                                   
*      ELSE                                                                     
*        DO;   /* REMAINING KEYS */                                             
*          ANS(MACKEYS(ZELO:LENGTH(MACKEYS)))                                   
*             NORESCAN COL(MACLMAR+5);                                          
*          ZELO=LENGTH(MACKEYS)+1;                                              
*        END;                                                                   
*  END;                                                                         
*  ANS(' -21/02/18-0- */')                                                      
*      NORESCAN COL(MACLMAR+5);    /* END ECHO */                               
*/********************************************************************/         
*/*PV.DCL01 MACRO DECLARES AND CODE GENERATION CONTROLS              */         
*/********************************************************************/         
*  DCL ZPRINT  EXTERNAL; DEACT ZPRINT; /* YES=PRINT, NO=NO PRINT     */         
*  DCL ZTEST   EXTERNAL; DEACT ZTEST;  /* YES=TEST, NO=NO TEST       */         
*  DCL ZSYSTEM EXTERNAL; DEACT ZSYSTEM;/* PCCODE10, MVS, SAK, VM     */         
*                                                                               
*  DCL   ZGRBSMFR CHAR EXTERNAL; /* YES=USED AT LEAST ONCE          */          
*  DEACT ZGRBSMFR;                                                              
*                                                                               
*  DCL ZMACRET FIXED; DEACT ZMACRET;                                            
*  ZMACRET=0;                   /* MACRO COMPILE RETURN CODE         */         
*                                                                               
*  DCL ZMS CHAR;   DEACT ZMS;   /* ERROR MESSAGE                     */         
*  DCL ZCVAL CHAR; DEACT ZCVAL; /* ERROR MESSAGE WORK AREA           */         
*                                                                               
*  DCL ZI FIXED;  DEACT ZI;     /* INDEX FOR VARIABLE NUM OF PARMS   */         
*  DCL ZJ FIXED;  DEACT ZJ;     /* INDEX FOR VARIABLE NUM OF PARMS   */         
*  DCL ZK FIXED;  DEACT ZK;     /* INDEX FOR RANGE COLON (:)         */         
*  DCL ZL FIXED;  DEACT ZL;     /* INDEX FOR RANGE VALUE CHECKING    */         
*  DCL ZLO FIXED; DEACT ZLO;    /* LOW RANGE VALUE                   */         
*  DCL ZHI FIXED; DEACT ZHI;    /* HIGH RANGE VALUE                  */         
*  DCL ZW CHAR;   DEACT ZW;     /* WORK AREA FOR RANGE VALUE SUBLIST */         
*  DCL ZN FIXED;  DEACT ZN;     /* NUMERIC WORK VARIABLE             */         
*  DCL ZC CHAR;   DEACT ZC;     /* CHARACTER WORK VARIABLE           */         
*  DCL ZMAXINVOCLEN FIXED; DEACT ZMAXINVOCLEN;  /* INVOCATION LENGTH */         
*  DCL ZPLLEN FIXED; DEACT ZPLLEN;        /* PARAMETER LIST LENGTH   */         
*                                                                               
*  DCL ZPRMMAX FIXED;           /* MAXIMUM PARM LIST SIZE            */         
*  DCL ZPRMNUM FIXED;           /* PARAMETER ARRAY INDEX             */         
*  DCL ZPRM(100);               /* PARAMETER ENTRY                   */         
*  DCL EHAMAXLEN FIXED EXTERNAL;   /* MAX ILIST SIZE FOR PARM LISTS  */         
*  DCL EHAREGS CHARACTER EXTERNAL; /* REG DCLS                       */         
*  DCL EHAREGS64 CHARACTER EXTERNAL; /* REG DCLS                     */         
*  DCL EHALIST CHARACTER EXTERNAL; /* STANDARD PARM LIST GENERATION  */         
*/*******************************************************************/          
*/*PV.XVAR01 DECLARE ALL MACRO PARAMETER VARIABLES                  */          
*/*******************************************************************/          
*  DCL XREQUEST;  DEACT XREQUEST;  /***PV.XVAR02 INPUT VALUE */                 
*  DCL ZXREQUEST; DEACT ZXREQUEST;  /***INPUT/OUTPUT CONTROL */                 
*  DCL XOPEN;  DEACT XOPEN;        /***PV.XVAR02 INPUT VALUE */                 
*  DCL ZXOPEN; DEACT ZXOPEN;       /***INPUT/OUTPUT CONTROL */                  
*  DCL   XPROCESSFUNCTION;         /***PV.XVAR03 INPUT VALUE */                 
*  DEACT XPROCESSFUNCTION;         /***PV.XVAR03 INPUT VALUE */                 
*  DCL   ZXPROCESSFUNCTION;        /***INPUT/OUTPUT CONTROL */                  
*  DEACT ZXPROCESSFUNCTION;        /***INPUT/OUTPUT CONTROL */                  
*  DCL XASSEMBLE;  DEACT XASSEMBLE;  /***PV.XVAR02 INPUT VALUE */               
*  DCL ZXASSEMBLE; DEACT ZXASSEMBLE;  /***INPUT/OUTPUT CONTROL */               
*  DCL XCONVERT;  DEACT XCONVERT;  /***PV.XVAR02 INPUT VALUE */                 
*  DCL ZXCONVERT; DEACT ZXCONVERT;  /***INPUT/OUTPUT CONTROL */                 
*  DCL XNONE;  DEACT XNONE;        /***PV.XVAR02 INPUT VALUE */                 
*  DCL ZXNONE; DEACT ZXNONE;       /***INPUT/OUTPUT CONTROL */                  
*  DCL XREQTOKEN;  DEACT XREQTOKEN;  /***PV.XVAR02 OUTPUT NAME */               
*  DCL ZXREQTOKEN; DEACT ZXREQTOKEN;  /***INPUT/OUTPUT CONTROL */               
*  DCL XDDNAME;  DEACT XDDNAME;    /***PV.XVAR02 INPUT NAME */                  
*  DCL ZXDDNAME; DEACT ZXDDNAME;   /***INPUT/OUTPUT CONTROL */                  
*  DCL XFILTLIST;  DEACT XFILTLIST;  /***PV.XVAR02 INPUT NAME */                
*  DCL ZXFILTLIST; DEACT ZXFILTLIST;  /***INPUT/OUTPUT CONTROL */               
*  DCL XANSAREAP;  DEACT XANSAREAP;  /***PV.XVAR02 INOUT NAME */                
*  DCL ZXANSAREAP; DEACT ZXANSAREAP;  /***INPUT/OUTPUT CONTROL */               
*  DCL XANSAREAL;  DEACT XANSAREAL;  /***PV.XVAR02 INOUT NAME */                
*  DCL ZXANSAREAL; DEACT ZXANSAREAL;  /***INPUT/OUTPUT CONTROL */               
*  DCL XGET;  DEACT XGET;          /***PV.XVAR02 INPUT VALUE */                 
*  DCL ZXGET; DEACT ZXGET;         /***INPUT/OUTPUT CONTROL */                  
*  DCL XRSTOKEN;  DEACT XRSTOKEN;  /***PV.XVAR02 INPUT NAME */                  
*  DCL ZXRSTOKEN; DEACT ZXRSTOKEN;  /***INPUT/OUTPUT CONTROL */                 
*  DCL XCLOSE;  DEACT XCLOSE;      /***PV.XVAR02 INPUT VALUE */                 
*  DCL ZXCLOSE; DEACT ZXCLOSE;     /***INPUT/OUTPUT CONTROL */                  
*  DCL XRETCODE;  DEACT XRETCODE;  /***PV.XVAR02 OUTPUT NAME */                 
*  DCL ZXRETCODE; DEACT ZXRETCODE;  /***INPUT/OUTPUT CONTROL */                 
*  DCL XREASCODE;  DEACT XREASCODE;  /***PV.XVAR02 OUTPUT NAME */               
*  DCL ZXREASCODE; DEACT ZXREASCODE;  /***INPUT/OUTPUT CONTROL */               
*  DCL XPLISTVER FIXED;  DEACT XPLISTVER;  /***PV.XVAR02 INPUT VALUE */         
*  DCL ZXPLISTVER; DEACT ZXPLISTVER;  /***INPUT/OUTPUT CONTROL */               
*  DCL XMF;  DEACT XMF;            /***PV.XVAR02 INPUT VALUE */                 
*  DCL ZXMF; DEACT ZXMF;           /***INPUT/OUTPUT CONTROL */                  
*  DCL XMFCTRL;  DEACT XMFCTRL;    /***PV.XVAR02 INPUT NAME */                  
*  DCL ZXMFCTRL; DEACT ZXMFCTRL;   /***INPUT/OUTPUT CONTROL */                  
*  DCL XMFATTR;  DEACT XMFATTR;    /***PV.XVAR02 INPUT VALUE */                 
*  DCL ZXMFATTR; DEACT ZXMFATTR;   /***INPUT/OUTPUT CONTROL */                  
*  DCL XMFSCK;  DEACT XMFSCK;      /***PV.XVAR02 INPUT VALUE */                 
*  DCL ZXMFSCK; DEACT ZXMFSCK;     /***INPUT/OUTPUT CONTROL */                  
*/********************************************************************/         
*/***PC.PLV01  PROCESS PLISTVER                                      */         
*/********************************************************************/         
*  IF TRANSLATE(PLISTVER(1)) = 'MAX' THEN                                       
*    XPLISTVER=0;                                                               
*  ELSE                                                                         
*    XPLISTVER=0;                                                               
*  IF PLISTVER^=''                                                              
*     & TRANSLATE(PLISTVER(1))^='IMPLIED_VERSION'                               
*     & TRANSLATE(PLISTVER(1))^='MAX'                                           
*    THEN                                                                       
*      DO;                                                                      
*                                                                               
*        ZCVAL='';                           /* ERROR FLAG */                   
*        IF PLISTVER='PLISTVER' ! PLISTVER='()'  /*CHECK ENTRY*/                
*          THEN                                                                 
*            DO;                                                                
*              ZMS=' 8, THE "PLISTVER" KEY'!!                                   
*                  ' MUST CONTAIN ONE'!!                                        
*                  ' (OR MORE) ARGUMENT(S).';                                   
*              ANS MSG('?GRBSMFR ---> '!!ZMS);                                  
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                                  
*              ZMACRET=8;                    /* MACRO ERROR */                  
*              ZCVAL='NO_ARGUMENT';                                             
*            END;                                                               
*        IF NUMBER(PLISTVER)>1               /* CHECK POSITIONALS */            
*          THEN                                                                 
*            DO;                                                                
*              ZMS=' 8, "PLISTVER'!!         /**KPOSP* MSG*/                    
*                  PLISTVER!!                                                   
*                  '" "PLISTVER"'!!                                             
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                                
*              ANS MSG('?GRBSMFR ---> '!!ZMS);                                  
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                                  
*              ZMACRET=8;                    /* MACRO ERROR */                  
*            END;                                                               
*                                                                               
*        ZC=PLISTVER(1);                                                        
*        DO ZL=1 TO LENGTH(ZC);              /* MUST BE NUMBER */               
*          IF ZC(ZL:ZL)<'0' !                /* MUST BE NUMERIC */              
*             ZC(ZL:ZL)>'9'                  /* MUST BE NUMERIC */              
*            THEN                                                               
*              ZCVAL='NUMERIC';              /* NUMERIC ERROR */                
*        END;                                                                   
*        IF ZCVAL=''                                                            
*          THEN                                                                 
*            DO;                             /* CHECK RANGE LIMITS */           
*            IF FIXED(PLISTVER(1))>=XPLISTVER                                   
*              THEN                                                             
*                XPLISTVER=FIXED(PLISTVER(1));                                  
*              ELSE                                                             
*                DO;                                                            
*              ZMS=' 8, PLISTVER='!!         /**KVALP* MSG*/                    
*                    PLISTVER(1)!!                                              
*                  ', BUT PLISTVER OF '!!                                       
*                    CHAR(XPLISTVER)!!                                          
*                  ' IS REQUIRED.';                                             
*              ANS MSG('?GRBSMFR ---> '!!ZMS);                                  
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                                  
*              ZMACRET=8;                    /* MACRO ERROR */                  
*                END;                                                           
*              IF XPLISTVER<0 !              /* LOW LIMIT */                    
*                 XPLISTVER>0                /* HIGH LIMIT */                   
*                THEN                                                           
*                  ZCVAL='RANGE';            /* RANGE ERROR */                  
*            END;                                                               
*        IF ZCVAL^=''                                                           
*          THEN                                                                 
*            DO;                             /* RANGE ERROR */                  
*              ZXPLISTVER='';                /* RESET IN/OUTPUT */              
*              ZMS=' 8, "PLISTVER '!!        /**KRNGP* MSG*/                    
*                  PLISTVER!!                                                   
*                  '" THE RANGE IS "0-0"'!!                                     
*                  ' FOR ARGUMENT 1.';                                          
*              ANS MSG('?GRBSMFR ---> '!!ZMS);                                  
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                                  
*              ZMACRET=8;                    /* MACRO ERROR */                  
*            END;                                                               
*      END;                                                                     
*                                                                               
*/********************************************************************/         
*/***PG.MF01  PROCESS MF MACRO FORMS                                 */         
*/********************************************************************/         
*/*PG.KKCTL01 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/         
*  XMF='';                                                                      
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/         
*  IF TRANSLATE(MF(1))                                                          
*              = 'S'                         /* CHECK FOR KEYWORD */            
*    THEN                                                                       
*      DO;                                                                      
*        XMF='S';                            /* SET XVARIABLE */                
*        IF NUMBER(MF)>1                     /* CHECK POSITIONALS */            
*          THEN                                                                 
*            DO;                                                                
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/                    
*                  MF!!                                                         
*                  '" "MF"'!!                                                   
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                                
*              ANS MSG('?GRBSMFR ---> '!!ZMS);                                  
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                                  
*              ZMACRET=8;                    /* MACRO ERROR */                  
*            END;                                                               
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/         
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */             
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/         
*  IF TRANSLATE(MF(1))                                                          
*              = 'L'                         /* CHECK FOR KEYWORD */            
*    THEN                                                                       
*      DO;                                                                      
*        XMF='L';                            /* SET XVARIABLE */                
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */            
*          THEN                                                                 
*            DO;                                                                
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/                    
*                  MF!!                                                         
*                  '" "MF"'!!                                                   
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                               
*              ANS MSG('?GRBSMFR ---> '!!ZMS);                                  
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                                  
*              ZMACRET=8;                    /* MACRO ERROR */                  
*            END;                                                               
*/*PG.KKCTL10 -MF(L) SPECIAL CHECK-----------------------------------*/         
*        ZMAXINVOCLEN = LENGTH(MF) + 2;                                         
*        IF PLISTVER ^= ''                                                      
*          THEN                                                                 
*            ZMAXINVOCLEN=ZMAXINVOCLEN + LENGTH(PLISTVER) + 8;                  
*        IF LENGTH(MACKEYS) > ZMAXINVOCLEN !                                    
*           MACLIST ^= ''                    /* CHECK FOR OTHER PARMS*/         
*          THEN                                                                 
*            DO;                                                                
*              ZMS=' 8, THE "L" FORM OF "MF"'!! /**MFLP* MSG*/                  
*                  ' CAN ONLY HAVE'!!                                           
*                  ' THE "PLISTVER" KEY'!!                                      
*                  ' SPECIFIED ON THE INVOCATION.';                             
*              ANS MSG('?GRBSMFR ---> '!!ZMS);                                  
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                                  
*              ZMACRET=8;                    /* MACRO ERROR */                  
*            END;                                                               
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/         
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */                
*  IF MF(2)=''                               /* CHECK FOR NULL */               
*   THEN                                                                        
*    DO;                                     /* KEY IS REQUIRED */              
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */              
*        ZMS=' 8, WHEN "L" IS SPECIFIED'!!                                      
*            ' FOR THE "MF" KEY, POSITIONAL'!!                                  
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/                    
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*    END;                                                                       
*  ELSE                                                                         
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */                
*/*PG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE--------------------*/         
*  ZXMFATTR='INPUT';                         /* SET IN/OUTPUT */                
*  XMFATTR='BDY(DWORD)';                     /* SET DEFAULT */                  
*  IF MF(3)^=''                              /* CHECK FOR NULL */               
*    THEN                                                                       
*      XMFATTR=MF(3);                        /* SET XVARIABLE */                
*/*PG.KCK01 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH---------------*/         
*  IF ZXMFATTR^='' &                         /* NOT IN/OUTPUT */                
*     LENGTH(XMFATTR)>60                                                        
*    THEN                                                                       
*      DO;                                                                      
*        ZXMFATTR='';                        /* RESET IN/OUTPUT */              
*        ZMS=' 8, "MF'!!                     /**KLNGP* MSG*/                    
*            MF!!                                                               
*            '" ARGUMENT 3 EXCEEDS THE MAXIMUM'!!                               
*            ' LENGTH OF 60 CHARACTERS. ';                                      
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*      END;                                                                     
*/*PG.KKCTL02 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/         
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */             
*/*PG.KKCTL03 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/         
*  IF TRANSLATE(MF(1))                                                          
*              = 'E'                         /* CHECK FOR KEYWORD */            
*    THEN                                                                       
*      DO;                                                                      
*        XMF='E';                            /* SET XVARIABLE */                
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */            
*          THEN                                                                 
*            DO;                                                                
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/                    
*                  MF!!                                                         
*                  '" "MF"'!!                                                   
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                               
*              ANS MSG('?GRBSMFR ---> '!!ZMS);                                  
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                                  
*              ZMACRET=8;                    /* MACRO ERROR */                  
*            END;                                                               
*/*PG.KXVAR03 NAME, OPT RQD INPUT, POS(2) -XVARIABLE-----------------*/         
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */                
*  IF MF(2)=''                               /* CHECK FOR NULL */               
*   THEN                                                                        
*    DO;                                     /* KEY IS REQUIRED */              
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */              
*        ZMS=' 8, WHEN "E" IS SPECIFIED'!!                                      
*            ' FOR THE "MF" KEY, POSITIONAL'!!                                  
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/                    
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*    END;                                                                       
*  ELSE                                                                         
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */                
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/         
*  XMFSCK='';                                /* RESET XVARIABLE */              
*  IF TRANSLATE(MF(3))                                                          
*              = 'COMPLETE'                  /* CHECK FOR KEYWORD */            
*    THEN                                                                       
*      XMFSCK = 'COMPLETE';                  /* SET XVARIABLE */                
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/         
*  ZXMFSCK='INPUT';                          /* SET IN/OUTPUT */                
*  IF XMFSCK=''                              /* CHECK FOR KEYWORD */            
*    THEN                                                                       
*      DO;                                   /* KEYWORD NOT ENTERED */          
*        XMFSCK='COMPLETE';                  /* SET DEFAULT */                  
*        IF MF(3)^=''                                                           
*          THEN                                                                 
*            DO;                                                                
*              ZXMFSCK='';                   /* RESET IN/OUTPUT */              
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/                    
*                  MF!!'"'!!                                                    
*                  ' ARGUMENT 3 IS AN UNKNOWN KEYWORD. '!!                      
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                            
*                  ' "COMPLETE".';           /* VALID KEYWORD */                
*              ANS MSG('?GRBSMFR ---> '!!ZMS);                                  
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                                  
*              ZMACRET=8;                    /* MACRO ERROR */                  
*            END;                                                               
*      END;                                                                     
*/*PG.KKCTL05 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/         
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */             
*/*PG.KKCTL06 VALUE, OPT INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/         
*  IF MF='MF'                                                                   
*    ! MF='()'                               /*CHECK ENTRY*/                    
*     THEN                                                                      
*       DO;                                                                     
*              ZMS=' 8, THE "MF" KEY'!!                                         
*                  ' MUST CONTAIN ONE'!!                                        
*                  ' (OR MORE) ARGUMENT(S).';                                   
*              ANS MSG('?GRBSMFR ---> '!!ZMS);                                  
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                                  
*              ZMACRET=8;                    /* MACRO ERROR */                  
*       END;                                                                    
*  ELSE                                                                         
*    DO;                                                                        
*      ZXMF='INPUT';                         /* SET IN/OUTPUT */                
*      IF XMF=''                             /* CHECK FOR KEYWORD */            
*        THEN                                                                   
*          DO;                               /* KEYWORD NOT ENTERED */          
*            XMF='S';                        /* SET DEFAULT */                  
*            XMFSCK='COMPLETE';              /* COMPLETE CHECKING */            
*            IF MF(1)^=''                    /* CHECK FOR KEYWORD */            
*              THEN                                                             
*                DO;                                                            
*                  ZXMF='';                  /* RESET IN/OUTPUT */              
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/                    
*                  MF!!'"'!!                                                    
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!                      
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                            
*                  ' "S",'!!                 /* VALID KEYWORD */                
*                  ' "L",'!!                 /* VALID KEYWORD */                
*                  ' OR "E".';               /* VALID KEYWORD */                
*              ANS MSG('?GRBSMFR ---> '!!ZMS);                                  
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                                  
*              ZMACRET=8;                    /* MACRO ERROR */                  
*                END;                                                           
*          END;                                                                 
*    END;                                                                       
*/********************************************************************/         
*/***PD.P01 FULL DEFAULT CHECKING                                    */         
*/********************************************************************/         
*  IF PLISTVER=''                                                               
*     ! PLISTVER(1)='IMPLIED_VERSION'                                           
*    THEN                                                                       
*      ZC='ON';                              /* DEFAULT FLAG ON */              
*    ELSE                                                                       
*      ZC='OFF';                             /* DEFAULT FLAG OFF */             
*/********************************************************************/         
*/***PD.P02 DEFAULT ECHO                                             */         
*/********************************************************************/         
*/*PD.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/         
*  IF XMF^='L'                                                                  
*    THEN                                                                       
*      DO;                                   /* FULL SYNTAX CHECK */            
*        ANS('/*DEFAULT(S): */')                                                
*           NORESCAN COL(MACLMAR+5);                                            
*/*PD.KMEKY03 VALUE, RQD INPUT, ME KEYS -NON-XVARIABLE KEY-----------*/         
*  XREQUEST='';                              /* RESET XVARIABLE */              
*  IF OPEN^=''                               /* CHECK ME KEY */                 
*    THEN                                                                       
*      DO;                                   /* VALID ME KEY */                 
*        XREQUEST='OPEN';                    /* SET XVAR1 */                    
*        XOPEN='OPEN';                       /* SET XVAR */                     
*      END;                                                                     
*/*PD.KMEKY04 VALUE, RQD INPUT, ME KEYS -NON-XVARIABLE KEY-----------*/         
*  IF GET^=''                                /* CHECK ME KEY */                 
*    THEN                                                                       
*      DO;                                   /* VALID ME KEY */                 
*        IF XREQUEST=''                      /* CHECK XVARIABLE */              
*          THEN                                                                 
*            DO;                                                                
*              XREQUEST='GET';               /* SET XVAR1 */                    
*              XGET='GET';                   /* SET XVAR */                     
*            END;                                                               
*      END;                                                                     
*/*PD.KMEKY04 VALUE, RQD INPUT, ME KEYS -NON-XVARIABLE KEY-----------*/         
*  IF CLOSE^=''                              /* CHECK ME KEY */                 
*    THEN                                                                       
*      DO;                                   /* VALID ME KEY */                 
*        IF XREQUEST=''                      /* CHECK XVARIABLE */              
*          THEN                                                                 
*            DO;                                                                
*              XREQUEST='CLOSE';             /* SET XVAR1 */                    
*              XCLOSE='CLOSE';               /* SET XVAR */                     
*            END;                                                               
*      END;                                                                     
*/*PD.KMEKY07 VALUE, RQD INPUT, ME KEYS -ME KEY DEFAULT--------------*/         
*  IF XREQUEST=''                            /* CHECK XVARIABLE */              
*    THEN                                                                       
*      DO;                                                                      
*        XREQUEST='OPEN';                                                       
*        ZC='ON';                            /* DEFAULT FLAG ON */              
*      END;                                                                     
*/*PD.KMEKY10 VALUE, RQD INPUT, ME KEYS -START-----------------------*/         
*  IF XREQUEST='OPEN'                        /* CHECK FOR ME KEY */             
*    THEN                                                                       
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */                
*/*PD.KMEKY03 VALUE, RQD INPUT, ME KEYS -NON-XVARIABLE KEY-----------*/         
*  XPROCESSFUNCTION='';                      /* RESET XVARIABLE */              
*  IF ASSEMBLE^=''                           /* CHECK ME KEY */                 
*    THEN                                                                       
*      DO;                                   /* VALID ME KEY */                 
*        XPROCESSFUNCTION='ASSEMBLE';        /* SET XVAR1 */                    
*        XASSEMBLE='ASSEMBLE';               /* SET XVAR */                     
*      END;                                                                     
*/*PD.KMEKY04 VALUE, RQD INPUT, ME KEYS -NON-XVARIABLE KEY-----------*/         
*  IF CONVERT^=''                            /* CHECK ME KEY */                 
*    THEN                                                                       
*      DO;                                   /* VALID ME KEY */                 
*        IF XPROCESSFUNCTION=''              /* CHECK XVARIABLE */              
*          THEN                                                                 
*            DO;                                                                
*              XPROCESSFUNCTION='CONVERT';   /* SET XVAR1 */                    
*              XCONVERT='CONVERT';           /* SET XVAR */                     
*            END;                                                               
*      END;                                                                     
*/*PD.KMEKY04 VALUE, RQD INPUT, ME KEYS -NON-XVARIABLE KEY-----------*/         
*  IF NONE^=''                               /* CHECK ME KEY */                 
*    THEN                                                                       
*      DO;                                   /* VALID ME KEY */                 
*        IF XPROCESSFUNCTION=''              /* CHECK XVARIABLE */              
*          THEN                                                                 
*            DO;                                                                
*              XPROCESSFUNCTION='NONE';      /* SET XVAR1 */                    
*              XNONE='NONE';                 /* SET XVAR */                     
*            END;                                                               
*      END;                                                                     
*/*PD.KMEKY07 VALUE, RQD INPUT, ME KEYS -ME KEY DEFAULT--------------*/         
*  IF XPROCESSFUNCTION=''                    /* CHECK XVARIABLE */              
*    THEN                                                                       
*      DO;                                                                      
*        XPROCESSFUNCTION='ASSEMBLE';                                           
*        ZC='ON';                            /* DEFAULT FLAG ON */              
*      END;                                                                     
*/*PD.KMEKY10 VALUE, RQD INPUT, ME KEYS -START-----------------------*/         
*  IF XPROCESSFUNCTION='ASSEMBLE'            /* CHECK FOR ME KEY */             
*    THEN                                                                       
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */                
*/*PD.KMEKY09 VALUE, RQD INPUT, ME KEYS -END-------------------------*/         
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */                  
*/*PD.KMEKY10 VALUE, RQD INPUT, ME KEYS -START-----------------------*/         
*  IF XPROCESSFUNCTION='CONVERT'             /* CHECK FOR ME KEY */             
*    THEN                                                                       
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */                
*/*PD.KMEKY09 VALUE, RQD INPUT, ME KEYS -END-------------------------*/         
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */                  
*/*PD.KMEKY10 VALUE, RQD INPUT, ME KEYS -START-----------------------*/         
*  IF XPROCESSFUNCTION='NONE'                /* CHECK FOR ME KEY */             
*    THEN                                                                       
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */                
*/*PD.KMEKY11 VALUE, RQD INPUT, ME KEYS -END-------------------------*/         
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */                  
*/*PD.KMEKY09 VALUE, RQD INPUT, ME KEYS -END-------------------------*/         
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */                  
*/*PD.KMEKY10 VALUE, RQD INPUT, ME KEYS -START-----------------------*/         
*  IF XREQUEST='GET'                         /* CHECK FOR ME KEY */             
*    THEN                                                                       
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */                
*/*PD.KMEKY09 VALUE, RQD INPUT, ME KEYS -END-------------------------*/         
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */                  
*/*PD.KMEKY10 VALUE, RQD INPUT, ME KEYS -START-----------------------*/         
*  IF XREQUEST='CLOSE'                       /* CHECK FOR ME KEY */             
*    THEN                                                                       
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */                
*/*PD.KMEKY11 VALUE, RQD INPUT, ME KEYS -END-------------------------*/         
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */                  
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/         
*  IF PLISTVER=''                                                               
*    THEN DO;                                                                   
*      ANS('/* PLISTVER('!!                                                     
*          CHAR(XPLISTVER)!!                                                    
*          ')*/')                                                               
*          NORESCAN COL(MACLMAR+5);                                             
*    END;                                                                       
*  IF ZC='OFF'                               /*NO DEFAULTS TAKEN */             
*    THEN                                                                       
*      ANS('/* NONE. */')                                                       
*         NORESCAN COL(MACLMAR+5);                                              
*/*PD.P04 END DEFAULT ECHO ------------------------------------------*/         
*      END;                                                                     
*/********************************************************************/         
*/***PG.P01 FULL MACRO SYNTAX CHECKING                               */         
*/********************************************************************/         
*/*PG.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/         
*  IF XMF^='L'                                                                  
*    THEN                                                                       
*      DO;                                   /* FULL SYNTAX CHECK */            
*/*PG.P03 EXCESSIVE POSITIONAL ARGUMENTS-----------------------------*/         
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */            
*    THEN                                                                       
*      DO;                                                                      
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'!! /**PPOSP* MSG*/                    
*            ' "'!!MACLIST!!'"'!!                                               
*            ' CANNOT BE USED.'!!                                               
*            ' NO POSITIONAL ARGUMENTS'!!                                       
*            ' ARE ALLOWED.';                                                   
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*      END;                                                                     
*/*PG.KMEKY03 VALUE, RQD INPUT, ME KEYS -NON-XVARIABLE KEY-----------*/         
*  XREQUEST='';                              /* RESET XVARIABLE */              
*  IF OPEN^=''                               /* CHECK ME KEY */                 
*    THEN                                                                       
*      DO;                                   /* VALID ME KEY */                 
*        IF NUMBER(OPEN)>0                   /* CHECK SUBLISTS */               
*          THEN                                                                 
*            DO;                                                                
*              ZMS=' 8, "OPEN'!!             /**KPOSP* MSG*/                    
*                  OPEN!!                                                       
*                  '" "OPEN"'!!                                                 
*                  ' CANNOT HAVE ANY ARGUMENTS.';                               
*              ANS MSG('?GRBSMFR ---> '!!ZMS);                                  
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                                  
*              ZMACRET=8;                    /* MACRO ERROR */                  
*            END;                                                               
*        XREQUEST='OPEN';                    /* SET XVAR1 */                    
*        XOPEN='''OPEN''';                   /* SET XVAR */                     
*        ZXREQUEST='INPUT';                  /* SET IN/OUTPUT */                
*        ZXOPEN='INPUT';                     /* SET IN/OUTPUT */                
*      END;                                                                     
*/*PG.KMEKY04 VALUE, RQD INPUT, ME KEYS -NON-XVARIABLE KEY-----------*/         
*  IF GET^=''                                /* CHECK ME KEY */                 
*    THEN                                                                       
*      DO;                                   /* VALID ME KEY */                 
*        IF NUMBER(GET)>0                    /* CHECK SUBLISTS */               
*          THEN                                                                 
*            DO;                                                                
*              ZMS=' 8, "GET'!!              /**KPOSP* MSG*/                    
*                  GET!!                                                        
*                  '" "GET"'!!                                                  
*                  ' CANNOT HAVE ANY ARGUMENTS.';                               
*              ANS MSG('?GRBSMFR ---> '!!ZMS);                                  
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                                  
*              ZMACRET=8;                    /* MACRO ERROR */                  
*            END;                                                               
*        IF XREQUEST=''                      /* CHECK XVARIABLE */              
*          THEN                                                                 
*            DO;                                                                
*              XREQUEST='GET';               /* SET XVAR1 */                    
*              XGET='''GET''';               /* SET XVAR */                     
*              ZXREQUEST='INPUT';            /* SET IN/OUTPUT */                
*              ZXGET='INPUT';                /* SET IN/OUTPUT */                
*            END;                                                               
*          ELSE                                                                 
*            DO;                                                                
*              ZMS=' 8, "GET'!!              /**KMEKP* MSG*/                    
*                  '"'!!                                                        
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'!!                        
*                  XREQUEST!!                                                   
*                  '" KEY.';                                                    
*              ANS MSG('?GRBSMFR ---> '!!ZMS);                                  
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                                  
*              ZMACRET=8;                    /* MACRO ERROR */                  
*            END;                                                               
*      END;                                                                     
*/*PG.KMEKY04 VALUE, RQD INPUT, ME KEYS -NON-XVARIABLE KEY-----------*/         
*  IF CLOSE^=''                              /* CHECK ME KEY */                 
*    THEN                                                                       
*      DO;                                   /* VALID ME KEY */                 
*        IF NUMBER(CLOSE)>0                  /* CHECK SUBLISTS */               
*          THEN                                                                 
*            DO;                                                                
*              ZMS=' 8, "CLOSE'!!            /**KPOSP* MSG*/                    
*                  CLOSE!!                                                      
*                  '" "CLOSE"'!!                                                
*                  ' CANNOT HAVE ANY ARGUMENTS.';                               
*              ANS MSG('?GRBSMFR ---> '!!ZMS);                                  
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                                  
*              ZMACRET=8;                    /* MACRO ERROR */                  
*            END;                                                               
*        IF XREQUEST=''                      /* CHECK XVARIABLE */              
*          THEN                                                                 
*            DO;                                                                
*              XREQUEST='CLOSE';             /* SET XVAR1 */                    
*              XCLOSE='''CLOSE''';           /* SET XVAR */                     
*              ZXREQUEST='INPUT';            /* SET IN/OUTPUT */                
*              ZXCLOSE='INPUT';              /* SET IN/OUTPUT */                
*            END;                                                               
*          ELSE                                                                 
*            DO;                                                                
*              ZMS=' 8, "CLOSE'!!            /**KMEKP* MSG*/                    
*                  '"'!!                                                        
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'!!                        
*                  XREQUEST!!                                                   
*                  '" KEY.';                                                    
*              ANS MSG('?GRBSMFR ---> '!!ZMS);                                  
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                                  
*              ZMACRET=8;                    /* MACRO ERROR */                  
*            END;                                                               
*      END;                                                                     
*/*PG.KMEKY08 VALUE, RQD INPUT, ME KEYS -ME KEY DEFAULT--------------*/         
*  IF XREQUEST=''                            /* CHECK XVARIABLE */              
*    THEN                                                                       
*      DO;                                                                      
*        XREQUEST='OPEN';                    /* SET DEFAULT */                  
*        XOPEN='0';                          /* SET DEFAULT */                  
*        ZXREQUEST='';                       /* RESET IN/OUTPUT */              
*        ZXOPEN='';                          /* RESET IN/OUTPUT */              
*        ZMS=' 8, ONE OF THE FOLLOWING'!!    /**KMERP* MSG*/                    
*            ' MUTUALLY EXCLUSIVE KEY(S) IS'!!                                  
*            ' REQUIRED:'!!                                                     
*            ' "OPEN",'!!                    /* VALID ME KEY */                 
*            ' "GET",'!!                     /* VALID ME KEY */                 
*            ' OR "CLOSE".';                 /* VALID ME KEY */                 
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*      END;                                                                     
*/*PG.KMEKY11 VALUE, RQD INPUT, ME KEYS -START-----------------------*/         
*  IF XREQUEST='OPEN'                        /* CHECK FOR ME KEY */             
*    & OPEN ^= ''                            /* CHECK FOR OMITTED KEY*/         
*    THEN                                                                       
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */                
*/*PG.KMEKY12 VALUE, RQD INPUT, ME KEYS -DISALLOWED KEYS-------------*/         
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */         
*        IF RSTOKEN^=''                      /* CHECK KEY */                    
*          THEN                                                                 
*            ZCVAL=ZCVAL!!',RSTOKEN';                                           
*        IF ZCVAL^=''                                                           
*          THEN                                                                 
*            DO;                             /* INCORRECT KEYS USED */          
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                                    
*              ZMS=' 8, "OPEN'!!             /**KMEIP* MSG*/                    
*                  '"'!!                                                        
*                  ' DOES NOT ALLOW THE USE OF THE'!!                           
*                  ' FOLLOWING KEY(S) "'!!                                      
*                  ZCVAL!!'".';                                                 
*              ANS MSG('?GRBSMFR ---> '!!ZMS);                                  
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                                  
*              ZMACRET=8;                    /* MACRO ERROR */                  
*            END;                                                               
*/*PG.KMEKY03 VALUE, RQD INPUT, ME KEYS -NON-XVARIABLE KEY-----------*/         
*  XPROCESSFUNCTION='';                      /* RESET XVARIABLE */              
*  IF ASSEMBLE^=''                           /* CHECK ME KEY */                 
*    THEN                                                                       
*      DO;                                   /* VALID ME KEY */                 
*        IF NUMBER(ASSEMBLE)>0               /* CHECK SUBLISTS */               
*          THEN                                                                 
*            DO;                                                                
*              ZMS=' 8, "ASSEMBLE'!!         /**KPOSP* MSG*/                    
*                  ASSEMBLE!!                                                   
*                  '" "ASSEMBLE"'!!                                             
*                  ' CANNOT HAVE ANY ARGUMENTS.';                               
*              ANS MSG('?GRBSMFR ---> '!!ZMS);                                  
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                                  
*              ZMACRET=8;                    /* MACRO ERROR */                  
*            END;                                                               
*        XPROCESSFUNCTION='ASSEMBLE';        /* SET XVAR1 */                    
*        XASSEMBLE='''ASSEMBLE''';           /* SET XVAR */                     
*        ZXPROCESSFUNCTION='INPUT';          /* SET IN/OUTPUT */                
*        ZXASSEMBLE='INPUT';                 /* SET IN/OUTPUT */                
*      END;                                                                     
*/*PG.KMEKY04 VALUE, RQD INPUT, ME KEYS -NON-XVARIABLE KEY-----------*/         
*  IF CONVERT^=''                            /* CHECK ME KEY */                 
*    THEN                                                                       
*      DO;                                   /* VALID ME KEY */                 
*        IF NUMBER(CONVERT)>0                /* CHECK SUBLISTS */               
*          THEN                                                                 
*            DO;                                                                
*              ZMS=' 8, "CONVERT'!!          /**KPOSP* MSG*/                    
*                  CONVERT!!                                                    
*                  '" "CONVERT"'!!                                              
*                  ' CANNOT HAVE ANY ARGUMENTS.';                               
*              ANS MSG('?GRBSMFR ---> '!!ZMS);                                  
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                                  
*              ZMACRET=8;                    /* MACRO ERROR */                  
*            END;                                                               
*        IF XPROCESSFUNCTION=''              /* CHECK XVARIABLE */              
*          THEN                                                                 
*            DO;                                                                
*              XPROCESSFUNCTION='CONVERT';   /* SET XVAR1 */                    
*              XCONVERT='''CONVERT''';       /* SET XVAR */                     
*              ZXPROCESSFUNCTION='INPUT';    /* SET IN/OUTPUT */                
*              ZXCONVERT='INPUT';            /* SET IN/OUTPUT */                
*            END;                                                               
*          ELSE                                                                 
*            DO;                                                                
*              ZMS=' 8, "CONVERT'!!          /**KMEKP* MSG*/                    
*                  '"'!!                                                        
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'!!                        
*                  XPROCESSFUNCTION!!                                           
*                  '" KEY.';                                                    
*              ANS MSG('?GRBSMFR ---> '!!ZMS);                                  
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                                  
*              ZMACRET=8;                    /* MACRO ERROR */                  
*            END;                                                               
*      END;                                                                     
*/*PG.KMEKY04 VALUE, RQD INPUT, ME KEYS -NON-XVARIABLE KEY-----------*/         
*  IF NONE^=''                               /* CHECK ME KEY */                 
*    THEN                                                                       
*      DO;                                   /* VALID ME KEY */                 
*        IF NUMBER(NONE)>0                   /* CHECK SUBLISTS */               
*          THEN                                                                 
*            DO;                                                                
*              ZMS=' 8, "NONE'!!             /**KPOSP* MSG*/                    
*                  NONE!!                                                       
*                  '" "NONE"'!!                                                 
*                  ' CANNOT HAVE ANY ARGUMENTS.';                               
*              ANS MSG('?GRBSMFR ---> '!!ZMS);                                  
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                                  
*              ZMACRET=8;                    /* MACRO ERROR */                  
*            END;                                                               
*        IF XPROCESSFUNCTION=''              /* CHECK XVARIABLE */              
*          THEN                                                                 
*            DO;                                                                
*              XPROCESSFUNCTION='NONE';      /* SET XVAR1 */                    
*              XNONE='''NONE''';             /* SET XVAR */                     
*              ZXPROCESSFUNCTION='INPUT';    /* SET IN/OUTPUT */                
*              ZXNONE='INPUT';               /* SET IN/OUTPUT */                
*            END;                                                               
*          ELSE                                                                 
*            DO;                                                                
*              ZMS=' 8, "NONE'!!             /**KMEKP* MSG*/                    
*                  '"'!!                                                        
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'!!                        
*                  XPROCESSFUNCTION!!                                           
*                  '" KEY.';                                                    
*              ANS MSG('?GRBSMFR ---> '!!ZMS);                                  
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                                  
*              ZMACRET=8;                    /* MACRO ERROR */                  
*            END;                                                               
*      END;                                                                     
*/*PG.KMEKY08 VALUE, RQD INPUT, ME KEYS -ME KEY DEFAULT--------------*/         
*  IF XPROCESSFUNCTION=''                    /* CHECK XVARIABLE */              
*    THEN                                                                       
*      DO;                                                                      
*        XPROCESSFUNCTION='ASSEMBLE';        /* SET DEFAULT */                  
*        XASSEMBLE='0';                      /* SET DEFAULT */                  
*        ZXPROCESSFUNCTION='';               /* RESET IN/OUTPUT */              
*        ZXASSEMBLE='';                      /* RESET IN/OUTPUT */              
*        ZMS=' 8, ONE OF THE FOLLOWING'!!    /**KMERP* MSG*/                    
*            ' MUTUALLY EXCLUSIVE KEY(S) IS'!!                                  
*            ' REQUIRED:'!!                                                     
*            ' "ASSEMBLE",'!!                /* VALID ME KEY */                 
*            ' "CONVERT",'!!                 /* VALID ME KEY */                 
*            ' OR "NONE".';                  /* VALID ME KEY */                 
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*      END;                                                                     
*/*PG.KXVAR01 NAME, RQD OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/         
*  IF NUMBER(REQTOKEN)>1                     /* CHECK POSITIONALS */            
*    THEN                                                                       
*      DO;                                                                      
*        ZMS=' 8, "REQTOKEN'!!               /**KPOSP* MSG*/                    
*            REQTOKEN!!                                                         
*            '" "REQTOKEN"'!!                                                   
*            ' CAN HAVE ONLY 1 ARGUMENT.';                                      
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*      END;                                                                     
*/*PG.KXVAR03 NAME, RQD OUTPUT, KEYS -XVARIABLE----------------------*/         
*  XREQTOKEN=REQTOKEN(1);                    /* SET XVARIABLE */                
*  IF REQTOKEN(1)=''                         /* CHECK FOR NULL */               
*   THEN                                                                        
*    DO;                                     /* KEY IS REQUIRED */              
*        ZXREQTOKEN='';                      /* RESET IN/OUTPUT */              
*        ZMS=' 8,  '!!                                                          
*            ' "REQTOKEN" KEY AND ITS'!!                                        
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/                    
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*    END;                                                                       
*  ELSE                                                                         
*    ZXREQTOKEN='OUTPUT';                    /* SET IN/OUTPUT */                
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/         
*  IF NUMBER(DDNAME)>1                       /* CHECK POSITIONALS */            
*    THEN                                                                       
*      DO;                                                                      
*        ZMS=' 8, "DDNAME'!!                 /**KPOSP* MSG*/                    
*            DDNAME!!                                                           
*            '" "DDNAME"'!!                                                     
*            ' CAN HAVE ONLY 1 ARGUMENT.';                                      
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*      END;                                                                     
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/         
*  XDDNAME=DDNAME(1);                        /* SET XVARIABLE */                
*  IF DDNAME(1)=''                           /* CHECK FOR NULL */               
*   THEN                                                                        
*    DO;                                     /* KEY IS REQUIRED */              
*        ZXDDNAME='';                        /* RESET IN/OUTPUT */              
*        ZMS=' 8,  '!!                                                          
*            ' "DDNAME" KEY AND ITS'!!                                          
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/                    
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*    END;                                                                       
*  ELSE                                                                         
*    ZXDDNAME='INPUT';                       /* SET IN/OUTPUT */                
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/         
*  IF NUMBER(FILTLIST)>1                     /* CHECK POSITIONALS */            
*    THEN                                                                       
*      DO;                                                                      
*        ZMS=' 8, "FILTLIST'!!               /**KPOSP* MSG*/                    
*            FILTLIST!!                                                         
*            '" "FILTLIST"'!!                                                   
*            ' CAN HAVE ONLY 1 ARGUMENT.';                                      
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*      END;                                                                     
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/         
*  XFILTLIST=FILTLIST(1);                    /* SET XVARIABLE */                
*  IF FILTLIST(1)=''                         /* CHECK FOR NULL */               
*   THEN                                                                        
*    DO;                                     /* KEY IS REQUIRED */              
*        ZXFILTLIST='';                      /* RESET IN/OUTPUT */              
*        ZMS=' 8,  '!!                                                          
*            ' "FILTLIST" KEY AND ITS'!!                                        
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/                    
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*    END;                                                                       
*  ELSE                                                                         
*    ZXFILTLIST='INPUT';                     /* SET IN/OUTPUT */                
*/*PG.KXVAR01 NAME, RQD INOUT, KEYS -EXCESSIVE ARGUMENTS-------------*/         
*  IF NUMBER(ANSAREAP)>1                     /* CHECK POSITIONALS */            
*    THEN                                                                       
*      DO;                                                                      
*        ZMS=' 8, "ANSAREAP'!!               /**KPOSP* MSG*/                    
*            ANSAREAP!!                                                         
*            '" "ANSAREAP"'!!                                                   
*            ' CAN HAVE ONLY 1 ARGUMENT.';                                      
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*      END;                                                                     
*/*PG.KXVAR03 NAME, RQD INOUT, KEYS -XVARIABLE-----------------------*/         
*  XANSAREAP=ANSAREAP(1);                    /* SET XVARIABLE */                
*  IF ANSAREAP(1)=''                         /* CHECK FOR NULL */               
*   THEN                                                                        
*    DO;                                     /* KEY IS REQUIRED */              
*        ZXANSAREAP='';                      /* RESET IN/OUTPUT */              
*        ZMS=' 8,  '!!                                                          
*            ' "ANSAREAP" KEY AND ITS'!!                                        
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/                    
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*    END;                                                                       
*  ELSE                                                                         
*    ZXANSAREAP='INOUT';                     /* SET IN/OUTPUT */                
*/*PG.KXVAR01 NAME, RQD INOUT, KEYS -EXCESSIVE ARGUMENTS-------------*/         
*  IF NUMBER(ANSAREAL)>1                     /* CHECK POSITIONALS */            
*    THEN                                                                       
*      DO;                                                                      
*        ZMS=' 8, "ANSAREAL'!!               /**KPOSP* MSG*/                    
*            ANSAREAL!!                                                         
*            '" "ANSAREAL"'!!                                                   
*            ' CAN HAVE ONLY 1 ARGUMENT.';                                      
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*      END;                                                                     
*/*PG.KXVAR03 NAME, RQD INOUT, KEYS -XVARIABLE-----------------------*/         
*  XANSAREAL=ANSAREAL(1);                    /* SET XVARIABLE */                
*  IF ANSAREAL(1)=''                         /* CHECK FOR NULL */               
*   THEN                                                                        
*    DO;                                     /* KEY IS REQUIRED */              
*        ZXANSAREAL='';                      /* RESET IN/OUTPUT */              
*        ZMS=' 8,  '!!                                                          
*            ' "ANSAREAL" KEY AND ITS'!!                                        
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/                    
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*    END;                                                                       
*  ELSE                                                                         
*    ZXANSAREAL='INOUT';                     /* SET IN/OUTPUT */                
*/*PG.KMEKY10 VALUE, RQD INPUT, ME KEYS -END-------------------------*/         
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */                  
*/*PG.KMEKY11 VALUE, RQD INPUT, ME KEYS -START-----------------------*/         
*  IF XREQUEST='GET'                         /* CHECK FOR ME KEY */             
*    THEN                                                                       
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */                
*/*PG.KMEKY12 VALUE, RQD INPUT, ME KEYS -DISALLOWED KEYS-------------*/         
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */         
*        IF ASSEMBLE^=''                     /* CHECK KEY */                    
*          THEN                                                                 
*            ZCVAL=ZCVAL!!',ASSEMBLE';                                          
*        IF CONVERT^=''                      /* CHECK KEY */                    
*          THEN                                                                 
*            ZCVAL=ZCVAL!!',CONVERT';                                           
*        IF NONE^=''                         /* CHECK KEY */                    
*          THEN                                                                 
*            ZCVAL=ZCVAL!!',NONE';                                              
*        IF DDNAME^=''                       /* CHECK KEY */                    
*          THEN                                                                 
*            ZCVAL=ZCVAL!!',DDNAME';                                            
*        IF FILTLIST^=''                     /* CHECK KEY */                    
*          THEN                                                                 
*            ZCVAL=ZCVAL!!',FILTLIST';                                          
*        IF ZCVAL^=''                                                           
*          THEN                                                                 
*            DO;                             /* INCORRECT KEYS USED */          
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                                    
*              ZMS=' 8, "GET'!!              /**KMEIP* MSG*/                    
*                  '"'!!                                                        
*                  ' DOES NOT ALLOW THE USE OF THE'!!                           
*                  ' FOLLOWING KEY(S) "'!!                                      
*                  ZCVAL!!'".';                                                 
*              ANS MSG('?GRBSMFR ---> '!!ZMS);                                  
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                                  
*              ZMACRET=8;                    /* MACRO ERROR */                  
*            END;                                                               
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/         
*  IF NUMBER(REQTOKEN)>1                     /* CHECK POSITIONALS */            
*    THEN                                                                       
*      DO;                                                                      
*        ZMS=' 8, "REQTOKEN'!!               /**KPOSP* MSG*/                    
*            REQTOKEN!!                                                         
*            '" "REQTOKEN"'!!                                                   
*            ' CAN HAVE ONLY 1 ARGUMENT.';                                      
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*      END;                                                                     
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/         
*  XREQTOKEN=REQTOKEN(1);                    /* SET XVARIABLE */                
*  IF REQTOKEN(1)=''                         /* CHECK FOR NULL */               
*   THEN                                                                        
*    DO;                                     /* KEY IS REQUIRED */              
*        ZXREQTOKEN='';                      /* RESET IN/OUTPUT */              
*        ZMS=' 8,  '!!                                                          
*            ' "REQTOKEN" KEY AND ITS'!!                                        
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/                    
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*    END;                                                                       
*  ELSE                                                                         
*    ZXREQTOKEN='INPUT';                     /* SET IN/OUTPUT */                
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/         
*  IF NUMBER(RSTOKEN)>1                      /* CHECK POSITIONALS */            
*    THEN                                                                       
*      DO;                                                                      
*        ZMS=' 8, "RSTOKEN'!!                /**KPOSP* MSG*/                    
*            RSTOKEN!!                                                          
*            '" "RSTOKEN"'!!                                                    
*            ' CAN HAVE ONLY 1 ARGUMENT.';                                      
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*      END;                                                                     
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/         
*  XRSTOKEN=RSTOKEN(1);                      /* SET XVARIABLE */                
*  IF RSTOKEN(1)=''                          /* CHECK FOR NULL */               
*   THEN                                                                        
*    DO;                                     /* KEY IS REQUIRED */              
*        ZXRSTOKEN='';                       /* RESET IN/OUTPUT */              
*        ZMS=' 8,  '!!                                                          
*            ' "RSTOKEN" KEY AND ITS'!!                                         
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/                    
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*    END;                                                                       
*  ELSE                                                                         
*    ZXRSTOKEN='INPUT';                      /* SET IN/OUTPUT */                
*/*PG.KXVAR01 NAME, RQD INOUT, KEYS -EXCESSIVE ARGUMENTS-------------*/         
*  IF NUMBER(ANSAREAP)>1                     /* CHECK POSITIONALS */            
*    THEN                                                                       
*      DO;                                                                      
*        ZMS=' 8, "ANSAREAP'!!               /**KPOSP* MSG*/                    
*            ANSAREAP!!                                                         
*            '" "ANSAREAP"'!!                                                   
*            ' CAN HAVE ONLY 1 ARGUMENT.';                                      
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*      END;                                                                     
*/*PG.KXVAR03 NAME, RQD INOUT, KEYS -XVARIABLE-----------------------*/         
*  XANSAREAP=ANSAREAP(1);                    /* SET XVARIABLE */                
*  IF ANSAREAP(1)=''                         /* CHECK FOR NULL */               
*   THEN                                                                        
*    DO;                                     /* KEY IS REQUIRED */              
*        ZXANSAREAP='';                      /* RESET IN/OUTPUT */              
*        ZMS=' 8,  '!!                                                          
*            ' "ANSAREAP" KEY AND ITS'!!                                        
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/                    
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*    END;                                                                       
*  ELSE                                                                         
*    ZXANSAREAP='INOUT';                     /* SET IN/OUTPUT */                
*/*PG.KXVAR01 NAME, RQD INOUT, KEYS -EXCESSIVE ARGUMENTS-------------*/         
*  IF NUMBER(ANSAREAL)>1                     /* CHECK POSITIONALS */            
*    THEN                                                                       
*      DO;                                                                      
*        ZMS=' 8, "ANSAREAL'!!               /**KPOSP* MSG*/                    
*            ANSAREAL!!                                                         
*            '" "ANSAREAL"'!!                                                   
*            ' CAN HAVE ONLY 1 ARGUMENT.';                                      
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*      END;                                                                     
*/*PG.KXVAR03 NAME, RQD INOUT, KEYS -XVARIABLE-----------------------*/         
*  XANSAREAL=ANSAREAL(1);                    /* SET XVARIABLE */                
*  IF ANSAREAL(1)=''                         /* CHECK FOR NULL */               
*   THEN                                                                        
*    DO;                                     /* KEY IS REQUIRED */              
*        ZXANSAREAL='';                      /* RESET IN/OUTPUT */              
*        ZMS=' 8,  '!!                                                          
*            ' "ANSAREAL" KEY AND ITS'!!                                        
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/                    
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*    END;                                                                       
*  ELSE                                                                         
*    ZXANSAREAL='INOUT';                     /* SET IN/OUTPUT */                
*/*PG.KMEKY10 VALUE, RQD INPUT, ME KEYS -END-------------------------*/         
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */                  
*/*PG.KMEKY11 VALUE, RQD INPUT, ME KEYS -START-----------------------*/         
*  IF XREQUEST='CLOSE'                       /* CHECK FOR ME KEY */             
*    THEN                                                                       
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */                
*/*PG.KMEKY12 VALUE, RQD INPUT, ME KEYS -DISALLOWED KEYS-------------*/         
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */         
*        IF ASSEMBLE^=''                     /* CHECK KEY */                    
*          THEN                                                                 
*            ZCVAL=ZCVAL!!',ASSEMBLE';                                          
*        IF CONVERT^=''                      /* CHECK KEY */                    
*          THEN                                                                 
*            ZCVAL=ZCVAL!!',CONVERT';                                           
*        IF NONE^=''                         /* CHECK KEY */                    
*          THEN                                                                 
*            ZCVAL=ZCVAL!!',NONE';                                              
*        IF DDNAME^=''                       /* CHECK KEY */                    
*          THEN                                                                 
*            ZCVAL=ZCVAL!!',DDNAME';                                            
*        IF FILTLIST^=''                     /* CHECK KEY */                    
*          THEN                                                                 
*            ZCVAL=ZCVAL!!',FILTLIST';                                          
*        IF ANSAREAP^=''                     /* CHECK KEY */                    
*          THEN                                                                 
*            ZCVAL=ZCVAL!!',ANSAREAP';                                          
*        IF ANSAREAL^=''                     /* CHECK KEY */                    
*          THEN                                                                 
*            ZCVAL=ZCVAL!!',ANSAREAL';                                          
*        IF RSTOKEN^=''                      /* CHECK KEY */                    
*          THEN                                                                 
*            ZCVAL=ZCVAL!!',RSTOKEN';                                           
*        IF ZCVAL^=''                                                           
*          THEN                                                                 
*            DO;                             /* INCORRECT KEYS USED */          
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                                    
*              ZMS=' 8, "CLOSE'!!            /**KMEIP* MSG*/                    
*                  '"'!!                                                        
*                  ' DOES NOT ALLOW THE USE OF THE'!!                           
*                  ' FOLLOWING KEY(S) "'!!                                      
*                  ZCVAL!!'".';                                                 
*              ANS MSG('?GRBSMFR ---> '!!ZMS);                                  
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                                  
*              ZMACRET=8;                    /* MACRO ERROR */                  
*            END;                                                               
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/         
*  IF NUMBER(REQTOKEN)>1                     /* CHECK POSITIONALS */            
*    THEN                                                                       
*      DO;                                                                      
*        ZMS=' 8, "REQTOKEN'!!               /**KPOSP* MSG*/                    
*            REQTOKEN!!                                                         
*            '" "REQTOKEN"'!!                                                   
*            ' CAN HAVE ONLY 1 ARGUMENT.';                                      
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*      END;                                                                     
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/         
*  XREQTOKEN=REQTOKEN(1);                    /* SET XVARIABLE */                
*  IF REQTOKEN(1)=''                         /* CHECK FOR NULL */               
*   THEN                                                                        
*    DO;                                     /* KEY IS REQUIRED */              
*        ZXREQTOKEN='';                      /* RESET IN/OUTPUT */              
*        ZMS=' 8,  '!!                                                          
*            ' "REQTOKEN" KEY AND ITS'!!                                        
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/                    
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*    END;                                                                       
*  ELSE                                                                         
*    ZXREQTOKEN='INPUT';                     /* SET IN/OUTPUT */                
*/*PG.KMEKY13 VALUE, RQD INPUT, ME KEYS -END-------------------------*/         
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */                  
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/         
*  IF RETCODE='RETCODE' ! RETCODE='()'       /*CHECK ENTRY*/                    
*    THEN                                                                       
*      DO;                                                                      
*        ZMS=' 8, THE "RETCODE" KEY'!!                                          
*            ' MUST CONTAIN ONE'!!                                              
*            ' (OR MORE) ARGUMENT(S).';                                         
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*      END;                                                                     
*  IF NUMBER(RETCODE)>1                      /* CHECK POSITIONALS */            
*    THEN                                                                       
*      DO;                                                                      
*        ZMS=' 8, "RETCODE'!!                /**KPOSP* MSG*/                    
*            RETCODE!!                                                          
*            '" "RETCODE"'!!                                                    
*            ' CAN HAVE ONLY 1 ARGUMENT.';                                      
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*      END;                                                                     
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/         
*  IF RETCODE(1)^=''                         /* CHECK FOR NULL */               
*    THEN                                                                       
*      DO;                                                                      
*        XRETCODE=RETCODE(1);                /* SET XVARIABLE */                
*        ZXRETCODE='OUTPUT';                 /* SET OUTPUT */                   
*      END;                                                                     
*  ELSE                                                                         
*    IF ZXRETCODE^=''                                                           
*      THEN                                                                     
*        ZXRETCODE='';                       /* RESET OUTPUT */                 
*/*PG.KXVAR01 NAME, OPT OUTPUT, KEYS -EXCESSIVE ARGUMENTS------------*/         
*  IF REASCODE='REASCODE' ! REASCODE='()'    /*CHECK ENTRY*/                    
*    THEN                                                                       
*      DO;                                                                      
*        ZMS=' 8, THE "REASCODE" KEY'!!                                         
*            ' MUST CONTAIN ONE'!!                                              
*            ' (OR MORE) ARGUMENT(S).';                                         
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*      END;                                                                     
*  IF NUMBER(REASCODE)>1                     /* CHECK POSITIONALS */            
*    THEN                                                                       
*      DO;                                                                      
*        ZMS=' 8, "REASCODE'!!               /**KPOSP* MSG*/                    
*            REASCODE!!                                                         
*            '" "REASCODE"'!!                                                   
*            ' CAN HAVE ONLY 1 ARGUMENT.';                                      
*        ANS MSG('?GRBSMFR ---> '!!ZMS);                                        
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                        
*        ZMACRET=8;                          /* MACRO ERROR */                  
*      END;                                                                     
*/*PG.KXVAR15 NAME, OPT OUTPUT, KEYS -XVARIABLE----------------------*/         
*  IF REASCODE(1)^=''                        /* CHECK FOR NULL */               
*    THEN                                                                       
*      DO;                                                                      
*        XREASCODE=REASCODE(1);              /* SET XVARIABLE */                
*        ZXREASCODE='OUTPUT';                /* SET OUTPUT */                   
*      END;                                                                     
*  ELSE                                                                         
*    IF ZXREASCODE^=''                                                          
*      THEN                                                                     
*        ZXREASCODE='';                      /* RESET OUTPUT */                 
*/*PG.P04 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/         
*      END;                                  /* END COMPLETE CHECKING*/         
*/********************************************************************/         
*/***PE.MR01 GENERATE CODE IF ZMACRET=0                              */         
*/********************************************************************/         
*  IF ZMACRET = 0                                                               
*    THEN                                                                       
*      DO;                                                                      
*/********************************************************************/         
*/***PE.PR01 PRINT CONTROLS, DEFAULT IS YES                          */         
*/********************************************************************/         
*  ANS(MACCONC!!'LIST PUSH NOECHO;') NORESCAN COL(MACLMAR);                     
*  IF ZPRINT='NO'                            /* PRINT IS OFF */                 
*    THEN                                                                       
*      ANS(MACCONC!!'LIST OFF NOECHO;') NORESCAN COL(MACLMAR);                  
*    ELSE                                                                       
*      ANS(MACCONC!!'LIST ON NOECHO;')  NORESCAN COL(MACLMAR);                  
*/********************************************************************/         
*/*PE.DO02 OUTER MACRO DO STATEMENT----------------------------------*/         
*  IF XMF^='L'                                                                  
*    THEN                                                                       
*      ANS('DO; /* GRBSMFR-PLISTVER */')                                        
*          NORESCAN COL(MACLMAR);                                               
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/          
                                                                                
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/          
*/*PL.LL01 ?GRBSMFR MF=L PARAMETER LIST------------------------------*/         
*  IF XMF='L'                                                                   
*    THEN                                                                       
*      DO;                                                                      
*        ANS('DCL 1 '!!XMFCTRL!!' '!!XMFATTR!!', '!!                            
*            '/* ?GRBSMFR PARM LIST*/')                                         
*            NORESCAN COL(MACLMAR);                                             
*/*PL.LL13  XREQUEST CHAR(8) INPUT-----------------------------------*/         
*        ANS('2 '!!XMFCTRL                                                      
*         !! '_XREQUEST CHAR(8), '                                              
*         !! '/* '!!ZXREQUEST                                                   
*         !! ' XREQUEST */'                                                     
*            ) NORESCAN COL(MACLMAR+2);                                         
*/*PL.LL13  XPROCESSFUNCTION CHAR(8) INPUT---------------------------*/         
*        ANS('2 '!!XMFCTRL                                                      
*         !! '_XPROCESSFUNCTION CHAR(8), '                                      
*         !! '/* '!!ZXPROCESSFUNCTION                                           
*         !! ' XPROCESSFUNCTION */'                                             
*            ) NORESCAN COL(MACLMAR+2);                                         
*/*PL.LL13 ADDR64 XREQTOKEN PTR(64) OUTPUT ADDR64--------------------*/         
*        ANS('2 '!!XMFCTRL                                                      
*         !! '_XREQTOKEN_ADDR64 PTR(64), '                                      
*         !! '/* '!!ZXREQTOKEN_ADDR64                                           
*         !! ' XREQTOKEN_ADDR64 */'                                             
*            ) NORESCAN COL(MACLMAR+2);                                         
*/*PL.LL13 ADDR64 XDDNAME PTR(64) INPUT ADDR64-----------------------*/         
*        ANS('2 '!!XMFCTRL                                                      
*         !! '_XDDNAME_ADDR64 PTR(64), '                                        
*         !! '/* '!!ZXDDNAME_ADDR64                                             
*         !! ' XDDNAME_ADDR64 */'                                               
*            ) NORESCAN COL(MACLMAR+2);                                         
*/*PL.LL13 ADDR64 XFILTLIST PTR(64) INPUT ADDR64---------------------*/         
*        ANS('2 '!!XMFCTRL                                                      
*         !! '_XFILTLIST_ADDR64 PTR(64), '                                      
*         !! '/* '!!ZXFILTLIST_ADDR64                                           
*         !! ' XFILTLIST_ADDR64 */'                                             
*            ) NORESCAN COL(MACLMAR+2);                                         
*/*PL.LL13 ADDR64 XRSTOKEN PTR(64) INPUT ADDR64----------------------*/         
*        ANS('2 '!!XMFCTRL                                                      
*         !! '_XRSTOKEN_ADDR64 PTR(64), '                                       
*         !! '/* '!!ZXRSTOKEN_ADDR64                                            
*         !! ' XRSTOKEN_ADDR64 */'                                              
*            ) NORESCAN COL(MACLMAR+2);                                         
*/*PL.LL13 ADDR64 XANSAREAP PTR(64) INOUT ADDR64---------------------*/         
*        ANS('2 '!!XMFCTRL                                                      
*         !! '_XANSAREAP_ADDR64 PTR(64), '                                      
*         !! '/* '!!ZXANSAREAP_ADDR64                                           
*         !! ' XANSAREAP_ADDR64 */'                                             
*            ) NORESCAN COL(MACLMAR+2);                                         
*/*PL.LL13 ADDR64 XANSAREAL PTR(64) INOUT ADDR64---------------------*/         
*        ANS('2 '!!XMFCTRL                                                      
*         !! '_XANSAREAL_ADDR64 PTR(64), '                                      
*         !! '/* '!!ZXANSAREAL_ADDR64                                           
*         !! ' XANSAREAL_ADDR64 */'                                             
*            ) NORESCAN COL(MACLMAR+2);                                         
*/*PL.LL13 ADDR64 XRETCODE PTR(64) OUTPUT ADDR64---------------------*/         
*        ANS('2 '!!XMFCTRL                                                      
*         !! '_XRETCODE_ADDR64 PTR(64), '                                       
*         !! '/* '!!ZXRETCODE_ADDR64                                            
*         !! ' XRETCODE_ADDR64 */'                                              
*            ) NORESCAN COL(MACLMAR+2);                                         
*/*PL.LL13 ADDR64 XREASCODE PTR(64) OUTPUT ADDR64--------------------*/         
*        ANS('2 '!!XMFCTRL                                                      
*         !! '_XREASCODE_ADDR64 PTR(64), '                                      
*         !! '/* '!!ZXREASCODE_ADDR64                                           
*         !! ' XREASCODE_ADDR64 */'                                             
*            ) NORESCAN COL(MACLMAR+2);                                         
*/*PL.LL02  XVERSION FIXED(8) INPUT----------------------------------*/         
*        ANS('2 '!!XMFCTRL!!                                                    
*            '_XVERSION FIXED(8), '!!                                           
*            '/* INPUT XVERSION*/')                                             
*            NORESCAN COL(MACLMAR+2);                                           
*/*PL.LL18 ----------------------------------------------------------*/         
*        ANS('2 * CHAR(0);')                                                    
*            NORESCAN COL(MACLMAR+2);                                           
*/*PL.LL17 END OF MF=L PARAMETER LIST--------------------------------*/         
*      END;                                                                     
*/*PL.L01 MACRO WORK VARIABLES---------------------------------------*/         
*  DCL ZPRMLINE CHAR;          /* ZPRM ARRAY ENTRY ACCUMULATOR      */          
*  DEACT ZPRMLINE;                                                              
*  DCL ZNDX CHAR;              /* UNIQUE LIST STRUCTURE NAME        */          
*  DEACT ZNDX;                                                                  
*  ZNDX=MACINDEX;              /* MACINDEX                          */          
*  DCL XVERSION CHAR;                                                           
*  DEACT XVERSION;                                                              
*/*PL.L02 ?GRBSMFR PARAMETER LIST------------------------------------*/         
*  IF XMF^='L'                                                                  
*    THEN                                                                       
*      DO;                                                                      
*/*PL.L03 ?GRBSMFR PARAMETER LIST------------------------------------*/         
*        IF XMF='S'                                                             
*          THEN                                                                 
*            XMFCTRL='#ZPLIST';                                                 
*/*PL.L04 ?GRBSMFR PARAMETER LIST------------------------------------*/         
*        ZPRMLINE='DCL 1 #Z'!!ZNDX!!' DEF('!!                                   
*                 XMFCTRL!!'),'!!                                               
*                 ' /* ?GRBSMFR PARM LIST*/';                                   
*/*PL.L08  XREQUEST CHAR(8) INPUT------------------------------------*/         
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                                     
*                 '_XREQUEST CHAR(8), '!!                                       
*                 '/* '!!ZXREQUEST!!                                            
*                 ' XREQUEST */';                                               
*/*PL.L08  XPROCESSFUNCTION CHAR(8) INPUT----------------------------*/         
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                                     
*                 '_XPROCESSFUNCTION CHAR(8), '!!                               
*                 '/* '!!ZXPROCESSFUNCTION!!                                    
*                 ' XPROCESSFUNCTION */';                                       
*/*PL.L08 ADDR64 XREQTOKEN PTR(64) OUTPUT ADDR64---------------------*/         
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                                     
*                 '_XREQTOKEN_ADDR64 PTR(64), '!!                               
*                 '/* '!!ZXREQTOKEN_ADDR64!!                                    
*                 ' XREQTOKEN_ADDR64 */';                                       
*/*PL.L08 ADDR64 XDDNAME PTR(64) INPUT ADDR64------------------------*/         
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                                     
*                 '_XDDNAME_ADDR64 PTR(64), '!!                                 
*                 '/* '!!ZXDDNAME_ADDR64!!                                      
*                 ' XDDNAME_ADDR64 */';                                         
*/*PL.L08 ADDR64 XFILTLIST PTR(64) INPUT ADDR64----------------------*/         
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                                     
*                 '_XFILTLIST_ADDR64 PTR(64), '!!                               
*                 '/* '!!ZXFILTLIST_ADDR64!!                                    
*                 ' XFILTLIST_ADDR64 */';                                       
*/*PL.L08 ADDR64 XRSTOKEN PTR(64) INPUT ADDR64-----------------------*/         
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                                     
*                 '_XRSTOKEN_ADDR64 PTR(64), '!!                                
*                 '/* '!!ZXRSTOKEN_ADDR64!!                                     
*                 ' XRSTOKEN_ADDR64 */';                                        
*/*PL.L08 ADDR64 XANSAREAP PTR(64) INOUT ADDR64----------------------*/         
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                                     
*                 '_XANSAREAP_ADDR64 PTR(64), '!!                               
*                 '/* '!!ZXANSAREAP_ADDR64!!                                    
*                 ' XANSAREAP_ADDR64 */';                                       
*/*PL.L08 ADDR64 XANSAREAL PTR(64) INOUT ADDR64----------------------*/         
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                                     
*                 '_XANSAREAL_ADDR64 PTR(64), '!!                               
*                 '/* '!!ZXANSAREAL_ADDR64!!                                    
*                 ' XANSAREAL_ADDR64 */';                                       
*/*PL.L08 ADDR64 XRETCODE PTR(64) OUTPUT ADDR64----------------------*/         
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                                     
*                 '_XRETCODE_ADDR64 PTR(64), '!!                                
*                 '/* '!!ZXRETCODE_ADDR64!!                                     
*                 ' XRETCODE_ADDR64 */';                                        
*/*PL.L08 ADDR64 XREASCODE PTR(64) OUTPUT ADDR64---------------------*/         
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                                     
*                 '_XREASCODE_ADDR64 PTR(64), '!!                               
*                 '/* '!!ZXREASCODE_ADDR64!!                                    
*                 ' XREASCODE_ADDR64 */';                                       
*/*PL.L05  XVERSION FIXED(8) INPUT-----------------------------------*/         
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                                     
*                 '_XVERSION FIXED(8), '!!                                      
*                 '/* INPUT XVERSION*/';                                        
*/*PL.L11 CONSTANT TO ENSURE THAT LIST FORM IS LONG ENOUGH ----------*/         
*        ZPRMNUM=ZPRMNUM+1;                                                     
*        ZPRM(ZPRMNUM)=ZPRMLINE!!' 2 * CHAR(0);';                               
*        IF XPLISTVER^=0                                                        
*           & XMF^='S'                                                          
*          THEN                                                                 
*            DO;                                                                
*              ZPRMNUM=ZPRMNUM+1;                                               
*              ZPRM(ZPRMNUM)=                                                   
*               'DCL #Z'!!ZNDX!!'_LENCHECK FIXED(32) CONSTANT('!!               
*               'LENGTH('!!XMFCTRL!!')-LENGTH(#Z'!!ZNDX!!'));'!!                
*               '/* CONSTANT TO ENSURE THAT THE LIST FORM'!!                    
*               ' IS LONG ENOUGH */';                                           
*            END;                                                               
*/*PL.L12 PARAMETER LIST SIZE----------------------------------------*/         
*        ZPLLEN=81;                                                             
*        IF ZPRMMAX<ZPLLEN                                                      
*           & XMF^='E'                                                          
*          THEN                                                                 
*            ZPRMMAX=ZPLLEN;                                                    
*/*PL.L13 -----------------------------------------------------------*/         
*      END;                                                                     
*/*PI.L01 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/         
*  IF XMF^='L'                                                                  
*    THEN                                                                       
*      DO;                                                                      
*/*PI.L02 INNER DO FOR USER SUPPLIED INLINE MACRO CODE---------------*/         
*        ANS('DO;/* INNER DO */')                                               
*            COL(MACLMAR) NORESCAN;                                             
*/*PI.L03 CLEAR PARAMETER LIST --------------------------------------*/         
*            ANS('#Z'!!ZNDX!!'=''''B;'!!                                        
*                '/* CLEAR PARAMETER AREA */')                                  
*                NORESCAN COL(MACLMAR);                                         
*/*PI.L22 XREQUEST VALUE CHAR(8)-------------------------------------*/         
*        IF ZXREQUEST='INPUT' !                                                 
*           ZXREQUEST='INOUT'                                                   
*          THEN                                                                 
*            ANS('#Z'!!ZNDX!!'_XREQUEST='!!                                     
*                ''''!!XREQUEST!!''';'!!                                        
*                '/* XREQUEST CHAR(8) */')                                      
*                NORESCAN COL(MACLMAR);                                         
*/*PI.L22 XPROCESSFUNCTION VALUE CHAR(8)-----------------------------*/         
*        IF ZXPROCESSFUNCTION='INPUT' !                                         
*           ZXPROCESSFUNCTION='INOUT'                                           
*          THEN                                                                 
*            ANS('#Z'!!ZNDX!!'_XPROCESSFUNCTION='!!                             
*                ''''!!XPROCESSFUNCTION!!''';'!!                                
*                '/* XPROCESSFUNCTION CHAR(8) */')                              
*                NORESCAN COL(MACLMAR);                                         
*/*PI.L15 ADDR64(XREQTOKEN) FIXED(31)--------------------------------*/         
*        IF ZXREQTOKEN^=''                                                      
*          THEN                                                                 
*            ANS('#Z'!!ZNDX!!'_XREQTOKEN_ADDR64='!!                             
*                'ADDR('!!XREQTOKEN!!');'!!                                     
*                '/* ADDR64 XREQTOKEN FIXED(31) */')                            
*                NORESCAN COL(MACLMAR);                                         
*/*PI.L15 ADDR64(XDDNAME) CHAR(8)------------------------------------*/         
*        IF ZXDDNAME^=''                                                        
*          THEN                                                                 
*            ANS('#Z'!!ZNDX!!'_XDDNAME_ADDR64='!!                               
*                'ADDR('!!XDDNAME!!');'!!                                       
*                '/* ADDR64 XDDNAME CHAR(8) */')                                
*                NORESCAN COL(MACLMAR);                                         
*/*PI.L15 ADDR64(XFILTLIST) CHAR(40)---------------------------------*/         
*        IF ZXFILTLIST^=''                                                      
*          THEN                                                                 
*            ANS('#Z'!!ZNDX!!'_XFILTLIST_ADDR64='!!                             
*                'ADDR('!!XFILTLIST!!');'!!                                     
*                '/* ADDR64 XFILTLIST CHAR(40) */')                             
*                NORESCAN COL(MACLMAR);                                         
*/*PI.L15 ADDR64(XRSTOKEN) FIXED(31)---------------------------------*/         
*        IF ZXRSTOKEN^=''                                                       
*          THEN                                                                 
*            ANS('#Z'!!ZNDX!!'_XRSTOKEN_ADDR64='!!                              
*                'ADDR('!!XRSTOKEN!!');'!!                                      
*                '/* ADDR64 XRSTOKEN FIXED(31) */')                             
*                NORESCAN COL(MACLMAR);                                         
*/*PI.L15 ADDR64(XANSAREAP) CHAR(8)----------------------------------*/         
*        IF ZXANSAREAP^=''                                                      
*          THEN                                                                 
*            ANS('#Z'!!ZNDX!!'_XANSAREAP_ADDR64='!!                             
*                'ADDR('!!XANSAREAP!!');'!!                                     
*                '/* ADDR64 XANSAREAP CHAR(8) */')                              
*                NORESCAN COL(MACLMAR);                                         
*/*PI.L15 ADDR64(XANSAREAL) FIXED(32)--------------------------------*/         
*        IF ZXANSAREAL^=''                                                      
*          THEN                                                                 
*            ANS('#Z'!!ZNDX!!'_XANSAREAL_ADDR64='!!                             
*                'ADDR('!!XANSAREAL!!');'!!                                     
*                '/* ADDR64 XANSAREAL FIXED(32) */')                            
*                NORESCAN COL(MACLMAR);                                         
*/*PI.L15 ADDR64(XRETCODE) FIXED(31)---------------------------------*/         
*        IF ZXRETCODE^=''                                                       
*          THEN                                                                 
*            ANS('#Z'!!ZNDX!!'_XRETCODE_ADDR64='!!                              
*                'ADDR('!!XRETCODE!!');'!!                                      
*                '/* ADDR64 XRETCODE FIXED(31) */')                             
*                NORESCAN COL(MACLMAR);                                         
*/*PI.L15 ADDR64(XREASCODE) FIXED(31)--------------------------------*/         
*        IF ZXREASCODE^=''                                                      
*          THEN                                                                 
*            ANS('#Z'!!ZNDX!!'_XREASCODE_ADDR64='!!                             
*                'ADDR('!!XREASCODE!!');'!!                                     
*                '/* ADDR64 XREASCODE FIXED(31) */')                            
*                NORESCAN COL(MACLMAR);                                         
*/*PI.L31 INVOKE FUNCTION--------------------------------------------*/         
*              IF NUMBER(REASCODE)>0                                            
*                THEN                                                           
*                  ANS('RFY GPR00F RSTD;') NORESCAN COL(MACLMAR);               
*              IF NUMBER(RETCODE)>0                                             
*                THEN                                                           
*                  ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);               
*              ANS('RFY GPR01P RSTD;') NORESCAN COL(MACLMAR);                   
*              ANS('GPR01P=ADDR(#Z'!!ZNDX!!');'!!                               
*                  '/* PARAMETER LIST */')                                      
*                  NORESCAN COL(MACLMAR);                                       
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/          
*              ANS('DECLARE #Z'!!ZNDX!!'_YREQUEST CHAR(5);');                   
*              ANS('DECLARE #Z'!!ZNDX!!'_YPROCESSFUNCTION CHAR(8);');           
*              ANS('DECLARE #Z'!!ZNDX!!'_R2 REGISTER(2);');                     
*              ANS('DECLARE #Z'!!ZNDX!!'_R5 REGISTER(5);');                     
*              ANS('RFY (#Z'!!ZNDX!!'_R2,#Z'!!ZNDX!!'_R5) RSTD;')               
*                   NORESCAN COL(MACLMAR);                                      
*              ANS('GENERATE CODE REFS(#Z'!!ZNDX!!'_YREQUEST, #Z' !!            
*                   ZNDX!!'_YPROCESSFUNCTION) SETS(#Z'!!ZNDX!!                  
*                   '_XREQUEST, #Z'!!ZNDX!!'_XPROCESSFUNCTION);')               
*                   NORESCAN COL(MACLMAR);                                      
*              ANS('SGR   5,5') NORESCAN COL(MACLMAR);                          
*              ANS('LR    5,1') NORESCAN COL(MACLMAR);                          
*              ANS('LOAD  EP=GRBSMFRR') NORESCAN COL(MACLMAR);                  
*              ANS('LLGTR 15,0') NORESCAN COL(MACLMAR);                         
*              ANS('OILL  15,1') NORESCAN COL(MACLMAR);                         
*              ANS('LGR   1,5') NORESCAN COL(MACLMAR);                          
*              ANS('MVC   #Z'!!ZNDX!!'_YREQUEST(5),#Z'!!ZNDX!!                  
*                  '_XREQUEST') NORESCAN COL(MACLMAR);                          
*              ANS('LA    2,#Z'!!ZNDX!!'_YREQUEST ')                            
*                   NORESCAN COL(MACLMAR);                                      
*              ANS('STG   2,#Z'!!ZNDX!!'_XREQUEST ')                            
*                   NORESCAN COL(MACLMAR);                                      
*              ANS('MVC   #Z'!!ZNDX!!'_YPROCESSFUNCTION(8),#Z'                  
*                  !!ZNDX!!'_XPROCESSFUNCTION') NORESCAN COL(MACLMAR);          
*              ANS('LA    2,#Z'!!ZNDX!!'_YPROCESSFUNCTION ')                    
*                   NORESCAN COL(MACLMAR);                                      
*              ANS('STG   2,#Z'!!ZNDX!!'_XPROCESSFUNCTION ')                    
*                   NORESCAN COL(MACLMAR);                                      
*              ANS('BASSM 14,15') NORESCAN COL(MACLMAR);                        
*              ANS('DELETE EP=GRBSMFRR') NORESCAN COL(MACLMAR);                 
*              ANS('@ENDGEN;') NORESCAN COL(MACLMAR);                           
*              ANS('RFY (#Z'!!ZNDX!!'_R2,#Z'!!ZNDX!!'_R5) UNRSTD;')             
*                   NORESCAN COL(MACLMAR);                                      
                                                                                
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/          
*              ANS('RFY GPR01P UNRSTD;') NORESCAN COL(MACLMAR);                 
*/*PO.L07 END OF INNER DO FOR USER MACRO CODE------------------------*/         
*              ANS('END;/* END OF INNER DO */')                                 
*                  NORESCAN COL(MACLMAR);                                       
*/*PO.L10 REMOVE REGISTER RESTRICTIONS-------------------------------*/         
*              IF NUMBER(REASCODE)>0                                            
*                THEN                                                           
*              ANS('RFY GPR00F UNRSTD;') NORESCAN COL(MACLMAR);                 
*              IF NUMBER(RETCODE)>0                                             
*                THEN                                                           
*              ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);                 
*/*PO.L12 END OF PARAMETER LIST PROCESSING---------------------------*/         
*      END;                                                                     
*/*PO.L13 GRBSMFR USAGE INDICATOR------------------------------------*/         
*  ZGRBSMFR='YES';                           /* SET GRBSMFR USED */             
*/*PO.L15 END OF EXECUTABLE GRBSMFR-PLISTVER MACRO-------------------*/         
*  IF XMF^='L'                                                                  
*    THEN                                                                       
*      ANS('END; /* GRBSMFR-PLISTVER */')                                       
*          NORESCAN COL(MACLMAR);                                               
*/*PO.L16 RESTORE PRINT CONTROLS-------------------------------------*/         
*  ANS(MACCONC!!'LIST POP NOECHO;') NORESCAN COL(MACLMAR);                      
*/*PO.L17 END OF GRBSMFRP MACRO--------------------------------------*/         
*  ANS(MACCONC!!'SPACE;') NORESCAN COL(MACLMAR);                                
*  ANS(' ') NORESCAN COL(MACLMAR);                                              
*/*******************************************************************/          
*/*  PO.L18 END OF CODE TO BE BYPASSED WHEN ZMACRET ^= 0            */          
*/*******************************************************************/          
*      END;                                                                     
*/*******************************************************************/          
*/*  MVS ONLY     -CHECK IF AMG PARM LISTS ARE PRESENT              */          
*/*               -ROUND MAX AMG PARM LIST TO DOUBLEWORD MULTIPLES  */          
*/*******************************************************************/          
*  IF ZPRMNUM>0                   /* NUMBER OF AMG PARM LIST ENTRIES*/          
*    THEN                                                                       
*      DO;                                                                      
*        ZPRMMAX=((ZPRMMAX+7)/8)*8; /* ROUND PARM LIST SIZE UP TO               
*                                      DOUBLEWORD MULTIPLES        */           
*/*******************************************************************/          
*/*  MVS -GENERATE PARM LIST DCL TO OVERLAY ?EPILOG'S ILIST AREA    */          
*/*******************************************************************/          
*        IF XMF ^= 'M' & XMF ^= 'E'                                             
*          THEN                                                                 
*            DO;                                                                
*              IF INDEX(EHALIST,',AMG,')=0 /* HAS DECLARE BEEN DONE?*/          
*                THEN                                                           
*                  DO;                                                          
*                    ANS('?EPILOG                                               
*                        STRING(''DCL #ZPLIST DEF(ILIST);'');');                
*                    EHALIST=EHALIST!!',AMG,';                                  
*                  END;                                                         
*            END;                                                               
*/*******************************************************************/          
*/*  MVS  -EXTRACT PARM LISTS FROM AMG GLOBAL MACRO ARRAYS          */          
*/*******************************************************************/          
*        IF XMF ^= 'M' & XMF ^= 'E'                                             
*          THEN                                                                 
*            DO;                                                                
*              IF ZPRMMAX>EHAMAXLEN                                             
*                THEN                                                           
*                  EHAMAXLEN=ZPRMMAX; /* SET MAX PARM LIST SIZE     */          
*            END;                                                               
*        DO ZI=1 TO ZPRMNUM; /* EXTRACT AMG PARM LISTS               */         
*          ANS('?EPILOG STRING('''!!ZPRM(ZI)!!''');')                           
*              COL(MACLMAR);                                                    
*        END;                                                                   
*      END;                                                                     
*/*-----------------------------------------------------------------*/          
*/*  MVS  -ENSURE THAT GPRS NEEDED BY AMG MACROS WILL BE PROVIDED   */          
*/*        BY ?EPILOG                                               */          
*/*-----------------------------------------------------------------*/          
*        IF INDEX(EHAREGS,'01P')=0                                              
*          THEN                                                                 
*            EHAREGS=EHAREGS!!'01P'; /* GPR01P                      */          
*        IF INDEX(EHAREGS,'00F')=0                                              
*          & NUMBER(REASCODE)>0                                                 
*          THEN                                                                 
*            EHAREGS=EHAREGS!!'00F'; /* GPR00F                      */          
*        IF INDEX(EHAREGS,'15F')=0                                              
*          & NUMBER(RETCODE)>0                                                  
*          THEN                                                                 
*            EHAREGS=EHAREGS!!'15F'; /* GPR15F                      */          
*  RETURN CODE(ZMACRET);                                                        
*%END GRBSMFRP;                                                                 
