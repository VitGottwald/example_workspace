 /**START OF SPECIFICATIONS*******************************************          
  *                                                                  *          
  *  Macro Name: HWTHIPLI                                            *          
  *                                                                  *          
  *  Descriptive Name: PL/I Interface Declaration File for the       *          
  *                    HTTP Enabler portion of the z/OS Client Web   *          
  *                    Enablement Toolkit.                           *          
  *                                                                  *          
  *    Acronym: none                                                 *          
  *                                                                  *          
  *01* PROPRIETARY STATEMENT=                                        *          
  *                                                                  *          
  *                                                                  *          
  * LICENSED MATERIALS - PROPERTY OF IBM                             *          
  * 5650-ZOS, 5655-ZOS COPYRIGHT IBM CORP. 2015, 2023                *          
  *                                                                  *          
  * STATUS= HWT0500                                                  *          
  *                                                                  *          
  *    DSECT Name: n/a                                               *          
  *                                                                  *          
  *  Component: HWT (SCHWT)                                          *          
  *                                                                  *          
  *  External Classification: PI                                     *          
  *  End of External Classification:                                 *          
  *                                                                  *          
  *  Eye-Catcher: none                                               *          
  *                                                                  *          
  *  Storage Attributes: n/a                                         *          
  *                                                                  *          
  *    Subpool: n/a                                                  *          
  *    Key: n/a                                                      *          
  *    Residency: n/a                                                *          
  *                                                                  *          
  *  Function:                                                       *          
  *    HWTHIPLI defines HWT constants and declares for programs      *          
  *    written in the PL/I language which will invoke the HWT        *          
  *    HTTP/HTTPS services.                                          *          
  *                                                                  *          
  *  Method of Access:                                               *          
  *    %INCLUDE SYSLIB(HWTHIPLI)                                     *          
  *                                                                  *          
  *  Created by: n/a                                                 *          
  *                                                                  *          
  *  Pointed to by: n/a                                              *          
  *                                                                  *          
  *  Size: n/a                                                       *          
  *                                                                  *          
  *  Serialization: n/a                                              *          
  *                                                                  *          
  * Change Activity:                                                 *          
  *                                                                  *          
  *   PN   REASON   RLSE    DATE   ORG   COMMENTS                    *          
  *   ------------------------------------------------------------   *          
  *   $01= OA48505 HBB77A0 150806 PDSCW: z/OS Client Web Enablement  *          
  *                Toolkit Support (HTTP enablement)                 *          
  *   $02= OA49002 HBB77A0 151130 PDLH:- Add service constants       *          
  *                                    - Add Verbose DD option       *          
  *                                    - Miscellaneous changes       *          
  *   $03= OA51673 HBB7790 161201 PDJK:- Add HEAD method constant    *          
  *   $L1= 152124  HBB77B0 170112 PDJK:- Streaming support           *          
  *   $D1= 158189  HBB77B0 170217 PDJK: - Handle GET underflows      *          
  *   $04= OA52791 HBB77B0 170622 PDJK: - TRSQ V2R3 APAR             *          
  *                                       AT-TLS toleration          *          
  *                                       Roll up of OA50957         *          
  *   $05= OA53546 HBB7790 170925 PDLH: - Support for user-defined   *          
  *                                       cipher specs               *          
  *   $06= OA54207 HBB7790 171103 PDLH: - Add missing ExitFlag       *          
  *                                       constants                  *          
  *   $L2= 212350  HBB77C0 180501 PDLH: - Proxy Enhancement          *          
  *   $08=OA56234  HBB77A0 181110 PDGG: - read socket error (268362) *          
  *   $09=OA57447  HBB77A0 190501 PDGG: - missing comma in decl of   *          
  *                          HWTH_RSN_SOCKET_READ_ZERO via OA56234   *          
  *   $14=306522   HBB77B0 190723 PDBW: - trace redaction            *          
  *   $16=328334   HBB77B0 191007 PDBW:  PATCH and OPTIONS support   *          
  *       328185   HBB77B0 191011 PDBW:  HWTH_OPT_SSLTRACE support   *          
  *   $17=328197   HBB77C0 191206 PDBW:  TLSv13 support              *          
  *   $1M=OA63772  HBB77B0 230207 PDBW:  Check server certificate    *          
  *                                      Disallow cross-tunnel redir *          
  **END OF SPECIFICATIONS*********************************************/         
                                                                                
 /* ---------------------------------------------------------------- */         
 /*                                                                  */         
 /*                       ABEND Reason Codes                         */         
 /*                                                                  */         
 /* ---------------------------------------------------------------- */         
 DECLARE (                                                                      
  HWTH_HCONN_PRIM_ADDR                     VALUE('10010000'XN),      /*         
                                (268500992) The parameters passed by            
                                the caller are not in the primary               
                                address space.                       */         
  HWTH_HCONN_BAD_PARM                      VALUE('10010001'XN),      /*         
                                (268500993) Number of parameters passed         
                                passed by the caller is incorrect.   */         
  HWTH_HDISC_PRIM_ADDR                     VALUE('10020000'XN),      /*         
                                (268566528) The parameters passed by            
                                the caller are not in the primary               
                                address space.                       */         
  HWTH_HDISC_BAD_PARM                      VALUE('10020001'XN),      /*         
                                (268566529) Number of parameters                
                                passed by the caller is incorrect.   */         
  HWTH_HINIT_PRIM_ADDR                     VALUE('10030000'XN),      /*         
                                (268632064) The parameters passed by            
                                the caller are not in the primary               
                                address space.                       */         
  HWTH_HINIT_BAD_PARM                      VALUE('10030001'XN),      /*         
                                (268632065) Number of parameters                
                                passed by the caller is incorrect.   */         
  HWTH_HRQST_PRIM_ADDR                     VALUE('10040000'XN),      /*         
                                (268697600) The parameters passed by            
                                the caller are not in the primary               
                                address space.                       */         
  HWTH_HRQST_BAD_PARM                      VALUE('10040001'XN),      /*         
                                (268697601) Number of parameters                
                                passed by the caller is incorrect.   */         
  HWTH_HRSET_PRIM_ADDR                     VALUE('10050000'XN),      /*         
                                (268763136) The parameters passed by            
                                the caller are not in the primary               
                                address space.                       */         
  HWTH_HRSET_BAD_PARM                      VALUE('10050001'XN),      /*         
                                (268763137) Number of parameters                
                                passed by the caller is incorrect.   */         
  HWTH_HSET_PRIM_ADDR                      VALUE('10060000'XN),      /*         
                                (268828672) The parameters passed by            
                                the caller are not in the primary               
                                address space.                       */         
  HWTH_HSET_BAD_PARM                       VALUE('10060001'XN),      /*         
                                (268828673) Number of parameters                
                                passed by the caller is incorrect.   */         
  HWTH_HSLST_PRIM_ADDR                     VALUE('10070000'XN),      /*         
                                (268894208) The parameters passed by            
                                the caller are not in the primary               
                                address space.                       */         
  HWTH_HSLST_BAD_PARM                      VALUE('10070001'XN),      /*         
                                (268894209) Number of parameters                
                                passed by the caller is incorrect.   */         
  HWTH_HTERM_PRIM_ADDR                     VALUE('10080000'XN),      /*         
                                (268959744) The parameters passed by            
                                the caller are not in the primary               
                                address space.                       */         
  HWTH_HTERM_BAD_PARM                      VALUE('10080001'XN)       /*         
                                (268959745) Number of parameters                
                                passed by the caller is incorrect.   */         
 ) FIXED BINARY(31);                                                            
                                                                                
 /* ---------------------------------------------------------------- */         
 /*                                                                  */         
 /*                         Return Codes                             */         
 /*                                                                  */         
 /* ---------------------------------------------------------------- */         
 DECLARE (                                                                      
  HWTH_OK                                   VALUE('00000000'XN),     /*         
                                  (0)   Operation successful         */         
  HWTH_WARNING                              VALUE('00000004'XN),     /*         
                                  (4)   Warning.  See service-specific          
                                  documentation for further                     
                                  explanation.                       */         
  HWTH_HANDLE_INV                           VALUE('00000101'XN),     /*         
                                  (257) Invalid handle.              */         
  HWTH_HANDLE_INUSE                         VALUE('00000102'XN),     /*         
                                  (258) Handle is being used by                 
                                  another caller.                    */         
  HWTH_HANDLETYPE_INV                       VALUE('00000103'XN),     /*         
                                  (259) For services with handleType            
                                  parameter, handleType is not a valid          
                                  value.  For other services, handle            
                                  does not match type of handle                 
                                  expected.                          */         
  HWTH_INACCESSIBLE_PARM                    VALUE('00000104'XN),     /*         
                                  (260) One of the parameters passed            
                                  by the caller is not accessible.   */         
  HWTH_CANNOT_OBTAIN_WORKAREA               VALUE('00000105'XN),     /*         
                                  (261) HWTHINIT cannot obtain the              
                                  workarea required by the HTTP                 
                                  enabler.                           */         
  HWTH_COMMUNICATION_ERROR                  VALUE('00000106'XN),     /*         
                                  (262) A failure in communication              
                                  or in the attempt of communication            
                                  with a web server or the server               
                                  application occurred.              */         
  HWTH_CANNOT_INCREASE_WORKAREA             VALUE('00000107'XN),     /*         
                                  (263) Unable to increase the                  
                                  HTTP enabler toolkit workarea.     */         
  HWTH_CANNOT_FREE_WORKAREA                 VALUE('00000108'XN),     /*         
                                  (264) Unable to free workarea.     */         
  HWTH_CONNECTION_NOT_ACTIVE                VALUE('00000109'XN),     /*         
                                  (265) The specified request requires          
                                  an active connection to the server.*/         
  HWTH_HSET_OPTIONVALADDR_INV               VALUE('00000201'XN),     /*         
                                  (513) The optionValueAddr was zero            
                                  but the optionValueLen was nonzero.*/         
  HWTH_HSET_OPTIONVALLEN_INV                VALUE('00000202'XN),     /*         
                                  (514) The optionValueLen was zero             
                                  but the optionValueAddr was non-              
                                  zero, or the optionValueLen is not            
                                  valid for the option specified.    */         
  HWTH_HSET_OPTION_INV                      VALUE('00000203'XN),     /*         
                                  (515) Bad option specified or option          
                                  did not match the handle specified.*/         
  HWTH_HSET_OPTIONVALUE_INV                 VALUE('00000204'XN),     /*         
                                  (516) Bad optionValue specified.   */         
  HWTH_HSET_CONN_ALREADY_ACTIVE             VALUE('00000205'XN),     /*         
                                  (517) The specified connect option            
                                  is not allowed to be set when                 
                                  the connection associated with the            
                                  connect handle has already been               
                                  established.                       */         
  HWTH_HSLST_SLIST_INV                      VALUE('00000301'XN),     /*         
                                  (769) Bad sList parameter. For                
                                  HWTH_SLST_NEW, must be zero.  For             
                                  HWTH_SLST_APPEND or HWTH_SLST_FREE,           
                                  must be a valid sList.             */         
  HWTH_HSLST_FUNCTION_INV                   VALUE('00000302'XN),     /*         
                                  (770) Bad HWTHSLST function.       */         
  HWTH_HSLST_STRINGLEN_INV                  VALUE('00000303'XN),     /*         
                                  (771) Invalid stringLen.  For                 
                                  HWTH_SLST_NEW or HWTH_SLST_APPEND,            
                                  stringLen must be non-zero.  For              
                                  HWTH_SLST_FREE, must be zero.      */         
  HWTH_HSLST_STRINGADDR_INV                 VALUE('00000304'XN),     /*         
                                  (772) Invalid stringAddr.  For                
                                  HWTH_SLST_NEW or HWTH_SLST_APPEND,            
                                  stringAddr must be non-zero.  For             
                                  HWTH_SLST_FREE, must be zero.      */         
  HWTH_HTERM_FORCEOPTION_INV                VALUE('00000401'XN),     /*         
                                  (1025) Specified ForceOption                  
                                  parameter is not HWTH_FORCE or                
                                  HWTH_NOFORCE.                      */         
  HWTH_HCONN_CONNECT_INV                    VALUE('00000501'XN),     /*         
                                  (1281) Invalid combination of option          
                                  values specified on the connection.*/         
  HWTH_HRQST_REQUEST_INV                    VALUE('00000601'XN),     /*         
                                  (1537) Invalid combination of option          
                                  values specified on the request    */         
  HWTH_INTERRUPT_STATUS_INV                 VALUE('00000F01'XN),     /*         
                                  (3841) Caller is disabled          */         
  HWTH_LOCKS_HELD                           VALUE('00000F02'XN),     /*         
                                  (3842) Caller is holding one or               
                                           more locks                */         
  HWTH_MODE_INV                             VALUE('00000F03'XN),     /*         
                                  (3843) Caller is not in task mode or          
                                  is running in cross-memory mode    */         
  HWTH_AUTHLEVEL_INV                        VALUE('00000F04'XN),     /*         
                                  (3844) Caller is running in key 0  */         
  HWTH_ENVIRONMENTAL_ERROR                  VALUE('00000F05'XN),     /*         
                                  (3845) The proper z/OS UNIX                   
                                  environment is not available, an LE           
                                  environment failed to be created,             
                                  or other environmental error was              
                                  found.                             */         
  HWTH_UNSUPPORTED_RELEASE                  VALUE('00000F06'XN),     /*         
                                  (3846) The system level does not              
                                  support the service                */         
  HWTH_UNEXPECTED_ERROR                     VALUE('00000FFF'XN)      /*         
                                  (4095) The service routine                    
                                  encountered an unexpected error    */         
 ) FIXED BINARY(31);                                                            
                                                                                
 /* ---------------------------------------------------------------- */         
 /*                                                                  */         
 /*                Diag Service Identifiers                          */         
 /*                                                                  */         
 /* 2-byte constants comprising the first half of the HWTH_Service   */         
 /* field in the DiagArea (HWTH_ServID) to aid applications in       */         
 /* determining the service that caused the HWTH_WARNING,            */         
 /* HWTH_COMMUNICATION_ERROR or HWTH_UNEXPECTED_ERROR.               */         
 /*                                                            @02A  */         
 /* ---------------------------------------------------------------- */         
 DEFINE ALIAS HWTH_SERVID_TYPE   FIXED BINARY(16) UNSIGNED;  /* @02A */         
                                                                                
  DECLARE HWTH_SERVICE_SEND_REQUEST  VALUE('0002'XN)                            
                                 TYPE HWTH_SERVID_TYPE;                         
                                    /* (2) processing send request */           
                                                                                
  DECLARE HWTH_SERVICE_SOCKET_CLOSE  VALUE('0003'XN)                            
                                 TYPE HWTH_SERVID_TYPE;                         
                                                   /* (3)  close() */           
                                                                                
  DECLARE HWTH_SERVICE_SECURE_ENCODE64  VALUE('0004'XN)                         
                                    TYPE HWTH_SERVID_TYPE;                      
                                        /* (4) gsk_encode_base64() */           
                                                                                
  DECLARE HWTH_SERVICE_SETSTACK_AFFINITY  VALUE('0005'XN)                       
                                      TYPE HWTH_SERVID_TYPE;                    
                                      /* (5) setibmopt() */                     
                                                                                
  DECLARE HWTH_SERVICE_SOCKET_BIND  VALUE('0006'XN)                             
                                TYPE HWTH_SERVID_TYPE;                          
                                                     /* (6) bind() */           
                                                                                
  DECLARE HWTH_SERVICE_SET_SOCK_OPT  VALUE('0007'XN)                            
                                 TYPE HWTH_SERVID_TYPE;                         
                                               /* (7) setsockopt() */           
                                                                                
  DECLARE HWTH_SERVICE_SOCKET_SEND  VALUE('0008'XN)                             
                                TYPE HWTH_SERVID_TYPE;                          
                                                     /* (8) send() */           
                                                                                
  DECLARE HWTH_SERVICE_SOCKET_RECEIVE  VALUE('0009'XN)                          
                                   TYPE HWTH_SERVID_TYPE;                       
                                                     /* (9) recv() */           
                                                                                
  DECLARE HWTH_SERVICE_SOCKET_CONNECT  VALUE('000B'XN)                          
                                   TYPE HWTH_SERVID_TYPE;                       
                                                 /* (11) connect() */           
                                                                                
  DECLARE HWTH_SERVICE_ICONV_OPEN  VALUE('000C'XN)                              
                               TYPE HWTH_SERVID_TYPE;                           
                                              /* (12) iconv_open() */           
                                                                                
  DECLARE HWTH_SERVICE_ICONV  VALUE('000D'XN)                                   
                          TYPE HWTH_SERVID_TYPE;                                
                                                   /* (13) iconv() */           
                                                                                
  DECLARE HWTH_SERVICE_SEC_SOCKET_SEND  VALUE('000E'XN)                         
                                    TYPE HWTH_SERVID_TYPE;                      
                                 /* (14) gsk_secure_socket_write() */           
  DECLARE HWTH_SERVICE_SEC_SOCKET_READ  VALUE('000F'XN)                         
                                    TYPE HWTH_SERVID_TYPE;                      
                                 /* (15) gsk_secure_socket_read()  */           
                                                                                
  DECLARE HWTH_SERVICE_SEC_ENVIRON_OPEN  VALUE('0010'XN)                        
                                     TYPE HWTH_SERVID_TYPE;                     
                                 /* (16) gsk_environment_open()    */           
  DECLARE HWTH_SERVICE_SEC_ATTR_SET_ENUM  VALUE('0011'XN)                       
                                      TYPE HWTH_SERVID_TYPE;                    
                                 /* (17) gsk_attribute_set_enum()  */           
                                                                                
  DECLARE HWTH_SERVICE_SEC_ATTR_SET_BUFF  VALUE('0012'XN)                       
                                      TYPE HWTH_SERVID_TYPE;                    
                                 /* (18) gsk_attribute_set_buffer() */          
                                                                                
  DECLARE HWTH_SERVICE_SEC_ENVIRON_INIT  VALUE('0013'XN)                        
                                     TYPE HWTH_SERVID_TYPE;                     
                                 /* (19) gsk_environment_init()     */          
                                                                                
  DECLARE HWTH_SERVICE_SEC_SOCKET_OPEN  VALUE('0014'XN)                         
                                    TYPE HWTH_SERVID_TYPE;                      
                                 /* (20) gsk_secure_socket_open()   */          
                                                                                
  DECLARE HWTH_SERVICE_SEC_SET_NUM_VALUE  VALUE('0015'XN)                       
                                      TYPE HWTH_SERVID_TYPE;                    
                          /* (21) gsk_attribute_set_numeric_value() */          
                                                                                
  DECLARE HWTH_SERVICE_SEC_SOCKET_INIT  VALUE('0016'XN)                         
                                    TYPE HWTH_SERVID_TYPE;                      
                                  /* (22) gsk_secure_socket_init()   */         
                                                                                
  DECLARE HWTH_SERVICE_SEC_SOCKETSHUTDWN  VALUE('0017'XN)                       
                                      TYPE HWTH_SERVID_TYPE;                    
                                /* (23) gsk_secure_socket_shutdown() */         
                                                                                
  DECLARE HWTH_SERVICE_SEC_SOCKET_CLOSE  VALUE('0018'XN)                        
                                     TYPE HWTH_SERVID_TYPE;                     
                                  /* (24) gsk_secure_socket_close()  */         
                                                                                
  DECLARE HWTH_SERVICE_SEC_ENVIRON_CLOSE  VALUE('0019'XN)                       
                                      TYPE HWTH_SERVID_TYPE;                    
                                  /* (25) gsk_environment_close()    */         
                                                                                
  DECLARE HWTH_SERVICE_RECEIVE_RESPONSE  VALUE('001A'XN)                        
                                     TYPE HWTH_SERVID_TYPE;                     
                                 /* (26) receive response processing */         
                                                                                
  DECLARE HWTH_SERVICE_GETADDRINFO  VALUE('001C'XN)                             
                                TYPE HWTH_SERVID_TYPE;                          
                                  /* (28) getaddrinfo()              */         
                                                                                
  DECLARE HWTH_SERVICE_HDR_EXIT_ABORT  VALUE('001D'XN)                          
                                   TYPE HWTH_SERVID_TYPE;                       
                                  /* (29) headerCallback()           */         
                                                                                
  DECLARE HWTH_SERVICE_SOCKET_SHUTDOWN  VALUE('001E'XN)                         
                                    TYPE HWTH_SERVID_TYPE;                      
                                  /* (30) shutdown()                 */         
                                                                                
  DECLARE HWTH_SERVICE_MALLOC  VALUE('001F'XN)                                  
                           TYPE HWTH_SERVID_TYPE;                               
                                  /* (31) malloc()                   */         
                                                                                
  DECLARE HWTH_SERVICE_REALLOC  VALUE('0020'XN)                                 
                            TYPE HWTH_SERVID_TYPE;                              
                                  /* (32) realloc()                  */         
                                                                                
  DECLARE HWTH_SERVICE_ESTABLISH_TUNNEL  VALUE('0021'XN)                        
                                     TYPE HWTH_SERVID_TYPE;                     
                                  /* (33) processing response        */         
                                                                                
  DECLARE HWTH_SERVICE_INIT_TRACE  VALUE('0022'XN)                              
                               TYPE HWTH_SERVID_TYPE;                           
                                  /* (34) initTrace()                */         
                                                                                
  DECLARE HWTH_SERVICE_WRAP_TRACE  VALUE('0023'XN)                              
                               TYPE HWTH_SERVID_TYPE;                           
                                  /* (35) wrapTraceFile()        @02A*/         
                                                                                
  DECLARE HWTH_SERVICE_SETUP_REDIRECT  VALUE('0024'XN)                          
                                   TYPE HWTH_SERVID_TYPE;                       
                                  /* (36) setupRedirect()        @L1A*/         
                                                                                
  DECLARE HWTH_SERVICE_INLINE_SEND  VALUE('0025'XN)                             
                                TYPE HWTH_SERVID_TYPE;                          
                                  /* (37) sendInlineRequest()    @L1A*/         
                                                                                
  DECLARE HWTH_SERVICE_STREAM_SEND  VALUE('0026'XN)                             
                                TYPE HWTH_SERVID_TYPE;                          
                                  /* (38) sendStreamedRequest()  @L1A*/         
                                                                                
  DECLARE HWTH_SERVICE_DO_SENDSTREAMED  VALUE('0027'XN)                         
                                    TYPE HWTH_SERVID_TYPE;                      
                                  /* (39) doSendStreamed()       @L1A*/         
                                                                                
  DECLARE HWTH_SERVICE_DO_SENDMULTICHUNK  VALUE('0028'XN)                       
                                      TYPE HWTH_SERVID_TYPE;                    
                                   /* (40) doSendMultiChunked()  @L1A*/         
                                                                                
  DECLARE HWTH_SERVICE_VALIDATE_SENDLIST  VALUE('0029'XN)                       
                                      TYPE HWTH_SERVID_TYPE;                    
                             /* (41) validateStreamingSendList() @L1A*/         
                                                                                
  DECLARE HWTH_SERVICE_STREAM_RECV  VALUE('002A'XN)                             
                                TYPE HWTH_SERVID_TYPE;                          
                               /* (42) receiveStreamedResponse() @L1A*/         
                                                                                
  DECLARE HWTH_SERVICE_GET_CHUNKSIZE  VALUE('002B'XN)                           
                                  TYPE HWTH_SERVID_TYPE;                        
                                  /* (43) getChunkDataSize()     @L1A*/         
                                                                                
  DECLARE HWTH_SERVICE_GET_NEXT_RSPDATA_STRM  VALUE('002C'XN)                   
                                          TYPE HWTH_SERVID_TYPE;                
                           /* (44) getNextResponseDataStreamed() @L1A*/         
                                                                                
  DECLARE HWTH_SERVICE_BUILD_RTNLIST_CHNKD  VALUE('002D'XN)                     
                                        TYPE HWTH_SERVID_TYPE;                  
                                /* (45) buildReturnListChunked() @L1A*/         
                                                                                
  DECLARE HWTH_SERVICE_STRMRESP_END_CHNKD  VALUE('002E'XN)                      
                                       TYPE HWTH_SERVID_TYPE;                   
                     /* (46) processStreamedResponseEndChunked() @L1A*/         
                                                                                
  DECLARE HWTH_SERVICE_STRMRESP_TRAILER  VALUE('002F'XN)                        
                                     TYPE HWTH_SERVID_TYPE;                     
                       /* (47) processStreamedResponseTrailers() @L1A*/         
                                                                                
  DECLARE HWTH_SERVICE_PARSE_RESP_HDRS  VALUE('0030'XN)                         
                                    TYPE HWTH_SERVID_TYPE;                      
                                 /* (48) parseResponsetHeaders() @L1A*/         
                                                                                
  DECLARE HWTH_SERVICE_HANDLE_NEXTCHUNKD  VALUE('0031'XN)                       
                                      TYPE HWTH_SERVID_TYPE;                    
                                 /* (49) handleNextChunkedData() @L1A*/         
                                                                                
  DECLARE HWTH_SERVICE_HANDLE_NEXTRAWD  VALUE('0032'XN)                         
                                    TYPE HWTH_SERVID_TYPE;                      
                                 /* (50) handleNextRawData()    @L1A*/          
                                                                                
  DECLARE HWTH_SERVICE_BUILD_RTNLIST_RAW  VALUE('0033'XN)                       
                                      TYPE HWTH_SERVID_TYPE;                    
                                 /* (51) buildReturnListRaw()   @L1A*/          
                                                                                
  DECLARE HWTH_SERVICE_SUPPLYDATA_TO_BUF  VALUE('0034'XN)                       
                                      TYPE HWTH_SERVID_TYPE;                    
                               /* (52) supplyListDataToBuffer() @L1A*/          
                                                                                
  DECLARE HWTH_SERVICE_INITIAL_RESPDATA  VALUE('0035'XN)                        
                                     TYPE HWTH_SERVID_TYPE;                     
                            /* (53) handleInitialResponseData() @L1A*/          
                                                                                
  DECLARE HWTH_SERVICE_ICONN_IMPL  VALUE('0036'XN)                              
                                     TYPE HWTH_SERVID_TYPE;                     
                                 /* (54) iconnImpl()            @04A*/          
                                                                                
  DECLARE HWTH_SERVICE_CHECK_TTLS  VALUE('0037'XN)                              
                                     TYPE HWTH_SERVID_TYPE;                     
                                 /* (55) checkForTTLS()         @04A*/          
                                                                                
  DECLARE HWTH_SERVICE_CERT_CHECK  VALUE('0038'XN)                              
                                     TYPE HWTH_SERVID_TYPE;                     
                                /* (56) checkServerCert()       @1MA*/          
                                                                                
  DECLARE HWTH_SERVICE_SET_COOKIE  VALUE('0065'XN)                              
                               TYPE HWTH_SERVID_TYPE;                           
                                /* (101) setCookie()                */          
                                                                                
  DECLARE HWTH_SERVICE_GET_COOKIE_HEADER  VALUE('0066'XN)                       
                                      TYPE HWTH_SERVID_TYPE;                    
                                 /* (102) getCookieHeader()         */          
                                                                                
  DECLARE HWTH_SERVICE_SERIALIZE  VALUE('0067'XN)                               
                              TYPE HWTH_SERVID_TYPE;                            
                                 /* (103) serializeCookies()        */          
                                                                                
  DECLARE HWTH_SERVICE_DESERIALIZE  VALUE('0068'XN)                             
                                TYPE HWTH_SERVID_TYPE;                          
                                 /* (104) deserializeCookies()      */          
                                                                                
  DECLARE HWTH_SERVICE_GET_CELL  VALUE('0069'XN)                                
                             TYPE HWTH_SERVID_TYPE;                             
                                 /* (105) getCell()                 */          
                                                                                
  DECLARE HWTH_SERVICE_FREE_CELL  VALUE('006A'XN)                               
                              TYPE HWTH_SERVID_TYPE;                            
                                 /* (106) freeCell()                */          
                                                                                
  DECLARE HWTH_SERVICE_LIST_INSERT  VALUE('006B'XN)                             
                                TYPE HWTH_SERVID_TYPE;                          
                                 /* (107) listInsert()              */          
                                                                                
  DECLARE HWTH_SERVICE_LIST_DELETE  VALUE('006C'XN)                             
                                TYPE HWTH_SERVID_TYPE;                          
                                 /* (108) listDelete()              */          
                                                                                
  DECLARE HWTH_SERVICE_FIND_APPL_COOKIES  VALUE('006D'XN)                       
                                      TYPE HWTH_SERVID_TYPE;                    
                                 /* (109) findApplicableCookies     */          
                                                                                
  DECLARE HWTH_SERVICE_GET_RQST_COOKIES  VALUE('006E'XN)                        
                                     TYPE HWTH_SERVID_TYPE;                     
                                 /* (110) getRequestCookies()       */          
                                                                                
  DECLARE HWTH_SERVICE_TOCOOKIE_STRARRAY  VALUE('006F'XN)                       
                                      TYPE HWTH_SERVID_TYPE;                    
                                 /* (111) toCookieStringArray()     */          
                                                                                
  DECLARE HWTH_SERVICE_COOKIE_TO_STRING  VALUE('0070'XN)                        
                                     TYPE HWTH_SERVID_TYPE;                     
                                 /* (112) cookieToString()          */          
                                                                                
  DECLARE HWTH_SERVICE_TO_CANONICAL  VALUE('0071'XN)                            
                                 TYPE HWTH_SERVID_TYPE;                         
                                 /* (113) toCanonical()             */          
                                                                                
  DECLARE HWTH_SERVICE_STORAGE  VALUE('00C9'XN)                                 
                            TYPE HWTH_SERVID_TYPE;                              
                                 /* (201) ?STORAGE macro            */          
                                                                                
  DECLARE HWTH_SERVICE_CSRPBLD  VALUE('00CA'XN)                                 
                            TYPE HWTH_SERVID_TYPE;                              
                                 /* (202) CSRPBLD                   */          
                                                                                
  DECLARE HWTH_SERVICE_CSRPEXP  VALUE('00CB'XN)                                 
                            TYPE HWTH_SERVID_TYPE;                              
                                 /* (203) CSRPEXP                   */          
                                                                                
  DECLARE HWTH_SERVICE_LOAD  VALUE('00CC'XN)                                    
                         TYPE HWTH_SERVID_TYPE;                                 
                                 /* (204) ?LOAD                     */          
                                                                                
  DECLARE HWTH_SERVICE_CEEPIPI  VALUE('00CD'XN)                                 
                            TYPE HWTH_SERVID_TYPE;                              
                                 /* (205) CEEPIPI                   */          
                                                                                
  DECLARE HWTH_SERVICE_PREP_LEENV  VALUE('00CE'XN)                              
                               TYPE HWTH_SERVID_TYPE;                           
                                 /* (206) Service to prepare an LE              
                                     environment                    */          
                                                                                
                                                                                
 /* ---------------------------------------------------------------- */         
 /*                                                                  */         
 /*                    Diag Reason Codes                             */         
 /*                                                                  */         
 /* Constants to aid applications in determining the cause of        */         
 /* HWTH_WARNING or HWTH_COMMUNICATION_ERROR return codes.  Other    */         
 /* return codes may also fill in the diag reason code with a value  */         
 /* related to the particular error.                                 */         
 /*                                                                  */         
 /* ---------------------------------------------------------------- */         
 DECLARE (                                                                      
  HWTH_RSN_REDIRECTED                       VALUE('00000001'XN),     /*         
                                     (1) The request was successful             
                                     but a redirect occurred. See               
                                     HWTH_reasonDesc for the                    
                                     redirected path.                */         
  HWTH_RSN_NEEDED_REDIRECT                  VALUE('00000002'XN),     /*         
                                     (2) The request was attempted,             
                                     but a redirect action was needed           
                                     to complete the request. However           
                                     the HWTH_OPT_MAX_REDIRECTS option          
                                     was set to a value that prevented          
                                     this action.                    */         
  HWTH_RSN_REDIRECT_XDOMAIN                 VALUE('00000003'XN),     /*         
                                     (3) The request was attempted,             
                                     but a redirect action was needed           
                                     to complete the request. However           
                                     the HWTH_OPT_XDOMAIN_REDIRECTS             
                                     option was set to a value that             
                                     prevented this action.          */         
  HWTH_RSN_REDIRECT_TO_HTTP                 VALUE('00000004'XN),     /*         
                                     (4) The request was attempted,             
                                     but a redirect action was needed           
                                     to complete the request. However           
                                     the HWTH_OPT_REDIRECT_PROTOCOLS            
                                     option was set to a value that             
                                     prevented a redirect to go from            
                                     HTTPS to HTTP.                  */         
  HWTH_RSN_REDIRECT_TO_HTTPS                VALUE('00000005'XN),     /*         
                                     (5) The request was attempted,             
                                     but a redirect action was needed           
                                     to complete the request. However           
                                     the HWTH_OPT_REDIRECT_PROTOCOLS            
                                     option was set to a value that             
                                     prevented a redirect to go from            
                                     HTTP to HTTPS.                  */         
  HWTH_RSN_NO_REDIRECT_LOCATION             VALUE('00000006'XN),     /*         
                                     (6) The response from the server           
                                     was received with a redirect               
                                     status but the redirect location           
                                     was not provided.               */         
  HWTH_RSN_HDR_EXIT_ABORT                   VALUE('00000007'XN),     /*         
                                     (7) The user response header exit          
                                     indicated the request should be            
                                     aborted.                        */         
  HWTH_RSN_TUNNEL_UNSUCCESSFUL              VALUE('00000008'XN),     /*         
                                     (8) An attempt was made to                 
                                     establish a tunnel through a               
                                     proxy but the proxy returned a             
                                     non-success return code.        */         
  HWTH_RSN_MALFORMED_CHNK_ENCODE            VALUE('00000009'XN),     /*         
                                     (9) The response from the server           
                                     was received with malformed                
                                     chunked encoding data.          */         
  HWTH_RSN_MALFORMED_REDIRECT_URI       VALUE('0000000A'XN),   /*               
                                     (10) The response from the                 
                                     server was received with a re-             
                                     direct location which specified            
                                     a malformed uri.           @L1A*/          
  HWTH_RSN_STREAM_SEND_EXIT_ABORT       VALUE('0000000B'XN),   /*               
                                     (11) The user streaming send               
                                     exit indicated the request                 
                                     should be aborted.         @L1A*/          
  HWTH_RSN_STREAM_SEND_EXIT_INVALID     VALUE('0000000C'XN),   /*               
                                     (12) The user streaming send               
                                    exit supplied an invalid data               
                                    description.                @L1A*/          
  HWTH_RSN_STREAM_SEND_EXIT_NODATA      VALUE('0000000D'XN),   /*               
                                     (13) The user streaming send               
                                     exit failed to supply required             
                                     data.                      @L1A*/          
  HWTH_RSN_STREAM_SEND_EXIT_STATE       VALUE('0000000E'XN),   /*               
                                     (14) The user streaming send               
                                     exit indicated an unsupported              
                                     state value.               @L1A*/          
  HWTH_RSN_STREAM_RECV_EXIT_ABORT       VALUE('0000000F'XN),   /*               
                                     (15) The user streaming receive            
                                     exit indicated the request                 
                                     should be aborted.         @L1A*/          
  HWTH_RSN_STREAM_RECV_EXIT_INVALID     VALUE('00000010'XN),   /*               
                                     (16) The user streaming receive            
                                     exit supplied an invalid                   
                                     data description.          @L1A*/          
  HWTH_RSN_STREAM_RECV_EXIT_NODATA      VALUE('00000011'XN),   /*               
                                     (17) The user streaming receive            
                                     exit failed to supply required             
                                     buffer(s).                 @L1A*/          
  HWTH_RSN_STREAM_RECV_EXIT_STATE       VALUE('00000012'XN),   /*               
                                     (18) The user streaming send               
                                     exit indicated an illegal state            
                                     value.                     @L1A*/          
  HWTH_RSN_UNSUPPORTED_XFERENCODING     VALUE('00000013'XN),   /*               
                                     (19) The response used an un-              
                                     supported transfer encoding                
                                     type.                      @L1A*/          
  HWTH_RSN_UNSUPPORTED_BODY_SIZE        VALUE('00000014'XN),   /*               
                                     (20) The response body size                
                                     requires streaming receive.@L1A*/          
  HWTH_RSN_UNSUPPORTED_CHUNK_SIZE       VALUE('00000015'XN),   /*               
                                     (21) The response from the                 
                                     server was received as chunk-              
                                     encoded data whose chunks are              
                                     excessively large (likely to               
                                     indicate malformedness).   @L1A*/          
  HWTH_RSN_INCOMPLETE_RESPONSE          VALUE('00000016'XN),   /*               
                                     (22) The response from the                 
                                     server was smaller than the                
                                     indicated content length.  @D1A*/          
  HWTH_RSN_PROXY_AUTH_REQD              VALUE('00000017'XN),         /*         
                                     (23) The HTTP proxy specified              
                                     for the HTTPS connection URI               
                                     requires authentication.    @L2A*/         
  HWTH_RSN_SOCKET_READ_ZERO                 VALUE('00000018'XN),     /*         
                                    (24) No response was received from          
                                    a request due to a closed non-SSL           
                                    socket.                      @09C*/         
  HWTH_RSN_CERT_CHECK_CONN                  VALUE('00000019'XN),     /*         
                                    (25) The HWTHCONN was successful,           
                                    but the HTTPS origin server                 
                                    presented a certificate not valid           
                                    for its hostname.            @1MA*/         
  HWTH_RSN_CERT_CHECK_RQST                  VALUE('0000001A'XN),     /*         
                                    (26) The HWTHRQST was successful,           
                                    but the connection used an HTTPS            
                                    origin server that presented a              
                                    certificate not valid for its               
                                    hostname.                    @1MA*/         
  HWTH_RSN_CERT_CHECK_REDIR                 VALUE('0000001B'XN),     /*         
                                    (27) The HWTHRQST was successful,           
                                    but was redirected to one or more           
                                    HTTPS origin server(s) that                 
                                    presented a certificate not                 
                                    valid for its hostname.      @1MA*/         
  HWTH_RSN_CROSS_TUNNEL_REDIR               VALUE('0000001C'XN),     /*         
                                    (28) The request was sent in a              
                                    tunnel (via proxy) to an HTTPS              
                                    server. The request needed a                
                                    redirect action to a new HTTPS              
                                    tunnel. Cross-tunnel redirects              
                                    are not supported.           @1MA*/         
                                                                                
  HWTH_RSN_COOKIE_STORE_FULL                VALUE('00000033'XN),     /*         
                                    (51) A new cookie could not be              
                                    added to the current cookie store           
                                    because it was full.             */         
  HWTH_RSN_COOKIE_INVALID                   VALUE('00000034'XN),     /*         
                                    (52) A new cookie was not added             
                                    to the current cookie store                 
                                    because it had invalid format or            
                                    content.                         */         
  HWTH_RSN_COOKIE_STORE_INV_PARM            VALUE('00000035'XN),     /*         
                                    (53) A supplied buffer area had             
                                    invalid format or content        */         
  HWTH_RSN_COOKIE_ST_INCOMPLETE             VALUE('00000036'XN),     /*         
                                    (54) Some but not all contents              
                                    of the current cookie store were            
                                    written to (or read from) the               
                                    supplied buffer area.            */         
  HWTH_RSN_COOKIE_ST_MALLOC_ERR             VALUE('00000039'XN),     /*         
                                    (57) A memory-related error                 
                                    condition occurred while reading            
                                    or writing the current cookie               
                                    store.                           */         
  HWTH_RSN_COOKIE_ST_FREE_ERROR             VALUE('0000003A'XN),     /*         
                                    (58) A memory-related error                 
                                    condition occurred while reading            
                                    or writing the current cookie               
                                    store.                           */         
  HWTH_RSN_COOKIE_ST_UNEXP_ERROR            VALUE('0000003B'XN)      /*         
                                    (59) An unexpected error occurred           
                                    while reading or writing the                
                                    the current cookie store.       */          
  ) FIXED BINARY(32) UNSIGNED;                                                  
                                                                                
 /* Constant Definitions                                             */         
 /* ================================================================ */         
 /* ---------------------------------------------------------------- */         
 /* Generic Alias(type) definitions for multiple services            */         
 /* ---------------------------------------------------------------- */         
                                                                                
 /* ---------------------------------------------------------------- */         
 /* Connection / Request Handle Alias(type) definition               */         
 /* ---------------------------------------------------------------- */         
 DEFINE ALIAS HWTH_HANDLE_TYPE CHAR(12);                                        
                                                                                
 /* ---------------------------------------------------------------- */         
 /* returnCode Alias(type) definition                                */         
 /* ---------------------------------------------------------------- */         
 DEFINE ALIAS HWTH_RETURNCODE_TYPE FIXED BINARY(31);                            
                                                                                
 /* ---------------------------------------------------------------- */         
 /* Diagnostics Area Alias(type) definition                          */         
 /* ---------------------------------------------------------------- */         
 DEFINE ALIAS HWTH_DIAGDESC_TYPE CHAR(128);                                     
                                                                                
 DEFINE STRUCTURE 1 HWTH_SERVICE_STRUCT_TYPE                                    
        ,3 HWTH_ServID  FIXED BINARY(16) UNSIGNED                               
        ,3 *            FIXED BINARY(16) UNSIGNED;  /* IBM Use only */          
                                                                                
 DEFINE STRUCTURE 1 HWTH_DIAGAREA_TYPE                                          
      ,3 HWTH_ServiceU    UNION                                                 
        ,5 HWTH_Service       FIXED BINARY(32) UNSIGNED                         
        ,5 HWTH_ServiceStruct TYPE HWTH_SERVICE_STRUCT_TYPE                     
      ,3 HWTH_ReasonCode  FIXED BINARY(32) UNSIGNED                             
      ,3 HWTH_ReasonDesc  TYPE HWTH_DIAGDESC_TYPE                               
     ;                                                       /* @02C */         
                                                                                
 /* ================================================================ */         
 /* HWTHINIT Parameter Alias(type) Definitions and Constants         */         
 /* ================================================================ */         
 /* ---------------------------------------------------------------- */         
 /* handleType                                                       */         
 /*  Used to specify which type of resources need to be initialized. */         
 /* ---------------------------------------------------------------- */         
 DEFINE ALIAS HWTH_HANDLETYPE_TYPE FIXED BINARY(32) UNSIGNED;                   
                                                                                
 DECLARE (                                                                      
      HWTH_HANDLETYPE_CONNECTION       VALUE(1)                                 
     ,HWTH_HANDLETYPE_HTTPREQUEST      VALUE(2)                                 
     ) TYPE HWTH_HANDLETYPE_TYPE;                                               
                                                                                
 /* ================================================================ */         
 /* HWTHSET Parameter Alias(type) Definitions and Constants          */         
 /* ================================================================ */         
 /* ---------------------------------------------------------------- */         
 /* option                                                           */         
 /*  Used to specify which option is to be set for either a          */         
 /*  connection or a request.                                        */         
 /* ---------------------------------------------------------------- */         
 DEFINE ALIAS HWTH_SET_OPTION_TYPE FIXED BINARY(32) UNSIGNED;                   
                                                                                
 DECLARE (                                                                      
      /* HTTP Enabler Connection / Request Options                              
      */                                                                        
      HWTH_OPT_URI                 VALUE('0001'XN)                   /*         
                                   (1) Can be connection or request             
                                   option.  For a connection handle,            
                                   the network location (w/o port #)            
                                   is required (see documentation).             
                                   For a request handle, an optional            
                                   resource being targeted (path name           
                                   with optional query string and/or            
                                   fragment).                                   
                                                                                
                                   /* 2 - 20 reserved                */         
                                                                                
      /* HTTP Enabler Connection-only Options                                   
      */                                                                        
     ,HWTH_OPT_PORT                VALUE('0015'XN)                   /*         
                                   (21) An optional remote port                 
                                   number.                           */         
     ,HWTH_OPT_IPSTACK             VALUE('0016'XN)                   /*         
                                   (22) An optional 1 to 8 character            
                                   z/OS TCP/IP stack name to be used.*/         
     ,HWTH_OPT_LOCALIPADDR         VALUE('0017'XN)                   /*         
                                   (23) An optional outgoing local              
                                   IP address the connection is to              
                                   originate from.                   */         
     ,HWTH_OPT_LOCALPORT           VALUE('0018'XN)                   /*         
                                   (24) An optional outgoing local              
                                   port the connection is to                    
                                   originate from.                   */         
     ,HWTH_OPT_PROXY               VALUE('0019'XN)                   /*         
                                   (25) An optional HTTP proxy.      */         
     ,HWTH_OPT_PROXYPORT           VALUE('001A'XN)                   /*         
                                   (26) An optional proxy port.      */         
     ,HWTH_OPT_USE_SSL             VALUE('001B'XN)                   /*         
                                   (27) An optional value to tell               
                                   toolkit whether or not to use                
                                   SSL/TLS connection.               */         
     ,HWTH_OPT_SSLVERSION          VALUE('001C'XN)                   /*         
                                   (28) An optional set of SSL levels           
                                   to be used as part of SSL                    
                                   negotiations.                     */         
     ,HWTH_OPT_SSLKEYTYPE          VALUE('001D'XN)                   /*         
                                   (29) An optional value to tell the           
                                   toolkit which type of key store to           
                                   use.                              */         
     ,HWTH_OPT_SSLKEY              VALUE('001E'XN)                   /*         
                                   (30) An optional name of the key             
                                   store to be used.                 */         
     ,HWTH_OPT_SSLKEYSTASHFILE     VALUE('001F'XN)                   /*         
                                   (31) An optional stash file where            
                                   the key database file password is            
                                   kept.  Required if SSLKEYTYPE is             
                                   HWTH_SSLKEYTYPE_KEYDBFILE.        */         
     ,HWTH_OPT_SSLCLIENTAUTHLABEL  VALUE('0020'XN)                   /*         
                                   (32) An optional label representing          
                                   a client certificate if client               
                                   authentication is required.       */         
     ,HWTH_OPT_SNDTIMEOUTVAL       VALUE('0021'XN)                   /*         
                                   (33) An optional timeout value               
                                   for outgoing requests.            */         
     ,HWTH_OPT_RCVTIMEOUTVAL       VALUE('0022'XN)                   /*         
                                   (34) An optional timeout value               
                                   for incoming responses.           */         
     ,HWTH_OPT_MAX_REDIRECTS       VALUE('0023'XN)                   /*         
                                   (35) An optional value specifying            
                                   the max number of redirects for a            
                                   request using this connection.    */         
     ,HWTH_OPT_XDOMAIN_REDIRECTS   VALUE('0024'XN)                   /*         
                                   (36) An optional value specifying            
                                   the redirect behavior regarding              
                                   cross-domain redirects.           */         
     ,HWTH_OPT_REDIRECT_PROTOCOLS  VALUE('0025'XN)                   /*         
                                   (37) An optional value specifying            
                                   the redirect behavior regarding              
                                   allowed redirect protocols.       */         
     ,HWTH_OPT_COOKIETYPE          VALUE('0026'XN)                   /*         
                                   (38) An optional value specifying            
                                   the cookie engine behavior of the            
                                   toolkit for this connection.      */         
     ,HWTH_OPT_COOKIE_INPUT_BUFFER VALUE('0027'XN)                   /*         
                                   (39) An optional buffer containing           
                                   a previously saved cookie store to           
                                   be used to prime the cookie engine           
                                   for this connection.              */         
     ,HWTH_OPT_COOKIE_OUTPUT_BUFFER VALUE('0028'XN)                  /*         
                                   (40) An optional buffer for                  
                                   cookies to be saved when the                 
                                   connection is disconnected.       */         
     ,HWTH_OPT_VERBOSE              VALUE('0029'XN)                  /*         
                                   (41) An optional debugging option.*/         
     ,HWTH_OPT_VERBOSE_OUTPUT       VALUE('002A'XN)                  /*         
                                   (42) An optional DD (data                    
                                   definition) specification where              
                                   verbose debugging messages should be         
                                   routed                        @02A*/         
     ,HWTH_OPT_SSLCIPHERSPECS       VALUE('002B'XN)                  /*         
                                   (43) An optional specification of            
                                   the cipher suites to be used by SSL.         
                                                                 @05A*/         
     ,HWTH_OPT_PROXYAUTH           VALUE('002C'XN)                   /*         
                                   (44) An optional value specifying            
                                   the proxy authentication type to be          
                                   used on the connection.      @L2A */         
     ,HWTH_OPT_PROXYAUTH_USERNAME  VALUE('002D'XN)                   /*         
                                   (45) An optional user name to be             
                                   used with the proxy authentication.          
                                   Required if HWTH_OPT_PROXYAUTH is            
                                   HWTH_PROXYAUTH_BASIC.        @L2A */         
     ,HWTH_OPT_PROXYAUTH_PASSWORD  VALUE('002E'XN)                   /*         
                                   (46) An optional password to be              
                                   used with the proxy authentication.          
                                   Required if HWTH_OPT_PROXYAUTH is            
                                   HWTH_PROXYAUTH_BASIC.        @L2A */         
     ,HWTH_OPT_SSLTRACE            VALUE('002F'XN)                   /*         
                                   (47) Enables an optional                     
                                   debugging aid for secure connect             
                                   failures.                    @16A */         
      ,HWTH_OPT_CERT_CHECK         VALUE('0030'XN)                   /*         
                                   (48) Control the reporting of                
                                   server certificate validation                
                                   errors.                      @1MA */         
                                   /* 49 - 70 reserved          @1MC */         
      /* HTTP Enabler Request-only Options                                      
      */                                                                        
     ,HWTH_OPT_HTTP_VERSION        VALUE('0047'XN)                   /*         
                                   (71) An optional HTTP version.    */         
     ,HWTH_OPT_REQUESTMETHOD       VALUE('0048'XN)                   /*         
                                   (72) A required HTTP request                 
                                   method.                           */         
     ,HWTH_OPT_HTTPHEADERS         VALUE('0049'XN)                   /*         
                                   (73) An optional sList (created              
                                   by the HWTHSLST service) specifying          
                                   a list of HTTP request headers to            
                                   be sent.                          */         
     ,HWTH_OPT_REQUESTBODY         VALUE('004A'XN)                   /*         
                                   (74) An optional request body     */         
     ,HWTH_OPT_TRANSLATE_REQBODY   VALUE('004B'XN)                   /*         
                                   (75) An optional value specifying            
                                   the request body codepage                    
                                   translation behavior of the                  
                                   toolkit.                          */         
     ,HWTH_OPT_RESPONSEHDR_EXIT    VALUE('004C'XN)                   /*         
                                   (76) An optional address of the              
                                   response header callback routine. */         
     ,HWTH_OPT_RESPONSEHDR_USERDATA VALUE('004D'XN)                  /*         
                                   (77) An optional buffer of user              
                                   data to be passed to the response            
                                   header exit.                      */         
     ,HWTH_OPT_RESPONSEBODY_EXIT   VALUE('004E'XN)                   /*         
                                   (78) An optional address of the              
                                   response body callback routine.   */         
     ,HWTH_OPT_RESPONSEBODY_USERDATA VALUE('004F'XN)                 /*         
                                   (79) An optional buffer of user              
                                   data to be passed to the response            
                                   body exit.                        */         
     ,HWTH_OPT_TRANSLATE_RESPBODY  VALUE('0050'XN)                   /*         
                                   (80) An optional value specifying            
                                   the response body codepage                   
                                   translation behavior of the                  
                                   toolkit.                          */         
     ,HWTH_OPT_HTTPAUTH            VALUE('0051'XN)                   /*         
                                   (81) An optional value specifying            
                                   the HTTP authentication level to be          
                                   used on the request.              */         
     ,HWTH_OPT_USERNAME            VALUE('0052'XN)                   /*         
                                   (82) An optional HTTP user name              
                                   to be used with the HTTP                     
                                   authentiation. Required if                   
                                   HWTH_OPT_HTTPAUTH is HWTH_HTTPAUTH_          
                                   BASIC.                            */         
     ,HWTH_OPT_PASSWORD            VALUE('0053'XN)                   /*         
                                   (83) An optional HTTP password               
                                   to be used with the HTTP                     
                                   authentiation. Required if                   
                                   HWTH_OPT_HTTPAUTH is HWTH_HTTPAUTH_          
                                   BASIC.                            */         
     ,HWTH_OPT_COOKIE              VALUE('0054'XN)                   /*         
                                   (84) An optional buffer of user-             
                                   supplied cookies for this request.*/         
     ,HWTH_OPT_STREAM_SEND_EXIT    VALUE('0055'XN)                  /*          
                                   (85) An optional address of                  
                                   the streamed request body callback           
                                   routine.                      @L1A*/         
     ,HWTH_OPT_STREAM_RECEIVE_EXIT VALUE('0056'XN)                  /*          
                                   (86) An optional address of                  
                                   the streamed response body callback          
                                   routine.                      @L1A*/         
     ,HWTH_OPT_REQUESTBODY_USERDATA VALUE('0057'XN)                 /*          
                                   (87) An optional buffer of                   
                                   of user data to be passed to the             
                                   streamed request body callback               
                                   routine.                      @L1A*/         
                                   /* 88 - 120 reserved          @L1C*/         
     ) TYPE HWTH_SET_OPTION_TYPE;                                               
                                                                                
 DECLARE (                                                                      
      /* HTTP REXX-only options (set internally by REXX host command            
         environment processor - defined in PL/X header only)                   
      */                                                                        
      HWTH_REQUESTBODY_VAR         VALUE('0100'XN)                   /*         
                                   (256) TBD                         */         
     ,HWTH_INPUTCOOKIEBUFF_VAR     VALUE('0101'XN)                   /*         
                                   (257) TBD                         */         
     ) TYPE HWTH_SET_OPTION_TYPE;                                               
                                                                                
 /* ---------------------------------------------------------------- */         
 /* HWTH_OPT_IPSTACK Alias(type) definition                          */         
 /* IPStack                                                          */         
 /*   Use this type to declare a data area representing the local    */         
 /*   TCP/IP stack that is optionally selected for HTTP              */         
 /*   communications to the remote HTTP server.                      */         
 /* ---------------------------------------------------------------- */         
 DEFINE ALIAS HWTH_IPSTACK_TYPE CHAR(8);                                        
                                                                                
 /* ---------------------------------------------------------------- */         
 /* HWTH_OPT_USE_SSL Alias(type) and constant values                 */         
 /* SSL On/Off Switch                                                */         
 /*   Use these constants to determine if SSL/TLS secure HTTPS       */         
 /*   communication is used when establishing the connection.        */         
 /* ---------------------------------------------------------------- */         
 DEFINE ALIAS HWTH_USESSL_TYPE FIXED BINARY(32) UNSIGNED;                       
                                                                                
 DECLARE (                                                                      
      HWTH_SSL_NONE           VALUE(0)          /* SSL/TLS not used  */         
     ,HWTH_SSL_USE            VALUE(1)          /* SSL/TLS used      */         
     ) TYPE HWTH_USESSL_TYPE;                                                   
                                                                                
 /* ---------------------------------------------------------------- */         
 /* HWTH_OPT_SSLVERSION constant values                              */         
 /* SSL Version                                                      */         
 /*   Use these constants to set one or more supported SSL versions  */         
 /*   If more than one level is desired, use successive calls.       */         
 /* ---------------------------------------------------------------- */         
 DEFINE ALIAS HWTH_SSLVERSION_TYPE FIXED BINARY(32) UNSIGNED;                   
                                                                                
 DECLARE (                                                                      
      HWTH_SSLVERSION_SSLV3   VALUE(1)                                          
     ,HWTH_SSLVERSION_TLSV1   VALUE(2)                                          
     ,HWTH_SSLVERSION_TLSV11  VALUE(3)                                          
     ,HWTH_SSLVERSION_TLSV12  VALUE(4)                                          
     ,HWTH_SSLVERSION_TLSV13  VALUE(5)                         /*@17A*/         
     ,HWTH_SSLVERSION_DEFAULT VALUE(99)      /* SSL used, use default*/         
     ) TYPE HWTH_SSLVERSION_TYPE;            /* System SSL values    */         
                                                                                
                                                                                
 /* -----------------------------------------------------------------*/         
 /* HWTH_OPT_SSLKEYTYPE Alias(type) and constant values              */         
 /* Key Repository Types                                             */         
 /*   Use these constants to specify a key repository type           */         
 /* -----------------------------------------------------------------*/         
 DEFINE ALIAS HWTH_SSLKEYTYPE_TYPE FIXED BINARY(32) UNSIGNED;                   
                                                                                
 DECLARE (                                                                      
   HWTH_SSLKEYTYPE_KEYDBFILE   VALUE(1)                                         
  ,HWTH_SSLKEYTYPE_KEYRINGNAME VALUE(2)                                         
     ) TYPE HWTH_SSLKEYTYPE_TYPE;                                               
                                                                                
 /* -----------------------------------------------------------------*/         
 /* HWTH_OPT_SSLKEY constant values                                  */         
 /* Key Repository Values                                            */         
 /*   Use these constants to aid in naming a key repository          */         
 /* -----------------------------------------------------------------*/         
                                                                                
 DECLARE (                                                                      
     HWTH_KEYDBFILE_MAX     VALUE(251)       /* Database path        */         
    ,HWTH_KEYRINGNAME_MAX   VALUE(237)                                          
    ,HWTH_KEYDBLABEL_MAX    VALUE(127)                                          
    ,HWTH_KEYRINGLABEL_MAX  VALUE(32)                                           
  ) FIXED BINARY(32) UNSIGNED;               /* SAF Keyring, or PKCS            
                                                Token File           */         
                                                                                
 /* -----------------------------------------------------------------*/         
 /* HWTH_OPT_SSLKEYSTASHFILE Alias(type)                             */         
 /* Key Repository Password                                          */         
 /*   Use this type to set the value of the password stash file      */         
 /*   associated with the key database file.                         */         
 /*   (only used when HWTH_OPT_SSLKEYTYPE =                          */         
 /*   HWTH_SSLKEYTYPE_KEYDBFILE)                                     */         
 /* -----------------------------------------------------------------*/         
 DECLARE HWTH_SSLKEYSTASHFILE_MAX VALUE(251) FIXED BINARY(32) UNSIGNED;         
                                                                                
                                                                                
 /* -----------------------------------------------------------------*/         
 /* HWTH_OPT_MAXREDIRECTS Alias(type)                                */         
 /* Maximum number of redirects for the connection.                  */         
 /*   Use this setting to limit the number of times a redirect will  */         
 /*   be followed by the toolkit.                                    */         
 /*   Default: 5                                                     */         
 /*   Zero: Redirects not allowed                                    */         
 /*   Max value: 50                                                  */         
 /* -----------------------------------------------------------------*/         
 DEFINE ALIAS HWTH_MAXREDIRECTS_TYPE FIXED BINARY(32) UNSIGNED;                 
                                                                                
 /* -----------------------------------------------------------------*/         
 /* HWTH_OPT_XDOMAIN_REDIRECTS Alias(type) and constant values       */         
 /* Redirect behavior of the connection.                             */         
 /*   Use this setting to allow or disallow redirects to a domain    */         
 /*   other than the domain represented by this connection.          */         
 /* -----------------------------------------------------------------*/         
 DEFINE ALIAS HWTH_OPT_XDOMAIN_REDIRECTS_TYPE FIXED BINARY(32)                  
                                                    UNSIGNED;                   
                                                                                
 DECLARE (                                                                      
      HWTH_XDOMAIN_REDIRS_NOTALLOWED VALUE(0)                                   
     ,HWTH_XDOMAIN_REDIRS_ALLOWED    VALUE(1)                                   
     ) TYPE HWTH_OPT_XDOMAIN_REDIRECTS_TYPE;                                    
                                                                                
 /* -----------------------------------------------------------------*/         
 /* HWTH_OPT_REDIRECT_PROTOCOLS Alias(type) and constant values      */         
 /* Specifies which additional protocols are allowed in the case     */         
 /*   a redirect.                                                    */         
 /* -----------------------------------------------------------------*/         
 DEFINE ALIAS HWTH_REDIRPROTOCOL_TYPE FIXED BINARY(32) UNSIGNED;                
                                                                                
 DECLARE (                                                                      
      HWTH_REDIRECT_NOPROTCHANGE     VALUE(0)                                   
     ,HWTH_REDIRECT_HTTPS            VALUE(1)                                   
     ,HWTH_REDIRECT_HTTP             VALUE(2)                                   
     ,HWTH_REDIRECT_NOHTTPS          VALUE(3)                                   
     ) TYPE HWTH_REDIRPROTOCOL_TYPE;                                            
                                                                                
 /* -----------------------------------------------------------------*/         
 /* HWTH_OPT_COOKIETYPE Alias(type) and constant values              */         
 /* Cookie behavior of the connection                                */         
 /*   Use this setting to determine how cookies should be handled    */         
 /* -----------------------------------------------------------------*/         
 DEFINE ALIAS HWTH_COOKIETYPE_TYPE FIXED BINARY(32) UNSIGNED;                   
                                                                                
 DECLARE (                                                                      
      HWTH_COOKIETYPE_NONE    VALUE(0)                                          
     ,HWTH_COOKIETYPE_SESSION VALUE(1)                                          
     ,HWTH_COOKIETYPE_PERSIST VALUE(2)                                          
     ) TYPE HWTH_COOKIETYPE_TYPE;                                               
                                                                                
 /* -----------------------------------------------------------------*/         
 /* HWTH_OPT_VERBOSE Alias(type) and constant values                 */         
 /* Tracing behavior of the toolkit                                  */         
 /*   Use this setting to set if additional debugging messages       */         
 /*   should be cut to standard output or to the specified           */         
 /*   HWTH_OPT_VERBOSE_OUTPUT DD.                               @02C */         
 /* -----------------------------------------------------------------*/         
 DEFINE ALIAS HWTH_VERBOSE_TYPE FIXED BINARY(32) UNSIGNED;                      
                                                                                
 DECLARE (                                                                      
      HWTH_VERBOSE_OFF        VALUE(0)                                          
     ,HWTH_VERBOSE_ON         VALUE(1)                                          
     ,HWTH_VERBOSE_UNREDACTED VALUE(2)                                          
     ) TYPE HWTH_VERBOSE_TYPE;                               /* @14C */         
                                                                                
 /* ---------------------------------------------------------------- */         
 /* HWTH_OPT_VERBOSE_OUTPUT type definition                          */         
 /* Verbose output                                                   */         
 /*   Use this type to declare the name of a DD (data definition)    */         
 /*   representing the location for any verbose debugging messages   */         
 /*   to be directed to.                                             */         
 /* ---------------------------------------------------------------- */         
 DEFINE ALIAS HWTH_VERBOSE_OUTPUT_TYPE CHAR(8);              /* @02A */         
                                                                                
 /* ---------------------------------------------------------------- */         
 /* HWTH_OPT_HTTP_VERSION constant values                            */         
 /* HTTP version                                                     */         
 /*   Use these constants specify the HTTP version level             */         
 /* ---------------------------------------------------------------- */         
 DEFINE ALIAS HWTH_HTTPVERSION_TYPE FIXED BINARY(32) UNSIGNED;                  
                                                                                
 DECLARE (                                                                      
      HWTH_HTTP_VERSION_NONE VALUE(0)                                           
     ,HWTH_HTTP_VERSION_1_0  VALUE(1)                                           
     ,HWTH_HTTP_VERSION_1_1  VALUE(2)                                           
     ) TYPE HWTH_HTTPVERSION_TYPE;                                              
                                                                                
 /* ---------------------------------------------------------------- */         
 /* HWTH_OPT_PROXYAUTH constant values                         @L2A  */         
 /* Authenticating proxy options                                     */         
 /*   Use these constants to specify the proxy authentication type   */         
 /* ---------------------------------------------------------------- */         
 DEFINE ALIAS HWTH_PROXYAUTH_TYPE FIXED BINARY(32) UNSIGNED; /* @L2A */         
                                                                                
 DECLARE (                                                                      
      HWTH_PROXYAUTH_NONE    VALUE(0)                                           
     ,HWTH_PROXYAUTH_BASIC   VALUE(1)                                           
     ) TYPE HWTH_PROXYAUTH_TYPE;                             /* @L2A */         
                                                                                
 /* ---------------------------------------------------------------- */         
 /* HWTH_OPT_CERT_CHECK constant values                        @1MA  */         
 /* Certificate checking options                                     */         
 /*   Use these constants to control server certificate validation   */         
 /* ---------------------------------------------------------------- */         
 DEFINE ALIAS HWTH_CERT_CHECK_TYPE FIXED BINARY(32) UNSIGNED;  /*@1MA*/         
                                                                                
 DECLARE (                                                                      
      HWTH_CERT_CHECK_SAN_ONLY   VALUE(1)                                       
     ,HWTH_CERT_CHECK_SAN_CN_DNS VALUE(3)                                       
     ,HWTH_CERT_CHECK_WARN       VALUE(8)                                       
     ) TYPE HWTH_CERT_CHECK_TYPE;                              /*@1MA*/         
                                                                                
 /* ---------------------------------------------------------------- */         
 /* HWTH_OPT_REQUESTMETHOD constant values                           */         
 /* HTTP Request Operations                                          */         
 /* ...are the CRUD methods:  Create, Read, Update, and Delete,  @03C*/         
 /* and also the useful method HEAD (body-less Read).  They      @03C*/         
 /* correspond to HTTP commands POST, GET, PUT, DELETE and HEAD.     */         
 /* Use these constants to choose the desired HTTP method.           */         
 /* ---------------------------------------------------------------- */         
 DEFINE ALIAS HWTH_REQUESTMETHOD_TYPE FIXED BINARY(32) UNSIGNED;                
                                                                                
 DECLARE (                                                                      
      HWTH_HTTP_REQUEST_POST   VALUE(1)                                         
     ,HWTH_HTTP_REQUEST_GET    VALUE(2)                                         
     ,HWTH_HTTP_REQUEST_PUT    VALUE(3)                                         
     ,HWTH_HTTP_REQUEST_DELETE VALUE(4)                                         
     ,HWTH_HTTP_REQUEST_HEAD   VALUE(5)                       /* @03A*/         
     ,HWTH_HTTP_REQUEST_PATCH  VALUE(6)                       /* @16A*/         
     ,HWTH_HTTP_REQUEST_OPTIONS VALUE(7)                      /* @16A*/         
     ) TYPE HWTH_REQUESTMETHOD_TYPE;                                            
                                                                                
 /* ---------------------------------------------------------------- */         
 /* HWTH_OPT_HTTPAUTH constant values                                */         
 /* HTTP Authorization level                                         */         
 /*   Use these constants to specify the HTTP authorization level    */         
 /* ---------------------------------------------------------------- */         
 DEFINE ALIAS HWTH_HTTPAUTH_TYPE FIXED BINARY(32) UNSIGNED;                     
                                                                                
 DECLARE (                                                                      
      HWTH_HTTPAUTH_NONE     VALUE(0)                                           
     ,HWTH_HTTPAUTH_BASIC    VALUE(1)                                           
     ) TYPE HWTH_HTTPAUTH_TYPE;                                                 
                                                                                
 /* ---------------------------------------------------------------- */         
 /* HWTH_OPT_TRANSLATE_REQBODY Alias(type) and constant values       */         
 /* HTTP request body translation behavior                           */         
 /*   Use these constants to specify if the toolkit is to attempt    */         
 /*   translation of the request body, if present                    */         
 /* ---------------------------------------------------------------- */         
 DEFINE ALIAS HWTH_XLATE_REQBODY_TYPE FIXED BINARY(32) UNSIGNED;                
                                                                                
 DECLARE (                                                                      
      HWTH_XLATE_REQBODY_NONE         VALUE(0) /* No translation     */         
     ,HWTH_XLATE_REQBODY_E2A          VALUE(1) /* EBCDIC to ASCII    */         
     ) TYPE HWTH_XLATE_REQBODY_TYPE;                                            
                                                                                
 /* ---------------------------------------------------------------- */         
 /* HWTH_OPT_TRANSLATE_RESPBODY Alias(type) and constant values      */         
 /* HTTP response body translation behavior                          */         
 /*   Use these constants to specify if the toolkit is to attempt    */         
 /*   translation of the incoming response body, if present          */         
 /* ---------------------------------------------------------------- */         
 DEFINE ALIAS HWTH_XLATE_RESPBODY_TYPE FIXED BINARY(32) UNSIGNED;               
                                                                                
 DECLARE (                                                                      
      HWTH_XLATE_RESPBODY_NONE        VALUE(0) /* No translation     */         
     ,HWTH_XLATE_RESPBODY_A2E         VALUE(1) /* ASCII to EBCDIC    */         
     ) TYPE HWTH_XLATE_RESPBODY_TYPE;                                           
                                                                                
 /* ================================================================ */         
 /* HWTSLST Parameter Type Definitions and Constants                 */         
 /* ================================================================ */         
 /* ---------------------------------------------------------------- */         
 /* SLIST                                                            */         
 /*  address of the linked list to be created or used to append a    */         
 /*  specified string.                                               */         
 /* ---------------------------------------------------------------- */         
 DEFINE ALIAS HWTH_SLIST_TYPE PTR;                                              
 /* ---------------------------------------------------------------- */         
 /* function                                                         */         
 /*  Used to specify which function to perform on the linked list    */         
 /*  append service.                                                 */         
 /* ---------------------------------------------------------------- */         
 DEFINE ALIAS HWTH_SLST_FUNCTION_TYPE FIXED BINARY(32) UNSIGNED;                
                                                                                
 DECLARE (                                                                      
      HWTH_SLST_NEW       VALUE(1)  /* Create a new linked list and  */         
                                    /* append the first string       */         
     ,HWTH_SLST_APPEND    VALUE(2)  /* Append string to the linked   */         
                                    /* list                          */         
     ,HWTH_SLST_FREE      VALUE(3)  /* Clean up/Free the linked list */         
     ) TYPE HWTH_SLST_FUNCTION_TYPE;                                            
                                                                                
 /* ================================================================ */         
 /* HWTHTERM Parameter Alias(type) Definitions and Constants         */         
 /* ================================================================ */         
 /*------------------------------------------------------------------*/         
 /* forceOption                                                      */         
 /*   Used to determine if the terminate service should force        */         
 /*   the workarea memory created by HWTHINIT to be freed, even      */         
 /*   if the handle appears to be in use.                            */         
 /*------------------------------------------------------------------*/         
 DEFINE ALIAS HWTH_FORCEOPTION_TYPE FIXED BINARY(32) UNSIGNED;                  
                                                                                
 DECLARE (                                                                      
      HWTH_NOFORCE         VALUE(0)                                             
     ,HWTH_FORCE           VALUE(1)                                             
     ) TYPE HWTH_FORCEOPTION_TYPE;                                              
                                                                                
                                                                                
 /* ================================================================ */         
 /* HTTP Enabler callback routine definitions and constants          */         
 /* ================================================================ */         
 /* ---------------------------------------------------------------- */         
 /* HWTH_STATUS_LINE_TYPE Alias(type) definition                     */         
 /* HTTP Response Information                                        */         
 /*   Use this type to declare the structure containing the HTTP     */         
 /*   status information returned from the server on a response for  */         
 /*   a given request.                                               */         
 /* ---------------------------------------------------------------- */         
 DEFINE STRUCTURE 1  HWTH_STATUS_LINE_TYPE                                      
      ,3 HWTH_statusCode   FIXED BINARY(32) UNSIGNED                            
      ,3 HWTH_versionPtr   PTR                                                  
      ,3 HWTH_versionLen   FIXED BINARY(32) UNSIGNED                            
      ,3 HWTH_reasonPtr    PTR                                                  
      ,3 HWTH_reasonLen    FIXED BINARY(32) UNSIGNED                            
     ;                                                                          
                                                                                
 /* ---------------------------------------------------------------- */         
 /* HWTH_RESP_EXIT_FLAGS Alias(type) definition                      */         
 /* HTTP Response Header Exit Flags                                  */         
 /*   Use this type to declare the user exit flag variable which     */         
 /*   may include status on processing of the HTTP response.         */         
 /* ---------------------------------------------------------------- */         
 DEFINE ALIAS HWTH_RESP_EXIT_FLAGS_TYPE FIXED BINARY(32) UNSIGNED;              
                                                                                
 DECLARE (                                                                      
      HWTH_EXITFLAG_COOKIESTORE_FULL VALUE('00000001'XN)                        
     ,HWTH_EXITFLAG_COOKIE_INVALID   VALUE('00000002'XN)                        
     ,HWTH_EXITFLAG_CHUNKED_TRAILER  VALUE('00000010'XN)                        
     ) TYPE HWTH_RESP_EXIT_FLAGS_TYPE;                       /* @06C */         
                                                                                
 /* ---------------------------------------------------------------- */         
 /* HWTH_RESP_EXIT_RC Alias(type) definition                         */         
 /* HTTP Response Header Exit Return Code                            */         
 /*   Use this type to declare the return code value returned from   */         
 /*   the HTTP response header callback routine to the toolkit       */         
 /* ---------------------------------------------------------------- */         
 DEFINE ALIAS HWTH_RESP_EXIT_RC_Type FIXED BINARY(32) UNSIGNED;                 
                                                                                
 DECLARE (                                                                      
      HWTH_RESP_EXIT_RC_OK    VALUE(0)                                          
     ,HWTH_RESP_EXIT_RC_ABORT VALUE(1)                                          
     ) TYPE HWTH_RESP_EXIT_RC_TYPE;                                             
                                                                                
 /* ---------------------------------------------------------------- */         
 /* HWTH_STREAM_PROGRESS_TYPE Alias (type) definition                */         
 /* HTTP Streaming Send or Receive Progress Information              */         
 /*    The toolkit provides one of these to a streaming send or      */         
 /*    receive exit so that the latter can understand and monitor    */         
 /*    the current progress of the (request body) send or (response  */         
 /*    body) receive.  The requestUri field identifies the request   */         
 /*    to the streaming exit, which may use the userData field for   */         
 /*    any purpose.  The responseStatus field is only meaningful for */         
 /*    receive, and locates data of type HWTH_STATUS_LINE_TYPE.  @L1A*/         
 /* ---------------------------------------------------------------- */         
 DEFINE STRUCTURE 1 HWTH_STREAM_PROGRESS_TYPE                                   
      ,3 HWTH_requestUri       PTR                                              
      ,3 HWTH_requestUriLength FIXED BINARY(31)                                 
      ,3 HWTH_numChunks        FIXED BINARY(64) UNSIGNED                        
      ,3 HWTH_totalBytes       FIXED BINARY(64) UNSIGNED                        
      ,3 HWTH_userData         PTR                                              
      ,3 HWTH_responseStatus   PTR                                              
     ;                                                        /* @L1A*/         
                                                                                
                                                                                
 /* ---------------------------------------------------------------- */         
 /* HWTH_STREAM_DATADESC_TYPE Alias (type) definition                */         
 /* HTTP Streaming Send or Receive Data Area Description             */         
 /*   For streaming send, use an array of these to describe an       */         
 /*   ordered list of contiguous data areas which comprise the next  */         
 /*   payload of request body data to be sent to the remote HTTP     */         
 /*   server.                                                        */         
 /*   For streaming receive, use an array of these to describe an    */         
 /*   ordered list of contiguous data areas into which the next      */         
 /*   payload of response body data received from the remote HTTP    */         
 /*   server is to be buffered (the supply list).  The array of      */         
 /*   these returned by toolkit (the return list) describes those    */         
 /*   portions of the buffered data which are actual response body   */         
 /*   content (free of any transfer-encoding related metadata).  @L1A*/         
 /* ---------------------------------------------------------------- */         
 DEFINE STRUCTURE 1 HWTH_STREAM_DATADESC_TYPE                                   
      ,3 HWTH_dataPtr      PTR                                                  
      ,3 HWTH_dataLength   FIXED BINARY(31)                                     
     ;                                                        /* @L1A*/         
                                                                                
 /* ---------------------------------------------------------------- */         
 /* Streaming Send STATE values.                                     */         
 /* The SEND_CONTINUE constant is the initial state setting and is   */         
 /* used by the streaming send exit to indicate to the toolkit that  */         
 /* the entire request body has not yet been supplied.               */         
 /* The SEND_EOD (end of data) constant is used by the streaming     */         
 /* send exit to indicate to the toolkit that the request body has   */         
 /* now been supplied in its entirety.  The exit may set this state  */         
 /* when providing the final installment of request body data, or    */         
 /* may set it independently on the subsequent callback.             */         
 /* The SEND_ABORT constant is used by the streaming send exit to    */         
 /* indicate to the toolkit that the balance of request body send    */         
 /* processing should not be performed.                              */         
 /* The SEND_COMPLETE constant is used by the toolkit to convey to   */         
 /* the streaming send exit that the supplied request body has been  */         
 /* sent in its entirety.                                            */         
 /* The SEND_ERROR constant is used by the toolkit to convey to the  */         
 /* streaming send exit that the supplied request body could not be  */         
 /* sent successfully.                                           @L1A*/         
 /* ---------------------------------------------------------------- */         
 DEFINE ALIAS HWTH_STREAM_SEND_STATE_TYPE FIXED BINARY(32) UNSIGNED;            
 DECLARE (                                                                      
     HWTH_STREAM_SEND_CONTINUE   VALUE(0)                                       
    ,HWTH_STREAM_SEND_EOD        VALUE(1)                                       
    ,HWTH_STREAM_SEND_ABORT      VALUE(2)                                       
    ,HWTH_STREAM_SEND_COMPLETE   VALUE(3)                                       
    ,HWTH_STREAM_SEND_ERROR      VALUE(4)                                       
    ) TYPE HWTH_STREAM_SEND_STATE_TYPE;                       /* @L1A*/         
                                                                                
 /* ---------------------------------------------------------------- */         
 /* Streaming Receive STATE values.                                  */         
 /* The RECEIVE_CONTINUE constant is the initial state setting and   */         
 /* is used by the toolkit to indicate to the streaming receive exit */         
 /* that the entire response body has not yet been supplied.         */         
 /* The RECEIVE_EOD (end of data) constant is used by the toolkit    */         
 /* to indicate that the response body has been supplied in its      */         
 /* entirety.                                                        */         
 /* The RECEIVE_ABORT constant is used by the streaming receive exit */         
 /* to indicate to the toolkit that the balance of receive           */         
 /* processing should not be performed.                              */         
 /* The RECEIVE_COMPLETE constant is used by the streaming receive   */         
 /* exit to indicate to the toolkit that the complete response body  */         
 /* has been accepted.                                               */         
 /* The RECEIVE_ERROR constant is used by the toolkit to convey to   */         
 /* the streaming receive exit that the response body could not be   */         
 /* received successfully.                                       @L1A*/         
 /* ---------------------------------------------------------------- */         
 DEFINE ALIAS HWTH_STREAM_RECEIVE_STATE_TYPE FIXED BINARY(32) UNSIGNED;         
 DECLARE (                                                                      
     HWTH_STREAM_RECEIVE_CONTINUE   VALUE(0)                                    
    ,HWTH_STREAM_RECEIVE_EOD        VALUE(1)                                    
    ,HWTH_STREAM_RECEIVE_ABORT      VALUE(2)                                    
    ,HWTH_STREAM_RECEIVE_COMPLETE   VALUE(3)                                    
    ,HWTH_STREAM_RECEIVE_ERROR      VALUE(4)                                    
    ) TYPE HWTH_STREAM_RECEIVE_STATE_TYPE;                    /* @L1A*/         
                                                                                
                                                                                
 /* ---------------------------------------------------------------- */         
 /* HTTP Response Header Exit                                        */         
 /*   Use this type to declare a callback (exit) routine to process  */         
 /*   the HTTP response headers that are returned by the remote HTTP */         
 /*   server.                                                        */         
 /* ---------------------------------------------------------------- */         
 DECLARE HWTHHDRX ENTRY(                                                        
   TYPE HWTH_STATUS_LINE_TYPE     INONLY     /* HTTP response status */         
  ,TYPE HWTH_RESP_EXIT_FLAGS_TYPE INONLY     /* exitFlags            */         
  ,PTR                            INONLY     /* headerNamePtr        */         
  ,FIXED BINARY(32) UNSIGNED      INONLY     /* headerNameLen        */         
  ,PTR                            INONLY     /* headerValuePtr       */         
  ,FIXED BINARY(32) UNSIGNED      INONLY     /* headerValueLen       */         
  ,PTR                            INONLY     /* headerUserDataPtr    */         
  ,FIXED BINARY(32) UNSIGNED      INONLY)    /* headerUserDataLen    */         
   RETURNS (FIXED BINARY(31))                                                   
   EXTERNAL  OPTIONS(INTER);                                 /* @02C */         
                                                                                
 /* ---------------------------------------------------------------- */         
 /* HTTP Response Body Exit                                          */         
 /*   Use this type to declare a callback (exit) routine to process  */         
 /*   the HTTP response body that is returned by the remote HTTP     */         
 /*   server.                                                        */         
 /* ---------------------------------------------------------------- */         
 DECLARE HWTHBDYX ENTRY(                                                        
   TYPE HWTH_STATUS_LINE_TYPE     INONLY     /* HTTP response status */         
  ,TYPE HWTH_RESP_EXIT_FLAGS_TYPE INONLY     /* exitFlags            */         
  ,PTR                            INONLY     /* respBodyPtr          */         
  ,FIXED BINARY(32) UNSIGNED      INONLY     /* respBodyLen          */         
  ,PTR                            INONLY     /* bodyUserDataPtr      */         
  ,FIXED BINARY(32) UNSIGNED      INONLY)    /* bodyUserDataLen      */         
   RETURNS (FIXED BINARY(31))                                                   
   EXTERNAL OPTIONS(INTER);                                  /* @02C */         
                                                                                
 /* ---------------------------------------------------------------- */         
 /* HTTP Streaming Send Exit                                         */         
 /*   Use this type to declare a callback (exit) routine to send a   */         
 /*   large HTTP request body to the remote HTTP server.         @L1A*/         
 /* ---------------------------------------------------------------- */         
 DECLARE HWTHSNDX ENTRY(                                                        
   TYPE HWTH_STREAM_PROGRESS_TYPE   INONLY         /* sendProgress   */         
  ,TYPE HWTH_STREAM_SEND_STATE_TYPE INOUT          /* sendState      */         
  ,PTR                              OUTONLY        /* sendListAddr   */         
  ,FIXED BINARY(31)                 OUTONLY)       /* sendListDim    */         
  EXTERNAL OPTIONS(INTER);                                   /* @L1A*/          
                                                                                
 /* ---------------------------------------------------------------- */         
 /* HTTP Streaming Receive Exit                                      */         
 /*   Use this type to declare a callback (exit) routine to receive  */         
 /*   a large HTTP response body that is returned by the remote HTTP */         
 /*   server.                                                    @L1A*/         
 /* ---------------------------------------------------------------- */         
 DECLARE HWTHRCVX ENTRY(                                                        
   TYPE HWTH_STREAM_PROGRESS_TYPE      INONLY     /* receiveProgress */         
  ,TYPE HWTH_STREAM_RECEIVE_STATE_TYPE INOUT      /* receiveState    */         
  ,PTR                                 OUTONLY    /* supplyListAddr  */         
  ,FIXED BINARY(31)                    OUTONLY    /* supplyListDim   */         
  ,PTR                                 INONLY     /* returnListAddr  */         
  ,FIXED BINARY(31)                    INONLY)    /* returnListDim   */         
  EXTERNAL OPTIONS(INTER);                                    /* @L1A*/         
                                                                                
                                                                                
 /* ---------------------------------------------------------------- */         
 /* Entry Points                                                     */         
 /* ---------------------------------------------------------------- */         
                                                                                
 /* HWTHCONN - Connect to HTTP server                                           
 */                                                                             
 DECLARE HWTHCONN ENTRY(                                                        
   TYPE HWTH_RETURNCODE_TYPE    OUTONLY      /* returnCode           */         
  ,TYPE HWTH_HANDLE_TYPE         INONLY      /* connectionHandle     */         
  ,TYPE HWTH_DIAGAREA_TYPE      OUTONLY)     /* diagArea             */         
   EXTERNAL OPTIONS(ASM INTER);                                                 
                                                                                
 /* HWTHDISC - Disconnect from HTTP Server                                      
 */                                                                             
 DECLARE HWTHDISC ENTRY(                                                        
   TYPE HWTH_RETURNCODE_TYPE    OUTONLY      /* returnCode           */         
  ,TYPE HWTH_HANDLE_TYPE         INONLY      /* connectionHandle     */         
  ,TYPE HWTH_DIAGAREA_TYPE      OUTONLY)     /* diagArea             */         
   EXTERNAL OPTIONS(ASM INTER);                                                 
                                                                                
 /* HWTHINIT - Initialize HTTP connection / request                             
 */                                                                             
 DECLARE HWTHINIT ENTRY(                                                        
   TYPE HWTH_RETURNCODE_TYPE    OUTONLY      /* returnCode           */         
  ,TYPE HWTH_HANDLETYPE_TYPE     INONLY      /* handleType           */         
  ,TYPE HWTH_HANDLE_TYPE        OUTONLY      /* connOrReqHandle      */         
  ,TYPE HWTH_DIAGAREA_TYPE      OUTONLY)     /* diagArea             */         
   EXTERNAL OPTIONS(ASM INTER);                                                 
                                                                                
 /* HWTHRQST - Send Request to HTTP server                                      
 */                                                                             
 DECLARE HWTHRQST ENTRY(                                                        
   TYPE HWTH_RETURNCODE_TYPE    OUTONLY      /* returnCode           */         
  ,TYPE HWTH_HANDLE_TYPE         INONLY      /* connectionHandle     */         
  ,TYPE HWTH_HANDLE_TYPE         INONLY      /* requestHandle        */         
  ,TYPE HWTH_DIAGAREA_TYPE      OUTONLY)     /* diagArea             */         
   EXTERNAL OPTIONS(ASM INTER);                                                 
                                                                                
 /* HWTHRSET - Reset HTTP connection / request                                  
 */                                                                             
 DECLARE HWTHRSET ENTRY(                                                        
   TYPE HWTH_RETURNCODE_TYPE   OUTONLY       /* returnCode           */         
  ,TYPE HWTH_HANDLE_TYPE        INONLY       /* connOrReqHandle      */         
  ,TYPE HWTH_DIAGAREA_TYPE     OUTONLY)      /* diagArea             */         
   EXTERNAL OPTIONS(ASM INTER);                                                 
                                                                                
 /* HWTHSET - Set HTTP connection / request options                             
 */                                                                             
 DECLARE HWTHSET  ENTRY(                                                        
   TYPE HWTH_RETURNCODE_TYPE   OUTONLY       /* returnCode           */         
  ,TYPE HWTH_HANDLE_TYPE        INONLY       /* connOrReqHandle      */         
  ,TYPE HWTH_SET_OPTION_TYPE    INONLY       /* option               */         
  ,PTR                          INONLY       /* optionValueAddr      */         
  ,FIXED BINARY(32) UNSIGNED    INONLY       /* optionValueLen       */         
  ,TYPE HWTH_DIAGAREA_TYPE     OUTONLY)      /* diagArea             */         
   EXTERNAL OPTIONS(ASM INTER);                                                 
                                                                                
 /* HWTHSLST - Linked List Append Service                                       
 */                                                                             
 DECLARE HWTHSLST ENTRY(                                                        
   TYPE HWTH_RETURNCODE_TYPE   OUTONLY       /* ReturnCode           */         
  ,TYPE HWTH_HANDLE_TYPE        INONLY       /* RequestHandle        */         
  ,TYPE HWTH_SLST_FUNCTION_TYPE INONLY       /* Function             */         
  ,TYPE HWTH_SLIST_TYPE          INOUT       /* SList                */         
  ,PTR                          INONLY       /* StringAddr           */         
  ,FIXED BINARY(32) UNSIGNED    INONLY       /* StringLen            */         
  ,TYPE HWTH_DIAGAREA_TYPE     OUTONLY)      /* DiagArea             */         
   EXTERNAL OPTIONS(ASM INTER);                                                 
                                                                                
 /* HWTHTERM - Terminate HTTP connection / request                              
 */                                                                             
 DECLARE HWTHTERM ENTRY(                                                        
   TYPE HWTH_RETURNCODE_TYPE   OUTONLY       /* ReturnCode           */         
  ,TYPE HWTH_HANDLE_TYPE        INONLY       /* ConnOrReqHandle      */         
  ,TYPE HWTH_FORCEOPTION_TYPE   INONLY       /* ForceOption          */         
  ,TYPE HWTH_DIAGAREA_TYPE     OUTONLY)      /* DiagArea             */         
   EXTERNAL OPTIONS(ASM INTER);                                                 
