*%IEFSSVTI: MACRO KEYS(TYPE,SSVTDATA,TABLEN,FUNCNAME,FUNCADDR,          00000100
*                 NUMFCODES,FCODES,SOURCE,ENTRYDATA,FUNCAMODE,          00000200
*                 MAXFCODES);                                           00000300
*/**** START OF SPECIFICATIONS **************************************** 00000400
*                                                                     * 00000500
*                                                                     * 00000600
*01* MACRO NAME:  IEFSSVTI                              -01/08/20-<1> * 00000700
*                                                                     * 00000800
*                                                                     * 00000900
*01* DESCRIPTIVE NAME:  Subsystem Vector Table Input Macro            * 00001000
*                                                                     * 00001100
*01* PROPRIETARY STATEMENT:                                           * 00001200
*                                                                     * 00001300
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00001400
*     5650-ZOS COPYRIGHT IBM CORP. 1994, 2021                         * 00001500
*                                                                     * 00001600
* STATUS= HBB77D0                                                     * 00001700
*                                                                     * 00001800
*                                                                     * 00001900
*                                                                     * 00002000
*01* FUNCTION:                                                        * 00002100
*                                                                     * 00002200
*      Use the IEFSSVTI macro to define the table of function         * 00002300
*      routines and function codes passed to IEFSSVT as input when    * 00002400
*      creating or modifying a subsystem vector table.                * 00002500
*                                                                     * 00002600
*01* EXTERNAL CLASSIFICATION:  GUPI                                   * 00002700
*                                                                     * 00002800
*01* END OF EXTERNAL CLASSIFICATION:                                  * 00002900
*                                                                     * 00003000
*01* ENVIRONMENT:                                                     * 00003100
*                                                                     * 00003200
*                                                                     * 00003300
*      Minimum authorization: Problem or Supervisor state.            * 00003400
*                                                                     * 00003500
*      Dispatchable unit mode: Task or SRB mode.                      * 00003600
*                                                                     * 00003700
*      Cross Memory Mode: Any PASN, any HASN, any SASN.               * 00003800
*                                                                     * 00003900
*      AMODE:            24- or 31-bit.                               * 00004000
*                                                                     * 00004100
*      ASC mode:         Primary, Secondary, or Access Register.      * 00004200
*                                                                     * 00004300
*      Interrupt status: Enabled or disabled for I/O and external     * 00004400
*                        interrupts.                                  * 00004500
*                                                                     * 00004600
*      Locks:            No locks held.  Since the IEFSSVTI macro     * 00004700
*                        expands in-line, it imposes no restrictions  * 00004800
*                        on locks held.  However, the IEFSSVT macro   * 00004900
*                        for which this macro creates input cannot be * 00005000
*                        invoked while holding locks.                 * 00005100
*                                                                     * 00005200
*      Control parameters: Control parameters must be in the primary  * 00005300
*                        address space.                               * 00005400
*                                                                     * 00005500
*                                                                     * 00005600
*                                                                     * 00005700
*01* PROGRAMMING REQUIREMENTS:                                        * 00005800
*                                                                     * 00005900
*    If subsystem function routines are being identified by address   * 00006000
*    using the FUNCADDR keyword, the invoking program must LOAD the   * 00006100
*    function routines or otherwise obtain their addresses before     * 00006200
*    invoking this macro.                                             * 00006300
*                                                                     * 00006400
*01* RESTRICTIONS:                                                    * 00006500
*                                                                     * 00006600
*    The table created by this macro cannot be used to invoke         * 00006700
*    IEFJSVEC to create subsystem vector tables.  It can only be used * 00006800
*    in conjunction with IEFSSVT.                                     * 00006900
*                                                                     * 00007000
*    The register form can only be used to specify macro keyword      * 00007100
*    variables in TYPE=SET invocations.                               * 00007200
*                                                                     * 00007300
*01* INPUT REGISTER INFORMATION:                                      * 00007400
*                                                                     * 00007500
*    There are no input register requirements for issuing the         * 00007600
*    IEFSSVTI macro.                                                  * 00007700
*                                                                     * 00007800
*01* OUTPUT REGISTER INFORMATION:                                     * 00007900
*                                                                     * 00008000
*    When control returns to the caller, the GPRs contain:            * 00008100
*                                                                     * 00008200
*                                                                     * 00008300
*    REGISTER  CONTENTS                                               * 00008400
*                                                                     * 00008500
*    0-1       Used as work registers by the system                   * 00008600
*                                                                     * 00008700
*    2-13      Unchanged                                              * 00008800
*                                                                     * 00008900
*    14-15     Used as work registers by the system                   * 00009000
*                                                                     * 00009100
*                                                                     * 00009200
*                                                                     * 00009300
*    When control returns to the caller, the ARs contain:             * 00009400
*                                                                     * 00009500
*                                                                     * 00009600
*    REGISTER  CONTENTS                                               * 00009700
*                                                                     * 00009800
*    0-15      Unchanged                                              * 00009900
*                                                                     * 00010000
*                                                                     * 00010100
*                                                                     * 00010200
*01* PERFORMANCE IMPLICATIONS:                                        * 00010300
*                                                                     * 00010400
*    None.                                                            * 00010500
*                                                                     * 00010600
*01* SYNTAX:                                                          * 00010700
*                                                                     * 00010800
*Ýxlabel¨  IEFSSVTI  Ð  TYPE=LIST                                     * 00010900
*                    Ô ,TYPE=INITIAL                                  * 00011000
*                    !     ,SSVTDATA=xssvtdata                        * 00011100
*                    !     ,TABLEN=xtablen                            * 00011200
*                    Ô ,TYPE=ENTRY                                    * 00011300
*                    !   ÐÝ,FUNCNAME=»xfuncnameº                      * 00011400
*                    !   ¿ ,FUNCADDR=»xfuncaddrº¨                     * 00011500
*                    !     ,NUMFCODES=xnumfcodes                      * 00011600
*                    !    Ý,FCODES=»(xfcodesÝ,xfcodes...¨)!0º¨        * 00011700
*                    Ô ,TYPE=FINAL                                    * 00011800
*                    Ô ,TYPE=SET                                      * 00011900
*                    !     ,SSVTDATA=xssvtdata                        * 00012000
*                    !     ,SOURCE=xsource                            * 00012100
*                    !     ,ENTRYDATA=xentrydata                      * 00012200
*                    !   ÐÝ,FUNCNAME=»xfuncnameº                      * 00012300
*                    !   ¿ ,FUNCADDR=»xfuncaddrº                      * 00012400
*                    !        Ý,FUNCAMODE=»HOB!31!24º¨¨               * 00012500
*                    !    Ý,FCODES=»(xfcodesÝ,xfcodes...¨)!0º¨        * 00012600
*                    Ô ,TYPE=RESERVE                                  * 00012700
*                    !     ,SSVTDATA=xssvtdata                        * 00012800
*                    !   Ð ,TABLEN=xtablen                            * 00012900
*                    !   ¿ ,MAXFCODES=xmaxfcodes                      * 00013000
*                    ¿ ,TYPE=COPY                                     * 00013100
*                          ,SSVTDATA=xssvtdata                        * 00013200
*                          ,SOURCE=xsource                            * 00013300
*                                                                     * 00013400
*                                                                     * 00013500
*      Where:                                                         * 00013600
*                                                                     * 00013700
*                                                                     * 00013800
*      Ýxlabel¨                                                       * 00013900
*          is an optional symbol, starting in column 1, that is the   * 00014000
*          name on the IEFSSVTI macro invocation.  The name must      * 00014100
*          conform to the rules for an ordinary assembler language    * 00014200
*          symbol.                                                    * 00014300
*          DEFAULT: No name.                                          * 00014400
*                                                                     * 00014500
*                                                                     * 00014600
*                                                                     * 00014700
*                                                                     * 00014800
*       TYPE(»LIST!INITIAL!ENTRY!FINAL!SET!RESERVE!COPYº)             * 00014900
*          is a required keyword input that specifies the function of * 00015000
*          the macro invocation:                                      * 00015100
*                                                                     * 00015200
*                                                                     * 00015300
*          o   Begin a static table definition                        * 00015400
*                                                                     * 00015500
*          o   Define a function routine entry in a static table      * 00015600
*                                                                     * 00015700
*          o   End a static table definition                          * 00015800
*                                                                     * 00015900
*          o   Modify an entry in a table                             * 00016000
*                                                                     * 00016100
*          o   Reserve dynamic storage for a table                    * 00016200
*                                                                     * 00016300
*          o   Copy a table.                                          * 00016400
*                                                                     * 00016500
*                                                                     * 00016600
*                                                                     * 00016700
*                                                                     * 00016800
*           TYPE(LIST)                                                * 00016900
*              Produces a DSECT mapping the format of the function    * 00017000
*              routine input table.  A TYPE=LIST invocation is        * 00017100
*              required if TYPE=SET or TYPE=COPY is used in the       * 00017200
*              calling program.                                       * 00017300
*                                                                     * 00017400
*           TYPE(INITIAL)                                             * 00017500
*              Begins the definition of a static function routine     * 00017600
*              input table.  A set of IEFSSVTI invocations beginning  * 00017700
*              with TYPE=INITIAL, ending with TYPE=FINAL, and         * 00017800
*              including at least one TYPE=ENTRY defines a table in   * 00017900
*              static storage.  The combination of TYPE=INITIAL,      * 00018000
*              TYPE=ENTRY, and TYPE=FINAL is analogous to the list    * 00018100
*              form of other executable macros.                       * 00018200
*                                                                     * 00018300
*                                                                     * 00018400
*              SSVTDATA(xssvtdata)                                    * 00018500
*                  is a required input.  It is the name by which the  * 00018600
*                  input table being created will be referenced in    * 00018700
*                  the in-line code generated by IEFSSVTI.  This is   * 00018800
*                  the name that should be used on the SSVTDATA       * 00018900
*                  keyword of the IEFSSVT macro.                      * 00019000
*                                                                     * 00019100
*                                                                     * 00019200
*                                                                     * 00019300
*                                                                     * 00019400
*              TABLEN(xtablen)                                        * 00019500
*                  is a required input.  It is the name of a constant * 00019600
*                  to be generated by IEFSSVTI which will define the  * 00019700
*                  length of the storage required by the function     * 00019800
*                  routine input table.  The in-line code generated   * 00019900
*                  by IEFSSVTI will define an assembler equate or     * 00020000
*                  PL/X constant with the name supplied on the TABLEN * 00020100
*                  keyword and a value equal to the length of the     * 00020200
*                  table (in bytes).  This constant can be used with  * 00020300
*                  a TYPE=RESERVE request to reserve sufficient       * 00020400
*                  dynamic storage to copy the table for              * 00020500
*                  execution-time (TYPE=SET) modification.            * 00020600
*                                                                     * 00020700
*                                                                     * 00020800
*                                                                     * 00020900
*           TYPE(ENTRY)                                               * 00021000
*              Define a function routine entry in a static input      * 00021100
*              table.  A TYPE=INITIAL request must be specified       * 00021200
*              before any invocation specifying TYPE=ENTRY.           * 00021300
*                                                                     * 00021400
*                                                                     * 00021500
*              The following is a set of mutually exclusive keys.     * 00021600
*              This set is optional; only one key may be specified.   * 00021700
*                                                                     * 00021800
*                                                                     * 00021900
*              ÝFUNCNAME(»xfuncnameº)                                 * 00022000
*                  belongs to a set of mutually exclusive keys. It is * 00022100
*                  the name (RS-type) of an optional 8 character      * 00022200
*                  input that defines the name of the function        * 00022300
*                  routine.  The function routine name must:          * 00022400
*                                                                     * 00022500
*                                                                     * 00022600
*                  o   Consist of no more than 8 characters,          * 00022700
*                                                                     * 00022800
*                  o   Be composed of characters from the alphabetic, * 00022900
*                      national, or numeric character sets,           * 00023000
*                                                                     * 00023100
*                  o   Begin with a character from either the         * 00023200
*                      alphabetic or national character sets,         * 00023300
*                                                                     * 00023400
*                  o   Be left justified and, if necessary, be padded * 00023500
*                      to the right with blanks.                      * 00023600
*                                                                     * 00023700
*                                                                     * 00023800
*                                                                     * 00023900
*                  If FUNCNAME is not specified on a TYPE=ENTRY       * 00024000
*                  invocation, the function routine information must  * 00024100
*                  be provided on a subsequent TYPE=SET invocation.   * 00024200
*                                                                     * 00024300
*              FUNCADDR(»xfuncaddrº)¨                                 * 00024400
*                  belongs to a set of mutually exclusive keys. It is * 00024500
*                  the name (RS-type) of an optional pointer input    * 00024600
*                  that contains the address of the function routine. * 00024700
*                  When specified on a TYPE=ENTRY invocation, the     * 00024800
*                  FUNCADDR key reserves space in the function        * 00024900
*                  routine input table for the function routine       * 00025000
*                  address.  The actual address must be provided in a * 00025100
*                  subsequent TYPE=SET invocation.                    * 00025200
*                                                                     * 00025300
*                                                                     * 00025400
*                                                                     * 00025500
*              End of a set of mutually exclusive optional keys.      * 00025600
*              DEFAULT: FUNCNAME                                      * 00025700
*                                                                     * 00025800
*                                                                     * 00025900
*                                                                     * 00026000
*              NUMFCODES(xnumfcodes)                                  * 00026100
*                  is a required halfword input decimal value in the  * 00026200
*                  "1-255" range that defines the number of function  * 00026300
*                  codes supported by the associated function         * 00026400
*                  routine.                                           * 00026500
*                                                                     * 00026600
*                  Use the NUMFCODES keyword to reserve storage for   * 00026700
*                  function code information in a static table entry. * 00026800
*                  The number specified must be greater than or equal * 00026900
*                  to the number of function codes specified with the * 00027000
*                  FCODES keyword.                                    * 00027100
*                                                                     * 00027200
*                  If the actual number of function codes associated  * 00027300
*                  with the routine is not known at compile time,     * 00027400
*                  specify the maximum number of function codes       * 00027500
*                  expected, to reserve sufficient storage.  In this  * 00027600
*                  case, the actual function code information must be * 00027700
*                  provided by a subsequent TYPE=SET invocation       * 00027800
*                  specifying the FCODES key.                         * 00027900
*                                                                     * 00028000
*                                                                     * 00028100
*                                                                     * 00028200
*                                                                     * 00028300
*              ÝFCODES(»xfcodesÝ,xfcodes...¨!0º)¨                     * 00028400
*                                                                     * 00028500
*                xfcodes                                              * 00028600
*                  is a group of name(s) (RS-type) of an optional     * 00028700
*                  byte input(s) that defines the function code(s)    * 00028800
*                  supported by the associated function routine.      * 00028900
*                  Function code values must be between 1 and 255,    * 00029000
*                  inclusive.  In an assembler invocation, the        * 00029100
*                  function codes must be numeric values or assembler * 00029200
*                  equates.                                           * 00029300
*                                                                     * 00029400
*                  The same function code value cannot appear more    * 00029500
*                  than once within a set of IEFSSVTI invocations     * 00029600
*                  representing an input table.                       * 00029700
*                                                                     * 00029800
*                  If the FCODES key is not specified on a TYPE=ENTRY * 00029900
*                  invocation, the supported function codes must be   * 00030000
*                  specified on a subsequent TYPE=SET invocation.     * 00030100
*                  DEFAULT: 0                                         * 00030200
*                                                                     * 00030300
*                                                                     * 00030400
*                                                                     * 00030500
*           TYPE(FINAL)                                               * 00030600
*              Ends the definition of a static function routine input * 00030700
*              table.                                                 * 00030800
*                                                                     * 00030900
*           TYPE(SET)                                                 * 00031000
*              Modify a function routine entry in an existing input   * 00031100
*              table.  A TYPE=SET invocation is analogous to the      * 00031200
*              execute form of other executable macros.  It is        * 00031300
*              intended to be used to modify a table in dynamic       * 00031400
*              storage, but can be used to modify a static table in   * 00031500
*              non-reentrant programs.                                * 00031600
*                                                                     * 00031700
*              The SET operation destroys the contents of general     * 00031800
*              registers 0, 1, 14, and 15.                            * 00031900
*                                                                     * 00032000
*                                                                     * 00032100
*              SSVTDATA(xssvtdata)                                    * 00032200
*                  is a required input.  It is the name of the        * 00032300
*                  function routine input table to be modified.  The  * 00032400
*                  name must match the name of a table specified by   * 00032500
*                  the SSVTDATA key on an IEFSSVTI TYPE=INITIAL or    * 00032600
*                  TYPE=RESERVE macro invocation.                     * 00032700
*                                                                     * 00032800
*                                                                     * 00032900
*                                                                     * 00033000
*                                                                     * 00033100
*              SOURCE(xsource)                                        * 00033200
*                  is a required input.  It is the name of the        * 00033300
*                  original function routine input table from which   * 00033400
*                  the table to be modified (specified by the         * 00033500
*                  SSVTDATA key) was copied.  The name must match the * 00033600
*                  name of a table specified by the SSVTDATA key on   * 00033700
*                  an IEFSSVTI TYPE=INITIAL or TYPE=RESERVE macro     * 00033800
*                  invocation.  This information is used with the     * 00033900
*                  ENTRYDATA key to calculate the offset of the table * 00034000
*                  entry to be modified.                              * 00034100
*                                                                     * 00034200
*                  SOURCE and SSVTDATA can refer to the same table.   * 00034300
*                  This might be appropriate for modification of a    * 00034400
*                  static table created by a TYPE=INITIAL /           * 00034500
*                  TYPE=FINAL set of invocations, but can only be     * 00034600
*                  done in non-reentrant modules.                     * 00034700
*                                                                     * 00034800
*                                                                     * 00034900
*                                                                     * 00035000
*                                                                     * 00035100
*              ENTRYDATA(xentrydata)                                  * 00035200
*                  is the name (RS-type) (or address in register      * 00035300
*                  (2)-(12) ASM only) of a required fullword input    * 00035400
*                  specifying the index of the table entry to be      * 00035500
*                  modified.  It may be a variable, constant (not an  * 00035600
*                  assembler equate), or decimal value.               * 00035700
*                                                                     * 00035800
*                  If the value of the ENTRYDATA keyword is greater   * 00035900
*                  than the number of function routines described by  * 00036000
*                  the source table, the target table is unchanged.   * 00036100
*                  Since this is an execution time determination, the * 00036200
*                  macro cannot provide a warning in this case.       * 00036300
*                                                                     * 00036400
*                                                                     * 00036500
*                                                                     * 00036600
*                                                                     * 00036700
*              The following is a set of mutually exclusive keys.     * 00036800
*              This set is optional; only one key may be specified.   * 00036900
*                                                                     * 00037000
*                                                                     * 00037100
*                  Either FUNCNAME or FUNCADDR must be specified if   * 00037200
*                  the function routine name was not provided on the  * 00037300
*                  TYPE=ENTRY invocation corresponding to the entry   * 00037400
*                  being modified.  If neither FUNCNAME or FUNCADDR   * 00037500
*                  is specified, the function routine information     * 00037600
*                  (name or address) in the entry being modified is   * 00037700
*                  not changed.                                       * 00037800
*                                                                     * 00037900
*              ÝFUNCNAME(»xfuncnameº)                                 * 00038000
*                  belongs to a set of mutually exclusive keys. It is * 00038100
*                  the name (RS-type) of an optional 8 character      * 00038200
*                  input that defines the name of the function        * 00038300
*                  routine.  The function routine name must:          * 00038400
*                                                                     * 00038500
*                                                                     * 00038600
*                  o   Consist of no more than 8 characters,          * 00038700
*                                                                     * 00038800
*                  o   Be composed of characters from the alphabetic, * 00038900
*                      national, or numeric character sets,           * 00039000
*                                                                     * 00039100
*                  o   Begin with a character from either the         * 00039200
*                      alphabetic or national character sets,         * 00039300
*                                                                     * 00039400
*                  o   Be left justified and, if necessary, be padded * 00039500
*                      to the right with blanks.                      * 00039600
*                                                                     * 00039700
*                                                                     * 00039800
*                                                                     * 00039900
*              FUNCADDR(»xfuncaddrº)                                  * 00040000
*                  belongs to a set of mutually exclusive keys. It is * 00040100
*                  the name (RS-type) of an optional pointer input    * 00040200
*                  that contains the address of the function routine. * 00040300
*                  The high-order bit of the function routine address * 00040400
*                  specified with the FUNCADDR key may be used to     * 00040500
*                  specify the function routine AMODE.  Setting the   * 00040600
*                  bit indicates that the routine is to receive       * 00040700
*                  control in AMODE 31; clearing it indicates that    * 00040800
*                  the routine is to receive control in AMODE 24.     * 00040900
*                  (Since the LOAD service uses this convention,      * 00041000
*                  addresses as returned by LOAD can be used as the   * 00041100
*                  argument of the FUNCADDR key.)  The FUNCAMODE key  * 00041200
*                  may also be used to indicate the AMODE of the      * 00041300
*                  function routine.                                  * 00041400
*                                                                     * 00041500
*                                                                     * 00041600
*                  ÝFUNCAMODE(»HOB!31!24º)¨¨                          * 00041700
*                      is an optional keyword input that specifies    * 00041800
*                      the AMODE of a function routine identified by  * 00041900
*                      address.  The SSI uses this information to     * 00042000
*                      determine the AMODE in which the function      * 00042100
*                      routine should receive control.                * 00042200
*                                                                     * 00042300
*                      If the FUNCAMODE key is not specified, the     * 00042400
*                      high-order bit of the address specified with   * 00042500
*                      the FUNCADDR key indicates the AMODE of the    * 00042600
*                      function routine.  If the high-order bit is    * 00042700
*                      on, the function routine will be treated as    * 00042800
*                      AMODE 31.                                      * 00042900
*                      DEFAULT: HOB                                   * 00043000
*                                                                     * 00043100
*                                                                     * 00043200
*                      FUNCAMODE(HOB)                                 * 00043300
*                          The high-order bit of the function routine * 00043400
*                          address indicates the AMODE in which the   * 00043500
*                          function routine is to receive control.    * 00043600
*                                                                     * 00043700
*                      FUNCAMODE(31)                                  * 00043800
*                          The function routine is to receive control * 00043900
*                          in AMODE 31.                               * 00044000
*                                                                     * 00044100
*                      FUNCAMODE(24)                                  * 00044200
*                          The function routine is to receive control * 00044300
*                          in AMODE 24.                               * 00044400
*                                                                     * 00044500
*                                                                     * 00044600
*                                                                     * 00044700
*                                                                     * 00044800
*                                                                     * 00044900
*                                                                     * 00045000
*                                                                     * 00045100
*              End of a set of mutually exclusive optional keys.      * 00045200
*              DEFAULT: FUNCNAME                                      * 00045300
*                                                                     * 00045400
*                                                                     * 00045500
*                                                                     * 00045600
*              ÝFCODES(»xfcodesÝ,xfcodes...¨!0º)¨                     * 00045700
*                                                                     * 00045800
*                xfcodes                                              * 00045900
*                  is a group of name(s) (RS-type) of an optional     * 00046000
*                  byte input(s) that defines the function code(s)    * 00046100
*                  supported by the associated function routine.      * 00046200
*                  Function code values must be between 1 and 255,    * 00046300
*                  inclusive.  In an assembler invocation, the        * 00046400
*                  function codes must be numeric values or assembler * 00046500
*                  equates.  The same function code value cannot      * 00046600
*                  appear more than once within a set of IEFSSVTI     * 00046700
*                  invocations representing an input table.           * 00046800
*                                                                     * 00046900
*                  The FCODES key must be specified if the function   * 00047000
*                  code information was not provided on the           * 00047100
*                  TYPE=ENTRY invocation corresponding to the entry   * 00047200
*                  being modified.                                    * 00047300
*                                                                     * 00047400
*                  Function codes specified with TYPE=SET replace any * 00047500
*                  function codes specified on the original           * 00047600
*                  TYPE=ENTRY invocation.  If the FCODES keyword is   * 00047700
*                  not specified, the function code information in    * 00047800
*                  the entry being modified is unchanged.             * 00047900
*                                                                     * 00048000
*                  If the number of function codes specified with the * 00048100
*                  FCODES keyword is greater than the maximum number  * 00048200
*                  of function codes for which room was reserved in   * 00048300
*                  the table entry being modified, the function code  * 00048400
*                  information in the target entry is unchanged.      * 00048500
*                  Since this is an execution time determination, the * 00048600
*                  macro cannot provide a warning in this case.       * 00048700
*                  DEFAULT: 0                                         * 00048800
*                                                                     * 00048900
*                                                                     * 00049000
*                                                                     * 00049100
*           TYPE(RESERVE)                                             * 00049200
*              Reserve storage for a function routine input table.    * 00049300
*              Use this key to define the amount of dynamic storage   * 00049400
*              required to contain a copy of a static input table.    * 00049500
*              It creates a DS (assembler) or DCL (PL/X) instruction  * 00049600
*              that reserves the appropriate amount of dynamic        * 00049700
*              storage.  When coding in assembler, place the          * 00049800
*              TYPE=RESERVE macro invocation in a DSECT representing  * 00049900
*              the program's working storage.                         * 00050000
*                                                                     * 00050100
*                                                                     * 00050200
*              SSVTDATA(xssvtdata)                                    * 00050300
*                  is a required input.  It is the name of the        * 00050400
*                  function routine input table for which storage is  * 00050500
*                  to be reserved.                                    * 00050600
*                                                                     * 00050700
*                                                                     * 00050800
*                                                                     * 00050900
*                                                                     * 00051000
*              The following is a set of mutually exclusive keys.     * 00051100
*              This set is required; only one key must be specified.  * 00051200
*                                                                     * 00051300
*                                                                     * 00051400
*              TABLEN(xtablen)                                        * 00051500
*                  belongs to a set of mutually exclusive keys. It is * 00051600
*                  an input.  It is the name of a constant (assembler * 00051700
*                  equate) containing the length of the storage       * 00051800
*                  required by the function routine input table.      * 00051900
*                  This should be the name of a constant specified by * 00052000
*                  the TABLEN keyword on a previous TYPE=INITIAL      * 00052100
*                  invocation.  Use this keyword when reserving       * 00052200
*                  storage for a dynamic function routine input table * 00052300
*                  that will be copied from another table.            * 00052400
*                                                                     * 00052500
*              MAXFCODES(xmaxfcodes)                                  * 00052600
*                  belongs to a set of mutually exclusive keys. It is * 00052700
*                  an input.  It is the name of a PL/X constant,      * 00052800
*                  assembler equate, or decimal number specifying the * 00052900
*                  maximum number of function codes that will be      * 00053000
*                  supported by the entire function routine input     * 00053100
*                  table.  Use this key to reserve space for a        * 00053200
*                  dynamic input table when the specific function     * 00053300
*                  routines and function codes that will be supported * 00053400
*                  are not known at compile time.                     * 00053500
*                                                                     * 00053600
*                                                                     * 00053700
*                                                                     * 00053800
*              End of a set of mutually exclusive required keys.      * 00053900
*                                                                     * 00054000
*                                                                     * 00054100
*           TYPE(COPY)                                                * 00054200
*              Copy a function routine input table.  Use this key to  * 00054300
*              copy a static table to dynamic storage reserved with a * 00054400
*              TYPE=RESERVE invocation.                               * 00054500
*                                                                     * 00054600
*              The COPY operation destroys the contents of general    * 00054700
*              registers 0, 1, 14, and 15.                            * 00054800
*                                                                     * 00054900
*                                                                     * 00055000
*              SSVTDATA(xssvtdata)                                    * 00055100
*                  is a required input.  It is the name of the target * 00055200
*                  function routine input table (the destination for  * 00055300
*                  the copy).  The name must match the name of a      * 00055400
*                  table specified by the SSVTDATA key on a           * 00055500
*                  TYPE=RESERVE macro invocation.                     * 00055600
*                                                                     * 00055700
*              SOURCE(xsource)                                        * 00055800
*                  is a required input.  It is the name of the table  * 00055900
*                  to be copied.  The name must match the name of a   * 00056000
*                  table specified by the SSVTDATA key on an IEFSSVTI * 00056100
*                  TYPE=INITIAL or TYPE=RESERVE macro invocation.     * 00056200
*                                                                     * 00056300
*                                                                     * 00056400
*                                                                     * 00056500
*                                                                     * 00056600
*                                                                     * 00056700
*                                                                     * 00056800
*                                                                     * 00056900
*01* ABEND CODES:  None.                                              * 00057000
*                                                                     * 00057100
*01* RETURN CODES:  None.                                             * 00057200
*                                                                     * 00057300
*01* REASON CODES:  None.                                             * 00057400
*                                                                     * 00057500
*01* MODULE TYPE:  ASSEM-PL/X MACRO                                   * 00057600
*                                                                     * 00057700
*02*   PROCESSOR:  ASSEM-PL/X                                         * 00057800
*                                                                     * 00057900
*01* COMPONENT:  SC1B6                                                * 00058000
*                                                                     * 00058100
*01* DISTRIBUTION LIBRARY: AMACLIB                                    * 00058200
*                                                                     * 00058300
*01* MACRO USAGE NOTES:                                               * 00058400
*                                                                     * 00058500
*                                                                     * 00058600
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00058700
*        global macro variable.  Any value other than 'NO' will       * 00058800
*        result in the macro expansion being printed.  The default is * 00058900
*        'YES'.  The following examples illustrate how the ZPRINT     * 00059000
*        variable should be set.                                      * 00059100
*                                                                     * 00059200
*                    GBLC &ZPRINT                                     * 00059300
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00059400
*                                                                     * 00059500
*    2.  A  set  of  IEFSSVTI invocations beginning with TYPE=INITIAL * 00059600
*        and  ending  with  TYPE=FINAL  may  contain some invocations * 00059700
*        specifying FUNCNAME and some specifying FUNCADDR.  The input * 00059800
*        table  does  not  have to identify all function routines the * 00059900
*        same way.                                                    * 00060000
*                                                                     * 00060100
*    3.  Usage scenarios                                              * 00060200
*                                                                     * 00060300
*                                                                     * 00060400
*        a.  All  information  known at compile time: create a static * 00060500
*            table using TYPE=INITIAL, TYPE=ENTRY, and TYPE=FINAL.    * 00060600
*                                                                     * 00060700
*        b.  Some information not known at compile time               * 00060800
*                                                                     * 00060900
*                                                                     * 00061000
*            o   Reentrant  programs:  create a static table, reserve * 00061100
*                storage  for  a dynamic table of the same size using * 00061200
*                TYPE=RESERVE,  copy  the static table to the dynamic * 00061300
*                table  using TYPE=COPY, and modify the dynamic table * 00061400
*                using TYPE=SET.                                      * 00061500
*                                                                     * 00061600
*            o   Non-reentrant  programs:  create  a static table and * 00061700
*                modify  it using TYPE=SET, or copy a static table to * 00061800
*                dynamic  storage  and modify the dynamic table using * 00061900
*                TYPE=SET.                                            * 00062000
*                                                                     * 00062100
*                                                                     * 00062200
*                                                                     * 00062300
*                                                                     * 00062400
*                                                                     * 00062500
*                                                                     * 00062600
*                                                                     * 00062700
*01* CHANGE ACTIVITY:                                                 * 00062800
*                                                                     * 00062900
*   Flag LineItem  FMID    Date   ID    Comment                       * 00063000
*                                                                     * 00063100
*    $L0=SSIDP    HBB5520 940210 PDBN:  Dynamic SSI                   * 00063200
*    $P1=PN70253  HBB5520 940310 PDBN:  Dynamic SSI                   * 00063300
*    $P2=PN70262  HBB5520 940310 PDBN:  Dynamic SSI                   * 00063400
*    $P3=PN70227  HBB5520 940310 PDBN:  Dynamic SSI                   * 00063500
*    $P4=PN70316  HBB5520 940414 PDBN:  Dynamic SSI                   * 00063600
*    $P5=PN70226  HBB5520 940414 PDBN:  Dynamic SSI                   * 00063700
*    $P6=W344138  HBB77D0 200102 PDOO:  DSECT printing suppressed     * 00063800
*                                         (SUG APAR OA58539)          * 00063900
****** END OF SPECIFICATIONS *****************************************/ 00064000
*/********************************************************************* 00064100
         MACRO                                                          00064200
&XLABEL  IEFSSVTI &TYPE=,&SSVTDATA=,&TABLEN=,&FUNCNAME=,&FUNCADDR=,    *00064300
               &NUMFCODES=,&FCODES=,&SOURCE=,&ENTRYDATA=,&FUNCAMODE=,  *00064400
               &MAXFCODES=                                              00064500
.*                                                                      00064600
*               MACDATE -01/08/20-<1>                                   00064700
.*                                                                      00064800
.*******************************************************************    00064900
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00065000
.*******************************************************************    00065100
               GBLC  &ZPRINT     YES=PRINT NO=NO PRINT                  00065200
               GBLC  &ZTEST      YES=TEST NO=NO TEST                    00065300
               GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX            00065400
.*                                                                      00065500
               GBLC  &ZIEFSSVTI  YES=MACRO USED AT LEAST ONCE           00065600
.*******************************************************************    00065700
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00065800
.*******************************************************************    00065900
               LCLC  &ZMS        ERROR MESSAGE WORK AREA                00066000
               LCLC  &ZCNDX      SYSNDX CHARACTERS                      00066100
               LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED             00066200
               LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR            00066300
               LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE            00066400
               LCLA  &ZAWRK      USED AS A WORK AREA                    00066500
               LCLA  &ZASIZ      USED FOR SIZE OF VALUE                 00066600
               LCLA  &ZN         NUMERIC WORK VARIABLE                  00066700
               LCLC  &ZC         CHARACTER WORK VARIABLE                00066800
               LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE            00066900
               LCLA  &ZTLA       VALUE TOO LONG VARIABLE                00067000
               LCLC  &ZMAC_G     "G" or null                            00067100
&ZMAC_G        SETC  ''                                                 00067200
               LCLC  &ZMAC_LR                                           00067300
&ZMAC_LR       SETC  'LR'                                               00067400
               LCLC  &ZMAC_L                                            00067500
&ZMAC_L        SETC  'L'                                                00067600
               LCLC  &ZMAC_ST                                           00067700
&ZMAC_ST       SETC  'ST'                                               00067800
               LCLC  &ZMAC_LLGT                                         00067900
&ZMAC_LLGT     SETC  'L'                                                00068000
               LCLC  &ZMAC_LGR                                          00068100
&ZMAC_LGR      SETC  'LR'                                               00068200
               LCLC  &ZMAC_LG                                           00068300
&ZMAC_LG       SETC  'L'                                                00068400
               LCLC  &ZMAC_STG                                          00068500
&ZMAC_STG      SETC  'ST'                                               00068600
               LCLA  &ZMACRET    MACRO RETURN CODE                      00068700
&ZMACRET       SETA  0           ASSUME NO ERRORS                       00068800
.*                                                                      00068900
               LCLC  &ZCSYSLIST(255)            NONXKEY, POS ARRAY      00069000
               LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()             00069100
               LCLA  &ZPLLEN     PARAMETER LIST LENGTH                  00069200
               LCLC  &ZENDBASEPL                End of base PL          00069300
.*******************************************************************    00069400
.***AB.04  MACRO VARIABLES FOR RANGES AND SETS OF ARGUMENTS             00069500
.*******************************************************************    00069600
               LCLA  &ZI         INDEX FOR ARRAY                        00069700
               LCLA  &ZJ         INDEX FOR PARMS                        00069800
               LCLA  &ZK         INDEX FOR PARSE                        00069900
               LCLA  &ZLO        LOW RANGE VALUE                        00070000
               LCLA  &ZHI        HIGH RANGE VALUE                       00070100
               LCLC  &ZW         WORK AREA FOR PARM                     00070200
.*******************************************************************    00070300
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00070400
.*******************************************************************    00070500
               LCLC  &XTYPE      ++ VALUE                               00070600
               LCLC  &XSSVTDATA  ++ NAME                                00070700
               LCLC  &XTABLEN    ++ NAME                                00070800
               LCLC  &XFUNCRTN   ++ NAME                                00070900
               LCLC  &XFUNCNAME  ++ NAME                                00071000
               LCLC  &XFUNCADDR  ++ NAME                                00071100
               LCLC  &XNUMFCODES                ++ VALUE                00071200
               LCLC  &XFCODES(257)              ++ NAME                 00071300
               LCLC  &XSOURCE    ++ NAME                                00071400
               LCLC  &XENTRYDATA                ++ NAME                 00071500
               LCLC  &XFUNCAMODE                ++ VALUE                00071600
               LCLC  &XRESERVE_LEN              ++ NAME                 00071700
               LCLC  &XMAXFCODES                ++ NAME                 00071800
.*******************************************************************    00071900
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00072000
.*******************************************************************    00072100
               LCLC  &ZXTYPE     ++ INPUT VALUE                         00072200
               LCLC  &ZXSSVTDATA                ++ INPUT NAME           00072300
               LCLC  &ZXTABLEN   ++ INPUT NAME                          00072400
               LCLC  &ZXFUNCRTN  ++ INPUT NAME                          00072500
               LCLC  &ZXFUNCNAME                ++ INPUT NAME           00072600
               LCLC  &ZXFUNCADDR                ++ INPUT NAME           00072700
               LCLC  &ZXNUMFCODES               ++ INPUT VALUE          00072800
               LCLC  &ZXFCODES   ++ INPUT NAME                          00072900
               LCLC  &ZXSOURCE   ++ INPUT NAME                          00073000
               LCLC  &ZXENTRYDATA               ++ INPUT NAME           00073100
               LCLC  &ZXFUNCAMODE               ++ INPUT VALUE          00073200
               LCLC  &ZXRESERVE_LEN             ++ INPUT NAME           00073300
               LCLC  &ZXMAXFCODES               ++ INPUT NAME           00073400
.********************************************************************   00073500
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00073600
.********************************************************************   00073700
               ACTR  10000                                              00073800
.*------------------------------------------------------------------    00073900
.***AG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00074000
&XTYPE         SETC  ''          INITIALIZE XVARIABLE                   00074100
.*-------------------------------------------------------------------   00074200
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00074300
.ZG3           ANOP  ,                                                  00074400
               AIF   (K'&TYPE(1) LE 0).ZG3A                             00074500
&ZTLC          SETC 'LIST'                                              00074600
               AIF   ('&TYPE(1)' NE '&ZTLC').ZG4                        00074700
&XTYPE         SETC  'LIST'      SET KEYWORD                            00074800
               AIF   (N'&TYPE LE 1).ZG3A        CK NUM                  00074900
&ZMS           SETC  '"TYPE='                                           00075000
&ZMS           SETC  '&ZMS.&TYPE"'                                      00075100
&ZMS           SETC  '&ZMS "TYPE"'                                      00075200
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00075300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00075400
.ZG3A          ANOP  ,                                                  00075500
.*------------------------------------------------------------------    00075600
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00075700
&ZCVAL         SETC ''           CLEAR ERROR KEY ACCUMULATOR            00075800
.ZG3A0         AIF   (K'&SSVTDATA LE 0).ZG3A1   OK                      00075900
&ZCVAL         SETC '&ZCVAL SSVTDATA'           INCORRECT KEY USED      00076000
.ZG3A1         AIF   (K'&TABLEN LE 0).ZG3A2     OK                      00076100
&ZCVAL         SETC '&ZCVAL TABLEN'             INCORRECT KEY USED      00076200
.ZG3A2         AIF   (K'&FUNCNAME LE 0).ZG3A3   OK                      00076300
&ZCVAL         SETC '&ZCVAL FUNCNAME'           INCORRECT KEY USED      00076400
.ZG3A3         AIF   (K'&FUNCADDR LE 0).ZG3A4   OK                      00076500
&ZCVAL         SETC '&ZCVAL FUNCADDR'           INCORRECT KEY USED      00076600
.ZG3A4         AIF   (K'&NUMFCODES LE 0).ZG3A5  OK                      00076700
&ZCVAL         SETC '&ZCVAL NUMFCODES'          INCORRECT KEY USED      00076800
.ZG3A5         AIF   (K'&FCODES LE 0).ZG3A6     OK                      00076900
&ZCVAL         SETC '&ZCVAL FCODES'             INCORRECT KEY USED      00077000
.ZG3A6         AIF   (K'&SOURCE LE 0).ZG3A7     OK                      00077100
&ZCVAL         SETC '&ZCVAL SOURCE'             INCORRECT KEY USED      00077200
.ZG3A7         AIF   (K'&ENTRYDATA LE 0).ZG3A8  OK                      00077300
&ZCVAL         SETC '&ZCVAL ENTRYDATA'          INCORRECT KEY USED      00077400
.ZG3A8         AIF   (K'&FUNCAMODE LE 0).ZG3A9  OK                      00077500
&ZCVAL         SETC '&ZCVAL FUNCAMODE'          INCORRECT KEY USED      00077600
.ZG3A9         AIF   (K'&MAXFCODES LE 0).ZG3A10  OK                     00077700
&ZCVAL         SETC '&ZCVAL MAXFCODES'          INCORRECT KEY USED      00077800
.ZG3A10        AIF   (K'&ZCVAL LE 0).ZG3A11     OK                      00077900
&ZCVAL         SETC '&ZCVAL'(2,K'&ZCVAL-1)                              00078000
&ZMS           SETC  '"TYPE'                                            00078100
&ZMS           SETC  '&ZMS.=&TYPE"'                                     00078200
&ZMS           SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'               00078300
               MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'               00078400
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00078500
.ZG3A11        ANOP  ,                                                  00078600
.*-------------------------------------------------------------------   00078700
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00078800
.ZG4           ANOP  ,                                                  00078900
&ZTLC          SETC 'INITIAL'                                           00079000
               AIF   ('&TYPE(1)' NE '&ZTLC').ZG11                       00079100
&XTYPE         SETC  'INITIAL'   SET KEYWORD                            00079200
               AIF   (N'&TYPE LE 1).ZG4A        CK NUM                  00079300
&ZMS           SETC  '"TYPE='                                           00079400
&ZMS           SETC  '&ZMS.&TYPE"'                                      00079500
&ZMS           SETC  '&ZMS "TYPE"'                                      00079600
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00079700
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00079800
.ZG4A          ANOP  ,                                                  00079900
.*------------------------------------------------------------------    00080000
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00080100
&ZCVAL         SETC ''           CLEAR ERROR KEY ACCUMULATOR            00080200
.ZG4A0         AIF   (K'&FUNCNAME LE 0).ZG4A1   OK                      00080300
&ZCVAL         SETC '&ZCVAL FUNCNAME'           INCORRECT KEY USED      00080400
.ZG4A1         AIF   (K'&FUNCADDR LE 0).ZG4A2   OK                      00080500
&ZCVAL         SETC '&ZCVAL FUNCADDR'           INCORRECT KEY USED      00080600
.ZG4A2         AIF   (K'&NUMFCODES LE 0).ZG4A3  OK                      00080700
&ZCVAL         SETC '&ZCVAL NUMFCODES'          INCORRECT KEY USED      00080800
.ZG4A3         AIF   (K'&FCODES LE 0).ZG4A4     OK                      00080900
&ZCVAL         SETC '&ZCVAL FCODES'             INCORRECT KEY USED      00081000
.ZG4A4         AIF   (K'&SOURCE LE 0).ZG4A5     OK                      00081100
&ZCVAL         SETC '&ZCVAL SOURCE'             INCORRECT KEY USED      00081200
.ZG4A5         AIF   (K'&ENTRYDATA LE 0).ZG4A6  OK                      00081300
&ZCVAL         SETC '&ZCVAL ENTRYDATA'          INCORRECT KEY USED      00081400
.ZG4A6         AIF   (K'&FUNCAMODE LE 0).ZG4A7  OK                      00081500
&ZCVAL         SETC '&ZCVAL FUNCAMODE'          INCORRECT KEY USED      00081600
.ZG4A7         AIF   (K'&MAXFCODES LE 0).ZG4A8  OK                      00081700
&ZCVAL         SETC '&ZCVAL MAXFCODES'          INCORRECT KEY USED      00081800
.ZG4A8         AIF   (K'&ZCVAL LE 0).ZG4A9      OK                      00081900
&ZCVAL         SETC '&ZCVAL'(2,K'&ZCVAL-1)                              00082000
&ZMS           SETC  '"TYPE'                                            00082100
&ZMS           SETC  '&ZMS.=&TYPE"'                                     00082200
&ZMS           SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'               00082300
               MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'               00082400
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00082500
.ZG4A9         ANOP  ,                                                  00082600
.*----------------------------------------------------------------***   00082700
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00082800
               AIF   (N'&SSVTDATA LE 1).ZG6A    CK NUM                  00082900
&ZMS           SETC  '"SSVTDATA='                                       00083000
&ZMS           SETC  '&ZMS.&SSVTDATA"'                                  00083100
&ZMS           SETC  '&ZMS "SSVTDATA"'                                  00083200
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00083300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00083400
.ZG6A          ANOP  ,                                                  00083500
.*-------------------------------------------------------------------   00083600
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00083700
&ZXSSVTDATA    SETC  'INPUT'     SET IN/OUTPUT                          00083800
&XSSVTDATA     SETC  '&SSVTDATA(1)'             SET XVARIABLE           00083900
               AIF   (N'&SSVTDATA GT 1).ZG6B    MULTI                   00084000
&XSSVTDATA     SETC  '&SSVTDATA'                SET XVARIABLE           00084100
.ZG6B          AIF   (K'&SSVTDATA(1) GT 0).ZG6C                         00084200
&ZXSSVTDATA    SETC  ''          RESET IN/OUTPUT                        00084300
&ZMS           SETC  ' '                                                00084400
&ZMS           SETC  '&ZMS "SSVTDATA" KEY AND ITS'                      00084500
               MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                   00084600
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00084700
.ZG6C          ANOP  ,                                                  00084800
.*-------------------------------------------------------------------   00084900
.***AG.KCK01 NAME, RQD INPUT, KEYS -GPR NOT ALLOWED                     00085000
               AIF   (K'&ZXSSVTDATA LE 0).ZG6P  NOT I/O                 00085100
               AIF   ('&XSSVTDATA'(1,1) NE '(').ZG6P                    00085200
&ZXSSVTDATA    SETC  ''          RESET IN/OUTPUT                        00085300
&ZMS           SETC  '"SSVTDATA='                                       00085400
&ZMS           SETC  '&ZMS.&SSVTDATA"'                                  00085500
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00085600
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00085700
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00085800
.ZG6P          ANOP  ,                                                  00085900
.*----------------------------------------------------------------***   00086000
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00086100
               AIF   (N'&TABLEN LE 1).ZG9A      CK NUM                  00086200
&ZMS           SETC  '"TABLEN='                                         00086300
&ZMS           SETC  '&ZMS.&TABLEN"'                                    00086400
&ZMS           SETC  '&ZMS "TABLEN"'                                    00086500
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00086600
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00086700
.ZG9A          ANOP  ,                                                  00086800
.*-------------------------------------------------------------------   00086900
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00087000
&ZXTABLEN      SETC  'INPUT'     SET IN/OUTPUT                          00087100
&XTABLEN       SETC  '&TABLEN(1)'               SET XVARIABLE           00087200
               AIF   (N'&TABLEN GT 1).ZG9B      MULTI                   00087300
&XTABLEN       SETC  '&TABLEN'   SET XVARIABLE                          00087400
.ZG9B          AIF   (K'&TABLEN(1) GT 0).ZG9C                           00087500
&ZXTABLEN      SETC  ''          RESET IN/OUTPUT                        00087600
&ZMS           SETC  ' '                                                00087700
&ZMS           SETC  '&ZMS "TABLEN" KEY AND ITS'                        00087800
               MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                   00087900
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00088000
.ZG9C          ANOP  ,                                                  00088100
.*-------------------------------------------------------------------   00088200
.***AG.KCK01 NAME, RQD INPUT, KEYS -GPR NOT ALLOWED                     00088300
               AIF   (K'&ZXTABLEN LE 0).ZG9P    NOT I/O                 00088400
               AIF   ('&XTABLEN'(1,1) NE '(').ZG9P                      00088500
&ZXTABLEN      SETC  ''          RESET IN/OUTPUT                        00088600
&ZMS           SETC  '"TABLEN='                                         00088700
&ZMS           SETC  '&ZMS.&TABLEN"'                                    00088800
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00088900
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00089000
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00089100
.ZG9P          ANOP  ,                                                  00089200
.*-------------------------------------------------------------------   00089300
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00089400
.ZG11          ANOP  ,                                                  00089500
&ZTLC          SETC 'ENTRY'                                             00089600
               AIF   ('&TYPE(1)' NE '&ZTLC').ZG22                       00089700
&XTYPE         SETC  'ENTRY'     SET KEYWORD                            00089800
               AIF   (N'&TYPE LE 1).ZG11A       CK NUM                  00089900
&ZMS           SETC  '"TYPE='                                           00090000
&ZMS           SETC  '&ZMS.&TYPE"'                                      00090100
&ZMS           SETC  '&ZMS "TYPE"'                                      00090200
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00090300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00090400
.ZG11A         ANOP  ,                                                  00090500
.*------------------------------------------------------------------    00090600
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00090700
&ZCVAL         SETC ''           CLEAR ERROR KEY ACCUMULATOR            00090800
.ZG11A0        AIF   (K'&SSVTDATA LE 0).ZG11A1  OK                      00090900
&ZCVAL         SETC '&ZCVAL SSVTDATA'           INCORRECT KEY USED      00091000
.ZG11A1        AIF   (K'&TABLEN LE 0).ZG11A2    OK                      00091100
&ZCVAL         SETC '&ZCVAL TABLEN'             INCORRECT KEY USED      00091200
.ZG11A2        AIF   (K'&SOURCE LE 0).ZG11A3    OK                      00091300
&ZCVAL         SETC '&ZCVAL SOURCE'             INCORRECT KEY USED      00091400
.ZG11A3        AIF   (K'&ENTRYDATA LE 0).ZG11A4  OK                     00091500
&ZCVAL         SETC '&ZCVAL ENTRYDATA'          INCORRECT KEY USED      00091600
.ZG11A4        AIF   (K'&FUNCAMODE LE 0).ZG11A5  OK                     00091700
&ZCVAL         SETC '&ZCVAL FUNCAMODE'          INCORRECT KEY USED      00091800
.ZG11A5        AIF   (K'&MAXFCODES LE 0).ZG11A6  OK                     00091900
&ZCVAL         SETC '&ZCVAL MAXFCODES'          INCORRECT KEY USED      00092000
.ZG11A6        AIF   (K'&ZCVAL LE 0).ZG11A7     OK                      00092100
&ZCVAL         SETC '&ZCVAL'(2,K'&ZCVAL-1)                              00092200
&ZMS           SETC  '"TYPE'                                            00092300
&ZMS           SETC  '&ZMS.=&TYPE"'                                     00092400
&ZMS           SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'               00092500
               MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'               00092600
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00092700
.ZG11A7        ANOP  ,                                                  00092800
.*----------------------------------------------------------------***   00092900
.***AG.KMEKY01 NAME, OPT INPUT, ME KEYS -XVARIABLE                      00093000
&XFUNCRTN      SETC  ''          INITIALIZE XVARIABLE                   00093100
               AIF   (K'&FUNCNAME LE 0).ZG13C                           00093200
&ZXFUNCRTN     SETC  'INPUT'     SET IN/OUTPUT                          00093300
&XFUNCRTN      SETC  'FUNCNAME'  SET XVARIABLE                          00093400
&ZXFUNCNAME    SETC  'INPUT'     SET IN/OUTPUT                          00093500
&XFUNCNAME     SETC  '&FUNCNAME(1)'             SET XVARIABLE PARM      00093600
               AIF   (N'&FUNCNAME GT 1).ZG13A                           00093700
&XFUNCNAME     SETC  '&FUNCNAME'                SET XVARIABLE PARM      00093800
.ZG13A         AIF   (N'&FUNCNAME LE 1).ZG13B   CK NUM                  00093900
&ZMS           SETC  '"FUNCNAME='                                       00094000
&ZMS           SETC  '&ZMS.&FUNCNAME"'                                  00094100
&ZMS           SETC  '&ZMS "FUNCNAME"'                                  00094200
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00094300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00094400
.ZG13B         AIF   (K'&XFUNCNAME GT 0).ZG13C  ONE PARM                00094500
&ZXFUNCRTN     SETC  ''          RESET IN/OUTPUT                        00094600
&ZXFUNCNAME    SETC  ''          RESET IN/OUTPUT                        00094700
&ZMS           SETC  'WHEN "ENTRY" IS SPECIFIED'                        00094800
&ZMS           SETC  '&ZMS , "FUNCNAME" KEY AND ITS'                    00094900
               MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                   00095000
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00095100
.ZG13C         ANOP  ,                                                  00095200
.*----------------------------------------------------------------***   00095300
.***AG.KMEKY02 NAME, OPT INPUT, ME KEYS -XVARIABLE                      00095400
               AIF   (K'&FUNCADDR LE 0).ZG14D   NO ME KEY               00095500
               AIF   (N'&FUNCADDR LE 1).ZG14A   CK NUM                  00095600
&ZMS           SETC  '"FUNCADDR='                                       00095700
&ZMS           SETC  '&ZMS.&FUNCADDR"'                                  00095800
&ZMS           SETC  '&ZMS "FUNCADDR"'                                  00095900
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00096000
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00096100
.ZG14A         AIF   (K'&XFUNCRTN LE 0).ZG14B                           00096200
&ZMS           SETC  '"FUNCADDR'                                        00096300
&ZMS           SETC  '&ZMS.=&FUNCADDR"'                                 00096400
&ZMS           SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'              00096500
&ZMS           SETC  '&ZMS "&XFUNCRTN"'                                 00096600
               MNOTE 8,' &ZMS KEY.'                                     00096700
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00096800
               AGO   .ZG14D                                             00096900
.*                                                                      00097000
.ZG14B         ANOP  ,                                                  00097100
&ZXFUNCRTN     SETC  'INPUT'     SET IN/OUTPUT                          00097200
&XFUNCRTN      SETC  'FUNCADDR'  SET XVARIABLE                          00097300
&ZXFUNCADDR    SETC  'INPUT'     SET IN/OUTPUT                          00097400
&XFUNCADDR     SETC  '&FUNCADDR(1)'             SET XVARIABLE PARM      00097500
               AIF   (N'&FUNCADDR GT 1).ZG14C                           00097600
&XFUNCADDR     SETC  '&FUNCADDR'                SET XVARIABLE PARM      00097700
.ZG14C         AIF   (K'&XFUNCADDR GT 0).ZG14D  ONE PARM                00097800
&ZXFUNCRTN     SETC  ''          RESET IN/OUTPUT                        00097900
&ZXFUNCADDR    SETC  ''          RESET IN/OUTPUT                        00098000
&ZMS           SETC  'WHEN "ENTRY" IS SPECIFIED'                        00098100
&ZMS           SETC  '&ZMS , "FUNCADDR" KEY AND ITS'                    00098200
               MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                   00098300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00098400
.ZG14D         ANOP  ,                                                  00098500
.*------------------------------------------------------------------    00098600
.***AG.KMEKY07 NAME, OPT INPUT, ME KEYS -CHECK IF KEY ENTERED           00098700
               AIF   (K'&XFUNCRTN GT 0).ZG15B                           00098800
&ZXFUNCRTN     SETC  'INPUT'     SET IN/OUTPUT                          00098900
&XFUNCRTN      SETC  'FUNCNAME'  SET DEFAULT                            00099000
&ZXFUNCNAME    SETC  'INPUT'     SET IN/OUTPUT                          00099100
&XFUNCNAME     SETC  '0'         SET DEFAULT PARM                       00099200
.ZG15B         ANOP  ,                                                  00099300
.*-------------------------------------------------------------------   00099400
.***AG.KCK01 NAME, OPT INPUT, ME KEYS -GPR NOT ALLOWED                  00099500
               AIF   (K'&ZXFUNCADDR LE 0).ZG15P  NOT I/O                00099600
               AIF   ('&XFUNCADDR'(1,1) NE '(').ZG15P                   00099700
&ZXFUNCADDR    SETC  ''          RESET IN/OUTPUT                        00099800
&ZMS           SETC  '"FUNCADDR='                                       00099900
&ZMS           SETC  '&ZMS.&FUNCADDR"'                                  00100000
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00100100
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00100200
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00100300
.ZG15P         ANOP  ,                                                  00100400
.*-------------------------------------------------------------------   00100500
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES           00100600
.ZG13ZY  AIF    ('&XFUNCRTN' NE 'FUNCNAME').ZG14ZY                      00100700
.*-------------------------------------------------------------------   00100800
.***AG.KCK01 NAME, OPT INPUT, ME KEYS -GPR NOT ALLOWED                  00100900
               AIF   (K'&ZXFUNCNAME LE 0).ZG13P  NOT I/O                00101000
               AIF   ('&XFUNCNAME'(1,1) NE '(').ZG13P                   00101100
&ZXFUNCNAME    SETC  ''          RESET IN/OUTPUT                        00101200
&ZMS           SETC  '"FUNCNAME='                                       00101300
&ZMS           SETC  '&ZMS.&FUNCNAME"'                                  00101400
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00101500
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00101600
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00101700
.ZG13P         ANOP  ,                                                  00101800
.*-------------------------------------------------------------------   00101900
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES           00102000
.ZG14ZY  AIF    ('&XFUNCRTN' NE 'FUNCADDR').ZG15ZY                      00102100
.*-------------------------------------------------------------------   00102200
.***AG.KCK01 NAME, OPT INPUT, ME KEYS -GPR NOT ALLOWED                  00102300
               AIF   (K'&ZXFUNCADDR LE 0).ZG14P  NOT I/O                00102400
               AIF   ('&XFUNCADDR'(1,1) NE '(').ZG14P                   00102500
&ZXFUNCADDR    SETC  ''          RESET IN/OUTPUT                        00102600
&ZMS           SETC  '"FUNCADDR='                                       00102700
&ZMS           SETC  '&ZMS.&FUNCADDR"'                                  00102800
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00102900
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00103000
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00103100
.ZG14P         ANOP  ,                                                  00103200
.*-------------------------------------------------------------------   00103300
.***AG.KMEKY15 NAME, OPT INPUT, ME KEYS -END                            00103400
.ZG15ZY        ANOP ,            END MUTUALLY EXCLUSIVE KEYS            00103500
.*----------------------------------------------------------------***   00103600
.***AG.KXVAR05 VALUE, RQD INPUT, KEYS -XVARIABLE KEY                    00103700
               AIF   (N'&NUMFCODES LE 1).ZG17A  CK NUM                  00103800
&ZMS           SETC  '"NUMFCODES='                                      00103900
&ZMS           SETC  '&ZMS.&NUMFCODES"'                                 00104000
&ZMS           SETC  '&ZMS "NUMFCODES"'                                 00104100
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00104200
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00104300
.ZG17A         ANOP  ,                                                  00104400
.*-------------------------------------------------------------------   00104500
.***AG.KXVAR06 VALUE, RQD INPUT, KEYS -XVARIABLE                        00104600
&ZXNUMFCODES   SETC  'INPUT'     SET IN/OUTPUT                          00104700
&XNUMFCODES    SETC  '&NUMFCODES(1)'            SET XVARIABLE           00104800
               AIF   (N'&NUMFCODES GT 1).ZG17B  MULTI                   00104900
&XNUMFCODES    SETC  '&NUMFCODES'               SET XVARIABLE           00105000
.ZG17B         AIF   (K'&NUMFCODES(1) GT 0).ZG17C                       00105100
&ZXNUMFCODES   SETC  ''          RESET IN/OUTPUT                        00105200
&ZMS           SETC  ' '                                                00105300
&ZMS           SETC  '&ZMS "NUMFCODES" KEY AND ITS'                     00105400
               MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                   00105500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00105600
.ZG17C         ANOP  ,                                                  00105700
.*-------------------------------------------------------------------   00105800
.***AG.KCK01 VALUE, RQD INPUT, KEYS -GPR NOT ALLOWED                    00105900
               AIF   (K'&ZXNUMFCODES LE 0).ZG17P  NOT I/O               00106000
               AIF   ('&XNUMFCODES'(1,1) NE '(').ZG17P                  00106100
&ZXNUMFCODES   SETC  ''          RESET IN/OUTPUT                        00106200
&ZMS           SETC  '"NUMFCODES='                                      00106300
&ZMS           SETC  '&ZMS.&NUMFCODES"'                                 00106400
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00106500
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00106600
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00106700
.ZG17P         ANOP  ,                                                  00106800
.*-------------------------------------------------------------------   00106900
.***AG.KCK07 VALUE, RQD INPUT, KEYS -KMG RANGE                          00107000
               AIF   (K'&ZXNUMFCODES LE 0).ZG17T  NOT I/O               00107100
               AIF   ('&XNUMFCODES'(1,1) EQ '(').ZG17T  IN GPR          00107200
               AIF   (T'&XNUMFCODES NE 'N').ZG17S  NUMERIC ERR          00107300
&ZASIZ         SETA  &XNUMFCODES                CONVERT                 00107400
               AIF   (&ZASIZ LT 1).ZG17S        TOO LOW                 00107500
               AIF   (&ZASIZ LE 255).ZG17T      NOT HIGH                00107600
.ZG17S         ANOP  ,                                                  00107700
&ZXNUMFCODES   SETC  ''          RESET IN/OUTPUT                        00107800
&ZMS           SETC  '"NUMFCODES='                                      00107900
&ZMS           SETC  '&ZMS.&NUMFCODES"'                                 00108000
&ZMS           SETC  '&ZMS THE RANGE IS "1-255"'                        00108100
               MNOTE 8,' &ZMS FOR ARGUMENT 1.'                          00108200
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00108300
.ZG17T         ANOP  ,                                                  00108400
.*----------------------------------------------------------------***   00108500
.***AG.KXVAR15 NAME, OPT INPUT, KEYS -MULTIPLE ARGUMENTS                00108600
&ZXFCODES      SETC  'INPUT'     SET IN/OUTPUT                          00108700
&ZI            SETA  0           ARRAY INDEX                            00108800
&ZJ            SETA  0           PARM INDEX                             00108900
               AIF   (N'&FCODES LE 0).ZG20C                             00109000
.ZG20A         ANOP  ,           LOOP TO GET PARMS                      00109100
&ZJ            SETA  &ZJ+1       NEXT PARM                              00109200
               AIF   (&ZJ GT N'&FCODES).ZG20B   DONE                    00109300
               AIF   (K'&FCODES(&ZJ) LE 0).ZG20A  NULL                  00109400
&ZI            SETA  &ZI+1       NEXT ARRAY ENTRY                       00109500
&XFCODES(&ZI)  SETC  '&FCODES(&ZJ)'                                     00109600
               AGO   .ZG20A                                             00109700
.*                                                                      00109800
.ZG20B         ANOP  ,                                                  00109900
&ZI            SETA  &ZI+1       NEXT ARRAY ENTRY                       00110000
&XFCODES(&ZI)  SETC  ''          NULL AT ARRAY END                      00110100
               AIF   (&ZI GT 1).ZG20D           PARMS                   00110200
.ZG20C         ANOP  ,                                                  00110300
&XFCODES(1)    SETC  '0'         SET DEFAULT                            00110400
&XFCODES(2)    SETC  ''          NULL AT ARRAY END                      00110500
.ZG20D         ANOP  ,                                                  00110600
.*-------------------------------------------------------------------   00110700
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00110800
.ZG22          ANOP  ,                                                  00110900
&ZTLC          SETC 'FINAL'                                             00111000
               AIF   ('&TYPE(1)' NE '&ZTLC').ZG23                       00111100
&XTYPE         SETC  'FINAL'     SET KEYWORD                            00111200
               AIF   (N'&TYPE LE 1).ZG22A       CK NUM                  00111300
&ZMS           SETC  '"TYPE='                                           00111400
&ZMS           SETC  '&ZMS.&TYPE"'                                      00111500
&ZMS           SETC  '&ZMS "TYPE"'                                      00111600
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00111700
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00111800
.ZG22A         ANOP  ,                                                  00111900
.*------------------------------------------------------------------    00112000
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00112100
&ZCVAL         SETC ''           CLEAR ERROR KEY ACCUMULATOR            00112200
.ZG22A0        AIF   (K'&SSVTDATA LE 0).ZG22A1  OK                      00112300
&ZCVAL         SETC '&ZCVAL SSVTDATA'           INCORRECT KEY USED      00112400
.ZG22A1        AIF   (K'&TABLEN LE 0).ZG22A2    OK                      00112500
&ZCVAL         SETC '&ZCVAL TABLEN'             INCORRECT KEY USED      00112600
.ZG22A2        AIF   (K'&FUNCNAME LE 0).ZG22A3  OK                      00112700
&ZCVAL         SETC '&ZCVAL FUNCNAME'           INCORRECT KEY USED      00112800
.ZG22A3        AIF   (K'&FUNCADDR LE 0).ZG22A4  OK                      00112900
&ZCVAL         SETC '&ZCVAL FUNCADDR'           INCORRECT KEY USED      00113000
.ZG22A4        AIF   (K'&NUMFCODES LE 0).ZG22A5  OK                     00113100
&ZCVAL         SETC '&ZCVAL NUMFCODES'          INCORRECT KEY USED      00113200
.ZG22A5        AIF   (K'&FCODES LE 0).ZG22A6    OK                      00113300
&ZCVAL         SETC '&ZCVAL FCODES'             INCORRECT KEY USED      00113400
.ZG22A6        AIF   (K'&SOURCE LE 0).ZG22A7    OK                      00113500
&ZCVAL         SETC '&ZCVAL SOURCE'             INCORRECT KEY USED      00113600
.ZG22A7        AIF   (K'&ENTRYDATA LE 0).ZG22A8  OK                     00113700
&ZCVAL         SETC '&ZCVAL ENTRYDATA'          INCORRECT KEY USED      00113800
.ZG22A8        AIF   (K'&FUNCAMODE LE 0).ZG22A9  OK                     00113900
&ZCVAL         SETC '&ZCVAL FUNCAMODE'          INCORRECT KEY USED      00114000
.ZG22A9        AIF   (K'&MAXFCODES LE 0).ZG22A10  OK                    00114100
&ZCVAL         SETC '&ZCVAL MAXFCODES'          INCORRECT KEY USED      00114200
.ZG22A10       AIF   (K'&ZCVAL LE 0).ZG22A11    OK                      00114300
&ZCVAL         SETC '&ZCVAL'(2,K'&ZCVAL-1)                              00114400
&ZMS           SETC  '"TYPE'                                            00114500
&ZMS           SETC  '&ZMS.=&TYPE"'                                     00114600
&ZMS           SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'               00114700
               MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'               00114800
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00114900
.ZG22A11       ANOP  ,                                                  00115000
.*-------------------------------------------------------------------   00115100
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00115200
.ZG23          ANOP  ,                                                  00115300
&ZTLC          SETC 'SET'                                               00115400
               AIF   ('&TYPE(1)' NE '&ZTLC').ZG46                       00115500
&XTYPE         SETC  'SET'       SET KEYWORD                            00115600
               AIF   (N'&TYPE LE 1).ZG23A       CK NUM                  00115700
&ZMS           SETC  '"TYPE='                                           00115800
&ZMS           SETC  '&ZMS.&TYPE"'                                      00115900
&ZMS           SETC  '&ZMS "TYPE"'                                      00116000
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00116100
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00116200
.ZG23A         ANOP  ,                                                  00116300
.*------------------------------------------------------------------    00116400
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00116500
&ZCVAL         SETC ''           CLEAR ERROR KEY ACCUMULATOR            00116600
.ZG23A0        AIF   (K'&TABLEN LE 0).ZG23A1    OK                      00116700
&ZCVAL         SETC '&ZCVAL TABLEN'             INCORRECT KEY USED      00116800
.ZG23A1        AIF   (K'&NUMFCODES LE 0).ZG23A2  OK                     00116900
&ZCVAL         SETC '&ZCVAL NUMFCODES'          INCORRECT KEY USED      00117000
.ZG23A2        AIF   (K'&MAXFCODES LE 0).ZG23A3  OK                     00117100
&ZCVAL         SETC '&ZCVAL MAXFCODES'          INCORRECT KEY USED      00117200
.ZG23A3        AIF   (K'&ZCVAL LE 0).ZG23A4     OK                      00117300
&ZCVAL         SETC '&ZCVAL'(2,K'&ZCVAL-1)                              00117400
&ZMS           SETC  '"TYPE'                                            00117500
&ZMS           SETC  '&ZMS.=&TYPE"'                                     00117600
&ZMS           SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'               00117700
               MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'               00117800
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00117900
.ZG23A4        ANOP  ,                                                  00118000
.*----------------------------------------------------------------***   00118100
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00118200
               AIF   (N'&SSVTDATA LE 1).ZG25A   CK NUM                  00118300
&ZMS           SETC  '"SSVTDATA='                                       00118400
&ZMS           SETC  '&ZMS.&SSVTDATA"'                                  00118500
&ZMS           SETC  '&ZMS "SSVTDATA"'                                  00118600
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00118700
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00118800
.ZG25A         ANOP  ,                                                  00118900
.*-------------------------------------------------------------------   00119000
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00119100
&ZXSSVTDATA    SETC  'INPUT'     SET IN/OUTPUT                          00119200
&XSSVTDATA     SETC  '&SSVTDATA(1)'             SET XVARIABLE           00119300
               AIF   (N'&SSVTDATA GT 1).ZG25B   MULTI                   00119400
&XSSVTDATA     SETC  '&SSVTDATA'                SET XVARIABLE           00119500
.ZG25B         AIF   (K'&SSVTDATA(1) GT 0).ZG25C                        00119600
&ZXSSVTDATA    SETC  ''          RESET IN/OUTPUT                        00119700
&ZMS           SETC  ' '                                                00119800
&ZMS           SETC  '&ZMS "SSVTDATA" KEY AND ITS'                      00119900
               MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                   00120000
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00120100
.ZG25C         ANOP  ,                                                  00120200
.*-------------------------------------------------------------------   00120300
.***AG.KCK01 NAME, RQD INPUT, KEYS -GPR NOT ALLOWED                     00120400
               AIF   (K'&ZXSSVTDATA LE 0).ZG25P  NOT I/O                00120500
               AIF   ('&XSSVTDATA'(1,1) NE '(').ZG25P                   00120600
&ZXSSVTDATA    SETC  ''          RESET IN/OUTPUT                        00120700
&ZMS           SETC  '"SSVTDATA='                                       00120800
&ZMS           SETC  '&ZMS.&SSVTDATA"'                                  00120900
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00121000
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00121100
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00121200
.ZG25P         ANOP  ,                                                  00121300
.*----------------------------------------------------------------***   00121400
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00121500
               AIF   (N'&SOURCE LE 1).ZG28A     CK NUM                  00121600
&ZMS           SETC  '"SOURCE='                                         00121700
&ZMS           SETC  '&ZMS.&SOURCE"'                                    00121800
&ZMS           SETC  '&ZMS "SOURCE"'                                    00121900
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00122000
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00122100
.ZG28A         ANOP  ,                                                  00122200
.*-------------------------------------------------------------------   00122300
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00122400
&ZXSOURCE      SETC  'INPUT'     SET IN/OUTPUT                          00122500
&XSOURCE       SETC  '&SOURCE(1)'               SET XVARIABLE           00122600
               AIF   (N'&SOURCE GT 1).ZG28B     MULTI                   00122700
&XSOURCE       SETC  '&SOURCE'   SET XVARIABLE                          00122800
.ZG28B         AIF   (K'&SOURCE(1) GT 0).ZG28C                          00122900
&ZXSOURCE      SETC  ''          RESET IN/OUTPUT                        00123000
&ZMS           SETC  ' '                                                00123100
&ZMS           SETC  '&ZMS "SOURCE" KEY AND ITS'                        00123200
               MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                   00123300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00123400
.ZG28C         ANOP  ,                                                  00123500
.*-------------------------------------------------------------------   00123600
.***AG.KCK01 NAME, RQD INPUT, KEYS -GPR NOT ALLOWED                     00123700
               AIF   (K'&ZXSOURCE LE 0).ZG28P   NOT I/O                 00123800
               AIF   ('&XSOURCE'(1,1) NE '(').ZG28P                     00123900
&ZXSOURCE      SETC  ''          RESET IN/OUTPUT                        00124000
&ZMS           SETC  '"SOURCE='                                         00124100
&ZMS           SETC  '&ZMS.&SOURCE"'                                    00124200
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00124300
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00124400
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00124500
.ZG28P         ANOP  ,                                                  00124600
.*----------------------------------------------------------------***   00124700
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00124800
               AIF   (N'&ENTRYDATA LE 1).ZG31A  CK NUM                  00124900
&ZMS           SETC  '"ENTRYDATA='                                      00125000
&ZMS           SETC  '&ZMS.&ENTRYDATA"'                                 00125100
&ZMS           SETC  '&ZMS "ENTRYDATA"'                                 00125200
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00125300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00125400
.ZG31A         ANOP  ,                                                  00125500
.*-------------------------------------------------------------------   00125600
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00125700
&ZXENTRYDATA   SETC  'INPUT'     SET IN/OUTPUT                          00125800
&XENTRYDATA    SETC  '&ENTRYDATA(1)'            SET XVARIABLE           00125900
               AIF   (N'&ENTRYDATA GT 1).ZG31B  MULTI                   00126000
&XENTRYDATA    SETC  '&ENTRYDATA'               SET XVARIABLE           00126100
.ZG31B         AIF   (K'&ENTRYDATA(1) GT 0).ZG31C                       00126200
&ZXENTRYDATA   SETC  ''          RESET IN/OUTPUT                        00126300
&ZMS           SETC  ' '                                                00126400
&ZMS           SETC  '&ZMS "ENTRYDATA" KEY AND ITS'                     00126500
               MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                   00126600
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00126700
.ZG31C         ANOP  ,                                                  00126800
.*-------------------------------------------------------------------   00126900
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00127000
               AIF   (K'&ZXENTRYDATA LE 0).ZG31R  NOT I/O               00127100
               AIF   ('&XENTRYDATA'(1,1) NE '(').ZG31R                  00127200
&ZCGPR         SETC  '&XENTRYDATA'(2,K'&XENTRYDATA-2)                   00127300
               AIF   ('&ZCGPR'(1,1) NE '0').ZG31P                       00127400
               AIF   (K'&ZCGPR GT 2).ZG31Q                              00127500
               AIF   ('&ZCGPR' EQ '0').ZG31Q                            00127600
&ZCGPR         SETC  '&ZCGPR'(2,1)                                      00127700
               AIF   (T'&ZCGPR NE 'N').ZG31Q    INVALID REG NAME        00127800
.ZG31P         ANOP  ,                                                  00127900
               AIF   (T'&ZCGPR NE 'N').ZG31R    NON NUMERIC             00128000
               AIF   ('&ZCGPR' LT '2').ZG31Q                            00128100
               AIF   ('&ZCGPR' LE '12').ZG31R                           00128200
.ZG31Q         ANOP  ,                                                  00128300
&ZMS           SETC  '"ENTRYDATA='                                      00128400
&ZMS           SETC  '&ZMS.&ENTRYDATA"'                                 00128500
&ZMS           SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'          00128600
               MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                   00128700
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00128800
.ZG31R         ANOP  ,                                                  00128900
.*----------------------------------------------------------------***   00129000
.***AG.KMEKY01 NAME, OPT INPUT, ME KEYS -XVARIABLE                      00129100
&XFUNCRTN      SETC  ''          INITIALIZE XVARIABLE                   00129200
               AIF   (K'&FUNCNAME LE 0).ZG34C                           00129300
&ZXFUNCRTN     SETC  'INPUT'     SET IN/OUTPUT                          00129400
&XFUNCRTN      SETC  'FUNCNAME'  SET XVARIABLE                          00129500
&ZXFUNCNAME    SETC  'INPUT'     SET IN/OUTPUT                          00129600
&XFUNCNAME     SETC  '&FUNCNAME(1)'             SET XVARIABLE PARM      00129700
               AIF   (N'&FUNCNAME GT 1).ZG34A                           00129800
&XFUNCNAME     SETC  '&FUNCNAME'                SET XVARIABLE PARM      00129900
.ZG34A         AIF   (N'&FUNCNAME LE 1).ZG34B   CK NUM                  00130000
&ZMS           SETC  '"FUNCNAME='                                       00130100
&ZMS           SETC  '&ZMS.&FUNCNAME"'                                  00130200
&ZMS           SETC  '&ZMS "FUNCNAME"'                                  00130300
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00130400
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00130500
.ZG34B         AIF   (K'&XFUNCNAME GT 0).ZG34C  ONE PARM                00130600
&ZXFUNCRTN     SETC  ''          RESET IN/OUTPUT                        00130700
&ZXFUNCNAME    SETC  ''          RESET IN/OUTPUT                        00130800
&ZMS           SETC  'WHEN "SET" IS SPECIFIED'                          00130900
&ZMS           SETC  '&ZMS , "FUNCNAME" KEY AND ITS'                    00131000
               MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                   00131100
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00131200
.ZG34C         ANOP  ,                                                  00131300
.*----------------------------------------------------------------***   00131400
.***AG.KMEKY02 NAME, OPT INPUT, ME KEYS -XVARIABLE                      00131500
               AIF   (K'&FUNCADDR LE 0).ZG35D   NO ME KEY               00131600
               AIF   (N'&FUNCADDR LE 1).ZG35A   CK NUM                  00131700
&ZMS           SETC  '"FUNCADDR='                                       00131800
&ZMS           SETC  '&ZMS.&FUNCADDR"'                                  00131900
&ZMS           SETC  '&ZMS "FUNCADDR"'                                  00132000
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00132100
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00132200
.ZG35A         AIF   (K'&XFUNCRTN LE 0).ZG35B                           00132300
&ZMS           SETC  '"FUNCADDR'                                        00132400
&ZMS           SETC  '&ZMS.=&FUNCADDR"'                                 00132500
&ZMS           SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'              00132600
&ZMS           SETC  '&ZMS "&XFUNCRTN"'                                 00132700
               MNOTE 8,' &ZMS KEY.'                                     00132800
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00132900
               AGO   .ZG35D                                             00133000
.*                                                                      00133100
.ZG35B         ANOP  ,                                                  00133200
&ZXFUNCRTN     SETC  'INPUT'     SET IN/OUTPUT                          00133300
&XFUNCRTN      SETC  'FUNCADDR'  SET XVARIABLE                          00133400
&ZXFUNCADDR    SETC  'INPUT'     SET IN/OUTPUT                          00133500
&XFUNCADDR     SETC  '&FUNCADDR(1)'             SET XVARIABLE PARM      00133600
               AIF   (N'&FUNCADDR GT 1).ZG35C                           00133700
&XFUNCADDR     SETC  '&FUNCADDR'                SET XVARIABLE PARM      00133800
.ZG35C         AIF   (K'&XFUNCADDR GT 0).ZG35D  ONE PARM                00133900
&ZXFUNCRTN     SETC  ''          RESET IN/OUTPUT                        00134000
&ZXFUNCADDR    SETC  ''          RESET IN/OUTPUT                        00134100
&ZMS           SETC  'WHEN "SET" IS SPECIFIED'                          00134200
&ZMS           SETC  '&ZMS , "FUNCADDR" KEY AND ITS'                    00134300
               MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                   00134400
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00134500
.ZG35D         ANOP  ,                                                  00134600
.*------------------------------------------------------------------    00134700
.***AG.KMEKY07 NAME, OPT INPUT, ME KEYS -CHECK IF KEY ENTERED           00134800
               AIF   (K'&XFUNCRTN GT 0).ZG42B                           00134900
&ZXFUNCRTN     SETC  'INPUT'     SET IN/OUTPUT                          00135000
&XFUNCRTN      SETC  'FUNCNAME'  SET DEFAULT                            00135100
&ZXFUNCNAME    SETC  'INPUT'     SET IN/OUTPUT                          00135200
&XFUNCNAME     SETC  '0'         SET DEFAULT PARM                       00135300
.ZG42B         ANOP  ,                                                  00135400
.*-------------------------------------------------------------------   00135500
.***AG.KCK01 NAME, OPT INPUT, ME KEYS -GPR NOT ALLOWED                  00135600
               AIF   (K'&ZXFUNCADDR LE 0).ZG42P  NOT I/O                00135700
               AIF   ('&XFUNCADDR'(1,1) NE '(').ZG42P                   00135800
&ZXFUNCADDR    SETC  ''          RESET IN/OUTPUT                        00135900
&ZMS           SETC  '"FUNCADDR='                                       00136000
&ZMS           SETC  '&ZMS.&FUNCADDR"'                                  00136100
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00136200
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00136300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00136400
.ZG42P         ANOP  ,                                                  00136500
.*-------------------------------------------------------------------   00136600
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES           00136700
.ZG34ZY  AIF    ('&XFUNCRTN' NE 'FUNCNAME').ZG35ZY                      00136800
.*-------------------------------------------------------------------   00136900
.***AG.KMEKY14 NAME, OPT INPUT, ME KEYS -DISALLOWED KEYS                00137000
&ZCVAL         SETC ''           ERROR KEY FIELD                        00137100
.ZG34I0        AIF   (K'&FUNCAMODE LE 0).ZG34I1                         00137200
&ZCVAL         SETC '&ZCVAL FUNCAMODE'          DISALLOWED KEY          00137300
.ZG34I1        AIF   (K'&ZCVAL LE 0).ZG34J      KEY                     00137400
&ZCVAL         SETC '&ZCVAL'(2,K'&ZCVAL-1)                              00137500
&ZMS           SETC  '"FUNCNAME'                                        00137600
&ZMS           SETC  '&ZMS.=&FUNCNAME"'                                 00137700
&ZMS           SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'               00137800
               MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'               00137900
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00138000
.ZG34J         ANOP  ,                                                  00138100
.*-------------------------------------------------------------------   00138200
.***AG.KCK01 NAME, OPT INPUT, ME KEYS -GPR NOT ALLOWED                  00138300
               AIF   (K'&ZXFUNCNAME LE 0).ZG34P  NOT I/O                00138400
               AIF   ('&XFUNCNAME'(1,1) NE '(').ZG34P                   00138500
&ZXFUNCNAME    SETC  ''          RESET IN/OUTPUT                        00138600
&ZMS           SETC  '"FUNCNAME='                                       00138700
&ZMS           SETC  '&ZMS.&FUNCNAME"'                                  00138800
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00138900
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00139000
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00139100
.ZG34P         ANOP  ,                                                  00139200
.*-------------------------------------------------------------------   00139300
.***AG.KMEKY13 NAME, OPT INPUT, ME KEYS -PROCESS DEPENDENCIES           00139400
.ZG35ZY  AIF    ('&XFUNCRTN' NE 'FUNCADDR').ZG42ZY                      00139500
.*-------------------------------------------------------------------   00139600
.***AG.KCK01 NAME, OPT INPUT, ME KEYS -GPR NOT ALLOWED                  00139700
               AIF   (K'&ZXFUNCADDR LE 0).ZG35P  NOT I/O                00139800
               AIF   ('&XFUNCADDR'(1,1) NE '(').ZG35P                   00139900
&ZXFUNCADDR    SETC  ''          RESET IN/OUTPUT                        00140000
&ZMS           SETC  '"FUNCADDR='                                       00140100
&ZMS           SETC  '&ZMS.&FUNCADDR"'                                  00140200
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00140300
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00140400
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00140500
.ZG35P         ANOP  ,                                                  00140600
.*----------------------------------------------------------------***   00140700
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00140800
               AIF   (N'&FUNCAMODE LE 1).ZG37A  CK NUM                  00140900
&ZMS           SETC  '"FUNCAMODE='                                      00141000
&ZMS           SETC  '&ZMS.&FUNCAMODE"'                                 00141100
&ZMS           SETC  '&ZMS "FUNCAMODE"'                                 00141200
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00141300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00141400
.ZG37A         ANOP  ,                                                  00141500
.*-------------------------------------------------------------------   00141600
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00141700
&XFUNCAMODE    SETC  ''          INITIALIZE XVARIABLE                   00141800
.ZG38A   AIF   ('&FUNCAMODE(1)' NE 'HOB').ZG39A                         00141900
&XFUNCAMODE    SETC  'HOB'       SET KEYWORD                            00142000
.*-------------------------------------------------------------------   00142100
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00142200
.ZG39A   AIF   ('&FUNCAMODE(1)' NE '31').ZG40A                          00142300
&XFUNCAMODE    SETC  '31'        SET KEYWORD                            00142400
.*-------------------------------------------------------------------   00142500
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00142600
.ZG40A   AIF   ('&FUNCAMODE(1)' NE '24').ZG41A                          00142700
&XFUNCAMODE    SETC  '24'        SET KEYWORD                            00142800
.*-------------------------------------------------------------------   00142900
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00143000
.ZG41A         AIF   (K'&XFUNCAMODE GT 0).ZG41C  KEYWORD                00143100
               AIF   (K'&FUNCAMODE(1) LE 0).ZG41B                       00143200
&ZMS           SETC  '"FUNCAMODE='                                      00143300
&ZMS           SETC  '&ZMS.&FUNCAMODE"'                                 00143400
&ZMS           SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '          00143500
&ZMS           SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                00143600
&ZMS           SETC  '&ZMS "HOB",'                                      00143700
&ZMS           SETC  '&ZMS "31",'                                       00143800
&ZMS           SETC  '&ZMS OR "24".'                                    00143900
               MNOTE 8,' &ZMS '                                         00144000
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00144100
.ZG41B         ANOP  ,                                                  00144200
&XFUNCAMODE    SETC  'HOB'       SET DEFAULT KEYWORD                    00144300
.ZG41C         ANOP  ,                                                  00144400
&ZXFUNCAMODE   SETC  'INPUT'     SET IN/OUTPUT                          00144500
.*-------------------------------------------------------------------   00144600
.***AG.KMEKY15 NAME, OPT INPUT, ME KEYS -END                            00144700
.ZG42ZY        ANOP ,            END MUTUALLY EXCLUSIVE KEYS            00144800
.*----------------------------------------------------------------***   00144900
.***AG.KXVAR15 NAME, OPT INPUT, KEYS -MULTIPLE ARGUMENTS                00145000
&ZXFCODES      SETC  'INPUT'     SET IN/OUTPUT                          00145100
&ZI            SETA  0           ARRAY INDEX                            00145200
&ZJ            SETA  0           PARM INDEX                             00145300
               AIF   (N'&FCODES LE 0).ZG44C                             00145400
.ZG44A         ANOP  ,           LOOP TO GET PARMS                      00145500
&ZJ            SETA  &ZJ+1       NEXT PARM                              00145600
               AIF   (&ZJ GT N'&FCODES).ZG44B   DONE                    00145700
               AIF   (K'&FCODES(&ZJ) LE 0).ZG44A  NULL                  00145800
&ZI            SETA  &ZI+1       NEXT ARRAY ENTRY                       00145900
&XFCODES(&ZI)  SETC  '&FCODES(&ZJ)'                                     00146000
               AGO   .ZG44A                                             00146100
.*                                                                      00146200
.ZG44B         ANOP  ,                                                  00146300
&ZI            SETA  &ZI+1       NEXT ARRAY ENTRY                       00146400
&XFCODES(&ZI)  SETC  ''          NULL AT ARRAY END                      00146500
               AIF   (&ZI GT 1).ZG44D           PARMS                   00146600
.ZG44C         ANOP  ,                                                  00146700
&XFCODES(1)    SETC  '0'         SET DEFAULT                            00146800
&XFCODES(2)    SETC  ''          NULL AT ARRAY END                      00146900
.ZG44D         ANOP  ,                                                  00147000
.*-------------------------------------------------------------------   00147100
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00147200
.ZG46          ANOP  ,                                                  00147300
&ZTLC          SETC 'RESERVE'                                           00147400
               AIF   ('&TYPE(1)' NE '&ZTLC').ZG54                       00147500
&XTYPE         SETC  'RESERVE'   SET KEYWORD                            00147600
               AIF   (N'&TYPE LE 1).ZG46A       CK NUM                  00147700
&ZMS           SETC  '"TYPE='                                           00147800
&ZMS           SETC  '&ZMS.&TYPE"'                                      00147900
&ZMS           SETC  '&ZMS "TYPE"'                                      00148000
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00148100
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00148200
.ZG46A         ANOP  ,                                                  00148300
.*------------------------------------------------------------------    00148400
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00148500
&ZCVAL         SETC ''           CLEAR ERROR KEY ACCUMULATOR            00148600
.ZG46A0        AIF   (K'&FUNCNAME LE 0).ZG46A1  OK                      00148700
&ZCVAL         SETC '&ZCVAL FUNCNAME'           INCORRECT KEY USED      00148800
.ZG46A1        AIF   (K'&FUNCADDR LE 0).ZG46A2  OK                      00148900
&ZCVAL         SETC '&ZCVAL FUNCADDR'           INCORRECT KEY USED      00149000
.ZG46A2        AIF   (K'&NUMFCODES LE 0).ZG46A3  OK                     00149100
&ZCVAL         SETC '&ZCVAL NUMFCODES'          INCORRECT KEY USED      00149200
.ZG46A3        AIF   (K'&FCODES LE 0).ZG46A4    OK                      00149300
&ZCVAL         SETC '&ZCVAL FCODES'             INCORRECT KEY USED      00149400
.ZG46A4        AIF   (K'&SOURCE LE 0).ZG46A5    OK                      00149500
&ZCVAL         SETC '&ZCVAL SOURCE'             INCORRECT KEY USED      00149600
.ZG46A5        AIF   (K'&ENTRYDATA LE 0).ZG46A6  OK                     00149700
&ZCVAL         SETC '&ZCVAL ENTRYDATA'          INCORRECT KEY USED      00149800
.ZG46A6        AIF   (K'&FUNCAMODE LE 0).ZG46A7  OK                     00149900
&ZCVAL         SETC '&ZCVAL FUNCAMODE'          INCORRECT KEY USED      00150000
.ZG46A7        AIF   (K'&ZCVAL LE 0).ZG46A8     OK                      00150100
&ZCVAL         SETC '&ZCVAL'(2,K'&ZCVAL-1)                              00150200
&ZMS           SETC  '"TYPE'                                            00150300
&ZMS           SETC  '&ZMS.=&TYPE"'                                     00150400
&ZMS           SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'               00150500
               MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'               00150600
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00150700
.ZG46A8        ANOP  ,                                                  00150800
.*----------------------------------------------------------------***   00150900
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00151000
               AIF   (N'&SSVTDATA LE 1).ZG48A   CK NUM                  00151100
&ZMS           SETC  '"SSVTDATA='                                       00151200
&ZMS           SETC  '&ZMS.&SSVTDATA"'                                  00151300
&ZMS           SETC  '&ZMS "SSVTDATA"'                                  00151400
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00151500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00151600
.ZG48A         ANOP  ,                                                  00151700
.*-------------------------------------------------------------------   00151800
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00151900
&ZXSSVTDATA    SETC  'INPUT'     SET IN/OUTPUT                          00152000
&XSSVTDATA     SETC  '&SSVTDATA(1)'             SET XVARIABLE           00152100
               AIF   (N'&SSVTDATA GT 1).ZG48B   MULTI                   00152200
&XSSVTDATA     SETC  '&SSVTDATA'                SET XVARIABLE           00152300
.ZG48B         AIF   (K'&SSVTDATA(1) GT 0).ZG48C                        00152400
&ZXSSVTDATA    SETC  ''          RESET IN/OUTPUT                        00152500
&ZMS           SETC  ' '                                                00152600
&ZMS           SETC  '&ZMS "SSVTDATA" KEY AND ITS'                      00152700
               MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                   00152800
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00152900
.ZG48C         ANOP  ,                                                  00153000
.*-------------------------------------------------------------------   00153100
.***AG.KCK01 NAME, RQD INPUT, KEYS -GPR NOT ALLOWED                     00153200
               AIF   (K'&ZXSSVTDATA LE 0).ZG48P  NOT I/O                00153300
               AIF   ('&XSSVTDATA'(1,1) NE '(').ZG48P                   00153400
&ZXSSVTDATA    SETC  ''          RESET IN/OUTPUT                        00153500
&ZMS           SETC  '"SSVTDATA='                                       00153600
&ZMS           SETC  '&ZMS.&SSVTDATA"'                                  00153700
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00153800
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00153900
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00154000
.ZG48P         ANOP  ,                                                  00154100
.*----------------------------------------------------------------***   00154200
.***AG.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00154300
&XRESERVE_LEN  SETC  ''          INITIALIZE XVARIABLE                   00154400
               AIF   (K'&TABLEN LE 0).ZG51C                             00154500
&ZXRESERVE_LEN                   SETC  'INPUT'  SET IN/OUTPUT           00154600
&XRESERVE_LEN  SETC  'TABLEN'    SET XVARIABLE                          00154700
&ZXTABLEN      SETC  'INPUT'     SET IN/OUTPUT                          00154800
&XTABLEN       SETC  '&TABLEN(1)'               SET XVARIABLE PARM      00154900
               AIF   (N'&TABLEN GT 1).ZG51A                             00155000
&XTABLEN       SETC  '&TABLEN'   SET XVARIABLE PARM                     00155100
.ZG51A         AIF   (N'&TABLEN LE 1).ZG51B     CK NUM                  00155200
&ZMS           SETC  '"TABLEN='                                         00155300
&ZMS           SETC  '&ZMS.&TABLEN"'                                    00155400
&ZMS           SETC  '&ZMS "TABLEN"'                                    00155500
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00155600
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00155700
.ZG51B         AIF   (K'&XTABLEN GT 0).ZG51C    ONE PARM                00155800
&ZXRESERVE_LEN                   SETC  ''       RESET IN/OUTPUT         00155900
&ZXTABLEN      SETC  ''          RESET IN/OUTPUT                        00156000
&ZMS           SETC  ' '                                                00156100
&ZMS           SETC  '&ZMS "TABLEN" KEY AND ITS'                        00156200
               MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                   00156300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00156400
.ZG51C         ANOP  ,                                                  00156500
.*----------------------------------------------------------------***   00156600
.***AG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00156700
               AIF   (K'&MAXFCODES LE 0).ZG52D  NO ME KEY               00156800
               AIF   (N'&MAXFCODES LE 1).ZG52A  CK NUM                  00156900
&ZMS           SETC  '"MAXFCODES='                                      00157000
&ZMS           SETC  '&ZMS.&MAXFCODES"'                                 00157100
&ZMS           SETC  '&ZMS "MAXFCODES"'                                 00157200
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00157300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00157400
.ZG52A         AIF   (K'&XRESERVE_LEN LE 0).ZG52B                       00157500
&ZMS           SETC  '"MAXFCODES'                                       00157600
&ZMS           SETC  '&ZMS.=&MAXFCODES"'                                00157700
&ZMS           SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'              00157800
&ZMS           SETC  '&ZMS "&XRESERVE_LEN"'                             00157900
               MNOTE 8,' &ZMS KEY.'                                     00158000
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00158100
               AGO   .ZG52D                                             00158200
.*                                                                      00158300
.ZG52B         ANOP  ,                                                  00158400
&ZXRESERVE_LEN                   SETC  'INPUT'  SET IN/OUTPUT           00158500
&XRESERVE_LEN  SETC  'MAXFCODES'                SET XVARIABLE           00158600
&ZXMAXFCODES   SETC  'INPUT'     SET IN/OUTPUT                          00158700
&XMAXFCODES    SETC  '&MAXFCODES(1)'            SET XVARIABLE PARM      00158800
               AIF   (N'&MAXFCODES GT 1).ZG52C                          00158900
&XMAXFCODES    SETC  '&MAXFCODES'               SET XVARIABLE PARM      00159000
.ZG52C         AIF   (K'&XMAXFCODES GT 0).ZG52D  ONE PARM               00159100
&ZXRESERVE_LEN                   SETC  ''       RESET IN/OUTPUT         00159200
&ZXMAXFCODES   SETC  ''          RESET IN/OUTPUT                        00159300
&ZMS           SETC  ' '                                                00159400
&ZMS           SETC  '&ZMS "MAXFCODES" KEY AND ITS'                     00159500
               MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                   00159600
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00159700
.ZG52D         ANOP  ,                                                  00159800
.*------------------------------------------------------------------    00159900
.***AG.KME4Y09 NAME, RQD INPUT, ME KEYS -CHECK IF KEY ENTERED           00160000
               AIF   (K'&XRESERVE_LEN GT 0).ZG53B                       00160100
&ZXRESERVE_LEN                   SETC  ''       RESET IN/OUTPUT         00160200
&ZXTABLEN      SETC  ''          RESET IN/OUTPUT                        00160300
&XRESERVE_LEN  SETC  ''          ENSURE NULL                            00160400
&XTABLEN       SETC  ''          ENSURE NULL                            00160500
&ZMS           SETC  'ONE OF THE FOLLOWING'                             00160600
&ZMS           SETC  '&ZMS MUTUALLY EXCLUSIVE KEY(S) IS'                00160700
&ZMS           SETC  '&ZMS REQUIRED:'                                   00160800
&ZMS           SETC  '&ZMS "TABLEN"'            VALID ME KEY            00160900
&ZMS           SETC  '&ZMS OR "MAXFCODES".'     VALID ME KEY            00161000
               MNOTE 8,' &ZMS '                                         00161100
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00161200
.ZG53B         ANOP  ,                                                  00161300
.*-------------------------------------------------------------------   00161400
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00161500
.ZG51ZY  AIF    ('&XRESERVE_LEN' NE 'TABLEN').ZG52ZY                    00161600
.*-------------------------------------------------------------------   00161700
.***AG.KCK01 NAME, RQD INPUT, ME KEYS -GPR NOT ALLOWED                  00161800
               AIF   (K'&ZXTABLEN LE 0).ZG51P   NOT I/O                 00161900
               AIF   ('&XTABLEN'(1,1) NE '(').ZG51P                     00162000
&ZXTABLEN      SETC  ''          RESET IN/OUTPUT                        00162100
&ZMS           SETC  '"TABLEN='                                         00162200
&ZMS           SETC  '&ZMS.&TABLEN"'                                    00162300
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00162400
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00162500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00162600
.ZG51P         ANOP  ,                                                  00162700
.*-------------------------------------------------------------------   00162800
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00162900
.ZG52ZY  AIF    ('&XRESERVE_LEN' NE 'MAXFCODES').ZG53ZY                 00163000
.*-------------------------------------------------------------------   00163100
.***AG.KCK01 NAME, RQD INPUT, ME KEYS -GPR NOT ALLOWED                  00163200
               AIF   (K'&ZXMAXFCODES LE 0).ZG52P  NOT I/O               00163300
               AIF   ('&XMAXFCODES'(1,1) NE '(').ZG52P                  00163400
&ZXMAXFCODES   SETC  ''          RESET IN/OUTPUT                        00163500
&ZMS           SETC  '"MAXFCODES='                                      00163600
&ZMS           SETC  '&ZMS.&MAXFCODES"'                                 00163700
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00163800
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00163900
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00164000
.ZG52P         ANOP  ,                                                  00164100
.*-------------------------------------------------------------------   00164200
.***AG.KMEKY15 NAME, RQD INPUT, ME KEYS -END                            00164300
.ZG53ZY        ANOP ,            END MUTUALLY EXCLUSIVE KEYS            00164400
.*-------------------------------------------------------------------   00164500
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00164600
.ZG54          ANOP  ,                                                  00164700
&ZTLC          SETC 'COPY'                                              00164800
               AIF   ('&TYPE(1)' NE '&ZTLC').ZG59                       00164900
&XTYPE         SETC  'COPY'      SET KEYWORD                            00165000
               AIF   (N'&TYPE LE 1).ZG54A       CK NUM                  00165100
&ZMS           SETC  '"TYPE='                                           00165200
&ZMS           SETC  '&ZMS.&TYPE"'                                      00165300
&ZMS           SETC  '&ZMS "TYPE"'                                      00165400
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00165500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00165600
.ZG54A         ANOP  ,                                                  00165700
.*------------------------------------------------------------------    00165800
.***AG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00165900
&ZCVAL         SETC ''           CLEAR ERROR KEY ACCUMULATOR            00166000
.ZG54A0        AIF   (K'&TABLEN LE 0).ZG54A1    OK                      00166100
&ZCVAL         SETC '&ZCVAL TABLEN'             INCORRECT KEY USED      00166200
.ZG54A1        AIF   (K'&FUNCNAME LE 0).ZG54A2  OK                      00166300
&ZCVAL         SETC '&ZCVAL FUNCNAME'           INCORRECT KEY USED      00166400
.ZG54A2        AIF   (K'&FUNCADDR LE 0).ZG54A3  OK                      00166500
&ZCVAL         SETC '&ZCVAL FUNCADDR'           INCORRECT KEY USED      00166600
.ZG54A3        AIF   (K'&NUMFCODES LE 0).ZG54A4  OK                     00166700
&ZCVAL         SETC '&ZCVAL NUMFCODES'          INCORRECT KEY USED      00166800
.ZG54A4        AIF   (K'&FCODES LE 0).ZG54A5    OK                      00166900
&ZCVAL         SETC '&ZCVAL FCODES'             INCORRECT KEY USED      00167000
.ZG54A5        AIF   (K'&ENTRYDATA LE 0).ZG54A6  OK                     00167100
&ZCVAL         SETC '&ZCVAL ENTRYDATA'          INCORRECT KEY USED      00167200
.ZG54A6        AIF   (K'&FUNCAMODE LE 0).ZG54A7  OK                     00167300
&ZCVAL         SETC '&ZCVAL FUNCAMODE'          INCORRECT KEY USED      00167400
.ZG54A7        AIF   (K'&MAXFCODES LE 0).ZG54A8  OK                     00167500
&ZCVAL         SETC '&ZCVAL MAXFCODES'          INCORRECT KEY USED      00167600
.ZG54A8        AIF   (K'&ZCVAL LE 0).ZG54A9     OK                      00167700
&ZCVAL         SETC '&ZCVAL'(2,K'&ZCVAL-1)                              00167800
&ZMS           SETC  '"TYPE'                                            00167900
&ZMS           SETC  '&ZMS.=&TYPE"'                                     00168000
&ZMS           SETC  '&ZMS DOES NOT ALLOW THE USE OF THE'               00168100
               MNOTE 8,' &ZMS FOLLOWING KEY(S) "&ZCVAL".'               00168200
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00168300
.ZG54A9        ANOP  ,                                                  00168400
.*----------------------------------------------------------------***   00168500
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00168600
               AIF   (N'&SSVTDATA LE 1).ZG56A   CK NUM                  00168700
&ZMS           SETC  '"SSVTDATA='                                       00168800
&ZMS           SETC  '&ZMS.&SSVTDATA"'                                  00168900
&ZMS           SETC  '&ZMS "SSVTDATA"'                                  00169000
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00169100
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00169200
.ZG56A         ANOP  ,                                                  00169300
.*-------------------------------------------------------------------   00169400
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00169500
&ZXSSVTDATA    SETC  'INPUT'     SET IN/OUTPUT                          00169600
&XSSVTDATA     SETC  '&SSVTDATA(1)'             SET XVARIABLE           00169700
               AIF   (N'&SSVTDATA GT 1).ZG56B   MULTI                   00169800
&XSSVTDATA     SETC  '&SSVTDATA'                SET XVARIABLE           00169900
.ZG56B         AIF   (K'&SSVTDATA(1) GT 0).ZG56C                        00170000
&ZXSSVTDATA    SETC  ''          RESET IN/OUTPUT                        00170100
&ZMS           SETC  ' '                                                00170200
&ZMS           SETC  '&ZMS "SSVTDATA" KEY AND ITS'                      00170300
               MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                   00170400
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00170500
.ZG56C         ANOP  ,                                                  00170600
.*-------------------------------------------------------------------   00170700
.***AG.KCK01 NAME, RQD INPUT, KEYS -GPR NOT ALLOWED                     00170800
               AIF   (K'&ZXSSVTDATA LE 0).ZG56P  NOT I/O                00170900
               AIF   ('&XSSVTDATA'(1,1) NE '(').ZG56P                   00171000
&ZXSSVTDATA    SETC  ''          RESET IN/OUTPUT                        00171100
&ZMS           SETC  '"SSVTDATA='                                       00171200
&ZMS           SETC  '&ZMS.&SSVTDATA"'                                  00171300
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00171400
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00171500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00171600
.ZG56P         ANOP  ,                                                  00171700
.*----------------------------------------------------------------***   00171800
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00171900
               AIF   (N'&SOURCE LE 1).ZG57A     CK NUM                  00172000
&ZMS           SETC  '"SOURCE='                                         00172100
&ZMS           SETC  '&ZMS.&SOURCE"'                                    00172200
&ZMS           SETC  '&ZMS "SOURCE"'                                    00172300
               MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                00172400
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00172500
.ZG57A         ANOP  ,                                                  00172600
.*-------------------------------------------------------------------   00172700
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00172800
&ZXSOURCE      SETC  'INPUT'     SET IN/OUTPUT                          00172900
&XSOURCE       SETC  '&SOURCE(1)'               SET XVARIABLE           00173000
               AIF   (N'&SOURCE GT 1).ZG57B     MULTI                   00173100
&XSOURCE       SETC  '&SOURCE'   SET XVARIABLE                          00173200
.ZG57B         AIF   (K'&SOURCE(1) GT 0).ZG57C                          00173300
&ZXSOURCE      SETC  ''          RESET IN/OUTPUT                        00173400
&ZMS           SETC  ' '                                                00173500
&ZMS           SETC  '&ZMS "SOURCE" KEY AND ITS'                        00173600
               MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                   00173700
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00173800
.ZG57C         ANOP  ,                                                  00173900
.*-------------------------------------------------------------------   00174000
.***AG.KCK01 NAME, RQD INPUT, KEYS -GPR NOT ALLOWED                     00174100
               AIF   (K'&ZXSOURCE LE 0).ZG57P   NOT I/O                 00174200
               AIF   ('&XSOURCE'(1,1) NE '(').ZG57P                     00174300
&ZXSOURCE      SETC  ''          RESET IN/OUTPUT                        00174400
&ZMS           SETC  '"SOURCE='                                         00174500
&ZMS           SETC  '&ZMS.&SOURCE"'                                    00174600
&ZMS           SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'          00174700
               MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                  00174800
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00174900
.ZG57P         ANOP  ,                                                  00175000
.*------------------------------------------------------------------    00175100
.***AG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00175200
.ZG59          ANOP  ,                                                  00175300
&ZXTYPE        SETC  'INPUT'     SET IN/OUTPUT                          00175400
               AIF   (K'&XTYPE GT 0).ZG59E      VALID ARG               00175500
               AIF   (T'&TYPE EQ 'O').ZG59D     OMITTED                 00175600
&ZASYSLNDX     SETA  0                                                  00175700
.ZG59A         ANOP  ,           POSITIONAL MACRO KEY                   00175800
&ZASYSLNDX     SETA  &ZASYSLNDX+1                                       00175900
               AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG59C                   00176000
&ZTLC          SETC 'TYPE'                                              00176100
               AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG59A          00176200
.ZG59B         ANOP  ,                                                  00176300
&ZXTYPE        SETC  ''          RESET IN/OUTPUT                        00176400
&ZMS           SETC  'THE "TYPE" KEY'                                   00176500
&ZMS           SETC  '&ZMS MUST CONTAIN ONE'                            00176600
               MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                   00176700
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00176800
               AGO   .ZG59E                                             00176900
.ZG59C         ANOP  ,                                                  00177000
&ZXTYPE        SETC  ''          RESET IN/OUTPUT                        00177100
&ZMS           SETC  '"TYPE='                                           00177200
&ZMS           SETC  '&ZMS.&TYPE"'                                      00177300
&ZMS           SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '          00177400
&ZMS           SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                00177500
&ZMS           SETC  '&ZMS "LIST",'                                     00177600
&ZMS           SETC  '&ZMS "INITIAL",'                                  00177700
&ZMS           SETC  '&ZMS "ENTRY",'                                    00177800
&ZMS           SETC  '&ZMS "FINAL",'                                    00177900
&ZMS           SETC  '&ZMS "SET",'                                      00178000
&ZMS           SETC  '&ZMS "RESERVE",'                                  00178100
&ZMS           SETC  '&ZMS OR "COPY".'                                  00178200
               MNOTE 8,' &ZMS '                                         00178300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00178400
               AGO   .ZG59E                                             00178500
.ZG59D         ANOP  ,                                                  00178600
&XTYPE         SETC  'LIST'      SET DEFAULT KEYWORD                    00178700
.ZG59E         ANOP  ,                                                  00178800
.*------------------------------------------------------------------    00178900
.***AG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00179000
               AIF   (K'&TYPE(1) GT 0).ZG59F    PARM                    00179100
&XTYPE         SETC  ''          ENSURE NULL KEYWORD                    00179200
&ZXTYPE        SETC  ''          RESET IN/OUTPUT                        00179300
&ZMS           SETC  'THE'                                              00179400
&ZMS           SETC  '&ZMS "TYPE" KEY AND ITS'                          00179500
&ZMS           SETC  '&ZMS ARGUMENT ARE REQUIRED.'                      00179600
&ZMS           SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                00179700
&ZMS           SETC  '&ZMS "LIST",'                                     00179800
&ZMS           SETC  '&ZMS "INITIAL",'                                  00179900
&ZMS           SETC  '&ZMS "ENTRY",'                                    00180000
&ZMS           SETC  '&ZMS "FINAL",'                                    00180100
&ZMS           SETC  '&ZMS "SET",'                                      00180200
&ZMS           SETC  '&ZMS "RESERVE",'                                  00180300
&ZMS           SETC  '&ZMS OR "COPY".'                                  00180400
               MNOTE 8,' &ZMS '                                         00180500
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00180600
.ZG59F         ANOP  ,                                                  00180700
.******************************************************************     00180800
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00180900
.******************************************************************     00181000
               ACTR  10000                                              00181100
.*----------------------------------------------------------------***   00181200
.***AH.P02 EXTRA POSITIONALS                                            00181300
               AIF   (N'&SYSLIST LE 0).ZGLISTX  NO EXTRAS               00181400
               AIF   (N'&SYSLIST NE 2).ZGLISTX1  NOT NULL               00181500
               AIF   ('&SYSLIST(1)' NE '').ZGLISTX1  NOT NULL           00181600
               AIF   ('&SYSLIST(2)' EQ '').ZGLISTX  NOT NULL            00181700
.ZGLISTX1      ANOP  ,                                                  00181800
&ZCVAL         SETC  ''          ERROR FIELD                            00181900
&ZAWRK         SETA  0           POSITIONAL NUMBER                      00182000
.ZGLIST2       ANOP  ,                                                  00182100
&ZAWRK         SETA  &ZAWRK+1    NEXT POSITIONAL                        00182200
               AIF   (&ZAWRK GT N'&SYSLIST).ZGLIST3  DONE               00182300
&ZCVAL         SETC '&ZCVAL,&SYSLIST(&ZAWRK)'   EXTRA                   00182400
               AGO   .ZGLIST2                                           00182500
.*                                                                      00182600
.ZGLIST3       ANOP  ,                                                  00182700
&ZCVAL         SETC '&ZCVAL'(2,K'&ZCVAL-1)      STRIP COMMA             00182800
&ZMS           SETC  'POSITIONAL ARGUMENT(S),'                          00182900
&ZMS           SETC  '&ZMS "&ZCVAL"'                                    00183000
&ZMS           SETC  '&ZMS CANNOT BE USED.'                             00183100
&ZMS           SETC  '&ZMS NO POSITIONAL ARGUMENTS'                     00183200
               MNOTE 8,' &ZMS ARE ALLOWED.'                             00183300
&ZMACRET       SETA  8           SET MACRO ERROR RETURN CODE            00183400
.ZGLISTX       ANOP  ,                                                  00183500
&ZASYSLNDX     SETA  0                                                  00183600
.*******************************************************************    00183700
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       00183800
.*******************************************************************    00183900
               AIF   (&ZMACRET NE 0).ZLX2       ERROR DETECTED          00184000
.*******************************************************************    00184100
.***AE.01  START OF IEFSSVTI MACRO CODE                                 00184200
.*******************************************************************    00184300
               LCLC  &M0M0001                 NAME                      00184400
&M0M0001       SETC  '&XLABEL'                SET NAME                  00184500
               AIF   (K'&XLABEL NE 0).XLAB2                             00184600
&M0M0001       SETC  'M00M&SYSNDX'            DEFAULT NAME              00184700
.*                                                                      00184800
.XLAB2         ANOP  ,                                                  00184900
&M0M0001 DS    0B                             IEFSSVTI-1                00185000
.*******************************************************************    00185100
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              00185200
.*******************************************************************    00185300
              PUSH  PRINT                                               00185400
               AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON         00185500
               PRINT OFF         ++ PR01                                00185600
               AGO   .ZPRNTXX                                           00185700
.ZPRINTX       PRINT ON                                                 00185800
.ZPRNTXX       ANOP  ,                                                  00185900
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00186000
.********************************************************************** 00186100
.*  External macro variables                                            00186200
.********************************************************************** 00186300
         GBLB  &IEFSSVTI_MAPPING_DONE    Flag used to determine        +00186400
                                         when to define table maps      00186500
         GBLB  &IEFSSVTI_INITIAL_SEEN   Flag to tell if we             +00186600
                                         are in an INITIAL/FINAL group  00186700
         GBLB  &IEFSSVTI_ENTRY_SEEN     Flag to remember if a          +00186800
                                         TYPE=ENTRY is coded            00186900
         GBLA  &IEFSSVTI_#FRTN          Number of function routines    +00187000
                                         in a table                     00187100
         GBLC  &IEFSSVTI_TABLE_NAME     Remember name of table          00187200
         GBLA  &IEFSSVTI_TABLE_LENGTH   Length of table                 00187300
         GBLC  &IEFSSVTI_#FRTN_NAME     Remembers name of variable     +00187400
                                         for number of function        +00187500
                                         routines between invocations   00187600
         GBLC  &IEFSSVTI_TABLEN_NAME    Remembers name of table length +00187700
                                         variable between invocations   00187800
.********************************************************************** 00187900
.*  Internal macro variables                                            00188000
.********************************************************************** 00188100
         LCLA  &IEFSSVTI_HEADLEN        Length of table header          00188200
         LCLA  &IEFSSVTI_ENTRY_HEADLEN  Length of table entry header    00188300
         LCLA  &FCODINDX                Index over function code list   00188400
         LCLC  &TABLEN_STRING           String containing expression   +00188500
                                          for length of table           00188600
         LCLC  &WORKC                   Work string (character)         00188700
         LCLA  &WORKA                   Work string (arithmetic)        00188800
         LCLA  &ZELO                    Index for invocation echo       00188900
         LCLA  &ZECOL                   Index for invocation echo       00189000
.*                                                                      00189100
&IEFSSVTI_HEADLEN SETA 12               Length of table header          00189200
&IEFSSVTI_ENTRY_HEADLEN SETA 12         Length of table entry header    00189300
.********************************************************************** 00189400
.*  Perform TYPE-specific actions                                       00189500
.********************************************************************** 00189600
         AIF   ('&XTYPE' EQ 'LIST').TYPELIST                            00189700
         AIF   ('&XTYPE' EQ 'INITIAL').TYPEINITIAL                      00189800
         AIF   ('&XTYPE' EQ 'ENTRY').TYPEENTRY                          00189900
         AIF   ('&XTYPE' EQ 'FINAL').TYPEFINAL                          00190000
         AIF   ('&XTYPE' EQ 'SET').TYPESET                              00190100
         AIF   ('&XTYPE' EQ 'RESERVE').TYPERESERVE                      00190200
         AIF   ('&XTYPE' EQ 'COPY').TYPECOPY                            00190300
.TYPELIST  ANOP                                                         00190400
.********************************************************************** 00190500
.*  Generate table mappings if necessary                                00190600
.********************************************************************** 00190700
         AIF   (&IEFSSVTI_MAPPING_DONE EQ 1).NOMAP                      00190800
.********************************************************************** 00190900
.*  Map table header                                                    00191000
.********************************************************************** 00191100
VTI_HEADER  DSECT                                                       00191200
               DS    0F                                                 00191300
VTIH_ID        DS    CL4                                                00191400
VTIH_TABLEN    DS    H                                                  00191500
VTIH_VERSION   DS    H                                                  00191600
VTIH_NUM_FRTNS DS    H                                                  00191700
               DS    CL2                                                00191800
VTIH_FROUTINE_DATA  EQU   *                                             00191900
*                                                                       00192000
.********************************************************************** 00192100
.*  Map table entry                                                     00192200
.********************************************************************** 00192300
VTI_ENTRY   DSECT                                                       00192400
VTIE_HEADER    DS    0F                                                 00192500
VTIE_FUNCNAME  DS    0CL8                                               00192600
               DS    CL4                                                00192700
VTIE_FUNCADDR  DS    CL4                                                00192800
VTIE_MAX_NUM_FCODES DS    H                                             00192900
VTIE_NUM_FCODES     DS    H                                             00193000
VTIE_FCODES    EQU   *                                                  00193100
*                                                                       00193200
.********************************************************************** 00193300
.*  Indicate mappings generated                                    @P6C 00193400
.********************************************************************** 00193500
&IEFSSVTI_MAPPING_DONE    SETB  1                                       00193600
.*                                                                      00193700
.NOMAP   ANOP                                                           00193800
         AGO   .IEFSSVTIEND                                             00193900
.TYPEINITIAL   ANOP                                                     00194000
.********************************************************************** 00194100
.*  Check for invocation errors                                    @P5A 00194200
.********************************************************************** 00194300
         AIF   (&IEFSSVTI_INITIAL_SEEN EQ 0).INITIALIZETABLE       @P5A 00194400
         MNOTE 8,'ONLY ONE TYPE=INITIAL PERMITTED IN STATIC TABLE' @P5A 00194500
&ZMACRET SETA  8                                                   @P5A 00194600
         AGO   .INITIALEND                                         @P5A 00194700
.*                                                                      00194800
.INITIALIZETABLE ANOP                                                   00194900
.********************************************************************** 00195000
.*  Initialize table values                                             00195100
.********************************************************************** 00195200
&IEFSSVTI_INITIAL_SEEN    SETB  1                                       00195300
&IEFSSVTI_#FRTN           SETA  0                                       00195400
&IEFSSVTI_TABLE_NAME      SETC  '&XSSVTDATA'                            00195500
&IEFSSVTI_#FRTN_NAME      SETC  '&XSSVTDATA'.'_#FRTN'                   00195600
&IEFSSVTI_TABLEN_NAME     SETC  '&XTABLEN'                              00195700
&IEFSSVTI_TABLE_LENGTH    SETA  &IEFSSVTI_HEADLEN                       00195800
.********************************************************************** 00195900
.*  Begin table mapping                                                 00196000
.********************************************************************** 00196100
            CNOP  0,4                                                   00196200
            B     &IEFSSVTI_TABLE_NAME._END  Branch around table        00196300
&XSSVTDATA  DS    0F                                                    00196400
            DC    CL4'VTIT'                                             00196500
            DC    AL2(&IEFSSVTI_TABLEN_NAME)                            00196600
            DC    XL2'0001'                                             00196700
            DC    AL2(&IEFSSVTI_#FRTN_NAME)                             00196800
            DC    XL2'0000'                                             00196900
.INITIALEND ANOP                                                   @P5A 00197000
         AGO   .IEFSSVTIEND                                             00197100
.*                                                                      00197200
.TYPEENTRY     ANOP                                                     00197300
&IEFSSVTI_ENTRY_SEEN      SETB  1                                       00197400
.********************************************************************** 00197500
.*  Check for invocation errors                                         00197600
.********************************************************************** 00197700
         AIF   (&IEFSSVTI_INITIAL_SEEN EQ 1).CHECKNUMFCODES             00197800
         MNOTE 8,'TYPE=INITIAL MUST PRECEDE TYPE=ENTRY'                 00197900
&ZMACRET SETA  8                                                        00198000
.*                                                                      00198100
.CHECKNUMFCODES  ANOP                                                   00198200
         AIF   (N'&FCODES LE &XNUMFCODES).CHECKENTRYRETCODE             00198300
&WORKC   SETC  'NUMFCODES MUST BE GREATER THAN OR EQUAL TO NUMBER OF '  00198400
&WORKC   SETC  '&WORKC'.'FUNCTION CODES SPECIFIED WITH FCODES'          00198500
         MNOTE 8,' &WORKC'                                              00198600
&ZMACRET SETA  8                                                        00198700
.*                                                                      00198800
.CHECKENTRYRETCODE  ANOP                                                00198900
         AIF   (&ZMACRET NE 0).NOENTRY                                  00199000
.********************************************************************** 00199100
.*  Generate table entry                                                00199200
.********************************************************************** 00199300
         AIF   (N'&FUNCNAME LE 0).NOFUNCNAME                            00199400
         DC    CL8'&XFUNCNAME'                                          00199500
         AGO   .ENTRYFCODES                                        @P2A 00199600
.NOFUNCNAME  ANOP                                                       00199700
         DC    XL8'0000000000000000'                                    00199800
.ENTRYFCODES ANOP                                                  @P2A 00199900
         DC    AL2(&XNUMFCODES)                                         00200000
&WORKA   SETA  N'&FCODES                                                00200100
         DC    AL2(&WORKA)                                              00200200
.* Loop over function codes specified                                   00200300
&FCODINDX  SETA  1                                                      00200400
.CODELOOP  ANOP                                                         00200500
         AIF   (&FCODINDX GT N'&FCODES).CODELOOPDONE                    00200600
         DC    AL1(&FCODES(&FCODINDX))                                  00200700
&FCODINDX  SETA  &FCODINDX+1                                            00200800
         AGO   .CODELOOP                                                00200900
.CODELOOPDONE  ANOP                                                     00201000
.* If max number of codes greater than actual, pad to reserve room      00201100
         AIF   (N'&FCODES GE &XNUMFCODES).NOPAD                         00201200
&FCODINDX  SETA  1                                                      00201300
.PADLOOP ANOP                                                           00201400
         AIF   (&FCODINDX GT &XNUMFCODES-N'&FCODES).PADDONE             00201500
         DC    XL1'00'                                                  00201600
&FCODINDX  SETA  &FCODINDX+1                                            00201700
         AGO   .PADLOOP                                                 00201800
.PADDONE ANOP                                                           00201900
.NOPAD   ANOP                                                           00202000
.********************************************************************** 00202100
.*  Update table values                                                 00202200
.********************************************************************** 00202300
&IEFSSVTI_#FRTN  SETA  &IEFSSVTI_#FRTN+1                                00202400
&IEFSSVTI_TABLE_LENGTH  SETA  &IEFSSVTI_TABLE_LENGTH+&IEFSSVTI_ENTRY_HE+00202500
               ADLEN+&XNUMFCODES                                        00202600
.NOENTRY ANOP                                                           00202700
         AGO   .IEFSSVTIEND                                             00202800
.TYPEFINAL     ANOP                                                     00202900
.********************************************************************** 00203000
.*  Check for invocation errors                                         00203100
.********************************************************************** 00203200
         AIF   (&IEFSSVTI_INITIAL_SEEN EQ 1).CHECKENTRYSEEN             00203300
         MNOTE 8,'TYPE=INITIAL MUST PRECEDE TYPE=FINAL'                 00203400
&ZMACRET SETA  8                                                        00203500
.*                                                                      00203600
.CHECKENTRYSEEN  ANOP                                                   00203700
         AIF   (&IEFSSVTI_ENTRY_SEEN EQ 1).FINALTABLEVALUES             00203800
         MNOTE 8,' TABLE MUST INCLUDE AT LEAST ONE TYPE=ENTRY'          00203900
&ZMACRET SETA  8                                                        00204000
.*                                                                      00204100
.FINALTABLEVALUES  ANOP                                                 00204200
.********************************************************************** 00204300
.*  Update table values                                                 00204400
.********************************************************************** 00204500
&IEFSSVTI_INITIAL_SEEN  SETB  0                                         00204600
&IEFSSVTI_ENTRY_SEEN    SETB  0                                         00204700
         AIF   (&ZMACRET NE 0).NOFINAL                                  00204800
.********************************************************************** 00204900
.*  Terminate table and generate necessary constants                    00205000
.********************************************************************** 00205100
&IEFSSVTI_TABLEN_NAME EQU  &IEFSSVTI_TABLE_LENGTH                       00205200
&IEFSSVTI_#FRTN_NAME  EQU  &IEFSSVTI_#FRTN                              00205300
&IEFSSVTI_TABLE_NAME._END  DS    0F                                     00205400
.NOFINAL ANOP                                                           00205500
         AGO   .IEFSSVTIEND                                             00205600
.TYPESET       ANOP                                                     00205700
.********************************************************************** 00205800
.*  Check for invocation errors                                         00205900
.********************************************************************** 00206000
         AIF   (&IEFSSVTI_INITIAL_SEEN EQ 0).PROCESSSET                 00206100
         MNOTE 8,'TYPE=SET CANNOT BE USED WITHIN STATIC TABLE'          00206200
&ZMACRET SETA  8                                                        00206300
.*                                                                      00206400
.PROCESSSET  ANOP                                                       00206500
         AIF   (&ZMACRET NE 0).NOSET                                    00206600
.********************************************************************** 00206700
.*  Locate target entry                                                 00206800
.********************************************************************** 00206900
         CNOP  0,4                                                      00207000
         LA    1,&XSOURCE                                               00207100
         SR    15,15                                                    00207200
         ICM   15,3,VTIH_NUM_FRTNS-VTI_HEADER(1)                        00207300
         AIF   ('&XENTRYDATA'(1,1) NE '(').EDATANOTREG                  00207400
&WORKC   SETC  '&XENTRYDATA'(2,K'&XENTRYDATA-2)                         00207500
         LR    0,&WORKC                                                 00207600
         AGO   .EDATACOMPARE                                            00207700
.EDATANOTREG   ANOP                                                     00207800
&WORKC   SETC  '&XENTRYDATA'(1,1)                                       00207900
         AIF   (T'&WORKC NE 'N').EDATANOTNUM                            00208000
         LA    0,&XENTRYDATA                                            00208100
         AGO   .EDATACOMPARE                                            00208200
.EDATANOTNUM   ANOP                                                     00208300
         L     0,&XENTRYDATA                                            00208400
.EDATACOMPARE  ANOP                                                     00208500
         CR    15,0                                                     00208600
         BL    VTINOSET&SYSNDX                                          00208700
         LA    1,VTIH_FROUTINE_DATA-VTI_HEADER(1)                       00208800
         USING VTI_ENTRY,1                                              00208900
         LA    15,1                                                     00209000
VTIEDLST&SYSNDX  DS  0H                                                 00209100
         CR    15,0                                                     00209200
         BE    VTIEDLEND&SYSNDX                                         00209300
         SR    14,14                                                    00209400
         ICM   14,3,VTIE_MAX_NUM_FCODES                                 00209500
         AR    1,14                                                     00209600
&WORKC   SETC  '&IEFSSVTI_ENTRY_HEADLEN'.'(1)'                          00209700
         LA    1,&WORKC                                                 00209800
         LA    15,1(15)                                                 00209900
         B     VTIEDLST&SYSNDX                                          00210000
VTIEDLEND&SYSNDX  DS  0H                                                00210100
         DROP  1                                                        00210200
         LA    15,&XSOURCE                                              00210300
         SR    1,15                                                     00210400
         LA    15,&XSSVTDATA                                            00210500
         AR    1,15                                                     00210600
         USING VTI_ENTRY,1                                              00210700
.********************************************************************** 00210800
.*  Set function routine data (name or address), if requested           00210900
.********************************************************************** 00211000
         AIF   (N'&FUNCNAME LE 0).SETNOFUNCNAME                         00211100
         MVC   VTIE_FUNCNAME(8),&XFUNCNAME                              00211200
         AGO   .SETFCODE                                                00211300
.SETNOFUNCNAME  ANOP                                                    00211400
         AIF   (N'&FUNCADDR LE 0).SETNOFUNCADDR                         00211500
         MVC   VTIE_FUNCNAME(4),=X'00000000'                            00211600
         MVC   VTIE_FUNCADDR(4),&XFUNCADDR                              00211700
         AIF   (N'&FUNCAMODE LE 0).SETNOAMODE                           00211800
         AIF   ('&XFUNCAMODE' EQ '24').SETAMODE24                       00211900
         OC    VTIE_FUNCADDR(4),=X'80000000'                            00212000
         AGO   .SETFCODE                                                00212100
.SETAMODE24     ANOP                                                    00212200
         NC    VTIE_FUNCADDR(4),=X'7FFFFFFF'                            00212300
         AGO   .SETFCODE                                                00212400
.SETNOAMODE     ANOP                                                    00212500
.SETNOFUNCADDR  ANOP                                                    00212600
.SETFCODE       ANOP                                                    00212700
.********************************************************************** 00212800
.*  Set function code data, if requested                                00212900
.********************************************************************** 00213000
         AIF   (N'&FCODES LE 0).SETNOFCODEDATA                          00213100
&WORKA   SETA  N'&FCODES                                                00213200
         LA    15,&WORKA                                                00213300
         SR    0,0                                                      00213400
         ICM   0,3,VTIE_MAX_NUM_FCODES                                  00213500
         CR    15,0                                                     00213600
         BH    VTINOFCODE&SYSNDX                                        00213700
&FCODINDX  SETA  1                                                      00213800
.SETCODELOOP  ANOP                                                      00213900
         AIF   (&FCODINDX GT N'&FCODES).SETCODELOOPDONE                 00214000
         MVI   VTIE_FCODES+(&FCODINDX-1)*1,&FCODES(&FCODINDX)           00214100
&FCODINDX  SETA  &FCODINDX+1                                            00214200
         AGO   .SETCODELOOP                                             00214300
.SETCODELOOPDONE  ANOP                                                  00214400
         STCM  15,3,VTIE_NUM_FCODES                                @P1A 00214500
VTINOFCODE&SYSNDX  DS  0H                                               00214600
.SETNOFCODEDATA  ANOP                                                   00214700
         DROP  1                                                        00214800
VTINOSET&SYSNDX  DS  0H                                                 00214900
.NOSET   ANOP                                                           00215000
         AGO   .IEFSSVTIEND                                             00215100
.TYPERESERVE   ANOP                                                     00215200
.********************************************************************** 00215300
.*  Check for invocation errors                                         00215400
.********************************************************************** 00215500
         AIF   (&IEFSSVTI_INITIAL_SEEN EQ 0).PROCESSRESERVE             00215600
         MNOTE 8,'TYPE=RESERVE CANNOT BE USED WITHIN STATIC TABLE'      00215700
&ZMACRET SETA  8                                                        00215800
.*                                                                      00215900
.PROCESSRESERVE  ANOP                                                   00216000
         AIF   (&ZMACRET NE 0).NORESERVE                                00216100
.********************************************************************** 00216200
.*  Generate instructions to reserve storage.  If MAXFCODES was         00216300
.*  specified, reserve the maximum amount of storage assuming one       00216400
.*  function routine per 1-byte function code.                          00216500
.********************************************************************** 00216600
         AIF   (N'&TABLEN LE 0).MAXFCODES                               00216700
&XSSVTDATA DS  CL(&XTABLEN)                                             00216800
         AGO   .RESERVEDONE                                             00216900
.MAXFCODES     ANOP                                                     00217000
.* Reserve maximum needed storage                                       00217100
&WORKC   SETC  '&IEFSSVTI_HEADLEN'.'+'.'&XMAXFCODES'.'*'                00217200
&WORKC   SETC  '&WORKC'.'('.'&IEFSSVTI_ENTRY_HEADLEN'.'+1*1)'           00217300
&XSSVTDATA DS  CL(&WORKC)                                               00217400
.RESERVEDONE   ANOP                                                     00217500
.NORESERVE     ANOP                                                     00217600
         AGO   .IEFSSVTIEND                                             00217700
.TYPECOPY      ANOP                                                     00217800
.********************************************************************** 00217900
.*  Check for invocation errors                                         00218000
.********************************************************************** 00218100
         AIF   (&IEFSSVTI_INITIAL_SEEN EQ 0).PROCESSCOPY                00218200
         MNOTE 8,'TYPE=COPY CANNOT BE USED WITHIN STATIC TABLE'         00218300
&ZMACRET SETA  8                                                        00218400
.*                                                                      00218500
.PROCESSCOPY   ANOP                                                     00218600
         AIF   (&ZMACRET NE 0).NOCOPY                                   00218700
.********************************************************************** 00218800
.*  Generate executable code to copy table using MVCL                   00218900
.********************************************************************** 00219000
         CNOP  0,4                                                      00219100
         LA    14,&XSOURCE                                              00219200
         SR    15,15                                                    00219300
         ICM   15,3,VTIH_TABLEN-VTI_HEADER(14)                          00219400
         LA    0,&XSSVTDATA                                             00219500
         LR    1,15                                                     00219600
         MVCL  0,14                                                     00219700
.NOCOPY        ANOP                                                     00219800
         AGO   .IEFSSVTIEND                                             00219900
.IEFSSVTIEND   ANOP                                                     00220000
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00220100
.********************************************************************   00220200
.***AL.A01  INTERNAL ARRAY TO PRODUCE FORMATTED CODE                    00220300
.********************************************************************   00220400
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       00220500
                      LCLA  &ZOPN1         INVOCATION INDEX             00220600
                      LCLC  &ZOPL(4095)    LABEL                        00220700
                      LCLC  &ZOPO(4095)    OPERATION                    00220800
                      LCLC  &ZOPV(4095)    VALUE                        00220900
                      LCLC  &ZOPD(4095)    DESCRIPTION                  00221000
.*                                                                      00221100
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     00221200
.*******************************************************************    00221300
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               00221400
.*******************************************************************    00221500
                      ACTR  10000                                       00221600
.*                                                                      00221700
                      LCLA  &ZLC           COLUMN POSITION              00221800
                      LCLA  &ZOPX          LIST TABLE INDEX             00221900
                      LCLC  &ZLL           LABEL                        00222000
                      LCLC  &ZLOP          OPERATION                    00222100
                      LCLC  &ZLV           VALUE                        00222200
                      LCLC  &ZLD           DESCRIPTION                  00222300
.*                                                                      00222400
&ZOPX                 SETA  1                                           00222500
.*******************************************************************    00222600
.***AP.X01  FORMAT GENERATED CODE                                       00222700
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            00222800
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00222900
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00223000
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00223100
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00223200
                      AIF   (K'&ZLD LE 0).ZL51                          00223300
&ZLC                  SETA  35             COMMENT COLUMN               00223400
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   00223500
&ZLC                  SETA  33             COMMENT COLUMN               00223600
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  00223700
&ZLV                  SETC  '&ZLV'.' '                                  00223800
                      AGO   .ZL31                                       00223900
.*                                                                      00224000
.ZL41                 ANOP  ,                                           00224100
&ZLV                  SETC  '&ZLV'.' '                                  00224200
.ZL51                 ANOP  ,                                           00224300
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00224400
.*                                                                      00224500
&ZLL     &ZLOP &ZLV                                                     00224600
.*                                                                      00224700
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00224800
                      AGO   .ZL21          CONTINUE LOOPING             00224900
.*                                                                      00225000
.ZLX1                 ANOP  ,                                           00225100
.*******************************************************************    00225200
.***AP.X02  END OF IEFSSVTI MACRO                                       00225300
&ZIEFSSVTI            SETC  'YES'          SET IEFSSVTI USED            00225400
         POP   PRINT                                                    00225500
*                                            IEFSSVTI-1                 00225600
         SPACE 1                                                        00225700
.ZLX2                 ANOP  ,                                           00225800
         MEND                                                           00225900
**********************************************************************/ 00226000
*/**** START OF SPECIFICATIONS **************************************** 00226100
*                                                                     * 00226200
*                                                                     * 00226300
*01* MACRO NAME:  IEFSSVTI                              -01/08/20-<1> * 00226400
*                                                                     * 00226500
*                                                                     * 00226600
*01* DESCRIPTIVE NAME:  Subsystem Vector Table Input Macro            * 00226700
*                                                                     * 00226800
*01* PROPRIETARY STATEMENT:                                           * 00226900
*                                                                     * 00227000
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00227100
*     5650-ZOS COPYRIGHT IBM CORP. 1994, 2021                         * 00227200
*                                                                     * 00227300
* STATUS= HBB77D0                                                     * 00227400
*                                                                     * 00227500
*                                                                     * 00227600
*                                                                     * 00227700
*01* FUNCTION:                                                        * 00227800
*       See the IEFSSVTI macro prologue for details.                  * 00227900
*                                                                     * 00228000
*01* INPUT:                                                           * 00228100
*                                                                     * 00228200
*            ?IEFSSVTI   Ð TYPE(LIST)                                 * 00228300
*                        Ô TYPE(INITIAL)                              * 00228400
*                        !     SSVTDATA(xssvtdata)                    * 00228500
*                        !     TABLEN(xtablen)                        * 00228600
*                        Ô TYPE(ENTRY)                                * 00228700
*                        !   ÐÝFUNCNAME(»xfuncnameº)                  * 00228800
*                        !   ¿ FUNCADDR(»xfuncaddrº)¨                 * 00228900
*                        !     NUMFCODES(xnumfcodes)                  * 00229000
*                        !    ÝFCODES(»xfcodesÝ,xfcodes...¨!0º)¨      * 00229100
*                        Ô TYPE(FINAL)                                * 00229200
*                        Ô TYPE(SET)                                  * 00229300
*                        !     SSVTDATA(xssvtdata)                    * 00229400
*                        !     SOURCE(xsource)                        * 00229500
*                        !     ENTRYDATA(xentrydata)                  * 00229600
*                        !   ÐÝFUNCNAME(»xfuncnameº)                  * 00229700
*                        !   ¿ FUNCADDR(»xfuncaddrº)                  * 00229800
*                        !        ÝFUNCAMODE(»HOB!31!24º)¨¨           * 00229900
*                        !    ÝFCODES(»xfcodesÝ,xfcodes...¨!0º)¨      * 00230000
*                        Ô TYPE(RESERVE)                              * 00230100
*                        !     SSVTDATA(xssvtdata)                    * 00230200
*                        !   Ð TABLEN(xtablen)                        * 00230300
*                        !   ¿ MAXFCODES(xmaxfcodes)                  * 00230400
*                        ¿ TYPE(COPY)                                 * 00230500
*                              SSVTDATA(xssvtdata)                    * 00230600
*                              SOURCE(xsource)                        * 00230700
*                                                                     * 00230800
****** END OF SPECIFICATIONS *****************************************/ 00230900
*/********************************************************************/ 00231000
*/*PV.DCL01 MACRO DECLARES AND CODE GENERATION CONTROLS              */ 00231100
*/********************************************************************/ 00231200
*  DCL ZPRINT  EXTERNAL; DEACT ZPRINT; /* YES=PRINT, NO=NO PRINT     */ 00231300
*  DCL ZTEST   EXTERNAL; DEACT ZTEST;  /* YES=TEST, NO=NO TEST       */ 00231400
*  DCL ZSYSTEM EXTERNAL; DEACT ZSYSTEM;/* PCCODE10, MVS, SAK, VM     */ 00231500
*                                                                       00231600
*  DCL   ZIEFSSVTI CHAR EXTERNAL; /* YES=USED AT LEAST ONCE          */ 00231700
*  DEACT ZIEFSSVTI;                                                     00231800
*                                                                       00231900
*  DCL ZMACRET FIXED; DEACT ZMACRET;                                    00232000
*  ZMACRET=0;                   /* MACRO COMPILE RETURN CODE         */ 00232100
*                                                                       00232200
*  DCL ZMS CHAR;   DEACT ZMS;   /* ERROR MESSAGE                     */ 00232300
*  DCL ZCVAL CHAR; DEACT ZCVAL; /* ERROR MESSAGE WORK AREA           */ 00232400
*                                                                       00232500
*  DCL ZI FIXED;  DEACT ZI;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00232600
*  DCL ZJ FIXED;  DEACT ZJ;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00232700
*  DCL ZK FIXED;  DEACT ZK;     /* INDEX FOR RANGE COLON (:)         */ 00232800
*  DCL ZL FIXED;  DEACT ZL;     /* INDEX FOR RANGE VALUE CHECKING    */ 00232900
*  DCL ZLO FIXED; DEACT ZLO;    /* LOW RANGE VALUE                   */ 00233000
*  DCL ZHI FIXED; DEACT ZHI;    /* HIGH RANGE VALUE                  */ 00233100
*  DCL ZW CHAR;   DEACT ZW;     /* WORK AREA FOR RANGE VALUE SUBLIST */ 00233200
*  DCL ZN FIXED;  DEACT ZN;     /* NUMERIC WORK VARIABLE             */ 00233300
*  DCL ZC CHAR;   DEACT ZC;     /* CHARACTER WORK VARIABLE           */ 00233400
*  DCL ZPLLEN FIXED; DEACT ZPLLEN;        /* PARAMETER LIST LENGTH   */ 00233500
*                                                                       00233600
*  DCL ZPRMMAX FIXED;           /* MAXIMUM PARM LIST SIZE            */ 00233700
*  DCL ZPRMNUM FIXED;           /* PARAMETER ARRAY INDEX             */ 00233800
*  DCL ZPRM(100);               /* PARAMETER ENTRY                   */ 00233900
*  DCL EHAMAXLEN FIXED EXTERNAL;   /* MAX ILIST SIZE FOR PARM LISTS  */ 00234000
*  DCL EHAREGS CHARACTER EXTERNAL; /* REG DCLS                       */ 00234100
*  DCL EHAREGS64 CHARACTER EXTERNAL; /* REG DCLS                     */ 00234200
*  DCL EHALIST CHARACTER EXTERNAL; /* STANDARD PARM LIST GENERATION  */ 00234300
*/*******************************************************************/  00234400
*/*PV.XVAR01 DECLARE ALL MACRO PARAMETER VARIABLES                  */  00234500
*/*******************************************************************/  00234600
*  DCL XTYPE;  DEACT XTYPE;        /***PV.XVAR02 INPUT VALUE */         00234700
*  DCL ZXTYPE; DEACT ZXTYPE;       /***INPUT/OUTPUT CONTROL */          00234800
*  DCL XSSVTDATA;  DEACT XSSVTDATA;  /***PV.XVAR02 INPUT NAME */        00234900
*  DCL ZXSSVTDATA; DEACT ZXSSVTDATA;  /***INPUT/OUTPUT CONTROL */       00235000
*  DCL XTABLEN;  DEACT XTABLEN;    /***PV.XVAR02 INPUT NAME */          00235100
*  DCL ZXTABLEN; DEACT ZXTABLEN;   /***INPUT/OUTPUT CONTROL */          00235200
*  DCL XFUNCRTN;  DEACT XFUNCRTN;  /***PV.XVAR02 INPUT NAME */          00235300
*  DCL ZXFUNCRTN; DEACT ZXFUNCRTN;  /***INPUT/OUTPUT CONTROL */         00235400
*  DCL XFUNCNAME;  DEACT XFUNCNAME;  /***PV.XVAR02 INPUT NAME */        00235500
*  DCL ZXFUNCNAME; DEACT ZXFUNCNAME;  /***INPUT/OUTPUT CONTROL */       00235600
*  DCL XFUNCADDR;  DEACT XFUNCADDR;  /***PV.XVAR02 INPUT NAME */        00235700
*  DCL ZXFUNCADDR; DEACT ZXFUNCADDR;  /***INPUT/OUTPUT CONTROL */       00235800
*  DCL   XNUMFCODES;               /***PV.XVAR03 INPUT VALUE */         00235900
*  DEACT XNUMFCODES;               /***PV.XVAR03 INPUT VALUE */         00236000
*  DCL   ZXNUMFCODES;              /***INPUT/OUTPUT CONTROL */          00236100
*  DEACT ZXNUMFCODES;              /***INPUT/OUTPUT CONTROL */          00236200
*  DCL XFCODES(255) CHAR;          /***PV.XVAR04 INPUT NAME ARRAY */    00236300
*  DCL ZXFCODES; DEACT ZXFCODES;   /***INPUT/OUTPUT CONTROL */          00236400
*  DCL XSOURCE;  DEACT XSOURCE;    /***PV.XVAR02 INPUT NAME */          00236500
*  DCL ZXSOURCE; DEACT ZXSOURCE;   /***INPUT/OUTPUT CONTROL */          00236600
*  DCL   XENTRYDATA;               /***PV.XVAR03 INPUT NAME */          00236700
*  DEACT XENTRYDATA;               /***PV.XVAR03 INPUT NAME */          00236800
*  DCL   ZXENTRYDATA;              /***INPUT/OUTPUT CONTROL */          00236900
*  DEACT ZXENTRYDATA;              /***INPUT/OUTPUT CONTROL */          00237000
*  DCL   XFUNCAMODE;               /***PV.XVAR03 INPUT VALUE */         00237100
*  DEACT XFUNCAMODE;               /***PV.XVAR03 INPUT VALUE */         00237200
*  DCL   ZXFUNCAMODE;              /***INPUT/OUTPUT CONTROL */          00237300
*  DEACT ZXFUNCAMODE;              /***INPUT/OUTPUT CONTROL */          00237400
*  DCL   XRESERVE_LEN;             /***PV.XVAR03 INPUT NAME */          00237500
*  DEACT XRESERVE_LEN;             /***PV.XVAR03 INPUT NAME */          00237600
*  DCL   ZXRESERVE_LEN;            /***INPUT/OUTPUT CONTROL */          00237700
*  DEACT ZXRESERVE_LEN;            /***INPUT/OUTPUT CONTROL */          00237800
*  DCL   XMAXFCODES;               /***PV.XVAR03 INPUT NAME */          00237900
*  DEACT XMAXFCODES;               /***PV.XVAR03 INPUT NAME */          00238000
*  DCL   ZXMAXFCODES;              /***INPUT/OUTPUT CONTROL */          00238100
*  DEACT ZXMAXFCODES;              /***INPUT/OUTPUT CONTROL */          00238200
*/********************************************************************/ 00238300
*/***PD.P01 FULL DEFAULT CHECKING                                    */ 00238400
*/********************************************************************/ 00238500
*  ZC='OFF';                                 /* DEFAULT FLAG OFF */     00238600
*/********************************************************************/ 00238700
*/***PG.P01 FULL MACRO SYNTAX CHECKING                               */ 00238800
*/********************************************************************/ 00238900
*/*PG.P03 EXCESSIVE POSITIONAL ARGUMENTS-----------------------------*/ 00239000
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */    00239100
*    THEN                                                               00239200
*      DO;                                                              00239300
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'!! /**PPOSP* MSG*/            00239400
*            ' "'!!MACLIST!!'"'!!                                       00239500
*            ' CANNOT BE USED.'!!                                       00239600
*            ' NO POSITIONAL ARGUMENTS'!!                               00239700
*            ' ARE ALLOWED.';                                           00239800
*        ANS MSG('?IEFSSVTI ---> '!!ZMS);                               00239900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00240000
*        ZMACRET=8;                          /* MACRO ERROR */          00240100
*      END;                                                             00240200
*/*PG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00240300
*  XTYPE='';                                                            00240400
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00240500
*  IF TYPE(1)='LIST'                         /* CHECK FOR KEYWORD */    00240600
*     ! TYPE(1)=''                           /* CHECK FOR NULL */       00240700
*    THEN                                                               00240800
*      DO;                                                              00240900
*        XTYPE='LIST';                       /* SET XVARIABLE */        00241000
*        IF NUMBER(TYPE)>1                   /* CHECK POSITIONALS */    00241100
*          THEN                                                         00241200
*            DO;                                                        00241300
*              ZMS=' 8, "TYPE'!!             /**KPOSP* MSG*/            00241400
*                  TYPE!!                                               00241500
*                  '" "TYPE"'!!                                         00241600
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00241700
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00241800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00241900
*              ZMACRET=8;                    /* MACRO ERROR */          00242000
*            END;                                                       00242100
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00242200
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00242300
*        IF SSVTDATA^=''                     /* CHECK FOR KEY */        00242400
*          THEN                                                         00242500
*            ZCVAL=ZCVAL!!',SSVTDATA';       /* INCORRECT KEY USED */   00242600
*        IF TABLEN^=''                       /* CHECK FOR KEY */        00242700
*          THEN                                                         00242800
*            ZCVAL=ZCVAL!!',TABLEN';         /* INCORRECT KEY USED */   00242900
*        IF FUNCNAME^=''                     /* CHECK FOR KEY */        00243000
*          THEN                                                         00243100
*            ZCVAL=ZCVAL!!',FUNCNAME';       /* INCORRECT KEY USED */   00243200
*        IF FUNCADDR^=''                     /* CHECK FOR KEY */        00243300
*          THEN                                                         00243400
*            ZCVAL=ZCVAL!!',FUNCADDR';       /* INCORRECT KEY USED */   00243500
*        IF NUMFCODES^=''                    /* CHECK FOR KEY */        00243600
*          THEN                                                         00243700
*            ZCVAL=ZCVAL!!',NUMFCODES';      /* INCORRECT KEY USED */   00243800
*        IF FCODES^=''                       /* CHECK FOR KEY */        00243900
*          THEN                                                         00244000
*            ZCVAL=ZCVAL!!',FCODES';         /* INCORRECT KEY USED */   00244100
*        IF SOURCE^=''                       /* CHECK FOR KEY */        00244200
*          THEN                                                         00244300
*            ZCVAL=ZCVAL!!',SOURCE';         /* INCORRECT KEY USED */   00244400
*        IF ENTRYDATA^=''                    /* CHECK FOR KEY */        00244500
*          THEN                                                         00244600
*            ZCVAL=ZCVAL!!',ENTRYDATA';      /* INCORRECT KEY USED */   00244700
*        IF FUNCAMODE^=''                    /* CHECK FOR KEY */        00244800
*          THEN                                                         00244900
*            ZCVAL=ZCVAL!!',FUNCAMODE';      /* INCORRECT KEY USED */   00245000
*        IF MAXFCODES^=''                    /* CHECK FOR KEY */        00245100
*          THEN                                                         00245200
*            ZCVAL=ZCVAL!!',MAXFCODES';      /* INCORRECT KEY USED */   00245300
*        IF ZCVAL^=''                                                   00245400
*          THEN                                                         00245500
*            DO;                             /* INCORRECT KEYS USED */  00245600
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00245700
*              ZMS=' 8, "TYPE'!!             /**KMEIP* MSG*/            00245800
*                  TYPE!!'"'!!                                          00245900
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   00246000
*                  ' FOLLOWING KEY(S) "'!!                              00246100
*                  ZCVAL!!'".';                                         00246200
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00246300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00246400
*              ZMACRET=8;                    /* MACRO ERROR */          00246500
*            END;                                                       00246600
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00246700
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00246800
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00246900
*  IF TYPE(1)='INITIAL'                      /* CHECK FOR KEYWORD */    00247000
*    THEN                                                               00247100
*      DO;                                                              00247200
*        XTYPE='INITIAL';                    /* SET XVARIABLE */        00247300
*        IF NUMBER(TYPE)>1                   /* CHECK POSITIONALS */    00247400
*          THEN                                                         00247500
*            DO;                                                        00247600
*              ZMS=' 8, "TYPE'!!             /**KPOSP* MSG*/            00247700
*                  TYPE!!                                               00247800
*                  '" "TYPE"'!!                                         00247900
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00248000
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00248100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00248200
*              ZMACRET=8;                    /* MACRO ERROR */          00248300
*            END;                                                       00248400
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00248500
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00248600
*        IF FUNCNAME^=''                     /* CHECK FOR KEY */        00248700
*          THEN                                                         00248800
*            ZCVAL=ZCVAL!!',FUNCNAME';       /* INCORRECT KEY USED */   00248900
*        IF FUNCADDR^=''                     /* CHECK FOR KEY */        00249000
*          THEN                                                         00249100
*            ZCVAL=ZCVAL!!',FUNCADDR';       /* INCORRECT KEY USED */   00249200
*        IF NUMFCODES^=''                    /* CHECK FOR KEY */        00249300
*          THEN                                                         00249400
*            ZCVAL=ZCVAL!!',NUMFCODES';      /* INCORRECT KEY USED */   00249500
*        IF FCODES^=''                       /* CHECK FOR KEY */        00249600
*          THEN                                                         00249700
*            ZCVAL=ZCVAL!!',FCODES';         /* INCORRECT KEY USED */   00249800
*        IF SOURCE^=''                       /* CHECK FOR KEY */        00249900
*          THEN                                                         00250000
*            ZCVAL=ZCVAL!!',SOURCE';         /* INCORRECT KEY USED */   00250100
*        IF ENTRYDATA^=''                    /* CHECK FOR KEY */        00250200
*          THEN                                                         00250300
*            ZCVAL=ZCVAL!!',ENTRYDATA';      /* INCORRECT KEY USED */   00250400
*        IF FUNCAMODE^=''                    /* CHECK FOR KEY */        00250500
*          THEN                                                         00250600
*            ZCVAL=ZCVAL!!',FUNCAMODE';      /* INCORRECT KEY USED */   00250700
*        IF MAXFCODES^=''                    /* CHECK FOR KEY */        00250800
*          THEN                                                         00250900
*            ZCVAL=ZCVAL!!',MAXFCODES';      /* INCORRECT KEY USED */   00251000
*        IF ZCVAL^=''                                                   00251100
*          THEN                                                         00251200
*            DO;                             /* INCORRECT KEYS USED */  00251300
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00251400
*              ZMS=' 8, "TYPE'!!             /**KMEIP* MSG*/            00251500
*                  TYPE!!'"'!!                                          00251600
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   00251700
*                  ' FOLLOWING KEY(S) "'!!                              00251800
*                  ZCVAL!!'".';                                         00251900
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00252000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00252100
*              ZMACRET=8;                    /* MACRO ERROR */          00252200
*            END;                                                       00252300
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00252400
*  IF NUMBER(SSVTDATA)>1                     /* CHECK POSITIONALS */    00252500
*    THEN                                                               00252600
*      DO;                                                              00252700
*        ZMS=' 8, "SSVTDATA'!!               /**KPOSP* MSG*/            00252800
*            SSVTDATA!!                                                 00252900
*            '" "SSVTDATA"'!!                                           00253000
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00253100
*        ANS MSG('?IEFSSVTI ---> '!!ZMS);                               00253200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00253300
*        ZMACRET=8;                          /* MACRO ERROR */          00253400
*      END;                                                             00253500
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00253600
*  XSSVTDATA=SSVTDATA(1);                    /* SET XVARIABLE */        00253700
*  IF SSVTDATA(1)=''                         /* CHECK FOR NULL */       00253800
*   THEN                                                                00253900
*    DO;                                     /* KEY IS REQUIRED */      00254000
*        ZXSSVTDATA='';                      /* RESET IN/OUTPUT */      00254100
*        ZMS=' 8,  '!!                                                  00254200
*            ' "SSVTDATA" KEY AND ITS'!!                                00254300
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00254400
*        ANS MSG('?IEFSSVTI ---> '!!ZMS);                               00254500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00254600
*        ZMACRET=8;                          /* MACRO ERROR */          00254700
*    END;                                                               00254800
*  ELSE                                                                 00254900
*    ZXSSVTDATA='INPUT';                     /* SET IN/OUTPUT */        00255000
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00255100
*  IF NUMBER(TABLEN)>1                       /* CHECK POSITIONALS */    00255200
*    THEN                                                               00255300
*      DO;                                                              00255400
*        ZMS=' 8, "TABLEN'!!                 /**KPOSP* MSG*/            00255500
*            TABLEN!!                                                   00255600
*            '" "TABLEN"'!!                                             00255700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00255800
*        ANS MSG('?IEFSSVTI ---> '!!ZMS);                               00255900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00256000
*        ZMACRET=8;                          /* MACRO ERROR */          00256100
*      END;                                                             00256200
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00256300
*  XTABLEN=TABLEN(1);                        /* SET XVARIABLE */        00256400
*  IF TABLEN(1)=''                           /* CHECK FOR NULL */       00256500
*   THEN                                                                00256600
*    DO;                                     /* KEY IS REQUIRED */      00256700
*        ZXTABLEN='';                        /* RESET IN/OUTPUT */      00256800
*        ZMS=' 8,  '!!                                                  00256900
*            ' "TABLEN" KEY AND ITS'!!                                  00257000
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00257100
*        ANS MSG('?IEFSSVTI ---> '!!ZMS);                               00257200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00257300
*        ZMACRET=8;                          /* MACRO ERROR */          00257400
*    END;                                                               00257500
*  ELSE                                                                 00257600
*    ZXTABLEN='INPUT';                       /* SET IN/OUTPUT */        00257700
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00257800
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00257900
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00258000
*  IF TYPE(1)='ENTRY'                        /* CHECK FOR KEYWORD */    00258100
*    THEN                                                               00258200
*      DO;                                                              00258300
*        XTYPE='ENTRY';                      /* SET XVARIABLE */        00258400
*        IF NUMBER(TYPE)>1                   /* CHECK POSITIONALS */    00258500
*          THEN                                                         00258600
*            DO;                                                        00258700
*              ZMS=' 8, "TYPE'!!             /**KPOSP* MSG*/            00258800
*                  TYPE!!                                               00258900
*                  '" "TYPE"'!!                                         00259000
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00259100
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00259200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00259300
*              ZMACRET=8;                    /* MACRO ERROR */          00259400
*            END;                                                       00259500
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00259600
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00259700
*        IF SSVTDATA^=''                     /* CHECK FOR KEY */        00259800
*          THEN                                                         00259900
*            ZCVAL=ZCVAL!!',SSVTDATA';       /* INCORRECT KEY USED */   00260000
*        IF TABLEN^=''                       /* CHECK FOR KEY */        00260100
*          THEN                                                         00260200
*            ZCVAL=ZCVAL!!',TABLEN';         /* INCORRECT KEY USED */   00260300
*        IF SOURCE^=''                       /* CHECK FOR KEY */        00260400
*          THEN                                                         00260500
*            ZCVAL=ZCVAL!!',SOURCE';         /* INCORRECT KEY USED */   00260600
*        IF ENTRYDATA^=''                    /* CHECK FOR KEY */        00260700
*          THEN                                                         00260800
*            ZCVAL=ZCVAL!!',ENTRYDATA';      /* INCORRECT KEY USED */   00260900
*        IF FUNCAMODE^=''                    /* CHECK FOR KEY */        00261000
*          THEN                                                         00261100
*            ZCVAL=ZCVAL!!',FUNCAMODE';      /* INCORRECT KEY USED */   00261200
*        IF MAXFCODES^=''                    /* CHECK FOR KEY */        00261300
*          THEN                                                         00261400
*            ZCVAL=ZCVAL!!',MAXFCODES';      /* INCORRECT KEY USED */   00261500
*        IF ZCVAL^=''                                                   00261600
*          THEN                                                         00261700
*            DO;                             /* INCORRECT KEYS USED */  00261800
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00261900
*              ZMS=' 8, "TYPE'!!             /**KMEIP* MSG*/            00262000
*                  TYPE!!'"'!!                                          00262100
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   00262200
*                  ' FOLLOWING KEY(S) "'!!                              00262300
*                  ZCVAL!!'".';                                         00262400
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00262500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00262600
*              ZMACRET=8;                    /* MACRO ERROR */          00262700
*            END;                                                       00262800
*/*PG.KMEKY01 NAME, OPT INPUT, ME KEYS -XVARIABLE KEY----------------*/ 00262900
*  XFUNCRTN='';                              /* RESET XVARIABLE */      00263000
*  IF FUNCNAME^=''                           /* CHECK ME KEY */         00263100
*    THEN                                                               00263200
*      DO;                                   /* VALID ME KEY */         00263300
*        IF NUMBER(FUNCNAME)>1               /* CHECK SUBLISTS */       00263400
*          THEN                                                         00263500
*            DO;                                                        00263600
*              ZMS=' 8, "FUNCNAME'!!         /**KPOSP* MSG*/            00263700
*                  FUNCNAME!!                                           00263800
*                  '" "FUNCNAME"'!!                                     00263900
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00264000
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00264100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00264200
*              ZMACRET=8;                    /* MACRO ERROR */          00264300
*            END;                                                       00264400
*        XFUNCRTN='FUNCNAME';                /* SET XVARIABLE */        00264500
*        XFUNCNAME=FUNCNAME(1);              /* SET XVARIABLE */        00264600
*        ZXFUNCRTN='INPUT';                  /* SET IN/OUTPUT */        00264700
*        ZXFUNCNAME='INPUT';                 /* SET IN/OUTPUT */        00264800
*        IF FUNCNAME(1)=''                   /* CHECK ME KEY */         00264900
*          THEN                                                         00265000
*            DO;                                                        00265100
*              ZXFUNCRTN='';                 /* RESET IN/OUTPUT */      00265200
*              ZXFUNCNAME='';                /* RESET IN/OUTPUT */      00265300
*              ZMS=' 8, THE "FUNCNAME" KEY'!!                           00265400
*                  ' MUST CONTAIN ONE'!!                                00265500
*                  ' (OR MORE) ARGUMENT(S).';                           00265600
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00265700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00265800
*              ZMACRET=8;                    /* MACRO ERROR */          00265900
*           END;                                                        00266000
*      END;                                                             00266100
*/*PG.KMEKY02 NAME, OPT INPUT, ME KEYS -XVARIABLE KEY----------------*/ 00266200
*  IF FUNCADDR^=''                           /* CHECK ME KEY */         00266300
*    THEN                                                               00266400
*      DO;                                                              00266500
*        IF NUMBER(FUNCADDR)>1               /* CHECK SUBLISTS */       00266600
*          THEN                                                         00266700
*            DO;                                                        00266800
*              ZMS=' 8, "FUNCADDR'!!         /**KPOSP* MSG*/            00266900
*                  FUNCADDR!!                                           00267000
*                  '" "FUNCADDR"'!!                                     00267100
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00267200
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00267300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00267400
*              ZMACRET=8;                    /* MACRO ERROR */          00267500
*            END;                                                       00267600
*        IF XFUNCRTN=''                      /* CHECK XVARIABLE */      00267700
*          THEN                                                         00267800
*            DO;                             /* VALID ME KEY */         00267900
*              XFUNCRTN='FUNCADDR';          /* SET XVAR1 */            00268000
*              XFUNCADDR=FUNCADDR(1);        /* SET XVAR2 */            00268100
*              ZXFUNCRTN='INPUT';            /* SET IN/OUTPUT */        00268200
*              ZXFUNCADDR='INPUT';           /* SET IN/OUTPUT */        00268300
*              IF FUNCADDR(1)=''             /* CHECK ME KEY */         00268400
*                THEN                                                   00268500
*                  DO;                                                  00268600
*                    ZXFUNCRTN='';           /* RESET IN/OUTPUT */      00268700
*                    ZXFUNCADDR='';          /* RESET IN/OUTPUT */      00268800
*                    ZMS=' 8, THE "FUNCADDR" KEY'!!                     00268900
*                        ' MUST CONTAIN ONE'!!                          00269000
*                        ' (OR MORE) ARGUMENT(S).';                     00269100
*                    ANS MSG('?IEFSSVTI ---> '!!ZMS);                   00269200
*                    ANS(COMMENT(ZMS)) COL(MACLMAR);                    00269300
*                    ZMACRET=8;              /* MACRO ERROR */          00269400
*                  END;                                                 00269500
*            END;                                                       00269600
*          ELSE                                                         00269700
*            DO;                                                        00269800
*              ZMS=' 8, "FUNCADDR'!!         /**KMEKP* MSG*/            00269900
*                  FUNCADDR!!'"'!!                                      00270000
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'!!                00270100
*                  XFUNCRTN!!                                           00270200
*                  '" KEY.';                                            00270300
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00270400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00270500
*              ZMACRET=8;                    /* MACRO ERROR */          00270600
*            END;                                                       00270700
*      END;                                                             00270800
*/*PG.KMEKY06 NAME, OPT INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 00270900
*  IF XFUNCRTN=''                            /* CHECK XVARIABLE */      00271000
*    THEN                                                               00271100
*      DO;                                                              00271200
*        XFUNCRTN='FUNCNAME';                /* SET DEFAULT */          00271300
*        XFUNCNAME='0';                      /* SET DEFAULT */          00271400
*        ZXFUNCRTN='INPUT';                  /* SET IN/OUTPUT */        00271500
*        ZXFUNCNAME='INPUT';                 /* SET IN/OUTPUT */        00271600
*      END;                                                             00271700
*/*PG.KXVAR01 VALUE, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS------------*/ 00271800
*  IF NUMBER(NUMFCODES)>1                    /* CHECK POSITIONALS */    00271900
*    THEN                                                               00272000
*      DO;                                                              00272100
*        ZMS=' 8, "NUMFCODES'!!              /**KPOSP* MSG*/            00272200
*            NUMFCODES!!                                                00272300
*            '" "NUMFCODES"'!!                                          00272400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00272500
*        ANS MSG('?IEFSSVTI ---> '!!ZMS);                               00272600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00272700
*        ZMACRET=8;                          /* MACRO ERROR */          00272800
*      END;                                                             00272900
*/*PG.KXVAR03 VALUE, RQD INPUT, KEYS -XVARIABLE----------------------*/ 00273000
*  XNUMFCODES=NUMFCODES(1);                  /* SET XVARIABLE */        00273100
*  IF NUMFCODES(1)=''                        /* CHECK FOR NULL */       00273200
*   THEN                                                                00273300
*    DO;                                     /* KEY IS REQUIRED */      00273400
*        ZXNUMFCODES='';                     /* RESET IN/OUTPUT */      00273500
*        ZMS=' 8,  '!!                                                  00273600
*            ' "NUMFCODES" KEY AND ITS'!!                               00273700
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00273800
*        ANS MSG('?IEFSSVTI ---> '!!ZMS);                               00273900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00274000
*        ZMACRET=8;                          /* MACRO ERROR */          00274100
*    END;                                                               00274200
*  ELSE                                                                 00274300
*    ZXNUMFCODES='INPUT';                    /* SET IN/OUTPUT */        00274400
*/*PG.KCK05 VALUE, RQD INPUT, KEYS -RANGE----------------------------*/ 00274500
*  IF ZXNUMFCODES^=''                        /* NOT IN/OUTPUT */        00274600
*    THEN                                                               00274700
*      DO;                                                              00274800
*        ZCVAL='';                           /* ERROR FLAG */           00274900
*        DO ZL=1 TO LENGTH(XNUMFCODES);      /* MUST BE NUMBER */       00275000
*          IF XNUMFCODES(ZL:ZL)<'0' !        /* MUST BE NUMERIC */      00275100
*             XNUMFCODES(ZL:ZL)>'9'          /* MUST BE NUMERIC */      00275200
*            THEN                                                       00275300
*              ZCVAL='NUMERIC';              /* NUMERIC ERROR */        00275400
*        END;                                                           00275500
*        IF ZCVAL=''                                                    00275600
*          THEN                                                         00275700
*            IF LENGTH(XNUMFCODES)<LENGTH(CHAR(1)) !                    00275800
*              LENGTH(XNUMFCODES)>LENGTH(CHAR(255))                     00275900
*              THEN                                                     00276000
*                ZCVAL='RANGE';              /* RANGE ERROR */          00276100
*        IF ZCVAL=''                                                    00276200
*          THEN                                                         00276300
*            IF LENGTH(XNUMFCODES)=LENGTH(CHAR(1))                      00276400
*              THEN                                                     00276500
*                IF XNUMFCODES<CHAR(1)       /*LOW*/                    00276600
*                  THEN                                                 00276700
*                    ZCVAL='RANGE';          /* RANGE ERROR */          00276800
*        IF ZCVAL=''                                                    00276900
*          THEN                                                         00277000
*            IF LENGTH(XNUMFCODES)=LENGTH(CHAR(255))                    00277100
*              THEN                                                     00277200
*                IF XNUMFCODES>CHAR(255)     /*HIGH*/                   00277300
*                  THEN                                                 00277400
*                    ZCVAL='RANGE';          /* RANGE ERROR */          00277500
*        IF ZCVAL^=''                                                   00277600
*          THEN                                                         00277700
*            DO;                             /* RANGE ERROR */          00277800
*              ZXNUMFCODES='';               /* RESET IN/OUTPUT */      00277900
*              ZMS=' 8, "NUMFCODES '!!       /**KRNGP* MSG*/            00278000
*                  NUMFCODES!!                                          00278100
*                  '" THE RANGE IS "1-255"'!!                           00278200
*                  ' FOR ARGUMENT 1.';                                  00278300
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00278400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00278500
*              ZMACRET=8;                    /* MACRO ERROR */          00278600
*            END;                                                       00278700
*      END;                                                             00278800
*/*PG.KXVAR17 NAME, OPT INPUT, KEYS -MULTIPLE ARGUMENTS--------------*/ 00278900
*  ZXFCODES='INPUT';                         /* SET IN/OUTPUT */        00279000
*  XFCODES(1)='0';                           /* SET DEFAULT */          00279100
*  XFCODES(2)='';                            /* NULL AT ARRAY END */    00279200
*  ZI=0;                                     /* XVARIABLE ARRAY INDEX*/ 00279300
*  IF NUMBER(FCODES)>0                       /* CHECK FOR PARMS */      00279400
*    THEN                                                               00279500
*      DO ZJ=1 TO NUMBER(FCODES);            /* CHECK PARMS */          00279600
*        IF FCODES(ZJ)^=''                   /* CHECK FOR NULL */       00279700
*          THEN                                                         00279800
*            DO;                             /* SELECT NON-NULL PARMS*/ 00279900
*              ZI=ZI+1;                      /* NEXT ARRAY ENTRY */     00280000
*              XFCODES(ZI)=                                             00280100
*                  FCODES(ZJ);               /* GET PARM */             00280200
*              XFCODES(ZI+1)='';             /* NULL AT END */          00280300
*            END;                                                       00280400
*      END;                                                             00280500
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00280600
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00280700
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00280800
*  IF TYPE(1)='FINAL'                        /* CHECK FOR KEYWORD */    00280900
*    THEN                                                               00281000
*      DO;                                                              00281100
*        XTYPE='FINAL';                      /* SET XVARIABLE */        00281200
*        IF NUMBER(TYPE)>1                   /* CHECK POSITIONALS */    00281300
*          THEN                                                         00281400
*            DO;                                                        00281500
*              ZMS=' 8, "TYPE'!!             /**KPOSP* MSG*/            00281600
*                  TYPE!!                                               00281700
*                  '" "TYPE"'!!                                         00281800
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00281900
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00282000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00282100
*              ZMACRET=8;                    /* MACRO ERROR */          00282200
*            END;                                                       00282300
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00282400
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00282500
*        IF SSVTDATA^=''                     /* CHECK FOR KEY */        00282600
*          THEN                                                         00282700
*            ZCVAL=ZCVAL!!',SSVTDATA';       /* INCORRECT KEY USED */   00282800
*        IF TABLEN^=''                       /* CHECK FOR KEY */        00282900
*          THEN                                                         00283000
*            ZCVAL=ZCVAL!!',TABLEN';         /* INCORRECT KEY USED */   00283100
*        IF FUNCNAME^=''                     /* CHECK FOR KEY */        00283200
*          THEN                                                         00283300
*            ZCVAL=ZCVAL!!',FUNCNAME';       /* INCORRECT KEY USED */   00283400
*        IF FUNCADDR^=''                     /* CHECK FOR KEY */        00283500
*          THEN                                                         00283600
*            ZCVAL=ZCVAL!!',FUNCADDR';       /* INCORRECT KEY USED */   00283700
*        IF NUMFCODES^=''                    /* CHECK FOR KEY */        00283800
*          THEN                                                         00283900
*            ZCVAL=ZCVAL!!',NUMFCODES';      /* INCORRECT KEY USED */   00284000
*        IF FCODES^=''                       /* CHECK FOR KEY */        00284100
*          THEN                                                         00284200
*            ZCVAL=ZCVAL!!',FCODES';         /* INCORRECT KEY USED */   00284300
*        IF SOURCE^=''                       /* CHECK FOR KEY */        00284400
*          THEN                                                         00284500
*            ZCVAL=ZCVAL!!',SOURCE';         /* INCORRECT KEY USED */   00284600
*        IF ENTRYDATA^=''                    /* CHECK FOR KEY */        00284700
*          THEN                                                         00284800
*            ZCVAL=ZCVAL!!',ENTRYDATA';      /* INCORRECT KEY USED */   00284900
*        IF FUNCAMODE^=''                    /* CHECK FOR KEY */        00285000
*          THEN                                                         00285100
*            ZCVAL=ZCVAL!!',FUNCAMODE';      /* INCORRECT KEY USED */   00285200
*        IF MAXFCODES^=''                    /* CHECK FOR KEY */        00285300
*          THEN                                                         00285400
*            ZCVAL=ZCVAL!!',MAXFCODES';      /* INCORRECT KEY USED */   00285500
*        IF ZCVAL^=''                                                   00285600
*          THEN                                                         00285700
*            DO;                             /* INCORRECT KEYS USED */  00285800
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00285900
*              ZMS=' 8, "TYPE'!!             /**KMEIP* MSG*/            00286000
*                  TYPE!!'"'!!                                          00286100
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   00286200
*                  ' FOLLOWING KEY(S) "'!!                              00286300
*                  ZCVAL!!'".';                                         00286400
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00286500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00286600
*              ZMACRET=8;                    /* MACRO ERROR */          00286700
*            END;                                                       00286800
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00286900
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00287000
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00287100
*  IF TYPE(1)='SET'                          /* CHECK FOR KEYWORD */    00287200
*    THEN                                                               00287300
*      DO;                                                              00287400
*        XTYPE='SET';                        /* SET XVARIABLE */        00287500
*        IF NUMBER(TYPE)>1                   /* CHECK POSITIONALS */    00287600
*          THEN                                                         00287700
*            DO;                                                        00287800
*              ZMS=' 8, "TYPE'!!             /**KPOSP* MSG*/            00287900
*                  TYPE!!                                               00288000
*                  '" "TYPE"'!!                                         00288100
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00288200
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00288300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00288400
*              ZMACRET=8;                    /* MACRO ERROR */          00288500
*            END;                                                       00288600
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00288700
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00288800
*        IF TABLEN^=''                       /* CHECK FOR KEY */        00288900
*          THEN                                                         00289000
*            ZCVAL=ZCVAL!!',TABLEN';         /* INCORRECT KEY USED */   00289100
*        IF NUMFCODES^=''                    /* CHECK FOR KEY */        00289200
*          THEN                                                         00289300
*            ZCVAL=ZCVAL!!',NUMFCODES';      /* INCORRECT KEY USED */   00289400
*        IF MAXFCODES^=''                    /* CHECK FOR KEY */        00289500
*          THEN                                                         00289600
*            ZCVAL=ZCVAL!!',MAXFCODES';      /* INCORRECT KEY USED */   00289700
*        IF ZCVAL^=''                                                   00289800
*          THEN                                                         00289900
*            DO;                             /* INCORRECT KEYS USED */  00290000
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00290100
*              ZMS=' 8, "TYPE'!!             /**KMEIP* MSG*/            00290200
*                  TYPE!!'"'!!                                          00290300
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   00290400
*                  ' FOLLOWING KEY(S) "'!!                              00290500
*                  ZCVAL!!'".';                                         00290600
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00290700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00290800
*              ZMACRET=8;                    /* MACRO ERROR */          00290900
*            END;                                                       00291000
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00291100
*  IF NUMBER(SSVTDATA)>1                     /* CHECK POSITIONALS */    00291200
*    THEN                                                               00291300
*      DO;                                                              00291400
*        ZMS=' 8, "SSVTDATA'!!               /**KPOSP* MSG*/            00291500
*            SSVTDATA!!                                                 00291600
*            '" "SSVTDATA"'!!                                           00291700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00291800
*        ANS MSG('?IEFSSVTI ---> '!!ZMS);                               00291900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00292000
*        ZMACRET=8;                          /* MACRO ERROR */          00292100
*      END;                                                             00292200
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00292300
*  XSSVTDATA=SSVTDATA(1);                    /* SET XVARIABLE */        00292400
*  IF SSVTDATA(1)=''                         /* CHECK FOR NULL */       00292500
*   THEN                                                                00292600
*    DO;                                     /* KEY IS REQUIRED */      00292700
*        ZXSSVTDATA='';                      /* RESET IN/OUTPUT */      00292800
*        ZMS=' 8,  '!!                                                  00292900
*            ' "SSVTDATA" KEY AND ITS'!!                                00293000
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00293100
*        ANS MSG('?IEFSSVTI ---> '!!ZMS);                               00293200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00293300
*        ZMACRET=8;                          /* MACRO ERROR */          00293400
*    END;                                                               00293500
*  ELSE                                                                 00293600
*    ZXSSVTDATA='INPUT';                     /* SET IN/OUTPUT */        00293700
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00293800
*  IF NUMBER(SOURCE)>1                       /* CHECK POSITIONALS */    00293900
*    THEN                                                               00294000
*      DO;                                                              00294100
*        ZMS=' 8, "SOURCE'!!                 /**KPOSP* MSG*/            00294200
*            SOURCE!!                                                   00294300
*            '" "SOURCE"'!!                                             00294400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00294500
*        ANS MSG('?IEFSSVTI ---> '!!ZMS);                               00294600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00294700
*        ZMACRET=8;                          /* MACRO ERROR */          00294800
*      END;                                                             00294900
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00295000
*  XSOURCE=SOURCE(1);                        /* SET XVARIABLE */        00295100
*  IF SOURCE(1)=''                           /* CHECK FOR NULL */       00295200
*   THEN                                                                00295300
*    DO;                                     /* KEY IS REQUIRED */      00295400
*        ZXSOURCE='';                        /* RESET IN/OUTPUT */      00295500
*        ZMS=' 8,  '!!                                                  00295600
*            ' "SOURCE" KEY AND ITS'!!                                  00295700
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00295800
*        ANS MSG('?IEFSSVTI ---> '!!ZMS);                               00295900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00296000
*        ZMACRET=8;                          /* MACRO ERROR */          00296100
*    END;                                                               00296200
*  ELSE                                                                 00296300
*    ZXSOURCE='INPUT';                       /* SET IN/OUTPUT */        00296400
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00296500
*  IF NUMBER(ENTRYDATA)>1                    /* CHECK POSITIONALS */    00296600
*    THEN                                                               00296700
*      DO;                                                              00296800
*        ZMS=' 8, "ENTRYDATA'!!              /**KPOSP* MSG*/            00296900
*            ENTRYDATA!!                                                00297000
*            '" "ENTRYDATA"'!!                                          00297100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00297200
*        ANS MSG('?IEFSSVTI ---> '!!ZMS);                               00297300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00297400
*        ZMACRET=8;                          /* MACRO ERROR */          00297500
*      END;                                                             00297600
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00297700
*  XENTRYDATA=ENTRYDATA(1);                  /* SET XVARIABLE */        00297800
*  IF ENTRYDATA(1)=''                        /* CHECK FOR NULL */       00297900
*   THEN                                                                00298000
*    DO;                                     /* KEY IS REQUIRED */      00298100
*        ZXENTRYDATA='';                     /* RESET IN/OUTPUT */      00298200
*        ZMS=' 8,  '!!                                                  00298300
*            ' "ENTRYDATA" KEY AND ITS'!!                               00298400
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00298500
*        ANS MSG('?IEFSSVTI ---> '!!ZMS);                               00298600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00298700
*        ZMACRET=8;                          /* MACRO ERROR */          00298800
*    END;                                                               00298900
*  ELSE                                                                 00299000
*    ZXENTRYDATA='INPUT';                    /* SET IN/OUTPUT */        00299100
*/*PG.KMEKY01 NAME, OPT INPUT, ME KEYS -XVARIABLE KEY----------------*/ 00299200
*  XFUNCRTN='';                              /* RESET XVARIABLE */      00299300
*  IF FUNCNAME^=''                           /* CHECK ME KEY */         00299400
*    THEN                                                               00299500
*      DO;                                   /* VALID ME KEY */         00299600
*        IF NUMBER(FUNCNAME)>1               /* CHECK SUBLISTS */       00299700
*          THEN                                                         00299800
*            DO;                                                        00299900
*              ZMS=' 8, "FUNCNAME'!!         /**KPOSP* MSG*/            00300000
*                  FUNCNAME!!                                           00300100
*                  '" "FUNCNAME"'!!                                     00300200
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00300300
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00300400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00300500
*              ZMACRET=8;                    /* MACRO ERROR */          00300600
*            END;                                                       00300700
*        XFUNCRTN='FUNCNAME';                /* SET XVARIABLE */        00300800
*        XFUNCNAME=FUNCNAME(1);              /* SET XVARIABLE */        00300900
*        ZXFUNCRTN='INPUT';                  /* SET IN/OUTPUT */        00301000
*        ZXFUNCNAME='INPUT';                 /* SET IN/OUTPUT */        00301100
*        IF FUNCNAME(1)=''                   /* CHECK ME KEY */         00301200
*          THEN                                                         00301300
*            DO;                                                        00301400
*              ZXFUNCRTN='';                 /* RESET IN/OUTPUT */      00301500
*              ZXFUNCNAME='';                /* RESET IN/OUTPUT */      00301600
*              ZMS=' 8, THE "FUNCNAME" KEY'!!                           00301700
*                  ' MUST CONTAIN ONE'!!                                00301800
*                  ' (OR MORE) ARGUMENT(S).';                           00301900
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00302000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00302100
*              ZMACRET=8;                    /* MACRO ERROR */          00302200
*           END;                                                        00302300
*      END;                                                             00302400
*/*PG.KMEKY02 NAME, OPT INPUT, ME KEYS -XVARIABLE KEY----------------*/ 00302500
*  IF FUNCADDR^=''                           /* CHECK ME KEY */         00302600
*    THEN                                                               00302700
*      DO;                                                              00302800
*        IF NUMBER(FUNCADDR)>1               /* CHECK SUBLISTS */       00302900
*          THEN                                                         00303000
*            DO;                                                        00303100
*              ZMS=' 8, "FUNCADDR'!!         /**KPOSP* MSG*/            00303200
*                  FUNCADDR!!                                           00303300
*                  '" "FUNCADDR"'!!                                     00303400
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00303500
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00303600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00303700
*              ZMACRET=8;                    /* MACRO ERROR */          00303800
*            END;                                                       00303900
*        IF XFUNCRTN=''                      /* CHECK XVARIABLE */      00304000
*          THEN                                                         00304100
*            DO;                             /* VALID ME KEY */         00304200
*              XFUNCRTN='FUNCADDR';          /* SET XVAR1 */            00304300
*              XFUNCADDR=FUNCADDR(1);        /* SET XVAR2 */            00304400
*              ZXFUNCRTN='INPUT';            /* SET IN/OUTPUT */        00304500
*              ZXFUNCADDR='INPUT';           /* SET IN/OUTPUT */        00304600
*              IF FUNCADDR(1)=''             /* CHECK ME KEY */         00304700
*                THEN                                                   00304800
*                  DO;                                                  00304900
*                    ZXFUNCRTN='';           /* RESET IN/OUTPUT */      00305000
*                    ZXFUNCADDR='';          /* RESET IN/OUTPUT */      00305100
*                    ZMS=' 8, THE "FUNCADDR" KEY'!!                     00305200
*                        ' MUST CONTAIN ONE'!!                          00305300
*                        ' (OR MORE) ARGUMENT(S).';                     00305400
*                    ANS MSG('?IEFSSVTI ---> '!!ZMS);                   00305500
*                    ANS(COMMENT(ZMS)) COL(MACLMAR);                    00305600
*                    ZMACRET=8;              /* MACRO ERROR */          00305700
*                  END;                                                 00305800
*            END;                                                       00305900
*          ELSE                                                         00306000
*            DO;                                                        00306100
*              ZMS=' 8, "FUNCADDR'!!         /**KMEKP* MSG*/            00306200
*                  FUNCADDR!!'"'!!                                      00306300
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'!!                00306400
*                  XFUNCRTN!!                                           00306500
*                  '" KEY.';                                            00306600
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00306700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00306800
*              ZMACRET=8;                    /* MACRO ERROR */          00306900
*            END;                                                       00307000
*      END;                                                             00307100
*/*PG.KMEKY06 NAME, OPT INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 00307200
*  IF XFUNCRTN=''                            /* CHECK XVARIABLE */      00307300
*    THEN                                                               00307400
*      DO;                                                              00307500
*        XFUNCRTN='FUNCNAME';                /* SET DEFAULT */          00307600
*        XFUNCNAME='0';                      /* SET DEFAULT */          00307700
*        ZXFUNCRTN='INPUT';                  /* SET IN/OUTPUT */        00307800
*        ZXFUNCNAME='INPUT';                 /* SET IN/OUTPUT */        00307900
*      END;                                                             00308000
*/*PG.KMEKY12 NAME, OPT INPUT, ME KEYS -DISALLOWED KEYS--------------*/ 00308100
*  IF XFUNCRTN='FUNCNAME'                    /* CHECK FOR ME KEY */     00308200
*    THEN                                                               00308300
*      DO;                                   /*DISALLOWED KEYS CHECK */ 00308400
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00308500
*        IF FUNCAMODE^=''                    /* CHECK KEY */            00308600
*          THEN                                                         00308700
*            ZCVAL=ZCVAL!!',FUNCAMODE';                                 00308800
*        IF ZCVAL^=''                                                   00308900
*          THEN                                                         00309000
*            DO;                             /* INCORRECT KEYS USED */  00309100
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00309200
*              ZMS=' 8, "FUNCNAME'!!         /**KMEIP* MSG*/            00309300
*                  '"'!!                                                00309400
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   00309500
*                  ' FOLLOWING KEY(S) "'!!                              00309600
*                  ZCVAL!!'".';                                         00309700
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00309800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00309900
*              ZMACRET=8;                    /* MACRO ERROR */          00310000
*            END;                                                       00310100
*      END;                                                             00310200
*/*PG.KMEKY11 NAME, OPT INPUT, ME KEYS -START------------------------*/ 00310300
*  IF XFUNCRTN='FUNCADDR'                    /* CHECK FOR ME KEY */     00310400
*    THEN                                                               00310500
*      DO;   /**** START OF A MUTUALLY EXCLUSIVE KEY DO GROUP */        00310600
*/*PG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00310700
*  IF FUNCAMODE='FUNCAMODE'                  /* CHECK ENTRY */          00310800
*    THEN                                                               00310900
*      DO;                                                              00311000
*        ZMS=' 8, THE "FUNCAMODE" KEY'!!                                00311100
*            ' MUST CONTAIN ONE'!!                                      00311200
*            ' (OR MORE) ARGUMENT(S).';                                 00311300
*        ANS MSG('?IEFSSVTI ---> '!!ZMS);                               00311400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00311500
*        ZMACRET=8;                          /* MACRO ERROR */          00311600
*      END;                                                             00311700
*  IF NUMBER(FUNCAMODE)>1                    /* CHECK POSITIONALS */    00311800
*    THEN                                                               00311900
*      DO;                                                              00312000
*        ZMS=' 8, "FUNCAMODE'!!              /**KPOSP* MSG*/            00312100
*            FUNCAMODE!!                                                00312200
*            '" "FUNCAMODE"'!!                                          00312300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00312400
*        ANS MSG('?IEFSSVTI ---> '!!ZMS);                               00312500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00312600
*        ZMACRET=8;                          /* MACRO ERROR */          00312700
*      END;                                                             00312800
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00312900
*  XFUNCAMODE='';                            /* RESET XVARIABLE */      00313000
*  IF FUNCAMODE(1) = 'HOB'                                              00313100
*    THEN                                                               00313200
*      XFUNCAMODE = 'HOB';                   /* SET XVARIABLE */        00313300
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00313400
*  IF FUNCAMODE(1) = '31'                                               00313500
*    THEN                                                               00313600
*      XFUNCAMODE = '31';                    /* SET XVARIABLE */        00313700
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00313800
*  IF FUNCAMODE(1) = '24'                                               00313900
*    THEN                                                               00314000
*      XFUNCAMODE = '24';                    /* SET XVARIABLE */        00314100
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00314200
*  ZXFUNCAMODE='INPUT';                      /* SET IN/OUTPUT */        00314300
*  IF XFUNCAMODE=''                          /* CHECK FOR KEYWORD */    00314400
*    THEN                                                               00314500
*      DO;                                   /* KEYWORD NOT ENTERED */  00314600
*        XFUNCAMODE='HOB';                   /* SET DEFAULT */          00314700
*        IF FUNCAMODE(1)^=''                                            00314800
*          THEN                                                         00314900
*            DO;                                                        00315000
*              ZXFUNCAMODE='';               /* RESET IN/OUTPUT */      00315100
*              ZMS=' 8, "FUNCAMODE'!!        /**KUKWP* MSG*/            00315200
*                  FUNCAMODE!!'"'!!                                     00315300
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00315400
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00315500
*                  ' "HOB",'!!               /* VALID KEYWORD */        00315600
*                  ' "31",'!!                /* VALID KEYWORD */        00315700
*                  ' OR "24".';              /* VALID KEYWORD */        00315800
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00315900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00316000
*              ZMACRET=8;                    /* MACRO ERROR */          00316100
*            END;                                                       00316200
*      END;                                                             00316300
*/*PG.KMEKY13 NAME, OPT INPUT, ME KEYS -END--------------------------*/ 00316400
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KEY DO GROUP */          00316500
*/*PG.KXVAR17 NAME, OPT INPUT, KEYS -MULTIPLE ARGUMENTS--------------*/ 00316600
*  ZXFCODES='INPUT';                         /* SET IN/OUTPUT */        00316700
*  XFCODES(1)='0';                           /* SET DEFAULT */          00316800
*  XFCODES(2)='';                            /* NULL AT ARRAY END */    00316900
*  ZI=0;                                     /* XVARIABLE ARRAY INDEX*/ 00317000
*  IF NUMBER(FCODES)>0                       /* CHECK FOR PARMS */      00317100
*    THEN                                                               00317200
*      DO ZJ=1 TO NUMBER(FCODES);            /* CHECK PARMS */          00317300
*        IF FCODES(ZJ)^=''                   /* CHECK FOR NULL */       00317400
*          THEN                                                         00317500
*            DO;                             /* SELECT NON-NULL PARMS*/ 00317600
*              ZI=ZI+1;                      /* NEXT ARRAY ENTRY */     00317700
*              XFCODES(ZI)=                                             00317800
*                  FCODES(ZJ);               /* GET PARM */             00317900
*              XFCODES(ZI+1)='';             /* NULL AT END */          00318000
*            END;                                                       00318100
*      END;                                                             00318200
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00318300
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00318400
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00318500
*  IF TYPE(1)='RESERVE'                      /* CHECK FOR KEYWORD */    00318600
*    THEN                                                               00318700
*      DO;                                                              00318800
*        XTYPE='RESERVE';                    /* SET XVARIABLE */        00318900
*        IF NUMBER(TYPE)>1                   /* CHECK POSITIONALS */    00319000
*          THEN                                                         00319100
*            DO;                                                        00319200
*              ZMS=' 8, "TYPE'!!             /**KPOSP* MSG*/            00319300
*                  TYPE!!                                               00319400
*                  '" "TYPE"'!!                                         00319500
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00319600
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00319700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00319800
*              ZMACRET=8;                    /* MACRO ERROR */          00319900
*            END;                                                       00320000
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00320100
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00320200
*        IF FUNCNAME^=''                     /* CHECK FOR KEY */        00320300
*          THEN                                                         00320400
*            ZCVAL=ZCVAL!!',FUNCNAME';       /* INCORRECT KEY USED */   00320500
*        IF FUNCADDR^=''                     /* CHECK FOR KEY */        00320600
*          THEN                                                         00320700
*            ZCVAL=ZCVAL!!',FUNCADDR';       /* INCORRECT KEY USED */   00320800
*        IF NUMFCODES^=''                    /* CHECK FOR KEY */        00320900
*          THEN                                                         00321000
*            ZCVAL=ZCVAL!!',NUMFCODES';      /* INCORRECT KEY USED */   00321100
*        IF FCODES^=''                       /* CHECK FOR KEY */        00321200
*          THEN                                                         00321300
*            ZCVAL=ZCVAL!!',FCODES';         /* INCORRECT KEY USED */   00321400
*        IF SOURCE^=''                       /* CHECK FOR KEY */        00321500
*          THEN                                                         00321600
*            ZCVAL=ZCVAL!!',SOURCE';         /* INCORRECT KEY USED */   00321700
*        IF ENTRYDATA^=''                    /* CHECK FOR KEY */        00321800
*          THEN                                                         00321900
*            ZCVAL=ZCVAL!!',ENTRYDATA';      /* INCORRECT KEY USED */   00322000
*        IF FUNCAMODE^=''                    /* CHECK FOR KEY */        00322100
*          THEN                                                         00322200
*            ZCVAL=ZCVAL!!',FUNCAMODE';      /* INCORRECT KEY USED */   00322300
*        IF ZCVAL^=''                                                   00322400
*          THEN                                                         00322500
*            DO;                             /* INCORRECT KEYS USED */  00322600
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00322700
*              ZMS=' 8, "TYPE'!!             /**KMEIP* MSG*/            00322800
*                  TYPE!!'"'!!                                          00322900
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   00323000
*                  ' FOLLOWING KEY(S) "'!!                              00323100
*                  ZCVAL!!'".';                                         00323200
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00323300
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00323400
*              ZMACRET=8;                    /* MACRO ERROR */          00323500
*            END;                                                       00323600
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00323700
*  IF NUMBER(SSVTDATA)>1                     /* CHECK POSITIONALS */    00323800
*    THEN                                                               00323900
*      DO;                                                              00324000
*        ZMS=' 8, "SSVTDATA'!!               /**KPOSP* MSG*/            00324100
*            SSVTDATA!!                                                 00324200
*            '" "SSVTDATA"'!!                                           00324300
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00324400
*        ANS MSG('?IEFSSVTI ---> '!!ZMS);                               00324500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00324600
*        ZMACRET=8;                          /* MACRO ERROR */          00324700
*      END;                                                             00324800
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00324900
*  XSSVTDATA=SSVTDATA(1);                    /* SET XVARIABLE */        00325000
*  IF SSVTDATA(1)=''                         /* CHECK FOR NULL */       00325100
*   THEN                                                                00325200
*    DO;                                     /* KEY IS REQUIRED */      00325300
*        ZXSSVTDATA='';                      /* RESET IN/OUTPUT */      00325400
*        ZMS=' 8,  '!!                                                  00325500
*            ' "SSVTDATA" KEY AND ITS'!!                                00325600
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00325700
*        ANS MSG('?IEFSSVTI ---> '!!ZMS);                               00325800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00325900
*        ZMACRET=8;                          /* MACRO ERROR */          00326000
*    END;                                                               00326100
*  ELSE                                                                 00326200
*    ZXSSVTDATA='INPUT';                     /* SET IN/OUTPUT */        00326300
*/*PG.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 00326400
*  XRESERVE_LEN='';                          /* RESET XVARIABLE */      00326500
*  IF TABLEN^=''                             /* CHECK ME KEY */         00326600
*    THEN                                                               00326700
*      DO;                                   /* VALID ME KEY */         00326800
*        IF NUMBER(TABLEN)>1                 /* CHECK SUBLISTS */       00326900
*          THEN                                                         00327000
*            DO;                                                        00327100
*              ZMS=' 8, "TABLEN'!!           /**KPOSP* MSG*/            00327200
*                  TABLEN!!                                             00327300
*                  '" "TABLEN"'!!                                       00327400
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00327500
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00327600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00327700
*              ZMACRET=8;                    /* MACRO ERROR */          00327800
*            END;                                                       00327900
*        XRESERVE_LEN='TABLEN';              /* SET XVARIABLE */        00328000
*        XTABLEN=TABLEN(1);                  /* SET XVARIABLE */        00328100
*        ZXRESERVE_LEN='INPUT';              /* SET IN/OUTPUT */        00328200
*        ZXTABLEN='INPUT';                   /* SET IN/OUTPUT */        00328300
*        IF TABLEN(1)=''                     /* CHECK ME KEY */         00328400
*          THEN                                                         00328500
*            DO;                                                        00328600
*              ZXRESERVE_LEN='';             /* RESET IN/OUTPUT */      00328700
*              ZXTABLEN='';                  /* RESET IN/OUTPUT */      00328800
*              ZMS=' 8,  '!!                                            00328900
*                  ' "TABLEN" KEY AND ITS'!!                            00329000
*                  ' ARGUMENT ARE REQUIRED.'; /**KRQDP* MSG*/           00329100
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00329200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00329300
*              ZMACRET=8;                    /* MACRO ERROR */          00329400
*           END;                                                        00329500
*      END;                                                             00329600
*/*PG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE KEY----------------*/ 00329700
*  IF MAXFCODES^=''                          /* CHECK ME KEY */         00329800
*    THEN                                                               00329900
*      DO;                                                              00330000
*        IF NUMBER(MAXFCODES)>1              /* CHECK SUBLISTS */       00330100
*          THEN                                                         00330200
*            DO;                                                        00330300
*              ZMS=' 8, "MAXFCODES'!!        /**KPOSP* MSG*/            00330400
*                  MAXFCODES!!                                          00330500
*                  '" "MAXFCODES"'!!                                    00330600
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00330700
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00330800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00330900
*              ZMACRET=8;                    /* MACRO ERROR */          00331000
*            END;                                                       00331100
*        IF XRESERVE_LEN=''                  /* CHECK XVARIABLE */      00331200
*          THEN                                                         00331300
*            DO;                             /* VALID ME KEY */         00331400
*              XRESERVE_LEN='MAXFCODES';     /* SET XVAR1 */            00331500
*              XMAXFCODES=MAXFCODES(1);      /* SET XVAR2 */            00331600
*              ZXRESERVE_LEN='INPUT';        /* SET IN/OUTPUT */        00331700
*              ZXMAXFCODES='INPUT';          /* SET IN/OUTPUT */        00331800
*              IF MAXFCODES(1)=''            /* CHECK ME KEY */         00331900
*                THEN                                                   00332000
*                  DO;                                                  00332100
*                    ZXRESERVE_LEN='';       /* RESET IN/OUTPUT */      00332200
*                    ZXMAXFCODES='';         /* RESET IN/OUTPUT */      00332300
*                    ZMS=' 8,  '!!                                      00332400
*                        ' "MAXFCODES" KEY AND ITS'!!                   00332500
*                        ' ARGUMENT ARE REQUIRED.'; /**KRQDP* MSG*/     00332600
*                    ANS MSG('?IEFSSVTI ---> '!!ZMS);                   00332700
*                    ANS(COMMENT(ZMS)) COL(MACLMAR);                    00332800
*                    ZMACRET=8;              /* MACRO ERROR */          00332900
*                  END;                                                 00333000
*            END;                                                       00333100
*          ELSE                                                         00333200
*            DO;                                                        00333300
*              ZMS=' 8, "MAXFCODES'!!        /**KMEKP* MSG*/            00333400
*                  MAXFCODES!!'"'!!                                     00333500
*                  ' IS MUTUALLY EXCLUSIVE WITH THE "'!!                00333600
*                  XRESERVE_LEN!!                                       00333700
*                  '" KEY.';                                            00333800
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00333900
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00334000
*              ZMACRET=8;                    /* MACRO ERROR */          00334100
*            END;                                                       00334200
*      END;                                                             00334300
*/*PG.KMEKY08 NAME, RQD INPUT, ME KEYS -ME KEY DEFAULT---------------*/ 00334400
*  IF XRESERVE_LEN=''                        /* CHECK XVARIABLE */      00334500
*    THEN                                                               00334600
*      DO;                                                              00334700
*        XRESERVE_LEN='TABLEN';              /* SET DEFAULT */          00334800
*        XTABLEN='0';                        /* SET DEFAULT */          00334900
*        ZXRESERVE_LEN='';                   /* RESET IN/OUTPUT */      00335000
*        ZXTABLEN='';                        /* RESET IN/OUTPUT */      00335100
*        ZMS=' 8, ONE OF THE FOLLOWING'!!    /**KMERP* MSG*/            00335200
*            ' MUTUALLY EXCLUSIVE KEY(S) IS'!!                          00335300
*            ' REQUIRED:'!!                                             00335400
*            ' "TABLEN"'!!                   /* VALID ME KEY */         00335500
*            ' OR "MAXFCODES".';             /* VALID ME KEY */         00335600
*        ANS MSG('?IEFSSVTI ---> '!!ZMS);                               00335700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00335800
*        ZMACRET=8;                          /* MACRO ERROR */          00335900
*      END;                                                             00336000
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00336100
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00336200
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00336300
*  IF TYPE(1)='COPY'                         /* CHECK FOR KEYWORD */    00336400
*    THEN                                                               00336500
*      DO;                                                              00336600
*        XTYPE='COPY';                       /* SET XVARIABLE */        00336700
*        IF NUMBER(TYPE)>1                   /* CHECK POSITIONALS */    00336800
*          THEN                                                         00336900
*            DO;                                                        00337000
*              ZMS=' 8, "TYPE'!!             /**KPOSP* MSG*/            00337100
*                  TYPE!!                                               00337200
*                  '" "TYPE"'!!                                         00337300
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00337400
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00337500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00337600
*              ZMACRET=8;                    /* MACRO ERROR */          00337700
*            END;                                                       00337800
*/*PG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00337900
*        ZCVAL='';                           /* INCORRECT KEYS FIELD */ 00338000
*        IF TABLEN^=''                       /* CHECK FOR KEY */        00338100
*          THEN                                                         00338200
*            ZCVAL=ZCVAL!!',TABLEN';         /* INCORRECT KEY USED */   00338300
*        IF FUNCNAME^=''                     /* CHECK FOR KEY */        00338400
*          THEN                                                         00338500
*            ZCVAL=ZCVAL!!',FUNCNAME';       /* INCORRECT KEY USED */   00338600
*        IF FUNCADDR^=''                     /* CHECK FOR KEY */        00338700
*          THEN                                                         00338800
*            ZCVAL=ZCVAL!!',FUNCADDR';       /* INCORRECT KEY USED */   00338900
*        IF NUMFCODES^=''                    /* CHECK FOR KEY */        00339000
*          THEN                                                         00339100
*            ZCVAL=ZCVAL!!',NUMFCODES';      /* INCORRECT KEY USED */   00339200
*        IF FCODES^=''                       /* CHECK FOR KEY */        00339300
*          THEN                                                         00339400
*            ZCVAL=ZCVAL!!',FCODES';         /* INCORRECT KEY USED */   00339500
*        IF ENTRYDATA^=''                    /* CHECK FOR KEY */        00339600
*          THEN                                                         00339700
*            ZCVAL=ZCVAL!!',ENTRYDATA';      /* INCORRECT KEY USED */   00339800
*        IF FUNCAMODE^=''                    /* CHECK FOR KEY */        00339900
*          THEN                                                         00340000
*            ZCVAL=ZCVAL!!',FUNCAMODE';      /* INCORRECT KEY USED */   00340100
*        IF MAXFCODES^=''                    /* CHECK FOR KEY */        00340200
*          THEN                                                         00340300
*            ZCVAL=ZCVAL!!',MAXFCODES';      /* INCORRECT KEY USED */   00340400
*        IF ZCVAL^=''                                                   00340500
*          THEN                                                         00340600
*            DO;                             /* INCORRECT KEYS USED */  00340700
*              ZCVAL=ZCVAL(2:LENGTH(ZCVAL));                            00340800
*              ZMS=' 8, "TYPE'!!             /**KMEIP* MSG*/            00340900
*                  TYPE!!'"'!!                                          00341000
*                  ' DOES NOT ALLOW THE USE OF THE'!!                   00341100
*                  ' FOLLOWING KEY(S) "'!!                              00341200
*                  ZCVAL!!'".';                                         00341300
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00341400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00341500
*              ZMACRET=8;                    /* MACRO ERROR */          00341600
*            END;                                                       00341700
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00341800
*  IF NUMBER(SSVTDATA)>1                     /* CHECK POSITIONALS */    00341900
*    THEN                                                               00342000
*      DO;                                                              00342100
*        ZMS=' 8, "SSVTDATA'!!               /**KPOSP* MSG*/            00342200
*            SSVTDATA!!                                                 00342300
*            '" "SSVTDATA"'!!                                           00342400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00342500
*        ANS MSG('?IEFSSVTI ---> '!!ZMS);                               00342600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00342700
*        ZMACRET=8;                          /* MACRO ERROR */          00342800
*      END;                                                             00342900
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00343000
*  XSSVTDATA=SSVTDATA(1);                    /* SET XVARIABLE */        00343100
*  IF SSVTDATA(1)=''                         /* CHECK FOR NULL */       00343200
*   THEN                                                                00343300
*    DO;                                     /* KEY IS REQUIRED */      00343400
*        ZXSSVTDATA='';                      /* RESET IN/OUTPUT */      00343500
*        ZMS=' 8,  '!!                                                  00343600
*            ' "SSVTDATA" KEY AND ITS'!!                                00343700
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00343800
*        ANS MSG('?IEFSSVTI ---> '!!ZMS);                               00343900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00344000
*        ZMACRET=8;                          /* MACRO ERROR */          00344100
*    END;                                                               00344200
*  ELSE                                                                 00344300
*    ZXSSVTDATA='INPUT';                     /* SET IN/OUTPUT */        00344400
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00344500
*  IF NUMBER(SOURCE)>1                       /* CHECK POSITIONALS */    00344600
*    THEN                                                               00344700
*      DO;                                                              00344800
*        ZMS=' 8, "SOURCE'!!                 /**KPOSP* MSG*/            00344900
*            SOURCE!!                                                   00345000
*            '" "SOURCE"'!!                                             00345100
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00345200
*        ANS MSG('?IEFSSVTI ---> '!!ZMS);                               00345300
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00345400
*        ZMACRET=8;                          /* MACRO ERROR */          00345500
*      END;                                                             00345600
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00345700
*  XSOURCE=SOURCE(1);                        /* SET XVARIABLE */        00345800
*  IF SOURCE(1)=''                           /* CHECK FOR NULL */       00345900
*   THEN                                                                00346000
*    DO;                                     /* KEY IS REQUIRED */      00346100
*        ZXSOURCE='';                        /* RESET IN/OUTPUT */      00346200
*        ZMS=' 8,  '!!                                                  00346300
*            ' "SOURCE" KEY AND ITS'!!                                  00346400
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00346500
*        ANS MSG('?IEFSSVTI ---> '!!ZMS);                               00346600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00346700
*        ZMACRET=8;                          /* MACRO ERROR */          00346800
*    END;                                                               00346900
*  ELSE                                                                 00347000
*    ZXSOURCE='INPUT';                       /* SET IN/OUTPUT */        00347100
*/*PG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00347200
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00347300
*/*PG.KKCTL06 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00347400
*  IF TYPE='TYPE'                                                       00347500
*    ! TYPE='()'                             /*CHECK ENTRY*/            00347600
*     THEN                                                              00347700
*       DO;                                                             00347800
*              ZMS=' 8, THE "TYPE" KEY'!!                               00347900
*                  ' MUST CONTAIN ONE'!!                                00348000
*                  ' (OR MORE) ARGUMENT(S).';                           00348100
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00348200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00348300
*              ZMACRET=8;                    /* MACRO ERROR */          00348400
*       END;                                                            00348500
*  ELSE                                                                 00348600
*    DO;                                                                00348700
*      ZXTYPE='INPUT';                       /* SET IN/OUTPUT */        00348800
*      IF XTYPE=''                           /* CHECK FOR KEYWORD */    00348900
*        THEN                                                           00349000
*          DO;                               /* KEYWORD NOT ENTERED */  00349100
*            XTYPE='LIST';                   /* SET DEFAULT */          00349200
*            IF TYPE(1)^=''                  /* CHECK FOR KEYWORD */    00349300
*              THEN                                                     00349400
*                DO;                                                    00349500
*                  ZXTYPE='';                /* RESET IN/OUTPUT */      00349600
*              ZMS=' 8, "TYPE'!!             /**KUKWP* MSG*/            00349700
*                  TYPE!!'"'!!                                          00349800
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00349900
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00350000
*                  ' "LIST",'!!              /* VALID KEYWORD */        00350100
*                  ' "INITIAL",'!!           /* VALID KEYWORD */        00350200
*                  ' "ENTRY",'!!             /* VALID KEYWORD */        00350300
*                  ' "FINAL",'!!             /* VALID KEYWORD */        00350400
*                  ' "SET",'!!               /* VALID KEYWORD */        00350500
*                  ' "RESERVE",'!!           /* VALID KEYWORD */        00350600
*                  ' OR "COPY".';            /* VALID KEYWORD */        00350700
*              ANS MSG('?IEFSSVTI ---> '!!ZMS);                         00350800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00350900
*              ZMACRET=8;                    /* MACRO ERROR */          00351000
*                END;                                                   00351100
*          END;                                                         00351200
*    END;                                                               00351300
*/*PG.KKCTL07 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00351400
*  IF TYPE(1)=''                             /* CHECK FOR KEYWORD */    00351500
*    THEN                                                               00351600
*      DO;                                                              00351700
*        ZXTYPE='';                          /* RESET IN/OUTPUT */      00351800
*        ZMS=' 8, THE'!!                     /**KRKWP* MSG*/            00351900
*            ' "TYPE" KEY AND ITS'!!                                    00352000
*            ' ARGUMENT ARE REQUIRED.'!!                                00352100
*            ' VALID KEYWORD CHOICE(S) ARE:'!!                          00352200
*            ' "LIST",'!!                    /* VALID KEYWORD */        00352300
*            ' "INITIAL",'!!                 /* VALID KEYWORD */        00352400
*            ' "ENTRY",'!!                   /* VALID KEYWORD */        00352500
*            ' "FINAL",'!!                   /* VALID KEYWORD */        00352600
*            ' "SET",'!!                     /* VALID KEYWORD */        00352700
*            ' "RESERVE",'!!                 /* VALID KEYWORD */        00352800
*            ' OR "COPY".';                  /* VALID KEYWORD */        00352900
*        ANS MSG('?IEFSSVTI ---> '!!ZMS);                               00353000
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00353100
*        ZMACRET=8;                          /* MACRO ERROR */          00353200
*      END;                                                             00353300
*/********************************************************************/ 00353400
*/***PE.MR01 GENERATE CODE IF ZMACRET=0                              */ 00353500
*/********************************************************************/ 00353600
*  IF ZMACRET = 0                                                       00353700
*    THEN                                                               00353800
*      DO;                                                              00353900
*/********************************************************************/ 00354000
*/***PE.PR01 PRINT CONTROLS, DEFAULT IS YES                          */ 00354100
*/********************************************************************/ 00354200
*  ANS(MACCONC!!'LIST PUSH;') NORESCAN COL(MACLMAR);                    00354300
*  IF ZPRINT='NO'                            /* PRINT IS OFF */         00354400
*    THEN                                                               00354500
*      ANS(MACCONC!!'LIST OFF;') NORESCAN COL(MACLMAR);                 00354600
*    ELSE                                                               00354700
*      ANS(MACCONC!!'LIST ON;')  NORESCAN COL(MACLMAR);                 00354800
*/********************************************************************/ 00354900
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00355000
*/********************************************************************/ 00355100
*/* External macro variables                                         */ 00355200
*/********************************************************************/ 00355300
*DCL IEFSSVTI_MAPPING_DONE FIXED EXT;    /* Flag used to determine      00355400
*                                      when to define table maps     */ 00355500
*DCL IEFSSVTI_INITIAL_SEEN FIXED EXT;  /* Flag to tell if we            00355600
*                                      are in an INITIAL/FINAL group */ 00355700
*DCL IEFSSVTI_ENTRY_SEEN FIXED EXT; /* Flag to remember if a            00355800
*                                      TYPE=ENTRY is coded           */ 00355900
*DCL IEFSSVTI_#FRTN FIXED EXT;      /* Number of function routines      00356000
*                                      in a table                    */ 00356100
*DCL IEFSSVTI_TABLE_LENGTH FIXED EXT; /* Length of table             */ 00356200
*DCL IEFSSVTI_#FRTN_NAME CHAR EXT;  /* Remembers name of variable       00356300
*                                      for number of function           00356400
*                                      routines between invocations  */ 00356500
*DCL IEFSSVTI_TABLEN_NAME CHAR EXT; /* Remembers name of table length   00356600
*                                      variable between invocations  */ 00356700
*DCL EHAREGS CHAR EXT;              /* EPILOG register declaration      00356800
*                                      control variable              */ 00356900
*/********************************************************************/ 00357000
*/* Internal macro variables                                         */ 00357100
*/********************************************************************/ 00357200
*DCL IEFSSVTI_HEADLEN FIXED;        /* Length of table header        */ 00357300
*DCL IEFSSVTI_ENTRY_HEADLEN FIXED;  /* Length of table entry header  */ 00357400
*DCL FCODINDX FIXED;                /* Index over function code list */ 00357500
*DCL TABLEN_STRING CHAR;            /* String containing expression     00357600
*                                      for length of table           */ 00357700
*DCL ZELO  FIXED;                   /* Index for invocation echo     */ 00357800
*DCL ZECOL FIXED;                   /* Index for invocation echo     */ 00357900
*                                                                       00358000
*IEFSSVTI_HEADLEN = 12;             /* Length of table header        */ 00358100
*IEFSSVTI_ENTRY_HEADLEN = 12;       /* Length of table entry header  */ 00358200
*                                                                       00358300
*/********************************************************************/ 00358400
*/* Perform TYPE-specific actions                                    */ 00358500
*/********************************************************************/ 00358600
*SELECT(XTYPE);                     /* Type-specific actions         */ 00358700
*  WHEN ('LIST')                    /* TYPE=LIST                     */ 00358800
*/********************************************************************/ 00358900
*/* Generate table mappings if necessary                             */ 00359000
*/********************************************************************/ 00359100
*    IF (IEFSSVTI_MAPPING_DONE = 0) THEN  /* First TYPE=LIST            00359200
*                                      invocation                    */ 00359300
*      DO;                          /* Map table and entries         */ 00359400
*/********************************************************************/ 00359500
*/* Save the LIST status and map the header and table            @P6C*/ 00359600
*/********************************************************************/ 00359700
*/* Map table header                                                 */ 00359800
*/********************************************************************/ 00359900
*        ANS('DCL 1 VTI_HEADER BASED,') COL(MACLMAR) NOSCAN;            00360000
*        ANS('3 VTIH_ID CHAR(4),') COL(MACLMAR+6) NOSCAN;               00360100
*        ANS('3 VTIH_TABLEN FIXED(15),') COL(MACLMAR+6) NOSCAN;         00360200
*        ANS('3 VTIH_VERSION FIXED(15),') COL(MACLMAR+6) NOSCAN;        00360300
*        ANS('3 VTIH_NUM_FRTNS FIXED(15),') COL(MACLMAR+6) NOSCAN;      00360400
*        ANS('3 *             CHAR(2),') COL(MACLMAR+6) NOSCAN;         00360500
*        ANS('3 VTIH_FROUTINE_DATA CHAR(*);') COL(MACLMAR+6) NOSCAN;    00360600
*/********************************************************************/ 00360700
*/* Map table entry                                                  */ 00360800
*/********************************************************************/ 00360900
*        ANS('DCL 1 VTI_ENTRY BASED,') COL(MACLMAR) NOSCAN;             00361000
*        ANS('3 VTIE_HEADER,') COL(MACLMAR+6) NOSCAN;                   00361100
*        ANS('5 VTIE_FUNCNAME CHAR(8),') COL(MACLMAR+8) NOSCAN;         00361200
*        ANS('7 *                  CHAR(4),') COL(MACLMAR+10) NOSCAN;   00361300
*        ANS('7 VTIE_FUNCADDR CHAR(4),') COL(MACLMAR+10) NOSCAN;        00361400
*        ANS('5 VTIE_MAX_NUM_FCODES FIXED(15),') COL(MACLMAR+8) NOSCAN; 00361500
*        ANS('5 VTIE_NUM_FCODES FIXED(15),') COL(MACLMAR+8) NOSCAN;     00361600
*        ANS('3 VTIE_FCODES(*) FIXED(8);') COL(MACLMAR+6) NOSCAN;       00361700
*/********************************************************************/ 00361800
*/* Restore LIST status and indicate mappings generated              */ 00361900
*/********************************************************************/ 00362000
*        IEFSSVTI_MAPPING_DONE = 1; /* Indicate mappings done        */ 00362100
*      END;                         /* Map table and entries         */ 00362200
*  WHEN ('INITIAL')                 /* TYPE=INITIAL                  */ 00362300
*    DO;                            /* WHEN(INITIAL)                 */ 00362400
*/********************************************************************/ 00362500
*/* Check for invocation errors                                      */ 00362600
*/********************************************************************/ 00362700
*      IF (IEFSSVTI_INITIAL_SEEN = 1) THEN  /* Multiple INITIALs @P5A*/ 00362800
*        DO;                       /* Issue error message        @P5A*/ 00362900
*          ZMS=' 8, ONLY ONE TYPE=INITIAL PERMITTED IN STATIC TABLE';   00363000
*                                  /*                            @P5A*/ 00363100
*          ANS MSG('?IEFSSVTI ---> '!!ZMS);  /*                  @P5A*/ 00363200
*          ANS(COMMENT(ZMS)) COL(MACLMAR);  /*                   @P5A*/ 00363300
*          ZMACRET=8;              /* Macro error                @P5A*/ 00363400
*        END;                      /* Issue error message        @P5A*/ 00363500
*      IF (ZMACRET = 0) THEN       /* If no errors               @P5A*/ 00363600
*        DO;                       /* Initialize table           @P5A*/ 00363700
*/********************************************************************/ 00363800
*/* Initialize table values                                          */ 00363900
*/********************************************************************/ 00364000
*          IEFSSVTI_INITIAL_SEEN = 1; /* Indicate TYPE=INITIAL coded */ 00364100
*          IEFSSVTI_#FRTN = 0;                                          00364200
*          IEFSSVTI_#FRTN_NAME = XSSVTDATA !! '_#FRTN';                 00364300
*          IEFSSVTI_TABLEN_NAME = XTABLEN; /* Save length               00364400
*                                     variable name                  */ 00364500
*          IEFSSVTI_TABLE_LENGTH = IEFSSVTI_HEADLEN;                    00364600
*/********************************************************************/ 00364700
*/* Begin table mapping                                              */ 00364800
*/********************************************************************/ 00364900
*          ANS('DCL 1 ' !! XSSVTDATA !! ' STATIC,')                     00365000
*              COL(MACLMAR) NOSCAN;                                     00365100
*          ANS('3 * CHAR(4) INIT(' !! QUOTE('VTIT') !! '),')            00365200
*              COL(MACLMAR+6) NOSCAN;                                   00365300
*          ANS('3 * FIXED(15) INIT(' !! IEFSSVTI_TABLEN_NAME !! '),')   00365400
*              COL(MACLMAR+6) NOSCAN;                                   00365500
*          ANS('3 * FIXED(15) INIT(1),') COL(MACLMAR+6) NOSCAN;         00365600
*          ANS('3 * FIXED(15) INIT(' !! IEFSSVTI_#FRTN_NAME !! '),')    00365700
*              COL(MACLMAR+6) NOSCAN;                                   00365800
*          ANS('3 * CHAR(2) INIT(' !! QUOTE('0000') !! 'X),')           00365900
*              COL(MACLMAR+6) NOSCAN;                                   00366000
*        END;                      /* Initialize table           @P5A*/ 00366100
*    END;                          /* WHEN(INITIAL)                  */ 00366200
*  WHEN ('ENTRY')                  /* TYPE=ENTRY                     */ 00366300
*    DO;                           /* WHEN(ENTRY)                    */ 00366400
*      IEFSSVTI_ENTRY_SEEN = 1;    /* Indicate TYPE=ENTRY coded      */ 00366500
*/********************************************************************/ 00366600
*/* Check for invocation errors                                      */ 00366700
*/********************************************************************/ 00366800
*      IF (IEFSSVTI_INITIAL_SEEN = 0) THEN  /* ENTRY w/o INITIAL     */ 00366900
*        DO;                       /* Issue error message            */ 00367000
*          ZMS=' 8, TYPE=INITIAL MUST PRECEDE TYPE=ENTRY';              00367100
*          ANS MSG('?IEFSSVTI ---> '!!ZMS);                             00367200
*          ANS(COMMENT(ZMS)) COL(MACLMAR);                              00367300
*          ZMACRET=8;              /* Macro error                    */ 00367400
*        END;                      /* Issue error message            */ 00367500
*      IF (NUMBER(FCODES) > FIXED(XNUMFCODES))                          00367600
*          THEN                    /* NUMFCODES and FCODES              00367700
*                                     inconsistent                   */ 00367800
*        DO;                       /* Issue error message            */ 00367900
*          ZMS=' 8, NUMFCODES MUST BE GREATER THAN OR EQUAL TO ';       00368000
*          ZMS=ZMS !! 'NUMBER OF FUNCTION CODES SPECIFIED WITH ';       00368100
*          ZMS=ZMS !! 'FCODES';                                         00368200
*          ANS MSG('?IEFSSVTI ---> '!!ZMS);                             00368300
*          ANS(COMMENT(ZMS)) COL(MACLMAR);                              00368400
*          ZMACRET=8;              /* Macro error                    */ 00368500
*        END;                      /* Issue error message            */ 00368600
*      IF (ZMACRET = 0) THEN       /* No errors, generate code       */ 00368700
*        DO;                       /* Generate TYPE=ENTRY code       */ 00368800
*/********************************************************************/ 00368900
*/* Generate table entry                                             */ 00369000
*/********************************************************************/ 00369100
*          IF (NUMBER(FUNCNAME) > 0) THEN  /* FUNCNAME specified     */ 00369200
*            ANS('3 * CHAR(8) INIT(' !! XFUNCNAME !! '),')              00369300
*                COL(MACLMAR+6) NOSCAN;                                 00369400
*          ELSE                     /* FUNCADDR or neither specified */ 00369500
*            ANS('3 * CHAR(8) INIT(' !!                                 00369600
*                QUOTE('0000000000000000') !! 'X),')                    00369700
*                COL(MACLMAR+6) NOSCAN;                                 00369800
*          ANS('3 * FIXED(15) INIT(' !! XNUMFCODES !! ') BDY(BYTE),')   00369900
*                COL(MACLMAR+6) NOSCAN;                                 00370000
*          ANS('3 * FIXED(15) INIT(' !! CHAR(NUMBER(FCODES)) !!         00370100
*                ') BDY(BYTE),') COL(MACLMAR+6) NOSCAN;                 00370200
*          DO FCODINDX = 1 TO NUMBER(FCODES);  /* Loop over codes    */ 00370300
*            ANS('3 * FIXED(8) INIT(' !! FCODES(FCODINDX) !! '),')      00370400
*                COL(MACLMAR+6) NOSCAN;                                 00370500
*          END;                     /* DO FCODINDX                   */ 00370600
*          IF (NUMBER(FCODES) < FIXED(XNUMFCODES)) THEN  /* Max         00370700
*                                      greater than actual           */ 00370800
*            DO FCODINDX = 1 TO (FIXED(XNUMFCODES) - NUMBER(FCODES));   00370900
*                                   /* Pad to reserve room           */ 00371000
*              ANS('3 * FIXED(8) INIT(' !! QUOTE('00') !! 'X),')        00371100
*                  COL(MACLMAR+6) NOSCAN;                               00371200
*            END;                   /* Pad to reserve room           */ 00371300
*/********************************************************************/ 00371400
*/* Update table values                                              */ 00371500
*/********************************************************************/ 00371600
*          IEFSSVTI_#FRTN = IEFSSVTI_#FRTN + 1;                         00371700
*          IEFSSVTI_TABLE_LENGTH = IEFSSVTI_TABLE_LENGTH +              00371800
*              IEFSSVTI_ENTRY_HEADLEN + FIXED(XNUMFCODES) * 1;          00371900
*        END;                      /* Generate TYPE=ENTRY code       */ 00372000
*    END;                          /* WHEN(ENTRY)                    */ 00372100
*  WHEN ('FINAL')                  /* TYPE=FINAL                     */ 00372200
*    DO;                           /* WHEN(FINAL)                    */ 00372300
*/********************************************************************/ 00372400
*/* Check for invocation errors                                      */ 00372500
*/********************************************************************/ 00372600
*      IF (IEFSSVTI_INITIAL_SEEN = 0) THEN  /* FINAL w/o INITIAL     */ 00372700
*        DO;                       /* Issue error message            */ 00372800
*          ZMS=' 8, TYPE=INITIAL MUST PRECEDE TYPE=FINAL';              00372900
*          ANS MSG('?IEFSSVTI ---> '!!ZMS);                             00373000
*          ANS(COMMENT(ZMS)) COL(MACLMAR);                              00373100
*          ZMACRET=8;              /* Macro error                    */ 00373200
*        END;                      /* Issue error message            */ 00373300
*      IF (IEFSSVTI_ENTRY_SEEN = 0) THEN  /* FINAL w/o ENTRY         */ 00373400
*        DO;                       /* Issue error message            */ 00373500
*          ZMS=' 8, TABLE MUST INCLUDE AT LEAST ONE TYPE=ENTRY';        00373600
*          ANS MSG('?IEFSSVTI ---> '!!ZMS);                             00373700
*          ANS(COMMENT(ZMS)) COL(MACLMAR);                              00373800
*          ZMACRET=8;              /* Macro error                    */ 00373900
*        END;                      /* Issue error message            */ 00374000
*/********************************************************************/ 00374100
*/* Update table values                                              */ 00374200
*/********************************************************************/ 00374300
*      IEFSSVTI_INITIAL_SEEN = 0;  /* Indicate INITIAL/FINAL set        00374400
*                                     finished                       */ 00374500
*      IEFSSVTI_ENTRY_SEEN = 0;    /* Indicate INITIAL/FINAL set        00374600
*                                     finished                       */ 00374700
*      IF (ZMACRET = 0) THEN       /* No errors, generate code       */ 00374800
*        DO;                       /* Generate TYPE=FINAL code       */ 00374900
*/********************************************************************/ 00375000
*/* Terminate table and generate necessary constant declares         */ 00375100
*/********************************************************************/ 00375200
*          ANS('3 * CHAR(0);') COL(MACLMAR+6) NOSCAN;                   00375300
*                                                                       00375400
*          ANS('DCL ' !! IEFSSVTI_TABLEN_NAME !! ' FIXED(31)            00375500
*              CONSTANT(' !! CHAR(IEFSSVTI_TABLE_LENGTH) !! ');')       00375600
*              COL(MACLMAR) NOSCAN;                                     00375700
*                                                                       00375800
*          ANS('DCL ' !! IEFSSVTI_#FRTN_NAME !! ' FIXED(31)             00375900
*              CONSTANT(' !! CHAR(IEFSSVTI_#FRTN) !! ');')              00376000
*              COL(MACLMAR) NOSCAN;                                     00376100
*        END;                      /* Generate TYPE=FINAL code       */ 00376200
*    END;                          /* WHEN(FINAL)                    */ 00376300
*  WHEN ('SET')                    /* TYPE=SET                       */ 00376400
*    DO;                           /* WHEN(SET)                      */ 00376500
*/********************************************************************/ 00376600
*/* Check for invocation errors                                      */ 00376700
*/********************************************************************/ 00376800
*      IF (IEFSSVTI_INITIAL_SEEN = 1) THEN  /* SET in static table   */ 00376900
*        DO;                       /* Issue error message            */ 00377000
*          ZMS=' 8, TYPE=SET CANNOT BE USED WITHIN STATIC TABLE';       00377100
*          ANS MSG('?IEFSSVTI ---> '!!ZMS);                             00377200
*          ANS(COMMENT(ZMS)) COL(MACLMAR);                              00377300
*          ZMACRET=8;              /* Macro error                    */ 00377400
*        END;                      /* Issue error message            */ 00377500
*      IF (ZMACRET = 0) THEN                                            00377600
*        DO;                       /* Process request                */ 00377700
*/********************************************************************/ 00377800
*/* Echo invocation                                                  */ 00377900
*/********************************************************************/ 00378000
*          ANS('/* ? IEFSSVTI '!!MACLIST!!' ') NOSCAN COL(MACLMAR+5);   00378100
*                                                                       00378200
*          ZELO=1; /* STARTING COLUMN */                                00378300
*          DO WHILE ZELO<=LENGTH(MACKEYS); /* PARENTHSIS SCAN */        00378400
*            ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');            00378500
*            IF ZECOL>0                                                 00378600
*              THEN                                                     00378700
*                DO;               /* PARENTHESIS FOUND */              00378800
*                  ANS(MACKEYS(ZELO:ZELO+ZECOL-1)!!' ')                 00378900
*                     NORESCAN COL(MACLMAR+5);                          00379000
*                  ZELO=ZELO+ZECOL; /* NEXT PORTION */                  00379100
*                END;                                                   00379200
*              ELSE                                                     00379300
*                DO;               /* REMAINING KEYS */                 00379400
*                  ANS(MACKEYS(ZELO:LENGTH(MACKEYS)))                   00379500
*                     NORESCAN COL(MACLMAR+5);                          00379600
*                  ZELO=LENGTH(MACKEYS)+1;                              00379700
*                END;                                                   00379800
*          END;                                                         00379900
*          ANS(' -02/10/94-1- */') NOSCAN COL(MACLMAR+5); /* END ECHO */00380000
*/********************************************************************/ 00380100
*/* Locate target entry                                              */ 00380200
*/********************************************************************/ 00380300
*          ANS('DO;') COL(MACCOL) NOSCAN;                               00380400
*          ANS('RFY GPR01P RSTD;') COL(MACCOL+2) NOSCAN;                00380500
*          ANS('GPR01P = ADDR(' !! XSOURCE !! ');')                     00380600
*              COL(MACCOL+2) NOSCAN;                                    00380700
*          ANS('IF (' !! XENTRYDATA !!                                  00380800
*              ' <= GPR01P->VTIH_NUM_FRTNS) THEN')                      00380900
*              COL(MACCOL+2) NOSCAN;                                    00381000
*          ANS('DO;') COL(MACCOL+4) NOSCAN;                             00381100
*          ANS('GPR01P = ADDR(GPR01P->VTIH_FROUTINE_DATA);')            00381200
*              COL(MACCOL+6) NOSCAN;                                    00381300
*          ANS('RFY VTI_ENTRY BASED(GPR01P);') COL(MACCOL+6) NOSCAN;    00381400
*          ANS('RFY GPR15F RSTD;') COL(MACCOL+6) NOSCAN;                00381500
*          ANS('GPR15F = 1;') COL(MACCOL+6) NOSCAN;                     00381600
*          ANS('DO WHILE (GPR15F < ' !! XENTRYDATA !! ');')             00381700
*              COL(MACCOL+6) NOSCAN;                                    00381800
*          ANS('GPR01P = GPR01P + LENGTH(VTIE_HEADER) + ' !!            00381900
*              'VTIE_MAX_NUM_FCODES * 1;') COL(MACCOL+8) NOSCAN;        00382000
*          ANS('GPR15F = GPR15F + 1;') COL(MACCOL+8) NOSCAN;            00382100
*          ANS('END;') COL(MACCOL+6) NOSCAN;                            00382200
*          ANS('RFY GPR15F UNRSTD;') COL(MACCOL+6) NOSCAN;              00382300
*          ANS('GPR01P = ADDR(' !! XSSVTDATA !! ') + ' !!               00382400
*              'GPR01P - ADDR(' !! XSOURCE !! ');')                     00382500
*              COL(MACCOL+6) NOSCAN;                                    00382600
*/********************************************************************/ 00382700
*/* Set function routine data (name or address), if requested        */ 00382800
*/********************************************************************/ 00382900
*          IF (NUMBER(FUNCNAME) > 0) THEN /* FUNCNAME specified      */ 00383000
*            ANS('VTIE_FUNCNAME = ' !! XFUNCNAME !! ';')                00383100
*                COL(MACLMAR+6) NOSCAN;                                 00383200
*          IF (NUMBER(FUNCADDR) > 0) THEN /* FUNCADDR specified      */ 00383300
*            DO;                   /* FUNCADDR specified             */ 00383400
*              ANS('VTIE_FUNCNAME = ' !! QUOTE('00') !! 'X;')           00383500
*                  COL(MACLMAR+6) NOSCAN;                               00383600
*              ANS('VTIE_FUNCADDR = ' !! XFUNCADDR !! ';')              00383700
*                  COL(MACLMAR+6) NOSCAN;                               00383800
*              IF (NUMBER(FUNCAMODE) > 0) THEN                          00383900
*                IF (XFUNCAMODE = '31') THEN                            00384000
*                  ANS('VTIE_FUNCADDR = VTIE_FUNCADDR ! ' !!            00384100
*                      QUOTE('80000000') !! 'X;')                       00384200
*                      COL(MACLMAR+6) NOSCAN;                           00384300
*                ELSE              /* XFUNCAMODE = 24                */ 00384400
*                  ANS('VTIE_FUNCADDR = VTIE_FUNCADDR & ' !!            00384500
*                      QUOTE('7FFFFFFF') !! 'X;')                       00384600
*                      COL(MACLMAR+6) NOSCAN;                           00384700
*            END;                  /* FUNCADDR specified             */ 00384800
*/********************************************************************/ 00384900
*/* Set function code data, if requested                             */ 00385000
*/********************************************************************/ 00385100
*          IF (NUMBER(FCODES) > 0) THEN                                 00385200
*            DO;                   /* Set function code data         */ 00385300
*              ANS('IF (' !! CHAR(NUMBER(FCODES)) !!                    00385400
*                  ' <= VTIE_MAX_NUM_FCODES) THEN')                     00385500
*                  COL(MACLMAR+6) NOSCAN;                               00385600
*              ANS('DO;') COL(MACCOL+8) NOSCAN;                         00385700
*              DO FCODINDX = 1 TO NUMBER(FCODES);                       00385800
*                ANS('VTIE_FCODES(' !! CHAR(FCODINDX) !! ') = ' !!      00385900
*                    FCODES(FCODINDX) !! ';') COL(MACCOL+10) NOSCAN;    00386000
*              END;                                                     00386100
*              ANS('VTIE_NUM_FCODES = ' !! CHAR(NUMBER(FCODES)) !!      00386200
*                  ';');           /*                            @P1A*/ 00386300
*              ANS('END;') COL(MACCOL+8) NOSCAN;                        00386400
*            END;                  /* Set function code data         */ 00386500
*          ANS('RFY VTI_ENTRY BASED;') COL(MACCOL+6) NOSCAN;            00386600
*          ANS('END;') COL(MACCOL+4) NOSCAN;                            00386700
*          ANS('RFY GPR01P UNRSTD;') COL(MACCOL+2) NOSCAN;              00386800
*          ANS('END;') COL(MACCOL) NOSCAN;                              00386900
*        END;                      /* Process request                */ 00387000
*    END;                          /* WHEN(SET)                      */ 00387100
*  WHEN ('RESERVE')                /* TYPE=RESERVE                   */ 00387200
*    DO;                           /* WHEN(RESERVE)                  */ 00387300
*/********************************************************************/ 00387400
*/* Check for invocation errors                                      */ 00387500
*/********************************************************************/ 00387600
*      IF (IEFSSVTI_INITIAL_SEEN = 1) THEN  /* RESERVE in static        00387700
*                                     table                          */ 00387800
*        DO;                       /* Issue error message            */ 00387900
*          ZMS=' 8, TYPE=RESERVE CANNOT BE USED WITHIN STATIC TABLE';   00388000
*          ANS MSG('?IEFSSVTI ---> '!!ZMS);                             00388100
*          ANS(COMMENT(ZMS)) COL(MACLMAR);                              00388200
*          ZMACRET=8;              /* Macro error                    */ 00388300
*        END;                      /* Issue error message            */ 00388400
*      IF (ZMACRET = 0) THEN                                            00388500
*        DO;                       /* Process request                */ 00388600
*/********************************************************************/ 00388700
*/* Generate declare to reserve storage.  If MAXFCODES was           */ 00388800
*/* specified, reserve the maximum amount of storage assuming one    */ 00388900
*/* function routine per 1-byte function code.                       */ 00389000
*/********************************************************************/ 00389100
*          IF (NUMBER(TABLEN) > 0) THEN /* TABLEN specified          */ 00389200
*            ANS('DCL ' !! XSSVTDATA !! ' CHAR(' !! XTABLEN !! ');')    00389300
*                COL(MACLMAR) NOSCAN;                                   00389400
*          ELSE                    /* MAXFCODES specified            */ 00389500
*            DO;                   /* Reserve maximum needed storage */ 00389600
*              TABLEN_STRING = CHAR(IEFSSVTI_HEADLEN) !! '+' !!         00389700
*                  XMAXFCODES !! '*(' !!                                00389800
*                  CHAR(IEFSSVTI_ENTRY_HEADLEN) !! '+1*1)';             00389900
*              ANS('DCL ' !! XSSVTDATA !! ' CHAR(' !!                   00390000
*                  TABLEN_STRING !! ');') COL(MACLMAR) NOSCAN;          00390100
*            END;                  /* Reserve maximum needed storage */ 00390200
*        END;                      /* Process request                */ 00390300
*    END;                          /* WHEN(RESERVE)                  */ 00390400
*  WHEN ('COPY')                   /* TYPE=COPY                      */ 00390500
*    DO;                           /* WHEN(COPY)                     */ 00390600
*/********************************************************************/ 00390700
*/* Check for invocation errors                                      */ 00390800
*/********************************************************************/ 00390900
*      IF (IEFSSVTI_INITIAL_SEEN = 1) THEN  /* COPY in static table  */ 00391000
*        DO;                       /* Issue error message            */ 00391100
*          ZMS=' 8, TYPE=COPY CANNOT BE USED WITHIN STATIC TABLE';      00391200
*          ANS MSG('?IEFSSVTI ---> '!!ZMS);                             00391300
*          ANS(COMMENT(ZMS)) COL(MACLMAR);                              00391400
*          ZMACRET=8;              /* Macro error                    */ 00391500
*        END;                      /* Issue error message            */ 00391600
*      IF (ZMACRET = 0) THEN                                            00391700
*        DO;                       /* Process request                */ 00391800
*/********************************************************************/ 00391900
*/* Echo invocation                                                  */ 00392000
*/********************************************************************/ 00392100
*          ANS('/* ? IEFSSVTI '!!MACLIST!!' ') NOSCAN COL(MACLMAR+5);   00392200
*                                                                       00392300
*          ZELO=1; /* STARTING COLUMN */                                00392400
*          DO WHILE ZELO<=LENGTH(MACKEYS); /* PARENTHSIS SCAN */        00392500
*            ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');            00392600
*            IF ZECOL>0                                                 00392700
*              THEN                                                     00392800
*                DO;               /* PARENTHESIS FOUND */              00392900
*                  ANS(MACKEYS(ZELO:ZELO+ZECOL-1)!!' ')                 00393000
*                     NORESCAN COL(MACLMAR+5);                          00393100
*                  ZELO=ZELO+ZECOL; /* NEXT PORTION */                  00393200
*                END;                                                   00393300
*              ELSE                                                     00393400
*                DO;               /* REMAINING KEYS */                 00393500
*                  ANS(MACKEYS(ZELO:LENGTH(MACKEYS)))                   00393600
*                     NORESCAN COL(MACLMAR+5);                          00393700
*                  ZELO=LENGTH(MACKEYS)+1;                              00393800
*                END;                                                   00393900
*          END;                                                         00394000
*          ANS(' -02/10/94-1- */') NOSCAN COL(MACLMAR+5); /* END ECHO */00394100
*/********************************************************************/ 00394200
*/* Generate executable code to copy table using MVCL                */ 00394300
*/********************************************************************/ 00394400
*          ANS('DO;') COL(MACCOL) NOSCAN;                               00394500
*          ANS('RFY (GPR00P, GPR01F, GPR14P, GPR15F) RSTD;')            00394600
*              COL(MACCOL+2) NOSCAN;                                    00394700
*          ANS('GPR14P = ADDR(' !! XSOURCE !! ');')                     00394800
*              COL(MACCOL+2) NOSCAN;                                    00394900
*          ANS('GPR15F = GPR14P-> VTIH_TABLEN;')                        00395000
*              COL(MACCOL+2) NOSCAN;                                    00395100
*          ANS('GPR00P = ADDR(' !! XSSVTDATA !! ');')                   00395200
*              COL(MACCOL+2) NOSCAN;                                    00395300
*          ANS('GPR01F = GPR15F;')                                      00395400
*              COL(MACCOL+2) NOSCAN;                                    00395500
*          ANS('MVCL(GPR00P, GPR14P);')                                 00395600
*              COL(MACCOL+2) NOSCAN;                                    00395700
*          ANS('RFY (GPR00P, GPR01F, GPR14P, GPR15F) UNRSTD;')          00395800
*              COL(MACCOL+2) NOSCAN;                                    00395900
*          ANS('END;') COL(MACCOL) NOSCAN;                              00396000
*        END;                      /* Process request                */ 00396100
*    END;                          /* WHEN(COPY)                     */ 00396200
*  OTHERWISE                       /* Invalid request - shouldn't       00396300
*                                     happen                         */ 00396400
*    DO;                           /* Issue error message            */ 00396500
*      ZMS=' 8, INVALID TYPE PARAMETER';                                00396600
*      ANS MSG('?IEFSSVTI ---> '!!ZMS);                                 00396700
*      ANS(COMMENT(ZMS)) COL(MACLMAR);                                  00396800
*      ZMACRET=8;                  /* Macro error                    */ 00396900
*    END;                          /* Issue error message            */ 00397000
*END;                              /* Type-specific actions          */ 00397100
*/*------------------------------------------------------------------*/ 00397200
*/*  MVS  -ENSURE THAT GPRS NEEDED BY AMG MACROS WILL BE PROVIDED    */ 00397300
*/*        BY ?EPILOG                                                */ 00397400
*/*------------------------------------------------------------------*/ 00397500
*IF INDEX(EHAREGS,'00P')=0 THEN                                         00397600
*  EHAREGS=EHAREGS!!'00P';          /* GPR00P                        */ 00397700
*IF INDEX(EHAREGS,'01F')=0 THEN                                         00397800
*  EHAREGS=EHAREGS!!'01F';          /* GPR01F                        */ 00397900
*IF INDEX(EHAREGS,'01P')=0 THEN                                         00398000
*  EHAREGS=EHAREGS!!'01P';          /* GPR01P                        */ 00398100
*IF INDEX(EHAREGS,'14P')=0 THEN                                         00398200
*  EHAREGS=EHAREGS!!'14P';          /* GPR14P                        */ 00398300
*IF INDEX(EHAREGS,'15F')=0 THEN                                         00398400
*  EHAREGS=EHAREGS!!'15F';          /* GPR15F                        */ 00398500
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00398600
*/*PO.L13 IEFSSVTI USAGE INDICATOR-----------------------------------*/ 00398700
*  ZIEFSSVTI='YES';                          /* SET IEFSSVTI USED */    00398800
*/*PO.L16 RESTORE PRINT CONTROLS-------------------------------------*/ 00398900
*  ANS(MACCONC!!'LIST POP;') NORESCAN COL(MACLMAR);                     00399000
*/*PO.L17 END OF IEFSSVTI MACRO--------------------------------------*/ 00399100
*  ANS(MACCONC!!'SPACE;') NORESCAN COL(MACLMAR);                        00399200
*  ANS(' ') NORESCAN COL(MACLMAR);                                      00399300
*/*******************************************************************/  00399400
*/*  PO.L18 END OF CODE TO BE BYPASSED WHEN ZMACRET ^= 0            */  00399500
*/*******************************************************************/  00399600
*      END;                                                             00399700
*  RETURN CODE(ZMACRET);                                                00399800
*%END IEFSSVTI;                                                         00399900
