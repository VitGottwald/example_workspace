*%IVTFREE: MACRO KEYS(BUFLIST,BUFNUM,PLISTVER,MF);                      00000100
*/**** START OF SPECIFICATIONS **************************************** 00000200
*                                                                     * 00000300
*                                                                     * 00000400
*01* MACRO NAME:  IVTFREE                               -99/09/09-<0> * 00000500
*                                                                     * 00000600
*                                                                     * 00000700
*01* DESCRIPTIVE NAME:  CSM Free Routine Interface                    * 00000800
*                                                                     * 00000900
*01* PROPRIETARY STATEMENT:                                           * 00001000
*                                                                     * 00001100
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00001200
*     &maczcpyn(&*1) COPYRIGHT IBM CORP. &maczcpyd(&*1)               * 00001300
*                                                                     * 00001400
* STATUS=                                                             * 00001500
*                                                                     * 00001600
*                                                                     * 00001700
*01* FUNCTION:                                                        * 00001800
*                                                                     * 00001900
*      The IVTFREE macro provides the interface between the           * 00002000
*      Communications Storage Manager (CSM) and the user's free       * 00002100
*      routine when CSM buffers are freed.                            * 00002200
*                                                                     * 00002300
*      The free routine is scheduled to execute in the address space  * 00002400
*      which owns the buffer to ensure that the owning environment    * 00002500
*      still exists.  This prevents the possibility of buffer pool    * 00002600
*      corruption caused by free routine processing executing         * 00002700
*      simultaneously with memory termination processing of the       * 00002800
*      owning address space.                                          * 00002900
*                                                                     * 00003000
*      When a user free routine is driven, the pageability of the     * 00003100
*      buffer may have change.  The original buffer address, token,   * 00003200
*      and length remains the same.                                   * 00003300
*                                                                     * 00003400
*      The user free routine is called by a CSM routine that receives * 00003500
*      control from the SRB scheduler. This CSM routine will free the * 00003600
*      SRB and any parameters upon return from the user free routine. * 00003700
*                                                                     * 00003800
*      The user free routine should invoke IVTFREE specifying the     * 00003900
*      list form of the macro only.  The list option will generate    * 00004000
*      code to map the parameter list passed to the user free routine * 00004100
*      by CSM.  The modify and execute form of the macro should only  * 00004200
*      be used by CSM.                                                * 00004300
*                                                                     * 00004400
*01* EXTERNAL CLASSIFICATION:  GUPI                                   * 00004500
*                                                                     * 00004600
*01* END OF EXTERNAL CLASSIFICATION:                                  * 00004700
*                                                                     * 00004800
*01* ENVIRONMENT:                                                     * 00004900
*                                                                     * 00005000
*                                                                     * 00005100
*      Dispatchable unit mode: SRB mode.                              * 00005200
*                                                                     * 00005300
*      Minimum authorization: Supervisor state.  Zero PSW key.        * 00005400
*                                                                     * 00005500
*      AMODE:            31-bit.                                      * 00005600
*                                                                     * 00005700
*      ASC mode:         Primary.                                     * 00005800
*                                                                     * 00005900
*      Interrupt status: Enabled for I/O and external interrupts.     * 00006000
*                                                                     * 00006100
*      Locks:            No locks held.                               * 00006200
*                                                                     * 00006300
*      Cross Memory Mode: PASN=HASN=SASN.                             * 00006400
*                                                                     * 00006500
*      Control parameters: Control parameters must be in the primary  * 00006600
*                        address space.                               * 00006700
*                                                                     * 00006800
*                                                                     * 00006900
*                                                                     * 00007000
*01* PROGRAMMING REQUIREMENTS:                                        * 00007100
*                                                                     * 00007200
*01* RESTRICTIONS:                                                    * 00007300
*                                                                     * 00007400
*01* INPUT REGISTER INFORMATION:                                      * 00007500
*                                                                     * 00007600
*    Before issuing the execute form of this macro, CSM will ensure   * 00007700
*    that the following general purpose registers contain:            * 00007800
*                                                                     * 00007900
*                                                                     * 00008000
*    REGISTER  CONTENTS                                               * 00008100
*                                                                     * 00008200
*    1         Ýmacro provides address of the request parameter list¨ * 00008300
*                                                                     * 00008400
*    13        Ýmacro provides address of a 72-byte standard save     * 00008500
*              area in the primary address space¨                     * 00008600
*                                                                     * 00008700
*    14        Ýmacro provides address of caller's next sequential    * 00008800
*              instruction¨                                           * 00008900
*                                                                     * 00009000
*    15        Ýmacro provides address of the user's Free Routine as  * 00009100
*              received on GET_BUFFER request of IVTCSM macro¨        * 00009200
*                                                                     * 00009300
*                                                                     * 00009400
*                                                                     * 00009500
*01* OUTPUT REGISTER INFORMATION:                                     * 00009600
*                                                                     * 00009700
*    When control returns to the caller, the general purpose          * 00009800
*    registers contain:                                               * 00009900
*                                                                     * 00010000
*                                                                     * 00010100
*    REGISTER  CONTENTS                                               * 00010200
*                                                                     * 00010300
*    0-13      unchanged                                              * 00010400
*                                                                     * 00010500
*    14        used as work register by the system                    * 00010600
*                                                                     * 00010700
*    15        used as work register by the system                    * 00010800
*                                                                     * 00010900
*                                                                     * 00011000
*                                                                     * 00011100
*01* PERFORMANCE IMPLICATIONS:                                        * 00011200
*                                                                     * 00011300
*01* SYNTAX:                                                          * 00011400
*                                                                     * 00011500
*Ýxlabel¨  IVTFREE     BUFLIST=xbuflist                               * 00011600
*                    Ý,BUFNUM=»xbufnum!1º¨                            * 00011700
*                    Ý,PLISTVER=»xplistver!IMPLIED_VERSIONº¨          * 00011800
*                   Ð ,MF=(E,xmfctrl»,COMPLETE!NOCHECKº)              * 00011900
*                   Ô ,MF=(L,xmfctrl»,xmfattr!0Dº)                    * 00012000
*                   ¿ ,MF=(M,xmfctrl»,COMPLETE!NOCHECKº)              * 00012100
*                                                                     * 00012200
*                                                                     * 00012300
*      Where:                                                         * 00012400
*                                                                     * 00012500
*                                                                     * 00012600
*      Ýxlabel¨                                                       * 00012700
*          is an optional symbol, starting in column 1, that is the   * 00012800
*          name on the IVTFREE macro invocation.  The name must       * 00012900
*          conform to the rules for an ordinary assembler language    * 00013000
*          symbol.                                                    * 00013100
*          DEFAULT: No name.                                          * 00013200
*                                                                     * 00013300
*                                                                     * 00013400
*                                                                     * 00013500
*                                                                     * 00013600
*      BUFLIST(xbuflist)                                              * 00013700
*          is a required input.  It is the name (RS-type) (or address * 00013800
*          in register (2)-(12) ASM only) of an area containing a     * 00013900
*          list of storage descriptors of buffers to be freed.  The   * 00014000
*          number of descriptors in the list is specified by the      * 00014100
*          BUFNUM parameter.  The buffer list is mapped by IVTBUFL.   * 00014200
*                                                                     * 00014300
*                                                                     * 00014400
*                                                                     * 00014500
*                                                                     * 00014600
*      ÝBUFNUM(»xbufnum!1º)¨                                          * 00014700
*          is the name (RS-type) (or address in register (2)-(12) ASM * 00014800
*          only) of an optional fullword input specifying the number  * 00014900
*          of buffers in BUFLIST.                                     * 00015000
*          DEFAULT: 1                                                 * 00015100
*                                                                     * 00015200
*                                                                     * 00015300
*                                                                     * 00015400
*                                                                     * 00015500
*      ÝPLISTVER(»xplistver!IMPLIED_VERSIONº)¨                        * 00015600
*          is an optional byte input decimal value in the "0-0" range * 00015700
*          that specifies the macro version.  PLISTVER is the only    * 00015800
*          key allowed on the list form of MF and determines which    * 00015900
*          parameter list is generated.  Note that MAX may be         * 00016000
*          specified instead of a number, and the parameter list will * 00016100
*          be of the largest size currently supported. This size may  * 00016200
*          grow from release to release (thus possibly affecting the  * 00016300
*          amount of storage needed by your program).  If your        * 00016400
*          program can tolerate this, IBM recommends that you always  * 00016500
*          specify MAX when creating the list form parameter list as  * 00016600
*          that will ensure that the list form parameter list is      * 00016700
*          always long enough to hold whatever parameters might be    * 00016800
*          specified on the execute form.                             * 00016900
*          DEFAULT: IMPLIED_VERSION.  When PLISTVER is omitted, the   * 00017000
*          default is the lowest version which allows all of the      * 00017100
*          parameters specified on the invocation to be processed.    * 00017200
*                                                                     * 00017300
*                                                                     * 00017400
*                                                                     * 00017500
*                                                                     * 00017600
*       MF(»E!L!Mº)                                                   * 00017700
*          is a required keyword input which specifies the macro      * 00017800
*          form.                                                      * 00017900
*                                                                     * 00018000
*                                                                     * 00018100
*           MF(E,xmfctrl»,COMPLETE!NOCHECKº)                          * 00018200
*              specifies the execute form of the macro.  The "E" form * 00018300
*              generates code to put the parameters into the          * 00018400
*              parameter list specified by xmfctrl and invoke the     * 00018500
*              desired service.                                       * 00018600
*                                                                     * 00018700
*            ,xmfctrl                                                 * 00018800
*              is a required input.  It is the name (RS-type) (or     * 00018900
*              address in register (1)-(12) ASM only) of a storage    * 00019000
*              area for the parameter list.                           * 00019100
*                                                                     * 00019200
*            »,COMPLETE!NOCHECKº                                      * 00019300
*              is an optional keyword input which specifies the       * 00019400
*              degree of macro parameter syntax checking.             * 00019500
*              DEFAULT: COMPLETE                                      * 00019600
*                                                                     * 00019700
*                                                                     * 00019800
*              COMPLETE                                               * 00019900
*                  Checking for required macro keys is done and       * 00020000
*                  defaults are supplied for omitted optional         * 00020100
*                  parameters.  (See Macro Usage Note 2).             * 00020200
*                                                                     * 00020300
*              NOCHECK                                                * 00020400
*                  Checking for required macro keys is not done nor   * 00020500
*                  are defaults supplied for omitted optional         * 00020600
*                  parameters.                                        * 00020700
*                                                                     * 00020800
*                                                                     * 00020900
*                                                                     * 00021000
*           MF(L,xmfctrl»,xmfattr!BDY(DWORD)º)                        * 00021100
*              specifies the list form of the macro.  The "L" form    * 00021200
*              defines an area to be used for the parameter list.     * 00021300
*              Only the PLISTVER key may be specified on the          * 00021400
*              invocation.  All other macro parameters are flagged as * 00021500
*              errors.  If PLISTVER is not specified, the original    * 00021600
*              parameter list definition is used.                     * 00021700
*                                                                     * 00021800
*            ,xmfctrl                                                 * 00021900
*              is a required input.  It is the name of a storage area * 00022000
*              for the parameter list.                                * 00022100
*                                                                     * 00022200
*            »,xmfattr!BDY(DWORD)º                                    * 00022300
*              is an optional 60 character input string that varies   * 00022400
*              from 1 to 60 characters. Use it to force boundary      * 00022500
*              alignment of the parameter list. Use only 0F or 0D     * 00022600
*              (assembler-only).                                      * 00022700
*              DEFAULT: 0D for Assembler, BDY(DWORD) for PL/X, which  * 00022800
*              forces the parameter list to a doubleword boundary.    * 00022900
*                                                                     * 00023000
*           MF(M,xmfctrl»,COMPLETE!NOCHECKº)                          * 00023100
*              specifies the modify form of the macro.  The "M" form  * 00023200
*              generates code to put the parameters into the          * 00023300
*              parameter list specified by xmfctrl.                   * 00023400
*                                                                     * 00023500
*            ,xmfctrl                                                 * 00023600
*              is a required input.  It is the name (RS-type) (or     * 00023700
*              address in register (1)-(12) ASM only) of a storage    * 00023800
*              area for the parameter list.                           * 00023900
*                                                                     * 00024000
*            »,COMPLETE!NOCHECKº                                      * 00024100
*              is an optional keyword input which specifies the       * 00024200
*              degree of macro parameter syntax checking.             * 00024300
*              DEFAULT: COMPLETE                                      * 00024400
*                                                                     * 00024500
*                                                                     * 00024600
*              COMPLETE                                               * 00024700
*                  Checking for required macro keys is done and       * 00024800
*                  defaults are supplied for omitted optional         * 00024900
*                  parameters.  (See Macro Usage Note 2).             * 00025000
*                                                                     * 00025100
*              NOCHECK                                                * 00025200
*                  Checking for required macro keys is not done nor   * 00025300
*                  are defaults supplied for omitted optional         * 00025400
*                  parameters.                                        * 00025500
*                                                                     * 00025600
*                                                                     * 00025700
*                                                                     * 00025800
*                                                                     * 00025900
*                                                                     * 00026000
*                                                                     * 00026100
*                                                                     * 00026200
*01* ABEND CODES:  None.                                              * 00026300
*                                                                     * 00026400
*01* RETURN CODES:  None.                                             * 00026500
*                                                                     * 00026600
*01* REASON CODES:  None.                                             * 00026700
*                                                                     * 00026800
*01* MODULE TYPE:  ASSEM-PL/X MACRO                                   * 00026900
*                                                                     * 00027000
*02*   PROCESSOR:  ASSEM-PL/X                                         * 00027100
*                                                                     * 00027200
*01* MACRO USAGE NOTES:                                               * 00027300
*                                                                     * 00027400
*                                                                     * 00027500
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00027600
*        global macro variable.  Any value other than 'NO' will       * 00027700
*        result in the macro expansion being printed.  The default is * 00027800
*        'YES'.  The following examples illustrate how the ZPRINT     * 00027900
*        variable should be set.                                      * 00028000
*                                                                     * 00028100
*                    GBLC &ZPRINT                                     * 00028200
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00028300
*                                                                     * 00028400
*                                                                     * 00028500
*    2.  When using the NOCHECK option in conjunction with the Modify * 00028600
*        and/or  Execute  forms,  be  sure  that  it is preceded by a * 00028700
*        Modify   or  Execute  form  invocation  which  specifies  or * 00028800
*        defaults  to  the  COMPLETE  option.   This insures that the * 00028900
*        parameter  list  is  initialized completely.   The parameter * 00029000
*        list  field which identifies the version number of the macro * 00029100
*        is only set when the Standard form or the Complete option of * 00029200
*        the  Execute/Modify  form  is  used,  or  when  PLISTVER  is * 00029300
*        explicitly  specified.  Be sure that the resulting parameter * 00029400
*        list version number covers all the keys that you use.        * 00029500
*                                                                     * 00029600
*                                                                     * 00029700
*    3.  All keys currently contained in the IVTFREE macro correspond * 00029800
*        to  version 0.  If you specify PLISTVER, use a value of 0 or * 00029900
*        MAX.                                                         * 00030000
*                                                                     * 00030100
*                                                                     * 00030200
*                                                                     * 00030300
*                                                                     * 00030400
*01* CHANGE ACTIVITY:                                                 * 00030500
*                                                                     * 00030600
*   Flag LineItem  FMID    Date   ID    Comment                       * 00030700
*                                                                     * 00030800
*$D0= ID@@@MST FPAPI   042295 143576: FAST PATH API FOR APPC          * 00030900
*                                                                     * 00031000
*$MAC(IVTFREE) COMP(CSM) PROD(VTAM): CSM FREERTN INTERFACE            * 00031100
****** END OF SPECIFICATIONS *****************************************/ 00031200
*/********************************************************************* 00031300
         MACRO                                                          00031400
&XLABEL  IVTFREE &BUFLIST=,&BUFNUM=,&PLISTVER=,&MF=                     00031500
.*                                                                      00031600
*              MACDATE -99/09/09-<0>                                    00031700
.*                                                                      00031800
.*******************************************************************    00031900
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00032000
.*******************************************************************    00032100
              GBLC  &ZPRINT     YES=PRINT NO=NO PRINT                   00032200
              GBLC  &ZTEST      YES=TEST NO=NO TEST                     00032300
              GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX             00032400
.*                                                                      00032500
              GBLC  &ZIVTFREE   YES=MACRO USED AT LEAST ONCE            00032600
.*******************************************************************    00032700
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00032800
.*******************************************************************    00032900
              LCLC  &ZMS        ERROR MESSAGE WORK AREA                 00033000
              LCLC  &ZCNDX      SYSNDX CHARACTERS                       00033100
              LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED              00033200
              LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR             00033300
              LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE             00033400
              LCLA  &ZAWRK      USED AS A WORK AREA                     00033500
              LCLA  &ZASIZ      USED FOR SIZE OF VALUE                  00033600
              LCLA  &ZN         NUMERIC WORK VARIABLE                   00033700
              LCLC  &ZC         CHARACTER WORK VARIABLE                 00033800
              LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE             00033900
              LCLA  &ZTLA       VALUE TOO LONG VARIABLE                 00034000
              LCLC  &ZMAC_G     "G" or null                             00034100
&ZMAC_G       SETC  ''                                                  00034200
              LCLC  &ZMAC_LR                                            00034300
&ZMAC_LR      SETC  'LR'                                                00034400
              LCLC  &ZMAC_L                                             00034500
&ZMAC_L       SETC  'L'                                                 00034600
              LCLC  &ZMAC_ST                                            00034700
&ZMAC_ST      SETC  'ST'                                                00034800
              LCLC  &ZMAC_LLGT                                          00034900
&ZMAC_LLGT    SETC  'L'                                                 00035000
              LCLC  &ZMAC_LGR                                           00035100
&ZMAC_LGR     SETC  'LR'                                                00035200
              LCLC  &ZMAC_LG                                            00035300
&ZMAC_LG      SETC  'L'                                                 00035400
              LCLC  &ZMAC_STG                                           00035500
&ZMAC_STG     SETC  'ST'                                                00035600
              LCLA  &ZMACRET    MACRO RETURN CODE                       00035700
&ZMACRET      SETA  0           ASSUME NO ERRORS                        00035800
.*                                                                      00035900
              LCLC  &ZCSYSLIST(255)             NONXKEY, POS ARRAY      00036000
              LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()              00036100
              LCLA  &ZPLLEN     PARAMETER LIST LENGTH                   00036200
              LCLC  &ZENDBASEPL                 End of base PL          00036300
              LCLA  &ZPLWORKA   PARAMETER LIST LENGTH                   00036400
.*******************************************************************    00036500
.***AB.04  MACRO VARIABLES FOR RANGES AND SETS OF ARGUMENTS             00036600
.*******************************************************************    00036700
              LCLA  &ZI         INDEX FOR ARRAY                         00036800
              LCLA  &ZJ         INDEX FOR PARMS                         00036900
              LCLA  &ZK         INDEX FOR PARSE                         00037000
              LCLA  &ZLO        LOW RANGE VALUE                         00037100
              LCLA  &ZHI        HIGH RANGE VALUE                        00037200
              LCLC  &ZW         WORK AREA FOR PARM                      00037300
.********************************************************************   00037400
.***AB.05  INVOKE MVS MACROS TO CONTROL CODE GENERATION                 00037500
.********************************************************************   00037600
              GBLC  &SYSSPLV    SP LEVEL 1,2,3 -SPLEVEL                 00037700
              GBLC  &SYSASCE    SYSTEM STATE P ANY AR-SYSSTATE          00037800
              GBLA  &SYSALVL    SYSSTATE ARCHLVL                        00037900
              GBLC  &SYSAM64    SYSSTATE AMODE64                        00038000
.*                                                                      00038100
              AIF   (K'&SYSASCE GT 0).ZSYS4     SYS STATE DEFINED       00038200
              AIF   (K'&SYSSPLV GT 0).ZSYS2     SP LEVEL DEFINED        00038300
              SPLEVEL  TEST                                             00038400
.ZSYS2        ANOP  ,                                                   00038500
              AIF   ('&SYSSPLV' EQ '1').ZSYS3   PRE SP 3.1              00038600
              AIF   ('&SYSSPLV' EQ '2').ZSYS3   PRE SP 3.1              00038700
              SYSSTATE TEST                                             00038800
              AGO   .ZSYS4                                              00038900
.ZSYS3        ANOP  ,                                                   00039000
&SYSASCE      SETC  'P'         ASSUME SYSSTATE PRIMARY                 00039100
.ZSYS4        ANOP  ,                                                   00039200
              AIF   ('&SYSAM64' NE 'YES').ZSYSN64                       00039300
&ZMAC_LLGT    SETC 'LLGT'                                               00039400
&ZMAC_LGR     SETC 'LGR'                                                00039500
&ZMAC_LG      SETC 'LG'                                                 00039600
&ZMAC_STG     SETC 'STG'                                                00039700
.ZSYSN64      ANOP  ,                                                   00039800
.*******************************************************************    00039900
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00040000
.*******************************************************************    00040100
              LCLC  &XBUFLIST   ++ NAME                                 00040200
              LCLC  &XBUFNUM    ++ NAME                                 00040300
              LCLA  &XPLISTVER  ++ VALUE                                00040400
              LCLC  &XMF        ++ VALUE                                00040500
              LCLC  &XMFCTRL    ++ NAME                                 00040600
              LCLC  &XMFSCK     ++ VALUE                                00040700
              LCLC  &XMFATTR    ++ VALUE                                00040800
.*******************************************************************    00040900
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00041000
.*******************************************************************    00041100
              LCLC  &ZXBUFLIST  ++ INPUT NAME                           00041200
              LCLC  &ZXBUFNUM   ++ INPUT NAME                           00041300
              LCLC  &ZXPLISTVER                 ++ INPUT VALUE          00041400
              LCLC  &ZXMF       ++ INPUT VALUE                          00041500
              LCLC  &ZXMFCTRL   ++ INPUT NAME                           00041600
              LCLC  &ZXMFSCK    ++ INPUT VALUE                          00041700
              LCLC  &ZXMFATTR   ++ INPUT VALUE                          00041800
.********************************************************************   00041900
.***AC.PLV01  PROCESS PLISTVER                                      *   00042000
.********************************************************************   00042100
&XPLISTVER      SETA  0                                                 00042200
                AIF   (K'&PLISTVER(1) LE 0).ZPLV0                       00042300
                AIF   ('&PLISTVER(1)' NE 'MAX').ZPLV0                   00042400
&XPLISTVER      SETA  0                                                 00042500
.ZPLV0          ANOP  ,                                                 00042600
.*                                                                      00042700
                AIF   (K'&PLISTVER(1) LE 0).ZPVCKE                      00042800
                AIF   ('&PLISTVER(1)' EQ 'IMPLIED_VERSION').ZPVCKE      00042900
                AIF   ('&PLISTVER(1)' EQ 'MAX').ZPVCKE                  00043000
.*-------------------------------------------------------------------   00043100
                AIF   (N'&PLISTVER LE 1).ZPVCK3  CK NUM                 00043200
&ZMS            SETC  '"PLISTVER='                                      00043300
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00043400
&ZMS            SETC  '&ZMS "PLISTVER"'                                 00043500
                MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'               00043600
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00043700
                AGO   .ZPVCK2                                           00043800
.ZPVCK3         ANOP  ,                                                 00043900
.*-------------------------------------------------------------------   00044000
                AIF   ('&PLISTVER'(1,1) NE '(').ZPVCK2                  00044100
&ZMS            SETC  '"PLISTVER='                                      00044200
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00044300
&ZMS            SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'         00044400
                MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 1.'                 00044500
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00044600
                AGO   .ZPVCKE                                           00044700
.ZPVCK2         ANOP  ,                                                 00044800
.*-------------------------------------------------------------------   00044900
&ZCVAL          SETC  '&PLISTVER(1)'                                    00045000
                AIF   ('&ZCVAL'(1,1) EQ '(').ZPVCKE  IN GPR             00045100
                AIF   (T'&ZCVAL NE 'N').ZPVCK6  NUMERIC ERR             00045200
&ZN             SETA   &PLISTVER(1)        CONVERT TO ARITHMETIC        00045300
                AIF   (&ZN LT 0).ZPVCK6    TOO LOW                      00045400
                AIF   (&ZN LE 0).ZPVCK4A   NOT HIGH                     00045500
.ZPVCK6         ANOP  ,                                                 00045600
&ZMS            SETC  '"PLISTVER='                                      00045700
&ZMS            SETC  '&ZMS.&PLISTVER"'                                 00045800
&ZMS            SETC  '&ZMS THE RANGE IS "0-0"'                         00045900
                MNOTE 8,' &ZMS FOR ARGUMENT 1.'                         00046000
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00046100
&XPLISTVER      SETA  0                                                 00046200
                AGO   .ZPVCKE                                           00046300
.*-------------------------------------------------------------------   00046400
.ZPVCK4A        ANOP  ,                                                 00046500
                AIF   (&ZN GE &XPLISTVER).ZPVCK4                        00046600
&ZMS            SETC  'PLISTVER='                                       00046700
&ZMS            SETC  '&ZMS.&PLISTVER(1)'                               00046800
&ZMS            SETC  '&ZMS., BUT PLISTVER OF'                          00046900
&ZMS            SETC  '&ZMS &XPLISTVER'                                 00047000
                MNOTE 8,' &ZMS IS REQUIRED.'                            00047100
&ZMACRET        SETA  8      SET MACRO ERROR RETURN CODE                00047200
                AGO   .ZPVCK5                                           00047300
.ZPVCK4         ANOP  ,                                                 00047400
&XPLISTVER      SETA  &PLISTVER(1)                                      00047500
.ZPVCK5         ANOP  ,                                                 00047600
.ZPVCKE         ANOP  ,                                                 00047700
.********************************************************************   00047800
.***AG.MF01 PROCESS MF MACRO FORMS                                      00047900
.********************************************************************   00048000
              ACTR  10000                                               00048100
.*------------------------------------------------------------------    00048200
.***AG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00048300
&XMF          SETC  ''          INITIALIZE XVARIABLE                    00048400
.*-------------------------------------------------------------------   00048500
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00048600
.ZG12         ANOP  ,                                                   00048700
&ZTLC         SETC 'E'                                                  00048800
              AIF   ('&MF(1)' NE '&ZTLC').ZG21                          00048900
&XMF          SETC  'E'         SET KEYWORD                             00049000
              AIF   (N'&MF LE 3).ZG12A          CK NUM                  00049100
&ZMS          SETC  '"MF='                                              00049200
&ZMS          SETC  '&ZMS.&MF"'                                         00049300
&ZMS          SETC  '&ZMS "MF"'                                         00049400
              MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'                00049500
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00049600
.ZG12A        ANOP  ,                                                   00049700
.*-------------------------------------------------------------------   00049800
.***AG.KXVAR06 NAME, RQD INPUT, POS(2) -XVARIABLE                       00049900
&ZXMFCTRL     SETC  'INPUT'     SET IN/OUTPUT                           00050000
&XMFCTRL      SETC  '&MF(2,1)'  SET XVARIABLE                           00050100
              AIF   (N'&MF(2) GT 1).ZG14B       MULTI PARMS             00050200
&XMFCTRL      SETC  '&MF(2)'    SET XVARIABLE                           00050300
.ZG14B        AIF   (K'&MF(2) GT 0).ZG14C                               00050400
&ZXMFCTRL     SETC  ''          RESET IN/OUTPUT                         00050500
&ZMS          SETC  ' '                                                 00050600
&ZMS          SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'                 00050700
              MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                        00050800
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00050900
.ZG14C        ANOP  ,                                                   00051000
.*-------------------------------------------------------------------   00051100
.***AG.KCK02 NAME, RQD INPUT, POS(2) -GPR OUT OF RANGE                  00051200
              AIF   (K'&ZXMFCTRL LE 0).ZG14R    NOT I/O                 00051300
              AIF   ('&XMFCTRL'(1,1) NE '(').ZG14R                      00051400
&ZCGPR        SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)                          00051500
              AIF   ('&ZCGPR'(1,1) NE '0').ZG14P                        00051600
              AIF   (K'&ZCGPR GT 2).ZG14Q                               00051700
              AIF   ('&ZCGPR' EQ '0').ZG14Q                             00051800
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00051900
              AIF   (T'&ZCGPR NE 'N').ZG14Q     INVALID REG NAME        00052000
.ZG14P        ANOP  ,                                                   00052100
              AIF   (T'&ZCGPR NE 'N').ZG14R     NON NUMERIC             00052200
              AIF   ('&ZCGPR' LT '1').ZG14Q                             00052300
              AIF   ('&ZCGPR' LE '12').ZG14R                            00052400
.ZG14Q        ANOP  ,                                                   00052500
&ZMS          SETC  '"MF='                                              00052600
&ZMS          SETC  '&ZMS.&MF"'                                         00052700
&ZMS          SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'           00052800
              MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'                    00052900
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00053000
.ZG14R        ANOP  ,                                                   00053100
.*-------------------------------------------------------------------   00053200
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00053300
&XMFSCK       SETC  ''          INITIALIZE XVARIABLE                    00053400
.ZG18A   AIF   ('&MF(3)' NE 'COMPLETE').ZG19A                           00053500
&XMFSCK       SETC  'COMPLETE'  SET KEYWORD                             00053600
.*-------------------------------------------------------------------   00053700
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00053800
.ZG19A   AIF   ('&MF(3)' NE 'NOCHECK').ZG20A                            00053900
&XMFSCK       SETC  'NOCHECK'   SET KEYWORD                             00054000
.*-------------------------------------------------------------------   00054100
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00054200
.ZG20A        AIF   (K'&XMFSCK GT 0).ZG20C      KEYWORD                 00054300
              AIF   (K'&MF(3) LE 0).ZG20B                               00054400
&ZMS          SETC  '"MF='                                              00054500
&ZMS          SETC  '&ZMS.&MF"'                                         00054600
&ZMS          SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '           00054700
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00054800
&ZMS          SETC  '&ZMS "COMPLETE"'                                   00054900
&ZMS          SETC  '&ZMS OR "NOCHECK".'                                00055000
              MNOTE 8,' &ZMS '                                          00055100
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00055200
.ZG20B        ANOP  ,                                                   00055300
&XMFSCK       SETC  'COMPLETE'  SET DEFAULT KEYWORD                     00055400
.ZG20C        ANOP  ,                                                   00055500
&ZXMFSCK      SETC  'INPUT'     SET IN/OUTPUT                           00055600
.*-------------------------------------------------------------------   00055700
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00055800
.ZG21         ANOP  ,                                                   00055900
&ZTLC         SETC 'L'                                                  00056000
              AIF   ('&MF(1)' NE '&ZTLC').ZG28                          00056100
&XMF          SETC  'L'         SET KEYWORD                             00056200
              AIF   (N'&MF LE 3).ZG21A          CK NUM                  00056300
&ZMS          SETC  '"MF='                                              00056400
&ZMS          SETC  '&ZMS.&MF"'                                         00056500
&ZMS          SETC  '&ZMS "MF"'                                         00056600
              MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'                00056700
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00056800
.ZG21A        ANOP  ,                                                   00056900
.*-------------------------------------------------------------------   00057000
.***AG.KKCTL08 -MF(L) SPECIAL CHECK                                     00057100
              AIF   (N'&SYSLIST NE 0).ZG21B     POSITIONALS?            00057200
              AIF   ('&BUFLIST' NE '').ZG21B    KEYS?                   00057300
              AIF   ('&BUFNUM' NE '').ZG21B     KEYS?                   00057400
              AGO    .ZG21C     INVOCATION OKAY                         00057500
.ZG21B        ANOP  ,                                                   00057600
&ZMS          SETC  'THE "L" FORM OF "MF"'                              00057700
&ZMS          SETC  '&ZMS CAN ONLY HAVE'                                00057800
&ZMS          SETC  '&ZMS THE "PLISTVER" KEY'                           00057900
              MNOTE 8,' &ZMS SPECIFIED ON THE INVOCATION.'              00058000
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00058100
.ZG21C        ANOP  ,                                                   00058200
.*-------------------------------------------------------------------   00058300
.***AG.KXVAR06 NAME, RQD INPUT, POS(2) -XVARIABLE                       00058400
&ZXMFCTRL     SETC  'INPUT'     SET IN/OUTPUT                           00058500
&XMFCTRL      SETC  '&MF(2,1)'  SET XVARIABLE                           00058600
              AIF   (N'&MF(2) GT 1).ZG23B       MULTI PARMS             00058700
&XMFCTRL      SETC  '&MF(2)'    SET XVARIABLE                           00058800
.ZG23B        AIF   (K'&MF(2) GT 0).ZG23C                               00058900
&ZXMFCTRL     SETC  ''          RESET IN/OUTPUT                         00059000
&ZMS          SETC  ' '                                                 00059100
&ZMS          SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'                 00059200
              MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                        00059300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00059400
.ZG23C        ANOP  ,                                                   00059500
.*-------------------------------------------------------------------   00059600
.***AG.KCK01 NAME, RQD INPUT, POS(2) -GPR NOT ALLOWED                   00059700
              AIF   (K'&ZXMFCTRL LE 0).ZG23P    NOT I/O                 00059800
              AIF   ('&XMFCTRL'(1,1) NE '(').ZG23P                      00059900
&ZXMFCTRL     SETC  ''          RESET IN/OUTPUT                         00060000
&ZMS          SETC  '"MF='                                              00060100
&ZMS          SETC  '&ZMS.&MF"'                                         00060200
&ZMS          SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'           00060300
              MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 2.'                   00060400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00060500
.ZG23P        ANOP  ,                                                   00060600
.*-------------------------------------------------------------------   00060700
.***AG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE                      00060800
&ZXMFATTR     SETC  'INPUT'     SET IN/OUTPUT                           00060900
&XMFATTR      SETC  '0D'                                                00061000
              AIF   (K'&MF(3) LE 0).ZG26B       PARM                    00061100
&XMFATTR      SETC  '&MF(3,1)'  SET XVARIABLE                           00061200
              AIF   (N'&MF(3) GT 1).ZG26B       MULTI                   00061300
&XMFATTR      SETC  '&MF(3)'    SET XVARIABLE                           00061400
.ZG26B        ANOP  ,                                                   00061500
.*-------------------------------------------------------------------   00061600
.***AG.KCK01 VALUE, OPT INPUT, POS(3) -GPR NOT ALLOWED                  00061700
              AIF   (K'&ZXMFATTR LE 0).ZG26P    NOT I/O                 00061800
              AIF   ('&XMFATTR'(1,1) NE '(').ZG26P                      00061900
&ZXMFATTR     SETC  ''          RESET IN/OUTPUT                         00062000
&ZMS          SETC  '"MF='                                              00062100
&ZMS          SETC  '&ZMS.&MF"'                                         00062200
&ZMS          SETC  '&ZMS CONTAINS GPR NOTATION WHICH IS NOT'           00062300
              MNOTE 8,' &ZMS ALLOWED FOR ARGUMENT 3.'                   00062400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00062500
.ZG26P        ANOP  ,                                                   00062600
.*-------------------------------------------------------------------   00062700
.***AG.KCK03 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH                 00062800
              AIF   (K'&ZXMFATTR LE 0).ZG26S    NOT I/O                 00062900
              AIF   (K'&XMFATTR LE 60).ZG26S    LNG OK                  00063000
&ZXMFATTR     SETC  ''          RESET IN/OUTPUT                         00063100
&ZMS          SETC  '"MF='                                              00063200
&ZMS          SETC  '&ZMS.&MF"'                                         00063300
&ZMS          SETC  '&ZMS ARGUMENT 3 EXCEEDS THE MAXIMUM'               00063400
              MNOTE 8,' &ZMS LENGTH OF 60 CHARACTERS.'                  00063500
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00063600
.ZG26S        ANOP  ,                                                   00063700
.*-------------------------------------------------------------------   00063800
.***AG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00063900
.ZG28         ANOP  ,                                                   00064000
&ZTLC         SETC 'M'                                                  00064100
              AIF   ('&MF(1)' NE '&ZTLC').ZG37                          00064200
&XMF          SETC  'M'         SET KEYWORD                             00064300
              AIF   (N'&MF LE 3).ZG28A          CK NUM                  00064400
&ZMS          SETC  '"MF='                                              00064500
&ZMS          SETC  '&ZMS.&MF"'                                         00064600
&ZMS          SETC  '&ZMS "MF"'                                         00064700
              MNOTE 8,' &ZMS CAN HAVE ONLY 3 ARGUMENTS.'                00064800
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00064900
.ZG28A        ANOP  ,                                                   00065000
.*-------------------------------------------------------------------   00065100
.***AG.KXVAR06 NAME, RQD INPUT, POS(2) -XVARIABLE                       00065200
&ZXMFCTRL     SETC  'INPUT'     SET IN/OUTPUT                           00065300
&XMFCTRL      SETC  '&MF(2,1)'  SET XVARIABLE                           00065400
              AIF   (N'&MF(2) GT 1).ZG30B       MULTI PARMS             00065500
&XMFCTRL      SETC  '&MF(2)'    SET XVARIABLE                           00065600
.ZG30B        AIF   (K'&MF(2) GT 0).ZG30C                               00065700
&ZXMFCTRL     SETC  ''          RESET IN/OUTPUT                         00065800
&ZMS          SETC  ' '                                                 00065900
&ZMS          SETC  '&ZMS FOR THE "MF" KEY, POSITIONAL'                 00066000
              MNOTE 8,' &ZMS ARG 2 IS REQUIRED.'                        00066100
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00066200
.ZG30C        ANOP  ,                                                   00066300
.*-------------------------------------------------------------------   00066400
.***AG.KCK02 NAME, RQD INPUT, POS(2) -GPR OUT OF RANGE                  00066500
              AIF   (K'&ZXMFCTRL LE 0).ZG30R    NOT I/O                 00066600
              AIF   ('&XMFCTRL'(1,1) NE '(').ZG30R                      00066700
&ZCGPR        SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)                          00066800
              AIF   ('&ZCGPR'(1,1) NE '0').ZG30P                        00066900
              AIF   (K'&ZCGPR GT 2).ZG30Q                               00067000
              AIF   ('&ZCGPR' EQ '0').ZG30Q                             00067100
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00067200
              AIF   (T'&ZCGPR NE 'N').ZG30Q     INVALID REG NAME        00067300
.ZG30P        ANOP  ,                                                   00067400
              AIF   (T'&ZCGPR NE 'N').ZG30R     NON NUMERIC             00067500
              AIF   ('&ZCGPR' LT '1').ZG30Q                             00067600
              AIF   ('&ZCGPR' LE '12').ZG30R                            00067700
.ZG30Q        ANOP  ,                                                   00067800
&ZMS          SETC  '"MF='                                              00067900
&ZMS          SETC  '&ZMS.&MF"'                                         00068000
&ZMS          SETC  '&ZMS ARGUMENT 2 MUST SPECIFY A REGISTER'           00068100
              MNOTE 8,' &ZMS IN THE RANGE (1)-(12).'                    00068200
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00068300
.ZG30R        ANOP  ,                                                   00068400
.*-------------------------------------------------------------------   00068500
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00068600
&XMFSCK       SETC  ''          INITIALIZE XVARIABLE                    00068700
.ZG34A   AIF   ('&MF(3)' NE 'COMPLETE').ZG35A                           00068800
&XMFSCK       SETC  'COMPLETE'  SET KEYWORD                             00068900
.*-------------------------------------------------------------------   00069000
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00069100
.ZG35A   AIF   ('&MF(3)' NE 'NOCHECK').ZG36A                            00069200
&XMFSCK       SETC  'NOCHECK'   SET KEYWORD                             00069300
.*-------------------------------------------------------------------   00069400
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00069500
.ZG36A        AIF   (K'&XMFSCK GT 0).ZG36C      KEYWORD                 00069600
              AIF   (K'&MF(3) LE 0).ZG36B                               00069700
&ZMS          SETC  '"MF='                                              00069800
&ZMS          SETC  '&ZMS.&MF"'                                         00069900
&ZMS          SETC  '&ZMS ARGUMENT 3 IS AN UNKNOWN KEYWORD. '           00070000
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00070100
&ZMS          SETC  '&ZMS "COMPLETE"'                                   00070200
&ZMS          SETC  '&ZMS OR "NOCHECK".'                                00070300
              MNOTE 8,' &ZMS '                                          00070400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00070500
.ZG36B        ANOP  ,                                                   00070600
&XMFSCK       SETC  'COMPLETE'  SET DEFAULT KEYWORD                     00070700
.ZG36C        ANOP  ,                                                   00070800
&ZXMFSCK      SETC  'INPUT'     SET IN/OUTPUT                           00070900
.*------------------------------------------------------------------    00071000
.***AG.KKCTL04 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00071100
.ZG37         ANOP  ,                                                   00071200
&ZXMF         SETC  'INPUT'     SET IN/OUTPUT                           00071300
              AIF   (K'&XMF GT 0).ZG37E         VALID ARG               00071400
              AIF   (T'&MF EQ 'O').ZG37D        OMITTED                 00071500
&ZASYSLNDX    SETA  0                                                   00071600
.ZG37A        ANOP  ,           POSITIONAL MACRO KEY                    00071700
&ZASYSLNDX    SETA  &ZASYSLNDX+1                                        00071800
              AIF   (&ZASYSLNDX GT N'&SYSLIST).ZG37C                    00071900
&ZTLC         SETC 'MF'                                                 00072000
              AIF   ('&SYSLIST(&ZASYSLNDX)' NE '&ZTLC').ZG37A           00072100
.ZG37B        ANOP  ,                                                   00072200
&ZXMF         SETC  ''          RESET IN/OUTPUT                         00072300
&ZMS          SETC  'THE "MF" KEY'                                      00072400
&ZMS          SETC  '&ZMS MUST CONTAIN ONE'                             00072500
              MNOTE 8,' &ZMS (OR MORE) ARGUMENT(S).'                    00072600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00072700
              AGO   .ZG37E                                              00072800
.ZG37C        ANOP  ,                                                   00072900
&ZXMF         SETC  ''          RESET IN/OUTPUT                         00073000
&ZMS          SETC  '"MF='                                              00073100
&ZMS          SETC  '&ZMS.&MF"'                                         00073200
&ZMS          SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '           00073300
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00073400
&ZMS          SETC  '&ZMS "E",'                                         00073500
&ZMS          SETC  '&ZMS "L",'                                         00073600
&ZMS          SETC  '&ZMS OR "M".'                                      00073700
              MNOTE 8,' &ZMS '                                          00073800
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00073900
              AGO   .ZG37E                                              00074000
.ZG37D        ANOP  ,                                                   00074100
&XMF          SETC  'E'         SET DEFAULT KEYWORD                     00074200
.ZG37E        ANOP  ,                                                   00074300
.*------------------------------------------------------------------    00074400
.***AG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL           00074500
              AIF   (K'&MF(1) GT 0).ZG37F       PARM                    00074600
&XMF          SETC  ''          ENSURE NULL KEYWORD                     00074700
&ZXMF         SETC  ''          RESET IN/OUTPUT                         00074800
&ZMS          SETC  'THE'                                               00074900
&ZMS          SETC  '&ZMS "MF" KEY AND ITS'                             00075000
&ZMS          SETC  '&ZMS ARGUMENT ARE REQUIRED.'                       00075100
&ZMS          SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'                 00075200
&ZMS          SETC  '&ZMS "E",'                                         00075300
&ZMS          SETC  '&ZMS "L",'                                         00075400
&ZMS          SETC  '&ZMS OR "M".'                                      00075500
              MNOTE 8,' &ZMS '                                          00075600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00075700
.ZG37F        ANOP  ,                                                   00075800
.********************************************************************   00075900
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00076000
.********************************************************************   00076100
              ACTR  10000                                               00076200
.*-------------------------------------------------------------------   00076300
.***AG.MF03 MF=(LME)                                                    00076400
              AIF   ('&XMF' EQ 'L').ZGMFX                               00076500
              AIF   ('&XMFSCK' NE 'COMPLETE').ZGMFX                     00076600
.*----------------------------------------------------------------***   00076700
.***AG.KXVAR05 NAME, RQD INPUT, KEYS -XVARIABLE KEY                     00076800
              AIF   (N'&BUFLIST LE 1).ZG2A      CK NUM                  00076900
&ZMS          SETC  '"BUFLIST='                                         00077000
&ZMS          SETC  '&ZMS.&BUFLIST"'                                    00077100
&ZMS          SETC  '&ZMS "BUFLIST"'                                    00077200
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00077300
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00077400
.ZG2A         ANOP  ,                                                   00077500
.*-------------------------------------------------------------------   00077600
.***AG.KXVAR06 NAME, RQD INPUT, KEYS -XVARIABLE                         00077700
&ZXBUFLIST    SETC  'INPUT'     SET IN/OUTPUT                           00077800
&XBUFLIST     SETC  '&BUFLIST(1)'               SET XVARIABLE           00077900
              AIF   (N'&BUFLIST GT 1).ZG2B      MULTI PARMS             00078000
&XBUFLIST     SETC  '&BUFLIST'  SET XVARIABLE                           00078100
.ZG2B         AIF   (K'&BUFLIST(1) GT 0).ZG2C                           00078200
&ZXBUFLIST    SETC  ''          RESET IN/OUTPUT                         00078300
&ZMS          SETC  ' '                                                 00078400
&ZMS          SETC  '&ZMS "BUFLIST" KEY AND ITS'                        00078500
              MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'                    00078600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00078700
.ZG2C         ANOP  ,                                                   00078800
.*-------------------------------------------------------------------   00078900
.***AG.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00079000
              AIF   (K'&ZXBUFLIST LE 0).ZG2R    NOT I/O                 00079100
              AIF   ('&XBUFLIST'(1,1) NE '(').ZG2R                      00079200
&ZCGPR        SETC  '&XBUFLIST'(2,K'&XBUFLIST-2)                        00079300
              AIF   ('&ZCGPR'(1,1) NE '0').ZG2P                         00079400
              AIF   (K'&ZCGPR GT 2).ZG2Q                                00079500
              AIF   ('&ZCGPR' EQ '0').ZG2Q                              00079600
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00079700
              AIF   (T'&ZCGPR NE 'N').ZG2Q      INVALID REG NAME        00079800
.ZG2P         ANOP  ,                                                   00079900
              AIF   (T'&ZCGPR NE 'N').ZG2R      NON NUMERIC             00080000
              AIF   ('&ZCGPR' LT '2').ZG2Q                              00080100
              AIF   ('&ZCGPR' LE '12').ZG2R                             00080200
.ZG2Q         ANOP  ,                                                   00080300
&ZMS          SETC  '"BUFLIST='                                         00080400
&ZMS          SETC  '&ZMS.&BUFLIST"'                                    00080500
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00080600
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00080700
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00080800
.ZG2R         ANOP  ,                                                   00080900
.*----------------------------------------------------------------***   00081000
.***AG.KXVAR05 NAME, OPT INPUT, KEYS -XVARIABLE KEY                     00081100
              AIF   (N'&BUFNUM LE 1).ZG5A       CK NUM                  00081200
&ZMS          SETC  '"BUFNUM='                                          00081300
&ZMS          SETC  '&ZMS.&BUFNUM"'                                     00081400
&ZMS          SETC  '&ZMS "BUFNUM"'                                     00081500
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00081600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00081700
.ZG5A         ANOP  ,                                                   00081800
.*-------------------------------------------------------------------   00081900
.***AG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE                         00082000
&ZXBUFNUM     SETC  'INPUT'     SET IN/OUTPUT                           00082100
&XBUFNUM      SETC  '1'                                                 00082200
              AIF   (K'&BUFNUM(1) LE 0).ZG5B    PARM                    00082300
&XBUFNUM      SETC  '&BUFNUM(1)'                SET XVARIABLE           00082400
              AIF   (N'&BUFNUM GT 1).ZG5B       MULTI                   00082500
&XBUFNUM      SETC  '&BUFNUM'   SET XVARIABLE                           00082600
.ZG5B         ANOP  ,                                                   00082700
.*-------------------------------------------------------------------   00082800
.***AG.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00082900
              AIF   (K'&ZXBUFNUM LE 0).ZG5R     NOT I/O                 00083000
              AIF   ('&XBUFNUM'(1,1) NE '(').ZG5R                       00083100
&ZCGPR        SETC  '&XBUFNUM'(2,K'&XBUFNUM-2)                          00083200
              AIF   ('&ZCGPR'(1,1) NE '0').ZG5P                         00083300
              AIF   (K'&ZCGPR GT 2).ZG5Q                                00083400
              AIF   ('&ZCGPR' EQ '0').ZG5Q                              00083500
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00083600
              AIF   (T'&ZCGPR NE 'N').ZG5Q      INVALID REG NAME        00083700
.ZG5P         ANOP  ,                                                   00083800
              AIF   (T'&ZCGPR NE 'N').ZG5R      NON NUMERIC             00083900
              AIF   ('&ZCGPR' LT '2').ZG5Q                              00084000
              AIF   ('&ZCGPR' LE '12').ZG5R                             00084100
.ZG5Q         ANOP  ,                                                   00084200
&ZMS          SETC  '"BUFNUM='                                          00084300
&ZMS          SETC  '&ZMS.&BUFNUM"'                                     00084400
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00084500
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00084600
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00084700
.ZG5R         ANOP  ,                                                   00084800
.******************************************************************     00084900
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00085000
.******************************************************************     00085100
              ACTR  10000                                               00085200
.*----------------------------------------------------------------***   00085300
.***AH.P02 EXTRA POSITIONALS                                            00085400
              AIF   (N'&SYSLIST LE 0).ZGLISTX   NO EXTRAS               00085500
              AIF   (N'&SYSLIST NE 2).ZGLISTX1  NOT NULL                00085600
              AIF   ('&SYSLIST(1)' NE '').ZGLISTX1  NOT NULL            00085700
              AIF   ('&SYSLIST(2)' EQ '').ZGLISTX  NOT NULL             00085800
.ZGLISTX1     ANOP  ,                                                   00085900
&ZCVAL        SETC  ''          ERROR FIELD                             00086000
&ZAWRK        SETA  0           POSITIONAL NUMBER                       00086100
.ZGLIST2      ANOP  ,                                                   00086200
&ZAWRK        SETA  &ZAWRK+1    NEXT POSITIONAL                         00086300
              AIF   (&ZAWRK GT N'&SYSLIST).ZGLIST3  DONE                00086400
&ZCVAL        SETC '&ZCVAL,&SYSLIST(&ZAWRK)'    EXTRA                   00086500
              AGO   .ZGLIST2                                            00086600
.*                                                                      00086700
.ZGLIST3      ANOP  ,                                                   00086800
&ZCVAL        SETC '&ZCVAL'(2,K'&ZCVAL-1)       STRIP COMMA             00086900
&ZMS          SETC  'POSITIONAL ARGUMENT(S),'                           00087000
&ZMS          SETC  '&ZMS "&ZCVAL"'                                     00087100
&ZMS          SETC  '&ZMS CANNOT BE USED.'                              00087200
&ZMS          SETC  '&ZMS NO POSITIONAL ARGUMENTS'                      00087300
              MNOTE 8,' &ZMS ARE ALLOWED.'                              00087400
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00087500
.ZGLISTX      ANOP  ,                                                   00087600
&ZASYSLNDX    SETA  0                                                   00087700
.*-------------------------------------------------------------------   00087800
.***AG.MF04 MF=(LME)                                                    00087900
.ZGMFX        ANOP  ,           END OF FULL SYNTAX CHECK                00088000
.********************************************************************   00088100
.***AE.MF01   PARTIAL MACRO SYNTAX CHECKING                             00088200
.********************************************************************   00088300
              ACTR  10000                                               00088400
.*-------------------------------------------------------------------   00088500
.***AE.MF01 MF=(LME)                                                    00088600
              AIF   ('&XMF' EQ 'L').ZEMFX                               00088700
              AIF   ('&XMFSCK' NE 'NOCHECK').ZEMFX                      00088800
.********************************************************************   00088900
.***AE.KC00 INITIALIZE KEYWORD CONTROL VARIABLES                        00089000
.********************************************************************   00089100
.*----------------------------------------------------------------***   00089200
.***AE.KXVAR03 NAME, RQD INPUT, KEYS -XVAR KEY                          00089300
              AIF   (N'&BUFLIST LE 1).ZE2A      CK NUM                  00089400
&ZMS          SETC  '"BUFLIST='                                         00089500
&ZMS          SETC  '&ZMS.&BUFLIST"'                                    00089600
&ZMS          SETC  '&ZMS "BUFLIST"'                                    00089700
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00089800
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00089900
.ZE2A         ANOP  ,                                                   00090000
.*-------------------------------------------------------------------   00090100
.***AE.KXVAR04 NAME, RQD INPUT, KEYS -XVAR ARGUMENT                     00090200
              AIF   (K'&BUFLIST(1) LE 0).ZE2B   NO PRM                  00090300
&ZXBUFLIST    SETC  'INPUT'     SET IN/OUTPUT                           00090400
&XBUFLIST     SETC  '&BUFLIST(1)'               SET XVARIABLE           00090500
              AIF   (N'&BUFLIST GT 1).ZE2B                              00090600
.*            ANOP                                                      00090700
&XBUFLIST     SETC  '&BUFLIST'  SET XVARIABLE                           00090800
.ZE2B         ANOP  ,                                                   00090900
.*-------------------------------------------------------------------   00091000
.***AE.KCK02 NAME, RQD INPUT, KEYS -GPR OUT OF RANGE                    00091100
              AIF   (K'&ZXBUFLIST LE 0).ZE2R    NOT I/O                 00091200
              AIF   ('&XBUFLIST'(1,1) NE '(').ZE2R                      00091300
&ZCGPR        SETC  '&XBUFLIST'(2,K'&XBUFLIST-2)                        00091400
              AIF   ('&ZCGPR'(1,1) NE '0').ZE2P                         00091500
              AIF   (K'&ZCGPR GT 2).ZE2Q                                00091600
              AIF   ('&ZCGPR' EQ '0').ZE2Q                              00091700
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00091800
              AIF   (T'&ZCGPR NE 'N').ZE2Q      INVALID REG NAME        00091900
.ZE2P         ANOP  ,                                                   00092000
              AIF   (T'&ZCGPR NE 'N').ZE2R      NON NUMERIC             00092100
              AIF   ('&ZCGPR' LT '2').ZE2Q                              00092200
              AIF   ('&ZCGPR' LE '12').ZE2R                             00092300
.ZE2Q         ANOP  ,                                                   00092400
&ZMS          SETC  '"BUFLIST='                                         00092500
&ZMS          SETC  '&ZMS.&BUFLIST"'                                    00092600
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00092700
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00092800
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00092900
.ZE2R         ANOP  ,                                                   00093000
.*----------------------------------------------------------------***   00093100
.***AE.KXVAR03 NAME, OPT INPUT, KEYS -XVAR KEY                          00093200
              AIF   (N'&BUFNUM LE 1).ZE5A       CK NUM                  00093300
&ZMS          SETC  '"BUFNUM='                                          00093400
&ZMS          SETC  '&ZMS.&BUFNUM"'                                     00093500
&ZMS          SETC  '&ZMS "BUFNUM"'                                     00093600
              MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'                 00093700
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00093800
.ZE5A         ANOP  ,                                                   00093900
.*-------------------------------------------------------------------   00094000
.***AE.KXVAR04 NAME, OPT INPUT, KEYS -XVAR ARGUMENT                     00094100
              AIF   (K'&BUFNUM(1) LE 0).ZE5B    NO PRM                  00094200
&ZXBUFNUM     SETC  'INPUT'     SET IN/OUTPUT                           00094300
&XBUFNUM      SETC  '&BUFNUM(1)'                SET XVARIABLE           00094400
              AIF   (N'&BUFNUM GT 1).ZE5B                               00094500
.*            ANOP                                                      00094600
&XBUFNUM      SETC  '&BUFNUM'   SET XVARIABLE                           00094700
.ZE5B         ANOP  ,                                                   00094800
.*-------------------------------------------------------------------   00094900
.***AE.KCK02 NAME, OPT INPUT, KEYS -GPR OUT OF RANGE                    00095000
              AIF   (K'&ZXBUFNUM LE 0).ZE5R     NOT I/O                 00095100
              AIF   ('&XBUFNUM'(1,1) NE '(').ZE5R                       00095200
&ZCGPR        SETC  '&XBUFNUM'(2,K'&XBUFNUM-2)                          00095300
              AIF   ('&ZCGPR'(1,1) NE '0').ZE5P                         00095400
              AIF   (K'&ZCGPR GT 2).ZE5Q                                00095500
              AIF   ('&ZCGPR' EQ '0').ZE5Q                              00095600
&ZCGPR        SETC  '&ZCGPR'(2,1)                                       00095700
              AIF   (T'&ZCGPR NE 'N').ZE5Q      INVALID REG NAME        00095800
.ZE5P         ANOP  ,                                                   00095900
              AIF   (T'&ZCGPR NE 'N').ZE5R      NON NUMERIC             00096000
              AIF   ('&ZCGPR' LT '2').ZE5Q                              00096100
              AIF   ('&ZCGPR' LE '12').ZE5R                             00096200
.ZE5Q         ANOP  ,                                                   00096300
&ZMS          SETC  '"BUFNUM='                                          00096400
&ZMS          SETC  '&ZMS.&BUFNUM"'                                     00096500
&ZMS          SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'           00096600
              MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'                    00096700
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00096800
.ZE5R         ANOP  ,                                                   00096900
.******************************************************************     00097000
.***AF.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00097100
.******************************************************************     00097200
              ACTR  10000                                               00097300
.*----------------------------------------------------------------***   00097400
.***AF.P02 EXTRA POSITIONALS                                            00097500
              AIF   (N'&SYSLIST LE 0).ZELISTX   NO EXTRAS               00097600
&ZCVAL        SETC  ''          ERROR FIELD                             00097700
&ZAWRK        SETA  0           POSITIONAL NUMBER                       00097800
.ZELIST2      ANOP  ,                                                   00097900
&ZAWRK        SETA  &ZAWRK+1    NEXT POSITIONAL                         00098000
              AIF   (&ZAWRK GT N'&SYSLIST).ZELIST3  DONE                00098100
&ZCVAL        SETC '&ZCVAL,&SYSLIST(&ZAWRK)'    EXTRA                   00098200
              AGO   .ZELIST2                                            00098300
.*                                                                      00098400
.ZELIST3      ANOP  ,                                                   00098500
&ZCVAL        SETC '&ZCVAL'(2,K'&ZCVAL-1)       STRIP COMMA             00098600
&ZMS          SETC  'POSITIONAL ARGUMENT(S),'                           00098700
&ZMS          SETC  '&ZMS "&ZCVAL"'                                     00098800
&ZMS          SETC  '&ZMS CANNOT BE USED.'                              00098900
&ZMS          SETC  '&ZMS NO POSITIONAL ARGUMENTS'                      00099000
              MNOTE 8,' &ZMS ARE ALLOWED.'                              00099100
&ZMACRET      SETA  8           SET MACRO ERROR RETURN CODE             00099200
.ZELISTX      ANOP  ,                                                   00099300
&ZASYSLNDX    SETA  0                                                   00099400
.*-------------------------------------------------------------------   00099500
.***AE.MF02 MF=(LME)                                                    00099600
.ZEMFX        ANOP  ,           END OF PARTIAL SYNTAX CHECK             00099700
.*******************************************************************    00099800
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       00099900
.*******************************************************************    00100000
              AIF   (&ZMACRET NE 0).ZLX2        ERROR DETECTED          00100100
.*******************************************************************    00100200
.***AE.01  START OF IVTFREE MACRO CODE                                  00100300
.*******************************************************************    00100400
              LCLC  &M0M0001                 NAME                       00100500
&M0M0001      SETC  '&XLABEL'                SET NAME                   00100600
              AIF   (K'&XLABEL NE 0).XLAB2                              00100700
&M0M0001      SETC  'M00M&SYSNDX'            DEFAULT NAME               00100800
.*                                                                      00100900
.XLAB2        ANOP  ,                                                   00101000
              AIF   ('&XMF' EQ 'L').XLAB3                               00101100
&M0M0001 DS    0H                             IVTFREE-0                 00101200
.XLAB3        ANOP  ,                                                   00101300
.*******************************************************************    00101400
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              00101500
.*******************************************************************    00101600
              PUSH  PRINT                                               00101700
              AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON          00101800
              PRINT OFF         ++ PR01                                 00101900
              AGO   .ZPRNTXX                                            00102000
.ZPRINTX      PRINT ON                                                  00102100
.ZPRNTXX      ANOP  ,                                                   00102200
.********************************************************************   00102300
.***AL.L01 INTERNAL ARRAY TO PRODUCE FORMATTED CODE                     00102400
.********************************************************************   00102500
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       00102600
                      LCLA  &ZOPN1         INVOCATION INDEX             00102700
                      LCLC  &ZOPL(4095)    LABEL                        00102800
                      LCLC  &ZOPO(4095)    OPERATION                    00102900
                      LCLC  &ZOPV(4095)    VALUE                        00103000
                      LCLC  &ZOPD(4095)    DESCRIPTION                  00103100
.*                                                                      00103200
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     00103300
.******************************************************************     00103400
.***AL.L08 IVTFREE FMT=LIST MF=L PARAMETER AREA                         00103500
.******************************************************************     00103600
                      AIF   ('&XMF' NE 'L').ZLMFLX  NOT MF=LIST         00103700
.*-------------------------------------------------------------------   00103800
.***AM.L00  IVTFREE FMT=LIST name                                       00103900
                      AIF   ('&XMF' NE 'L').ZLMFSL2M                    00104000
&ZOPN                 SETA &ZOPN+1                                      00104100
&ZOPL(&ZOPN)          SETC '&M0M0001'                                   00104200
&ZOPO(&ZOPN)          SETC 'EQU'                                        00104300
&ZOPV(&ZOPN)          SETC '&XMFCTRL'                                   00104400
&ZOPD(&ZOPN)          SETC '++ IVTFREE NAME'                            00104500
.ZLMFSL2M             ANOP  ,                                           00104600
.*-------------------------------------------------------------------   00104700
.***AM.L01  IVTFREE FMT=LIST PARAMETERS                                 00104800
&ZOPN                 SETA &ZOPN+1                                      00104900
&ZOPL(&ZOPN)          SETC '&XMFCTRL'                                   00105000
&ZOPO(&ZOPN)          SETC 'DS'                                         00105100
&ZOPV(&ZOPN)          SETC '&XMFATTR'                                   00105200
&ZOPD(&ZOPN)          SETC '++ IVTFREE PARM LIST'                       00105300
.*-------------------------------------------------------------------   00105400
.***AM.L02 XVERSION XL1                                                 00105500
&ZOPN                 SETA &ZOPN+1                                      00105600
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XVERSION'                         00105700
&ZOPO(&ZOPN)          SETC 'DS'                                         00105800
&ZOPV(&ZOPN)          SETC 'XL1'                                        00105900
&ZOPD(&ZOPN)          SETC '++ INPUT XVERSION'                          00106000
.*-------------------------------------------------------------------   00106100
.***AM.L09  XRSVFREE1 CL03                                              00106200
&ZOPN                 SETA &ZOPN+1                                      00106300
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XRSVFREE1'                        00106400
&ZOPO(&ZOPN)          SETC 'DS'                                         00106500
&ZOPV(&ZOPN)          SETC 'CL03'                                       00106600
&ZOPD(&ZOPN)          SETC '++ RESERVED '                               00106700
.*-------------------------------------------------------------------   00106800
.***AM.L09  XBUFLIST A                                                  00106900
&ZOPN                 SETA &ZOPN+1                                      00107000
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XBUFLIST'                         00107100
&ZOPO(&ZOPN)          SETC 'DS'                                         00107200
&ZOPV(&ZOPN)          SETC 'A'                                          00107300
&ZOPD(&ZOPN)          SETC '++ &ZXBUFLIST '                             00107400
.*-------------------------------------------------------------------   00107500
.***AM.L09  XBUFNUM F                                                   00107600
&ZOPN                 SETA &ZOPN+1                                      00107700
&ZOPL(&ZOPN)          SETC '&XMFCTRL._XBUFNUM'                          00107800
&ZOPO(&ZOPN)          SETC 'DS'                                         00107900
&ZOPV(&ZOPN)          SETC 'F'                                          00108000
&ZOPD(&ZOPN)          SETC '++ &ZXBUFNUM '                              00108100
.*-------------------------------------------------------------------   00108200
.***AM.L10 END OF IVTFREE LIST PARAMETERS                               00108300
&ZOPN                 SETA &ZOPN+1                                      00108400
&ZOPL(&ZOPN)          SETC '&XMFCTRL.L'                                 00108500
&ZOPO(&ZOPN)          SETC 'EQU'                                        00108600
&ZOPV(&ZOPN)          SETC '*-&XMFCTRL'                                 00108700
&ZOPD(&ZOPN)          SETC '++ LENGTH OF PLIST'                         00108800
.*                                                                      00108900
&ZOPN                 SETA &ZOPN+1                                      00109000
&ZOPL(&ZOPN)          SETC ' '                                          00109100
&ZOPO(&ZOPN)          SETC 'SPACE'                                      00109200
&ZOPV(&ZOPN)          SETC '1'                                          00109300
&ZOPD(&ZOPN)          SETC ' '                                          00109400
.*-------------------------------------------------------------------   00109500
.***AL.L09 IVTFREE FMT=LIST MF=L PARAMETER AREA DEFINED                 00109600
                      AGO   .ZMFLX         EXIT, MF=L DONE              00109700
.*                                                                      00109800
.ZLMFLX               ANOP  ,                                           00109900
.*-------------------------------------------------------------------   00110000
.***AL.L13 SET ZPLLEN TO ITS APPROPRIATE VALUE                          00110100
&ZPLLEN               SETA 12                                           00110200
.*                                                                      00110300
.******************************************************************     00110400
.***AI.L01 IVTFREE FMT=LIST FILL IN PARAMETER AREA                      00110500
.******************************************************************     00110600
                      ACTR  10000                                       00110700
&ZCVAL                SETC  'LA'           ASSUME XA MODE               00110800
                      AIF   ('&SYSASCE' EQ 'P').ZIMFXA  SYSSTATE PRI    00110900
&ZCVAL                SETC  'LAE'          XAX MODE                     00111000
.ZIMFXA               ANOP ,                                            00111100
.*                                                                      00111200
                      AIF   ('&XMFCTRL'(1,1) NE '(').ZIMFN2  NOT GPR    00111300
&ZCGPR                SETC  '&XMFCTRL'(2,K'&XMFCTRL-2)  GET GPR         00111400
                      AIF   ('&ZCGPR' EQ 'GPR1').ZIMFNX                 00111500
                      AIF   ('&ZCGPR' EQ 'GPR01').ZIMFNX                00111600
                      AIF   ('&ZCGPR' EQ 'REG1').ZIMFNX                 00111700
                      AIF   ('&ZCGPR' EQ 'REG01').ZIMFNX                00111800
                      AIF   ('&ZCGPR' EQ 'R1').ZIMFNX                   00111900
                      AIF   ('&ZCGPR' EQ '1').ZIMFNX                    00112000
                      AIF   ('&ZCGPR' EQ '01').ZIMFNX                   00112100
&ZOPN                 SETA  &ZOPN+1                                     00112200
&ZOPL(&ZOPN)          SETC  ' '                                         00112300
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00112400
&ZOPV(&ZOPN)          SETC  '1,0(,&ZCGPR)'                              00112500
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00112600
                      AGO   .ZIMFNX                                     00112700
.*                                                                      00112800
.ZIMFN2               ANOP ,                                            00112900
                      AIF   (&SYSALVL EQ 0).ZIMFNX1                     00113000
                      AIF   ('&XMF' NE 'S').ZIMFNX1                     00113100
                      AIF   ('&ZCVAL' NE 'LAE').ZIMFNX                  00113200
&ZOPN                 SETA  &ZOPN+1                                     00113300
&ZOPL(&ZOPN)          SETC  ' '                                         00113400
&ZOPO(&ZOPN)          SETC  'LAE'                                       00113500
&ZOPV(&ZOPN)          SETC  '1,0(1,0)'                                  00113600
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00113700
                      AGO   .ZIMFNX                                     00113800
.ZIMFNX1              ANOP ,                                            00113900
&ZOPN                 SETA  &ZOPN+1                                     00114000
&ZOPL(&ZOPN)          SETC  ' '                                         00114100
&ZOPO(&ZOPN)          SETC  '&ZCVAL'                                    00114200
&ZOPV(&ZOPN)          SETC  '1,&XMFCTRL'                                00114300
&ZOPD(&ZOPN)          SETC  '++ LOCATE ARG PARMS'                       00114400
.ZIMFNX               ANOP ,                                            00114500
.********************************************************************   00114600
.***AI.L02 IVTFREE FMT=LIST INITIALIZE PARAMETER AREA                   00114700
.********************************************************************   00114800
.***AI.L03 MF=(LME)                                                     00114900
                      AIF   ('&XMF' EQ 'L').ZIMFLX                      00115000
                      AIF   ('&XMFSCK' NE 'COMPLETE').ZIMFLX            00115100
.*                                                                      00115200
&ZOPN                 SETA  &ZOPN+1                                     00115300
&ZOPL(&ZOPN)          SETC  ' '                                         00115400
&ZOPO(&ZOPN)          SETC  'XC'                                        00115500
&ZOPV(&ZOPN)          SETC  '0(&ZPLLEN,1),0(1)'                         00115600
&ZOPD(&ZOPN)          SETC  '++ INITIALIZE'                             00115700
.ZIMFLX               ANOP  ,                                           00115800
.*-------------------------------------------------------------------   00115900
.***AI.L19  XBUFLIST A                                                  00116000
                      AIF   ('&ZXBUFLIST' EQ '').ZI3H                   00116100
&ZCLNG                SETC  '&XBUFLIST'                                 00116200
&ZCGPR                SETC  '14'                                        00116300
         AIF   ('&XBUFLIST'(1,1) EQ '(').ZI3F  IN GPR                   00116400
.*                                                                      00116500
&ZOPN                 SETA  &ZOPN+1                                     00116600
&ZOPL(&ZOPN)          SETC  ' '                                         00116700
&ZOPO(&ZOPN)          SETC  'LA'                                        00116800
&ZOPV(&ZOPN)          SETC  '&ZCGPR,&ZCLNG'                             00116900
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFLIST XBUFLIST'                    00117000
.*                                                                      00117100
                      AGO   .ZI3G                                       00117200
.*                                                                      00117300
.ZI3F                 ANOP  ,                                           00117400
&ZCGPR   SETC  '&XBUFLIST'(2,K'&XBUFLIST-2)                             00117500
.*                                                                      00117600
.ZI3G                 ANOP  ,                                           00117700
.*                                                                      00117800
&ZOPN                 SETA  &ZOPN+1                                     00117900
&ZOPL(&ZOPN)          SETC  ' '                                         00118000
&ZOPO(&ZOPN)          SETC  'ST'                                        00118100
&ZOPV(&ZOPN)          SETC  '&ZCGPR,4(,1)'                              00118200
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFLIST XBUFLIST'                    00118300
.*                                                                      00118400
.ZI3H                 ANOP  ,                                           00118500
.*-------------------------------------------------------------------   00118600
.***AI.L25  XBUFNUM F                                                   00118700
                      AIF   ('&ZXBUFNUM' EQ '').ZI4E                    00118800
                      AIF   ('&ZXBUFNUM' EQ 'OUTPUT').ZI4E              00118900
&ZCGPR                SETC  '&XBUFNUM'                                  00119000
.*                                                                      00119100
                      AIF   ('&XBUFNUM'(1,1) NE '(').ZI4B               00119200
&ZCGPR   SETC  '0('.'&XBUFNUM'(2,K'&XBUFNUM-2).')'                      00119300
                      AGO   .ZI4D                                       00119400
.ZI4B                 ANOP  ,                                           00119500
.*                                                                      00119600
&ZC                   SETC  '&XBUFNUM'(1,1)                             00119700
                      AIF   (T'&ZC NE 'N').ZI4D                         00119800
&ZC                   SETC  '&XBUFNUM'                                  00119900
                      AIF   ('&ZC'(K'&ZC,1) EQ ')').ZI4D                00120000
&ZCGPR                SETC  '=FL4''&XBUFNUM'''                          00120100
.*                                                                      00120200
.ZI4D                 ANOP  ,                                           00120300
.*                                                                      00120400
&ZOPN                 SETA  &ZOPN+1                                     00120500
&ZOPL(&ZOPN)          SETC  ' '                                         00120600
&ZOPO(&ZOPN)          SETC  'MVC'                                       00120700
&ZOPV(&ZOPN)          SETC  '8(4,1),&ZCGPR'                             00120800
&ZOPD(&ZOPN)          SETC  '++ &ZXBUFNUM XBUFNUM'                      00120900
.*                                                                      00121000
.ZI4E                 ANOP  ,                                           00121100
.*-------------------------------------------------------------------   00121200
&ZOPN1                SETA &ZOPN                                        00121300
.*-------------------------------------------------------------------   00121400
.***AI.C00 MF=M CHECK TO BYPASS INVOCATION                              00121500
                      AIF   ('&XMF' EQ 'M').ZMFLX  DONE IF MF=M         00121600
.*******************************************************************    00121700
.***  PROCESS IVTFREE OUTPUT PARAMETERS                                 00121800
.*******************************************************************    00121900
                      ACTR  10000                                       00122000
.*******************************************************************    00122100
.***AO.X04  LABEL FOR MF=L PROCESSING                                   00122200
.*******************************************************************    00122300
.ZMFLX                ANOP  ,              MF=L PROCESSING              00122400
.*******************************************************************    00122500
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               00122600
.*******************************************************************    00122700
                      ACTR  10000                                       00122800
.*                                                                      00122900
                      LCLA  &ZLC           COLUMN POSITION              00123000
                      LCLA  &ZOPX          LIST TABLE INDEX             00123100
                      LCLC  &ZLL           LABEL                        00123200
                      LCLC  &ZLOP          OPERATION                    00123300
                      LCLC  &ZLV           VALUE                        00123400
                      LCLC  &ZLD           DESCRIPTION                  00123500
.*                                                                      00123600
&ZOPX                 SETA  1                                           00123700
.ZL2                  AIF   (&ZOPX GT &ZOPN1).ZLX  B IF DONE            00123800
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00123900
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00124000
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00124100
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00124200
                      AIF   (K'&ZLD LE 0).ZL5                           00124300
&ZLC                  SETA  35             COMMENT COLUMN               00124400
                      AIF   ('&ZLD'(1,1) NE '*').ZL3                    00124500
&ZLC                  SETA  33             COMMMENT COLUMN              00124600
.ZL3                  AIF   (K'&ZLV GE &ZLC-16-1).ZL4                   00124700
&ZLV                  SETC  '&ZLV'.' '                                  00124800
                      AGO   .ZL3                                        00124900
.*                                                                      00125000
.ZL4                  ANOP  ,                                           00125100
&ZLV                  SETC  '&ZLV'.' '                                  00125200
.ZL5                  ANOP  ,                                           00125300
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00125400
.*                                                                      00125500
&ZLL     &ZLOP &ZLV                                                     00125600
.*                                                                      00125700
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00125800
                      AGO   .ZL2           CONTINUE LOOPING             00125900
.*                                                                      00126000
.ZLX                  ANOP  ,                                           00126100
                      AIF   ('&XMF' EQ 'L').ZLINKX  MF=L                00126200
                      AIF   ('&XMF' EQ 'M').ZLINKX  MF=M                00126300
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00126400
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00126500
.ZLINKX               ANOP  ,                                           00126600
.*******************************************************************    00126700
.***AP.X01  FORMAT GENERATED CODE                                       00126800
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            00126900
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00127000
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00127100
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00127200
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00127300
                      AIF   (K'&ZLD LE 0).ZL51                          00127400
&ZLC                  SETA  35             COMMENT COLUMN               00127500
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   00127600
&ZLC                  SETA  33             COMMENT COLUMN               00127700
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  00127800
&ZLV                  SETC  '&ZLV'.' '                                  00127900
                      AGO   .ZL31                                       00128000
.*                                                                      00128100
.ZL41                 ANOP  ,                                           00128200
&ZLV                  SETC  '&ZLV'.' '                                  00128300
.ZL51                 ANOP  ,                                           00128400
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00128500
.*                                                                      00128600
&ZLL     &ZLOP &ZLV                                                     00128700
.*                                                                      00128800
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00128900
                      AGO   .ZL21          CONTINUE LOOPING             00129000
.*                                                                      00129100
.ZLX1                 ANOP  ,                                           00129200
.*******************************************************************    00129300
.***AP.X02  END OF IVTFREE MACRO                                        00129400
&ZIVTFREE             SETC  'YES'          SET IVTFREE USED             00129500
         POP   PRINT                                                    00129600
*                                            IVTFREE-0                  00129700
         SPACE 1                                                        00129800
.ZLX2                 ANOP  ,                                           00129900
         MEND                                                           00130000
**********************************************************************/ 00130100
*/**** START OF SPECIFICATIONS **************************************** 00130200
*                                                                     * 00130300
*                                                                     * 00130400
*01* MACRO NAME:  IVTFREE                               -99/09/09-<0> * 00130500
*                                                                     * 00130600
*                                                                     * 00130700
*01* DESCRIPTIVE NAME:  CSM Free Routine Interface                    * 00130800
*                                                                     * 00130900
*01* PROPRIETARY STATEMENT:                                           * 00131000
*                                                                     * 00131100
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00131200
*     &maczcpyn(&*1) COPYRIGHT IBM CORP. &maczcpyd(&*1)               * 00131300
*                                                                     * 00131400
* STATUS=                                                             * 00131500
*                                                                     * 00131600
*                                                                     * 00131700
*01* FUNCTION:                                                        * 00131800
*       See the IVTFREE macro prologue for details.                   * 00131900
*                                                                     * 00132000
*01* INPUT:                                                           * 00132100
*                                                                     * 00132200
*            ?IVTFREE     BUFLIST(xbuflist)                           * 00132300
*                        ÝBUFNUM(»xbufnum!1º)¨                        * 00132400
*                        ÝPLISTVER(»xplistver!IMPLIED_VERSIONº)¨      * 00132500
*                       Ð MF(E,xmfctrl»,COMPLETE!NOCHECKº)            * 00132600
*                       Ô MF(L,xmfctrl»,xmfattr!BDY(DWORD)º)          * 00132700
*                       ¿ MF(M,xmfctrl»,COMPLETE!NOCHECKº)            * 00132800
*                                                                     * 00132900
****** END OF SPECIFICATIONS *****************************************/ 00133000
*/*PB.ECHO01 MACRO INVOCATION ECHO-----------------------------------*/ 00133100
*  ANS('@SPACE;') NORESCAN COL(MACLMAR);                                00133200
*  ANS('/* ? IVTFREE '!!MACLIST!!' ')                                   00133300
*      NORESCAN COL(MACLMAR+5);    /* START ECHO */                     00133400
*                                                                       00133500
*  DCL ZELO  FIXED;                                                     00133600
*  DCL ZECOL FIXED;                                                     00133700
*                                                                       00133800
*  ZELO=1;     /* STARTING COLUMN */                                    00133900
*  DO WHILE ZELO<=LENGTH(MACKEYS);  /* PARENTHSIS SCAN */               00134000
*    ZECOL=INDEX(MACKEYS(ZELO:LENGTH(MACKEYS)),')');                    00134100
*    IF ZECOL>0                                                         00134200
*      THEN                                                             00134300
*        DO;   /* PARENTHESIS FOUND */                                  00134400
*          ANS(MACKEYS(ZELO:ZELO+ZECOL-1)!!' ')                         00134500
*             NORESCAN COL(MACLMAR+5);                                  00134600
*          ZELO=ZELO+ZECOL;        /* NEXT PORTION */                   00134700
*        END;                                                           00134800
*      ELSE                                                             00134900
*        DO;   /* REMAINING KEYS */                                     00135000
*          ANS(MACKEYS(ZELO:LENGTH(MACKEYS)))                           00135100
*             NORESCAN COL(MACLMAR+5);                                  00135200
*          ZELO=LENGTH(MACKEYS)+1;                                      00135300
*        END;                                                           00135400
*  END;                                                                 00135500
*  ANS(' -99/09/09-0- */')                                              00135600
*      NORESCAN COL(MACLMAR+5);    /* END ECHO */                       00135700
*/********************************************************************/ 00135800
*/*PV.DCL01 MACRO DECLARES AND CODE GENERATION CONTROLS              */ 00135900
*/********************************************************************/ 00136000
*  DCL ZPRINT  EXTERNAL; DEACT ZPRINT; /* YES=PRINT, NO=NO PRINT     */ 00136100
*  DCL ZTEST   EXTERNAL; DEACT ZTEST;  /* YES=TEST, NO=NO TEST       */ 00136200
*  DCL ZSYSTEM EXTERNAL; DEACT ZSYSTEM;/* PCCODE10, MVS, SAK, VM     */ 00136300
*                                                                       00136400
*  DCL   ZIVTFREE CHAR EXTERNAL; /* YES=USED AT LEAST ONCE          */  00136500
*  DEACT ZIVTFREE;                                                      00136600
*                                                                       00136700
*  DCL ZMACRET FIXED; DEACT ZMACRET;                                    00136800
*  ZMACRET=0;                   /* MACRO COMPILE RETURN CODE         */ 00136900
*                                                                       00137000
*  DCL ZMS CHAR;   DEACT ZMS;   /* ERROR MESSAGE                     */ 00137100
*  DCL ZCVAL CHAR; DEACT ZCVAL; /* ERROR MESSAGE WORK AREA           */ 00137200
*                                                                       00137300
*  DCL ZI FIXED;  DEACT ZI;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00137400
*  DCL ZJ FIXED;  DEACT ZJ;     /* INDEX FOR VARIABLE NUM OF PARMS   */ 00137500
*  DCL ZK FIXED;  DEACT ZK;     /* INDEX FOR RANGE COLON (:)         */ 00137600
*  DCL ZL FIXED;  DEACT ZL;     /* INDEX FOR RANGE VALUE CHECKING    */ 00137700
*  DCL ZLO FIXED; DEACT ZLO;    /* LOW RANGE VALUE                   */ 00137800
*  DCL ZHI FIXED; DEACT ZHI;    /* HIGH RANGE VALUE                  */ 00137900
*  DCL ZW CHAR;   DEACT ZW;     /* WORK AREA FOR RANGE VALUE SUBLIST */ 00138000
*  DCL ZN FIXED;  DEACT ZN;     /* NUMERIC WORK VARIABLE             */ 00138100
*  DCL ZC CHAR;   DEACT ZC;     /* CHARACTER WORK VARIABLE           */ 00138200
*  DCL ZMAXINVOCLEN FIXED; DEACT ZMAXINVOCLEN;  /* INVOCATION LENGTH */ 00138300
*  DCL ZPLLEN FIXED; DEACT ZPLLEN;        /* PARAMETER LIST LENGTH   */ 00138400
*                                                                       00138500
*  DCL ZPRMMAX FIXED;           /* MAXIMUM PARM LIST SIZE            */ 00138600
*  DCL ZPRMNUM FIXED;           /* PARAMETER ARRAY INDEX             */ 00138700
*  DCL ZPRM(100);               /* PARAMETER ENTRY                   */ 00138800
*  DCL EHAMAXLEN FIXED EXTERNAL;   /* MAX ILIST SIZE FOR PARM LISTS  */ 00138900
*  DCL EHAREGS CHARACTER EXTERNAL; /* REG DCLS                       */ 00139000
*  DCL EHAREGS64 CHARACTER EXTERNAL; /* REG DCLS                     */ 00139100
*  DCL EHALIST CHARACTER EXTERNAL; /* STANDARD PARM LIST GENERATION  */ 00139200
*/*******************************************************************/  00139300
*/*PV.XVAR01 DECLARE ALL MACRO PARAMETER VARIABLES                  */  00139400
*/*******************************************************************/  00139500
*  DCL XBUFLIST;  DEACT XBUFLIST;  /***PV.XVAR02 INPUT NAME */          00139600
*  DCL ZXBUFLIST; DEACT ZXBUFLIST;  /***INPUT/OUTPUT CONTROL */         00139700
*  DCL XBUFNUM;  DEACT XBUFNUM;    /***PV.XVAR02 INPUT NAME */          00139800
*  DCL ZXBUFNUM; DEACT ZXBUFNUM;   /***INPUT/OUTPUT CONTROL */          00139900
*  DCL XPLISTVER FIXED;  DEACT XPLISTVER;  /***PV.XVAR02 INPUT VALUE */ 00140000
*  DCL ZXPLISTVER; DEACT ZXPLISTVER;  /***INPUT/OUTPUT CONTROL */       00140100
*  DCL XMF;  DEACT XMF;            /***PV.XVAR02 INPUT VALUE */         00140200
*  DCL ZXMF; DEACT ZXMF;           /***INPUT/OUTPUT CONTROL */          00140300
*  DCL XMFCTRL;  DEACT XMFCTRL;    /***PV.XVAR02 INPUT NAME */          00140400
*  DCL ZXMFCTRL; DEACT ZXMFCTRL;   /***INPUT/OUTPUT CONTROL */          00140500
*  DCL XMFSCK;  DEACT XMFSCK;      /***PV.XVAR02 INPUT VALUE */         00140600
*  DCL ZXMFSCK; DEACT ZXMFSCK;     /***INPUT/OUTPUT CONTROL */          00140700
*  DCL XMFATTR;  DEACT XMFATTR;    /***PV.XVAR02 INPUT VALUE */         00140800
*  DCL ZXMFATTR; DEACT ZXMFATTR;   /***INPUT/OUTPUT CONTROL */          00140900
*/********************************************************************/ 00141000
*/***PC.PLV01  PROCESS PLISTVER                                      */ 00141100
*/********************************************************************/ 00141200
*  IF TRANSLATE(PLISTVER(1)) = 'MAX' THEN                               00141300
*    XPLISTVER=0;                                                       00141400
*  ELSE                                                                 00141500
*    XPLISTVER=0;                                                       00141600
*  IF PLISTVER^=''                                                      00141700
*     & TRANSLATE(PLISTVER(1))^='IMPLIED_VERSION'                       00141800
*     & TRANSLATE(PLISTVER(1))^='MAX'                                   00141900
*    THEN                                                               00142000
*      DO;                                                              00142100
*                                                                       00142200
*        ZCVAL='';                           /* ERROR FLAG */           00142300
*        IF PLISTVER='PLISTVER' ! PLISTVER='()'  /*CHECK ENTRY*/        00142400
*          THEN                                                         00142500
*            DO;                                                        00142600
*              ZMS=' 8, THE "PLISTVER" KEY'!! /**KOPTP* MSG*/           00142700
*                  ' MUST CONTAIN ONE'!!                                00142800
*                  ' (OR MORE) ARGUMENT(S).';                           00142900
*              ANS MSG('?IVTFREE ---> '!!ZMS);                          00143000
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00143100
*              ZMACRET=8;                    /* MACRO ERROR */          00143200
*              ZCVAL='NO_ARGUMENT';                                     00143300
*            END;                                                       00143400
*        IF NUMBER(PLISTVER)>1               /* CHECK POSITIONALS */    00143500
*          THEN                                                         00143600
*            DO;                                                        00143700
*              ZMS=' 8, "PLISTVER'!!         /**KPOSP* MSG*/            00143800
*                  PLISTVER!!                                           00143900
*                  '" "PLISTVER"'!!                                     00144000
*                  ' CAN HAVE ONLY 1 ARGUMENT.';                        00144100
*              ANS MSG('?IVTFREE ---> '!!ZMS);                          00144200
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00144300
*              ZMACRET=8;                    /* MACRO ERROR */          00144400
*            END;                                                       00144500
*                                                                       00144600
*        ZC=PLISTVER(1);                                                00144700
*        DO ZL=1 TO LENGTH(ZC);              /* MUST BE NUMBER */       00144800
*          IF ZC(ZL:ZL)<'0' !                /* MUST BE NUMERIC */      00144900
*             ZC(ZL:ZL)>'9'                  /* MUST BE NUMERIC */      00145000
*            THEN                                                       00145100
*              ZCVAL='NUMERIC';              /* NUMERIC ERROR */        00145200
*        END;                                                           00145300
*        IF ZCVAL=''                                                    00145400
*          THEN                                                         00145500
*            DO;                             /* CHECK RANGE LIMITS */   00145600
*            IF FIXED(PLISTVER(1))>=XPLISTVER                           00145700
*              THEN                                                     00145800
*                XPLISTVER=FIXED(PLISTVER(1));                          00145900
*              ELSE                                                     00146000
*                DO;                                                    00146100
*              ZMS=' 8, PLISTVER='!!         /**KVALP* MSG*/            00146200
*                    PLISTVER(1)!!                                      00146300
*                  ', BUT PLISTVER OF '!!                               00146400
*                    CHAR(XPLISTVER)!!                                  00146500
*                  ' IS REQUIRED.';                                     00146600
*              ANS MSG('?IVTFREE ---> '!!ZMS);                          00146700
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00146800
*              ZMACRET=8;                    /* MACRO ERROR */          00146900
*                END;                                                   00147000
*              IF XPLISTVER<0 !              /* LOW LIMIT */            00147100
*                 XPLISTVER>0                /* HIGH LIMIT */           00147200
*                THEN                                                   00147300
*                  ZCVAL='RANGE';            /* RANGE ERROR */          00147400
*            END;                                                       00147500
*        IF ZCVAL^=''                                                   00147600
*          THEN                                                         00147700
*            DO;                             /* RANGE ERROR */          00147800
*              ZXPLISTVER='';                /* RESET IN/OUTPUT */      00147900
*              ZMS=' 8, "PLISTVER '!!        /**KRNGP* MSG*/            00148000
*                  PLISTVER!!                                           00148100
*                  '" THE RANGE IS "0-0"'!!                             00148200
*                  ' FOR ARGUMENT 1.';                                  00148300
*              ANS MSG('?IVTFREE ---> '!!ZMS);                          00148400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00148500
*              ZMACRET=8;                    /* MACRO ERROR */          00148600
*            END;                                                       00148700
*      END;                                                             00148800
*                                                                       00148900
*/********************************************************************/ 00149000
*/***PG.MF01  PROCESS MF MACRO FORMS                                 */ 00149100
*/********************************************************************/ 00149200
*/*PG.KKCTL01 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00149300
*  XMF='';                                                              00149400
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00149500
*  IF TRANSLATE(MF(1))                                                  00149600
*              = 'E'                         /* CHECK FOR KEYWORD */    00149700
*    THEN                                                               00149800
*      DO;                                                              00149900
*        XMF='E';                            /* SET XVARIABLE */        00150000
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00150100
*          THEN                                                         00150200
*            DO;                                                        00150300
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00150400
*                  MF!!                                                 00150500
*                  '" "MF"'!!                                           00150600
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00150700
*              ANS MSG('?IVTFREE ---> '!!ZMS);                          00150800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00150900
*              ZMACRET=8;                    /* MACRO ERROR */          00151000
*            END;                                                       00151100
*/*PG.KXVAR03 NAME, RQD INPUT, POS(2) -XVARIABLE---------------------*/ 00151200
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00151300
*  IF MF(2)=''                               /* CHECK FOR NULL */       00151400
*   THEN                                                                00151500
*    DO;                                     /* KEY IS REQUIRED */      00151600
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00151700
*        ZMS=' 8,  '!!                                                  00151800
*            ' FOR THE "MF" KEY, POSITIONAL'!!                          00151900
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00152000
*        ANS MSG('?IVTFREE ---> '!!ZMS);                                00152100
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00152200
*        ZMACRET=8;                          /* MACRO ERROR */          00152300
*    END;                                                               00152400
*  ELSE                                                                 00152500
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00152600
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00152700
*  XMFSCK='';                                /* RESET XVARIABLE */      00152800
*  IF TRANSLATE(MF(3))                                                  00152900
*              = 'COMPLETE'                  /* CHECK FOR KEYWORD */    00153000
*    THEN                                                               00153100
*      XMFSCK = 'COMPLETE';                  /* SET XVARIABLE */        00153200
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00153300
*  IF TRANSLATE(MF(3))                                                  00153400
*              = 'NOCHECK'                   /* CHECK FOR KEYWORD */    00153500
*    THEN                                                               00153600
*      XMFSCK = 'NOCHECK';                   /* SET XVARIABLE */        00153700
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00153800
*  ZXMFSCK='INPUT';                          /* SET IN/OUTPUT */        00153900
*  IF XMFSCK=''                              /* CHECK FOR KEYWORD */    00154000
*    THEN                                                               00154100
*      DO;                                   /* KEYWORD NOT ENTERED */  00154200
*        XMFSCK='COMPLETE';                  /* SET DEFAULT */          00154300
*        IF MF(3)^=''                                                   00154400
*          THEN                                                         00154500
*            DO;                                                        00154600
*              ZXMFSCK='';                   /* RESET IN/OUTPUT */      00154700
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/            00154800
*                  MF!!'"'!!                                            00154900
*                  ' ARGUMENT 3 IS AN UNKNOWN KEYWORD. '!!              00155000
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00155100
*                  ' "COMPLETE"'!!           /* VALID KEYWORD */        00155200
*                  ' OR "NOCHECK".';         /* VALID KEYWORD */        00155300
*              ANS MSG('?IVTFREE ---> '!!ZMS);                          00155400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00155500
*              ZMACRET=8;                    /* MACRO ERROR */          00155600
*            END;                                                       00155700
*      END;                                                             00155800
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00155900
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00156000
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00156100
*  IF TRANSLATE(MF(1))                                                  00156200
*              = 'L'                         /* CHECK FOR KEYWORD */    00156300
*    THEN                                                               00156400
*      DO;                                                              00156500
*        XMF='L';                            /* SET XVARIABLE */        00156600
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00156700
*          THEN                                                         00156800
*            DO;                                                        00156900
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00157000
*                  MF!!                                                 00157100
*                  '" "MF"'!!                                           00157200
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00157300
*              ANS MSG('?IVTFREE ---> '!!ZMS);                          00157400
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00157500
*              ZMACRET=8;                    /* MACRO ERROR */          00157600
*            END;                                                       00157700
*/*PG.KKCTL10 -MF(L) SPECIAL CHECK-----------------------------------*/ 00157800
*        ZMAXINVOCLEN = LENGTH(MF) + 2;                                 00157900
*        IF PLISTVER ^= ''                                              00158000
*          THEN                                                         00158100
*            ZMAXINVOCLEN=ZMAXINVOCLEN + LENGTH(PLISTVER) + 8;          00158200
*        IF LENGTH(MACKEYS) > ZMAXINVOCLEN !                            00158300
*           MACLIST ^= ''                    /* CHECK FOR OTHER PARMS*/ 00158400
*          THEN                                                         00158500
*            DO;                                                        00158600
*              ZMS=' 8, THE "L" FORM OF "MF"'!! /**MFLP* MSG*/          00158700
*                  ' CAN ONLY HAVE'!!                                   00158800
*                  ' THE "PLISTVER" KEY'!!                              00158900
*                  ' SPECIFIED ON THE INVOCATION.';                     00159000
*              ANS MSG('?IVTFREE ---> '!!ZMS);                          00159100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00159200
*              ZMACRET=8;                    /* MACRO ERROR */          00159300
*            END;                                                       00159400
*/*PG.KXVAR03 NAME, RQD INPUT, POS(2) -XVARIABLE---------------------*/ 00159500
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00159600
*  IF MF(2)=''                               /* CHECK FOR NULL */       00159700
*   THEN                                                                00159800
*    DO;                                     /* KEY IS REQUIRED */      00159900
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00160000
*        ZMS=' 8,  '!!                                                  00160100
*            ' FOR THE "MF" KEY, POSITIONAL'!!                          00160200
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00160300
*        ANS MSG('?IVTFREE ---> '!!ZMS);                                00160400
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00160500
*        ZMACRET=8;                          /* MACRO ERROR */          00160600
*    END;                                                               00160700
*  ELSE                                                                 00160800
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00160900
*/*PG.KXVAR13 VALUE, OPT INPUT, POS(3) -XVARIABLE--------------------*/ 00161000
*  ZXMFATTR='INPUT';                         /* SET IN/OUTPUT */        00161100
*  XMFATTR='BDY(DWORD)';                     /* SET DEFAULT */          00161200
*  IF MF(3)^=''                              /* CHECK FOR NULL */       00161300
*    THEN                                                               00161400
*      XMFATTR=MF(3);                        /* SET XVARIABLE */        00161500
*/*PG.KCK01 VALUE, OPT INPUT, POS(3) -CHARACTER LENGTH---------------*/ 00161600
*  IF ZXMFATTR^='' &                         /* NOT IN/OUTPUT */        00161700
*     LENGTH(XMFATTR)>60                                                00161800
*    THEN                                                               00161900
*      DO;                                                              00162000
*        ZXMFATTR='';                        /* RESET IN/OUTPUT */      00162100
*        ZMS=' 8, "MF'!!                     /**KLNGP* MSG*/            00162200
*            MF!!                                                       00162300
*            '" ARGUMENT 3 EXCEEDS THE MAXIMUM'!!                       00162400
*            ' LENGTH OF 60 CHARACTERS. ';                              00162500
*        ANS MSG('?IVTFREE ---> '!!ZMS);                                00162600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00162700
*        ZMACRET=8;                          /* MACRO ERROR */          00162800
*      END;                                                             00162900
*/*PG.KKCTL02 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00163000
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00163100
*/*PG.KKCTL03 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00163200
*  IF TRANSLATE(MF(1))                                                  00163300
*              = 'M'                         /* CHECK FOR KEYWORD */    00163400
*    THEN                                                               00163500
*      DO;                                                              00163600
*        XMF='M';                            /* SET XVARIABLE */        00163700
*        IF NUMBER(MF)>3                     /* CHECK POSITIONALS */    00163800
*          THEN                                                         00163900
*            DO;                                                        00164000
*              ZMS=' 8, "MF'!!               /**KPOSP* MSG*/            00164100
*                  MF!!                                                 00164200
*                  '" "MF"'!!                                           00164300
*                  ' CAN HAVE ONLY 3 ARGUMENTS.';                       00164400
*              ANS MSG('?IVTFREE ---> '!!ZMS);                          00164500
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00164600
*              ZMACRET=8;                    /* MACRO ERROR */          00164700
*            END;                                                       00164800
*/*PG.KXVAR03 NAME, RQD INPUT, POS(2) -XVARIABLE---------------------*/ 00164900
*  XMFCTRL=MF(2);                            /* SET XVARIABLE */        00165000
*  IF MF(2)=''                               /* CHECK FOR NULL */       00165100
*   THEN                                                                00165200
*    DO;                                     /* KEY IS REQUIRED */      00165300
*        ZXMFCTRL='';                        /* RESET IN/OUTPUT */      00165400
*        ZMS=' 8,  '!!                                                  00165500
*            ' FOR THE "MF" KEY, POSITIONAL'!!                          00165600
*            ' ARG 2 IS REQUIRED.';          /**KRQDP* MSG*/            00165700
*        ANS MSG('?IVTFREE ---> '!!ZMS);                                00165800
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00165900
*        ZMACRET=8;                          /* MACRO ERROR */          00166000
*    END;                                                               00166100
*  ELSE                                                                 00166200
*    ZXMFCTRL='INPUT';                       /* SET IN/OUTPUT */        00166300
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00166400
*  XMFSCK='';                                /* RESET XVARIABLE */      00166500
*  IF TRANSLATE(MF(3))                                                  00166600
*              = 'COMPLETE'                  /* CHECK FOR KEYWORD */    00166700
*    THEN                                                               00166800
*      XMFSCK = 'COMPLETE';                  /* SET XVARIABLE */        00166900
*/*PG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00167000
*  IF TRANSLATE(MF(3))                                                  00167100
*              = 'NOCHECK'                   /* CHECK FOR KEYWORD */    00167200
*    THEN                                                               00167300
*      XMFSCK = 'NOCHECK';                   /* SET XVARIABLE */        00167400
*/*PG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD-----------*/ 00167500
*  ZXMFSCK='INPUT';                          /* SET IN/OUTPUT */        00167600
*  IF XMFSCK=''                              /* CHECK FOR KEYWORD */    00167700
*    THEN                                                               00167800
*      DO;                                   /* KEYWORD NOT ENTERED */  00167900
*        XMFSCK='COMPLETE';                  /* SET DEFAULT */          00168000
*        IF MF(3)^=''                                                   00168100
*          THEN                                                         00168200
*            DO;                                                        00168300
*              ZXMFSCK='';                   /* RESET IN/OUTPUT */      00168400
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/            00168500
*                  MF!!'"'!!                                            00168600
*                  ' ARGUMENT 3 IS AN UNKNOWN KEYWORD. '!!              00168700
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00168800
*                  ' "COMPLETE"'!!           /* VALID KEYWORD */        00168900
*                  ' OR "NOCHECK".';         /* VALID KEYWORD */        00169000
*              ANS MSG('?IVTFREE ---> '!!ZMS);                          00169100
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00169200
*              ZMACRET=8;                    /* MACRO ERROR */          00169300
*            END;                                                       00169400
*      END;                                                             00169500
*/*PG.KKCTL05 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00169600
*      END;  /**** END OF A MUTUALLY EXCLUSIVE KYWRDCTL DO GROUP */     00169700
*/*PG.KKCTL06 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00169800
*  IF MF='MF'                                                           00169900
*    ! MF='()'                               /*CHECK ENTRY*/            00170000
*     THEN                                                              00170100
*       DO;                                                             00170200
*              ZMS=' 8, THE "MF" KEY'!!      /**KOPTP* MSG*/            00170300
*                  ' MUST CONTAIN ONE'!!                                00170400
*                  ' (OR MORE) ARGUMENT(S).';                           00170500
*              ANS MSG('?IVTFREE ---> '!!ZMS);                          00170600
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00170700
*              ZMACRET=8;                    /* MACRO ERROR */          00170800
*       END;                                                            00170900
*  ELSE                                                                 00171000
*    DO;                                                                00171100
*      ZXMF='INPUT';                         /* SET IN/OUTPUT */        00171200
*      IF XMF=''                             /* CHECK FOR KEYWORD */    00171300
*        THEN                                                           00171400
*          DO;                               /* KEYWORD NOT ENTERED */  00171500
*            XMF='E';                        /* SET DEFAULT */          00171600
*            IF MF(1)^=''                    /* CHECK FOR KEYWORD */    00171700
*              THEN                                                     00171800
*                DO;                                                    00171900
*                  ZXMF='';                  /* RESET IN/OUTPUT */      00172000
*              ZMS=' 8, "MF'!!               /**KUKWP* MSG*/            00172100
*                  MF!!'"'!!                                            00172200
*                  ' ARGUMENT 1 IS AN UNKNOWN KEYWORD. '!!              00172300
*                  ' VALID KEYWORD CHOICE(S) ARE:'!!                    00172400
*                  ' "E",'!!                 /* VALID KEYWORD */        00172500
*                  ' "L",'!!                 /* VALID KEYWORD */        00172600
*                  ' OR "M".';               /* VALID KEYWORD */        00172700
*              ANS MSG('?IVTFREE ---> '!!ZMS);                          00172800
*              ANS(COMMENT(ZMS)) COL(MACLMAR);                          00172900
*              ZMACRET=8;                    /* MACRO ERROR */          00173000
*                END;                                                   00173100
*          END;                                                         00173200
*    END;                                                               00173300
*/*PG.KKCTL07 VALUE, RQD INPUT, ME KYWRDCTL -KEYWORD CONTROL---------*/ 00173400
*  IF MF(1)=''                               /* CHECK FOR KEYWORD */    00173500
*    THEN                                                               00173600
*      DO;                                                              00173700
*        ZXMF='';                            /* RESET IN/OUTPUT */      00173800
*        ZMS=' 8, THE'!!                     /**KRKWP* MSG*/            00173900
*            ' "MF" KEY AND ITS'!!                                      00174000
*            ' ARGUMENT ARE REQUIRED.'!!                                00174100
*            ' VALID KEYWORD CHOICE(S) ARE:'!!                          00174200
*            ' "E",'!!                       /* VALID KEYWORD */        00174300
*            ' "L",'!!                       /* VALID KEYWORD */        00174400
*            ' OR "M".';                     /* VALID KEYWORD */        00174500
*        ANS MSG('?IVTFREE ---> '!!ZMS);                                00174600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00174700
*        ZMACRET=8;                          /* MACRO ERROR */          00174800
*      END;                                                             00174900
*/********************************************************************/ 00175000
*/***PD.P01 FULL DEFAULT CHECKING                                    */ 00175100
*/********************************************************************/ 00175200
*  IF PLISTVER=''                                                       00175300
*     ! PLISTVER(1)='IMPLIED_VERSION'                                   00175400
*    THEN                                                               00175500
*      ZC='ON';                              /* DEFAULT FLAG ON */      00175600
*    ELSE                                                               00175700
*      ZC='OFF';                             /* DEFAULT FLAG OFF */     00175800
*/********************************************************************/ 00175900
*/***PD.P02 DEFAULT ECHO                                             */ 00176000
*/********************************************************************/ 00176100
*/*PD.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00176200
*  IF XMF^='L'                                                          00176300
*     & XMFSCK='COMPLETE'                                               00176400
*    THEN                                                               00176500
*      DO;                                   /* FULL SYNTAX CHECK */    00176600
*        ANS('/*DEFAULT(S): */')                                        00176700
*           NORESCAN COL(MACLMAR+5);                                    00176800
*/*PD.KXVAR01 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00176900
*  XBUFNUM='';                                                          00177000
*  IF BUFNUM(1)=''                                                      00177100
*    THEN                                                               00177200
*      DO;                                                              00177300
*        XBUFNUM='1';                        /* SET DEFAULT */          00177400
*        ZC='ON';                            /* DEFAULT FLAG ON */      00177500
*      END;                                                             00177600
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00177700
*  IF XBUFNUM^=''                                                       00177800
*    THEN DO;                                                           00177900
*      ANS('/* BUFNUM('!!                                               00178000
*          XBUFNUM!!                                                    00178100
*          ')*/')                                                       00178200
*          NORESCAN COL(MACLMAR+5);                                     00178300
*      XBUFNUM = '';                                                    00178400
*    END;                                                               00178500
*/*PD.DFLT02 PRINT DEFAULT(S) IF APPROPRIATE ------------------------*/ 00178600
*  IF PLISTVER=''                                                       00178700
*    THEN DO;                                                           00178800
*      ANS('/* PLISTVER('!!                                             00178900
*          CHAR(XPLISTVER)!!                                            00179000
*          ')*/')                                                       00179100
*          NORESCAN COL(MACLMAR+5);                                     00179200
*    END;                                                               00179300
*  IF ZC='OFF'                               /*NO DEFAULTS TAKEN */     00179400
*    THEN                                                               00179500
*      ANS('/* NONE. */')                                               00179600
*         NORESCAN COL(MACLMAR+5);                                      00179700
*/*PD.P04 END DEFAULT ECHO ------------------------------------------*/ 00179800
*      END;                                                             00179900
*/********************************************************************/ 00180000
*/*PB.SYSL01 INVOKE SP LEVEL AND SYSTEM STATE MACROS                 */ 00180100
*/********************************************************************/ 00180200
*  DCL SYSSPLV CHAR EXTERNAL; DEACT SYSSPLV;/* SPLEVEL 1,2,3         */ 00180300
*  DCL SYSASCE CHAR EXTERNAL; DEACT SYSASCE;/* STATE ANY P AR */        00180400
*  DCL SYSAM64 CHAR EXTERNAL; DEACT SYSAM64;                            00180500
*  DCL SYSALVL FIXED EXTERNAL; DEACT SYSALVL;                           00180600
*                                                                       00180700
*  IF SYSASCE=''                                                        00180800
*    THEN                                                               00180900
*      DO;                                                              00181000
*        IF SYSSPLV=''                                                  00181100
*          THEN                                                         00181200
*            ANS('?SPLEVEL  (TEST);') COL(MACLMAR);                     00181300
*        IF SYSSPLV^='1' & SYSSPLV^='2'                                 00181400
*          THEN                                                         00181500
*            ANS('?SYSSTATE (TEST);') COL(MACLMAR);                     00181600
*          ELSE                                                         00181700
*            SYSASCE='P';                    /* SYSSTATE DEFAULT*/      00181800
*      END;                                                             00181900
*/********************************************************************/ 00182000
*/***PG.P01 FULL MACRO SYNTAX CHECKING                               */ 00182100
*/********************************************************************/ 00182200
*/*PG.P02 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00182300
*  IF XMF^='L'                                                          00182400
*     & XMFSCK='COMPLETE'                                               00182500
*    THEN                                                               00182600
*      DO;                                   /* FULL SYNTAX CHECK */    00182700
*/*PG.P03 EXCESSIVE POSITIONAL ARGUMENTS-----------------------------*/ 00182800
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */    00182900
*    THEN                                                               00183000
*      DO;                                                              00183100
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'!! /**PPOSP* MSG*/            00183200
*            ' "'!!MACLIST!!'"'!!                                       00183300
*            ' CANNOT BE USED.'!!                                       00183400
*            ' NO POSITIONAL ARGUMENTS'!!                               00183500
*            ' ARE ALLOWED.';                                           00183600
*        ANS MSG('?IVTFREE ---> '!!ZMS);                                00183700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00183800
*        ZMACRET=8;                          /* MACRO ERROR */          00183900
*      END;                                                             00184000
*/*PG.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00184100
*  IF NUMBER(BUFLIST)>1                      /* CHECK POSITIONALS */    00184200
*    THEN                                                               00184300
*      DO;                                                              00184400
*        ZMS=' 8, "BUFLIST'!!                /**KPOSP* MSG*/            00184500
*            BUFLIST!!                                                  00184600
*            '" "BUFLIST"'!!                                            00184700
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00184800
*        ANS MSG('?IVTFREE ---> '!!ZMS);                                00184900
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00185000
*        ZMACRET=8;                          /* MACRO ERROR */          00185100
*      END;                                                             00185200
*/*PG.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00185300
*  XBUFLIST=BUFLIST(1);                      /* SET XVARIABLE */        00185400
*  IF BUFLIST(1)=''                          /* CHECK FOR NULL */       00185500
*   THEN                                                                00185600
*    DO;                                     /* KEY IS REQUIRED */      00185700
*        ZXBUFLIST='';                       /* RESET IN/OUTPUT */      00185800
*        ZMS=' 8,  '!!                                                  00185900
*            ' "BUFLIST" KEY AND ITS'!!                                 00186000
*            ' ARGUMENT ARE REQUIRED.';      /**KRQDP* MSG*/            00186100
*        ANS MSG('?IVTFREE ---> '!!ZMS);                                00186200
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00186300
*        ZMACRET=8;                          /* MACRO ERROR */          00186400
*    END;                                                               00186500
*  ELSE                                                                 00186600
*    ZXBUFLIST='INPUT';                      /* SET IN/OUTPUT */        00186700
*/*PG.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00186800
*  IF BUFNUM='BUFNUM' ! BUFNUM='()'          /*CHECK ENTRY*/            00186900
*    THEN                                                               00187000
*      DO;                                                              00187100
*        ZMS=' 8, THE "BUFNUM" KEY'!!        /**KOPTP* MSG*/            00187200
*            ' MUST CONTAIN ONE'!!                                      00187300
*            ' (OR MORE) ARGUMENT(S).';                                 00187400
*        ANS MSG('?IVTFREE ---> '!!ZMS);                                00187500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00187600
*        ZMACRET=8;                          /* MACRO ERROR */          00187700
*      END;                                                             00187800
*  IF NUMBER(BUFNUM)>1                       /* CHECK POSITIONALS */    00187900
*    THEN                                                               00188000
*      DO;                                                              00188100
*        ZMS=' 8, "BUFNUM'!!                 /**KPOSP* MSG*/            00188200
*            BUFNUM!!                                                   00188300
*            '" "BUFNUM"'!!                                             00188400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00188500
*        ANS MSG('?IVTFREE ---> '!!ZMS);                                00188600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00188700
*        ZMACRET=8;                          /* MACRO ERROR */          00188800
*      END;                                                             00188900
*/*PG.KXVAR13 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00189000
*  ZXBUFNUM='INPUT';                         /* SET IN/OUTPUT */        00189100
*  XBUFNUM='1';                              /* SET DEFAULT */          00189200
*  IF BUFNUM(1)^=''                          /* CHECK FOR NULL */       00189300
*    THEN                                                               00189400
*      XBUFNUM=BUFNUM(1);                    /* SET XVARIABLE */        00189500
*/*PG.P04 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00189600
*      END;                                  /* END COMPLETE CHECKING*/ 00189700
*/********************************************************************/ 00189800
*/***PE.MF00 PARTIAL MACRO SYNTAX CHECKING                           */ 00189900
*/********************************************************************/ 00190000
*/*PE.MF01 XMF^='L' & XMFSCK='NOCHECK' ------------------------------*/ 00190100
*  IF XMF^='L' & XMFSCK='NOCHECK'                                       00190200
*    THEN                                                               00190300
*      DO;                                   /* PARTIAL SYNTAX CHECK */ 00190400
*/*PE.KC00 INITIALIZE KEYWORD CONTROL VARIABLES----------------------*/ 00190500
*/*PE.P01 EXCESSIVE POSITIONALS--------------------------------------*/ 00190600
*  IF NUMBER(MACLIST)>0                      /* CHECK POSITIONALS */    00190700
*    THEN                                                               00190800
*      DO;                                                              00190900
*        ZMS=' 8, POSITIONAL ARGUMENT(S),'!! /**PPOSP* MSG*/            00191000
*            ' "'!!MACLIST!!'"'!!                                       00191100
*            ' CANNOT BE USED.'!!                                       00191200
*            ' NO POSITIONAL ARGUMENTS'!!                               00191300
*            ' ARE ALLOWED.';                                           00191400
*        ANS MSG('?IVTFREE ---> '!!ZMS);                                00191500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00191600
*        ZMACRET=8;                          /* MACRO ERROR */          00191700
*      END;                                                             00191800
*/*PE.KXVAR01 NAME, RQD INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00191900
*  IF NUMBER(BUFLIST)>1                      /* CHECK POSITIONALS */    00192000
*    THEN                                                               00192100
*      DO;                                                              00192200
*        ZMS=' 8, "BUFLIST'!!                /**KPOSP* MSG*/            00192300
*            BUFLIST!!                                                  00192400
*            '" "BUFLIST"'!!                                            00192500
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00192600
*        ANS MSG('?IVTFREE ---> '!!ZMS);                                00192700
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00192800
*        ZMACRET=8;                          /* MACRO ERROR */          00192900
*      END;                                                             00193000
*/*PE.KXVAR03 NAME, RQD INPUT, KEYS -XVARIABLE-----------------------*/ 00193100
*  IF BUFLIST(1)^=''                         /* CHECK FOR NULL */       00193200
*    THEN                                                               00193300
*      DO;                                                              00193400
*        XBUFLIST=BUFLIST(1);                /* SET XVARIABLE */        00193500
*        ZXBUFLIST='INPUT';                  /* SET IN/OUTPUT */        00193600
*      END;                                                             00193700
*/*PE.KXVAR01 NAME, OPT INPUT, KEYS -EXCESSIVE ARGUMENTS-------------*/ 00193800
*  IF BUFNUM='BUFNUM'                        /* CHECK ENTRY */          00193900
*    THEN                                                               00194000
*      DO;                                                              00194100
*        ZMS=' 8, THE "BUFNUM" KEY'!!        /**KOPTP* MSG*/            00194200
*            ' MUST CONTAIN ONE'!!                                      00194300
*            ' (OR MORE) ARGUMENT(S).';                                 00194400
*        ANS MSG('?IVTFREE ---> '!!ZMS);                                00194500
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00194600
*        ZMACRET=8;                          /* MACRO ERROR */          00194700
*      END;                                                             00194800
*  IF NUMBER(BUFNUM)>1                       /* CHECK POSITIONALS */    00194900
*    THEN                                                               00195000
*      DO;                                                              00195100
*        ZMS=' 8, "BUFNUM'!!                 /**KPOSP* MSG*/            00195200
*            BUFNUM!!                                                   00195300
*            '" "BUFNUM"'!!                                             00195400
*            ' CAN HAVE ONLY 1 ARGUMENT.';                              00195500
*        ANS MSG('?IVTFREE ---> '!!ZMS);                                00195600
*        ANS(COMMENT(ZMS)) COL(MACLMAR);                                00195700
*        ZMACRET=8;                          /* MACRO ERROR */          00195800
*      END;                                                             00195900
*/*PE.KXVAR03 NAME, OPT INPUT, KEYS -XVARIABLE-----------------------*/ 00196000
*  IF BUFNUM(1)^=''                          /* CHECK FOR NULL */       00196100
*    THEN                                                               00196200
*      DO;                                                              00196300
*        XBUFNUM=BUFNUM(1);                  /* SET XVARIABLE */        00196400
*        ZXBUFNUM='INPUT';                   /* SET IN/OUTPUT */        00196500
*      END;                                                             00196600
*/*PE.MF02 XMF^='L' & XMFSCK='NOCHECK' ------------------------------*/ 00196700
*      END;                                  /* END PARTIAL CHECK */    00196800
*/********************************************************************/ 00196900
*/***PE.MR01 GENERATE CODE IF ZMACRET=0                              */ 00197000
*/********************************************************************/ 00197100
*  IF ZMACRET = 0                                                       00197200
*    THEN                                                               00197300
*      DO;                                                              00197400
*/********************************************************************/ 00197500
*/***PE.PR01 PRINT CONTROLS, DEFAULT IS YES                          */ 00197600
*/********************************************************************/ 00197700
*  ANS(MACCONC!!'LIST PUSH NOECHO;') NORESCAN COL(MACLMAR);             00197800
*  IF ZPRINT='NO'                            /* PRINT IS OFF */         00197900
*    THEN                                                               00198000
*      ANS(MACCONC!!'LIST OFF NOECHO;') NORESCAN COL(MACLMAR);          00198100
*    ELSE                                                               00198200
*      ANS(MACCONC!!'LIST ON NOECHO;')  NORESCAN COL(MACLMAR);          00198300
*/********************************************************************/ 00198400
*/*PE.DO02 OUTER MACRO DO STATEMENT----------------------------------*/ 00198500
*  IF XMF^='L'                                                          00198600
*    THEN                                                               00198700
*      ANS('DO; /* IVTFREE-PLISTVER */')                                00198800
*          NORESCAN COL(MACLMAR);                                       00198900
*/*PL.LL01 ?IVTFREE MF=L PARAMETER LIST------------------------------*/ 00199000
*  IF XMF='L'                                                           00199100
*    THEN                                                               00199200
*      DO;                                                              00199300
*        ANS('DCL 1 '!!XMFCTRL!!' '!!XMFATTR!!', '!!                    00199400
*            '/* ?IVTFREE PARM LIST*/')                                 00199500
*            NORESCAN COL(MACLMAR);                                     00199600
*/*PL.LL02  XVERSION FIXED(8) INPUT----------------------------------*/ 00199700
*        ANS('2 '!!XMFCTRL!!                                            00199800
*            '_XVERSION FIXED(8), '!!                                   00199900
*            '/* INPUT XVERSION*/')                                     00200000
*            NORESCAN COL(MACLMAR+2);                                   00200100
*/*PL.LL13  XRSVFREE1 CHAR(03) RESERVED------------------------------*/ 00200200
*        ANS('2 '!!XMFCTRL                                              00200300
*         !! '_XRSVFREE1 CHAR(03), '                                    00200400
*         !! '/* RESERVED */'                                           00200500
*            ) NORESCAN COL(MACLMAR+2);                                 00200600
*/*PL.LL13  XBUFLIST PTR(31) INPUT NAME------------------------------*/ 00200700
*        ANS('2 '!!XMFCTRL                                              00200800
*         !! '_XBUFLIST PTR(31), '                                      00200900
*         !! '/* '!!ZXBUFLIST                                           00201000
*         !! ' XBUFLIST */'                                             00201100
*            ) NORESCAN COL(MACLMAR+2);                                 00201200
*/*PL.LL13  XBUFNUM FIXED(31) INPUT----------------------------------*/ 00201300
*        ANS('2 '!!XMFCTRL                                              00201400
*         !! '_XBUFNUM FIXED(31), '                                     00201500
*         !! '/* '!!ZXBUFNUM                                            00201600
*         !! ' XBUFNUM */'                                              00201700
*            ) NORESCAN COL(MACLMAR+2);                                 00201800
*/*PL.LL18 ----------------------------------------------------------*/ 00201900
*        ANS('2 * CHAR(0);')                                            00202000
*            NORESCAN COL(MACLMAR+2);                                   00202100
*/*PL.LL17 END OF MF=L PARAMETER LIST--------------------------------*/ 00202200
*      END;                                                             00202300
*/*PL.L01 MACRO WORK VARIABLES---------------------------------------*/ 00202400
*  DCL ZPRMLINE CHAR;          /* ZPRM ARRAY ENTRY ACCUMULATOR      */  00202500
*  DEACT ZPRMLINE;                                                      00202600
*  DCL ZNDX CHAR;              /* UNIQUE LIST STRUCTURE NAME        */  00202700
*  DEACT ZNDX;                                                          00202800
*  ZNDX=MACINDEX;              /* MACINDEX                          */  00202900
*  DCL XVERSION CHAR;                                                   00203000
*  DEACT XVERSION;                                                      00203100
*/*PL.L02 ?IVTFREE PARAMETER LIST------------------------------------*/ 00203200
*  IF XMF^='L'                                                          00203300
*    THEN                                                               00203400
*      DO;                                                              00203500
*/*PL.L04 ?IVTFREE PARAMETER LIST------------------------------------*/ 00203600
*        ZPRMLINE='DCL 1 #Z'!!ZNDX!!' DEF('!!                           00203700
*                 XMFCTRL!!'),'!!                                       00203800
*                 ' /* ?IVTFREE PARM LIST*/';                           00203900
*/*PL.L05  XVERSION FIXED(8) INPUT-----------------------------------*/ 00204000
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00204100
*                 '_XVERSION FIXED(8), '!!                              00204200
*                 '/* INPUT XVERSION*/';                                00204300
*/*PL.L08  XRSVFREE1 CHAR(03) RESERVED-------------------------------*/ 00204400
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00204500
*                 '_XRSVFREE1 CHAR(03), '!!                             00204600
*                 '/* RESERVED */';                                     00204700
*/*PL.L08  XBUFLIST PTR(31) INPUT NAME-------------------------------*/ 00204800
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00204900
*                 '_XBUFLIST PTR(31), '!!                               00205000
*                 '/* '!!ZXBUFLIST!!                                    00205100
*                 ' XBUFLIST */';                                       00205200
*/*PL.L08  XBUFNUM FIXED(31) INPUT-----------------------------------*/ 00205300
*        ZPRMLINE=ZPRMLINE!!' 2 #Z'!!ZNDX!!                             00205400
*                 '_XBUFNUM FIXED(31), '!!                              00205500
*                 '/* '!!ZXBUFNUM!!                                     00205600
*                 ' XBUFNUM */';                                        00205700
*/*PL.L11 CONSTANT TO ENSURE THAT LIST FORM IS LONG ENOUGH ----------*/ 00205800
*        ZPRMNUM=ZPRMNUM+1;                                             00205900
*        ZPRM(ZPRMNUM)=ZPRMLINE!!' 2 * CHAR(0);';                       00206000
*        IF XPLISTVER^=0                                                00206100
*          THEN                                                         00206200
*            DO;                                                        00206300
*              ZPRMNUM=ZPRMNUM+1;                                       00206400
*              ZPRM(ZPRMNUM)=                                           00206500
*               'DCL #Z'!!ZNDX!!'_LENCHECK FIXED(32) CONSTANT('!!       00206600
*               'LENGTH('!!XMFCTRL!!')-LENGTH(#Z'!!ZNDX!!'));'!!        00206700
*               '/* CONSTANT TO ENSURE THAT THE LIST FORM'!!            00206800
*               ' IS LONG ENOUGH */';                                   00206900
*            END;                                                       00207000
*/*PL.L12 PARAMETER LIST SIZE----------------------------------------*/ 00207100
*        ZPLLEN=12;                                                     00207200
*        IF ZPRMMAX<ZPLLEN                                              00207300
*           & XMF^='E'                                                  00207400
*           & XMF^='M'                                                  00207500
*          THEN                                                         00207600
*            ZPRMMAX=ZPLLEN;                                            00207700
*/*PL.L13 -----------------------------------------------------------*/ 00207800
*      END;                                                             00207900
*/*PI.L01 XMF^='L' & XMFSCK='COMPLETE' ------------------------------*/ 00208000
*  IF XMF^='L'                                                          00208100
*    THEN                                                               00208200
*      DO;                                                              00208300
*/*PI.L03 CLEAR PARAMETER LIST --------------------------------------*/ 00208400
*  IF XMFSCK='COMPLETE'                                                 00208500
*    THEN                                                               00208600
*            ANS('#Z'!!ZNDX!!'=''''B;'!!                                00208700
*                '/* CLEAR PARAMETER AREA */')                          00208800
*                NORESCAN COL(MACLMAR);                                 00208900
*/*PI.L23 XBUFLIST NAME----------------------------------------------*/ 00209000
*        IF ZXBUFLIST^=''                                               00209100
*          THEN                                                         00209200
*            ANS('#Z'!!ZNDX!!'_XBUFLIST='!!                             00209300
*                'ADDR('!!XBUFLIST!!');'!!                              00209400
*                '/* XBUFLIST NAME */')                                 00209500
*                NORESCAN COL(MACLMAR);                                 00209600
*/*PI.L17 XBUFNUM FIXED(31)------------------------------------------*/ 00209700
*        IF ZXBUFNUM='INPUT' !                                          00209800
*           ZXBUFNUM='INOUT'                                            00209900
*          THEN                                                         00210000
*            ANS('#Z'!!ZNDX!!'_XBUFNUM='!!                              00210100
*                XBUFNUM!!';'!!                                         00210200
*                '/* XBUFNUM FIXED(31) */')                             00210300
*                NORESCAN COL(MACLMAR);                                 00210400
*/*PI.L29 NOT MF=M MACRO FORM----------------------------------------*/ 00210500
*        IF XMF^='M'                                                    00210600
*          THEN                                                         00210700
*            DO;                                                        00210800
*/*PI.L31 INVOKE FUNCTION--------------------------------------------*/ 00210900
*              ANS('RFY GPR01P RSTD;') NORESCAN COL(MACLMAR);           00211000
*              ANS('GPR01P=ADDR(#Z'!!ZNDX!!');'!!                       00211100
*                  '/* PARAMETER LIST */')                              00211200
*                  NORESCAN COL(MACLMAR);                               00211300
*              IF SYSASCE^='P'                                          00211400
*                THEN                                                   00211500
*                  ANS('SAR(GPR01P,ALET(#Z'!!ZNDX!!'));'!!              00211600
*                      '/* PARAMETER LIST AR */')                       00211700
*                      NORESCAN COL(MACLMAR);                           00211800
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00211900
*/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  00212000
*              ANS('RFY GPR01P UNRSTD;') NORESCAN COL(MACLMAR);         00212100
*                  ANS('RFY GPR15F RSTD;') NORESCAN COL(MACLMAR);       00212200
*/*PO.L10 REMOVE REGISTER RESTRICTIONS-------------------------------*/ 00212300
*              ANS('RFY GPR15F UNRSTD;') NORESCAN COL(MACLMAR);         00212400
*/*PO.L11 END OF FUNCTION INVOCATION---------------------------------*/ 00212500
*            END;                                                       00212600
*/*PO.L12 END OF PARAMETER LIST PROCESSING---------------------------*/ 00212700
*      END;                                                             00212800
*/*PO.L13 IVTFREE USAGE INDICATOR------------------------------------*/ 00212900
*  ZIVTFREE='YES';                           /* SET IVTFREE USED */     00213000
*/*PO.L15 END OF EXECUTABLE IVTFREE-PLISTVER MACRO-------------------*/ 00213100
*  IF XMF^='L'                                                          00213200
*    THEN                                                               00213300
*      ANS('END; /* IVTFREE-PLISTVER */')                               00213400
*          NORESCAN COL(MACLMAR);                                       00213500
*/*PO.L16 RESTORE PRINT CONTROLS-------------------------------------*/ 00213600
*  ANS(MACCONC!!'LIST POP NOECHO;') NORESCAN COL(MACLMAR);              00213700
*/*PO.L17 END OF IVTFREE MACRO---------------------------------------*/ 00213800
*  ANS(MACCONC!!'SPACE;') NORESCAN COL(MACLMAR);                        00213900
*  ANS(' ') NORESCAN COL(MACLMAR);                                      00214000
*/*******************************************************************/  00214100
*/*  PO.L18 END OF CODE TO BE BYPASSED WHEN ZMACRET ^= 0            */  00214200
*/*******************************************************************/  00214300
*      END;                                                             00214400
*/*******************************************************************/  00214500
*/*  MVS ONLY     -CHECK IF AMG PARM LISTS ARE PRESENT              */  00214600
*/*               -ROUND MAX AMG PARM LIST TO DOUBLEWORD MULTIPLES  */  00214700
*/*******************************************************************/  00214800
*  IF ZPRMNUM>0                   /* NUMBER OF AMG PARM LIST ENTRIES*/  00214900
*    THEN                                                               00215000
*      DO;                                                              00215100
*        ZPRMMAX=((ZPRMMAX+7)/8)*8; /* ROUND PARM LIST SIZE UP TO       00215200
*                                      DOUBLEWORD MULTIPLES        */   00215300
*/*******************************************************************/  00215400
*/*  MVS -GENERATE PARM LIST DCL TO OVERLAY ?EPILOG'S ILIST AREA    */  00215500
*/*******************************************************************/  00215600
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00215700
*          THEN                                                         00215800
*            DO;                                                        00215900
*              IF INDEX(EHALIST,',AMG,')=0 /* HAS DECLARE BEEN DONE?*/  00216000
*                THEN                                                   00216100
*                  DO;                                                  00216200
*                    ANS('?EPILOG                                       00216300
*                        STRING(''DCL #ZPLIST DEF(ILIST);'');');        00216400
*                    EHALIST=EHALIST!!',AMG,';                          00216500
*                  END;                                                 00216600
*            END;                                                       00216700
*/*******************************************************************/  00216800
*/*  MVS  -EXTRACT PARM LISTS FROM AMG GLOBAL MACRO ARRAYS          */  00216900
*/*******************************************************************/  00217000
*        IF XMF ^= 'M' & XMF ^= 'E'                                     00217100
*          THEN                                                         00217200
*            DO;                                                        00217300
*              IF ZPRMMAX>EHAMAXLEN                                     00217400
*                THEN                                                   00217500
*                  EHAMAXLEN=ZPRMMAX; /* SET MAX PARM LIST SIZE     */  00217600
*            END;                                                       00217700
*        DO ZI=1 TO ZPRMNUM; /* EXTRACT AMG PARM LISTS               */ 00217800
*          ANS('?EPILOG STRING('''!!ZPRM(ZI)!!''');')                   00217900
*              COL(MACLMAR);                                            00218000
*        END;                                                           00218100
*      END;                                                             00218200
*/*-----------------------------------------------------------------*/  00218300
*/*  MVS  -ENSURE THAT GPRS NEEDED BY AMG MACROS WILL BE PROVIDED   */  00218400
*/*        BY ?EPILOG                                               */  00218500
*/*-----------------------------------------------------------------*/  00218600
*        IF INDEX(EHAREGS,'01P')=0                                      00218700
*          THEN                                                         00218800
*            EHAREGS=EHAREGS!!'01P'; /* GPR01P                      */  00218900
*        IF INDEX(EHAREGS,'15F')=0                                      00219000
*          THEN                                                         00219100
*            EHAREGS=EHAREGS!!'15F'; /* GPR15F                      */  00219200
*  RETURN CODE(ZMACRET);                                                00219300
*%END IVTFREE;                                                          00219400
