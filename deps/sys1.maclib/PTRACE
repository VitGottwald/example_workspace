*/**** Start of Specifications for PTRACE ****************************/ 00010000
*/*                                                                  */ 00020000
*/* $MAC(PTRACE) COMP(SC142) PROD(HBB77D0):                          */ 00030001
*/*                                                                  */ 00040000
*/* MACRO-NAME = PTRACE                                              */ 00050000
*/*                                                                  */ 00060000
*/* DESCRIPTIVE-NAME = CREATE PROCESSOR SYSTEM TRACE TABLE ENTRY     */ 00070000
*/*                                                                  */ 00080000
*/* COMPONENT = SC142 (SYSTEM TRACE)                                 */ 00090000
*/*                                                                  */ 00100000
*/* EXTERNAL CLASSIFICATION: GUPI                                    */ 00110000
*/* END OF EXTERNAL CLASSIFICATION:                                  */ 00120000
*/*                                                                  */ 00130000
*/*          TYPE=USRn             n: hexadecimal digit 0 - F.       */ 00140000
*/*          ,REGS=(reg1,reg2)     Default: REGS=(1): REGS=(1)       */ 00150000
*/*          ,REGS=(1)             reg1: decimal digit 2 - 12.       */ 00160000
*/*                                reg2: decimal digit 2 - 12.       */ 00170000
*/*          ,SAVEAREA= {STANDARD ! F4SA }                           */ 00180000
*/*          ,TRACEMODE={TRACE ! TRACG}   TRACE MODE OPTION          */ 00190000
*/*                                                                  */ 00200000
*/* COPYRIGHT =                                                      */ 00210000
*/* 5650-ZOS                                                         */ 00220000
*/* COPYRIGHT IBM CORP. 1982, 2021                                   */ 00230000
*/* LICENSED MATERIALS - PROPERTY OF IBM                             */ 00240000
*/*                                                                  */ 00250000
*/* STATUS = HBB77D0                                                 */ 00260000
*/*                                                                  */ 00270000
*/* FUNCTION = CREATE A USER OR SYSTEM TRACE TABLE ENTRY(S)          */ 00280000
*/*            IN THE TRACE BUFFER OF THE CURRENT PROCESSOR.         */ 00290000
*/*                                                                  */ 00300000
*/* MODULE-TYPE = MACRO (BILINGUAL)                                  */ 00310000
*/*                                                                  */ 00320000
*/* MACRO-PARAMETERS =                                               */ 00330000
*/*                                                                  */ 00340000
*/*     TYPE - KEYWORD, REQUIRED                                     */ 00350000
*/*            INDICATES THE TYPE OF ENTRY TO BE CREATED.            */ 00360000
*/*            THE FOLLOWING ARE VALID TYPES:                        */ 00370000
*/*                SSCH - START SUBCHANNEL TRACE ENTRY.              */ 00380000
*/*                MSCH - MODIFY SUBCHANNEL TRACE ENTRY.             */ 00390000
*/*                HSCH - HALT SUBCHANNEL TRACE ENTRY.               */ 00400000
*/*                CSCH - CLEAR SUBCHANNEL TRACE ENTRY.              */ 00410000
*/*                RSCH - RESUME SUBCHANNEL TRACE ENTRY.             */ 00420000
*/*                EXT  - EXTERNAL INTERRUPT TRACE ENTRY.            */ 00430000
*/*                SVC  - SVC INTERRUPT TRACE ENTRY.                 */ 00440000
*/*                SVCR - SVC RETURN TRACE ENTRY.                    */ 00450000
*/*                SVCE - SVC ERROR TRACE ENTRY.                     */ 00460000
*/*                PGM  - PROGRAM INTERRUPT TRACE ENTRY.             */ 00470000
*/*                SPER - SLIP PROGRAM EVENT RECORDING TRACE ENTRY   */ 00480000
*/*                IO   - I/O INTERRUPT TRACE ENTRY.                 */ 00490000
*/*                DSP  - TASK DISPATCH TRACE ENTRY.                 */ 00500000
*/*                SRB  - INITIAL SRB DISPATCH TRACE ENTRY.          */ 00510000
*/*                SSRB - SUSPENDED SRB REDISPATCH TRACE ENTRY.      */ 00520000
*/*                WAIT - WAIT TASK DISPATCH TRACE ENTRY.            */ 00530000
*/*                MCH  - MACHINE CHECK TRACE ENTRY.                 */ 00540000
*/*                RST  - RESTART TRACE ENTRY.                       */ 00550000
*/*                ACR  - ACR TRACE ENTRY.                           */ 00560000
*/*                SUSP - SUSPEND TRACE TRACE ENTRY.                 */ 00570000
*/*                ALTR - TRACE ALTERATION TRACE ENTRY.              */ 00580000
*/*                SSRV - PC OR BRANCH ENTERED SYSTEM SERVICE ENTRY. */ 00590000
*/*                USRN - USER EVENT "N" EXPLICIT TRACE ENTRY,       */ 00600000
*/*                       WHERE "N" IS VALID HEX DIGIT 0-F.          */ 00610000
*/*                RCVY - RECOVERY EVENT TRACE ENTRY.                */ 00620000
*/*                SPIN - SPIN event trace entry                 @L8A*/ 00630000
*/*                TIME - TIMER SERVICES TRACE ENTRY.                */ 00640000
*/*                SIGA - SIGNAL ADAPTER TRACE ENTRY.                */ 00650000
*/*                XSCH - CANCEL SUBCHANNEL TRACE ENTRY.             */ 00660000
*/*                AINT - ADAPTER INTERRUPT TRACE ENTRY.         @LAA*/ 00660100
*/*                PCIL - PCIE LOAD TRACE ENTRY.                 @LAA*/ 00660200
*/*                PCIS - PCIE STORE TRACE ENTRY.                @LAA*/ 00660300
*/*                PDMX - PCIE DEMULTIPLEX TRACE ENTRY           @LAA*/ 00660400
*/*                SYNS - Synchronous I/O Start Trace Entry      @04A*/ 00660500
*/*                SYNE - Synchronous I/O End Trace Entry        @04A*/ 00660600
*/*                                                                  */ 00660700
*/*     SSRVID- KEYWORD, OPTIONAL                                    */ 00660800
*/*            SPECIFIES THE SYSTEM SERVICE IDENTIFIER TO BE PLACED  */ 00660900
*/*            INTO THE TRACE ENTRY. THE SSRVID CAN BE SPECIFIED     */ 00661000
*/*            ONLY WITH TYPE=SSRV. VALID SSRVID IS BETWEEN 0-65535. */ 00661100
*/*                                                                  */ 00661200
*/*                                                                  */ 00661300
*/*     REGS - KEYWORD, OPTIONAL                                     */ 00661400
*/*            DEFINES THE DATA TO BE TRACED .  IF TWO REGS ARE      */ 00661500
*/*            GIVEN (A,B), THEN REGS A THRU B WILL BE TRACED. IF    */ 00661600
*/*            (1) IS SPECIFIED OR DEFAULTED, REGISTER 1 IS ASSUMED  */ 00661700
*/*            TO BE AN ADDRESS, WITH THE HIGH ORDER BIT 0, POINTING */ 00661800
*/*            TO A PARAMETER LIST WHICH CONTAINS THE DATA TO BE     */ 00661900
*/*            TRACED BY THE SERVICE ROUTINE. THE REGS PARAMETER CAN */ 00662000
*/*            BE SPECIFIED ONLY WITH TYPE=USRN, SSRV, RCVY, SPIN,   */ 00663000
*/*            OR TIME.                                          @L8C*/ 00664000
*/*            ONLY REGS=(1) CAN BE SPECIFIED AND IS THE DEFAULT FOR */ 00665000
*/*            TYPE=SSRV, TYPE=RCVY, TYPE=SPIN, or TYPE=TIME     @L8C*/ 00666000
*/*                                                                  */ 00667000
*/*     SAVEAREA - KEYWORD, REQUIRED                                 */ 00668000
*/*            SPECIFIES HOW, IF NEEDED, THE ISSUERS REGISTERS ARE   */ 00669000
*/*            TO BE SAVED.                                          */ 00670000
*/*                 STANDARD - REGISTER 13 CONTAINS THE ADDRESS OF   */ 00680000
*/*                            AN 18-WORD SAVE AREA.                 */ 00690000
*/*                 F4SA     - REGISTER 13 CONTAINS THE ADDRESS OF   */ 00700000
*/*                            SAVE AREA IN F4SA FORMAT              */ 00710000
*/*                 PSA      - SPECIFIES THAT THE PSA REGISTER SAVE  */ 00720000
*/*                            AREA PSATRSAV IS TO BE USED TO SAVE   */ 00730000
*/*                            THE ISSUERS REGISTERS. USE OF THIS    */ 00740000
*/*                            OPTION REQUIRES DISABLEMENT AND MUST  */ 00750000
*/*                            NOT BE USED DURING PROCESSING OF      */ 00760000
*/*                            INTERRUPTS WHICH CAN OCCUR WHILE      */ 00770000
*/*                            DISABLED FOR I/O AND EXTERNAL         */ 00780000
*/*                            INTERRUPTS.                           */ 00790000
*/*                 NONE     - SPECIFIES THAT THE ISSUERS REGISTER   */ 00800000
*/*                            CONTENTS NEED NOT BE PRESERVED.       */ 00810000
*/*                            Note: the linkage generated when      */ 00820000
*/*                            SAVEAREA(NONE) is specifies, sets     */ 00830000
*/*                            register 2 equal to register 15       */ 00840000
*/*                            prior to branching to the entry point */ 00850000
*/*                            that creates the trace record.        */ 00860000
*/*                            Trace types specifying SAVEAREA(NONE) */ 00870000
*/*                            expect register 2 to contain the      */ 00880000
*/*                            PTRACE invoker's return address.  @ABA*/ 00881000
*/*                                                                  */ 00882000
*/*     TRACEMODE  - KEYWORD, OPTIONAL                               */ 00883000
*/*            SPECIFIED FOR TRACE MODE                              */ 00884000
*/*                 TRACE    - DEFAULT NORMAL TRACING(31/24 bit)     */ 00885000
*/*                 TRACG    - 64-BIT TRACING REQUESTED              */ 00886000
*/*                                                                  */ 00887000
*/* MACROS =                                                         */ 00888000
*/*    EPILOG   - REQUIRED TO ISSUE THE PLS VERSION OF PTRACE.       */ 00889000
*/*    IHAPSA, IHATRVT - REQUIRED TO ISSUE PTRACE.                   */ 00890000
*/*    IHAASCB  - REQUIRED FOR DSP, SRB, SVC, SVCR TYPES ONLY        */ 00900000
*/*    IHALCCA  - REQUIRED FOR SSRB TYPE ONLY                        */ 00910000
*/*    IHARB    - REQUIRED FOR SVCR TYPE ONLY                        */ 00920000
*/*    IHASRB   - REQUIRED FOR SRB TYPE ONLY                         */ 00930000
*/*    IHATOT   - REQUIRED FOR DSP, SRB, SSRB, SVC, SVCR TYPES ONLY  */ 00940000
*/*    IHBERMAC - ISSUED.                                            */ 00950000
*/*                                                                  */ 00960000
*/* CHANGE-ACTIVITY =                                                */ 00970000
*/*   G860PXY - SYSTEM TRACE EXTENSIONS                              */ 00980000
*/*   ZMC3565 - USE SLL TO SHIFT SRBFLGS.                            */ 00990000
*/*             ADD REFS FOR TOT FIELDS IN INLINE EXPANSIONS.        */ 01000000
*/*                                                                  */ 01010000
*/* FLAG REASON   RELEASE DATE   ORIGIN  DESCRIPTION                 */ 01020000
*/* $L1= TREVENT  JBB2125 820823 PDXM:   TRACE PER EVENTS            */ 01030000
*/* $L2= AR       HBB3310 860210 PDR8:   ACCESS REGISTERS            */ 01040000
*/* $L3= RTMRAS   HBB3310 860414 PDR8:   RCVY ENTRY SUPPORT          */ 01050000
*/* $P1= PC41456  HBB3310 871023 PD1X:   REORDER SRB, DSP, SVC,      */ 01060000
*/*      SVCR INLINE EXPANSIONS                                      */ 01070000
*/* $L4= CLOCK    HBB4410 880428 PD88CT: TIME ENTRY SUPPORT          */ 01080000
*/* $D1= DCRR0308 HBB4410 900226 PDH6:   INLINE KEYWORD              */ 01090000
*/* $D2= DN70021  HBB5520 940505 PDXM:   SSRB INLINE                 */ 01100000
*/* $01= OW38365  JBB6607 981101 PD88CT: SIGA SUPPORT                */ 01110000
*/* $P2= PXD0494  HBB7073 991001 PDXB:   TYPE=SVC FOR ESAME          */ 01120000
*/* $P3= PXD1587  HBB7073 000406 PDH6:   PERFORMANCE IN SVCR         */ 01130000
*/*    = IMEX     HBB7708 021115 PDON:   Immediate Execution Support */ 01140000
*/* $02= OA02284  HBB7703 021231 PDON:   Immediate Execution Support */ 01150000
*/* $03= OA02934 HBB7705 030413 PDE1: Squash 64-bit PSWs consistently*/ 01160000
*/* $L5= LXREU    HBB7709 030801 PDXB:   ASN-and-LX-Reuse Facility   */ 01170000
*/* $L6= SVA      HBB7720 030801 IIRT:   TRACG SUPPORT               */ 01180000
*/* $P4= PDE0273  HBB7720 040409 IIRT:   SYSAM64 spec in PLX         */ 01190000
*/* $P5= PDE0320  HBB7720 040426 PDE1:   HLASM continuation error    */ 01200000
*/*    = ME01640 HBB7720,040829,PDE1: 5637-A01 ==> 5694-A01          */ 01210000
*/* $P6= ME03162  HBB7720 040322 PDH6:   TRACG and base bugs         */ 01220000
*/* $L7= AFFDISP  HBB7730 050501 PDGD:   Affinity Dispatcher         */ 01230000
*/* $P7= ME04883  HBB7730 051025 PDH6:   Fix SSRV ID bug             */ 01240000
*/* $L8= SPINT    HBB7760 081115 PDXB:   Spin trace entry            */ 01250000
*/* $L9= RMODE64  HBB7780 091101 PDXB:   RMODE 64                    */ 01260000
*/* $LA= FPGA     HBB7790 120803 PDMD:   Support PCIE traces         */ 01270000
*/* $LB= ME26802  HBB77A0 131015 PDXB:   zPLX                        */ 01280000
*/* $LC= W155942  HBB77B0 170124 PDXB:   zPLX                        */ 01281000
*/* $04= OA50653  HBB7790 170915 PDMD:   Synchronous I/O             */ 01282000
*/* $LD= W297966  HBB77C0 190131 PDXB:   zPLX                        */ 01282100
*/* $LE= W377825  HBB77D0 200615 PDXB:   Avoid extra R13 restrict    */ 01282201
*/*                                                                  */ 01283000
*/* End of Specifications for PTRACE *********************************/ 01284000
*/* A-000000-999999                                         @G860PXY */ 01285000
*/*                                                                     01286000
         MACRO                                                          01287000
&LABEL   PTRACE &TYPE=,&SSRVID=,&REGS=(1),&SAVEAREA=,&TRACEMODE=TRACE   01288000
.*                                                                 @L6C 01289000
*        MACDATE = 16.279                                          @04C 01290000
.*                                                                      01300000
.*                                                                      01310000
.********************************************************************** 01320000
.*       DECLARE VARIABLES                                            * 01330000
.********************************************************************** 01340000
.*                                                                      01350000
         LCLC  &OP1,&OP2                 IHBERMAC OPERANDS              01351000
         LCLC  &N                        USER ENTRY NUMBER              01352000
         LCLC  &RX,&RY                   USER ENTRY REG RANGE           01353000
         LCLA  &I,&TABENT                TABLE INDEX & MAX ENTRIES      01354000
         LCLC  &TABTYPE(33)              ENTRY TYPE TABLE          @04C 01355000
         LCLC  &TABVT(33)                ENTRY POINT TRVT NAMES    @04C 01356000
         LCLC  &TABSA(33)                ENTRY TYPE SAVEAREA       @04C 01357000
         GBLA  &SYSALVL                  ARCHITECTURE LEVEL        @P2A 01358000
         GBLC  &SYSAM64                  SYSSTATE AMODE64          @L6A 01359000
         SYSSTATE TEST                                             @P2A 01360000
.*                                                                      01370000
.********************************************************************** 01380000
.*       INITIALIZE GENERATED LABELS FOR INLINE REQUESTS              * 01390000
.********************************************************************** 01400000
.*                                                                      01410000
&LABELA  SETC  'IHB&SYSNDX.A'            INLINE LABEL                   01420000
&LABELB  SETC  'IHB&SYSNDX.B'            OUT OF LINE LABEL              01430000
&LABELC  SETC  'IHB&SYSNDX.C'            IN OF LINE LABEL          @L2A 01440000
&LABELD  SETC  'IHB&SYSNDX.D'            OUT OF LINE LABEL         @L2A 01450000
.*                                                                      01460000
.********************************************************************** 01470000
.*       INITIAL &TABTYPE TABLE AND MAX ENTRIES                       * 01480000
.********************************************************************** 01490000
.*                                                                      01500000
&TABENT  SETA  33                        MAX ENTRIES IN TABLE      @04C 01510000
.*                                                                      01520000
&TABTYPE(1)   SETC  'SSCH'                                              01530000
&TABTYPE(2)   SETC  'MSCH'                                              01540000
&TABTYPE(3)   SETC  'HSCH'                                              01550000
&TABTYPE(4)   SETC  'CSCH'                                              01560000
&TABTYPE(5)   SETC  'RSCH'                                              01570000
&TABTYPE(6)   SETC  'EXT'                                               01580000
&TABTYPE(7)   SETC  'SVC'                                               01590000
&TABTYPE(8)   SETC  'SVCR'                                              01600000
&TABTYPE(9)   SETC  'SVCE'                                              01610000
&TABTYPE(10)  SETC  'PGM'                                               01620000
&TABTYPE(11)  SETC  'IO'                                                01630000
&TABTYPE(12)  SETC  'DSP'                                               01640000
&TABTYPE(13)  SETC  'SRB'                                               01650000
&TABTYPE(14)  SETC  'SSRB'                                              01660000
&TABTYPE(15)  SETC  'WAIT'                                              01670000
&TABTYPE(16)  SETC  'MCH'                                               01680000
&TABTYPE(17)  SETC  'RST'                                               01690000
&TABTYPE(18)  SETC  'ACR'                                               01700000
&TABTYPE(19)  SETC  'SUSP'                                              01710000
&TABTYPE(20)  SETC  'ALTR'                                              01720000
&TABTYPE(21)  SETC  'SPER'                                         @L1A 01730000
&TABTYPE(22)  SETC  'SSRV'               INITIALIZE TYPE TABLE     @L2A 01740000
.*                                       ENTRY FOR TRACE ENTRY          01750000
.*                                       TYPE SSRV                      01760000
.*                                                                      01770000
&TABTYPE(23)  SETC  'RCVY'               INITIALIZE TYPE TABLE     @L3A 01780000
.*                                       ENTRY FOR TRACE ENTRY          01790000
.*                                       TYPE RCVY                      01800000
&TABTYPE(24)  SETC  'TIME'               INITIALIZE TYPE TABLE     @L4A 01810000
.*                                       ENTRY FOR TRACE ENTRY          01820000
.*                                       TYPE TIME                      01830000
.*                                                                      01840000
&TABTYPE(25)  SETC  'SIGA'               ENTRY FOR SIGNAL ADAPTER  @01A 01850000
&TABTYPE(26)  SETC  'XSCH'               ENTRY FOR SIGNAL XSCH     @02A 01860000
.*                                                                      01870000
&TABTYPE(27)  SETC  'SPIN'               INITIALIZE TYPE TABLE     @L8A 01880000
.*                                       ENTRY FOR TRACE ENTRY          01890000
.*                                       TYPE SPIN                      01900000
&TABTYPE(28)  SETC  'PCIL'               INITIALIZE TYPE TABLE     @LAA 01910000
.*                                       ENTRY FOR TRACE ENTRY          01920000
.*                                       TYPE PCIL                      01930000
&TABTYPE(29)  SETC  'PCIS'               INITIALIZE TYPE TABLE     @LAA 01940000
.*                                       ENTRY FOR TRACE ENTRY          01950000
.*                                       TYPE PCIS                      01960000
&TABTYPE(30)  SETC  'PDMX'               INITIALIZE TYPE TABLE     @LAA 01970000
.*                                       ENTRY FOR TRACE ENTRY          01980000
.*                                       TYPE PDMX                      01990000
&TABTYPE(31)  SETC  'AINT'               INITIALIZE TYPE TABLE     @LAA 02000000
.*                                       ENTRY FOR TRACE ENTRY          02010000
.*                                       TYPE AINT                      02020000
&TABTYPE(32)  SETC  'SYNS'               INITIALIZE TYPE TABLE     @04A 02030000
.*                                       ENTRY FOR TRACE ENTRY          02040000
.*                                       TYPE SYNS                      02050000
&TABTYPE(33)  SETC  'SYNE'               INITIALIZE TYPE TABLE     @04A 02060000
.*                                       ENTRY FOR TRACE ENTRY          02070000
.*                                       TYPE SYNE                      02080000
&TABVT(1)     SETC  'TRVTETSS'                                          02090000
&TABVT(2)     SETC  'TRVTETMS'                                          02100000
&TABVT(3)     SETC  'TRVTETHS'                                          02110000
&TABVT(4)     SETC  'TRVTETCS'                                          02120000
&TABVT(5)     SETC  'TRVTETRS'                                          02130000
&TABVT(6)     SETC  'TRVTETEX'                                          02140000
&TABVT(7)     SETC  'TRVTETSV'                                          02150000
&TABVT(8)     SETC  'TRVTETSR'                                          02160000
&TABVT(9)     SETC  'TRVTETSE'                                          02170000
&TABVT(10)    SETC  'TRVTETPI'                                          02180000
&TABVT(11)    SETC  'TRVTETIO'                                          02190000
&TABVT(12)    SETC  'TRVTETDP'                                          02200000
&TABVT(13)    SETC  'TRVTETIS'                                          02210000
&TABVT(14)    SETC  'TRVTETSB'                                          02220000
&TABVT(15)    SETC  'TRVTETWT'                                          02230000
&TABVT(16)    SETC  'TRVTETMH'                                          02240000
&TABVT(17)    SETC  'TRVTETRE'                                          02250000
&TABVT(18)    SETC  'TRVTETAR'                                          02260000
&TABVT(19)    SETC  'TRVTETSU'                                          02270000
&TABVT(20)    SETC  'TRVTETTA'                                          02280000
&TABVT(21)    SETC  'TRVTETSL'                                     @L1A 02290000
&TABVT(22)    SETC  'TRVTETSY'           ENTRY POINT IN SYSTEM     @L2A 02300000
.*                                       TRACE TABLE ENTRY CREATION     02310000
.*                                       ROUTINES (IEAVETRC) FOR        02320000
.*                                       TYPE SSRV                      02330000
.*                                                                      02340000
&TABVT(23)    SETC  'TRVTETRV'           ENTRY POINT IN SYSTEM     @L3A 02350000
.*                                       TRACE TABLE ENTRY CREATION     02360000
.*                                       ROUTINES (IEAVETRC) FOR        02370000
.*                                       TYPE RCVY                      02380000
.*                                                                      02390000
&TABVT(24)    SETC  'TRVTETTM'           ENTRY POINT IN SYSTEM     @L4A 02400000
.*                                       TRACE TABLE ENTRY CREATION     02410000
.*                                       ROUTINES (IEAVETRC) FOR        02420000
.*                                       TYPE TIME                      02430000
.*                                                                      02440000
&TABVT(25)    SETC  'TRVTETSA'           IEAVETRC ENTRY POINT FOR       02450000
.*                                       SIGNAL ADAPTER TYPE       @01A 02460000
.*                                                                      02470000
&TABVT(26)    SETC  'TRVTETXS'           IEAVETRC ENTRY POINT FOR       02480000
.*                                       XSCH                      @02A 02490000
.*                                                                      02500000
&TABVT(27)    SETC  'TRVTETSP'           ENTRY POINT IN SYSTEM     @L8A 02510000
.*                                       TRACE TABLE ENTRY CREATION     02520000
.*                                       ROUTINES (IEAVETRC) FOR        02530000
.*                                       TYPE SPIN                      02540000
&TABVT(28)    SETC  'TRVTETPL'           ENTRY POINT IN SYSTEM     @LAA 02550000
.*                                       TRACE TABLE ENTRY CREATION     02560000
.*                                       ROUTINES (IEAVETRC) FOR        02570000
.*                                       TYPE PCIL                      02580000
&TABVT(29)    SETC  'TRVTETPS'           ENTRY POINT IN SYSTEM     @LAA 02590000
.*                                       TRACE TABLE ENTRY CREATION     02600000
.*                                       ROUTINES (IEAVETRC) FOR        02610000
.*                                       TYPE PCIS                      02620000
&TABVT(30)    SETC  'TRVTETPD'           ENTRY POINT IN SYSTEM     @LAA 02630000
.*                                       TRACE TABLE ENTRY CREATION     02640000
.*                                       ROUTINES (IEAVETRC) FOR        02650000
.*                                       TYPE PDMX                      02660000
&TABVT(31)    SETC  'TRVTETAI'           ENTRY POINT IN SYSTEM     @LAA 02670000
.*                                       TRACE TABLE ENTRY CREATION     02680000
.*                                       ROUTINES (IEAVETRC) FOR        02690000
.*                                       TYPE AINT                      02700000
.*                                                                      02710000
&TABVT(32)    SETC  'TRVTESIS'           ENTRY POINT IN SYSTEM     @04A 02720000
.*                                       TRACE TABLE ENTRY CREATION     02721000
.*                                       ROUTINES (IEAVETRC) FOR        02722000
.*                                       TYPE SYNS                      02723000
.*                                                                      02724000
&TABVT(33)    SETC  'TRVTESIE'           ENTRY POINT IN SYSTEM     @04A 02725000
.*                                       TRACE TABLE ENTRY CREATION     02726000
.*                                       ROUTINES (IEAVETRC) FOR        02727000
.*                                       TYPE SYNE                      02728000
.*                                                                      02728100
&TABSA(1)     SETC  'PSA'                                               02728200
&TABSA(2)     SETC  'PSA'                                               02728300
&TABSA(3)     SETC  'PSA'                                               02728400
&TABSA(4)     SETC  'PSA'                                               02728500
&TABSA(5)     SETC  'PSA'                                               02728600
&TABSA(6)     SETC  'PSA'                                               02728700
&TABSA(7)     SETC  'PSA'                                               02728800
&TABSA(8)     SETC  'PSA'                                               02728900
&TABSA(9)     SETC  'NONE'                                              02729000
&TABSA(10)    SETC  'STANDARD'                                          02729100
&TABSA(11)    SETC  'PSA'                                               02729200
&TABSA(12)    SETC  'PSA'                                               02729300
&TABSA(13)    SETC  'PSA'                                               02729400
&TABSA(14)    SETC  'PSA'                                               02729500
&TABSA(15)    SETC  'PSA'                                               02729600
&TABSA(16)    SETC  'STANDARD'                                          02729700
&TABSA(17)    SETC  'NONE'                                              02729800
&TABSA(18)    SETC  'PSA'                                               02729900
&TABSA(19)    SETC  'PSA'                                               02730000
&TABSA(20)    SETC  'PSA'                                               02740000
&TABSA(21)    SETC  'STANDARD'                                     @L1A 02750000
&TABSA(22)    SETC  'STANDARD OR PSA'    FOR TRACE ENTRY TYPE      @L2A 02760000
.*                                       SSRV, SAVEAREA MUST BE         02770000
.*                                       STANDARD OR PSA                02780000
.*                                                                      02790000
&TABSA(23)    SETC  'STANDARD OR PSA'    FOR TRACE ENTRY TYPE      @L3A 02800000
.*                                       RCVY, SAVEAREA MUST BE         02810000
.*                                       STANDARD OR PSA                02820000
.*                                                                      02830000
&TABSA(24)    SETC  'STANDARD'           FOR TRACE ENTRY TYPE      @L4A 02840000
.*                                       TIME, SAVEAREA MUST BE         02850000
.*                                       STANDARD                       02860000
.*                                                                      02870000
&TABSA(25)    SETC  'STANDARD OR PSA'    FOR SIGNAL ADAPTER ENTRY TYPE  02880000
.*                                       SAVEAREA MUST BE STANDARD OR   02890000
.*                                       PSA                       @01A 02900000
&TABSA(26)    SETC  'PSA'                FOR XSCH ENTRY TYPE            02910000
.*                                       SAVEAREA MUST BE PSA      @02A 02920000
&TABSA(27)    SETC  'STANDARD OR PSA'    FOR TRACE ENTRY TYPE      @L8A 02930000
.*                                       SPIN, SAVEAREA MUST BE         02940000
.*                                       STANDARD OR PSA                02950000
&TABSA(28)    SETC  'NONE'               FOR PCIL ENTRY TYPE            02960000
.*                                       SAVEAREA MUST BE NONE     @LAA 02970000
&TABSA(29)    SETC  'NONE'               FOR PCIS ENTRY TYPE            02980000
.*                                       SAVEAREA MUST BE NONE     @LAA 02990000
&TABSA(30)    SETC  'PSA'                FOR PDMX ENTRY TYPE            03000000
.*                                       SAVEAREA MUST BE PSA      @LAA 03010000
&TABSA(31)    SETC  'PSA'                FOR AINT ENTRY TYPE            03020000
.*                                       SAVEAREA MUST BE PSA      @LAA 03030000
.*                                                                      03040000
&TABSA(32)    SETC  'F4SA'               FOR SYNS ENTRY TYPE            03050000
.*                                       SAVEAREA MUST BE F4SA     @04A 03060000
.*                                                                      03070000
&TABSA(33)    SETC  'F4SA'               FOR SYNE ENTRY TYPE            03080000
.*                                       SAVEAREA MUST BE F4SA     @04A 03090000
.*                                                                      03100000
.********************************************************************** 03110000
.*       GENERATE LABEL IF NEEDED                                     * 03120000
.********************************************************************** 03121000
.*                                                                      03122000
.LABEL   ANOP                                                           03123000
         AIF   ('&LABEL' EQ '').POSPARM     BRANCH IF NO LABEL          03124000
&LABEL   DS    0H                                                       03125000
.*                                                                      03126000
.*                                                                      03127000
.********************************************************************** 03128000
.*       NO POSITIONAL PARAMETERS MAY BE SPECIFIED                    * 03129000
.********************************************************************** 03130000
.*                                                                      03140000
.POSPARM ANOP                                                           03140100
         AIF   (N'&SYSLIST NE 0).ERR1    ERROR IF ANY POSITION PARMS    03140200
.*                                                                      03140300
.*                                                                      03140400
.********************************************************************** 03140500
.*       &TYPE MUST BE SPECIFIED AS ONE OF THE TYPES GIVEN IN         * 03140600
.*       &TABTYPE OR AS 'USRN'                                        * 03140700
.********************************************************************** 03140800
.*                                                                      03140900
.TYPE    ANOP                                                           03141000
&OP1     SETC  'TYPE'                    PARAMETER BEING CHECKED        03142000
&OP2     SETC  '&TYPE'                   VALUE OF THAT PARAMETER        03143000
         AIF   ('&TYPE' EQ '').ERR2      ERROR IF NO TYPE GIVEN         03144000
.*                                                                      03145000
         AIF   ('&TYPE'(1,3) EQ 'USR').USRN  BRANCH IF USER ENTRY       03146000
.*                                                                      03147000
&I       SETA  1                         INITIALIZE TABLE INDEX         03148000
.*                                                                      03149000
.TYPCKLP ANOP                                                           03150000
         AIF   ('&TYPE' EQ '&TABTYPE(&I)').TYPESEL  BR IF TYPE FOUND    03160000
         AIF   (&I EQ &TABENT).ERR2      ERROR IF END OF TABLE          03170000
&I       SETA  &I+1                      INCREMENT TO NEXT ENTRY        03180000
         AGO   .TYPCKLP                  GO TRY NEXT TABLE ENTRY        03190000
.*                                                                      03200000
.TYPESEL ANOP                                                           03210000
.*                                                                      03220000
.********************************************************************** 03230000
.*       VALIDATE &SSRVID OPERAND                                     * 03240000
.********************************************************************** 03250000
.*                                                                      03260000
&OP1     SETC  'SSRVID OPERAND'          SET SSRVID ERROR MESSAGE  @L2A 03270000
&OP2     SETC  '''''&TYPE'''' TYPE REQUEST'  SET SSRVID ERROR      @L2A 03280000
.*                                       MESSAGE                        03290000
         AIF   ('&TYPE' NE 'SSRV' AND                                  X03300000
                '&SSRVID' NE '').ERR3    IF TYPE IS NOT SSRV AND   @L3A 03310000
.*                                       SSRVID IS SPECIFIED THEN       03320000
.*                                       PUT OUT SSRVID ERROR MESSAGE   03330000
&OP1     SETC  'SSRVID'                  SET SSRV SSRVID OPERAND   @L3A 03340000
.*                                       ERROR MESSAGE                  03350000
&OP2     SETC  '&SSRVID'                 SET SSRV SSRVID OPERAND   @L3A 03360000
.*                                       ERROR MESSAGE                  03370000
         AIF   ('&TYPE' EQ 'SSRV' AND                                  X03380000
                N'&SSRVID NE 1).ERR2     IF TYPE IS SSRV AND ZERO  @L3A 03390000
.*                                       OR MORE THAN ONE SSRVID IS     03400000
.*                                       SPECIFIED THEN                 03410000
.*                                       PUT OUT SSRVID ERROR MESSAGE   03420000
.*                                                                      03430000
.********************************************************************** 03440000
.*       VALIDATE &REGS OPERAND                                       * 03450000
.********************************************************************** 03460000
.*                                                                      03470000
&OP1     SETC  'REGS OPERAND'            INVALID OPERAND                03480000
&OP2     SETC  '''''&TYPE'''' TYPE REQUEST'  TYPE OF REQUEST            03490000
         AIF   ('&TYPE' NE 'SSRV' AND                                  X03500000
                '&TYPE' NE 'RCVY' AND                                  X03510000
                '&TYPE' NE 'SPIN' AND                                  X03520000
                '&TYPE' NE 'TIME' AND                                  X03530000
                '&REGS' NE '(1)').ERR3   IF TYPE IS NOT SSRV AND   @L8C 03540000
.*                                       NOT RCVY AND NOT SPIN AND      03550000
.*                                       NOT TIME AND                   03560000
.*                                       REGS IS SPECIFIED, PUT OUT     03570000
.*                                       REGS ERROR MESSAGE             03580000
&OP1     SETC  '''''REGS=&REGS'''''      SET REGS ERROR MESSAGE    @L3A 03590000
&OP2     SETC  'TYPE=&TYPE, REGS MUST BE ''''(1)'''' OR CAN BE OMITTED' 03600000
.*                                       SET REGS ERROR MESSAGE    @L3A 03610000
         AIF   (('&TYPE' EQ 'SSRV' OR                                  X03620000
                 '&TYPE' EQ 'RCVY' OR                                  X03630000
                 '&TYPE' EQ 'SPIN' OR                                  X03640000
                 '&TYPE' EQ 'TIME') AND                                X03650000
                '&REGS' NE '(1)').ERR3   IF TYPE IS SSRV, RCVY,    @L8C 03660000
.*                                 SPIN, TIME AND REGS IS NOT (1),      03670000
.*                                       PUT OUT REGS ERROR MESSAGE     03680000
.*                                                                      03690000
.********************************************************************** 03700000
.*       VALIDATE &SAVEAREA OPERAND                                   * 03710000
.********************************************************************** 03720000
.*                                                                      03730000
.SAVEAR  ANOP                                                           03740000
&OP1     SETC  '''''SAVEAREA=&SAVEAREA'''''  PARAMETER BEING CHECKED    03750000
&OP2     SETC  'TYPE=&TYPE, SAVEAREA MUST BE ''''&TABSA(&I)'''''        03760000
.*                                       SECOND PART OF ERROR MSG       03770000
         AIF   ('&TYPE' NE 'SSRV' AND                                  X03780000
                '&TYPE' NE 'RCVY' AND                                  X03790000
                '&TYPE' NE 'SPIN' AND                                  X03800000
                '&TYPE' NE 'SIGA' AND                                  X03810000
                '&SAVEAREA' NE '&TABSA(&I)').ERR3  IF TYPE IS NOT  @L8C 03820000
.*                                       SSRV / RCVY / SPIN             03830000
.*                                       AND SAVEAREA IS NOT THE ONE    03840000
.*                                       SPECIFIED IN SAVEAREA TABLE,   03850000
.*                                       THEN PUT OUT SAVEAREA ERROR    03860000
.*                                       MESSAGE                        03870000
         AIF   (('&TYPE' EQ 'SSRV' OR                                  X03880000
                 '&TYPE' EQ 'RCVY' OR                                  X03890000
                 '&TYPE' EQ 'SPIN' OR                                  X03900000
                 '&TYPE' EQ 'SIGA') AND                                X03910000
                 '&SAVEAREA' NE 'STANDARD' AND                         X03920000
                 '&SAVEAREA' NE 'PSA').ERR3      IF TYPE IS SSRV / @L8C 03930000
.*                                       RCVY / SPIN AND SAVEAREA IS    03940000
.*                                       STANDARD OR PSA THEN PUT       03950000
.*                                       OUT SAVEAREA ERROR MESSAGE     03960000
.*                                                                      03970000
.********************************************************************** 03980000
.*       GENERATE CODE FOR TYPE REQUEST                               * 03990000
.********************************************************************** 04000000
.*                                                                      04010000
.GEN     ANOP                                                           04020000
.*                                                                      04030000
.********************************************************************** 04040000
.*       GENERATE CODE FOR DSP TYPE REQUEST                           * 04050000
.********************************************************************** 04060000
.*                                                                      04070000
.GENDSPO ANOP                                                           04080000
         AIF   ('&TYPE' NE 'DSP').GENSRB   BR IF TYPE NOT DSP           04090000
*********************************************************************** 04100000
*                                                                     * 04110000
*        PTRACE TYPE=DSP                                              * 04120000
*                                                                     * 04130000
*        INPUT  REGISTERS:                                            * 04140000
*        REGS   0-1 ISSUER DATA TO BE TRACED                          * 04150000
*        REG      5 CURRENT TCB ADDRESS                               * 04160000
*        REG      8 CURRENT ASCB ADDRESS                              * 04170000
*        REG     13 PASID/SASID                                       * 04180000
*                                                                     * 04190000
*        OUTPUT REGISTERS:                                            * 04200000
*        REGS   0-4 UNPREDICTABLE                                     * 04210000
*        REGS   5-9 UNCHANGED                                         * 04220000
*        REGS 10-15 UNPREDICTABLE                                     * 04230000
*                                                                     * 04240000
*********************************************************************** 04250000
.*                                                                      04260000
         TM    PSATRACE-PSA(0),PSATROFF  .TEST FOR TRACE STATE          04270000
         JNZ   &LABELA                   .BRANCH IF TRACE SUSPENDED     04280000
         STM   8,9,PSATRSAV-PSA(0)       Save regs                 @L9A 04290000
         LH    10,ASCBASID-ASCB(0,8)     .GET HOME ASID            @L9C 04300000
         L     8,PSATOT-PSA(0,0)        .ADDRESS OF TRACE OPERAND TABLE-04310000
                                                                   @L9C 04320000
         LR    9,5                       .LOAD CURRENT TCB ADDRESS @L9C 04330000
         LR    11,13                     PASID/SASIS               @L9A 04340000
         LM    12,15,PSAPSWSV16-PSA(0)   .LOAD DISPATCHER PSW      @L9C 04350000
         L     2,PSAMODEW-PSA(0,0)       .GET PSA SYSTEM MODE INDICATOR 04360000
         L     3,PSACLHS-PSA(0,0)      .LOAD CURRRENT LOCKS HELD STRING 04370000
         L     4,PSALOCAL-PSA(0,0)       .LOAD LOCAL LOCK ADDRESS       04380000
         TRACE 9,4,TOTDSP-TOT(8)         .TRACE TASK DISPATCH      @L9C 04390000
.*                                                                      04400000
         LM    8,9,PSATRSAV-PSA(0)       Restore regs              @L9A 04410000
         J     &LABELB                   .BRANCH AROUND RESUME          04420000
.*                                                                      04430000
&LABELA  DS    0H                                                       04440000
         STM   0,15,PSATRSAV-PSA(0)      .SAVE ISSUERS REGISTERS        04450000
         L     15,PSATRVT-PSA(0,0)       .GET TRVT ADDRESS              04460000
         L     15,TRVTETDP-TRVT(0,15)    .GET ROUTINE EP ADDRESS        04470000
         BASSM 14,15                     .CALL PTRACE ROUTINE           04480000
         LM    0,15,PSATRSAV-PSA(0)      .RESTORE ISSUERS REGISTERS     04490000
&LABELB  DS    0H                                                       04500000
         AGO   .GENEXIT                  EXIT FROM MACRO                04510000
.*                                                                      04520000
.********************************************************************** 04530000
.*       GENERATE CODE FOR SRB TYPE REQUEST                           * 04540000
.********************************************************************** 04550000
.*                                                                      04560000
.GENSRB  ANOP                                                           04570000
         AIF   ('&TYPE' NE 'SRB').GENSSRB  BR IF TYPE NOT SRB      @D2C 04580000
*********************************************************************** 04590000
*                                                                     * 04600000
*        PTRACE TYPE=SRB                                              * 04610000
*                                                                     * 04620000
*        INPUT  REGISTERS:                                            * 04630000
*        REGS     0 SRB ADDRESS                                       * 04640000
*        REG      1 SRB PARAMETER AREA ADDRESS                        * 04650000
*                                                                     * 04660000
*        OUTPUT REGISTERS:                                            * 04670000
*        REGS   0-1,3,5-9 UNCHANGED                                   * 04680000
*        REGS   2,4,10-15 UNPREDICABLE                                * 04690000
*                                                                     * 04700000
*********************************************************************** 04710000
.*                                                                      04720000
         TM    PSATRACE-PSA(0),PSATROFF  .TEST FOR TRACE STATE          04730000
         JNZ   &LABELA                   .BRANCH IF TRACE SUSPENDED     04740000
         LR    4,2                       .SAVE REG NEEDED BY IEAVEDS0  -04750000
                                                                   @D2A 04760000
         LR    10,0                      .SRB ADDRESSABILITY            04770000
         L     12,PSAAOLD-PSA(0,0)       .LOAD CURRENT ASCB ADDRESS     04780000
         L     11,SRBWEB-SRB(10)         .LOAD WEB ADDRESS         @D2A 04790000
         L     15,SRBFLC-SRB(10)         .LOAD SRB AFFINITY AND PURGE   04800000
*                                        .ASID                          04810000
         L     2,SRBPTCB-SRB(10)         .LOAD PURGE TCB           @D2C 04820000
         LH    12,ASCBASID-ASCB(,12)     .LOAD ASID OF CURRENT ASCB     04830000
         ICM   12,B'1100',SRBFLGS-SRB(10) .LOAD SRB FLAGS, LOCK BITS    04840000
         L     10,PSATOT-PSA(0,0)       .ADDRESS OF TRACE OPERAND TABLE 04850000
         LM    13,14,PSASMPSW-PSA(0)     .LOAD DISPATCHER PSW      @P1M 04860000
         TRACE 11,2,TOTSRB-TOT(10)       .TRACE SRB DISPATCH            04870000
         LR    2,4                       .RESTORE REGISTER NEEDED BY   -04880000
                                         .IEAVEDS0                 @D2A 04890000
.*                                                                      04900000
         J     &LABELB                   .BRANCH AROUND RESUME          04910000
.*                                                                      04920000
&LABELA  DS    0H                                                       04930000
         STM   0,15,PSATRSAV-PSA(0)      .SAVE ISSUERS REGISTERS        04940000
         L     15,PSATRVT-PSA(0,0)       .GET TRVT ADDRESS              04950000
         L     15,TRVTETIS-TRVT(0,15)    .GET ROUTINE EP ADDRESS        04960000
         BASSM 14,15                     .CALL PTRACE ROUTINE           04970000
         LM    0,15,PSATRSAV-PSA(0)      .RESTORE ISSUERS REGISTERS     04980000
&LABELB  DS    0H                                                       04990000
         AGO   .GENEXIT                  EXIT FROM MACRO                05000000
.*                                                                      05010000
.*                                                                      05020000
.********************************************************************** 05030000
.*       GENERATE CODE FOR SSRB TYPE REQUEST                          * 05040000
.********************************************************************** 05050000
.*                                                                      05060000
.GENSSRB ANOP                                                           05070000
         AIF   ('&TYPE' NE 'SSRB').GENSVC  BR IF TYPE NOT SSRB     @D2A 05080000
*********************************************************************** 05090000
*                                                                     * 05100000
*        PTRACE TYPE=SSRB                                             * 05110000
*                                                                     * 05120000
*        INPUT  REGISTERS:                                            * 05130000
*        REGS     1 SSRB ADDRESS                                      * 05140000
*        REG     13 PASID/SASID                                       * 05150000
*                                                                     * 05160000
*        OUTPUT REGISTERS: NEED TO BE UPDATED                         * 05170000
*        REG   0    UNPREDICTABLE                                     * 05180000
*        REG   1    UNCHANGED                                         * 05190000
*        REGS  2    UNPREDICTABLE                                     * 05200000
*        REGS  3    UNCHANGED                                         * 05210000
*        REGS  4    UNPREDICTABLE                                     * 05220000
*        REGS  5-9  UNCHANGED                                         * 05230000
*        REGS 10-12 UNPREDICTABLE                                     * 05240000
*        REG  13    UNCHANGED                                         * 05250000
*        REGS 14-15 UNPREDICTABLE                                     * 05260000
*                                                                     * 05270000
*********************************************************************** 05280000
.*                                                                      05290000
         TM    PSATRACE-PSA(0),PSATROFF  .TEST FOR TRACE STATE     @D2A 05300000
         JNZ   &LABELA                   .BRANCH IF TRACE SUSPENDED     05310000
*                                                                  @P6C 05320000
         STM   8,9,PSATRSAV-PSA(0)       Save regs                 @L9A 05330000
         LR    4,3                       .SAVE REG NEEDED BY PTRACE     05340000
*                                         ISSUER                   @D2A 05350000
         L     8,PSALCCAV-PSA(0,0)       .GET LCCA ADDRESS         @L9C 05360000
         L     0,LCCAPGTA+2-LCCA(8)      .LOAD PURGE TCB ADDRESS   @L9C 05370000
         L     9,LCCACWEB-LCCA(8)        .LOAD WORK UNIT ADDRESS   @L9C 05380000
         L     2,LCCASAFN-LCCA(8)        .LOAD AFFINITY AND PURGE ASID *05390000
                                                                   @L9C 05400000
         L     8,PSATOT-PSA(0,0)         .ADDRESS OF TRACE OPERAND     *05410000
                                          TABLE                    @L9C 05420000
         L     10,PSAAOLD-PSA(0,0)       .GET CURRENT ASCB ADDRESS @L9C 05430000
         LH    10,ASCBASID-ASCB(,10)     .LOAD ASID OF CURRENT ASCB    *05440000
                                                                   @L9C 05450000
         ICM   10,B'0100',PSACLHS4-PSA(0) .LOAD LOCKS HELD             *05460000
                                          INFORMATION              @L9C 05470000
.* IEAVEDS0 now sets up PASID/SASID in R11 so no need to move R13  @L9A 05480000
         LM    12,15,PSAPSWSV16-PSA(0)   .LOAD DISPATCHER PSW      @L9C 05490000
         L     3,PSALOCAL-PSA(0,0)       .LOAD LOCAL LOCK WORD OF CPU   05500000
*                                         LOCKS TABLE              @D2A 05510000
         TRACE 9,3,TOTSSRB-TOT(8)        .TRACE SSRB DISPATCH      @L9C 05520000
.* IEAVEDS0 set up PASID/SASID in R11 so no need to restore R13    @L9A 05530000
         LM    8,9,PSATRSAV-PSA(0)       Restore regs              @L9A 05540000
         LR    3,4                       .RESTORE REG NEEDED BY PTRACE  05550000
*                                                                  @D2A 05560000
         J     &LABELB                   .BRANCH AROUND RESUME     @D2A 05570000
*                                                                       05580000
&LABELA  DS    0H                                                  @D2A 05590000
         STM   0,15,PSATRSAV-PSA(0)      .SAVE ISSUERS REGISTERS   @D2A 05600000
         L     15,PSATRVT-PSA(0,0)       .GET TRVT ADDRESS         @D2A 05610000
         L     15,TRVTETSB-TRVT(0,15)    .GET ROUTINE EP ADDRESS   @D2A 05620000
         BASSM 14,15                     .CALL PTRACE ROUTINE      @D2A 05630000
         LM    0,15,PSATRSAV-PSA(0)      .RESTORE ISSUERS REGISTERS     05640000
*                                         ISSUER                   @D2A 05650000
&LABELB  DS    0H                                                  @D2A 05660000
         AGO   .GENEXIT                  EXIT FROM MACRO           @D2A 05670000
.*                                                                      05680000
.********************************************************************** 05690000
.*       GENERATE CODE FOR SVC TYPE REQUEST                           * 05700000
.********************************************************************** 05710000
.*                                                                      05720000
.GENSVC  ANOP                                                           05730000
         AIF   ('&TYPE' NE 'SVC').GENSVCR  BR IF TYPE NOT SVC           05740000
.*                                                                      05750000
*********************************************************************** 05760000
*                                                                     * 05770000
*        PTRACE TYPE=SVC                                              * 05780000
*                                                                     * 05790000
*        INPUT  REGISTERS:                                            * 05800000
*        REGS   0-1 ISSUER DATA TO BE TRACED                          * 05810000
*        REG      4 CURRENT TCB ADDRESS                               * 05820000
*        REG      7 CURRENT ASCB ADDRESS                              * 05830000
*        REG     15 ISSUER DATA TO BE TRACED                          * 05840000
*                                                                     * 05850000
*        OUTPUT REGISTERS:                                            * 05860000
*        REGS  0-15 UNCHANGED                                         * 05870000
*                                                                     * 05880000
*********************************************************************** 05890000
.*                                                                      05900000
         STM   8,14,PSATRSAV-PSA(0)      .SAVE ISSUERS REGISTERS   @L9C 05910000
         L     8,PSATOT-PSA(0,0)        .ADDRESS OF TRACE OPERAND TABLE-05920000
                                                                   @NCM 05930000
         LR    9,4                       .LOAD CURRENT TCB ADDRESS @L9C 05940000
         LH    10,ASCBASID-ASCB(0,7)     .GET HOME ASID            @L9C 05950000
         ICM   10,B'1100',FLCSVCN-FLC(0) .GET SVC NUMBER           @L9C 05960000
         LM    11,14,FLCESOPSW-FLC(0) .LOAD SVC OLD PSW            @L9C 05970000
         TRACE 9,1,TOTSVC-TOT(8)       .TRACE SVC INTERRUPT        @L9C 05980000
         LM    8,14,PSATRSAV-PSA(0)    .RESTORE ISSUERS REGISTERS  @L9C 05990000
         AGO   .GENEXIT                  EXIT FROM MACRO                06000000
.*                                                                      06010000
.********************************************************************** 06020000
.*       GENERATE CODE FOR SVCR TYPE REQUEST                          * 06030000
.********************************************************************** 06040000
.*                                                                      06050000
.GENSVCR ANOP                                                           06060000
         AIF   ('&TYPE' NE 'SVCR').GENSYNS  BR IF TYPE NOT SVCR         06070000
.*                                                                      06080000
*********************************************************************** 06090000
*                                                                     * 06100000
*        PTRACE TYPE=SVCR                                             * 06110000
*                                                                     * 06120000
*        INPUT  REGISTERS:                                            * 06130000
*        REGS   0-1 ISSUER DATA TO BE TRACED                          * 06140000
*        REG      4 CURRENT TCB ADDRESS                               * 06150000
*        REG      5 CURRENT RB ADDRESS                                * 06160000
*        REG      7 CURRENT ASCB ADDRESS                              * 06170000
*        REG     15 ISSUER DATA TO BE TRACED                          * 06180000
*                                                                     * 06190000
*        OUTPUT REGISTERS:                                            * 06200000
*        REGS   0-3 UNPREDICTABLE                                     * 06210000
*        REGS   4-9 UNCHANGED                                         * 06220000
*        REGS 10-15 UNPREDICTABLE                                     * 06230000
*                                                                     * 06240000
*********************************************************************** 06250000
.*                                                                      06260000
         STM   R8,R9,PSATRSAV-PSA(0)     Save regs                 @L9A 06270000
         LR    13,5                      .LOAD CURRENT RB ADDRESS       06280000
         AHI   13,-RBPRFLNA              .GET RB PREFIX ADDRESS    @P3C 06290000
         LH    10,ASCBASID-ASCB(0,7)     .GET HOME ASID            @L9C 06300000
         ICM   10,B'1100',RBINTCOD-RBPRFXST(13) .GET INTERRUPT CODE    *06310000
                                                                   @L9C 06320000
         L     13,RBXSB-RBPRFXST(13)     .Get XSB address          @L9A 06330000
         L     8,PSATOT-PSA(0,0)        .ADDRESS OF TRACE OPERAND TABLE-06340000
                                                                   @L9C 06350000
         LR    9,4                       .LOAD CURRENT TCB ADDRESS @L9C 06360000
         LM    11,14,XSBOPSW16-XSB(13)   .Load XSB Old PSW         @L9C 06370000
         TRACE 9,1,TOTSVCR-TOT(8)        .TRACE SVC RETURN         @L9C 06380000
         LM    R8,R9,PSATRSAV-PSA(0)     Restore regs              @L9A 06390000
         AGO   .GENEXIT                  EXIT FROM MACRO                06400000
.GENSYNS ANOP                                                      @04A 06410000
         AIF   ('&TYPE' EQ 'SYNS').GENSYNC                         @04A 06420000
         AIF   ('&TYPE' NE 'SYNE').GENCOMM                         @04A 06440000
.*                                                                      06450000
.GENSYNC ANOP                                                           06460000
*********************************************************************** 06470000
*                                                                     * 06480000
*        PTRACE TYPE=SYNS/SYNE                                        * 06490000
*                                                                     * 06500000
*        INPUT  REGISTERS:                                            * 06510000
*        REG      1 CLP ADDRESS                                       * 06520000
*        REG      2 IOSB ADDRESS                                      * 06530000
*        REG      3 PFID                                              * 06540000
*        REG     13 SAVE AREA ADDRESS                                 * 06550000
*                                                                     * 06560000
*        OUTPUT REGISTERS:                                            * 06570000
*        REGS   0-1 UNPREDICTABLE                                     * 06580000
*        REGS   2-14 UNCHANGED                                        * 06581000
*        REGS   15  UNPREDICTABLE                                     * 06582000
*                                                                     * 06582100
*********************************************************************** 06582200
.*                                                                      06582300
         LLGT  @15,PSATRVT-PSA(0,0)          .Get TRVT Address     @04A 06582400
         LLGT  @15,&TABVT(&I).-TRVT(0,15)    .Get Routine EP Addr  @04A 06582500
         BASR  @14,@15                       .Call TRACE routine   @04A 06582600
         AGO   .GENEXIT                                            @04A 06582700
.*                                                                      06582800
.********************************************************************** 06582900
.*       GENERATE COMMENT                                             * 06583000
.********************************************************************** 06583100
.*                                                                      06583200
.GENCOMM ANOP                                                           06583300
.*                                                                      06583400
*********************************************************************** 06583500
*                                                                     * 06583600
*  REGISTER CONTENT REQUIREMENTS FOR THE PTRACE MACRO CAN BE FOUND    * 06583700
*  IN MODULE IEAVETRC, IN THE SYSTEM LOGIC LIBRARY                    * 06583800
*                                                                     * 06583900
*********************************************************************** 06584000
.*                                                                      06585000
.********************************************************************** 06586000
.*       GENERATE CODE FOR &SAVEAREA OPTION (SAVE)                    * 06587000
.********************************************************************** 06588000
.*                                                                      06589000
.GENSAVE ANOP                                                           06590000
         AIF   ('&SAVEAREA' NE 'NONE').GENSSP   BRANCH IF NO SAVE       06600000
.*                                                                      06610000
         LR    2,15                      .SAVE REG 15 FOR ROUTINE       06620000
         AGO   .GENLINK                  GO GENERATE LINK CODE          06630000
.*                                                                      06640000
.GENSSP  ANOP                                                           06650000
         AIF   ('&SAVEAREA' EQ 'PSA').GENSPSA   BRANCH IF PSA           06660000
.*                                                                      06670000
         STM   14,12,12(13)              .SAVE ISSUERS REGISTERS        06680000
         AGO   .GENLINK                  GO GENERATE LINK CODE          06690000
.*                                                                      06700000
.GENSPSA ANOP                                                           06710000
         STM   0,15,PSATRSAV-PSA(0)      .SAVE ISSUERS REGISTERS        06720000
.*                                                                      06730000
.*                                                                      06740000
.********************************************************************** 06750000
.*       GENERATE CODE FOR LINK TO SERVICE ROUTINE                    * 06760000
.********************************************************************** 06770000
.*                                                                      06780000
.GENLINK ANOP                                                           06790000
.*                                                                      06800000
         AIF   ('&TYPE' NE 'SSRV').NOTSSRV   BR IF TYPE IS NOT     @L2A 06810000
.*                                       SSRV                           06820000
.*                                                                6@L7D 06830000
         IILH  3,&SSRVID                 .LOAD SSRVID INTO HIGH    @L7C 06840000
*                                        .ORDER HALF WORD OF REGISTER.  06850000
.*                                        LOW ORDER HALF WORD GETS      06860000
.*                                        OVERLAID BY SERVICE ROUTINE.  06870000
.*                                                                 @L7D 06880000
.*                                                                3@P7D 06890000
.NOTSSRV ANOP                                                      @L2A 06900000
         AIF   ('&TYPE' EQ 'PGM').GENLNKA   BR IF TYPE PGM              06910000
.*                                                                      06920000
         L     15,PSATRVT-PSA(0,0)       .GET TRVT ADDRESS              06930000
.*                                                                      06940000
.GENLNKA ANOP                                                           06950000
.*                                                                      06960000
         L     15,&TABVT(&I).-TRVT(0,15) .GET ROUTINE EP ADDRESS        06970000
         BASSM 14,15                     .CALL PTRACE ROUTINE           06980000
.*                                                                      06990000
.*                                                                      07000000
.********************************************************************** 07010000
.*       GENERATE CODE FOR &SAVEAREA OPTION (RESTORE)                 * 07020000
.********************************************************************** 07030000
.*                                                                      07040000
.GENREST ANOP                                                           07050000
         AIF   ('&SAVEAREA' EQ 'NONE').GENEXIT  BRANCH IF NO SAVE       07060000
         AIF   ('&SAVEAREA' EQ 'PSA').GENRPSA   BRANCH IF PSA           07070000
.*                                                                      07080000
         LM    14,12,12(13)              .RESTORE ISSUERS REGISTERS     07090000
         AGO   .GENEXIT                  EXIT FROM MACRO                07100000
.*                                                                      07110000
.GENRPSA ANOP                                                           07120000
         LM    0,15,PSATRSAV-PSA(0)      .RESTORE ISSUERS REGISTERS     07130000
.*                                                                      07140000
.GENEXIT ANOP                                                           07150000
         MEXIT                                                          07160000
.*                                                                      07170000
.*                                                                      07180000
.*                                                                      07190000
.********************************************************************** 07200000
.*       PROCESS USER TYPE REQUEST                                    * 07210000
.********************************************************************** 07220000
.*                                                                      07230000
.USRN    ANOP                                                           07240000
&OP1     SETC  'TYPE'                    PARAMETER BEING CHECKED        07250000
&OP2     SETC  '&TYPE'                   VALUE OF THAT PARAMETER        07260000
         AIF   (K'&TYPE NE 4).ERR2       ERROR IF NOT USER TYPE         07270000
.*                                                                      07280000
&N       SETC  '&TYPE'(4,1)              GET USER ENTRY NUMBER          07290000
         AIF   ('&N' GE '0' AND                                        X07300000
               '&N' LE '9').USSRVID      BRANCH IF ENTRY DIGIT 0-9 @L2C 07310000
         AIF   ('&N' LT 'A' OR                                         X07320000
               '&N' GT 'F').ERR2         ERROR IF NOT HEX DIGIT A-F     07330000
.*                                                                      07340000
.********************************************************************** 07350000
.*       &SSRVID OPERAND MUST NOT BE SPECIFIED                        * 07360000
.********************************************************************** 07370000
.*                                                                      07380000
.USSRVID ANOP                                                      @L2A 07390000
.*                                                                      07400000
&OP1     SETC  'SSRVID OPERAND'          SET SSRVID ERROR MESSAGE  @L2A 07410000
&OP2     SETC  '''''&TYPE'''' TYPE REQUEST'  SET SSRVID ERROR      @L2A 07420000
.*                                       MESSAGE                   @L2A 07430000
         AIF   ('&SSRVID' NE '').ERR3    ERROR IF SSRVID SPECIFIED @L2A 07440000
.*                                                                      07450000
.********************************************************************** 07460000
.*       &TRACEMODE MUST BE SPECIFIED AS TRACE OR TRACG               * 07470000
.********************************************************************** 07480000
.*                                                                      07490000
&OP1     SETC  'TRACEMODE'                 PARAMETER BEING CHECKED @L6A 07500000
&OP2     SETC  '&TRACEMODE'                VALUE OF THAT PARAMETER @L6A 07510000
.*                                                                      07520000
         AIF   ('&TRACEMODE' EQ '').USRNGEN DEFAULT TRACEMODE      @P5A 07530000
         AIF   ('&TRACEMODE' EQ 'TRACE').USRNGEN   NOT TRACG       @P5C 07540000
         AIF   ('&TRACEMODE' NE 'TRACG').ERR3  INCORRECT TRACEMODE @L6A 07550000
.*                                                                      07560000
.********************************************************************** 07570000
.*       ADDRESSING MODE MUST BE AMODE64                              * 07580000
.********************************************************************** 07590000
.*                                                                      07600000
         AIF   ('&SYSAM64' EQ 'NO').ERRG                           @L6A 07610000
.*                                                                      07620000
.********************************************************************** 07630000
.*       &REGS MUST BE SPECIFIED AS '(1)' OR A PAIR OF REGISTERS      * 07640000
.********************************************************************** 07650000
.*                                                                      07660000
&OP1     SETC  'REGS'                    PARAMETER BEING CHECKED   @L6A 07670000
&OP2     SETC  '&REGS'                   VALUE OF THAT PARAMETER   @L6A 07680000
.*                                                                      07690000
         AIF   ('&REGS' EQ '').ERR2      ERROR IF NULL &REGS       @L6A 07700000
         AIF   ('&REGS' EQ '(1)').REGSGNG BRANCH IF REG 1 IS GIVEN @P6C 07710000
         AIF   (N'&REGS NE 2).ERR4       ERROR IF MORE THAN 2 REGS @L6A 07720000
.*                                                                      07730000
         AIF   ('&REGS(1)'(1,1) EQ '(').ERR4  ERROR IF NOT FIRST REG    07740000
         AIF   ('&REGS(2)'(1,1) EQ '(').ERR4  ERROR IF NOT SECOND REG   07750000
.*                                                                      07760000
&RX      SETC  '&REGS(1)'                GET FIRST REG             @L6A 07770000
&RY      SETC  '&REGS(2)'                GET SECOND REG            @L6A 07780000
.*                                                                      07790000
.*                                                                      07800000
.REGSGNG ANOP                                                      @P6M 07810000
.******************************************************************     07820000
.*       GENERATE CODE FOR USER TYPE ENTRY ZARCH                        07830000
.******************************************************************     07840000
.*                                                                      07850000
         LA    0,X'&N'               .INDICATE USER ENTRY NUMBER   @P6C 07860000
.*                                                                      07870000
.******************************************************************     07880000
.*       GENERATE CODE FOR &REGS ZARCH                                  07890000
.******************************************************************     07900000
.*                                                                      07910000
         AIF   ('&REGS' NE '(1)').REGSXYG BRANCH IF REG PAIR GIVEN @L6A 07920000
.*                                                                      07930000
.REGS1G  ANOP                                                           07940000
         LA    1,0(0,1)                  .INDICATE PARM ADDR GIVEN @L6A 07950000
         LLGT  15,PSATRVT-PSA(0,0)       .GET TRVT ADDRESS         @L6A 07960000
         AGO   .USRNLKG                  CONTINUE GEN WITH LINKAGE @L6A 07970000
.*                                                                      07980000
.REGSXYG ANOP                                                           07990000
         LA    1,(&RX.*X'10')+&RY.       .LOAD REG PAIR NUMBERS    @L6A 08000000
         LLGT  15,PSATRVT-PSA(0,0)       .GET TRVT ADDRESS         @L6A 08010000
         OIHH  1,X'8000'                 .INDICATE REG PAIR GIVEN  @P6C 08020000
.*                                                                      08030000
.********************************************************************** 08040000
.*       &SAVEAREA MUST BE SPECIFIED AS 'F4SA'                        * 08050000
.********************************************************************** 08060000
.*                                                                      08070000
.USAVEAG ANOP                                                           08080000
&OP1     SETC  '''''SAVEAREA=&SAVEAREA'''''      INVALID OPERAND   @L6A 08090000
&OP2     SETC  'TYPE=&TYPE, SAVEAREA MUST BE ''''F4SA'''''         @L6A 08100000
         AIF   ('&SAVEAREA' NE 'F4SA').ERR3      ERROR IF NOT F4SA @L6A 08110000
.*                                                                      08120000
.*                                                                      08130000
.*                                                                      08140000
.********************************************************************** 08150000
.*       GENERATE CODE TO LINK TO SERVICE ROUTINE                     * 08160000
.********************************************************************** 08170000
.*                                                                      08180000
.USRNLKG ANOP                                                           08190000
         LLGT  15,TRVTETUG-TRVT(0,15)    .GET ROUTINE EP ADDRESS   @L6A 08200000
         BASR  14,15                     .CALL PTRACE ROUTINE      @L6A 08210000
         MEXIT                                                          08220000
.*                                                                      08230000
.*                                                                      08240000
.********************************************************************** 08250000
.*       GENERATE CODE FOR USER TYPE ENTRY                            * 08260000
.********************************************************************** 08270000
.*                                                                      08280000
.USRNGEN ANOP                                                           08290000
.*                                                                      08300000
.********************************************************************** 08310000
.*       &REGS MUST BE SPECIFIED AS '(1)' OR A PAIR OF REGISTERS      * 08320000
.********************************************************************** 08330000
.*                                                                      08340000
&OP1     SETC  'REGS'                    PARAMETER BEING CHECKED        08350000
&OP2     SETC  '&REGS'                   VALUE OF THAT PARAMETER        08360000
.*                                                                      08370000
         AIF   ('&REGS' EQ '').ERR2      ERROR IF NULL &REGS            08380000
         AIF   ('&REGS' EQ '(1)').REGSGEN BRANCH IF REG 1 IS GIVEN @P6C 08390000
         AIF   (N'&REGS NE 2).ERR4       ERROR IF MORE THAN 2 REGS      08400000
.*                                                                      08410000
         AIF   ('&REGS(1)'(1,1) EQ '(').ERR4  ERROR IF NOT FIRST REG    08420000
         AIF   ('&REGS(2)'(1,1) EQ '(').ERR4  ERROR IF NOT SECOND REG   08430000
.*                                                                      08440000
&RX      SETC  '&REGS(1)'                GET FIRST REG                  08450000
&RY      SETC  '&REGS(2)'                GET SECOND REG                 08460000
.*                                                                      08470000
.********************************************************************** 08480000
.*       GENERATE CODE FOR USER ENTRY NUMBER                          * 08490000
.********************************************************************** 08500000
.*                                                                      08510000
.REGSGEN ANOP                                                      @P6M 08520000
         LA    0,X'&N'                   .INDICATE USER ENTRY NUMBER    08530000
.********************************************************************** 08540000
.*       GENERATE CODE FOR &REGS                                      * 08550000
.********************************************************************** 08560000
.*                                                                      08570000
         AIF   ('&REGS' NE '(1)').REGSXY  BRANCH IF REG PAIR GIVEN      08580000
.*                                                                      08590000
.REGS1   ANOP                                                           08600000
         LA    1,0(0,1)                  .INDICATE PARM ADDR GIVEN      08610000
         L     15,PSATRVT-PSA(0,0)       .GET TRVT ADDRESS              08620000
         AGO   .USRNLNK                  CONTINUE GEN WITH LINKAGE      08630000
.*                                                                      08640000
.REGSXY  ANOP                                                           08650000
         LA    1,(&RX.*X'10')+&RY.       .LOAD REG PAIR NUMBERS         08660000
         L     15,PSATRVT-PSA(0,0)       .GET TRVT ADDRESS              08670000
         O     1,TRVTRPMK-TRVT(0,15)     .INDICATE REG PAIR GIVEN       08680000
.*                                                                      08690000
.********************************************************************** 08700000
.*       &SAVEAREA MUST BE SPECIFIED AS 'STANDARD'                    * 08710000
.********************************************************************** 08720000
.*                                                                      08730000
.USAVEA  ANOP                                                           08740000
&OP1     SETC  '''''SAVEAREA=&SAVEAREA'''''      INVALID OPERAND        08750000
&OP2     SETC  'TYPE=&TYPE, SAVEAREA MUST BE ''''STANDARD'''''          08760000
         AIF   ('&SAVEAREA' NE 'STANDARD').ERR3  ERROR IF NOT STANDARD  08770000
.*                                                                      08780000
.*                                                                      08790000
.*                                                                      08800000
.********************************************************************** 08810000
.*       GENERATE CODE TO LINK TO SERVICE ROUTINE                     * 08820000
.********************************************************************** 08830000
.*                                                                      08840000
.USRNLNK ANOP                                                           08850000
         L     15,TRVTETUR-TRVT(0,15)    .GET ROUTINE EP ADDRESS        08860000
         BASSM 14,15                     .CALL PTRACE ROUTINE           08870000
         MEXIT                                                          08880000
.*                                                                      08890000
.*                                                                      08900000
.*                                                                      08910000
.*                                                                      08920000
.********************************************************************** 08930000
.*       PROCESS ERROR CONDITIONS                                     * 08940000
.********************************************************************** 08950000
.*                                                                      08960000
.*  IHB027 EXCESSIVE POSITIONAL PARAMETERS SPECIFIED.                   08970000
.ERR1    ANOP                                                           08980000
         IHBERMAC 238                                                   08990000
         MEXIT                                                          09000000
.*                                                                      09010000
.*  IHB002 INVALID XXX OPERAND SPECIFIED - YYY.                         09020000
.ERR2    ANOP                                                           09030000
         IHBERMAC 1001,&OP1,&OP2                                        09040000
         MEXIT                                                          09050000
.*                                                                      09060000
.*  IHB280 XXX INVALID WITH YYY.                                        09070000
.ERR3    ANOP                                                           09080000
         IHBERMAC 1020,&OP1,&OP2                                        09090000
         MEXIT                                                          09100000
.*                                                                      09110000
.*  IHB121 REGISTER SPECIFICATION INVALID. GENERATION TERMINATED.       09120000
.ERR4    ANOP                                                           09130000
         IHBERMAC 203                                                   09140000
         MEXIT                                                          09150000
.*                                                                      09160000
.*  IHB001 XXX REQUIRED, NOT SPECIFIED.                                 09170000
.ERR5    ANOP                                                      @L2A 09180000
         IHBERMAC 1006,&OP1                                        @L2A 09190000
         MEXIT                                                     @L6A 09200000
.*                                                                      09210000
.*  IHB001 AMODE SPECIFICATION INCORRECT                                09220000
.ERRG    ANOP                                                      @L6A 09230000
         MNOTE 12,'TRACEMODE=TRACG REQUIRES AMODE 64'              @L6A 09240000
         MEND                                                           09250000
*                                                                    */ 09260000
*                                                                       09270000
*%PTRACE:                                                               09280000
*   MACRO KEYS(TYPE,SSRVID,REGS,SAVEAREA,TRACEMODE,INLINE); /*   @L6C*/ 09290000
*                                                                       09300000
*   /*****************************************************************/ 09310000
*   /*                                                               */ 09320000
*   /* VARIABLE DECLARES                                             */ 09330000
*   /*                                                               */ 09340000
*   /*****************************************************************/ 09350000
*                                                                       09360000
*   DECLARE                                                             09370000
*     EHAREGS  CHAR EXT,            /* REGS DCLD BY EPILOG           */ 09380000
*     EHAREGS64 CHAR EXT,           /* REGS DCLD BY EPILOG       @P6A*/ 09390000
*     EHAMAPS  CHAR EXT,            /* REG SAVE AREA FROM EPILOG     */ 09400000
*     SYSALVL  FIXED EXT,           /*                           @P2A*/ 09410000
*     SYSAM64  CHARACTER EXT,       /*                           @P4C*/ 09420000
*     RC       FIXED,               /* MACRO GEN SEVERITY CODES      */ 09430000
*     CMT      CHAR,                /* DO-END COMMENT                */ 09440000
*    (I,                                                                09450000
*     TABENT  ) FIXED,              /* TABLE INDEX & MAX ENTRIES     */ 09460000
*     TABTYPE(33) CHAR,             /* ENTRY TYPE TABLE          @04C*/ 09470000
*     TABVT(33) CHAR,               /* ENTRY POINT TRVT NAMES    @04C*/ 09480000
*     TABSA(33) CHAR,               /* ENTRY TYPE SAVEAREA       @04C*/ 09490000
*     N        CHAR,                /* USER TYPE ENTRY NUMBER        */ 09500000
*    (RX,                                                               09510000
*     RY      ) CHAR,               /* REG PAIR NUMBERS              */ 09520000
*     INSAVE   CHAR;                /* SAVE AREA FOR INLINE      @D1A*/ 09530000
*                                                                       09540000
*   /*****************************************************************/ 09550000
*   /*                                                               */ 09560000
*   /* INITIALIZE VARIABLES                                          */ 09570000
*   /*                                                               */ 09580000
*   /*****************************************************************/ 09590000
*                                                                       09600000
*   RC = 0;                         /* NO MACRO ERROR                */ 09610000
*   TABENT = 33;                    /* MAX ENTRIES IN TABLE      @04C*/ 09620000
*   TABTYPE(1) = 'SSCH';            /* INITIALIZE TABLE              */ 09630000
*   TABTYPE(2) = 'MSCH';                                                09640000
*   TABTYPE(3) = 'HSCH';                                                09650000
*   TABTYPE(4) = 'CSCH';                                                09660000
*   TABTYPE(5) = 'RSCH';                                                09670000
*   TABTYPE(6) = 'EXT';                                                 09680000
*   TABTYPE(7) = 'SVC';                                                 09690000
*   TABTYPE(8) = 'SVCR';                                                09700000
*   TABTYPE(9) = 'SVCE';                                                09710000
*   TABTYPE(10) = 'PGM';                                                09720000
*   TABTYPE(11) = 'IO';                                                 09730000
*   TABTYPE(12) = 'DSP';                                                09740000
*   TABTYPE(13) = 'SRB';                                                09750000
*   TABTYPE(14) = 'SSRB';                                               09760000
*   TABTYPE(15) = 'WAIT';                                               09770000
*   TABTYPE(16) = 'MCH';                                                09780000
*   TABTYPE(17) = 'RST';                                                09790000
*   TABTYPE(18) = 'ACR';                                                09800000
*   TABTYPE(19) = 'SUSP';                                               09810000
*   TABTYPE(20) = 'ALTR';                                               09820000
*   TABTYPE(21) = 'SPER';           /*                           @L1A*/ 09830000
*   TABTYPE(22) = 'SSRV';           /* TRACE ENTRY TYPE SSRV     @L2A*/ 09840000
*   TABTYPE(23) = 'RCVY';           /* TRACE ENTRY TYPE RCVY     @L3A*/ 09850000
*   TABTYPE(24) = 'TIME';           /* TRACE ENTRY TYPE TIME     @L4A*/ 09860000
*   TABTYPE(25) = 'SIGA';           /* TRACE ENTRY TYPE SIGA     @01A*/ 09870000
*   TABTYPE(26) = 'XSCH';           /* TRACE ENTRY TYPE XSCH     @02A*/ 09880000
*   TABTYPE(27) = 'SPIN';           /* TRACE ENTRY TYPE SPIN     @L8A*/ 09890000
*   TABTYPE(28) = 'PCIL';           /* TRACE ENTRY TYPE PCIL     @LAA*/ 09900000
*   TABTYPE(29) = 'PCIS';           /* TRACE ENTRY TYPE PCIS     @LAA*/ 09910000
*   TABTYPE(30) = 'PDMX';           /* TRACE ENTRY TYPE PDMX     @LAA*/ 09920000
*   TABTYPE(31) = 'AINT';           /* TRACE ENTRY TYPE AINT     @LAA*/ 09930000
*   TABTYPE(32) = 'SYNS';           /* TRACE ENTRY TYPE SYNS     @04A*/ 09940000
*   TABTYPE(33) = 'SYNE';           /* TRACE ENTRY TYPE SYNE     @04A*/ 09950000
*   TABVT(1) = 'TRVTETSS';                                              09960000
*   TABVT(2) = 'TRVTETMS';                                              09970000
*   TABVT(3) = 'TRVTETHS';                                              09980000
*   TABVT(4) = 'TRVTETCS';                                              09990000
*   TABVT(5) = 'TRVTETRS';                                              10000000
*   TABVT(6) = 'TRVTETEX';                                              10010000
*   TABVT(7) = 'TRVTETSV';                                              10020000
*   TABVT(8) = 'TRVTETSR';                                              10030000
*   TABVT(9) = 'TRVTETSE';                                              10040000
*   TABVT(10) = 'TRVTETPI';                                             10050000
*   TABVT(11) = 'TRVTETIO';                                             10060000
*   TABVT(12) = 'TRVTETDP';                                             10070000
*   TABVT(13) = 'TRVTETIS';                                             10080000
*   TABVT(14) = 'TRVTETSB';                                             10090000
*   TABVT(15) = 'TRVTETWT';                                             10100000
*   TABVT(16) = 'TRVTETMH';                                             10110000
*   TABVT(17) = 'TRVTETRE';                                             10120000
*   TABVT(18) = 'TRVTETAR';                                             10130000
*   TABVT(19) = 'TRVTETSU';                                             10140000
*   TABVT(20) = 'TRVTETTA';                                             10150000
*   TABVT(21) = 'TRVTETSL';         /*                           @L1A*/ 10160000
*   TABVT(22) = 'TRVTETSY';         /* ENTRY POINT IN SYSTEM TRACE      10170000
*                                      TABLE ENTRY CREATION ROUTINES    10180000
*                                      (IEAVETRC) FOR ENTRY TYPE SSRV   10190000
*                                                                @L2A*/ 10200000
*   TABVT(23) = 'TRVTETRV';         /* ENTRY POINT IN SYSTEM TRACE      10210000
*                                      TABLE ENTRY CREATION ROUTINES    10220000
*                                      (IEAVETRC) FOR ENTRY TYPE RCVY   10230000
*                                                                @L3A*/ 10240000
*   TABVT(24) = 'TRVTETTM';         /* ENTRY POINT IN SYSTEM TRACE      10250000
*                                      TABLE ENTRY CREATION ROUTINES    10260000
*                                      (IEAVETRC) FOR ENTRY TYPE TIME   10270000
*                                                                @L4A*/ 10280000
*   TABVT(25) = 'TRVTETSA';         /* ENTRY POINT IN IEAVETRC FOR      10290000
*                                      ENTRY TYPE SIGA           @01A*/ 10300000
*   TABVT(26) = 'TRVTETXS';         /* ENTRY POINT IN IEAVETRC FOR      10310000
*                                      ENTRY TYPE XSCH           @02A*/ 10320000
*   TABVT(27) = 'TRVTETSP';         /* ENTRY POINT IN SYSTEM TRACE      10330000
*                                      TABLE ENTRY CREATION ROUTINES    10340000
*                                      (IEAVETRC) FOR ENTRY TYPE SPIN   10350000
*                                                                @L8A*/ 10360000
*   TABVT(28) = 'TRVTETPL';         /* ENTRY POINT IN SYSTEM TRACE      10370000
*                                      TABLE ENTRY CREATION ROUTINES    10380000
*                                      (IEAVETRC) FOR ENTRY TYPE PCIL   10390000
*                                                                @LAA*/ 10400000
*   TABVT(29) = 'TRVTETPS';         /* ENTRY POINT IN SYSTEM TRACE      10410000
*                                      TABLE ENTRY CREATION ROUTINES    10420000
*                                      (IEAVETRC) FOR ENTRY TYPE PCIS   10430000
*                                                                @LAA*/ 10440000
*   TABVT(30) = 'TRVTETPD';         /* ENTRY POINT IN SYSTEM TRACE      10450000
*                                      TABLE ENTRY CREATION ROUTINES    10460000
*                                      (IEAVETRC) FOR ENTRY TYPE PDMX   10470000
*                                                                @LAA*/ 10480000
*   TABVT(31) = 'TRVTETAI';         /* ENTRY POINT IN SYSTEM TRACE      10490000
*                                      TABLE ENTRY CREATION ROUTINES    10500000
*                                      (IEAVETRC) FOR ENTRY TYPE AINT   10510000
*                                                                @LAA*/ 10520000
*   TABVT(32) = 'TRVTESIS';         /* ENTRY POINT IN SYSTEM TRACE      10530000
*                                      TABLE ENTRY CREATION ROUTINES    10540000
*                                      (IEAVETRC) FOR ENTRY TYPE SYNS   10550000
*                                                                @04A*/ 10560000
*   TABVT(33) = 'TRVTESIE';         /* ENTRY POINT IN SYSTEM TRACE      10570000
*                                      TABLE ENTRY CREATION ROUTINES    10580000
*                                      (IEAVETRC) FOR ENTRY TYPE SYNE   10590000
*                                                                @04A*/ 10600000
*   TABSA(1) = '(PSA)';                                                 10601000
*   TABSA(2) = '(PSA)';                                                 10602000
*   TABSA(3) = '(PSA)';                                                 10603000
*   TABSA(4) = '(PSA)';                                                 10604000
*   TABSA(5) = '(PSA)';                                                 10605000
*   TABSA(6) = '(PSA)';                                                 10606000
*   TABSA(7) = '(PSA)';                                                 10607000
*   TABSA(8) = '(PSA)';                                                 10608000
*   TABSA(9) = '(NONE)';                                                10609000
*   TABSA(10) = '(STANDARD)';                                           10610000
*   TABSA(11) = '(PSA)';                                                10611000
*   TABSA(12) = '(PSA)';                                                10612000
*   TABSA(13) = '(PSA)';                                                10613000
*   TABSA(14) = '(PSA)';                                                10614000
*   TABSA(15) = '(PSA)';                                                10615000
*   TABSA(16) = '(STANDARD)';                                           10616000
*   TABSA(17) = '(NONE)';                                               10617000
*   TABSA(18) = '(PSA)';                                                10618000
*   TABSA(19) = '(PSA)';                                                10619000
*   TABSA(20) = '(PSA)';                                                10620000
*   TABSA(21) = '(STANDARD)';       /*                           @L1A*/ 10630000
*   TABSA(22) = '(STANDARD) OR (PSA)'; /* FOR ENTRY TYPE SSRV,          10640000
*                                      SAVEAREA MUST BE STANDARD OR     10650000
*                                      PSA                       @L2A*/ 10660000
*   TABSA(23) = '(STANDARD) OR (PSA)'; /* FOR ENTRY TYPE RCVY,          10670000
*                                      SAVEAREA MUST BE STANDARD OR     10680000
*                                      PSA                       @L3A*/ 10690000
*   TABSA(24) = '(STANDARD)';       /* FOR ENTRY TYPE TIME, SAVEAREA    10700000
*                                      MUST BE STANDARD          @L4A*/ 10710000
*   TABSA(25) = '(STANDARD) OR (PSA)'; /* FOR SIGA ENTRY TYPE,          10720000
*                                      SAVEAREA MUST BE STANDARD OR     10730000
*                                      PSA                       @01A*/ 10740000
*   TABSA(26) = '(PSA)';            /* FOR XSCH ENTRY TYPE, SAVEAREA    10750000
*                                      MUST BE PSA               @02A*/ 10760000
*   TABSA(27) = '(STANDARD) OR (PSA)'; /* FOR ENTRY TYPE SPIN,          10770000
*                                      SAVEAREA MUST BE STANDARD OR     10780000
*                                      PSA                       @L8A*/ 10790000
*   TABSA(28) = '(NONE)';           /* FOR PCIL ENTRY TYPE, SAVEAREA    10800000
*                                      MUST BE NONE              @LAA*/ 10810000
*   TABSA(29) = '(NONE)';           /* FOR PCIS ENTRY TYPE, SAVEAREA    10820000
*                                      MUST BE NONE              @LAA*/ 10830000
*   TABSA(30) = '(PSA)';            /* FOR PDMX ENTRY TYPE, SAVEAREA    10840000
*                                      MUST BE PSA               @LAA*/ 10850000
*   TABSA(31) = '(PSA)';            /* FOR AINT ENTRY TYPE, SAVEAREA    10860000
*                                      MUST BE PSA               @LAA*/ 10870000
*   TABSA(32) = '(F4SA)';           /* FOR SYNS ENTRY TYPE, SAVEAREA    10880000
*                                      MUST BE F4SA              @04A*/ 10890000
*   TABSA(33) = '(F4SA)';           /* FOR SYNE ENTRY TYPE, SAVEAREA    10900000
*                                      MUST BE F4SA              @04A*/ 10910000
*   ANSWER('?SYSSTATE (TEST);') RESCAN; /*                       @P2A*/ 10920000
*   IF MACLABEL ^= '' THEN          /* LABEL ON MACRO CALL?          */ 10930000
*     ANSWER(MACLABEL) COLUMN(MACLMAR); /* YES: GEN LABEL            */ 10940000
*   CMT = '? ' !! MACLABEL !! ' ' !! MACNAME !! ' ' !! MACLIST !! ' '   10950000
*       !! MACKEYS !! ' MACDATE(16.279)'; /*                     @04C*/ 10960000
*   ANSWER('DO; '!!COMMENT(CMT)) COLUMN(MACCOL);                        10961000
*                                                                       10962000
*   /*****************************************************************/ 10963000
*   /*                                                               */ 10964000
*   /* NO MACLIST PARAMETERS                                         */ 10965000
*   /*                                                               */ 10966000
*   /*****************************************************************/ 10967000
*                                                                       10968000
*   IF NUMBER(MACLIST) ^= 0 THEN    /* TOO MANY MACLIST ENTRIES?     */ 10969000
*     DO;                           /* YES: ERROR                    */ 10970000
*       ANSWER MSG('AHA0073 TOO MANY POSITIONAL PARAMETERS '!!          10980000
*           'ARE SPECIFIED; NONE ARE REQUIRED.');                       10980100
*       RC = 12;                    /* MACRO ERROR                   */ 10980200
*       GO TO LHA03000;                                                 10980300
*     END;                          /* NO: CONTINUE                  */ 10980400
*                                                                       10980500
*   /*****************************************************************/ 10980600
*   /*                                                               */ 10980700
*   /* TYPE PARAMETER MUST BE SPECIFIED AS AN ENTRY IN TABTYPE OR AS */ 10980800
*   /* 'USRN' WHERE N IS 0-F                                         */ 10980900
*   /*                                                               */ 10981000
*   /*****************************************************************/ 10982000
*                                                                       10983000
*   IF LENGTH(TYPE(1)) > 2 THEN     /* TYPE LONG ENOUGH?             */ 10984000
*     IF TYPE(1,1:3) = 'USR' THEN   /* YES: USER TYPE ENTRY?         */ 10985000
*       GO TO LHA02000;             /* YES: GO PROCESS IT            */ 10986000
*   DO I = 1 TO TABENT;             /* SEARCH TABTYPE FOR TYPE       */ 10987000
*     IF TYPE(1) = TABTYPE(I) THEN  /* TYPE FOUND?                   */ 10988000
*       GO TO LHA00500;             /* YES: CONTINUE PROCESSING      */ 10989000
*   END;                            /* NO: TRY NEXT TYPE             */ 10990000
*   ANS MSG('AHA0043  INVALID ''TYPE'' SPECIFIED - ''TYPE'!!TYPE!!'''.' 11000000
*       );                                                              11010000
*   RC = 12;                        /* MACRO ERROR                   */ 11020000
*   GO TO LHA03000;                                                     11030000
*                                                                       11040000
*   /*****************************************************************/ 11050000
*   /*                                                               */ 11060000
*   /* VALIDATE SSRVID OPERAND                                       */ 11070000
*   /*                                                               */ 11080000
*   /*****************************************************************/ 11090000
*                                                                       11100000
*LHA00500:                                                              11110000
*   ;                                                                   11120000
*   IF TYPE ^= '(SSRV)' & NUMBER(SSRVID) ^= 0 THEN /* IF TYPE IS NOT    11130000
*                                      SSRV AND SSRVID IS SPECIFIED,    11140000
*                                                                @L3C*/ 11150000
*     DO;                           /* PROCESS SSRVID ERROR      @L2A*/ 11160000
*       ANS MSG('AHA0023  ''TYPE'!!TYPE!!''' INVALID WITH ''SSRVID'' '  11170000
*           !!'OPERAND.');          /* PUT OUT SSRVID ERROR MESSAGE     11180000
*                                                                @L2A*/ 11190000
*       RC = 12;                    /* SET RETURN CODE TO INDICATE      11200000
*                                      MACRO ERROR               @L2A*/ 11210000
*       GO TO LHA03000;             /* BRANCH TO END OF MACRO    @L2A*/ 11220000
*     END;                                                              11230000
*   IF TYPE = '(SSRV)' & (SSRVID = '()' ! NUMBER(SSRVID) ^= 1) THEN /*  11240000
*                                      IF TYPE IS SSRV AND ONE SSRVID   11250000
*                                      IS NOT SPECIFIED,         @L3A*/ 11260000
*     DO;                           /* PROCESS SSRVID ERROR      @L3A*/ 11270000
*       ANSWER MSG('AHA0043  INVALID ''SSRVID'' SPECIFIED - ''SSRVID'!! 11280000
*           SSRVID!!'''.');         /* PUT OUT SSRVID ERROR MESSAGE     11290000
*                                                                @L3A*/ 11300000
*       RC = 12;                    /* SET RETURN CODE TO INDICATE      11310000
*                                      MACRO ERROR               @L3A*/ 11320000
*       GO TO LHA03000;             /* BRANCH TO END OF MACRO    @L3A*/ 11330000
*     END;                          /* ENDDO PROCESS SSRVID ERROR       11340000
*                                                                @L3A*/ 11350000
*                                                                       11360000
*   /*****************************************************************/ 11370000
*   /*                                                               */ 11380000
*   /* VALIDATE REGS OPERAND                                         */ 11390000
*   /*                                                               */ 11400000
*   /*****************************************************************/ 11410000
*                                                                       11420000
*   IF TYPE ^= '(SSRV)' & TYPE ^= '(RCVY)' & TYPE ^= '(SPIN)'           11430000
*                                          & TYPE ^= '(TIME)' & NUMBER( 11440000
*      REGS) ^= 0 THEN              /* IF TYPE IS NOT SSRV / RCVY /     11450000
*                                      SPIN / TIME                      11460000
*                                      AND REGS IS SPECIFIED,    @L8C*/ 11470000
*     DO;                           /* PROCESS REGS ERROR            */ 11480000
*       ANS MSG('AHA0023  ''TYPE'!!TYPE!!''' INVALID WITH ''REGS'' '!!  11490000
*           'OPERAND.');                                                11500000
*       RC = 12;                    /* MACRO ERROR                   */ 11510000
*       GO TO LHA03000;                                                 11520000
*     END;                                                              11530000
*   IF ((TYPE = '(SSRV)' ! TYPE = '(RCVY)' ! TYPE = '(SPIN)'            11540000
*                                          ! TYPE = '(TIME)') & NUMBER( 11550000
*      REGS) ^= 0 & REGS ^= '((1))') THEN /* IF TYPE IS SSRV, RCVY,     11560000
*                                SPIN, TIME AND REGS IS SPECIFIED AND   11570000
*                                      IS NOT ((1)),             @L8C*/ 11580000
*     DO;                           /* PROCESS REGS ERROR        @L3A*/ 11590000
*       ANSWER MSG('AHA0043  ''REGS((1))'' MUST BE '!!                  11600000
*           'SPECIFIED OR REGS OMITTED FOR ''TYPE'!!TYPE!!'''.'); /*    11610000
*                                      PUT OUT REGS ERROR MESSAGE       11620000
*                                                                @L3A*/ 11630000
*       RC = 12;                    /* SET RETURN CODE TO INDICATE      11640000
*                                      MACRO ERROR               @L3A*/ 11650000
*       GO TO LHA03000;             /* BRANCH TO END OF MACRO    @L3A*/ 11660000
*     END;                          /* ENDDO PROCESS REGS ERROR  @L3C*/ 11670000
*                                                                       11680000
*   /*****************************************************************/ 11690000
*   /*                                                               */ 11700000
*   /* VALIDATE SAVEAREA OPERAND                                     */ 11710000
*   /*                                                               */ 11720000
*   /*****************************************************************/ 11730000
*                                                                       11740000
*   IF TYPE ^= '(SSRV)' & TYPE ^= '(RCVY)' & TYPE ^= '(SPIN)'           11750000
*                                          & TYPE ^= '(SIGA)' &         11760000
*      SAVEAREA ^= TABSA(I) THEN    /* IF TYPE IS NOT SSRV / RCVY /     11770000
*                                      SPIN AND SAVEAREA IS NOT THE     11780000
*                                      ONE SPECIFIED IN SAVEAREA        11790000
*                                      TABLE,                    @L8C*/ 11800000
*     DO;                           /* PROCESS SAVEAREA ERROR    @L3C*/ 11810000
*       ANSWER MSG('AHA0043  ''SAVEAREA'!!TABSA(I)!!''' MUST BE '!!     11820000
*           'SPECIFIED FOR ''TYPE'!!TYPE!!'''.');                       11830000
*       RC = 12;                    /* MACRO ERROR                   */ 11840000
*       GO TO LHA03000;                                                 11850000
*     END;                                                              11860000
*   IF ((TYPE = '(SSRV)' ! TYPE = '(RCVY)' ! TYPE = '(SPIN)'            11870000
*                                          ! TYPE = '(SIGA)') &         11880000
*      SAVEAREA ^= '(STANDARD)' & SAVEAREA ^= '(PSA)') THEN /* IF       11890000
*                                      TYPE IS SSRV /RCVY / SPIN AND    11900000
*                                      SAVEAREA IS NOT STANDARD OR      11910000
*                                      NOT PSA,                  @L8C*/ 11920000
*     DO;                           /* PROCESS SAVEAREA ERROR    @L3A*/ 11930000
*       ANSWER MSG('AHA0043  ''SAVEAREA'!!TABSA(I)!!''' MUST BE '!!     11940000
*           'SPECIFIED FOR ''TYPE'!!TYPE!!'''.'); /* PUT OUT SAVEAREA   11950000
*                                      ERROR MESSAGE             @L3A*/ 11960000
*       RC = 12;                    /* SET RETURN CODE TO INDICATE      11970000
*                                      MACRO ERROR               @L3A*/ 11980000
*       GO TO LHA03000;             /* BRANCH TO END OF MACRO    @L3A*/ 11990000
*     END;                          /* ENDDO PROCESS SAVEAREA ERROR     12000000
*                                                                @L3A*/ 12010000
*                                                                       12020000
*   /*****************************************************************/ 12030000
*   /*                                                               */ 12040000
*   /* VALIDATE INLINE OPERAND                                       */ 12050000
*   /*                                                               */ 12060000
*   /*****************************************************************/ 12070000
*                                                                       12080000
*   IF INLINE ^= '' THEN            /* IF INLINE SPECIFIED       @D1A*/ 12090000
*     IF INLINE = '(YES)' ! INLINE = '(NO)' THEN /* IF VALUE IS VALID   12100000
*                                                                @D1A*/ 12110000
*       DO;                         /*                           @D1A*/ 12120000
*         IF TYPE ^= '(SSRV)' THEN  /* IF TYPE IS NOT SSRV       @D1A*/ 12130000
*           DO;                     /*                           @D1A*/ 12140000
*             ANSWER MSG('AHA0023  ''TYPE'!!TYPE!!                      12150000
*                 ''' INVALID WITH ''INLINE'' OPERAND.'); /* PUT OUT    12160000
*                                      INLINE ERROR MESSAGE      @D1P*/ 12170000
*             RC = 12;              /* SET RETURN CODE TO INDICATE      12180000
*                                      MACRO ERROR               @D1P*/ 12190000
*             GO TO LHA03000;       /* BRANCH TO END OF MACRO    @D1P*/ 12200000
*           END;                    /*                           @D1A*/ 12210000
*       END;                        /*                           @D1A*/ 12220000
*     ELSE                          /* VALUE NOT VALID           @D1A*/ 12230000
*       DO;                         /*                           @D1A*/ 12240000
*         ANS MSG('AHA0043  INVALID ''INLINE'' SPECIFIED - ''INLINE'!!  12250000
*             INLINE!!'''.');       /* PUT OUT INLINE ERROR MESSAGE     12260000
*                                                                @D1A*/ 12270000
*         RC = 12;                  /* SET RETURN CODE TO INDICATE      12280000
*                                      MACRO ERROR               @D1P*/ 12290000
*         GO TO LHA03000;           /* BRANCH TO END OF MACRO    @D1P*/ 12300000
*       END;                        /*                           @D1A*/ 12310000
*                                                                       12320000
*   /*****************************************************************/ 12330000
*   /*                                                               */ 12340000
*   /* GENERATE CODE FOR NON-USER TYPE                               */ 12350000
*   /*                                                               */ 12360000
*   /*****************************************************************/ 12370000
*                                                                       12380000
*LHA01000:                                                              12390000
*   ;                                                                   12400000
*   IF TYPE = '(DSP)' THEN                                              12410000
*     DO;                           /* GENERATE INLINE CODE FOR TASK    12420000
*                                      DISPATCH TRACE                */ 12430000
*       ANS MSG('PTRACE TYPE(DSP) is not supported in PL/X')            12440000
*         NORESCAN;                                           /* @L9A*/ 12450000
*       RETURN CODE(8);                                       /* @L9A*/ 12460000
* /*                                                           20@L9D*/ 12470000
*     END;                                                              12480000
*   IF TYPE = '(SRB)' THEN                                              12490000
*     DO;                           /* GENERATE INLINE CODE FOR         12500000
*                                      INITIAL SRB DISPATCH TRACE    */ 12510000
*       ANS MSG('PTRACE TYPE(SRB) is not supported in PL/X')            12520000
*         NORESCAN;                                           /* @L9A*/ 12530000
*       RETURN CODE(8);                                       /* @L9A*/ 12540000
* /*                                                           20@L9D*/ 12550000
*       GO TO LHA03000;                                                 12560000
*     END;                                                              12570000
*   IF TYPE = '(SSRB)' THEN         /*                           @D2A*/ 12580000
*     DO;                           /* GENERATE INLINE CODE FOR SSRB    12590000
*                                      DISPATCH TRACE            @D2A*/ 12600000
*       ANS MSG('PTRACE TYPE(SSRB) is not supported in PL/X')           12610000
*         NORESCAN;                                           /* @L9A*/ 12620000
*       RETURN CODE(8);                                       /* @L9A*/ 12630000
* /*                                                           20@L9D*/ 12640000
*     END;                          /*                           @D2A*/ 12650000
*   IF TYPE = '(SVC)' THEN                                              12660000
*     DO;                           /* GENERATE INLINE CODE FOR SVC     12670000
*                                      INTERRUPT TRACE               */ 12680000
*       ANS MSG('PTRACE TYPE(SVC) is not supported in PL/X')            12690000
*         NORESCAN;                                           /* @L9A*/ 12700000
*       RETURN CODE(8);                                       /* @L9A*/ 12710000
* /*                                                           20@L9D*/ 12720000
*     END;                                                              12730000
*   IF TYPE = '(SVCR)' THEN                                             12740000
*     DO;                           /* GENERATE INLINE EXPANSION FOR    12750000
*                                      SVC RETURN TRACE              */ 12760000
*       ANS MSG('PTRACE TYPE(SVCR) is not supported in PL/X')           12770000
*         NORESCAN;                                           /* @L9A*/ 12780000
*       RETURN CODE(8);                                       /* @L9A*/ 12790000
* /*                                                           20@L9D*/ 12800000
*     END;                                                              12810000
*                                                                       12820000
*   /*****************************************************************/ 12830000
*   /*                                                               */ 12840000
*   /* GENERATE COMMENT                                              */ 12850000
*   /*                                                               */ 12860000
*   /*****************************************************************/ 12870000
*                                                                       12880000
*   ANSWER('/* REGISTER CONTENT REQUIREMENTS FOR THE PTRACE '!!         12890000
*       'MACRO CAN BE FOUND */') COLUMN(2);                             12900000
*   ANS('/* IN MODULE IEAVETRC, IN '!!'THE SYSTEM LOGIC LIBRARY. */')   12910000
*       COLUMN(2);                                                      12920000
*   IF TYPE = '(SSRV)' & INLINE = '(YES)' THEN /* IF INLINE SSRV @D1A*/ 12930000
*     DO;                           /*                           @D1A*/ 12940000
*       IF INDEX(EHAREGS,'00F') = 0 THEN /* DCL FOR R0 REQUESTED?       12950000
*                                                                @D1A*/ 12960000
*         EHAREGS = EHAREGS !! '00F'; /* NO, REQUEST IT          @D1A*/ 12970000
*       IF SAVEAREA = '(PSA)' THEN  /* IF SAVEAREA(PSA)          @D1A*/ 12980000
*         INSAVE = 'PSATRSAV-PSA+8(0)'; /* USE PSA SAVE AREA     @D1A*/ 12990000
*       ELSE                        /* SAVEAREA(STANDARD)        @D1A*/ 13000000
*         INSAVE = '28(13)          '; /* USE STANDARD SAVE AREA @D1A*/ 13010000
*       ANS('IF ^PSATROFF THEN /* IF TRACE IS ACTIVE   */') COL(MACCOL+ 13020000
*           2);                     /*                           @D1A*/ 13030000
*       ANS('DO;             /* PERFORM INLINE TRACE */') COL(MACCOL+4) 13040000
*           ;                       /*                           @D1A*/ 13050000
*       ANS('RESPECIFY (GPR00F) RESTRICTED;') COLUMN(MACCOL+6); /*      13060000
*                                      GEN RFY FOR REGS          @D1A*/ 13070000
*       ANS('GPR00F='!!SSRVID(1)!!';  /* GET SSRV ID */') COL(MACCOL+6) 13080000
*           ;                       /*                           @D1A*/ 13090000
*       ANS('GEN REFS(PSA,PSAAOLD,PSATOLD,PSATOT,') COL(MACCOL+6); /*   13100000
*                                                                @D1A*/ 13110000
*       ANS('         ASCB,ASCBASID,TOT,TOTSSRV)') COL(MACCOL+6); /*    13120000
*                                                                @D1A*/ 13130000
*       ANS('    NOSETS OPTACROSS;') COLUMN(MACCOL+6); /*        @D1A*/ 13140000
*       ANS('STM   2,9,'!!INSAVE!!' SAVE REGISTERS') COL(10); /* @D1A*/ 13150000
*       ANS('L     4,PSAAOLD-PSA(,0)    GET ASCB ADDRESS') COL(10); /*  13160000
*                                                                @D1A*/ 13170000
*       ANS('L     2,PSATOLD-PSA(,0)    GET TCB ADDRESS') COL(10); /*   13180000
*                                                                @D1A*/ 13190000
*       ANS('L     9,PSATOT-PSA(,0)     GET TOT ADDRESS') COL(10); /*   13200000
*                                                                @D1A*/ 13210000
*       ANS('LR    3,0                  GET SSRV ID') COLUMN(10); /*    13220000
*                                                                @D1A*/ 13230000
*       ANS('SLL   3,16                 SHIFT TO LEFT HALF') COL(10);   13240000
*                                   /*                           @D1A*/ 13250000
*       ANS('ICM   3,B''0011'',ASCBASID-ASCB(4) GET ASID') COL(10); /*  13260000
*                                                                @D1A*/ 13270000
*       ANS('LM    4,8,0(1)             GET PASSED VALUES') COL(10);    13280000
*                                   /*                           @D1A*/ 13290000
*       ANS('TRACE 2,8,TOTSSRV-TOT(9)   ISSUE TRACE INSTRUCTION') COL(  13300000
*           10);                    /*                           @D1A*/ 13310000
*       ANS('LM    2,9,'!!INSAVE!!' RESTORE REGISTERS') COL(10); /*     13320000
*                                                                @D1A*/ 13330000
*       ANS('@ENDGEN;') COLUMN(MACCOL+6); /*                     @D1A*/ 13340000
*       ANS('RESPECIFY (GPR00F) UNRESTRICTED;') COL(MACCOL+6); /* GEN   13350000
*                                      RFY FOR REGS              @D1A*/ 13360000
*       ANS('END;            /* PERFORM INLINE TRACE */') COL(MACCOL+4) 13370000
*           ;                       /*                           @D1A*/ 13380000
*       ANS('ELSE              /* TRACE IS SUSPENDED   */') COL(MACCOL+ 13390000
*           2);                     /*                           @D1A*/ 13400000
*       ANS('?PTRACE TYPE(SSRV) SSRVID'!!SSRVID!!' SAVEAREA'!!SAVEAREA  13410000
*           !!';') COLUMN(MACCOL+4); /*                          @D1A*/ 13420000
*       GO TO LHA03000;             /*                           @D1P*/ 13430000
*     END;                          /*                           @D1A*/ 13440000
*   IF TYPE = '(PGM)' THEN          /* PGM TYPE ?                    */ 13450000
*     DO;                           /* YES: GEN CODE FOR PGM         */ 13460000
*       ANS MSG('PTRACE TYPE(PGM) is not supported in PL/X')            13470000
*         NORESCAN;                                           /* @L9A*/ 13480000
*       RETURN CODE(8);                                       /* @L9A*/ 13490000
* /*                                                           20@L9D*/ 13500000
*     END;                                                              13510000
* PTRACE_IPDEF = 'IPDEF';                                    /*  @LBA*/ 13520000
* PTRACE_I64ANY = 'I64ANY';                                  /*  @LBA*/ 13530000
* IF SYSVERSION ^= '' THEN                                   /*  @LBA*/ 13540000
* DO;                                                        /*  @LBA*/ 13550000
*   DCL ASAXMAC_ISITPLX CHAR EXT;                            /*  @LBA*/ 13560000
*   SAVEISITPLX = ASAXMAC_ISITPLX;                           /*  @LBA*/ 13570000
*   ANS('?ASAXMAC IsItPLX(3,1,0);');                         /*  @LBA*/ 13580000
*   IF ASAXMAC_ISITPLX = 'YES' THEN                          /*  @LBA*/ 13590000
*   DO;                                                      /*  @LBA*/ 13600000
*     ITISZPLX = 'YES';                                      /*  @LBA*/ 13610000
*     DCL PTRACE_ZPLX_DCL CHAR EXT;                          /*  @LBA*/ 13620000
*     IF PTRACE_ZPLX_DCL = '' THEN                           /*  @LBA*/ 13630000
*     DO;                                                    /*  @LBA*/ 13640000
*       ANS('?ASAXMAC SetEhaRegs(02F,03F,04F,05F,06F,07F,08F,' !!       13650000
*            '09F,10F,11F,12F,13P);') RESCAN;                /*  @LBA*/ 13660000
*       TEMP = 'Dcl Entry_Ptrace_I64Any Entry Based Valrg(*) ' !!       13670000
*              'Options(Amode(64) Rmode(Any) ' !!                       13680000
*              'Sets(GPR02F,GPR03F,GPR04F,GPR05F,GPR06F,' !!            13690000
*              '     GPR07F,GPR08F,GPR09F,GPR10F,GPR11F,' !!            13700000
*              '     GPR12F,GPR13P)' !!                                 13710000
*            'NoSave(GPR02F,GPR03F,GPR04F,GPR05F,GPR06F,' !!            13720000
*              '     GPR07F,GPR08F,GPR09F,GPR10F,GPR11F,' !!            13730000
*              '     GPR12F,GPR13P)); ' !!                              13731000
*              'Dcl Entry_Ptrace_IPdef Entry Based Valrg(*) ' !!        13732000
*              'Options(Amode(*) ' !!                                   13733000
*              'Sets(GPR02F,GPR03F,GPR04F,GPR05F,GPR06F,' !!            13734000
*              '     GPR07F,GPR08F,GPR09F,GPR10F,GPR11F,' !!            13735000
*              '     GPR12F,GPR13P)' !!                                 13736000
*            'NoSave(GPR02F,GPR03F,GPR04F,GPR05F,GPR06F,' !!            13737000
*              '     GPR07F,GPR08F,GPR09F,GPR10F,GPR11F,' !!            13738000
*              '     GPR12F,GPR13P)); ';                     /*  @LBA*/ 13739000
*       ANS('?EPILOG STRING(''' !! TEMP !! ''');') RESCAN;   /*  @LBA*/ 13739100
*       PTRACE_ZPLX_DCL = 'YES';                             /*  @LBA*/ 13739200
*     END;                                                   /*  @LBA*/ 13739300
*     PTRACE_IPDEF = 'Entry_Ptrace_IPDef';                   /*  @LBA*/ 13739400
*     PTRACE_I64ANY = 'Entry_Ptrace_I64Any';                 /*  @LBA*/ 13739500
*   END;                                                     /*  @LBA*/ 13739600
*   ASAXMAC_ISITPLX = SAVEISITPLX;                           /*  @LBA*/ 13739700
* END;                                                       /*  @LBA*/ 13739800
*   IF SAVEAREA = '(STANDARD)' THEN /* STANDARD REGISTER SAVING?     */ 13739900
*     DO;                           /* YES: GEN CODE FOR SAVE        */ 13740000
*      IF ITISZPLX = '' THEN                                 /*  @LBA*/ 13740300
*      DO;                                                   /*  @LBA*/ 13740400
*       ANSWER('STM(GPR14F,GPR12F,SA@G1412);  /* SAVE ISSUERS REGS */') 13740500
*           COLUMN(MACCOL+2);       /* SAVE REGISTERS CODE           */ 13740600
*      END;                                                  /*  @LBA*/ 13740700
*      ELSE DO;                                              /*  @LBA*/ 13740800
*       ANSWER('RESPECIFY (GPR13P) RESTRICTED;') COL(MACCOL+2); /*      13740900
*                                      GEN RFY FOR REGS              */ 13741000
*       ANSWER('GEN SETS(SA@G1412) REFS(GPR14F,GPR12F,GPR13P) '         13741100
*                              !! 'FLOWS(AfterLM_' !! MacIndex !! ')')  13741200
*                                                          NoRescan;    13741300
*       ANS('(STM GPR14F,GPR12F,SA@G1412(GPR13P)); /* SAVE REGS */')    13741400
*           COLUMN(MACCOL+2);       /* SAVE REGISTERS CODE           */ 13741500
*      END;                                                  /*  @LBA*/ 13741600
*       IF INDEX(EHAREGS,'12F') = 0 THEN /* DCL FOR R12 REQUESTED?   */ 13741700
*         EHAREGS = EHAREGS !! '12F'; /* NO, REQUEST IT              */ 13741800
*       IF INDEX(EHAREGS,'13P') = 0 THEN /* DCL FOR R13 REQUESTED?   */ 13741900
*         EHAREGS = EHAREGS !! '13P'; /* NO, REQUEST IT              */ 13742000
*       IF INDEX(EHAREGS,'14F') = 0 THEN /* DCL FOR R14 REQUESTED?   */ 13742100
*         EHAREGS = EHAREGS !! '14F'; /* NO, REQUEST IT              */ 13742200
*       IF INDEX(EHAMAPS,'SA@') = 0 THEN /* SAVE AREA DCL REQUESTED? */ 13743000
*         EHAMAPS = EHAMAPS !! 'SA@,'; /* NO, REQUEST IT             */ 13744000
*     END;                                                              13745000
*   IF SAVEAREA = '(PSA)' THEN      /* PSA REGISTER SAVING?          */ 13746000
*     DO;                           /* YES: GEN CODE FOR SAVE        */ 13747000
*      IF ITISZPLX = '' THEN                                 /*  @LBA*/ 13748000
*      DO;                                                   /*  @LBA*/ 13749000
*       ANSWER('STM(GPR00F,GPR15F,PSATRSAV);  /* SAVE ISSUERS REGS */') 13750000
*           COLUMN(MACCOL+2);       /* SAVE REGISTERS CODE           */ 13760000
*      END;                                                  /*  @LBA*/ 13770000
*      ELSE DO;                                              /*  @LBA*/ 13780000
*       ANSWER('GEN SETS(PSATRSAV) REFS(GPR00F,GPR15F) '                13790000
*                              !! 'FLOWS(AfterLM_' !! MacIndex !! ')')  13791000
*                                                          NoRescan;    13792000
*       ANS('(STM GPR00F,GPR15F,PSATRSAV);  /* SAVE ISSUERS REGS */')   13793000
*           COLUMN(MACCOL+2);       /* SAVE REGISTERS CODE           */ 13794000
*      END;                                                  /*  @LBA*/ 13795000
*       IF INDEX(EHAREGS,'00F') = 0 THEN /* DCL FOR R00 REQUESTED?   */ 13796000
*         EHAREGS = EHAREGS !! '00F'; /* NO, REQUEST IT              */ 13797000
*       IF INDEX(EHAREGS,'15F') = 0 THEN /* DCL FOR R15 REQUESTED?   */ 13798000
*         EHAREGS = EHAREGS !! '15F'; /* NO, REQUEST IT              */ 13799000
*     END;                                                              13800000
*   IF SAVEAREA = '(NONE)' THEN     /* SAVE NO REGISTERS?            */ 13810000
*     DO;                           /* YES: GEN CODE FOR SAVE        */ 13820000
*       ANS('RESPECIFY (GPR02F,GPR15F) '!!'RESTRICTED;') COL(MACCOL+2); 13830000
*                                   /* GEN RFY FOR REGS              */ 13840000
*       ANSWER('GPR02F=GPR15F;  /* SAVE REG 15 FOR SERVICE ROUTINE */') 13850000
*           COLUMN(MACCOL+2);       /* GEN REG 15 SAVE               */ 13860000
*       IF INDEX(EHAREGS,'02F') = 0 THEN /* DCL FOR R02 REQUESTED?   */ 13870000
*         EHAREGS = EHAREGS !! '02F'; /* NO, REQUEST IT              */ 13880000
*       IF INDEX(EHAREGS,'15F') = 0 THEN /* DCL FOR R15 REQUESTED?   */ 13890000
*         EHAREGS = EHAREGS !! '15F'; /* NO, REQUEST IT              */ 13900000
*     END;                                                              13901000
*IF ITISZPLX = 'YES' THEN                                   /*   @LBA*/ 13902000
*DO;                                                        /*   @LBA*/ 13903000
*  ANS('DO    Rstd(Dynamic)    ;') SKIP NORESCAN;           /*   @LBA*/ 13904000
*END;                                                       /*   @LBA*/ 13905000
*   IF TYPE = '(PGM)' THEN                                              13906000
*     ANSWER('CALL GPR15P->'!!TABVT(I)!!                                13907000
*         '->'!!PTRACE_IPDEF!!';' !!                                    13908000
*                   '/* CALL SERVICE ROUTINE */') COLUMN(MACCOL+2); /*  13909000
*                                      GEN CALL TO ROUTINE           */ 13910000
*   ELSE                            /* NON PGM,                  @L3C*/ 13920000
*    IF TYPE = '(PCIL)' ! TYPE = '(PCIS)'        /*              @04C*/ 13930000
*      ! TYPE = '(SYNS)' ! TYPE = '(SYNE)' THEN   /*             @04A*/ 13940000
*      DO;                                        /*             @04A*/ 13950000
*        ANSWER('/*  TYPE IS '!! TYPE!!' */') COL(2);   /*       @04A*/ 13960000
*     ANSWER('CALL '!!TABVT(I)!!                                        13970000
*         '->'!!PTRACE_I64ANY!!';'!!                                    13980000
*                    '/* CALL SERVICE ROUTINE */') COLUMN(MACCOL+2); /* 13990000
*                                      GEN CALL TO ROUTINE       @LAA*/ 14000000
*      END;                                       /*             @04A*/ 14010000
*    ELSE                           /* NOT PGM, PCIL, PCIS, SYNS, OR    14020000
*                                      SYNE                      @04C*/ 14030000
*     DO;                           /* GEN CODE FOR NOT PGM, PCIL, PCIS 14040000
*                                      SYNS, SYNE                @04C*/ 14041000
*       IF NUMBER(SSRVID) ^= 0 THEN /* SSRVID IS SPECIFIED       @L3C*/ 14042000
*         DO;                       /* GEN CODE FOR SSRVID       @L3C*/ 14043000
*           ANSWER('RESPECIFY (GPR03F) RESTRICTED;') COL(MACCOL+2); /*  14044000
*                                      GEN RESTRICT SSRVID REGISTER     14045000
*                                                                @L2A*/ 14046000
*           IF INDEX(EHAREGS,'03F') = 0 THEN /* DCL FOR SSRVID          14047000
*                                      REGISTER REQUESTED?       @L2A*/ 14048000
*             EHAREGS = EHAREGS !! '03F'; /* NO, REQUEST IT      @L2A*/ 14049000
*           ANSWER('GPR03F='!!SSRVID(1)!!'*65536;  '!!                  14050000
*               '/* LOAD SSRVID INTO HIGH ORDER HALFWORD OF R3 */') COL 14060000
*               (MACCOL+2);         /* GEN LOAD SSRVID INTO HIGH        14070000
*                                      ORDER HALFWORD OF SSRVID         14080000
*                                      REGISTER                  @L2A*/ 14090000
*         END;                      /* ENDDO GEN CODE FOR SSRVID @L2A*/ 14100000
*       ANSWER('CALL '!!TABVT(I)!!'->'!!PTRACE_IPDEF!!';'!!             14110000
*           '/* CALL SERVICE ROUTINE */') COLUMN(MACCOL+2); /* GEN      14120000
*                                      CALL TO ROUTINE           @L2C*/ 14130000
*       IF NUMBER(SSRVID) ^= 0 THEN /* SSRVID IS SPECIFIED       @L2A*/ 14140000
*         DO;                       /* GEN CODE TO UNRESTRICT SSRVID    14150000
*                                      REGISTER                  @L2A*/ 14160000
*           ANS('RESPECIFY (GPR03F) UNRESTRICTED;') COL(MACCOL+2); /*   14170000
*                                      GEN UNRESTRICT SSRVID REGISTER   14180000
*                                                                @L2A*/ 14190000
*         END;                      /* ENDDO GEN CODE TO UNRESTRICT     14200000
*                                      SSRVID REGISTER           @L2A*/ 14210000
*     END;                          /* ENDDO GEN CODE FOR FOR NON PGM   14220000
*                                                                @L2C*/ 14230000
*   IF SAVEAREA = '(STANDARD)' THEN /* STANDARD REG RESTORING?       */ 14240000
*     DO;                           /* YES: GEN CODE FOR RESTORE     */ 14250000
*      IF ITISZPLX = '' THEN                                 /*  @LBA*/ 14260000
*      DO;                                                   /*  @LBA*/ 14270000
*       ANS('LM(GPR14F,GPR12F,SA@G1412);  /* RESTORE ISSUERS REGS */')  14280000
*           COLUMN(MACCOL+2);       /* RESTORE REGISTERS CODE        */ 14290000
*      END;                                                  /*  @LBA*/ 14300000
*      ELSE DO;                                              /*  @LBA*/ 14310000
*       ANSWER('GEN REFS(GPR14F,GPR12F,SA@G1412,GPR13P)')               14320000
*                                                          NoRescan;    14330000
*       ANS('(LM  GPR14F,GPR12F,SA@G1412(GPR13P)); /* RESTORE REGS */') 14340000
*           COLUMN(MACCOL+2);       /* RESTORE REGISTERS CODE        */ 14350000
*       ANS ('Gen Exit NoSeqflow (DS    0H);') Col(2) Norescan;         14360000
*       ANS('AfterLM_' !! MacIndex !! ':;') Norescan;                   14370000
*/* These GENs make sure that the compiler doesn't over-optimize        14380000
*   an if-then-else and remove the branch around the else clause     */ 14390000
*    ANS('Gen OptAcross NoSets NoRefs ();') Col(2) Norescan;  /* @LCA*/ 14400000
*    ANS('Gen Ctrl ();') Col(2) Norescan;                     /* @LDA*/ 14401000
*       ANS('RESPECIFY (GPR13P) UNRESTRICTED;') COL(MACCOL+2); /* GEN   14410000
*                                      RFY FOR REGS                  */ 14420000
*      END;                                                  /*  @LBA*/ 14430000
*     END;                                                              14440000
*   IF SAVEAREA = '(PSA)' THEN      /* PSA REGISTER RESTORING?       */ 14450000
*     DO;                           /* YES: GEN CODE FOR RESTORE     */ 14460000
*      IF ITISZPLX = '' THEN                                 /*  @LBA*/ 14470000
*      DO;                                                   /*  @LBA*/ 14480000
*       ANS('LM(GPR00F,GPR15F,PSATRSAV);  /* RESTORE ISSUERS REGS */')  14490000
*           COLUMN(MACCOL+2);       /* RESTORE REGISTERS CODE        */ 14500000
*      END;                                                  /*  @LBA*/ 14510000
*      ELSE DO;                                              /*  @LBA*/ 14510100
*       ANSWER('GEN REFS(PSATRSAV,GPR00F,GPR15F) ')                     14510200
*                                                          NoRescan;    14510300
*       ANS('(LM  GPR00F,GPR15F,PSATRSAV); /* RESTORE ISSUERS REGS */') 14510400
*           COLUMN(MACCOL+2);       /* RESTORE REGISTERS CODE        */ 14510500
*       ANS ('Gen Exit NoSeqflow (DS    0H);') Col(2) Norescan;         14510600
*       ANS('AfterLM_' !! MacIndex !! ':;') Norescan;                   14510700
*/* These GENs make sure that the compiler doesn't over-optimize        14510800
*   an if-then-else and remove the branch around the else clause     */ 14510900
*    ANS('Gen OptAcross NoSets NoRefs ();') Col(2) Norescan;  /* @LCA*/ 14511000
*    ANS('Gen Ctrl ();') Col(2) Norescan;                     /* @LDA*/ 14511100
*      END;                                                  /*  @LBA*/ 14512000
*     END;                                                              14513000
*   IF SAVEAREA = '(NONE)' THEN     /* RESTORE NO REGISTERS?         */ 14514000
*     DO;                           /* YES: GEN CODE FOR RESTORE     */ 14515000
*       ANS('RESPECIFY (GPR02F,GPR15F) '!!'UNRESTRICTED;') COL(MACCOL+2 14516000
*           );                      /* GEN RFY FOR REGS              */ 14517000
*     END;                                                              14518000
*   IF TYPE = '(PGM)' THEN          /* PGM TYPE ?                    */ 14519000
*     DO;                           /* YES: GEN CODE FOR PGM         */ 14520000
*       ANS('RESPECIFY (GPR15P) UNRESTRICTED;') COL(MACCOL+2); /* GEN   14530000
*                                      RFY FOR REGS                  */ 14540000
*     END;                                                              14550000
*IF ITISZPLX = 'YES' THEN                                   /*   @LBA*/ 14560000
*DO;                                                        /*   @LBA*/ 14570000
*   ANS('End /* Rstd(Dynamic) */ ;') SKIP NORESCAN;         /*   @LBA*/ 14580000
*END;                                                       /*   @LBA*/ 14581000
*   GO TO LHA03000;                                                     14582000
*                                                                       14583000
*   /*****************************************************************/ 14584000
*   /*                                                               */ 14585000
*   /* PROCESS USER TYPE ENTRY                                       */ 14586000
*   /*                                                               */ 14587000
*   /*****************************************************************/ 14588000
*                                                                       14589000
*LHA02000:                                                              14590000
*   ;                                                                   14600000
*                                                                       14610000
*   /*****************************************************************/ 14620000
*   /*                                                               */ 14621000
*   /* TYPE MUST BE 'USR0' THRU 'USRF' (HEX DIGITS 0-F)              */ 14622000
*   /*                                                               */ 14623000
*   /*****************************************************************/ 14624000
*                                                                       14625000
*   IF LENGTH(TYPE(1)) ^= 4 THEN    /* VALID USER TYPE?              */ 14626000
*     DO;                           /* NO: ERROR                     */ 14627000
*       ANSWER MSG('AHA0043  ''TYPE'' MUST BE ''USRN'' (N IS HEX '!!    14628000
*           'DIGIT 0-F).') NORESCAN;                                    14629000
*       RC = 12;                    /* MACRO ERROR                   */ 14630000
*       GO TO LHA03000;                                                 14640000
*     END;                                                              14650000
*   N = TYPE(1,4:4);                /* GET USER TYPE ENTRY NUMBER    */ 14660000
*   IF (N < '0' ! N > '9') & (N < 'A' ! N > 'F') THEN /* VALID HEX      14670000
*                                      DIGIT 0-F?                    */ 14680000
*     DO;                           /* NO: ERROR                     */ 14690000
*       ANSWER MSG('AHA0043  ''TYPE'' MUST BE ''USRN'' (N IS HEX '!!    14700000
*           'DIGIT 0-F).') NORESCAN;                                    14710000
*       RC = 12;                    /* MACRO ERROR                   */ 14720000
*       GO TO LHA03000;                                                 14730000
*     END;                                                              14740000
*                                                                       14750000
*   /*****************************************************************/ 14760000
*   /*                                                               */ 14770000
*   /* SSRVID MAY NOT BE SPECIFIED                                   */ 14780000
*   /*                                                               */ 14790000
*   /*****************************************************************/ 14800000
*                                                                       14810000
*   IF NUMBER(SSRVID) ^= 0 THEN     /* IF SSRVID IS GIVEN,       @L2A*/ 14820000
*     DO;                           /* PROCESS SSRVID ERROR      @L2A*/ 14830000
*       ANS MSG('AHA0023  ''TYPE'!!TYPE!!''' INVALID WITH ''SSRVID'' '  14840000
*           !!'OPERAND.');          /* PUT OUT SSRVID ERROR MESSAGE     14850000
*                                                                @L2A*/ 14860000
*       RC = 12;                    /* SET RETURN CODE TO INDICATE      14870000
*                                      MACRO ERROR               @L2A*/ 14880000
*       GO TO LHA03000;             /* BRANCH TO END OF MACRO    @L2A*/ 14890000
*     END;                          /* ENDDO PROCESS SSRVID ERROR       14900000
*                                                                @L2A*/ 14910000
*                                                                       14920000
*   /*****************************************************************/ 14930000
*   /*                                                               */ 14940000
*   /* INLINE MAY NOT BE SPECIFIED                                   */ 14950000
*   /*                                                               */ 14960000
*   /*****************************************************************/ 14970000
*                                                                       14980000
*   IF NUMBER(INLINE) ^= 0 THEN     /* IF INLINE IS GIVEN,       @D1A*/ 14990000
*     DO;                           /* PROCESS INLINE ERROR      @D1A*/ 15000000
*       ANS MSG('AHA0023  ''TYPE'!!TYPE!!''' INVALID WITH ''INLINE'' '  15010000
*           !!'OPERAND.');          /* PUT OUT INLINE ERROR MESSAGE     15020000
*                                                                @D1A*/ 15030000
*       RC = 12;                    /* SET RETURN CODE TO INDICATE      15040000
*                                      MACRO ERROR               @D1A*/ 15050000
*       GO TO LHA03000;             /* BRANCH TO END OF MACRO    @D1A*/ 15060000
*     END;                          /* ENDDO PROCESS INLINE ERROR       15070000
*                                                                @D1A*/ 15080000
*                                                                       15090000
*   /*****************************************************************/ 15100000
*   /*                                                               */ 15110000
*   /* REGS MUST BE DEFAULTED, '(1)', OR REGISTER PAIR               */ 15120000
*   /*                                                               */ 15130000
*   /*****************************************************************/ 15140000
*                                                                       15150000
*   IF NUMBER(REGS) = 0 ! REGS = '((1))' THEN /* DEFAULTED REGS?     */ 15160000
*     DO;                                                               15170000
*       RX = '';                    /* YES: INDICATE DEFAULT         */ 15180000
*       RY = '';                                                        15190000
*     END;                                                              15200000
*   ELSE                                                                15210000
*     DO;                           /* NO: VERIFY REG PAIR           */ 15220000
*       IF NUMBER(REGS) ^= 1 THEN   /* ONE PARM?                     */ 15230000
*         DO;                       /* NO: ERROR                     */ 15240000
*           ANSWER MSG('AHA0073  ''REGS'' PARAMETER HAS TOO MANY '!!    15250000
*               'SUBPARAMETERS.');                                      15260000
*           RC = 12;                /* MACRO ERROR                   */ 15270000
*           GO TO LHA03000;                                             15280000
*         END;                                                          15290000
*       IF NUMBER(REGS(1)) ^= 2 ! REGS(1,1,1:1) = '(' ! REGS(1,2,1:1) = 15300000
*          '(' THEN                 /* INVALID REGS?                 */ 15310000
*         DO;                       /* NO, ERROR                     */ 15320000
*           ANSWER MSG('AHA0073 ''REGS'' PARAMETER MUST BE '!!          15330000
*               '''REGS((1))'' OR A REGISTER PAIR.');                   15340000
*           RC = 12;                /* MACRO ERROR                   */ 15350000
*           GO TO LHA03000;                                             15360000
*         END;                                                          15370000
*       RX = REGS(1,1);             /* GET FIRST REGISTER            */ 15380000
*       RY = REGS(1,2);             /* GET SECOND REGISTER           */ 15390000
*     END;                                                              15400000
*                                                                       15410000
*   /*****************************************************************/ 15420000
*   /*                                                               */ 15430000
*   /* GENERATE CODE FOR USER TYPE ENTRIES                           */ 15440000
*   /*                                                               */ 15450000
*   /*****************************************************************/ 15460000
*                                                                       15470000
*   IF INDEX(EHAREGS,'00F') = 0 THEN /* DCL FOR R0 REQUESTED?    @P6A*/ 15480000
*     EHAREGS = EHAREGS !! '00F'; /* NO, REQUEST IT              @P6A*/ 15490000
*   IF INDEX(EHAREGS,'01F') = 0 THEN /* DCL FOR R0 REQUESTED?    @P6A*/ 15500000
*     EHAREGS = EHAREGS !! '01F'; /* NO, REQUEST IT              @P6A*/ 15510000
*   ANSWER('RESPECIFY (GPR00F,GPR01F) RESTRICTED;') COL(MACCOL+2); /*   15520000
*                                      RFY USED REGS                 */ 15530000
*   ANS('GPR00F= '''!!N!!'''X;  /* INDICATE NUMBER */') COL(MACCOL+2);  15540000
*   IF RX = '' THEN                 /* DEFAULT OR (1)? YES: INDICATE    15550000
*                                      PARM ADDR                     */ 15560000
*     ANSWER('GEN SETS(GPR01F) (LA    GPR01F,0(0,GPR01F));  /* '!!      15570000
*         'INDICATE PARM ADDRESS GIVEN */') COLUMN(MACCOL+2);           15580000
*   ELSE                                                                15590000
*     DO;                           /* NO: INDICATE REG PAIR GIVEN   */ 15600000
*       ANS('GEN SETS(GPR01F) (LA    GPR01F,('!!RX!!'*X''10'')+'!!RY!!  15610000
*           '); /* LOAD REG PAIR NUMBERS */') COLUMN(MACCOL+2);         15620000
*       IF TRACEMODE ^= '(TRACG)' THEN /* If TRACE               @P6A*/ 15630000
*       ANS('GPR01F=GPR01F!TRVTRPMK;  /* INDICATE REG PAIR GIVEN */')   15640000
*           COLUMN(MACCOL+2);                                           15650000
*       ELSE                        /* TRACG                     @P6A*/ 15660000
*         DO;                       /* TRACG                     @P6A*/ 15670000
*           IF INDEX(EHAREGS64,'01P') = 0 THEN /*                @P6A*/ 15680000
*             EHAREGS64 = EHAREGS64 !! '01P'; /*                 @P6A*/ 15690000
*           ANS('G64R01P = G64R01P !'  !!                               15700000
*               ' ''8000000000000000''X; /* Indicate reg ' !!           15710000
*               'pair given */') COLUMN(MACCOL+2); /*            @P6A*/ 15720000
*         END;                      /* TRACG                     @P6A*/ 15730000
*     END;                                                              15740000
*                                                                       15750000
*   /*****************************************************************/ 15760000
*   /*                                                               */ 15770000
*   /* TRACE MODE MAY HAVE BEEN SPECIFIED                            */ 15780000
*   /*                                                               */ 15790000
*   /*****************************************************************/ 15800000
*                                                                       15810000
*   IF TRACEMODE ^= '(TRACE)' & TRACEMODE ^= ' ' THEN                   15820000
*     DO;                                                               15830000
*       IF TRACEMODE ^= '(TRACG)' THEN /* TRACE MODE SPECIFIED   @P4C*/ 15840000
*         DO;                       /* ERROR IN TRACEMODE               15850000
*                                      SPECIFICATION             @L6A*/ 15860000
*           ANSWER MSG('AHA1111  TRACEMODE OPERAND '''!!TRACEMODE!!     15870000
*               ''' IS           NOT VALID.'); /* PUT OUT TRACEMODE     15880000
*                                      ERROR MESSAGE             @L6A*/ 15890000
*           RC = 12;                                                    15900000
*           GO TO LHA03000;                                             15910000
*         END DO;                                                       15920000
*       IF SYSAM64 ^= 'YES' THEN                                        15930000
*         DO;                                                           15940000
*           ANSWER MSG('AHA1112  TRACEMODE=TRACG REQUIRES AMODE 64');   15950000
*           RC = 12;                /* MACRO ERROR               @L6A*/ 15960000
*           GO TO LHA03000;                                             15970000
*         END DO;                                                       15980000
*       GO TO LHA04000;             /* CALL IEAVETUG ROUTINE     @L6A*/ 15990000
*     END;                                                              16000000
*                                                                       16010000
*   /*****************************************************************/ 16020000
*   /*                                                               */ 16030000
*   /* SAVEAREA MUST BE 'STANDARD'                                   */ 16040000
*   /*                                                               */ 16050000
*   /*****************************************************************/ 16060000
*                                                                       16070000
*   IF SAVEAREA ^= '(STANDARD)' THEN /* INVALID OPTION?              */ 16080000
*     DO;                           /* YES: ERROR                    */ 16090000
*       ANSWER MSG('AHA0043  ''SAVEAREA(STANDARD)'' MUST BE '!!         16100000
*           'SPECIFIED FOR ''TYPE'!!TYPE!!'''.');                       16110000
*       RC = 12;                    /* MACRO ERROR                   */ 16120000
*       GO TO LHA03000;                                                 16130000
*     END;                                                              16140000
*   ANS('CALL TRVTETUR->I31ANY; /*CALL SERVICE ROUTINE*/') COL(MACCOL+2 16150000
*       );                          /* GEN CALL TO ROUTINE       @L6C*/ 16160000
*   GO TO LHA05000;                 /*                           @L6A*/ 16170000
*                                                                       16180000
*   /*****************************************************************/ 16190000
*   /*                                                               */ 16200000
*   /* SAVEAREA MUST BE 'F4SA'                                       */ 16210000
*   /*                                                               */ 16220000
*   /*****************************************************************/ 16230000
*                                                                       16240000
*LHA04000:                          /*                           @L6A*/ 16250000
*   IF SAVEAREA ^= '(F4SA)' THEN    /* INVALID OPTION?           @L6A*/ 16260000
*     DO;                           /* YES: ERROR                @L6A*/ 16270000
*       ANSWER MSG('AHA0043  ''SAVEAREA(F4SA)'' MUST BE '!!             16280000
*           'SPECIFIED FOR ''TYPE'!!TYPE!!'''.');                       16290000
*       RC = 12;                    /* MACRO ERROR               @L6A*/ 16300000
*       GO TO LHA03000;                                                 16310000
*     END;                                                              16320000
*   ANSWER('CALL TRVTETUG->I64ANY; /* CALL SERVICE ROUTINE*/') COLUMN(  16330000
*       MACCOL+2);                  /* GEN CALL TO ROUTINE /*    @L6A*/ 16340000
*LHA05000:                          /*                           @L6A*/ 16350000
*   ANSWER('RESPECIFY (GPR00F,GPR01F) UNRESTRICTED;') COL(MACCOL+2);    16360000
*                                   /* GEN RFY FOR USED REGS         */ 16370000
*                                                                       16380000
*   /*****************************************************************/ 16390000
*   /*                                                               */ 16400000
*   /* REQUEST GLOBAL VARIABLE DECLARES FROM EPILOG                  */ 16410000
*   /*                                                               */ 16420000
*   /*****************************************************************/ 16430000
*                                                                       16440000
*   IF INDEX(EHAREGS,'00F') = 0 THEN /* DCL FOR R0 REQUESTED?        */ 16450000
*     EHAREGS = EHAREGS !! '00F';   /* NO, REQUEST IT                */ 16460000
*   IF INDEX(EHAREGS,'01F') = 0 THEN /* DCL FOR R1 REQUESTED?        */ 16470000
*     EHAREGS = EHAREGS !! '01F';   /* NO, REQUEST IT                */ 16480000
*LHA03000:                                                              16490000
*   ANSWER('END; '!!COMMENT(CMT)) COLUMN(MACCOL);                       16500000
*   RETURN CODE(RC);                /* MACRO END                     */ 16510000
*   %END PTRACE;                                                        16520000
