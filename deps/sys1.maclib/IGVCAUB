*                                                                       00001000
* %DCL IGVCAUB_INCLUDED CHAR EXT;                                       00002000
* %DEACTIVATE IGVCAUB_INCLUDED;                                         00003000
* %IF IGVCAUB_INCLUDED = '' %THEN                                       00004000
* %DO;                                                                  00005000
*/* Macro made bi-lingual on 19002. CBGEN compile date 15295         */ 00006000
*% /*                                                                   00007000
         MACRO                                                          00008000
         IGVCAUB &DSECT=YES,&LIST=YES,&TITLE=YES,&CAUB=YES,            *00009000
               &CAUB_RUCSA_EXTENSION=COND                               00010000
         GBLC  &IGVCAUB_INCLUDED                                        00011000
         GBLC  &ZCBPRINT                                                00012000
&IGVCAUB_INCLUDED SETC 'YES'                                            00013000
         AIF   ('&LIST' EQ 'NONE').P0                                   00014000
         AIF   ('&TITLE' EQ 'NO').P5                                    00015000
 TITLE   'IGVCAUB  - Common Area User Block                         '   00016000
.P5      ANOP                                                           00017000
**/ IGVCAUB_1:;                                                         00018000
*/* START OF SPECIFICATIONS ******************************************  00019000
*                                                                       00020000
* IGVCAUB      Common Area User Block.                                  00021000
*                                                                       00022000
*01* DESCRIPTIVE NAME:  Common Area User Block                          00023000
*                                                                       00024000
*02*    ACRONYM:  CAUB                                                  00025000
*                                                                       00026000
*01* MACRO-NAME:  IGVCAUB                                               00027000
*                                                                    */ 00028000
*/*01* PROPRIETARY STATEMENT=                                        */ 00029000
*/***PROPRIETARY_STATEMENT********************************************/ 00030000
*/*                                                                  */ 00031000
*/*                                                                  */ 00032000
*/* LICENSED MATERIALS - PROPERTY OF IBM                             */ 00033000
*/* 5650-ZOS COPYRIGHT IBM CORP. 1992, 2019                          */ 00034000
*/*                                                                  */ 00035000
*/* STATUS= HBB77C0                                                  */ 00036000
*/*                                                                  */ 00037000
*/***END_OF_PROPRIETARY_STATEMENT*************************************/ 00038000
*/*                                                                     00039000
*01*  EXTERNAL CLASSIFICATION: PI                                       00040000
*01*  END OF EXTERNAL CLASSIFICATION:                                   00041000
*                                                                       00042000
*01* DSECT NAME: CAUB                                                   00043000
*                                                                       00044000
*01* COMPONENT:  Virtual Storage Manager (SC1CH)                        00045000
*                                                                       00046000
*01* EYE-CATCHER:  CAUB                                                 00047000
*02*    OFFSET:  8                                                      00048000
*02*    LENGTH:  4                                                      00049000
*                                                                       00050000
*01* STORAGE ATTRIBUTES:                                                00051000
*02*    SUBPOOL:  245                                                   00052000
*02*    KEY:  0                                                         00053000
*02*    RESIDENCY:  Above 16M line                                      00054000
*                                                                       00055000
*01* SIZE:                                                              00056000
*      CAUB_RUCSA_EXTENSION -- X'0018' bytes                            00057000
*      CAUB                 -- X'0068' bytes                            00058000
*                                                                       00059000
*01* CREATED BY:                                                        00060000
*02*    IGVGCAS (VSM address space creation module).                    00061000
*02*    IEAIPL04 (VSM IPL Resource Initialization Module).              00062000
*02*    IGVRQVR2 (VSM cell definition).                                 00063000
*02*    IGVSFBTB (VSMDATA summary/detail table).                        00064000
*02*    IGVSFOWN (VSMDATA OWNCOMM report).                              00065000
*02*    IGVVSCEL (VSM cell processing).                                 00066000
*                                                                       00067000
*01* POINTED TO BY:                                                     00068000
*       VAB_CAUB                                                        00069000
*       VAB_AS_CAUB                                                     00070000
*       GDASCAUB                                                        00071000
*       GDAFCAUB                                                        00072000
*       GDALCAUB                                                        00073000
*       CAUB_Unowned_Next                                               00074000
*       CAUB_Unowned_Prev                                               00075000
*                                                                       00076000
*       Details are as follows:                                         00077000
*                                                                       00078000
*        Address Space CAUB is pointed to by:                           00079000
*          ASCBASSB -> ASSBVAB -> VAB_AS_CAUB -> CAUB                   00080000
*                                                                       00081000
*        System CAUB is pointed to by:                                  00082000
*          GDASCAUB -> CAUB                                             00083000
*                                                                       00084000
*        ASCBASSB -> ASSBVAB -> VAB_CAUB points to:                     00085000
*         - Address Space CAUB                                          00086000
*           While no job is running                                     00087000
*         - Job CAUB                                                    00088000
*           While a job is running                                      00089000
*         - System CAUB                                                 00090000
*           After address space end but before the ASCB                 00091000
*           is re-initialized                                           00092000
*                                                                       00093000
*        Unknown CAUB (aka "no detail" CAUB) is pointed to by:          00094000
*          GDAUCAUB -> CAUB                                             00095000
*                                                                       00096000
*        CAUBs on the Unowned Queue (aka "owner gone" CAUBs)            00097000
*        are anchored by:                                               00098000
*          GDAFCAUB - Address of 1st CAUB on the unowned queue.         00099000
*                     (GDAFCAUB has the address of itself when the      00100000
*                     queue is empty.)                                  00101000
*          GDALCAUB - Address of last CAUB on the unowned queue.        00102000
*                     (GDALCAUB is not valid and should not be used     00103000
*                     when the queue is empty.)                         00104000
*                                                                       00105000
*02*     Unowned Queue is double headed, double threaded, circular.     00106000
*                                                                       00107000
*01* SERIALIZATION:                                                     00108000
*02*  When writing to the CAUB, VSM uses the VSMFIX lock.               00109000
*                                                                       00110000
*02*  When monitor programs read the CAUB, it would be best to do       00111000
*     so with no serialization.  (This is because holding the lock      00112000
*     could impact system performance.)  Note that this means that      00113000
*     the CAUB could be freemained while being read.  The CAUB may      00114000
*     also be put on the queue of free CAUBs while being read.          00115000
*     Monitors will need to handle this (e.g., a recovery routine       00116000
*     could catch the reference to a freemained CAUB, and               00117000
*     encountering a CAUB on the free queue could be taken as the       00118000
*     end of the queue being run.)  A CAUB on the free queue has a      00119000
*     CAUB_ID field that is not 'CAUB'.                                 00120000
*                                                                       00121000
*01* FUNCTION:                                                          00122000
*     Lists the number of bytes of common storage that are 'in use'.    00123000
*     (Bytes that have been given to a caller of GETMAIN or STORAGE     00124000
*     OBTAIN are 'in use'.)                                             00125000
*                                                                       00126000
*02*  The CAUB_Level field will change if the CAUB changes.             00127000
*     Users should interrogate the CAUB_Level field, and ignore         00128000
*     CAUBs with an unrecognized level.                                 00129000
*                                                                       00130000
*02*  There are 5 types of CAUBs:                                       00131000
*                                                                       00132000
*02*   -*- The job CAUB is a CAUB that describes storage owned by a     00133000
*          job. In general, a job owns all the common storage that is   00134000
*          GETMAINed when the address space in which the job runs is    00135000
*          the home address space.  (See the "Owner" keyword on the     00136000
*          Getmain, Storage and Cpool macros for information about      00137000
*          when the home address space is not the owner.)               00138000
*                                                                       00139000
*02*   -*- The address space CAUB describes storage obtained by an      00140000
*          initiator address space when it is between jobs. For         00141000
*          example, storage that is GETMAINed between the end of a      00142000
*          batch job and the beginning of the next batch job is         00143000
*          collected in the address space CAUB.                         00144000
*                                                                       00145000
*02*   -*- The system CAUB describes storage owned by the system. The   00146000
*          system owns common storage that was GETMAINed during times   00147000
*          when it would be impossible or misleading to assign          00148000
*          ownership to the job running in the home address space.      00149000
*          For example, storage obtained during IPL, before any         00150000
*          address spaces exist, is owned by the system. In addition,   00151000
*          some operating system components explicitly indicate that    00152000
*          the storage they obtain should be owned by the system.       00153000
*                                                                       00154000
*02*   -*- The "No Detail" CAUB describes common storage that was in    00155000
*          use at the instant CSA tracking was stopped or started.      00156000
*                                                                       00157000
*02*   -*- An "Owner Gone" CAUB describes storage owned by a job that   00158000
*          has terminated.  These CAUBs are linked together on the      00159000
*          "unowned" queue.                                             00160000
*                                                                       00161000
*02*  CAUBs may have a CAUB RUCSA extension when a RUCSA is defined.    00162000
*     The Caub_Rucsa_Ext_Addr is used to indicate if a RUCSA            00163000
*     extension is provided.                                            00164000
*                                                                       00165000
*01* METHOD OF ACCESS:                                                  00166000
*02*  PL/AS:                                                            00167000
*      -*- CAUB is based on CAUBPTR.                                    00168000
*      -*- Setting the macro variable %ZCBPRINT to 'NO' suppresses the  00169000
*          printing of the CAUB.                                        00170000
*      -*- Setting the macro variable %IGVCAUB_LIST to 'NO' suppresses  00171000
*          the printing of the CAUB.                                    00172000
*02*  Assembler                                                         00173000
*      -*- Specifying IGVCAUB DSECT=NO suppresses the DSECT statement.  00174000
*      -*- Specifying IGVCAUB LIST=NO suppresses the printing of        00175000
*          the CAUB mapping.                                            00176000
*      -*- Specifying IGVCAUB CAUB=NO suppresses the generation of the  00177000
*          the CAUB mapping.                                            00178000
*      -*- Macro variable ZCBPRINT allows the printing of the CAUB to   00179000
*          be suppressed by another macro.                              00180000
*                                                                       00181000
*                                                                       00182000
*01* DELETED BY:                                                        00183000
*     IGVGCAS  (VSM Address space termination resource manager)         00184000
*     IGVSJOBT (VSM Job termination resource manager)                   00185000
*                                                                       00186000
*01* STORAGE ESTIMATE:                                                  00187000
*     -*- 1 per system, plus                                            00188000
*     -*- 1 per active address space, plus                              00189000
*     -*- 1 per job that owned some common storage when it terminated.  00190000
*                                                                       00191000
*                                                                       00192000
*01* NOTES:                                                             00193000
*     The CAUB is a product sensitive programming interface because     00194000
*     it is used for monitoring and requires knowledge of MVS           00195000
*     internals.                                                        00196000
*                                                                       00197000
*     A tool was used to make this macro bilingual.  The tool created   00198000
*     the macro variable IGVCAUB_INCLUDED.  Its function is to cause    00199000
*     the CAUB to expand only once, regardless of how many times it     00200000
*     was %INCLUDED.  The tool added some other macro logic that is     00201000
*     described in the 'Method of Access' section.                      00202000
*                                                                       00203000
*                                                                       00204000
*      -*- For some types of address spaces (e.g., started              00205000
*          tasks, TSO logons), only 1 job runs in the address space.    00206000
*                                                                       00207000
* ****************                                                      00208000
*                                                                       00209000
*  The allocated counts in the GDA (e.g., GDA_CSA_ALLOC)                00210000
*  will ONLY match the sum of the CAUB counts (e.g., CAUB_CSA_BELOW)    00211000
*  (job, address space, system, unowned CAUBs) if tracking has been     00212000
*  on since IPL.                                                        00213000
*                                                                       00214000
*  If tracking is ever OFF, the difference between the GDA field        00215000
*  and the sum in the CAUBs represents the amount of storage that       00216000
*  was allocated at the time tracking was turned back on that is still  00217000
*  allocated.                                                           00218000
*                                                                       00219000
*  And the difference between the value in the Unknown CAUB and         00220000
*  the difference above represents the amount of storage that was       00221000
*  allocated at the time tracking was turned back on that was           00222000
*  subsequently freed.                                                  00223000
*                                                                       00224000
*                                                                       00225000
* CHANGE ACTIVITY =                                                     00226000
*        $L0=TCSAU  ,HBB4430,911101,PDF5:  Track CSA/SQA use by Job     00227000
*        $L1=TCSAU  ,HBB4430,920218,PDF5:  ShowHdr, comment changes.    00228000
*        $D1=DKB0031,HBB4430,920318,PDXB:  Data Incomplete              00229000
*        $L2=CSAOV  ,HBB7708,020420,PDXB:  Detect/Protect               00230000
* $AD=UKCSA    HBB77C0 181204 PD00FX: RUCSA extension                   00231000
*                                                                       00232000
* END OF SPECIFICATIONS **********************************************/ 00233000
*% /*                                                                   00234000
.P0      ANOP                                                           00235000
         AIF   ('&ZCBPRINT' EQ 'NO').P1                                 00236000
         AIF   ('&LIST' EQ 'YES').P2                                    00237000
.P1      ANOP                                                           00238000
         PUSH  PRINT                                                    00239000
         PRINT OFF                                                      00240000
.P2      ANOP                                                           00241000
         AIF   ('&CAUB' EQ 'NO').L0002                                  00242000
         AIF   ('&DSECT' EQ 'YES').L0003                                00243000
         AIF   ('&CAUB' NE 'YES').L0002                                 00244000
CAUB     DS    0D        Common area user block.                        00245000
         AGO   .L0004                                                   00246000
.L0003   ANOP                                                           00247000
CAUB     DSECT           Common area user block.                        00248000
.L0004   ANOP                                                           00249000
CAUB_HEADER DS CL52      Header for CAUB_Proper. (CAUB_Proper has the  *00250000
                         counts, CAUB_Header has owner information.)    00251000
*                                                                       00252000
*      ***************************************************************  00253000
*      *                                                             *  00254000
*      * Link fields pertaining to the unowned queue. CAUBs are put  *  00255000
*      * on this queue when a job or address space terminates holding*  00256000
*      * some common storage. These fields are the first thing in the*  00257000
*      * CAUB because that makes queue manipulation a little easier. *  00258000
*      *                                                             *  00259000
*      ***************************************************************  00260000
*                                                                       00261000
*                                                                       00262000
         ORG   CAUB_HEADER                                              00263000
CAUB_UNOWNED_NEXT DS A   Address of the next CAUB on the 'unowned'     *00264000
                         queue.                                         00265000
CAUB_UNOWNED_PREV DS A   Address of the previous CAUB on the 'unowned' *00266000
                         queue. This is double threaded to make it     *00267000
                         easy to remove elements from the middle.       00268000
*                                                                       00269000
*      ***************************************************************  00270000
*      *                                                             *  00271000
*      * Fields that identify this control block as a CAUB.          *  00272000
*      *                                                             *  00273000
*      ***************************************************************  00274000
*                                                                       00275000
*                                                                       00276000
CAUB_ID  DS    CL4       Char string 'CAUB' - eyecatcher.               00277000
CAUB_LEVEL DS  H         Indicates the level of the CAUB. The value    *00278000
                         can be used to determine how the CAUB is      *00279000
                         mapped. CAUB_LEVEL_K1 indicates the HBB4430   *00280000
                         level of this macro. Equate value             *00281000
                         CAUB_LEVEL_KCURRENT can be used to determine  *00282000
                         the most recent update level.                  00283000
         DS    CL2       Reserved                                       00284000
*                                                                       00285000
*      ***************************************************************  00286000
*      *                                                             *  00287000
*      * Fields that identify the job that owns some common storage. *  00288000
*      *                                                             *  00289000
*      ***************************************************************  00290000
*                                                                       00291000
*                                                                       00292000
*                                                                       00293000
*      ***************************************************************  00294000
*      *                                                             *  00295000
*      * Part of the process of completing a common area GETMAIN     *  00296000
*      * requires that VSM decide which CAUB describes the job doing *  00297000
*      * the GETMAIN. Which CAUB is chosen depends on how the GETMAIN*  00298000
*      * was coded. The coder can choose to have VSM update the      *  00299000
*      * counts in the CAUB associated with the home, primary or     *  00300000
*      * secondary address space. The coder can also specify that VSM*  00301000
*      * use the 'system CAUB', which is associated with no address  *  00302000
*      * space.                                                      *  00303000
*      *                                                             *  00304000
*      ***************************************************************  00305000
*                                                                       00306000
*                                                                       00307000
CAUB_CALLERID DS CL36                                                   00308000
         ORG   CAUB_CALLERID                                            00309000
CAUB_ASN_WORD DS CL4     Whole register is stored here, but only bits  *00310000
                         16-31 are meaningful.                          00311000
         ORG   CAUB_ASN_WORD                                            00312000
         DS    CL2       Reserved, set to 0 when CAUB_ASN is stored.    00313000
CAUB_ASN DS    BL2       Address Space Number (ASN) identifying the    *00314000
                         address space that is associated with the job *00315000
                         that owns some common storage. Note: '00'X    *00316000
                         here means that this CAUB tracks 'system'     *00317000
                         storage, which is not associated with any     *00318000
                         address space. This field comes from          *00319000
                         ASCBASID.                                      00320000
CAUB_JOBNAME DS CL8      Name of the job that was active when the      *00321000
                         storage was obtained. This is taken from      *00322000
                         ASCBJBNI or ASCBJBNS.                          00323000
CAUB_JOBID DS  CL8       Items from the JSAB that identify the owning  *00324000
                         job. These are obtained via the IAZXJSAB      *00325000
                         macro.                                         00326000
         ORG   CAUB_JOBID                                               00327000
CAUB_WORKID DS CL8       Work Unit ID, aka Job ID. This comes from the *00328000
                         JSAB. (There is 1 'valid' JSAB per address    *00329000
                         space) This ID is NOT unique within an        *00330000
                         instance of MVS when running in a 'Poly-JES'  *00331000
                         environment. Also, this ID is null for        *00332000
                         entities started under the master scheduler   *00333000
                         subsystem (e.g., some system address spaces,  *00334000
                         some started tasks).                           00335000
*                                                                       00336000
*      ***************************************************************  00337000
*      *                                                             *  00338000
*      * Fields pertaining to the unowned queue. CAUBs are put on    *  00339000
*      * this queue when a job or address space terminates holding   *  00340000
*      * some common storage. These fields are undefined (and        *  00341000
*      * probably 0) for CAUBs describing jobs that have not         *  00342000
*      * terminated.                                                 *  00343000
*      *                                                             *  00344000
*      ***************************************************************  00345000
*                                                                       00346000
*                                                                       00347000
CAUB_UNOWNED_DATE DS CL4 Date when the owner of this common storage    *00348000
                         terminated. This is undefined (and probably   *00349000
                         0) for active jobs. Format is decimal,        *00350000
                         0YYYYDDD, YYYY=Year, DDD=Day (Julian). For    *00351000
                         example, 01992001 represents Jan 1, 1992.     *00352000
                         (See documentation of the 'TIME' macro.)       00353000
CAUB_UNOWNED_TIME DS CL4 Time when the owner of this common storage    *00354000
                         terminated. This is undefined (and probably   *00355000
                         0) for active jobs. (Packed decimal,          *00356000
                         HHMMSSth, HH=Hours, MM=Minutes, SS=Seconds,   *00357000
                         t=tenths, h=hundredths See documentation of   *00358000
                         the 'TIME' macro.)                             00359000
*                                                                       00360000
*      ***************************************************************  00361000
*      *                                                             *  00362000
*      * Various flags.                                              *  00363000
*      *                                                             *  00364000
*      ***************************************************************  00365000
*                                                                       00366000
*                                                                       00367000
CAUB_FLAGS DS  CL4                                                      00368000
         ORG   CAUB_FLAGS                                               00369000
CAUB_TYPE DS   CL1       Indicates if this CAUB is a Job CAUB, an      *00370000
                         address space CAUB, or a system CAUB, and     *00371000
                         indicates whether this CAUB is on the unowned *00372000
                         queue. Note that there is no bit to identify  *00373000
                         the unknown (aka the "no detail") Caub.        00374000
*  Bit definitions:                                                     00375000
CAUB_UNOWNED EQU X'80'   If on, this CAUB is on the unowned queue.     *00376000
                         Needed by FREEMAIN, so it can determine       *00377000
                         whether to free this CAUB if the counts are   *00378000
                         0. A CAUB on the unowned queue is still       *00379000
                         marked as a Job or Address Space CAUB.         00380000
*                                                                       00381000
*      ***************************************************************  00382000
*      *                                                             *  00383000
*      * No more than one of the following bits should be on. Any    *  00384000
*      * other combination indicates a VSM bug.                      *  00385000
*      *                                                             *  00386000
*      ***************************************************************  00387000
*                                                                       00388000
*                                                                       00389000
CAUB_SYSTEM EQU X'40'    If on, this CAUB is the 'system' CAUB. Common *00390000
                         storage obtained by system functions should   *00391000
                         be charged to the system. Thus, the job CAUB  *00392000
                         is sometimes really the system CAUB.          *00393000
                         CAUB_System exists to make it easy to tell    *00394000
                         when this is the case.                         00395000
CAUB_JOB EQU   X'20'     If on, this CAUB is a 'job CAUB'. (See        *00396000
                         "Function" section for more information on    *00397000
                         'job CAUB').                                   00398000
CAUB_ADDRESSSPACE EQU X'10' If on, this CAUB is an                     *00399000
                         'address space CAUB'. See "Function" section  *00400000
                         for more information on 'address space CAUB'   00401000
CAUB_DATAINCOMPLETE DS CL1 Bits indicating that tracking was not       *00402000
                         enabled at some point during the life of this *00403000
                         CAUB                                           00404000
*  Bit definitions:                                                     00405000
CAUB_CSADATAINCOMPLETE EQU X'80' If on, tracking for CSA data was not  *00406000
                         enabled at some point during the life of this *00407000
                         CAUB. This includes RUCSA if it exists.        00408000
CAUB_SQADATAINCOMPLETE EQU X'40' If on, tracking for SQA data was not  *00409000
                         enabled at some point during the life of this *00410000
                         CAUB                                           00411000
         ORG   CAUB_FLAGS+4                                             00412000
CAUB_RUCSA_EXT_ADDR DS A Address of the Caub_Rucsa_Extension or zero   *00413000
                         if no extension exists                         00414000
*                                                                       00415000
*      ***************************************************************  00416000
*      *                                                             *  00417000
*      * The fields below contain a count of how much common storage *  00418000
*      * is being used by the entity described in CAUB_Header.       *  00419000
*      *                                                             *  00420000
*      ***************************************************************  00421000
*                                                                       00422000
*                                                                       00423000
CAUB_COUNTS DS CL16                                                     00424000
         ORG   CAUB_COUNTS                                              00425000
CAUB_CSA_BELOW DS F      Amount of GETMAINed non-extended CSA storage, *00426000
                         in bytes, owned by the entity described in    *00427000
                         CAUB_Header. For the system CAUB (pointed to  *00428000
                         by GDASCAUB), this includes the entire size   *00429000
                         of the non-extended RUCSA. Subtract           *00430000
                         GDA_RUCSA_SIZE to get the CSA-only            *00431000
                         allocation.                                    00432000
CAUB_SQA_BELOW DS F      Amount of GETMAINed non-extended SQA storage, *00433000
                         in bytes, owned by the entity described in    *00434000
                         CAUB_Header.                                   00435000
CAUB_CSA_ABOVE DS F      Amount of GETMAINed extended CSA storage, in  *00436000
                         bytes, owned by the entity described in       *00437000
                         CAUB_Header. For the system CAUB (pointed to  *00438000
                         by GDASCAUB), this includes the entire size   *00439000
                         of the extended RUCSA. Subtract               *00440000
                         GDA_ERUCSA_SIZE to get the CSA-only           *00441000
                         allocation.                                    00442000
CAUB_SQA_ABOVE DS F      Amount of GETMAINed extended SQA storage, in  *00443000
                         bytes, owned by the entity described in       *00444000
                         CAUB_Header.                                   00445000
         DS    CL4                                                      00446000
CAUB_PROTECT_COUNTS DS CL16                                             00447000
         ORG   CAUB_PROTECT_COUNTS                                      00448000
CAUB_PROTECT_CSA_BELOW DS F Amount of GETMAINed non-extended CSA       *00449000
                         storage, in bytes, owned by the entity        *00450000
                         described in CAUB_Header, used for Protect    *00451000
                         Area                                           00452000
CAUB_PROTECT_SQA_BELOW DS F Amount of GETMAINed non-extended SQA       *00453000
                         storage, in bytes, owned by the entity        *00454000
                         described in CAUB_Header, used for Protect    *00455000
                         Area                                           00456000
CAUB_PROTECT_CSA_ABOVE DS F Amount of GETMAINed extended CSA storage,  *00457000
                         in bytes, owned by the entity described in    *00458000
                         CAUB_Header, used for Protect Area             00459000
CAUB_PROTECT_SQA_ABOVE DS F Amount of GETMAINed extended SQA storage,  *00460000
                         in bytes, owned by the entity described in    *00461000
                         CAUB_Header, used for Protect Area             00462000
CAUB_DETECT_COUNTS DS CL16                                              00463000
         ORG   CAUB_DETECT_COUNTS                                       00464000
CAUB_DETECT_CSA_BELOW DS F Amount of GETMAINed non-extended CSA        *00465000
                         storage, in bytes, owned by the entity        *00466000
                         described in CAUB_Header, used for Detect     *00467000
                         Suffix                                         00468000
CAUB_DETECT_SQA_BELOW DS F Amount of GETMAINed non-extended SQA        *00469000
                         storage, in bytes, owned by the entity        *00470000
                         described in CAUB_Header, used for Detect     *00471000
                         Suffix                                         00472000
CAUB_DETECT_CSA_ABOVE DS F Amount of GETMAINed extended CSA storage,   *00473000
                         in bytes, owned by the entity described in    *00474000
                         CAUB_Header, used for Detect Suffix            00475000
CAUB_DETECT_SQA_ABOVE DS F Amount of GETMAINed extended SQA storage,   *00476000
                         in bytes, owned by the entity described in    *00477000
                         CAUB_Header, used for Detect Suffix            00478000
CAUB_LEN EQU   *-CAUB                                                   00479000
.L0002   ANOP                                                           00480000
         AIF   ('&CAUB_RUCSA_EXTENSION' EQ 'NO').L0005                  00481000
         AIF   ('&DSECT' EQ 'YES').L0006                                00482000
         AIF   ('&CAUB_RUCSA_EXTENSION' NE 'YES').L0005                 00483000
.L0006   ANOP                                                           00484000
*                                                                       00485000
*    RUCSA Extension.                                                   00486000
*    Describes the RUCSA area usage.                                    00487000
*    Valid only if Caub_Rucsa_Ext_Addr is non-zero.                     00488000
*                                                                       00489000
*                                                                       00490000
         AIF   ('&DSECT' EQ 'YES').L0007                                00491000
CAUB_RUCSA_EXTENSION DS 0F RUCSA extension if one exists                00492000
         AGO   .L0008                                                   00493000
.L0007   ANOP                                                           00494000
CAUB_RUCSA_EXTENSION DSECT   RUCSA extension if one exists              00495000
.L0008   ANOP                                                           00496000
CAUB_RUCSA_BELOW DS F    Amount of GETMAINed non-extended RUCSA        *00497000
                         storage, in bytes, owned by the entity        *00498000
                         described in CAUB_Header.                      00499000
CAUB_RUCSA_ABOVE DS F    Amount of GETMAINed extended RUCSA storage,   *00500000
                         in bytes, owned by the entity described in    *00501000
                         CAUB_Header.                                   00502000
CAUB_RUCSA_PROTECT_BELOW DS F Amount of GETMAINed non-extended RUCSA   *00503000
                         storage, in bytes, owned by the entity        *00504000
                         described in CAUB_Header, used for Protect    *00505000
                         Area                                           00506000
CAUB_RUCSA_PROTECT_ABOVE DS F Amount of GETMAINed extended RUCSA       *00507000
                         storage, in bytes, owned by the entity        *00508000
                         described in CAUB_Header, used for Protect    *00509000
                         Area                                           00510000
CAUB_RUCSA_DETECT_BELOW DS F Amount of GETMAINed non-extended RUCSA    *00511000
                         storage, in bytes, owned by the entity        *00512000
                         described in CAUB_Header, used for Detect     *00513000
                         Suffix                                         00514000
CAUB_RUCSA_DETECT_ABOVE DS F Amount of GETMAINed extended RUCSA        *00515000
                         storage, in bytes, owned by the entity        *00516000
                         described in CAUB_Header, used for Detect     *00517000
                         Suffix                                         00518000
CAUB_ID_K EQU  C'CAUB'   Eyecatcher.                                    00519000
CAUB_ASN_KSYSTEM EQU 0   When CAUB_ASN contains this value, there is   *00520000
                         no owning address space - the storage is      *00521000
                         owned by the 'system'.                         00522000
CAUB_LEVEL_KCURRENT EQU 1 Most recent level of the CAUB.                00523000
*                                                                       00524000
*    *****************************************************************  00525000
*    *                                                               *  00526000
*    * Constants are declared for every existing level of the CAUB.  *  00527000
*    *                                                               *  00528000
*    *****************************************************************  00529000
*                                                                       00530000
*                                                                       00531000
CAUB_LEVEL_K1 EQU 1      HBB4430 level                                  00532000
CAUB_RUCSA_EXTENSION_LEN EQU *-CAUB_RUCSA_EXTENSION                     00533000
.L0005   ANOP                                                           00534000
         AIF   ('&ZCBPRINT' EQ 'NO').P3                                 00535000
         AIF   ('&LIST' EQ 'YES').P4                                    00536000
.P3      ANOP                                                           00537000
         POP   PRINT                                                    00538000
.P4      ANOP                                                           00539000
.P_EXIT  ANOP                                                           00540000
         MEND                                                           00541000
**/ IGVCAUB_2:;                                                         00542000
* %IGVCAUB_INCLUDED = 'YES';                                            00543000
* %DCL ZCBPRINT CHAR EXT;                                               00544000
* %DEACTIVATE ZCBPRINT;                                                 00545000
* %DCL IGVCAUB_LIST CHAR EXT;                                           00546000
* %DEACTIVATE IGVCAUB_LIST;                                             00547000
* %IF IGVCAUB_LIST ^= 'NO' &                                            00548000
*    ZCBPRINT ^= 'NO' %THEN                                             00549000
*   %GOTO IGVCAUB_3;                                                    00550000
*   @LIST PUSH NOECHO;                                                  00551000
*   @LIST NOASSEMBLE NOECHO;                                            00552000
*   @LIST OFF C NOECHO;                                                 00553000
* %IGVCAUB_3:;                                                          00554000
*/* Start of PL/X Source                                             */ 00555000
*@EJECT;                                                                00556000
*                                                                       00557000
*DCL 1  CAUB Based(CAUBPtr),  /* Common area user block.             */ 00558000
*     3 CAUB_Header,          /* Header for CAUB_Proper.  (CAUB_Proper  00559000
*                                has the counts, CAUB_Header has owner  00560000
*                                information.)                          00561000
*                                                                    */ 00562000
*                                                                       00563000
*        /*  Link fields pertaining to the unowned queue.   CAUBs are   00564000
*            put on this queue when a job or address space terminates   00565000
*            holding some common storage.  These fields are the first   00566000
*            thing in the CAUB because that makes queue manipulation a  00567000
*            little easier.                                             00568000
*                                                                    */ 00569000
*      5 CAUB_Unowned_Next Ptr(31), /* Address of the next CAUB         00570000
*                                on the 'unowned' queue.                00571000
*                                                                    */ 00572000
*      5 CAUB_Unowned_Prev Ptr(31), /* Address of the previous CAUB     00573000
*                                on the 'unowned' queue. This is        00574000
*                                double threaded to make it easy to     00575000
*                                remove elements from the middle.       00576000
*                                                                    */ 00577000
*     /* Fields that identify this control block as a CAUB.             00578000
*                                                                    */ 00579000
*      5 CAUB_ID Char(4),     /* Char string 'CAUB' - eyecatcher.    */ 00580000
*      5 CAUB_Level Fixed(16), /* Indicates the level of the CAUB.      00581000
*                                 The value can be used to determine    00582000
*                                 how the CAUB is mapped. CAUB_LEVEL_K1 00583000
*                                 indicates the HBB4430 level of        00584000
*                                 this macro. Equate value              00585000
*                                 CAUB_LEVEL_KCURRENT can be used       00586000
*                                 to determine the most recent          00587000
*                                 update level.                         00588000
*                                                                    */ 00589000
*      5 * Char(2),            /* Reserved                              00590000
*                                                                    */ 00591000
*     /* Fields that identify the job that owns some common storage.    00592000
*                                                                    */ 00593000
*@SPACE;                                                                00594000
*     /*  Part of the process of completing a common area GETMAIN       00595000
*         requires that VSM decide which CAUB describes the job doing   00596000
*         the GETMAIN.  Which CAUB is chosen depends on how the         00597000
*         GETMAIN was coded.  The coder can choose to have VSM update   00598000
*         the counts in the CAUB associated with the home, primary or   00599000
*         secondary address space.  The coder can also specify that     00600000
*         VSM use the 'system CAUB', which is associated with no        00601000
*         address space.                                                00602000
*                                                                    */ 00603000
*      5 CAUB_CallerID,                                                 00604000
*                                                                       00605000
*        7 CAUB_ASN_Word,     /* Whole register is stored here, but     00606000
*                               only bits 16-31 are meaningful.         00607000
*                                                                    */ 00608000
*          9 * Char(2),        /* Reserved, set to 0 when CAUB_ASN      00609000
*                               is stored.                              00610000
*                                                                    */ 00611000
*          9 CAUB_ASN Bit(16), /* Address Space Number (ASN)            00612000
*                               identifying the address space that      00613000
*                               is associated with the job that owns    00614000
*                               some common storage.  Note:  '00'X      00615000
*                               here means that this CAUB tracks        00616000
*                               'system' storage, which is not          00617000
*                               associated with any address space.      00618000
*                               This field comes from ASCBASID.         00619000
*                                                                    */ 00620000
*                                                                       00621000
*        7 CAUB_Jobname Char(8), /* Name of the job that was active     00622000
*                                when the storage was obtained.         00623000
*                                This is taken from ASCBJBNI or         00624000
*                                ASCBJBNS.                              00625000
*                                                                    */ 00626000
*        7 CAUB_JobID,           /* Items from the JSAB that identify   00627000
*                                the owning job.  These are obtained    00628000
*                                via the IAZXJSAB macro.                00629000
*                                                                    */ 00630000
*          9 CAUB_WorkID Char(8), /* Work Unit ID, aka Job ID. This     00631000
*                                comes from the JSAB.  (There is 1      00632000
*                                'valid' JSAB per address space) This   00633000
*                                ID is NOT unique within an instance    00634000
*                                of MVS when running in a 'Poly-JES'    00635000
*                                environment.  Also, this ID is null    00636000
*                                for entities started under the master  00637000
*                                scheduler subsystem (e.g., some system 00638000
*                                address spaces, some started tasks).   00639000
*                                                                   */  00640000
*        /*  Fields pertaining to the unowned queue.   CAUBs are put    00641000
*            on this queue when a job or address space terminates       00642000
*            holding some common storage.  These fields are undefined   00643000
*            (and probably 0) for CAUBs describing jobs that have not   00644000
*            terminated.                                                00645000
*                                                                    */ 00646000
*        7 CAUB_Unowned_Date Char(4),   /* Date when the owner of this  00647000
*                                common storage terminated.  This is    00648000
*                                undefined (and probably 0) for active  00649000
*                                jobs.  Format is decimal, 0YYYYDDD,    00650000
*                                YYYY=Year, DDD=Day (Julian).  For      00651000
*                                example, 01992001 represents Jan 1,    00652000
*                                1992.  (See documentation of the       00653000
*                                'TIME' macro.)                         00654000
*                                                                    */ 00655000
*        7 CAUB_Unowned_Time Char(4),   /* Time when the owner          00656000
*                                of this common storage terminated.     00657000
*                                This is undefined (and probably 0)     00658000
*                                for active jobs.  (Packed decimal,     00659000
*                                HHMMSSth, HH=Hours, MM=Minutes,        00660000
*                                SS=Seconds, t=tenths, h=hundredths     00661000
*                                See documentation of the 'TIME'        00662000
*                                macro.)                                00663000
*                                                                    */ 00664000
*        /*  Various flags.                                             00665000
*                                                                    */ 00666000
*        7 CAUB_Flags CHAR(4),                                          00667000
*         9 CAUB_Type,        /* Indicates if this CAUB is a Job CAUB,  00668000
*                                an address space CAUB, or a system     00669000
*                                CAUB, and indicates whether this CAUB  00670000
*                                is on the unowned queue.               00671000
*                                Note that there is no bit to identify  00672000
*                                the unknown (aka the "no detail")      00673000
*                                Caub.                                  00674000
*                                                                    */ 00675000
*           11 CAUB_Unowned Bit(1), /* If on, this CAUB is on the       00676000
*                                unowned queue. Needed by FREEMAIN,     00677000
*                                so it can determine whether to free    00678000
*                                this CAUB if the counts are 0.         00679000
*                                A CAUB on the unowned queue is still   00680000
*                                marked as a Job or Address Space CAUB. 00681000
*                                                                    */ 00682000
*             /* No more than one of the following bits should          00683000
*                be on.  Any other combination                          00684000
*                indicates a VSM bug.                                   00685000
*                                                                    */ 00686000
*           11 CAUB_System   Bit(1), /* If on, this CAUB is the         00687000
*                                'system' CAUB.  Common storage         00688000
*                                obtained by system functions should    00689000
*                                be charged to the system.  Thus, the   00690000
*                                job CAUB is sometimes really the       00691000
*                                system CAUB.  CAUB_System exists to    00692000
*                                make it easy to tell when this is the  00693000
*                                case.                                  00694000
*                                                                    */ 00695000
*           11 CAUB_Job      Bit(1), /* If on, this CAUB is a           00696000
*                                'job CAUB'.  (See "Function" section   00697000
*                                for more information on 'job CAUB').   00698000
*                                                                    */ 00699000
*           11 CAUB_AddressSpace Bit(1), /* If on, this CAUB is an      00700000
*                                'address space CAUB'. See "Function"   00701000
*                                section for more information on        00702000
*                                'address space CAUB'                */ 00703000
*         9 CAUB_DataIncomplete,         /* Bits indicating that        00704000
*                                tracking was not enabled at some       00705000
*                                point during the life of this CAUB     00706000
*                                                                @D1A*/ 00707000
*           11 CAUB_CsaDataIncomplete Bit(1), /* If on, tracking for    00708000
*                                CSA data was not enabled at some       00709000
*                                point during the life of this CAUB.    00710000
*                                This includes RUCSA if it exists.      00711000
*                                                                @ADC*/ 00712000
*           11 CAUB_SqaDataIncomplete Bit(1), /* If on, tracking for    00713000
*                                SQA data was not enabled at some       00714000
*                                point during the life of this CAUB     00715000
*                                                                @D1A*/ 00716000
*        7 Caub_Rucsa_Ext_Addr Ptr(31), /*                              00717000
*                                 Address of the Caub_Rucsa_Extension   00718000
*                                 or zero if no extension exists @ADC*/ 00719000
*                                                                       00720000
*        /* The fields below contain a count of how much common         00721000
*           storage is being used by the entity described in            00722000
*           CAUB_Header.                                                00723000
*                                                                    */ 00724000
*     3 CAUB_Counts,                                                    00725000
*       5 CAUB_CSA_Below Fixed(31), /* Amount of GETMAINed              00726000
*                                  non-extended CSA storage, in bytes,  00727000
*                                  owned by the entity described in     00728000
*                                  CAUB_Header.                         00729000
*                                  For the system CAUB (pointed to by   00730000
*                                  GDASCAUB), this includes the entire  00731000
*                                  size of the non-extended RUCSA.      00732000
*                                  Subtract GDA_RUCSA_SIZE to get the   00733000
*                                  CSA-only allocation.          @ADC*/ 00734000
*       5 CAUB_SQA_Below Fixed(31), /* Amount of GETMAINed              00735000
*                                  non-extended SQA storage, in bytes,  00736000
*                                  owned by the entity described in     00737000
*                                  CAUB_Header.                         00738000
*                                                                    */ 00739000
*       5 CAUB_CSA_Above Fixed(31), /* Amount of GETMAINed              00740000
*                                  extended CSA storage, in bytes,      00741000
*                                  owned by the entity described in     00742000
*                                  CAUB_Header.                         00743000
*                                  For the system CAUB (pointed to by   00744000
*                                  GDASCAUB), this includes the entire  00745000
*                                  size of the extended RUCSA.          00746000
*                                  Subtract GDA_ERUCSA_SIZE to get the  00747000
*                                  CSA-only allocation.          @ADC*/ 00748000
*       5 CAUB_SQA_Above Fixed(31), /* Amount of GETMAINed              00749000
*                                  extended SQA storage, in bytes,      00750000
*                                  owned by the entity described in     00751000
*                                  CAUB_Header.                         00752000
*                                                                    */ 00753000
*       3 * Char(4),                                                    00754000
*     3 CAUB_Protect_Counts BDY(DWORD),                       /* @L2A*/ 00755000
*       5 CAUB_Protect_CSA_Below Fixed(31), /* Amount of GETMAINed      00756000
*                                  non-extended CSA storage, in bytes,  00757000
*                                  owned by the entity described in     00758000
*                                  CAUB_Header, used for Protect Area   00759000
*                                                                @L2A*/ 00760000
*       5 CAUB_Protect_SQA_Below Fixed(31), /* Amount of GETMAINed      00761000
*                                  non-extended SQA storage, in bytes,  00762000
*                                  owned by the entity described in     00763000
*                                  CAUB_Header, used for Protect Area   00764000
*                                                                @L2A*/ 00765000
*       5 CAUB_Protect_CSA_Above Fixed(31), /* Amount of GETMAINed      00766000
*                                  extended CSA storage, in bytes,      00767000
*                                  owned by the entity described in     00768000
*                                  CAUB_Header, used for Protect Area   00769000
*                                                                @L2A*/ 00770000
*       5 CAUB_Protect_SQA_Above Fixed(31), /* Amount of GETMAINed      00771000
*                                  extended SQA storage, in bytes,      00772000
*                                  owned by the entity described in     00773000
*                                  CAUB_Header, used for Protect Area   00774000
*                                                                @L2A*/ 00775000
*     3 CAUB_Detect_Counts,        /*                            @L2A*/ 00776000
*       5 CAUB_Detect_CSA_Below Fixed(31), /* Amount of GETMAINed       00777000
*                                  non-extended CSA storage, in bytes,  00778000
*                                  owned by the entity described in     00779000
*                                  CAUB_Header, used for Detect Suffix  00780000
*                                                                @L2A*/ 00781000
*       5 CAUB_Detect_SQA_Below Fixed(31), /* Amount of GETMAINed       00782000
*                                  non-extended SQA storage, in bytes,  00783000
*                                  owned by the entity described in     00784000
*                                  CAUB_Header, used for Detect Suffix  00785000
*                                                                @L2A*/ 00786000
*       5 CAUB_Detect_CSA_Above Fixed(31), /* Amount of GETMAINed       00787000
*                                  extended CSA storage, in bytes,      00788000
*                                  owned by the entity described in     00789000
*                                  CAUB_Header, used for Detect Suffix  00790000
*                                                                @L2A*/ 00791000
*       5 CAUB_Detect_SQA_Above Fixed(31), /* Amount of GETMAINed       00792000
*                                  extended SQA storage, in bytes,      00793000
*                                  owned by the entity described in     00794000
*                                  CAUB_Header, used for Detect Suffix  00795000
*                                                                @L2A*/ 00796000
*       3 * Char(0) BDY(DWORD);                                         00797000
*                                                                       00798000
* /* RUCSA Extension.                                                   00799000
*    Describes the RUCSA area usage.                                    00800000
*    Valid only if Caub_Rucsa_Ext_Addr is non-zero.              @ADC*/ 00801000
* Dcl 1 Caub_Rucsa_Extension                                            00802000
*           Based(Caub_Rucsa_Ext_Addr) /*                               00803000
*                                  RUCSA extension if one exists @ADA*/ 00804000
*    ,3 Caub_Rucsa_Below Fixed(32) /*                                   00805000
*                                  Amount of GETMAINed non-extended     00806000
*                                  RUCSA storage, in bytes,             00807000
*                                  owned by the entity described in     00808000
*                                  CAUB_Header.                         00809000
*                                                                @ADA*/ 00810000
*    ,3 Caub_Rucsa_Above Fixed(32) /*                                   00811000
*                                  Amount of GETMAINed extended         00812000
*                                  RUCSA storage, in bytes,             00813000
*                                  owned by the entity described in     00814000
*                                  CAUB_Header.                         00815000
*                                                                @ADA*/ 00816000
*    ,3 Caub_Rucsa_Protect_Below Fixed(32) /*                           00817000
*                                  Amount of GETMAINed non-extended     00818000
*                                  RUCSA storage, in bytes,             00819000
*                                  owned by the entity described in     00820000
*                                  CAUB_Header, used for Protect Area   00821000
*                                                                @ADA*/ 00822000
*    ,3 Caub_Rucsa_Protect_Above Fixed(32) /*                           00823000
*                                  Amount of GETMAINed extended         00824000
*                                  RUCSA storage, in bytes,             00825000
*                                  owned by the entity described in     00826000
*                                  CAUB_Header, used for Protect Area   00827000
*                                                                @ADA*/ 00828000
*    ,3 Caub_Rucsa_Detect_Below Fixed(32) /*                            00829000
*                                  Amount of GETMAINed non-extended     00830000
*                                  RUCSA storage, in bytes,             00831000
*                                  owned by the entity described in     00832000
*                                  CAUB_Header, used for Detect Suffix  00833000
*                                                                @ADA*/ 00834000
*    ,3 Caub_Rucsa_Detect_Above Fixed(32) /*                            00835000
*                                  Amount of GETMAINed extended         00836000
*                                  RUCSA storage, in bytes,             00837000
*                                  owned by the entity described in     00838000
*                                  CAUB_Header, used for Detect Suffix  00839000
*                                                                @ADA*/ 00840000
*    ;                                                        /* @ADA*/ 00841000
* Dcl Caub_kCaubPlusRucsaExtLen Constant(Length(CAUB)                   00842000
*         + Length(Caub_Rucsa_Extension)); /*                           00843000
*                                  Length of a CAUB with the RUCSA      00844000
*                                  extension                     @ADA*/ 00845000
*                                                                       00846000
* DCL CAUB_ID_K Char(4) Constant('CAUB');       /* Eyecatcher.          00847000
*                                                                    */ 00848000
* DCL CAUB_ASN_KSystem Fixed(16) Constant(0);       /* When CAUB_ASN    00849000
*                                  contains this value, there is no     00850000
*                                  owning address space - the storage   00851000
*                                  is owned by the 'system'.            00852000
*                                                                    */ 00853000
* DCL CAUB_Level_KCurrent Fixed(8) Constant(1); /* Most recent          00854000
*                                  level of the CAUB.                   00855000
*                                                                    */ 00856000
*        /*  Constants are declared for every existing level of the     00857000
*            CAUB.                                                      00858000
*                                                                    */ 00859000
* DCL CAUB_Level_K1 Fixed(8) Constant(1);    /* HBB4430 level        */ 00860000
*                                                                       00861000
* @LOGIC;                                                               00862000
* #PRAGMA TOOL=CBGEN.                                                   00863000
* #USEORG.                                                              00864000
* #DELETE.Caub_kCaubPlusRucsaExtLen                                     00865000
* #EPRAGMA.                                                             00866000
* @ENDLOGIC;                                                            00867000
*                                                                       00868000
*                                                                       00869000
*                                                                       00870000
*/* End of PL/X Source                                               */ 00871000
*/* End of PL/X Source                                               */ 00872000
* %IF IGVCAUB_LIST ^= 'NO' &                                            00873000
*    ZCBPRINT ^= 'NO' %THEN                                             00874000
*   %GOTO IGVCAUB_4;                                                    00875000
*   @LIST POP NOECHO;                                                   00876000
* %IGVCAUB_4:;                                                          00877000
* %END;                                                                 00878000
