*%GOTO OSRQL1; /*                                                       00050000
         MACRO                                                          04800000
&LABEL   OSREQ &FUNCTION,&BUFLIST=,&COLLECTN=,&IADDRESS=,&LENGTH=,     x04850000
               &MGMTCLAS=,&MSGAREA=,&NAME=,&OFFSET=,                   x04900000
               &QEL=,&RECALL=,&RETCODE2=,&RELBUF=,&REACODE=,&RETCODE=, x04926500
               &RETPD=,&SIZE=,&STORCLAS=,&TOKEN=,&VIEW=,               x04953000
               &TTOKEN=,&STOKEN=,&STIMEOUT=,&CANCEL=,              @L5Cx04955000
               &DELHOLD=,&EVENTEXP=,&BUFFER64=,&SIZE64=,           @L7Cx04957000
               &OFFSET64=,&LENGTH64=,&DB2ID=,&MF=                  @L8C 04958000
         AGO   .OSRQBGN                                                 04959000
.*/                                                                     04963500
*%OSRQL1:;                                                              04968000
*/********************************************************************/ 04972500
*/*                                                                  */ 04977000
*/* $MAC(OSREQ) COMP(OSR) PROD(OAM):                                 */ 04981500
*/*                                                                  */ 04986000
*/*PROPRIETARY V3 STATEMENT                                          */ 04993500
*/*LICENSED MATERIALS - PROPERTY OF IBM                              */ 05001000
*/*"RESTRICTED MATERIALS OF IBM"                                     */ 05008500
*/*5650-ZOS                                                          */ 05014100
*/*COPYRIGHT IBM CORP. 1989, 2017                                    */ 05019700
*/*END PROPRIETARY V3 STATEMENT                                      */ 05025300
*/*                                                                  */ 05025800
*/*                                                                  */ 05031000
*/* FUNCTION: This macro provides the user interface to the          */ 05035500
*/*           Object Storage Manager.                                */ 05040000
*/*                                                                  */ 05044500
*/* SYNTAX: label OSREQ function ! (function)                        */ 05049000
*/*                   ,BUFLIST=                                      */ 05053500
*/*                   ,COLLECTN=                                     */ 05058000
*/*                   ,IADDRESS=                                 @D1A*/ 05062500
*/*                   ,LENGTH=                                       */ 05067000
*/*                   ,MGMTCLAS=                                     */ 05071500
*/*                   ,MSGAREA=                                      */ 05076000
*/*                   ,NAME=                                         */ 05080500
*/*                   ,OFFSET=                                       */ 05085000
*/*                   ,QEL=                                          */ 05089500
*/*                   ,RECALL=                                   @L4A*/ 05091000
*/*                   ,RETCODE2=                                 @P4C*/ 05092500
*/*                   ,RELBUF=                                       */ 05094000
*/*                   ,REACODE=                                      */ 05098500
*/*                   ,RETCODE=                                      */ 05103000
*/*                   ,RETPD=                                        */ 05107500
*/*                   ,SIZE=                                         */ 05112000
*/*                   ,STORCLAS=                                     */ 05116500
*/*                   ,TOKEN=                                        */ 05121000
*/*                   ,VIEW=                                     @02A*/ 05125500
*/*                   ,TTOKEN=                                   @L2A*/ 05127700
*/*                   ,STOKEN=                                   @L5A*/ 05128200
*/*                   ,STIMEOUT=                                 @L5A*/ 05128700
*/*                   ,CANCEL=                                   @L5A*/ 05129200
*/*                   ,DELHOLD=                                  @L6A*/ 05129400
*/*                   ,EVENTEXP=                                 @L6A*/ 05129600
*/*                   ,BUFFER64=                                 @L7A*/ 05129700
*/*                   ,SIZE64=                                   @L7A*/ 05129800
*/*                   ,OFFSET64=                                 @L7A*/ 05129900
*/*                   ,LENGTH64=                                 @L7A*/ 05130000
*/*                   ,DB2ID=                                    @L8A*/ 05130100
*/*                   ,MF=L!(M,op1,COMPLETE)!(E,op1,COMPLETE)        */ 05134000
*/*                                                                  */ 05134500
*/*              op1 (Execute/Modify macro forms)=                   */ 05139000
*/*                       RX-type address or                         */ 05143500
*/*                       register (2) - (12)                        */ 05148000
*/*                                                                  */ 05152500
*/*   -----------------------------------------------------------    */ 05156200
*/*   !Function #-----> ! 1 ! 2 ! 3 ! 4 ! 5 ! 6 ! 7 ! 8 ! 9 ! 10!@L5C*/ 05159900
*/*   -----------------------------------------------------------    */ 05163600
*/*   !Function---->    ! A ! S ! R ! Q ! C ! D ! U ! S ! S ! S !@L5C*/ 05167300
*/*   !                 ! C ! T ! E ! U ! H ! E ! N ! T ! T ! T !@L5C*/ 05171000
*/*   !Keyword          ! C ! O ! T ! E ! A ! L ! A ! O ! O ! O !@L5C*/ 05174700
*/*   !  !              ! E ! R ! R ! R ! N ! E ! C ! R ! R ! R !@L5C*/ 05178400
*/*   !  !              ! S ! E ! I ! Y ! G ! T ! C ! E ! E ! E !@L5C*/ 05182100
*/*   !  !              ! S !   ! E !   ! E ! E ! E ! B ! P ! E !@L5C*/ 05185800
*/*   !  !              !   !   ! V !   !   !   ! S ! E ! R ! N !@L5C*/ 05189500
*/*   !  V              !   !   ! E !   !   !   ! S ! G ! T ! D !@L5C*/ 05193200
*/*   !----------------------------------------------------------    */ 05196900
*/*   ! Function........! R ! R ! R ! R ! R ! R ! R ! R ! R ! R !@L5C*/ 05200600
*/*  1!BUFLIST ! BUFFER64   ! A ! A !   !   !   !   ! X ! A ! X !@L7C*/ 05204300
*/*  2! COLLECTN........!   ! A ! A ! A ! A ! A !   ! A ! X ! X !@L5C*/ 05208000
*/*  3! IADDRESS........!   !   !   !   !   !   !   ! X ! X ! X !@L5C*/ 05211700
*/*  4!LENGTH ! LENGTH64!   !   !A64!   !   !   !   ! X ! X ! X !@L7C*/ 05215400
*/*  5! MGMTCLAS........!   !   !   !   !   !   !   !   ! X ! X !@L5C*/ 05219100
*/*  6! MSGAREA.........!   !   !   !   !   !   !   !   !   !   !@L5C*/ 05222800
*/*  7! NAME............!   ! A ! A ! A ! A ! A !   ! A ! X ! X !@L5C*/ 05226500
*/*  8!OFFSET ! OFFSET64!   !   !   !   !   !   !   ! X ! A ! X !@L7C*/ 05230200
*/*  9! QEL.............!   !   !   ! A !   !   !   ! X ! X ! X !@L5C*/ 05233900
*/* 10! RECALL..........!   !   !   !   !   !   !   ! X ! X ! X !@L5C*/ 05237600
*/* 11! RETCODE2........!   !   !   !   !   !   !   ! X ! X !   !@L5C*/ 05241300
*/* 12! RELBUF..........!   !   !   !   !   !   !   ! X !   ! X !@L5C*/ 05245000
*/* 13! REACODE.........!   !   !   !   !   !   !   !   !   !   !@L5C*/ 05248700
*/* 14! RETCODE.........!   !   !   !   !   !   !   !   !   !   !@L5C*/ 05252400
*/* 15! RETPD...........!   !   !   !   !   !   !   !   ! X ! X !@L5C*/ 05256100
*/* 16!SIZE ! SIZE64....!   ! A !   !   !   !   !   ! A ! A ! A !@L7C*/ 05259800
*/* 17! STORCLAS........!   !   !   !   !   !   !   !   ! X ! X !@L5C*/ 05263500
*/* 18! TOKEN...........! A ! A ! A ! A ! A ! A ! A ! A ! A ! A !@L5C*/ 05267200
*/* 19! VIEW............!   !   !   !   !   !   !   ! X ! X ! X !@L5C*/ 05270900
*/* 20! TTOKEN..........!   !   !   !   !   !   !   !   !   !   !@L5C*/ 05274600
*/* 21! STOKEN..........! X ! X ! X ! X ! X ! X ! X ! A ! A ! A !@L5A*/ 05278300
*/* 22! STIMEOUT........! X ! X ! X ! X ! X ! X ! X !   ! X ! X !@L5A*/ 05282000
*/* 23! CANCEL..........! X ! X ! X ! X ! X ! X ! X ! X ! X !   !@L5A*/ 05285700
*/* 24! DELHOLD.........! X !   ! X ! X !   ! X ! X !   ! X ! X !@L6A*/ 05288400
*/* 25! EVENTEXP........! X ! X ! X ! X !   ! X ! X ! X ! X ! X !@L6A*/ 05291100
*/* 26! DB2ID...........!   ! X ! X ! X ! X ! X ! X ! X ! X ! X !@L8A*/ 05292000
*/* 27! MF..............! R ! R ! R ! R ! R ! R ! R ! R ! R ! R !@L8C*/ 05293800
*/*      --------------------------------------------                */ 05296500
*/*                                                                  */ 05301000
*/*       R  = Required keyword                                      */ 05305500
*/*       A  = Optional keyword from a syntactic standpoint but      */ 05310000
*/*            required if COMPLETE coded on MF. It is required      */ 05314500
*/*            during execution.                                     */ 05319000
*/*       A64= Like "A" but required for 64bit only              @L7A*/ 05320000
*/*       X  = Keyword not allowed                               @L5A*/ 05321200
*/*                                                                  */ 05323500
*/* NOTE: 1. All keywords not listed as "A","R", or "X" are optional */ 05328000
*/*          on all macro forms for all functions.               @L5C*/ 05332500
*/*                                                                  */ 05337000
*/*       2. If the function (first positional parameter) is in      */ 05341500
*/*          parentheses and MF=E or MF=M is coded, then the         */ 05346000
*/*          function value is already in the parameter area         */ 05350500
*/*          and is coded only for syntax checking.  Note that       */ 05355000
*/*          this parameter is always required.                      */ 05359500
*/*                                                                  */ 05364000
*/*       3. You can specify both 32 and 64 bit parms on the OSREQ   */ 05364300
*/*          macro invocation, but run time processing will verify   */ 05364600
*/*          that values are supplied for only one or the other.     */ 05364900
*/*          32 Bit parms are mutually exclusive with 64 bit parms   */ 05365200
*/*          at run time.                                        @L7A*/ 05365500
*/*                                                                  */ 05365800
*/*          32-bit  ! 64-bit                                        */ 05366100
*/*          ------------------                                      */ 05366400
*/*          BUFLIST ! BUFFER64                                      */ 05366700
*/*          LENGTH  ! LENGTH64                                      */ 05367000
*/*          OFFSET  ! OFFSET64                                      */ 05367200
*/*          SIZE    ! SIZE64.                                       */ 05367400
*/*                                                                  */ 05367600
*/*          Use of the 64-bit parms will allow OSREQ application    */ 05367800
*/*          programs to utilize a buffer in 64-bit addressable      */ 05368000
*/*          virtual storage above the 2 gigabyte "bar" for STORE    */ 05368200
*/*          and RETRIEVE functions.                                 */ 05368300
*/*                                                                  */ 05368400
*/* CHANGE ACTIVITY:                                                 */ 05368500
*/*    $L0=JDP1110 110 871015 STLWER: Object Storage Manager         */ 05373000
*/*    $L1=JDP3227 320 881012 TPCHAD: OAM Release 1              @L1A*/ 05377500
*/*    $O1=OY29609 320 900219 TPCHLO: Correct alignment error        */ 05382000
*/*        between macro list and LTORG statement                @O1A*/ 05386500
*/*    $02=OY35530 320 900717 TPCHLO: Add VIEW=PRIMARY!BACKUP keyword*/ 05391000
*/*        to allow user to specify which copy to retrieve       @02A*/ 05395500
*/*    $D1=KBE0022 331 900809 TPCHLO: Add IADDRESS keyword to allow  */ 05400000
*/*        an application to specify the address of its own DB2      */ 05404500
*/*        language interface module.                                */ 05409000
*/*                                                                  */ 05413500
*/*    $P1=KBK0063 410 920309 TUCTNN: Validate control blk       @P1A*/ 05418000
*/*    $L2=HDZ11D0 140 960306 TUCSPP: SMF record support,        @L2A*/ 05419100
*/*                                   allow users to specify     @L2A*/ 05420200
*/*                                   a 16-byte tracking token   @L2A*/ 05421300
*/*    $L3=OAMMOB  R13 000816 TUCTNN: MULT OBJECT BACKUP SUPPORT @L3A*/ 05421900
*/*    $P2=K170178 R13 001113 TUCTNN: SET VALUES OF REQVERN AND  @P2A*/ 05422100
*/*                                   REQREL BACK TO 1           @P2A*/ 05422300
*/*    $L4=OAMIVM2 R17 031111 TUCGPW: Improved Vol MGMT PH-2     @L4A*/ 05422400
*/*    $P3=K1K0056 R17 040319 TUCGPW: Change REQVERN from 1 to 2 @P3A*/ 05423900
*/*    $P4=K1K0329 R17 040723 TUCGPW: RECALLRC renamed RETCODE2  @P4A*/ 05424600
*/*    $P5=K1K0482 R17 040915 TUCGPW: Typo--change ALA to LA for     */ 05424800
*/*                                   load address operation     @P5A*/ 05425000
*/*    $L5=OAMR1A  R1A 070326 TUCYHL: OAM2GB PHASE 1             @L5A*/ 05425200
*/*    $P6=K1A0969 R1A 070712 TUCYHL: Check not allowed key words    */ 05425600
*/*                                   skipping RECALL & RETCODE2 @P6A*/ 05426000
*/*    $L6=OAMR1B  R1B 080222 TUCDVH: OAMARE Archive retention   @L6A*/ 05426200
*/*    $P7=K1B0036 R1B 080603 TUCDVH: Bit field naming corrected @P7A*/ 05426300
*/*    $L7=OAMR22B R22 120724 TUCTMD: OAMR22 OSREQ 64BitBuffers  @L7A*/ 05426400
*/*    $P8=OAMR22B R22 150218 TUCAED: Length64 field corrected   @P8A*/ 05426500
*/*    $L8=OAMR23M R23 160415 TUCDEW: Multiple OAM Support       @L8A*/ 05426600
*/*    $P9=145308  R23 161118 TUCDEW: Set error if config empty  @P9A*/ 05426700
*/*                                                                  */ 05426900
*/********************************************************************/ 05427000
*%GOTO OSRQMAP; /*                                                      05431500
.OSRQBGN ANOP                                                           05436000
.*                                                                      05450000
.********************************************************************** 05500000
.*                      DECLARE LOCAL MACRO VARIABLES                 * 05550000
.********************************************************************** 05600000
.*                                                                      05612500
         LCLC  &TEMP         Temporary variable                         05625000
         LCLA  &CTR          Miscellaneous counter                      05637500
         LCLC  &FCODE        Function code (1=ACCESS, 2=STORE, ...)     05650000
         LCLC  &CBLKID       Parameter Control block ID                 05662500
         LCLC  &CBLKLN       Parameter Control block length (80)        05675000
         LCLC  &FNAME        Function name (ACCESS, STORE, ...)         05687500
         LCLC  &VCODE        Version code for parameter list and area   05700000
         LCLC  &RCODE        Release code for parameter list and area   05725000
         LCLC  &LCODE        Level code for parameter list and area     05750000
         LCLC  &RO           Codes for required and optional parms     X05775000
                               Each position represents a keyword       05800000
         LCLB  &MFCOMPLETE   COMPLETE coded as third value on MF        05850000
         LCLC  &REQUIRD      Names of required but omitted keywords     05900000
         LCLC  &DALLOWD      Names of disallowed but coded keywords     05950000
         LCLC  &SWSTOP       Stop processing switch (YES or NO)         06300000
         LCLC  &LIST         Where the parameter list is                06350000
         LCLC  &PXIIGN       MNOTE phrase                               06400000
         LCLC  &PNOTXT       MNOTE phrase                               06450000
.*                                                                      06500000
.********************************************************************** 06550000
.*   DECLARE RELBUF FLAG, VIEW FLAG, CANCEL FLAG, AND             @L5C  06554700
.*   ASSOCIATED FLAG BITS                                         @L5A  06559400
.********************************************************************** 06564200
.*                                                                @L3C  06571300
         LCLB &RELBON,&VIEWB,&VIEWB2,&CNCLON,&DELHP,&DELHO,&B64ON,&B7ON 06578400
.*                                                                @L7C  06585500
.********************************************************************** 06592600
.*                   INITIALIZE LOCAL MACRO VARIABLES                 * 06600000
.********************************************************************** 06650000
.***************************************************************        06659200
.*  MISCELLANEOUS VARIABLES AND SWITCHES                       *        06668400
.***************************************************************        06677600
.*                                                                      06686800
&REQERR  SETC  '24'           Token contents invalid reason in hex @L5C 06696000
&OSMAERR SETC  '68'           Control blk not initialize rsn hex   @L5C 06705200
.*                                                                      06714400
&PLSERR1 SETC  '0101'         OSREQ parmlist in unusable strg reason    06723600
.*                                                                      06732800
&TKNERR1 SETC  '0901'         Token in unusable storage rsn bytes 2,3   06742000
&TKNERR2 SETC  '0902'         Token contents invalid rsn bytes 2,3      06751200
&NOOSMA  SETC  '0100'         Control block not build rsn byte 2,3 @P1A 06760400
&EMPTY   SETC  '0300'         Empty configuration reason byte 2,3  @P9A 06760500
.*                                                                      06769600
&BADREQT SETC  '8'            Request unsuccessful return code          06778800
&BADREQO SETC  '12'           Request unsuccessful return code     @P1A 06788000
.*                                                                      06797200
&FCODE   SETC  '0'            Initial function code value (invalid)     06806400
&FCODEH  SETC  '00'           Initial function code in hex(invalid)@L5A 06811000
&CBLKID  SETC  'OSRQ'         Parameter control block ID                06815600
&TOKNID  SETC  'OSMI'         Initialized Token control block ID        06824800
&OSMAID  SETC  'OSMA'         Initialized control block ID         @P1A 06834000
&MWAID   SETC  'MWA '         Initialized control block ID              06843200
&CBLKLN  SETC  '148'          Parameter Control Block length      @L8C  06852400
&VCODE   SETC  '6'            Version number                      @L8C  06861600
&RCODE   SETC  '1'            Release number                      @P2C  06870800
&LCODE   SETC  '0'            Level number                              06880000
&FNAME   SETC  (8)' '         Function name (initial = blanks)          06889200
&SWSTOP  SETC  'NO'           Do not stop processing                    06900000
.*                                                                      06950000
.*                                                               2@02D  07000000
.*                                                               1@L5D  07050000
.*                                                               1@L7D  07200000
&B7ON    SETB  0              Assume bit 7 is not to be changed         07250000
.*                                                                      07300000
&PXIIGN  SETC  'EXTRA ITEMS ARE IGNORED.'                               07350000
&PNOTXT  SETC  'NO TEXT IS GENERATED.'                                  07400000
.*                                                                      07450000
.********************************************************************** 07490000
.*                CHECK FOR CORRECT MACRO FORM.                       * 07530000
.********************************************************************** 07570000
.*                                                                      07610000
         AIF   (T'&MF EQ 'O').MFNOTE    Go if MF omitted                07650000
         AIF   ('&MF(1)' EQ 'L').LFORM  Go if MF=L                      07700000
         AIF   ('&MF(1)' EQ 'E' OR '&MF(1)' EQ 'M').EMFORM  Do MF=E, M  07800000
.MFNOTE  MNOTE 8,'INCORRECT MACRO FORM.  MF MUST BE L, M or E. &PNOTXT' 07850000
         AGO   .MFERROR                                                 07950000
.*                                                                      07975000
.EMFORM  AIF   (N'&MF LE 3).EMCK3       Go if not too many parameters   08000000
         MNOTE 8,'TOO MANY VALUES CODED WITH MF=&MF..  &PNOTXT'         08050000
&SWSTOP  SETC  'YES'           Stop processing after validity checking  08100000
.*                                                                      08133300
.EMCK3   AIF   (N'&MF LE 2).EMSEE2      Go if COMPLETE not specified    08166600
         AIF   ('&MF(3)' NE 'COMPLETE').EMCK4                           08200000
&MFCOMPLETE SETB 1             Remember that COMPLETE was coded         08250000
         AGO   .CKFUNC                                                  08300000
.*                                                                      08325000
.EMCK4   MNOTE 8,'IF THE THIRD VALUE OF MF IS CODED, IT MUST BE ''COMPLx08350000
               ETE''.  &PNOTXT'                                         08400000
&SWSTOP  SETC  'YES'           Stop processing after validity checking  08450000
.*                                                                      08475000
.EMSEE2  AIF   (N'&MF EQ 2).CKFUNC      Go if correct number of params  08500000
         MNOTE 8,'WITH MF=&MF. A SECOND VALUE IS REQUIRED.  &PNOTXT'    08550000
         AGO   .MFERROR                                                 08600000
.*                                                                      08650000
.LFORM   AIF   ('&BUFLIST' EQ '&BUFLIST(1)' AND                        x08700000
               '&BUFFER64' EQ '&BUFFER64(1)' AND                       x08710000
               '&COLLECTN' EQ '&COLLECTN(1)' AND                       x08750000
               '&DB2ID' EQ '&DB2ID(1)' AND                             x08751000
               '&DELHOLD' EQ '&DELHOLD(1)' AND                         x08766600
               '&EVENTEXP' EQ '&EVENTEXP(1)' AND                       x08783200
               '&IADDRESS' EQ '&IADDRESS(1)' AND                       x08800000
               '&LENGTH' EQ '&LENGTH(1)' AND                           x08850000
               '&LENGTH64' EQ '&LENGTH64(1)' AND                       x08860000
               '&MGMTCLAS' EQ '&MGMTCLAS(1)' AND                       x09150000
               '&MSGAREA' EQ '&MSGAREA(1)' AND                         x09175000
               '&NAME' EQ '&NAME(1)' AND                               x09200000
               '&OFFSET' EQ '&OFFSET(1)' AND                           x09250000
               '&OFFSET64' EQ '&OFFSET64(1)' AND                       x09260000
               '&QEL' EQ '&QEL(1)' AND                                 x09300000
               '&RECALL' EQ '&RECALL(1)' AND                           x09316600
               '&RETCODE2' EQ '&RETCODE2(1)' AND                       x09333300
               '&REACODE' EQ '&REACODE(1)' AND                         x09350000
               '&RETCODE' EQ '&RETCODE(1)' AND                         x09400000
               '&RETPD' EQ '&RETPD(1)' AND                             x09450000
               '&SIZE' EQ '&SIZE(1)' AND                               x09500000
               '&SIZE64' EQ '&SIZE64(1)' AND                           x09510000
               '&STORCLAS' EQ '&STORCLAS(1)' AND                       x09550000
               '&TOKEN' EQ '&TOKEN(1)' AND                             X09583300
               '&TTOKEN' EQ '&TTOKEN(1)' AND                           X09599900
               '&STOKEN' EQ '&STOKEN(1)' AND                           X09616500
               '&STIMEOUT' EQ '&STIMEOUT(1)').ALFORM               @L8C 09633100
         MNOTE 8,'REGISTER VALUES ARE NOT ALLOWED WITH MF=L.  &PNOTXT'  09650000
&SWSTOP  SETC  'YES'           Stop processing after validity checking  09700000
.*                                                                      09750000
.ALFORM  AIF   (N'&MF EQ 1).CKFUNC      Go if correct number of values  10300000
         MNOTE 4,'EXTRA VALUE OF MF=&MF(1)..  &PXIIGN'                  10350000
         AGO   .CKFUNC                                                  10400000
.*                                                                      10425000
.MFERROR ANOP                                                           10450000
&SWSTOP  SETC  'YES'           Stop processing after validity checking  10500000
.*                                                                      10525000
.********************************************************************** 10550000
.*               CHECK VALIDITY OF THE MACRO INVOCATION               * 10600000
.********************************************************************** 10650000
.*                                                                      10675000
.CKFUNC  ANOP                      Check function name                  10700000
&FUNC    SETC  '&FUNCTION(1)'      Remove parentheses if present        10750000
         AIF   (N'&FUNCTION LE 1).CHK1POS                               10800000
         MNOTE 4,'EXTRA VALUES OF &FUNCTION AFTER &FUNC ARE IGNORED.'   10850000
.CHK1POS AIF   (N'&SYSLIST EQ 1).CKACCE Go if correct number of params  10900000
         AIF   (N'&SYSLIST GT 1).ERR6   Go if too many positional parms 10950000
         MNOTE 8,'THE REQUIRED OSREQ SERVICE (FIRST POSITIONAL PARAMETEx11000000
               R) IS NOT SPECIFIED.  &PNOTXT'                           11050000
&SWSTOP  SETC  'YES'           Stop processing after validity checking  11100000
         AGO   .CKVIEW         Continue validity checking          @02C 11150000
.ERR6    MNOTE 4,'MORE THAN ONE POSITIONAL PARAMETER.  ONLY &FUNC WILL x11200000
               BE USED'                                                 11250000
.*                                                                      11300000
.********************************************************************** 11350000
.*        CHECK FOR REQUESTED FUNCTION AND FOR KEYWORDS THAT SHOULD   * 11400000
.*        NOT BE PRESENT.                                             * 11450000
.********************************************************************** 11500000
.*   Each position in &RO corresponds to a keyword.  For each function* 11550000
.* &RO is set to codes that tell which keywords are optional (O),     * 11600000
.* required (R) or not allowed (blank). Each possible parameter except* 11650000
.* the function name (e.g. QUERY) is represented in &RO.              * 11700000
.* This is the logic:                                                 * 11750000
.* 1. Set &RO on the assumption we are doing the execute form.        * 11800000
.* 2. If COMPLETE was coded, replace &RO such that some of the codes  * 11850000
.*    are R instead of O.                                             * 11900000
.* 3. If the macro format is list or modify, change all the R codes to* 11950000
.*    O to make all supported keywords optional.                      * 12000000
.*                                                                @L8D* 12050000
.********************************************************************** 12100000
.*                                                                      12150000
.CKACCE  AIF   ('&FUNC' NE 'ACCESS').CKSTORE                            12300000
&RO      SETC  'OOOOOOOOOOOOOOOOOOOO     OR' Req'd, optional,allow @L8C 12350000
&FCODE   SETC  '1'            Set function code for ACCESS              12400000
&FCODEH  SETC  '01'           Set function code in HEX for ACCESS  @L5A 12425000
         AIF   (NOT &MFCOMPLETE).CKRMOD Go if COMPLETE not coded on MF  12450000
&RO      SETC  'OOOOOOOOOOOOOOOOOROO     OR' When COMPLETE coded   @L8C 12500000
         AGO   .CKRMOD                                                  12550000
.*                                                                      12600000
.CKSTORE AIF   ('&FUNC' NE 'STORE').CKRETR                              12650000
&RO      SETC  'OOOOOOOOOOOOOOOOOOOO   O  R' Req'd,optional,allow  @L8C 12700000
&FCODE   SETC  '2'            Set function code for STORE               12750000
&FCODEH  SETC  '02'           Set function code in HEX for STORE   @L5A 12775000
         AIF   (NOT &MFCOMPLETE).CKRMOD Go if COMPLETE not coded on MF  12800000
&RO      SETC  'RROOOOROOOOOOOOROROO   O  R' When COMPLETE coded   @L8C 12850000
         AGO   .CKRMOD                                                  12900000
.*                                                                      12950000
.CKRETR  AIF   ('&FUNC' NE 'RETRIEVE').CKQUERY                          13000000
&RO      SETC  'OOOOOOOOOOOOOOOOOOOO      R' Req'd,optional,allow  @L8C 13050000
&FCODE   SETC  '3'            Set function code for RETRIEVE            13100000
&FCODEH  SETC  '03'           Set function code in HEX for RETRIEVE@L5A 13125000
         AIF   (NOT &MFCOMPLETE).CKRMOD Go if COMPLETE not coded on MF  13150000
&RO      SETC  'RROOOOROOOOOOOOOOROO      R' When COMPLETE coded   @L8C 13200000
         AGO   .CKRMOD                                                  13250000
.*                                                                      13300000
.CKQUERY AIF   ('&FUNC' NE 'QUERY').CKCHANG                             13350000
&RO      SETC  'OOOOOOOOOOOOOOOOOOOO      R' Req'd,optional,allow  @L8C 13400000
&FCODE   SETC  '4'            Set function code for QUERY               13450000
&FCODEH  SETC  '04'           Set function code in HEX for QUERY   @L5A 13475000
         AIF   (NOT &MFCOMPLETE).CKRMOD Go if COMPLETE not coded on MF  13500000
&RO      SETC  'OROOOOROROOOOOOOOROO      R' When COMPLETE coded   @L8C 13550000
         AGO   .CKRMOD                                                  13600000
.*                                                                      13650000
.CKCHANG AIF   ('&FUNC' NE 'CHANGE').CKDELET                            13700000
&RO      SETC  'OOOOOOOOOOOOOOOOOOOO   OO R' Req'd,optional,allow  @L8C 13750000
&FCODE   SETC  '5'            Set function code for CHANGE              13800000
&FCODEH  SETC  '05'           Set function code in HEX for CHANGE  @L5A 13825000
         AIF   (NOT &MFCOMPLETE).CKRMOD Go if COMPLETE not coded on MF  13850000
&RO      SETC  'OROOOOROOOOOOOOOOROO   OO R' When COMPLETE coded   @L8C 13900000
         AGO   .CKRMOD                                                  13950000
.*                                                                      14000000
.CKDELET AIF   ('&FUNC' NE 'DELETE').CKUNACC                            14050000
&RO      SETC  'OOOOOOOOOOOOOOOOOOOO      R' Req'd,optional,allow  @L8C 14100000
&FCODE   SETC  '6'            Set function code for DELETE              14150000
&FCODEH  SETC  '06'           Set function code in HEX for DELETE  @L5A 14175000
         AIF   (NOT &MFCOMPLETE).CKRMOD Go if COMPLETE not coded on MF  14200000
&RO      SETC  'OROOOOROOOOOOOOOOROO      R' When COMPLETE coded   @L8C 14250000
         AGO   .CKRMOD                                                  14300000
.*                                                                      14350000
.CKUNACC AIF   ('&FUNC' NE 'UNACCESS').CKSTBEG                     @L5C 14400000
&RO      SETC  'OOOOOOOOOOOOOOOOOOOO      R' Req'd,optional,allow  @L8C 14450000
&FCODE   SETC  '7'            Set function code for UNACCESS            14500000
&FCODEH  SETC  '07'           Set function code in HEX for UNACCESS@L5A 14525000
         AIF   (NOT &MFCOMPLETE).CKRMOD Go if COMPLETE not coded on MF  14550000
&RO      SETC  'OOOOOOOOOOOOOOOOOROO      R' When COMPLETE coded   @L8C 14600000
         AGO   .CKRMOD                                                  14650000
.*                                                                 @L5A 14654000
.CKSTBEG AIF   ('&FUNC' NE 'STOREBEG').CKSTPRT                     @L5A 14658000
&RO      SETC  ' O  OOO     OOOOOO OOO O  R' Req'd,optional,allow  @L8C 14662000
&FCODE   SETC  '8'            Set function code for STOREBEG       @L5A 14666000
&FCODEH  SETC  '08'           Set function code in HEX for STOREBEG@L5A 14670000
         AIF   (NOT &MFCOMPLETE).CKRMOD Go if COMPLETE not coded on@L5A 14674000
&RO      SETC  ' R  OOR     OOOROR ORO O  R' When COMPLETE coded   @L8C 14678000
         AGO   .CKRMOD                                             @L5A 14682000
.*                                                                 @L5A 14686000
.CKSTPRT AIF   ('&FUNC' NE 'STOREPRT').CKSTEND                     @L5A 14690000
&RO      SETC  'O    O O   OOO O O OO     R' Req'd,optional,allow  @L8C 14694000
&FCODE   SETC  '9'            Set function code for STOREPRT       @L5A 14698000
&FCODEH  SETC  '09'           Set function code in HEX for STOREPRT@L5A 14702000
         AIF   (NOT &MFCOMPLETE).CKRMOD Go if COMPLETE not coded on@L5A 14706000
&RO      SETC  'R    O R   OOO R R OR     R' When COMPLETE coded   @L8C 14710000
         AGO   .CKRMOD                                             @L5A 14714000
.*                                                                 @L5A 14718000
.CKSTEND AIF   ('&FUNC' NE 'STOREEND').BADFUNC                     @L5A 14722000
&RO      SETC  '     O    O OO O O OO O   R' Req'd,optional,allow  @L8C 14726000
&FCODE   SETC  '10'           Set function code for STOREEND       @L5A 14730000
&FCODEH  SETC  '0A'           Set function code in HEX for STOREEND@L5A 14734000
         AIF   (NOT &MFCOMPLETE).CKRMOD Go if COMPLETE not coded on@L5A 14738000
&RO      SETC  '     O    O OO R R OR O   R' When COMPLETE coded   @L8C 14742000
         AGO   .CKRMOD                                             @L5A 14746000
.*                            Incorrect function specified              14750000
.BADFUNC MNOTE 8,'NO VALID FUNCTION SPECIFIED.  YOU MUST SPECIFY ACCESSx14800000
               , STORE, RETRIEVE, QUERY, CHANGE, DELETE OR UNACCESS.  &x14850000
               PNOTXT'                                                  14900000
&SWSTOP  SETC  'YES'           Stop processing after validity checking  14950000
         AGO   .CKVIEW         Continue validity checking          @02C 15000000
.*                                                                      15350000
.********************************************************************** 15388800
.* &RO was set above for the Execute form.  Now make adjustments      * 15427600
.* if not Execute form (List or Modify).                              * 15466400
.* No keyword parameter except MF is required.                        * 15505200
.* Change all the 'R' codes to 'O'.                                   * 15544000
.********************************************************************** 15582800
.*                                                                      15621600
.CKRMOD  AIF   ('&MF(1)' EQ 'E').CKR                                    15660400
&CTR     SETA  1                   Set index to first character of &RO  15700000
.ROLOOP  AIF   ('&RO'(&CTR,1) NE 'R').NEXTRO Go if code not 'R'         15737500
.*  Set 'R' in RO string to 'O'                                         15775000
&RO      SETC  '&RO'(1,&CTR-1).'O'.'&RO'(&CTR+1,K'&RO-&CTR)             15812500
.NEXTRO  ANOP                                                           15850000
&CTR     SETA  &CTR+1              Set index to next position of &RO    15900000
         AIF   (&CTR LT K'&RO).ROLOOP  Go if not yet last &RO position  15950000
.*       Last one must be done differently to avoid running off end.    16000000
         AIF   ('&RO'(&CTR,1) NE 'R').CKR      Go if code not 'R'       16050000
&RO      SETC  '&RO'(1,&CTR-1).'O'             Replace 'R' with 'O'     16100000
.*                                                                      16150000
.********************************************************************** 16170000
.* Check for required parameters that are omitted.                    * 16190000
.********************************************************************** 16210000
.*                                                                      16230000
.CKR     ANOP                                                           16250000
.CKRBUFL AIF   ('&BUFLIST' NE '' OR '&BUFFER64' NE '' OR '&RO'(1,1) NE x16300000
               'R').CKRCLNM                                        @L7C 16310000
&REQUIRD SETC  '&REQUIRD. BUFLIST/BUFFER64' Remember omitted       @L7C 16350000
.CKRCLNM AIF   ('&COLLECTN' NE '' OR '&RO'(2,1) NE 'R').CKRIADD    @D1C 16362500
&REQUIRD SETC  '&REQUIRD. COLLECTN' Remember omitted required parameter 16375000
.CKRIADD AIF   ('&IADDRESS' NE '' OR '&RO'(3,1) NE 'R').CKRLENG    @D1A 16387500
&REQUIRD SETC  '&REQUIRD. IADDRESS' Remember omitted req'd param   @D1A 16400000
.CKRLENG AIF   ('&LENGTH' NE '' OR '&LENGTH64' NE '' OR '&RO'(4,1) NE  x16412500
               'R').CKRMGMT                                        @L7C 16413000
&REQUIRD SETC  '&REQUIRD. LENGTH/LENGTH64' Remember omitted        @L7C 16425000
.CKRMGMT AIF   ('&MGMTCLAS' NE '' OR '&RO'(5,1) NE 'R').CKRMSGA    @D1C 16437500
&REQUIRD SETC  '&REQUIRD. MGMTCLAS' Remember omitted required parameter 16450000
.CKRMSGA AIF   ('&MSGAREA' NE '' OR '&RO'(6,1) NE 'R').CKRNAME     @D1C 16475000
&REQUIRD SETC  '&REQUIRD. MSGAREA' Remember omitted required parameter  16500000
.CKRNAME AIF   ('&NAME' NE '' OR '&RO'(7,1) NE 'R').CKROFFS        @D1C 16525000
&REQUIRD SETC  '&REQUIRD. NAME'    Remember omitted required parameter  16550000
.CKROFFS AIF   ('&OFFSET' NE '' OR '&OFFSET64' NE '' OR '&RO'(8,1) NE  x16600000
               'R').CKRQEL                                         @L7C 16610000
&REQUIRD SETC  '&REQUIRD. OFFSET/OFFSET64'  Remember omitted       @L7C 16650000
.CKRQEL  AIF   ('&QEL' NE '' OR '&RO'(9,1) NE 'R').CKRRCL          @L4C 16700000
&REQUIRD SETC  '&REQUIRD. QEL'     Remember omitted required parameter  16750000
.CKRRCL  AIF   ('&RECALL' NE '' OR '&RO'(10,1) NE 'R').CKRRC2      @P4C 16766600
&REQUIRD SETC  '&REQUIRD. RECALL'  Remember omitted required parm  @L4A 16783200
.CKRRC2  AIF   ('&RETCODE2' NE '' OR '&RO'(11,1) NE 'R').CKRRELB   @P4C 16799800
&REQUIRD SETC  '&REQUIRD. RETCODE2'  Remember omitted required parm@P4C 16816400
.CKRRELB AIF   ('&RELBUF' NE '' OR '&RO'(12,1) NE 'R').CKRREAC     @L4C 16833000
&REQUIRD SETC  '&REQUIRD. RELBUF'  Remember omitted required parameter  16850000
.CKRREAC AIF   ('&REACODE' NE '' OR '&RO'(13,1) NE 'R').CKRRETC    @L4C 16900000
&REQUIRD SETC  '&REQUIRD. REACODE' Remember omitted required parameter  16950000
.CKRRETC AIF   ('&RETCODE' NE '' OR '&RO'(14,1) NE 'R').CKRRETP    @L4C 17000000
&REQUIRD SETC  '&REQUIRD. RETCODE' Remember omitted required parameter  17050000
.CKRRETP AIF   ('&RETPD' NE '' OR '&RO'(15,1) NE 'R').CKRSIZE      @L4C 17100000
&REQUIRD SETC  '&REQUIRD. RETPD'   Remember omitted required parameter  17150000
.CKRSIZE AIF   ('&SIZE' NE '' OR '&SIZE64' NE '' OR '&RO'(16,1) NE 'R')x17200000
               .CKRSTOR                                            @L7C 17210000
&REQUIRD SETC  '&REQUIRD. SIZE/SIZE64'   Remember omitted required @L7C 17250000
.CKRSTOR AIF   ('&STORCLAS' NE '' OR '&RO'(17,1) NE 'R').CKRTOKE   @L4C 17300000
&REQUIRD SETC  '&REQUIRD. STORCLAS' Remember omitted required parameter 17350000
.CKRTOKE AIF   ('&TOKEN' NE '' OR '&RO'(18,1) NE 'R').CKRVIEW      @L4C 17400000
&REQUIRD SETC  '&REQUIRD. TOKEN'   Remember omitted required parameter  17450000
.CKRVIEW AIF   ('&VIEW' NE '' OR '&RO'(19,1) NE 'R').CKRTTKN       @L4C 17475000
&REQUIRD SETC  '&REQUIRD. VIEW'    Remember omitted required param @02A 17500000
.CKRTTKN AIF   ('&TTOKEN' NE '' OR '&RO'(20,1) NE 'R').CKRSTKN     @L5C 17512500
&REQUIRD SETC  '&REQUIRD. TTOKEN'    Remember omitted req'd parm   @L2A 17525000
.CKRSTKN AIF   ('&STOKEN' NE '' OR '&RO'(21,1) NE 'R').CKRSTMO     @L5A 17528100
&REQUIRD SETC  '&REQUIRD. STOKEN'    Remember omitted req'd parm   @L5A 17531200
.CKRSTMO AIF   ('&STIMEOUT' NE '' OR '&RO'(22,1) NE 'R').CKRCNCL   @L5A 17534300
&REQUIRD SETC  '&REQUIRD. STIMEOUT'    Remember omitted req'd parm @L5A 17537400
.CKRCNCL AIF   ('&CANCEL' NE '' OR '&RO'(23,1) NE 'R').CKRDELH     @L6C 17540500
&REQUIRD SETC  '&REQUIRD. CANCEL'    Remember omitted req'd parm   @L5A 17543600
.CKRDELH AIF   ('&DELHOLD' NE '' OR '&RO'(24,1) NE 'R').CKREVEX    @L6A 17544600
&REQUIRD SETC  '&REQUIRD. DELHOLD'    Remember omitted req'd parm  @L6A 17545600
.CKREVEX AIF   ('&EVENTEXP' NE '' OR '&RO'(25,1) NE 'R').CKRDBID   @L8C 17546600
&REQUIRD SETC  '&REQUIRD. EVENTEXP'    Remember omitted req'd parm @L6A 17547600
.CKRDBID AIF   ('&DB2ID' NE '' OR '&RO'(26,1) NE 'R').CKRMF        @L8A 17547700
&REQUIRD SETC  '&REQUIRD. DB2ID'      Remember omitted req'd parm  @L8A 17547800
.CKRMF   AIF   ('&MF' NE '' OR '&RO'(27,1) NE 'R').CKRANY          @L8C 17548600
&REQUIRD SETC  '&REQUIRD. MF'      Remember omitted required parameter  17550000
.CKRANY  AIF   ('&REQUIRD' EQ '').CKA                                   17600000
         MNOTE 8,'THESE KEYWORDS ARE REQUIRED WITH &FUNC. AND WERE OMITx17650000
               TED: &REQUIRD'                                           17700000
&SWSTOP  SETC  'YES'           Stop processing after validity checking  17750000
.*                                                                      17800000
.********************************************************************** 17820000
.* Check for parameters that are not allowed with this function.      * 17840000
.********************************************************************** 17860000
.*                                                                      17880000
.CKA     ANOP                                                           17900000
.CKABUFL AIF   (('&BUFLIST' EQ '' AND '&BUFFER64' EQ '') OR '&RO'(1,1) x17950000
               NE ' ').CKACLNM                                     @L7C 17960000
&DALLOWD SETC  '&DALLOWD. BUFLIST/BUFFER64' Remember disallowed    @L7C 18000000
.CKACLNM AIF   ('&COLLECTN' EQ '' OR '&RO'(2,1) NE ' ').CKAIADD    @D1C 18012500
&DALLOWD SETC  '&DALLOWD. COLLECTN' Remember disallowed parameter       18025000
.CKAIADD AIF   ('&IADDRESS' EQ '' OR '&RO'(3,1) NE ' ').CKALENG    @D1A 18037500
&DALLOWD SETC  '&DALLOWD. IADDRESS' Remember disallowed parameter  @D1A 18050000
.CKALENG AIF   (('&LENGTH' EQ '' AND '&LENGTH64' EQ '') OR '&RO'(4,1)  x18062500
               NE ' ').CKAMGMT                                     @L7C 18063000
&DALLOWD SETC  '&DALLOWD. LENGTH/LENGTH64' Remember disallowed     @L7C 18075000
.CKAMGMT AIF   ('&MGMTCLAS' EQ '' OR '&RO'(5,1) NE ' ').CKAMSGA    @D1C 18087500
&DALLOWD SETC  '&DALLOWD. MGMTCLAS' Remember disallowed parameter       18100000
.CKAMSGA AIF   ('&MSGAREA' EQ '' OR '&RO'(6,1) NE ' ').CKANAME     @D1C 18125000
&DALLOWD SETC  '&DALLOWD. MSGAREA'  Remember disallowed parameter       18150000
.CKANAME AIF   ('&NAME' EQ '' OR '&RO'(7,1) NE ' ').CKAOFFS        @D1C 18175000
&DALLOWD SETC  '&DALLOWD. NAME'    Remember disallowed parameter        18200000
.CKAOFFS AIF   (('&OFFSET' EQ '' AND '&OFFSET64' EQ '') OR '&RO'(8,1)  x18250000
               NE ' ').CKAQEL                                      @L7C 18260000
&DALLOWD SETC  '&DALLOWD. OFFSET/OFFSET64' Remember disallowed     @L7C 18300000
.CKAQEL  AIF   ('&QEL' EQ '' OR '&RO'(9,1) NE ' ').CKARCL          @P6C 18350000
&DALLOWD SETC  '&DALLOWD. QEL'     Remember disallowed parameter        18400000
.CKARCL  AIF   ('&RECALL' EQ '' OR '&RO'(10,1) NE ' ').CKARC2      @P4C 18416600
&DALLOWD SETC  '&DALLOWD. RECALL'  Remember disallowed parameter   @L4A 18433200
.CKARC2  AIF   ('&RETCODE2' EQ '' OR '&RO'(11,1) NE ' ').CKARELB   @P4C 18449800
&DALLOWD SETC  '&DALLOWD. RETCODE2'  Remember disallowed parameter @P4C 18466400
.CKARELB AIF   ('&RELBUF' EQ '' OR '&RO'(12,1) NE ' ').CKAREAC     @L4C 18483000
&DALLOWD SETC  '&DALLOWD. RELBUF'  Remember disallowed parameter        18500000
.CKAREAC AIF   ('&REACODE' EQ '' OR '&RO'(13,1) NE ' ').CKARETC    @L4C 18550000
&DALLOWD SETC  '&DALLOWD. REACODE' Remember disallowed parameter        18600000
.CKARETC AIF   ('&RETCODE' EQ '' OR '&RO'(14,1) NE ' ').CKARETP    @L4C 18650000
&DALLOWD SETC  '&DALLOWD. RETCODE' Remember disallowed parameter        18700000
.CKARETP AIF   ('&RETPD' EQ '' OR '&RO'(15,1) NE ' ').CKASIZE      @L4C 18750000
&DALLOWD SETC  '&DALLOWD. RETPD'   Remember disallowed parameter        18800000
.CKASIZE AIF   (('&SIZE' EQ '' AND '&SIZE64' EQ '') OR '&RO'(16,1)     x18850000
               NE ' ').CKASTOR                                     @L7C 18860000
&DALLOWD SETC  '&DALLOWD. SIZE/SIZE64' Remember disallowed         @L7C 18900000
.CKASTOR AIF   ('&STORCLAS' EQ '' OR '&RO'(17,1) NE ' ').CKATOKE   @L4C 18950000
&DALLOWD SETC  '&DALLOWD. STORCLAS' Remember disallowed parameter       19000000
.CKATOKE AIF   ('&TOKEN' EQ '' OR '&RO'(18,1) NE ' ').CKAVIEW      @L4C 19050000
&DALLOWD SETC  '&DALLOWD. TOKEN'   Remember disallowed parameter        19100000
.CKAVIEW AIF   ('&VIEW' EQ '' OR '&RO'(19,1) NE ' ').CKATTKN       @L5C 19125000
&DALLOWD SETC  '&DALLOWD. VIEW'    Remember disallowed parameter   @02A 19150000
.CKATTKN AIF   ('&TTOKEN' EQ '' OR '&RO'(20,1) NE ' ').CKASTKN     @L5A 19152700
&DALLOWD SETC  '&DALLOWD. TTOKEN'  Remember disallowed parameter   @L5A 19155400
.CKASTKN AIF   ('&STOKEN' EQ '' OR '&RO'(21,1) NE ' ').CKASTMO     @L5A 19158100
&DALLOWD SETC  '&DALLOWD. STOKEN'  Remember disallowed parameter   @L5A 19160800
.CKASTMO AIF   ('&STIMEOUT' EQ '' OR '&RO'(22,1) NE ' ').CKACNCL   @L5A 19163500
&DALLOWD SETC  '&DALLOWD. STIMEOUT' Remember disallowed parameter  @L5A 19166200
.CKACNCL AIF   ('&CANCEL' EQ '' OR '&RO'(23,1) NE ' ').CKADELH     @L6C 19168900
&DALLOWD SETC  '&DALLOWD. CANCEL'  Remember disallowed parameter   @L5A 19171600
.CKADELH AIF   ('&DELHOLD' EQ '' OR '&RO'(24,1) NE ' ').CKAEVEX    @L6A 19172200
&DALLOWD SETC  '&DALLOWD. DELHOLD'  Remember disallowed parameter  @L6A 19172800
.CKAEVEX AIF   ('&EVENTEXP' EQ '' OR '&RO'(25,1) NE ' ').CKADBID   @L8C 19173400
&DALLOWD SETC  '&DALLOWD. EVENTEXP'  Remember disallowed parameter @L6A 19174000
.CKADBID AIF   ('&DB2ID' EQ '' OR '&RO'(26,1) NE ' ').CKAANY       @L8A 19174100
&DALLOWD SETC  '&DALLOWD. DB2ID'    Remember disallowed parameter  @L8A 19174200
.CKAANY  AIF   ('&DALLOWD' EQ '').CKVIEW   Go if none disallowed   @02C 19175000
         MNOTE 4,'THESE KEYWORDS ARE NOT ALLOWED WITH &FUNC.,MF=&MF.: &x19200000
               DALLOWD'                                                 19250000
&SWSTOP  SETC  'YES'           Stop processing after validity checking  19300000
.*                                                                      19350000
.********************************************************************** 19361100
.*                CHECK FOR INVALID VALUES ON KEYWORD VIEW        @02A* 19372200
.********************************************************************** 19383300
.*                                                                 @02A 19394400
.CKVIEW  ANOP                                                      @02A 19405500
.*       Set VIEWB FLAG to 1 if BACKUP or BACKUP2 is specified,    @L3A 19411800
.*       0 otherwise                                               @L3A 19418100
&VIEWB   SETB  ('&VIEW' EQ 'BACKUP' OR '&VIEW' EQ 'BACKUP2')       @L3C 19424400
.*       Set VIEWB2 FLAG if BACKUP2 is specified, 0 otherwise      @L3A 19430700
&VIEWB2  SETB  ('&VIEW' EQ 'BACKUP2')                              @L3A 19437000
.*       Ensure that VIEW is PRIMARY, BACKUP, BACKUP2 or omitted.  @L3C 19443300
         AIF   ('&VIEW' EQ '' OR '&VIEW' EQ 'PRIMARY' OR               x19449900
               '&VIEW' EQ 'BACKUP' OR                                  x19456500
               '&VIEW' EQ 'BACKUP2').CKINVK                        @L3C 19463100
         MNOTE 8,'VIEW VALUE MUST BE PRIMARY OR BACKUP OR BACKUP2.     x19469700
               &PNOTXT'                                                 19476300
&SWSTOP  SETC  'YES'        Stop processing after validity check   @02A 19483200
.*                                                                 @02A 19494300
.********************************************************************** 19505400
.*                CHECK FOR INVALID VALUES ON KEYWORD RELBUF          * 19516500
.********************************************************************** 19527600
.*                                                                      19538700
.CKINVK  ANOP                                                           19550000
.*       Ensure that RELBUF is YES, NO or omitted.                      19600000
&RELBON  SETB  ('&RELBUF' EQ 'YES')      Ensure bit on if YES           19650000
.*                                                                      19700000
         AIF   ('&RELBUF' EQ '' OR '&RELBUF' EQ 'YES' OR               x19750000
               '&RELBUF' EQ 'NO').CKINVCNCL                        @L5C 19800000
         MNOTE 8,'RELBUF VALUE MUST BE YES OR NO.  &PNOTXT'             19850000
&SWSTOP  SETC  'YES'           Stop processing after validity checking  19900000
.*                                                                      19950000
.********************************************************************** 19953500
.*                CHECK FOR INVALID VALUES ON KEYWORD CANCEL      @L5A* 19957000
.********************************************************************** 19960500
.*                                                                 @L5A 19964000
.CKINVCNCL  ANOP                                                   @L5A 19967500
.*       Ensure that CANCEL is YES, NO or omitted.                 @L6C 19971000
&CNCLON  SETB  ('&CANCEL' EQ 'YES')      Ensure bit on if YES      @L5A 19974500
.*                                                                 @L5A 19978000
         AIF   ('&CANCEL' EQ '' OR '&CANCEL' EQ 'YES' OR               x19981500
               '&CANCEL' EQ 'NO').CKDELH                           @L6C 19985000
         MNOTE 8,'CANCEL VALUE MUST BE YES OR NO.  &PNOTXT'        @L5A 19988500
&SWSTOP  SETC  'YES'      Stop processing after validity checking  @L5A 19992000
.*                                                                      19992200
.********************************************************************** 19992400
.*                CHECK FOR INVALID VALUES ON KEYWORD DELHOLD     @L6A* 19992600
.********************************************************************** 19992800
.*                                                                 @L6A 19993000
.CKDELH  ANOP  ,                                                   @L6A 19993200
.*       Ensure that DELHOLD is HOLD, NOHOLD, or omitted.          @L6A 19993400
&DELHP   SETB  ('&DELHOLD' NE '')        Bit on if DELHOLD present @L6A 19993600
&DELHO   SETB  ('&DELHOLD' EQ 'HOLD')    Ensure bit on if HOLD     @L6A 19993800
.*                                                                 @L6A 19994000
         AIF   ('&DELHOLD' EQ '' OR '&DELHOLD' EQ 'HOLD' OR            x19994200
               '&DELHOLD' EQ 'NOHOLD').CKR64B                      @L6A 19994400
         MNOTE 8,'DELHOLD VALUE MUST BE HOLD OR NOHOLD.  &PNOTXT'  @L6A 19994600
&SWSTOP  SETC  'YES'      Stop processing after validity checking  @L6A 19994800
.*                                                                 @L5A 19995500
.********************************************************************** 19996000
.* Set FLAG to indicate "Need to check for 64 bit values"          @L7A 19996200
.********************************************************************** 19996400
.CKR64B  ANOP  ,                                                   @L7A 19997000
&B64ON   SETB  ('&BUFFER64' NE '' OR '&LENGTH64' NE '' OR '&OFFSET64'NEx19997500
                '' OR '&SIZE64' NE '')  Bit on if any 64 bit parms @L7A 19998000
.*                                                                 @L7A 19998500
.********************************************************************** 20000000
.* If some of the above errors allowed the macro to continue, the     * 20050000
.* macro might generate incorrect code.                               * 20100000
.********************************************************************** 20150000
.*                                                                      20250000
.CKFAIL  AIF   ('&SWSTOP' NE 'NO').MEND  Terminate if any error         20400000
.*                                                                      20450000
.********************************************************************** 20500000
.* VALIDITY CHECKING COMPLETE.  NOW GENERATE CODE AS PER MACRO FORM.  * 20550000
.********************************************************************** 20600000
.*                                                                      20800000
&FNAME   SETC '&FUNCTION(1)'      Get function name specified           20850000
.*                                                                      21400000
         AIF   ('&MF(1)' EQ 'E').DOMFE    Go if MF=E form               21425000
         AIF   ('&MF(1)' EQ 'M').DOMFM    Go if MF=M form               21450000
.*                                                                      21475000
.********************************************************************** 21500000
.* L (LIST) FORM PROCESSING                                           * 21525000
.********************************************************************** 21550000
.*                                                                      21575000
.DOMFL   ANOP                                                           21600000
.*                                                                      21900000
         DS    0D                  Doubleword align parmlist       @O1C 21903800
&LABEL   DC    CL4'&CBLKID'    +0  Parameter Control Block ID           21907600
         DC    AL1(&CBLKLN)    +4  Parameter Control Block length       21911400
         DC    AL1(&VCODE)     +5  Parameter Control Block Version #    21915200
         DC    AL1(&RCODE)     +6  Parameter Control Block Release #    21919000
         DC    AL1(&LCODE)     +7  Parameter Control Block Level #      21922800
         DC    XL4'0'          +8  Reserved, must be zero               21926600
         DC    XL4'0'          +C  Reserved, must be zero               21930400
         DC    AL1(&FCODE)     +10 Function code                        21934200
&TEMP SETC '&RELBON.&VIEWB.&VIEWB2.&CNCLON.&DELHP.&DELHO.&B64ON.&B7ON.'x21936000
                                                                   @L7C 21937800
         DC    B'&TEMP'        +11 Flags--7 fields(RELBUF,VIEW,VIEWB2, x21939600
                                   CANCEL, DELHOLDP, DELHOLD,B64ON @L7C 21941400
.*                                 BIT 0=1 indicates RELBUF=YES,so page 21943400
.*                                 release will be performed after      21945700
.*                                 buffer segments are stored. BIT 0=0  21948000
.*                                 means RELBUF=NO and no pages will be 21950300
.*                                 released.                            21952600
.*                                 BIT 1=0 AND BIT2=0 indicates         21954900
.*                                 VIEW=PRIMARY and the primary copy    21957200
.*                                 will be addressed              @L3C  21959500
.*                                 BIT 1=1 AND BIT2=0 indicates         21961800
.*                                 VIEW=BACKUP and the first backup     21964100
.*                                 copy will be addressed         @L3C  21966400
.*                                 BIT 1=1 AND BIT2=1 indicates         21968700
.*                                 VIEW=BACKUP2 and the second backup   21971000
.*                                 copy will be addressed         @L3C  21973300
.*                                 BIT 1=0 AND BIT2=1 indicates invalid 21975600
.*                                 state                          @L3C  21977900
.*                                 BIT 3=1 indicates CANCEL=YES, then   21978200
.*                                 STOREEND will cancel store sequence  21978500
.*                                 BIT 3=0 indicates CANCEL=NO, then    21978800
.*                                 STOREEND will finish store sequence  21979100
.*                                 BIT 4=1 means DELHOLD present  @L6A  21979200
.*                                 BIT 5=1 means DELHOLD=HOLD     @L6A  21979300
.*                                 BIT 6=1 means 64bit parm used  @L7A  21979400
.*                                                                @L5A  21979900
.*                                                                      21980200
         DC    XL2'0'          +12 Reserved, must be zero               21983600
         DC    CL8'&FNAME'     +14 Function name                        21987400
.*                                                                      21991200
&TEMP    SETC  '0'                 Set dummy address of TOKEN           21995000
         AIF   ('&TOKEN' EQ '').DOLTOK  Go if token not supplied        22000000
&TEMP    SETC  '&TOKEN'            Get token                            22050000
.DOLTOK  DC    A(&TEMP)        +1C TOKEN address                        22100000
.*                                                                      22200000
&TEMP    SETC  '0'                 Set dummy address of NAME            22250000
         AIF   ('&NAME' EQ '').DOLNAME                                  22500000
&TEMP    SETC  '&NAME'             Get object name                      22550000
.DOLNAME DC    A(&TEMP)        +20 Object name address                  22600000
.*                                                                      22650000
&TEMP    SETC  '0'                Set dummy address of BUFLIST          22700000
         AIF   ('&BUFLIST' EQ '').DOLBUFL                               22950000
&TEMP    SETC  '&BUFLIST'          Get buffer list                      23000000
.DOLBUFL DC    A(&TEMP)        +24 Buffer List address                  23050000
.*                                                                      24750000
&TEMP    SETC  '0'                 Set dummy address of SIZE            24800000
         AIF   ('&SIZE' EQ '').DOLS2A                                   24850000
&TEMP    SETC  '&SIZE'             Get SIZE value                       24900000
.DOLS2A  DC    A(&TEMP)        +28 Size Word address                    24950000
.*                                                                      25050000
&TEMP    SETC  '0'                 Set dummy address of QEL             25052900
         AIF   ('&QEL' EQ '').DOLQ1A                                    25055800
&TEMP    SETC  '&QEL'              Get query element list               25058700
.DOLQ1A  DC    A(&TEMP)        +2C Query Element List address           25061600
.*                                                                      25064500
&TEMP    SETC  '0'                 Set dummy address of MSGAREA         25067400
         AIF   ('&MSGAREA' EQ '').DOLMSG                                25070300
&TEMP    SETC  '&MSGAREA'          Get Message Area                     25073200
.DOLMSG  DC    A(&TEMP)        +30 Message Area address                 25076100
.*                                                                      25079000
&TEMP    SETC  '0'                 Set dummy address of REACODE         25081900
         AIF   ('&REACODE' EQ '').DOLREA                                25084800
&TEMP    SETC  '&REACODE'          Get Reason Code area                 25087700
.DOLREA  DC    A(&TEMP)        +34 Reason Code area address             25090600
.*                                                                      25093500
&TEMP    SETC  '0'                 Set dummy address of RETCODE         25096400
         AIF   ('&RETCODE' EQ '').DOLRET                                25099300
&TEMP    SETC  '&RETCODE'          Get Return Code area                 25102200
.DOLRET  DC    A(&TEMP)        +38 Return Code area address             25105100
.*                                                                      25108000
&TEMP    SETC  '0'                 Set dummy address of MGMTCLAS        25110900
         AIF   ('&MGMTCLAS' EQ '').DOLM1A                               25113800
&TEMP    SETC  '&MGMTCLAS'         Get management class                 25116700
.DOLM1A  DC    A(&TEMP)        +3C Management Class address             25119600
.*                                                                      25122500
&TEMP    SETC  '0'                 Set dummy address of STORCLAS        25125400
         AIF   ('&STORCLAS' EQ '').DOLS1A                               25128300
&TEMP    SETC  '&STORCLAS'         Get storage class                    25131200
.DOLS1A  DC    A(&TEMP)        +40 Storage Class address                25134100
.*                                                                      25137000
&TEMP    SETC  '0'                 Set dummy address of RETPD           25139900
         AIF   ('&RETPD' EQ '').DOLR1A                                  25142800
&TEMP    SETC  '&RETPD'            Get retention period                 25145700
.DOLR1A  DC    A(&TEMP)        +44 Retention Period address             25148600
.*                                                                      25151500
&TEMP    SETC  '0'                 Set dummy address of LENGTH          25154400
         AIF   ('&LENGTH' EQ '').DOLLNG                                 25157300
&TEMP    SETC  '&LENGTH'           Get Partial Object Read length       25160200
.DOLLNG  DC    A(&TEMP)        +48 POR Length address                   25163100
.*                                                                      25166000
&TEMP    SETC  '0'                 Set dummy address of OFFSET          25168900
         AIF   ('&OFFSET' EQ '').DOLOFS                                 25171800
&TEMP    SETC  '&OFFSET'           Get Partial Object Read offset       25174700
.DOLOFS  DC    A(&TEMP)        +4C POR Offset address                   25177600
.*                                                                      25180500
&TEMP    SETC  '0'                 Set dummy address of COLLECTN        25183400
         AIF   ('&COLLECTN' EQ '').DOLCOL                               25186300
&TEMP    SETC  '&COLLECTN'         Get Collection Name pointer          25189200
.DOLCOL  DC    A(&TEMP)        +50 Collection name address              25192100
.*                                                                      25195000
&TEMP    SETC  '0'                 Set dummy address of IADDRESS @D1A   25197900
         AIF   ('&IADDRESS' EQ '').DOLIADD                       @D1A   25200800
&TEMP    SETC  '&IADDRESS'         Get DB2 Lang Interface Addr   @D1A   25203700
.DOLIADD DC    A(&TEMP)        +54 Interface IADDRESS            @D1C   25206600
.*                                                                      25209500
&TEMP    SETC  '0'                 Set dummy address of TTOKEN   @L2A   25210400
         AIF   ('&TTOKEN'   EQ '').DOLTTKN                       @L2A   25211300
&TEMP    SETC  '&TTOKEN'           Get TTOKEN   Interface Addr   @L2A   25212200
.DOLTTKN DC    A(&TEMP)        +58 Interface TTOKEN              @L2C   25213100
.*                                                               @L4A   25213400
&TEMP    SETC  '0'                 Set dummy address of RCLND    @L4A   25213700
         AIF   ('&RECALL'   EQ '').DOLRCLD                       @L4A   25214000
&TEMP    SETC  '&RECALL'           Get Recall Days Addr          @L4A   25214300
.DOLRCLD DC    A(&TEMP)        +5C Recall Number of Days         @L4A   25214600
.*                                                               @L4A   25214900
&TEMP    SETC  '0'                 Set dummy address of RCLRC    @L4A   25215200
         AIF   ('&RETCODE2' EQ '').DOLRC2                        @P4C   25215500
&TEMP    SETC  '&RETCODE2'         Get RETCODE2  Addr            @P4C   25215800
.DOLRC2  DC    A(&TEMP)        +60 RETCODE2                      @P4C   25216100
&TEMP    SETC  '0'                 Set dummy address of STOKEN   @L5A   25216200
         AIF   ('&STOKEN' EQ '').DOSTKN                          @L5A   25216300
&TEMP    SETC  '&STOKEN'           Get STOKEN  Addr              @L5A   25216400
.DOSTKN  DC    A(&TEMP)        +64 STOKEN                        @L5A   25216500
&TEMP    SETC  '0'                 Set dummy address of STIMEOUT @L5A   25216600
         AIF   ('&STIMEOUT' EQ '').DOSTMO                        @L5A   25216700
&TEMP    SETC  '&STIMEOUT'         Get STIMEOUT  Addr            @L5A   25216800
.DOSTMO  DC    A(&TEMP)        +68 STIMEOUT                      @L5A   25216900
.*                                                              2@L5D   25217000
&TEMP    SETC  '0'                 Set dummy address of EVENTEXP @L6A   25217100
         AIF   ('&EVENTEXP' EQ '').DOEVEX                        @L6A   25217200
&TEMP    SETC  '&EVENTEXP'         Get EVENTEXP  Addr            @L6A   25217300
.DOEVEX  DC    A(&TEMP)        +6C EVENTEXP                      @L6A   25217400
&TEMP    SETC  '0'                 Set dummy address of BUFFER64 @L7A   25217500
         AIF   ('&BUFFER64' EQ '').DOB64B                        @L7A   25217600
&TEMP    SETC  '&BUFFER64'         Get BUFFER64                  @L7A   25217700
.DOB64B  DC    A(&TEMP)        +70 BUFFER64 address              @L7A   25217800
.*                                                               @L7A   25217900
&TEMP    SETC  '0'                 Set dummy address of SIZE64   @L7A   25218000
         AIF   ('&SIZE64' EQ '').DOSIZ64                         @L7A   25218100
&TEMP    SETC  '&SIZE64'         Get SIZE64                      @L7A   25218200
.DOSIZ64 DC    A(&TEMP)        +74 SIZE64 address                @L7A   25218300
.*                                                               @L7A   25218400
&TEMP    SETC  '0'                 Set dummy address of OFFSET64 @L7A   25218500
         AIF   ('&OFFSET64' EQ '').DOOFF64                       @L7A   25218600
&TEMP    SETC  '&OFFSET64'         Get OFFSET64                  @L7A   25218700
.DOOFF64 DC    A(&TEMP)        +78 OFFSET64 address              @L7A   25218800
.*                                                               @L7A   25218900
&TEMP    SETC  '0'                 Set dummy address of LENGTH64 @L7A   25219000
         AIF   ('&LENGTH64' EQ '').DOLEN64                       @L7A   25219100
&TEMP    SETC  '&LENGTH64'         Get LENGTH64                  @P8C   25219200
.DOLEN64 DC    A(&TEMP)        +7C LENGTH64 address              @L7A   25219300
.*                                                                      25219400
&TEMP    SETC  '0'                 Set dummy address of DB2ID    @L8A   25219500
         AIF   ('&DB2ID' EQ '').DODBID                           @L8A   25219600
&TEMP    SETC  '&DB2ID'            Get DB2ID                     @L8A   25219700
.DODBID  DC    A(&TEMP)        +80 DB2ID address                 @L8C   25219800
         DC    XL4'0'          +84 Reserved, must be zero        @L7C   25220600
         DC    XL4'0'          +88 Reserved, must be zero        @L7C   25220700
         DC    XL4'0'          +8C Reserved, must be zero        @L7C   25220800
         DC    XL4'0'          +90 Reserved, must be zero        @L7C   25220900
.*                                                                      25221000
         LTORG                     For literal addressability           25221100
.*                                                                      25224000
         AGO   .MEND               End MF=L form                        25226900
.*                                                                      25229800
.********************************************************************** 25232700
.*                BEGIN THE EXPANSION OF THE EXECUTE FORM             * 25235600
.********************************************************************** 25238500
.*                                                                      25241400
.DOMFE   ANOP                                                           25250000
         AIF   (NOT &MFCOMPLETE).DOMFE1  If COMPLETE, continue check    25261100
         AIF   ('&FUNCTION'(1,1) NE '(').DOMFE1 If function suppressed  25272200
.*                                                                      25283300
         MNOTE 8,'FUNCTION MUST BE SPECIFIED FOR MF=E,,COMPLETE.'       25294400
         AGO   .MEND                                                    25305500
.*                                                                      25316600
.DOMFE1  ANOP                                                           25327700
&LIST    SETC  '(1)'               Default parameter list ptr reg 1     25338800
         AIF   ('&MF(2)'(1,1) EQ '(').EREG   Go if address list in reg  25350000
&LABEL   LA    1,&MF(2)            Get parm list address from label     25400000
         AGO   .EMCONT                                                  25450000
.EREG    AIF   ('&MF(2)' EQ '(1)').EREG1    Go if R1 already loaded     25500000
&TEMP    SETC  '&MF(2)'(2,K'&MF(2)-2)  Extract the register from parens 25550000
&LABEL   LR    1,&TEMP             Get parm list address from register  25600000
         AGO   .EMCONT                                                  25650000
.EREG1   AIF  ('&LABEL' EQ '').EMCONT  Go if we do not need a label     25700000
&LABEL   DS    0H                                                       25750000
         AGO   .EMCONT                                                  25800000
.*                                                                      25850000
.********************************************************************** 25890000
.*                BEGIN THE EXPANSION OF THE MODIFY FORM              * 25930000
.********************************************************************** 25970000
.*                                                                      26010000
.DOMFM   ANOP      We do not need to point register 1 to the param list 26050000
         AIF   ('&MF(2)'(1,1) EQ '(').MREG   Go if address list in reg  26100000
&LIST    SETC  '+&MF(2)'           Save where to store parameters       26150000
         AGO   .MLABEL             Go to make label for modify form     26200000
.MREG    ANOP                      The list address is in a register    26250000
&LIST    SETC  '&MF(2)'            Save where to store parameters       26300000
.MLABEL  AIF  ('&LABEL' EQ '').EMCONT  Go if we do not need a label     26350000
&LABEL   DS    0H                                                       26400000
.*                                                                      26450000
.********************************************************************** 26500000
.*                CONTINUE THE EXPANSION FOR EXECUTE AND MODIFY FORMS * 26550000
.********************************************************************** 26600000
.*                                                                      28300000
.EMCONT  ANOP                                                           28350000
         AIF   (NOT &MFCOMPLETE).EMCONT1  If not COMPLETE, set parms    28400000
.*                                                                      28600000
         AIF   ('&LIST'(1,1) EQ '(').EMCHLR Go if parm list in reg      28650000
.*                                                                      28800000
         XC    0&LIST.(&CBLKLN),0&LIST    Clear parm list area          28850000
         MVC   0&LIST.(4),=CL4'&CBLKID'   Set parm list ID chars        28900000
         AGO   .EMCHDR                                                  28950000
.*                                                                      29450000
.EMCHLR  ANOP                                                           29500000
&TEMP    SETC  '&LIST'(2,K'&LIST-2)       Extract register from parens  29550000
         XC    0(&CBLKLN,&TEMP),0(&TEMP)  Clear parm list area          29600000
         MVC   0(4,&TEMP),=CL4'&CBLKID'   Set parm list ID chars        29650000
.*                                                                      29700000
.EMCHDR  MVI   4&LIST,&CBLKLN             Set parm list length          29740000
         MVI   5&LIST,&VCODE              Set parm list version number  29780000
         MVI   6&LIST,&RCODE              Set parm list release number  29820000
         MVI   7&LIST,&LCODE              Set parm list level number    29860000
.*                                                                      29900000
.EMCONT1 ANOP                                                           29906000
         AIF   ('&FUNCTION'(1,1) EQ '(').EMSTRLB Go if func suppressed  29912000
         MVI   16&LIST,&FCODE             Set function code             29918000
         AIF   ('&LIST'(1,1) EQ '(').EMCNLR Go if parm list in reg      29924000
         MVC   20&LIST.(8),=CL8'&FNAME'   Set function name             29930000
         AGO   .EMSTRLB                                                 29936000
.*                                                                      29942000
.EMCNLR  ANOP                                                           29948000
&TEMP    SETC  '&LIST'(2,K'&LIST-2)       Extract register from parens  29954000
         MVC   20(8,&TEMP),=CL8'&FNAME'   Set function name             29960000
.*                                                                      29966000
.EMSTRLB ANOP                   Set RELBUF, VIEW, CANCEL flags     @L5C 29970800
.*       If none of RELBUF,VIEW,CANCEL,DELHOLD, or any 64bit parms @L7C 29975600
.*       have been specified, then continue                        @L7C 29975700
         AIF   ('&RELBUF' EQ '' AND '&VIEW' EQ '' AND                  x29980400
               '&DELHOLD' EQ '' AND '&CANCEL' EQ '' AND                x29983600
                NOT &B64ON).EMSTTKN                                @L7C 29986800
         AIF   (&MFCOMPLETE).EMSTFL       Go if COMPLETE specified @02A 29990000
&RELBMSK SETB  ('&RELBUF' EQ 'YES' OR '&RELBUF' EQ '') RELBUF mask @02A 29996000
&VIEWMSK SETB  ('&VIEW' EQ 'BACKUP' OR '&VIEW' EQ '' OR                x29998600
               '&VIEW' EQ 'BACKUP2')                   VIEW mask   @L3C 30001200
.*                                                                      30003800
&VIEW2MK SETB  ('&VIEW' EQ 'BACKUP2')                VIEWB2 mask   @L3A 30006400
&CNCLMSK SETB  ('&CANCEL' EQ 'YES' OR '&CANCEL' EQ '') CANCEL mask @L5A 30007700
.*                                                                      30009000
.* Set DELHOLD masks and flags                                     @L6A 30009800
.* Note that a DELHOLD value supplied on an MF=L macro cannot be   @L6A 30010600
.* overridden (MF=E, MF=M) to the 'DELHOLD not provided' state.    @L6A 30011400
.* The same is true for B64ON. No overide if previously specified  @L7A 30011500
.*                                                                      30012200
&DELHPMK SETB  1                   DELHP mask always set           @L6A 30013000
&B64ONMK SETB  1                   B64ON mask always set           @L7A 30013400
&DELHOMK SETB  ('&DELHOLD' EQ 'HOLD' OR '&DELHOLD' EQ '') DELHO msk@L6A 30013800
.* &B64ON has been set already if any 64 bit parms were specified. @L7A 30013900
&TEMP    SETC  '&RELBMSK.&VIEWMSK.&VIEW2MK.&CNCLMSK.&DELHPMK.&DELHOMK.&x30014600
               B64ONMK.&B7ON.'                                     @L7C 30015400
.*                                                                 @02A 30016800
         NI    17&LIST,B'&TEMP'      Reset flag if ZERO specified  @02A 30020000
.EMSTFL  ANOP                                                      @02A 30026000
&TEMP    SETC  '&RELBON.&VIEWB.&VIEWB2.&CNCLON.&DELHP.&DELHO.&B64ON.&B7x30032000
               ON.'                                                @L7C 30038000
         OI    17&LIST,B'&TEMP'      Set flag if ONE specified     @02C 30044000
.*                                                                      30050000
.EMSTTKN AIF   ('&TOKEN' EQ '').EMNAME  Go if TOKEN not supplied        30056000
         AIF   ('&TOKEN'(1,1) EQ '(').EMTOKR  Go if token in reg        30062000
         LA    15,&TOKEN           Get token address                    30068000
         AGO   .EMSTOK             And go set token address             30074000
.EMTOKR  LR    15,&TOKEN(1)        Get token address from reg           30080000
.EMSTOK  ST    15,28&LIST      +1C TOKEN address                        30086000
.*                                                                      30092000
.EMNAME  AIF   ('&NAME' EQ '').EMBUFL  Go if NAME not supplied          30098000
         AIF   ('&NAME'(1,1) EQ '(').EMNAMR  Go if name in reg          30104000
         LA    15,&NAME            Get name address                     30110000
         AGO   .EMSNAM             And go set name address              30116000
.EMNAMR  LR    15,&NAME(1)         Get name address from reg            30122000
.EMSNAM  ST    15,32&LIST      +20 NAME address                         30128000
.*                                                                      30134000
.EMBUFL  AIF   ('&BUFLIST' EQ '').EMSIZE  Go if BUFLIST not supplied    30140000
         AIF   ('&BUFLIST'(1,1) EQ '(').EMBUFR  Go if buflist in reg    30146000
         LA    15,&BUFLIST         Get buflist address                  30152000
         AGO   .EMSBUF             And go set buflist address           30158000
.EMBUFR  LR    15,&BUFLIST(1)      Get buflist address from reg         30164000
.EMSBUF  ST    15,36&LIST      +24 BUFLIST address                      30170000
.*                                                                      30176000
.EMSIZE  AIF   ('&SIZE' EQ '').EMQEL   Go if SIZE not supplied          30182000
         AIF   ('&SIZE'(1,1) EQ '(').EMSIZR  Go if size in reg          30188000
         LA    15,&SIZE            Get size address                     30194000
         AGO   .EMSSIZ             And go set size address              30200000
.EMSIZR  LR    15,&SIZE(1)         Get size address from reg            30206000
.EMSSIZ  ST    15,40&LIST      +28 SIZE address                         30212000
.*                                                                      30218000
.EMQEL   AIF   ('&QEL' EQ '').EMMSGA  Go if QEL not supplied            30224000
         AIF   ('&QEL'(1,1) EQ '(').EMQELR  Go if qel in reg            30230000
         LA    15,&QEL             Get qel address                      30236000
         AGO   .EMSQEL             And go set qel address               30242000
.EMQELR  LR    15,&QEL(1)          Get qel address from reg             30248000
.EMSQEL  ST    15,44&LIST      +2C QEL address                          30254000
.*                                                                      30260000
.EMMSGA  AIF   ('&MSGAREA' EQ '').EMREAC  Go if MSGAREA not supplied    30266000
         AIF   ('&MSGAREA'(1,1) EQ '(').EMMSGR  Go if msgarea in reg    30272000
         LA    15,&MSGAREA         Get msgarea address                  30278000
         AGO   .EMSMSG             And go set msgarea address           30284000
.EMMSGR  LR    15,&MSGAREA(1)      Get msgarea address from reg         30290000
.EMSMSG  ST    15,48&LIST      +30 MSGAREA address                      30296000
.*                                                                      30302000
.EMREAC  AIF   ('&REACODE' EQ '').EMRETC  Go if REACODE not supplied    30308000
         AIF   ('&REACODE'(1,1) EQ '(').EMREAR  Go if reason code reg   30314000
         LA    15,&REACODE         Get reason code address              30320000
         AGO   .EMSREA             And go set reason code address       30326000
.EMREAR  LR    15,&REACODE(1)      Get reason code address from reg     30332000
.EMSREA  ST    15,52&LIST      +34 REACODE address                      30338000
.*                                                                      30344000
.EMRETC  AIF   ('&RETCODE' EQ '').EMMGMC  Go if RETCODE not supplied    30350000
         AIF   ('&RETCODE'(1,1) EQ '(').EMRETR  Go if return code reg   30356000
         LA    15,&RETCODE         Get return code address              30362000
         AGO   .EMSRET             And go set return code address       30368000
.EMRETR  LR    15,&RETCODE(1)      Get return code address from reg     30374000
.EMSRET  ST    15,56&LIST      +38 RETCODE address                      30380000
.*                                                                      30386000
.EMMGMC  AIF   ('&MGMTCLAS' EQ '').EMSTGC  Go if MGMTCLAS not supplied  30392000
         AIF   ('&MGMTCLAS'(1,1) EQ '(').EMMGMR  Go if mgmt class reg   30398000
         LA    15,&MGMTCLAS        Get mgmt class address               30404000
         AGO   .EMSMGM             And go set mgmt class address        30410000
.EMMGMR  LR    15,&MGMTCLAS(1)     Get mgmt class address from reg      30416000
.EMSMGM  ST    15,60&LIST      +3C MGMTCLAS address                     30422000
.*                                                                      30428000
.EMSTGC  AIF   ('&STORCLAS' EQ '').EMRETP  Go if STORCLAS not supplied  30434000
         AIF   ('&STORCLAS'(1,1) EQ '(').EMSTGR  Go if strg class reg   30440000
         LA    15,&STORCLAS        Get strg class address               30446000
         AGO   .EMSSTG             And go set strg class address        30452000
.EMSTGR  LR    15,&STORCLAS(1)     Get strg class address from reg      30458000
.EMSSTG  ST    15,64&LIST      +40 STORCLAS address                     30464000
.*                                                                      30470000
.EMRETP  AIF   ('&RETPD' EQ '').EMLENG  Go if RETPD not supplied        30476000
         AIF   ('&RETPD'(1,1) EQ '(').EMRTPR  Go if retpd in reg        30482000
         LA    15,&RETPD           Get retpd address                    30488000
         AGO   .EMSRTP             And go set retpd address             30494000
.EMRTPR  LR    15,&RETPD(1)        Get retpd address from reg           30500000
.EMSRTP  ST    15,68&LIST      +44 RETPD address                        30506000
.*                                                                      30512000
.EMLENG  AIF   ('&LENGTH' EQ '').EMOFFS  Go if LENGTH not supplied      30518000
         AIF   ('&LENGTH'(1,1) EQ '(').EMLNGR  Go if length in reg      30524000
         LA    15,&LENGTH          Get length address                   30530000
         AGO   .EMSLNG             And go set length address            30536000
.EMLNGR  LR    15,&LENGTH(1)       Get length address from reg          30542000
.EMSLNG  ST    15,72&LIST      +48 LENGTH address                       30548000
.*                                                                      30554000
.EMOFFS  AIF   ('&OFFSET' EQ '').EMCLNM  Go if OFFSET not supplied      30560000
         AIF   ('&OFFSET'(1,1) EQ '(').EMOFSR  Go if offset in reg      30566000
         LA    15,&OFFSET          Get offset address                   30572000
         AGO   .EMSOFS             And go set offset address            30578000
.EMOFSR  LR    15,&OFFSET(1)       Get offset address from reg          30584000
.EMSOFS  ST    15,76&LIST      +4C OFFSET address                       30590000
.*                                                                      30596000
.EMCLNM  AIF   ('&COLLECTN' EQ '').EMIADD  Go if no COLLECTN      @D1C  30602000
         AIF   ('&COLLECTN'(1,1) EQ '(').EMCLNMR Go if collectn in reg  30608000
         LA    15,&COLLECTN        Get collectn name address            30614000
         AGO   .EMSCLNM            And go set collectn name address     30620000
.EMCLNMR LR    15,&COLLECTN(1)     Get collectn name address from reg   30626000
.EMSCLNM ST    15,80&LIST      +50 COLLECTN name address                30632000
.*                                                                      30638000
.EMIADD  AIF   ('&IADDRESS' EQ '').EMTTOK  Go if no IADDRESS ptr  @D1A  30644000
         AIF   ('&IADDRESS'(1,1) EQ '(').EMIADDR Go if in reg     @D1A  30650000
         LA    15,&IADDRESS        Get IADDRESS                   @D1A  30656000
         AGO   .EMSIADD            Go set IADDRESS pointer        @D1A  30662000
.EMIADDR LR    15,&IADDRESS(1)     Get IADDRESS from register     @D1A  30668000
.EMSIADD ST    15,84&LIST      +54 Language Interface ADDRESS     @D1A  30674000
.*                                                                      30680000
.EMTTOK  AIF   ('&TTOKEN' EQ '').EMRCLD    Go if no TTOKEN   ptr  @L4C  30680700
         AIF   ('&TTOKEN'(1,1) EQ '(').EMTTOKR   Go if in reg     @L2A  30681400
         LA    15,&TTOKEN          Get TTOKEN                     @L2A  30682100
         AGO   .EMSTTOK            Go set TTOKEN   pointer        @L2A  30682800
.EMTTOKR LR    15,&TTOKEN(1)       Get TTOKEN   from register     @L2A  30683500
.EMSTTOK ST    15,88&LIST      +58 User Tracking Token TTOKEN     @L2A  30684200
.*                                                                      30684900
.EMRCLD  AIF   ('&RECALL' EQ '').EMRC2      Go if no RECALL ptr   @P4C  30685800
         AIF   ('&RECALL'(1,1) EQ '(').EMRCLDR  Go if in reg      @L4A  30686700
         LA    15,&RECALL          Get RECALL                     @P5C  30687600
         AGO   .EMSRCLD            Go set RECALL pointer          @L4A  30688500
.EMRCLDR LR    15,&RECALL(1)       Get Recall from register       @L4A  30689400
.EMSRCLD ST    15,92&LIST      +5C Recall Number of Days address  @L4A  30690300
.*                                                                      30691200
.EMRC2   AIF   ('&RETCODE2' EQ '').EMSTKN    Go if no RETCODE2 ptr@L5C  30692100
         AIF   ('&RETCODE2'(1,1) EQ '(').EMRRC2  Go if in reg     @P4C  30693000
         LA    15,&RETCODE2        Get RETCODE2                   @P5C  30693900
         AGO   .EMSRC2             Go set RETCODE2 pointer        @P4C  30694800
.EMRRC2  LR    15,&RETCODE2(1)     Get RETCODE2 from register     @P4C  30695700
.EMSRC2  ST    15,96&LIST      +60 RETCODE2 address               @P4C  30696600
.*                                                                      30696700
.EMSTKN  AIF   ('&STOKEN' EQ '').EMSTMO    Go if no STOKEN ptr    @L5A  30696800
         AIF   ('&STOKEN'(1,1) EQ '(').EMRSTKN Go if in reg       @L5A  30696900
         LA    15,&STOKEN          Get STOKEN                     @L5A  30697000
         AGO   .EMSSTKN            Go set STOKEN pointer          @L5A  30697100
.EMRSTKN LR    15,&STOKEN(1)       Get STOKEN from register       @L5A  30697200
.EMSSTKN ST    15,100&LIST     +64 STOKEN address                 @L5A  30697300
.*                                                                @L5A  30697400
.EMSTMO  AIF   ('&STIMEOUT' EQ '').EMEVEX    Go if no STIMEOUT ptr@L6C  30697500
         AIF   ('&STIMEOUT'(1,1) EQ '(').EMRSTMO Go if in reg     @L5A  30697600
         LA    15,&STIMEOUT        Get STIMEOUT                   @L5A  30697700
         AGO   .EMSSTMO            Go set STIMEOUT pointer        @L5A  30697800
.EMRSTMO LR    15,&STIMEOUT(1)     Get STIMEOUT from register     @L5A  30697900
.EMSSTMO ST    15,104&LIST     +68 STIMEOUT address               @L5A  30698000
.*                                                                @L5A  30698200
.EMEVEX  AIF   ('&EVENTEXP' EQ '').EMBFL64   Go if no EVENTEXP ptr@L7C  30698400
         AIF   ('&EVENTEXP'(1,1) EQ '(').EMREVEX Go if in reg     @L6A  30698600
         LA    15,&EVENTEXP        Get EVENTEXP                   @L6A  30698800
         AGO   .EMSEVEX            Go set EVENTEXP pointer        @L6A  30699000
.EMREVEX LR    15,&EVENTEXP(1)     Get EVENTEXP from register     @L6A  30699200
.EMSEVEX ST    15,108&LIST     +6C EVENTEXP address               @L6A  30699400
.*                                                                @L5A  30699600
.EMBFL64 AIF   ('&BUFFER64' EQ '').EMSIZ64 Go if no BUFFER64      @L7A  30700000
         AIF   ('&BUFFER64'(1,1) EQ '(').EMBFR64 Go if in reg     @L7A  30701000
         LA    15,&BUFFER64        Get buffer64 address           @L7A  30702000
         AGO   .EMSBF64            And go set buffer64 address    @L7A  30703000
.EMBFR64 LR    15,&BUFFER64(1)      Get buffer64 address from reg @L7A  30704000
.EMSBF64 ST    15,112&LIST     +70 BUFFER64 address               @L7A  30705000
.*                                                                @L7A  30706000
.EMSIZ64 AIF   ('&SIZE64' EQ '').EMOFF64   Go if no SIZE64        @L7A  30707000
         AIF   ('&SIZE64'(1,1) EQ '(').EMSZR64  Go if size in reg @L7A  30708000
         LA    15,&SIZE64           Get size64 address            @L7A  30709000
         AGO   .EMSSZ64             And go set size64 address     @L7A  30710000
.EMSZR64 LR    15,&SIZE64(1)        Get size64 address from reg   @L7A  30711000
.EMSSZ64 ST    15,116&LIST     +74 SIZE64 address                 @L7A  30712000
.*                                                                @L7A  30713000
.EMOFF64 AIF   ('&OFFSET64' EQ '').EMLNG64  Go if no OFFSET64     @L7A  30714000
         AIF   ('&OFFSET64'(1,1) EQ '(').EMOFS64 Go if in reg     @L7A  30715000
         LA    15,&OFFSET64          Get offset64 address         @L7A  30716000
         AGO   .EMSOF64            And go set offset64 address    @L7A  30717000
.EMOFS64 LR    15,&OFFSET64(1)       Get offset64 address from reg@L7A  30718000
.EMSOF64 ST    15,120&LIST     +78 OFFSET64 address               @L7A  30719000
.*                                                                @L7A  30720000
.EMLNG64 AIF   ('&LENGTH64' EQ '').EMDBID Go if no LENGTH64       @L8C  30721000
         AIF   ('&LENGTH64'(1,1) EQ '(').EMLNR64 Go if in reg     @L7A  30722000
         LA    15,&LENGTH64          Get length64 address         @L7A  30723000
         AGO   .EMSLN64            And go set length64 address    @L7A  30724000
.EMLNR64 LR    15,&LENGTH64(1)       Get length64 address from reg@L8C  30725000
.EMSLN64 ST    15,124&LIST     +7C LENGTH64 address               @L7A  30726000
.EMDBID  AIF   ('&DB2ID' EQ '').EMDONE  Go if no DB2ID            @L8A  30726100
         AIF   ('&DB2ID'(1,1) EQ '(').EMDBIDR Go if in reg        @L8A  30726200
         LA    15,&DB2ID             Get DB2ID address            @L8A  30726300
         AGO   .EMSDBID            And go set DB2ID address       @L8A  30726400
.EMDBIDR LR    15,&DB2ID(1)          Get DB2ID address from reg   @L8A  30726500
.EMSDBID ST    15,128&LIST     +80 DB2ID address                  @L8A  30726600
.*                                                                      30727000
.EMDONE  AIF   ('&MF(1)' EQ 'M').MEND   Go if doing the modify form     30730000
         AIF   ('&FUNC' EQ 'ACCESS').INVOKE2                            30740000
         AIF   ('&FUNC' EQ 'UNACCESS').INVOKE2                          30750000
.*                                                                      32650000
.********************************************************************** 32700000
.*  INVOKE OSREQ SERVICE FOR EXECUTE FORM                             * 32750000
.********************************************************************** 32900000
.*                                                                      32950000
         L     0,=X'&REQERR.&FCODEH.&PLSERR1.' Prmlst err rsn code @L5C 33000000
         L     15,28&LIST          Get TOKEN address from parm lst      33050000
         L     0,=X'&REQERR.&FCODEH.&TKNERR1.' Set tkn err rsn code@L5C 33100000
.*                                                                      33150000
         LTR   15,15               Is TOKEN address equal to zero ?     33200000
         BZ    *+44                Branch if so to set error            33250000
         CLC   0(4,15),=CL4'&TOKNID' Token addressable & initialized?   33300000
         L     0,=X'&REQERR.&FCODEH.&TKNERR2.' Preset err rsn code @L5C 33350000
         BNE   *+30                Branch if not to set error           33400000
         L     15,4(,15)           Get OSR work area address            33450000
         LTR   15,15               Is OSR wrk area address eq zero ?    33500000
         BZ    *+20                Branch if so to set error            33550000
         CLC   0(4,15),=CL4'&MWAID' Token points to OSR cntl block ?    33600000
         BNE   *+10                Branch if not to set error           33650000
         SLR   0,0                 Else clear error reason from reg 0   33700000
         B     *+12                And continue, token OK               33750000
.*                                                                      33800000
         LA    15,&BADREQT         Set return code to error             33850000
         B     *+10                Bypass OSREQ processing, set rc      33900000
.*                                                                      33950000
         L     15,4(,15)           Get OSR OSREQ entry point for call   34000000
         BASR  14,15               Call OSR interface                   34050000
         AGO   .MEND                                                    34100000
.*                                                                      34114800
.********************************************************************** 34129600
.* Generate invocation code for ACCESS or UNACCESS.                     34144400
.********************************************************************** 34159200
.*                                                                      34174000
.INVOKE2 STM   14,12,12(13)        Save some general registers          34188800
         ESAR  15                  Extract Secondary ASN (SASID)        34203600
         ST    15,16(,13)          Save SASID in reg 15 save            34218400
         L     14,16(,0)           Get CVT address                      34233200
         L     15,1216(,14)        Get DFA addr (Data Facilities Area)  34248000
         L     14,44(,15)          Get DFVT addr (Data Fac. Vec. Table) 34262800
         L     15,24(,14)          Get OSR Area address                 34277600
         LTR   15,15               Validate                      @P1A   34292400
         BZ    *+66                       control block            @P9C 34307200
         CLC   0(4,15),=CL4'&OSMAID'                   address   @P1A   34322000
         BNE   *+56                                                @P9C 34336800
         LT    0,152(,15)          Have classic/tape lib subsys?   @P9A 34336900
         BNZ   *+14                Proceed if so                   @P9A 34337000
         LT    0,344(,14)          Have multiple OAM subsys?       @P9A 34338000
         BZ    *+44                If not, empty config error      @P9A 34339000
         L     0,20(,13)           Restore original register 0     @P9A 34340000
         L     15,8(,15)           Get LX/EX for OSREQ ACCESS/UNACCESS  34351600
         PC    0(15)               Invoke OSREQ ACCESS or UNACCESS      34366400
         L     2,16(,13)           Get original SASID                   34381200
         SSAR  2                   Restore original SASID               34396000
         L     14,12(,13)          Restore original register 14         34410800
         LM    2,12,28(13)         Restore some of program's registers  34425600
         B     *+20                                                @P9C 34440400
         L     0,=X'&OSMAERR.&FCODEH.&NOOSMA.'  set rsn code     @L5C   34455200
         B     *+8                                                 @P9A 34455300
         L     0,=X'&OSMAERR.&FCODEH.&EMPTY.'   set rsn code       @P9A 34455400
         LA    15,&BADREQO                      set return code  @P1A   34470000
.*                                                                      34484800
.MEND    MEND                                                           34500000
.*/                                                                     34550000
*%OSRQMAP:;                                                             34600000
 /********************************************************************/ 34650000
 /*      OSREQ MACRO PLAS MAP                                        */ 34700000
 /********************************************************************/ 34750000
 @SPACE(1);                       /*                                 */ 34800000
   DECLARE                        /*                                 */ 34850000
     1 CBRIREQ BASED BDY(WORD),   /* OSREQ Macro Parm Block Map      */ 34900000
       2 REQHDR,                  /* REQ header                      */ 34950000
         3 REQID    CHAR(4),      /* Identifier                      */ 35000000
         3 REQLN    FIXED(8),     /* REQ length (136 or X'88')   @L7C*/ 35050000
         3 REQVER   FIXED(8),     /* REQ Version,                    */ 35100000
         3 REQREL   FIXED(8),     /* REQ Release,                    */ 35150000
         3 REQLVL   FIXED(8),     /* REQ Level, X'0'                 */ 35200000
       /*     Control Block Queue pointers (reserved)                */ 35250000
       2 REQRSV1  PTR(31),        /* REQ Reserved Q forward pointer  */ 35300000
       2 REQRSV2  PTR(31),        /* REQ Reserved Q backward pointer */ 35350000
       /*     Control Fields                                         */ 35400000
       2 REQFUNC  FIXED(8),       /* REQ encoded Function            */ 35450000
       2 REQFLG1  BIT(8),         /* REQ Flags                       */ 35500000
         3 REQRELBF BIT(1),       /* REQ RELBUF Flag                    35550000
                                     1 means RELBUF=YES, so page        35600000
                                     release will be performed.         35650000
                                     0 means RELBUF=NO, so no pages     35700000
                                     will be released            @02C*/ 35750000
                                  /* REQVIEW=0 AND REQVIEW2=0           35800000
                                     indicates VIEW=PRIMARY, so the     35850000
                                     primary copy will be addressed     36000000
                                     REQVIEW=1 AND REQVIEW2=0           36012500
                                     indicates VIEW=BACKUP, so the 1st  36025000
                                     backup copy will be addressed      36037500
                                     REQVIEW=1 AND REQVIEW2=1           36050000
                                     indicates VIEW=BACKUP2,so the 2nd  36062500
                                     backup copy will be addressed      36075000
                                     REQVIEW=0 AND REQVIEW2=1           36087500
                                     indicates invalid states    @L3C*/ 36100000
         3 REQVIEW  BIT(1),       /* REQVIEW and REQVIEW2 flags  @L3C*/ 36112500
         3 REQVIEW2 BIT(1),       /* REQVIEW and REQVIEW2 flags  @L3A*/ 36125000
         3 REQCNCL  BIT(1),       /* CANCEL flag for STOREEND           36127700
                                     1 means CANCEL=YES specified with  36130400
                                     STOREEND to cancel store sequence  36133100
                                     0 means CANCEL=NO specified or     36135800
                                     CANCEL keyword not specified,then  36138500
                                     STOREEND will finish the store     36141200
                                     sequence                    @P7C*/ 36143000
         3 REQDELHP BIT(1),       /* 1=DELHOLD present on OSREQ  @P7C*/ 36144800
         3 REQDELH  BIT(1),       /* DELHOLD, 1=HOLD, 0=NOHOLD   @P7C*/ 36146600
         3 REQ64BUF BIT(1),       /* 1=64 bit buffer parms used  @L7A*/ 36146700
         3 *        BIT(1),       /* REQ Flags (reserved)        @L7C*/ 36148400
       2 REQRSV3  FIXED(16),      /* REQ reserved control bytes      */ 36150000
       2 REQFUNN  CHAR(8),        /* REQ EBCDIC Function name        */ 36200000
       /*     Keyword Parameter Pointers                             */ 36250000
       2 REQTOKN@ PTR(31),        /* REQ TOKEN pointer               */ 36300000
       2 REQNAME@ PTR(31),        /* REQ Object Name pointer         */ 36350000
       2 REQBUFL@ PTR(31),        /* REQ Buffer List pointer         */ 36400000
       2 REQSIZE@ PTR(31),        /* REQ Object Size pointer         */ 36450000
       2 REQQEL@  PTR(31),        /* REQ Queue Element List pointer  */ 36500000
       2 REQMSGA@ PTR(31),        /* REQ Message Area pointer        */ 36550000
       2 REQREAC@ PTR(31),        /* REQ Reason Code pointer         */ 36600000
       2 REQRETC@ PTR(31),        /* REQ Return Code pointer         */ 36650000
       2 REQMGMC@ PTR(31),        /* REQ Management Class pointer    */ 36700000
       2 REQSTGC@ PTR(31),        /* REQ Storage Class pointer       */ 36750000
       2 REQRTPD@ PTR(31),        /* REQ Retention Period pointer    */ 36800000
       2 REQLENG@ PTR(31),        /* REQ Length pointer              */ 36850000
       2 REQOFFS@ PTR(31),        /* REQ Object offset pointer       */ 36900000
       2 REQCLNM@ PTR(31),        /* REQ Collection name pointer     */ 36950000
       2 REQIADR@ PTR(31),        /* REQ Iaddress pointer        @D1C*/ 37000000
       2 REQTTOK@ PTR(31),        /* REQ User tracking token ptr @L2A*/ 37050000
       2 REQRCLND@ PTR(31),       /* REQ Recall Number Days ptr  @L4A*/ 37066600
       2 REQRC2@  PTR(31),        /* REQ RETCODE2 ptr            @P4C*/ 37080400
       2 REQSTOK@ PTR(31),        /* REQ Store token ptr         @L5C*/ 37092400
       2 REQSTMO@ PTR(31),        /* REQ Store timeout ptr       @L5C*/ 37104400
       2 REQEVEX@ PTR(31),        /* REQ EVENTEXP pointer        @L6A*/ 37116000
       2 REQBUF64@ PTR(31),       /* REQ 64 bit Buffer List ptr  @L7A*/ 37117000
       2 REQSIZ64@ PTR(31),       /* REQ 64 bit Obj Size ptr     @L7A*/ 37118000
       2 REQOFF64@ PTR(31),       /* REQ 64 bit Obj offset ptr   @L7A*/ 37119000
       2 REQLEN64@ PTR(31),       /* REQ 64 bit Length ptr       @L7A*/ 37120000
       2 REQDB2ID@ PTR(31),       /* REQ DB2ID ptr               @L8A*/ 37127600
       2 REQRSV4   PTR(32),       /* reserved                    @L8C*/ 37138700
       2 REQRSV5   PTR(32),       /* reserved                    @L8A*/ 37139000
       2 REQRSV6   PTR(32),       /* reserved                    @L8A*/ 37140000
       2 REQRSV7   PTR(32);       /* reserved                    @L8A*/ 37141000
       /*     Constants, fields pointed to declarations              */ 37150000
   DECLARE                        /*                                 */ 37200000
     REQIDC   CHAR(4)             /* REQ header ID character string  */ 37250000
       CONSTANT('OSRQ'),          /*                                 */ 37300000
     REQTKIDC CHAR(4)             /* Token hdr ID character string   */ 37350000
       CONSTANT('OSMI'),          /*                                 */ 37400000
     REQVERN  FIXED(8)            /* REQ header Version Number       */ 37450000
       CONSTANT(6),               /*                             @L8C*/ 37483300
     REQEVEX  FIXED(31) BASED(REQEVEX@), /* EVENTEXP, 0-32767    @L6A*/ 37516600
     1 REQTOKN                    /* Token area                      */ 37550000
         BASED(REQTOKN@),         /*                                 */ 37600000
       2 REQTKNID CHAR(4),        /* Token ID                        */ 37650000
       2 REQTMWA@ PTR(31),        /* Token pointer                   */ 37700000
     1 REQNAME                    /* REQ Object Name area            */ 37750000
         BASED(REQNAME@),         /*                                 */ 37800000
       2 REQNAMEL FIXED(15),      /* Object name length (max = 44)   */ 37850000
       2 REQNAMEC CHAR(44),       /* Object name                     */ 37900000
     REQSIZE  FIXED(31)           /* REQ Object size (length)        */ 37950000
       BASED(REQSIZE@),           /*                                 */ 38000000
     REQSIZ64 FIXED(63)           /* REQ Object size (length) 64 bit */ 38010000
       BASED(REQSIZ64@),          /*                           @L7A  */ 38020000
     1 REQMSGA                    /* REQ Message area                */ 38050000
         BASED(REQMSGA@),         /*                                 */ 38100000
       2 REQMSGAL FIXED(15),      /* Message data area length        */ 38150000
       2 REQMSGAC BDY(HWORD),     /* Message data area               */ 38200000
         3 REQMSGDL FIXED(15),    /* Message data returned length    */ 38250000
         3 REQMSGDC CHAR(*),      /* Message area returned data      */ 38300000
     REQREAC  FIXED(31)           /* REQ Reason Code area            */ 38350000
       BASED(REQREAC@),           /*                                 */ 38400000
     REQRETC  FIXED(31)           /* REQ Return Code area            */ 38450000
       BASED(REQRETC@),           /*                                 */ 38500000
     1 REQMC                      /* REQ Management Class Name area  */ 38550000
         BASED(REQMGMC@),         /*                                 */ 38600000
       2 REQMCNL  FIXED(15),      /* Management Class Name length    */ 38650000
       2 REQMCN   CHAR(30),       /* Management Class Name           */ 38700000
     1 REQSC                      /* REQ Storage Class Name area     */ 38750000
         BASED(REQSTGC@),         /*                                 */ 38800000
       2 REQSCNL  FIXED(15),      /* Storage Class Name length       */ 38850000
       2 REQSCN   CHAR(30),       /* Storage Class Name              */ 38900000
     REQRTPD  FIXED(31)           /* REQ Retention Period area       */ 38950000
       BASED(REQRTPD@),           /*                                 */ 39000000
     REQLENG  FIXED(31)           /* REQ POR requested length        */ 39050000
       BASED(REQLENG@),           /*                                 */ 39100000
     REQLEN64 FIXED(63)           /* REQ POR requested length 64bit  */ 39110000
       BASED(REQLEN64@),          /*                           @L7A  */ 39120000
     REQOFFS  FIXED(31)           /* REQ POR requested begin offset  */ 39150000
       BASED(REQOFFS@),           /*                                 */ 39200000
     REQOFF64 FIXED(63)           /* REQ POR requested begin offset  */ 39210000
       BASED(REQOFF64@),          /* 64 bit                     @L7A */ 39220000
     1 REQCLNM                    /* REQ Collection name area        */ 39250000
         BASED(REQCLNM@),         /*                                 */ 39300000
       2 REQCLNML FIXED(15),      /* Collection name length (max=44) */ 39350000
       2 REQCLNMC CHAR(44),       /* Collection name             @D1C*/ 39400000
     REQIADR  FIXED(32)           /* First 4 bytes of DB2 language   */ 39450000
       BASED(REQIADR@),           /*   interface module          @D1C*/ 39500000
     1 REQTTOKN                   /* User Tracking Token         @L2A*/ 39550000
       BASED(REQTTOK@),           /*                             @L2A*/ 39600000
       2 *        CHAR(16),       /* User Tracking Token         @L4C*/ 39650000
     REQRCLND FIXED(31)           /* REQ Recall Number of Days   @L4A*/ 39700000
       BASED(REQRCLND@),          /*                             @L4A*/ 39750000
     REQRC2   FIXED(31)           /* REQ RETCODE2                @P4C*/ 39800000
       BASED(REQRC2@),            /*                             @L5C*/ 39850000
     1 REQSTOK BDY(DWORD)         /* REQ STOKEN                  @L5A*/ 39900000
       BASED(REQSTOK@),           /*                             @L5A*/ 39950000
       3 REQSTOKT CHAR(8),        /* STOKEN TIMESTAMP            @L5A*/ 40000000
       3 *        CHAR(8),        /* RESERVED                    @L5A*/ 40050000
     REQSTMO  FIXED(32)           /* REQ STIMEOUT                @L5A*/ 40100000
       BASED(REQSTMO@),           /*                             @L7C*/ 40150000
     REQBUF64 PTR(64)             /* REQ BUFFER 64               @L7A*/ 40200000
       BASED(REQBUF64@),          /*                             @L8C*/ 40250000
     1 REQDB2ID                   /* REQ DB2ID area              @L8A*/ 40260000
       BASED(REQDB2ID@),          /*                             @L8A*/ 40270000
       3 REQDB2IDL FIXED(15),     /* DB2ID length                @L8A*/ 40280000
       3 REQDB2IDC CHAR(4);       /* DB2ID                       @L8A*/ 40290000
