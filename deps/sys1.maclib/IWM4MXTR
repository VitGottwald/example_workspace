*/**** START OF SPECIFICATIONS **************************************** 00000100
*                                                                     * 00000200
*                                                                     * 00000300
*01* MACRO NAME:  IWM4MXTR                              -01/31/13-<0> * 00000400
*                                                                     * 00000500
*                                                                     * 00000600
*01* DESCRIPTIVE NAME:  Monitor environment extract service           * 00000700
*                                                                     * 00000800
*01* PROPRIETARY STATEMENT:                                           * 00000900
*                                                                     * 00001000
*     LICENSED MATERIALS - PROPERTY OF IBM                            * 00001100
*     5650-ZOS COPYRIGHT IBM CORP. 2013                               * 00001200
*                                                                     * 00001300
* STATUS= HBB7790                                                     * 00001400
*                                                                     * 00001500
*                                                                     * 00001600
*                                                                     * 00001700
*01* FUNCTION:                                                        * 00001800
*                                                                     * 00001900
*                                                                     * 00002000
*      The purpose of this service is to extract information about    * 00002100
*      the monitoring environment which was previously passed through * 00002200
*      IWM4MINI/IWM4MRLT.  When IWM4MRLT was invoked for a management * 00002300
*      monitoring environment, owner token, owner data and abnormal   * 00002400
*      conditions are always available.  Arrival time, userid, and    * 00002500
*      transaction name are only available when IWM4MINI was          * 00002600
*      previously invoked.  Arrival time, however is only available   * 00002700
*      for management monitoring environments.                        * 00002800
*                                                                     * 00002900
*      When the service class token is requested for a management     * 00003000
*      monitoring environment, the value may represent a token from a * 00003100
*      prior active policy. Furthermore, when the monitoring          * 00003200
*      environment was established via IWM4MRLT, the token may be     * 00003300
*      zero, which does not represent a valid service class or report * 00003400
*      class.  IWMWQRY may be used to obtain the service and/or       * 00003500
*      report class name, along with other information about these    * 00003600
*      classes.  The SERVCLS keyword is not applicable for            * 00003700
*      report-only monitoring environments. The returned token is     * 00003800
*      zero, which does not represent a valid service class.          * 00003900
*                                                                     * 00004000
*      The ENCLAVE_TOKEN and ASID keywords are only applicable for    * 00004100
*      report-only monitoring environments.                           * 00004200
*                                                                     * 00004300
*      The EWLM_S_CURCORR keyword should be specified only, if a work * 00004400
*      unit has been started by IWM4MSTR.                             * 00004500
*                                                                     * 00004600
*      When no output keywords are specified, the service merely      * 00004700
*      checks whether a monitoring environment was established and    * 00004800
*      passes short form checking.                                    * 00004900
*                                                                     * 00005000
*01* EXTERNAL CLASSIFICATION:  PI                                     * 00005100
*                                                                     * 00005200
*01* END OF EXTERNAL CLASSIFICATION:                                  * 00005300
*                                                                     * 00005400
*01* ENVIRONMENT:                                                     * 00005500
*                                                                     * 00005600
*                                                                     * 00005700
*      Dispatchable unit mode: Task or SRB mode.                      * 00005800
*                                                                     * 00005900
*      Minimum authorization: Either problem state or supervisor      * 00006000
*                        state.  Any PSW key.                         * 00006100
*                                                                     * 00006200
*      AMODE:            31- or 64-bit.  If in 64-Bit addressing      * 00006300
*                        mode, code SYSSTATE AMODE64=YES before       * 00006400
*                        invoking this macro.                         * 00006500
*                                                                     * 00006600
*      ASC mode:         Primary.                                     * 00006700
*                                                                     * 00006800
*      Cross Memory Mode: Any PASN, any HASN, any SASN.               * 00006900
*                                                                     * 00007000
*      Interrupt status: Enabled for I/O and external interrupts.     * 00007100
*                                                                     * 00007200
*      Locks:            Suspend locks are allowed.                   * 00007300
*                                                                     * 00007400
*      Control parameters: Control parameters must be in the primary  * 00007500
*                        address space.                               * 00007600
*                                                                     * 00007700
*                                                                     * 00007800
*                                                                     * 00007900
*01* PROGRAMMING REQUIREMENTS:                                        * 00008000
*                                                                     * 00008100
*                                                                     * 00008200
*    1.  The macro IWMYCON must be included to use this macro.        * 00008300
*                                                                     * 00008400
*    2.  The macro IWMPB must be in the library concatenation, since  * 00008500
*        it is included by IWMYCON.                                   * 00008600
*                                                                     * 00008700
*    3.  Note that the high order halfword of bits 0-31 of register   * 00008800
*        0, and the reason code variable when specified, may be       * 00008900
*        non-zero and represents diagnostic data which is NOT part of * 00009000
*        the external interface.  The high order halfword should thus * 00009100
*        be excluded from comparison with the reason code values      * 00009200
*        described above.  The constant, IWMRSNCODE_MASK_CONST        * 00009300
*        defined in IWMYCON, may be used for this purpose.            * 00009400
*                                                                     * 00009500
*                                                                     * 00009600
*                                                                     * 00009700
*01* RESTRICTIONS:                                                    * 00009800
*                                                                     * 00009900
*                                                                     * 00010000
*    1.  This macro may not be used prior to the completion of WLM    * 00010100
*        address space initialization                                 * 00010200
*                                                                     * 00010300
*    2.  Caller is responsible for error recovery                     * 00010400
*                                                                     * 00010500
*    3.  Only limited checking is done against the input monitoring   * 00010600
*        token.                                                       * 00010700
*                                                                     * 00010800
*    4.  If the key specified on IWM4MCRE was a user key (8-F), then  * 00010900
*        the primary addressability must exist to the performance     * 00011000
*        block IWM4MCRE obtained.  This condition is satisfied by     * 00011100
*        ensuring that current primary matches primary at the time    * 00011200
*        that IWM4MCRE was invoked.  If this service is invoked in a  * 00011300
*        subspace, the condition may be satisfied by ensuring that    * 00011400
*        the performance block is shared with the base space.         * 00011500
*                                                                     * 00011600
*    5.  The caller must serialize to prevent any delay monitoring    * 00011700
*        services from being invoked concurrently for the environment * 00011800
*        represented by the monitoring token.                         * 00011900
*                                                                     * 00012000
*    6.  This macro may only be used on z/OS V2R1 or higher.          * 00012100
*                                                                     * 00012200
*                                                                     * 00012300
*                                                                     * 00012400
*01* INPUT REGISTER INFORMATION:                                      * 00012500
*                                                                     * 00012600
*    Before issuing the IWM4MXTR macro, the caller does not have to   * 00012700
*    place any information into any register unless using it in       * 00012800
*    register notation for a particular parameter, or using it as a   * 00012900
*    base register.                                                   * 00013000
*                                                                     * 00013100
*    The following general purpose registers (GPRs) have to contain   * 00013200
*    the specified information:                                       * 00013300
*                                                                     * 00013400
*                                                                     * 00013500
*    REGISTER  CONTENTS                                               * 00013600
*                                                                     * 00013700
*    13        The address of a 216-byte standard save area in the    * 00013800
*              primary address space.                                 * 00013900
*                                                                     * 00014000
*                                                                     * 00014100
*                                                                     * 00014200
*01* OUTPUT REGISTER INFORMATION:                                     * 00014300
*                                                                     * 00014400
*    When control returns to the caller, the GPRs contain:            * 00014500
*                                                                     * 00014600
*                                                                     * 00014700
*    REGISTER  CONTENTS                                               * 00014800
*                                                                     * 00014900
*    0         Reason code if GR15 return code is non-zero. The       * 00015000
*              reason code is stored in bits 0-31                     * 00015100
*                                                                     * 00015200
*    1         Used as work register by the system                    * 00015300
*                                                                     * 00015400
*    2-13      Unchanged                                              * 00015500
*                                                                     * 00015600
*    14        Used as work register by the system                    * 00015700
*                                                                     * 00015800
*    15        Return code stored in bits 0-31                        * 00015900
*                                                                     * 00016000
*                                                                     * 00016100
*                                                                     * 00016200
*    When control returns to the caller, the ARs contain:             * 00016300
*                                                                     * 00016400
*                                                                     * 00016500
*    REGISTER  CONTENTS                                               * 00016600
*                                                                     * 00016700
*    0-1       Used as work registers by the system                   * 00016800
*                                                                     * 00016900
*    2-13      Unchanged                                              * 00017000
*                                                                     * 00017100
*    14-15     Used as work registers by the system                   * 00017200
*                                                                     * 00017300
*                                                                     * 00017400
*                                                                     * 00017500
*    Some callers depend on register contents remaining the same      * 00017600
*    before and after issuing a service.  If the system changes the   * 00017700
*    contents of registers on which the caller depends, the caller    * 00017800
*    must save them before issuing the service, and restore them      * 00017900
*    after the system returns control.                                * 00018000
*                                                                     * 00018100
*01* PERFORMANCE IMPLICATIONS:                                        * 00018200
*                                                                     * 00018300
*    None                                                             * 00018400
*                                                                     * 00018500
*01* SYNTAX:                                                          * 00018600
*                                                                     * 00018700
*Ýxlabel¨  IWM4MXTR  Ð  MONTKN=xmontkn                                * 00018800
*                    ¿ ,MONTKN64=xmontkn64                            * 00018900
*                     Ý,EWLM=»NOº¨                                    * 00019000
*                     Ý,OMONTKN=xomontkn¨                             * 00019100
*                     Ý,OMONTKN64=xomontkn64¨                         * 00019200
*                     Ý,OWNER_TOKEN=xowner_token¨                     * 00019300
*                     Ý,OWNER_DATA=xowner_data¨                       * 00019400
*                     Ý,ARRIVALTIME=xarrivaltime¨                     * 00019500
*                     Ý,TRXNAME=xtrxname¨                             * 00019600
*                     Ý,USERID=xuserid¨                               * 00019700
*                     Ý,SERVCLS=xservcls¨                             * 00019800
*                     Ý,ASID=xasid¨                                   * 00019900
*                     Ý,ENCLAVE_TOKEN=xenclave_token¨                 * 00020000
*                     Ý,TTRACETOKEN=xttracetoken¨                     * 00020100
*                     Ý,ABNORMAL_COND=xabnormal_cond¨                 * 00020200
*                     Ý,EWLM_CHCORR=xewlm_chcorr¨                     * 00020300
*                     Ý,EWLM_PACTKN=xewlm_pactkn¨                     * 00020400
*                     Ý,EWLM_S_CURCORR=xewlm_s_curcorr¨               * 00020500
*                     Ý,RETCODE=xretcode¨                             * 00020600
*                     Ý,RSNCODE=xrsncode¨                             * 00020700
*                                                                     * 00020800
*                                                                     * 00020900
*      Where:                                                         * 00021000
*                                                                     * 00021100
*                                                                     * 00021200
*      Ýxlabel¨                                                       * 00021300
*          is an optional symbol, starting in column 1, that is the   * 00021400
*          name on the IWM4MXTR macro invocation.  The name must      * 00021500
*          conform to the rules for an ordinary assembler language    * 00021600
*          symbol.                                                    * 00021700
*          DEFAULT: No name.                                          * 00021800
*                                                                     * 00021900
*                                                                     * 00022000
*                                                                     * 00022100
*                                                                     * 00022200
*      The following is a set of mutually exclusive keys.  This set   * 00022300
*      is required; only one key must be specified.                   * 00022400
*                                                                     * 00022500
*                                                                     * 00022600
*      MONTKN=xmontkn                                                 * 00022700
*          belongs to a set of mutually exclusive keys. It is the     * 00022800
*          name (RS-type), or address in register (2)-(12), of a 32   * 00022900
*          bit input which contains the delay monitoring token.       * 00023000
*                                                                     * 00023100
*      MONTKN64=xmontkn64                                             * 00023200
*          belongs to a set of mutually exclusive keys. It is the     * 00023300
*          name (RS-type), or address in register (2)-(12), of a 64   * 00023400
*          bit input which contains the long delay monitoring token.  * 00023500
*                                                                     * 00023600
*                                                                     * 00023700
*                                                                     * 00023800
*      End of a set of mutually exclusive required keys.              * 00023900
*                                                                     * 00024000
*                                                                     * 00024100
*                                                                     * 00024200
*      ÝEWLM=»NOº¨                                                    * 00024300
*          is an optional keyword input which indicates if this work  * 00024400
*          manager intents to participate in cross platform           * 00024500
*          Enterprise Workload Management (eWLM).                     * 00024600
*          DEFAULT: NO                                                * 00024700
*                                                                     * 00024800
*                                                                     * 00024900
*          EWLM=NO                                                    * 00025000
*              The work manager interacts only with WLM and no        * 00025100
*              interaction with eWLM takes place.                     * 00025200
*              DEFAULT: NO                                            * 00025300
*                                                                     * 00025400
*                                                                     * 00025500
*                                                                     * 00025600
*                                                                     * 00025700
*                                                                     * 00025800
*                                                                     * 00025900
*      ÝOMONTKN=xomontkn¨                                             * 00026000
*          is the name (RS-type), or address in register (2)-(12), of * 00026100
*          an optional 32 bit output which is to receive the delay    * 00026200
*          monitoring token. This option can be used to convert a     * 00026300
*          long delay monitoring token into the short form.           * 00026400
*                                                                     * 00026500
*                                                                     * 00026600
*                                                                     * 00026700
*                                                                     * 00026800
*      ÝOMONTKN64=xomontkn64¨                                         * 00026900
*          is the name (RS-type), or address in register (2)-(12), of * 00027000
*          an optional 64 bit output which is to receive the long     * 00027100
*          delay monitoring token.  This option can be used to        * 00027200
*          convert a short delay monitoring token into the long form. * 00027300
*                                                                     * 00027400
*                                                                     * 00027500
*                                                                     * 00027600
*                                                                     * 00027700
*      ÝOWNER_TOKEN=xowner_token¨                                     * 00027800
*          is the name (RS-type), or address in register (2)-(12), of * 00027900
*          an optional 32 bit output which is to receive the token    * 00028000
*          established by the user/owner of the monitoring            * 00028100
*          environment.  The format is undefined to MVS.  When the    * 00028200
*          monitoring environment is not associated with an           * 00028300
*          OWNER_TOKEN value, the output will be a word of binary     * 00028400
*          zeros.                                                     * 00028500
*                                                                     * 00028600
*                                                                     * 00028700
*                                                                     * 00028800
*                                                                     * 00028900
*      ÝOWNER_DATA=xowner_data¨                                       * 00029000
*          is the name (RS-type), or address in register (2)-(12), of * 00029100
*          an optional 32 bit output which is to receive the data     * 00029200
*          established by the user/owner of the monitoring            * 00029300
*          environment.  The format is undefined to MVS.  When the    * 00029400
*          monitoring environment is not associated with an           * 00029500
*          OWNER_TOKEN value, the output will be a word of binary     * 00029600
*          zeros.                                                     * 00029700
*                                                                     * 00029800
*                                                                     * 00029900
*                                                                     * 00030000
*                                                                     * 00030100
*      ÝARRIVALTIME=xarrivaltime¨                                     * 00030200
*          is the name (RS-type), or address in register (2)-(12), of * 00030300
*          an optional 64 bit output which contains the work arrival  * 00030400
*          time in STCK format.                                       * 00030500
*                                                                     * 00030600
*                                                                     * 00030700
*                                                                     * 00030800
*                                                                     * 00030900
*      ÝTRXNAME=xtrxname¨                                             * 00031000
*          is the name (RS-type), or address in register (2)-(12), of * 00031100
*          an optional 8 character output which contains the          * 00031200
*          transaction name.  The field will be all blanks when       * 00031300
*          NO_TRXNAME was specified on IWM4MINI.                      * 00031400
*                                                                     * 00031500
*                                                                     * 00031600
*                                                                     * 00031700
*                                                                     * 00031800
*      ÝUSERID=xuserid¨                                               * 00031900
*          is the name (RS-type), or address in register (2)-(12), of * 00032000
*          an optional 8 character output which contains the local    * 00032100
*          userid associated with the work request.  The field will   * 00032200
*          be all blanks when NO_USERID was specified on IWM4MINI.    * 00032300
*                                                                     * 00032400
*                                                                     * 00032500
*                                                                     * 00032600
*                                                                     * 00032700
*      ÝSERVCLS=xservcls¨                                             * 00032800
*          is the name (RS-type), or address in register (2)-(12), of * 00032900
*          an optional 32 bit output which contains the service class * 00033000
*          token.  When the monitoring environment is not associated  * 00033100
*          with a service class token, the output will be a word of   * 00033200
*          binary zeros.                                              * 00033300
*                                                                     * 00033400
*                                                                     * 00033500
*                                                                     * 00033600
*                                                                     * 00033700
*      ÝASID=xasid¨                                                   * 00033800
*          is the name (RS-type), or address in register (2)-(12), of * 00033900
*          an optional 16 bit output which contains the address space * 00034000
*          ID.  When the monitoring environment is not associated     * 00034100
*          with an address space, the output will be a halfword of    * 00034200
*          binary zeros.                                              * 00034300
*                                                                     * 00034400
*                                                                     * 00034500
*                                                                     * 00034600
*                                                                     * 00034700
*      ÝENCLAVE_TOKEN=xenclave_token¨                                 * 00034800
*          is the name (RS-type), or address in register (2)-(12), of * 00034900
*          an optional 64 bit output which contains the enclave       * 00035000
*          token.  When the monitoring environment is not associated  * 00035100
*          with an enclave, the output will be a doubleword of binary * 00035200
*          zeros.                                                     * 00035300
*                                                                     * 00035400
*                                                                     * 00035500
*                                                                     * 00035600
*                                                                     * 00035700
*      ÝTTRACETOKEN=xttracetoken¨                                     * 00035800
*          is the name (RS-type), or address in register (2)-(12), of * 00035900
*          an optional 32 character output which contains the         * 00036000
*          transaction trace token associated with the work request.  * 00036100
*          The field will be all zero when NO_TTRACETOKEN was         * 00036200
*          specified on IWM4MINI.                                     * 00036300
*                                                                     * 00036400
*                                                                     * 00036500
*                                                                     * 00036600
*                                                                     * 00036700
*      ÝABNORMAL_COND=xabnormal_cond¨                                 * 00036800
*          is the name (RS-type), or address in register (2)-(12), of * 00036900
*          an optional 32 bit output which contains the current       * 00037000
*          information about abnormal conditions which were either    * 00037100
*          recorded in the input monitoring environment or which were * 00037200
*          propagated to it via IWM4MXFR Function(Return).  Multiple  * 00037300
*          conditions may exist.                                      * 00037400
*                                                                     * 00037500
*          The mask, Iwmmabnl_Scope_LocalMVS, may be used to          * 00037600
*          determine whether an abnormality which only affects work   * 00037700
*          on the current MVS image was recorded.                     * 00037800
*                                                                     * 00037900
*          The mask, Iwmmabnl_Scope_Sysplex, may be used to determine * 00038000
*          whether an abnormality which affects work on all MVS       * 00038100
*          images in the sysplex was recorded.                        * 00038200
*                                                                     * 00038300
*          To determine whether a condition was recorded, merely AND  * 00038400
*          the field supplied for ABNORMAL_COND with the relevant     * 00038500
*          mask. The result will be nonzero when the condition is     * 00038600
*          true, zero when the condition is false.                    * 00038700
*                                                                     * 00038800
*                                                                     * 00038900
*                                                                     * 00039000
*                                                                     * 00039100
*      ÝEWLM_CHCORR=xewlm_chcorr¨                                     * 00039200
*          is the name (RS-type), or address in register (2)-(12), of * 00039300
*          an optional character output which contains the cross      * 00039400
*          platform Enterprise Workload Management (EWLM) correlator  * 00039500
*          of the work request created by IWM4MINI.  Normally this    * 00039600
*          correlator is different from the current correlator of the * 00039700
*          work unit created by IWM4MSTR.                             * 00039800
*                                                                     * 00039900
*                                                                     * 00040000
*                                                                     * 00040100
*                                                                     * 00040200
*      ÝEWLM_PACTKN=xewlm_pactkn¨                                     * 00040300
*          is the name (RS-type), or address in register (2)-(12), of * 00040400
*          an optional character output which contains the cross      * 00040500
*          platform Enterprise Workload Management (EWLM) parent      * 00040600
*          correlator token of the work request associated with the   * 00040700
*          monitoring environment.                                    * 00040800
*                                                                     * 00040900
*                                                                     * 00041000
*                                                                     * 00041100
*                                                                     * 00041200
*      ÝEWLM_S_CURCORR=xewlm_s_curcorr¨                               * 00041300
*          is the name (RS-type), or address in register (2)-(12), of * 00041400
*          an optional character output which contains the current    * 00041500
*          correlator of the work unit started by IWM4MSTR.  Normally * 00041600
*          this correlator is different from the child correlator of  * 00041700
*          the work request created by IWM4MINI.                      * 00041800
*                                                                     * 00041900
*                                                                     * 00042000
*                                                                     * 00042100
*                                                                     * 00042200
*      ÝRETCODE=xretcode¨                                             * 00042300
*          is the name (RS-type) of an optional fullword output       * 00042400
*          variable, or register (2)-(12) or (15), into which the     * 00042500
*          return code is to be copied from GPR 15.  If you specify   * 00042600
*          15, GPR15, REG15, or R15 (within or without parentheses),  * 00042700
*          the value will be left in GPR 15.                          * 00042800
*                                                                     * 00042900
*                                                                     * 00043000
*                                                                     * 00043100
*                                                                     * 00043200
*      ÝRSNCODE=xrsncode¨                                             * 00043300
*          is the name (RS-type) of an optional fullword output       * 00043400
*          variable into which the reason code is to be copied from   * 00043500
*          GPR 0.  If you specify 0, 00, GPR0, GPR00, REG0, REG00, or * 00043600
*          R0 (within or without parentheses), the value will be left * 00043700
*          in GPR 0.                                                  * 00043800
*                                                                     * 00043900
*                                                                     * 00044000
*                                                                     * 00044100
*01* ABEND CODES:  None.                                              * 00044200
*                                                                     * 00044300
*01* RETURN CODES:                                                    * 00044400
*                                                                     * 00044500
*                                                                     * 00044600
*            0    Name: IwmRetCodeOk                                  * 00044700
*                                                                     * 00044800
*                 Meaning: Successful completion.                     * 00044900
*                                                                     * 00045000
*                 Action: None required.                              * 00045100
*                                                                     * 00045200
*            4    Name: IwmRetCodeWarning                             * 00045300
*                                                                     * 00045400
*                 Meaning: Successful completion, unusual conditions  * 00045500
*                 noted.                                              * 00045600
*                                                                     * 00045700
*                                                                     * 00045800
*                 HEX REASON  MEANING/ACTION                          * 00045900
*                 CODE                                                * 00046000
*                                                                     * 00046100
*                 xxxx0402    Name: IwmRsnCodeNoMonEnv                * 00046200
*                                                                     * 00046300
*                             Meaning:  Monitoring token indicates    * 00046400
*                             that no monitoring environment exists.  * 00046500
*                                                                     * 00046600
*                             Action: None required.                  * 00046700
*                                                                     * 00046800
*                 xxxx040A    Name: IwmRsnCodeOutputAreaTooSmall      * 00046900
*                                                                     * 00047000
*                             Meaning:  The output area is too small  * 00047100
*                             to contain all the available            * 00047200
*                             information.                            * 00047300
*                                                                     * 00047400
*                 xxxx040C    Name: IwmRsnCodeMonEnvLacksInfo         * 00047500
*                                                                     * 00047600
*                             Meaning:  Input monitoring environment  * 00047700
*                             does not contain the necessary          * 00047800
*                             information to return the data          * 00047900
*                             requested.                              * 00048000
*                                                                     * 00048100
*                             Action: None required.                  * 00048200
*                                                                     * 00048300
*                                                                     * 00048400
*                                                                     * 00048500
*            8    Name: IwmRetCodeInvocError                          * 00048600
*                                                                     * 00048700
*                 Meaning: Invalid invocation environment or          * 00048800
*                 parameters.                                         * 00048900
*                                                                     * 00049000
*                                                                     * 00049100
*                 HEX REASON  MEANING/ACTION                          * 00049200
*                 CODE                                                * 00049300
*                                                                     * 00049400
*                 xxxx0820    Name: IwmRsnCodeBadMonEnv               * 00049500
*                                                                     * 00049600
*                             Meaning:  Monitoring environment does   * 00049700
*                             not pass short form verification.       * 00049800
*                                                                     * 00049900
*                             Action: Check for possible storage      * 00050000
*                             overlay.                                * 00050100
*                                                                     * 00050200
*                 xxxx0895    Name: IwmRsnCodeEWLMServNotEnabled      * 00050300
*                                                                     * 00050400
*                             Meaning: Service is not enabled because * 00050500
*                             monitoring environment can not be       * 00050600
*                             associated with EWLM work requests.     * 00050700
*                                                                     * 00050800
*                             Action: Specify the parameter           * 00050900
*                             EWLM_CHCORR or EWLM_PACTKN only when    * 00051000
*                             the monitoring environment is created   * 00051100
*                             with IWM4MCRE EWLM=YES or the address   * 00051200
*                             space is connected with IWM4CON         * 00051300
*                             EWLM=YES and the connect token is       * 00051400
*                             passed to IWM4MCRE when creating the    * 00051500
*                             monitoring environment.                 * 00051600
*                                                                     * 00051700
*                 xxxx08AC    Name: IwmRsnCodeTranNotStarted          * 00051800
*                                                                     * 00051900
*                             Meaning:  A work unit has not been      * 00052000
*                             started.                                * 00052100
*                                                                     * 00052200
*                             Action: Start a work unit by IWM4MSTR   * 00052300
*                             macro, before specifying the            * 00052400
*                             EWLM_S_CURCORR parameter.               * 00052500
*                                                                     * 00052600
*                                                                     * 00052700
*                                                                     * 00052800
*                                                                     * 00052900
*                                                                     * 00053000
*01* REASON CODES:                                                    * 00053100
*                                                                     * 00053200
*       A unique reason code will be returned whenever the return     * 00053300
*       code is non-zero.  Reason codes, as appropriate, are defined  * 00053400
*       under their corresponding return code.  Reason code and       * 00053500
*       return code constants are defined within IWMYCON.  Note that  * 00053600
*       the high order halfword of bits 0-31 of register 0,      e    * 00053700
*       and the reason code variable when specified, may be non-zero  * 00053800
*       and represents diagnostic data which is NOT part of the       * 00053900
*       external interface.  The high order halfword should thus be   * 00054000
*       excluded from comparison with the reason code values          * 00054100
*       described above.  The constant, IWMRSNCODE_MASK_CONST defined * 00054200
*       in IWMYCON, may be used for this purpose.                     * 00054300
*                                                                     * 00054400
*01* MODULE TYPE:  ASSEM MACRO                                        * 00054500
*                                                                     * 00054600
*02*   PROCESSOR:  ASSEM                                              * 00054700
*                                                                     * 00054800
*01* COMPONENT:  SCWLM                                                * 00054900
*                                                                     * 00055000
*01* DISTRIBUTION LIBRARY: AMACLIB                                    * 00055100
*                                                                     * 00055200
*01* EXAMPLES:                                                        * 00055300
*                                                                     * 00055400
*01* MACRO USAGE NOTES:                                               * 00055500
*                                                                     * 00055600
*                                                                     * 00055700
*    1.  Printing of the macro expansion is controlled by the ZPRINT  * 00055800
*        global macro variable.  Any value other than 'NO' will       * 00055900
*        result in the macro expansion being printed.  The default is * 00056000
*        'YES'.  The following examples illustrate how the ZPRINT     * 00056100
*        variable should be set.                                      * 00056200
*                                                                     * 00056300
*                    GBLC &ZPRINT                                     * 00056400
*            &ZPRINT SETC 'YES'          &ZPRINT SETC 'NO'            * 00056500
*                                                                     * 00056600
*                                                                     * 00056700
*                                                                     * 00056800
*01* CHANGE ACTIVITY:                                                 * 00056900
*                                                                     * 00057000
*   Flag LineItem  FMID    Date   ID    Comment                       * 00057100
*                                                                     * 00057200
*    $L0=LPBABV   HBB7790 111019 3241AH:  Initial version PB above 2G * 00057300
*    $P0=ME24923  HBB7790 121016 3241AH:  Fix SYSAM64 logic           * 00057400
*    $P1=ME25242  HBB7790 121128 3241AH:  Wrong reason code set in    * 00057500
*                                         PLX section.                * 00057600
*    $P2=ME25540  HBB7790 130122 3241AH:  Assembler AMODE switch base * 00057700
*                                         register usage incorrect    * 00057800
****** END OF SPECIFICATIONS *****************************************/ 00057900
*/********************************************************************* 00058000
         MACRO                                                          00058100
&XLABEL  IWM4MXTR &MONTKN=,&MONTKN64=,&EWLM=,&OMONTKN=,&OMONTKN64=,    *00058200
               &OWNER_TOKEN=,&OWNER_DATA=,&ARRIVALTIME=,&TRXNAME=,     *00058300
               &USERID=,&SERVCLS=,&ASID=,&ENCLAVE_TOKEN=,&TTRACETOKEN=,*00058400
               &ABNORMAL_COND=,&EWLM_CHCORR=,&EWLM_PACTKN=,            *00058500
               &EWLM_S_CURCORR=,&RETCODE=,&RSNCODE=                     00058600
.*                                                                      00058700
*                    MACDATE -01/31/13-<0>                              00058800
.*                                                                      00058900
.*******************************************************************    00059000
.***AB.02  GLOBAL VARIABLES TO CONTROL PRINT AND CODE GENERATION        00059100
.*******************************************************************    00059200
                    GBLC  &ZPRINT     YES=PRINT NO=NO PRINT             00059300
                    GBLC  &ZTEST      YES=TEST NO=NO TEST               00059400
                    GBLC  &ZSYSTEM    PCCODE10, MVS, SAK, VM, XAX       00059500
.*                                                                      00059600
                    GBLC  &ZIWM4MXTR  YES=MACRO USED AT LEAST ONCE      00059700
.*******************************************************************    00059800
.***AB.03  COMMONLY USED LOCAL MACRO VARIABLES                          00059900
.*******************************************************************    00060000
                    LCLC  &ZMS        ERROR MESSAGE WORK AREA           00060100
                    LCLC  &ZCNDX      SYSNDX CHARACTERS                 00060200
                    LCLC  &ZCLNG      USED WHEN LENGTH IS NEEDED        00060300
                    LCLC  &ZCGPR      USED WHEN VALUE IS IN A GPR       00060400
                    LCLC  &ZCVAL      USED TO CONTAIN FIXED VALUE       00060500
                    LCLA  &ZAWRK      USED AS A WORK AREA               00060600
                    LCLA  &ZASIZ      USED FOR SIZE OF VALUE            00060700
                    LCLA  &ZN         NUMERIC WORK VARIABLE             00060800
                    LCLC  &ZC         CHARACTER WORK VARIABLE           00060900
                    LCLC  &ZTLC       CHARACTER TOO LONG VARIABLE       00061000
                    LCLA  &ZTLA       VALUE TOO LONG VARIABLE           00061100
                    LCLC  &ZMAC_G     "G" or null                       00061200
&ZMAC_G             SETC  ''                                            00061300
                    LCLC  &ZMAC_LR                                      00061400
&ZMAC_LR            SETC  'LR'                                          00061500
                    LCLC  &ZMAC_L                                       00061600
&ZMAC_L             SETC  'L'                                           00061700
                    LCLC  &ZMAC_ST                                      00061800
&ZMAC_ST            SETC  'ST'                                          00061900
                    LCLC  &ZMAC_LLGT                                    00062000
&ZMAC_LLGT          SETC  'L'                                           00062100
                    LCLC  &ZMAC_LGR                                     00062200
&ZMAC_LGR           SETC  'LR'                                          00062300
                    LCLC  &ZMAC_LG                                      00062400
&ZMAC_LG            SETC  'L'                                           00062500
                    LCLC  &ZMAC_STG                                     00062600
&ZMAC_STG           SETC  'ST'                                          00062700
                    LCLA  &ZMACRET    MACRO RETURN CODE                 00062800
&ZMACRET            SETA  0           ASSUME NO ERRORS                  00062900
.*                                                                      00063000
                    LCLC  &ZCSYSLIST(255)       NONXKEY, POS ARRAY      00063100
                    LCLA  &ZASYSLNDX  WORK INDEX FOR ZCSYSLIST()        00063200
                    LCLA  &ZPLLEN     PARAMETER LIST LENGTH             00063300
                    LCLC  &ZENDBASEPL           End of base PL          00063400
.*******************************************************************    00063500
.***AB.07  DEFINE ALL MACRO VARIABLES                                   00063600
.*******************************************************************    00063700
                    LCLC  &XUSEDMONTKNKEY       ++ NAME                 00063800
                    LCLC  &XMONTKN    ++ NAME                           00063900
                    LCLC  &XMONTKN64  ++ NAME                           00064000
                    LCLC  &XEWLM      ++ VALUE                          00064100
                    LCLC  &XOMONTKN   ++ NAME                           00064200
                    LCLC  &XOMONTKN64           ++ NAME                 00064300
                    LCLC  &XOWNER_TOKEN         ++ NAME                 00064400
                    LCLC  &XOWNER_DATA          ++ NAME                 00064500
                    LCLC  &XARRIVALTIME         ++ NAME                 00064600
                    LCLC  &XTRXNAME   ++ NAME                           00064700
                    LCLC  &XUSERID    ++ NAME                           00064800
                    LCLC  &XSERVCLS   ++ NAME                           00064900
                    LCLC  &XASID      ++ NAME                           00065000
                    LCLC  &XENCLAVE_TOKEN       ++ NAME                 00065100
                    LCLC  &XTTRACETOKEN         ++ NAME                 00065200
                    LCLC  &XABNORMAL_COND       ++ NAME                 00065300
                    LCLC  &XEWLM_CHCORR         ++ NAME                 00065400
                    LCLC  &XEWLM_PACTKN         ++ NAME                 00065500
                    LCLC  &XEWLM_S_CURCORR      ++ NAME                 00065600
                    LCLC  &XRETCODE   ++ NAME                           00065700
                    LCLC  &XRSNCODE   ++ NAME                           00065800
.*******************************************************************    00065900
.***AB.13  DEFINE MACRO VARIABLES FOR INPUT/OUTPUT PROCESSING           00066000
.*******************************************************************    00066100
                    LCLC  &ZXUSEDMONTKNKEY      ++ INPUT NAME           00066200
                    LCLC  &ZXMONTKN   ++ INPUT NAME                     00066300
                    LCLC  &ZXMONTKN64           ++ INPUT NAME           00066400
                    LCLC  &ZXEWLM     ++ INPUT VALUE                    00066500
                    LCLC  &ZXOMONTKN  ++ OUTPUT NAME                    00066600
                    LCLC  &ZXOMONTKN64          ++ OUTPUT NAME          00066700
                    LCLC  &ZXOWNER_TOKEN        ++ OUTPUT NAME          00066800
                    LCLC  &ZXOWNER_DATA         ++ OUTPUT NAME          00066900
                    LCLC  &ZXARRIVALTIME        ++ OUTPUT NAME          00067000
                    LCLC  &ZXTRXNAME  ++ OUTPUT NAME                    00067100
                    LCLC  &ZXUSERID   ++ OUTPUT NAME                    00067200
                    LCLC  &ZXSERVCLS  ++ OUTPUT NAME                    00067300
                    LCLC  &ZXASID     ++ OUTPUT NAME                    00067400
                    LCLC  &ZXENCLAVE_TOKEN      ++ OUTPUT NAME          00067500
                    LCLC  &ZXTTRACETOKEN        ++ OUTPUT NAME          00067600
                    LCLC  &ZXABNORMAL_COND      ++ OUTPUT NAME          00067700
                    LCLC  &ZXEWLM_CHCORR        ++ OUTPUT NAME          00067800
                    LCLC  &ZXEWLM_PACTKN        ++ OUTPUT NAME          00067900
                    LCLC  &ZXEWLM_S_CURCORR     ++ OUTPUT NAME          00068000
                    LCLC  &ZXRETCODE  ++ OUTPUT NAME                    00068100
                    LCLC  &ZXRSNCODE  ++ OUTPUT NAME                    00068200
.********************************************************************   00068300
.***AG.MF02  FULL MACRO SYNTAX CHECKING                                 00068400
.********************************************************************   00068500
                    ACTR  10000                                         00068600
.*----------------------------------------------------------------***   00068700
.***AG.KMEKY01 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00068800
&XUSEDMONTKNKEY     SETC  ''          INITIALIZE XVARIABLE              00068900
                    AIF   (K'&MONTKN LE 0).ZG2C                         00069000
&ZXUSEDMONTKNKEY    SETC  'INPUT'     SET IN/OUTPUT                     00069100
&XUSEDMONTKNKEY     SETC  'MONTKN'    SET XVARIABLE                     00069200
&ZXMONTKN           SETC  'INPUT'     SET IN/OUTPUT                     00069300
&XMONTKN            SETC  '&MONTKN(1)'          SET XVARIABLE PARM      00069400
                    AIF   (N'&MONTKN GT 1).ZG2A                         00069500
&XMONTKN            SETC  '&MONTKN'   SET XVARIABLE PARM                00069600
.ZG2A               AIF   (N'&MONTKN LE 1).ZG2B  CK NUM                 00069700
&ZMS                SETC  '"MONTKN='                                    00069800
&ZMS                SETC  '&ZMS.&MONTKN"'                               00069900
&ZMS                SETC  '&ZMS "MONTKN"'                               00070000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00070100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00070200
.ZG2B               AIF   (K'&XMONTKN GT 0).ZG2C  ONE PARM              00070300
&ZXUSEDMONTKNKEY    SETC  ''          RESET IN/OUTPUT                   00070400
&ZXMONTKN           SETC  ''          RESET IN/OUTPUT                   00070500
&ZMS                SETC  ' '                                           00070600
&ZMS                SETC  '&ZMS "MONTKN" KEY AND ITS'                   00070700
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00070800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00070900
.ZG2C               ANOP  ,                                             00071000
.*----------------------------------------------------------------***   00071100
.***AG.KMEKY02 NAME, RQD INPUT, ME KEYS -XVARIABLE                      00071200
                    AIF   (K'&MONTKN64 LE 0).ZG3D  NO ME KEY            00071300
                    AIF   (N'&MONTKN64 LE 1).ZG3A  CK NUM               00071400
&ZMS                SETC  '"MONTKN64='                                  00071500
&ZMS                SETC  '&ZMS.&MONTKN64"'                             00071600
&ZMS                SETC  '&ZMS "MONTKN64"'                             00071700
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00071800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00071900
.ZG3A               AIF   (K'&XUSEDMONTKNKEY LE 0).ZG3B                 00072000
&ZMS                SETC  '"MONTKN64'                                   00072100
&ZMS                SETC  '&ZMS.=&MONTKN64"'                            00072200
&ZMS                SETC  '&ZMS IS MUTUALLY EXCLUSIVE WITH THE'         00072300
&ZMS                SETC  '&ZMS "&XUSEDMONTKNKEY"'                      00072400
                    MNOTE 8,' &ZMS KEY.'                                00072500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00072600
                    AGO   .ZG3D                                         00072700
.*                                                                      00072800
.ZG3B               ANOP  ,                                             00072900
&ZXUSEDMONTKNKEY    SETC  'INPUT'     SET IN/OUTPUT                     00073000
&XUSEDMONTKNKEY     SETC  'MONTKN64'  SET XVARIABLE                     00073100
&ZXMONTKN64         SETC  'INPUT'     SET IN/OUTPUT                     00073200
&XMONTKN64          SETC  '&MONTKN64(1)'        SET XVARIABLE PARM      00073300
                    AIF   (N'&MONTKN64 GT 1).ZG3C                       00073400
&XMONTKN64          SETC  '&MONTKN64'           SET XVARIABLE PARM      00073500
.ZG3C               AIF   (K'&XMONTKN64 GT 0).ZG3D  ONE PARM            00073600
&ZXUSEDMONTKNKEY    SETC  ''          RESET IN/OUTPUT                   00073700
&ZXMONTKN64         SETC  ''          RESET IN/OUTPUT                   00073800
&ZMS                SETC  ' '                                           00073900
&ZMS                SETC  '&ZMS "MONTKN64" KEY AND ITS'                 00074000
                    MNOTE 8,' &ZMS ARGUMENT ARE REQUIRED.'              00074100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00074200
.ZG3D               ANOP  ,                                             00074300
.*------------------------------------------------------------------    00074400
.***AG.KME4Y09 NAME, RQD INPUT, ME KEYS -CHECK IF KEY ENTERED           00074500
                    AIF   (K'&XUSEDMONTKNKEY GT 0).ZG4B                 00074600
&ZXUSEDMONTKNKEY    SETC  ''          RESET IN/OUTPUT                   00074700
&ZXMONTKN           SETC  ''          RESET IN/OUTPUT                   00074800
&XUSEDMONTKNKEY     SETC  ''          ENSURE NULL                       00074900
&XMONTKN            SETC  ''          ENSURE NULL                       00075000
&ZMS                SETC  'ONE OF THE FOLLOWING'                        00075100
&ZMS                SETC  '&ZMS MUTUALLY EXCLUSIVE KEY(S) IS'           00075200
&ZMS                SETC  '&ZMS REQUIRED:'                              00075300
&ZMS                SETC  '&ZMS "MONTKN"'       VALID ME KEY            00075400
&ZMS                SETC  '&ZMS OR "MONTKN64".'  VALID ME KEY           00075500
                    MNOTE 8,' &ZMS '                                    00075600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00075700
.ZG4B               ANOP  ,                                             00075800
.*-------------------------------------------------------------------   00075900
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00076000
.ZG2ZY  AIF    ('&XUSEDMONTKNKEY' NE 'MONTKN').ZG3ZY                    00076100
.*-------------------------------------------------------------------   00076200
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00076300
                    AIF   (K'&ZXMONTKN LE 0).ZG2R  NOT I/O              00076400
                    AIF   ('&XMONTKN'(1,1) NE '(').ZG2R                 00076500
&ZCGPR              SETC  '&XMONTKN'(2,K'&XMONTKN-2)                    00076600
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG2P                   00076700
                    AIF   (K'&ZCGPR GT 2).ZG2Q                          00076800
                    AIF   ('&ZCGPR' EQ '0').ZG2Q                        00076900
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00077000
                    AIF   (T'&ZCGPR NE 'N').ZG2Q  INVALID REG NAME      00077100
.ZG2P               ANOP  ,                                             00077200
                    AIF   (T'&ZCGPR NE 'N').ZG2R  NON NUMERIC           00077300
                    AIF   ('&ZCGPR' LT '2').ZG2Q                        00077400
                    AIF   ('&ZCGPR' LE '12').ZG2R                       00077500
.ZG2Q               ANOP  ,                                             00077600
&ZMS                SETC  '"MONTKN='                                    00077700
&ZMS                SETC  '&ZMS.&MONTKN"'                               00077800
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00077900
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00078000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00078100
.ZG2R               ANOP  ,                                             00078200
.*-------------------------------------------------------------------   00078300
.***AG.KMEKY13 NAME, RQD INPUT, ME KEYS -PROCESS DEPENDENCIES           00078400
.ZG3ZY  AIF    ('&XUSEDMONTKNKEY' NE 'MONTKN64').ZG4ZY                  00078500
.*-------------------------------------------------------------------   00078600
.***AG.KCK02 NAME, RQD INPUT, ME KEYS -GPR OUT OF RANGE                 00078700
                    AIF   (K'&ZXMONTKN64 LE 0).ZG3R  NOT I/O            00078800
                    AIF   ('&XMONTKN64'(1,1) NE '(').ZG3R               00078900
&ZCGPR              SETC  '&XMONTKN64'(2,K'&XMONTKN64-2)                00079000
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG3P                   00079100
                    AIF   (K'&ZCGPR GT 2).ZG3Q                          00079200
                    AIF   ('&ZCGPR' EQ '0').ZG3Q                        00079300
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00079400
                    AIF   (T'&ZCGPR NE 'N').ZG3Q  INVALID REG NAME      00079500
.ZG3P               ANOP  ,                                             00079600
                    AIF   (T'&ZCGPR NE 'N').ZG3R  NON NUMERIC           00079700
                    AIF   ('&ZCGPR' LT '2').ZG3Q                        00079800
                    AIF   ('&ZCGPR' LE '12').ZG3R                       00079900
.ZG3Q               ANOP  ,                                             00080000
&ZMS                SETC  '"MONTKN64='                                  00080100
&ZMS                SETC  '&ZMS.&MONTKN64"'                             00080200
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00080300
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00080400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00080500
.ZG3R               ANOP  ,                                             00080600
.*-------------------------------------------------------------------   00080700
.***AG.KMEKY15 NAME, RQD INPUT, ME KEYS -END                            00080800
.ZG4ZY              ANOP ,            END MUTUALLY EXCLUSIVE KEYS       00080900
.*----------------------------------------------------------------***   00081000
.***AG.KKWRD01 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00081100
                    AIF   (N'&EWLM LE 1).ZG6A   CK NUM                  00081200
&ZMS                SETC  '"EWLM='                                      00081300
&ZMS                SETC  '&ZMS.&EWLM"'                                 00081400
&ZMS                SETC  '&ZMS "EWLM"'                                 00081500
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00081600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00081700
.ZG6A               ANOP  ,                                             00081800
.*-------------------------------------------------------------------   00081900
.***AG.KKWRD02 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00082000
&XEWLM              SETC  ''          INITIALIZE XVARIABLE              00082100
.ZG7A   AIF   ('&EWLM(1)' NE 'NO').ZG8A                                 00082200
&XEWLM              SETC  'NO'        SET KEYWORD                       00082300
.*-------------------------------------------------------------------   00082400
.***AG.KKWRD03 VALUE, OPT INPUT, ME KEYWORD -SINGLE KEYWORD             00082500
.ZG8A               AIF   (K'&XEWLM GT 0).ZG8C  KEYWORD                 00082600
                    AIF   (K'&EWLM(1) LE 0).ZG8B                        00082700
&ZMS                SETC  '"EWLM='                                      00082800
&ZMS                SETC  '&ZMS.&EWLM"'                                 00082900
&ZMS                SETC  '&ZMS ARGUMENT 1 IS AN UNKNOWN KEYWORD. '     00083000
&ZMS                SETC  '&ZMS VALID KEYWORD CHOICE(S) ARE:'           00083100
&ZMS                SETC  '&ZMS "NO".'                                  00083200
                    MNOTE 8,' &ZMS '                                    00083300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00083400
.ZG8B               ANOP  ,                                             00083500
&XEWLM              SETC  'NO'        SET DEFAULT KEYWORD               00083600
.ZG8C               ANOP  ,                                             00083700
&ZXEWLM             SETC  'INPUT'     SET IN/OUTPUT                     00083800
.*----------------------------------------------------------------***   00083900
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00084000
                    AIF   (N'&OMONTKN LE 1).ZG10A  CK NUM               00084100
&ZMS                SETC  '"OMONTKN='                                   00084200
&ZMS                SETC  '&ZMS.&OMONTKN"'                              00084300
&ZMS                SETC  '&ZMS "OMONTKN"'                              00084400
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00084500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00084600
.ZG10A              ANOP  ,                                             00084700
.*-------------------------------------------------------------------   00084800
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00084900
                    AIF   (K'&OMONTKN(1) LE 0).ZG10C  NO PARM           00085000
&ZXOMONTKN          SETC  'OUTPUT'    SET OUTPUT                        00085100
&XOMONTKN           SETC  '&OMONTKN(1)'         SET XVARIABLE           00085200
                    AIF   (N'&OMONTKN GT 1).ZG10C                       00085300
&XOMONTKN           SETC  '&OMONTKN'  SET XVARIABLE                     00085400
.ZG10C              ANOP  ,                                             00085500
.*-------------------------------------------------------------------   00085600
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00085700
                    AIF   (K'&ZXOMONTKN LE 0).ZG10R  NOT I/O            00085800
                    AIF   ('&XOMONTKN'(1,1) NE '(').ZG10R               00085900
&ZCGPR              SETC  '&XOMONTKN'(2,K'&XOMONTKN-2)                  00086000
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG10P                  00086100
                    AIF   (K'&ZCGPR GT 2).ZG10Q                         00086200
                    AIF   ('&ZCGPR' EQ '0').ZG10Q                       00086300
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00086400
                    AIF   (T'&ZCGPR NE 'N').ZG10Q  INVALID REG NAME     00086500
.ZG10P              ANOP  ,                                             00086600
                    AIF   (T'&ZCGPR NE 'N').ZG10R  NON NUMERIC          00086700
                    AIF   ('&ZCGPR' LT '2').ZG10Q                       00086800
                    AIF   ('&ZCGPR' LE '12').ZG10R                      00086900
.ZG10Q              ANOP  ,                                             00087000
&ZMS                SETC  '"OMONTKN='                                   00087100
&ZMS                SETC  '&ZMS.&OMONTKN"'                              00087200
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00087300
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00087400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00087500
.ZG10R              ANOP  ,                                             00087600
.*----------------------------------------------------------------***   00087700
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00087800
                    AIF   (N'&OMONTKN64 LE 1).ZG13A  CK NUM             00087900
&ZMS                SETC  '"OMONTKN64='                                 00088000
&ZMS                SETC  '&ZMS.&OMONTKN64"'                            00088100
&ZMS                SETC  '&ZMS "OMONTKN64"'                            00088200
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00088300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00088400
.ZG13A              ANOP  ,                                             00088500
.*-------------------------------------------------------------------   00088600
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00088700
                    AIF   (K'&OMONTKN64(1) LE 0).ZG13C  NO PARM         00088800
&ZXOMONTKN64        SETC  'OUTPUT'    SET OUTPUT                        00088900
&XOMONTKN64         SETC  '&OMONTKN64(1)'       SET XVARIABLE           00089000
                    AIF   (N'&OMONTKN64 GT 1).ZG13C                     00089100
&XOMONTKN64         SETC  '&OMONTKN64'          SET XVARIABLE           00089200
.ZG13C              ANOP  ,                                             00089300
.*-------------------------------------------------------------------   00089400
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00089500
                    AIF   (K'&ZXOMONTKN64 LE 0).ZG13R  NOT I/O          00089600
                    AIF   ('&XOMONTKN64'(1,1) NE '(').ZG13R             00089700
&ZCGPR              SETC  '&XOMONTKN64'(2,K'&XOMONTKN64-2)              00089800
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG13P                  00089900
                    AIF   (K'&ZCGPR GT 2).ZG13Q                         00090000
                    AIF   ('&ZCGPR' EQ '0').ZG13Q                       00090100
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00090200
                    AIF   (T'&ZCGPR NE 'N').ZG13Q  INVALID REG NAME     00090300
.ZG13P              ANOP  ,                                             00090400
                    AIF   (T'&ZCGPR NE 'N').ZG13R  NON NUMERIC          00090500
                    AIF   ('&ZCGPR' LT '2').ZG13Q                       00090600
                    AIF   ('&ZCGPR' LE '12').ZG13R                      00090700
.ZG13Q              ANOP  ,                                             00090800
&ZMS                SETC  '"OMONTKN64='                                 00090900
&ZMS                SETC  '&ZMS.&OMONTKN64"'                            00091000
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00091100
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00091200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00091300
.ZG13R              ANOP  ,                                             00091400
.*----------------------------------------------------------------***   00091500
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00091600
                    AIF   (N'&OWNER_TOKEN LE 1).ZG16A  CK NUM           00091700
&ZMS                SETC  '"OWNER_TOKEN='                               00091800
&ZMS                SETC  '&ZMS.&OWNER_TOKEN"'                          00091900
&ZMS                SETC  '&ZMS "OWNER_TOKEN"'                          00092000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00092100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00092200
.ZG16A              ANOP  ,                                             00092300
.*-------------------------------------------------------------------   00092400
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00092500
                    AIF   (K'&OWNER_TOKEN(1) LE 0).ZG16C  NO PARM       00092600
&ZXOWNER_TOKEN      SETC  'OUTPUT'    SET OUTPUT                        00092700
&XOWNER_TOKEN       SETC  '&OWNER_TOKEN(1)'     SET XVARIABLE           00092800
                    AIF   (N'&OWNER_TOKEN GT 1).ZG16C                   00092900
&XOWNER_TOKEN       SETC  '&OWNER_TOKEN'        SET XVARIABLE           00093000
.ZG16C              ANOP  ,                                             00093100
.*-------------------------------------------------------------------   00093200
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00093300
                    AIF   (K'&ZXOWNER_TOKEN LE 0).ZG16R  NOT I/O        00093400
                    AIF   ('&XOWNER_TOKEN'(1,1) NE '(').ZG16R           00093500
&ZCGPR              SETC  '&XOWNER_TOKEN'(2,K'&XOWNER_TOKEN-2)          00093600
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG16P                  00093700
                    AIF   (K'&ZCGPR GT 2).ZG16Q                         00093800
                    AIF   ('&ZCGPR' EQ '0').ZG16Q                       00093900
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00094000
                    AIF   (T'&ZCGPR NE 'N').ZG16Q  INVALID REG NAME     00094100
.ZG16P              ANOP  ,                                             00094200
                    AIF   (T'&ZCGPR NE 'N').ZG16R  NON NUMERIC          00094300
                    AIF   ('&ZCGPR' LT '2').ZG16Q                       00094400
                    AIF   ('&ZCGPR' LE '12').ZG16R                      00094500
.ZG16Q              ANOP  ,                                             00094600
&ZMS                SETC  '"OWNER_TOKEN='                               00094700
&ZMS                SETC  '&ZMS.&OWNER_TOKEN"'                          00094800
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00094900
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00095000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00095100
.ZG16R              ANOP  ,                                             00095200
.*----------------------------------------------------------------***   00095300
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00095400
                    AIF   (N'&OWNER_DATA LE 1).ZG19A  CK NUM            00095500
&ZMS                SETC  '"OWNER_DATA='                                00095600
&ZMS                SETC  '&ZMS.&OWNER_DATA"'                           00095700
&ZMS                SETC  '&ZMS "OWNER_DATA"'                           00095800
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00095900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00096000
.ZG19A              ANOP  ,                                             00096100
.*-------------------------------------------------------------------   00096200
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00096300
                    AIF   (K'&OWNER_DATA(1) LE 0).ZG19C  NO PARM        00096400
&ZXOWNER_DATA       SETC  'OUTPUT'    SET OUTPUT                        00096500
&XOWNER_DATA        SETC  '&OWNER_DATA(1)'      SET XVARIABLE           00096600
                    AIF   (N'&OWNER_DATA GT 1).ZG19C                    00096700
&XOWNER_DATA        SETC  '&OWNER_DATA'         SET XVARIABLE           00096800
.ZG19C              ANOP  ,                                             00096900
.*-------------------------------------------------------------------   00097000
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00097100
                    AIF   (K'&ZXOWNER_DATA LE 0).ZG19R  NOT I/O         00097200
                    AIF   ('&XOWNER_DATA'(1,1) NE '(').ZG19R            00097300
&ZCGPR              SETC  '&XOWNER_DATA'(2,K'&XOWNER_DATA-2)            00097400
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG19P                  00097500
                    AIF   (K'&ZCGPR GT 2).ZG19Q                         00097600
                    AIF   ('&ZCGPR' EQ '0').ZG19Q                       00097700
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00097800
                    AIF   (T'&ZCGPR NE 'N').ZG19Q  INVALID REG NAME     00097900
.ZG19P              ANOP  ,                                             00098000
                    AIF   (T'&ZCGPR NE 'N').ZG19R  NON NUMERIC          00098100
                    AIF   ('&ZCGPR' LT '2').ZG19Q                       00098200
                    AIF   ('&ZCGPR' LE '12').ZG19R                      00098300
.ZG19Q              ANOP  ,                                             00098400
&ZMS                SETC  '"OWNER_DATA='                                00098500
&ZMS                SETC  '&ZMS.&OWNER_DATA"'                           00098600
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00098700
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00098800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00098900
.ZG19R              ANOP  ,                                             00099000
.*----------------------------------------------------------------***   00099100
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00099200
                    AIF   (N'&ARRIVALTIME LE 1).ZG22A  CK NUM           00099300
&ZMS                SETC  '"ARRIVALTIME='                               00099400
&ZMS                SETC  '&ZMS.&ARRIVALTIME"'                          00099500
&ZMS                SETC  '&ZMS "ARRIVALTIME"'                          00099600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00099700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00099800
.ZG22A              ANOP  ,                                             00099900
.*-------------------------------------------------------------------   00100000
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00100100
                    AIF   (K'&ARRIVALTIME(1) LE 0).ZG22C  NO PARM       00100200
&ZXARRIVALTIME      SETC  'OUTPUT'    SET OUTPUT                        00100300
&XARRIVALTIME       SETC  '&ARRIVALTIME(1)'     SET XVARIABLE           00100400
                    AIF   (N'&ARRIVALTIME GT 1).ZG22C                   00100500
&XARRIVALTIME       SETC  '&ARRIVALTIME'        SET XVARIABLE           00100600
.ZG22C              ANOP  ,                                             00100700
.*-------------------------------------------------------------------   00100800
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00100900
                    AIF   (K'&ZXARRIVALTIME LE 0).ZG22R  NOT I/O        00101000
                    AIF   ('&XARRIVALTIME'(1,1) NE '(').ZG22R           00101100
&ZCGPR              SETC  '&XARRIVALTIME'(2,K'&XARRIVALTIME-2)          00101200
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG22P                  00101300
                    AIF   (K'&ZCGPR GT 2).ZG22Q                         00101400
                    AIF   ('&ZCGPR' EQ '0').ZG22Q                       00101500
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00101600
                    AIF   (T'&ZCGPR NE 'N').ZG22Q  INVALID REG NAME     00101700
.ZG22P              ANOP  ,                                             00101800
                    AIF   (T'&ZCGPR NE 'N').ZG22R  NON NUMERIC          00101900
                    AIF   ('&ZCGPR' LT '2').ZG22Q                       00102000
                    AIF   ('&ZCGPR' LE '12').ZG22R                      00102100
.ZG22Q              ANOP  ,                                             00102200
&ZMS                SETC  '"ARRIVALTIME='                               00102300
&ZMS                SETC  '&ZMS.&ARRIVALTIME"'                          00102400
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00102500
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00102600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00102700
.ZG22R              ANOP  ,                                             00102800
.*----------------------------------------------------------------***   00102900
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00103000
                    AIF   (N'&TRXNAME LE 1).ZG25A  CK NUM               00103100
&ZMS                SETC  '"TRXNAME='                                   00103200
&ZMS                SETC  '&ZMS.&TRXNAME"'                              00103300
&ZMS                SETC  '&ZMS "TRXNAME"'                              00103400
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00103500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00103600
.ZG25A              ANOP  ,                                             00103700
.*-------------------------------------------------------------------   00103800
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00103900
                    AIF   (K'&TRXNAME(1) LE 0).ZG25C  NO PARM           00104000
&ZXTRXNAME          SETC  'OUTPUT'    SET OUTPUT                        00104100
&XTRXNAME           SETC  '&TRXNAME(1)'         SET XVARIABLE           00104200
                    AIF   (N'&TRXNAME GT 1).ZG25C                       00104300
&XTRXNAME           SETC  '&TRXNAME'  SET XVARIABLE                     00104400
.ZG25C              ANOP  ,                                             00104500
.*-------------------------------------------------------------------   00104600
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00104700
                    AIF   (K'&ZXTRXNAME LE 0).ZG25R  NOT I/O            00104800
                    AIF   ('&XTRXNAME'(1,1) NE '(').ZG25R               00104900
&ZCGPR              SETC  '&XTRXNAME'(2,K'&XTRXNAME-2)                  00105000
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG25P                  00105100
                    AIF   (K'&ZCGPR GT 2).ZG25Q                         00105200
                    AIF   ('&ZCGPR' EQ '0').ZG25Q                       00105300
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00105400
                    AIF   (T'&ZCGPR NE 'N').ZG25Q  INVALID REG NAME     00105500
.ZG25P              ANOP  ,                                             00105600
                    AIF   (T'&ZCGPR NE 'N').ZG25R  NON NUMERIC          00105700
                    AIF   ('&ZCGPR' LT '2').ZG25Q                       00105800
                    AIF   ('&ZCGPR' LE '12').ZG25R                      00105900
.ZG25Q              ANOP  ,                                             00106000
&ZMS                SETC  '"TRXNAME='                                   00106100
&ZMS                SETC  '&ZMS.&TRXNAME"'                              00106200
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00106300
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00106400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00106500
.ZG25R              ANOP  ,                                             00106600
.*----------------------------------------------------------------***   00106700
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00106800
                    AIF   (N'&USERID LE 1).ZG28A  CK NUM                00106900
&ZMS                SETC  '"USERID='                                    00107000
&ZMS                SETC  '&ZMS.&USERID"'                               00107100
&ZMS                SETC  '&ZMS "USERID"'                               00107200
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00107300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00107400
.ZG28A              ANOP  ,                                             00107500
.*-------------------------------------------------------------------   00107600
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00107700
                    AIF   (K'&USERID(1) LE 0).ZG28C  NO PARM            00107800
&ZXUSERID           SETC  'OUTPUT'    SET OUTPUT                        00107900
&XUSERID            SETC  '&USERID(1)'          SET XVARIABLE           00108000
                    AIF   (N'&USERID GT 1).ZG28C                        00108100
&XUSERID            SETC  '&USERID'   SET XVARIABLE                     00108200
.ZG28C              ANOP  ,                                             00108300
.*-------------------------------------------------------------------   00108400
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00108500
                    AIF   (K'&ZXUSERID LE 0).ZG28R  NOT I/O             00108600
                    AIF   ('&XUSERID'(1,1) NE '(').ZG28R                00108700
&ZCGPR              SETC  '&XUSERID'(2,K'&XUSERID-2)                    00108800
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG28P                  00108900
                    AIF   (K'&ZCGPR GT 2).ZG28Q                         00109000
                    AIF   ('&ZCGPR' EQ '0').ZG28Q                       00109100
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00109200
                    AIF   (T'&ZCGPR NE 'N').ZG28Q  INVALID REG NAME     00109300
.ZG28P              ANOP  ,                                             00109400
                    AIF   (T'&ZCGPR NE 'N').ZG28R  NON NUMERIC          00109500
                    AIF   ('&ZCGPR' LT '2').ZG28Q                       00109600
                    AIF   ('&ZCGPR' LE '12').ZG28R                      00109700
.ZG28Q              ANOP  ,                                             00109800
&ZMS                SETC  '"USERID='                                    00109900
&ZMS                SETC  '&ZMS.&USERID"'                               00110000
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00110100
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00110200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00110300
.ZG28R              ANOP  ,                                             00110400
.*----------------------------------------------------------------***   00110500
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00110600
                    AIF   (N'&SERVCLS LE 1).ZG31A  CK NUM               00110700
&ZMS                SETC  '"SERVCLS='                                   00110800
&ZMS                SETC  '&ZMS.&SERVCLS"'                              00110900
&ZMS                SETC  '&ZMS "SERVCLS"'                              00111000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00111100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00111200
.ZG31A              ANOP  ,                                             00111300
.*-------------------------------------------------------------------   00111400
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00111500
                    AIF   (K'&SERVCLS(1) LE 0).ZG31C  NO PARM           00111600
&ZXSERVCLS          SETC  'OUTPUT'    SET OUTPUT                        00111700
&XSERVCLS           SETC  '&SERVCLS(1)'         SET XVARIABLE           00111800
                    AIF   (N'&SERVCLS GT 1).ZG31C                       00111900
&XSERVCLS           SETC  '&SERVCLS'  SET XVARIABLE                     00112000
.ZG31C              ANOP  ,                                             00112100
.*-------------------------------------------------------------------   00112200
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00112300
                    AIF   (K'&ZXSERVCLS LE 0).ZG31R  NOT I/O            00112400
                    AIF   ('&XSERVCLS'(1,1) NE '(').ZG31R               00112500
&ZCGPR              SETC  '&XSERVCLS'(2,K'&XSERVCLS-2)                  00112600
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG31P                  00112700
                    AIF   (K'&ZCGPR GT 2).ZG31Q                         00112800
                    AIF   ('&ZCGPR' EQ '0').ZG31Q                       00112900
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00113000
                    AIF   (T'&ZCGPR NE 'N').ZG31Q  INVALID REG NAME     00113100
.ZG31P              ANOP  ,                                             00113200
                    AIF   (T'&ZCGPR NE 'N').ZG31R  NON NUMERIC          00113300
                    AIF   ('&ZCGPR' LT '2').ZG31Q                       00113400
                    AIF   ('&ZCGPR' LE '12').ZG31R                      00113500
.ZG31Q              ANOP  ,                                             00113600
&ZMS                SETC  '"SERVCLS='                                   00113700
&ZMS                SETC  '&ZMS.&SERVCLS"'                              00113800
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00113900
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00114000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00114100
.ZG31R              ANOP  ,                                             00114200
.*----------------------------------------------------------------***   00114300
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00114400
                    AIF   (N'&ASID LE 1).ZG34A  CK NUM                  00114500
&ZMS                SETC  '"ASID='                                      00114600
&ZMS                SETC  '&ZMS.&ASID"'                                 00114700
&ZMS                SETC  '&ZMS "ASID"'                                 00114800
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00114900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00115000
.ZG34A              ANOP  ,                                             00115100
.*-------------------------------------------------------------------   00115200
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00115300
                    AIF   (K'&ASID(1) LE 0).ZG34C  NO PARM              00115400
&ZXASID             SETC  'OUTPUT'    SET OUTPUT                        00115500
&XASID              SETC  '&ASID(1)'  SET XVARIABLE                     00115600
                    AIF   (N'&ASID GT 1).ZG34C                          00115700
&XASID              SETC  '&ASID'     SET XVARIABLE                     00115800
.ZG34C              ANOP  ,                                             00115900
.*-------------------------------------------------------------------   00116000
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00116100
                    AIF   (K'&ZXASID LE 0).ZG34R  NOT I/O               00116200
                    AIF   ('&XASID'(1,1) NE '(').ZG34R                  00116300
&ZCGPR              SETC  '&XASID'(2,K'&XASID-2)                        00116400
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG34P                  00116500
                    AIF   (K'&ZCGPR GT 2).ZG34Q                         00116600
                    AIF   ('&ZCGPR' EQ '0').ZG34Q                       00116700
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00116800
                    AIF   (T'&ZCGPR NE 'N').ZG34Q  INVALID REG NAME     00116900
.ZG34P              ANOP  ,                                             00117000
                    AIF   (T'&ZCGPR NE 'N').ZG34R  NON NUMERIC          00117100
                    AIF   ('&ZCGPR' LT '2').ZG34Q                       00117200
                    AIF   ('&ZCGPR' LE '12').ZG34R                      00117300
.ZG34Q              ANOP  ,                                             00117400
&ZMS                SETC  '"ASID='                                      00117500
&ZMS                SETC  '&ZMS.&ASID"'                                 00117600
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00117700
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00117800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00117900
.ZG34R              ANOP  ,                                             00118000
.*----------------------------------------------------------------***   00118100
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00118200
                    AIF   (N'&ENCLAVE_TOKEN LE 1).ZG37A  CK NUM         00118300
&ZMS                SETC  '"ENCLAVE_TOKEN='                             00118400
&ZMS                SETC  '&ZMS.&ENCLAVE_TOKEN"'                        00118500
&ZMS                SETC  '&ZMS "ENCLAVE_TOKEN"'                        00118600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00118700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00118800
.ZG37A              ANOP  ,                                             00118900
.*-------------------------------------------------------------------   00119000
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00119100
                    AIF   (K'&ENCLAVE_TOKEN(1) LE 0).ZG37C  NO PARM     00119200
&ZXENCLAVE_TOKEN    SETC  'OUTPUT'    SET OUTPUT                        00119300
&XENCLAVE_TOKEN     SETC  '&ENCLAVE_TOKEN(1)'   SET XVARIABLE           00119400
                    AIF   (N'&ENCLAVE_TOKEN GT 1).ZG37C                 00119500
&XENCLAVE_TOKEN     SETC  '&ENCLAVE_TOKEN'      SET XVARIABLE           00119600
.ZG37C              ANOP  ,                                             00119700
.*-------------------------------------------------------------------   00119800
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00119900
                    AIF   (K'&ZXENCLAVE_TOKEN LE 0).ZG37R  NOT I/O      00120000
                    AIF   ('&XENCLAVE_TOKEN'(1,1) NE '(').ZG37R         00120100
&ZCGPR              SETC  '&XENCLAVE_TOKEN'(2,K'&XENCLAVE_TOKEN-2)      00120200
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG37P                  00120300
                    AIF   (K'&ZCGPR GT 2).ZG37Q                         00120400
                    AIF   ('&ZCGPR' EQ '0').ZG37Q                       00120500
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00120600
                    AIF   (T'&ZCGPR NE 'N').ZG37Q  INVALID REG NAME     00120700
.ZG37P              ANOP  ,                                             00120800
                    AIF   (T'&ZCGPR NE 'N').ZG37R  NON NUMERIC          00120900
                    AIF   ('&ZCGPR' LT '2').ZG37Q                       00121000
                    AIF   ('&ZCGPR' LE '12').ZG37R                      00121100
.ZG37Q              ANOP  ,                                             00121200
&ZMS                SETC  '"ENCLAVE_TOKEN='                             00121300
&ZMS                SETC  '&ZMS.&ENCLAVE_TOKEN"'                        00121400
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00121500
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00121600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00121700
.ZG37R              ANOP  ,                                             00121800
.*----------------------------------------------------------------***   00121900
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00122000
                    AIF   (N'&TTRACETOKEN LE 1).ZG40A  CK NUM           00122100
&ZMS                SETC  '"TTRACETOKEN='                               00122200
&ZMS                SETC  '&ZMS.&TTRACETOKEN"'                          00122300
&ZMS                SETC  '&ZMS "TTRACETOKEN"'                          00122400
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00122500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00122600
.ZG40A              ANOP  ,                                             00122700
.*-------------------------------------------------------------------   00122800
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00122900
                    AIF   (K'&TTRACETOKEN(1) LE 0).ZG40C  NO PARM       00123000
&ZXTTRACETOKEN      SETC  'OUTPUT'    SET OUTPUT                        00123100
&XTTRACETOKEN       SETC  '&TTRACETOKEN(1)'     SET XVARIABLE           00123200
                    AIF   (N'&TTRACETOKEN GT 1).ZG40C                   00123300
&XTTRACETOKEN       SETC  '&TTRACETOKEN'        SET XVARIABLE           00123400
.ZG40C              ANOP  ,                                             00123500
.*-------------------------------------------------------------------   00123600
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00123700
                    AIF   (K'&ZXTTRACETOKEN LE 0).ZG40R  NOT I/O        00123800
                    AIF   ('&XTTRACETOKEN'(1,1) NE '(').ZG40R           00123900
&ZCGPR              SETC  '&XTTRACETOKEN'(2,K'&XTTRACETOKEN-2)          00124000
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG40P                  00124100
                    AIF   (K'&ZCGPR GT 2).ZG40Q                         00124200
                    AIF   ('&ZCGPR' EQ '0').ZG40Q                       00124300
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00124400
                    AIF   (T'&ZCGPR NE 'N').ZG40Q  INVALID REG NAME     00124500
.ZG40P              ANOP  ,                                             00124600
                    AIF   (T'&ZCGPR NE 'N').ZG40R  NON NUMERIC          00124700
                    AIF   ('&ZCGPR' LT '2').ZG40Q                       00124800
                    AIF   ('&ZCGPR' LE '12').ZG40R                      00124900
.ZG40Q              ANOP  ,                                             00125000
&ZMS                SETC  '"TTRACETOKEN='                               00125100
&ZMS                SETC  '&ZMS.&TTRACETOKEN"'                          00125200
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00125300
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00125400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00125500
.ZG40R              ANOP  ,                                             00125600
.*----------------------------------------------------------------***   00125700
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00125800
                    AIF   (N'&ABNORMAL_COND LE 1).ZG43A  CK NUM         00125900
&ZMS                SETC  '"ABNORMAL_COND='                             00126000
&ZMS                SETC  '&ZMS.&ABNORMAL_COND"'                        00126100
&ZMS                SETC  '&ZMS "ABNORMAL_COND"'                        00126200
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00126300
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00126400
.ZG43A              ANOP  ,                                             00126500
.*-------------------------------------------------------------------   00126600
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00126700
                    AIF   (K'&ABNORMAL_COND(1) LE 0).ZG43C  NO PARM     00126800
&ZXABNORMAL_COND    SETC  'OUTPUT'    SET OUTPUT                        00126900
&XABNORMAL_COND     SETC  '&ABNORMAL_COND(1)'   SET XVARIABLE           00127000
                    AIF   (N'&ABNORMAL_COND GT 1).ZG43C                 00127100
&XABNORMAL_COND     SETC  '&ABNORMAL_COND'      SET XVARIABLE           00127200
.ZG43C              ANOP  ,                                             00127300
.*-------------------------------------------------------------------   00127400
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00127500
                    AIF   (K'&ZXABNORMAL_COND LE 0).ZG43R  NOT I/O      00127600
                    AIF   ('&XABNORMAL_COND'(1,1) NE '(').ZG43R         00127700
&ZCGPR              SETC  '&XABNORMAL_COND'(2,K'&XABNORMAL_COND-2)      00127800
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG43P                  00127900
                    AIF   (K'&ZCGPR GT 2).ZG43Q                         00128000
                    AIF   ('&ZCGPR' EQ '0').ZG43Q                       00128100
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00128200
                    AIF   (T'&ZCGPR NE 'N').ZG43Q  INVALID REG NAME     00128300
.ZG43P              ANOP  ,                                             00128400
                    AIF   (T'&ZCGPR NE 'N').ZG43R  NON NUMERIC          00128500
                    AIF   ('&ZCGPR' LT '2').ZG43Q                       00128600
                    AIF   ('&ZCGPR' LE '12').ZG43R                      00128700
.ZG43Q              ANOP  ,                                             00128800
&ZMS                SETC  '"ABNORMAL_COND='                             00128900
&ZMS                SETC  '&ZMS.&ABNORMAL_COND"'                        00129000
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00129100
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00129200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00129300
.ZG43R              ANOP  ,                                             00129400
.*----------------------------------------------------------------***   00129500
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00129600
                    AIF   (N'&EWLM_CHCORR LE 1).ZG46A  CK NUM           00129700
&ZMS                SETC  '"EWLM_CHCORR='                               00129800
&ZMS                SETC  '&ZMS.&EWLM_CHCORR"'                          00129900
&ZMS                SETC  '&ZMS "EWLM_CHCORR"'                          00130000
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00130100
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00130200
.ZG46A              ANOP  ,                                             00130300
.*-------------------------------------------------------------------   00130400
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00130500
                    AIF   (K'&EWLM_CHCORR(1) LE 0).ZG46C  NO PARM       00130600
&ZXEWLM_CHCORR      SETC  'OUTPUT'    SET OUTPUT                        00130700
&XEWLM_CHCORR       SETC  '&EWLM_CHCORR(1)'     SET XVARIABLE           00130800
                    AIF   (N'&EWLM_CHCORR GT 1).ZG46C                   00130900
&XEWLM_CHCORR       SETC  '&EWLM_CHCORR'        SET XVARIABLE           00131000
.ZG46C              ANOP  ,                                             00131100
.*-------------------------------------------------------------------   00131200
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00131300
                    AIF   (K'&ZXEWLM_CHCORR LE 0).ZG46R  NOT I/O        00131400
                    AIF   ('&XEWLM_CHCORR'(1,1) NE '(').ZG46R           00131500
&ZCGPR              SETC  '&XEWLM_CHCORR'(2,K'&XEWLM_CHCORR-2)          00131600
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG46P                  00131700
                    AIF   (K'&ZCGPR GT 2).ZG46Q                         00131800
                    AIF   ('&ZCGPR' EQ '0').ZG46Q                       00131900
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00132000
                    AIF   (T'&ZCGPR NE 'N').ZG46Q  INVALID REG NAME     00132100
.ZG46P              ANOP  ,                                             00132200
                    AIF   (T'&ZCGPR NE 'N').ZG46R  NON NUMERIC          00132300
                    AIF   ('&ZCGPR' LT '2').ZG46Q                       00132400
                    AIF   ('&ZCGPR' LE '12').ZG46R                      00132500
.ZG46Q              ANOP  ,                                             00132600
&ZMS                SETC  '"EWLM_CHCORR='                               00132700
&ZMS                SETC  '&ZMS.&EWLM_CHCORR"'                          00132800
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00132900
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00133000
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00133100
.ZG46R              ANOP  ,                                             00133200
.*----------------------------------------------------------------***   00133300
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00133400
                    AIF   (N'&EWLM_PACTKN LE 1).ZG49A  CK NUM           00133500
&ZMS                SETC  '"EWLM_PACTKN='                               00133600
&ZMS                SETC  '&ZMS.&EWLM_PACTKN"'                          00133700
&ZMS                SETC  '&ZMS "EWLM_PACTKN"'                          00133800
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00133900
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00134000
.ZG49A              ANOP  ,                                             00134100
.*-------------------------------------------------------------------   00134200
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00134300
                    AIF   (K'&EWLM_PACTKN(1) LE 0).ZG49C  NO PARM       00134400
&ZXEWLM_PACTKN      SETC  'OUTPUT'    SET OUTPUT                        00134500
&XEWLM_PACTKN       SETC  '&EWLM_PACTKN(1)'     SET XVARIABLE           00134600
                    AIF   (N'&EWLM_PACTKN GT 1).ZG49C                   00134700
&XEWLM_PACTKN       SETC  '&EWLM_PACTKN'        SET XVARIABLE           00134800
.ZG49C              ANOP  ,                                             00134900
.*-------------------------------------------------------------------   00135000
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00135100
                    AIF   (K'&ZXEWLM_PACTKN LE 0).ZG49R  NOT I/O        00135200
                    AIF   ('&XEWLM_PACTKN'(1,1) NE '(').ZG49R           00135300
&ZCGPR              SETC  '&XEWLM_PACTKN'(2,K'&XEWLM_PACTKN-2)          00135400
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG49P                  00135500
                    AIF   (K'&ZCGPR GT 2).ZG49Q                         00135600
                    AIF   ('&ZCGPR' EQ '0').ZG49Q                       00135700
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00135800
                    AIF   (T'&ZCGPR NE 'N').ZG49Q  INVALID REG NAME     00135900
.ZG49P              ANOP  ,                                             00136000
                    AIF   (T'&ZCGPR NE 'N').ZG49R  NON NUMERIC          00136100
                    AIF   ('&ZCGPR' LT '2').ZG49Q                       00136200
                    AIF   ('&ZCGPR' LE '12').ZG49R                      00136300
.ZG49Q              ANOP  ,                                             00136400
&ZMS                SETC  '"EWLM_PACTKN='                               00136500
&ZMS                SETC  '&ZMS.&EWLM_PACTKN"'                          00136600
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00136700
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00136800
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00136900
.ZG49R              ANOP  ,                                             00137000
.*----------------------------------------------------------------***   00137100
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00137200
                    AIF   (N'&EWLM_S_CURCORR LE 1).ZG52A  CK NUM        00137300
&ZMS                SETC  '"EWLM_S_CURCORR='                            00137400
&ZMS                SETC  '&ZMS.&EWLM_S_CURCORR"'                       00137500
&ZMS                SETC  '&ZMS "EWLM_S_CURCORR"'                       00137600
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00137700
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00137800
.ZG52A              ANOP  ,                                             00137900
.*-------------------------------------------------------------------   00138000
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00138100
                    AIF   (K'&EWLM_S_CURCORR(1) LE 0).ZG52C  NO PARM    00138200
&ZXEWLM_S_CURCORR   SETC  'OUTPUT'    SET OUTPUT                        00138300
&XEWLM_S_CURCORR    SETC  '&EWLM_S_CURCORR(1)'  SET XVARIABLE           00138400
                    AIF   (N'&EWLM_S_CURCORR GT 1).ZG52C                00138500
&XEWLM_S_CURCORR    SETC  '&EWLM_S_CURCORR'     SET XVARIABLE           00138600
.ZG52C              ANOP  ,                                             00138700
.*-------------------------------------------------------------------   00138800
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00138900
                    AIF   (K'&ZXEWLM_S_CURCORR LE 0).ZG52R  NOT I/O     00139000
                    AIF   ('&XEWLM_S_CURCORR'(1,1) NE '(').ZG52R        00139100
&ZCGPR              SETC  '&XEWLM_S_CURCORR'(2,K'&XEWLM_S_CURCORR-2)    00139200
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG52P                  00139300
                    AIF   (K'&ZCGPR GT 2).ZG52Q                         00139400
                    AIF   ('&ZCGPR' EQ '0').ZG52Q                       00139500
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00139600
                    AIF   (T'&ZCGPR NE 'N').ZG52Q  INVALID REG NAME     00139700
.ZG52P              ANOP  ,                                             00139800
                    AIF   (T'&ZCGPR NE 'N').ZG52R  NON NUMERIC          00139900
                    AIF   ('&ZCGPR' LT '2').ZG52Q                       00140000
                    AIF   ('&ZCGPR' LE '12').ZG52R                      00140100
.ZG52Q              ANOP  ,                                             00140200
&ZMS                SETC  '"EWLM_S_CURCORR='                            00140300
&ZMS                SETC  '&ZMS.&EWLM_S_CURCORR"'                       00140400
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00140500
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12).'              00140600
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00140700
.ZG52R              ANOP  ,                                             00140800
.*----------------------------------------------------------------***   00140900
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00141000
                    AIF   (N'&RETCODE LE 1).ZG55A  CK NUM               00141100
&ZMS                SETC  '"RETCODE='                                   00141200
&ZMS                SETC  '&ZMS.&RETCODE"'                              00141300
&ZMS                SETC  '&ZMS "RETCODE"'                              00141400
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00141500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00141600
.ZG55A              ANOP  ,                                             00141700
.*-------------------------------------------------------------------   00141800
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00141900
                    AIF   (K'&RETCODE(1) LE 0).ZG55C  NO PARM           00142000
&ZXRETCODE          SETC  'OUTPUT'    SET OUTPUT                        00142100
&XRETCODE           SETC  '&RETCODE(1)'         SET XVARIABLE           00142200
                    AIF   (N'&RETCODE GT 1).ZG55C                       00142300
&XRETCODE           SETC  '&RETCODE'  SET XVARIABLE                     00142400
.ZG55C              ANOP  ,                                             00142500
.*-------------------------------------------------------------------   00142600
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00142700
                    AIF   (K'&ZXRETCODE LE 0).ZG55R  NOT I/O            00142800
                    AIF   ('&XRETCODE'(1,1) NE '(').ZG55R               00142900
&ZCGPR              SETC  '&XRETCODE'(2,K'&XRETCODE-2)                  00143000
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG55P                  00143100
                    AIF   (K'&ZCGPR GT 2).ZG55Q                         00143200
                    AIF   ('&ZCGPR' EQ '0').ZG55Q                       00143300
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00143400
                    AIF   (T'&ZCGPR NE 'N').ZG55Q  INVALID REG NAME     00143500
.ZG55P              ANOP  ,                                             00143600
                    AIF   (T'&ZCGPR NE 'N').ZG55R  NON NUMERIC          00143700
                    AIF   ('&ZCGPR' EQ '15').ZG55R                      00143800
                    AIF   ('&ZCGPR' LT '2').ZG55Q                       00143900
                    AIF   ('&ZCGPR' LE '12').ZG55R                      00144000
.ZG55Q              ANOP  ,                                             00144100
&ZMS                SETC  '"RETCODE='                                   00144200
&ZMS                SETC  '&ZMS.&RETCODE"'                              00144300
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00144400
                    MNOTE 8,' &ZMS IN THE RANGE (2)-(12) OR (15).'      00144500
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00144600
.ZG55R              ANOP  ,                                             00144700
.*----------------------------------------------------------------***   00144800
.***AG.KXVAR05 NAME, OPT OUTPUT, KEYS -XVARIABLE KEY                    00144900
                    AIF   (N'&RSNCODE LE 1).ZG58A  CK NUM               00145000
&ZMS                SETC  '"RSNCODE='                                   00145100
&ZMS                SETC  '&ZMS.&RSNCODE"'                              00145200
&ZMS                SETC  '&ZMS "RSNCODE"'                              00145300
                    MNOTE 8,' &ZMS CAN HAVE ONLY 1 ARGUMENT.'           00145400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00145500
.ZG58A              ANOP  ,                                             00145600
.*-------------------------------------------------------------------   00145700
.***AG.KXVAR14 NAME, OPT OUTPUT, KEYS -XVARIABLE                        00145800
                    AIF   (K'&RSNCODE(1) LE 0).ZG58C  NO PARM           00145900
&ZXRSNCODE          SETC  'OUTPUT'    SET OUTPUT                        00146000
&XRSNCODE           SETC  '&RSNCODE(1)'         SET XVARIABLE           00146100
                    AIF   (N'&RSNCODE GT 1).ZG58C                       00146200
&XRSNCODE           SETC  '&RSNCODE'  SET XVARIABLE                     00146300
.ZG58C              ANOP  ,                                             00146400
.*-------------------------------------------------------------------   00146500
.***AG.KCK02 NAME, OPT OUTPUT, KEYS -GPR OUT OF RANGE                   00146600
                    AIF   (K'&ZXRSNCODE LE 0).ZG58R  NOT I/O            00146700
                    AIF   ('&XRSNCODE'(1,1) NE '(').ZG58R               00146800
&ZCGPR              SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                  00146900
                    AIF   ('&ZCGPR'(1,1) NE '0').ZG58P                  00147000
                    AIF   (K'&ZCGPR GT 2).ZG58Q                         00147100
                    AIF   ('&ZCGPR' EQ '0').ZG58R                       00147200
&ZCGPR              SETC  '&ZCGPR'(2,1)                                 00147300
                    AIF   (T'&ZCGPR NE 'N').ZG58Q  INVALID REG NAME     00147400
.ZG58P              ANOP  ,                                             00147500
                    AIF   (T'&ZCGPR NE 'N').ZG58R  NON NUMERIC          00147600
                    AIF   ('&ZCGPR' EQ '0').ZG58R                       00147700
                    AIF   ('&ZCGPR' LT '2').ZG58Q                       00147800
                    AIF   ('&ZCGPR' LE '12').ZG58R                      00147900
.ZG58Q              ANOP  ,                                             00148000
&ZMS                SETC  '"RSNCODE='                                   00148100
&ZMS                SETC  '&ZMS.&RSNCODE"'                              00148200
&ZMS                SETC  '&ZMS ARGUMENT 1 MUST SPECIFY A REGISTER'     00148300
                    MNOTE 8,' &ZMS IN THE RANGE (0) OR (2)-(12).'       00148400
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00148500
.ZG58R              ANOP  ,                                             00148600
.******************************************************************     00148700
.***AH.P00 CHECK STANDALONE POSITIONAL VARIABLES                        00148800
.******************************************************************     00148900
                    ACTR  10000                                         00149000
.*----------------------------------------------------------------***   00149100
.***AH.P02 EXTRA POSITIONALS                                            00149200
                    AIF   (N'&SYSLIST LE 0).ZGLISTX  NO EXTRAS          00149300
                    AIF   (N'&SYSLIST NE 2).ZGLISTX1  NOT NULL          00149400
                    AIF   ('&SYSLIST(1)' NE '').ZGLISTX1  NOT NULL      00149500
                    AIF   ('&SYSLIST(2)' EQ '').ZGLISTX  NOT NULL       00149600
.ZGLISTX1           ANOP  ,                                             00149700
&ZCVAL              SETC  ''          ERROR FIELD                       00149800
&ZAWRK              SETA  0           POSITIONAL NUMBER                 00149900
.ZGLIST2            ANOP  ,                                             00150000
&ZAWRK              SETA  &ZAWRK+1    NEXT POSITIONAL                   00150100
                    AIF   (&ZAWRK GT N'&SYSLIST).ZGLIST3  DONE          00150200
&ZCVAL              SETC '&ZCVAL,&SYSLIST(&ZAWRK)'  EXTRA               00150300
                    AGO   .ZGLIST2                                      00150400
.*                                                                      00150500
.ZGLIST3            ANOP  ,                                             00150600
&ZCVAL              SETC '&ZCVAL'(2,K'&ZCVAL-1)  STRIP COMMA            00150700
&ZMS                SETC  'POSITIONAL ARGUMENT(S),'                     00150800
&ZMS                SETC  '&ZMS "&ZCVAL"'                               00150900
&ZMS                SETC  '&ZMS CANNOT BE USED.'                        00151000
&ZMS                SETC  '&ZMS NO POSITIONAL ARGUMENTS'                00151100
                    MNOTE 8,' &ZMS ARE ALLOWED.'                        00151200
&ZMACRET            SETA  8           SET MACRO ERROR RETURN CODE       00151300
.ZGLISTX            ANOP  ,                                             00151400
&ZASYSLNDX          SETA  0                                             00151500
.*******************************************************************    00151600
.***AE.ZMR01 NO CODE GENERATED IF ERRORS DETECTED                       00151700
.*******************************************************************    00151800
                    AIF   (&ZMACRET NE 0).ZLX2  ERROR DETECTED          00151900
.*******************************************************************    00152000
.***AE.01  START OF IWM4MXTR MACRO CODE                                 00152100
.*******************************************************************    00152200
                    LCLC  &M0M0001                 NAME                 00152300
&M0M0001            SETC  '&XLABEL'                SET NAME             00152400
                    AIF   (K'&XLABEL NE 0).XLAB2                        00152500
&M0M0001            SETC  'M00M&SYSNDX'            DEFAULT NAME         00152600
.*                                                                      00152700
.XLAB2              ANOP  ,                                             00152800
&M0M0001 DS    0H                             IWM4MXTR-0                00152900
.*******************************************************************    00153000
.***AE.PR01 PRINT CONTROLS, DEFAULT IS YES                              00153100
.*******************************************************************    00153200
              PUSH  PRINT                                               00153300
                    AIF   ('&ZPRINT' NE 'NO').ZPRINTX  TURN PRINT ON    00153400
                    PRINT OFF         ++ PR01                           00153500
                    AGO   .ZPRNTXX                                      00153600
.ZPRINTX            PRINT ON                                            00153700
.ZPRNTXX            ANOP  ,                                             00153800
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00153900
         LCLC  &T1,&INIT                                                00154000
         GBLC  &SYSAM64                                                 00154100
         GBLA  &SYSALVL                                                 00154200
.*--------------------------------------------------------------------- 00154300
.* Fetch Monitoring Token                                               00154400
.*--------------------------------------------------------------------- 00154500
         AIF ('&MONTKN' EQ '').MONTKNR2                                 00154600
&T1      SETC  '&MONTKN'                                                00154700
         AIF   ('&MONTKN'(1,1) NE '(').MONTKNR1                         00154800
&T1      SETC  '&MONTKN'(2,K'&MONTKN-2)                                 00154900
&T1      SETC  '0(&T1.)'                                                00155000
.MONTKNR1  ANOP                                                         00155100
.* &T1 IS NOW A VALID BASE-DISPLACEMENT EXPRESSION                      00155200
         LLGT  14,&T1                  FETCH 31BIT MONITORING TOKEN     00155300
         LTGR  14,14                   MONITORING TOKEN PROVIDED?       00155400
         AGO .MONTKNR4                                                  00155500
.MONTKNR2  ANOP                                                         00155600
&T1      SETC  '&MONTKN64'                                              00155700
         AIF   ('&MONTKN64'(1,1) NE '(').MONTKNR3                       00155800
&T1      SETC  '&MONTKN64'(2,K'&MONTKN64-2)                             00155900
&T1      SETC  '0(&T1.)'                                                00156000
.MONTKNR3  ANOP                                                         00156100
         AIF   ('&SYSAM64' EQ 'YES').SWAM64                             00156200
         SAM64                                                          00156300
.SWAM64  ANOP                                                           00156400
.* &T1 IS NOW A VALID BASE-DISPLACEMENT EXPRESSION                      00156500
         LTG   14,&T1                  FETCH 64BIT MONITORING TOKEN     00156600
.MONTKNR4  ANOP                                                         00156700
         JNZ   MONENV&SYSNDX           BRANCH MON ENV IS PRESENT   @P2C 00156800
         LA    0,IWMRSNCODENOMONENV    SET REASON CODE = NO MON ENV     00156900
         LA    15,IWMRETCODEWARNING    SET WARNING RETURN CODE          00157000
         J     END&SYSNDX              BRANCH TO END LABEL         @P2C 00157100
MONENV&SYSNDX DS    0H                 BRANCH LABEL FOR MON ENV PRESENT 00157200
         LLILF 1,PB_ID_CONST                                       @P2A 00157300
         CL    1,PB_ID-PB(,14)                                     @P2C 00157400
         JE    MONENVOK&SYSNDX         BRANCH WHEN MON ENV PASSES  @P2C 00157500
         LA    0,IWMRSNCODEBADMONENV   SET REASON CODE = BAD MON ENV    00157600
         LA    15,IWMRETCODEINVOCERROR SET INVOCATION ERROR RETURN CODE 00157700
         J     END&SYSNDX              BRANCH TO END LABEL         @P2C 00157800
MONENVOK&SYSNDX DS    0H               BRANCH LABEL FOR MON ENV OK      00157900
         AIF   ('&OMONTKN64' EQ '').ENDOMONTKN64                        00158000
&T1      SETC  '&OMONTKN64'                                             00158100
         AIF   ('&OMONTKN64'(1,1) NE '(').OMONTKN64RS                   00158200
&T1      SETC  '&OMONTKN64'(2,K'&OMONTKN64-2)                           00158300
&T1      SETC  '0(&T1.)'                                                00158400
.OMONTKN64RS ANOP                                                       00158500
.* &T1 IS NOW A VALID BASE-DISPLACEMENT EXPRESSION                      00158600
         STG   14,&T1                  STORE OMONTKN64                  00158700
.ENDOMONTKN64 ANOP                                                      00158800
         AIF   ('&OMONTKN' EQ '').ENDOMONTKN                            00158900
&T1      SETC  '&OMONTKN'                                               00159000
         AIF   ('&OMONTKN'(1,1) NE '(').OMONTKNRS                       00159100
&T1      SETC  '&OMONTKN'(2,K'&OMONTKN-2)                               00159200
&T1      SETC  '0(&T1.)'                                                00159300
.OMONTKNRS ANOP                                                         00159400
.* &T1 IS NOW A VALID BASE-DISPLACEMENT EXPRESSION                      00159500
         LLILF 1,X'7FFFFFFF'                                       @P2C 00159600
         CLGR  14,1                                                @P2C 00159700
         JH    OMONTKN&SYSNDX._INVALID                             @P2C 00159800
         ST    14,&T1                  STORE OMONTKN                    00159900
         OI    &T1,X'80'               SET HIGH ORDER FLAG              00160000
         J     OMONTKN&SYSNDX._END                                 @P2C 00160100
OMONTKN&SYSNDX._INVALID DS 0H                                           00160200
         ST    1,&T1                                                    00160300
         LA    0,IWMRSNCODEOUTPUTAREATOOSMALL  SET REASON CODE          00160400
         LA    15,IWMRETCODEWARNING    SET WARNING RETURN CODE          00160500
         J     END&SYSNDX              BRANCH TO END LABEL         @P2C 00160600
OMONTKN&SYSNDX._END DS 0H                                               00160700
.ENDOMONTKN ANOP                                                        00160800
         USING PB,14                                                    00160900
         AIF   ('&OWNER_TOKEN' EQ '').ENDOWNER_TOKEN                    00161000
&T1      SETC  '&OWNER_TOKEN'                                           00161100
         AIF   ('&OWNER_TOKEN'(1,1) NE '(').OWNER_TOKENRS               00161200
&T1      SETC  '&OWNER_TOKEN'(2,K'&OWNER_TOKEN-2)                       00161300
&T1      SETC  '0(&T1.)'                                                00161400
.OWNER_TOKENRS ANOP                                                     00161500
.* &T1 IS NOW A VALID BASE-DISPLACEMENT EXPRESSION                      00161600
         L     1,PB_OWNER_TKN          COPY OWNER_TOKEN VIA L,ST        00161700
         ST    1,&T1                                                    00161800
.ENDOWNER_TOKEN ANOP                                                    00161900
.*                                                                      00162000
         AIF   ('&OWNER_DATA' EQ '').ENDOWNER_DATA                      00162100
&T1      SETC  '&OWNER_DATA'                                            00162200
         AIF   ('&OWNER_DATA'(1,1) NE '(').OWNER_DATARS                 00162300
&T1      SETC  '&OWNER_DATA'(2,K'&OWNER_DATA-2)                         00162400
&T1      SETC  '0(&T1.)'                                                00162500
.OWNER_DATARS ANOP                                                      00162600
.* &T1 IS NOW A VALID BASE-DISPLACEMENT EXPRESSION                      00162700
         L     1,PB_OWNER_DATA         COPY OWNER_DATA VIA L,ST         00162800
         ST    1,&T1                                                    00162900
.ENDOWNER_DATA ANOP                                                     00163000
.*                                                                      00163100
         AIF   ('&ABNORMAL_COND' EQ '').ENDABNORMAL_COND                00163200
&T1      SETC  '&ABNORMAL_COND'                                         00163300
         AIF   ('&ABNORMAL_COND'(1,1) NE '(').ABNORMAL_CONDRS           00163400
&T1      SETC  '&ABNORMAL_COND'(2,K'&ABNORMAL_COND-2)                   00163500
&T1      SETC  '0(&T1.)'                                                00163600
.ABNORMAL_CONDRS ANOP                                                   00163700
.* &T1 IS NOW A VALID BASE-DISPLACEMENT EXPRESSION                      00163800
         L     1,PB_ABNORMAL_FLAGS     COPY ABNORMAL FLAGS              00163900
         ST    1,&T1                                                    00164000
.ENDABNORMAL_COND ANOP                                                  00164100
.*                                                                      00164200
         AIF   ('&ASID' EQ '').ENDASIDCODE                              00164300
&T1      SETC  '&ASID'                                                  00164400
         AIF   ('&ASID'(1,1) NE '(').ASIDRS                             00164500
&T1      SETC  '&ASID'(2,K'&ASID-2)                                     00164600
&T1      SETC  '0(&T1.)'                                                00164700
.ASIDRS ANOP                                                            00164800
.* &T1 IS NOW A VALID BASE-DISPLACEMENT EXPRESSION                      00164900
         LA    1,&T1                                                    00165000
         MVC   0(L'PB_AS_ID,1),PB_AS_ID     COPY ASID                   00165100
.ENDASIDCODE ANOP                                                       00165200
.*                                                                      00165300
         AIF   ('&ENCLAVE_TOKEN' EQ '').ENDENCLAVE_TOKENCODE            00165400
&T1      SETC  '&ENCLAVE_TOKEN'                                         00165500
         AIF   ('&ENCLAVE_TOKEN'(1,1) NE '(').ENCLAVE_TOKENRS           00165600
&T1      SETC  '&ENCLAVE_TOKEN'(2,K'&ENCLAVE_TOKEN-2)                   00165700
&T1      SETC  '0(&T1.)'                                                00165800
.ENCLAVE_TOKENRS ANOP                                                   00165900
.* &T1 IS NOW A VALID BASE-DISPLACEMENT EXPRESSION                      00166000
         LA    1,&T1                                                    00166100
         MVC   0(L'PB_ETOKEN,1),PB_ETOKEN   COPY ETOKEN                 00166200
.ENDENCLAVE_TOKENCODE ANOP                                              00166300
.*                                                                      00166400
         AIF   ('&SERVCLS' EQ '').ENDSERVCLSCODE                        00166500
&T1      SETC  '&SERVCLS'                                               00166600
         AIF   ('&SERVCLS'(1,1) NE '(').SERVCLSRS                       00166700
&T1      SETC  '&SERVCLS'(2,K'&SERVCLS-2)                               00166800
&T1      SETC  '0(&T1.)'                                                00166900
.SERVCLSRS ANOP                                                         00167000
.* &T1 IS NOW A VALID BASE-DISPLACEMENT EXPRESSION                      00167100
         L     1,PB_SC_TKN                                              00167200
         ST    1,&T1                   COPY SERVCLS VIA L,ST            00167300
.ENDSERVCLSCODE  ANOP                                                   00167400
.*                                                                      00167500
         AIF   ('&TTRACETOKEN' EQ '').ENDTTRACETOKENCODE                00167600
&T1      SETC  '&TTRACETOKEN'                                           00167700
         AIF   ('&TTRACETOKEN'(1,1) NE '(').TTRACETOKENRS               00167800
&T1      SETC  '&TTRACETOKEN'(2,K'&TTRACETOKEN-2)                       00167900
         MVC   0(32,&T1.),PB_TRANS_TTOKEN                               00168000
         AGO   .ENDTTRACETOKENCODE                                      00168100
.TTRACETOKENRS ANOP                                                     00168200
.* &T1 IS A VALID BASE-DISPLACEMENT EXPRESSION                          00168300
         MVC   &T1.(32),PB_TRANS_TTOKEN    COPY TTRACETOKEN             00168400
.ENDTTRACETOKENCODE   ANOP                                              00168500
.*                                                                      00168600
         AIF   ('&ARRIVALTIME' EQ '').ENDARRTIME                        00168700
&INIT    SETC  'YES'                                                    00168800
.ENDARRTIME    ANOP                                                     00168900
.*                                                                      00169000
         AIF   ('&TRXNAME' EQ '').ENDTRXNAME                            00169100
&INIT    SETC  'YES'                                                    00169200
.ENDTRXNAME    ANOP                                                     00169300
.*                                                                      00169400
         AIF   ('&USERID' EQ '').ENDUSERID                              00169500
&INIT    SETC  'YES'                                                    00169600
.ENDUSERID     ANOP                                                     00169700
.*                                                                      00169800
.*       CHECK TO SEE IF ANY KEYS WERE SPECIFIED WHICH REQUIRE          00169900
.*       CHECKING FOR INITIALIZE VS. RELATE                             00170000
.*                                                                      00170100
         AIF   ('&INIT' NE 'YES').ENDINIT                               00170200
         TM    PB_WORKDEF,PB_INIT      CHECK PB_INIT                    00170300
         JO    IWM4MXTR_INIT&SYSNDX     BRANCH IF SET              @P2C 00170400
         LA    15,IWMRETCODEWARNING    SET WARNING RETURN CODE          00170500
         LA    0,IWMRSNCODEMONENVLACKSINFO SET RSN CODE                 00170600
         J     END&SYSNDX              BRANCH TO END LABEL         @P2C 00170700
IWM4MXTR_INIT&SYSNDX DS 0H             BRANCH LABEL FOR INITIALIZE DONE 00170800
.*                                                                      00170900
         AIF   ('&ARRIVALTIME' EQ '').ENDARRTIMECODE                    00171000
&T1      SETC  '&ARRIVALTIME'                                           00171100
         AIF   ('&ARRIVALTIME'(1,1) NE '(').ARRIVALTIMERS               00171200
&T1      SETC  '&ARRIVALTIME'(2,K'&ARRIVALTIME-2)                       00171300
         MVC   0(8,&T1.),PB_ARRTIME                                     00171400
         AGO   .ENDARRTIMECODE                                          00171500
.ARRIVALTIMERS ANOP                                                     00171600
.* &T1 IS A VALID BASE-DISPLACEMENT EXPRESSION                          00171700
         MVC   &T1.(8),PB_ARRTIME                                       00171800
.ENDARRTIMECODE  ANOP                                                   00171900
.*                                                                      00172000
         AIF   ('&TRXNAME' EQ '').ENDTRXNAMECODE                        00172100
&T1      SETC  '&TRXNAME'                                               00172200
         AIF   ('&TRXNAME'(1,1) NE '(').TRXNAMERS                       00172300
&T1      SETC  '&TRXNAME'(2,K'&TRXNAME-2)                               00172400
         MVC   0(8,&T1.),PB_TRXNAME                                     00172500
         AGO   .ENDTRXNAMECODE                                          00172600
.TRXNAMERS ANOP                                                         00172700
.* &T1 IS A VALID BASE-DISPLACEMENT EXPRESSION                          00172800
         MVC   &T1.(8),PB_TRXNAME          COPY TRXNAME                 00172900
.ENDTRXNAMECODE  ANOP                                                   00173000
.*                                                                      00173100
         AIF   ('&USERID' EQ '').ENDUSERIDCODE                          00173200
&T1      SETC  '&USERID'                                                00173300
         AIF   ('&USERID'(1,1) NE '(').USERIDRS                         00173400
&T1      SETC  '&USERID'(2,K'&USERID-2)                                 00173500
         MVC   0(8,&T1.),PB_USERID                                      00173600
         AGO   .ENDUSERIDCODE                                           00173700
.USERIDRS ANOP                                                          00173800
.* &T1 IS A VALID BASE-DISPLACEMENT EXPRESSION                          00173900
         MVC   &T1.(8),PB_USERID          COPY USERID                   00174000
.ENDUSERIDCODE   ANOP                                                   00174100
.*                                                                      00174200
.ENDINIT ANOP                                                           00174300
         LA    15,IWMRETCODEOK          SET RETURN CODE = OK            00174400
EWLMCORREXTR&SYSNDX DS 0H                                               00174500
.******************************************************************     00174600
.* Begin EWLM support: Extract correlators from PB                *     00174700
.******************************************************************     00174800
         AIF   ('&EWLM_PACTKN' NE '').EWLMCORREXTR                      00174900
         AIF   ('&EWLM_CHCORR' NE '').EWLMCORREXTR                      00175000
         AGO   .SKIPEWLMCORREXTR                                        00175100
.*                                                                      00175200
.EWLMCORREXTR  ANOP ,                                                   00175300
         TM    PB_WORKDEF,PB_RELATE    CHECK PB_RELATE WHEN CORR        00175400
         JO    EWLMCORRFILLBEG&SYSNDX  BRANCH IF SET               @P2C 00175500
         TM    PB_WORKDEF,PB_INIT      CHECK PB_INIT   WHEN CORR        00175600
         JO    EWLMCORRFILLBEG&SYSNDX  BRANCH IF SET               @P2C 00175700
         LA    15,IWMRETCODEWARNING    SET WARNING RETURN CODE          00175800
         LA    0,IWMRSNCODEMONENVLACKSINFO SET RSN CODE                 00175900
         J     END&SYSNDX              BRANCH TO END LABEL         @P2C 00176000
EWLMCORRFILLBEG&SYSNDX DS 0H           BRANCH LABEL FOR BEGIN           00176100
.CHECKPBINIT   ANOP                                                     00176200
         CLI   PB_VERSION,PB_VERSION6   IF EWLM IS SUPPORTED            00176300
         JL    NOEWLMSUPPORT&SYSNDX      AND                       @P2C 00176400
         TM    PB_FLAGS,PB_EWLM_ENABLED    EWLM IS ENABLED              00176500
         JNO   NOEWLMENABLED&SYSNDX      THEN EXTRACT EWLM PARAMS  @P2C 00176600
.*  Check and copy EWLM_PACTKN                                          00176700
         AIF   ('&EWLM_PACTKN' EQ '').EWLMCORRCOPY1                     00176800
         LLILF 0,X'0000FF3F'               DUMMY CORRORELATOR?     @P2A 00176900
         CL    0,PB_EWLM_PARENTCORRELATOR                          @P2C 00177000
         JE    EWLMCOPYPARCORR&SYSNDX      COPY  IF EQUAL          @P2C 00177100
         NC    PB_EWLM_PARENTCORRELATOR(4),PB_EWLM_PARENTCORRELATOR     00177200
         JZ    EWLMCORRFILLERR&SYSNDX      ERROR IF EMPTY          @P2C 00177300
         TM    PB_EWLM_PARENTCORRELATOR+5,X'04' CORR COMPRESSED ?       00177400
         JNO   EWLMCORRFILLERR&SYSNDX      ERROR IF BIT NOT SET    @P2C 00177500
EWLMCOPYPARCORR&SYSNDX DS 0H           BRANCH LABEL COPY PAR CORR       00177600
         AIF   ('&XEWLM_PACTKN'(1,1) NE '(').EWLMPACTKN10               00177700
&ZCGPR   SETC  '&XEWLM_PACTKN'(2,K'&XEWLM_PACTKN-2)                     00177800
         MVC   0(L'PB_EWLM_PARENTCORRELATOR,&ZCGPR),PB_EWLM_PARENTCORRE*00177900
               LATOR EXTRACT PACTKN                                     00178000
         AGO   .EWLMPACTKN20                                            00178100
.EWLMPACTKN10 ANOP                                                      00178200
         MVC   &EWLM_PACTKN,PB_EWLM_PARENTCORRELATOR EXTRACT PACTKN     00178300
.EWLMPACTKN20 ANOP                                                      00178400
.EWLMCORRCOPY1  ANOP ,                                                  00178500
.*  Check and copy EWLM_CHCORR                                          00178600
         AIF   ('&EWLM_CHCORR' EQ '').EWLMCORRCOPY2                     00178700
         NC    PB_EWLM_CURRENTCORRELATOR(4),PB_EWLM_CURRENTCORRELATOR   00178800
         JZ    EWLMCORRFILLERR&SYSNDX      ERROR IF EMPTY          @P2C 00178900
         AIF   ('&XEWLM_CHCORR'(1,1) NE '(').EWLMCHCORR10               00179000
&ZCGPR   SETC  '&XEWLM_CHCORR'(2,K'&XEWLM_CHCORR-2)                     00179100
         MVC   0(L'PB_EWLM_CURRENTCORRELATOR,&ZCGPR),PB_EWLM_CURRENTCOR*00179200
               RELATOR EXTRACT CHCORR                                   00179300
         AGO   .EWLMCHCORR20                                            00179400
.EWLMCHCORR10 ANOP                                                      00179500
         MVC   &EWLM_CHCORR,PB_EWLM_CURRENTCORRELATOR EXTRACT CHCORR    00179600
.EWLMCHCORR20 ANOP                                                      00179700
.EWLMCORRCOPY2  ANOP ,                                                  00179800
         J     ENDEWLMCORREXTR&SYSNDX      RETURN WITH RC = 0      @P2C 00179900
.*                                                                      00180000
EWLMCORRFILLERR&SYSNDX DS 0H    BRANCH LABEL FOR ERROR                  00180100
         LA    15,IWMRETCODEWARNING        SET WARNING RETURN CODE      00180200
         LA    0,IWMRSNCODEMONENVLACKSINFO SET RSN CODE                 00180300
         J     END&SYSNDX                  END LABEL RC NOT 0      @P2C 00180400
.*                                                                      00180500
NOEWLMENABLED&SYSNDX DS 0H      BRANCH LABEL FOR EWLM NOT ENABLED       00180600
         LA    15,IWMRETCODEINVOCERROR       SET RETURN CODE            00180700
         LA    0,IWMRSNCODEEWLMSERVNOTENABLED  AND RSN CODE.            00180800
         J     END&SYSNDX                  END LABEL RC NOT 0      @P2C 00180900
.*                                                                      00181000
NOEWLMSUPPORT&SYSNDX DS 0H      BRANCH LABEL FOR EWLM NOT SUPPORTED     00181100
         AIF   ('&EWLM_PACTKN' EQ '').EWLMCORRFILL1                     00181200
         AIF   ('&XEWLM_PACTKN'(1,1) NE '(').EWLMPACTKN30               00181300
&ZCGPR   SETC  '&XEWLM_PACTKN'(2,K'&XEWLM_PACTKN-2)                     00181400
         XC    0(L'PB_EWLM_PARENTCORRELATOR,&ZCGPR),0(&ZCGPR)           00181500
*                                            FILL DUMMY CORRELATOR      00181600
         MVC   0(L'PB_EWLM_PARENTCORRELATOR,&ZCGPR),=X'0000FF3F'        00181700
         AGO   .EWLMPACTKN40                                            00181800
.EWLMPACTKN30 ANOP                                                      00181900
         XC    &EWLM_PACTKN,&EWLM_PACTKN                                00182000
         MVC   &EWLM_PACTKN.(4),=X'0000FF3F' FILL DUMMY CORR            00182100
.EWLMPACTKN40 ANOP                                                      00182200
.EWLMCORRFILL1 ANOP ,                                                   00182300
         AIF   ('&EWLM_CHCORR' EQ '').EWLMCORRFILL2                     00182400
         AIF   ('&XEWLM_CHCORR'(1,1) NE '(').EWLMCHCORR30               00182500
&ZCGPR   SETC  '&XEWLM_CHCORR'(2,K'&XEWLM_CHCORR-2)                     00182600
         XC    0(L'PB_EWLM_CURRENTCORRELATOR,&ZCGPR),0(&ZCGPR)          00182700
*                                            FILL DUMMY CORRELATOR      00182800
         MVC   0(L'PB_EWLM_CURRENTCORRELATOR,&ZCGPR),=X'0000FF3F'       00182900
         AGO   .EWLMCHCORR40                                            00183000
.EWLMCHCORR30 ANOP                                                      00183100
         XC    &EWLM_CHCORR,&EWLM_CHCORR                                00183200
         MVC   &EWLM_CHCORR.(4),=X'0000FF3F' FILL DUMMY CORR            00183300
.EWLMCHCORR40 ANOP                                                      00183400
.EWLMCORRFILL2 ANOP ,                                                   00183500
.*                                                                      00183600
ENDEWLMCORREXTR&SYSNDX DS 0H    BRANCH LABEL FOR RC = 0                 00183700
.*        END LABEL FOR BRANCH AROUND EWLM PROCESSING:                  00183800
.SKIPEWLMCORREXTR ANOP                                                  00183900
.******************************************************************     00184000
.* End EWLM support: fill correlators                             *     00184100
.******************************************************************     00184200
.******************************************************************     00184300
.*     Begin Message Level Support                        @LEWLMQ       00184400
.******************************************************************     00184500
         AIF   ('&EWLM_S_CURCORR' EQ '').NOSCURCORR                     00184600
         CLI   PB_VERSION,PB_VERSION6                                   00184700
         JNH   S_CORR_OK&SYSNDX        BRANCH IF VERSION <= 6      @P2C 00184800
.*       Version > 6                                                    00184900
         NC    PB_EWLM_MQ_STARTTIME(8),PB_EWLM_MQ_STARTTIME             00185000
         JNZ   EXTRCORR&SYSNDX         BRANCH IF WORK UNIT STARTED @P2C 00185100
.*       STARTTIME = HEX00                                              00185200
         LA    15,IWMRETCODEINVOCERROR                                  00185300
         LA    0,IWMRSNCODETRANNOTSTARTED                               00185400
         J     END&SYSNDX              BRANCH TO END LABEL         @P2C 00185500
EXTRCORR&SYSNDX DS  0H                 LABEL EXTRACT S_CURCORR          00185600
.*       Request started, extract correlator                            00185700
         AIF   ('&XEWLM_S_CURCORR'(1,1) EQ '(').SCURCORRREG             00185800
.*       Store correlator in variable                                   00185900
         MVC   &XEWLM_S_CURCORR,PB_EWLM_MQ_CURRCORR                     00186000
         AGO   .ENDSCURCORR                                             00186100
.SCURCORRREG   ANOP                                                     00186200
.*       Store correlator in variable addressed by input register       00186300
&ZCGPR   SETC  '&XEWLM_S_CURCORR'(2,K'&XEWLM_S_CURCORR-2)               00186400
         MVC   0(L'PB_EWLM_MQ_CURRCORR,&ZCGPR),PB_EWLM_MQ_CURRCORR      00186500
.ENDSCURCORR  ANOP                                                      00186600
S_CORR_OK&SYSNDX DS  0H                LABEL END S_CURCORR PROCESSING   00186700
         SLR   0,0                     SET REASON CODE = 0              00186800
         SLR   15,15                   SET RETURN CODE = 0              00186900
.NOSCURCORR   ANOP                                                      00187000
.******************************************************************     00187100
.*     End   Message Level Support                        @LEWLMQ       00187200
.******************************************************************     00187300
.*                                                                      00187400
         DROP  14                                                       00187500
END&SYSNDX  DS    0H                    END LABEL For RC unchanged      00187600
         AIF   ('&SYSAM64' EQ 'YES').SWAM31                             00187700
         AIF   ('&MONTKN64' EQ '').SWAM31                               00187800
         SAM31                                                          00187900
.SWAM31  ANOP                                                           00188000
.*******************************************************************    00188100
.***        RETURN CODE PROCESSING                                      00188200
.*******************************************************************    00188300
         AIF   (N'&RETCODE LE 0).IWM4MXTR_ENDRC_EXP                     00188400
         AIF   ('&XRETCODE'(1,1) EQ '(').IWM4MXTR_RC_REG                00188500
         AIF   ('&XRETCODE' EQ 'GPR15').IWM4MXTR_ENDRC_EXP              00188600
         AIF   ('&XRETCODE' EQ 'REG15').IWM4MXTR_ENDRC_EXP              00188700
         AIF   ('&XRETCODE' EQ 'R15').IWM4MXTR_ENDRC_EXP                00188800
         AIF   ('&XRETCODE' EQ '15').IWM4MXTR_ENDRC_EXP                 00188900
         ST    15,&XRETCODE                                             00189000
            AGO  .IWM4MXTR_ENDRC_EXP                                    00189100
.*                                                                      00189200
.IWM4MXTR_RC_REG      ANOP  ,                                           00189300
&T1      SETC  '&XRETCODE'(2,K'&XRETCODE-2)                             00189400
         AIF   ('&T1' EQ 'GPR15').IWM4MXTR_ENDRC_EXP                    00189500
         AIF   ('&T1' EQ 'REG15').IWM4MXTR_ENDRC_EXP                    00189600
         AIF   ('&T1' EQ 'R15').IWM4MXTR_ENDRC_EXP                      00189700
         AIF   ('&T1' EQ '15').IWM4MXTR_ENDRC_EXP                       00189800
         LR    &T1,15                                                   00189900
.IWM4MXTR_ENDRC_EXP   ANOP  ,                                           00190000
.*******************************************************************    00190100
.***        REASON CODE PROCESSING                                      00190200
.*******************************************************************    00190300
         AIF   (N'&RSNCODE LE 0).IWM4MXTR_ENDRSN_EXP                    00190400
         AIF   ('&XRSNCODE'(1,1) EQ '(').IWM4MXTR_RSN_REG               00190500
         AIF   ('&XRSNCODE' EQ 'GPR0').IWM4MXTR_ENDRSN_EXP              00190600
         AIF   ('&XRSNCODE' EQ 'GPR00').IWM4MXTR_ENDRSN_EXP             00190700
         AIF   ('&XRSNCODE' EQ 'REG0').IWM4MXTR_ENDRSN_EXP              00190800
         AIF   ('&XRSNCODE' EQ 'REG00').IWM4MXTR_ENDRSN_EXP             00190900
         AIF   ('&XRSNCODE' EQ 'R0').IWM4MXTR_ENDRSN_EXP                00191000
         AIF   ('&XRSNCODE' EQ '0').IWM4MXTR_ENDRSN_EXP                 00191100
         AIF   ('&XRSNCODE' EQ '00').IWM4MXTR_ENDRSN_EXP                00191200
         ST    0,&XRSNCODE                                              00191300
         AGO   .IWM4MXTR_ENDRSN_EXP                                     00191400
.*                                                                      00191500
.IWM4MXTR_RSN_REG     ANOP  ,                                           00191600
&T1      SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                             00191700
         AIF   ('&ZCGPR' EQ 'GPR0').IWM4MXTR_ENDRSN_EXP                 00191800
         AIF   ('&ZCGPR' EQ 'GPR00').IWM4MXTR_ENDRSN_EXP                00191900
         AIF   ('&ZCGPR' EQ 'REG0').IWM4MXTR_ENDRSN_EXP                 00192000
         AIF   ('&ZCGPR' EQ 'REG00').IWM4MXTR_ENDRSN_EXP                00192100
         AIF   ('&ZCGPR' EQ 'R0').IWM4MXTR_ENDRSN_EXP                   00192200
         AIF   ('&ZCGPR' EQ '0').IWM4MXTR_ENDRSN_EXP                    00192300
         AIF   ('&ZCGPR' EQ '00').IWM4MXTR_ENDRSN_EXP                   00192400
         LR    &T1,0                                                    00192500
.IWM4MXTR_ENDRSN_EXP  ANOP  ,                                           00192600
.*******************************************************************    00192700
&ZIWM4MXTR            SETC  'YES'          SET IWM4MXTR USED            00192800
         POP   PRINT                                                    00192900
.*                                           IWM4MXTR END               00193000
         SPACE 1                                                        00193100
         MEXIT                                                          00193200
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*  00193300
.********************************************************************   00193400
.***AL.A01  INTERNAL ARRAY TO PRODUCE FORMATTED CODE                    00193500
.********************************************************************   00193600
                      LCLA  &ZOPN          LIST INSTRUCTION INDEX       00193700
                      LCLA  &ZOPN1         INVOCATION INDEX             00193800
                      LCLC  &ZOPL(4095)    LABEL                        00193900
                      LCLC  &ZOPO(4095)    OPERATION                    00194000
                      LCLC  &ZOPV(4095)    VALUE                        00194100
                      LCLC  &ZOPD(4095)    DESCRIPTION                  00194200
.*                                                                      00194300
&ZOPN                 SETA  0              INITIAL INST INDEX VALUE     00194400
.*******************************************************************    00194500
.***AO.X02  RETURN CODE PROCESSING                                      00194600
.*******************************************************************    00194700
                      AIF   (N'&RETCODE LE 0).ZMRETX                    00194800
                      AIF   ('&XRETCODE'(1,1) EQ '(').ZMRET2            00194900
                      AIF   ('&XRETCODE' EQ 'GPR15').ZMRETX             00195000
                      AIF   ('&XRETCODE' EQ 'REG15').ZMRETX             00195100
                      AIF   ('&XRETCODE' EQ 'R15').ZMRETX               00195200
                      AIF   ('&XRETCODE' EQ '15').ZMRETX                00195300
&ZOPN                 SETA  &ZOPN+1                                     00195400
&ZOPL(&ZOPN)          SETC  ' '                                         00195500
&ZOPO(&ZOPN)          SETC  'ST'                                        00195600
&ZOPV(&ZOPN)          SETC  '15,&XRETCODE'                              00195700
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00195800
                      AGO   .ZMRETX                                     00195900
.*                                                                      00196000
.ZMRET2               ANOP  ,                                           00196100
&ZCGPR                SETC  '&XRETCODE'(2,K'&XRETCODE-2)                00196200
                      AIF   ('&ZCGPR' EQ 'GPR15').ZMRETX                00196300
                      AIF   ('&ZCGPR' EQ 'REG15').ZMRETX                00196400
                      AIF   ('&ZCGPR' EQ 'R15').ZMRETX                  00196500
                      AIF   ('&ZCGPR' EQ '15').ZMRETX                   00196600
&ZOPN                 SETA  &ZOPN+1                                     00196700
&ZOPL(&ZOPN)          SETC  ' '                                         00196800
&ZOPO(&ZOPN)          SETC  '&ZMAC_LR'                                  00196900
&ZOPV(&ZOPN)          SETC  '&ZCGPR,15'                                 00197000
&ZOPD(&ZOPN)          SETC  '++ SET RETURN CODE'                        00197100
.ZMRETX               ANOP  ,                                           00197200
.*******************************************************************    00197300
.***AO.X03  REASON CODE PROCESSING                                      00197400
.*******************************************************************    00197500
                      AIF   (N'&RSNCODE LE 0).ZMRSNX                    00197600
                      AIF   ('&XRSNCODE'(1,1) EQ '(').ZMRSN2            00197700
                      AIF   ('&XRSNCODE' EQ 'GPR0').ZMRSNX              00197800
                      AIF   ('&XRSNCODE' EQ 'GPR00').ZMRSNX             00197900
                      AIF   ('&XRSNCODE' EQ 'REG0').ZMRSNX              00198000
                      AIF   ('&XRSNCODE' EQ 'REG00').ZMRSNX             00198100
                      AIF   ('&XRSNCODE' EQ 'R0').ZMRSNX                00198200
                      AIF   ('&XRSNCODE' EQ '0').ZMRSNX                 00198300
                      AIF   ('&XRSNCODE' EQ '00').ZMRSNX                00198400
&ZOPN                 SETA  &ZOPN+1                                     00198500
&ZOPL(&ZOPN)          SETC  ' '                                         00198600
&ZOPO(&ZOPN)          SETC  'ST'                                        00198700
&ZOPV(&ZOPN)          SETC  '0,&XRSNCODE'                               00198800
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00198900
                      AGO   .ZMRSNX                                     00199000
.*                                                                      00199100
.ZMRSN2               ANOP  ,                                           00199200
&ZCGPR                SETC  '&XRSNCODE'(2,K'&XRSNCODE-2)                00199300
                      AIF   ('&ZCGPR' EQ 'GPR0').ZMRSNX                 00199400
                      AIF   ('&ZCGPR' EQ 'GPR00').ZMRSNX                00199500
                      AIF   ('&ZCGPR' EQ 'REG0').ZMRSNX                 00199600
                      AIF   ('&ZCGPR' EQ 'REG00').ZMRSNX                00199700
                      AIF   ('&ZCGPR' EQ 'R0').ZMRSNX                   00199800
                      AIF   ('&ZCGPR' EQ '0').ZMRSNX                    00199900
                      AIF   ('&ZCGPR' EQ '00').ZMRSNX                   00200000
&ZOPN                 SETA  &ZOPN+1                                     00200100
&ZOPL(&ZOPN)          SETC  ' '                                         00200200
&ZOPO(&ZOPN)          SETC  '&ZMAC_LR'                                  00200300
&ZOPV(&ZOPN)          SETC  '&ZCGPR,0'                                  00200400
&ZOPD(&ZOPN)          SETC  '++ SET REASON CODE'                        00200500
.ZMRSNX               ANOP  ,                                           00200600
.*******************************************************************    00200700
.***AO.X05  FORMAT GENERATED INSTRUCTIONS                               00200800
.*******************************************************************    00200900
                      ACTR  10000                                       00201000
.*                                                                      00201100
                      LCLA  &ZLC           COLUMN POSITION              00201200
                      LCLA  &ZOPX          LIST TABLE INDEX             00201300
                      LCLC  &ZLL           LABEL                        00201400
                      LCLC  &ZLOP          OPERATION                    00201500
                      LCLC  &ZLV           VALUE                        00201600
                      LCLC  &ZLD           DESCRIPTION                  00201700
.*                                                                      00201800
&ZOPX                 SETA  1                                           00201900
.*******************************************************************    00202000
.***AP.X01  FORMAT GENERATED CODE                                       00202100
.ZL21                 AIF   (&ZOPX GT &ZOPN).ZLX1  B IF DONE            00202200
&ZLL                  SETC  '&ZOPL(&ZOPX)'                              00202300
&ZLOP                 SETC  '&ZOPO(&ZOPX)'                              00202400
&ZLV                  SETC  '&ZOPV(&ZOPX)'                              00202500
&ZLD                  SETC  '&ZOPD(&ZOPX)'                              00202600
                      AIF   (K'&ZLD LE 0).ZL51                          00202700
&ZLC                  SETA  35             COMMENT COLUMN               00202800
                      AIF   ('&ZLD'(1,1) NE '*').ZL31                   00202900
&ZLC                  SETA  33             COMMENT COLUMN               00203000
.ZL31                 AIF   (K'&ZLV GE &ZLC-16-1).ZL41                  00203100
&ZLV                  SETC  '&ZLV'.' '                                  00203200
                      AGO   .ZL31                                       00203300
.*                                                                      00203400
.ZL41                 ANOP  ,                                           00203500
&ZLV                  SETC  '&ZLV'.' '                                  00203600
.ZL51                 ANOP  ,                                           00203700
&ZLV                  SETC  '&ZLV'.'&ZLD'                               00203800
.*                                                                      00203900
&ZLL     &ZLOP &ZLV                                                     00204000
.*                                                                      00204100
&ZOPX                 SETA  &ZOPX+1        NEXT STRUCTURE               00204200
                      AGO   .ZL21          CONTINUE LOOPING             00204300
.*                                                                      00204400
.ZLX1                 ANOP  ,                                           00204500
.*******************************************************************    00204600
.***AP.X02  END OF IWM4MXTR MACRO                                       00204700
&ZIWM4MXTR            SETC  'YES'          SET IWM4MXTR USED            00204800
         POP   PRINT                                                    00204900
*                                            IWM4MXTR-0                 00205000
         SPACE 1                                                        00205100
.ZLX2                 ANOP  ,                                           00205200
         MEND                                                           00205300
**********************************************************************/ 00205400
*/*PB.OC01 INVOKE MACRO---------------------------------------------*/  00205500
*%IWM4MXTR: MACRO KEYS(MONTKN,MONTKN64,EWLM,OMONTKN,OMONTKN64,          00205600
*                 OWNER_TOKEN,OWNER_DATA,ARRIVALTIME,TRXNAME,USERID,    00205700
*                 SERVCLS,ASID,ENCLAVE_TOKEN,TTRACETOKEN,               00205800
*                 ABNORMAL_COND,EWLM_CHCORR,EWLM_PACTKN,                00205900
*                 EWLM_S_CURCORR,RETCODE,RSNCODE);                      00206000
*  ANS('?'!!MACLABEL!!' '!!'IWM4MXTP '!!MACLIST!!                       00206100
*         ' '!!MACKEYS!!';') COL(MACLMAR);                              00206200
*%END IWM4MXTR;                                                         00206300
